

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Fri Sep 15 13:13:44 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK3,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    19                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    22                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	text0,global,reloc=2,class=CODE,delta=1
    24                           	psect	text1,global,reloc=2,class=CODE,delta=1
    25                           	psect	text2,global,reloc=2,class=CODE,delta=1
    26                           	psect	text3,global,reloc=2,class=CODE,delta=1
    27                           	psect	text4,global,reloc=2,class=CODE,delta=1
    28                           	psect	text5,global,reloc=2,class=CODE,delta=1
    29                           	psect	text6,global,reloc=2,class=CODE,delta=1
    30                           	psect	text7,global,reloc=2,class=CODE,delta=1
    31                           	psect	text8,global,reloc=2,class=CODE,delta=1
    32                           	psect	text9,global,reloc=2,class=CODE,delta=1
    33                           	psect	text10,global,reloc=2,class=CODE,delta=1
    34                           	psect	text11,global,reloc=2,class=CODE,delta=1
    35                           	psect	text12,global,reloc=2,class=CODE,delta=1
    36                           	psect	text13,global,reloc=2,class=CODE,delta=1
    37                           	psect	text14,global,reloc=2,class=CODE,delta=1
    38                           	psect	text15,global,reloc=2,class=CODE,delta=1
    39                           	psect	text16,global,reloc=2,class=CODE,delta=1
    40                           	psect	text17,global,reloc=2,class=CODE,delta=1
    41                           	psect	text18,global,reloc=2,class=CODE,delta=1
    42                           	psect	text19,global,reloc=2,class=CODE,delta=1
    43                           	psect	text20,global,reloc=2,class=CODE,delta=1
    44                           	psect	text21,global,reloc=2,class=CODE,delta=1
    45                           	psect	text22,global,reloc=2,class=CODE,delta=1
    46                           	psect	text23,global,reloc=2,class=CODE,delta=1
    47                           	psect	text24,global,reloc=2,class=CODE,delta=1,inline
    48                           	psect	text25,global,reloc=2,class=CODE,delta=1
    49                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text27,global,reloc=2,class=CODE,delta=1
    51                           	psect	text28,global,reloc=2,class=CODE,delta=1
    52                           	psect	text29,global,reloc=2,class=CODE,delta=1
    53                           	psect	text30,global,reloc=2,class=CODE,delta=1
    54                           	psect	text31,global,reloc=2,class=CODE,delta=1
    55                           	psect	text32,global,reloc=2,class=CODE,delta=1
    56                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text34,global,reloc=2,class=CODE,delta=1
    58                           	psect	text35,global,reloc=2,class=CODE,delta=1
    59                           	psect	text36,global,reloc=2,class=CODE,delta=1
    60                           	psect	text37,global,reloc=2,class=CODE,delta=1
    61                           	psect	text38,global,reloc=2,class=CODE,delta=1
    62                           	psect	text39,global,reloc=2,class=CODE,delta=1
    63                           	psect	text40,global,reloc=2,class=CODE,delta=1
    64                           	psect	text41,global,reloc=2,class=CODE,delta=1
    65                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text43,global,reloc=2,class=CODE,delta=1
    67                           	psect	text44,global,reloc=2,class=CODE,delta=1
    68                           	psect	text45,global,reloc=2,class=CODE,delta=1
    69                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text49,global,reloc=2,class=CODE,delta=1
    73                           	psect	text50,global,reloc=2,class=CODE,delta=1
    74                           	psect	text51,global,reloc=2,class=CODE,delta=1
    75                           	psect	text52,global,reloc=2,class=CODE,delta=1
    76                           	psect	text53,global,reloc=2,class=CODE,delta=1
    77                           	psect	text54,global,reloc=2,class=CODE,delta=1
    78                           	psect	text55,global,reloc=2,class=CODE,delta=1
    79                           	psect	text56,global,reloc=2,class=CODE,delta=1
    80                           	psect	text57,global,reloc=2,class=CODE,delta=1
    81                           	psect	text58,global,reloc=2,class=CODE,delta=1
    82                           	psect	text59,global,reloc=2,class=CODE,delta=1
    83                           	psect	text60,global,reloc=2,class=CODE,delta=1
    84                           	psect	text61,global,reloc=2,class=CODE,delta=1
    85                           	psect	text62,global,reloc=2,class=CODE,delta=1
    86                           	psect	text63,global,reloc=2,class=CODE,delta=1
    87                           	psect	text64,global,reloc=2,class=CODE,delta=1
    88                           	psect	text65,global,reloc=2,class=CODE,delta=1
    89                           	psect	text66,global,reloc=2,class=CODE,delta=1
    90                           	psect	text67,global,reloc=2,class=CODE,delta=1
    91                           	psect	text68,global,reloc=2,class=CODE,delta=1
    92                           	psect	text69,global,reloc=2,class=CODE,delta=1
    93                           	psect	text70,global,reloc=2,class=CODE,delta=1
    94                           	psect	text71,global,reloc=2,class=CODE,delta=1
    95                           	psect	text72,global,reloc=2,class=CODE,delta=1
    96                           	psect	text73,global,reloc=2,class=CODE,delta=1
    97                           	psect	text74,global,reloc=2,class=CODE,delta=1
    98                           	psect	text75,global,reloc=2,class=CODE,delta=1
    99                           	psect	text76,global,reloc=2,class=CODE,delta=1
   100                           	psect	text77,global,reloc=2,class=CODE,delta=1
   101                           	psect	text78,global,reloc=2,class=CODE,delta=1
   102                           	psect	text79,global,reloc=2,class=CODE,delta=1
   103                           	psect	text80,global,reloc=2,class=CODE,delta=1
   104                           	psect	text81,global,reloc=2,class=CODE,delta=1
   105                           	psect	text82,global,reloc=2,class=CODE,delta=1
   106                           	psect	text83,global,reloc=2,class=CODE,delta=1
   107                           	psect	text84,global,reloc=2,class=CODE,delta=1
   108                           	psect	text85,global,reloc=2,class=CODE,delta=1
   109                           	psect	text86,global,reloc=2,class=CODE,delta=1
   110                           	psect	text87,global,reloc=2,class=CODE,delta=1,inline
   111                           	psect	text88,global,reloc=2,class=CODE,delta=1
   112                           	psect	text89,global,reloc=2,class=CODE,delta=1
   113                           	psect	text90,global,reloc=2,class=CODE,delta=1
   114                           	psect	text91,global,reloc=2,class=CODE,delta=1
   115                           	psect	text92,global,reloc=2,class=CODE,delta=1,inline
   116                           	psect	text93,global,reloc=2,class=CODE,delta=1,inline
   117                           	psect	text94,global,reloc=2,class=CODE,delta=1
   118                           	psect	text95,global,reloc=2,class=CODE,delta=1
   119                           	psect	text96,global,reloc=2,class=CODE,delta=1
   120                           	psect	text97,global,reloc=2,class=CODE,delta=1
   121                           	psect	text98,global,reloc=2,class=CODE,delta=1
   122                           	psect	text99,global,reloc=2,class=CODE,delta=1,group=1
   123                           	psect	text100,global,reloc=2,class=CODE,delta=1
   124                           	psect	text101,global,reloc=2,class=CODE,delta=1
   125                           	psect	text102,global,reloc=2,class=CODE,delta=1
   126                           	psect	text103,global,reloc=2,class=CODE,delta=1
   127                           	psect	text104,global,reloc=2,class=CODE,delta=1
   128                           	psect	text105,global,reloc=2,class=CODE,delta=1
   129                           	psect	text106,global,reloc=2,class=CODE,delta=1
   130                           	psect	text107,global,reloc=2,class=CODE,delta=1
   131                           	psect	text108,global,reloc=2,class=CODE,delta=1
   132                           	psect	text109,global,reloc=2,class=CODE,delta=1
   133                           	psect	text110,global,reloc=2,class=CODE,delta=1
   134                           	psect	text111,global,reloc=2,class=CODE,delta=1
   135                           	psect	text112,global,reloc=2,class=CODE,delta=1
   136                           	psect	text113,global,reloc=2,class=CODE,delta=1
   137                           	psect	text114,global,reloc=2,class=CODE,delta=1
   138                           	psect	text115,global,reloc=2,class=CODE,delta=1,inline
   139                           	psect	text116,global,reloc=2,class=CODE,delta=1
   140                           	psect	text117,global,reloc=2,class=CODE,delta=1
   141                           	psect	text118,global,reloc=2,class=CODE,delta=1
   142                           	psect	text119,global,reloc=2,class=CODE,delta=1
   143                           	psect	text120,global,reloc=2,class=CODE,delta=1
   144                           	psect	text121,global,reloc=2,class=CODE,delta=1
   145                           	psect	text122,global,reloc=2,class=CODE,delta=1
   146                           	psect	text123,global,reloc=2,class=CODE,delta=1
   147                           	psect	text124,global,reloc=2,class=CODE,delta=1
   148                           	psect	text125,global,reloc=2,class=CODE,delta=1
   149                           	psect	text126,global,reloc=2,class=CODE,delta=1
   150                           	psect	text127,global,reloc=2,class=CODE,delta=1
   151                           	psect	text128,global,reloc=2,class=CODE,delta=1
   152                           	psect	text129,global,reloc=2,class=CODE,delta=1
   153                           	psect	text130,global,reloc=2,class=CODE,delta=1
   154                           	psect	text131,global,reloc=2,class=CODE,delta=1
   155                           	psect	text132,global,reloc=2,class=CODE,delta=1
   156                           	psect	text133,global,reloc=2,class=CODE,delta=1
   157                           	psect	text134,global,reloc=2,class=CODE,delta=1
   158                           	psect	text135,global,reloc=2,class=CODE,delta=1
   159                           	psect	text136,global,reloc=2,class=CODE,delta=1
   160                           	psect	text137,global,reloc=2,class=CODE,delta=1
   161                           	psect	text138,global,reloc=2,class=CODE,delta=1
   162                           	psect	text139,global,reloc=2,class=CODE,delta=1
   163                           	psect	text140,global,reloc=2,class=CODE,delta=1
   164                           	psect	text141,global,reloc=2,class=CODE,delta=1
   165                           	psect	text142,global,reloc=2,class=CODE,delta=1
   166                           	psect	text143,global,reloc=2,class=CODE,delta=1,group=1
   167                           	psect	text144,global,reloc=2,class=CODE,delta=1,group=1
   168                           	psect	text145,global,reloc=2,class=CODE,delta=1
   169                           	psect	text146,global,reloc=2,class=CODE,delta=1
   170                           	psect	text147,global,reloc=2,class=CODE,delta=1
   171                           	psect	text148,global,reloc=2,class=CODE,delta=1
   172                           	psect	text149,global,reloc=2,class=CODE,delta=1
   173                           	psect	text150,global,reloc=2,class=CODE,delta=1
   174                           	psect	text151,global,reloc=2,class=CODE,delta=1
   175                           	psect	text152,global,reloc=2,class=CODE,delta=1
   176                           	psect	text153,global,reloc=2,class=CODE,delta=1,inline
   177                           	psect	text154,global,reloc=2,class=CODE,delta=1
   178                           	psect	text155,global,reloc=2,class=CODE,delta=1
   179                           	psect	text156,global,reloc=2,class=CODE,delta=1
   180                           	psect	text157,global,reloc=2,class=CODE,delta=1
   181                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   182                           	psect	text159,global,reloc=2,class=CODE,delta=1
   183                           	psect	text160,global,reloc=2,class=CODE,delta=1
   184                           	psect	text161,global,reloc=2,class=CODE,delta=1
   185                           	psect	text162,global,reloc=2,class=CODE,delta=1
   186                           	psect	text163,global,reloc=2,class=CODE,delta=1
   187                           	psect	text164,global,reloc=2,class=CODE,delta=1
   188                           	psect	text165,global,reloc=2,class=CODE,delta=1
   189                           	psect	text166,global,reloc=2,class=CODE,delta=1,inline
   190                           	psect	text167,global,reloc=2,class=CODE,delta=1
   191                           	psect	text168,global,reloc=2,class=CODE,delta=1
   192                           	psect	text169,global,reloc=2,class=CODE,delta=1
   193                           	psect	text170,global,reloc=2,class=CODE,delta=1
   194                           	psect	text171,global,reloc=2,class=CODE,delta=1
   195                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   196                           	psect	text172,global,reloc=2,class=CODE,delta=1
   197                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   198                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   199  0000                     
   200                           ; Version 1.43
   201                           ; Generated 25/07/2017 GMT
   202                           ; 
   203                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   204                           ; All rights reserved.
   205                           ; 
   206                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   207                           ; 
   208                           ; Redistribution and use in source and binary forms, with or without modification, are
   209                           ; permitted provided that the following conditions are met:
   210                           ; 
   211                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   212                           ;        conditions and the following disclaimer.
   213                           ; 
   214                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   215                           ;        of conditions and the following disclaimer in the documentation and/or other
   216                           ;        materials provided with the distribution.
   217                           ; 
   218                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   219                           ;        software without specific prior written permission.
   220                           ; 
   221                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   222                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   223                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   224                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   225                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   226                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   227                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   228                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   229                           ; 
   230                           ; 
   231                           ; Code-generator required, PIC18F67J50 Definitions
   232                           ; 
   233                           ; SFR Addresses
   234  0000                     
   235                           	psect	idataCOMRAM
   236  01664C                     __pidataCOMRAM:
   237                           	opt stack 0
   238                           
   239                           ;initializer for _gCursor
   240  01664C  0006               	dw	6
   241  01664E  0006               	dw	6
   242                           
   243                           ;initializer for _Bus_State
   244  016650  01                 	db	1
   245                           
   246                           ;initializer for _A
   247  016651  41                 	db	65
   248                           
   249                           ;initializer for _a
   250  016652  61                 	db	97
   251                           
   252                           ;initializer for _zero
   253  016653  30                 	db	48
   254                           
   255                           ;initializer for _l
   256  016654  80                 	db	128
   257                           
   258                           ;initializer for _w
   259  016655  80                 	db	128
   260                           
   261                           	psect	idataBANK0
   262  016682                     __pidataBANK0:
   263                           	opt stack 0
   264                           
   265                           ;initializer for _TimerX
   266  016682  0008               	dw	8
   267                           
   268                           ;initializer for _MinDist
   269  016684  03E8               	dw	1000
   270                           
   271                           ;initializer for _gForecolour
   272  016686  FFFF               	dw	65535
   273                           
   274                           ;initializer for _change
   275  016688  01                 	db	1
   276                           
   277                           	psect	idataBANK3
   278  01661C                     __pidataBANK3:
   279                           	opt stack 0
   280                           
   281                           ;initializer for Console_Render@F6956
   282  01661C  0006               	dw	6
   283  01661E  0006               	dw	6
   284                           
   285                           ;initializer for _gLineSize
   286  016620  0080               	dw	128
   287  016622  0007               	dw	7
   288                           
   289                           ;initializer for _gCharSize
   290  016624  0005               	dw	5
   291  016626  0007               	dw	7
   292                           
   293                           	psect	mediumconst
   294  00FC32                     __pmediumconst:
   295                           	opt stack 0
   296  00FC32  00                 	db	0
   297  00FC33                     _InitList:
   298                           	opt stack 0
   299  00FC33  1100               	dw	4352
   300  00FC35  0080               	dw	128
   301  00FC37  012C               	dw	300
   302  00FC39  B100               	dw	45312
   303  00FC3B  0002               	dw	2
   304  00FC3D  0035               	dw	53
   305  00FC3F  0036               	dw	54
   306  00FC41  B200               	dw	45568
   307  00FC43  0002               	dw	2
   308  00FC45  0035               	dw	53
   309  00FC47  0036               	dw	54
   310  00FC49  B300               	dw	45824
   311  00FC4B  0002               	dw	2
   312  00FC4D  0035               	dw	53
   313  00FC4F  0036               	dw	54
   314  00FC51  0002               	dw	2
   315  00FC53  0035               	dw	53
   316  00FC55  0036               	dw	54
   317  00FC57  B400               	dw	46080
   318  00FC59  0000               	dw	0
   319  00FC5B  C000               	dw	49152
   320  00FC5D  00A2               	dw	162
   321  00FC5F  0002               	dw	2
   322  00FC61  0084               	dw	132
   323  00FC63  C100               	dw	49408
   324  00FC65  00C5               	dw	197
   325  00FC67  C200               	dw	49664
   326  00FC69  000D               	dw	13
   327  00FC6B  0000               	dw	0
   328  00FC6D  C300               	dw	49920
   329  00FC6F  008D               	dw	141
   330  00FC71  002A               	dw	42
   331  00FC73  C400               	dw	50176
   332  00FC75  008D               	dw	141
   333  00FC77  00EE               	dw	238
   334  00FC79  C500               	dw	50432
   335  00FC7B  000A               	dw	10
   336  00FC7D  3600               	dw	13824
   337  00FC7F  00C8               	dw	200
   338  00FC81  E000               	dw	57344
   339  00FC83  0012               	dw	18
   340  00FC85  001C               	dw	28
   341  00FC87  0010               	dw	16
   342  00FC89  0018               	dw	24
   343  00FC8B  0033               	dw	51
   344  00FC8D  002C               	dw	44
   345  00FC8F  0025               	dw	37
   346  00FC91  0028               	dw	40
   347  00FC93  0028               	dw	40
   348  00FC95  0027               	dw	39
   349  00FC97  002F               	dw	47
   350  00FC99  003C               	dw	60
   351  00FC9B  0000               	dw	0
   352  00FC9D  0003               	dw	3
   353  00FC9F  0003               	dw	3
   354  00FCA1  0010               	dw	16
   355  00FCA3  0080               	dw	128
   356  00FCA5  0078               	dw	120
   357  00FCA7  E100               	dw	57600
   358  00FCA9  0012               	dw	18
   359  00FCAB  001C               	dw	28
   360  00FCAD  0010               	dw	16
   361  00FCAF  0018               	dw	24
   362  00FCB1  002D               	dw	45
   363  00FCB3  0028               	dw	40
   364  00FCB5  0023               	dw	35
   365  00FCB7  0028               	dw	40
   366  00FCB9  0028               	dw	40
   367  00FCBB  0026               	dw	38
   368  00FCBD  002F               	dw	47
   369  00FCBF  003B               	dw	59
   370  00FCC1  0000               	dw	0
   371  00FCC3  0003               	dw	3
   372  00FCC5  0003               	dw	3
   373  00FCC7  0010               	dw	16
   374  00FCC9  3A00               	dw	14848
   375  00FCCB  0005               	dw	5
   376  00FCCD  2A00               	dw	10752
   377  00FCCF  0000               	dw	0
   378  00FCD1  0002               	dw	2
   379  00FCD3  0000               	dw	0
   380  00FCD5  0081               	dw	129
   381  00FCD7  2B00               	dw	11008
   382  00FCD9  0000               	dw	0
   383  00FCDB  0003               	dw	3
   384  00FCDD  0000               	dw	0
   385  00FCDF  00A2               	dw	162
   386  00FCE1  2900               	dw	10496
   387  00FCE3  2C00               	dw	11264
   388  00FCE5                     __end_of_InitList:
   389                           	opt stack 0
   390  00FCE5                     Timer0_Init@PRESCALE:
   391                           	opt stack 0
   392  00FCE5  0002               	dw	2
   393  00FCE7  0004               	dw	4
   394  00FCE9  0008               	dw	8
   395  00FCEB  0010               	dw	16
   396  00FCED  0020               	dw	32
   397  00FCEF  0040               	dw	64
   398  00FCF1  0080               	dw	128
   399  00FCF3  0100               	dw	256
   400  00FCF5                     __end_ofTimer0_Init@PRESCALE:
   401                           	opt stack 0
   402  00FCF5                     PortProperty_Valid@F6830:
   403                           	opt stack 0
   404  00FCF5  00                 	db	0
   405  00FCF6  01                 	db	1
   406  00FCF7  02                 	db	2
   407  00FCF8  00                 	db	0
   408  00FCF9  01                 	db	1
   409  00FCFA  00                 	db	0
   410  00FCFB  01                 	db	1
   411  00FCFC  00                 	db	0
   412  00FCFD  02                 	db	2
   413  00FCFE  02                 	db	2
   414  00FCFF  00                 	db	0
   415  00FD00  00                 	db	0
   416  00FD01  03                 	db	3
   417  00FD02  03                 	db	3
   418  00FD03  03                 	db	3
   419  00FD04  00                 	db	0
   420  00FD05                     __end_ofPortProperty_Valid@F6830:
   421                           	opt stack 0
   422  00FD05                     _dpowers:
   423                           	opt stack 0
   424  00FD05  0001               	dw	1
   425  00FD07  000A               	dw	10
   426  00FD09  0064               	dw	100
   427  00FD0B  03E8               	dw	1000
   428  00FD0D  2710               	dw	10000
   429  00FD0F                     __end_of_dpowers:
   430                           	opt stack 0
   431  00FD0F                     _MASKS:
   432                           	opt stack 0
   433  00FD0F  00                 	db	0
   434  00FD10  01                 	db	1
   435  00FD11  03                 	db	3
   436  00FD12  07                 	db	7
   437  00FD13  0F                 	db	15
   438  00FD14  1F                 	db	31
   439  00FD15  3F                 	db	63
   440  00FD16  7F                 	db	127
   441  00FD17  FF                 	db	255
   442  00FD18                     __end_of_MASKS:
   443                           	opt stack 0
   444  00FD18                     HMI_SetButton@F7213:
   445                           	opt stack 0
   446  00FD18  00                 	db	0
   447  00FD19  02                 	db	2
   448  00FD1A  01                 	db	1
   449  00FD1B  03                 	db	3
   450  00FD1C                     __end_ofHMI_SetButton@F7213:
   451                           	opt stack 0
   452  00FD1C                     Timer2_Init@PRESCALE:
   453                           	opt stack 0
   454  00FD1C  01                 	db	1
   455  00FD1D  04                 	db	4
   456  00FD1E  10                 	db	16
   457  00FD1F                     __end_ofTimer2_Init@PRESCALE:
   458                           	opt stack 0
   459  00FD1F                     _Font5x7:
   460                           	opt stack 0
   461  00FD1F  00                 	db	0
   462  00FD20  00                 	db	0
   463  00FD21  00                 	db	0
   464  00FD22  00                 	db	0
   465  00FD23  00                 	db	0
   466  00FD24  00                 	db	0
   467  00FD25  00                 	db	0
   468  00FD26  5F                 	db	95
   469  00FD27  00                 	db	0
   470  00FD28  00                 	db	0
   471  00FD29  00                 	db	0
   472  00FD2A  07                 	db	7
   473  00FD2B  00                 	db	0
   474  00FD2C  07                 	db	7
   475  00FD2D  00                 	db	0
   476  00FD2E  14                 	db	20
   477  00FD2F  7F                 	db	127
   478  00FD30  14                 	db	20
   479  00FD31  7F                 	db	127
   480  00FD32  14                 	db	20
   481  00FD33  24                 	db	36
   482  00FD34  2A                 	db	42
   483  00FD35  7F                 	db	127
   484  00FD36  2A                 	db	42
   485  00FD37  12                 	db	18
   486  00FD38  23                 	db	35
   487  00FD39  13                 	db	19
   488  00FD3A  08                 	db	8
   489  00FD3B  64                 	db	100
   490  00FD3C  62                 	db	98
   491  00FD3D  36                 	db	54
   492  00FD3E  49                 	db	73
   493  00FD3F  55                 	db	85
   494  00FD40  22                 	db	34
   495  00FD41  50                 	db	80
   496  00FD42  00                 	db	0
   497  00FD43  05                 	db	5
   498  00FD44  03                 	db	3
   499  00FD45  00                 	db	0
   500  00FD46  00                 	db	0
   501  00FD47  00                 	db	0
   502  00FD48  1C                 	db	28
   503  00FD49  22                 	db	34
   504  00FD4A  41                 	db	65
   505  00FD4B  00                 	db	0
   506  00FD4C  00                 	db	0
   507  00FD4D  41                 	db	65
   508  00FD4E  22                 	db	34
   509  00FD4F  1C                 	db	28
   510  00FD50  00                 	db	0
   511  00FD51  08                 	db	8
   512  00FD52  2A                 	db	42
   513  00FD53  1C                 	db	28
   514  00FD54  2A                 	db	42
   515  00FD55  08                 	db	8
   516  00FD56  08                 	db	8
   517  00FD57  08                 	db	8
   518  00FD58  3E                 	db	62
   519  00FD59  08                 	db	8
   520  00FD5A  08                 	db	8
   521  00FD5B  00                 	db	0
   522  00FD5C  50                 	db	80
   523  00FD5D  30                 	db	48
   524  00FD5E  00                 	db	0
   525  00FD5F  00                 	db	0
   526  00FD60  08                 	db	8
   527  00FD61  08                 	db	8
   528  00FD62  08                 	db	8
   529  00FD63  08                 	db	8
   530  00FD64  08                 	db	8
   531  00FD65  00                 	db	0
   532  00FD66  60                 	db	96
   533  00FD67  60                 	db	96
   534  00FD68  00                 	db	0
   535  00FD69  00                 	db	0
   536  00FD6A  20                 	db	32
   537  00FD6B  10                 	db	16
   538  00FD6C  08                 	db	8
   539  00FD6D  04                 	db	4
   540  00FD6E  02                 	db	2
   541  00FD6F  3E                 	db	62
   542  00FD70  51                 	db	81
   543  00FD71  49                 	db	73
   544  00FD72  45                 	db	69
   545  00FD73  3E                 	db	62
   546  00FD74  00                 	db	0
   547  00FD75  42                 	db	66
   548  00FD76  7F                 	db	127
   549  00FD77  40                 	db	64
   550  00FD78  00                 	db	0
   551  00FD79  42                 	db	66
   552  00FD7A  61                 	db	97
   553  00FD7B  51                 	db	81
   554  00FD7C  49                 	db	73
   555  00FD7D  46                 	db	70
   556  00FD7E  21                 	db	33
   557  00FD7F  41                 	db	65
   558  00FD80  45                 	db	69
   559  00FD81  4B                 	db	75
   560  00FD82  31                 	db	49
   561  00FD83  18                 	db	24
   562  00FD84  14                 	db	20
   563  00FD85  12                 	db	18
   564  00FD86  7F                 	db	127
   565  00FD87  10                 	db	16
   566  00FD88  27                 	db	39
   567  00FD89  45                 	db	69
   568  00FD8A  45                 	db	69
   569  00FD8B  45                 	db	69
   570  00FD8C  39                 	db	57
   571  00FD8D  3C                 	db	60
   572  00FD8E  4A                 	db	74
   573  00FD8F  49                 	db	73
   574  00FD90  49                 	db	73
   575  00FD91  30                 	db	48
   576  00FD92  01                 	db	1
   577  00FD93  71                 	db	113
   578  00FD94  09                 	db	9
   579  00FD95  05                 	db	5
   580  00FD96  03                 	db	3
   581  00FD97  36                 	db	54
   582  00FD98  49                 	db	73
   583  00FD99  49                 	db	73
   584  00FD9A  49                 	db	73
   585  00FD9B  36                 	db	54
   586  00FD9C  06                 	db	6
   587  00FD9D  49                 	db	73
   588  00FD9E  49                 	db	73
   589  00FD9F  29                 	db	41
   590  00FDA0  1E                 	db	30
   591  00FDA1  00                 	db	0
   592  00FDA2  36                 	db	54
   593  00FDA3  36                 	db	54
   594  00FDA4  00                 	db	0
   595  00FDA5  00                 	db	0
   596  00FDA6  00                 	db	0
   597  00FDA7  56                 	db	86
   598  00FDA8  36                 	db	54
   599  00FDA9  00                 	db	0
   600  00FDAA  00                 	db	0
   601  00FDAB  00                 	db	0
   602  00FDAC  08                 	db	8
   603  00FDAD  14                 	db	20
   604  00FDAE  22                 	db	34
   605  00FDAF  41                 	db	65
   606  00FDB0  14                 	db	20
   607  00FDB1  14                 	db	20
   608  00FDB2  14                 	db	20
   609  00FDB3  14                 	db	20
   610  00FDB4  14                 	db	20
   611  00FDB5  41                 	db	65
   612  00FDB6  22                 	db	34
   613  00FDB7  14                 	db	20
   614  00FDB8  08                 	db	8
   615  00FDB9  00                 	db	0
   616  00FDBA  02                 	db	2
   617  00FDBB  01                 	db	1
   618  00FDBC  51                 	db	81
   619  00FDBD  09                 	db	9
   620  00FDBE  06                 	db	6
   621  00FDBF  32                 	db	50
   622  00FDC0  49                 	db	73
   623  00FDC1  79                 	db	121
   624  00FDC2  41                 	db	65
   625  00FDC3  3E                 	db	62
   626  00FDC4  7E                 	db	126
   627  00FDC5  11                 	db	17
   628  00FDC6  11                 	db	17
   629  00FDC7  11                 	db	17
   630  00FDC8  7E                 	db	126
   631  00FDC9  7F                 	db	127
   632  00FDCA  49                 	db	73
   633  00FDCB  49                 	db	73
   634  00FDCC  49                 	db	73
   635  00FDCD  36                 	db	54
   636  00FDCE  3E                 	db	62
   637  00FDCF  41                 	db	65
   638  00FDD0  41                 	db	65
   639  00FDD1  41                 	db	65
   640  00FDD2  22                 	db	34
   641  00FDD3  7F                 	db	127
   642  00FDD4  41                 	db	65
   643  00FDD5  41                 	db	65
   644  00FDD6  22                 	db	34
   645  00FDD7  1C                 	db	28
   646  00FDD8  7F                 	db	127
   647  00FDD9  49                 	db	73
   648  00FDDA  49                 	db	73
   649  00FDDB  49                 	db	73
   650  00FDDC  41                 	db	65
   651  00FDDD  7F                 	db	127
   652  00FDDE  09                 	db	9
   653  00FDDF  09                 	db	9
   654  00FDE0  01                 	db	1
   655  00FDE1  01                 	db	1
   656  00FDE2  3E                 	db	62
   657  00FDE3  41                 	db	65
   658  00FDE4  41                 	db	65
   659  00FDE5  51                 	db	81
   660  00FDE6  32                 	db	50
   661  00FDE7  7F                 	db	127
   662  00FDE8  08                 	db	8
   663  00FDE9  08                 	db	8
   664  00FDEA  08                 	db	8
   665  00FDEB  7F                 	db	127
   666  00FDEC  00                 	db	0
   667  00FDED  41                 	db	65
   668  00FDEE  7F                 	db	127
   669  00FDEF  41                 	db	65
   670  00FDF0  00                 	db	0
   671  00FDF1  20                 	db	32
   672  00FDF2  40                 	db	64
   673  00FDF3  41                 	db	65
   674  00FDF4  3F                 	db	63
   675  00FDF5  01                 	db	1
   676  00FDF6  7F                 	db	127
   677  00FDF7  08                 	db	8
   678  00FDF8  14                 	db	20
   679  00FDF9  22                 	db	34
   680  00FDFA  41                 	db	65
   681  00FDFB  7F                 	db	127
   682  00FDFC  40                 	db	64
   683  00FDFD  40                 	db	64
   684  00FDFE  40                 	db	64
   685  00FDFF  40                 	db	64
   686  00FE00  7F                 	db	127
   687  00FE01  02                 	db	2
   688  00FE02  04                 	db	4
   689  00FE03  02                 	db	2
   690  00FE04  7F                 	db	127
   691  00FE05  7F                 	db	127
   692  00FE06  04                 	db	4
   693  00FE07  08                 	db	8
   694  00FE08  10                 	db	16
   695  00FE09  7F                 	db	127
   696  00FE0A  3E                 	db	62
   697  00FE0B  41                 	db	65
   698  00FE0C  41                 	db	65
   699  00FE0D  41                 	db	65
   700  00FE0E  3E                 	db	62
   701  00FE0F  7F                 	db	127
   702  00FE10  09                 	db	9
   703  00FE11  09                 	db	9
   704  00FE12  09                 	db	9
   705  00FE13  06                 	db	6
   706  00FE14  3E                 	db	62
   707  00FE15  41                 	db	65
   708  00FE16  51                 	db	81
   709  00FE17  21                 	db	33
   710  00FE18  5E                 	db	94
   711  00FE19  7F                 	db	127
   712  00FE1A  09                 	db	9
   713  00FE1B  19                 	db	25
   714  00FE1C  29                 	db	41
   715  00FE1D  46                 	db	70
   716  00FE1E  46                 	db	70
   717  00FE1F  49                 	db	73
   718  00FE20  49                 	db	73
   719  00FE21  49                 	db	73
   720  00FE22  31                 	db	49
   721  00FE23  01                 	db	1
   722  00FE24  01                 	db	1
   723  00FE25  7F                 	db	127
   724  00FE26  01                 	db	1
   725  00FE27  01                 	db	1
   726  00FE28  3F                 	db	63
   727  00FE29  40                 	db	64
   728  00FE2A  40                 	db	64
   729  00FE2B  40                 	db	64
   730  00FE2C  3F                 	db	63
   731  00FE2D  1F                 	db	31
   732  00FE2E  20                 	db	32
   733  00FE2F  40                 	db	64
   734  00FE30  20                 	db	32
   735  00FE31  1F                 	db	31
   736  00FE32  7F                 	db	127
   737  00FE33  20                 	db	32
   738  00FE34  18                 	db	24
   739  00FE35  20                 	db	32
   740  00FE36  7F                 	db	127
   741  00FE37  63                 	db	99
   742  00FE38  14                 	db	20
   743  00FE39  08                 	db	8
   744  00FE3A  14                 	db	20
   745  00FE3B  63                 	db	99
   746  00FE3C  03                 	db	3
   747  00FE3D  04                 	db	4
   748  00FE3E  78                 	db	120
   749  00FE3F  04                 	db	4
   750  00FE40  03                 	db	3
   751  00FE41  61                 	db	97
   752  00FE42  51                 	db	81
   753  00FE43  49                 	db	73
   754  00FE44  45                 	db	69
   755  00FE45  43                 	db	67
   756  00FE46  00                 	db	0
   757  00FE47  00                 	db	0
   758  00FE48  7F                 	db	127
   759  00FE49  41                 	db	65
   760  00FE4A  41                 	db	65
   761  00FE4B  02                 	db	2
   762  00FE4C  04                 	db	4
   763  00FE4D  08                 	db	8
   764  00FE4E  10                 	db	16
   765  00FE4F  20                 	db	32
   766  00FE50  41                 	db	65
   767  00FE51  41                 	db	65
   768  00FE52  7F                 	db	127
   769  00FE53  00                 	db	0
   770  00FE54  00                 	db	0
   771  00FE55  04                 	db	4
   772  00FE56  02                 	db	2
   773  00FE57  01                 	db	1
   774  00FE58  02                 	db	2
   775  00FE59  04                 	db	4
   776  00FE5A  40                 	db	64
   777  00FE5B  40                 	db	64
   778  00FE5C  40                 	db	64
   779  00FE5D  40                 	db	64
   780  00FE5E  40                 	db	64
   781  00FE5F  00                 	db	0
   782  00FE60  01                 	db	1
   783  00FE61  02                 	db	2
   784  00FE62  04                 	db	4
   785  00FE63  00                 	db	0
   786  00FE64  20                 	db	32
   787  00FE65  54                 	db	84
   788  00FE66  54                 	db	84
   789  00FE67  54                 	db	84
   790  00FE68  78                 	db	120
   791  00FE69  7F                 	db	127
   792  00FE6A  48                 	db	72
   793  00FE6B  44                 	db	68
   794  00FE6C  44                 	db	68
   795  00FE6D  38                 	db	56
   796  00FE6E  38                 	db	56
   797  00FE6F  44                 	db	68
   798  00FE70  44                 	db	68
   799  00FE71  44                 	db	68
   800  00FE72  20                 	db	32
   801  00FE73  38                 	db	56
   802  00FE74  44                 	db	68
   803  00FE75  44                 	db	68
   804  00FE76  48                 	db	72
   805  00FE77  7F                 	db	127
   806  00FE78  38                 	db	56
   807  00FE79  54                 	db	84
   808  00FE7A  54                 	db	84
   809  00FE7B  54                 	db	84
   810  00FE7C  18                 	db	24
   811  00FE7D  08                 	db	8
   812  00FE7E  7E                 	db	126
   813  00FE7F  09                 	db	9
   814  00FE80  01                 	db	1
   815  00FE81  02                 	db	2
   816  00FE82  08                 	db	8
   817  00FE83  14                 	db	20
   818  00FE84  54                 	db	84
   819  00FE85  54                 	db	84
   820  00FE86  3C                 	db	60
   821  00FE87  7F                 	db	127
   822  00FE88  08                 	db	8
   823  00FE89  04                 	db	4
   824  00FE8A  04                 	db	4
   825  00FE8B  78                 	db	120
   826  00FE8C  00                 	db	0
   827  00FE8D  44                 	db	68
   828  00FE8E  7D                 	db	125
   829  00FE8F  40                 	db	64
   830  00FE90  00                 	db	0
   831  00FE91  20                 	db	32
   832  00FE92  40                 	db	64
   833  00FE93  44                 	db	68
   834  00FE94  3D                 	db	61
   835  00FE95  00                 	db	0
   836  00FE96  00                 	db	0
   837  00FE97  7F                 	db	127
   838  00FE98  10                 	db	16
   839  00FE99  28                 	db	40
   840  00FE9A  44                 	db	68
   841  00FE9B  00                 	db	0
   842  00FE9C  41                 	db	65
   843  00FE9D  7F                 	db	127
   844  00FE9E  40                 	db	64
   845  00FE9F  00                 	db	0
   846  00FEA0  7C                 	db	124
   847  00FEA1  04                 	db	4
   848  00FEA2  18                 	db	24
   849  00FEA3  04                 	db	4
   850  00FEA4  78                 	db	120
   851  00FEA5  7C                 	db	124
   852  00FEA6  08                 	db	8
   853  00FEA7  04                 	db	4
   854  00FEA8  04                 	db	4
   855  00FEA9  78                 	db	120
   856  00FEAA  38                 	db	56
   857  00FEAB  44                 	db	68
   858  00FEAC  44                 	db	68
   859  00FEAD  44                 	db	68
   860  00FEAE  38                 	db	56
   861  00FEAF  7C                 	db	124
   862  00FEB0  14                 	db	20
   863  00FEB1  14                 	db	20
   864  00FEB2  14                 	db	20
   865  00FEB3  08                 	db	8
   866  00FEB4  08                 	db	8
   867  00FEB5  14                 	db	20
   868  00FEB6  14                 	db	20
   869  00FEB7  18                 	db	24
   870  00FEB8  7C                 	db	124
   871  00FEB9  7C                 	db	124
   872  00FEBA  08                 	db	8
   873  00FEBB  04                 	db	4
   874  00FEBC  04                 	db	4
   875  00FEBD  08                 	db	8
   876  00FEBE  48                 	db	72
   877  00FEBF  54                 	db	84
   878  00FEC0  54                 	db	84
   879  00FEC1  54                 	db	84
   880  00FEC2  20                 	db	32
   881  00FEC3  04                 	db	4
   882  00FEC4  3F                 	db	63
   883  00FEC5  44                 	db	68
   884  00FEC6  40                 	db	64
   885  00FEC7  20                 	db	32
   886  00FEC8  3C                 	db	60
   887  00FEC9  40                 	db	64
   888  00FECA  40                 	db	64
   889  00FECB  20                 	db	32
   890  00FECC  7C                 	db	124
   891  00FECD  1C                 	db	28
   892  00FECE  20                 	db	32
   893  00FECF  40                 	db	64
   894  00FED0  20                 	db	32
   895  00FED1  1C                 	db	28
   896  00FED2  3C                 	db	60
   897  00FED3  40                 	db	64
   898  00FED4  30                 	db	48
   899  00FED5  40                 	db	64
   900  00FED6  3C                 	db	60
   901  00FED7  44                 	db	68
   902  00FED8  28                 	db	40
   903  00FED9  10                 	db	16
   904  00FEDA  28                 	db	40
   905  00FEDB  44                 	db	68
   906  00FEDC  0C                 	db	12
   907  00FEDD  50                 	db	80
   908  00FEDE  50                 	db	80
   909  00FEDF  50                 	db	80
   910  00FEE0  3C                 	db	60
   911  00FEE1  44                 	db	68
   912  00FEE2  64                 	db	100
   913  00FEE3  54                 	db	84
   914  00FEE4  4C                 	db	76
   915  00FEE5  44                 	db	68
   916  00FEE6  00                 	db	0
   917  00FEE7  08                 	db	8
   918  00FEE8  36                 	db	54
   919  00FEE9  41                 	db	65
   920  00FEEA  00                 	db	0
   921  00FEEB  00                 	db	0
   922  00FEEC  00                 	db	0
   923  00FEED  7F                 	db	127
   924  00FEEE  00                 	db	0
   925  00FEEF  00                 	db	0
   926  00FEF0  00                 	db	0
   927  00FEF1  41                 	db	65
   928  00FEF2  36                 	db	54
   929  00FEF3  08                 	db	8
   930  00FEF4  00                 	db	0
   931  00FEF5  08                 	db	8
   932  00FEF6  08                 	db	8
   933  00FEF7  2A                 	db	42
   934  00FEF8  1C                 	db	28
   935  00FEF9  08                 	db	8
   936  00FEFA  08                 	db	8
   937  00FEFB  1C                 	db	28
   938  00FEFC  2A                 	db	42
   939  00FEFD  08                 	db	8
   940  00FEFE  08                 	db	8
   941  00FEFF                     __end_of_Font5x7:
   942                           	opt stack 0
   943  00FEFF                     _PortG_Property:
   944                           	opt stack 0
   945  00FEFF  FC00               	dw	64512
   946  00FF01                     __end_of_PortG_Property:
   947                           	opt stack 0
   948  00FF01                     _PortF_Property:
   949                           	opt stack 0
   950  00FF01  0FFF               	dw	4095
   951  00FF03                     __end_of_PortF_Property:
   952                           	opt stack 0
   953  00FF03                     _PortE_Property:
   954                           	opt stack 0
   955  00FF03  0000               	dw	0
   956  00FF05                     __end_of_PortE_Property:
   957                           	opt stack 0
   958  00FF05                     _PortD_Property:
   959                           	opt stack 0
   960  00FF05  FFFF               	dw	65535
   961  00FF07                     __end_of_PortD_Property:
   962                           	opt stack 0
   963  00FF07                     _PortC_Property:
   964                           	opt stack 0
   965  00FF07  FFF0               	dw	65520
   966  00FF09                     __end_of_PortC_Property:
   967                           	opt stack 0
   968  00FF09                     _PortB_Property:
   969                           	opt stack 0
   970  00FF09  FF00               	dw	65280
   971  00FF0B                     __end_of_PortB_Property:
   972                           	opt stack 0
   973  00FF0B                     _PortA_Property:
   974                           	opt stack 0
   975  00FF0B  00FF               	dw	255
   976  00FF0D                     __end_of_PortA_Property:
   977                           	opt stack 0
   978  0000                     _TMR0	set	4054
   979  0000                     _RCREG1	set	4015
   980  0000                     _TXREG1	set	4014
   981  0000                     _SPBRG1	set	4016
   982  0000                     _TXSTA1bits	set	4013
   983  0000                     _BAUDCON1bits	set	3966
   984  0000                     _RCSTA1	set	4012
   985  0000                     _TXSTA1	set	4013
   986  0000                     _TRISCbits	set	3988
   987  0000                     _PR2	set	4043
   988  0000                     _T2CONbits	set	4042
   989  0000                     _T0CONbits	set	4053
   990  0000                     _RCONbits	set	4048
   991  0000                     _OSCTUNEbits	set	3995
   992  0000                     _PIR3	set	4004
   993  0000                     _PIR2	set	4001
   994  0000                     _PIR1	set	3998
   995  0000                     _INTCONbits	set	4082
   996  0000                     _SSP2CON2bits	set	3947
   997  0000                     _SSP1CON2bits	set	4037
   998  0000                     _SSP1ADD	set	4040
   999  0000                     _ANCON0	set	4033
  1000  0000                     _ADRESL	set	4035
  1001  0000                     _ADRESH	set	4036
  1002  0000                     _ADCON1bits	set	4033
  1003  0000                     _ADCON0bits	set	4034
  1004  0000                     _SSP2CON1bits	set	3948
  1005  0000                     _SSP1CON1bits	set	4038
  1006  0000                     _SSP2STATbits	set	3949
  1007  0000                     _SSP1STATbits	set	4039
  1008  0000                     _PIE3bits	set	4003
  1009  0000                     _PIE1bits	set	3997
  1010  0000                     _PIR3bits	set	4004
  1011  0000                     _PIR1bits	set	3998
  1012  0000                     _IPR3bits	set	4005
  1013  0000                     _IPR1bits	set	3999
  1014  0000                     _PORTFbits	set	3973
  1015  0000                     _SSP2CON2	set	3947
  1016  0000                     _SSP1CON2	set	4037
  1017  0000                     _SSP2BUF	set	3951
  1018  0000                     _SSP2CON1	set	3948
  1019  0000                     _SSP2STAT	set	3949
  1020  0000                     _SSP1BUF	set	4041
  1021  0000                     _SSP1CON1	set	4038
  1022  0000                     _SSP1STAT	set	4039
  1023  0000                     _LATG	set	3983
  1024  0000                     _LATF	set	3982
  1025  0000                     _LATE	set	3981
  1026  0000                     _LATD	set	3980
  1027  0000                     _LATC	set	3979
  1028  0000                     _LATB	set	3978
  1029  0000                     _LATA	set	3977
  1030  0000                     _TRISG	set	3992
  1031  0000                     _TRISF	set	3991
  1032  0000                     _TRISE	set	3990
  1033  0000                     _TRISD	set	3989
  1034  0000                     _TRISC	set	3988
  1035  0000                     _TRISB	set	3987
  1036  0000                     _TRISA	set	3986
  1037  0000                     _PORTG	set	3974
  1038  0000                     _PORTF	set	3973
  1039  0000                     _PORTE	set	3972
  1040  0000                     _PORTD	set	3971
  1041  0000                     _PORTC	set	3970
  1042  0000                     _PORTB	set	3969
  1043  0000                     _PORTA	set	3968
  1044  00FF0D                     STR_10:
  1045  00FF0D  43                 	db	67	;'C'
  1046  00FF0E  6C                 	db	108	;'l'
  1047  00FF0F  6F                 	db	111	;'o'
  1048  00FF10  73                 	db	115	;'s'
  1049  00FF11  65                 	db	101	;'e'
  1050  00FF12  73                 	db	115	;'s'
  1051  00FF13  74                 	db	116	;'t'
  1052  00FF14  20                 	db	32
  1053  00FF15  57                 	db	87	;'W'
  1054  00FF16  61                 	db	97	;'a'
  1055  00FF17  6C                 	db	108	;'l'
  1056  00FF18  6C                 	db	108	;'l'
  1057  00FF19  3A                 	db	58	;':'
  1058  00FF1A  25                 	db	37
  1059  00FF1B  75                 	db	117	;'u'
  1060  00FF1C  0A                 	db	10
  1061  00FF1D  43                 	db	67	;'C'
  1062  00FF1E  6C                 	db	108	;'l'
  1063  00FF1F  6F                 	db	111	;'o'
  1064  00FF20  73                 	db	115	;'s'
  1065  00FF21  65                 	db	101	;'e'
  1066  00FF22  73                 	db	115	;'s'
  1067  00FF23  74                 	db	116	;'t'
  1068  00FF24  20                 	db	32
  1069  00FF25  41                 	db	65	;'A'
  1070  00FF26  6E                 	db	110	;'n'
  1071  00FF27  67                 	db	103	;'g'
  1072  00FF28  6C                 	db	108	;'l'
  1073  00FF29  65                 	db	101	;'e'
  1074  00FF2A  3A                 	db	58	;':'
  1075  00FF2B  25                 	db	37
  1076  00FF2C  64                 	db	100	;'d'
  1077  00FF2D  0A                 	db	10
  1078  00FF2E  4C                 	db	76	;'L'
  1079  00FF2F  65                 	db	101	;'e'
  1080  00FF30  66                 	db	102	;'f'
  1081  00FF31  74                 	db	116	;'t'
  1082  00FF32  20                 	db	32
  1083  00FF33  42                 	db	66	;'B'
  1084  00FF34  75                 	db	117	;'u'
  1085  00FF35  6D                 	db	109	;'m'
  1086  00FF36  70                 	db	112	;'p'
  1087  00FF37  3A                 	db	58	;':'
  1088  00FF38  25                 	db	37
  1089  00FF39  75                 	db	117	;'u'
  1090  00FF3A  0A                 	db	10
  1091  00FF3B  52                 	db	82	;'R'
  1092  00FF3C  69                 	db	105	;'i'
  1093  00FF3D  67                 	db	103	;'g'
  1094  00FF3E  68                 	db	104	;'h'
  1095  00FF3F  74                 	db	116	;'t'
  1096  00FF40  42                 	db	66	;'B'
  1097  00FF41  75                 	db	117	;'u'
  1098  00FF42  6D                 	db	109	;'m'
  1099  00FF43  70                 	db	112	;'p'
  1100  00FF44  3A                 	db	58	;':'
  1101  00FF45  25                 	db	37
  1102  00FF46  75                 	db	117	;'u'
  1103  00FF47  0A                 	db	10
  1104  00FF48  41                 	db	65	;'A'
  1105  00FF49  6E                 	db	110	;'n'
  1106  00FF4A  67                 	db	103	;'g'
  1107  00FF4B  6C                 	db	108	;'l'
  1108  00FF4C  65                 	db	101	;'e'
  1109  00FF4D  54                 	db	84	;'T'
  1110  00FF4E  6F                 	db	111	;'o'
  1111  00FF4F  54                 	db	84	;'T'
  1112  00FF50  75                 	db	117	;'u'
  1113  00FF51  72                 	db	114	;'r'
  1114  00FF52  6E                 	db	110	;'n'
  1115  00FF53  3A                 	db	58	;':'
  1116  00FF54  20                 	db	32
  1117  00FF55  25                 	db	37
  1118  00FF56  64                 	db	100	;'d'
  1119  00FF57  0A                 	db	10
  1120  00FF58  00                 	db	0
  1121  00FF59                     STR_2:
  1122  00FF59  43                 	db	67	;'C'
  1123  00FF5A  6C                 	db	108	;'l'
  1124  00FF5B  6F                 	db	111	;'o'
  1125  00FF5C  73                 	db	115	;'s'
  1126  00FF5D  65                 	db	101	;'e'
  1127  00FF5E  73                 	db	115	;'s'
  1128  00FF5F  74                 	db	116	;'t'
  1129  00FF60  20                 	db	32
  1130  00FF61  57                 	db	87	;'W'
  1131  00FF62  61                 	db	97	;'a'
  1132  00FF63  6C                 	db	108	;'l'
  1133  00FF64  6C                 	db	108	;'l'
  1134  00FF65  3A                 	db	58	;':'
  1135  00FF66  25                 	db	37
  1136  00FF67  75                 	db	117	;'u'
  1137  00FF68  0A                 	db	10
  1138  00FF69  43                 	db	67	;'C'
  1139  00FF6A  6C                 	db	108	;'l'
  1140  00FF6B  6F                 	db	111	;'o'
  1141  00FF6C  73                 	db	115	;'s'
  1142  00FF6D  65                 	db	101	;'e'
  1143  00FF6E  73                 	db	115	;'s'
  1144  00FF6F  74                 	db	116	;'t'
  1145  00FF70  20                 	db	32
  1146  00FF71  41                 	db	65	;'A'
  1147  00FF72  6E                 	db	110	;'n'
  1148  00FF73  67                 	db	103	;'g'
  1149  00FF74  6C                 	db	108	;'l'
  1150  00FF75  65                 	db	101	;'e'
  1151  00FF76  3A                 	db	58	;':'
  1152  00FF77  25                 	db	37
  1153  00FF78  64                 	db	100	;'d'
  1154  00FF79  0A                 	db	10
  1155  00FF7A  4C                 	db	76	;'L'
  1156  00FF7B  65                 	db	101	;'e'
  1157  00FF7C  66                 	db	102	;'f'
  1158  00FF7D  74                 	db	116	;'t'
  1159  00FF7E  20                 	db	32
  1160  00FF7F  42                 	db	66	;'B'
  1161  00FF80  75                 	db	117	;'u'
  1162  00FF81  6D                 	db	109	;'m'
  1163  00FF82  70                 	db	112	;'p'
  1164  00FF83  3A                 	db	58	;':'
  1165  00FF84  25                 	db	37
  1166  00FF85  75                 	db	117	;'u'
  1167  00FF86  0A                 	db	10
  1168  00FF87  52                 	db	82	;'R'
  1169  00FF88  69                 	db	105	;'i'
  1170  00FF89  67                 	db	103	;'g'
  1171  00FF8A  68                 	db	104	;'h'
  1172  00FF8B  74                 	db	116	;'t'
  1173  00FF8C  42                 	db	66	;'B'
  1174  00FF8D  75                 	db	117	;'u'
  1175  00FF8E  6D                 	db	109	;'m'
  1176  00FF8F  70                 	db	112	;'p'
  1177  00FF90  3A                 	db	58	;':'
  1178  00FF91  25                 	db	37
  1179  00FF92  75                 	db	117	;'u'
  1180  00FF93  0A                 	db	10
  1181  00FF94  00                 	db	0
  1182  00FF95                     STR_4:
  1183  00FF95  54                 	db	84	;'T'
  1184  00FF96  6F                 	db	111	;'o'
  1185  00FF97  74                 	db	116	;'t'
  1186  00FF98  61                 	db	97	;'a'
  1187  00FF99  6C                 	db	108	;'l'
  1188  00FF9A  20                 	db	32
  1189  00FF9B  44                 	db	68	;'D'
  1190  00FF9C  69                 	db	105	;'i'
  1191  00FF9D  73                 	db	115	;'s'
  1192  00FF9E  74                 	db	116	;'t'
  1193  00FF9F  61                 	db	97	;'a'
  1194  00FFA0  6E                 	db	110	;'n'
  1195  00FFA1  63                 	db	99	;'c'
  1196  00FFA2  65                 	db	101	;'e'
  1197  00FFA3  3A                 	db	58	;':'
  1198  00FFA4  25                 	db	37
  1199  00FFA5  75                 	db	117	;'u'
  1200  00FFA6  0A                 	db	10
  1201  00FFA7  4C                 	db	76	;'L'
  1202  00FFA8  65                 	db	101	;'e'
  1203  00FFA9  66                 	db	102	;'f'
  1204  00FFAA  74                 	db	116	;'t'
  1205  00FFAB  20                 	db	32
  1206  00FFAC  42                 	db	66	;'B'
  1207  00FFAD  75                 	db	117	;'u'
  1208  00FFAE  6D                 	db	109	;'m'
  1209  00FFAF  70                 	db	112	;'p'
  1210  00FFB0  3A                 	db	58	;':'
  1211  00FFB1  25                 	db	37
  1212  00FFB2  75                 	db	117	;'u'
  1213  00FFB3  0A                 	db	10
  1214  00FFB4  52                 	db	82	;'R'
  1215  00FFB5  69                 	db	105	;'i'
  1216  00FFB6  67                 	db	103	;'g'
  1217  00FFB7  68                 	db	104	;'h'
  1218  00FFB8  74                 	db	116	;'t'
  1219  00FFB9  20                 	db	32
  1220  00FFBA  42                 	db	66	;'B'
  1221  00FFBB  75                 	db	117	;'u'
  1222  00FFBC  6D                 	db	109	;'m'
  1223  00FFBD  70                 	db	112	;'p'
  1224  00FFBE  3A                 	db	58	;':'
  1225  00FFBF  25                 	db	37
  1226  00FFC0  75                 	db	117	;'u'
  1227  00FFC1  0A                 	db	10
  1228  00FFC2  00                 	db	0
  1229  00FFC3                     STR_13:
  1230  00FFC3  20                 	db	32
  1231  00FFC4  20                 	db	32
  1232  00FFC5  20                 	db	32
  1233  00FFC6  20                 	db	32
  1234  00FFC7  20                 	db	32
  1235  00FFC8  20                 	db	32
  1236  00FFC9  20                 	db	32
  1237  00FFCA  20                 	db	32
  1238  00FFCB  20                 	db	32
  1239  00FFCC  20                 	db	32
  1240  00FFCD  20                 	db	32
  1241  00FFCE  20                 	db	32
  1242  00FFCF  20                 	db	32
  1243  00FFD0  20                 	db	32
  1244  00FFD1  20                 	db	32
  1245  00FFD2  20                 	db	32
  1246  00FFD3  20                 	db	32
  1247  00FFD4  20                 	db	32
  1248  00FFD5  20                 	db	32
  1249  00FFD6  0A                 	db	10
  1250  00FFD7  00                 	db	0
  1251  00FFD8                     STR_12:
  1252  00FFD8  50                 	db	80	;'P'
  1253  00FFD9  6C                 	db	108	;'l'
  1254  00FFDA  65                 	db	101	;'e'
  1255  00FFDB  61                 	db	97	;'a'
  1256  00FFDC  73                 	db	115	;'s'
  1257  00FFDD  65                 	db	101	;'e'
  1258  00FFDE  20                 	db	32
  1259  00FFDF  73                 	db	115	;'s'
  1260  00FFE0  65                 	db	101	;'e'
  1261  00FFE1  6C                 	db	108	;'l'
  1262  00FFE2  65                 	db	101	;'e'
  1263  00FFE3  63                 	db	99	;'c'
  1264  00FFE4  74                 	db	116	;'t'
  1265  00FFE5  20                 	db	32
  1266  00FFE6  6D                 	db	109	;'m'
  1267  00FFE7  6F                 	db	111	;'o'
  1268  00FFE8  64                 	db	100	;'d'
  1269  00FFE9  65                 	db	101	;'e'
  1270  00FFEA  2E                 	db	46
  1271  00FFEB  0A                 	db	10
  1272  00FFEC  00                 	db	0
  1273  00FFED                     STR_8:
  1274  00FFED  44                 	db	68	;'D'
  1275  00FFEE  69                 	db	105	;'i'
  1276  00FFEF  73                 	db	115	;'s'
  1277  00FFF0  74                 	db	116	;'t'
  1278  00FFF1  61                 	db	97	;'a'
  1279  00FFF2  6E                 	db	110	;'n'
  1280  00FFF3  63                 	db	99	;'c'
  1281  00FFF4  65                 	db	101	;'e'
  1282  00FFF5  3A                 	db	58	;':'
  1283  00FFF6  20                 	db	32
  1284  00FFF7  25                 	db	37
  1285  00FFF8  64                 	db	100	;'d'
  1286  00FFF9  0A                 	db	10
  1287  00FFFA  00                 	db	0
  1288  00FFFB                     STR_1:
  1289  00FFFB  25                 	db	37
  1290  00FFFC  63                 	db	99	;'c'
  1291  00FFFD  00                 	db	0
  1292  0000                     
  1293                           ; #config settings
  1294  00FFFE  00                 	db	0	; dummy byte at the end
  1295  0000                     
  1296                           	psect	cinit
  1297  01448E                     __pcinit:
  1298                           	opt stack 0
  1299  01448E                     start_initialization:
  1300                           	opt stack 0
  1301  01448E                     __initialization:
  1302                           	opt stack 0
  1303                           
  1304                           ; Initialize objects allocated to BANK3 (12 bytes)
  1305                           ; load TBLPTR registers with __pidataBANK3
  1306  01448E  0E1C               	movlw	low __pidataBANK3
  1307  014490  6EF6               	movwf	tblptrl,c
  1308  014492  0E66               	movlw	high __pidataBANK3
  1309  014494  6EF7               	movwf	tblptrh,c
  1310  014496  0E01               	movlw	low (__pidataBANK3 shr (0+16))
  1311  014498  6EF8               	movwf	tblptru,c
  1312  01449A  EE03  F0E8         	lfsr	0,__pdataBANK3
  1313  01449E  EE10 F00C          	lfsr	1,12
  1314  0144A2                     copy_data0:
  1315  0144A2  0009               	tblrd		*+
  1316  0144A4  CFF5 FFEE          	movff	tablat,postinc0
  1317  0144A8  50E5               	movf	postdec1,w,c
  1318  0144AA  50E1               	movf	fsr1l,w,c
  1319  0144AC  E1FA               	bnz	copy_data0
  1320                           
  1321                           ; Initialize objects allocated to BANK0 (7 bytes)
  1322                           ; load TBLPTR registers with __pidataBANK0
  1323  0144AE  0E82               	movlw	low __pidataBANK0
  1324  0144B0  6EF6               	movwf	tblptrl,c
  1325  0144B2  0E66               	movlw	high __pidataBANK0
  1326  0144B4  6EF7               	movwf	tblptrh,c
  1327  0144B6  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  1328  0144B8  6EF8               	movwf	tblptru,c
  1329  0144BA  EE00  F0F9         	lfsr	0,__pdataBANK0
  1330  0144BE  EE10 F007          	lfsr	1,7
  1331  0144C2                     copy_data1:
  1332  0144C2  0009               	tblrd		*+
  1333  0144C4  CFF5 FFEE          	movff	tablat,postinc0
  1334  0144C8  50E5               	movf	postdec1,w,c
  1335  0144CA  50E1               	movf	fsr1l,w,c
  1336  0144CC  E1FA               	bnz	copy_data1
  1337                           
  1338                           ; Initialize objects allocated to COMRAM (10 bytes)
  1339                           ; load TBLPTR registers with __pidataCOMRAM
  1340  0144CE  0E4C               	movlw	low __pidataCOMRAM
  1341  0144D0  6EF6               	movwf	tblptrl,c
  1342  0144D2  0E66               	movlw	high __pidataCOMRAM
  1343  0144D4  6EF7               	movwf	tblptrh,c
  1344  0144D6  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1345  0144D8  6EF8               	movwf	tblptru,c
  1346  0144DA  EE00  F047         	lfsr	0,__pdataCOMRAM
  1347  0144DE  EE10 F00A          	lfsr	1,10
  1348  0144E2                     copy_data2:
  1349  0144E2  0009               	tblrd		*+
  1350  0144E4  CFF5 FFEE          	movff	tablat,postinc0
  1351  0144E8  50E5               	movf	postdec1,w,c
  1352  0144EA  50E1               	movf	fsr1l,w,c
  1353  0144EC  E1FA               	bnz	copy_data2
  1354                           
  1355                           ; Clear objects allocated to BIGRAM (300 bytes)
  1356  0144EE  EE04  F0AA         	lfsr	0,__pbssBIGRAM
  1357  0144F2  EE11 F02C          	lfsr	1,300
  1358  0144F6                     clear_0:
  1359  0144F6  6AEE               	clrf	postinc0,c
  1360  0144F8  50E5               	movf	postdec1,w,c
  1361  0144FA  50E1               	movf	fsr1l,w,c
  1362  0144FC  E1FC               	bnz	clear_0
  1363  0144FE  50E2               	movf	fsr1h,w,c
  1364  014500  E1FA               	bnz	clear_0
  1365                           
  1366                           ; Clear objects allocated to BANK4 (170 bytes)
  1367  014502  EE04  F000         	lfsr	0,__pbssBANK4
  1368  014506  0EAA               	movlw	170
  1369  014508                     clear_1:
  1370  014508  6AEE               	clrf	postinc0,c
  1371  01450A  06E8               	decf	wreg,f,c
  1372  01450C  E1FD               	bnz	clear_1
  1373                           
  1374                           ; Clear objects allocated to BANK3 (232 bytes)
  1375  01450E  EE03  F000         	lfsr	0,__pbssBANK3
  1376  014512  0EE8               	movlw	232
  1377  014514                     clear_2:
  1378  014514  6AEE               	clrf	postinc0,c
  1379  014516  06E8               	decf	wreg,f,c
  1380  014518  E1FD               	bnz	clear_2
  1381                           
  1382                           ; Clear objects allocated to BANK0 (90 bytes)
  1383  01451A  EE00  F060         	lfsr	0,__pbssBANK0
  1384  01451E  0E5A               	movlw	90
  1385  014520                     clear_3:
  1386  014520  6AEE               	clrf	postinc0,c
  1387  014522  06E8               	decf	wreg,f,c
  1388  014524  E1FD               	bnz	clear_3
  1389                           
  1390                           ; Clear objects allocated to COMRAM (30 bytes)
  1391  014526  EE00  F029         	lfsr	0,__pbssCOMRAM
  1392  01452A  0E1E               	movlw	30
  1393  01452C                     clear_4:
  1394  01452C  6AEE               	clrf	postinc0,c
  1395  01452E  06E8               	decf	wreg,f,c
  1396  014530  E1FD               	bnz	clear_4
  1397  014532                     end_of_initialization:
  1398                           	opt stack 0
  1399  014532                     __end_of__initialization:
  1400                           	opt stack 0
  1401  014532  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1402  014534  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1403  014536  0100               	movlb	0
  1404  014538  EFD2  F09C         	goto	_main	;jump to C main() function
  1405                           tblptru	equ	0xFF8
  1406                           tblptrh	equ	0xFF7
  1407                           tblptrl	equ	0xFF6
  1408                           tablat	equ	0xFF5
  1409                           postinc0	equ	0xFEE
  1410                           wreg	equ	0xFE8
  1411                           postdec1	equ	0xFE5
  1412                           fsr1h	equ	0xFE2
  1413                           fsr1l	equ	0xFE1
  1414                           
  1415                           	psect	bssCOMRAM
  1416  000029                     __pbssCOMRAM:
  1417                           	opt stack 0
  1418  000029                     _COUNTER:
  1419                           	opt stack 0
  1420  000029                     	ds	2
  1421  00002B                     HMI_GRender@a:
  1422                           	opt stack 0
  1423  00002B                     	ds	2
  1424  00002D                     SPI_Send9@dat:
  1425                           	opt stack 0
  1426  00002D                     	ds	2
  1427  00002F                     _iRDropCaster:
  1428                           	opt stack 0
  1429  00002F                     	ds	1
  1430  000030                     _iRVirtualWall:
  1431                           	opt stack 0
  1432  000030                     	ds	1
  1433  000031                     _iRCliffR:
  1434                           	opt stack 0
  1435  000031                     	ds	1
  1436  000032                     _iRCliffFR:
  1437                           	opt stack 0
  1438  000032                     	ds	1
  1439  000033                     _iRCliffFL:
  1440                           	opt stack 0
  1441  000033                     	ds	1
  1442  000034                     _iRCliffL:
  1443                           	opt stack 0
  1444  000034                     	ds	1
  1445  000035                     _iRWall:
  1446                           	opt stack 0
  1447  000035                     	ds	1
  1448  000036                     _iRBumpDrop:
  1449                           	opt stack 0
  1450  000036                     	ds	1
  1451  000037                     _iRScriptIndex:
  1452                           	opt stack 0
  1453  000037                     	ds	1
  1454  000038                     _u:
  1455                           	opt stack 0
  1456  000038                     	ds	1
  1457  000039                     _j:
  1458                           	opt stack 0
  1459  000039                     	ds	1
  1460  00003A                     _i:
  1461                           	opt stack 0
  1462  00003A                     	ds	1
  1463  00003B                     rand@screw:
  1464                           	opt stack 0
  1465  00003B                     	ds	1
  1466  00003C                     _ADC_Initialised:
  1467                           	opt stack 0
  1468  00003C                     	ds	1
  1469  00003D                     OutSeg@a:
  1470                           	opt stack 0
  1471  00003D                     	ds	1
  1472  00003E                     OutSeg@segset:
  1473                           	opt stack 0
  1474  00003E                     	ds	1
  1475  00003F                     OutSeg@cur:
  1476                           	opt stack 0
  1477  00003F                     	ds	1
  1478  000040                     _I2C1T:
  1479                           	opt stack 0
  1480  000040                     	ds	7
  1481                           tblptru	equ	0xFF8
  1482                           tblptrh	equ	0xFF7
  1483                           tblptrl	equ	0xFF6
  1484                           tablat	equ	0xFF5
  1485                           postinc0	equ	0xFEE
  1486                           wreg	equ	0xFE8
  1487                           postdec1	equ	0xFE5
  1488                           fsr1h	equ	0xFE2
  1489                           fsr1l	equ	0xFE1
  1490                           
  1491                           	psect	dataCOMRAM
  1492  000047                     __pdataCOMRAM:
  1493                           	opt stack 0
  1494  000047                     _gCursor:
  1495                           	opt stack 0
  1496  000047                     	ds	4
  1497  00004B                     _Bus_State:
  1498                           	opt stack 0
  1499  00004B                     	ds	1
  1500  00004C                     	ds	1
  1501  00004D                     	ds	1
  1502  00004E                     	ds	1
  1503  00004F                     _l:
  1504                           	opt stack 0
  1505  00004F                     	ds	1
  1506  000050                     _w:
  1507                           	opt stack 0
  1508  000050                     	ds	1
  1509                           tblptru	equ	0xFF8
  1510                           tblptrh	equ	0xFF7
  1511                           tblptrl	equ	0xFF6
  1512                           tablat	equ	0xFF5
  1513                           postinc0	equ	0xFEE
  1514                           wreg	equ	0xFE8
  1515                           postdec1	equ	0xFE5
  1516                           fsr1h	equ	0xFE2
  1517                           fsr1l	equ	0xFE1
  1518                           
  1519                           	psect	bssBANK0
  1520  000060                     __pbssBANK0:
  1521                           	opt stack 0
  1522  000060                     _gISR:
  1523                           	opt stack 0
  1524  000060                     	ds	3
  1525  000063                     _lQueue:
  1526                           	opt stack 0
  1527  000063                     	ds	3
  1528  000066                     _lStepFunction:
  1529                           	opt stack 0
  1530  000066                     	ds	3
  1531  000069                     _dist:
  1532                           	opt stack 0
  1533  000069                     	ds	2
  1534  00006B                     _angleToClosestWall:
  1535                           	opt stack 0
  1536  00006B                     	ds	2
  1537  00006D                     _IRValue:
  1538                           	opt stack 0
  1539  00006D                     	ds	2
  1540  00006F                     _Stepstomin:
  1541                           	opt stack 0
  1542  00006F                     	ds	2
  1543  000071                     _StepRotate:
  1544                           	opt stack 0
  1545  000071                     	ds	2
  1546  000073                     _mode:
  1547                           	opt stack 0
  1548  000073                     	ds	2
  1549  000075                     _angleTotal:
  1550                           	opt stack 0
  1551  000075                     	ds	2
  1552  000077                     _distanceTotal:
  1553                           	opt stack 0
  1554  000077                     	ds	2
  1555  000079                     _iRAngle:
  1556                           	opt stack 0
  1557  000079                     	ds	2
  1558  00007B                     _iRDistance:
  1559                           	opt stack 0
  1560  00007B                     	ds	2
  1561  00007D                     _pShiftVal:
  1562                           	opt stack 0
  1563  00007D                     	ds	2
  1564  00007F                     _val:
  1565                           	opt stack 0
  1566  00007F                     	ds	2
  1567  000081                     _lMotor:
  1568                           	opt stack 0
  1569  000081                     	ds	2
  1570  000083                     _lCurrent:
  1571                           	opt stack 0
  1572  000083                     	ds	2
  1573  000085                     _gBackcolour:
  1574                           	opt stack 0
  1575  000085                     	ds	2
  1576  000087                     _iRDropLeft:
  1577                           	opt stack 0
  1578  000087                     	ds	1
  1579  000088                     _iRDropRight:
  1580                           	opt stack 0
  1581  000088                     	ds	1
  1582  000089                     _iRBumpLeft:
  1583                           	opt stack 0
  1584  000089                     	ds	1
  1585  00008A                     _iRBumpRight:
  1586                           	opt stack 0
  1587  00008A                     	ds	1
  1588  00008B                     Event_TestButton@j:
  1589                           	opt stack 0
  1590  00008B                     	ds	1
  1591  00008C                     Timer2_Init@PRE:
  1592                           	opt stack 0
  1593  00008C                     	ds	1
  1594  00008D                     Timer2_Init@INDEX:
  1595                           	opt stack 0
  1596  00008D                     	ds	1
  1597  00008E                     Timer0_Init@PRE:
  1598                           	opt stack 0
  1599  00008E                     	ds	1
  1600  00008F                     _INDEX:
  1601                           	opt stack 0
  1602  00008F                     	ds	1
  1603  000090                     _lBufferY:
  1604                           	opt stack 0
  1605  000090                     	ds	1
  1606  000091                     _lBufferX:
  1607                           	opt stack 0
  1608  000091                     	ds	1
  1609  000092                     _clearall:
  1610                           	opt stack 0
  1611  000092                     	ds	1
  1612  000093                     _PortE:
  1613                           	opt stack 0
  1614  000093                     	ds	10
  1615  00009D                     _PortD:
  1616                           	opt stack 0
  1617  00009D                     	ds	10
  1618  0000A7                     _PortC:
  1619                           	opt stack 0
  1620  0000A7                     	ds	10
  1621  0000B1                     _ADC_AN0:
  1622                           	opt stack 0
  1623  0000B1                     	ds	5
  1624  0000B6                     LCD_DrawRectangle@p2:
  1625                           	opt stack 0
  1626  0000B6                     	ds	4
  1627                           tblptru	equ	0xFF8
  1628                           tblptrh	equ	0xFF7
  1629                           tblptrl	equ	0xFF6
  1630                           tablat	equ	0xFF5
  1631                           postinc0	equ	0xFEE
  1632                           wreg	equ	0xFE8
  1633                           postdec1	equ	0xFE5
  1634                           fsr1h	equ	0xFE2
  1635                           fsr1l	equ	0xFE1
  1636                           
  1637                           	psect	dataBANK0
  1638  0000F9                     __pdataBANK0:
  1639                           	opt stack 0
  1640  0000F9                     _TimerX:
  1641                           	opt stack 0
  1642  0000F9                     	ds	2
  1643  0000FB                     _MinDist:
  1644                           	opt stack 0
  1645  0000FB                     	ds	2
  1646  0000FD                     _gForecolour:
  1647                           	opt stack 0
  1648  0000FD                     	ds	2
  1649  0000FF                     _change:
  1650                           	opt stack 0
  1651  0000FF                     	ds	1
  1652                           tblptru	equ	0xFF8
  1653                           tblptrh	equ	0xFF7
  1654                           tblptrl	equ	0xFF6
  1655                           tablat	equ	0xFF5
  1656                           postinc0	equ	0xFEE
  1657                           wreg	equ	0xFE8
  1658                           postdec1	equ	0xFE5
  1659                           fsr1h	equ	0xFE2
  1660                           fsr1l	equ	0xFE1
  1661                           
  1662                           	psect	bssBANK3
  1663  000300                     __pbssBANK3:
  1664                           	opt stack 0
  1665  000300                     _lCBuffer:
  1666                           	opt stack 0
  1667  000300                     	ds	30
  1668  00031E                     _iRAngleSS:
  1669                           	opt stack 0
  1670  00031E                     	ds	4
  1671  000322                     _iRDistanceSS:
  1672                           	opt stack 0
  1673  000322                     	ds	4
  1674  000326                     Timer2_Init@DIV:
  1675                           	opt stack 0
  1676  000326                     	ds	4
  1677  00032A                     Timer0_Init@DIV:
  1678                           	opt stack 0
  1679  00032A                     	ds	4
  1680  00032E                     _I2C2_More:
  1681                           	opt stack 0
  1682  00032E                     	ds	3
  1683  000331                     _I2C1_More:
  1684                           	opt stack 0
  1685  000331                     	ds	3
  1686  000334                     _I2C2_Done:
  1687                           	opt stack 0
  1688  000334                     	ds	3
  1689  000337                     _I2C1_Done:
  1690                           	opt stack 0
  1691  000337                     	ds	3
  1692  00033A                     _dip:
  1693                           	opt stack 0
  1694  00033A                     	ds	2
  1695  00033C                     _HMIBoard:
  1696                           	opt stack 0
  1697  00033C                     	ds	58
  1698  000376                     _SPI1:
  1699                           	opt stack 0
  1700  000376                     	ds	11
  1701  000381                     _SPI2:
  1702                           	opt stack 0
  1703  000381                     	ds	11
  1704  00038C                     _DIPSwitch:
  1705                           	opt stack 0
  1706  00038C                     	ds	10
  1707  000396                     _TestButton:
  1708                           	opt stack 0
  1709  000396                     	ds	10
  1710  0003A0                     _PortG:
  1711                           	opt stack 0
  1712  0003A0                     	ds	10
  1713  0003AA                     _PortB:
  1714                           	opt stack 0
  1715  0003AA                     	ds	10
  1716  0003B4                     _PortA:
  1717                           	opt stack 0
  1718  0003B4                     	ds	10
  1719  0003BE                     _PortF:
  1720                           	opt stack 0
  1721  0003BE                     	ds	10
  1722  0003C8                     _I2C2T:
  1723                           	opt stack 0
  1724  0003C8                     	ds	7
  1725  0003CF                     _Stepper:
  1726                           	opt stack 0
  1727  0003CF                     	ds	6
  1728  0003D5                     _ADC_AN3:
  1729                           	opt stack 0
  1730  0003D5                     	ds	5
  1731  0003DA                     _ADC_AN2:
  1732                           	opt stack 0
  1733  0003DA                     	ds	5
  1734  0003DF                     _ADC_AN1:
  1735                           	opt stack 0
  1736  0003DF                     	ds	5
  1737  0003E4                     LCD_DrawRectangle@p4:
  1738                           	opt stack 0
  1739  0003E4                     	ds	4
  1740                           tblptru	equ	0xFF8
  1741                           tblptrh	equ	0xFF7
  1742                           tblptrl	equ	0xFF6
  1743                           tablat	equ	0xFF5
  1744                           postinc0	equ	0xFEE
  1745                           wreg	equ	0xFE8
  1746                           postdec1	equ	0xFE5
  1747                           fsr1h	equ	0xFE2
  1748                           fsr1l	equ	0xFE1
  1749                           
  1750                           	psect	dataBANK3
  1751  0003E8                     __pdataBANK3:
  1752                           	opt stack 0
  1753  0003E8                     Console_Render@F6956:
  1754                           	opt stack 0
  1755  0003E8                     	ds	4
  1756  0003EC                     _gLineSize:
  1757                           	opt stack 0
  1758  0003EC                     	ds	4
  1759  0003F0                     _gCharSize:
  1760                           	opt stack 0
  1761  0003F0                     	ds	4
  1762                           tblptru	equ	0xFF8
  1763                           tblptrh	equ	0xFF7
  1764                           tblptrl	equ	0xFF6
  1765                           tablat	equ	0xFF5
  1766                           postinc0	equ	0xFEE
  1767                           wreg	equ	0xFE8
  1768                           postdec1	equ	0xFE5
  1769                           fsr1h	equ	0xFE2
  1770                           fsr1l	equ	0xFE1
  1771                           
  1772                           	psect	bssBANK4
  1773  000400                     __pbssBANK4:
  1774                           	opt stack 0
  1775  000400                     _iRScriptStack:
  1776                           	opt stack 0
  1777  000400                     	ds	100
  1778  000464                     Console_MakeField@Fill:
  1779                           	opt stack 0
  1780  000464                     	ds	70
  1781                           tblptru	equ	0xFF8
  1782                           tblptrh	equ	0xFF7
  1783                           tblptrl	equ	0xFF6
  1784                           tablat	equ	0xFF5
  1785                           postinc0	equ	0xFEE
  1786                           wreg	equ	0xFE8
  1787                           postdec1	equ	0xFE5
  1788                           fsr1h	equ	0xFE2
  1789                           fsr1l	equ	0xFE1
  1790                           
  1791                           	psect	bssBIGRAM
  1792  0004AA                     __pbssBIGRAM:
  1793                           	opt stack 0
  1794  0004AA                     _lBuffer:
  1795                           	opt stack 0
  1796  0004AA                     	ds	300
  1797                           tblptru	equ	0xFF8
  1798                           tblptrh	equ	0xFF7
  1799                           tblptrl	equ	0xFF6
  1800                           tablat	equ	0xFF5
  1801                           postinc0	equ	0xFEE
  1802                           wreg	equ	0xFE8
  1803                           postdec1	equ	0xFE5
  1804                           fsr1h	equ	0xFE2
  1805                           fsr1l	equ	0xFE1
  1806                           
  1807                           	psect	cstackBANK3
  1808  0003F4                     __pcstackBANK3:
  1809                           	opt stack 0
  1810  0003F4                     ??_mode1:
  1811  0003F4                     ??_mode4:
  1812                           
  1813                           ; 1 bytes @ 0x0
  1814  0003F4                     	ds	2
  1815  0003F6                     mode1@moveto:
  1816                           	opt stack 0
  1817                           
  1818                           ; 2 bytes @ 0x2
  1819  0003F6                     	ds	2
  1820  0003F8                     _mode1$15599:
  1821                           	opt stack 0
  1822                           
  1823                           ; 4 bytes @ 0x4
  1824  0003F8                     	ds	4
  1825  0003FC                     ??_main:
  1826                           
  1827                           ; 1 bytes @ 0x8
  1828  0003FC                     	ds	2
  1829                           tblptru	equ	0xFF8
  1830                           tblptrh	equ	0xFF7
  1831                           tblptrl	equ	0xFF6
  1832                           tablat	equ	0xFF5
  1833                           postinc0	equ	0xFEE
  1834                           wreg	equ	0xFE8
  1835                           postdec1	equ	0xFE5
  1836                           fsr1h	equ	0xFE2
  1837                           fsr1l	equ	0xFE1
  1838                           
  1839                           	psect	cstackBANK2
  1840  000200                     __pcstackBANK2:
  1841                           	opt stack 0
  1842  000200                     irobot_query_and_update@TXArray:
  1843                           	opt stack 0
  1844                           
  1845                           ; 256 bytes @ 0x0
  1846  000200                     	ds	256
  1847                           tblptru	equ	0xFF8
  1848                           tblptrh	equ	0xFF7
  1849                           tblptrl	equ	0xFF6
  1850                           tablat	equ	0xFF5
  1851                           postinc0	equ	0xFEE
  1852                           wreg	equ	0xFE8
  1853                           postdec1	equ	0xFE5
  1854                           fsr1h	equ	0xFE2
  1855                           fsr1l	equ	0xFE1
  1856                           
  1857                           	psect	cstackBANK1
  1858  000100                     __pcstackBANK1:
  1859                           	opt stack 0
  1860  000100                     ??___fltol:
  1861  000100                     Port_SetType@Output:
  1862                           	opt stack 0
  1863  000100                     Button_Init@pInput:
  1864                           	opt stack 0
  1865  000100                     irobot_query_and_update@RXArray:
  1866                           	opt stack 0
  1867                           
  1868                           ; 256 bytes @ 0x0
  1869  000100                     	ds	1
  1870  000101                     Port_Init@pInput:
  1871                           	opt stack 0
  1872                           
  1873                           ; 2 bytes @ 0x1
  1874  000101                     	ds	1
  1875  000102                     Button_Init@pThreshold:
  1876                           	opt stack 0
  1877                           
  1878                           ; 2 bytes @ 0x2
  1879  000102                     	ds	1
  1880  000103                     Port_Init@pPort:
  1881                           	opt stack 0
  1882                           
  1883                           ; 1 bytes @ 0x3
  1884  000103                     	ds	1
  1885  000104                     ??_Port_Init:
  1886  000104                     ??_findClosestWall:
  1887  000104                     Button_Init@pInitIO:
  1888                           	opt stack 0
  1889                           
  1890                           ; 3 bytes @ 0x4
  1891  000104                     	ds	1
  1892  000105                     _findClosestWall$15598:
  1893                           	opt stack 0
  1894                           
  1895                           ; 4 bytes @ 0x5
  1896  000105                     	ds	1
  1897  000106                     Port_Init@i:
  1898                           	opt stack 0
  1899                           
  1900                           ; 1 bytes @ 0x6
  1901  000106                     	ds	1
  1902  000107                     Button_Init@pGetState:
  1903                           	opt stack 0
  1904                           
  1905                           ; 3 bytes @ 0x7
  1906  000107                     	ds	3
  1907  00010A                     Button_Init@pFunction:
  1908                           	opt stack 0
  1909                           
  1910                           ; 3 bytes @ 0xA
  1911  00010A                     	ds	246
  1912                           tblptru	equ	0xFF8
  1913                           tblptrh	equ	0xFF7
  1914                           tblptrl	equ	0xFF6
  1915                           tablat	equ	0xFF5
  1916                           postinc0	equ	0xFEE
  1917                           wreg	equ	0xFE8
  1918                           postdec1	equ	0xFE5
  1919                           fsr1h	equ	0xFE2
  1920                           fsr1l	equ	0xFE1
  1921                           
  1922                           	psect	cstackBANK0
  1923  0000BA                     __pcstackBANK0:
  1924                           	opt stack 0
  1925  0000BA                     ??_Console_ClearCursor:
  1926  0000BA                     ??_ADC_SetChannel:
  1927  0000BA                     ??_ADC_ConversionTime:
  1928  0000BA                     ??_ADC_SetupIO:
  1929  0000BA                     ??_sort_iRBumpDrop:
  1930  0000BA                     ?_load_iRScriptStack:
  1931                           	opt stack 0
  1932  0000BA                     ??_Console_Init:
  1933  0000BA                     ??_Console_NewLine:
  1934  0000BA                     ??_Console_FormFeed:
  1935  0000BA                     ??_HMI_SetButton:
  1936  0000BA                     ?_GetPortProperties:
  1937                           	opt stack 0
  1938  0000BA                     ?_GetPortPORT:
  1939                           	opt stack 0
  1940  0000BA                     ?_GetPortTRIS:
  1941                           	opt stack 0
  1942  0000BA                     ?_twos_complement_of:
  1943                           	opt stack 0
  1944  0000BA                     ?___wmul:
  1945                           	opt stack 0
  1946  0000BA                     ?___awdiv:
  1947                           	opt stack 0
  1948  0000BA                     ?___lwdiv:
  1949                           	opt stack 0
  1950  0000BA                     ?___fldiv:
  1951                           	opt stack 0
  1952  0000BA                     ?___lldiv:
  1953                           	opt stack 0
  1954  0000BA                     ?___xxtofl:
  1955                           	opt stack 0
  1956  0000BA                     Mode_Set@pMode:
  1957                           	opt stack 0
  1958  0000BA                     ToSegment@pCHR:
  1959                           	opt stack 0
  1960  0000BA                     HMI_SetBar@pValue:
  1961                           	opt stack 0
  1962  0000BA                     ADC_ClockDivision@pDivide:
  1963                           	opt stack 0
  1964  0000BA                     get_packet_size@packetID:
  1965                           	opt stack 0
  1966  0000BA                     eusart_putch@eusartSendChar:
  1967                           	opt stack 0
  1968  0000BA                     Port_GetPin@pInput:
  1969                           	opt stack 0
  1970  0000BA                     Port_GetQuad@pInput:
  1971                           	opt stack 0
  1972  0000BA                     SPI_DisableISR@pInput:
  1973                           	opt stack 0
  1974  0000BA                     SPI_DCS@pInput:
  1975                           	opt stack 0
  1976  0000BA                     SPI_Send@pInput:
  1977                           	opt stack 0
  1978  0000BA                     Byte_SetBit@pInput:
  1979                           	opt stack 0
  1980  0000BA                     Byte_GetBit@pInput:
  1981                           	opt stack 0
  1982  0000BA                     Byte_SetZone@pInput:
  1983                           	opt stack 0
  1984  0000BA                     Byte_GetZone@pInput:
  1985                           	opt stack 0
  1986  0000BA                     Byte_SetByte@pInput:
  1987                           	opt stack 0
  1988  0000BA                     delay_ms@ms:
  1989                           	opt stack 0
  1990  0000BA                     delay_us@us:
  1991                           	opt stack 0
  1992  0000BA                     reverse@input:
  1993                           	opt stack 0
  1994  0000BA                     twos_complement_of@complementValue:
  1995                           	opt stack 0
  1996  0000BA                     ___wmul@multiplier:
  1997                           	opt stack 0
  1998  0000BA                     ___awdiv@dividend:
  1999                           	opt stack 0
  2000  0000BA                     ___lwdiv@dividend:
  2001                           	opt stack 0
  2002  0000BA                     MXK_Queue@pCallback:
  2003                           	opt stack 0
  2004  0000BA                     Timer0_Start@pFunction:
  2005                           	opt stack 0
  2006  0000BA                     ___lldiv@dividend:
  2007                           	opt stack 0
  2008  0000BA                     ___fldiv@b:
  2009                           	opt stack 0
  2010  0000BA                     ___xxtofl@val:
  2011                           	opt stack 0
  2012                           
  2013                           ; 4 bytes @ 0x0
  2014  0000BA                     	ds	1
  2015  0000BB                     ADC_SetChannel@pChannel:
  2016                           	opt stack 0
  2017  0000BB                     ADC_ClockDivision@reg:
  2018                           	opt stack 0
  2019  0000BB                     ADC_ConversionTime@pCount:
  2020                           	opt stack 0
  2021  0000BB                     rx_assign@packetIDValue:
  2022                           	opt stack 0
  2023  0000BB                     irobot_song_play@songNumber:
  2024                           	opt stack 0
  2025  0000BB                     HMI_SetSegments@pString:
  2026                           	opt stack 0
  2027                           
  2028                           ; 2 bytes @ 0x1
  2029  0000BB                     	ds	1
  2030  0000BC                     GetPortProperties@pInput:
  2031                           	opt stack 0
  2032  0000BC                     GetPortPORT@pInput:
  2033                           	opt stack 0
  2034  0000BC                     GetPortTRIS@pInput:
  2035                           	opt stack 0
  2036  0000BC                     Port_GetPin@pPin:
  2037                           	opt stack 0
  2038  0000BC                     Port_GetQuad@pQuad:
  2039                           	opt stack 0
  2040  0000BC                     SPI_Send@pData:
  2041                           	opt stack 0
  2042  0000BC                     Byte_SetBit@pBit:
  2043                           	opt stack 0
  2044  0000BC                     Byte_GetBit@pBit:
  2045                           	opt stack 0
  2046  0000BC                     Byte_SetZone@pMax:
  2047                           	opt stack 0
  2048  0000BC                     Byte_GetZone@pMax:
  2049                           	opt stack 0
  2050  0000BC                     Byte_SetByte@pValue:
  2051                           	opt stack 0
  2052  0000BC                     Console_Init@x:
  2053                           	opt stack 0
  2054  0000BC                     Console_FormFeed@x:
  2055                           	opt stack 0
  2056  0000BC                     ADC_SetupIO@pChannel:
  2057                           	opt stack 0
  2058  0000BC                     ADC_ClockDivision@unfound:
  2059                           	opt stack 0
  2060  0000BC                     rx_assign@byteNumber:
  2061                           	opt stack 0
  2062  0000BC                     reverse@length:
  2063                           	opt stack 0
  2064  0000BC                     ADC_Start@pInput:
  2065                           	opt stack 0
  2066  0000BC                     ___wmul@multiplicand:
  2067                           	opt stack 0
  2068  0000BC                     ___awdiv@divisor:
  2069                           	opt stack 0
  2070  0000BC                     ___lwdiv@divisor:
  2071                           	opt stack 0
  2072  0000BC                     delay_ms@u:
  2073                           	opt stack 0
  2074  0000BC                     delay_us@u:
  2075                           	opt stack 0
  2076  0000BC                     HMI_SetButton@reindex:
  2077                           	opt stack 0
  2078                           
  2079                           ; 4 bytes @ 0x2
  2080  0000BC                     	ds	1
  2081  0000BD                     ??_Port_GetPin:
  2082  0000BD                     ??_Port_GetQuad:
  2083  0000BD                     ??_Byte_GetBit:
  2084  0000BD                     ??_rx_assign:
  2085  0000BD                     LCD_Write@mode:
  2086                           	opt stack 0
  2087  0000BD                     Byte_SetBit@pValue:
  2088                           	opt stack 0
  2089  0000BD                     Byte_SetZone@pChunk:
  2090                           	opt stack 0
  2091  0000BD                     Byte_GetZone@pChunk:
  2092                           	opt stack 0
  2093  0000BD                     Console_Init@y:
  2094                           	opt stack 0
  2095  0000BD                     Console_FormFeed@y:
  2096                           	opt stack 0
  2097  0000BD                     OutSeg@pSegment:
  2098                           	opt stack 0
  2099  0000BD                     ADC_SetupIO@MASK:
  2100                           	opt stack 0
  2101  0000BD                     Motor_Move@pMotor:
  2102                           	opt stack 0
  2103                           
  2104                           ; 2 bytes @ 0x3
  2105  0000BD                     	ds	1
  2106  0000BE                     ??_Byte_SetBit:
  2107  0000BE                     ??_Console_IncrementCursor:
  2108  0000BE                     ??_OutSeg:
  2109  0000BE                     ??_ADC_Start:
  2110  0000BE                     ??___xxtofl:
  2111  0000BE                     LCD_Write@value:
  2112                           	opt stack 0
  2113  0000BE                     Byte_GetBit@Output:
  2114                           	opt stack 0
  2115  0000BE                     Byte_SetZone@pChunkSize:
  2116                           	opt stack 0
  2117  0000BE                     Byte_GetZone@pChunkSize:
  2118                           	opt stack 0
  2119  0000BE                     reverse@tempVar:
  2120                           	opt stack 0
  2121  0000BE                     ___awdiv@counter:
  2122                           	opt stack 0
  2123  0000BE                     ___lwdiv@counter:
  2124                           	opt stack 0
  2125  0000BE                     HMI_SetSegments@in:
  2126                           	opt stack 0
  2127  0000BE                     ADC_Init@pInput:
  2128                           	opt stack 0
  2129  0000BE                     ___wmul@product:
  2130                           	opt stack 0
  2131  0000BE                     ___lldiv@divisor:
  2132                           	opt stack 0
  2133  0000BE                     ___fldiv@a:
  2134                           	opt stack 0
  2135                           
  2136                           ; 4 bytes @ 0x4
  2137  0000BE                     	ds	1
  2138  0000BF                     ??_Byte_GetZone:
  2139  0000BF                     ?_Console_MakeField:
  2140                           	opt stack 0
  2141  0000BF                     Set_Addr_Window@ys:
  2142                           	opt stack 0
  2143  0000BF                     Set_Rotation@m:
  2144                           	opt stack 0
  2145  0000BF                     Port_GetPin@Output:
  2146                           	opt stack 0
  2147  0000BF                     Port_GetQuad@Output:
  2148                           	opt stack 0
  2149  0000BF                     Byte_SetZone@pValue:
  2150                           	opt stack 0
  2151  0000BF                     rx_assign@packetID:
  2152                           	opt stack 0
  2153  0000BF                     ___awdiv@sign:
  2154                           	opt stack 0
  2155  0000BF                     LCD_Word_Write@value:
  2156                           	opt stack 0
  2157  0000BF                     reverse@iterator:
  2158                           	opt stack 0
  2159  0000BF                     Motor_Move@pDelta:
  2160                           	opt stack 0
  2161  0000BF                     ___lwdiv@quotient:
  2162                           	opt stack 0
  2163                           
  2164                           ; 2 bytes @ 0x5
  2165  0000BF                     	ds	1
  2166  0000C0                     ?_irobot_query_and_update:
  2167                           	opt stack 0
  2168  0000C0                     ??_Byte_SetZone:
  2169  0000C0                     Set_Addr_Window@xe:
  2170                           	opt stack 0
  2171  0000C0                     Set_Rotation@rotation:
  2172                           	opt stack 0
  2173  0000C0                     Byte_GetZone@MASK:
  2174                           	opt stack 0
  2175  0000C0                     OutSeg@pInput:
  2176                           	opt stack 0
  2177  0000C0                     HMI_SetButton@pValue:
  2178                           	opt stack 0
  2179  0000C0                     ADC_Init@pChannel:
  2180                           	opt stack 0
  2181  0000C0                     MXK_BlockSwitchTo@CUR:
  2182                           	opt stack 0
  2183  0000C0                     MXK_SwitchTo@CUR:
  2184                           	opt stack 0
  2185  0000C0                     ___awdiv@quotient:
  2186                           	opt stack 0
  2187                           
  2188                           ; 2 bytes @ 0x6
  2189  0000C0                     	ds	1
  2190  0000C1                     ??_Console_MakeField:
  2191  0000C1                     ?___lwmod:
  2192                           	opt stack 0
  2193  0000C1                     Set_Addr_Window@ye:
  2194                           	opt stack 0
  2195  0000C1                     Byte_GetZone@Offset:
  2196                           	opt stack 0
  2197  0000C1                     OutSeg@out:
  2198                           	opt stack 0
  2199  0000C1                     HMI_SetButton@v:
  2200                           	opt stack 0
  2201  0000C1                     MXK_BlockSwitchTo@pModule:
  2202                           	opt stack 0
  2203  0000C1                     MXK_SwitchTo@pModule:
  2204                           	opt stack 0
  2205  0000C1                     ___lwmod@dividend:
  2206                           	opt stack 0
  2207                           
  2208                           ; 2 bytes @ 0x7
  2209  0000C1                     	ds	1
  2210  0000C2                     ??___fldiv:
  2211  0000C2                     ??_Console_Tab:
  2212  0000C2                     Set_Addr_Window@xs:
  2213                           	opt stack 0
  2214  0000C2                     Byte_GetZone@Output:
  2215                           	opt stack 0
  2216  0000C2                     ___xxtofl@sign:
  2217                           	opt stack 0
  2218  0000C2                     HMI_Render@a:
  2219                           	opt stack 0
  2220  0000C2                     ___lldiv@quotient:
  2221                           	opt stack 0
  2222                           
  2223                           ; 4 bytes @ 0x8
  2224  0000C2                     	ds	1
  2225  0000C3                     Byte_SetZone@Offset:
  2226                           	opt stack 0
  2227  0000C3                     ___xxtofl@exp:
  2228                           	opt stack 0
  2229  0000C3                     LCD_Fill@pColour:
  2230                           	opt stack 0
  2231  0000C3                     LCD_FillRectangle@pColour:
  2232                           	opt stack 0
  2233  0000C3                     Byte_GetPair@pInput:
  2234                           	opt stack 0
  2235  0000C3                     Console_MakeField@Index:
  2236                           	opt stack 0
  2237  0000C3                     ___lwmod@divisor:
  2238                           	opt stack 0
  2239                           
  2240                           ; 2 bytes @ 0x9
  2241  0000C3                     	ds	1
  2242  0000C4                     ??_load_iRScriptStack:
  2243  0000C4                     Byte_SetZone@MASK:
  2244                           	opt stack 0
  2245  0000C4                     ___xxtofl@arg:
  2246                           	opt stack 0
  2247                           
  2248                           ; 4 bytes @ 0xA
  2249  0000C4                     	ds	1
  2250  0000C5                     LCD_Fill@i:
  2251                           	opt stack 0
  2252  0000C5                     Byte_GetPair@pPair:
  2253                           	opt stack 0
  2254  0000C5                     Console_MakeField@pInput:
  2255                           	opt stack 0
  2256  0000C5                     ___lwmod@counter:
  2257                           	opt stack 0
  2258  0000C5                     Byte_SetPair@pInput:
  2259                           	opt stack 0
  2260  0000C5                     Byte_SetQuad@pInput:
  2261                           	opt stack 0
  2262  0000C5                     LCD_FillRectangle@pPoint:
  2263                           	opt stack 0
  2264                           
  2265                           ; 4 bytes @ 0xB
  2266  0000C5                     	ds	1
  2267  0000C6                     LCD_Fill@j:
  2268                           	opt stack 0
  2269  0000C6                     ___lldiv@counter:
  2270                           	opt stack 0
  2271  0000C6                     ___fldiv@sign:
  2272                           	opt stack 0
  2273  0000C6                     Word_GetPair@pInput:
  2274                           	opt stack 0
  2275  0000C6                     itos@input:
  2276                           	opt stack 0
  2277  0000C6                     Console_MakeField@Column:
  2278                           	opt stack 0
  2279  0000C6                     load_iRScriptStack@loadByte:
  2280                           	opt stack 0
  2281                           
  2282                           ; 2 bytes @ 0xC
  2283  0000C6                     	ds	1
  2284  0000C7                     Byte_SetPair@pPair:
  2285                           	opt stack 0
  2286  0000C7                     Byte_SetQuad@pQuad:
  2287                           	opt stack 0
  2288  0000C7                     Console_Tab@t:
  2289                           	opt stack 0
  2290  0000C7                     Timer0_Init@pFrequency:
  2291                           	opt stack 0
  2292  0000C7                     Timer2_Init@pFrequency:
  2293                           	opt stack 0
  2294  0000C7                     ___fldiv@rem:
  2295                           	opt stack 0
  2296                           
  2297                           ; 4 bytes @ 0xD
  2298  0000C7                     	ds	1
  2299  0000C8                     ?___flmul:
  2300                           	opt stack 0
  2301  0000C8                     Byte_SetPair@pValue:
  2302                           	opt stack 0
  2303  0000C8                     Byte_SetQuad@pValue:
  2304                           	opt stack 0
  2305  0000C8                     Word_GetPair@pPair:
  2306                           	opt stack 0
  2307  0000C8                     Console_Tab@i:
  2308                           	opt stack 0
  2309  0000C8                     load_iRScriptStack@bytesToLoad:
  2310                           	opt stack 0
  2311  0000C8                     itos@destination:
  2312                           	opt stack 0
  2313  0000C8                     _Console_MakeField$10974:
  2314                           	opt stack 0
  2315  0000C8                     ___flmul@b:
  2316                           	opt stack 0
  2317                           
  2318                           ; 4 bytes @ 0xE
  2319  0000C8                     	ds	1
  2320  0000C9                     Console_Tab@c:
  2321                           	opt stack 0
  2322  0000C9                     load_iRScriptStack@i:
  2323                           	opt stack 0
  2324  0000C9                     Port_SetPin@pInput:
  2325                           	opt stack 0
  2326  0000C9                     Port_Set@pInput:
  2327                           	opt stack 0
  2328  0000C9                     SPI_MinSpeed@pInput:
  2329                           	opt stack 0
  2330  0000C9                     SPI_MaxSpeed@pInput:
  2331                           	opt stack 0
  2332  0000C9                     Word_SetPair@pInput:
  2333                           	opt stack 0
  2334  0000C9                     PortProperty_Valid@pInput:
  2335                           	opt stack 0
  2336  0000C9                     LCD_FillRectangle@pSize:
  2337                           	opt stack 0
  2338                           
  2339                           ; 4 bytes @ 0xF
  2340  0000C9                     	ds	1
  2341  0000CA                     ??_irobot_query_and_update:
  2342  0000CA                     ??_Console_PrintChar:
  2343  0000CA                     Console_MakeField@x:
  2344                           	opt stack 0
  2345  0000CA                     irobot_leds@LEDBit:
  2346                           	opt stack 0
  2347  0000CA                     itos@Data:
  2348                           	opt stack 0
  2349  0000CA                     irobot_move@moveSpeed:
  2350                           	opt stack 0
  2351                           
  2352                           ; 2 bytes @ 0x10
  2353  0000CA                     	ds	1
  2354  0000CB                     ??_Timer2_Init:
  2355  0000CB                     ??_Timer0_Init:
  2356  0000CB                     Port_SetPin@pPin:
  2357                           	opt stack 0
  2358  0000CB                     Port_Set@pValue:
  2359                           	opt stack 0
  2360  0000CB                     Word_SetPair@pPair:
  2361                           	opt stack 0
  2362  0000CB                     PortProperty_Valid@pPinDrive:
  2363                           	opt stack 0
  2364  0000CB                     Console_MakeField@y:
  2365                           	opt stack 0
  2366  0000CB                     irobot_leds@powerColour:
  2367                           	opt stack 0
  2368  0000CB                     ___fldiv@new_exp:
  2369                           	opt stack 0
  2370                           
  2371                           ; 2 bytes @ 0x11
  2372  0000CB                     	ds	1
  2373  0000CC                     ??_Port_Set:
  2374  0000CC                     Port_SetPin@pValue:
  2375                           	opt stack 0
  2376  0000CC                     Word_SetPair@pValue:
  2377                           	opt stack 0
  2378  0000CC                     PortProperty_Valid@pPin:
  2379                           	opt stack 0
  2380  0000CC                     irobot_leds@powerLuminosity:
  2381                           	opt stack 0
  2382  0000CC                     LCD_DrawField@pField:
  2383                           	opt stack 0
  2384  0000CC                     itos@Length:
  2385                           	opt stack 0
  2386  0000CC                     irobot_move@moveTurnRadius:
  2387                           	opt stack 0
  2388  0000CC                     Timer2_Init@RDIV:
  2389                           	opt stack 0
  2390  0000CC                     ___flmul@a:
  2391                           	opt stack 0
  2392                           
  2393                           ; 4 bytes @ 0x12
  2394  0000CC                     	ds	1
  2395  0000CD                     ??_PortProperty_Valid:
  2396  0000CD                     ??_LCD_FillRectangle:
  2397  0000CD                     Port_SetPin@Type:
  2398                           	opt stack 0
  2399  0000CD                     Console_PrintChar@pInput:
  2400                           	opt stack 0
  2401  0000CD                     irobot_leds@isScript:
  2402                           	opt stack 0
  2403  0000CD                     Timer0_Init@pCPUClock:
  2404                           	opt stack 0
  2405  0000CD                     ___fldiv@grs:
  2406                           	opt stack 0
  2407                           
  2408                           ; 4 bytes @ 0x13
  2409  0000CD                     	ds	1
  2410  0000CE                     ??_irobot_move:
  2411  0000CE                     LED_Set@pValue:
  2412                           	opt stack 0
  2413  0000CE                     putch@c:
  2414                           	opt stack 0
  2415  0000CE                     irobot_led_power_on@powerOnColour:
  2416                           	opt stack 0
  2417  0000CE                     Port_TogglePin@pInput:
  2418                           	opt stack 0
  2419  0000CE                     itos@Out:
  2420                           	opt stack 0
  2421  0000CE                     LCD_DrawField@pPoint:
  2422                           	opt stack 0
  2423                           
  2424                           ; 4 bytes @ 0x14
  2425  0000CE                     	ds	1
  2426  0000CF                     ?_printf:
  2427                           	opt stack 0
  2428  0000CF                     LCD_FillRectangle@i:
  2429                           	opt stack 0
  2430  0000CF                     LED_Set@pLED:
  2431                           	opt stack 0
  2432  0000CF                     irobot_query_and_update@packetIDs:
  2433                           	opt stack 0
  2434  0000CF                     printf@f:
  2435                           	opt stack 0
  2436  0000CF                     PortProperty_Valid@Errors:
  2437                           	opt stack 0
  2438                           
  2439                           ; 16 bytes @ 0x15
  2440  0000CF                     	ds	1
  2441  0000D0                     ??___flmul:
  2442  0000D0                     LCD_FillRectangle@j:
  2443                           	opt stack 0
  2444  0000D0                     Port_TogglePin@pPin:
  2445                           	opt stack 0
  2446  0000D0                     HMI_SetNumber@pInput:
  2447                           	opt stack 0
  2448  0000D0                     Timer2_Init@pCPUClock:
  2449                           	opt stack 0
  2450                           
  2451                           ; 4 bytes @ 0x16
  2452  0000D0                     	ds	1
  2453  0000D1                     Port_TogglePin@Value:
  2454                           	opt stack 0
  2455  0000D1                     irobot_query_and_update@streamSize:
  2456                           	opt stack 0
  2457  0000D1                     ___fldiv@bexp:
  2458                           	opt stack 0
  2459  0000D1                     Timer0_Init@DIVIDE:
  2460                           	opt stack 0
  2461                           
  2462                           ; 4 bytes @ 0x17
  2463  0000D1                     	ds	1
  2464  0000D2                     LED_Toggle@pLED:
  2465                           	opt stack 0
  2466  0000D2                     irobot_query_and_update@numberOfPacketRequests:
  2467                           	opt stack 0
  2468  0000D2                     irobot_move@isScript:
  2469                           	opt stack 0
  2470  0000D2                     ___fldiv@aexp:
  2471                           	opt stack 0
  2472  0000D2                     LCD_DrawField@pSize:
  2473                           	opt stack 0
  2474                           
  2475                           ; 4 bytes @ 0x18
  2476  0000D2                     	ds	1
  2477  0000D3                     Event_DIPSwitch@pState:
  2478                           	opt stack 0
  2479  0000D3                     Event_TestButton@pState:
  2480                           	opt stack 0
  2481  0000D3                     irobot_query_and_update@packetVariable:
  2482                           	opt stack 0
  2483  0000D3                     irobot_stop_motion@isScript:
  2484                           	opt stack 0
  2485  0000D3                     irobot_move_straight@straightSpeed:
  2486                           	opt stack 0
  2487                           
  2488                           ; 2 bytes @ 0x19
  2489  0000D3                     	ds	1
  2490  0000D4                     Event_DIPSwitch@Bar:
  2491                           	opt stack 0
  2492  0000D4                     irobot_query_and_update@j:
  2493                           	opt stack 0
  2494  0000D4                     ___flmul@sign:
  2495                           	opt stack 0
  2496  0000D4                     Timer2_Init@DIVIDE:
  2497                           	opt stack 0
  2498                           
  2499                           ; 4 bytes @ 0x1A
  2500  0000D4                     	ds	1
  2501  0000D5                     irobot_query_and_update@startIndex:
  2502                           	opt stack 0
  2503  0000D5                     ___flmul@aexp:
  2504                           	opt stack 0
  2505  0000D5                     Button_Poll@pButton:
  2506                           	opt stack 0
  2507  0000D5                     Motor_Speed@pMotor:
  2508                           	opt stack 0
  2509                           
  2510                           ; 2 bytes @ 0x1B
  2511  0000D5                     	ds	1
  2512  0000D6                     ??_LCD_DrawField:
  2513  0000D6                     irobot_query_and_update@i:
  2514                           	opt stack 0
  2515  0000D6                     ___flmul@grs:
  2516                           	opt stack 0
  2517                           
  2518                           ; 4 bytes @ 0x1C
  2519  0000D6                     	ds	1
  2520  0000D7                     Button_Poll@pIncrement:
  2521                           	opt stack 0
  2522  0000D7                     Motor_Speed@pFrequency:
  2523                           	opt stack 0
  2524  0000D7                     irobot_rotate@rotateAngle:
  2525                           	opt stack 0
  2526                           
  2527                           ; 2 bytes @ 0x1D
  2528  0000D7                     	ds	1
  2529  0000D8                     ??_Button_Poll:
  2530  0000D8                     LCD_DrawField@count:
  2531                           	opt stack 0
  2532                           
  2533                           ; 2 bytes @ 0x1E
  2534  0000D8                     	ds	1
  2535  0000D9                     irobot_rotate@rotateSpeed:
  2536                           	opt stack 0
  2537                           
  2538                           ; 2 bytes @ 0x1F
  2539  0000D9                     	ds	1
  2540  0000DA                     LCD_DrawField@xmax:
  2541                           	opt stack 0
  2542  0000DA                     ___flmul@bexp:
  2543                           	opt stack 0
  2544                           
  2545                           ; 1 bytes @ 0x20
  2546  0000DA                     	ds	1
  2547  0000DB                     ??_printf:
  2548  0000DB                     ??_irobot_rotate:
  2549  0000DB                     LCD_DrawField@ymax:
  2550                           	opt stack 0
  2551  0000DB                     ___flmul@prod:
  2552                           	opt stack 0
  2553                           
  2554                           ; 4 bytes @ 0x21
  2555  0000DB                     	ds	1
  2556  0000DC                     LCD_DrawField@i:
  2557                           	opt stack 0
  2558  0000DC                     irobot_rotate@isScript:
  2559                           	opt stack 0
  2560  0000DC                     printf@prec:
  2561                           	opt stack 0
  2562  0000DC                     Port_Set@TypeRequired:
  2563                           	opt stack 0
  2564                           
  2565                           ; 2 bytes @ 0x22
  2566  0000DC                     	ds	1
  2567  0000DD                     ??_Console_Render:
  2568  0000DD                     Button_Poll@Pin:
  2569                           	opt stack 0
  2570  0000DD                     printf@flag:
  2571                           	opt stack 0
  2572  0000DD                     irobot_rotate@angleTotal:
  2573                           	opt stack 0
  2574                           
  2575                           ; 2 bytes @ 0x23
  2576  0000DD                     	ds	1
  2577  0000DE                     Port_Set@TypeActual:
  2578                           	opt stack 0
  2579  0000DE                     printf@ap:
  2580                           	opt stack 0
  2581                           
  2582                           ; 2 bytes @ 0x24
  2583  0000DE                     	ds	1
  2584  0000DF                     PortProperty_Valid@Pair:
  2585                           	opt stack 0
  2586  0000DF                     Console_Render@temp:
  2587                           	opt stack 0
  2588  0000DF                     irobot_rotate@rotateDirection:
  2589                           	opt stack 0
  2590  0000DF                     ___flmul@temp:
  2591                           	opt stack 0
  2592                           
  2593                           ; 2 bytes @ 0x25
  2594  0000DF                     	ds	1
  2595  0000E0                     Port_Set@Type:
  2596                           	opt stack 0
  2597  0000E0                     Port_CheckPairType@pInput:
  2598                           	opt stack 0
  2599  0000E0                     Port_SetPinType@pInput:
  2600                           	opt stack 0
  2601  0000E0                     printf@val:
  2602                           	opt stack 0
  2603  0000E0                     Console_Render@lCursor:
  2604                           	opt stack 0
  2605                           
  2606                           ; 4 bytes @ 0x26
  2607  0000E0                     	ds	1
  2608  0000E1                     ?_ADC_Voltage:
  2609                           	opt stack 0
  2610  0000E1                     ADC_Voltage@pInput:
  2611                           	opt stack 0
  2612                           
  2613                           ; 2 bytes @ 0x27
  2614  0000E1                     	ds	1
  2615  0000E2                     Port_CheckPairType@pPair:
  2616                           	opt stack 0
  2617  0000E2                     Port_SetPinType@pPin:
  2618                           	opt stack 0
  2619  0000E2                     printf@c:
  2620                           	opt stack 0
  2621                           
  2622                           ; 1 bytes @ 0x28
  2623  0000E2                     	ds	1
  2624  0000E3                     Port_CheckPairType@pDrive:
  2625                           	opt stack 0
  2626  0000E3                     Port_SetPinType@pType:
  2627                           	opt stack 0
  2628                           
  2629                           ; 1 bytes @ 0x29
  2630  0000E3                     	ds	1
  2631  0000E4                     Port_CheckPairType@Pin1:
  2632                           	opt stack 0
  2633  0000E4                     Port_SetPinType@Output:
  2634                           	opt stack 0
  2635  0000E4                     Console_Render@x:
  2636                           	opt stack 0
  2637                           
  2638                           ; 1 bytes @ 0x2A
  2639  0000E4                     	ds	1
  2640  0000E5                     ??_ADC_Voltage:
  2641  0000E5                     Port_CheckPairType@Pin2:
  2642                           	opt stack 0
  2643  0000E5                     Console_Render@y:
  2644                           	opt stack 0
  2645  0000E5                     Port_SetPinType@Props:
  2646                           	opt stack 0
  2647                           
  2648                           ; 2 bytes @ 0x2B
  2649  0000E5                     	ds	1
  2650  0000E6                     Port_CheckPairType@Output:
  2651                           	opt stack 0
  2652  0000E6                     mode2@dist:
  2653                           	opt stack 0
  2654                           
  2655                           ; 2 bytes @ 0x2C
  2656  0000E6                     	ds	1
  2657  0000E7                     LED_Init@pLED:
  2658                           	opt stack 0
  2659  0000E7                     Port_CheckPairType@Props:
  2660                           	opt stack 0
  2661  0000E7                     Motor_Init@pMotor:
  2662                           	opt stack 0
  2663  0000E7                     SPI_Init@pClock:
  2664                           	opt stack 0
  2665  0000E7                     ADC_Voltage@max:
  2666                           	opt stack 0
  2667                           
  2668                           ; 4 bytes @ 0x2D
  2669  0000E7                     	ds	2
  2670  0000E9                     Port_CheckQuadType@pInput:
  2671                           	opt stack 0
  2672  0000E9                     Motor_Init@pAddress:
  2673                           	opt stack 0
  2674                           
  2675                           ; 2 bytes @ 0x2F
  2676  0000E9                     	ds	2
  2677  0000EB                     Port_CheckQuadType@pQuad:
  2678                           	opt stack 0
  2679  0000EB                     SPI_Init@pChannel:
  2680                           	opt stack 0
  2681  0000EB                     ADC_Voltage@ref:
  2682                           	opt stack 0
  2683                           
  2684                           ; 4 bytes @ 0x31
  2685  0000EB                     	ds	1
  2686  0000EC                     Port_CheckQuadType@pDrive:
  2687                           	opt stack 0
  2688  0000EC                     SPI_Init@pMode:
  2689                           	opt stack 0
  2690                           
  2691                           ; 1 bytes @ 0x32
  2692  0000EC                     	ds	1
  2693  0000ED                     Port_CheckQuadType@Pair1:
  2694                           	opt stack 0
  2695  0000ED                     SPI_Init@pInput:
  2696                           	opt stack 0
  2697                           
  2698                           ; 2 bytes @ 0x33
  2699  0000ED                     	ds	1
  2700  0000EE                     Port_CheckQuadType@Pair2:
  2701                           	opt stack 0
  2702                           
  2703                           ; 1 bytes @ 0x34
  2704  0000EE                     	ds	1
  2705  0000EF                     ??_LCD_Init:
  2706  0000EF                     Port_CheckQuadType@Output:
  2707                           	opt stack 0
  2708  0000EF                     ADC_Voltage@output:
  2709                           	opt stack 0
  2710                           
  2711                           ; 4 bytes @ 0x35
  2712  0000EF                     	ds	1
  2713  0000F0                     Port_CheckPortType@pInput:
  2714                           	opt stack 0
  2715  0000F0                     Port_SetQuadType@pInput:
  2716                           	opt stack 0
  2717                           
  2718                           ; 2 bytes @ 0x36
  2719  0000F0                     	ds	1
  2720  0000F1                     LCD_Init@i:
  2721                           	opt stack 0
  2722                           
  2723                           ; 2 bytes @ 0x37
  2724  0000F1                     	ds	1
  2725  0000F2                     Port_CheckPortType@pDrive:
  2726                           	opt stack 0
  2727  0000F2                     Port_SetQuadType@pQuad:
  2728                           	opt stack 0
  2729                           
  2730                           ; 1 bytes @ 0x38
  2731  0000F2                     	ds	1
  2732  0000F3                     ?___fltol:
  2733                           	opt stack 0
  2734  0000F3                     Port_CheckPortType@Output:
  2735                           	opt stack 0
  2736  0000F3                     Port_SetQuadType@pType:
  2737                           	opt stack 0
  2738  0000F3                     ___fltol@f1:
  2739                           	opt stack 0
  2740                           
  2741                           ; 4 bytes @ 0x39
  2742  0000F3                     	ds	1
  2743  0000F4                     Port_SetQuadType@Output:
  2744                           	opt stack 0
  2745  0000F4                     Port_SetType@pInput:
  2746                           	opt stack 0
  2747                           
  2748                           ; 2 bytes @ 0x3A
  2749  0000F4                     	ds	1
  2750  0000F5                     HMI_Init@in:
  2751                           	opt stack 0
  2752                           
  2753                           ; 2 bytes @ 0x3B
  2754  0000F5                     	ds	1
  2755  0000F6                     Port_SetType@pType:
  2756                           	opt stack 0
  2757                           
  2758                           ; 1 bytes @ 0x3C
  2759  0000F6                     	ds	1
  2760  0000F7                     ??_Port_SetType:
  2761  0000F7                     ___fltol@sign1:
  2762                           	opt stack 0
  2763                           
  2764                           ; 1 bytes @ 0x3D
  2765  0000F7                     	ds	1
  2766  0000F8                     ___fltol@exp1:
  2767                           	opt stack 0
  2768                           
  2769                           ; 1 bytes @ 0x3E
  2770  0000F8                     	ds	1
  2771  0000F9                     tblptru	equ	0xFF8
  2772                           tblptrh	equ	0xFF7
  2773                           tblptrl	equ	0xFF6
  2774                           tablat	equ	0xFF5
  2775                           postinc0	equ	0xFEE
  2776                           wreg	equ	0xFE8
  2777                           postdec1	equ	0xFE5
  2778                           fsr1h	equ	0xFE2
  2779                           fsr1l	equ	0xFE1
  2780                           
  2781                           ; 1 bytes @ 0x3F
  2782                           
  2783                           	psect	cstackCOMRAM
  2784  000001                     __pcstackCOMRAM:
  2785                           	opt stack 0
  2786  000001                     i2Byte_SetBit@pInput:
  2787                           	opt stack 0
  2788  000001                     i2Byte_GetZone@pInput:
  2789                           	opt stack 0
  2790  000001                     i2delay_us@us:
  2791                           	opt stack 0
  2792  000001                     i2MXK_Queue@pCallback:
  2793                           	opt stack 0
  2794                           
  2795                           ; 3 bytes @ 0x0
  2796  000001                     	ds	2
  2797  000003                     i2Byte_SetBit@pBit:
  2798                           	opt stack 0
  2799  000003                     i2Byte_GetZone@pMax:
  2800                           	opt stack 0
  2801  000003                     i2delay_us@u:
  2802                           	opt stack 0
  2803                           
  2804                           ; 4 bytes @ 0x2
  2805  000003                     	ds	1
  2806  000004                     i2Byte_SetBit@pValue:
  2807                           	opt stack 0
  2808  000004                     i2Byte_GetZone@pChunk:
  2809                           	opt stack 0
  2810                           
  2811                           ; 1 bytes @ 0x3
  2812  000004                     	ds	1
  2813  000005                     ??i2_Byte_SetBit:
  2814  000005                     i2Byte_GetZone@pChunkSize:
  2815                           	opt stack 0
  2816                           
  2817                           ; 1 bytes @ 0x4
  2818  000005                     	ds	1
  2819  000006                     ??i2_Byte_GetZone:
  2820                           
  2821                           ; 1 bytes @ 0x5
  2822  000006                     	ds	1
  2823  000007                     i2Byte_GetZone@MASK:
  2824                           	opt stack 0
  2825  000007                     i2MXK_SwitchTo@CUR:
  2826                           	opt stack 0
  2827                           
  2828                           ; 1 bytes @ 0x6
  2829  000007                     	ds	1
  2830  000008                     i2Byte_GetZone@Offset:
  2831                           	opt stack 0
  2832  000008                     i2MXK_SwitchTo@pModule:
  2833                           	opt stack 0
  2834                           
  2835                           ; 1 bytes @ 0x7
  2836  000008                     	ds	1
  2837  000009                     i2Byte_GetZone@Output:
  2838                           	opt stack 0
  2839                           
  2840                           ; 1 bytes @ 0x8
  2841  000009                     	ds	1
  2842  00000A                     i2Byte_GetPair@pInput:
  2843                           	opt stack 0
  2844                           
  2845                           ; 2 bytes @ 0x9
  2846  00000A                     	ds	2
  2847  00000C                     i2Byte_GetPair@pPair:
  2848                           	opt stack 0
  2849                           
  2850                           ; 1 bytes @ 0xB
  2851  00000C                     	ds	1
  2852  00000D                     i2Word_GetPair@pInput:
  2853                           	opt stack 0
  2854                           
  2855                           ; 2 bytes @ 0xC
  2856  00000D                     	ds	2
  2857  00000F                     i2Word_GetPair@pPair:
  2858                           	opt stack 0
  2859                           
  2860                           ; 1 bytes @ 0xE
  2861  00000F                     	ds	1
  2862  000010                     i2Port_SetPin@pInput:
  2863                           	opt stack 0
  2864                           
  2865                           ; 2 bytes @ 0xF
  2866  000010                     	ds	2
  2867  000012                     i2Port_SetPin@pPin:
  2868                           	opt stack 0
  2869                           
  2870                           ; 1 bytes @ 0x11
  2871  000012                     	ds	1
  2872  000013                     i2Port_SetPin@pValue:
  2873                           	opt stack 0
  2874                           
  2875                           ; 1 bytes @ 0x12
  2876  000013                     	ds	1
  2877  000014                     i2Port_SetPin@Type:
  2878                           	opt stack 0
  2879                           
  2880                           ; 1 bytes @ 0x13
  2881  000014                     	ds	1
  2882  000015                     
  2883                           ; 1 bytes @ 0x14
  2884  000015                     	ds	2
  2885  000017                     ??_ISR_Function:
  2886                           
  2887                           ; 1 bytes @ 0x16
  2888  000017                     	ds	18
  2889                           tblptru	equ	0xFF8
  2890                           tblptrh	equ	0xFF7
  2891                           tblptrl	equ	0xFF6
  2892                           tablat	equ	0xFF5
  2893                           postinc0	equ	0xFEE
  2894                           wreg	equ	0xFE8
  2895                           postdec1	equ	0xFE5
  2896                           fsr1h	equ	0xFE2
  2897                           fsr1l	equ	0xFE1
  2898                           
  2899 ;;
  2900 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2901 ;;
  2902 ;; *************** function _main *****************
  2903 ;; Defined at:
  2904 ;;		line 331 in file "main.c"
  2905 ;; Parameters:    Size  Location     Type
  2906 ;;		None
  2907 ;; Auto vars:     Size  Location     Type
  2908 ;;		None
  2909 ;; Return value:  Size  Location     Type
  2910 ;;                  1    wreg      void 
  2911 ;; Registers used:
  2912 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2913 ;; Tracked objects:
  2914 ;;		On entry : 0/0
  2915 ;;		On exit  : 0/0
  2916 ;;		Unchanged: 0/0
  2917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2920 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2921 ;;      Totals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2922 ;;Total ram usage:        2 bytes
  2923 ;; Hardware stack levels required when called:   18
  2924 ;; This function calls:
  2925 ;;		_Console_Render
  2926 ;;		_HMI_Poll
  2927 ;;		_MXK_Dequeue
  2928 ;;		_MXK_Release
  2929 ;;		_MXK_SwitchTo
  2930 ;;		_getMode
  2931 ;;		_init
  2932 ;;		_mode1
  2933 ;;		_mode2
  2934 ;;		_mode3
  2935 ;;		_mode4
  2936 ;;		_printf
  2937 ;; This function is called by:
  2938 ;;		Startup code after reset
  2939 ;; This function uses a non-reentrant model
  2940 ;;
  2941                           
  2942                           	psect	text0
  2943  0139A4                     __ptext0:
  2944                           	opt stack 0
  2945  0139A4                     _main:
  2946                           	opt stack 13
  2947                           
  2948                           ;main.c: 333: init();
  2949                           
  2950                           ;incstack = 0
  2951  0139A4  EC9D  F0A3         	call	_init	;wreg free
  2952  0139A8                     l2398:
  2953                           
  2954                           ;main.c: 336: getMode();
  2955  0139A8  EC1A  F0A0         	call	_getMode	;wreg free
  2956                           
  2957                           ;main.c: 337: switch (mode) {
  2958  0139AC  D053               	goto	l2399
  2959  0139AE                     
  2960                           ;main.c: 339: mode1();
  2961  0139AE  EC62  F084         	call	_mode1	;wreg free
  2962                           
  2963                           ;main.c: 340: break;
  2964  0139B2  D7FA               	goto	l2398
  2965  0139B4                     
  2966                           ;main.c: 342: mode2();
  2967  0139B4  EC5F  F09C         	call	_mode2	;wreg free
  2968                           
  2969                           ;main.c: 343: break;
  2970  0139B8  D7F7               	goto	l2398
  2971  0139BA                     
  2972                           ;main.c: 345: mode3();
  2973  0139BA  ECAA  F0B2         	call	_mode3	;wreg free
  2974                           
  2975                           ;main.c: 346: break;
  2976  0139BE  D7F4               	goto	l2398
  2977  0139C0                     
  2978                           ;main.c: 348: mode4();
  2979  0139C0  EC94  F093         	call	_mode4	;wreg free
  2980                           
  2981                           ;main.c: 349: break;
  2982  0139C4  D7F1               	goto	l2398
  2983  0139C6                     
  2984                           ;main.c: 351: if (MXK_SwitchTo(eMXK_HMI)) {
  2985  0139C6  0E01               	movlw	1
  2986  0139C8  ECF3  F0AE         	call	_MXK_SwitchTo
  2987  0139CC  0900               	iorlw	0
  2988  0139CE  B4D8               	btfsc	status,2,c
  2989  0139D0  D7EB               	goto	l2398
  2990                           
  2991                           ;main.c: 352: printf("%c", (char)35);
  2992  0139D2  0EFB               	movlw	low STR_1
  2993  0139D4  0100               	movlb	0	; () banked
  2994  0139D6  6FCF               	movwf	printf@f& (0+255),b
  2995  0139D8  0EFF               	movlw	high STR_1
  2996  0139DA  0100               	movlb	0	; () banked
  2997  0139DC  6FD0               	movwf	(printf@f+1)& (0+255),b
  2998  0139DE  0E00               	movlw	0
  2999  0139E0  0100               	movlb	0	; () banked
  3000  0139E2  6FD2               	movwf	(?_printf+3)& (0+255),b
  3001  0139E4  0E23               	movlw	35
  3002  0139E6  6FD1               	movwf	(?_printf+2)& (0+255),b
  3003  0139E8  ECD3  F091         	call	_printf	;wreg free
  3004                           
  3005                           ;main.c: 353: printf("Please select mode.\n");
  3006  0139EC  0ED8               	movlw	low STR_12
  3007  0139EE  0100               	movlb	0	; () banked
  3008  0139F0  6FCF               	movwf	printf@f& (0+255),b
  3009  0139F2  0EFF               	movlw	high STR_12
  3010  0139F4  0100               	movlb	0	; () banked
  3011  0139F6  6FD0               	movwf	(printf@f+1)& (0+255),b
  3012  0139F8  ECD3  F091         	call	_printf	;wreg free
  3013                           
  3014                           ;main.c: 354: printf("                   \n");
  3015  0139FC  0EC3               	movlw	low STR_13
  3016  0139FE  0100               	movlb	0	; () banked
  3017  013A00  6FCF               	movwf	printf@f& (0+255),b
  3018  013A02  0EFF               	movlw	high STR_13
  3019  013A04  0100               	movlb	0	; () banked
  3020  013A06  6FD0               	movwf	(printf@f+1)& (0+255),b
  3021  013A08  ECD3  F091         	call	_printf	;wreg free
  3022                           
  3023                           ;main.c: 355: printf("                   \n");
  3024  013A0C  0EC3               	movlw	low STR_13
  3025  013A0E  0100               	movlb	0	; () banked
  3026  013A10  6FCF               	movwf	printf@f& (0+255),b
  3027  013A12  0EFF               	movlw	high STR_13
  3028  013A14  0100               	movlb	0	; () banked
  3029  013A16  6FD0               	movwf	(printf@f+1)& (0+255),b
  3030  013A18  ECD3  F091         	call	_printf	;wreg free
  3031                           
  3032                           ;main.c: 356: printf("                   \n");
  3033  013A1C  0EC3               	movlw	low STR_13
  3034  013A1E  0100               	movlb	0	; () banked
  3035  013A20  6FCF               	movwf	printf@f& (0+255),b
  3036  013A22  0EFF               	movlw	high STR_13
  3037  013A24  0100               	movlb	0	; () banked
  3038  013A26  6FD0               	movwf	(printf@f+1)& (0+255),b
  3039  013A28  ECD3  F091         	call	_printf	;wreg free
  3040                           
  3041                           ;main.c: 357: printf("                   \n");
  3042  013A2C  0EC3               	movlw	low STR_13
  3043  013A2E  0100               	movlb	0	; () banked
  3044  013A30  6FCF               	movwf	printf@f& (0+255),b
  3045  013A32  0EFF               	movlw	high STR_13
  3046  013A34  0100               	movlb	0	; () banked
  3047  013A36  6FD0               	movwf	(printf@f+1)& (0+255),b
  3048  013A38  ECD3  F091         	call	_printf	;wreg free
  3049                           
  3050                           ;main.c: 358: Console_Render();
  3051  013A3C  ECE7  F08E         	call	_Console_Render	;wreg free
  3052                           
  3053                           ;main.c: 359: HMI_Poll();
  3054  013A40  ECE9  F0A9         	call	_HMI_Poll	;wreg free
  3055                           
  3056                           ;main.c: 360: if (MXK_Release())
  3057  013A44  EC21  F0B2         	call	_MXK_Release	;wreg free
  3058  013A48  0900               	iorlw	0
  3059  013A4A  B4D8               	btfsc	status,2,c
  3060  013A4C  D7AD               	goto	l2398
  3061                           
  3062                           ;main.c: 361: MXK_Dequeue();
  3063  013A4E  EC73  F0AF         	call	_MXK_Dequeue	;wreg free
  3064                           
  3065                           ;main.c: 362: }
  3066                           ;main.c: 363: }
  3067  013A52  D7AA               	goto	l2398
  3068  013A54                     l2399:
  3069  013A54  C073  F3FC         	movff	_mode,??_main
  3070  013A58  C074  F3FD         	movff	_mode+1,??_main+1
  3071                           
  3072                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3073                           ; Switch size 1, requested type "space"
  3074                           ; Number of cases is 1, Range of values is 0 to 0
  3075                           ; switch strategies available:
  3076                           ; Name         Instructions Cycles
  3077                           ; simple_byte            4     3 (average)
  3078                           ;	Chosen strategy is simple_byte
  3079  013A5C  0103               	movlb	3	; () banked
  3080  013A5E  51FD               	movf	(??_main+1)& (0+255),w,b
  3081  013A60  0A00               	xorlw	0	; case 0
  3082  013A62  A4D8               	btfss	status,2,c
  3083  013A64  D7B0               	goto	l2405
  3084                           
  3085                           ; BSR set to: 3
  3086                           ; Switch size 1, requested type "space"
  3087                           ; Number of cases is 4, Range of values is 1 to 4
  3088                           ; switch strategies available:
  3089                           ; Name         Instructions Cycles
  3090                           ; simple_byte           13     7 (average)
  3091                           ;	Chosen strategy is simple_byte
  3092  013A66  0103               	movlb	3	; () banked
  3093  013A68  51FC               	movf	??_main& (0+255),w,b
  3094  013A6A  0A01               	xorlw	1	; case 1
  3095  013A6C  B4D8               	btfsc	status,2,c
  3096  013A6E  D79F               	goto	l2400
  3097  013A70  0A03               	xorlw	3	; case 2
  3098  013A72  B4D8               	btfsc	status,2,c
  3099  013A74  D79F               	goto	l2402
  3100  013A76  0A01               	xorlw	1	; case 3
  3101  013A78  B4D8               	btfsc	status,2,c
  3102  013A7A  D79F               	goto	l2403
  3103  013A7C  0A07               	xorlw	7	; case 4
  3104  013A7E  B4D8               	btfsc	status,2,c
  3105  013A80  D79F               	goto	l2404
  3106  013A82  D7A1               	goto	l2405
  3107  013A84                     __end_of_main:
  3108                           	opt stack 0
  3109                           tblptru	equ	0xFF8
  3110                           tblptrh	equ	0xFF7
  3111                           tblptrl	equ	0xFF6
  3112                           tablat	equ	0xFF5
  3113                           postinc0	equ	0xFEE
  3114                           wreg	equ	0xFE8
  3115                           postdec1	equ	0xFE5
  3116                           fsr1h	equ	0xFE2
  3117                           fsr1l	equ	0xFE1
  3118                           status	equ	0xFD8
  3119                           
  3120 ;; *************** function _mode4 *****************
  3121 ;; Defined at:
  3122 ;;		line 298 in file "main.c"
  3123 ;; Parameters:    Size  Location     Type
  3124 ;;		None
  3125 ;; Auto vars:     Size  Location     Type
  3126 ;;		None
  3127 ;; Return value:  Size  Location     Type
  3128 ;;                  1    wreg      void 
  3129 ;; Registers used:
  3130 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3131 ;; Tracked objects:
  3132 ;;		On entry : 0/0
  3133 ;;		On exit  : 0/0
  3134 ;;		Unchanged: 0/0
  3135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3138 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3139 ;;      Totals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3140 ;;Total ram usage:        2 bytes
  3141 ;; Hardware stack levels used:    1
  3142 ;; Hardware stack levels required when called:   17
  3143 ;; This function calls:
  3144 ;;		_Console_Render
  3145 ;;		_MXK_Dequeue
  3146 ;;		_MXK_Release
  3147 ;;		_MXK_SwitchTo
  3148 ;;		_findClosestWall
  3149 ;;		_irobot_rotate
  3150 ;;		_irobot_song_play
  3151 ;;		_irobot_stop_motion
  3152 ;;		_printf
  3153 ;;		_safeToGo
  3154 ;;		_update_bump_and_cliff
  3155 ;; This function is called by:
  3156 ;;		_main
  3157 ;; This function uses a non-reentrant model
  3158 ;;
  3159                           
  3160                           	psect	text1
  3161  012728                     __ptext1:
  3162                           	opt stack 0
  3163  012728                     _mode4:
  3164                           	opt stack 13
  3165                           
  3166                           ;main.c: 299: safeToGo();
  3167                           
  3168                           ; BSR set to: 3
  3169                           ;incstack = 0
  3170  012728  ECB2  F0AD         	call	_safeToGo	;wreg free
  3171                           
  3172                           ;main.c: 300: StepRotate = 401;
  3173  01272C  0E01               	movlw	1
  3174  01272E  0100               	movlb	0	; () banked
  3175  012730  6F72               	movwf	(_StepRotate+1)& (0+255),b
  3176  012732  0E91               	movlw	145
  3177  012734  6F71               	movwf	_StepRotate& (0+255),b
  3178                           
  3179                           ; BSR set to: 0
  3180                           ;main.c: 301: MinDist = 1000;
  3181  012736  0E03               	movlw	3
  3182  012738  0100               	movlb	0	; () banked
  3183  01273A  6FFC               	movwf	(_MinDist+1)& (0+255),b
  3184  01273C  0EE8               	movlw	232
  3185  01273E  6FFB               	movwf	_MinDist& (0+255),b
  3186                           
  3187                           ; BSR set to: 0
  3188                           ;main.c: 302: Stepstomin = 0;
  3189  012740  0E00               	movlw	0
  3190  012742  0100               	movlb	0	; () banked
  3191  012744  6F70               	movwf	(_Stepstomin+1)& (0+255),b
  3192  012746  0E00               	movlw	0
  3193  012748  6F6F               	movwf	_Stepstomin& (0+255),b
  3194                           
  3195                           ; BSR set to: 0
  3196                           ;main.c: 303: angleToClosestWall = 1000;
  3197  01274A  0E03               	movlw	3
  3198  01274C  0100               	movlb	0	; () banked
  3199  01274E  6F6C               	movwf	(_angleToClosestWall+1)& (0+255),b
  3200  012750  0EE8               	movlw	232
  3201  012752  6F6B               	movwf	_angleToClosestWall& (0+255),b
  3202                           
  3203                           ; BSR set to: 0
  3204                           ;main.c: 304: IRValue = 0;
  3205  012754  0E00               	movlw	0
  3206  012756  0100               	movlb	0	; () banked
  3207  012758  6F6E               	movwf	(_IRValue+1)& (0+255),b
  3208  01275A  0E00               	movlw	0
  3209  01275C  6F6D               	movwf	_IRValue& (0+255),b
  3210                           
  3211                           ; BSR set to: 0
  3212                           ;main.c: 305: TimerX = 8;
  3213  01275E  0E00               	movlw	0
  3214  012760  0100               	movlb	0	; () banked
  3215  012762  6FFA               	movwf	(_TimerX+1)& (0+255),b
  3216  012764  0E08               	movlw	8
  3217  012766  6FF9               	movwf	_TimerX& (0+255),b
  3218                           
  3219                           ;main.c: 306: while (StepRotate > 0) {
  3220  012768  D002               	goto	l2382
  3221  01276A                     l16461:
  3222                           
  3223                           ; BSR set to: 0
  3224                           ;main.c: 307: findClosestWall();
  3225  01276A  EC09  F08A         	call	_findClosestWall	;wreg free
  3226  01276E                     l2382:
  3227  01276E  0100               	movlb	0	; () banked
  3228  012770  BF72               	btfsc	(_StepRotate+1)& (0+255),7,b
  3229  012772  D007               	goto	u13720
  3230  012774  0100               	movlb	0	; () banked
  3231  012776  5172               	movf	(_StepRotate+1)& (0+255),w,b
  3232  012778  E1F8               	bnz	l16461
  3233  01277A  0100               	movlb	0	; () banked
  3234  01277C  0571               	decf	_StepRotate& (0+255),w,b
  3235  01277E  B0D8               	btfsc	status,0,c
  3236  012780  D7F4               	goto	l2383
  3237  012782                     u13720:
  3238                           
  3239                           ; BSR set to: 0
  3240                           ;main.c: 308: }
  3241                           ;main.c: 309: angleToClosestWall = angleToClosestWall - 67;
  3242                           
  3243                           ; BSR set to: 0
  3244  012782  0EBD               	movlw	189
  3245  012784  0100               	movlb	0	; () banked
  3246  012786  256B               	addwf	_angleToClosestWall& (0+255),w,b
  3247  012788  0100               	movlb	0	; () banked
  3248  01278A  6F6B               	movwf	_angleToClosestWall& (0+255),b
  3249  01278C  0EFF               	movlw	255
  3250  01278E  0100               	movlb	0	; () banked
  3251  012790  216C               	addwfc	(_angleToClosestWall+1)& (0+255),w,b
  3252  012792  0100               	movlb	0	; () banked
  3253  012794  6F6C               	movwf	(_angleToClosestWall+1)& (0+255),b
  3254                           
  3255                           ;main.c: 310: if(angleToClosestWall < 0){
  3256  012796  0100               	movlb	0	; () banked
  3257  012798  AF6C               	btfss	(_angleToClosestWall+1)& (0+255),7,b
  3258  01279A  D027               	goto	l2385
  3259                           
  3260                           ; BSR set to: 0
  3261                           ;main.c: 311: angleToClosestWall = angleToClosestWall + (2*angleToClosestWall);
  3262  01279C  C06B  F3F4         	movff	_angleToClosestWall,??_mode4
  3263  0127A0  C06C  F3F5         	movff	_angleToClosestWall+1,??_mode4+1
  3264  0127A4  90D8               	bcf	status,0,c
  3265  0127A6  0103               	movlb	3	; () banked
  3266  0127A8  37F4               	rlcf	??_mode4& (0+255),f,b
  3267  0127AA  37F5               	rlcf	(??_mode4+1)& (0+255),f,b
  3268  0127AC  0100               	movlb	0	; () banked
  3269  0127AE  516B               	movf	_angleToClosestWall& (0+255),w,b
  3270  0127B0  0103               	movlb	3	; () banked
  3271  0127B2  25F4               	addwf	??_mode4& (0+255),w,b
  3272  0127B4  0100               	movlb	0	; () banked
  3273  0127B6  6F6B               	movwf	_angleToClosestWall& (0+255),b
  3274  0127B8  0100               	movlb	0	; () banked
  3275  0127BA  516C               	movf	(_angleToClosestWall+1)& (0+255),w,b
  3276  0127BC  0103               	movlb	3	; () banked
  3277  0127BE  21F5               	addwfc	(??_mode4+1)& (0+255),w,b
  3278  0127C0  0100               	movlb	0	; () banked
  3279  0127C2  6F6C               	movwf	(_angleToClosestWall+1)& (0+255),b
  3280                           
  3281                           ;main.c: 312: angleToClosestWall = 270 - angleToClosestWall;
  3282  0127C4  C06B  F3F4         	movff	_angleToClosestWall,??_mode4
  3283  0127C8  C06C  F3F5         	movff	_angleToClosestWall+1,??_mode4+1
  3284  0127CC  0103               	movlb	3	; () banked
  3285  0127CE  1FF4               	comf	??_mode4& (0+255),f,b
  3286  0127D0  1FF5               	comf	(??_mode4+1)& (0+255),f,b
  3287  0127D2  4BF4               	infsnz	??_mode4& (0+255),f,b
  3288  0127D4  2BF5               	incf	(??_mode4+1)& (0+255),f,b
  3289  0127D6  0E0E               	movlw	14
  3290  0127D8  0103               	movlb	3	; () banked
  3291  0127DA  25F4               	addwf	??_mode4& (0+255),w,b
  3292  0127DC  0100               	movlb	0	; () banked
  3293  0127DE  6F6B               	movwf	_angleToClosestWall& (0+255),b
  3294  0127E0  0E01               	movlw	1
  3295  0127E2  0103               	movlb	3	; () banked
  3296  0127E4  21F5               	addwfc	(??_mode4+1)& (0+255),w,b
  3297  0127E6  0100               	movlb	0	; () banked
  3298  0127E8  6F6C               	movwf	(_angleToClosestWall+1)& (0+255),b
  3299  0127EA                     l2385:
  3300                           
  3301                           ; BSR set to: 0
  3302                           ;main.c: 313: }
  3303                           ;main.c: 314: irobot_rotate(0, 270 - angleToClosestWall, 200);
  3304                           
  3305                           ; BSR set to: 0
  3306  0127EA  C06B  F3F4         	movff	_angleToClosestWall,??_mode4
  3307  0127EE  C06C  F3F5         	movff	_angleToClosestWall+1,??_mode4+1
  3308  0127F2  0103               	movlb	3	; () banked
  3309  0127F4  1FF4               	comf	??_mode4& (0+255),f,b
  3310  0127F6  1FF5               	comf	(??_mode4+1)& (0+255),f,b
  3311  0127F8  4BF4               	infsnz	??_mode4& (0+255),f,b
  3312  0127FA  2BF5               	incf	(??_mode4+1)& (0+255),f,b
  3313  0127FC  0E0E               	movlw	14
  3314  0127FE  0103               	movlb	3	; () banked
  3315  012800  25F4               	addwf	??_mode4& (0+255),w,b
  3316  012802  0100               	movlb	0	; () banked
  3317  012804  6FD7               	movwf	irobot_rotate@rotateAngle& (0+255),b
  3318  012806  0E01               	movlw	1
  3319  012808  0103               	movlb	3	; () banked
  3320  01280A  21F5               	addwfc	(??_mode4+1)& (0+255),w,b
  3321  01280C  0100               	movlb	0	; () banked
  3322  01280E  6FD8               	movwf	(irobot_rotate@rotateAngle+1)& (0+255),b
  3323  012810  0E00               	movlw	0
  3324  012812  0100               	movlb	0	; () banked
  3325  012814  6FDA               	movwf	(irobot_rotate@rotateSpeed+1)& (0+255),b
  3326  012816  0EC8               	movlw	200
  3327  012818  6FD9               	movwf	irobot_rotate@rotateSpeed& (0+255),b
  3328  01281A  0E00               	movlw	0
  3329  01281C  EC9E  F0A2         	call	_irobot_rotate
  3330                           
  3331                           ;main.c: 315: while (!iRBumpLeft && !iRBumpRight && !iRDropRight && !iRDropLeft) {
  3332  012820  D03F               	goto	l2386
  3333  012822                     
  3334                           ;main.c: 317: if (MXK_SwitchTo(eMXK_HMI)) {
  3335  012822  0E01               	movlw	1
  3336  012824  ECF3  F0AE         	call	_MXK_SwitchTo
  3337  012828  0900               	iorlw	0
  3338  01282A  B4D8               	btfsc	status,2,c
  3339  01282C  D037               	goto	l2389
  3340                           
  3341                           ;main.c: 318: printf("%c", (char)35);
  3342  01282E  0EFB               	movlw	low STR_1
  3343  012830  0100               	movlb	0	; () banked
  3344  012832  6FCF               	movwf	printf@f& (0+255),b
  3345  012834  0EFF               	movlw	high STR_1
  3346  012836  0100               	movlb	0	; () banked
  3347  012838  6FD0               	movwf	(printf@f+1)& (0+255),b
  3348  01283A  0E00               	movlw	0
  3349  01283C  0100               	movlb	0	; () banked
  3350  01283E  6FD2               	movwf	(?_printf+3)& (0+255),b
  3351  012840  0E23               	movlw	35
  3352  012842  6FD1               	movwf	(?_printf+2)& (0+255),b
  3353  012844  ECD3  F091         	call	_printf	;wreg free
  3354                           
  3355                           ;main.c: 319: printf("Closest Wall:%u\nClosest Angle:%d\nLeft Bump:%u\nRightBump:%u\nAng
      +                          leToTurn: %d\n", MinDist, angleToClosestWall, iRBumpLeft, iRBumpRight, angleToClosestWal
      +                          l -67);
  3356  012848  0E0D               	movlw	low STR_10
  3357  01284A  0100               	movlb	0	; () banked
  3358  01284C  6FCF               	movwf	printf@f& (0+255),b
  3359  01284E  0EFF               	movlw	high STR_10
  3360  012850  0100               	movlb	0	; () banked
  3361  012852  6FD0               	movwf	(printf@f+1)& (0+255),b
  3362  012854  C0FB  F0D1         	movff	_MinDist,?_printf+2
  3363  012858  C0FC  F0D2         	movff	_MinDist+1,?_printf+3
  3364  01285C  C06B  F0D3         	movff	_angleToClosestWall,?_printf+4
  3365  012860  C06C  F0D4         	movff	_angleToClosestWall+1,?_printf+5
  3366  012864  C089  F0D5         	movff	_iRBumpLeft,?_printf+6
  3367  012868  0100               	movlb	0	; () banked
  3368  01286A  6BD6               	clrf	(?_printf+7)& (0+255),b
  3369  01286C  C08A  F0D7         	movff	_iRBumpRight,?_printf+8
  3370  012870  0100               	movlb	0	; () banked
  3371  012872  6BD8               	clrf	(?_printf+9)& (0+255),b
  3372  012874  0EBD               	movlw	189
  3373  012876  0100               	movlb	0	; () banked
  3374  012878  256B               	addwf	_angleToClosestWall& (0+255),w,b
  3375  01287A  0100               	movlb	0	; () banked
  3376  01287C  6FD9               	movwf	(?_printf+10)& (0+255),b
  3377  01287E  0EFF               	movlw	255
  3378  012880  0100               	movlb	0	; () banked
  3379  012882  216C               	addwfc	(_angleToClosestWall+1)& (0+255),w,b
  3380  012884  0100               	movlb	0	; () banked
  3381  012886  6FDA               	movwf	(?_printf+11)& (0+255),b
  3382  012888  ECD3  F091         	call	_printf	;wreg free
  3383                           
  3384                           ;main.c: 320: Console_Render();
  3385  01288C  ECE7  F08E         	call	_Console_Render	;wreg free
  3386                           
  3387                           ;main.c: 321: if (MXK_Release())
  3388  012890  EC21  F0B2         	call	_MXK_Release	;wreg free
  3389  012894  0900               	iorlw	0
  3390  012896  A4D8               	btfss	status,2,c
  3391                           
  3392                           ;main.c: 322: MXK_Dequeue();
  3393  012898  EC73  F0AF         	call	_MXK_Dequeue	;wreg free
  3394  01289C                     l2389:
  3395                           
  3396                           ;main.c: 323: }
  3397                           ;main.c: 324: update_bump_and_cliff();
  3398  01289C  ECEE  F0AF         	call	_update_bump_and_cliff	;wreg free
  3399  0128A0                     l2386:
  3400  0128A0  0100               	movlb	0	; () banked
  3401  0128A2  5189               	movf	_iRBumpLeft& (0+255),w,b
  3402  0128A4  A4D8               	btfss	status,2,c
  3403  0128A6  D00C               	goto	u13790
  3404                           
  3405                           ; BSR set to: 0
  3406  0128A8  0100               	movlb	0	; () banked
  3407  0128AA  518A               	movf	_iRBumpRight& (0+255),w,b
  3408  0128AC  A4D8               	btfss	status,2,c
  3409  0128AE  D008               	goto	u13790
  3410                           
  3411                           ; BSR set to: 0
  3412  0128B0  0100               	movlb	0	; () banked
  3413  0128B2  5188               	movf	_iRDropRight& (0+255),w,b
  3414  0128B4  A4D8               	btfss	status,2,c
  3415  0128B6  D004               	goto	u13790
  3416                           
  3417                           ; BSR set to: 0
  3418  0128B8  0100               	movlb	0	; () banked
  3419  0128BA  5187               	movf	_iRDropLeft& (0+255),w,b
  3420  0128BC  B4D8               	btfsc	status,2,c
  3421  0128BE  D7B1               	goto	l2387
  3422  0128C0                     u13790:
  3423                           
  3424                           ; BSR set to: 0
  3425                           ;main.c: 325: }
  3426                           ;main.c: 326: irobot_song_play(0);
  3427                           
  3428                           ; BSR set to: 0
  3429                           
  3430                           ; BSR set to: 0
  3431  0128C0  0E00               	movlw	0
  3432  0128C2  ECB5  F0B2         	call	_irobot_song_play
  3433                           
  3434                           ;main.c: 327: irobot_stop_motion(0);
  3435  0128C6  0E00               	movlw	0
  3436  0128C8  EC68  F0AE         	call	_irobot_stop_motion
  3437  0128CC  0012               	return		;funcret
  3438  0128CE                     __end_of_mode4:
  3439                           	opt stack 0
  3440                           tblptru	equ	0xFF8
  3441                           tblptrh	equ	0xFF7
  3442                           tblptrl	equ	0xFF6
  3443                           tablat	equ	0xFF5
  3444                           postinc0	equ	0xFEE
  3445                           wreg	equ	0xFE8
  3446                           postdec1	equ	0xFE5
  3447                           fsr1h	equ	0xFE2
  3448                           fsr1l	equ	0xFE1
  3449                           status	equ	0xFD8
  3450                           
  3451 ;; *************** function _findClosestWall *****************
  3452 ;; Defined at:
  3453 ;;		line 150 in file "main.c"
  3454 ;; Parameters:    Size  Location     Type
  3455 ;;		None
  3456 ;; Auto vars:     Size  Location     Type
  3457 ;;		None
  3458 ;; Return value:  Size  Location     Type
  3459 ;;                  1    wreg      void 
  3460 ;; Registers used:
  3461 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3462 ;; Tracked objects:
  3463 ;;		On entry : 0/0
  3464 ;;		On exit  : 0/0
  3465 ;;		Unchanged: 0/0
  3466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3468 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3469 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3470 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3471 ;;Total ram usage:        5 bytes
  3472 ;; Hardware stack levels used:    1
  3473 ;; Hardware stack levels required when called:   13
  3474 ;; This function calls:
  3475 ;;		_ADC_Start
  3476 ;;		_ADC_Voltage
  3477 ;;		_Console_Render
  3478 ;;		_HMI_Render
  3479 ;;		_HMI_SetNumber
  3480 ;;		_MXK_Dequeue
  3481 ;;		_MXK_Release
  3482 ;;		_MXK_SwitchTo
  3483 ;;		_Motor_Move
  3484 ;;		_Motor_Speed
  3485 ;;		___fldiv
  3486 ;;		___flmul
  3487 ;;		___fltol
  3488 ;;		___xxtofl
  3489 ;;		_printf
  3490 ;; This function is called by:
  3491 ;;		_mode4
  3492 ;; This function uses a non-reentrant model
  3493 ;;
  3494                           
  3495                           	psect	text2
  3496  011412                     __ptext2:
  3497                           	opt stack 0
  3498  011412                     _findClosestWall:
  3499                           	opt stack 16
  3500                           
  3501                           ;main.c: 151: StepRotate--;
  3502                           
  3503                           ;incstack = 0
  3504  011412  0100               	movlb	0	; () banked
  3505  011414  0771               	decf	_StepRotate& (0+255),f,b
  3506  011416  A0D8               	btfss	status,0,c
  3507  011418  0772               	decf	(_StepRotate+1)& (0+255),f,b
  3508                           
  3509                           ; BSR set to: 0
  3510                           ;main.c: 152: ADC_Start(&ADC_AN0);
  3511  01141A  0EB1               	movlw	low _ADC_AN0
  3512  01141C  0100               	movlb	0	; () banked
  3513  01141E  6FBC               	movwf	ADC_Start@pInput& (0+255),b
  3514  011420  0E00               	movlw	high _ADC_AN0
  3515  011422  0100               	movlb	0	; () banked
  3516  011424  6FBD               	movwf	(ADC_Start@pInput+1)& (0+255),b
  3517  011426  EC85  F0A7         	call	_ADC_Start	;wreg free
  3518                           
  3519                           ;main.c: 153: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3520  01142A  0EB1               	movlw	low _ADC_AN0
  3521  01142C  0100               	movlb	0	; () banked
  3522  01142E  6FE1               	movwf	ADC_Voltage@pInput& (0+255),b
  3523  011430  0E00               	movlw	high _ADC_AN0
  3524  011432  0100               	movlb	0	; () banked
  3525  011434  6FE2               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  3526  011436  EC42  F09D         	call	_ADC_Voltage	;wreg free
  3527  01143A  C0E1  F105         	movff	?_ADC_Voltage,_findClosestWall$15598
  3528  01143E  C0E2  F106         	movff	?_ADC_Voltage+1,_findClosestWall$15598+1
  3529  011442  C0E3  F107         	movff	?_ADC_Voltage+2,_findClosestWall$15598+2
  3530  011446  C0E4  F108         	movff	?_ADC_Voltage+3,_findClosestWall$15598+3
  3531                           
  3532                           ;main.c: 153: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3533  01144A  C105  F0BE         	movff	_findClosestWall$15598,___fldiv@a
  3534  01144E  C106  F0BF         	movff	_findClosestWall$15598+1,___fldiv@a+1
  3535  011452  C107  F0C0         	movff	_findClosestWall$15598+2,___fldiv@a+2
  3536  011456  C108  F0C1         	movff	_findClosestWall$15598+3,___fldiv@a+3
  3537  01145A  0E00               	movlw	0
  3538  01145C  0100               	movlb	0	; () banked
  3539  01145E  6FBA               	movwf	___fldiv@b& (0+255),b
  3540  011460  0E00               	movlw	0
  3541  011462  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
  3542  011464  0E6C               	movlw	108
  3543  011466  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
  3544  011468  0E42               	movlw	66
  3545  01146A  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
  3546  01146C  EC4C  F086         	call	___fldiv	;wreg free
  3547  011470  C0BA  F0F3         	movff	?___fldiv,___fltol@f1
  3548  011474  C0BB  F0F4         	movff	?___fldiv+1,___fltol@f1+1
  3549  011478  C0BC  F0F5         	movff	?___fldiv+2,___fltol@f1+2
  3550  01147C  C0BD  F0F6         	movff	?___fldiv+3,___fltol@f1+3
  3551  011480  ECE1  F09A         	call	___fltol	;wreg free
  3552  011484  C0F3  F06D         	movff	?___fltol,_IRValue
  3553  011488  C0F4  F06E         	movff	?___fltol+1,_IRValue+1
  3554                           
  3555                           ;main.c: 154: if (MXK_SwitchTo(eMXK_HMI)) {
  3556  01148C  0E01               	movlw	1
  3557  01148E  ECF3  F0AE         	call	_MXK_SwitchTo
  3558  011492  0900               	iorlw	0
  3559  011494  B4D8               	btfsc	status,2,c
  3560  011496  D00E               	goto	l2330
  3561                           
  3562                           ;main.c: 155: HMI_SetNumber(IRValue);
  3563  011498  C06D  F0D0         	movff	_IRValue,HMI_SetNumber@pInput
  3564  01149C  C06E  F0D1         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  3565  0114A0  EC1C  F0B1         	call	_HMI_SetNumber	;wreg free
  3566                           
  3567                           ;main.c: 156: HMI_Render();
  3568  0114A4  EC54  F0AF         	call	_HMI_Render	;wreg free
  3569                           
  3570                           ;main.c: 157: if (MXK_Release())
  3571  0114A8  EC21  F0B2         	call	_MXK_Release	;wreg free
  3572  0114AC  0900               	iorlw	0
  3573  0114AE  A4D8               	btfss	status,2,c
  3574                           
  3575                           ;main.c: 158: MXK_Dequeue();
  3576  0114B0  EC73  F0AF         	call	_MXK_Dequeue	;wreg free
  3577  0114B4                     l2330:
  3578                           
  3579                           ;main.c: 159: }
  3580                           ;main.c: 160: if (IRValue < MinDist) {
  3581  0114B4  0100               	movlb	0	; () banked
  3582  0114B6  51FB               	movf	_MinDist& (0+255),w,b
  3583  0114B8  0100               	movlb	0	; () banked
  3584  0114BA  5D6D               	subwf	_IRValue& (0+255),w,b
  3585  0114BC  0100               	movlb	0	; () banked
  3586  0114BE  516E               	movf	(_IRValue+1)& (0+255),w,b
  3587  0114C0  0A80               	xorlw	128
  3588  0114C2  0101               	movlb	1	; () banked
  3589  0114C4  6F04               	movwf	??_findClosestWall& (0+255),b
  3590  0114C6  0100               	movlb	0	; () banked
  3591  0114C8  51FC               	movf	(_MinDist+1)& (0+255),w,b
  3592  0114CA  0A80               	xorlw	128
  3593  0114CC  0101               	movlb	1	; () banked
  3594  0114CE  5904               	subwfb	??_findClosestWall& (0+255),w,b
  3595  0114D0  B0D8               	btfsc	status,0,c
  3596  0114D2  D008               	goto	l2331
  3597                           
  3598                           ; BSR set to: 1
  3599                           ;main.c: 161: MinDist = IRValue;
  3600  0114D4  C06D  F0FB         	movff	_IRValue,_MinDist
  3601  0114D8  C06E  F0FC         	movff	_IRValue+1,_MinDist+1
  3602                           
  3603                           ;main.c: 162: Stepstomin = StepRotate;
  3604  0114DC  C071  F06F         	movff	_StepRotate,_Stepstomin
  3605  0114E0  C072  F070         	movff	_StepRotate+1,_Stepstomin+1
  3606  0114E4                     l2331:
  3607                           
  3608                           ; BSR set to: 1
  3609                           ;main.c: 163: }
  3610                           ;main.c: 164: if (MXK_SwitchTo(eMXK_Motor)) {
  3611                           
  3612                           ; BSR set to: 1
  3613  0114E4  0E08               	movlw	8
  3614  0114E6  ECF3  F0AE         	call	_MXK_SwitchTo
  3615  0114EA  0900               	iorlw	0
  3616  0114EC  B4D8               	btfsc	status,2,c
  3617  0114EE  D01F               	goto	l2333
  3618                           
  3619                           ;main.c: 165: Motor_Speed(&Stepper, (50));
  3620  0114F0  0ECF               	movlw	low _Stepper
  3621  0114F2  0100               	movlb	0	; () banked
  3622  0114F4  6FD5               	movwf	Motor_Speed@pMotor& (0+255),b
  3623  0114F6  0E03               	movlw	high _Stepper
  3624  0114F8  0100               	movlb	0	; () banked
  3625  0114FA  6FD6               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  3626  0114FC  0E00               	movlw	0
  3627  0114FE  0100               	movlb	0	; () banked
  3628  011500  6FD8               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  3629  011502  0E32               	movlw	50
  3630  011504  6FD7               	movwf	Motor_Speed@pFrequency& (0+255),b
  3631  011506  EC07  F0B1         	call	_Motor_Speed	;wreg free
  3632                           
  3633                           ;main.c: 166: Motor_Move(&Stepper, -1);
  3634  01150A  0ECF               	movlw	low _Stepper
  3635  01150C  0100               	movlb	0	; () banked
  3636  01150E  6FBD               	movwf	Motor_Move@pMotor& (0+255),b
  3637  011510  0E03               	movlw	high _Stepper
  3638  011512  0100               	movlb	0	; () banked
  3639  011514  6FBE               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  3640  011516  0EFF               	movlw	255
  3641  011518  0100               	movlb	0	; () banked
  3642  01151A  6FC0               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  3643  01151C  69BF               	setf	Motor_Move@pDelta& (0+255),b
  3644  01151E  EC0B  F0B0         	call	_Motor_Move	;wreg free
  3645                           
  3646                           ;main.c: 167: if (MXK_Release())
  3647  011522  EC21  F0B2         	call	_MXK_Release	;wreg free
  3648  011526  0900               	iorlw	0
  3649  011528  A4D8               	btfss	status,2,c
  3650                           
  3651                           ;main.c: 168: MXK_Dequeue();
  3652  01152A  EC73  F0AF         	call	_MXK_Dequeue	;wreg free
  3653  01152E                     l2333:
  3654                           
  3655                           ;main.c: 169: }
  3656                           ;main.c: 170: TimerX = 10;
  3657  01152E  0E00               	movlw	0
  3658  011530  0100               	movlb	0	; () banked
  3659  011532  6FFA               	movwf	(_TimerX+1)& (0+255),b
  3660  011534  0E0A               	movlw	10
  3661  011536  6FF9               	movwf	_TimerX& (0+255),b
  3662                           
  3663                           ; BSR set to: 0
  3664                           ;main.c: 171: if (TimerX > 0) {
  3665  011538  0100               	movlb	0	; () banked
  3666  01153A  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  3667  01153C  D063               	goto	u13430
  3668  01153E  0100               	movlb	0	; () banked
  3669  011540  51FA               	movf	(_TimerX+1)& (0+255),w,b
  3670  011542  E156               	bnz	l16253
  3671  011544  0100               	movlb	0	; () banked
  3672  011546  05F9               	decf	_TimerX& (0+255),w,b
  3673  011548  B0D8               	btfsc	status,0,c
  3674  01154A  D052               	goto	l2335
  3675  01154C  D05B               	goto	u13430
  3676  01154E                     l16235:
  3677                           
  3678                           ; BSR set to: 0
  3679                           ;main.c: 173: ADC_Start(&ADC_AN0);
  3680  01154E  0EB1               	movlw	low _ADC_AN0
  3681  011550  0100               	movlb	0	; () banked
  3682  011552  6FBC               	movwf	ADC_Start@pInput& (0+255),b
  3683  011554  0E00               	movlw	high _ADC_AN0
  3684  011556  0100               	movlb	0	; () banked
  3685  011558  6FBD               	movwf	(ADC_Start@pInput+1)& (0+255),b
  3686  01155A  EC85  F0A7         	call	_ADC_Start	;wreg free
  3687                           
  3688                           ;main.c: 174: if (MXK_SwitchTo(eMXK_HMI)) {
  3689  01155E  0E01               	movlw	1
  3690  011560  ECF3  F0AE         	call	_MXK_SwitchTo
  3691  011564  0900               	iorlw	0
  3692  011566  B4D8               	btfsc	status,2,c
  3693  011568  D00E               	goto	l2338
  3694                           
  3695                           ;main.c: 175: HMI_SetNumber(IRValue);
  3696  01156A  C06D  F0D0         	movff	_IRValue,HMI_SetNumber@pInput
  3697  01156E  C06E  F0D1         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  3698  011572  EC1C  F0B1         	call	_HMI_SetNumber	;wreg free
  3699                           
  3700                           ;main.c: 176: HMI_Render();
  3701  011576  EC54  F0AF         	call	_HMI_Render	;wreg free
  3702                           
  3703                           ;main.c: 177: if (MXK_Release())
  3704  01157A  EC21  F0B2         	call	_MXK_Release	;wreg free
  3705  01157E  0900               	iorlw	0
  3706  011580  A4D8               	btfss	status,2,c
  3707                           
  3708                           ;main.c: 178: MXK_Dequeue();
  3709  011582  EC73  F0AF         	call	_MXK_Dequeue	;wreg free
  3710  011586                     l2338:
  3711                           
  3712                           ;main.c: 179: }
  3713                           ;main.c: 180: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3714  011586  0EB1               	movlw	low _ADC_AN0
  3715  011588  0100               	movlb	0	; () banked
  3716  01158A  6FE1               	movwf	ADC_Voltage@pInput& (0+255),b
  3717  01158C  0E00               	movlw	high _ADC_AN0
  3718  01158E  0100               	movlb	0	; () banked
  3719  011590  6FE2               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  3720  011592  EC42  F09D         	call	_ADC_Voltage	;wreg free
  3721  011596  C0E1  F105         	movff	?_ADC_Voltage,_findClosestWall$15598
  3722  01159A  C0E2  F106         	movff	?_ADC_Voltage+1,_findClosestWall$15598+1
  3723  01159E  C0E3  F107         	movff	?_ADC_Voltage+2,_findClosestWall$15598+2
  3724  0115A2  C0E4  F108         	movff	?_ADC_Voltage+3,_findClosestWall$15598+3
  3725                           
  3726                           ;main.c: 179: }
  3727                           ;main.c: 180: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3728  0115A6  C105  F0BE         	movff	_findClosestWall$15598,___fldiv@a
  3729  0115AA  C106  F0BF         	movff	_findClosestWall$15598+1,___fldiv@a+1
  3730  0115AE  C107  F0C0         	movff	_findClosestWall$15598+2,___fldiv@a+2
  3731  0115B2  C108  F0C1         	movff	_findClosestWall$15598+3,___fldiv@a+3
  3732  0115B6  0E00               	movlw	0
  3733  0115B8  0100               	movlb	0	; () banked
  3734  0115BA  6FBA               	movwf	___fldiv@b& (0+255),b
  3735  0115BC  0E00               	movlw	0
  3736  0115BE  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
  3737  0115C0  0E6C               	movlw	108
  3738  0115C2  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
  3739  0115C4  0E42               	movlw	66
  3740  0115C6  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
  3741  0115C8  EC4C  F086         	call	___fldiv	;wreg free
  3742  0115CC  C0BA  F0F3         	movff	?___fldiv,___fltol@f1
  3743  0115D0  C0BB  F0F4         	movff	?___fldiv+1,___fltol@f1+1
  3744  0115D4  C0BC  F0F5         	movff	?___fldiv+2,___fltol@f1+2
  3745  0115D8  C0BD  F0F6         	movff	?___fldiv+3,___fltol@f1+3
  3746  0115DC  ECE1  F09A         	call	___fltol	;wreg free
  3747  0115E0  C0F3  F06D         	movff	?___fltol,_IRValue
  3748  0115E4  C0F4  F06E         	movff	?___fltol+1,_IRValue+1
  3749                           
  3750                           ;main.c: 181: TimerX--;
  3751  0115E8  0100               	movlb	0	; () banked
  3752  0115EA  07F9               	decf	_TimerX& (0+255),f,b
  3753  0115EC  A0D8               	btfss	status,0,c
  3754  0115EE  07FA               	decf	(_TimerX+1)& (0+255),f,b
  3755  0115F0                     l2335:
  3756  0115F0                     l16253:
  3757                           
  3758                           ; BSR set to: 0
  3759  0115F0  0100               	movlb	0	; () banked
  3760  0115F2  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  3761  0115F4  D007               	goto	u13430
  3762  0115F6  0100               	movlb	0	; () banked
  3763  0115F8  51FA               	movf	(_TimerX+1)& (0+255),w,b
  3764  0115FA  E1A9               	bnz	l16235
  3765  0115FC  0100               	movlb	0	; () banked
  3766  0115FE  05F9               	decf	_TimerX& (0+255),w,b
  3767  011600  B0D8               	btfsc	status,0,c
  3768  011602  D7A5               	goto	l2336
  3769  011604                     u13430:
  3770                           
  3771                           ; BSR set to: 0
  3772                           ;main.c: 182: }
  3773                           ;main.c: 183: }
  3774                           ;main.c: 184: angleToClosestWall = Stepstomin * 0.67;
  3775                           
  3776                           ; BSR set to: 0
  3777                           
  3778                           ; BSR set to: 0
  3779  011604  0E1F               	movlw	31
  3780  011606  0100               	movlb	0	; () banked
  3781  011608  6FCC               	movwf	___flmul@a& (0+255),b
  3782  01160A  0E85               	movlw	133
  3783  01160C  6FCD               	movwf	(___flmul@a+1)& (0+255),b
  3784  01160E  0E2B               	movlw	43
  3785  011610  6FCE               	movwf	(___flmul@a+2)& (0+255),b
  3786  011612  0E3F               	movlw	63
  3787  011614  6FCF               	movwf	(___flmul@a+3)& (0+255),b
  3788  011616  C06F  F0BA         	movff	_Stepstomin,___xxtofl@val
  3789  01161A  C070  F0BB         	movff	_Stepstomin+1,___xxtofl@val+1
  3790  01161E  0100               	movlb	0	; () banked
  3791  011620  0E00               	movlw	0
  3792  011622  BFBB               	btfsc	(___xxtofl@val+1)& (0+255),7,b
  3793  011624  0EFF               	movlw	-1
  3794  011626  6FBC               	movwf	(___xxtofl@val+2)& (0+255),b
  3795  011628  6FBD               	movwf	(___xxtofl@val+3)& (0+255),b
  3796  01162A  0E01               	movlw	1
  3797  01162C  ECEC  F090         	call	___xxtofl
  3798  011630  C0BA  F0C8         	movff	?___xxtofl,___flmul@b
  3799  011634  C0BB  F0C9         	movff	?___xxtofl+1,___flmul@b+1
  3800  011638  C0BC  F0CA         	movff	?___xxtofl+2,___flmul@b+2
  3801  01163C  C0BD  F0CB         	movff	?___xxtofl+3,___flmul@b+3
  3802  011640  EC00  F080         	call	___flmul	;wreg free
  3803  011644  C0C8  F0F3         	movff	?___flmul,___fltol@f1
  3804  011648  C0C9  F0F4         	movff	?___flmul+1,___fltol@f1+1
  3805  01164C  C0CA  F0F5         	movff	?___flmul+2,___fltol@f1+2
  3806  011650  C0CB  F0F6         	movff	?___flmul+3,___fltol@f1+3
  3807  011654  ECE1  F09A         	call	___fltol	;wreg free
  3808  011658  C0F3  F06B         	movff	?___fltol,_angleToClosestWall
  3809  01165C  C0F4  F06C         	movff	?___fltol+1,_angleToClosestWall+1
  3810                           
  3811                           ;main.c: 185: if (MXK_SwitchTo(eMXK_HMI)) {
  3812  011660  0E01               	movlw	1
  3813  011662  ECF3  F0AE         	call	_MXK_SwitchTo
  3814  011666  0900               	iorlw	0
  3815  011668  B4D8               	btfsc	status,2,c
  3816  01166A  0012               	return	
  3817                           
  3818                           ;main.c: 186: printf("%c", (char)35);
  3819  01166C  0EFB               	movlw	low STR_1
  3820  01166E  0100               	movlb	0	; () banked
  3821  011670  6FCF               	movwf	printf@f& (0+255),b
  3822  011672  0EFF               	movlw	high STR_1
  3823  011674  0100               	movlb	0	; () banked
  3824  011676  6FD0               	movwf	(printf@f+1)& (0+255),b
  3825  011678  0E00               	movlw	0
  3826  01167A  0100               	movlb	0	; () banked
  3827  01167C  6FD2               	movwf	(?_printf+3)& (0+255),b
  3828  01167E  0E23               	movlw	35
  3829  011680  6FD1               	movwf	(?_printf+2)& (0+255),b
  3830  011682  ECD3  F091         	call	_printf	;wreg free
  3831                           
  3832                           ;main.c: 187: printf("Closest Wall:%u\nClosest Angle:%d\nLeft Bump:%u\nRightBump:%u\n", 
      +                          MinDist, angleToClosestWall, iRBumpLeft, iRBumpRight);
  3833  011686  0E59               	movlw	low STR_2
  3834  011688  0100               	movlb	0	; () banked
  3835  01168A  6FCF               	movwf	printf@f& (0+255),b
  3836  01168C  0EFF               	movlw	high STR_2
  3837  01168E  0100               	movlb	0	; () banked
  3838  011690  6FD0               	movwf	(printf@f+1)& (0+255),b
  3839  011692  C0FB  F0D1         	movff	_MinDist,?_printf+2
  3840  011696  C0FC  F0D2         	movff	_MinDist+1,?_printf+3
  3841  01169A  C06B  F0D3         	movff	_angleToClosestWall,?_printf+4
  3842  01169E  C06C  F0D4         	movff	_angleToClosestWall+1,?_printf+5
  3843  0116A2  C089  F0D5         	movff	_iRBumpLeft,?_printf+6
  3844  0116A6  0100               	movlb	0	; () banked
  3845  0116A8  6BD6               	clrf	(?_printf+7)& (0+255),b
  3846  0116AA  C08A  F0D7         	movff	_iRBumpRight,?_printf+8
  3847  0116AE  0100               	movlb	0	; () banked
  3848  0116B0  6BD8               	clrf	(?_printf+9)& (0+255),b
  3849  0116B2  ECD3  F091         	call	_printf	;wreg free
  3850                           
  3851                           ;main.c: 188: Console_Render();
  3852  0116B6  ECE7  F08E         	call	_Console_Render	;wreg free
  3853                           
  3854                           ;main.c: 189: if (MXK_Release())
  3855  0116BA  EC21  F0B2         	call	_MXK_Release	;wreg free
  3856  0116BE  0900               	iorlw	0
  3857  0116C0  B4D8               	btfsc	status,2,c
  3858  0116C2  0012               	return	
  3859                           
  3860                           ;main.c: 190: MXK_Dequeue();
  3861  0116C4  EC73  F0AF         	call	_MXK_Dequeue	;wreg free
  3862  0116C8  0012               	return	
  3863  0116CA                     __end_of_findClosestWall:
  3864                           	opt stack 0
  3865                           tblptru	equ	0xFF8
  3866                           tblptrh	equ	0xFF7
  3867                           tblptrl	equ	0xFF6
  3868                           tablat	equ	0xFF5
  3869                           postinc0	equ	0xFEE
  3870                           wreg	equ	0xFE8
  3871                           postdec1	equ	0xFE5
  3872                           fsr1h	equ	0xFE2
  3873                           fsr1l	equ	0xFE1
  3874                           status	equ	0xFD8
  3875                           
  3876 ;; *************** function _mode3 *****************
  3877 ;; Defined at:
  3878 ;;		line 289 in file "main.c"
  3879 ;; Parameters:    Size  Location     Type
  3880 ;;		None
  3881 ;; Auto vars:     Size  Location     Type
  3882 ;;		None
  3883 ;; Return value:  Size  Location     Type
  3884 ;;                  1    wreg      void 
  3885 ;; Registers used:
  3886 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3887 ;; Tracked objects:
  3888 ;;		On entry : 0/0
  3889 ;;		On exit  : 0/0
  3890 ;;		Unchanged: 0/0
  3891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3893 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3895 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3896 ;;Total ram usage:        0 bytes
  3897 ;; Hardware stack levels used:    1
  3898 ;; Hardware stack levels required when called:   17
  3899 ;; This function calls:
  3900 ;;		_move_and_rotate
  3901 ;;		_safeToGo
  3902 ;; This function is called by:
  3903 ;;		_main
  3904 ;; This function uses a non-reentrant model
  3905 ;;
  3906                           
  3907                           	psect	text3
  3908  016554                     __ptext3:
  3909                           	opt stack 0
  3910  016554                     _mode3:
  3911                           	opt stack 13
  3912                           
  3913                           ;main.c: 290: safeToGo();
  3914                           
  3915                           ;incstack = 0
  3916  016554  ECB2  F0AD         	call	_safeToGo	;wreg free
  3917                           
  3918                           ;main.c: 291: move_and_rotate();
  3919  016558  ECC7  F0A7         	call	_move_and_rotate	;wreg free
  3920                           
  3921                           ;main.c: 292: move_and_rotate();
  3922  01655C  ECC7  F0A7         	call	_move_and_rotate	;wreg free
  3923                           
  3924                           ;main.c: 293: move_and_rotate();
  3925  016560  ECC7  F0A7         	call	_move_and_rotate	;wreg free
  3926                           
  3927                           ;main.c: 294: move_and_rotate();
  3928  016564  ECC7  F0A7         	call	_move_and_rotate	;wreg free
  3929  016568  0012               	return		;funcret
  3930  01656A                     __end_of_mode3:
  3931                           	opt stack 0
  3932                           tblptru	equ	0xFF8
  3933                           tblptrh	equ	0xFF7
  3934                           tblptrl	equ	0xFF6
  3935                           tablat	equ	0xFF5
  3936                           postinc0	equ	0xFEE
  3937                           wreg	equ	0xFE8
  3938                           postdec1	equ	0xFE5
  3939                           fsr1h	equ	0xFE2
  3940                           fsr1l	equ	0xFE1
  3941                           status	equ	0xFD8
  3942                           
  3943 ;; *************** function _move_and_rotate *****************
  3944 ;; Defined at:
  3945 ;;		line 136 in file "main.c"
  3946 ;; Parameters:    Size  Location     Type
  3947 ;;		None
  3948 ;; Auto vars:     Size  Location     Type
  3949 ;;		None
  3950 ;; Return value:  Size  Location     Type
  3951 ;;                  1    wreg      void 
  3952 ;; Registers used:
  3953 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3954 ;; Tracked objects:
  3955 ;;		On entry : 0/0
  3956 ;;		On exit  : 0/0
  3957 ;;		Unchanged: 0/0
  3958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3962 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3963 ;;Total ram usage:        0 bytes
  3964 ;; Hardware stack levels used:    1
  3965 ;; Hardware stack levels required when called:   12
  3966 ;; This function calls:
  3967 ;;		_delay_ms
  3968 ;;		_irobot_move_straight
  3969 ;;		_irobot_rotate
  3970 ;;		_irobot_stop_motion
  3971 ;;		_update_distance
  3972 ;; This function is called by:
  3973 ;;		_mode3
  3974 ;; This function uses a non-reentrant model
  3975 ;;
  3976                           
  3977                           	psect	text4
  3978  014F8E                     __ptext4:
  3979                           	opt stack 0
  3980  014F8E                     _move_and_rotate:
  3981                           	opt stack 17
  3982                           
  3983                           ;main.c: 137: dist = 0;
  3984                           
  3985                           ;incstack = 0
  3986  014F8E  0E00               	movlw	0
  3987  014F90  0100               	movlb	0	; () banked
  3988  014F92  6F6A               	movwf	(_dist+1)& (0+255),b
  3989  014F94  0E00               	movlw	0
  3990  014F96  6F69               	movwf	_dist& (0+255),b
  3991                           
  3992                           ; BSR set to: 0
  3993                           ;main.c: 138: irobot_move_straight(100);
  3994  014F98  0E00               	movlw	0
  3995  014F9A  0100               	movlb	0	; () banked
  3996  014F9C  6FD4               	movwf	(irobot_move_straight@straightSpeed+1)& (0+255),b
  3997  014F9E  0E64               	movlw	100
  3998  014FA0  6FD3               	movwf	irobot_move_straight@straightSpeed& (0+255),b
  3999  014FA2  EC4A  F0B2         	call	_irobot_move_straight	;wreg free
  4000                           
  4001                           ;main.c: 139: while (dist < 1000) {
  4002  014FA6  D00A               	goto	l2323
  4003  014FA8                     
  4004                           ;main.c: 140: update_distance();
  4005  014FA8  ECC9  F0B2         	call	_update_distance	;wreg free
  4006                           
  4007                           ;main.c: 141: dist += iRDistance;
  4008  014FAC  0100               	movlb	0	; () banked
  4009  014FAE  517B               	movf	_iRDistance& (0+255),w,b
  4010  014FB0  0100               	movlb	0	; () banked
  4011  014FB2  2769               	addwf	_dist& (0+255),f,b
  4012  014FB4  0100               	movlb	0	; () banked
  4013  014FB6  517C               	movf	(_iRDistance+1)& (0+255),w,b
  4014  014FB8  0100               	movlb	0	; () banked
  4015  014FBA  236A               	addwfc	(_dist+1)& (0+255),f,b
  4016  014FBC                     l2323:
  4017                           
  4018                           ; BSR set to: 0
  4019  014FBC  0100               	movlb	0	; () banked
  4020  014FBE  BF6A               	btfsc	(_dist+1)& (0+255),7,b
  4021  014FC0  D7F3               	goto	l2324
  4022  014FC2  0EE8               	movlw	232
  4023  014FC4  0100               	movlb	0	; () banked
  4024  014FC6  5D69               	subwf	_dist& (0+255),w,b
  4025  014FC8  0E03               	movlw	3
  4026  014FCA  0100               	movlb	0	; () banked
  4027  014FCC  596A               	subwfb	(_dist+1)& (0+255),w,b
  4028  014FCE  A0D8               	btfss	status,0,c
  4029  014FD0  D7EB               	goto	l2324
  4030                           
  4031                           ; BSR set to: 0
  4032                           ;main.c: 142: }
  4033                           ;main.c: 143: irobot_stop_motion(0);
  4034                           
  4035                           ; BSR set to: 0
  4036  014FD2  0E00               	movlw	0
  4037  014FD4  EC68  F0AE         	call	_irobot_stop_motion
  4038                           
  4039                           ;main.c: 144: delay_ms(100);
  4040  014FD8  0E00               	movlw	0
  4041  014FDA  0100               	movlb	0	; () banked
  4042  014FDC  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
  4043  014FDE  0E64               	movlw	100
  4044  014FE0  6FBA               	movwf	delay_ms@ms& (0+255),b
  4045  014FE2  ECFC  F0AA         	call	_delay_ms	;wreg free
  4046                           
  4047                           ;main.c: 145: irobot_rotate(0, 67, 200);
  4048  014FE6  0E00               	movlw	0
  4049  014FE8  0100               	movlb	0	; () banked
  4050  014FEA  6FD8               	movwf	(irobot_rotate@rotateAngle+1)& (0+255),b
  4051  014FEC  0E43               	movlw	67
  4052  014FEE  6FD7               	movwf	irobot_rotate@rotateAngle& (0+255),b
  4053  014FF0  0E00               	movlw	0
  4054  014FF2  0100               	movlb	0	; () banked
  4055  014FF4  6FDA               	movwf	(irobot_rotate@rotateSpeed+1)& (0+255),b
  4056  014FF6  0EC8               	movlw	200
  4057  014FF8  6FD9               	movwf	irobot_rotate@rotateSpeed& (0+255),b
  4058  014FFA  0E00               	movlw	0
  4059  014FFC  EC9E  F0A2         	call	_irobot_rotate
  4060                           
  4061                           ;main.c: 146: delay_ms(100);
  4062  015000  0E00               	movlw	0
  4063  015002  0100               	movlb	0	; () banked
  4064  015004  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
  4065  015006  0E64               	movlw	100
  4066  015008  6FBA               	movwf	delay_ms@ms& (0+255),b
  4067  01500A  ECFC  F0AA         	call	_delay_ms	;wreg free
  4068  01500E  0012               	return		;funcret
  4069  015010                     __end_of_move_and_rotate:
  4070                           	opt stack 0
  4071                           tblptru	equ	0xFF8
  4072                           tblptrh	equ	0xFF7
  4073                           tblptrl	equ	0xFF6
  4074                           tablat	equ	0xFF5
  4075                           postinc0	equ	0xFEE
  4076                           wreg	equ	0xFE8
  4077                           postdec1	equ	0xFE5
  4078                           fsr1h	equ	0xFE2
  4079                           fsr1l	equ	0xFE1
  4080                           status	equ	0xFD8
  4081                           
  4082 ;; *************** function _irobot_rotate *****************
  4083 ;; Defined at:
  4084 ;;		line 279 in file "Library/iRobotSerial.c"
  4085 ;; Parameters:    Size  Location     Type
  4086 ;;  isScript        1    wreg     unsigned char 
  4087 ;;  rotateAngle     2   29[BANK0 ] short 
  4088 ;;  rotateSpeed     2   31[BANK0 ] short 
  4089 ;; Auto vars:     Size  Location     Type
  4090 ;;  isScript        1   34[BANK0 ] unsigned char 
  4091 ;;  rotateDirect    2   37[BANK0 ] short 
  4092 ;;  angleTotal      2   35[BANK0 ] short 
  4093 ;; Return value:  Size  Location     Type
  4094 ;;                  1    wreg      void 
  4095 ;; Registers used:
  4096 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4097 ;; Tracked objects:
  4098 ;;		On entry : 0/0
  4099 ;;		On exit  : 0/0
  4100 ;;		Unchanged: 0/0
  4101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4102 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4103 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4104 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4105 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4106 ;;Total ram usage:       10 bytes
  4107 ;; Hardware stack levels used:    1
  4108 ;; Hardware stack levels required when called:   11
  4109 ;; This function calls:
  4110 ;;		_irobot_move
  4111 ;;		_irobot_stop_motion
  4112 ;;		_update_angle
  4113 ;; This function is called by:
  4114 ;;		_move_and_rotate
  4115 ;;		_mode4
  4116 ;;		_irobot_rotate_to
  4117 ;; This function uses a non-reentrant model
  4118 ;;
  4119                           
  4120                           	psect	text5
  4121  01453C                     __ptext5:
  4122                           	opt stack 0
  4123  01453C                     _irobot_rotate:
  4124                           	opt stack 18
  4125                           
  4126                           ;incstack = 0
  4127                           ;irobot_rotate@isScript stored from wreg
  4128  01453C  0100               	movlb	0	; () banked
  4129  01453E  6FDC               	movwf	irobot_rotate@isScript& (0+255),b
  4130                           
  4131                           ;iRobotSerial.c: 280: INT16 angleTotal = 0;
  4132  014540  0E00               	movlw	0
  4133  014542  0100               	movlb	0	; () banked
  4134  014544  6FDE               	movwf	(irobot_rotate@angleTotal+1)& (0+255),b
  4135  014546  0E00               	movlw	0
  4136  014548  6FDD               	movwf	irobot_rotate@angleTotal& (0+255),b
  4137                           
  4138                           ; BSR set to: 0
  4139                           ;iRobotSerial.c: 281: INT16 rotateDirection;
  4140                           ;iRobotSerial.c: 283: (rotateAngle > 0) ? (rotateDirection = iR_CONST_CCW) : (rotateDire
      +                          ction = iR_CONST_CW);
  4141  01454A  0100               	movlb	0	; () banked
  4142  01454C  BFD8               	btfsc	(irobot_rotate@rotateAngle+1)& (0+255),7,b
  4143  01454E  D00D               	goto	l2156
  4144  014550  0100               	movlb	0	; () banked
  4145  014552  51D8               	movf	(irobot_rotate@rotateAngle+1)& (0+255),w,b
  4146  014554  E104               	bnz	u10890
  4147  014556  0100               	movlb	0	; () banked
  4148  014558  05D7               	decf	irobot_rotate@rotateAngle& (0+255),w,b
  4149  01455A  A0D8               	btfss	status,0,c
  4150  01455C  D006               	goto	l2156
  4151  01455E                     u10890:
  4152                           
  4153                           ; BSR set to: 0
  4154  01455E  0E00               	movlw	0
  4155  014560  0100               	movlb	0	; () banked
  4156  014562  6FE0               	movwf	(irobot_rotate@rotateDirection+1)& (0+255),b
  4157  014564  0E01               	movlw	1
  4158  014566  6FDF               	movwf	irobot_rotate@rotateDirection& (0+255),b
  4159  014568  D003               	goto	l2158
  4160  01456A                     l2156:
  4161                           
  4162                           ; BSR set to: 0
  4163  01456A  0100               	movlb	0	; () banked
  4164  01456C  69DF               	setf	irobot_rotate@rotateDirection& (0+255),b
  4165  01456E  69E0               	setf	(irobot_rotate@rotateDirection+1)& (0+255),b
  4166  014570                     l2158:
  4167                           
  4168                           ; BSR set to: 0
  4169                           ;iRobotSerial.c: 284: if (isScript) {
  4170                           
  4171                           ; BSR set to: 0
  4172  014570  0100               	movlb	0	; () banked
  4173  014572  51DC               	movf	irobot_rotate@isScript& (0+255),w,b
  4174  014574  0100               	movlb	0	; () banked
  4175  014576  B4D8               	btfsc	status,2,c
  4176  014578  D00C               	goto	l2159
  4177                           
  4178                           ; BSR set to: 0
  4179                           ;iRobotSerial.c: 285: irobot_move(1, rotateSpeed, rotateDirection);
  4180  01457A  C0D9  F0CA         	movff	irobot_rotate@rotateSpeed,irobot_move@moveSpeed
  4181  01457E  C0DA  F0CB         	movff	irobot_rotate@rotateSpeed+1,irobot_move@moveSpeed+1
  4182  014582  C0DF  F0CC         	movff	irobot_rotate@rotateDirection,irobot_move@moveTurnRadius
  4183  014586  C0E0  F0CD         	movff	irobot_rotate@rotateDirection+1,irobot_move@moveTurnRadius+1
  4184  01458A  0E01               	movlw	1
  4185  01458C  ECEF  F0A1         	call	_irobot_move
  4186                           
  4187                           ;iRobotSerial.c: 286: }
  4188  014590  0012               	return	
  4189  014592                     l2159:
  4190                           
  4191                           ;iRobotSerial.c: 287: else {
  4192                           ;iRobotSerial.c: 288: irobot_move(0, rotateSpeed, rotateDirection);
  4193  014592  C0D9  F0CA         	movff	irobot_rotate@rotateSpeed,irobot_move@moveSpeed
  4194  014596  C0DA  F0CB         	movff	irobot_rotate@rotateSpeed+1,irobot_move@moveSpeed+1
  4195  01459A  C0DF  F0CC         	movff	irobot_rotate@rotateDirection,irobot_move@moveTurnRadius
  4196  01459E  C0E0  F0CD         	movff	irobot_rotate@rotateDirection+1,irobot_move@moveTurnRadius+1
  4197  0145A2  0E00               	movlw	0
  4198  0145A4  ECEF  F0A1         	call	_irobot_move
  4199                           
  4200                           ;iRobotSerial.c: 289: while (angleTotal < rotateAngle) {
  4201  0145A8  D00A               	goto	l2161
  4202  0145AA                     
  4203                           ;iRobotSerial.c: 290: update_angle();
  4204  0145AA  ECD2  F0B2         	call	_update_angle	;wreg free
  4205                           
  4206                           ;iRobotSerial.c: 291: angleTotal += iRAngle;
  4207  0145AE  0100               	movlb	0	; () banked
  4208  0145B0  5179               	movf	_iRAngle& (0+255),w,b
  4209  0145B2  0100               	movlb	0	; () banked
  4210  0145B4  27DD               	addwf	irobot_rotate@angleTotal& (0+255),f,b
  4211  0145B6  0100               	movlb	0	; () banked
  4212  0145B8  517A               	movf	(_iRAngle+1)& (0+255),w,b
  4213  0145BA  0100               	movlb	0	; () banked
  4214  0145BC  23DE               	addwfc	(irobot_rotate@angleTotal+1)& (0+255),f,b
  4215  0145BE                     l2161:
  4216                           
  4217                           ; BSR set to: 0
  4218  0145BE  0100               	movlb	0	; () banked
  4219  0145C0  51D7               	movf	irobot_rotate@rotateAngle& (0+255),w,b
  4220  0145C2  0100               	movlb	0	; () banked
  4221  0145C4  5DDD               	subwf	irobot_rotate@angleTotal& (0+255),w,b
  4222  0145C6  0100               	movlb	0	; () banked
  4223  0145C8  51DE               	movf	(irobot_rotate@angleTotal+1)& (0+255),w,b
  4224  0145CA  0A80               	xorlw	128
  4225  0145CC  0100               	movlb	0	; () banked
  4226  0145CE  6FDB               	movwf	??_irobot_rotate& (0+255),b
  4227  0145D0  0100               	movlb	0	; () banked
  4228  0145D2  51D8               	movf	(irobot_rotate@rotateAngle+1)& (0+255),w,b
  4229  0145D4  0A80               	xorlw	128
  4230  0145D6  0100               	movlb	0	; () banked
  4231  0145D8  59DB               	subwfb	??_irobot_rotate& (0+255),w,b
  4232  0145DA  A0D8               	btfss	status,0,c
  4233  0145DC  D7E6               	goto	l2162
  4234                           
  4235                           ; BSR set to: 0
  4236                           ;iRobotSerial.c: 292: }
  4237                           ;iRobotSerial.c: 293: irobot_stop_motion(0);
  4238                           
  4239                           ; BSR set to: 0
  4240  0145DE  0E00               	movlw	0
  4241  0145E0  EC68  F0AE         	call	_irobot_stop_motion
  4242  0145E4  0012               	return	
  4243  0145E6                     __end_of_irobot_rotate:
  4244                           	opt stack 0
  4245                           tblptru	equ	0xFF8
  4246                           tblptrh	equ	0xFF7
  4247                           tblptrl	equ	0xFF6
  4248                           tablat	equ	0xFF5
  4249                           postinc0	equ	0xFEE
  4250                           wreg	equ	0xFE8
  4251                           postdec1	equ	0xFE5
  4252                           fsr1h	equ	0xFE2
  4253                           fsr1l	equ	0xFE1
  4254                           status	equ	0xFD8
  4255                           
  4256 ;; *************** function _mode2 *****************
  4257 ;; Defined at:
  4258 ;;		line 265 in file "main.c"
  4259 ;; Parameters:    Size  Location     Type
  4260 ;;		None
  4261 ;; Auto vars:     Size  Location     Type
  4262 ;;  dist            2   44[BANK0 ] int 
  4263 ;; Return value:  Size  Location     Type
  4264 ;;                  1    wreg      void 
  4265 ;; Registers used:
  4266 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  4267 ;; Tracked objects:
  4268 ;;		On entry : 0/0
  4269 ;;		On exit  : 0/0
  4270 ;;		Unchanged: 0/0
  4271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4273 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4275 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4276 ;;Total ram usage:        2 bytes
  4277 ;; Hardware stack levels used:    1
  4278 ;; Hardware stack levels required when called:   17
  4279 ;; This function calls:
  4280 ;;		_Console_Render
  4281 ;;		_MXK_Dequeue
  4282 ;;		_MXK_Release
  4283 ;;		_MXK_SwitchTo
  4284 ;;		_irobot_move_straight
  4285 ;;		_irobot_stop_motion
  4286 ;;		_printf
  4287 ;;		_safeToGo
  4288 ;;		_update_distance
  4289 ;; This function is called by:
  4290 ;;		_main
  4291 ;; This function uses a non-reentrant model
  4292 ;;
  4293                           
  4294                           	psect	text6
  4295  0138BE                     __ptext6:
  4296                           	opt stack 0
  4297  0138BE                     _mode2:
  4298                           	opt stack 13
  4299                           
  4300                           ;main.c: 266: safeToGo();
  4301                           
  4302                           ;incstack = 0
  4303  0138BE  ECB2  F0AD         	call	_safeToGo	;wreg free
  4304                           
  4305                           ;main.c: 267: if (MXK_SwitchTo(eMXK_HMI)) {
  4306  0138C2  0E01               	movlw	1
  4307  0138C4  ECF3  F0AE         	call	_MXK_SwitchTo
  4308  0138C8  0900               	iorlw	0
  4309  0138CA  B4D8               	btfsc	status,2,c
  4310  0138CC  0012               	return	
  4311                           
  4312                           ;main.c: 268: printf("%c", (char)35);
  4313  0138CE  0EFB               	movlw	low STR_1
  4314  0138D0  0100               	movlb	0	; () banked
  4315  0138D2  6FCF               	movwf	printf@f& (0+255),b
  4316  0138D4  0EFF               	movlw	high STR_1
  4317  0138D6  0100               	movlb	0	; () banked
  4318  0138D8  6FD0               	movwf	(printf@f+1)& (0+255),b
  4319  0138DA  0E00               	movlw	0
  4320  0138DC  0100               	movlb	0	; () banked
  4321  0138DE  6FD2               	movwf	(?_printf+3)& (0+255),b
  4322  0138E0  0E23               	movlw	35
  4323  0138E2  6FD1               	movwf	(?_printf+2)& (0+255),b
  4324  0138E4  ECD3  F091         	call	_printf	;wreg free
  4325                           
  4326                           ;main.c: 269: printf("Total Distance:%u\nLeft Bump:%u\nRight Bump:%u\n", distanceTotal, 
      +                          iRBumpLeft, iRBumpRight);
  4327  0138E8  0E95               	movlw	low STR_4
  4328  0138EA  0100               	movlb	0	; () banked
  4329  0138EC  6FCF               	movwf	printf@f& (0+255),b
  4330  0138EE  0EFF               	movlw	high STR_4
  4331  0138F0  0100               	movlb	0	; () banked
  4332  0138F2  6FD0               	movwf	(printf@f+1)& (0+255),b
  4333  0138F4  C077  F0D1         	movff	_distanceTotal,?_printf+2
  4334  0138F8  C078  F0D2         	movff	_distanceTotal+1,?_printf+3
  4335  0138FC  C089  F0D3         	movff	_iRBumpLeft,?_printf+4
  4336  013900  0100               	movlb	0	; () banked
  4337  013902  6BD4               	clrf	(?_printf+5)& (0+255),b
  4338  013904  C08A  F0D5         	movff	_iRBumpRight,?_printf+6
  4339  013908  0100               	movlb	0	; () banked
  4340  01390A  6BD6               	clrf	(?_printf+7)& (0+255),b
  4341  01390C  ECD3  F091         	call	_printf	;wreg free
  4342                           
  4343                           ;main.c: 270: Console_Render();
  4344  013910  ECE7  F08E         	call	_Console_Render	;wreg free
  4345                           
  4346                           ;main.c: 272: int dist = 0;
  4347  013914  0E00               	movlw	0
  4348  013916  0100               	movlb	0	; () banked
  4349  013918  6FE7               	movwf	(mode2@dist+1)& (0+255),b
  4350  01391A  0E00               	movlw	0
  4351  01391C  6FE6               	movwf	mode2@dist& (0+255),b
  4352                           
  4353                           ; BSR set to: 0
  4354                           ;main.c: 273: irobot_move_straight(200);
  4355  01391E  0E00               	movlw	0
  4356  013920  0100               	movlb	0	; () banked
  4357  013922  6FD4               	movwf	(irobot_move_straight@straightSpeed+1)& (0+255),b
  4358  013924  0EC8               	movlw	200
  4359  013926  6FD3               	movwf	irobot_move_straight@straightSpeed& (0+255),b
  4360  013928  EC4A  F0B2         	call	_irobot_move_straight	;wreg free
  4361                           
  4362                           ;main.c: 274: while (dist < 5000) {
  4363  01392C  D025               	goto	l2372
  4364  01392E                     
  4365                           ;main.c: 275: update_distance();
  4366  01392E  ECC9  F0B2         	call	_update_distance	;wreg free
  4367                           
  4368                           ;main.c: 276: dist += iRDistance;
  4369  013932  0100               	movlb	0	; () banked
  4370  013934  517B               	movf	_iRDistance& (0+255),w,b
  4371  013936  0100               	movlb	0	; () banked
  4372  013938  27E6               	addwf	mode2@dist& (0+255),f,b
  4373  01393A  0100               	movlb	0	; () banked
  4374  01393C  517C               	movf	(_iRDistance+1)& (0+255),w,b
  4375  01393E  0100               	movlb	0	; () banked
  4376  013940  23E7               	addwfc	(mode2@dist+1)& (0+255),f,b
  4377                           
  4378                           ; BSR set to: 0
  4379                           ;main.c: 277: printf("%c", (char)35);
  4380  013942  0EFB               	movlw	low STR_1
  4381  013944  0100               	movlb	0	; () banked
  4382  013946  6FCF               	movwf	printf@f& (0+255),b
  4383  013948  0EFF               	movlw	high STR_1
  4384  01394A  0100               	movlb	0	; () banked
  4385  01394C  6FD0               	movwf	(printf@f+1)& (0+255),b
  4386  01394E  0E00               	movlw	0
  4387  013950  0100               	movlb	0	; () banked
  4388  013952  6FD2               	movwf	(?_printf+3)& (0+255),b
  4389  013954  0E23               	movlw	35
  4390  013956  6FD1               	movwf	(?_printf+2)& (0+255),b
  4391  013958  ECD3  F091         	call	_printf	;wreg free
  4392                           
  4393                           ;main.c: 278: printf("Distance: %d\n", dist);
  4394  01395C  0EED               	movlw	low STR_8
  4395  01395E  0100               	movlb	0	; () banked
  4396  013960  6FCF               	movwf	printf@f& (0+255),b
  4397  013962  0EFF               	movlw	high STR_8
  4398  013964  0100               	movlb	0	; () banked
  4399  013966  6FD0               	movwf	(printf@f+1)& (0+255),b
  4400  013968  C0E6  F0D1         	movff	mode2@dist,?_printf+2
  4401  01396C  C0E7  F0D2         	movff	mode2@dist+1,?_printf+3
  4402  013970  ECD3  F091         	call	_printf	;wreg free
  4403                           
  4404                           ;main.c: 279: Console_Render();
  4405  013974  ECE7  F08E         	call	_Console_Render	;wreg free
  4406  013978                     l2372:
  4407  013978  0100               	movlb	0	; () banked
  4408  01397A  BFE7               	btfsc	(mode2@dist+1)& (0+255),7,b
  4409  01397C  D7D8               	goto	l2373
  4410  01397E  0E88               	movlw	136
  4411  013980  0100               	movlb	0	; () banked
  4412  013982  5DE6               	subwf	mode2@dist& (0+255),w,b
  4413  013984  0E13               	movlw	19
  4414  013986  0100               	movlb	0	; () banked
  4415  013988  59E7               	subwfb	(mode2@dist+1)& (0+255),w,b
  4416  01398A  A0D8               	btfss	status,0,c
  4417  01398C  D7D0               	goto	l2373
  4418                           
  4419                           ; BSR set to: 0
  4420                           ;main.c: 280: }
  4421                           ;main.c: 281: irobot_stop_motion(0);
  4422                           
  4423                           ; BSR set to: 0
  4424  01398E  0E00               	movlw	0
  4425  013990  EC68  F0AE         	call	_irobot_stop_motion
  4426                           
  4427                           ;main.c: 283: if (MXK_Release())
  4428  013994  EC21  F0B2         	call	_MXK_Release	;wreg free
  4429  013998  0900               	iorlw	0
  4430  01399A  B4D8               	btfsc	status,2,c
  4431  01399C  0012               	return	
  4432                           
  4433                           ;main.c: 284: MXK_Dequeue();
  4434  01399E  EC73  F0AF         	call	_MXK_Dequeue	;wreg free
  4435  0139A2  0012               	return	
  4436  0139A4                     __end_of_mode2:
  4437                           	opt stack 0
  4438                           tblptru	equ	0xFF8
  4439                           tblptrh	equ	0xFF7
  4440                           tblptrl	equ	0xFF6
  4441                           tablat	equ	0xFF5
  4442                           postinc0	equ	0xFEE
  4443                           wreg	equ	0xFE8
  4444                           postdec1	equ	0xFE5
  4445                           fsr1h	equ	0xFE2
  4446                           fsr1l	equ	0xFE1
  4447                           status	equ	0xFD8
  4448                           
  4449 ;; *************** function _irobot_move_straight *****************
  4450 ;; Defined at:
  4451 ;;		line 313 in file "Library/iRobotSerial.c"
  4452 ;; Parameters:    Size  Location     Type
  4453 ;;  straightSpee    2   25[BANK0 ] short 
  4454 ;; Auto vars:     Size  Location     Type
  4455 ;;		None
  4456 ;; Return value:  Size  Location     Type
  4457 ;;                  1    wreg      void 
  4458 ;; Registers used:
  4459 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4460 ;; Tracked objects:
  4461 ;;		On entry : 0/0
  4462 ;;		On exit  : 0/0
  4463 ;;		Unchanged: 0/0
  4464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4465 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4468 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4469 ;;Total ram usage:        2 bytes
  4470 ;; Hardware stack levels used:    1
  4471 ;; Hardware stack levels required when called:    9
  4472 ;; This function calls:
  4473 ;;		_irobot_move
  4474 ;; This function is called by:
  4475 ;;		_move_and_rotate
  4476 ;;		_mode2
  4477 ;; This function uses a non-reentrant model
  4478 ;;
  4479                           
  4480                           	psect	text7
  4481  016494                     __ptext7:
  4482                           	opt stack 0
  4483  016494                     _irobot_move_straight:
  4484                           	opt stack 19
  4485                           
  4486                           ;iRobotSerial.c: 314: irobot_move(0, straightSpeed, iR_CONST_STRAIGHT_2);
  4487                           
  4488                           ;incstack = 0
  4489  016494  C0D3  F0CA         	movff	irobot_move_straight@straightSpeed,irobot_move@moveSpeed
  4490  016498  C0D4  F0CB         	movff	irobot_move_straight@straightSpeed+1,irobot_move@moveSpeed+1
  4491  01649C  0E7F               	movlw	127
  4492  01649E  0100               	movlb	0	; () banked
  4493  0164A0  6FCD               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  4494  0164A2  69CC               	setf	irobot_move@moveTurnRadius& (0+255),b
  4495  0164A4  0E00               	movlw	0
  4496  0164A6  ECEF  F0A1         	call	_irobot_move
  4497  0164AA  0012               	return		;funcret
  4498  0164AC                     __end_of_irobot_move_straight:
  4499                           	opt stack 0
  4500                           tblptru	equ	0xFF8
  4501                           tblptrh	equ	0xFF7
  4502                           tblptrl	equ	0xFF6
  4503                           tablat	equ	0xFF5
  4504                           postinc0	equ	0xFEE
  4505                           wreg	equ	0xFE8
  4506                           postdec1	equ	0xFE5
  4507                           fsr1h	equ	0xFE2
  4508                           fsr1l	equ	0xFE1
  4509                           status	equ	0xFD8
  4510                           
  4511 ;; *************** function _mode1 *****************
  4512 ;; Defined at:
  4513 ;;		line 195 in file "main.c"
  4514 ;; Parameters:    Size  Location     Type
  4515 ;;		None
  4516 ;; Auto vars:     Size  Location     Type
  4517 ;;  moveto          2    2[BANK3 ] int 
  4518 ;; Return value:  Size  Location     Type
  4519 ;;                  1    wreg      void 
  4520 ;; Registers used:
  4521 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  4522 ;; Tracked objects:
  4523 ;;		On entry : 0/0
  4524 ;;		On exit  : 0/0
  4525 ;;		Unchanged: 0/0
  4526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4528 ;;      Locals:         0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4529 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4530 ;;      Totals:         0       0       0       0       8       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4531 ;;Total ram usage:        8 bytes
  4532 ;; Hardware stack levels used:    1
  4533 ;; Hardware stack levels required when called:   17
  4534 ;; This function calls:
  4535 ;;		_ADC_Start
  4536 ;;		_ADC_Voltage
  4537 ;;		_Console_Render
  4538 ;;		_HMI_Render
  4539 ;;		_HMI_SetNumber
  4540 ;;		_MXK_Dequeue
  4541 ;;		_MXK_Release
  4542 ;;		_MXK_SwitchTo
  4543 ;;		_Motor_Move
  4544 ;;		_Motor_Speed
  4545 ;;		___fldiv
  4546 ;;		___fltol
  4547 ;;		_printf
  4548 ;;		_safeToGo
  4549 ;; This function is called by:
  4550 ;;		_main
  4551 ;; This function uses a non-reentrant model
  4552 ;;
  4553                           
  4554                           	psect	text8
  4555  0108C4                     __ptext8:
  4556                           	opt stack 0
  4557  0108C4                     _mode1:
  4558                           	opt stack 13
  4559                           
  4560                           ;main.c: 196: safeToGo();
  4561                           
  4562                           ;incstack = 0
  4563  0108C4  ECB2  F0AD         	call	_safeToGo	;wreg free
  4564                           
  4565                           ;main.c: 197: if (MXK_SwitchTo(eMXK_HMI)) {
  4566  0108C8  0E01               	movlw	1
  4567  0108CA  ECF3  F0AE         	call	_MXK_SwitchTo
  4568  0108CE  0900               	iorlw	0
  4569  0108D0  B4D8               	btfsc	status,2,c
  4570  0108D2  D029               	goto	l2346
  4571                           
  4572                           ;main.c: 198: printf("%c", (char)35);
  4573  0108D4  0EFB               	movlw	low STR_1
  4574  0108D6  0100               	movlb	0	; () banked
  4575  0108D8  6FCF               	movwf	printf@f& (0+255),b
  4576  0108DA  0EFF               	movlw	high STR_1
  4577  0108DC  0100               	movlb	0	; () banked
  4578  0108DE  6FD0               	movwf	(printf@f+1)& (0+255),b
  4579  0108E0  0E00               	movlw	0
  4580  0108E2  0100               	movlb	0	; () banked
  4581  0108E4  6FD2               	movwf	(?_printf+3)& (0+255),b
  4582  0108E6  0E23               	movlw	35
  4583  0108E8  6FD1               	movwf	(?_printf+2)& (0+255),b
  4584  0108EA  ECD3  F091         	call	_printf	;wreg free
  4585                           
  4586                           ;main.c: 199: printf("Total Distance:%u\nLeft Bump:%u\nRight Bump:%u\n", distanceTotal, 
      +                          iRBumpLeft, iRBumpRight);
  4587  0108EE  0E95               	movlw	low STR_4
  4588  0108F0  0100               	movlb	0	; () banked
  4589  0108F2  6FCF               	movwf	printf@f& (0+255),b
  4590  0108F4  0EFF               	movlw	high STR_4
  4591  0108F6  0100               	movlb	0	; () banked
  4592  0108F8  6FD0               	movwf	(printf@f+1)& (0+255),b
  4593  0108FA  C077  F0D1         	movff	_distanceTotal,?_printf+2
  4594  0108FE  C078  F0D2         	movff	_distanceTotal+1,?_printf+3
  4595  010902  C089  F0D3         	movff	_iRBumpLeft,?_printf+4
  4596  010906  0100               	movlb	0	; () banked
  4597  010908  6BD4               	clrf	(?_printf+5)& (0+255),b
  4598  01090A  C08A  F0D5         	movff	_iRBumpRight,?_printf+6
  4599  01090E  0100               	movlb	0	; () banked
  4600  010910  6BD6               	clrf	(?_printf+7)& (0+255),b
  4601  010912  ECD3  F091         	call	_printf	;wreg free
  4602                           
  4603                           ;main.c: 200: Console_Render();
  4604  010916  ECE7  F08E         	call	_Console_Render	;wreg free
  4605                           
  4606                           ;main.c: 201: if (MXK_Release())
  4607  01091A  EC21  F0B2         	call	_MXK_Release	;wreg free
  4608  01091E  0900               	iorlw	0
  4609  010920  A4D8               	btfss	status,2,c
  4610                           
  4611                           ;main.c: 202: MXK_Dequeue();
  4612  010922  EC73  F0AF         	call	_MXK_Dequeue	;wreg free
  4613  010926                     l2346:
  4614                           
  4615                           ;main.c: 203: }
  4616                           ;main.c: 204: StepRotate = 0;
  4617  010926  0E00               	movlw	0
  4618  010928  0100               	movlb	0	; () banked
  4619  01092A  6F72               	movwf	(_StepRotate+1)& (0+255),b
  4620  01092C  0E00               	movlw	0
  4621  01092E  6F71               	movwf	_StepRotate& (0+255),b
  4622                           
  4623                           ; BSR set to: 0
  4624                           ;main.c: 205: MinDist = 1000;
  4625  010930  0E03               	movlw	3
  4626  010932  0100               	movlb	0	; () banked
  4627  010934  6FFC               	movwf	(_MinDist+1)& (0+255),b
  4628  010936  0EE8               	movlw	232
  4629  010938  6FFB               	movwf	_MinDist& (0+255),b
  4630                           
  4631                           ; BSR set to: 0
  4632                           ;main.c: 206: Stepstomin = 0;
  4633  01093A  0E00               	movlw	0
  4634  01093C  0100               	movlb	0	; () banked
  4635  01093E  6F70               	movwf	(_Stepstomin+1)& (0+255),b
  4636  010940  0E00               	movlw	0
  4637  010942  6F6F               	movwf	_Stepstomin& (0+255),b
  4638                           
  4639                           ; BSR set to: 0
  4640                           ;main.c: 207: IRValue = 0;
  4641  010944  0E00               	movlw	0
  4642  010946  0100               	movlb	0	; () banked
  4643  010948  6F6E               	movwf	(_IRValue+1)& (0+255),b
  4644  01094A  0E00               	movlw	0
  4645  01094C  6F6D               	movwf	_IRValue& (0+255),b
  4646                           
  4647                           ; BSR set to: 0
  4648                           ;main.c: 208: TimerX = 8;
  4649  01094E  0E00               	movlw	0
  4650  010950  0100               	movlb	0	; () banked
  4651  010952  6FFA               	movwf	(_TimerX+1)& (0+255),b
  4652  010954  0E08               	movlw	8
  4653  010956  6FF9               	movwf	_TimerX& (0+255),b
  4654                           
  4655                           ;main.c: 209: while (StepRotate < 400) {
  4656  010958  D0F9               	goto	u13620
  4657  01095A                     
  4658                           ; BSR set to: 0
  4659                           ;main.c: 210: StepRotate++;
  4660                           
  4661                           ; BSR set to: 0
  4662  01095A  0100               	movlb	0	; () banked
  4663  01095C  4B71               	infsnz	_StepRotate& (0+255),f,b
  4664  01095E  2B72               	incf	(_StepRotate+1)& (0+255),f,b
  4665                           
  4666                           ; BSR set to: 0
  4667                           ;main.c: 211: ADC_Start(&ADC_AN0);
  4668  010960  0EB1               	movlw	low _ADC_AN0
  4669  010962  0100               	movlb	0	; () banked
  4670  010964  6FBC               	movwf	ADC_Start@pInput& (0+255),b
  4671  010966  0E00               	movlw	high _ADC_AN0
  4672  010968  0100               	movlb	0	; () banked
  4673  01096A  6FBD               	movwf	(ADC_Start@pInput+1)& (0+255),b
  4674  01096C  EC85  F0A7         	call	_ADC_Start	;wreg free
  4675                           
  4676                           ;main.c: 212: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4677  010970  0EB1               	movlw	low _ADC_AN0
  4678  010972  0100               	movlb	0	; () banked
  4679  010974  6FE1               	movwf	ADC_Voltage@pInput& (0+255),b
  4680  010976  0E00               	movlw	high _ADC_AN0
  4681  010978  0100               	movlb	0	; () banked
  4682  01097A  6FE2               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  4683  01097C  EC42  F09D         	call	_ADC_Voltage	;wreg free
  4684  010980  C0E1  F3F8         	movff	?_ADC_Voltage,_mode1$15599
  4685  010984  C0E2  F3F9         	movff	?_ADC_Voltage+1,_mode1$15599+1
  4686  010988  C0E3  F3FA         	movff	?_ADC_Voltage+2,_mode1$15599+2
  4687  01098C  C0E4  F3FB         	movff	?_ADC_Voltage+3,_mode1$15599+3
  4688                           
  4689                           ;main.c: 212: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4690  010990  C3F8  F0BE         	movff	_mode1$15599,___fldiv@a
  4691  010994  C3F9  F0BF         	movff	_mode1$15599+1,___fldiv@a+1
  4692  010998  C3FA  F0C0         	movff	_mode1$15599+2,___fldiv@a+2
  4693  01099C  C3FB  F0C1         	movff	_mode1$15599+3,___fldiv@a+3
  4694  0109A0  0E00               	movlw	0
  4695  0109A2  0100               	movlb	0	; () banked
  4696  0109A4  6FBA               	movwf	___fldiv@b& (0+255),b
  4697  0109A6  0E00               	movlw	0
  4698  0109A8  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
  4699  0109AA  0E6C               	movlw	108
  4700  0109AC  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
  4701  0109AE  0E42               	movlw	66
  4702  0109B0  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
  4703  0109B2  EC4C  F086         	call	___fldiv	;wreg free
  4704  0109B6  C0BA  F0F3         	movff	?___fldiv,___fltol@f1
  4705  0109BA  C0BB  F0F4         	movff	?___fldiv+1,___fltol@f1+1
  4706  0109BE  C0BC  F0F5         	movff	?___fldiv+2,___fltol@f1+2
  4707  0109C2  C0BD  F0F6         	movff	?___fldiv+3,___fltol@f1+3
  4708  0109C6  ECE1  F09A         	call	___fltol	;wreg free
  4709  0109CA  C0F3  F06D         	movff	?___fltol,_IRValue
  4710  0109CE  C0F4  F06E         	movff	?___fltol+1,_IRValue+1
  4711                           
  4712                           ;main.c: 213: if (MXK_SwitchTo(eMXK_HMI)) {
  4713  0109D2  0E01               	movlw	1
  4714  0109D4  ECF3  F0AE         	call	_MXK_SwitchTo
  4715  0109D8  0900               	iorlw	0
  4716  0109DA  B4D8               	btfsc	status,2,c
  4717  0109DC  D00E               	goto	l2350
  4718                           
  4719                           ;main.c: 214: HMI_SetNumber(IRValue);
  4720  0109DE  C06D  F0D0         	movff	_IRValue,HMI_SetNumber@pInput
  4721  0109E2  C06E  F0D1         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  4722  0109E6  EC1C  F0B1         	call	_HMI_SetNumber	;wreg free
  4723                           
  4724                           ;main.c: 215: HMI_Render();
  4725  0109EA  EC54  F0AF         	call	_HMI_Render	;wreg free
  4726                           
  4727                           ;main.c: 216: if (MXK_Release())
  4728  0109EE  EC21  F0B2         	call	_MXK_Release	;wreg free
  4729  0109F2  0900               	iorlw	0
  4730  0109F4  A4D8               	btfss	status,2,c
  4731                           
  4732                           ;main.c: 217: MXK_Dequeue();
  4733  0109F6  EC73  F0AF         	call	_MXK_Dequeue	;wreg free
  4734  0109FA                     l2350:
  4735                           
  4736                           ;main.c: 218: }
  4737                           ;main.c: 219: if (IRValue < MinDist) {
  4738  0109FA  0100               	movlb	0	; () banked
  4739  0109FC  51FB               	movf	_MinDist& (0+255),w,b
  4740  0109FE  0100               	movlb	0	; () banked
  4741  010A00  5D6D               	subwf	_IRValue& (0+255),w,b
  4742  010A02  0100               	movlb	0	; () banked
  4743  010A04  516E               	movf	(_IRValue+1)& (0+255),w,b
  4744  010A06  0A80               	xorlw	128
  4745  010A08  0103               	movlb	3	; () banked
  4746  010A0A  6FF4               	movwf	??_mode1& (0+255),b
  4747  010A0C  0100               	movlb	0	; () banked
  4748  010A0E  51FC               	movf	(_MinDist+1)& (0+255),w,b
  4749  010A10  0A80               	xorlw	128
  4750  010A12  0103               	movlb	3	; () banked
  4751  010A14  59F4               	subwfb	??_mode1& (0+255),w,b
  4752  010A16  B0D8               	btfsc	status,0,c
  4753  010A18  D008               	goto	l2351
  4754                           
  4755                           ; BSR set to: 3
  4756                           ;main.c: 220: MinDist = IRValue;
  4757  010A1A  C06D  F0FB         	movff	_IRValue,_MinDist
  4758  010A1E  C06E  F0FC         	movff	_IRValue+1,_MinDist+1
  4759                           
  4760                           ;main.c: 221: Stepstomin = StepRotate;
  4761  010A22  C071  F06F         	movff	_StepRotate,_Stepstomin
  4762  010A26  C072  F070         	movff	_StepRotate+1,_Stepstomin+1
  4763  010A2A                     l2351:
  4764                           
  4765                           ; BSR set to: 3
  4766                           ;main.c: 222: }
  4767                           ;main.c: 223: if (MXK_SwitchTo(eMXK_Motor)) {
  4768                           
  4769                           ; BSR set to: 3
  4770  010A2A  0E08               	movlw	8
  4771  010A2C  ECF3  F0AE         	call	_MXK_SwitchTo
  4772  010A30  0900               	iorlw	0
  4773  010A32  B4D8               	btfsc	status,2,c
  4774  010A34  D020               	goto	l2353
  4775                           
  4776                           ;main.c: 224: Motor_Speed(&Stepper, (50));
  4777  010A36  0ECF               	movlw	low _Stepper
  4778  010A38  0100               	movlb	0	; () banked
  4779  010A3A  6FD5               	movwf	Motor_Speed@pMotor& (0+255),b
  4780  010A3C  0E03               	movlw	high _Stepper
  4781  010A3E  0100               	movlb	0	; () banked
  4782  010A40  6FD6               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  4783  010A42  0E00               	movlw	0
  4784  010A44  0100               	movlb	0	; () banked
  4785  010A46  6FD8               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  4786  010A48  0E32               	movlw	50
  4787  010A4A  6FD7               	movwf	Motor_Speed@pFrequency& (0+255),b
  4788  010A4C  EC07  F0B1         	call	_Motor_Speed	;wreg free
  4789                           
  4790                           ;main.c: 225: Motor_Move(&Stepper, 1);
  4791  010A50  0ECF               	movlw	low _Stepper
  4792  010A52  0100               	movlb	0	; () banked
  4793  010A54  6FBD               	movwf	Motor_Move@pMotor& (0+255),b
  4794  010A56  0E03               	movlw	high _Stepper
  4795  010A58  0100               	movlb	0	; () banked
  4796  010A5A  6FBE               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  4797  010A5C  0E00               	movlw	0
  4798  010A5E  0100               	movlb	0	; () banked
  4799  010A60  6FC0               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  4800  010A62  0E01               	movlw	1
  4801  010A64  6FBF               	movwf	Motor_Move@pDelta& (0+255),b
  4802  010A66  EC0B  F0B0         	call	_Motor_Move	;wreg free
  4803                           
  4804                           ;main.c: 226: if (MXK_Release())
  4805  010A6A  EC21  F0B2         	call	_MXK_Release	;wreg free
  4806  010A6E  0900               	iorlw	0
  4807  010A70  A4D8               	btfss	status,2,c
  4808                           
  4809                           ;main.c: 227: MXK_Dequeue();
  4810  010A72  EC73  F0AF         	call	_MXK_Dequeue	;wreg free
  4811  010A76                     l2353:
  4812                           
  4813                           ;main.c: 228: }
  4814                           ;main.c: 229: TimerX = 10;
  4815  010A76  0E00               	movlw	0
  4816  010A78  0100               	movlb	0	; () banked
  4817  010A7A  6FFA               	movwf	(_TimerX+1)& (0+255),b
  4818  010A7C  0E0A               	movlw	10
  4819  010A7E  6FF9               	movwf	_TimerX& (0+255),b
  4820                           
  4821                           ; BSR set to: 0
  4822                           ;main.c: 230: if (TimerX > 0) {
  4823  010A80  0100               	movlb	0	; () banked
  4824  010A82  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  4825  010A84  D063               	goto	u13620
  4826  010A86  0100               	movlb	0	; () banked
  4827  010A88  51FA               	movf	(_TimerX+1)& (0+255),w,b
  4828  010A8A  E156               	bnz	l16385
  4829  010A8C  0100               	movlb	0	; () banked
  4830  010A8E  05F9               	decf	_TimerX& (0+255),w,b
  4831  010A90  B0D8               	btfsc	status,0,c
  4832  010A92  D052               	goto	l2355
  4833  010A94  D05B               	goto	u13620
  4834  010A96                     l16367:
  4835                           
  4836                           ; BSR set to: 0
  4837                           ;main.c: 232: ADC_Start(&ADC_AN0);
  4838  010A96  0EB1               	movlw	low _ADC_AN0
  4839  010A98  0100               	movlb	0	; () banked
  4840  010A9A  6FBC               	movwf	ADC_Start@pInput& (0+255),b
  4841  010A9C  0E00               	movlw	high _ADC_AN0
  4842  010A9E  0100               	movlb	0	; () banked
  4843  010AA0  6FBD               	movwf	(ADC_Start@pInput+1)& (0+255),b
  4844  010AA2  EC85  F0A7         	call	_ADC_Start	;wreg free
  4845                           
  4846                           ;main.c: 233: if (MXK_SwitchTo(eMXK_HMI)) {
  4847  010AA6  0E01               	movlw	1
  4848  010AA8  ECF3  F0AE         	call	_MXK_SwitchTo
  4849  010AAC  0900               	iorlw	0
  4850  010AAE  B4D8               	btfsc	status,2,c
  4851  010AB0  D00E               	goto	l2358
  4852                           
  4853                           ;main.c: 234: HMI_SetNumber(IRValue);
  4854  010AB2  C06D  F0D0         	movff	_IRValue,HMI_SetNumber@pInput
  4855  010AB6  C06E  F0D1         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  4856  010ABA  EC1C  F0B1         	call	_HMI_SetNumber	;wreg free
  4857                           
  4858                           ;main.c: 235: HMI_Render();
  4859  010ABE  EC54  F0AF         	call	_HMI_Render	;wreg free
  4860                           
  4861                           ;main.c: 236: if (MXK_Release())
  4862  010AC2  EC21  F0B2         	call	_MXK_Release	;wreg free
  4863  010AC6  0900               	iorlw	0
  4864  010AC8  A4D8               	btfss	status,2,c
  4865                           
  4866                           ;main.c: 237: MXK_Dequeue();
  4867  010ACA  EC73  F0AF         	call	_MXK_Dequeue	;wreg free
  4868  010ACE                     l2358:
  4869                           
  4870                           ;main.c: 238: }
  4871                           ;main.c: 239: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4872  010ACE  0EB1               	movlw	low _ADC_AN0
  4873  010AD0  0100               	movlb	0	; () banked
  4874  010AD2  6FE1               	movwf	ADC_Voltage@pInput& (0+255),b
  4875  010AD4  0E00               	movlw	high _ADC_AN0
  4876  010AD6  0100               	movlb	0	; () banked
  4877  010AD8  6FE2               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  4878  010ADA  EC42  F09D         	call	_ADC_Voltage	;wreg free
  4879  010ADE  C0E1  F3F8         	movff	?_ADC_Voltage,_mode1$15599
  4880  010AE2  C0E2  F3F9         	movff	?_ADC_Voltage+1,_mode1$15599+1
  4881  010AE6  C0E3  F3FA         	movff	?_ADC_Voltage+2,_mode1$15599+2
  4882  010AEA  C0E4  F3FB         	movff	?_ADC_Voltage+3,_mode1$15599+3
  4883                           
  4884                           ;main.c: 238: }
  4885                           ;main.c: 239: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4886  010AEE  C3F8  F0BE         	movff	_mode1$15599,___fldiv@a
  4887  010AF2  C3F9  F0BF         	movff	_mode1$15599+1,___fldiv@a+1
  4888  010AF6  C3FA  F0C0         	movff	_mode1$15599+2,___fldiv@a+2
  4889  010AFA  C3FB  F0C1         	movff	_mode1$15599+3,___fldiv@a+3
  4890  010AFE  0E00               	movlw	0
  4891  010B00  0100               	movlb	0	; () banked
  4892  010B02  6FBA               	movwf	___fldiv@b& (0+255),b
  4893  010B04  0E00               	movlw	0
  4894  010B06  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
  4895  010B08  0E6C               	movlw	108
  4896  010B0A  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
  4897  010B0C  0E42               	movlw	66
  4898  010B0E  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
  4899  010B10  EC4C  F086         	call	___fldiv	;wreg free
  4900  010B14  C0BA  F0F3         	movff	?___fldiv,___fltol@f1
  4901  010B18  C0BB  F0F4         	movff	?___fldiv+1,___fltol@f1+1
  4902  010B1C  C0BC  F0F5         	movff	?___fldiv+2,___fltol@f1+2
  4903  010B20  C0BD  F0F6         	movff	?___fldiv+3,___fltol@f1+3
  4904  010B24  ECE1  F09A         	call	___fltol	;wreg free
  4905  010B28  C0F3  F06D         	movff	?___fltol,_IRValue
  4906  010B2C  C0F4  F06E         	movff	?___fltol+1,_IRValue+1
  4907                           
  4908                           ;main.c: 240: TimerX--;
  4909  010B30  0100               	movlb	0	; () banked
  4910  010B32  07F9               	decf	_TimerX& (0+255),f,b
  4911  010B34  A0D8               	btfss	status,0,c
  4912  010B36  07FA               	decf	(_TimerX+1)& (0+255),f,b
  4913  010B38                     l2355:
  4914  010B38                     l16385:
  4915                           
  4916                           ; BSR set to: 0
  4917  010B38  0100               	movlb	0	; () banked
  4918  010B3A  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  4919  010B3C  D007               	goto	u13620
  4920  010B3E  0100               	movlb	0	; () banked
  4921  010B40  51FA               	movf	(_TimerX+1)& (0+255),w,b
  4922  010B42  E1A9               	bnz	l16367
  4923  010B44  0100               	movlb	0	; () banked
  4924  010B46  05F9               	decf	_TimerX& (0+255),w,b
  4925  010B48  B0D8               	btfsc	status,0,c
  4926  010B4A  D7A5               	goto	l2356
  4927  010B4C                     u13620:
  4928                           
  4929                           ; BSR set to: 0
  4930                           
  4931                           ; BSR set to: 0
  4932                           
  4933                           ; BSR set to: 0
  4934                           
  4935                           ; BSR set to: 0
  4936  010B4C  0100               	movlb	0	; () banked
  4937  010B4E  BF72               	btfsc	(_StepRotate+1)& (0+255),7,b
  4938  010B50  D704               	goto	l2348
  4939  010B52  0E90               	movlw	144
  4940  010B54  0100               	movlb	0	; () banked
  4941  010B56  5D71               	subwf	_StepRotate& (0+255),w,b
  4942  010B58  0E01               	movlw	1
  4943  010B5A  0100               	movlb	0	; () banked
  4944  010B5C  5972               	subwfb	(_StepRotate+1)& (0+255),w,b
  4945  010B5E  A0D8               	btfss	status,0,c
  4946  010B60  D6FC               	goto	l2348
  4947                           
  4948                           ; BSR set to: 0
  4949                           ;main.c: 241: }
  4950                           ;main.c: 242: }
  4951                           ;main.c: 243: }
  4952                           ;main.c: 244: if (MXK_SwitchTo(eMXK_Motor)) {
  4953                           
  4954                           ; BSR set to: 0
  4955  010B62  0E08               	movlw	8
  4956  010B64  ECF3  F0AE         	call	_MXK_SwitchTo
  4957  010B68  0900               	iorlw	0
  4958  010B6A  B4D8               	btfsc	status,2,c
  4959  010B6C  D08A               	goto	l2363
  4960                           
  4961                           ;main.c: 245: Motor_Speed(&Stepper, (50));
  4962  010B6E  0ECF               	movlw	low _Stepper
  4963  010B70  0100               	movlb	0	; () banked
  4964  010B72  6FD5               	movwf	Motor_Speed@pMotor& (0+255),b
  4965  010B74  0E03               	movlw	high _Stepper
  4966  010B76  0100               	movlb	0	; () banked
  4967  010B78  6FD6               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  4968  010B7A  0E00               	movlw	0
  4969  010B7C  0100               	movlb	0	; () banked
  4970  010B7E  6FD8               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  4971  010B80  0E32               	movlw	50
  4972  010B82  6FD7               	movwf	Motor_Speed@pFrequency& (0+255),b
  4973  010B84  EC07  F0B1         	call	_Motor_Speed	;wreg free
  4974                           
  4975                           ;main.c: 246: int moveto = 400 - Stepstomin;
  4976  010B88  C06F  F3F4         	movff	_Stepstomin,??_mode1
  4977  010B8C  C070  F3F5         	movff	_Stepstomin+1,??_mode1+1
  4978  010B90  0103               	movlb	3	; () banked
  4979  010B92  1FF4               	comf	??_mode1& (0+255),f,b
  4980  010B94  1FF5               	comf	(??_mode1+1)& (0+255),f,b
  4981  010B96  4BF4               	infsnz	??_mode1& (0+255),f,b
  4982  010B98  2BF5               	incf	(??_mode1+1)& (0+255),f,b
  4983  010B9A  0E90               	movlw	144
  4984  010B9C  0103               	movlb	3	; () banked
  4985  010B9E  25F4               	addwf	??_mode1& (0+255),w,b
  4986  010BA0  0103               	movlb	3	; () banked
  4987  010BA2  6FF6               	movwf	mode1@moveto& (0+255),b
  4988  010BA4  0E01               	movlw	1
  4989  010BA6  0103               	movlb	3	; () banked
  4990  010BA8  21F5               	addwfc	(??_mode1+1)& (0+255),w,b
  4991  010BAA  0103               	movlb	3	; () banked
  4992  010BAC  6FF7               	movwf	(mode1@moveto+1)& (0+255),b
  4993                           
  4994                           ; BSR set to: 3
  4995                           ;main.c: 248: Motor_Move(&Stepper, (-moveto));
  4996  010BAE  0ECF               	movlw	low _Stepper
  4997  010BB0  0100               	movlb	0	; () banked
  4998  010BB2  6FBD               	movwf	Motor_Move@pMotor& (0+255),b
  4999  010BB4  0E03               	movlw	high _Stepper
  5000  010BB6  0100               	movlb	0	; () banked
  5001  010BB8  6FBE               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  5002  010BBA  C3F6  F3F4         	movff	mode1@moveto,??_mode1
  5003  010BBE  C3F7  F3F5         	movff	mode1@moveto+1,??_mode1+1
  5004  010BC2  0103               	movlb	3	; () banked
  5005  010BC4  1FF4               	comf	??_mode1& (0+255),f,b
  5006  010BC6  1FF5               	comf	(??_mode1+1)& (0+255),f,b
  5007  010BC8  4BF4               	infsnz	??_mode1& (0+255),f,b
  5008  010BCA  2BF5               	incf	(??_mode1+1)& (0+255),f,b
  5009  010BCC  C3F4  F0BF         	movff	??_mode1,Motor_Move@pDelta
  5010  010BD0  C3F5  F0C0         	movff	??_mode1+1,Motor_Move@pDelta+1
  5011  010BD4  EC0B  F0B0         	call	_Motor_Move	;wreg free
  5012                           
  5013                           ;main.c: 249: if (MXK_Release())
  5014  010BD8  EC21  F0B2         	call	_MXK_Release	;wreg free
  5015  010BDC  0900               	iorlw	0
  5016  010BDE  B4D8               	btfsc	status,2,c
  5017  010BE0  D050               	goto	l2363
  5018                           
  5019                           ;main.c: 250: MXK_Dequeue();
  5020  010BE2  EC73  F0AF         	call	_MXK_Dequeue	;wreg free
  5021                           
  5022                           ;main.c: 251: }
  5023                           ;main.c: 252: while (Stepper.mDelta > 0) {
  5024  010BE6  D04D               	goto	l2363
  5025  010BE8                     l16401:
  5026                           
  5027                           ;main.c: 253: ADC_Start(&ADC_AN0);
  5028  010BE8  0EB1               	movlw	low _ADC_AN0
  5029  010BEA  0100               	movlb	0	; () banked
  5030  010BEC  6FBC               	movwf	ADC_Start@pInput& (0+255),b
  5031  010BEE  0E00               	movlw	high _ADC_AN0
  5032  010BF0  0100               	movlb	0	; () banked
  5033  010BF2  6FBD               	movwf	(ADC_Start@pInput+1)& (0+255),b
  5034  010BF4  EC85  F0A7         	call	_ADC_Start	;wreg free
  5035                           
  5036                           ;main.c: 254: if (MXK_SwitchTo(eMXK_HMI)) {
  5037  010BF8  0E01               	movlw	1
  5038  010BFA  ECF3  F0AE         	call	_MXK_SwitchTo
  5039  010BFE  0900               	iorlw	0
  5040  010C00  B4D8               	btfsc	status,2,c
  5041  010C02  D00E               	goto	l2366
  5042                           
  5043                           ;main.c: 255: HMI_SetNumber(IRValue);
  5044  010C04  C06D  F0D0         	movff	_IRValue,HMI_SetNumber@pInput
  5045  010C08  C06E  F0D1         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  5046  010C0C  EC1C  F0B1         	call	_HMI_SetNumber	;wreg free
  5047                           
  5048                           ;main.c: 256: HMI_Render();
  5049  010C10  EC54  F0AF         	call	_HMI_Render	;wreg free
  5050                           
  5051                           ;main.c: 257: if (MXK_Release())
  5052  010C14  EC21  F0B2         	call	_MXK_Release	;wreg free
  5053  010C18  0900               	iorlw	0
  5054  010C1A  A4D8               	btfss	status,2,c
  5055                           
  5056                           ;main.c: 258: MXK_Dequeue();
  5057  010C1C  EC73  F0AF         	call	_MXK_Dequeue	;wreg free
  5058  010C20                     l2366:
  5059                           
  5060                           ;main.c: 259: }
  5061                           ;main.c: 260: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  5062  010C20  0EB1               	movlw	low _ADC_AN0
  5063  010C22  0100               	movlb	0	; () banked
  5064  010C24  6FE1               	movwf	ADC_Voltage@pInput& (0+255),b
  5065  010C26  0E00               	movlw	high _ADC_AN0
  5066  010C28  0100               	movlb	0	; () banked
  5067  010C2A  6FE2               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  5068  010C2C  EC42  F09D         	call	_ADC_Voltage	;wreg free
  5069  010C30  C0E1  F3F8         	movff	?_ADC_Voltage,_mode1$15599
  5070  010C34  C0E2  F3F9         	movff	?_ADC_Voltage+1,_mode1$15599+1
  5071  010C38  C0E3  F3FA         	movff	?_ADC_Voltage+2,_mode1$15599+2
  5072  010C3C  C0E4  F3FB         	movff	?_ADC_Voltage+3,_mode1$15599+3
  5073                           
  5074                           ;main.c: 259: }
  5075                           ;main.c: 260: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  5076  010C40  C3F8  F0BE         	movff	_mode1$15599,___fldiv@a
  5077  010C44  C3F9  F0BF         	movff	_mode1$15599+1,___fldiv@a+1
  5078  010C48  C3FA  F0C0         	movff	_mode1$15599+2,___fldiv@a+2
  5079  010C4C  C3FB  F0C1         	movff	_mode1$15599+3,___fldiv@a+3
  5080  010C50  0E00               	movlw	0
  5081  010C52  0100               	movlb	0	; () banked
  5082  010C54  6FBA               	movwf	___fldiv@b& (0+255),b
  5083  010C56  0E00               	movlw	0
  5084  010C58  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
  5085  010C5A  0E6C               	movlw	108
  5086  010C5C  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
  5087  010C5E  0E42               	movlw	66
  5088  010C60  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
  5089  010C62  EC4C  F086         	call	___fldiv	;wreg free
  5090  010C66  C0BA  F0F3         	movff	?___fldiv,___fltol@f1
  5091  010C6A  C0BB  F0F4         	movff	?___fldiv+1,___fltol@f1+1
  5092  010C6E  C0BC  F0F5         	movff	?___fldiv+2,___fltol@f1+2
  5093  010C72  C0BD  F0F6         	movff	?___fldiv+3,___fltol@f1+3
  5094  010C76  ECE1  F09A         	call	___fltol	;wreg free
  5095  010C7A  C0F3  F06D         	movff	?___fltol,_IRValue
  5096  010C7E  C0F4  F06E         	movff	?___fltol+1,_IRValue+1
  5097  010C82                     l2363:
  5098  010C82  0103               	movlb	3	; () banked
  5099  010C84  BFD0               	btfsc	(_Stepper+1)& (0+255),7,b
  5100  010C86  0012               	return	
  5101  010C88  0103               	movlb	3	; () banked
  5102  010C8A  51D0               	movf	(_Stepper+1)& (0+255),w,b
  5103  010C8C  E1AD               	bnz	l16401
  5104  010C8E  0103               	movlb	3	; () banked
  5105  010C90  05CF               	decf	_Stepper& (0+255),w,b
  5106  010C92  A0D8               	btfss	status,0,c
  5107  010C94  0012               	return	
  5108  010C96  D7A8               	goto	l2364
  5109  010C98                     __end_of_mode1:
  5110                           	opt stack 0
  5111                           tblptru	equ	0xFF8
  5112                           tblptrh	equ	0xFF7
  5113                           tblptrl	equ	0xFF6
  5114                           tablat	equ	0xFF5
  5115                           postinc0	equ	0xFEE
  5116                           wreg	equ	0xFE8
  5117                           postdec1	equ	0xFE5
  5118                           fsr1h	equ	0xFE2
  5119                           fsr1l	equ	0xFE1
  5120                           status	equ	0xFD8
  5121                           
  5122 ;; *************** function _safeToGo *****************
  5123 ;; Defined at:
  5124 ;;		line 121 in file "main.c"
  5125 ;; Parameters:    Size  Location     Type
  5126 ;;		None
  5127 ;; Auto vars:     Size  Location     Type
  5128 ;;		None
  5129 ;; Return value:  Size  Location     Type
  5130 ;;                  1    wreg      void 
  5131 ;; Registers used:
  5132 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  5133 ;; Tracked objects:
  5134 ;;		On entry : 0/0
  5135 ;;		On exit  : 0/0
  5136 ;;		Unchanged: 0/0
  5137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5141 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5142 ;;Total ram usage:        0 bytes
  5143 ;; Hardware stack levels used:    1
  5144 ;; Hardware stack levels required when called:   16
  5145 ;; This function calls:
  5146 ;;		_HMI_Poll
  5147 ;;		_irobot_song_play
  5148 ;;		_irobot_stop_motion
  5149 ;;		_update_angle
  5150 ;;		_update_bump_and_cliff
  5151 ;;		_update_distance
  5152 ;; This function is called by:
  5153 ;;		_mode1
  5154 ;;		_mode2
  5155 ;;		_mode3
  5156 ;;		_mode4
  5157 ;; This function uses a non-reentrant model
  5158 ;;
  5159                           
  5160                           	psect	text9
  5161  015B64                     __ptext9:
  5162                           	opt stack 0
  5163  015B64                     _safeToGo:
  5164                           	opt stack 13
  5165                           
  5166                           ;main.c: 122: update_bump_and_cliff();
  5167                           
  5168                           ; BSR set to: 3
  5169                           ;incstack = 0
  5170  015B64  ECEE  F0AF         	call	_update_bump_and_cliff	;wreg free
  5171                           
  5172                           ;main.c: 123: update_distance();
  5173  015B68  ECC9  F0B2         	call	_update_distance	;wreg free
  5174                           
  5175                           ;main.c: 124: update_angle();
  5176  015B6C  ECD2  F0B2         	call	_update_angle	;wreg free
  5177                           
  5178                           ;main.c: 125: if (iRBumpLeft || iRBumpRight) {
  5179  015B70  0100               	movlb	0	; () banked
  5180  015B72  5189               	movf	_iRBumpLeft& (0+255),w,b
  5181  015B74  A4D8               	btfss	status,2,c
  5182  015B76  D004               	goto	u11240
  5183                           
  5184                           ; BSR set to: 0
  5185  015B78  0100               	movlb	0	; () banked
  5186  015B7A  518A               	movf	_iRBumpRight& (0+255),w,b
  5187  015B7C  B4D8               	btfsc	status,2,c
  5188  015B7E  D006               	goto	l2316
  5189  015B80                     u11240:
  5190                           
  5191                           ; BSR set to: 0
  5192                           ;main.c: 126: irobot_song_play(0);
  5193                           
  5194                           ; BSR set to: 0
  5195  015B80  0E00               	movlw	0
  5196  015B82  ECB5  F0B2         	call	_irobot_song_play
  5197                           
  5198                           ;main.c: 127: irobot_stop_motion(0);
  5199  015B86  0E00               	movlw	0
  5200  015B88  EC68  F0AE         	call	_irobot_stop_motion
  5201  015B8C                     l2316:
  5202                           
  5203                           ;main.c: 128: }
  5204                           ;main.c: 129: if (angleTotal > 83) {
  5205  015B8C  0100               	movlb	0	; () banked
  5206  015B8E  BF76               	btfsc	(_angleTotal+1)& (0+255),7,b
  5207  015B90  D00B               	goto	l2319
  5208  015B92  0100               	movlb	0	; () banked
  5209  015B94  5176               	movf	(_angleTotal+1)& (0+255),w,b
  5210  015B96  E105               	bnz	u11250
  5211  015B98  0E54               	movlw	84
  5212  015B9A  0100               	movlb	0	; () banked
  5213  015B9C  5D75               	subwf	_angleTotal& (0+255),w,b
  5214  015B9E  A0D8               	btfss	status,0,c
  5215  015BA0  D003               	goto	l2319
  5216  015BA2                     u11250:
  5217                           
  5218                           ; BSR set to: 0
  5219                           ;main.c: 130: irobot_stop_motion(0);
  5220  015BA2  0E00               	movlw	0
  5221  015BA4  EC68  F0AE         	call	_irobot_stop_motion
  5222  015BA8                     l2319:
  5223                           
  5224                           ;main.c: 131: }
  5225                           ;main.c: 132: HMI_Poll();
  5226  015BA8  ECE9  F0A9         	call	_HMI_Poll	;wreg free
  5227  015BAC  0012               	return		;funcret
  5228  015BAE                     __end_of_safeToGo:
  5229                           	opt stack 0
  5230                           tblptru	equ	0xFF8
  5231                           tblptrh	equ	0xFF7
  5232                           tblptrl	equ	0xFF6
  5233                           tablat	equ	0xFF5
  5234                           postinc0	equ	0xFEE
  5235                           wreg	equ	0xFE8
  5236                           postdec1	equ	0xFE5
  5237                           fsr1h	equ	0xFE2
  5238                           fsr1l	equ	0xFE1
  5239                           status	equ	0xFD8
  5240                           
  5241 ;; *************** function _update_distance *****************
  5242 ;; Defined at:
  5243 ;;		line 325 in file "Library/iRobotSerial.c"
  5244 ;; Parameters:    Size  Location     Type
  5245 ;;		None
  5246 ;; Auto vars:     Size  Location     Type
  5247 ;;		None
  5248 ;; Return value:  Size  Location     Type
  5249 ;;                  1    wreg      void 
  5250 ;; Registers used:
  5251 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5252 ;; Tracked objects:
  5253 ;;		On entry : 0/0
  5254 ;;		On exit  : 0/0
  5255 ;;		Unchanged: 0/0
  5256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5260 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5261 ;;Total ram usage:        0 bytes
  5262 ;; Hardware stack levels used:    1
  5263 ;; Hardware stack levels required when called:   10
  5264 ;; This function calls:
  5265 ;;		_irobot_query_and_update
  5266 ;; This function is called by:
  5267 ;;		_safeToGo
  5268 ;;		_move_and_rotate
  5269 ;;		_mode2
  5270 ;; This function uses a non-reentrant model
  5271 ;;
  5272                           
  5273                           	psect	text10
  5274  016592                     __ptext10:
  5275                           	opt stack 0
  5276  016592                     _update_distance:
  5277                           	opt stack 18
  5278                           
  5279                           ;iRobotSerial.c: 326: irobot_query_and_update(1, iR_PKT_DISTANCE);
  5280                           
  5281                           ;incstack = 0
  5282  016592  0E00               	movlw	0
  5283  016594  0100               	movlb	0	; () banked
  5284  016596  6FC1               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  5285  016598  0E13               	movlw	19
  5286  01659A  6FC0               	movwf	?_irobot_query_and_update& (0+255),b
  5287  01659C  0E01               	movlw	1
  5288  01659E  ECFF  F095         	call	_irobot_query_and_update
  5289  0165A2  0012               	return		;funcret
  5290  0165A4                     __end_of_update_distance:
  5291                           	opt stack 0
  5292                           tblptru	equ	0xFF8
  5293                           tblptrh	equ	0xFF7
  5294                           tblptrl	equ	0xFF6
  5295                           tablat	equ	0xFF5
  5296                           postinc0	equ	0xFEE
  5297                           wreg	equ	0xFE8
  5298                           postdec1	equ	0xFE5
  5299                           fsr1h	equ	0xFE2
  5300                           fsr1l	equ	0xFE1
  5301                           status	equ	0xFD8
  5302                           
  5303 ;; *************** function _update_bump_and_cliff *****************
  5304 ;; Defined at:
  5305 ;;		line 318 in file "Library/iRobotSerial.c"
  5306 ;; Parameters:    Size  Location     Type
  5307 ;;		None
  5308 ;; Auto vars:     Size  Location     Type
  5309 ;;		None
  5310 ;; Return value:  Size  Location     Type
  5311 ;;                  1    wreg      void 
  5312 ;; Registers used:
  5313 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5314 ;; Tracked objects:
  5315 ;;		On entry : 0/0
  5316 ;;		On exit  : 0/0
  5317 ;;		Unchanged: 0/0
  5318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5322 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5323 ;;Total ram usage:        0 bytes
  5324 ;; Hardware stack levels used:    1
  5325 ;; Hardware stack levels required when called:   10
  5326 ;; This function calls:
  5327 ;;		_irobot_query_and_update
  5328 ;; This function is called by:
  5329 ;;		_safeToGo
  5330 ;;		_mode4
  5331 ;; This function uses a non-reentrant model
  5332 ;;
  5333                           
  5334                           	psect	text11
  5335  015FDC                     __ptext11:
  5336                           	opt stack 0
  5337  015FDC                     _update_bump_and_cliff:
  5338                           	opt stack 19
  5339                           
  5340                           ;iRobotSerial.c: 319: irobot_query_and_update(5, iR_PKT_BUMP_DROP,
  5341                           ;iRobotSerial.c: 320: iR_PKT_CLIFF_L, iR_PKT_CLIFF_FL,
  5342                           ;iRobotSerial.c: 321: iR_PKT_CLIFF_FR, iR_PKT_CLIFF_R);
  5343                           
  5344                           ;incstack = 0
  5345  015FDC  0E00               	movlw	0
  5346  015FDE  0100               	movlb	0	; () banked
  5347  015FE0  6FC1               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  5348  015FE2  0E07               	movlw	7
  5349  015FE4  6FC0               	movwf	?_irobot_query_and_update& (0+255),b
  5350  015FE6  0E00               	movlw	0
  5351  015FE8  0100               	movlb	0	; () banked
  5352  015FEA  6FC3               	movwf	(?_irobot_query_and_update+3)& (0+255),b
  5353  015FEC  0E09               	movlw	9
  5354  015FEE  6FC2               	movwf	(?_irobot_query_and_update+2)& (0+255),b
  5355  015FF0  0E00               	movlw	0
  5356  015FF2  0100               	movlb	0	; () banked
  5357  015FF4  6FC5               	movwf	(?_irobot_query_and_update+5)& (0+255),b
  5358  015FF6  0E0A               	movlw	10
  5359  015FF8  6FC4               	movwf	(?_irobot_query_and_update+4)& (0+255),b
  5360  015FFA  0E00               	movlw	0
  5361  015FFC  0100               	movlb	0	; () banked
  5362  015FFE  6FC7               	movwf	(?_irobot_query_and_update+7)& (0+255),b
  5363  016000  0E0B               	movlw	11
  5364  016002  6FC6               	movwf	(?_irobot_query_and_update+6)& (0+255),b
  5365  016004  0E00               	movlw	0
  5366  016006  0100               	movlb	0	; () banked
  5367  016008  6FC9               	movwf	(?_irobot_query_and_update+9)& (0+255),b
  5368  01600A  0E0C               	movlw	12
  5369  01600C  6FC8               	movwf	(?_irobot_query_and_update+8)& (0+255),b
  5370  01600E  0E05               	movlw	5
  5371  016010  ECFF  F095         	call	_irobot_query_and_update
  5372  016014  0012               	return		;funcret
  5373  016016                     __end_of_update_bump_and_cliff:
  5374                           	opt stack 0
  5375                           tblptru	equ	0xFF8
  5376                           tblptrh	equ	0xFF7
  5377                           tblptrl	equ	0xFF6
  5378                           tablat	equ	0xFF5
  5379                           postinc0	equ	0xFEE
  5380                           wreg	equ	0xFE8
  5381                           postdec1	equ	0xFE5
  5382                           fsr1h	equ	0xFE2
  5383                           fsr1l	equ	0xFE1
  5384                           status	equ	0xFD8
  5385                           
  5386 ;; *************** function _update_angle *****************
  5387 ;; Defined at:
  5388 ;;		line 330 in file "Library/iRobotSerial.c"
  5389 ;; Parameters:    Size  Location     Type
  5390 ;;		None
  5391 ;; Auto vars:     Size  Location     Type
  5392 ;;		None
  5393 ;; Return value:  Size  Location     Type
  5394 ;;                  1    wreg      void 
  5395 ;; Registers used:
  5396 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5397 ;; Tracked objects:
  5398 ;;		On entry : 0/0
  5399 ;;		On exit  : 0/0
  5400 ;;		Unchanged: 0/0
  5401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5405 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5406 ;;Total ram usage:        0 bytes
  5407 ;; Hardware stack levels used:    1
  5408 ;; Hardware stack levels required when called:   10
  5409 ;; This function calls:
  5410 ;;		_irobot_query_and_update
  5411 ;; This function is called by:
  5412 ;;		_irobot_rotate
  5413 ;;		_safeToGo
  5414 ;; This function uses a non-reentrant model
  5415 ;;
  5416                           
  5417                           	psect	text12
  5418  0165A4                     __ptext12:
  5419                           	opt stack 0
  5420  0165A4                     _update_angle:
  5421                           	opt stack 18
  5422                           
  5423                           ;iRobotSerial.c: 331: irobot_query_and_update(1, iR_PKT_ANGLE);
  5424                           
  5425                           ;incstack = 0
  5426  0165A4  0E00               	movlw	0
  5427  0165A6  0100               	movlb	0	; () banked
  5428  0165A8  6FC1               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  5429  0165AA  0E14               	movlw	20
  5430  0165AC  6FC0               	movwf	?_irobot_query_and_update& (0+255),b
  5431  0165AE  0E01               	movlw	1
  5432  0165B0  ECFF  F095         	call	_irobot_query_and_update
  5433  0165B4  0012               	return		;funcret
  5434  0165B6                     __end_of_update_angle:
  5435                           	opt stack 0
  5436                           tblptru	equ	0xFF8
  5437                           tblptrh	equ	0xFF7
  5438                           tblptrl	equ	0xFF6
  5439                           tablat	equ	0xFF5
  5440                           postinc0	equ	0xFEE
  5441                           wreg	equ	0xFE8
  5442                           postdec1	equ	0xFE5
  5443                           fsr1h	equ	0xFE2
  5444                           fsr1l	equ	0xFE1
  5445                           status	equ	0xFD8
  5446                           
  5447 ;; *************** function _irobot_query_and_update *****************
  5448 ;; Defined at:
  5449 ;;		line 130 in file "Library/iRobotSerial.c"
  5450 ;; Parameters:    Size  Location     Type
  5451 ;;  numberOfPack    1    wreg     unsigned char 
  5452 ;; Auto vars:     Size  Location     Type
  5453 ;;  numberOfPack    1   24[BANK0 ] unsigned char 
  5454 ;;  TXArray       256    0[BANK2 ] unsigned char [256]
  5455 ;;  RXArray       256    0[BANK1 ] unsigned char [256]
  5456 ;;  packetIDs       2   21[BANK0 ] PTR void [1]
  5457 ;;		 -> ?_irobot_query_and_update(1), 
  5458 ;;  i               1   28[BANK0 ] unsigned char 
  5459 ;;  startIndex      1   27[BANK0 ] unsigned char 
  5460 ;;  j               1   26[BANK0 ] unsigned char 
  5461 ;;  packetVariab    1   25[BANK0 ] unsigned char 
  5462 ;;  streamSize      1   23[BANK0 ] unsigned char 
  5463 ;; Return value:  Size  Location     Type
  5464 ;;                  1    wreg      void 
  5465 ;; Registers used:
  5466 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5467 ;; Tracked objects:
  5468 ;;		On entry : 0/0
  5469 ;;		On exit  : 0/0
  5470 ;;		Unchanged: 0/0
  5471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5472 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5473 ;;      Locals:         0       8     256     256       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5474 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5475 ;;      Totals:         0      23     256     256       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5476 ;;Total ram usage:      535 bytes
  5477 ;; Hardware stack levels used:    1
  5478 ;; Hardware stack levels required when called:    9
  5479 ;; This function calls:
  5480 ;;		_eusart_getch
  5481 ;;		_eusart_putch
  5482 ;;		_get_packet_size
  5483 ;;		_rx_assign
  5484 ;; This function is called by:
  5485 ;;		_update_bump_and_cliff
  5486 ;;		_update_distance
  5487 ;;		_update_angle
  5488 ;; This function uses a non-reentrant model
  5489 ;;
  5490                           
  5491                           	psect	text13
  5492  012BFE                     __ptext13:
  5493                           	opt stack 0
  5494  012BFE                     _irobot_query_and_update:
  5495                           	opt stack 19
  5496                           
  5497                           ;incstack = 0
  5498                           ;irobot_query_and_update@numberOfPacketRequests stored from wreg
  5499  012BFE  0100               	movlb	0	; () banked
  5500  012C00  6FD2               	movwf	irobot_query_and_update@numberOfPacketRequests& (0+255),b
  5501                           
  5502                           ;iRobotSerial.c: 131: UINT8 i, j, packetVariable, streamSize = 0, startIndex = 0, RXArra
      +                          y[256], TXArray[256];
  5503  012C02  0E00               	movlw	0
  5504  012C04  0100               	movlb	0	; () banked
  5505  012C06  6FD1               	movwf	irobot_query_and_update@streamSize& (0+255),b
  5506  012C08  0E00               	movlw	0
  5507  012C0A  0100               	movlb	0	; () banked
  5508  012C0C  6FD5               	movwf	irobot_query_and_update@startIndex& (0+255),b
  5509                           
  5510                           ;iRobotSerial.c: 132: va_list packetIDs;
  5511                           ;iRobotSerial.c: 133: *packetIDs = __va_start();
  5512  012C0E  0EC0               	movlw	low ?_irobot_query_and_update
  5513  012C10  0100               	movlb	0	; () banked
  5514  012C12  6FCF               	movwf	irobot_query_and_update@packetIDs& (0+255),b
  5515  012C14  0E00               	movlw	high ?_irobot_query_and_update
  5516  012C16  0100               	movlb	0	; () banked
  5517  012C18  6FD0               	movwf	(irobot_query_and_update@packetIDs+1)& (0+255),b
  5518                           
  5519                           ; BSR set to: 0
  5520                           ;iRobotSerial.c: 134: eusart_putch(iR_QUERY_LIST);
  5521  012C1A  0E95               	movlw	149
  5522  012C1C  ECF2  F0B2         	call	_eusart_putch
  5523                           
  5524                           ;iRobotSerial.c: 135: eusart_putch(numberOfPacketRequests);
  5525  012C20  0100               	movlb	0	; () banked
  5526  012C22  51D2               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  5527  012C24  ECF2  F0B2         	call	_eusart_putch
  5528                           
  5529                           ;iRobotSerial.c: 136: for (i = 0; i < numberOfPacketRequests; i++) {
  5530  012C28  0E00               	movlw	0
  5531  012C2A  0100               	movlb	0	; () banked
  5532  012C2C  6FD6               	movwf	irobot_query_and_update@i& (0+255),b
  5533  012C2E  D023               	goto	l2095
  5534  012C30                     
  5535                           ; BSR set to: 0
  5536                           ;iRobotSerial.c: 137: packetVariable = (*(int *)__va_arg((*(int **)packetIDs), (int)0));
  5537                           
  5538                           ; BSR set to: 0
  5539  012C30  C0CF  FFD9         	movff	irobot_query_and_update@packetIDs,fsr2l
  5540  012C34  C0D0  FFDA         	movff	irobot_query_and_update@packetIDs+1,fsr2h
  5541  012C38  50DF               	movf	indf2,w,c
  5542  012C3A  0100               	movlb	0	; () banked
  5543  012C3C  6FD3               	movwf	irobot_query_and_update@packetVariable& (0+255),b
  5544                           
  5545                           ; BSR set to: 0
  5546  012C3E  0E02               	movlw	2
  5547  012C40  0100               	movlb	0	; () banked
  5548  012C42  27CF               	addwf	irobot_query_and_update@packetIDs& (0+255),f,b
  5549  012C44  0E00               	movlw	0
  5550  012C46  23D0               	addwfc	(irobot_query_and_update@packetIDs+1)& (0+255),f,b
  5551                           
  5552                           ; BSR set to: 0
  5553                           ;iRobotSerial.c: 138: streamSize += get_packet_size(packetVariable);
  5554  012C48  0100               	movlb	0	; () banked
  5555  012C4A  51D3               	movf	irobot_query_and_update@packetVariable& (0+255),w,b
  5556  012C4C  EC66  F0AB         	call	_get_packet_size
  5557  012C50  0100               	movlb	0	; () banked
  5558  012C52  27D1               	addwf	irobot_query_and_update@streamSize& (0+255),f,b
  5559                           
  5560                           ; BSR set to: 0
  5561                           ;iRobotSerial.c: 139: TXArray[i] = packetVariable;
  5562  012C54  0100               	movlb	0	; () banked
  5563  012C56  51D6               	movf	irobot_query_and_update@i& (0+255),w,b
  5564  012C58  0D01               	mullw	1
  5565  012C5A  0E00               	movlw	low irobot_query_and_update@TXArray
  5566  012C5C  24F3               	addwf	prodl,w,c
  5567  012C5E  6ED9               	movwf	fsr2l,c
  5568  012C60  0E02               	movlw	high irobot_query_and_update@TXArray
  5569  012C62  20F4               	addwfc	prodh,w,c
  5570  012C64  6EDA               	movwf	fsr2h,c
  5571  012C66  C0D3  FFDF         	movff	irobot_query_and_update@packetVariable,indf2
  5572                           
  5573                           ; BSR set to: 0
  5574                           ;iRobotSerial.c: 140: eusart_putch(packetVariable);
  5575  012C6A  0100               	movlb	0	; () banked
  5576  012C6C  51D3               	movf	irobot_query_and_update@packetVariable& (0+255),w,b
  5577  012C6E  ECF2  F0B2         	call	_eusart_putch
  5578  012C72  0100               	movlb	0	; () banked
  5579  012C74  2BD6               	incf	irobot_query_and_update@i& (0+255),f,b
  5580  012C76                     l2095:
  5581                           
  5582                           ; BSR set to: 0
  5583                           
  5584                           ; BSR set to: 0
  5585  012C76  0100               	movlb	0	; () banked
  5586  012C78  51D2               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  5587  012C7A  0100               	movlb	0	; () banked
  5588  012C7C  5DD6               	subwf	irobot_query_and_update@i& (0+255),w,b
  5589  012C7E  A0D8               	btfss	status,0,c
  5590  012C80  D7D7               	goto	l2096
  5591                           
  5592                           ; BSR set to: 0
  5593                           ;iRobotSerial.c: 141: }
  5594                           ;iRobotSerial.c: 142: ;
  5595                           ;iRobotSerial.c: 144: for (i = 0; i < streamSize; i++) {RXArray[i] = eusart_getch();}
  5596                           
  5597                           ; BSR set to: 0
  5598  012C82  0E00               	movlw	0
  5599  012C84  0100               	movlb	0	; () banked
  5600  012C86  6FD6               	movwf	irobot_query_and_update@i& (0+255),b
  5601  012C88  D00E               	goto	l2098
  5602  012C8A                     
  5603                           ; BSR set to: 0
  5604                           
  5605                           ; BSR set to: 0
  5606  012C8A  0100               	movlb	0	; () banked
  5607  012C8C  51D6               	movf	irobot_query_and_update@i& (0+255),w,b
  5608  012C8E  0D01               	mullw	1
  5609  012C90  0E00               	movlw	low irobot_query_and_update@RXArray
  5610  012C92  24F3               	addwf	prodl,w,c
  5611  012C94  6ED9               	movwf	fsr2l,c
  5612  012C96  0E01               	movlw	high irobot_query_and_update@RXArray
  5613  012C98  20F4               	addwfc	prodh,w,c
  5614  012C9A  6EDA               	movwf	fsr2h,c
  5615  012C9C  EC35  F0B3         	call	_eusart_getch	;wreg free
  5616  012CA0  6EDF               	movwf	indf2,c
  5617  012CA2  0100               	movlb	0	; () banked
  5618  012CA4  2BD6               	incf	irobot_query_and_update@i& (0+255),f,b
  5619  012CA6                     l2098:
  5620                           
  5621                           ; BSR set to: 0
  5622                           
  5623                           ; BSR set to: 0
  5624  012CA6  0100               	movlb	0	; () banked
  5625  012CA8  51D1               	movf	irobot_query_and_update@streamSize& (0+255),w,b
  5626  012CAA  0100               	movlb	0	; () banked
  5627  012CAC  5DD6               	subwf	irobot_query_and_update@i& (0+255),w,b
  5628  012CAE  A0D8               	btfss	status,0,c
  5629  012CB0  D7EC               	goto	l2099
  5630                           
  5631                           ; BSR set to: 0
  5632                           ;iRobotSerial.c: 146: for (i = 0; i < numberOfPacketRequests; i++) {
  5633                           
  5634                           ; BSR set to: 0
  5635  012CB2  0E00               	movlw	0
  5636  012CB4  0100               	movlb	0	; () banked
  5637  012CB6  6FD6               	movwf	irobot_query_and_update@i& (0+255),b
  5638  012CB8  D05E               	goto	l2101
  5639  012CBA                     l2102:
  5640                           
  5641                           ; BSR set to: 0
  5642                           ;iRobotSerial.c: 147: for (j = startIndex; j < get_packet_size(TXArray[i]) + startIndex;
      +                           j++) {
  5643  012CBA  C0D5  F0D4         	movff	irobot_query_and_update@startIndex,irobot_query_and_update@j
  5644  012CBE  D021               	goto	l2103
  5645  012CC0                     
  5646                           ; BSR set to: 0
  5647                           ;iRobotSerial.c: 148: rx_assign(TXArray[i], RXArray[j], j - startIndex);
  5648                           
  5649                           ; BSR set to: 0
  5650  012CC0  0100               	movlb	0	; () banked
  5651  012CC2  51D4               	movf	irobot_query_and_update@j& (0+255),w,b
  5652  012CC4  0D01               	mullw	1
  5653  012CC6  0E00               	movlw	low irobot_query_and_update@RXArray
  5654  012CC8  24F3               	addwf	prodl,w,c
  5655  012CCA  6ED9               	movwf	fsr2l,c
  5656  012CCC  0E01               	movlw	high irobot_query_and_update@RXArray
  5657  012CCE  20F4               	addwfc	prodh,w,c
  5658  012CD0  6EDA               	movwf	fsr2h,c
  5659  012CD2  50DF               	movf	indf2,w,c
  5660  012CD4  0100               	movlb	0	; () banked
  5661  012CD6  6FBB               	movwf	rx_assign@packetIDValue& (0+255),b
  5662  012CD8  0100               	movlb	0	; () banked
  5663  012CDA  51D5               	movf	irobot_query_and_update@startIndex& (0+255),w,b
  5664  012CDC  0800               	sublw	0
  5665  012CDE  0100               	movlb	0	; () banked
  5666  012CE0  25D4               	addwf	irobot_query_and_update@j& (0+255),w,b
  5667  012CE2  0100               	movlb	0	; () banked
  5668  012CE4  6FBC               	movwf	rx_assign@byteNumber& (0+255),b
  5669  012CE6  0100               	movlb	0	; () banked
  5670  012CE8  51D6               	movf	irobot_query_and_update@i& (0+255),w,b
  5671  012CEA  0D01               	mullw	1
  5672  012CEC  0E00               	movlw	low irobot_query_and_update@TXArray
  5673  012CEE  24F3               	addwf	prodl,w,c
  5674  012CF0  6ED9               	movwf	fsr2l,c
  5675  012CF2  0E02               	movlw	high irobot_query_and_update@TXArray
  5676  012CF4  20F4               	addwfc	prodh,w,c
  5677  012CF6  6EDA               	movwf	fsr2h,c
  5678  012CF8  50DF               	movf	indf2,w,c
  5679  012CFA  ECE7  F09B         	call	_rx_assign
  5680  012CFE  0100               	movlb	0	; () banked
  5681  012D00  2BD4               	incf	irobot_query_and_update@j& (0+255),f,b
  5682  012D02                     l2103:
  5683                           
  5684                           ; BSR set to: 0
  5685                           
  5686                           ; BSR set to: 0
  5687  012D02  0100               	movlb	0	; () banked
  5688  012D04  51D6               	movf	irobot_query_and_update@i& (0+255),w,b
  5689  012D06  0D01               	mullw	1
  5690  012D08  0E00               	movlw	low irobot_query_and_update@TXArray
  5691  012D0A  24F3               	addwf	prodl,w,c
  5692  012D0C  6ED9               	movwf	fsr2l,c
  5693  012D0E  0E02               	movlw	high irobot_query_and_update@TXArray
  5694  012D10  20F4               	addwfc	prodh,w,c
  5695  012D12  6EDA               	movwf	fsr2h,c
  5696  012D14  50DF               	movf	indf2,w,c
  5697  012D16  EC66  F0AB         	call	_get_packet_size
  5698  012D1A  0100               	movlb	0	; () banked
  5699  012D1C  6FCA               	movwf	??_irobot_query_and_update& (0+255),b
  5700  012D1E  6BCB               	clrf	(??_irobot_query_and_update+1)& (0+255),b
  5701  012D20  0100               	movlb	0	; () banked
  5702  012D22  51D5               	movf	irobot_query_and_update@startIndex& (0+255),w,b
  5703  012D24  0100               	movlb	0	; () banked
  5704  012D26  27CA               	addwf	??_irobot_query_and_update& (0+255),f,b
  5705  012D28  0E00               	movlw	0
  5706  012D2A  23CB               	addwfc	(??_irobot_query_and_update+1)& (0+255),f,b
  5707  012D2C  0100               	movlb	0	; () banked
  5708  012D2E  51D4               	movf	irobot_query_and_update@j& (0+255),w,b
  5709  012D30  0100               	movlb	0	; () banked
  5710  012D32  6FCC               	movwf	(??_irobot_query_and_update+2)& (0+255),b
  5711  012D34  6BCD               	clrf	(??_irobot_query_and_update+3)& (0+255),b
  5712  012D36  0100               	movlb	0	; () banked
  5713  012D38  51CA               	movf	??_irobot_query_and_update& (0+255),w,b
  5714  012D3A  0100               	movlb	0	; () banked
  5715  012D3C  5DCC               	subwf	(??_irobot_query_and_update+2)& (0+255),w,b
  5716  012D3E  0100               	movlb	0	; () banked
  5717  012D40  51CD               	movf	(??_irobot_query_and_update+3)& (0+255),w,b
  5718  012D42  0A80               	xorlw	128
  5719  012D44  0100               	movlb	0	; () banked
  5720  012D46  6FCE               	movwf	(??_irobot_query_and_update+4)& (0+255),b
  5721  012D48  0100               	movlb	0	; () banked
  5722  012D4A  51CB               	movf	(??_irobot_query_and_update+1)& (0+255),w,b
  5723  012D4C  0A80               	xorlw	128
  5724  012D4E  0100               	movlb	0	; () banked
  5725  012D50  59CE               	subwfb	(??_irobot_query_and_update+4)& (0+255),w,b
  5726  012D52  A0D8               	btfss	status,0,c
  5727  012D54  D7B5               	goto	l2104
  5728                           
  5729                           ; BSR set to: 0
  5730                           ;iRobotSerial.c: 149: }
  5731                           ;iRobotSerial.c: 150: startIndex += get_packet_size(TXArray[i]);
  5732                           
  5733                           ; BSR set to: 0
  5734  012D56  0100               	movlb	0	; () banked
  5735  012D58  51D6               	movf	irobot_query_and_update@i& (0+255),w,b
  5736  012D5A  0D01               	mullw	1
  5737  012D5C  0E00               	movlw	low irobot_query_and_update@TXArray
  5738  012D5E  24F3               	addwf	prodl,w,c
  5739  012D60  6ED9               	movwf	fsr2l,c
  5740  012D62  0E02               	movlw	high irobot_query_and_update@TXArray
  5741  012D64  20F4               	addwfc	prodh,w,c
  5742  012D66  6EDA               	movwf	fsr2h,c
  5743  012D68  50DF               	movf	indf2,w,c
  5744  012D6A  EC66  F0AB         	call	_get_packet_size
  5745  012D6E  0100               	movlb	0	; () banked
  5746  012D70  27D5               	addwf	irobot_query_and_update@startIndex& (0+255),f,b
  5747                           
  5748                           ; BSR set to: 0
  5749  012D72  0100               	movlb	0	; () banked
  5750  012D74  2BD6               	incf	irobot_query_and_update@i& (0+255),f,b
  5751  012D76                     l2101:
  5752                           
  5753                           ; BSR set to: 0
  5754                           
  5755                           ; BSR set to: 0
  5756  012D76  0100               	movlb	0	; () banked
  5757  012D78  51D2               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  5758  012D7A  0100               	movlb	0	; () banked
  5759  012D7C  5DD6               	subwf	irobot_query_and_update@i& (0+255),w,b
  5760  012D7E  B0D8               	btfsc	status,0,c
  5761  012D80  0012               	return	
  5762  012D82  D79B               	goto	l2102
  5763  012D84                     __end_of_irobot_query_and_update:
  5764                           	opt stack 0
  5765                           tblptru	equ	0xFF8
  5766                           tblptrh	equ	0xFF7
  5767                           tblptrl	equ	0xFF6
  5768                           tablat	equ	0xFF5
  5769                           prodh	equ	0xFF4
  5770                           prodl	equ	0xFF3
  5771                           postinc0	equ	0xFEE
  5772                           wreg	equ	0xFE8
  5773                           postdec1	equ	0xFE5
  5774                           fsr1h	equ	0xFE2
  5775                           fsr1l	equ	0xFE1
  5776                           indf2	equ	0xFDF
  5777                           fsr2h	equ	0xFDA
  5778                           fsr2l	equ	0xFD9
  5779                           status	equ	0xFD8
  5780                           
  5781 ;; *************** function _rx_assign *****************
  5782 ;; Defined at:
  5783 ;;		line 74 in file "Library/iRobotSerial.c"
  5784 ;; Parameters:    Size  Location     Type
  5785 ;;  packetID        1    wreg     unsigned char 
  5786 ;;  packetIDValu    1    1[BANK0 ] unsigned char 
  5787 ;;  byteNumber      1    2[BANK0 ] unsigned char 
  5788 ;; Auto vars:     Size  Location     Type
  5789 ;;  packetID        1    5[BANK0 ] unsigned char 
  5790 ;; Return value:  Size  Location     Type
  5791 ;;                  1    wreg      void 
  5792 ;; Registers used:
  5793 ;;		wreg, status,2, status,0, cstack
  5794 ;; Tracked objects:
  5795 ;;		On entry : 0/0
  5796 ;;		On exit  : 0/0
  5797 ;;		Unchanged: 0/0
  5798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5799 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5800 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5801 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5802 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5803 ;;Total ram usage:        5 bytes
  5804 ;; Hardware stack levels used:    1
  5805 ;; Hardware stack levels required when called:    8
  5806 ;; This function calls:
  5807 ;;		_sort_iRBumpDrop
  5808 ;; This function is called by:
  5809 ;;		_irobot_query_and_update
  5810 ;; This function uses a non-reentrant model
  5811 ;;
  5812                           
  5813                           	psect	text14
  5814  0137CE                     __ptext14:
  5815                           	opt stack 0
  5816  0137CE                     _rx_assign:
  5817                           	opt stack 19
  5818                           
  5819                           ; BSR set to: 0
  5820                           ;incstack = 0
  5821                           ;rx_assign@packetID stored from wreg
  5822  0137CE  0100               	movlb	0	; () banked
  5823  0137D0  6FBF               	movwf	rx_assign@packetID& (0+255),b
  5824                           
  5825                           ;iRobotSerial.c: 75: switch (packetID) {
  5826  0137D2  D057               	goto	l2035
  5827  0137D4                     l2036:
  5828                           
  5829                           ; BSR set to: 0
  5830  0137D4  C0BB  F036         	movff	rx_assign@packetIDValue,_iRBumpDrop
  5831                           
  5832                           ; BSR set to: 0
  5833  0137D8  ECB5  F0A6         	call	_sort_iRBumpDrop	;wreg free
  5834  0137DC  0012               	return	
  5835  0137DE                     l2038:
  5836                           
  5837                           ; BSR set to: 0
  5838  0137DE  C0BB  F035         	movff	rx_assign@packetIDValue,_iRWall
  5839  0137E2  0012               	return	
  5840  0137E4                     l2039:
  5841                           
  5842                           ; BSR set to: 0
  5843  0137E4  C0BB  F034         	movff	rx_assign@packetIDValue,_iRCliffL
  5844  0137E8  0012               	return	
  5845  0137EA                     l2040:
  5846                           
  5847                           ; BSR set to: 0
  5848  0137EA  C0BB  F033         	movff	rx_assign@packetIDValue,_iRCliffFL
  5849  0137EE  0012               	return	
  5850  0137F0                     l2041:
  5851                           
  5852                           ; BSR set to: 0
  5853  0137F0  C0BB  F032         	movff	rx_assign@packetIDValue,_iRCliffFR
  5854  0137F4  0012               	return	
  5855  0137F6                     l2042:
  5856                           
  5857                           ; BSR set to: 0
  5858  0137F6  C0BB  F031         	movff	rx_assign@packetIDValue,_iRCliffR
  5859  0137FA  0012               	return	
  5860  0137FC                     l2043:
  5861                           
  5862                           ; BSR set to: 0
  5863  0137FC  C0BB  F030         	movff	rx_assign@packetIDValue,_iRVirtualWall
  5864  013800  0012               	return	
  5865  013802                     
  5866                           ; BSR set to: 0
  5867                           ;iRobotSerial.c: 84: (byteNumber == 0) ? (iRDistanceSS.HB = packetIDValue) : (iRDistance
      +                          SS.LB = packetIDValue,
  5868                           ;iRobotSerial.c: 85: iRDistance = ((iRDistanceSS.HB)<<8) + iRDistanceSS.LB); break;
  5869                           
  5870                           ; BSR set to: 0
  5871  013802  0100               	movlb	0	; () banked
  5872  013804  51BC               	movf	rx_assign@byteNumber& (0+255),w,b
  5873  013806  0100               	movlb	0	; () banked
  5874  013808  A4D8               	btfss	status,2,c
  5875  01380A  D005               	goto	l2046
  5876                           
  5877                           ; BSR set to: 0
  5878  01380C  C0BB  F322         	movff	rx_assign@packetIDValue,_iRDistanceSS
  5879  013810  0103               	movlb	3	; () banked
  5880  013812  6B23               	clrf	(_iRDistanceSS+1)& (0+255),b
  5881  013814  0012               	return	
  5882  013816                     l2046:
  5883                           
  5884                           ; BSR set to: 0
  5885  013816  C0BB  F324         	movff	rx_assign@packetIDValue,_iRDistanceSS+2
  5886  01381A  0103               	movlb	3	; () banked
  5887  01381C  6B25               	clrf	(_iRDistanceSS+3)& (0+255),b
  5888                           
  5889                           ; BSR set to: 3
  5890  01381E  0103               	movlb	3	; () banked
  5891  013820  5122               	movf	_iRDistanceSS& (0+255),w,b
  5892  013822  0100               	movlb	0	; () banked
  5893  013824  6FBE               	movwf	(??_rx_assign+1)& (0+255),b
  5894  013826  6BBD               	clrf	??_rx_assign& (0+255),b
  5895  013828  0103               	movlb	3	; () banked
  5896  01382A  5124               	movf	(_iRDistanceSS+2)& (0+255),w,b
  5897  01382C  0100               	movlb	0	; () banked
  5898  01382E  25BD               	addwf	??_rx_assign& (0+255),w,b
  5899  013830  0100               	movlb	0	; () banked
  5900  013832  6F7B               	movwf	_iRDistance& (0+255),b
  5901  013834  0103               	movlb	3	; () banked
  5902  013836  5125               	movf	(_iRDistanceSS+3)& (0+255),w,b
  5903  013838  0100               	movlb	0	; () banked
  5904  01383A  21BE               	addwfc	(??_rx_assign+1)& (0+255),w,b
  5905  01383C  0100               	movlb	0	; () banked
  5906  01383E  6F7C               	movwf	(_iRDistance+1)& (0+255),b
  5907                           
  5908                           ; BSR set to: 0
  5909  013840  0012               	return	
  5910  013842                     
  5911                           ; BSR set to: 0
  5912                           ;iRobotSerial.c: 87: (byteNumber == 0) ? (iRAngleSS.HB = packetIDValue) : (iRAngleSS.LB 
      +                          = packetIDValue,
  5913                           ;iRobotSerial.c: 88: iRAngle = ((iRAngleSS.HB)<<8) + iRAngleSS.LB); break;
  5914                           
  5915                           ; BSR set to: 0
  5916  013842  0100               	movlb	0	; () banked
  5917  013844  51BC               	movf	rx_assign@byteNumber& (0+255),w,b
  5918  013846  0100               	movlb	0	; () banked
  5919  013848  A4D8               	btfss	status,2,c
  5920  01384A  D005               	goto	l2051
  5921                           
  5922                           ; BSR set to: 0
  5923  01384C  C0BB  F31E         	movff	rx_assign@packetIDValue,_iRAngleSS
  5924  013850  0103               	movlb	3	; () banked
  5925  013852  6B1F               	clrf	(_iRAngleSS+1)& (0+255),b
  5926  013854  0012               	return	
  5927  013856                     l2051:
  5928                           
  5929                           ; BSR set to: 0
  5930  013856  C0BB  F320         	movff	rx_assign@packetIDValue,_iRAngleSS+2
  5931  01385A  0103               	movlb	3	; () banked
  5932  01385C  6B21               	clrf	(_iRAngleSS+3)& (0+255),b
  5933                           
  5934                           ; BSR set to: 3
  5935  01385E  0103               	movlb	3	; () banked
  5936  013860  511E               	movf	_iRAngleSS& (0+255),w,b
  5937  013862  0100               	movlb	0	; () banked
  5938  013864  6FBE               	movwf	(??_rx_assign+1)& (0+255),b
  5939  013866  6BBD               	clrf	??_rx_assign& (0+255),b
  5940  013868  0103               	movlb	3	; () banked
  5941  01386A  5120               	movf	(_iRAngleSS+2)& (0+255),w,b
  5942  01386C  0100               	movlb	0	; () banked
  5943  01386E  25BD               	addwf	??_rx_assign& (0+255),w,b
  5944  013870  0100               	movlb	0	; () banked
  5945  013872  6F79               	movwf	_iRAngle& (0+255),b
  5946  013874  0103               	movlb	3	; () banked
  5947  013876  5121               	movf	(_iRAngleSS+3)& (0+255),w,b
  5948  013878  0100               	movlb	0	; () banked
  5949  01387A  21BE               	addwfc	(??_rx_assign+1)& (0+255),w,b
  5950  01387C  0100               	movlb	0	; () banked
  5951  01387E  6F7A               	movwf	(_iRAngle+1)& (0+255),b
  5952                           
  5953                           ; BSR set to: 0
  5954                           ;iRobotSerial.c: 89: }
  5955                           
  5956                           ; BSR set to: 0
  5957  013880  0012               	return	
  5958  013882                     l2035:
  5959                           
  5960                           ; BSR set to: 0
  5961  013882  0100               	movlb	0	; () banked
  5962  013884  51BF               	movf	rx_assign@packetID& (0+255),w,b
  5963                           
  5964                           ; Switch size 1, requested type "space"
  5965                           ; Number of cases is 9, Range of values is 7 to 20
  5966                           ; switch strategies available:
  5967                           ; Name         Instructions Cycles
  5968                           ; simple_byte           28    15 (average)
  5969                           ;	Chosen strategy is simple_byte
  5970  013886  0A07               	xorlw	7	; case 7
  5971  013888  B4D8               	btfsc	status,2,c
  5972  01388A  D7A4               	goto	l2036
  5973  01388C  0A0F               	xorlw	15	; case 8
  5974  01388E  B4D8               	btfsc	status,2,c
  5975  013890  D7A6               	goto	l2038
  5976  013892  0A01               	xorlw	1	; case 9
  5977  013894  B4D8               	btfsc	status,2,c
  5978  013896  D7A6               	goto	l2039
  5979  013898  0A03               	xorlw	3	; case 10
  5980  01389A  B4D8               	btfsc	status,2,c
  5981  01389C  D7A6               	goto	l2040
  5982  01389E  0A01               	xorlw	1	; case 11
  5983  0138A0  B4D8               	btfsc	status,2,c
  5984  0138A2  D7A6               	goto	l2041
  5985  0138A4  0A07               	xorlw	7	; case 12
  5986  0138A6  B4D8               	btfsc	status,2,c
  5987  0138A8  D7A6               	goto	l2042
  5988  0138AA  0A01               	xorlw	1	; case 13
  5989  0138AC  B4D8               	btfsc	status,2,c
  5990  0138AE  D7A6               	goto	l2043
  5991  0138B0  0A1E               	xorlw	30	; case 19
  5992  0138B2  B4D8               	btfsc	status,2,c
  5993  0138B4  D7A6               	goto	l2044
  5994  0138B6  0A07               	xorlw	7	; case 20
  5995  0138B8  A4D8               	btfss	status,2,c
  5996  0138BA  0012               	return	
  5997  0138BC  D7C2               	goto	l2049
  5998  0138BE                     __end_of_rx_assign:
  5999                           	opt stack 0
  6000                           tblptru	equ	0xFF8
  6001                           tblptrh	equ	0xFF7
  6002                           tblptrl	equ	0xFF6
  6003                           tablat	equ	0xFF5
  6004                           prodh	equ	0xFF4
  6005                           prodl	equ	0xFF3
  6006                           postinc0	equ	0xFEE
  6007                           wreg	equ	0xFE8
  6008                           postdec1	equ	0xFE5
  6009                           fsr1h	equ	0xFE2
  6010                           fsr1l	equ	0xFE1
  6011                           indf2	equ	0xFDF
  6012                           fsr2h	equ	0xFDA
  6013                           fsr2l	equ	0xFD9
  6014                           status	equ	0xFD8
  6015                           
  6016 ;; *************** function _sort_iRBumpDrop *****************
  6017 ;; Defined at:
  6018 ;;		line 92 in file "Library/iRobotSerial.c"
  6019 ;; Parameters:    Size  Location     Type
  6020 ;;		None
  6021 ;; Auto vars:     Size  Location     Type
  6022 ;;		None
  6023 ;; Return value:  Size  Location     Type
  6024 ;;                  1    wreg      void 
  6025 ;; Registers used:
  6026 ;;		wreg, status,2, status,0
  6027 ;; Tracked objects:
  6028 ;;		On entry : 0/0
  6029 ;;		On exit  : 0/0
  6030 ;;		Unchanged: 0/0
  6031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6034 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6035 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6036 ;;Total ram usage:        1 bytes
  6037 ;; Hardware stack levels used:    1
  6038 ;; Hardware stack levels required when called:    7
  6039 ;; This function calls:
  6040 ;;		Nothing
  6041 ;; This function is called by:
  6042 ;;		_rx_assign
  6043 ;; This function uses a non-reentrant model
  6044 ;;
  6045                           
  6046                           	psect	text15
  6047  014D6A                     __ptext15:
  6048                           	opt stack 0
  6049  014D6A                     _sort_iRBumpDrop:
  6050                           	opt stack 19
  6051                           
  6052                           ;iRobotSerial.c: 93: (iRBumpDrop & 0x1) ? (iRBumpRight = 1) : (iRBumpRight = 0);
  6053                           
  6054                           ;incstack = 0
  6055  014D6A  A036               	btfss	_iRBumpDrop,0,c
  6056  014D6C  D002               	goto	l2058
  6057  014D6E  0E01               	movlw	1
  6058  014D70  D001               	goto	L1
  6059  014D72                     l2058:
  6060                           
  6061                           ; BSR set to: 0
  6062  014D72  0E00               	movlw	0
  6063  014D74                     L1:
  6064  014D74  0100               	movlb	0	; () banked
  6065  014D76  6F8A               	movwf	_iRBumpRight& (0+255),b
  6066                           
  6067                           ; BSR set to: 0
  6068                           ;iRobotSerial.c: 94: ((iRBumpDrop >> 0x1) & (0x1)) ? (iRBumpLeft = 1) : (iRBumpLeft = 0)
      +                          ;
  6069                           
  6070                           ; BSR set to: 0
  6071  014D78  C036  F0BA         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  6072  014D7C  0100               	movlb	0	; () banked
  6073  014D7E  90D8               	bcf	status,0,c
  6074  014D80  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  6075  014D82  0100               	movlb	0	; () banked
  6076  014D84  A1BA               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  6077  014D86  D002               	goto	l2062
  6078                           
  6079                           ; BSR set to: 0
  6080  014D88  0E01               	movlw	1
  6081  014D8A  D001               	goto	L2
  6082  014D8C                     l2062:
  6083                           
  6084                           ; BSR set to: 0
  6085                           
  6086                           ; BSR set to: 0
  6087  014D8C  0E00               	movlw	0
  6088  014D8E                     L2:
  6089  014D8E  0100               	movlb	0	; () banked
  6090  014D90  6F89               	movwf	_iRBumpLeft& (0+255),b
  6091                           
  6092                           ; BSR set to: 0
  6093                           ;iRobotSerial.c: 95: ((iRBumpDrop >> 0x2) & (0x1)) ? (iRDropRight = 1) : (iRDropRight = 
      +                          0);
  6094                           
  6095                           ; BSR set to: 0
  6096  014D92  C036  F0BA         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  6097  014D96  0100               	movlb	0	; () banked
  6098  014D98  90D8               	bcf	status,0,c
  6099  014D9A  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  6100  014D9C  0100               	movlb	0	; () banked
  6101  014D9E  90D8               	bcf	status,0,c
  6102  014DA0  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  6103  014DA2  0100               	movlb	0	; () banked
  6104  014DA4  A1BA               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  6105  014DA6  D002               	goto	l2066
  6106                           
  6107                           ; BSR set to: 0
  6108  014DA8  0E01               	movlw	1
  6109  014DAA  D001               	goto	L3
  6110  014DAC                     l2066:
  6111                           
  6112                           ; BSR set to: 0
  6113                           
  6114                           ; BSR set to: 0
  6115  014DAC  0E00               	movlw	0
  6116  014DAE                     L3:
  6117  014DAE  0100               	movlb	0	; () banked
  6118  014DB0  6F88               	movwf	_iRDropRight& (0+255),b
  6119                           
  6120                           ; BSR set to: 0
  6121                           ;iRobotSerial.c: 96: ((iRBumpDrop >> 0x3) & (0x1)) ? (iRDropLeft = 1) : (iRDropLeft = 0)
      +                          ;
  6122                           
  6123                           ; BSR set to: 0
  6124  014DB2  C036  F0BA         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  6125  014DB6  0100               	movlb	0	; () banked
  6126  014DB8  90D8               	bcf	status,0,c
  6127  014DBA  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  6128  014DBC  0100               	movlb	0	; () banked
  6129  014DBE  90D8               	bcf	status,0,c
  6130  014DC0  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  6131  014DC2  0100               	movlb	0	; () banked
  6132  014DC4  90D8               	bcf	status,0,c
  6133  014DC6  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  6134  014DC8  0100               	movlb	0	; () banked
  6135  014DCA  A1BA               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  6136  014DCC  D002               	goto	l2070
  6137                           
  6138                           ; BSR set to: 0
  6139  014DCE  0E01               	movlw	1
  6140  014DD0  D001               	goto	L4
  6141  014DD2                     l2070:
  6142                           
  6143                           ; BSR set to: 0
  6144                           
  6145                           ; BSR set to: 0
  6146  014DD2  0E00               	movlw	0
  6147  014DD4                     L4:
  6148  014DD4  0100               	movlb	0	; () banked
  6149  014DD6  6F87               	movwf	_iRDropLeft& (0+255),b
  6150                           
  6151                           ; BSR set to: 0
  6152                           ;iRobotSerial.c: 97: ((iRBumpDrop >> 0x4) & (0x1)) ? (iRDropCaster = 1) : (iRDropCaster 
      +                          = 0);
  6153                           
  6154                           ; BSR set to: 0
  6155  014DD8  C036  F0BA         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  6156  014DDC  0100               	movlb	0	; () banked
  6157  014DDE  3BBA               	swapf	??_sort_iRBumpDrop& (0+255),f,b
  6158  014DE0  0E0F               	movlw	15
  6159  014DE2  17BA               	andwf	??_sort_iRBumpDrop& (0+255),f,b
  6160  014DE4  0100               	movlb	0	; () banked
  6161  014DE6  A1BA               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  6162  014DE8  D003               	goto	l2074
  6163                           
  6164                           ; BSR set to: 0
  6165  014DEA  0E01               	movlw	1
  6166  014DEC  6E2F               	movwf	_iRDropCaster,c
  6167  014DEE  0012               	return	
  6168  014DF0                     l2074:
  6169                           
  6170                           ; BSR set to: 0
  6171                           
  6172                           ; BSR set to: 0
  6173  014DF0  0E00               	movlw	0
  6174  014DF2  6E2F               	movwf	_iRDropCaster,c
  6175  014DF4  0012               	return	
  6176  014DF6                     __end_of_sort_iRBumpDrop:
  6177                           	opt stack 0
  6178                           tblptru	equ	0xFF8
  6179                           tblptrh	equ	0xFF7
  6180                           tblptrl	equ	0xFF6
  6181                           tablat	equ	0xFF5
  6182                           prodh	equ	0xFF4
  6183                           prodl	equ	0xFF3
  6184                           postinc0	equ	0xFEE
  6185                           wreg	equ	0xFE8
  6186                           postdec1	equ	0xFE5
  6187                           fsr1h	equ	0xFE2
  6188                           fsr1l	equ	0xFE1
  6189                           indf2	equ	0xFDF
  6190                           fsr2h	equ	0xFDA
  6191                           fsr2l	equ	0xFD9
  6192                           status	equ	0xFD8
  6193                           
  6194 ;; *************** function _get_packet_size *****************
  6195 ;; Defined at:
  6196 ;;		line 60 in file "Library/iRobotSerial.c"
  6197 ;; Parameters:    Size  Location     Type
  6198 ;;  packetID        1    wreg     unsigned char 
  6199 ;; Auto vars:     Size  Location     Type
  6200 ;;  packetID        1    0[BANK0 ] unsigned char 
  6201 ;; Return value:  Size  Location     Type
  6202 ;;                  1    wreg      unsigned char 
  6203 ;; Registers used:
  6204 ;;		wreg, status,2, status,0
  6205 ;; Tracked objects:
  6206 ;;		On entry : 0/0
  6207 ;;		On exit  : 0/0
  6208 ;;		Unchanged: 0/0
  6209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6211 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6213 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6214 ;;Total ram usage:        1 bytes
  6215 ;; Hardware stack levels used:    1
  6216 ;; Hardware stack levels required when called:    7
  6217 ;; This function calls:
  6218 ;;		Nothing
  6219 ;; This function is called by:
  6220 ;;		_irobot_query_and_update
  6221 ;; This function uses a non-reentrant model
  6222 ;;
  6223                           
  6224                           	psect	text16
  6225  0156CC                     __ptext16:
  6226                           	opt stack 0
  6227  0156CC                     _get_packet_size:
  6228                           	opt stack 20
  6229                           
  6230                           ; BSR set to: 0
  6231                           ;incstack = 0
  6232                           ;get_packet_size@packetID stored from wreg
  6233  0156CC  0100               	movlb	0	; () banked
  6234  0156CE  6FBA               	movwf	get_packet_size@packetID& (0+255),b
  6235                           
  6236                           ;iRobotSerial.c: 61: switch (packetID) {
  6237  0156D0  D012               	goto	l2021
  6238  0156D2  0E01               	movlw	1
  6239  0156D4  0012               	return	
  6240  0156D6  0E01               	movlw	1
  6241  0156D8  0012               	return	
  6242  0156DA  0E01               	movlw	1
  6243  0156DC  0012               	return	
  6244  0156DE  0E01               	movlw	1
  6245  0156E0  0012               	return	
  6246  0156E2  0E01               	movlw	1
  6247  0156E4  0012               	return	
  6248  0156E6  0E01               	movlw	1
  6249  0156E8  0012               	return	
  6250  0156EA  0E01               	movlw	1
  6251  0156EC  0012               	return	
  6252  0156EE  0E02               	movlw	2
  6253  0156F0  0012               	return	
  6254  0156F2  0E02               	movlw	2
  6255                           
  6256                           ;iRobotSerial.c: 71: }
  6257  0156F4  0012               	return	
  6258  0156F6                     l2021:
  6259  0156F6  0100               	movlb	0	; () banked
  6260  0156F8  51BA               	movf	get_packet_size@packetID& (0+255),w,b
  6261                           
  6262                           ; Switch size 1, requested type "space"
  6263                           ; Number of cases is 9, Range of values is 7 to 20
  6264                           ; switch strategies available:
  6265                           ; Name         Instructions Cycles
  6266                           ; simple_byte           28    15 (average)
  6267                           ;	Chosen strategy is simple_byte
  6268  0156FA  0A07               	xorlw	7	; case 7
  6269  0156FC  B4D8               	btfsc	status,2,c
  6270  0156FE  D7E9               	goto	l2022
  6271  015700  0A0F               	xorlw	15	; case 8
  6272  015702  B4D8               	btfsc	status,2,c
  6273  015704  D7E8               	goto	l2024
  6274  015706  0A01               	xorlw	1	; case 9
  6275  015708  B4D8               	btfsc	status,2,c
  6276  01570A  D7E7               	goto	l2025
  6277  01570C  0A03               	xorlw	3	; case 10
  6278  01570E  B4D8               	btfsc	status,2,c
  6279  015710  D7E6               	goto	l2026
  6280  015712  0A01               	xorlw	1	; case 11
  6281  015714  B4D8               	btfsc	status,2,c
  6282  015716  D7E5               	goto	l2027
  6283  015718  0A07               	xorlw	7	; case 12
  6284  01571A  B4D8               	btfsc	status,2,c
  6285  01571C  D7E4               	goto	l2028
  6286  01571E  0A01               	xorlw	1	; case 13
  6287  015720  B4D8               	btfsc	status,2,c
  6288  015722  D7E3               	goto	l2029
  6289  015724  0A1E               	xorlw	30	; case 19
  6290  015726  B4D8               	btfsc	status,2,c
  6291  015728  D7E2               	goto	l2030
  6292  01572A  0A07               	xorlw	7	; case 20
  6293  01572C  A4D8               	btfss	status,2,c
  6294  01572E  0012               	return	
  6295  015730  D7E0               	goto	l2031
  6296  015732                     __end_of_get_packet_size:
  6297                           	opt stack 0
  6298                           tblptru	equ	0xFF8
  6299                           tblptrh	equ	0xFF7
  6300                           tblptrl	equ	0xFF6
  6301                           tablat	equ	0xFF5
  6302                           prodh	equ	0xFF4
  6303                           prodl	equ	0xFF3
  6304                           postinc0	equ	0xFEE
  6305                           wreg	equ	0xFE8
  6306                           postdec1	equ	0xFE5
  6307                           fsr1h	equ	0xFE2
  6308                           fsr1l	equ	0xFE1
  6309                           indf2	equ	0xFDF
  6310                           fsr2h	equ	0xFDA
  6311                           fsr2l	equ	0xFD9
  6312                           status	equ	0xFD8
  6313                           
  6314 ;; *************** function _eusart_getch *****************
  6315 ;; Defined at:
  6316 ;;		line 125 in file "Library/iRobotSerial.c"
  6317 ;; Parameters:    Size  Location     Type
  6318 ;;		None
  6319 ;; Auto vars:     Size  Location     Type
  6320 ;;		None
  6321 ;; Return value:  Size  Location     Type
  6322 ;;                  1    wreg      unsigned char 
  6323 ;; Registers used:
  6324 ;;		wreg, status,2
  6325 ;; Tracked objects:
  6326 ;;		On entry : 0/0
  6327 ;;		On exit  : 0/0
  6328 ;;		Unchanged: 0/0
  6329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6331 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6333 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6334 ;;Total ram usage:        0 bytes
  6335 ;; Hardware stack levels used:    1
  6336 ;; Hardware stack levels required when called:    7
  6337 ;; This function calls:
  6338 ;;		Nothing
  6339 ;; This function is called by:
  6340 ;;		_irobot_query_and_update
  6341 ;; This function uses a non-reentrant model
  6342 ;;
  6343                           
  6344                           	psect	text17
  6345  01666A                     __ptext17:
  6346                           	opt stack 0
  6347  01666A                     _eusart_getch:
  6348                           	opt stack 20
  6349                           
  6350                           ;iRobotSerial.c: 126: while (!PIR1bits.RC1IF) {};
  6351                           
  6352                           ;incstack = 0
  6353  01666A  AA9E               	btfss	3998,5,c	;volatile
  6354  01666C  D7FE               	goto	_eusart_getch
  6355                           
  6356                           ;iRobotSerial.c: 127: return RCREG1;
  6357  01666E  50AF               	movf	4015,w,c	;volatile
  6358  016670  0012               	return	
  6359  016672                     __end_of_eusart_getch:
  6360                           	opt stack 0
  6361                           tblptru	equ	0xFF8
  6362                           tblptrh	equ	0xFF7
  6363                           tblptrl	equ	0xFF6
  6364                           tablat	equ	0xFF5
  6365                           prodh	equ	0xFF4
  6366                           prodl	equ	0xFF3
  6367                           postinc0	equ	0xFEE
  6368                           wreg	equ	0xFE8
  6369                           postdec1	equ	0xFE5
  6370                           fsr1h	equ	0xFE2
  6371                           fsr1l	equ	0xFE1
  6372                           indf2	equ	0xFDF
  6373                           fsr2h	equ	0xFDA
  6374                           fsr2l	equ	0xFD9
  6375                           status	equ	0xFD8
  6376                           
  6377 ;; *************** function _irobot_stop_motion *****************
  6378 ;; Defined at:
  6379 ;;		line 298 in file "Library/iRobotSerial.c"
  6380 ;; Parameters:    Size  Location     Type
  6381 ;;  isScript        1    wreg     unsigned char 
  6382 ;; Auto vars:     Size  Location     Type
  6383 ;;  isScript        1   25[BANK0 ] unsigned char 
  6384 ;; Return value:  Size  Location     Type
  6385 ;;                  1    wreg      void 
  6386 ;; Registers used:
  6387 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6388 ;; Tracked objects:
  6389 ;;		On entry : 0/0
  6390 ;;		On exit  : 0/0
  6391 ;;		Unchanged: 0/0
  6392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6394 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6396 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6397 ;;Total ram usage:        1 bytes
  6398 ;; Hardware stack levels used:    1
  6399 ;; Hardware stack levels required when called:    9
  6400 ;; This function calls:
  6401 ;;		_irobot_move
  6402 ;; This function is called by:
  6403 ;;		_irobot_rotate
  6404 ;;		_safeToGo
  6405 ;;		_move_and_rotate
  6406 ;;		_mode2
  6407 ;;		_mode4
  6408 ;;		_irobot_move_to_simple
  6409 ;;		_irobot_rotate_to
  6410 ;; This function uses a non-reentrant model
  6411 ;;
  6412                           
  6413                           	psect	text18
  6414  015CD0                     __ptext18:
  6415                           	opt stack 0
  6416  015CD0                     _irobot_stop_motion:
  6417                           	opt stack 19
  6418                           
  6419                           ;incstack = 0
  6420                           ;irobot_stop_motion@isScript stored from wreg
  6421  015CD0  0100               	movlb	0	; () banked
  6422  015CD2  6FD3               	movwf	irobot_stop_motion@isScript& (0+255),b
  6423                           
  6424                           ;iRobotSerial.c: 299: (isScript) ? irobot_move(1,0,0) : irobot_move(0,0,0);
  6425  015CD4  0100               	movlb	0	; () banked
  6426  015CD6  51D3               	movf	irobot_stop_motion@isScript& (0+255),w,b
  6427  015CD8  0100               	movlb	0	; () banked
  6428  015CDA  B4D8               	btfsc	status,2,c
  6429  015CDC  D00E               	goto	l2168
  6430                           
  6431                           ; BSR set to: 0
  6432  015CDE  0E00               	movlw	0
  6433  015CE0  0100               	movlb	0	; () banked
  6434  015CE2  6FCB               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  6435  015CE4  0E00               	movlw	0
  6436  015CE6  6FCA               	movwf	irobot_move@moveSpeed& (0+255),b
  6437  015CE8  0E00               	movlw	0
  6438  015CEA  0100               	movlb	0	; () banked
  6439  015CEC  6FCD               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  6440  015CEE  0E00               	movlw	0
  6441  015CF0  6FCC               	movwf	irobot_move@moveTurnRadius& (0+255),b
  6442  015CF2  0E01               	movlw	1
  6443  015CF4  ECEF  F0A1         	call	_irobot_move
  6444  015CF8  0012               	return	
  6445  015CFA                     l2168:
  6446  015CFA  0E00               	movlw	0
  6447  015CFC  0100               	movlb	0	; () banked
  6448  015CFE  6FCB               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  6449  015D00  0E00               	movlw	0
  6450  015D02  6FCA               	movwf	irobot_move@moveSpeed& (0+255),b
  6451  015D04  0E00               	movlw	0
  6452  015D06  0100               	movlb	0	; () banked
  6453  015D08  6FCD               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  6454  015D0A  0E00               	movlw	0
  6455  015D0C  6FCC               	movwf	irobot_move@moveTurnRadius& (0+255),b
  6456  015D0E  0E00               	movlw	0
  6457  015D10  ECEF  F0A1         	call	_irobot_move
  6458  015D14  0012               	return	
  6459  015D16                     __end_of_irobot_stop_motion:
  6460                           	opt stack 0
  6461                           tblptru	equ	0xFF8
  6462                           tblptrh	equ	0xFF7
  6463                           tblptrl	equ	0xFF6
  6464                           tablat	equ	0xFF5
  6465                           prodh	equ	0xFF4
  6466                           prodl	equ	0xFF3
  6467                           postinc0	equ	0xFEE
  6468                           wreg	equ	0xFE8
  6469                           postdec1	equ	0xFE5
  6470                           fsr1h	equ	0xFE2
  6471                           fsr1l	equ	0xFE1
  6472                           indf2	equ	0xFDF
  6473                           fsr2h	equ	0xFDA
  6474                           fsr2l	equ	0xFD9
  6475                           status	equ	0xFD8
  6476                           
  6477 ;; *************** function _irobot_move *****************
  6478 ;; Defined at:
  6479 ;;		line 219 in file "Library/iRobotSerial.c"
  6480 ;; Parameters:    Size  Location     Type
  6481 ;;  isScript        1    wreg     unsigned char 
  6482 ;;  moveSpeed       2   16[BANK0 ] short 
  6483 ;;  moveTurnRadi    2   18[BANK0 ] short 
  6484 ;; Auto vars:     Size  Location     Type
  6485 ;;  isScript        1   24[BANK0 ] unsigned char 
  6486 ;; Return value:  Size  Location     Type
  6487 ;;                  1    wreg      void 
  6488 ;; Registers used:
  6489 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6490 ;; Tracked objects:
  6491 ;;		On entry : 0/0
  6492 ;;		On exit  : 0/0
  6493 ;;		Unchanged: 0/0
  6494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6495 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6496 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6497 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6498 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6499 ;;Total ram usage:        9 bytes
  6500 ;; Hardware stack levels used:    1
  6501 ;; Hardware stack levels required when called:    8
  6502 ;; This function calls:
  6503 ;;		_eusart_putch
  6504 ;;		_load_iRScriptStack
  6505 ;;		_twos_complement_of
  6506 ;; This function is called by:
  6507 ;;		_irobot_rotate
  6508 ;;		_irobot_stop_motion
  6509 ;;		_irobot_move_straight
  6510 ;;		_irobot_move_to_simple
  6511 ;; This function uses a non-reentrant model
  6512 ;;
  6513                           
  6514                           	psect	text19
  6515  0143DE                     __ptext19:
  6516                           	opt stack 0
  6517  0143DE                     _irobot_move:
  6518                           	opt stack 19
  6519                           
  6520                           ;incstack = 0
  6521                           ;irobot_move@isScript stored from wreg
  6522  0143DE  0100               	movlb	0	; () banked
  6523  0143E0  6FD2               	movwf	irobot_move@isScript& (0+255),b
  6524                           
  6525                           ;iRobotSerial.c: 220: moveSpeed = twos_complement_of(moveSpeed);
  6526  0143E2  C0CA  F0BA         	movff	irobot_move@moveSpeed,twos_complement_of@complementValue
  6527  0143E6  C0CB  F0BB         	movff	irobot_move@moveSpeed+1,twos_complement_of@complementValue+1
  6528  0143EA  ECD1  F0AE         	call	_twos_complement_of	;wreg free
  6529  0143EE  C0BA  F0CA         	movff	?_twos_complement_of,irobot_move@moveSpeed
  6530  0143F2  C0BB  F0CB         	movff	?_twos_complement_of+1,irobot_move@moveSpeed+1
  6531                           
  6532                           ;iRobotSerial.c: 221: moveTurnRadius = twos_complement_of(moveTurnRadius);
  6533  0143F6  C0CC  F0BA         	movff	irobot_move@moveTurnRadius,twos_complement_of@complementValue
  6534  0143FA  C0CD  F0BB         	movff	irobot_move@moveTurnRadius+1,twos_complement_of@complementValue+1
  6535  0143FE  ECD1  F0AE         	call	_twos_complement_of	;wreg free
  6536  014402  C0BA  F0CC         	movff	?_twos_complement_of,irobot_move@moveTurnRadius
  6537  014406  C0BB  F0CD         	movff	?_twos_complement_of+1,irobot_move@moveTurnRadius+1
  6538                           
  6539                           ;iRobotSerial.c: 223: if (isScript) {
  6540  01440A  0100               	movlb	0	; () banked
  6541  01440C  51D2               	movf	irobot_move@isScript& (0+255),w,b
  6542  01440E  0100               	movlb	0	; () banked
  6543  014410  B4D8               	btfsc	status,2,c
  6544  014412  D029               	goto	l2139
  6545                           
  6546                           ; BSR set to: 0
  6547                           ;iRobotSerial.c: 224: load_iRScriptStack(5, iR_DRIVE,
  6548                           ;iRobotSerial.c: 225: (((moveSpeed)>>8) & 0xFF), ((moveSpeed) & 0xFF),
  6549                           ;iRobotSerial.c: 226: (((moveTurnRadius)>>8) & 0xFF), ((moveTurnRadius) & 0xFF));
  6550  014414  0E00               	movlw	0
  6551  014416  0100               	movlb	0	; () banked
  6552  014418  6FBB               	movwf	(?_load_iRScriptStack+1)& (0+255),b
  6553  01441A  0E89               	movlw	137
  6554  01441C  6FBA               	movwf	?_load_iRScriptStack& (0+255),b
  6555  01441E  C0CB  F0CE         	movff	irobot_move@moveSpeed+1,??_irobot_move
  6556  014422  0100               	movlb	0	; () banked
  6557  014424  6BCF               	clrf	(??_irobot_move+1)& (0+255),b
  6558  014426  BFCE               	btfsc	??_irobot_move& (0+255),7,b
  6559  014428  69CF               	setf	(??_irobot_move+1)& (0+255),b
  6560  01442A  0100               	movlb	0	; () banked
  6561  01442C  51CE               	movf	??_irobot_move& (0+255),w,b
  6562  01442E  0100               	movlb	0	; () banked
  6563  014430  6FBC               	movwf	(?_load_iRScriptStack+2)& (0+255),b
  6564  014432  6BBD               	clrf	(?_load_iRScriptStack+3)& (0+255),b
  6565  014434  0100               	movlb	0	; () banked
  6566  014436  51CA               	movf	irobot_move@moveSpeed& (0+255),w,b
  6567  014438  0100               	movlb	0	; () banked
  6568  01443A  6FBE               	movwf	(?_load_iRScriptStack+4)& (0+255),b
  6569  01443C  6BBF               	clrf	(?_load_iRScriptStack+5)& (0+255),b
  6570  01443E  C0CD  F0D0         	movff	irobot_move@moveTurnRadius+1,??_irobot_move+2
  6571  014442  0100               	movlb	0	; () banked
  6572  014444  6BD1               	clrf	(??_irobot_move+3)& (0+255),b
  6573  014446  BFD0               	btfsc	(??_irobot_move+2)& (0+255),7,b
  6574  014448  69D1               	setf	(??_irobot_move+3)& (0+255),b
  6575  01444A  0100               	movlb	0	; () banked
  6576  01444C  51D0               	movf	(??_irobot_move+2)& (0+255),w,b
  6577  01444E  0100               	movlb	0	; () banked
  6578  014450  6FC0               	movwf	(?_load_iRScriptStack+6)& (0+255),b
  6579  014452  6BC1               	clrf	(?_load_iRScriptStack+7)& (0+255),b
  6580  014454  0100               	movlb	0	; () banked
  6581  014456  51CC               	movf	irobot_move@moveTurnRadius& (0+255),w,b
  6582  014458  0100               	movlb	0	; () banked
  6583  01445A  6FC2               	movwf	(?_load_iRScriptStack+8)& (0+255),b
  6584  01445C  6BC3               	clrf	(?_load_iRScriptStack+9)& (0+255),b
  6585  01445E  0E05               	movlw	5
  6586  014460  ECC7  F0AA         	call	_load_iRScriptStack
  6587                           
  6588                           ;iRobotSerial.c: 227: }
  6589  014464  0012               	return	
  6590  014466                     l2139:
  6591                           
  6592                           ;iRobotSerial.c: 228: else{
  6593                           ;iRobotSerial.c: 229: eusart_putch(iR_DRIVE);
  6594  014466  0E89               	movlw	137
  6595  014468  ECF2  F0B2         	call	_eusart_putch
  6596                           
  6597                           ;iRobotSerial.c: 230: eusart_putch((((moveSpeed)>>8) & 0xFF));
  6598  01446C  0100               	movlb	0	; () banked
  6599  01446E  51CB               	movf	(irobot_move@moveSpeed+1)& (0+255),w,b
  6600  014470  ECF2  F0B2         	call	_eusart_putch
  6601                           
  6602                           ;iRobotSerial.c: 231: eusart_putch(((moveSpeed) & 0xFF));
  6603  014474  0100               	movlb	0	; () banked
  6604  014476  51CA               	movf	irobot_move@moveSpeed& (0+255),w,b
  6605  014478  ECF2  F0B2         	call	_eusart_putch
  6606                           
  6607                           ;iRobotSerial.c: 232: eusart_putch((((moveTurnRadius)>>8) & 0xFF));
  6608  01447C  0100               	movlb	0	; () banked
  6609  01447E  51CD               	movf	(irobot_move@moveTurnRadius+1)& (0+255),w,b
  6610  014480  ECF2  F0B2         	call	_eusart_putch
  6611                           
  6612                           ;iRobotSerial.c: 233: eusart_putch(((moveTurnRadius) & 0xFF));
  6613  014484  0100               	movlb	0	; () banked
  6614  014486  51CC               	movf	irobot_move@moveTurnRadius& (0+255),w,b
  6615  014488  ECF2  F0B2         	call	_eusart_putch
  6616  01448C  0012               	return	
  6617  01448E                     __end_of_irobot_move:
  6618                           	opt stack 0
  6619                           tblptru	equ	0xFF8
  6620                           tblptrh	equ	0xFF7
  6621                           tblptrl	equ	0xFF6
  6622                           tablat	equ	0xFF5
  6623                           prodh	equ	0xFF4
  6624                           prodl	equ	0xFF3
  6625                           postinc0	equ	0xFEE
  6626                           wreg	equ	0xFE8
  6627                           postdec1	equ	0xFE5
  6628                           fsr1h	equ	0xFE2
  6629                           fsr1l	equ	0xFE1
  6630                           indf2	equ	0xFDF
  6631                           fsr2h	equ	0xFDA
  6632                           fsr2l	equ	0xFD9
  6633                           status	equ	0xFD8
  6634                           
  6635 ;; *************** function _twos_complement_of *****************
  6636 ;; Defined at:
  6637 ;;		line 166 in file "Library/iRobotSerial.c"
  6638 ;; Parameters:    Size  Location     Type
  6639 ;;  complementVa    2    0[BANK0 ] short 
  6640 ;; Auto vars:     Size  Location     Type
  6641 ;;		None
  6642 ;; Return value:  Size  Location     Type
  6643 ;;                  2    0[BANK0 ] unsigned short 
  6644 ;; Registers used:
  6645 ;;		wreg, status,2, status,0
  6646 ;; Tracked objects:
  6647 ;;		On entry : 0/0
  6648 ;;		On exit  : 0/0
  6649 ;;		Unchanged: 0/0
  6650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6651 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6654 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6655 ;;Total ram usage:        2 bytes
  6656 ;; Hardware stack levels used:    1
  6657 ;; Hardware stack levels required when called:    7
  6658 ;; This function calls:
  6659 ;;		Nothing
  6660 ;; This function is called by:
  6661 ;;		_irobot_move
  6662 ;;		_irobot_angle_wait
  6663 ;;		_irobot_distance_wait
  6664 ;; This function uses a non-reentrant model
  6665 ;;
  6666                           
  6667                           	psect	text20
  6668  015DA2                     __ptext20:
  6669                           	opt stack 0
  6670  015DA2                     _twos_complement_of:
  6671                           	opt stack 19
  6672                           
  6673                           ;iRobotSerial.c: 167: if (complementValue < 0) {
  6674                           
  6675                           ;incstack = 0
  6676  015DA2  0100               	movlb	0	; () banked
  6677  015DA4  AFBB               	btfss	(twos_complement_of@complementValue+1)& (0+255),7,b
  6678  015DA6  D01A               	goto	l2110
  6679                           
  6680                           ; BSR set to: 0
  6681                           ;iRobotSerial.c: 168: complementValue = ((complementValue) > 0 ? (complementValue) : -(c
      +                          omplementValue));
  6682  015DA8  0100               	movlb	0	; () banked
  6683  015DAA  BFBB               	btfsc	(twos_complement_of@complementValue+1)& (0+255),7,b
  6684  015DAC  D007               	goto	u9270
  6685  015DAE  0100               	movlb	0	; () banked
  6686  015DB0  51BB               	movf	(twos_complement_of@complementValue+1)& (0+255),w,b
  6687  015DB2  E10A               	bnz	l2112
  6688  015DB4  0100               	movlb	0	; () banked
  6689  015DB6  05BA               	decf	twos_complement_of@complementValue& (0+255),w,b
  6690  015DB8  B0D8               	btfsc	status,0,c
  6691  015DBA  D006               	goto	l2112
  6692  015DBC                     u9270:
  6693                           
  6694                           ; BSR set to: 0
  6695  015DBC  0100               	movlb	0	; () banked
  6696  015DBE  6DBA               	negf	twos_complement_of@complementValue& (0+255),b
  6697  015DC0  1FBB               	comf	(twos_complement_of@complementValue+1)& (0+255),f,b
  6698  015DC2  B0D8               	btfsc	status,0,c
  6699  015DC4  2BBB               	incf	(twos_complement_of@complementValue+1)& (0+255),f,b
  6700  015DC6  D004               	goto	l2114
  6701  015DC8                     l2112:
  6702                           
  6703                           ; BSR set to: 0
  6704  015DC8  C0BA  F0BA         	movff	twos_complement_of@complementValue,twos_complement_of@complementValue
  6705  015DCC  C0BB  F0BB         	movff	twos_complement_of@complementValue+1,twos_complement_of@complementValue+1
  6706  015DD0                     l2114:
  6707                           
  6708                           ; BSR set to: 0
  6709                           ;iRobotSerial.c: 169: complementValue = ~complementValue;
  6710                           
  6711                           ; BSR set to: 0
  6712  015DD0  0100               	movlb	0	; () banked
  6713  015DD2  1FBA               	comf	twos_complement_of@complementValue& (0+255),f,b
  6714  015DD4  1FBB               	comf	(twos_complement_of@complementValue+1)& (0+255),f,b
  6715                           
  6716                           ;iRobotSerial.c: 170: complementValue += 1;
  6717  015DD6  0100               	movlb	0	; () banked
  6718  015DD8  4BBA               	infsnz	twos_complement_of@complementValue& (0+255),f,b
  6719  015DDA  2BBB               	incf	(twos_complement_of@complementValue+1)& (0+255),f,b
  6720  015DDC                     l2110:
  6721                           
  6722                           ; BSR set to: 0
  6723                           ;iRobotSerial.c: 171: }
  6724                           ;iRobotSerial.c: 172: return complementValue;
  6725                           
  6726                           ; BSR set to: 0
  6727  015DDC  C0BA  F0BA         	movff	twos_complement_of@complementValue,?_twos_complement_of
  6728  015DE0  C0BB  F0BB         	movff	twos_complement_of@complementValue+1,?_twos_complement_of+1
  6729  015DE4  0012               	return	
  6730  015DE6                     __end_of_twos_complement_of:
  6731                           	opt stack 0
  6732                           tblptru	equ	0xFF8
  6733                           tblptrh	equ	0xFF7
  6734                           tblptrl	equ	0xFF6
  6735                           tablat	equ	0xFF5
  6736                           prodh	equ	0xFF4
  6737                           prodl	equ	0xFF3
  6738                           postinc0	equ	0xFEE
  6739                           wreg	equ	0xFE8
  6740                           postdec1	equ	0xFE5
  6741                           fsr1h	equ	0xFE2
  6742                           fsr1l	equ	0xFE1
  6743                           indf2	equ	0xFDF
  6744                           fsr2h	equ	0xFDA
  6745                           fsr2l	equ	0xFD9
  6746                           status	equ	0xFD8
  6747                           
  6748 ;; *************** function _irobot_song_play *****************
  6749 ;; Defined at:
  6750 ;;		line 273 in file "Library/iRobotSerial.c"
  6751 ;; Parameters:    Size  Location     Type
  6752 ;;  songNumber      1    wreg     unsigned char 
  6753 ;; Auto vars:     Size  Location     Type
  6754 ;;  songNumber      1    1[BANK0 ] unsigned char 
  6755 ;; Return value:  Size  Location     Type
  6756 ;;                  1    wreg      void 
  6757 ;; Registers used:
  6758 ;;		wreg, status,2, cstack
  6759 ;; Tracked objects:
  6760 ;;		On entry : 0/0
  6761 ;;		On exit  : 0/0
  6762 ;;		Unchanged: 0/0
  6763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6765 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6767 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6768 ;;Total ram usage:        1 bytes
  6769 ;; Hardware stack levels used:    1
  6770 ;; Hardware stack levels required when called:    8
  6771 ;; This function calls:
  6772 ;;		_eusart_putch
  6773 ;; This function is called by:
  6774 ;;		_safeToGo
  6775 ;;		_mode4
  6776 ;; This function uses a non-reentrant model
  6777 ;;
  6778                           
  6779                           	psect	text21
  6780  01656A                     __ptext21:
  6781                           	opt stack 0
  6782  01656A                     _irobot_song_play:
  6783                           	opt stack 20
  6784                           
  6785                           ; BSR set to: 0
  6786                           ;incstack = 0
  6787                           ;irobot_song_play@songNumber stored from wreg
  6788  01656A  0100               	movlb	0	; () banked
  6789  01656C  6FBB               	movwf	irobot_song_play@songNumber& (0+255),b
  6790                           
  6791                           ;iRobotSerial.c: 274: eusart_putch(iR_SONG_PLAY);
  6792  01656E  0E8D               	movlw	141
  6793  016570  ECF2  F0B2         	call	_eusart_putch
  6794                           
  6795                           ;iRobotSerial.c: 275: eusart_putch(songNumber);
  6796  016574  0100               	movlb	0	; () banked
  6797  016576  51BB               	movf	irobot_song_play@songNumber& (0+255),w,b
  6798  016578  ECF2  F0B2         	call	_eusart_putch
  6799  01657C  0012               	return		;funcret
  6800  01657E                     __end_of_irobot_song_play:
  6801                           	opt stack 0
  6802                           tblptru	equ	0xFF8
  6803                           tblptrh	equ	0xFF7
  6804                           tblptrl	equ	0xFF6
  6805                           tablat	equ	0xFF5
  6806                           prodh	equ	0xFF4
  6807                           prodl	equ	0xFF3
  6808                           postinc0	equ	0xFEE
  6809                           wreg	equ	0xFE8
  6810                           postdec1	equ	0xFE5
  6811                           fsr1h	equ	0xFE2
  6812                           fsr1l	equ	0xFE1
  6813                           indf2	equ	0xFDF
  6814                           fsr2h	equ	0xFDA
  6815                           fsr2l	equ	0xFD9
  6816                           status	equ	0xFD8
  6817                           
  6818 ;; *************** function _printf *****************
  6819 ;; Defined at:
  6820 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  6821 ;; Parameters:    Size  Location     Type
  6822 ;;  f               2   21[BANK0 ] PTR const unsigned char 
  6823 ;;		 -> STR_16(21), STR_15(21), STR_14(21), STR_13(21), 
  6824 ;;		 -> STR_12(21), STR_11(3), STR_10(76), STR_9(3), 
  6825 ;;		 -> STR_8(14), STR_7(3), STR_6(46), STR_5(3), 
  6826 ;;		 -> STR_4(46), STR_3(3), STR_2(60), STR_1(3), 
  6827 ;; Auto vars:     Size  Location     Type
  6828 ;;  tmpval          4    0        struct .
  6829 ;;  cp              3    0        PTR const unsigned char 
  6830 ;;  val             2   38[BANK0 ] unsigned int 
  6831 ;;  ap              2   36[BANK0 ] PTR void [1]
  6832 ;;		 -> ?_printf(2), 
  6833 ;;  len             2    0        unsigned int 
  6834 ;;  c               1   40[BANK0 ] char 
  6835 ;;  flag            1   35[BANK0 ] unsigned char 
  6836 ;;  prec            1   34[BANK0 ] char 
  6837 ;; Return value:  Size  Location     Type
  6838 ;;                  2   21[BANK0 ] int 
  6839 ;; Registers used:
  6840 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6841 ;; Tracked objects:
  6842 ;;		On entry : 0/0
  6843 ;;		On exit  : 0/0
  6844 ;;		Unchanged: 0/0
  6845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6846 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6847 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6848 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6849 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6850 ;;Total ram usage:       20 bytes
  6851 ;; Hardware stack levels used:    1
  6852 ;; Hardware stack levels required when called:   12
  6853 ;; This function calls:
  6854 ;;		___lwdiv
  6855 ;;		___lwmod
  6856 ;;		_putch
  6857 ;; This function is called by:
  6858 ;;		_findClosestWall
  6859 ;;		_mode1
  6860 ;;		_mode2
  6861 ;;		_mode4
  6862 ;;		_main
  6863 ;; This function uses a non-reentrant model
  6864 ;;
  6865                           
  6866                           	psect	text22
  6867  0123A6                     __ptext22:
  6868                           	opt stack 0
  6869  0123A6                     _printf:
  6870                           	opt stack 18
  6871                           
  6872                           ;doprnt.c: 466: va_list ap;
  6873                           ;doprnt.c: 499: signed char c;
  6874                           ;doprnt.c: 506: signed char prec;
  6875                           ;doprnt.c: 508: unsigned char flag;
  6876                           ;doprnt.c: 523: union {
  6877                           ;doprnt.c: 524: unsigned long vd;
  6878                           ;doprnt.c: 525: double integ;
  6879                           ;doprnt.c: 526: } tmpval;
  6880                           ;doprnt.c: 528: unsigned int val;
  6881                           ;doprnt.c: 529: unsigned len;
  6882                           ;doprnt.c: 530: const char * cp;
  6883                           ;doprnt.c: 533: *ap = __va_start();
  6884                           
  6885                           ;incstack = 0
  6886  0123A6  0ED1               	movlw	low (?_printf+2)
  6887  0123A8  0100               	movlb	0	; () banked
  6888  0123AA  6FDE               	movwf	printf@ap& (0+255),b
  6889  0123AC  0E00               	movlw	high (?_printf+2)
  6890  0123AE  0100               	movlb	0	; () banked
  6891  0123B0  6FDF               	movwf	(printf@ap+1)& (0+255),b
  6892                           
  6893                           ;doprnt.c: 536: while(c = *f++) {
  6894  0123B2  D0C9               	goto	u10990
  6895  0123B4                     
  6896                           ; BSR set to: 0
  6897                           ;doprnt.c: 538: if(c != '%')
  6898                           
  6899                           ; BSR set to: 0
  6900  0123B4  0E25               	movlw	37
  6901  0123B6  0100               	movlb	0	; () banked
  6902  0123B8  19E2               	xorwf	printf@c& (0+255),w,b
  6903  0123BA  B4D8               	btfsc	status,2,c
  6904  0123BC  D005               	goto	l2422
  6905                           
  6906                           ; BSR set to: 0
  6907                           ;doprnt.c: 540: {
  6908                           ;doprnt.c: 541: (putch(c) );
  6909  0123BE  0100               	movlb	0	; () banked
  6910  0123C0  51E2               	movf	printf@c& (0+255),w,b
  6911  0123C2  ECE4  F0B2         	call	_putch
  6912                           
  6913                           ;doprnt.c: 542: continue;
  6914  0123C6  D0BF               	goto	u10990
  6915  0123C8                     l2422:
  6916                           
  6917                           ;doprnt.c: 543: }
  6918                           ;doprnt.c: 548: flag = 0;
  6919  0123C8  0E00               	movlw	0
  6920  0123CA  0100               	movlb	0	; () banked
  6921  0123CC  6FDD               	movwf	printf@flag& (0+255),b
  6922                           
  6923                           ;doprnt.c: 635: switch(c = *f++) {
  6924  0123CE  D014               	goto	l2423
  6925  0123D0                     
  6926                           ; BSR set to: 0
  6927                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  6928                           
  6929                           ; BSR set to: 0
  6930  0123D0  C0DE  FFD9         	movff	printf@ap,fsr2l
  6931  0123D4  C0DF  FFDA         	movff	printf@ap+1,fsr2h
  6932  0123D8  50DF               	movf	indf2,w,c
  6933  0123DA  0100               	movlb	0	; () banked
  6934  0123DC  6FE2               	movwf	printf@c& (0+255),b
  6935                           
  6936                           ; BSR set to: 0
  6937  0123DE  0E02               	movlw	2
  6938  0123E0  0100               	movlb	0	; () banked
  6939  0123E2  27DE               	addwf	printf@ap& (0+255),f,b
  6940  0123E4  0E00               	movlw	0
  6941  0123E6  23DF               	addwfc	(printf@ap+1)& (0+255),f,b
  6942  0123E8                     
  6943                           ; BSR set to: 0
  6944                           ;doprnt.c: 809: (putch(c) );
  6945                           
  6946                           ; BSR set to: 0
  6947  0123E8  0100               	movlb	0	; () banked
  6948  0123EA  51E2               	movf	printf@c& (0+255),w,b
  6949  0123EC  ECE4  F0B2         	call	_putch
  6950                           
  6951                           ;doprnt.c: 810: continue;
  6952  0123F0  D0AA               	goto	u10990
  6953  0123F2                     
  6954                           ;doprnt.c: 818: flag |= 0x40;
  6955  0123F2  0100               	movlb	0	; () banked
  6956  0123F4  8DDD               	bsf	printf@flag& (0+255),6,b
  6957                           
  6958                           ; BSR set to: 0
  6959                           ;doprnt.c: 822: }
  6960                           
  6961                           ;doprnt.c: 819: break;
  6962  0123F6  D01E               	goto	l2428
  6963  0123F8                     l2423:
  6964                           
  6965                           ; BSR set to: 0
  6966                           
  6967                           ; BSR set to: 0
  6968  0123F8  C0CF  FFF6         	movff	printf@f,tblptrl
  6969  0123FC  C0D0  FFF7         	movff	printf@f+1,tblptrh
  6970  012400  0100               	movlb	0	; () banked
  6971  012402  4BCF               	infsnz	printf@f& (0+255),f,b
  6972  012404  2BD0               	incf	(printf@f+1)& (0+255),f,b
  6973  012406                     	if	0	;tblptru may be non-zero
  6974  012406                     	endif
  6975  012406                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  6976  012406  0E00               	movlw	low (__mediumconst shr (0+16))
  6977  012408  6EF8               	movwf	tblptru,c
  6978  01240A                     	endif
  6979  01240A  0008               	tblrd		*
  6980  01240C  CFF5 F0E2          	movff	tablat,printf@c
  6981  012410  0100               	movlb	0	; () banked
  6982  012412  51E2               	movf	printf@c& (0+255),w,b
  6983                           
  6984                           ; Switch size 1, requested type "space"
  6985                           ; Number of cases is 5, Range of values is 0 to 117
  6986                           ; switch strategies available:
  6987                           ; Name         Instructions Cycles
  6988                           ; simple_byte           16     9 (average)
  6989                           ;	Chosen strategy is simple_byte
  6990  012414  0A00               	xorlw	0	; case 0
  6991  012416  B4D8               	btfsc	status,2,c
  6992  012418  0012               	return	
  6993  01241A  0A63               	xorlw	99	; case 99
  6994  01241C  B4D8               	btfsc	status,2,c
  6995  01241E  D7D8               	goto	l2429
  6996  012420  0A07               	xorlw	7	; case 100
  6997  012422  B4D8               	btfsc	status,2,c
  6998  012424  D007               	goto	l2428
  6999  012426  0A0D               	xorlw	13	; case 105
  7000  012428  B4D8               	btfsc	status,2,c
  7001  01242A  D004               	goto	l2428
  7002  01242C  0A1C               	xorlw	28	; case 117
  7003  01242E  B4D8               	btfsc	status,2,c
  7004  012430  D7E0               	goto	l2431
  7005  012432  D7DA               	goto	l2430
  7006  012434                     l2428:
  7007                           
  7008                           ; BSR set to: 0
  7009                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  7010  012434  0100               	movlb	0	; () banked
  7011  012436  BDDD               	btfsc	printf@flag& (0+255),6,b
  7012  012438  D019               	goto	l2432
  7013                           
  7014                           ; BSR set to: 0
  7015                           ;doprnt.c: 1253: {
  7016                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7017  01243A  C0DE  FFD9         	movff	printf@ap,fsr2l
  7018  01243E  C0DF  FFDA         	movff	printf@ap+1,fsr2h
  7019  012442  CFDE F0E0          	movff	postinc2,printf@val
  7020  012446  CFDD F0E1          	movff	postdec2,printf@val+1
  7021                           
  7022                           ; BSR set to: 0
  7023  01244A  0E02               	movlw	2
  7024  01244C  0100               	movlb	0	; () banked
  7025  01244E  27DE               	addwf	printf@ap& (0+255),f,b
  7026  012450  0E00               	movlw	0
  7027  012452  23DF               	addwfc	(printf@ap+1)& (0+255),f,b
  7028                           
  7029                           ; BSR set to: 0
  7030                           ;doprnt.c: 1261: if((int)val < 0) {
  7031  012454  0100               	movlb	0	; () banked
  7032  012456  AFE1               	btfss	(printf@val+1)& (0+255),7,b
  7033  012458  D016               	goto	l2434
  7034                           
  7035                           ; BSR set to: 0
  7036                           ;doprnt.c: 1262: flag |= 0x03;
  7037  01245A  0E03               	movlw	3
  7038  01245C  0100               	movlb	0	; () banked
  7039  01245E  13DD               	iorwf	printf@flag& (0+255),f,b
  7040                           
  7041                           ; BSR set to: 0
  7042                           ;doprnt.c: 1263: val = -val;
  7043  012460  0100               	movlb	0	; () banked
  7044  012462  6DE0               	negf	printf@val& (0+255),b
  7045  012464  1FE1               	comf	(printf@val+1)& (0+255),f,b
  7046  012466  B0D8               	btfsc	status,0,c
  7047  012468  2BE1               	incf	(printf@val+1)& (0+255),f,b
  7048                           
  7049                           ; BSR set to: 0
  7050                           ;doprnt.c: 1264: }
  7051                           ;doprnt.c: 1266: }
  7052  01246A  D00D               	goto	l2434
  7053  01246C                     l2432:
  7054                           
  7055                           ; BSR set to: 0
  7056                           ;doprnt.c: 1268: else
  7057                           ;doprnt.c: 1273: {
  7058                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7059                           
  7060                           ; BSR set to: 0
  7061  01246C  C0DE  FFD9         	movff	printf@ap,fsr2l
  7062  012470  C0DF  FFDA         	movff	printf@ap+1,fsr2h
  7063  012474  CFDE F0E0          	movff	postinc2,printf@val
  7064  012478  CFDD F0E1          	movff	postdec2,printf@val+1
  7065                           
  7066                           ; BSR set to: 0
  7067  01247C  0E02               	movlw	2
  7068  01247E  0100               	movlb	0	; () banked
  7069  012480  27DE               	addwf	printf@ap& (0+255),f,b
  7070  012482  0E00               	movlw	0
  7071  012484  23DF               	addwfc	(printf@ap+1)& (0+255),f,b
  7072  012486                     l2434:
  7073                           
  7074                           ; BSR set to: 0
  7075                           ;doprnt.c: 1287: }
  7076                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7077                           
  7078                           ; BSR set to: 0
  7079  012486  0E01               	movlw	1
  7080  012488  0100               	movlb	0	; () banked
  7081  01248A  6FE2               	movwf	printf@c& (0+255),b
  7082  01248C                     l14249:
  7083                           
  7084                           ; BSR set to: 0
  7085  01248C  0E05               	movlw	5
  7086  01248E  0100               	movlb	0	; () banked
  7087  012490  19E2               	xorwf	printf@c& (0+255),w,b
  7088  012492  B4D8               	btfsc	status,2,c
  7089  012494  D019               	goto	u10970
  7090                           
  7091                           ; BSR set to: 0
  7092                           ;doprnt.c: 1306: if(val < dpowers[c])
  7093                           
  7094                           ; BSR set to: 0
  7095                           
  7096                           ; BSR set to: 0
  7097  012496  0100               	movlb	0	; () banked
  7098  012498  51E2               	movf	printf@c& (0+255),w,b
  7099  01249A  0D02               	mullw	2
  7100  01249C  0E05               	movlw	low _dpowers
  7101  01249E  24F3               	addwf	prodl,w,c
  7102  0124A0  6EF6               	movwf	tblptrl,c
  7103  0124A2  0EFD               	movlw	high _dpowers
  7104  0124A4  20F4               	addwfc	prodh,w,c
  7105  0124A6  6EF7               	movwf	tblptrh,c
  7106  0124A8                     	if	1	;There are 3 active tblptr bytes
  7107  0124A8  6AF8               	clrf	tblptru,c
  7108  0124AA  0E00               	movlw	low (__mediumconst shr (0+16))
  7109  0124AC  22F8               	addwfc	tblptru,f,c
  7110  0124AE                     	endif
  7111  0124AE  0009               	tblrd		*+
  7112  0124B0  50F5               	movf	tablat,w,c
  7113  0124B2  0100               	movlb	0	; () banked
  7114  0124B4  5DE0               	subwf	printf@val& (0+255),w,b
  7115  0124B6  0009               	tblrd		*+
  7116  0124B8  50F5               	movf	tablat,w,c
  7117  0124BA  0100               	movlb	0	; () banked
  7118  0124BC  59E1               	subwfb	(printf@val+1)& (0+255),w,b
  7119  0124BE  A0D8               	btfss	status,0,c
  7120  0124C0  D003               	goto	u10970
  7121                           
  7122                           ; BSR set to: 0
  7123                           
  7124                           ; BSR set to: 0
  7125                           
  7126                           ; BSR set to: 0
  7127                           ;doprnt.c: 1307: break;
  7128  0124C2  0100               	movlb	0	; () banked
  7129  0124C4  2BE2               	incf	printf@c& (0+255),f,b
  7130  0124C6  D7E2               	goto	l14249
  7131  0124C8                     u10970:
  7132                           
  7133                           ; BSR set to: 0
  7134                           ;doprnt.c: 1422: {
  7135                           ;doprnt.c: 1438: if(flag & 0x03)
  7136                           
  7137                           ; BSR set to: 0
  7138  0124C8  C0DD  F0DB         	movff	printf@flag,??_printf
  7139  0124CC  0E03               	movlw	3
  7140  0124CE  0100               	movlb	0	; () banked
  7141  0124D0  17DB               	andwf	??_printf& (0+255),f,b
  7142  0124D2  B4D8               	btfsc	status,2,c
  7143  0124D4  D003               	goto	l2438
  7144                           
  7145                           ; BSR set to: 0
  7146                           ;doprnt.c: 1439: (putch('-') );
  7147  0124D6  0E2D               	movlw	45
  7148  0124D8  ECE4  F0B2         	call	_putch
  7149  0124DC                     l2438:
  7150                           
  7151                           ;doprnt.c: 1469: }
  7152                           ;doprnt.c: 1472: prec = c;
  7153  0124DC  C0E2  F0DC         	movff	printf@c,printf@prec
  7154                           
  7155                           ;doprnt.c: 1474: while(prec--) {
  7156  0124E0  D02C               	goto	l2439
  7157  0124E2                     
  7158                           ;doprnt.c: 1478: {
  7159                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7160  0124E2  0100               	movlb	0	; () banked
  7161  0124E4  51DC               	movf	printf@prec& (0+255),w,b
  7162  0124E6  0D02               	mullw	2
  7163  0124E8  0E05               	movlw	low _dpowers
  7164  0124EA  24F3               	addwf	prodl,w,c
  7165  0124EC  6EF6               	movwf	tblptrl,c
  7166  0124EE  0EFD               	movlw	high _dpowers
  7167  0124F0  20F4               	addwfc	prodh,w,c
  7168  0124F2  6EF7               	movwf	tblptrh,c
  7169  0124F4                     	if	1	;There are 3 active tblptr bytes
  7170  0124F4  6AF8               	clrf	tblptru,c
  7171  0124F6  0E00               	movlw	low (__mediumconst shr (0+16))
  7172  0124F8  22F8               	addwfc	tblptru,f,c
  7173  0124FA                     	endif
  7174  0124FA  0009               	tblrd		*+
  7175  0124FC  CFF5 F0BC          	movff	tablat,___lwdiv@divisor
  7176  012500  000A               	tblrd		*-
  7177  012502  CFF5 F0BD          	movff	tablat,___lwdiv@divisor+1
  7178  012506  C0E0  F0BA         	movff	printf@val,___lwdiv@dividend
  7179  01250A  C0E1  F0BB         	movff	printf@val+1,___lwdiv@dividend+1
  7180  01250E  ECC4  F0A8         	call	___lwdiv	;wreg free
  7181  012512  C0BA  F0C1         	movff	?___lwdiv,___lwmod@dividend
  7182  012516  C0BB  F0C2         	movff	?___lwdiv+1,___lwmod@dividend+1
  7183  01251A  0E00               	movlw	0
  7184  01251C  0100               	movlb	0	; () banked
  7185  01251E  6FC4               	movwf	(___lwmod@divisor+1)& (0+255),b
  7186  012520  0E0A               	movlw	10
  7187  012522  6FC3               	movwf	___lwmod@divisor& (0+255),b
  7188  012524  EC2F  F0AC         	call	___lwmod	;wreg free
  7189  012528  0100               	movlb	0	; () banked
  7190  01252A  51C1               	movf	?___lwmod& (0+255),w,b
  7191  01252C  0F30               	addlw	48
  7192  01252E  0100               	movlb	0	; () banked
  7193  012530  6FE2               	movwf	printf@c& (0+255),b
  7194                           
  7195                           ; BSR set to: 0
  7196                           ;doprnt.c: 1523: }
  7197                           ;doprnt.c: 1524: (putch(c) );
  7198  012532  0100               	movlb	0	; () banked
  7199  012534  51E2               	movf	printf@c& (0+255),w,b
  7200  012536  ECE4  F0B2         	call	_putch
  7201  01253A                     l2439:
  7202  01253A  0100               	movlb	0	; () banked
  7203  01253C  07DC               	decf	printf@prec& (0+255),f,b
  7204  01253E  0100               	movlb	0	; () banked
  7205  012540  29DC               	incf	printf@prec& (0+255),w,b
  7206  012542  A4D8               	btfss	status,2,c
  7207  012544  D7CE               	goto	l2440
  7208  012546                     u10990:
  7209                           
  7210                           ; BSR set to: 0
  7211                           
  7212                           ; BSR set to: 0
  7213  012546  C0CF  FFF6         	movff	printf@f,tblptrl
  7214  01254A  C0D0  FFF7         	movff	printf@f+1,tblptrh
  7215  01254E  0100               	movlb	0	; () banked
  7216  012550  4BCF               	infsnz	printf@f& (0+255),f,b
  7217  012552  2BD0               	incf	(printf@f+1)& (0+255),f,b
  7218  012554                     	if	0	;tblptru may be non-zero
  7219  012554                     	endif
  7220  012554                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7221  012554  0E00               	movlw	low (__mediumconst shr (0+16))
  7222  012556  6EF8               	movwf	tblptru,c
  7223  012558                     	endif
  7224  012558  0008               	tblrd		*
  7225  01255A  CFF5 F0E2          	movff	tablat,printf@c
  7226  01255E  0100               	movlb	0	; () banked
  7227  012560  51E2               	movf	printf@c& (0+255),w,b
  7228  012562  B4D8               	btfsc	status,2,c
  7229  012564  0012               	return	
  7230  012566  D726               	goto	l2421
  7231  012568                     __end_of_printf:
  7232                           	opt stack 0
  7233                           tblptru	equ	0xFF8
  7234                           tblptrh	equ	0xFF7
  7235                           tblptrl	equ	0xFF6
  7236                           tablat	equ	0xFF5
  7237                           prodh	equ	0xFF4
  7238                           prodl	equ	0xFF3
  7239                           postinc0	equ	0xFEE
  7240                           wreg	equ	0xFE8
  7241                           postdec1	equ	0xFE5
  7242                           fsr1h	equ	0xFE2
  7243                           fsr1l	equ	0xFE1
  7244                           indf2	equ	0xFDF
  7245                           postinc2	equ	0xFDE
  7246                           postdec2	equ	0xFDD
  7247                           fsr2h	equ	0xFDA
  7248                           fsr2l	equ	0xFD9
  7249                           status	equ	0xFD8
  7250                           
  7251 ;; *************** function _putch *****************
  7252 ;; Defined at:
  7253 ;;		line 454 in file "Library/Console.c"
  7254 ;; Parameters:    Size  Location     Type
  7255 ;;  c               1    wreg     unsigned char 
  7256 ;; Auto vars:     Size  Location     Type
  7257 ;;  c               1   20[BANK0 ] unsigned char 
  7258 ;; Return value:  Size  Location     Type
  7259 ;;                  1    wreg      void 
  7260 ;; Registers used:
  7261 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7262 ;; Tracked objects:
  7263 ;;		On entry : 0/0
  7264 ;;		On exit  : 0/0
  7265 ;;		Unchanged: 0/0
  7266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7268 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7270 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7271 ;;Total ram usage:        1 bytes
  7272 ;; Hardware stack levels used:    1
  7273 ;; Hardware stack levels required when called:   11
  7274 ;; This function calls:
  7275 ;;		_Console_PrintChar
  7276 ;; This function is called by:
  7277 ;;		_printf
  7278 ;; This function uses a non-reentrant model
  7279 ;;
  7280                           
  7281                           	psect	text23
  7282  0165C8                     __ptext23:
  7283                           	opt stack 0
  7284  0165C8                     _putch:
  7285                           	opt stack 18
  7286                           
  7287                           ; BSR set to: 0
  7288                           ;incstack = 0
  7289                           ;putch@c stored from wreg
  7290  0165C8  0100               	movlb	0	; () banked
  7291  0165CA  6FCE               	movwf	putch@c& (0+255),b
  7292                           
  7293                           ;Console.c: 456: Console_PrintChar(c);
  7294  0165CC  0100               	movlb	0	; () banked
  7295  0165CE  51CE               	movf	putch@c& (0+255),w,b
  7296  0165D0  EC67  F094         	call	_Console_PrintChar
  7297  0165D4  0012               	return		;funcret
  7298  0165D6                     __end_of_putch:
  7299                           	opt stack 0
  7300                           tblptru	equ	0xFF8
  7301                           tblptrh	equ	0xFF7
  7302                           tblptrl	equ	0xFF6
  7303                           tablat	equ	0xFF5
  7304                           prodh	equ	0xFF4
  7305                           prodl	equ	0xFF3
  7306                           postinc0	equ	0xFEE
  7307                           wreg	equ	0xFE8
  7308                           postdec1	equ	0xFE5
  7309                           fsr1h	equ	0xFE2
  7310                           fsr1l	equ	0xFE1
  7311                           indf2	equ	0xFDF
  7312                           postinc2	equ	0xFDE
  7313                           postdec2	equ	0xFDD
  7314                           fsr2h	equ	0xFDA
  7315                           fsr2l	equ	0xFD9
  7316                           status	equ	0xFD8
  7317                           
  7318 ;; *************** function _Console_PrintChar *****************
  7319 ;; Defined at:
  7320 ;;		line 322 in file "Library/Console.c"
  7321 ;; Parameters:    Size  Location     Type
  7322 ;;  pInput          1    wreg     unsigned char 
  7323 ;; Auto vars:     Size  Location     Type
  7324 ;;  pInput          1   19[BANK0 ] unsigned char 
  7325 ;; Return value:  Size  Location     Type
  7326 ;;                  1    wreg      void 
  7327 ;; Registers used:
  7328 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7329 ;; Tracked objects:
  7330 ;;		On entry : 0/0
  7331 ;;		On exit  : 0/0
  7332 ;;		Unchanged: 0/0
  7333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7335 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7336 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7337 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7338 ;;Total ram usage:        4 bytes
  7339 ;; Hardware stack levels used:    1
  7340 ;; Hardware stack levels required when called:   10
  7341 ;; This function calls:
  7342 ;;		_Console_Backspace
  7343 ;;		_Console_FormFeed
  7344 ;;		_Console_IncrementCursor
  7345 ;;		_Console_NewLine
  7346 ;;		_Console_ResetCursor
  7347 ;;		_Console_Tab
  7348 ;; This function is called by:
  7349 ;;		_putch
  7350 ;;		_Console_PrintString
  7351 ;; This function uses a non-reentrant model
  7352 ;;
  7353                           
  7354                           	psect	text24
  7355  0128CE                     __ptext24:
  7356                           	opt stack 0
  7357  0128CE                     _Console_PrintChar:
  7358                           	opt stack 18
  7359                           
  7360                           ;incstack = 0
  7361                           ;Console_PrintChar@pInput stored from wreg
  7362  0128CE  0100               	movlb	0	; () banked
  7363  0128D0  6FCD               	movwf	Console_PrintChar@pInput& (0+255),b
  7364                           
  7365                           ;Console.c: 324: switch(pInput)
  7366  0128D2  D0B1               	goto	l1036
  7367  0128D4                     
  7368                           ;Console.c: 327: case '\n':
  7369                           ;Console.c: 328: Console_NewLine();
  7370  0128D4  EC3B  F0A5         	call	_Console_NewLine	;wreg free
  7371                           
  7372                           ;Console.c: 329: return;
  7373  0128D8  0012               	return	
  7374  0128DA                     
  7375                           ;Console.c: 331: Console_Backspace();
  7376  0128DA  EC60  F0AC         	call	_Console_Backspace	;wreg free
  7377                           
  7378                           ;Console.c: 332: return;
  7379  0128DE  0012               	return	
  7380  0128E0                     
  7381                           ;Console.c: 334: Console_FormFeed();
  7382  0128E0  EC6E  F0A6         	call	_Console_FormFeed	;wreg free
  7383                           
  7384                           ;Console.c: 335: return;
  7385  0128E4  0012               	return	
  7386  0128E6                     
  7387                           ;Console.c: 337: Console_Tab();
  7388  0128E6  ECB9  F09F         	call	_Console_Tab	;wreg free
  7389                           
  7390                           ;Console.c: 338: return;
  7391  0128EA  0012               	return	
  7392  0128EC                     
  7393                           ;Console.c: 340: Console_IncrementCursor();
  7394  0128EC  EC99  F0AB         	call	_Console_IncrementCursor	;wreg free
  7395                           
  7396                           ;Console.c: 341: return;
  7397  0128F0  0012               	return	
  7398  0128F2                     
  7399                           ;Console.c: 343: Console_ResetCursor();
  7400  0128F2  EC9B  F0B1         	call	_Console_ResetCursor	;wreg free
  7401                           
  7402                           ;Console.c: 344: return;
  7403  0128F6  0012               	return	
  7404  0128F8                     
  7405                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  7406                           
  7407                           ;Console.c: 349: default:
  7408  0128F8  C0CD  F0CA         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  7409  0128FC  0E7F               	movlw	127
  7410  0128FE  0100               	movlb	0	; () banked
  7411  012900  17CA               	andwf	??_Console_PrintChar& (0+255),f,b
  7412  012902  0100               	movlb	0	; () banked
  7413  012904  5190               	movf	_lBufferY& (0+255),w,b
  7414  012906  0D14               	mullw	20
  7415  012908  0EAA               	movlw	low _lBuffer
  7416  01290A  0100               	movlb	0	; () banked
  7417  01290C  6FCB               	movwf	(??_Console_PrintChar+1)& (0+255),b
  7418  01290E  0E04               	movlw	high _lBuffer
  7419  012910  0100               	movlb	0	; () banked
  7420  012912  6FCC               	movwf	(??_Console_PrintChar+2)& (0+255),b
  7421  012914  50F3               	movf	prodl,w,c
  7422  012916  0100               	movlb	0	; () banked
  7423  012918  27CB               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  7424  01291A  50F4               	movf	prodh,w,c
  7425  01291C  0100               	movlb	0	; () banked
  7426  01291E  23CC               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  7427  012920  0100               	movlb	0	; () banked
  7428  012922  5191               	movf	_lBufferX& (0+255),w,b
  7429  012924  0D01               	mullw	1
  7430  012926  50F3               	movf	prodl,w,c
  7431  012928  0100               	movlb	0	; () banked
  7432  01292A  25CB               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  7433  01292C  6ED9               	movwf	fsr2l,c
  7434  01292E  50F4               	movf	prodh,w,c
  7435  012930  0100               	movlb	0	; () banked
  7436  012932  21CC               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  7437  012934  6EDA               	movwf	fsr2h,c
  7438  012936  50DF               	movf	indf2,w,c
  7439  012938  0B7F               	andlw	127
  7440  01293A  0100               	movlb	0	; () banked
  7441  01293C  19CA               	xorwf	??_Console_PrintChar& (0+255),w,b
  7442  01293E  B4D8               	btfsc	status,2,c
  7443  012940  D02E               	goto	l1047
  7444                           
  7445                           ; BSR set to: 0
  7446                           ;Console.c: 351: {
  7447                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  7448  012942  0E01               	movlw	1
  7449  012944  0100               	movlb	0	; () banked
  7450  012946  6FFF               	movwf	_change& (0+255),b
  7451                           
  7452                           ; BSR set to: 0
  7453  012948  0100               	movlb	0	; () banked
  7454  01294A  5190               	movf	_lBufferY& (0+255),w,b
  7455  01294C  0D14               	mullw	20
  7456  01294E  0EAA               	movlw	low _lBuffer
  7457  012950  0100               	movlb	0	; () banked
  7458  012952  6FCA               	movwf	??_Console_PrintChar& (0+255),b
  7459  012954  0E04               	movlw	high _lBuffer
  7460  012956  0100               	movlb	0	; () banked
  7461  012958  6FCB               	movwf	(??_Console_PrintChar+1)& (0+255),b
  7462  01295A  50F3               	movf	prodl,w,c
  7463  01295C  0100               	movlb	0	; () banked
  7464  01295E  27CA               	addwf	??_Console_PrintChar& (0+255),f,b
  7465  012960  50F4               	movf	prodh,w,c
  7466  012962  0100               	movlb	0	; () banked
  7467  012964  23CB               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  7468  012966  0100               	movlb	0	; () banked
  7469  012968  5191               	movf	_lBufferX& (0+255),w,b
  7470  01296A  0D01               	mullw	1
  7471  01296C  50F3               	movf	prodl,w,c
  7472  01296E  0100               	movlb	0	; () banked
  7473  012970  25CA               	addwf	??_Console_PrintChar& (0+255),w,b
  7474  012972  6ED9               	movwf	fsr2l,c
  7475  012974  50F4               	movf	prodh,w,c
  7476  012976  0100               	movlb	0	; () banked
  7477  012978  21CB               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  7478  01297A  6EDA               	movwf	fsr2h,c
  7479  01297C  0100               	movlb	0	; () banked
  7480  01297E  51CD               	movf	Console_PrintChar@pInput& (0+255),w,b
  7481  012980  0980               	iorlw	128
  7482  012982  6EDF               	movwf	indf2,c
  7483                           
  7484                           ; BSR set to: 0
  7485                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
  7486  012984  0100               	movlb	0	; () banked
  7487  012986  5190               	movf	_lBufferY& (0+255),w,b
  7488  012988  0D02               	mullw	2
  7489  01298A  0E00               	movlw	low _lCBuffer
  7490  01298C  24F3               	addwf	prodl,w,c
  7491  01298E  6ED9               	movwf	fsr2l,c
  7492  012990  0E03               	movlw	high _lCBuffer
  7493  012992  20F4               	addwfc	prodh,w,c
  7494  012994  6EDA               	movwf	fsr2h,c
  7495  012996  C0FD  FFDE         	movff	_gForecolour,postinc2
  7496  01299A  C0FE  FFDD         	movff	_gForecolour+1,postdec2
  7497  01299E                     l1047:
  7498                           
  7499                           ; BSR set to: 0
  7500                           ;Console.c: 354: }
  7501                           ;Console.c: 368: if(Console_IncrementCursor())
  7502                           
  7503                           ; BSR set to: 0
  7504  01299E  EC99  F0AB         	call	_Console_IncrementCursor	;wreg free
  7505  0129A2  0900               	iorlw	0
  7506  0129A4  B4D8               	btfsc	status,2,c
  7507  0129A6  0012               	return	
  7508                           
  7509                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  7510  0129A8  C0CD  F0CA         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  7511  0129AC  0E7F               	movlw	127
  7512  0129AE  0100               	movlb	0	; () banked
  7513  0129B0  17CA               	andwf	??_Console_PrintChar& (0+255),f,b
  7514  0129B2  0100               	movlb	0	; () banked
  7515  0129B4  5190               	movf	_lBufferY& (0+255),w,b
  7516  0129B6  0D14               	mullw	20
  7517  0129B8  0EAA               	movlw	low _lBuffer
  7518  0129BA  0100               	movlb	0	; () banked
  7519  0129BC  6FCB               	movwf	(??_Console_PrintChar+1)& (0+255),b
  7520  0129BE  0E04               	movlw	high _lBuffer
  7521  0129C0  0100               	movlb	0	; () banked
  7522  0129C2  6FCC               	movwf	(??_Console_PrintChar+2)& (0+255),b
  7523  0129C4  50F3               	movf	prodl,w,c
  7524  0129C6  0100               	movlb	0	; () banked
  7525  0129C8  27CB               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  7526  0129CA  50F4               	movf	prodh,w,c
  7527  0129CC  0100               	movlb	0	; () banked
  7528  0129CE  23CC               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  7529  0129D0  0100               	movlb	0	; () banked
  7530  0129D2  5191               	movf	_lBufferX& (0+255),w,b
  7531  0129D4  0D01               	mullw	1
  7532  0129D6  50F3               	movf	prodl,w,c
  7533  0129D8  0100               	movlb	0	; () banked
  7534  0129DA  25CB               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  7535  0129DC  6ED9               	movwf	fsr2l,c
  7536  0129DE  50F4               	movf	prodh,w,c
  7537  0129E0  0100               	movlb	0	; () banked
  7538  0129E2  21CC               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  7539  0129E4  6EDA               	movwf	fsr2h,c
  7540  0129E6  50DF               	movf	indf2,w,c
  7541  0129E8  0B7F               	andlw	127
  7542  0129EA  0100               	movlb	0	; () banked
  7543  0129EC  19CA               	xorwf	??_Console_PrintChar& (0+255),w,b
  7544  0129EE  B4D8               	btfsc	status,2,c
  7545  0129F0  0012               	return	
  7546                           
  7547                           ; BSR set to: 0
  7548                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  7549  0129F2  0E01               	movlw	1
  7550  0129F4  0100               	movlb	0	; () banked
  7551  0129F6  6FFF               	movwf	_change& (0+255),b
  7552                           
  7553                           ; BSR set to: 0
  7554  0129F8  0100               	movlb	0	; () banked
  7555  0129FA  5190               	movf	_lBufferY& (0+255),w,b
  7556  0129FC  0D14               	mullw	20
  7557  0129FE  0EAA               	movlw	low _lBuffer
  7558  012A00  0100               	movlb	0	; () banked
  7559  012A02  6FCA               	movwf	??_Console_PrintChar& (0+255),b
  7560  012A04  0E04               	movlw	high _lBuffer
  7561  012A06  0100               	movlb	0	; () banked
  7562  012A08  6FCB               	movwf	(??_Console_PrintChar+1)& (0+255),b
  7563  012A0A  50F3               	movf	prodl,w,c
  7564  012A0C  0100               	movlb	0	; () banked
  7565  012A0E  27CA               	addwf	??_Console_PrintChar& (0+255),f,b
  7566  012A10  50F4               	movf	prodh,w,c
  7567  012A12  0100               	movlb	0	; () banked
  7568  012A14  23CB               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  7569  012A16  0100               	movlb	0	; () banked
  7570  012A18  5191               	movf	_lBufferX& (0+255),w,b
  7571  012A1A  0D01               	mullw	1
  7572  012A1C  50F3               	movf	prodl,w,c
  7573  012A1E  0100               	movlb	0	; () banked
  7574  012A20  25CA               	addwf	??_Console_PrintChar& (0+255),w,b
  7575  012A22  6ED9               	movwf	fsr2l,c
  7576  012A24  50F4               	movf	prodh,w,c
  7577  012A26  0100               	movlb	0	; () banked
  7578  012A28  21CB               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  7579  012A2A  6EDA               	movwf	fsr2h,c
  7580  012A2C  0100               	movlb	0	; () banked
  7581  012A2E  51CD               	movf	Console_PrintChar@pInput& (0+255),w,b
  7582  012A30  0980               	iorlw	128
  7583  012A32  6EDF               	movwf	indf2,c
  7584                           
  7585                           ; BSR set to: 0
  7586                           ;Console.c: 372: };
  7587                           
  7588                           ; BSR set to: 0
  7589                           ;Console.c: 371: return;
  7590                           
  7591                           ; BSR set to: 0
  7592                           
  7593                           ; BSR set to: 0
  7594  012A34  0012               	return	
  7595  012A36                     l1036:
  7596                           
  7597                           ; BSR set to: 0
  7598  012A36  0100               	movlb	0	; () banked
  7599  012A38  51CD               	movf	Console_PrintChar@pInput& (0+255),w,b
  7600                           
  7601                           ; Switch size 1, requested type "space"
  7602                           ; Number of cases is 8, Range of values is 7 to 35
  7603                           ; switch strategies available:
  7604                           ; Name         Instructions Cycles
  7605                           ; simple_byte           25    13 (average)
  7606                           ;	Chosen strategy is simple_byte
  7607  012A3A  0A07               	xorlw	7	; case 7
  7608  012A3C  B4D8               	btfsc	status,2,c
  7609  012A3E  D756               	goto	l1043
  7610  012A40  0A0F               	xorlw	15	; case 8
  7611  012A42  B4D8               	btfsc	status,2,c
  7612  012A44  D74A               	goto	l1040
  7613  012A46  0A01               	xorlw	1	; case 9
  7614  012A48  B4D8               	btfsc	status,2,c
  7615  012A4A  D74D               	goto	l1042
  7616  012A4C  0A03               	xorlw	3	; case 10
  7617  012A4E  B4D8               	btfsc	status,2,c
  7618  012A50  D741               	goto	l1037
  7619  012A52  0A06               	xorlw	6	; case 12
  7620  012A54  B4D8               	btfsc	status,2,c
  7621  012A56  D744               	goto	l1041
  7622  012A58  0A01               	xorlw	1	; case 13
  7623  012A5A  B4D8               	btfsc	status,2,c
  7624  012A5C  D73B               	goto	l1037
  7625  012A5E  0A2D               	xorlw	45	; case 32
  7626  012A60  B4D8               	btfsc	status,2,c
  7627  012A62  D74A               	goto	l1045
  7628  012A64  0A03               	xorlw	3	; case 35
  7629  012A66  B4D8               	btfsc	status,2,c
  7630  012A68  D744               	goto	l1044
  7631  012A6A  D746               	goto	l1045
  7632  012A6C                     __end_of_Console_PrintChar:
  7633                           	opt stack 0
  7634                           tblptru	equ	0xFF8
  7635                           tblptrh	equ	0xFF7
  7636                           tblptrl	equ	0xFF6
  7637                           tablat	equ	0xFF5
  7638                           prodh	equ	0xFF4
  7639                           prodl	equ	0xFF3
  7640                           postinc0	equ	0xFEE
  7641                           wreg	equ	0xFE8
  7642                           postdec1	equ	0xFE5
  7643                           fsr1h	equ	0xFE2
  7644                           fsr1l	equ	0xFE1
  7645                           indf2	equ	0xFDF
  7646                           postinc2	equ	0xFDE
  7647                           postdec2	equ	0xFDD
  7648                           fsr2h	equ	0xFDA
  7649                           fsr2l	equ	0xFD9
  7650                           status	equ	0xFD8
  7651                           
  7652 ;; *************** function _Console_Tab *****************
  7653 ;; Defined at:
  7654 ;;		line 260 in file "Library/Console.c"
  7655 ;; Parameters:    Size  Location     Type
  7656 ;;		None
  7657 ;; Auto vars:     Size  Location     Type
  7658 ;;  c               1   15[BANK0 ] unsigned char 
  7659 ;;  i               1   14[BANK0 ] unsigned char 
  7660 ;;  t               1   13[BANK0 ] unsigned char 
  7661 ;; Return value:  Size  Location     Type
  7662 ;;                  1    wreg      void 
  7663 ;; Registers used:
  7664 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7665 ;; Tracked objects:
  7666 ;;		On entry : 0/0
  7667 ;;		On exit  : 0/0
  7668 ;;		Unchanged: 0/0
  7669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7671 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7672 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7673 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7674 ;;Total ram usage:        8 bytes
  7675 ;; Hardware stack levels used:    1
  7676 ;; Hardware stack levels required when called:    9
  7677 ;; This function calls:
  7678 ;;		_Console_ClearCursor
  7679 ;;		_Console_IncrementCursor
  7680 ;;		___awdiv
  7681 ;; This function is called by:
  7682 ;;		_Console_PrintChar
  7683 ;; This function uses a non-reentrant model
  7684 ;;
  7685                           
  7686                           	psect	text25
  7687  013F72                     __ptext25:
  7688                           	opt stack 0
  7689  013F72                     _Console_Tab:
  7690                           	opt stack 18
  7691                           
  7692                           ;Console.c: 262: UINT8 i = 0;
  7693                           
  7694                           ;incstack = 0
  7695  013F72  0E00               	movlw	0
  7696  013F74  0100               	movlb	0	; () banked
  7697  013F76  6FC8               	movwf	Console_Tab@i& (0+255),b
  7698                           
  7699                           ; BSR set to: 0
  7700                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
  7701  013F78  0EFA               	movlw	250
  7702  013F7A  2447               	addwf	_gCursor,w,c
  7703  013F7C  0100               	movlb	0	; () banked
  7704  013F7E  6FBA               	movwf	___awdiv@dividend& (0+255),b
  7705  013F80  0EFF               	movlw	255
  7706  013F82  2048               	addwfc	_gCursor+1,w,c
  7707  013F84  0100               	movlb	0	; () banked
  7708  013F86  6FBB               	movwf	(___awdiv@dividend+1)& (0+255),b
  7709  013F88  0E00               	movlw	0
  7710  013F8A  0100               	movlb	0	; () banked
  7711  013F8C  6FBD               	movwf	(___awdiv@divisor+1)& (0+255),b
  7712  013F8E  0E06               	movlw	6
  7713  013F90  6FBC               	movwf	___awdiv@divisor& (0+255),b
  7714  013F92  EC7A  F0A0         	call	___awdiv	;wreg free
  7715  013F96  0100               	movlb	0	; () banked
  7716  013F98  51BA               	movf	?___awdiv& (0+255),w,b
  7717  013F9A  0100               	movlb	0	; () banked
  7718  013F9C  6FC9               	movwf	Console_Tab@c& (0+255),b
  7719                           
  7720                           ; BSR set to: 0
  7721                           ;Console.c: 264: UINT8 t = c/4;
  7722  013F9E  C0C9  F0BA         	movff	Console_Tab@c,___awdiv@dividend
  7723  013FA2  0100               	movlb	0	; () banked
  7724  013FA4  6BBB               	clrf	(___awdiv@dividend+1)& (0+255),b
  7725  013FA6  0E00               	movlw	0
  7726  013FA8  0100               	movlb	0	; () banked
  7727  013FAA  6FBD               	movwf	(___awdiv@divisor+1)& (0+255),b
  7728  013FAC  0E04               	movlw	4
  7729  013FAE  6FBC               	movwf	___awdiv@divisor& (0+255),b
  7730  013FB0  EC7A  F0A0         	call	___awdiv	;wreg free
  7731  013FB4  0100               	movlb	0	; () banked
  7732  013FB6  51BA               	movf	?___awdiv& (0+255),w,b
  7733  013FB8  0100               	movlb	0	; () banked
  7734  013FBA  6FC7               	movwf	Console_Tab@t& (0+255),b
  7735                           
  7736                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
  7737  013FBC  0E00               	movlw	0
  7738  013FBE  0100               	movlb	0	; () banked
  7739  013FC0  6FC8               	movwf	Console_Tab@i& (0+255),b
  7740  013FC2  D006               	goto	l1009
  7741  013FC4                     
  7742                           ; BSR set to: 0
  7743                           ;Console.c: 266: {
  7744                           ;Console.c: 267: Console_ClearCursor();
  7745                           
  7746                           ; BSR set to: 0
  7747  013FC4  EC14  F0AF         	call	_Console_ClearCursor	;wreg free
  7748                           
  7749                           ;Console.c: 268: Console_IncrementCursor();
  7750  013FC8  EC99  F0AB         	call	_Console_IncrementCursor	;wreg free
  7751  013FCC  0100               	movlb	0	; () banked
  7752  013FCE  2BC8               	incf	Console_Tab@i& (0+255),f,b
  7753  013FD0                     l1009:
  7754                           
  7755                           ; BSR set to: 0
  7756                           
  7757                           ; BSR set to: 0
  7758  013FD0  0100               	movlb	0	; () banked
  7759  013FD2  51C7               	movf	Console_Tab@t& (0+255),w,b
  7760  013FD4  0D04               	mullw	4
  7761  013FD6  1EF3               	comf	prodl,f,c
  7762  013FD8  1EF4               	comf	prodh,f,c
  7763  013FDA  4AF3               	infsnz	prodl,f,c
  7764  013FDC  2AF4               	incf	prodh,f,c
  7765  013FDE  0100               	movlb	0	; () banked
  7766  013FE0  51C9               	movf	Console_Tab@c& (0+255),w,b
  7767  013FE2  0100               	movlb	0	; () banked
  7768  013FE4  6FC2               	movwf	??_Console_Tab& (0+255),b
  7769  013FE6  6BC3               	clrf	(??_Console_Tab+1)& (0+255),b
  7770  013FE8  50F3               	movf	prodl,w,c
  7771  013FEA  0100               	movlb	0	; () banked
  7772  013FEC  27C2               	addwf	??_Console_Tab& (0+255),f,b
  7773  013FEE  50F4               	movf	prodh,w,c
  7774  013FF0  0100               	movlb	0	; () banked
  7775  013FF2  23C3               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  7776  013FF4  0100               	movlb	0	; () banked
  7777  013FF6  1FC2               	comf	??_Console_Tab& (0+255),f,b
  7778  013FF8  1FC3               	comf	(??_Console_Tab+1)& (0+255),f,b
  7779  013FFA  4BC2               	infsnz	??_Console_Tab& (0+255),f,b
  7780  013FFC  2BC3               	incf	(??_Console_Tab+1)& (0+255),f,b
  7781  013FFE  0E04               	movlw	4
  7782  014000  0100               	movlb	0	; () banked
  7783  014002  27C2               	addwf	??_Console_Tab& (0+255),f,b
  7784  014004  0E00               	movlw	0
  7785  014006  23C3               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  7786  014008  0100               	movlb	0	; () banked
  7787  01400A  51C8               	movf	Console_Tab@i& (0+255),w,b
  7788  01400C  0100               	movlb	0	; () banked
  7789  01400E  6FC4               	movwf	(??_Console_Tab+2)& (0+255),b
  7790  014010  6BC5               	clrf	(??_Console_Tab+3)& (0+255),b
  7791  014012  0100               	movlb	0	; () banked
  7792  014014  51C2               	movf	??_Console_Tab& (0+255),w,b
  7793  014016  0100               	movlb	0	; () banked
  7794  014018  5DC4               	subwf	(??_Console_Tab+2)& (0+255),w,b
  7795  01401A  0100               	movlb	0	; () banked
  7796  01401C  51C5               	movf	(??_Console_Tab+3)& (0+255),w,b
  7797  01401E  0A80               	xorlw	128
  7798  014020  0100               	movlb	0	; () banked
  7799  014022  6FC6               	movwf	(??_Console_Tab+4)& (0+255),b
  7800  014024  0100               	movlb	0	; () banked
  7801  014026  51C3               	movf	(??_Console_Tab+1)& (0+255),w,b
  7802  014028  0A80               	xorlw	128
  7803  01402A  0100               	movlb	0	; () banked
  7804  01402C  59C6               	subwfb	(??_Console_Tab+4)& (0+255),w,b
  7805  01402E  B0D8               	btfsc	status,0,c
  7806  014030  0012               	return	
  7807  014032  D7C8               	goto	l1010
  7808  014034                     __end_of_Console_Tab:
  7809                           	opt stack 0
  7810                           tblptru	equ	0xFF8
  7811                           tblptrh	equ	0xFF7
  7812                           tblptrl	equ	0xFF6
  7813                           tablat	equ	0xFF5
  7814                           prodh	equ	0xFF4
  7815                           prodl	equ	0xFF3
  7816                           postinc0	equ	0xFEE
  7817                           wreg	equ	0xFE8
  7818                           postdec1	equ	0xFE5
  7819                           fsr1h	equ	0xFE2
  7820                           fsr1l	equ	0xFE1
  7821                           indf2	equ	0xFDF
  7822                           postinc2	equ	0xFDE
  7823                           postdec2	equ	0xFDD
  7824                           fsr2h	equ	0xFDA
  7825                           fsr2l	equ	0xFD9
  7826                           status	equ	0xFD8
  7827                           
  7828 ;; *************** function ___awdiv *****************
  7829 ;; Defined at:
  7830 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
  7831 ;; Parameters:    Size  Location     Type
  7832 ;;  dividend        2    0[BANK0 ] int 
  7833 ;;  divisor         2    2[BANK0 ] int 
  7834 ;; Auto vars:     Size  Location     Type
  7835 ;;  quotient        2    6[BANK0 ] int 
  7836 ;;  sign            1    5[BANK0 ] unsigned char 
  7837 ;;  counter         1    4[BANK0 ] unsigned char 
  7838 ;; Return value:  Size  Location     Type
  7839 ;;                  2    0[BANK0 ] int 
  7840 ;; Registers used:
  7841 ;;		wreg, status,2, status,0
  7842 ;; Tracked objects:
  7843 ;;		On entry : 0/0
  7844 ;;		On exit  : 0/0
  7845 ;;		Unchanged: 0/0
  7846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7847 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7848 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7850 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7851 ;;Total ram usage:        8 bytes
  7852 ;; Hardware stack levels used:    1
  7853 ;; Hardware stack levels required when called:    7
  7854 ;; This function calls:
  7855 ;;		Nothing
  7856 ;; This function is called by:
  7857 ;;		_Console_Tab
  7858 ;; This function uses a non-reentrant model
  7859 ;;
  7860                           
  7861                           	psect	text26
  7862  0140F4                     __ptext26:
  7863                           	opt stack 0
  7864  0140F4                     ___awdiv:
  7865                           	opt stack 19
  7866                           
  7867                           ; BSR set to: 0
  7868                           ;incstack = 0
  7869  0140F4  0E00               	movlw	0
  7870  0140F6  0100               	movlb	0	; () banked
  7871  0140F8  6FBF               	movwf	___awdiv@sign& (0+255),b
  7872                           
  7873                           ; BSR set to: 0
  7874  0140FA  0100               	movlb	0	; () banked
  7875  0140FC  AFBD               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  7876  0140FE  D008               	goto	l2611
  7877                           
  7878                           ; BSR set to: 0
  7879  014100  0100               	movlb	0	; () banked
  7880  014102  6DBC               	negf	___awdiv@divisor& (0+255),b
  7881  014104  1FBD               	comf	(___awdiv@divisor+1)& (0+255),f,b
  7882  014106  B0D8               	btfsc	status,0,c
  7883  014108  2BBD               	incf	(___awdiv@divisor+1)& (0+255),f,b
  7884                           
  7885                           ; BSR set to: 0
  7886  01410A  0E01               	movlw	1
  7887  01410C  0100               	movlb	0	; () banked
  7888  01410E  6FBF               	movwf	___awdiv@sign& (0+255),b
  7889  014110                     l2611:
  7890                           
  7891                           ; BSR set to: 0
  7892                           
  7893                           ; BSR set to: 0
  7894  014110  0100               	movlb	0	; () banked
  7895  014112  AFBB               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  7896  014114  D008               	goto	l2612
  7897                           
  7898                           ; BSR set to: 0
  7899  014116  0100               	movlb	0	; () banked
  7900  014118  6DBA               	negf	___awdiv@dividend& (0+255),b
  7901  01411A  1FBB               	comf	(___awdiv@dividend+1)& (0+255),f,b
  7902  01411C  B0D8               	btfsc	status,0,c
  7903  01411E  2BBB               	incf	(___awdiv@dividend+1)& (0+255),f,b
  7904                           
  7905                           ; BSR set to: 0
  7906  014120  0E01               	movlw	1
  7907  014122  0100               	movlb	0	; () banked
  7908  014124  1BBF               	xorwf	___awdiv@sign& (0+255),f,b
  7909  014126                     l2612:
  7910                           
  7911                           ; BSR set to: 0
  7912                           
  7913                           ; BSR set to: 0
  7914  014126  0E00               	movlw	0
  7915  014128  0100               	movlb	0	; () banked
  7916  01412A  6FC1               	movwf	(___awdiv@quotient+1)& (0+255),b
  7917  01412C  0E00               	movlw	0
  7918  01412E  6FC0               	movwf	___awdiv@quotient& (0+255),b
  7919                           
  7920                           ; BSR set to: 0
  7921  014130  0100               	movlb	0	; () banked
  7922  014132  51BC               	movf	___awdiv@divisor& (0+255),w,b
  7923  014134  0100               	movlb	0	; () banked
  7924  014136  11BD               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  7925  014138  B4D8               	btfsc	status,2,c
  7926  01413A  D02C               	goto	l2619
  7927                           
  7928                           ; BSR set to: 0
  7929  01413C  0E01               	movlw	1
  7930  01413E  0100               	movlb	0	; () banked
  7931  014140  6FBE               	movwf	___awdiv@counter& (0+255),b
  7932  014142  D006               	goto	l2614
  7933  014144                     
  7934                           ; BSR set to: 0
  7935                           
  7936                           ; BSR set to: 0
  7937  014144  0100               	movlb	0	; () banked
  7938  014146  90D8               	bcf	status,0,c
  7939  014148  37BC               	rlcf	___awdiv@divisor& (0+255),f,b
  7940  01414A  37BD               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  7941  01414C  0100               	movlb	0	; () banked
  7942  01414E  2BBE               	incf	___awdiv@counter& (0+255),f,b
  7943  014150                     l2614:
  7944                           
  7945                           ; BSR set to: 0
  7946                           
  7947                           ; BSR set to: 0
  7948  014150  0100               	movlb	0	; () banked
  7949  014152  AFBD               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  7950  014154  D7F7               	goto	l2615
  7951  014156                     u9090:
  7952                           
  7953                           ; BSR set to: 0
  7954                           
  7955                           ; BSR set to: 0
  7956                           
  7957                           ; BSR set to: 0
  7958  014156  0100               	movlb	0	; () banked
  7959  014158  90D8               	bcf	status,0,c
  7960  01415A  37C0               	rlcf	___awdiv@quotient& (0+255),f,b
  7961  01415C  37C1               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  7962                           
  7963                           ; BSR set to: 0
  7964  01415E  0100               	movlb	0	; () banked
  7965  014160  51BC               	movf	___awdiv@divisor& (0+255),w,b
  7966  014162  0100               	movlb	0	; () banked
  7967  014164  5DBA               	subwf	___awdiv@dividend& (0+255),w,b
  7968  014166  0100               	movlb	0	; () banked
  7969  014168  51BD               	movf	(___awdiv@divisor+1)& (0+255),w,b
  7970  01416A  0100               	movlb	0	; () banked
  7971  01416C  59BB               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  7972  01416E  A0D8               	btfss	status,0,c
  7973  014170  D00A               	goto	l2618
  7974                           
  7975                           ; BSR set to: 0
  7976  014172  0100               	movlb	0	; () banked
  7977  014174  51BC               	movf	___awdiv@divisor& (0+255),w,b
  7978  014176  0100               	movlb	0	; () banked
  7979  014178  5FBA               	subwf	___awdiv@dividend& (0+255),f,b
  7980  01417A  0100               	movlb	0	; () banked
  7981  01417C  51BD               	movf	(___awdiv@divisor+1)& (0+255),w,b
  7982  01417E  0100               	movlb	0	; () banked
  7983  014180  5BBB               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  7984                           
  7985                           ; BSR set to: 0
  7986  014182  0100               	movlb	0	; () banked
  7987  014184  81C0               	bsf	___awdiv@quotient& (0+255),0,b
  7988  014186                     l2618:
  7989                           
  7990                           ; BSR set to: 0
  7991                           
  7992                           ; BSR set to: 0
  7993  014186  0100               	movlb	0	; () banked
  7994  014188  90D8               	bcf	status,0,c
  7995  01418A  33BD               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  7996  01418C  33BC               	rrcf	___awdiv@divisor& (0+255),f,b
  7997                           
  7998                           ; BSR set to: 0
  7999  01418E  0100               	movlb	0	; () banked
  8000  014190  2FBE               	decfsz	___awdiv@counter& (0+255),f,b
  8001  014192  D7E1               	goto	u9090
  8002  014194                     l2619:
  8003                           
  8004                           ; BSR set to: 0
  8005                           
  8006                           ; BSR set to: 0
  8007                           
  8008                           ; BSR set to: 0
  8009  014194  0100               	movlb	0	; () banked
  8010  014196  51BF               	movf	___awdiv@sign& (0+255),w,b
  8011  014198  0100               	movlb	0	; () banked
  8012  01419A  B4D8               	btfsc	status,2,c
  8013  01419C  D005               	goto	l2620
  8014                           
  8015                           ; BSR set to: 0
  8016  01419E  0100               	movlb	0	; () banked
  8017  0141A0  6DC0               	negf	___awdiv@quotient& (0+255),b
  8018  0141A2  1FC1               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8019  0141A4  B0D8               	btfsc	status,0,c
  8020  0141A6  2BC1               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8021  0141A8                     l2620:
  8022                           
  8023                           ; BSR set to: 0
  8024                           
  8025                           ; BSR set to: 0
  8026  0141A8  C0C0  F0BA         	movff	___awdiv@quotient,?___awdiv
  8027  0141AC  C0C1  F0BB         	movff	___awdiv@quotient+1,?___awdiv+1
  8028  0141B0  0012               	return	
  8029  0141B2                     __end_of___awdiv:
  8030                           	opt stack 0
  8031                           tblptru	equ	0xFF8
  8032                           tblptrh	equ	0xFF7
  8033                           tblptrl	equ	0xFF6
  8034                           tablat	equ	0xFF5
  8035                           prodh	equ	0xFF4
  8036                           prodl	equ	0xFF3
  8037                           postinc0	equ	0xFEE
  8038                           wreg	equ	0xFE8
  8039                           postdec1	equ	0xFE5
  8040                           fsr1h	equ	0xFE2
  8041                           fsr1l	equ	0xFE1
  8042                           indf2	equ	0xFDF
  8043                           postinc2	equ	0xFDE
  8044                           postdec2	equ	0xFDD
  8045                           fsr2h	equ	0xFDA
  8046                           fsr2l	equ	0xFD9
  8047                           status	equ	0xFD8
  8048                           
  8049 ;; *************** function _Console_IncrementCursor *****************
  8050 ;; Defined at:
  8051 ;;		line 243 in file "Library/Console.c"
  8052 ;; Parameters:    Size  Location     Type
  8053 ;;		None
  8054 ;; Auto vars:     Size  Location     Type
  8055 ;;		None
  8056 ;; Return value:  Size  Location     Type
  8057 ;;                  1    wreg      unsigned char 
  8058 ;; Registers used:
  8059 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8060 ;; Tracked objects:
  8061 ;;		On entry : 0/0
  8062 ;;		On exit  : 0/0
  8063 ;;		Unchanged: 0/0
  8064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8067 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8068 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8069 ;;Total ram usage:        2 bytes
  8070 ;; Hardware stack levels used:    1
  8071 ;; Hardware stack levels required when called:    8
  8072 ;; This function calls:
  8073 ;;		_Console_FormFeed
  8074 ;;		_Console_NewLine
  8075 ;; This function is called by:
  8076 ;;		_Console_Tab
  8077 ;;		_Console_PrintChar
  8078 ;; This function uses a non-reentrant model
  8079 ;;
  8080                           
  8081                           	psect	text27
  8082  015732                     __ptext27:
  8083                           	opt stack 0
  8084  015732                     _Console_IncrementCursor:
  8085                           	opt stack 18
  8086                           
  8087                           ;Console.c: 246: lBufferX += 1;
  8088                           
  8089                           ; BSR set to: 0
  8090                           ;incstack = 0
  8091  015732  0100               	movlb	0	; () banked
  8092  015734  2B91               	incf	_lBufferX& (0+255),f,b
  8093                           
  8094                           ; BSR set to: 0
  8095                           ;Console.c: 248: gCursor.x += 6;
  8096  015736  0E06               	movlw	6
  8097  015738  2647               	addwf	_gCursor,f,c
  8098  01573A  0E00               	movlw	0
  8099  01573C  2248               	addwfc	_gCursor+1,f,c
  8100                           
  8101                           ; BSR set to: 0
  8102                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
  8103  01573E  0E06               	movlw	6
  8104  015740  2447               	addwf	_gCursor,w,c
  8105  015742  0100               	movlb	0	; () banked
  8106  015744  6FBE               	movwf	??_Console_IncrementCursor& (0+255),b
  8107  015746  0E00               	movlw	0
  8108  015748  2048               	addwfc	_gCursor+1,w,c
  8109  01574A  0100               	movlb	0	; () banked
  8110  01574C  6FBF               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  8111  01574E  0100               	movlb	0	; () banked
  8112  015750  BFBF               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  8113  015752  D009               	goto	l1004
  8114  015754  0100               	movlb	0	; () banked
  8115  015756  51BF               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  8116  015758  E104               	bnz	u8950
  8117  01575A  0E80               	movlw	128
  8118  01575C  0100               	movlb	0	; () banked
  8119  01575E  5DBE               	subwf	??_Console_IncrementCursor& (0+255),w,b
  8120  015760  B0D8               	btfsc	status,0,c
  8121  015762                     u8950:
  8122                           
  8123                           ; BSR set to: 0
  8124                           ;Console.c: 250: Console_NewLine();
  8125  015762  EC3B  F0A5         	call	_Console_NewLine	;wreg free
  8126  015766                     l1004:
  8127                           
  8128                           ;Console.c: 251: if (gCursor.y + 8>= 128)
  8129  015766  0E08               	movlw	8
  8130  015768  2449               	addwf	_gCursor+2,w,c
  8131  01576A  0100               	movlb	0	; () banked
  8132  01576C  6FBE               	movwf	??_Console_IncrementCursor& (0+255),b
  8133  01576E  0E00               	movlw	0
  8134  015770  204A               	addwfc	_gCursor+3,w,c
  8135  015772  0100               	movlb	0	; () banked
  8136  015774  6FBF               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  8137  015776  0100               	movlb	0	; () banked
  8138  015778  BFBF               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  8139  01577A  D00C               	goto	l1005
  8140  01577C  0100               	movlb	0	; () banked
  8141  01577E  51BF               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  8142  015780  E105               	bnz	u8960
  8143  015782  0E80               	movlw	128
  8144  015784  0100               	movlb	0	; () banked
  8145  015786  5DBE               	subwf	??_Console_IncrementCursor& (0+255),w,b
  8146  015788  A0D8               	btfss	status,0,c
  8147  01578A  D004               	goto	l1005
  8148  01578C                     u8960:
  8149                           
  8150                           ; BSR set to: 0
  8151                           ;Console.c: 252: {
  8152                           ;Console.c: 253: Console_FormFeed();
  8153  01578C  EC6E  F0A6         	call	_Console_FormFeed	;wreg free
  8154                           
  8155                           ;Console.c: 254: return 1;
  8156  015790  0E01               	movlw	1
  8157  015792  0012               	return	
  8158  015794                     l1005:
  8159                           
  8160                           ;Console.c: 255: }
  8161                           ;Console.c: 257: return 0;
  8162  015794  0E00               	movlw	0
  8163  015796  0012               	return	
  8164  015798                     __end_of_Console_IncrementCursor:
  8165                           	opt stack 0
  8166                           tblptru	equ	0xFF8
  8167                           tblptrh	equ	0xFF7
  8168                           tblptrl	equ	0xFF6
  8169                           tablat	equ	0xFF5
  8170                           prodh	equ	0xFF4
  8171                           prodl	equ	0xFF3
  8172                           postinc0	equ	0xFEE
  8173                           wreg	equ	0xFE8
  8174                           postdec1	equ	0xFE5
  8175                           fsr1h	equ	0xFE2
  8176                           fsr1l	equ	0xFE1
  8177                           indf2	equ	0xFDF
  8178                           postinc2	equ	0xFDE
  8179                           postdec2	equ	0xFDD
  8180                           fsr2h	equ	0xFDA
  8181                           fsr2l	equ	0xFD9
  8182                           status	equ	0xFD8
  8183                           
  8184 ;; *************** function _Console_NewLine *****************
  8185 ;; Defined at:
  8186 ;;		line 175 in file "Library/Console.c"
  8187 ;; Parameters:    Size  Location     Type
  8188 ;;		None
  8189 ;; Auto vars:     Size  Location     Type
  8190 ;;		None
  8191 ;; Return value:  Size  Location     Type
  8192 ;;                  1    wreg      void 
  8193 ;; Registers used:
  8194 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8195 ;; Tracked objects:
  8196 ;;		On entry : 0/0
  8197 ;;		On exit  : 0/0
  8198 ;;		Unchanged: 0/0
  8199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8202 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8203 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8204 ;;Total ram usage:        2 bytes
  8205 ;; Hardware stack levels used:    1
  8206 ;; Hardware stack levels required when called:    7
  8207 ;; This function calls:
  8208 ;;		Nothing
  8209 ;; This function is called by:
  8210 ;;		_Console_IncrementCursor
  8211 ;;		_Console_PrintChar
  8212 ;; This function uses a non-reentrant model
  8213 ;;
  8214                           
  8215                           	psect	text28
  8216  014A76                     __ptext28:
  8217                           	opt stack 0
  8218  014A76                     _Console_NewLine:
  8219                           	opt stack 18
  8220                           
  8221                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
  8222                           
  8223                           ;incstack = 0
  8224  014A76  D03E               	goto	l983
  8225  014A78                     
  8226                           ;Console.c: 179: {
  8227                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
  8228  014A78  0100               	movlb	0	; () banked
  8229  014A7A  5190               	movf	_lBufferY& (0+255),w,b
  8230  014A7C  0D14               	mullw	20
  8231  014A7E  0EAA               	movlw	low _lBuffer
  8232  014A80  0100               	movlb	0	; () banked
  8233  014A82  6FBA               	movwf	??_Console_NewLine& (0+255),b
  8234  014A84  0E04               	movlw	high _lBuffer
  8235  014A86  0100               	movlb	0	; () banked
  8236  014A88  6FBB               	movwf	(??_Console_NewLine+1)& (0+255),b
  8237  014A8A  50F3               	movf	prodl,w,c
  8238  014A8C  0100               	movlb	0	; () banked
  8239  014A8E  27BA               	addwf	??_Console_NewLine& (0+255),f,b
  8240  014A90  50F4               	movf	prodh,w,c
  8241  014A92  0100               	movlb	0	; () banked
  8242  014A94  23BB               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  8243  014A96  0100               	movlb	0	; () banked
  8244  014A98  5191               	movf	_lBufferX& (0+255),w,b
  8245  014A9A  0D01               	mullw	1
  8246  014A9C  50F3               	movf	prodl,w,c
  8247  014A9E  0100               	movlb	0	; () banked
  8248  014AA0  25BA               	addwf	??_Console_NewLine& (0+255),w,b
  8249  014AA2  6ED9               	movwf	fsr2l,c
  8250  014AA4  50F4               	movf	prodh,w,c
  8251  014AA6  0100               	movlb	0	; () banked
  8252  014AA8  21BB               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  8253  014AAA  6EDA               	movwf	fsr2h,c
  8254  014AAC  50DF               	movf	indf2,w,c
  8255  014AAE  B4D8               	btfsc	status,2,c
  8256  014AB0  D01F               	goto	l985
  8257                           
  8258                           ; BSR set to: 0
  8259                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
  8260  014AB2  0E01               	movlw	1
  8261  014AB4  0100               	movlb	0	; () banked
  8262  014AB6  6FFF               	movwf	_change& (0+255),b
  8263                           
  8264                           ; BSR set to: 0
  8265  014AB8  0100               	movlb	0	; () banked
  8266  014ABA  5190               	movf	_lBufferY& (0+255),w,b
  8267  014ABC  0D14               	mullw	20
  8268  014ABE  0EAA               	movlw	low _lBuffer
  8269  014AC0  0100               	movlb	0	; () banked
  8270  014AC2  6FBA               	movwf	??_Console_NewLine& (0+255),b
  8271  014AC4  0E04               	movlw	high _lBuffer
  8272  014AC6  0100               	movlb	0	; () banked
  8273  014AC8  6FBB               	movwf	(??_Console_NewLine+1)& (0+255),b
  8274  014ACA  50F3               	movf	prodl,w,c
  8275  014ACC  0100               	movlb	0	; () banked
  8276  014ACE  27BA               	addwf	??_Console_NewLine& (0+255),f,b
  8277  014AD0  50F4               	movf	prodh,w,c
  8278  014AD2  0100               	movlb	0	; () banked
  8279  014AD4  23BB               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  8280  014AD6  0100               	movlb	0	; () banked
  8281  014AD8  5191               	movf	_lBufferX& (0+255),w,b
  8282  014ADA  0D01               	mullw	1
  8283  014ADC  50F3               	movf	prodl,w,c
  8284  014ADE  0100               	movlb	0	; () banked
  8285  014AE0  25BA               	addwf	??_Console_NewLine& (0+255),w,b
  8286  014AE2  6ED9               	movwf	fsr2l,c
  8287  014AE4  50F4               	movf	prodh,w,c
  8288  014AE6  0100               	movlb	0	; () banked
  8289  014AE8  21BB               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  8290  014AEA  6EDA               	movwf	fsr2h,c
  8291  014AEC  0E80               	movlw	128
  8292  014AEE  6EDF               	movwf	indf2,c
  8293  014AF0                     l985:
  8294                           
  8295                           ; BSR set to: 0
  8296                           ;Console.c: 182: lBufferX ++;
  8297                           
  8298                           ; BSR set to: 0
  8299  014AF0  0100               	movlb	0	; () banked
  8300  014AF2  2B91               	incf	_lBufferX& (0+255),f,b
  8301  014AF4                     l983:
  8302                           
  8303                           ; BSR set to: 0
  8304  014AF4  0E13               	movlw	19
  8305  014AF6  0100               	movlb	0	; () banked
  8306  014AF8  6591               	cpfsgt	_lBufferX& (0+255),b
  8307  014AFA  D7BE               	goto	l984
  8308                           
  8309                           ; BSR set to: 0
  8310                           ;Console.c: 183: }
  8311                           ;Console.c: 185: lBufferX = 0;
  8312                           
  8313                           ; BSR set to: 0
  8314  014AFC  0E00               	movlw	0
  8315  014AFE  0100               	movlb	0	; () banked
  8316  014B00  6F91               	movwf	_lBufferX& (0+255),b
  8317                           
  8318                           ; BSR set to: 0
  8319                           ;Console.c: 186: lBufferY ++;
  8320  014B02  0100               	movlb	0	; () banked
  8321  014B04  2B90               	incf	_lBufferY& (0+255),f,b
  8322                           
  8323                           ; BSR set to: 0
  8324                           ;Console.c: 188: gCursor.y += 8;
  8325  014B06  0E08               	movlw	8
  8326  014B08  2649               	addwf	_gCursor+2,f,c
  8327  014B0A  0E00               	movlw	0
  8328  014B0C  224A               	addwfc	_gCursor+3,f,c
  8329                           
  8330                           ; BSR set to: 0
  8331                           ;Console.c: 189: gCursor.x = 6;
  8332  014B0E  0E00               	movlw	0
  8333  014B10  6E48               	movwf	_gCursor+1,c
  8334  014B12  0E06               	movlw	6
  8335  014B14  6E47               	movwf	_gCursor,c
  8336                           
  8337                           ; BSR set to: 0
  8338  014B16  0012               	return		;funcret
  8339  014B18                     __end_of_Console_NewLine:
  8340                           	opt stack 0
  8341                           tblptru	equ	0xFF8
  8342                           tblptrh	equ	0xFF7
  8343                           tblptrl	equ	0xFF6
  8344                           tablat	equ	0xFF5
  8345                           prodh	equ	0xFF4
  8346                           prodl	equ	0xFF3
  8347                           postinc0	equ	0xFEE
  8348                           wreg	equ	0xFE8
  8349                           postdec1	equ	0xFE5
  8350                           fsr1h	equ	0xFE2
  8351                           fsr1l	equ	0xFE1
  8352                           indf2	equ	0xFDF
  8353                           postinc2	equ	0xFDE
  8354                           postdec2	equ	0xFDD
  8355                           fsr2h	equ	0xFDA
  8356                           fsr2l	equ	0xFD9
  8357                           status	equ	0xFD8
  8358                           
  8359 ;; *************** function _Console_FormFeed *****************
  8360 ;; Defined at:
  8361 ;;		line 192 in file "Library/Console.c"
  8362 ;; Parameters:    Size  Location     Type
  8363 ;;		None
  8364 ;; Auto vars:     Size  Location     Type
  8365 ;;  y               1    3[BANK0 ] unsigned char 
  8366 ;;  x               1    2[BANK0 ] unsigned char 
  8367 ;; Return value:  Size  Location     Type
  8368 ;;                  1    wreg      void 
  8369 ;; Registers used:
  8370 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8371 ;; Tracked objects:
  8372 ;;		On entry : 0/0
  8373 ;;		On exit  : 0/0
  8374 ;;		Unchanged: 0/0
  8375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8377 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8378 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8379 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8380 ;;Total ram usage:        4 bytes
  8381 ;; Hardware stack levels used:    1
  8382 ;; Hardware stack levels required when called:    7
  8383 ;; This function calls:
  8384 ;;		Nothing
  8385 ;; This function is called by:
  8386 ;;		_Console_IncrementCursor
  8387 ;;		_Console_PrintChar
  8388 ;; This function uses a non-reentrant model
  8389 ;;
  8390                           
  8391                           	psect	text29
  8392  014CDC                     __ptext29:
  8393                           	opt stack 0
  8394  014CDC                     _Console_FormFeed:
  8395                           	opt stack 18
  8396                           
  8397                           ;Console.c: 195: lBufferX = 0;
  8398                           
  8399                           ; BSR set to: 0
  8400                           ;incstack = 0
  8401  014CDC  0E00               	movlw	0
  8402  014CDE  0100               	movlb	0	; () banked
  8403  014CE0  6F91               	movwf	_lBufferX& (0+255),b
  8404                           
  8405                           ;Console.c: 196: lBufferY = 0;
  8406  014CE2  0E00               	movlw	0
  8407  014CE4  0100               	movlb	0	; () banked
  8408  014CE6  6F90               	movwf	_lBufferY& (0+255),b
  8409                           
  8410                           ;Console.c: 197: UINT8 x, y;
  8411                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
  8412  014CE8  0E00               	movlw	0
  8413  014CEA  0100               	movlb	0	; () banked
  8414  014CEC  6FBD               	movwf	Console_FormFeed@y& (0+255),b
  8415  014CEE                     l12195:
  8416                           
  8417                           ; BSR set to: 0
  8418  014CEE  0E0E               	movlw	14
  8419  014CF0  0100               	movlb	0	; () banked
  8420  014CF2  65BD               	cpfsgt	Console_FormFeed@y& (0+255),b
  8421  014CF4  D001               	goto	l990
  8422  014CF6  D02D               	goto	u8810
  8423  014CF8                     l990:
  8424                           
  8425                           ; BSR set to: 0
  8426                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
  8427                           
  8428                           ; BSR set to: 0
  8429  014CF8  0E00               	movlw	0
  8430  014CFA  0100               	movlb	0	; () banked
  8431  014CFC  6FBC               	movwf	Console_FormFeed@x& (0+255),b
  8432  014CFE                     l12201:
  8433                           
  8434                           ; BSR set to: 0
  8435  014CFE  0E13               	movlw	19
  8436  014D00  0100               	movlb	0	; () banked
  8437  014D02  65BC               	cpfsgt	Console_FormFeed@x& (0+255),b
  8438  014D04  D001               	goto	l992
  8439  014D06  D022               	goto	u8800
  8440  014D08                     l992:
  8441                           
  8442                           ; BSR set to: 0
  8443                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
  8444                           
  8445                           ; BSR set to: 0
  8446  014D08  0E01               	movlw	1
  8447  014D0A  0100               	movlb	0	; () banked
  8448  014D0C  6FFF               	movwf	_change& (0+255),b
  8449                           
  8450                           ; BSR set to: 0
  8451  014D0E  0100               	movlb	0	; () banked
  8452  014D10  51BD               	movf	Console_FormFeed@y& (0+255),w,b
  8453  014D12  0D14               	mullw	20
  8454  014D14  0EAA               	movlw	low _lBuffer
  8455  014D16  0100               	movlb	0	; () banked
  8456  014D18  6FBA               	movwf	??_Console_FormFeed& (0+255),b
  8457  014D1A  0E04               	movlw	high _lBuffer
  8458  014D1C  0100               	movlb	0	; () banked
  8459  014D1E  6FBB               	movwf	(??_Console_FormFeed+1)& (0+255),b
  8460  014D20  50F3               	movf	prodl,w,c
  8461  014D22  0100               	movlb	0	; () banked
  8462  014D24  27BA               	addwf	??_Console_FormFeed& (0+255),f,b
  8463  014D26  50F4               	movf	prodh,w,c
  8464  014D28  0100               	movlb	0	; () banked
  8465  014D2A  23BB               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
  8466  014D2C  0100               	movlb	0	; () banked
  8467  014D2E  51BC               	movf	Console_FormFeed@x& (0+255),w,b
  8468  014D30  0D01               	mullw	1
  8469  014D32  50F3               	movf	prodl,w,c
  8470  014D34  0100               	movlb	0	; () banked
  8471  014D36  25BA               	addwf	??_Console_FormFeed& (0+255),w,b
  8472  014D38  6ED9               	movwf	fsr2l,c
  8473  014D3A  50F4               	movf	prodh,w,c
  8474  014D3C  0100               	movlb	0	; () banked
  8475  014D3E  21BB               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
  8476  014D40  6EDA               	movwf	fsr2h,c
  8477  014D42  0E80               	movlw	128
  8478  014D44  6EDF               	movwf	indf2,c
  8479                           
  8480                           ; BSR set to: 0
  8481  014D46  0100               	movlb	0	; () banked
  8482  014D48  2BBC               	incf	Console_FormFeed@x& (0+255),f,b
  8483  014D4A  D7D9               	goto	l12201
  8484  014D4C                     u8800:
  8485                           
  8486                           ; BSR set to: 0
  8487                           
  8488                           ; BSR set to: 0
  8489  014D4C  0100               	movlb	0	; () banked
  8490  014D4E  2BBD               	incf	Console_FormFeed@y& (0+255),f,b
  8491  014D50  D7CE               	goto	l12195
  8492  014D52                     u8810:
  8493                           
  8494                           ; BSR set to: 0
  8495                           ;Console.c: 204: clearall = 1;
  8496                           
  8497                           ; BSR set to: 0
  8498  014D52  0E01               	movlw	1
  8499  014D54  0100               	movlb	0	; () banked
  8500  014D56  6F92               	movwf	_clearall& (0+255),b
  8501                           
  8502                           ;Console.c: 205: gCursor.x = 6;
  8503  014D58  0E00               	movlw	0
  8504  014D5A  6E48               	movwf	_gCursor+1,c
  8505  014D5C  0E06               	movlw	6
  8506  014D5E  6E47               	movwf	_gCursor,c
  8507                           
  8508                           ;Console.c: 206: gCursor.y = 6;
  8509  014D60  0E00               	movlw	0
  8510  014D62  6E4A               	movwf	_gCursor+3,c
  8511  014D64  0E06               	movlw	6
  8512  014D66  6E49               	movwf	_gCursor+2,c
  8513                           
  8514                           ; BSR set to: 0
  8515  014D68  0012               	return		;funcret
  8516  014D6A                     __end_of_Console_FormFeed:
  8517                           	opt stack 0
  8518                           tblptru	equ	0xFF8
  8519                           tblptrh	equ	0xFF7
  8520                           tblptrl	equ	0xFF6
  8521                           tablat	equ	0xFF5
  8522                           prodh	equ	0xFF4
  8523                           prodl	equ	0xFF3
  8524                           postinc0	equ	0xFEE
  8525                           wreg	equ	0xFE8
  8526                           postdec1	equ	0xFE5
  8527                           fsr1h	equ	0xFE2
  8528                           fsr1l	equ	0xFE1
  8529                           indf2	equ	0xFDF
  8530                           postinc2	equ	0xFDE
  8531                           postdec2	equ	0xFDD
  8532                           fsr2h	equ	0xFDA
  8533                           fsr2l	equ	0xFD9
  8534                           status	equ	0xFD8
  8535                           
  8536 ;; *************** function _Console_ResetCursor *****************
  8537 ;; Defined at:
  8538 ;;		line 297 in file "Library/Console.c"
  8539 ;; Parameters:    Size  Location     Type
  8540 ;;		None
  8541 ;; Auto vars:     Size  Location     Type
  8542 ;;		None
  8543 ;; Return value:  Size  Location     Type
  8544 ;;                  1    wreg      void 
  8545 ;; Registers used:
  8546 ;;		wreg, status,2
  8547 ;; Tracked objects:
  8548 ;;		On entry : 0/0
  8549 ;;		On exit  : 0/0
  8550 ;;		Unchanged: 0/0
  8551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8553 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8555 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8556 ;;Total ram usage:        0 bytes
  8557 ;; Hardware stack levels used:    1
  8558 ;; Hardware stack levels required when called:    7
  8559 ;; This function calls:
  8560 ;;		Nothing
  8561 ;; This function is called by:
  8562 ;;		_Console_PrintChar
  8563 ;; This function uses a non-reentrant model
  8564 ;;
  8565                           
  8566                           	psect	text30
  8567  016336                     __ptext30:
  8568                           	opt stack 0
  8569  016336                     _Console_ResetCursor:
  8570                           	opt stack 20
  8571                           
  8572                           ;Console.c: 299: gCursor.x = 6;
  8573                           
  8574                           ; BSR set to: 0
  8575                           ;incstack = 0
  8576  016336  0E00               	movlw	0
  8577  016338  6E48               	movwf	_gCursor+1,c
  8578  01633A  0E06               	movlw	6
  8579  01633C  6E47               	movwf	_gCursor,c
  8580                           
  8581                           ;Console.c: 300: gCursor.y = 6;
  8582  01633E  0E00               	movlw	0
  8583  016340  6E4A               	movwf	_gCursor+3,c
  8584  016342  0E06               	movlw	6
  8585  016344  6E49               	movwf	_gCursor+2,c
  8586                           
  8587                           ;Console.c: 303: lBufferX = 0;
  8588  016346  0E00               	movlw	0
  8589  016348  0100               	movlb	0	; () banked
  8590  01634A  6F91               	movwf	_lBufferX& (0+255),b
  8591                           
  8592                           ;Console.c: 304: lBufferY = 0;
  8593  01634C  0E00               	movlw	0
  8594  01634E  0100               	movlb	0	; () banked
  8595  016350  6F90               	movwf	_lBufferY& (0+255),b
  8596                           
  8597                           ; BSR set to: 0
  8598  016352  0012               	return		;funcret
  8599  016354                     __end_of_Console_ResetCursor:
  8600                           	opt stack 0
  8601                           tblptru	equ	0xFF8
  8602                           tblptrh	equ	0xFF7
  8603                           tblptrl	equ	0xFF6
  8604                           tablat	equ	0xFF5
  8605                           prodh	equ	0xFF4
  8606                           prodl	equ	0xFF3
  8607                           postinc0	equ	0xFEE
  8608                           wreg	equ	0xFE8
  8609                           postdec1	equ	0xFE5
  8610                           fsr1h	equ	0xFE2
  8611                           fsr1l	equ	0xFE1
  8612                           indf2	equ	0xFDF
  8613                           postinc2	equ	0xFDE
  8614                           postdec2	equ	0xFDD
  8615                           fsr2h	equ	0xFDA
  8616                           fsr2l	equ	0xFD9
  8617                           status	equ	0xFD8
  8618                           
  8619 ;; *************** function _Console_Backspace *****************
  8620 ;; Defined at:
  8621 ;;		line 209 in file "Library/Console.c"
  8622 ;; Parameters:    Size  Location     Type
  8623 ;;		None
  8624 ;; Auto vars:     Size  Location     Type
  8625 ;;		None
  8626 ;; Return value:  Size  Location     Type
  8627 ;;                  1    wreg      void 
  8628 ;; Registers used:
  8629 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8630 ;; Tracked objects:
  8631 ;;		On entry : 0/0
  8632 ;;		On exit  : 0/0
  8633 ;;		Unchanged: 0/0
  8634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8636 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8638 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8639 ;;Total ram usage:        0 bytes
  8640 ;; Hardware stack levels used:    1
  8641 ;; Hardware stack levels required when called:    8
  8642 ;; This function calls:
  8643 ;;		_Console_ClearCursor
  8644 ;; This function is called by:
  8645 ;;		_Console_PrintChar
  8646 ;; This function uses a non-reentrant model
  8647 ;;
  8648                           
  8649                           	psect	text31
  8650  0158C0                     __ptext31:
  8651                           	opt stack 0
  8652  0158C0                     _Console_Backspace:
  8653                           	opt stack 19
  8654                           
  8655                           ;Console.c: 211: if (lBufferX > 0)
  8656                           
  8657                           ; BSR set to: 0
  8658                           ;incstack = 0
  8659  0158C0  0100               	movlb	0	; () banked
  8660  0158C2  5191               	movf	_lBufferX& (0+255),w,b
  8661  0158C4  B4D8               	btfsc	status,2,c
  8662  0158C6  D007               	goto	l997
  8663                           
  8664                           ; BSR set to: 0
  8665                           ;Console.c: 212: {
  8666                           ;Console.c: 213: gCursor.x -= 6;
  8667  0158C8  0EFA               	movlw	250
  8668  0158CA  2647               	addwf	_gCursor,f,c
  8669  0158CC  0EFF               	movlw	255
  8670  0158CE  2248               	addwfc	_gCursor+1,f,c
  8671                           
  8672                           ; BSR set to: 0
  8673                           ;Console.c: 216: lBufferX --;
  8674  0158D0  0100               	movlb	0	; () banked
  8675  0158D2  0791               	decf	_lBufferX& (0+255),f,b
  8676                           
  8677                           ;Console.c: 218: }
  8678  0158D4  D020               	goto	l1000
  8679  0158D6                     l997:
  8680                           
  8681                           ; BSR set to: 0
  8682                           ;Console.c: 219: else if (lBufferY > 0)
  8683                           
  8684                           ; BSR set to: 0
  8685  0158D6  0100               	movlb	0	; () banked
  8686  0158D8  5190               	movf	_lBufferY& (0+255),w,b
  8687  0158DA  B4D8               	btfsc	status,2,c
  8688  0158DC  D00E               	goto	l999
  8689                           
  8690                           ; BSR set to: 0
  8691                           ;Console.c: 220: {
  8692                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
  8693  0158DE  0E00               	movlw	0
  8694  0158E0  6E48               	movwf	_gCursor+1,c
  8695  0158E2  0E72               	movlw	114
  8696  0158E4  6E47               	movwf	_gCursor,c
  8697                           
  8698                           ; BSR set to: 0
  8699                           ;Console.c: 222: gCursor.y -= 8;
  8700  0158E6  0EF8               	movlw	248
  8701  0158E8  2649               	addwf	_gCursor+2,f,c
  8702  0158EA  0EFF               	movlw	255
  8703  0158EC  224A               	addwfc	_gCursor+3,f,c
  8704                           
  8705                           ; BSR set to: 0
  8706                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
  8707  0158EE  0E13               	movlw	19
  8708  0158F0  0100               	movlb	0	; () banked
  8709  0158F2  6F91               	movwf	_lBufferX& (0+255),b
  8710                           
  8711                           ; BSR set to: 0
  8712                           ;Console.c: 226: lBufferY --;
  8713  0158F4  0100               	movlb	0	; () banked
  8714  0158F6  0790               	decf	_lBufferY& (0+255),f,b
  8715                           
  8716                           ;Console.c: 228: }
  8717  0158F8  D00E               	goto	l1000
  8718  0158FA                     l999:
  8719                           
  8720                           ; BSR set to: 0
  8721                           ;Console.c: 229: else
  8722                           ;Console.c: 230: {
  8723                           ;Console.c: 231: gCursor.x = 6;
  8724                           
  8725                           ; BSR set to: 0
  8726  0158FA  0E00               	movlw	0
  8727  0158FC  6E48               	movwf	_gCursor+1,c
  8728  0158FE  0E06               	movlw	6
  8729  015900  6E47               	movwf	_gCursor,c
  8730                           
  8731                           ;Console.c: 232: gCursor.y = 6;
  8732  015902  0E00               	movlw	0
  8733  015904  6E4A               	movwf	_gCursor+3,c
  8734  015906  0E06               	movlw	6
  8735  015908  6E49               	movwf	_gCursor+2,c
  8736                           
  8737                           ;Console.c: 235: lBufferX = 0;
  8738  01590A  0E00               	movlw	0
  8739  01590C  0100               	movlb	0	; () banked
  8740  01590E  6F91               	movwf	_lBufferX& (0+255),b
  8741                           
  8742                           ;Console.c: 236: lBufferY = 0;
  8743  015910  0E00               	movlw	0
  8744  015912  0100               	movlb	0	; () banked
  8745  015914  6F90               	movwf	_lBufferY& (0+255),b
  8746  015916                     l1000:
  8747                           
  8748                           ; BSR set to: 0
  8749                           ;Console.c: 238: }
  8750                           ;Console.c: 240: Console_ClearCursor();
  8751                           
  8752                           ; BSR set to: 0
  8753                           
  8754                           ; BSR set to: 0
  8755  015916  EC14  F0AF         	call	_Console_ClearCursor	;wreg free
  8756  01591A  0012               	return		;funcret
  8757  01591C                     __end_of_Console_Backspace:
  8758                           	opt stack 0
  8759                           tblptru	equ	0xFF8
  8760                           tblptrh	equ	0xFF7
  8761                           tblptrl	equ	0xFF6
  8762                           tablat	equ	0xFF5
  8763                           prodh	equ	0xFF4
  8764                           prodl	equ	0xFF3
  8765                           postinc0	equ	0xFEE
  8766                           wreg	equ	0xFE8
  8767                           postdec1	equ	0xFE5
  8768                           fsr1h	equ	0xFE2
  8769                           fsr1l	equ	0xFE1
  8770                           indf2	equ	0xFDF
  8771                           postinc2	equ	0xFDE
  8772                           postdec2	equ	0xFDD
  8773                           fsr2h	equ	0xFDA
  8774                           fsr2l	equ	0xFD9
  8775                           status	equ	0xFD8
  8776                           
  8777 ;; *************** function _Console_ClearCursor *****************
  8778 ;; Defined at:
  8779 ;;		line 308 in file "Library/Console.c"
  8780 ;; Parameters:    Size  Location     Type
  8781 ;;		None
  8782 ;; Auto vars:     Size  Location     Type
  8783 ;;		None
  8784 ;; Return value:  Size  Location     Type
  8785 ;;                  1    wreg      void 
  8786 ;; Registers used:
  8787 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8788 ;; Tracked objects:
  8789 ;;		On entry : 0/0
  8790 ;;		On exit  : 0/0
  8791 ;;		Unchanged: 0/0
  8792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8795 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8796 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8797 ;;Total ram usage:        2 bytes
  8798 ;; Hardware stack levels used:    1
  8799 ;; Hardware stack levels required when called:    7
  8800 ;; This function calls:
  8801 ;;		Nothing
  8802 ;; This function is called by:
  8803 ;;		_Console_Backspace
  8804 ;;		_Console_Tab
  8805 ;; This function uses a non-reentrant model
  8806 ;;
  8807                           
  8808                           	psect	text32
  8809  015E28                     __ptext32:
  8810                           	opt stack 0
  8811  015E28                     _Console_ClearCursor:
  8812                           	opt stack 19
  8813                           
  8814                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
  8815                           
  8816                           ;incstack = 0
  8817  015E28  0E01               	movlw	1
  8818  015E2A  0100               	movlb	0	; () banked
  8819  015E2C  6FFF               	movwf	_change& (0+255),b
  8820                           
  8821                           ; BSR set to: 0
  8822  015E2E  0100               	movlb	0	; () banked
  8823  015E30  5190               	movf	_lBufferY& (0+255),w,b
  8824  015E32  0D14               	mullw	20
  8825  015E34  0EAA               	movlw	low _lBuffer
  8826  015E36  0100               	movlb	0	; () banked
  8827  015E38  6FBA               	movwf	??_Console_ClearCursor& (0+255),b
  8828  015E3A  0E04               	movlw	high _lBuffer
  8829  015E3C  0100               	movlb	0	; () banked
  8830  015E3E  6FBB               	movwf	(??_Console_ClearCursor+1)& (0+255),b
  8831  015E40  50F3               	movf	prodl,w,c
  8832  015E42  0100               	movlb	0	; () banked
  8833  015E44  27BA               	addwf	??_Console_ClearCursor& (0+255),f,b
  8834  015E46  50F4               	movf	prodh,w,c
  8835  015E48  0100               	movlb	0	; () banked
  8836  015E4A  23BB               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
  8837  015E4C  0100               	movlb	0	; () banked
  8838  015E4E  5191               	movf	_lBufferX& (0+255),w,b
  8839  015E50  0D01               	mullw	1
  8840  015E52  50F3               	movf	prodl,w,c
  8841  015E54  0100               	movlb	0	; () banked
  8842  015E56  25BA               	addwf	??_Console_ClearCursor& (0+255),w,b
  8843  015E58  6ED9               	movwf	fsr2l,c
  8844  015E5A  50F4               	movf	prodh,w,c
  8845  015E5C  0100               	movlb	0	; () banked
  8846  015E5E  21BB               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
  8847  015E60  6EDA               	movwf	fsr2h,c
  8848  015E62  0E80               	movlw	128
  8849  015E64  6EDF               	movwf	indf2,c
  8850                           
  8851                           ; BSR set to: 0
  8852  015E66  0012               	return		;funcret
  8853  015E68                     __end_of_Console_ClearCursor:
  8854                           	opt stack 0
  8855                           tblptru	equ	0xFF8
  8856                           tblptrh	equ	0xFF7
  8857                           tblptrl	equ	0xFF6
  8858                           tablat	equ	0xFF5
  8859                           prodh	equ	0xFF4
  8860                           prodl	equ	0xFF3
  8861                           postinc0	equ	0xFEE
  8862                           wreg	equ	0xFE8
  8863                           postdec1	equ	0xFE5
  8864                           fsr1h	equ	0xFE2
  8865                           fsr1l	equ	0xFE1
  8866                           indf2	equ	0xFDF
  8867                           postinc2	equ	0xFDE
  8868                           postdec2	equ	0xFDD
  8869                           fsr2h	equ	0xFDA
  8870                           fsr2l	equ	0xFD9
  8871                           status	equ	0xFD8
  8872                           
  8873 ;; *************** function ___fltol *****************
  8874 ;; Defined at:
  8875 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fltol.c"
  8876 ;; Parameters:    Size  Location     Type
  8877 ;;  f1              4   57[BANK0 ] void 
  8878 ;; Auto vars:     Size  Location     Type
  8879 ;;  exp1            1   62[BANK0 ] unsigned char 
  8880 ;;  sign1           1   61[BANK0 ] unsigned char 
  8881 ;; Return value:  Size  Location     Type
  8882 ;;                  4   57[BANK0 ] long 
  8883 ;; Registers used:
  8884 ;;		wreg, status,2, status,0
  8885 ;; Tracked objects:
  8886 ;;		On entry : 0/0
  8887 ;;		On exit  : 0/0
  8888 ;;		Unchanged: 0/0
  8889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8890 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8891 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8892 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8893 ;;      Totals:         0       6       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8894 ;;Total ram usage:       10 bytes
  8895 ;; Hardware stack levels used:    1
  8896 ;; Hardware stack levels required when called:    7
  8897 ;; This function calls:
  8898 ;;		Nothing
  8899 ;; This function is called by:
  8900 ;;		_findClosestWall
  8901 ;;		_mode1
  8902 ;; This function uses a non-reentrant model
  8903 ;;
  8904                           
  8905                           	psect	text33
  8906  0135C2                     __ptext33:
  8907                           	opt stack 0
  8908  0135C2                     ___fltol:
  8909                           	opt stack 21
  8910                           
  8911                           ; BSR set to: 0
  8912                           ;incstack = 0
  8913  0135C2  0100               	movlb	0	; () banked
  8914  0135C4  35F5               	rlcf	(___fltol@f1+2)& (0+255),w,b
  8915  0135C6  35F6               	rlcf	(___fltol@f1+3)& (0+255),w,b
  8916  0135C8  0100               	movlb	0	; () banked
  8917  0135CA  6FF8               	movwf	___fltol@exp1& (0+255),b
  8918  0135CC  0100               	movlb	0	; () banked
  8919  0135CE  51F8               	movf	___fltol@exp1& (0+255),w,b
  8920  0135D0  A4D8               	btfss	status,2,c
  8921  0135D2  D00A               	goto	l2673
  8922                           
  8923                           ; BSR set to: 0
  8924  0135D4  0E00               	movlw	0
  8925  0135D6  0100               	movlb	0	; () banked
  8926  0135D8  6FF3               	movwf	?___fltol& (0+255),b
  8927  0135DA  0E00               	movlw	0
  8928  0135DC  6FF4               	movwf	(?___fltol+1)& (0+255),b
  8929  0135DE  0E00               	movlw	0
  8930  0135E0  6FF5               	movwf	(?___fltol+2)& (0+255),b
  8931  0135E2  0E00               	movlw	0
  8932  0135E4  6FF6               	movwf	(?___fltol+3)& (0+255),b
  8933                           
  8934                           ; BSR set to: 0
  8935  0135E6  0012               	return	
  8936  0135E8                     l2673:
  8937                           
  8938                           ; BSR set to: 0
  8939                           
  8940                           ; BSR set to: 0
  8941  0135E8  C0F3  F100         	movff	___fltol@f1,??___fltol
  8942  0135EC  C0F4  F101         	movff	___fltol@f1+1,??___fltol+1
  8943  0135F0  C0F5  F102         	movff	___fltol@f1+2,??___fltol+2
  8944  0135F4  C0F6  F103         	movff	___fltol@f1+3,??___fltol+3
  8945  0135F8  0E20               	movlw	32
  8946  0135FA  D006               	goto	u11020
  8947  0135FC                     u11025:
  8948  0135FC  0101               	movlb	1	; () banked
  8949  0135FE  90D8               	bcf	status,0,c
  8950  013600  3303               	rrcf	(??___fltol+3)& (0+255),f,b
  8951  013602  3302               	rrcf	(??___fltol+2)& (0+255),f,b
  8952  013604  3301               	rrcf	(??___fltol+1)& (0+255),f,b
  8953  013606  3300               	rrcf	??___fltol& (0+255),f,b
  8954  013608                     u11020:
  8955  013608  2EE8               	decfsz	wreg,f,c
  8956  01360A  D7F8               	goto	u11025
  8957  01360C  0101               	movlb	1	; () banked
  8958  01360E  5100               	movf	??___fltol& (0+255),w,b
  8959  013610  0100               	movlb	0	; () banked
  8960  013612  6FF7               	movwf	___fltol@sign1& (0+255),b
  8961                           
  8962                           ; BSR set to: 0
  8963  013614  0100               	movlb	0	; () banked
  8964  013616  8FF5               	bsf	(___fltol@f1+2)& (0+255),7,b
  8965                           
  8966                           ; BSR set to: 0
  8967  013618  0EFF               	movlw	255
  8968  01361A  0100               	movlb	0	; () banked
  8969  01361C  17F3               	andwf	___fltol@f1& (0+255),f,b
  8970  01361E  0EFF               	movlw	255
  8971  013620  17F4               	andwf	(___fltol@f1+1)& (0+255),f,b
  8972  013622  0EFF               	movlw	255
  8973  013624  17F5               	andwf	(___fltol@f1+2)& (0+255),f,b
  8974  013626  0E00               	movlw	0
  8975  013628  17F6               	andwf	(___fltol@f1+3)& (0+255),f,b
  8976                           
  8977                           ; BSR set to: 0
  8978  01362A  0E96               	movlw	150
  8979  01362C  0100               	movlb	0	; () banked
  8980  01362E  5FF8               	subwf	___fltol@exp1& (0+255),f,b
  8981                           
  8982                           ; BSR set to: 0
  8983  013630  0100               	movlb	0	; () banked
  8984  013632  AFF8               	btfss	___fltol@exp1& (0+255),7,b
  8985  013634  D01A               	goto	l2675
  8986                           
  8987                           ; BSR set to: 0
  8988  013636  0100               	movlb	0	; () banked
  8989  013638  51F8               	movf	___fltol@exp1& (0+255),w,b
  8990  01363A  0A80               	xorlw	128
  8991  01363C  0F97               	addlw	151
  8992  01363E  B0D8               	btfsc	status,0,c
  8993  013640  D00A               	goto	l2676
  8994                           
  8995                           ; BSR set to: 0
  8996  013642  0E00               	movlw	0
  8997  013644  0100               	movlb	0	; () banked
  8998  013646  6FF3               	movwf	?___fltol& (0+255),b
  8999  013648  0E00               	movlw	0
  9000  01364A  6FF4               	movwf	(?___fltol+1)& (0+255),b
  9001  01364C  0E00               	movlw	0
  9002  01364E  6FF5               	movwf	(?___fltol+2)& (0+255),b
  9003  013650  0E00               	movlw	0
  9004  013652  6FF6               	movwf	(?___fltol+3)& (0+255),b
  9005                           
  9006                           ; BSR set to: 0
  9007  013654  0012               	return	
  9008  013656                     l2676:
  9009                           
  9010                           ; BSR set to: 0
  9011                           
  9012                           ; BSR set to: 0
  9013                           
  9014                           ; BSR set to: 0
  9015  013656  0100               	movlb	0	; () banked
  9016  013658  90D8               	bcf	status,0,c
  9017  01365A  33F6               	rrcf	(___fltol@f1+3)& (0+255),f,b
  9018  01365C  33F5               	rrcf	(___fltol@f1+2)& (0+255),f,b
  9019  01365E  33F4               	rrcf	(___fltol@f1+1)& (0+255),f,b
  9020  013660  33F3               	rrcf	___fltol@f1& (0+255),f,b
  9021                           
  9022                           ; BSR set to: 0
  9023  013662  0100               	movlb	0	; () banked
  9024  013664  3FF8               	incfsz	___fltol@exp1& (0+255),f,b
  9025  013666  D7F7               	goto	l2676
  9026                           
  9027                           ; BSR set to: 0
  9028  013668  D01B               	goto	u11060
  9029  01366A                     l2675:
  9030                           
  9031                           ; BSR set to: 0
  9032                           
  9033                           ; BSR set to: 0
  9034  01366A  0E1F               	movlw	31
  9035  01366C  0100               	movlb	0	; () banked
  9036  01366E  65F8               	cpfsgt	___fltol@exp1& (0+255),b
  9037  013670  D012               	goto	l2681
  9038                           
  9039                           ; BSR set to: 0
  9040  013672  0E00               	movlw	0
  9041  013674  0100               	movlb	0	; () banked
  9042  013676  6FF3               	movwf	?___fltol& (0+255),b
  9043  013678  0E00               	movlw	0
  9044  01367A  6FF4               	movwf	(?___fltol+1)& (0+255),b
  9045  01367C  0E00               	movlw	0
  9046  01367E  6FF5               	movwf	(?___fltol+2)& (0+255),b
  9047  013680  0E00               	movlw	0
  9048  013682  6FF6               	movwf	(?___fltol+3)& (0+255),b
  9049                           
  9050                           ; BSR set to: 0
  9051  013684  0012               	return	
  9052  013686                     
  9053                           ; BSR set to: 0
  9054                           
  9055                           ; BSR set to: 0
  9056  013686  0100               	movlb	0	; () banked
  9057  013688  90D8               	bcf	status,0,c
  9058  01368A  37F3               	rlcf	___fltol@f1& (0+255),f,b
  9059  01368C  37F4               	rlcf	(___fltol@f1+1)& (0+255),f,b
  9060  01368E  37F5               	rlcf	(___fltol@f1+2)& (0+255),f,b
  9061  013690  37F6               	rlcf	(___fltol@f1+3)& (0+255),f,b
  9062  013692  0100               	movlb	0	; () banked
  9063  013694  07F8               	decf	___fltol@exp1& (0+255),f,b
  9064  013696                     l2681:
  9065                           
  9066                           ; BSR set to: 0
  9067                           
  9068                           ; BSR set to: 0
  9069  013696  0100               	movlb	0	; () banked
  9070  013698  51F8               	movf	___fltol@exp1& (0+255),w,b
  9071  01369A  0100               	movlb	0	; () banked
  9072  01369C  A4D8               	btfss	status,2,c
  9073  01369E  D7F3               	goto	l2682
  9074  0136A0                     u11060:
  9075                           
  9076                           ; BSR set to: 0
  9077                           
  9078                           ; BSR set to: 0
  9079                           
  9080                           ; BSR set to: 0
  9081  0136A0  0100               	movlb	0	; () banked
  9082  0136A2  51F7               	movf	___fltol@sign1& (0+255),w,b
  9083  0136A4  0100               	movlb	0	; () banked
  9084  0136A6  B4D8               	btfsc	status,2,c
  9085  0136A8  D009               	goto	l2684
  9086                           
  9087                           ; BSR set to: 0
  9088  0136AA  0100               	movlb	0	; () banked
  9089  0136AC  1FF6               	comf	(___fltol@f1+3)& (0+255),f,b
  9090  0136AE  1FF5               	comf	(___fltol@f1+2)& (0+255),f,b
  9091  0136B0  1FF4               	comf	(___fltol@f1+1)& (0+255),f,b
  9092  0136B2  6DF3               	negf	___fltol@f1& (0+255),b
  9093  0136B4  0E00               	movlw	0
  9094  0136B6  23F4               	addwfc	(___fltol@f1+1)& (0+255),f,b
  9095  0136B8  23F5               	addwfc	(___fltol@f1+2)& (0+255),f,b
  9096  0136BA  23F6               	addwfc	(___fltol@f1+3)& (0+255),f,b
  9097  0136BC                     l2684:
  9098                           
  9099                           ; BSR set to: 0
  9100                           
  9101                           ; BSR set to: 0
  9102  0136BC  C0F3  F0F3         	movff	___fltol@f1,?___fltol
  9103  0136C0  C0F4  F0F4         	movff	___fltol@f1+1,?___fltol+1
  9104  0136C4  C0F5  F0F5         	movff	___fltol@f1+2,?___fltol+2
  9105  0136C8  C0F6  F0F6         	movff	___fltol@f1+3,?___fltol+3
  9106  0136CC  0012               	return	
  9107  0136CE                     __end_of___fltol:
  9108                           	opt stack 0
  9109                           tblptru	equ	0xFF8
  9110                           tblptrh	equ	0xFF7
  9111                           tblptrl	equ	0xFF6
  9112                           tablat	equ	0xFF5
  9113                           prodh	equ	0xFF4
  9114                           prodl	equ	0xFF3
  9115                           postinc0	equ	0xFEE
  9116                           wreg	equ	0xFE8
  9117                           postdec1	equ	0xFE5
  9118                           fsr1h	equ	0xFE2
  9119                           fsr1l	equ	0xFE1
  9120                           indf2	equ	0xFDF
  9121                           postinc2	equ	0xFDE
  9122                           postdec2	equ	0xFDD
  9123                           fsr2h	equ	0xFDA
  9124                           fsr2l	equ	0xFD9
  9125                           status	equ	0xFD8
  9126                           
  9127 ;; *************** function _Motor_Speed *****************
  9128 ;; Defined at:
  9129 ;;		line 117 in file "Library/Motor.c"
  9130 ;; Parameters:    Size  Location     Type
  9131 ;;  pMotor          2   27[BANK0 ] PTR struct Motor
  9132 ;;		 -> Stepper(6), 
  9133 ;;  pFrequency      2   29[BANK0 ] unsigned short 
  9134 ;; Auto vars:     Size  Location     Type
  9135 ;;		None
  9136 ;; Return value:  Size  Location     Type
  9137 ;;                  1    wreg      unsigned char 
  9138 ;; Registers used:
  9139 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9140 ;; Tracked objects:
  9141 ;;		On entry : 0/0
  9142 ;;		On exit  : 0/0
  9143 ;;		Unchanged: 0/0
  9144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9145 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9148 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9149 ;;Total ram usage:        4 bytes
  9150 ;; Hardware stack levels used:    1
  9151 ;; Hardware stack levels required when called:    9
  9152 ;; This function calls:
  9153 ;;		_Timer0_Init
  9154 ;; This function is called by:
  9155 ;;		_findClosestWall
  9156 ;;		_mode1
  9157 ;; This function uses a non-reentrant model
  9158 ;;
  9159                           
  9160                           	psect	text34
  9161  01620E                     __ptext34:
  9162                           	opt stack 0
  9163  01620E                     _Motor_Speed:
  9164                           	opt stack 19
  9165                           
  9166                           ;Motor.c: 119: pMotor->mFrequency = pFrequency;
  9167                           
  9168                           ; BSR set to: 0
  9169                           ;incstack = 0
  9170  01620E  0100               	movlb	0	; () banked
  9171  016210  EE20 F002          	lfsr	2,2
  9172  016214  51D5               	movf	Motor_Speed@pMotor& (0+255),w,b
  9173  016216  26D9               	addwf	fsr2l,f,c
  9174  016218  51D6               	movf	(Motor_Speed@pMotor+1)& (0+255),w,b
  9175  01621A  22DA               	addwfc	fsr2h,f,c
  9176  01621C  C0D7  FFDE         	movff	Motor_Speed@pFrequency,postinc2
  9177  016220  C0D8  FFDD         	movff	Motor_Speed@pFrequency+1,postdec2
  9178                           
  9179                           ; BSR set to: 0
  9180                           ;Motor.c: 120: Timer0_Init(pFrequency);
  9181  016224  C0D7  F0C7         	movff	Motor_Speed@pFrequency,Timer0_Init@pFrequency
  9182  016228  C0D8  F0C8         	movff	Motor_Speed@pFrequency+1,Timer0_Init@pFrequency+1
  9183  01622C  0100               	movlb	0	; () banked
  9184  01622E  6BC9               	clrf	(Timer0_Init@pFrequency+2)& (0+255),b
  9185  016230  6BCA               	clrf	(Timer0_Init@pFrequency+3)& (0+255),b
  9186  016232  ECEE  F098         	call	_Timer0_Init	;wreg free
  9187  016236  0012               	return	
  9188  016238                     __end_of_Motor_Speed:
  9189                           	opt stack 0
  9190                           tblptru	equ	0xFF8
  9191                           tblptrh	equ	0xFF7
  9192                           tblptrl	equ	0xFF6
  9193                           tablat	equ	0xFF5
  9194                           prodh	equ	0xFF4
  9195                           prodl	equ	0xFF3
  9196                           postinc0	equ	0xFEE
  9197                           wreg	equ	0xFE8
  9198                           postdec1	equ	0xFE5
  9199                           fsr1h	equ	0xFE2
  9200                           fsr1l	equ	0xFE1
  9201                           indf2	equ	0xFDF
  9202                           postinc2	equ	0xFDE
  9203                           postdec2	equ	0xFDD
  9204                           fsr2h	equ	0xFDA
  9205                           fsr2l	equ	0xFD9
  9206                           status	equ	0xFD8
  9207                           
  9208 ;; *************** function _Motor_Move *****************
  9209 ;; Defined at:
  9210 ;;		line 51 in file "Library/Motor.c"
  9211 ;; Parameters:    Size  Location     Type
  9212 ;;  pMotor          2    3[BANK0 ] PTR struct Motor
  9213 ;;		 -> Stepper(6), 
  9214 ;;  pDelta          2    5[BANK0 ] short 
  9215 ;; Auto vars:     Size  Location     Type
  9216 ;;		None
  9217 ;; Return value:  Size  Location     Type
  9218 ;;                  1    wreg      unsigned char 
  9219 ;; Registers used:
  9220 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9221 ;; Tracked objects:
  9222 ;;		On entry : 0/0
  9223 ;;		On exit  : 0/0
  9224 ;;		Unchanged: 0/0
  9225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9226 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9227 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9228 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9229 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9230 ;;Total ram usage:        6 bytes
  9231 ;; Hardware stack levels used:    1
  9232 ;; Hardware stack levels required when called:    8
  9233 ;; This function calls:
  9234 ;;		_Timer0_Start
  9235 ;; This function is called by:
  9236 ;;		_findClosestWall
  9237 ;;		_mode1
  9238 ;; This function uses a non-reentrant model
  9239 ;;
  9240                           
  9241                           	psect	text35
  9242  016016                     __ptext35:
  9243                           	opt stack 0
  9244  016016                     _Motor_Move:
  9245                           	opt stack 20
  9246                           
  9247                           ;Motor.c: 54: lMotor = pMotor;
  9248                           
  9249                           ;incstack = 0
  9250  016016  C0BD  F081         	movff	Motor_Move@pMotor,_lMotor
  9251  01601A  C0BE  F082         	movff	Motor_Move@pMotor+1,_lMotor+1
  9252                           
  9253                           ;Motor.c: 58: if (pMotor->mDelta != 0)
  9254  01601E  C0BD  FFD9         	movff	Motor_Move@pMotor,fsr2l
  9255  016022  C0BE  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
  9256  016026  50DE               	movf	postinc2,w,c
  9257  016028  10DE               	iorwf	postinc2,w,c
  9258  01602A  A4D8               	btfss	status,2,c
  9259  01602C  0012               	return	
  9260                           
  9261                           ;Motor.c: 63: pMotor->mDelta = pDelta;
  9262                           
  9263                           ;Motor.c: 59: return 0;
  9264                           ;	Return value of _Motor_Move is never used
  9265  01602E  C0BD  FFD9         	movff	Motor_Move@pMotor,fsr2l
  9266  016032  C0BE  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
  9267  016036  C0BF  FFDE         	movff	Motor_Move@pDelta,postinc2
  9268  01603A  C0C0  FFDD         	movff	Motor_Move@pDelta+1,postdec2
  9269                           
  9270                           ;Motor.c: 67: Timer0_Start(lStepFunction);
  9271  01603E  C066  F0BA         	movff	_lStepFunction,Timer0_Start@pFunction
  9272  016042  C067  F0BB         	movff	_lStepFunction+1,Timer0_Start@pFunction+1
  9273  016046  C068  F0BC         	movff	_lStepFunction+2,Timer0_Start@pFunction+2
  9274  01604A  EC45  F0B1         	call	_Timer0_Start	;wreg free
  9275  01604E  0012               	return	
  9276  016050                     __end_of_Motor_Move:
  9277                           	opt stack 0
  9278                           tblptru	equ	0xFF8
  9279                           tblptrh	equ	0xFF7
  9280                           tblptrl	equ	0xFF6
  9281                           tablat	equ	0xFF5
  9282                           prodh	equ	0xFF4
  9283                           prodl	equ	0xFF3
  9284                           postinc0	equ	0xFEE
  9285                           wreg	equ	0xFE8
  9286                           postdec1	equ	0xFE5
  9287                           fsr1h	equ	0xFE2
  9288                           fsr1l	equ	0xFE1
  9289                           indf2	equ	0xFDF
  9290                           postinc2	equ	0xFDE
  9291                           postdec2	equ	0xFDD
  9292                           fsr2h	equ	0xFDA
  9293                           fsr2l	equ	0xFD9
  9294                           status	equ	0xFD8
  9295                           
  9296 ;; *************** function _Timer0_Start *****************
  9297 ;; Defined at:
  9298 ;;		line 75 in file "Library/Timer0.c"
  9299 ;; Parameters:    Size  Location     Type
  9300 ;;  pFunction       3    0[BANK0 ] PTR FTN()void 
  9301 ;;		 -> Absolute function(1), Motor_Step(1), 
  9302 ;; Auto vars:     Size  Location     Type
  9303 ;;		None
  9304 ;; Return value:  Size  Location     Type
  9305 ;;                  1    wreg      void 
  9306 ;; Registers used:
  9307 ;;		wreg, status,2, status,0
  9308 ;; Tracked objects:
  9309 ;;		On entry : 0/0
  9310 ;;		On exit  : 0/0
  9311 ;;		Unchanged: 0/0
  9312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9313 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9316 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9317 ;;Total ram usage:        3 bytes
  9318 ;; Hardware stack levels used:    1
  9319 ;; Hardware stack levels required when called:    7
  9320 ;; This function calls:
  9321 ;;		Nothing
  9322 ;; This function is called by:
  9323 ;;		_Motor_Move
  9324 ;; This function uses a non-reentrant model
  9325 ;;
  9326                           
  9327                           	psect	text36
  9328  01628A                     __ptext36:
  9329                           	opt stack 0
  9330  01628A                     _Timer0_Start:
  9331                           	opt stack 20
  9332                           
  9333                           ;Timer0.c: 77: gISR = pFunction;
  9334                           
  9335                           ;incstack = 0
  9336  01628A  C0BA  F060         	movff	Timer0_Start@pFunction,_gISR
  9337  01628E  C0BB  F061         	movff	Timer0_Start@pFunction+1,_gISR+1
  9338  016292  C0BC  F062         	movff	Timer0_Start@pFunction+2,_gISR+2
  9339                           
  9340                           ;Timer0.c: 78: TMR0 = COUNTER;
  9341  016296  C029  FFD6         	movff	_COUNTER,4054	;volatile
  9342  01629A  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
  9343                           
  9344                           ;Timer0.c: 79: T0CONbits.T0PS = INDEX;
  9345  01629E  50D5               	movf	4053,w,c	;volatile
  9346  0162A0  0100               	movlb	0	; () banked
  9347  0162A2  198F               	xorwf	_INDEX& (0+255),w,b
  9348  0162A4  0BF8               	andlw	-8
  9349  0162A6  198F               	xorwf	_INDEX& (0+255),w,b
  9350  0162A8  6ED5               	movwf	4053,c	;volatile
  9351                           
  9352                           ; BSR set to: 0
  9353                           ;Timer0.c: 80: INTCONbits.TMR0IF = 0;
  9354  0162AA  94F2               	bcf	intcon,2,c	;volatile
  9355                           
  9356                           ; BSR set to: 0
  9357                           ;Timer0.c: 81: INTCONbits.TMR0IE = 1;
  9358  0162AC  8AF2               	bsf	intcon,5,c	;volatile
  9359                           
  9360                           ; BSR set to: 0
  9361  0162AE  0012               	return		;funcret
  9362  0162B0                     __end_of_Timer0_Start:
  9363                           	opt stack 0
  9364                           tblptru	equ	0xFF8
  9365                           tblptrh	equ	0xFF7
  9366                           tblptrl	equ	0xFF6
  9367                           tablat	equ	0xFF5
  9368                           prodh	equ	0xFF4
  9369                           prodl	equ	0xFF3
  9370                           intcon	equ	0xFF2
  9371                           postinc0	equ	0xFEE
  9372                           wreg	equ	0xFE8
  9373                           postdec1	equ	0xFE5
  9374                           fsr1h	equ	0xFE2
  9375                           fsr1l	equ	0xFE1
  9376                           indf2	equ	0xFDF
  9377                           postinc2	equ	0xFDE
  9378                           postdec2	equ	0xFDD
  9379                           fsr2h	equ	0xFDA
  9380                           fsr2l	equ	0xFD9
  9381                           status	equ	0xFD8
  9382                           
  9383 ;; *************** function _HMI_Render *****************
  9384 ;; Defined at:
  9385 ;;		line 138 in file "HMI.c"
  9386 ;; Parameters:    Size  Location     Type
  9387 ;;		None
  9388 ;; Auto vars:     Size  Location     Type
  9389 ;;  a               2    8[BANK0 ] unsigned short 
  9390 ;; Return value:  Size  Location     Type
  9391 ;;                  1    wreg      void 
  9392 ;; Registers used:
  9393 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9394 ;; Tracked objects:
  9395 ;;		On entry : 0/0
  9396 ;;		On exit  : 0/0
  9397 ;;		Unchanged: 0/0
  9398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9400 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9402 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9403 ;;Total ram usage:        2 bytes
  9404 ;; Hardware stack levels used:    1
  9405 ;; Hardware stack levels required when called:    9
  9406 ;; This function calls:
  9407 ;;		_OutSeg
  9408 ;; This function is called by:
  9409 ;;		_findClosestWall
  9410 ;;		_mode1
  9411 ;; This function uses a non-reentrant model
  9412 ;;
  9413                           
  9414                           	psect	text37
  9415  015EA8                     __ptext37:
  9416                           	opt stack 0
  9417  015EA8                     _HMI_Render:
  9418                           	opt stack 19
  9419                           
  9420                           ;HMI.c: 141: for (UINT16 a = 0; a < sizeof(HMIBoard.Bytes); a++)
  9421                           
  9422                           ; BSR set to: 0
  9423                           ;incstack = 0
  9424  015EA8  0E00               	movlw	0
  9425  015EAA  0100               	movlb	0	; () banked
  9426  015EAC  6FC3               	movwf	(HMI_Render@a+1)& (0+255),b
  9427  015EAE  0E00               	movlw	0
  9428  015EB0  6FC2               	movwf	HMI_Render@a& (0+255),b
  9429  015EB2                     l14045:
  9430                           
  9431                           ; BSR set to: 0
  9432  015EB2  0100               	movlb	0	; () banked
  9433  015EB4  51C3               	movf	(HMI_Render@a+1)& (0+255),w,b
  9434  015EB6  E116               	bnz	l1158
  9435  015EB8  0E08               	movlw	8
  9436  015EBA  0100               	movlb	0	; () banked
  9437  015EBC  5DC2               	subwf	HMI_Render@a& (0+255),w,b
  9438  015EBE  B0D8               	btfsc	status,0,c
  9439  015EC0  0012               	return	
  9440                           
  9441                           ; BSR set to: 0
  9442                           ;HMI.c: 142: OutSeg(HMIBoard.Bytes[a], a);
  9443                           
  9444                           ; BSR set to: 0
  9445                           
  9446                           ; BSR set to: 0
  9447  015EC2  C0C2  F0BD         	movff	HMI_Render@a,OutSeg@pSegment
  9448  015EC6  0E3C               	movlw	low _HMIBoard
  9449  015EC8  0100               	movlb	0	; () banked
  9450  015ECA  25C2               	addwf	HMI_Render@a& (0+255),w,b
  9451  015ECC  6ED9               	movwf	fsr2l,c
  9452  015ECE  0E03               	movlw	high _HMIBoard
  9453  015ED0  0100               	movlb	0	; () banked
  9454  015ED2  21C3               	addwfc	(HMI_Render@a+1)& (0+255),w,b
  9455  015ED4  6EDA               	movwf	fsr2h,c
  9456  015ED6  50DF               	movf	indf2,w,c
  9457  015ED8  EC08  F0A8         	call	_OutSeg
  9458  015EDC  0100               	movlb	0	; () banked
  9459  015EDE  4BC2               	infsnz	HMI_Render@a& (0+255),f,b
  9460  015EE0  2BC3               	incf	(HMI_Render@a+1)& (0+255),f,b
  9461  015EE2  D7E7               	goto	l14045
  9462  015EE4                     l1158:
  9463                           
  9464                           ; BSR set to: 0
  9465  015EE4  0012               	return		;funcret
  9466  015EE6                     __end_of_HMI_Render:
  9467                           	opt stack 0
  9468                           tblptru	equ	0xFF8
  9469                           tblptrh	equ	0xFF7
  9470                           tblptrl	equ	0xFF6
  9471                           tablat	equ	0xFF5
  9472                           prodh	equ	0xFF4
  9473                           prodl	equ	0xFF3
  9474                           intcon	equ	0xFF2
  9475                           postinc0	equ	0xFEE
  9476                           wreg	equ	0xFE8
  9477                           postdec1	equ	0xFE5
  9478                           fsr1h	equ	0xFE2
  9479                           fsr1l	equ	0xFE1
  9480                           indf2	equ	0xFDF
  9481                           postinc2	equ	0xFDE
  9482                           postdec2	equ	0xFDD
  9483                           fsr2h	equ	0xFDA
  9484                           fsr2l	equ	0xFD9
  9485                           status	equ	0xFD8
  9486                           
  9487 ;; *************** function _OutSeg *****************
  9488 ;; Defined at:
  9489 ;;		line 54 in file "HMI.c"
  9490 ;; Parameters:    Size  Location     Type
  9491 ;;  pInput          1    wreg     unsigned char 
  9492 ;;  pSegment        1    3[BANK0 ] unsigned char 
  9493 ;; Auto vars:     Size  Location     Type
  9494 ;;  pInput          1    6[BANK0 ] unsigned char 
  9495 ;;  out             1    7[BANK0 ] volatile unsigned char 
  9496 ;; Return value:  Size  Location     Type
  9497 ;;                  1    wreg      void 
  9498 ;; Registers used:
  9499 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9500 ;; Tracked objects:
  9501 ;;		On entry : 0/0
  9502 ;;		On exit  : 0/0
  9503 ;;		Unchanged: 0/0
  9504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9505 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9506 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9507 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9508 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9509 ;;Total ram usage:        5 bytes
  9510 ;; Hardware stack levels used:    1
  9511 ;; Hardware stack levels required when called:    8
  9512 ;; This function calls:
  9513 ;;		_SPI_Send
  9514 ;; This function is called by:
  9515 ;;		_HMI_Render
  9516 ;;		_HMI_GRender
  9517 ;; This function uses a non-reentrant model
  9518 ;;
  9519                           
  9520                           	psect	text38
  9521  015010                     __ptext38:
  9522                           	opt stack 0
  9523  015010                     _OutSeg:
  9524                           	opt stack 19
  9525                           
  9526                           ; BSR set to: 0
  9527                           ;incstack = 0
  9528                           ;OutSeg@pInput stored from wreg
  9529  015010  0100               	movlb	0	; () banked
  9530  015012  6FC0               	movwf	OutSeg@pInput& (0+255),b
  9531                           
  9532                           ;HMI.c: 58: static UINT8 cur;
  9533                           ;HMI.c: 59: volatile UINT8 out;
  9534                           ;HMI.c: 60: static UINT8 segset;
  9535                           ;HMI.c: 61: static UINT8 a;
  9536                           ;HMI.c: 83: if (pSegment <= 8)
  9537  015014  0E09               	movlw	9
  9538  015016  0100               	movlb	0	; () banked
  9539  015018  61BD               	cpfslt	OutSeg@pSegment& (0+255),b
  9540  01501A  0012               	return	
  9541                           
  9542                           ; BSR set to: 0
  9543                           ;HMI.c: 84: {
  9544                           ;HMI.c: 85: cur = pInput;
  9545  01501C  C0C0  F03F         	movff	OutSeg@pInput,OutSeg@cur
  9546                           
  9547                           ; BSR set to: 0
  9548                           ;HMI.c: 86: for (a = 0u; a<8u; a++)
  9549  015020  0E00               	movlw	0
  9550  015022  6E3D               	movwf	OutSeg@a,c
  9551  015024                     l13435:
  9552                           
  9553                           ; BSR set to: 0
  9554  015024  0E07               	movlw	7
  9555  015026  643D               	cpfsgt	OutSeg@a,c
  9556  015028  D001               	goto	l1146
  9557  01502A  D027               	goto	u9900
  9558  01502C                     l1146:
  9559                           
  9560                           ;HMI.c: 87: {
  9561                           ;HMI.c: 88: segset = (cur & 1u)<<6u;
  9562                           
  9563                           ; BSR set to: 0
  9564  01502C  C03F  F0BE         	movff	OutSeg@cur,??_OutSeg
  9565  015030  0E01               	movlw	1
  9566  015032  0100               	movlb	0	; () banked
  9567  015034  17BE               	andwf	??_OutSeg& (0+255),f,b
  9568  015036  0E06               	movlw	6
  9569  015038  0100               	movlb	0	; () banked
  9570  01503A  6FBF               	movwf	(??_OutSeg+1)& (0+255),b
  9571  01503C                     u9895:
  9572  01503C  0100               	movlb	0	; () banked
  9573  01503E  90D8               	bcf	status,0,c
  9574  015040  37BE               	rlcf	??_OutSeg& (0+255),f,b
  9575  015042  0100               	movlb	0	; () banked
  9576  015044  2FBF               	decfsz	(??_OutSeg+1)& (0+255),f,b
  9577  015046  D7FA               	goto	u9895
  9578  015048  0100               	movlb	0	; () banked
  9579  01504A  51BE               	movf	??_OutSeg& (0+255),w,b
  9580  01504C  6E3E               	movwf	OutSeg@segset,c
  9581                           
  9582                           ;HMI.c: 89: out = (pSegment<<3u) | a | segset;
  9583  01504E  0100               	movlb	0	; () banked
  9584  015050  39BD               	swapf	OutSeg@pSegment& (0+255),w,b
  9585  015052  42E8               	rrncf	wreg,f,c
  9586  015054  0BF8               	andlw	248
  9587  015056  103D               	iorwf	OutSeg@a,w,c
  9588  015058  103E               	iorwf	OutSeg@segset,w,c
  9589  01505A  0100               	movlb	0	; () banked
  9590  01505C  6FC1               	movwf	OutSeg@out& (0+255),b	;volatile
  9591                           
  9592                           ;HMI.c: 90: cur >>= 1;
  9593  01505E  90D8               	bcf	status,0,c
  9594  015060  323F               	rrcf	OutSeg@cur,f,c
  9595                           
  9596                           ; BSR set to: 0
  9597                           ;HMI.c: 91: SPI_Send(&SPI1, out);
  9598  015062  0E76               	movlw	low _SPI1
  9599  015064  0100               	movlb	0	; () banked
  9600  015066  6FBA               	movwf	SPI_Send@pInput& (0+255),b
  9601  015068  0E03               	movlw	high _SPI1
  9602  01506A  0100               	movlb	0	; () banked
  9603  01506C  6FBB               	movwf	(SPI_Send@pInput+1)& (0+255),b
  9604  01506E  C0C1  F0BC         	movff	OutSeg@out,SPI_Send@pData	;volatile
  9605  015072  EC5B  F0AA         	call	_SPI_Send	;wreg free
  9606  015076  2A3D               	incf	OutSeg@a,f,c
  9607  015078  D7D5               	goto	l13435
  9608  01507A                     u9900:
  9609                           
  9610                           ;HMI.c: 96: }
  9611                           ;HMI.c: 97: SPI_Send(&SPI1, 0);
  9612  01507A  0E76               	movlw	low _SPI1
  9613  01507C  0100               	movlb	0	; () banked
  9614  01507E  6FBA               	movwf	SPI_Send@pInput& (0+255),b
  9615  015080  0E03               	movlw	high _SPI1
  9616  015082  0100               	movlb	0	; () banked
  9617  015084  6FBB               	movwf	(SPI_Send@pInput+1)& (0+255),b
  9618  015086  0E00               	movlw	0
  9619  015088  0100               	movlb	0	; () banked
  9620  01508A  6FBC               	movwf	SPI_Send@pData& (0+255),b
  9621  01508C  EC5B  F0AA         	call	_SPI_Send	;wreg free
  9622  015090  0012               	return	
  9623  015092                     __end_of_OutSeg:
  9624                           	opt stack 0
  9625                           tblptru	equ	0xFF8
  9626                           tblptrh	equ	0xFF7
  9627                           tblptrl	equ	0xFF6
  9628                           tablat	equ	0xFF5
  9629                           prodh	equ	0xFF4
  9630                           prodl	equ	0xFF3
  9631                           intcon	equ	0xFF2
  9632                           postinc0	equ	0xFEE
  9633                           wreg	equ	0xFE8
  9634                           postdec1	equ	0xFE5
  9635                           fsr1h	equ	0xFE2
  9636                           fsr1l	equ	0xFE1
  9637                           indf2	equ	0xFDF
  9638                           postinc2	equ	0xFDE
  9639                           postdec2	equ	0xFDD
  9640                           fsr2h	equ	0xFDA
  9641                           fsr2l	equ	0xFD9
  9642                           status	equ	0xFD8
  9643                           
  9644 ;; *************** function _Console_Render *****************
  9645 ;; Defined at:
  9646 ;;		line 377 in file "Library/Console.c"
  9647 ;; Parameters:    Size  Location     Type
  9648 ;;		None
  9649 ;; Auto vars:     Size  Location     Type
  9650 ;;  lCursor         4   38[BANK0 ] struct Point
  9651 ;;  y               1   43[BANK0 ] unsigned char 
  9652 ;;  x               1   42[BANK0 ] unsigned char 
  9653 ;;  temp            1   37[BANK0 ] unsigned char 
  9654 ;;  Temp            2    0        unsigned short 
  9655 ;; Return value:  Size  Location     Type
  9656 ;;                  1    wreg      void 
  9657 ;; Registers used:
  9658 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9659 ;; Tracked objects:
  9660 ;;		On entry : 0/0
  9661 ;;		On exit  : 0/0
  9662 ;;		Unchanged: 0/0
  9663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9665 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9666 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9667 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9668 ;;Total ram usage:        9 bytes
  9669 ;; Hardware stack levels used:    1
  9670 ;; Hardware stack levels required when called:   11
  9671 ;; This function calls:
  9672 ;;		_Console_MakeField
  9673 ;;		_LCD_DrawField
  9674 ;;		_LCD_FillRectangle
  9675 ;; This function is called by:
  9676 ;;		_findClosestWall
  9677 ;;		_mode1
  9678 ;;		_mode2
  9679 ;;		_mode4
  9680 ;;		_main
  9681 ;; This function uses a non-reentrant model
  9682 ;;
  9683                           
  9684                           	psect	text39
  9685  011DCE                     __ptext39:
  9686                           	opt stack 0
  9687  011DCE                     _Console_Render:
  9688                           	opt stack 17
  9689                           
  9690                           ;Console.c: 379: Colour Temp;
  9691                           ;Console.c: 380: if (change)
  9692                           
  9693                           ;incstack = 0
  9694  011DCE  0100               	movlb	0	; () banked
  9695  011DD0  51FF               	movf	_change& (0+255),w,b
  9696  011DD2  B4D8               	btfsc	status,2,c
  9697  011DD4  0012               	return	
  9698                           
  9699                           ; BSR set to: 0
  9700                           ;Console.c: 381: {
  9701                           ;Console.c: 382: UINT8 x, y, temp;
  9702                           ;Console.c: 383: Point lCursor = {6,6};
  9703  011DD6  C3E8  F0E0         	movff	Console_Render@F6956,Console_Render@lCursor
  9704  011DDA  C3E9  F0E1         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
  9705  011DDE  C3EA  F0E2         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
  9706  011DE2  C3EB  F0E3         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
  9707                           
  9708                           ; BSR set to: 0
  9709                           ;Console.c: 385: if (clearall)
  9710  011DE6  0100               	movlb	0	; () banked
  9711  011DE8  5192               	movf	_clearall& (0+255),w,b
  9712  011DEA  B4D8               	btfsc	status,2,c
  9713  011DEC  D005               	goto	l1056
  9714                           
  9715                           ; BSR set to: 0
  9716                           ;Console.c: 386: {
  9717                           ;Console.c: 389: temp = lBufferY;
  9718  011DEE  C090  F0DF         	movff	_lBufferY,Console_Render@temp
  9719                           
  9720                           ; BSR set to: 0
  9721                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
  9722  011DF2  0E0F               	movlw	15
  9723  011DF4  0100               	movlb	0	; () banked
  9724  011DF6  6F90               	movwf	_lBufferY& (0+255),b
  9725  011DF8                     l1056:
  9726                           
  9727                           ; BSR set to: 0
  9728                           ;Console.c: 391: }
  9729                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
  9730  011DF8  0E00               	movlw	0
  9731  011DFA  0100               	movlb	0	; () banked
  9732  011DFC  6FE5               	movwf	Console_Render@y& (0+255),b
  9733  011DFE  D0DF               	goto	l1057
  9734  011E00                     
  9735                           ; BSR set to: 0
  9736                           ;Console.c: 394: {
  9737                           ;Console.c: 395: gForecolour = lCBuffer[y];
  9738                           
  9739                           ; BSR set to: 0
  9740  011E00  0100               	movlb	0	; () banked
  9741  011E02  51E5               	movf	Console_Render@y& (0+255),w,b
  9742  011E04  0D02               	mullw	2
  9743  011E06  0E00               	movlw	low _lCBuffer
  9744  011E08  24F3               	addwf	prodl,w,c
  9745  011E0A  6ED9               	movwf	fsr2l,c
  9746  011E0C  0E03               	movlw	high _lCBuffer
  9747  011E0E  20F4               	addwfc	prodh,w,c
  9748  011E10  6EDA               	movwf	fsr2h,c
  9749  011E12  CFDE F0FD          	movff	postinc2,_gForecolour
  9750  011E16  CFDD F0FE          	movff	postdec2,_gForecolour+1
  9751                           
  9752                           ; BSR set to: 0
  9753                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
  9754  011E1A  0E00               	movlw	0
  9755  011E1C  0100               	movlb	0	; () banked
  9756  011E1E  6FE4               	movwf	Console_Render@x& (0+255),b
  9757  011E20                     l14009:
  9758                           
  9759                           ; BSR set to: 0
  9760  011E20  0E13               	movlw	19
  9761  011E22  0100               	movlb	0	; () banked
  9762  011E24  65E4               	cpfsgt	Console_Render@x& (0+255),b
  9763  011E26  D001               	goto	l1059
  9764  011E28  D0BE               	goto	u10700
  9765  011E2A                     l1059:
  9766                           
  9767                           ; BSR set to: 0
  9768                           ;Console.c: 397: {
  9769                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
  9770                           
  9771                           ; BSR set to: 0
  9772  011E2A  0100               	movlb	0	; () banked
  9773  011E2C  51E5               	movf	Console_Render@y& (0+255),w,b
  9774  011E2E  0D14               	mullw	20
  9775  011E30  0EAA               	movlw	low _lBuffer
  9776  011E32  0100               	movlb	0	; () banked
  9777  011E34  6FDD               	movwf	??_Console_Render& (0+255),b
  9778  011E36  0E04               	movlw	high _lBuffer
  9779  011E38  0100               	movlb	0	; () banked
  9780  011E3A  6FDE               	movwf	(??_Console_Render+1)& (0+255),b
  9781  011E3C  50F3               	movf	prodl,w,c
  9782  011E3E  0100               	movlb	0	; () banked
  9783  011E40  27DD               	addwf	??_Console_Render& (0+255),f,b
  9784  011E42  50F4               	movf	prodh,w,c
  9785  011E44  0100               	movlb	0	; () banked
  9786  011E46  23DE               	addwfc	(??_Console_Render+1)& (0+255),f,b
  9787  011E48  0100               	movlb	0	; () banked
  9788  011E4A  51E4               	movf	Console_Render@x& (0+255),w,b
  9789  011E4C  0D01               	mullw	1
  9790  011E4E  50F3               	movf	prodl,w,c
  9791  011E50  0100               	movlb	0	; () banked
  9792  011E52  25DD               	addwf	??_Console_Render& (0+255),w,b
  9793  011E54  6ED9               	movwf	fsr2l,c
  9794  011E56  50F4               	movf	prodh,w,c
  9795  011E58  0100               	movlb	0	; () banked
  9796  011E5A  21DE               	addwfc	(??_Console_Render+1)& (0+255),w,b
  9797  011E5C  6EDA               	movwf	fsr2h,c
  9798  011E5E  AEDF               	btfss	indf2,7,c
  9799  011E60  D09A               	goto	l1063
  9800                           
  9801                           ; BSR set to: 0
  9802                           ;Console.c: 399: {
  9803                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
  9804  011E62  0100               	movlb	0	; () banked
  9805  011E64  51E5               	movf	Console_Render@y& (0+255),w,b
  9806  011E66  0D14               	mullw	20
  9807  011E68  0EAA               	movlw	low _lBuffer
  9808  011E6A  0100               	movlb	0	; () banked
  9809  011E6C  6FDD               	movwf	??_Console_Render& (0+255),b
  9810  011E6E  0E04               	movlw	high _lBuffer
  9811  011E70  0100               	movlb	0	; () banked
  9812  011E72  6FDE               	movwf	(??_Console_Render+1)& (0+255),b
  9813  011E74  50F3               	movf	prodl,w,c
  9814  011E76  0100               	movlb	0	; () banked
  9815  011E78  27DD               	addwf	??_Console_Render& (0+255),f,b
  9816  011E7A  50F4               	movf	prodh,w,c
  9817  011E7C  0100               	movlb	0	; () banked
  9818  011E7E  23DE               	addwfc	(??_Console_Render+1)& (0+255),f,b
  9819  011E80  0100               	movlb	0	; () banked
  9820  011E82  51E4               	movf	Console_Render@x& (0+255),w,b
  9821  011E84  0D01               	mullw	1
  9822  011E86  50F3               	movf	prodl,w,c
  9823  011E88  0100               	movlb	0	; () banked
  9824  011E8A  25DD               	addwf	??_Console_Render& (0+255),w,b
  9825  011E8C  6ED9               	movwf	fsr2l,c
  9826  011E8E  50F4               	movf	prodh,w,c
  9827  011E90  0100               	movlb	0	; () banked
  9828  011E92  21DE               	addwfc	(??_Console_Render+1)& (0+255),w,b
  9829  011E94  6EDA               	movwf	fsr2h,c
  9830  011E96  0E7F               	movlw	127
  9831  011E98  16DF               	andwf	indf2,f,c
  9832                           
  9833                           ;Console.c: 401: if (lBuffer[y][x])
  9834  011E9A  0100               	movlb	0	; () banked
  9835  011E9C  51E5               	movf	Console_Render@y& (0+255),w,b
  9836  011E9E  0D14               	mullw	20
  9837  011EA0  0EAA               	movlw	low _lBuffer
  9838  011EA2  0100               	movlb	0	; () banked
  9839  011EA4  6FDD               	movwf	??_Console_Render& (0+255),b
  9840  011EA6  0E04               	movlw	high _lBuffer
  9841  011EA8  0100               	movlb	0	; () banked
  9842  011EAA  6FDE               	movwf	(??_Console_Render+1)& (0+255),b
  9843  011EAC  50F3               	movf	prodl,w,c
  9844  011EAE  0100               	movlb	0	; () banked
  9845  011EB0  27DD               	addwf	??_Console_Render& (0+255),f,b
  9846  011EB2  50F4               	movf	prodh,w,c
  9847  011EB4  0100               	movlb	0	; () banked
  9848  011EB6  23DE               	addwfc	(??_Console_Render+1)& (0+255),f,b
  9849  011EB8  0100               	movlb	0	; () banked
  9850  011EBA  51E4               	movf	Console_Render@x& (0+255),w,b
  9851  011EBC  0D01               	mullw	1
  9852  011EBE  50F3               	movf	prodl,w,c
  9853  011EC0  0100               	movlb	0	; () banked
  9854  011EC2  25DD               	addwf	??_Console_Render& (0+255),w,b
  9855  011EC4  6ED9               	movwf	fsr2l,c
  9856  011EC6  50F4               	movf	prodh,w,c
  9857  011EC8  0100               	movlb	0	; () banked
  9858  011ECA  21DE               	addwfc	(??_Console_Render+1)& (0+255),w,b
  9859  011ECC  6EDA               	movwf	fsr2h,c
  9860  011ECE  50DF               	movf	indf2,w,c
  9861  011ED0  B4D8               	btfsc	status,2,c
  9862  011ED2  D04A               	goto	l1062
  9863                           
  9864                           ; BSR set to: 0
  9865                           ;Console.c: 402: {
  9866                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
  9867  011ED4  C085  F0C3         	movff	_gBackcolour,LCD_FillRectangle@pColour
  9868  011ED8  C086  F0C4         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
  9869  011EDC  C0E0  F0C5         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
  9870  011EE0  C0E1  F0C6         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
  9871  011EE4  C0E2  F0C7         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
  9872  011EE8  C0E3  F0C8         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
  9873  011EEC  C3F0  F0C9         	movff	_gCharSize,LCD_FillRectangle@pSize
  9874  011EF0  C3F1  F0CA         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
  9875  011EF4  C3F2  F0CB         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
  9876  011EF8  C3F3  F0CC         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
  9877  011EFC  EC3B  F0A9         	call	_LCD_FillRectangle	;wreg free
  9878                           
  9879                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
  9880  011F00  0100               	movlb	0	; () banked
  9881  011F02  51E5               	movf	Console_Render@y& (0+255),w,b
  9882  011F04  0D14               	mullw	20
  9883  011F06  0EAA               	movlw	low _lBuffer
  9884  011F08  0100               	movlb	0	; () banked
  9885  011F0A  6FDD               	movwf	??_Console_Render& (0+255),b
  9886  011F0C  0E04               	movlw	high _lBuffer
  9887  011F0E  0100               	movlb	0	; () banked
  9888  011F10  6FDE               	movwf	(??_Console_Render+1)& (0+255),b
  9889  011F12  50F3               	movf	prodl,w,c
  9890  011F14  0100               	movlb	0	; () banked
  9891  011F16  27DD               	addwf	??_Console_Render& (0+255),f,b
  9892  011F18  50F4               	movf	prodh,w,c
  9893  011F1A  0100               	movlb	0	; () banked
  9894  011F1C  23DE               	addwfc	(??_Console_Render+1)& (0+255),f,b
  9895  011F1E  0100               	movlb	0	; () banked
  9896  011F20  51E4               	movf	Console_Render@x& (0+255),w,b
  9897  011F22  0D01               	mullw	1
  9898  011F24  50F3               	movf	prodl,w,c
  9899  011F26  0100               	movlb	0	; () banked
  9900  011F28  25DD               	addwf	??_Console_Render& (0+255),w,b
  9901  011F2A  6ED9               	movwf	fsr2l,c
  9902  011F2C  50F4               	movf	prodh,w,c
  9903  011F2E  0100               	movlb	0	; () banked
  9904  011F30  21DE               	addwfc	(??_Console_Render+1)& (0+255),w,b
  9905  011F32  6EDA               	movwf	fsr2h,c
  9906  011F34  50DF               	movf	indf2,w,c
  9907  011F36  ECEF  F09E         	call	_Console_MakeField
  9908  011F3A  C0BF  F0CC         	movff	?_Console_MakeField,LCD_DrawField@pField
  9909  011F3E  C0C0  F0CD         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
  9910  011F42  C0E0  F0CE         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
  9911  011F46  C0E1  F0CF         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
  9912  011F4A  C0E2  F0D0         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
  9913  011F4E  C0E3  F0D1         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
  9914  011F52  C3F0  F0D2         	movff	_gCharSize,LCD_DrawField@pSize
  9915  011F56  C3F1  F0D3         	movff	_gCharSize+1,LCD_DrawField@pSize+1
  9916  011F5A  C3F2  F0D4         	movff	_gCharSize+2,LCD_DrawField@pSize+2
  9917  011F5E  C3F3  F0D5         	movff	_gCharSize+3,LCD_DrawField@pSize+3
  9918  011F62  ECE9  F0A4         	call	_LCD_DrawField	;wreg free
  9919                           
  9920                           ;Console.c: 405: }
  9921  011F66  D017               	goto	l1063
  9922  011F68                     l1062:
  9923                           
  9924                           ;Console.c: 406: else
  9925                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
  9926  011F68  0E00               	movlw	0
  9927  011F6A  0100               	movlb	0	; () banked
  9928  011F6C  6FC4               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
  9929  011F6E  0E00               	movlw	0
  9930  011F70  6FC3               	movwf	LCD_FillRectangle@pColour& (0+255),b
  9931  011F72  C0E0  F0C5         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
  9932  011F76  C0E1  F0C6         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
  9933  011F7A  C0E2  F0C7         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
  9934  011F7E  C0E3  F0C8         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
  9935  011F82  C3F0  F0C9         	movff	_gCharSize,LCD_FillRectangle@pSize
  9936  011F86  C3F1  F0CA         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
  9937  011F8A  C3F2  F0CB         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
  9938  011F8E  C3F3  F0CC         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
  9939  011F92  EC3B  F0A9         	call	_LCD_FillRectangle	;wreg free
  9940  011F96                     l1063:
  9941                           
  9942                           ;Console.c: 408: }
  9943                           ;Console.c: 409: lCursor.x += (5 + 1);
  9944  011F96  0E06               	movlw	6
  9945  011F98  0100               	movlb	0	; () banked
  9946  011F9A  27E0               	addwf	Console_Render@lCursor& (0+255),f,b
  9947  011F9C  0E00               	movlw	0
  9948  011F9E  23E1               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
  9949                           
  9950                           ; BSR set to: 0
  9951  011FA0  0100               	movlb	0	; () banked
  9952  011FA2  2BE4               	incf	Console_Render@x& (0+255),f,b
  9953  011FA4  D73D               	goto	l14009
  9954  011FA6                     u10700:
  9955                           
  9956                           ; BSR set to: 0
  9957                           ;Console.c: 410: }
  9958                           ;Console.c: 411: lCursor.y += (7 + 1);
  9959                           
  9960                           ; BSR set to: 0
  9961  011FA6  0E08               	movlw	8
  9962  011FA8  0100               	movlb	0	; () banked
  9963  011FAA  27E2               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
  9964  011FAC  0E00               	movlw	0
  9965  011FAE  23E3               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
  9966                           
  9967                           ; BSR set to: 0
  9968                           ;Console.c: 412: lCursor.x = 6;
  9969  011FB0  0E00               	movlw	0
  9970  011FB2  0100               	movlb	0	; () banked
  9971  011FB4  6FE1               	movwf	(Console_Render@lCursor+1)& (0+255),b
  9972  011FB6  0E06               	movlw	6
  9973  011FB8  6FE0               	movwf	Console_Render@lCursor& (0+255),b
  9974                           
  9975                           ; BSR set to: 0
  9976  011FBA  0100               	movlb	0	; () banked
  9977  011FBC  2BE5               	incf	Console_Render@y& (0+255),f,b
  9978  011FBE                     l1057:
  9979                           
  9980                           ; BSR set to: 0
  9981                           
  9982                           ; BSR set to: 0
  9983  011FBE  0100               	movlb	0	; () banked
  9984  011FC0  51E5               	movf	Console_Render@y& (0+255),w,b
  9985  011FC2  0100               	movlb	0	; () banked
  9986  011FC4  5D90               	subwf	_lBufferY& (0+255),w,b
  9987  011FC6  B0D8               	btfsc	status,0,c
  9988  011FC8  D71B               	goto	l1058
  9989                           
  9990                           ; BSR set to: 0
  9991                           ;Console.c: 413: }
  9992                           ;Console.c: 415: if (clearall)
  9993                           
  9994                           ; BSR set to: 0
  9995  011FCA  0100               	movlb	0	; () banked
  9996  011FCC  5192               	movf	_clearall& (0+255),w,b
  9997  011FCE  B4D8               	btfsc	status,2,c
  9998  011FD0  0012               	return	
  9999                           
 10000                           ; BSR set to: 0
 10001                           ;Console.c: 416: {
 10002                           ;Console.c: 417: clearall = 0;
 10003  011FD2  0E00               	movlw	0
 10004  011FD4  0100               	movlb	0	; () banked
 10005  011FD6  6F92               	movwf	_clearall& (0+255),b
 10006                           
 10007                           ; BSR set to: 0
 10008                           ;Console.c: 418: lBufferY = temp;
 10009  011FD8  C0DF  F090         	movff	Console_Render@temp,_lBufferY
 10010                           
 10011                           ; BSR set to: 0
 10012  011FDC  0012               	return	
 10013  011FDE                     __end_of_Console_Render:
 10014                           	opt stack 0
 10015                           tblptru	equ	0xFF8
 10016                           tblptrh	equ	0xFF7
 10017                           tblptrl	equ	0xFF6
 10018                           tablat	equ	0xFF5
 10019                           prodh	equ	0xFF4
 10020                           prodl	equ	0xFF3
 10021                           intcon	equ	0xFF2
 10022                           postinc0	equ	0xFEE
 10023                           wreg	equ	0xFE8
 10024                           postdec1	equ	0xFE5
 10025                           fsr1h	equ	0xFE2
 10026                           fsr1l	equ	0xFE1
 10027                           indf2	equ	0xFDF
 10028                           postinc2	equ	0xFDE
 10029                           postdec2	equ	0xFDD
 10030                           fsr2h	equ	0xFDA
 10031                           fsr2l	equ	0xFD9
 10032                           status	equ	0xFD8
 10033                           
 10034 ;; *************** function _LCD_FillRectangle *****************
 10035 ;; Defined at:
 10036 ;;		line 318 in file "Library/LCD.c"
 10037 ;; Parameters:    Size  Location     Type
 10038 ;;  pColour         2    9[BANK0 ] unsigned short 
 10039 ;;  pPoint          4   11[BANK0 ] struct Point
 10040 ;;  pSize           4   15[BANK0 ] struct Point
 10041 ;; Auto vars:     Size  Location     Type
 10042 ;;  j               1   22[BANK0 ] unsigned char 
 10043 ;;  i               1   21[BANK0 ] unsigned char 
 10044 ;; Return value:  Size  Location     Type
 10045 ;;                  1    wreg      void 
 10046 ;; Registers used:
 10047 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10048 ;; Tracked objects:
 10049 ;;		On entry : 0/0
 10050 ;;		On exit  : 0/0
 10051 ;;		Unchanged: 0/0
 10052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10053 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10054 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10055 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10056 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10057 ;;Total ram usage:       14 bytes
 10058 ;; Hardware stack levels used:    1
 10059 ;; Hardware stack levels required when called:   10
 10060 ;; This function calls:
 10061 ;;		_LCD_Word_Write
 10062 ;;		_Set_Addr_Window
 10063 ;; This function is called by:
 10064 ;;		_Console_Render
 10065 ;;		_Console_ClearLine
 10066 ;; This function uses a non-reentrant model
 10067 ;;
 10068                           
 10069                           	psect	text40
 10070  015276                     __ptext40:
 10071                           	opt stack 0
 10072  015276                     _LCD_FillRectangle:
 10073                           	opt stack 17
 10074                           
 10075                           ;LCD.c: 320: UINT8 i = 0x00;
 10076                           
 10077                           ; BSR set to: 0
 10078                           ;incstack = 0
 10079  015276  0E00               	movlw	0
 10080  015278  0100               	movlb	0	; () banked
 10081  01527A  6FCF               	movwf	LCD_FillRectangle@i& (0+255),b
 10082                           
 10083                           ;LCD.c: 321: UINT8 j = 0x00;
 10084  01527C  0E00               	movlw	0
 10085  01527E  0100               	movlb	0	; () banked
 10086  015280  6FD0               	movwf	LCD_FillRectangle@j& (0+255),b
 10087                           
 10088                           ; BSR set to: 0
 10089                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
 10090  015282  C0C7  F0BF         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
 10091  015286  0100               	movlb	0	; () banked
 10092  015288  51C5               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 10093  01528A  0100               	movlb	0	; () banked
 10094  01528C  25C9               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
 10095  01528E  0100               	movlb	0	; () banked
 10096  015290  6FCD               	movwf	??_LCD_FillRectangle& (0+255),b
 10097  015292  0100               	movlb	0	; () banked
 10098  015294  05CD               	decf	??_LCD_FillRectangle& (0+255),w,b
 10099  015296  0100               	movlb	0	; () banked
 10100  015298  6FC0               	movwf	Set_Addr_Window@xe& (0+255),b
 10101  01529A  0100               	movlb	0	; () banked
 10102  01529C  51C7               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
 10103  01529E  0100               	movlb	0	; () banked
 10104  0152A0  25CB               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
 10105  0152A2  0100               	movlb	0	; () banked
 10106  0152A4  6FCE               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
 10107  0152A6  0100               	movlb	0	; () banked
 10108  0152A8  05CE               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
 10109  0152AA  0100               	movlb	0	; () banked
 10110  0152AC  6FC1               	movwf	Set_Addr_Window@ye& (0+255),b
 10111  0152AE  0100               	movlb	0	; () banked
 10112  0152B0  51C5               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 10113  0152B2  ECF3  F0A2         	call	_Set_Addr_Window
 10114                           
 10115                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
 10116  0152B6  C0CB  F0D0         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
 10117  0152BA                     l13171:
 10118  0152BA  0100               	movlb	0	; () banked
 10119  0152BC  51D0               	movf	LCD_FillRectangle@j& (0+255),w,b
 10120  0152BE  0100               	movlb	0	; () banked
 10121  0152C0  B4D8               	btfsc	status,2,c
 10122  0152C2  0012               	return	
 10123                           
 10124                           ; BSR set to: 0
 10125                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
 10126                           
 10127                           ; BSR set to: 0
 10128  0152C4  C0C9  F0CF         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
 10129  0152C8                     l13175:
 10130                           
 10131                           ; BSR set to: 0
 10132  0152C8  0100               	movlb	0	; () banked
 10133  0152CA  51CF               	movf	LCD_FillRectangle@i& (0+255),w,b
 10134  0152CC  0100               	movlb	0	; () banked
 10135  0152CE  B4D8               	btfsc	status,2,c
 10136  0152D0  D009               	goto	u9670
 10137                           
 10138                           ; BSR set to: 0
 10139                           ;LCD.c: 333: LCD_Word_Write(pColour);
 10140                           
 10141                           ; BSR set to: 0
 10142                           
 10143                           ; BSR set to: 0
 10144  0152D2  C0C3  F0BF         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
 10145  0152D6  C0C4  F0C0         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
 10146  0152DA  ECB9  F0B1         	call	_LCD_Word_Write	;wreg free
 10147  0152DE  0100               	movlb	0	; () banked
 10148  0152E0  07CF               	decf	LCD_FillRectangle@i& (0+255),f,b
 10149  0152E2  D7F2               	goto	l13175
 10150  0152E4                     u9670:
 10151                           
 10152                           ; BSR set to: 0
 10153                           
 10154                           ; BSR set to: 0
 10155  0152E4  0100               	movlb	0	; () banked
 10156  0152E6  07D0               	decf	LCD_FillRectangle@j& (0+255),f,b
 10157  0152E8  D7E8               	goto	l13171
 10158  0152EA                     __end_of_LCD_FillRectangle:
 10159                           	opt stack 0
 10160                           tblptru	equ	0xFF8
 10161                           tblptrh	equ	0xFF7
 10162                           tblptrl	equ	0xFF6
 10163                           tablat	equ	0xFF5
 10164                           prodh	equ	0xFF4
 10165                           prodl	equ	0xFF3
 10166                           intcon	equ	0xFF2
 10167                           postinc0	equ	0xFEE
 10168                           wreg	equ	0xFE8
 10169                           postdec1	equ	0xFE5
 10170                           fsr1h	equ	0xFE2
 10171                           fsr1l	equ	0xFE1
 10172                           indf2	equ	0xFDF
 10173                           postinc2	equ	0xFDE
 10174                           postdec2	equ	0xFDD
 10175                           fsr2h	equ	0xFDA
 10176                           fsr2l	equ	0xFD9
 10177                           status	equ	0xFD8
 10178                           
 10179 ;; *************** function _LCD_DrawField *****************
 10180 ;; Defined at:
 10181 ;;		line 393 in file "Library/LCD.c"
 10182 ;; Parameters:    Size  Location     Type
 10183 ;;  pField          2   18[BANK0 ] PTR unsigned short 
 10184 ;;		 -> Console_MakeField@Fill(70), 
 10185 ;;  pPoint          4   20[BANK0 ] struct Point
 10186 ;;  pSize           4   24[BANK0 ] struct Point
 10187 ;; Auto vars:     Size  Location     Type
 10188 ;;  count           2   30[BANK0 ] unsigned short 
 10189 ;;  i               1   34[BANK0 ] unsigned char 
 10190 ;;  ymax            1   33[BANK0 ] unsigned char 
 10191 ;;  xmax            1   32[BANK0 ] unsigned char 
 10192 ;; Return value:  Size  Location     Type
 10193 ;;                  1    wreg      void 
 10194 ;; Registers used:
 10195 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10196 ;; Tracked objects:
 10197 ;;		On entry : 0/0
 10198 ;;		On exit  : 0/0
 10199 ;;		Unchanged: 0/0
 10200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10201 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10202 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10203 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10204 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10205 ;;Total ram usage:       17 bytes
 10206 ;; Hardware stack levels used:    1
 10207 ;; Hardware stack levels required when called:   10
 10208 ;; This function calls:
 10209 ;;		_LCD_Word_Write
 10210 ;;		_Set_Addr_Window
 10211 ;;		___wmul
 10212 ;; This function is called by:
 10213 ;;		_Console_Render
 10214 ;; This function uses a non-reentrant model
 10215 ;;
 10216                           
 10217                           	psect	text41
 10218  0149D2                     __ptext41:
 10219                           	opt stack 0
 10220  0149D2                     _LCD_DrawField:
 10221                           	opt stack 17
 10222                           
 10223                           ;LCD.c: 396: UINT8 i = 0x00;
 10224                           
 10225                           ; BSR set to: 0
 10226                           ;incstack = 0
 10227  0149D2  0E00               	movlw	0
 10228  0149D4  0100               	movlb	0	; () banked
 10229  0149D6  6FDC               	movwf	LCD_DrawField@i& (0+255),b
 10230                           
 10231                           ; BSR set to: 0
 10232                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
 10233  0149D8  0100               	movlb	0	; () banked
 10234  0149DA  51CE               	movf	LCD_DrawField@pPoint& (0+255),w,b
 10235  0149DC  0100               	movlb	0	; () banked
 10236  0149DE  25D2               	addwf	LCD_DrawField@pSize& (0+255),w,b
 10237  0149E0  0100               	movlb	0	; () banked
 10238  0149E2  6FDA               	movwf	LCD_DrawField@xmax& (0+255),b
 10239                           
 10240                           ; BSR set to: 0
 10241                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
 10242  0149E4  0100               	movlb	0	; () banked
 10243  0149E6  51D0               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
 10244  0149E8  0100               	movlb	0	; () banked
 10245  0149EA  25D4               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
 10246  0149EC  0100               	movlb	0	; () banked
 10247  0149EE  6FDB               	movwf	LCD_DrawField@ymax& (0+255),b
 10248                           
 10249                           ; BSR set to: 0
 10250                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
 10251  0149F0  C0D4  F0BA         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
 10252  0149F4  C0D5  F0BB         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
 10253  0149F8  C0D2  F0BC         	movff	LCD_DrawField@pSize,___wmul@multiplicand
 10254  0149FC  C0D3  F0BD         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
 10255  014A00  EC28  F0B0         	call	___wmul	;wreg free
 10256  014A04  C0BA  F0D8         	movff	?___wmul,LCD_DrawField@count
 10257  014A08  C0BB  F0D9         	movff	?___wmul+1,LCD_DrawField@count+1
 10258                           
 10259                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
 10260  014A0C  C0D0  F0BF         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
 10261  014A10  0100               	movlb	0	; () banked
 10262  014A12  05DA               	decf	LCD_DrawField@xmax& (0+255),w,b
 10263  014A14  0100               	movlb	0	; () banked
 10264  014A16  6FC0               	movwf	Set_Addr_Window@xe& (0+255),b
 10265  014A18  0100               	movlb	0	; () banked
 10266  014A1A  05DB               	decf	LCD_DrawField@ymax& (0+255),w,b
 10267  014A1C  0100               	movlb	0	; () banked
 10268  014A1E  6FC1               	movwf	Set_Addr_Window@ye& (0+255),b
 10269  014A20  0100               	movlb	0	; () banked
 10270  014A22  51CE               	movf	LCD_DrawField@pPoint& (0+255),w,b
 10271  014A24  ECF3  F0A2         	call	_Set_Addr_Window
 10272                           
 10273                           ;LCD.c: 403: for(i = 0; i < count; i++)
 10274  014A28  0E00               	movlw	0
 10275  014A2A  0100               	movlb	0	; () banked
 10276  014A2C  6FDC               	movwf	LCD_DrawField@i& (0+255),b
 10277  014A2E  D013               	goto	l183
 10278  014A30                     
 10279                           ; BSR set to: 0
 10280                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
 10281                           
 10282                           ; BSR set to: 0
 10283  014A30  0100               	movlb	0	; () banked
 10284  014A32  51DC               	movf	LCD_DrawField@i& (0+255),w,b
 10285  014A34  0D02               	mullw	2
 10286  014A36  50F3               	movf	prodl,w,c
 10287  014A38  0100               	movlb	0	; () banked
 10288  014A3A  25CC               	addwf	LCD_DrawField@pField& (0+255),w,b
 10289  014A3C  6ED9               	movwf	fsr2l,c
 10290  014A3E  50F4               	movf	prodh,w,c
 10291  014A40  0100               	movlb	0	; () banked
 10292  014A42  21CD               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
 10293  014A44  6EDA               	movwf	fsr2h,c
 10294  014A46  CFDE F0BF          	movff	postinc2,LCD_Word_Write@value
 10295  014A4A  CFDD F0C0          	movff	postdec2,LCD_Word_Write@value+1
 10296  014A4E  ECB9  F0B1         	call	_LCD_Word_Write	;wreg free
 10297  014A52  0100               	movlb	0	; () banked
 10298  014A54  2BDC               	incf	LCD_DrawField@i& (0+255),f,b
 10299  014A56                     l183:
 10300                           
 10301                           ; BSR set to: 0
 10302                           
 10303                           ; BSR set to: 0
 10304  014A56  0100               	movlb	0	; () banked
 10305  014A58  51DC               	movf	LCD_DrawField@i& (0+255),w,b
 10306  014A5A  0100               	movlb	0	; () banked
 10307  014A5C  6FD6               	movwf	??_LCD_DrawField& (0+255),b
 10308  014A5E  6BD7               	clrf	(??_LCD_DrawField+1)& (0+255),b
 10309  014A60  0100               	movlb	0	; () banked
 10310  014A62  51D8               	movf	LCD_DrawField@count& (0+255),w,b
 10311  014A64  0100               	movlb	0	; () banked
 10312  014A66  5DD6               	subwf	??_LCD_DrawField& (0+255),w,b
 10313  014A68  0100               	movlb	0	; () banked
 10314  014A6A  51D9               	movf	(LCD_DrawField@count+1)& (0+255),w,b
 10315  014A6C  0100               	movlb	0	; () banked
 10316  014A6E  59D7               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
 10317  014A70  B0D8               	btfsc	status,0,c
 10318  014A72  0012               	return	
 10319  014A74  D7DD               	goto	l184
 10320  014A76                     __end_of_LCD_DrawField:
 10321                           	opt stack 0
 10322                           tblptru	equ	0xFF8
 10323                           tblptrh	equ	0xFF7
 10324                           tblptrl	equ	0xFF6
 10325                           tablat	equ	0xFF5
 10326                           prodh	equ	0xFF4
 10327                           prodl	equ	0xFF3
 10328                           intcon	equ	0xFF2
 10329                           postinc0	equ	0xFEE
 10330                           wreg	equ	0xFE8
 10331                           postdec1	equ	0xFE5
 10332                           fsr1h	equ	0xFE2
 10333                           fsr1l	equ	0xFE1
 10334                           indf2	equ	0xFDF
 10335                           postinc2	equ	0xFDE
 10336                           postdec2	equ	0xFDD
 10337                           fsr2h	equ	0xFDA
 10338                           fsr2l	equ	0xFD9
 10339                           status	equ	0xFD8
 10340                           
 10341 ;; *************** function ___wmul *****************
 10342 ;; Defined at:
 10343 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
 10344 ;; Parameters:    Size  Location     Type
 10345 ;;  multiplier      2    0[BANK0 ] unsigned int 
 10346 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 10347 ;; Auto vars:     Size  Location     Type
 10348 ;;  product         2    4[BANK0 ] unsigned int 
 10349 ;; Return value:  Size  Location     Type
 10350 ;;                  2    0[BANK0 ] unsigned int 
 10351 ;; Registers used:
 10352 ;;		wreg, status,2, status,0, prodl, prodh
 10353 ;; Tracked objects:
 10354 ;;		On entry : 0/0
 10355 ;;		On exit  : 0/0
 10356 ;;		Unchanged: 0/0
 10357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10358 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10359 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10361 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10362 ;;Total ram usage:        6 bytes
 10363 ;; Hardware stack levels used:    1
 10364 ;; Hardware stack levels required when called:    7
 10365 ;; This function calls:
 10366 ;;		Nothing
 10367 ;; This function is called by:
 10368 ;;		_LCD_DrawField
 10369 ;; This function uses a non-reentrant model
 10370 ;;
 10371                           
 10372                           	psect	text42
 10373  016050                     __ptext42:
 10374                           	opt stack 0
 10375  016050                     ___wmul:
 10376                           	opt stack 19
 10377                           
 10378                           ; BSR set to: 0
 10379                           ;incstack = 0
 10380  016050  0100               	movlb	0	; () banked
 10381  016052  51BA               	movf	___wmul@multiplier& (0+255),w,b
 10382  016054  0100               	movlb	0	; () banked
 10383  016056  03BC               	mulwf	___wmul@multiplicand& (0+255),b
 10384  016058  CFF3 F0BE          	movff	prodl,___wmul@product
 10385  01605C  CFF4 F0BF          	movff	prodh,___wmul@product+1
 10386  016060  0100               	movlb	0	; () banked
 10387  016062  51BA               	movf	___wmul@multiplier& (0+255),w,b
 10388  016064  0100               	movlb	0	; () banked
 10389  016066  03BD               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 10390  016068  50F3               	movf	prodl,w,c
 10391  01606A  0100               	movlb	0	; () banked
 10392  01606C  27BF               	addwf	(___wmul@product+1)& (0+255),f,b
 10393  01606E  0100               	movlb	0	; () banked
 10394  016070  51BB               	movf	(___wmul@multiplier+1)& (0+255),w,b
 10395  016072  0100               	movlb	0	; () banked
 10396  016074  03BC               	mulwf	___wmul@multiplicand& (0+255),b
 10397  016076  50F3               	movf	prodl,w,c
 10398  016078  0100               	movlb	0	; () banked
 10399  01607A  27BF               	addwf	(___wmul@product+1)& (0+255),f,b
 10400                           
 10401                           ; BSR set to: 0
 10402  01607C  C0BE  F0BA         	movff	___wmul@product,?___wmul
 10403  016080  C0BF  F0BB         	movff	___wmul@product+1,?___wmul+1
 10404  016084  0012               	return	
 10405  016086                     __end_of___wmul:
 10406                           	opt stack 0
 10407                           tblptru	equ	0xFF8
 10408                           tblptrh	equ	0xFF7
 10409                           tblptrl	equ	0xFF6
 10410                           tablat	equ	0xFF5
 10411                           prodh	equ	0xFF4
 10412                           prodl	equ	0xFF3
 10413                           intcon	equ	0xFF2
 10414                           postinc0	equ	0xFEE
 10415                           wreg	equ	0xFE8
 10416                           postdec1	equ	0xFE5
 10417                           fsr1h	equ	0xFE2
 10418                           fsr1l	equ	0xFE1
 10419                           indf2	equ	0xFDF
 10420                           postinc2	equ	0xFDE
 10421                           postdec2	equ	0xFDD
 10422                           fsr2h	equ	0xFDA
 10423                           fsr2l	equ	0xFD9
 10424                           status	equ	0xFD8
 10425                           
 10426 ;; *************** function _Console_MakeField *****************
 10427 ;; Defined at:
 10428 ;;		line 435 in file "Library/Console.c"
 10429 ;; Parameters:    Size  Location     Type
 10430 ;;  pInput          1    wreg     unsigned char 
 10431 ;; Auto vars:     Size  Location     Type
 10432 ;;  pInput          1   11[BANK0 ] unsigned char 
 10433 ;;  y               1   17[BANK0 ] unsigned char 
 10434 ;;  x               1   16[BANK0 ] unsigned char 
 10435 ;;  Column          2   12[BANK0 ] PTR struct Byte
 10436 ;;		 -> Font5x7(480), 
 10437 ;;  Index           2    9[BANK0 ] unsigned short 
 10438 ;; Return value:  Size  Location     Type
 10439 ;;                  2    5[BANK0 ] PTR unsigned short 
 10440 ;; Registers used:
 10441 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10442 ;; Tracked objects:
 10443 ;;		On entry : 0/0
 10444 ;;		On exit  : 0/0
 10445 ;;		Unchanged: 0/0
 10446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10447 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10448 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10449 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10450 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10451 ;;Total ram usage:       13 bytes
 10452 ;; Hardware stack levels used:    1
 10453 ;; Hardware stack levels required when called:    8
 10454 ;; This function calls:
 10455 ;;		_Byte_GetBit
 10456 ;; This function is called by:
 10457 ;;		_Console_Render
 10458 ;; This function uses a non-reentrant model
 10459 ;;
 10460                           
 10461                           	psect	text43
 10462  013DDE                     __ptext43:
 10463                           	opt stack 0
 10464  013DDE                     _Console_MakeField:
 10465                           	opt stack 19
 10466                           
 10467                           ; BSR set to: 0
 10468                           ;incstack = 0
 10469                           ;Console_MakeField@pInput stored from wreg
 10470  013DDE  0100               	movlb	0	; () banked
 10471  013DE0  6FC5               	movwf	Console_MakeField@pInput& (0+255),b
 10472                           
 10473                           ;Console.c: 437: static Colour Fill[7][5];
 10474                           ;Console.c: 438: pInput -= 32;
 10475  013DE2  0E20               	movlw	32
 10476  013DE4  0100               	movlb	0	; () banked
 10477  013DE6  5FC5               	subwf	Console_MakeField@pInput& (0+255),f,b
 10478                           
 10479                           ; BSR set to: 0
 10480                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
 10481  013DE8  0100               	movlb	0	; () banked
 10482  013DEA  51C5               	movf	Console_MakeField@pInput& (0+255),w,b
 10483  013DEC  0D05               	mullw	5
 10484  013DEE  CFF3 F0C3          	movff	prodl,Console_MakeField@Index
 10485  013DF2  CFF4 F0C4          	movff	prodh,Console_MakeField@Index+1
 10486                           
 10487                           ; BSR set to: 0
 10488                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 10489  013DF6  0E1F               	movlw	low _Font5x7
 10490  013DF8  0100               	movlb	0	; () banked
 10491  013DFA  25C3               	addwf	Console_MakeField@Index& (0+255),w,b
 10492  013DFC  0100               	movlb	0	; () banked
 10493  013DFE  6FC6               	movwf	Console_MakeField@Column& (0+255),b
 10494  013E00  0EFD               	movlw	high _Font5x7
 10495  013E02  0100               	movlb	0	; () banked
 10496  013E04  21C4               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 10497  013E06  0100               	movlb	0	; () banked
 10498  013E08  6FC7               	movwf	(Console_MakeField@Column+1)& (0+255),b
 10499                           
 10500                           ; BSR set to: 0
 10501                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
 10502  013E0A  0E00               	movlw	0
 10503  013E0C  0100               	movlb	0	; () banked
 10504  013E0E  6FCA               	movwf	Console_MakeField@x& (0+255),b
 10505  013E10                     l13397:
 10506                           
 10507                           ; BSR set to: 0
 10508  013E10  0E04               	movlw	4
 10509  013E12  0100               	movlb	0	; () banked
 10510  013E14  65CA               	cpfsgt	Console_MakeField@x& (0+255),b
 10511  013E16  D001               	goto	l1077
 10512  013E18  D043               	goto	u9860
 10513  013E1A                     l1077:
 10514                           
 10515                           ; BSR set to: 0
 10516                           ;Console.c: 444: {
 10517                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
 10518                           
 10519                           ; BSR set to: 0
 10520  013E1A  0E00               	movlw	0
 10521  013E1C  0100               	movlb	0	; () banked
 10522  013E1E  6FCB               	movwf	Console_MakeField@y& (0+255),b
 10523  013E20                     l13403:
 10524                           
 10525                           ; BSR set to: 0
 10526  013E20  0E06               	movlw	6
 10527  013E22  0100               	movlb	0	; () banked
 10528  013E24  65CB               	cpfsgt	Console_MakeField@y& (0+255),b
 10529  013E26  D001               	goto	l1079
 10530  013E28  D035               	goto	u9850
 10531  013E2A                     l1079:
 10532                           
 10533                           ; BSR set to: 0
 10534                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 10535                           
 10536                           ; BSR set to: 0
 10537  013E2A  C0C6  F0BA         	movff	Console_MakeField@Column,Byte_GetBit@pInput
 10538  013E2E  C0C7  F0BB         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 10539  013E32  C0CB  F0BC         	movff	Console_MakeField@y,Byte_GetBit@pBit
 10540  013E36  EC5E  F0B0         	call	_Byte_GetBit	;wreg free
 10541  013E3A  0900               	iorlw	0
 10542  013E3C  A4D8               	btfss	status,2,c
 10543  013E3E  D005               	goto	l1082
 10544  013E40  C085  F0C8         	movff	_gBackcolour,_Console_MakeField$10974
 10545  013E44  C086  F0C9         	movff	_gBackcolour+1,_Console_MakeField$10974+1
 10546  013E48  D004               	goto	l1084
 10547  013E4A                     l1082:
 10548  013E4A  C0FD  F0C8         	movff	_gForecolour,_Console_MakeField$10974
 10549  013E4E  C0FE  F0C9         	movff	_gForecolour+1,_Console_MakeField$10974+1
 10550  013E52                     l1084:
 10551  013E52  0100               	movlb	0	; () banked
 10552  013E54  51CB               	movf	Console_MakeField@y& (0+255),w,b
 10553  013E56  0D0A               	mullw	10
 10554  013E58  0E64               	movlw	low Console_MakeField@Fill
 10555  013E5A  0100               	movlb	0	; () banked
 10556  013E5C  6FC1               	movwf	??_Console_MakeField& (0+255),b
 10557  013E5E  0E04               	movlw	high Console_MakeField@Fill
 10558  013E60  0100               	movlb	0	; () banked
 10559  013E62  6FC2               	movwf	(??_Console_MakeField+1)& (0+255),b
 10560  013E64  50F3               	movf	prodl,w,c
 10561  013E66  0100               	movlb	0	; () banked
 10562  013E68  27C1               	addwf	??_Console_MakeField& (0+255),f,b
 10563  013E6A  50F4               	movf	prodh,w,c
 10564  013E6C  0100               	movlb	0	; () banked
 10565  013E6E  23C2               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 10566  013E70  0100               	movlb	0	; () banked
 10567  013E72  51CA               	movf	Console_MakeField@x& (0+255),w,b
 10568  013E74  0D02               	mullw	2
 10569  013E76  50F3               	movf	prodl,w,c
 10570  013E78  0100               	movlb	0	; () banked
 10571  013E7A  25C1               	addwf	??_Console_MakeField& (0+255),w,b
 10572  013E7C  6ED9               	movwf	fsr2l,c
 10573  013E7E  50F4               	movf	prodh,w,c
 10574  013E80  0100               	movlb	0	; () banked
 10575  013E82  21C2               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 10576  013E84  6EDA               	movwf	fsr2h,c
 10577  013E86  C0C8  FFDE         	movff	_Console_MakeField$10974,postinc2
 10578  013E8A  C0C9  FFDD         	movff	_Console_MakeField$10974+1,postdec2
 10579                           
 10580                           ; BSR set to: 0
 10581  013E8E  0100               	movlb	0	; () banked
 10582  013E90  2BCB               	incf	Console_MakeField@y& (0+255),f,b
 10583  013E92  D7C6               	goto	l13403
 10584  013E94                     u9850:
 10585                           
 10586                           ; BSR set to: 0
 10587                           ;Console.c: 447: Column += 1;
 10588                           
 10589                           ; BSR set to: 0
 10590  013E94  0100               	movlb	0	; () banked
 10591  013E96  4BC6               	infsnz	Console_MakeField@Column& (0+255),f,b
 10592  013E98  2BC7               	incf	(Console_MakeField@Column+1)& (0+255),f,b
 10593  013E9A  0100               	movlb	0	; () banked
 10594  013E9C  2BCA               	incf	Console_MakeField@x& (0+255),f,b
 10595  013E9E  D7B8               	goto	l13397
 10596  013EA0                     u9860:
 10597                           
 10598                           ; BSR set to: 0
 10599                           ;Console.c: 448: }
 10600                           ;Console.c: 449: return (ColourPtr)Fill;
 10601                           
 10602                           ; BSR set to: 0
 10603  013EA0  0E64               	movlw	low Console_MakeField@Fill
 10604  013EA2  0100               	movlb	0	; () banked
 10605  013EA4  6FBF               	movwf	?_Console_MakeField& (0+255),b
 10606  013EA6  0E04               	movlw	high Console_MakeField@Fill
 10607  013EA8  0100               	movlb	0	; () banked
 10608  013EAA  6FC0               	movwf	(?_Console_MakeField+1)& (0+255),b
 10609  013EAC  0012               	return	
 10610  013EAE                     __end_of_Console_MakeField:
 10611                           	opt stack 0
 10612                           tblptru	equ	0xFF8
 10613                           tblptrh	equ	0xFF7
 10614                           tblptrl	equ	0xFF6
 10615                           tablat	equ	0xFF5
 10616                           prodh	equ	0xFF4
 10617                           prodl	equ	0xFF3
 10618                           intcon	equ	0xFF2
 10619                           postinc0	equ	0xFEE
 10620                           wreg	equ	0xFE8
 10621                           postdec1	equ	0xFE5
 10622                           fsr1h	equ	0xFE2
 10623                           fsr1l	equ	0xFE1
 10624                           indf2	equ	0xFDF
 10625                           postinc2	equ	0xFDE
 10626                           postdec2	equ	0xFDD
 10627                           fsr2h	equ	0xFDA
 10628                           fsr2l	equ	0xFD9
 10629                           status	equ	0xFD8
 10630                           
 10631 ;; *************** function _Byte_GetBit *****************
 10632 ;; Defined at:
 10633 ;;		line 38 in file "Library/Types.c"
 10634 ;; Parameters:    Size  Location     Type
 10635 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 10636 ;;		 -> Font5x7(480), 
 10637 ;;  pBit            1    2[BANK0 ] unsigned char 
 10638 ;; Auto vars:     Size  Location     Type
 10639 ;;  Output          1    4[BANK0 ] unsigned char 
 10640 ;; Return value:  Size  Location     Type
 10641 ;;                  1    wreg      unsigned char 
 10642 ;; Registers used:
 10643 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 10644 ;; Tracked objects:
 10645 ;;		On entry : 0/0
 10646 ;;		On exit  : 0/0
 10647 ;;		Unchanged: 0/0
 10648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10649 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10650 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10651 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10652 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10653 ;;Total ram usage:        5 bytes
 10654 ;; Hardware stack levels used:    1
 10655 ;; Hardware stack levels required when called:    7
 10656 ;; This function calls:
 10657 ;;		Nothing
 10658 ;; This function is called by:
 10659 ;;		_Console_MakeField
 10660 ;;		_Word_GetBit
 10661 ;; This function uses a non-reentrant model
 10662 ;;
 10663                           
 10664                           	psect	text44
 10665  0160BC                     __ptext44:
 10666                           	opt stack 0
 10667  0160BC                     _Byte_GetBit:
 10668                           	opt stack 19
 10669                           
 10670                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 10671                           
 10672                           ; BSR set to: 0
 10673                           ;incstack = 0
 10674  0160BC  C0BA  FFF6         	movff	Byte_GetBit@pInput,tblptrl
 10675  0160C0  C0BB  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 10676  0160C4                     	if	0	;tblptru may be non-zero
 10677  0160C4                     	endif
 10678  0160C4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10679  0160C4  0E00               	movlw	low (__mediumconst shr (0+16))
 10680  0160C6  6EF8               	movwf	tblptru,c
 10681  0160C8                     	endif
 10682  0160C8  0008               	tblrd		*
 10683  0160CA  CFF5 F0BE          	movff	tablat,Byte_GetBit@Output
 10684                           
 10685                           ;Types.c: 42: Output >>= pBit;
 10686  0160CE  0100               	movlb	0	; () banked
 10687  0160D0  29BC               	incf	Byte_GetBit@pBit& (0+255),w,b
 10688  0160D2  0100               	movlb	0	; () banked
 10689  0160D4  6FBD               	movwf	??_Byte_GetBit& (0+255),b
 10690  0160D6  D003               	goto	u9460
 10691  0160D8                     u9465:
 10692  0160D8  0100               	movlb	0	; () banked
 10693  0160DA  90D8               	bcf	status,0,c
 10694  0160DC  33BE               	rrcf	Byte_GetBit@Output& (0+255),f,b
 10695  0160DE                     u9460:
 10696  0160DE  0100               	movlb	0	; () banked
 10697  0160E0  2FBD               	decfsz	??_Byte_GetBit& (0+255),f,b
 10698  0160E2  D7FA               	goto	u9465
 10699                           
 10700                           ;Types.c: 43: Output &= 1;
 10701  0160E4  0E01               	movlw	1
 10702  0160E6  0100               	movlb	0	; () banked
 10703  0160E8  17BE               	andwf	Byte_GetBit@Output& (0+255),f,b
 10704                           
 10705                           ; BSR set to: 0
 10706                           ;Types.c: 44: return Output;
 10707  0160EA  0100               	movlb	0	; () banked
 10708  0160EC  51BE               	movf	Byte_GetBit@Output& (0+255),w,b
 10709  0160EE  0012               	return	
 10710  0160F0                     __end_of_Byte_GetBit:
 10711                           	opt stack 0
 10712                           tblptru	equ	0xFF8
 10713                           tblptrh	equ	0xFF7
 10714                           tblptrl	equ	0xFF6
 10715                           tablat	equ	0xFF5
 10716                           prodh	equ	0xFF4
 10717                           prodl	equ	0xFF3
 10718                           intcon	equ	0xFF2
 10719                           postinc0	equ	0xFEE
 10720                           wreg	equ	0xFE8
 10721                           postdec1	equ	0xFE5
 10722                           fsr1h	equ	0xFE2
 10723                           fsr1l	equ	0xFE1
 10724                           indf2	equ	0xFDF
 10725                           postinc2	equ	0xFDE
 10726                           postdec2	equ	0xFDD
 10727                           fsr2h	equ	0xFDA
 10728                           fsr2l	equ	0xFD9
 10729                           status	equ	0xFD8
 10730                           
 10731 ;; *************** function _ADC_Voltage *****************
 10732 ;; Defined at:
 10733 ;;		line 259 in file "Library/ADC.c"
 10734 ;; Parameters:    Size  Location     Type
 10735 ;;  pInput          2   39[BANK0 ] PTR struct ADC
 10736 ;;		 -> ADC_AN0(5), 
 10737 ;; Auto vars:     Size  Location     Type
 10738 ;;  output          4   53[BANK0 ] float 
 10739 ;;  ref             4   49[BANK0 ] const float 
 10740 ;;  max             4   45[BANK0 ] const float 
 10741 ;; Return value:  Size  Location     Type
 10742 ;;                  4   39[BANK0 ] float 
 10743 ;; Registers used:
 10744 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10745 ;; Tracked objects:
 10746 ;;		On entry : 0/0
 10747 ;;		On exit  : 0/0
 10748 ;;		Unchanged: 0/0
 10749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10750 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10751 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10752 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10753 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10754 ;;Total ram usage:       18 bytes
 10755 ;; Hardware stack levels used:    1
 10756 ;; Hardware stack levels required when called:    8
 10757 ;; This function calls:
 10758 ;;		___fldiv
 10759 ;;		___flmul
 10760 ;;		___xxtofl
 10761 ;; This function is called by:
 10762 ;;		_findClosestWall
 10763 ;;		_mode1
 10764 ;; This function uses a non-reentrant model
 10765 ;;
 10766                           
 10767                           	psect	text45
 10768  013A84                     __ptext45:
 10769                           	opt stack 0
 10770  013A84                     _ADC_Voltage:
 10771                           	opt stack 20
 10772                           
 10773                           ;ADC.c: 261: const float max = 1024;
 10774                           
 10775                           ; BSR set to: 0
 10776                           ;incstack = 0
 10777  013A84  0E00               	movlw	0
 10778  013A86  0100               	movlb	0	; () banked
 10779  013A88  6FE7               	movwf	ADC_Voltage@max& (0+255),b
 10780  013A8A  0E00               	movlw	0
 10781  013A8C  6FE8               	movwf	(ADC_Voltage@max+1)& (0+255),b
 10782  013A8E  0E80               	movlw	128
 10783  013A90  6FE9               	movwf	(ADC_Voltage@max+2)& (0+255),b
 10784  013A92  0E44               	movlw	68
 10785  013A94  6FEA               	movwf	(ADC_Voltage@max+3)& (0+255),b
 10786                           
 10787                           ;ADC.c: 262: const float ref = ((float)3.3-(float)0.000);
 10788  013A96  0E33               	movlw	51
 10789  013A98  0100               	movlb	0	; () banked
 10790  013A9A  6FEB               	movwf	ADC_Voltage@ref& (0+255),b
 10791  013A9C  0E33               	movlw	51
 10792  013A9E  6FEC               	movwf	(ADC_Voltage@ref+1)& (0+255),b
 10793  013AA0  0E53               	movlw	83
 10794  013AA2  6FED               	movwf	(ADC_Voltage@ref+2)& (0+255),b
 10795  013AA4  0E40               	movlw	64
 10796  013AA6  6FEE               	movwf	(ADC_Voltage@ref+3)& (0+255),b
 10797                           
 10798                           ; BSR set to: 0
 10799                           ;ADC.c: 263: float output = pInput->mValue;
 10800  013AA8  0100               	movlb	0	; () banked
 10801  013AAA  EE20 F001          	lfsr	2,1
 10802  013AAE  51E1               	movf	ADC_Voltage@pInput& (0+255),w,b
 10803  013AB0  26D9               	addwf	fsr2l,f,c
 10804  013AB2  51E2               	movf	(ADC_Voltage@pInput+1)& (0+255),w,b
 10805  013AB4  22DA               	addwfc	fsr2h,f,c
 10806  013AB6  CFDE F0E5          	movff	postinc2,??_ADC_Voltage
 10807  013ABA  CFDD F0E6          	movff	postdec2,??_ADC_Voltage+1
 10808  013ABE  C0E5  F0BA         	movff	??_ADC_Voltage,___xxtofl@val
 10809  013AC2  C0E6  F0BB         	movff	??_ADC_Voltage+1,___xxtofl@val+1
 10810  013AC6  0100               	movlb	0	; () banked
 10811  013AC8  6BBC               	clrf	(___xxtofl@val+2)& (0+255),b
 10812  013ACA  6BBD               	clrf	(___xxtofl@val+3)& (0+255),b
 10813  013ACC  0E00               	movlw	0
 10814  013ACE  ECEC  F090         	call	___xxtofl
 10815  013AD2  C0BA  F0EF         	movff	?___xxtofl,ADC_Voltage@output
 10816  013AD6  C0BB  F0F0         	movff	?___xxtofl+1,ADC_Voltage@output+1
 10817  013ADA  C0BC  F0F1         	movff	?___xxtofl+2,ADC_Voltage@output+2
 10818  013ADE  C0BD  F0F2         	movff	?___xxtofl+3,ADC_Voltage@output+3
 10819                           
 10820                           ;ADC.c: 265: output /= max;
 10821  013AE2  C0EF  F0BA         	movff	ADC_Voltage@output,___fldiv@b
 10822  013AE6  C0F0  F0BB         	movff	ADC_Voltage@output+1,___fldiv@b+1
 10823  013AEA  C0F1  F0BC         	movff	ADC_Voltage@output+2,___fldiv@b+2
 10824  013AEE  C0F2  F0BD         	movff	ADC_Voltage@output+3,___fldiv@b+3
 10825  013AF2  C0E7  F0BE         	movff	ADC_Voltage@max,___fldiv@a
 10826  013AF6  C0E8  F0BF         	movff	ADC_Voltage@max+1,___fldiv@a+1
 10827  013AFA  C0E9  F0C0         	movff	ADC_Voltage@max+2,___fldiv@a+2
 10828  013AFE  C0EA  F0C1         	movff	ADC_Voltage@max+3,___fldiv@a+3
 10829  013B02  EC4C  F086         	call	___fldiv	;wreg free
 10830  013B06  C0BA  F0EF         	movff	?___fldiv,ADC_Voltage@output
 10831  013B0A  C0BB  F0F0         	movff	?___fldiv+1,ADC_Voltage@output+1
 10832  013B0E  C0BC  F0F1         	movff	?___fldiv+2,ADC_Voltage@output+2
 10833  013B12  C0BD  F0F2         	movff	?___fldiv+3,ADC_Voltage@output+3
 10834                           
 10835                           ;ADC.c: 266: output *= ref;
 10836  013B16  C0EF  F0C8         	movff	ADC_Voltage@output,___flmul@b
 10837  013B1A  C0F0  F0C9         	movff	ADC_Voltage@output+1,___flmul@b+1
 10838  013B1E  C0F1  F0CA         	movff	ADC_Voltage@output+2,___flmul@b+2
 10839  013B22  C0F2  F0CB         	movff	ADC_Voltage@output+3,___flmul@b+3
 10840  013B26  C0EB  F0CC         	movff	ADC_Voltage@ref,___flmul@a
 10841  013B2A  C0EC  F0CD         	movff	ADC_Voltage@ref+1,___flmul@a+1
 10842  013B2E  C0ED  F0CE         	movff	ADC_Voltage@ref+2,___flmul@a+2
 10843  013B32  C0EE  F0CF         	movff	ADC_Voltage@ref+3,___flmul@a+3
 10844  013B36  EC00  F080         	call	___flmul	;wreg free
 10845  013B3A  C0C8  F0EF         	movff	?___flmul,ADC_Voltage@output
 10846  013B3E  C0C9  F0F0         	movff	?___flmul+1,ADC_Voltage@output+1
 10847  013B42  C0CA  F0F1         	movff	?___flmul+2,ADC_Voltage@output+2
 10848  013B46  C0CB  F0F2         	movff	?___flmul+3,ADC_Voltage@output+3
 10849                           
 10850                           ;ADC.c: 268: return output + (float)0.000;
 10851  013B4A  C0EF  F0E1         	movff	ADC_Voltage@output,?_ADC_Voltage
 10852  013B4E  C0F0  F0E2         	movff	ADC_Voltage@output+1,?_ADC_Voltage+1
 10853  013B52  C0F1  F0E3         	movff	ADC_Voltage@output+2,?_ADC_Voltage+2
 10854  013B56  C0F2  F0E4         	movff	ADC_Voltage@output+3,?_ADC_Voltage+3
 10855  013B5A  0012               	return	
 10856  013B5C                     __end_of_ADC_Voltage:
 10857                           	opt stack 0
 10858                           tblptru	equ	0xFF8
 10859                           tblptrh	equ	0xFF7
 10860                           tblptrl	equ	0xFF6
 10861                           tablat	equ	0xFF5
 10862                           prodh	equ	0xFF4
 10863                           prodl	equ	0xFF3
 10864                           intcon	equ	0xFF2
 10865                           postinc0	equ	0xFEE
 10866                           wreg	equ	0xFE8
 10867                           postdec1	equ	0xFE5
 10868                           fsr1h	equ	0xFE2
 10869                           fsr1l	equ	0xFE1
 10870                           indf2	equ	0xFDF
 10871                           postinc2	equ	0xFDE
 10872                           postdec2	equ	0xFDD
 10873                           fsr2h	equ	0xFDA
 10874                           fsr2l	equ	0xFD9
 10875                           status	equ	0xFD8
 10876                           
 10877 ;; *************** function ___xxtofl *****************
 10878 ;; Defined at:
 10879 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\xxtofl.c"
 10880 ;; Parameters:    Size  Location     Type
 10881 ;;  sign            1    wreg     unsigned char 
 10882 ;;  val             4    0[BANK0 ] long 
 10883 ;; Auto vars:     Size  Location     Type
 10884 ;;  sign            1    8[BANK0 ] unsigned char 
 10885 ;;  arg             4   10[BANK0 ] unsigned long 
 10886 ;;  exp             1    9[BANK0 ] unsigned char 
 10887 ;; Return value:  Size  Location     Type
 10888 ;;                  4    0[BANK0 ] unsigned char 
 10889 ;; Registers used:
 10890 ;;		wreg, status,2, status,0
 10891 ;; Tracked objects:
 10892 ;;		On entry : 0/0
 10893 ;;		On exit  : 0/0
 10894 ;;		Unchanged: 0/0
 10895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10896 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10897 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10898 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10899 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10900 ;;Total ram usage:       14 bytes
 10901 ;; Hardware stack levels used:    1
 10902 ;; Hardware stack levels required when called:    7
 10903 ;; This function calls:
 10904 ;;		Nothing
 10905 ;; This function is called by:
 10906 ;;		_ADC_Voltage
 10907 ;;		_findClosestWall
 10908 ;; This function uses a non-reentrant model
 10909 ;;
 10910                           
 10911                           	psect	text46
 10912  0121D8                     __ptext46:
 10913                           	opt stack 0
 10914  0121D8                     ___xxtofl:
 10915                           	opt stack 21
 10916                           
 10917                           ;incstack = 0
 10918                           ;___xxtofl@sign stored from wreg
 10919  0121D8  0100               	movlb	0	; () banked
 10920  0121DA  6FC2               	movwf	___xxtofl@sign& (0+255),b
 10921  0121DC  0100               	movlb	0	; () banked
 10922  0121DE  51C2               	movf	___xxtofl@sign& (0+255),w,b
 10923  0121E0  0100               	movlb	0	; () banked
 10924  0121E2  B4D8               	btfsc	status,2,c
 10925  0121E4  D01E               	goto	l2997
 10926                           
 10927                           ; BSR set to: 0
 10928  0121E6  0100               	movlb	0	; () banked
 10929  0121E8  AFBD               	btfss	(___xxtofl@val+3)& (0+255),7,b
 10930  0121EA  D01B               	goto	l2997
 10931                           
 10932                           ; BSR set to: 0
 10933  0121EC  C0BA  F0BE         	movff	___xxtofl@val,??___xxtofl
 10934  0121F0  C0BB  F0BF         	movff	___xxtofl@val+1,??___xxtofl+1
 10935  0121F4  C0BC  F0C0         	movff	___xxtofl@val+2,??___xxtofl+2
 10936  0121F8  C0BD  F0C1         	movff	___xxtofl@val+3,??___xxtofl+3
 10937  0121FC  0100               	movlb	0	; () banked
 10938  0121FE  1FBE               	comf	??___xxtofl& (0+255),f,b
 10939  012200  1FBF               	comf	(??___xxtofl+1)& (0+255),f,b
 10940  012202  1FC0               	comf	(??___xxtofl+2)& (0+255),f,b
 10941  012204  1FC1               	comf	(??___xxtofl+3)& (0+255),f,b
 10942  012206  2BBE               	incf	??___xxtofl& (0+255),f,b
 10943  012208  0E00               	movlw	0
 10944  01220A  23BF               	addwfc	(??___xxtofl+1)& (0+255),f,b
 10945  01220C  23C0               	addwfc	(??___xxtofl+2)& (0+255),f,b
 10946  01220E  23C1               	addwfc	(??___xxtofl+3)& (0+255),f,b
 10947  012210  C0BE  F0C4         	movff	??___xxtofl,___xxtofl@arg
 10948  012214  C0BF  F0C5         	movff	??___xxtofl+1,___xxtofl@arg+1
 10949  012218  C0C0  F0C6         	movff	??___xxtofl+2,___xxtofl@arg+2
 10950  01221C  C0C1  F0C7         	movff	??___xxtofl+3,___xxtofl@arg+3
 10951  012220  D008               	goto	l2998
 10952  012222                     l2997:
 10953                           
 10954                           ; BSR set to: 0
 10955  012222  C0BA  F0C4         	movff	___xxtofl@val,___xxtofl@arg
 10956  012226  C0BB  F0C5         	movff	___xxtofl@val+1,___xxtofl@arg+1
 10957  01222A  C0BC  F0C6         	movff	___xxtofl@val+2,___xxtofl@arg+2
 10958  01222E  C0BD  F0C7         	movff	___xxtofl@val+3,___xxtofl@arg+3
 10959  012232                     l2998:
 10960                           
 10961                           ; BSR set to: 0
 10962                           
 10963                           ; BSR set to: 0
 10964  012232  0100               	movlb	0	; () banked
 10965  012234  51BA               	movf	___xxtofl@val& (0+255),w,b
 10966  012236  0100               	movlb	0	; () banked
 10967  012238  11BB               	iorwf	(___xxtofl@val+1)& (0+255),w,b
 10968  01223A  0100               	movlb	0	; () banked
 10969  01223C  11BC               	iorwf	(___xxtofl@val+2)& (0+255),w,b
 10970  01223E  0100               	movlb	0	; () banked
 10971  012240  11BD               	iorwf	(___xxtofl@val+3)& (0+255),w,b
 10972  012242  A4D8               	btfss	status,2,c
 10973  012244  D00A               	goto	l2999
 10974                           
 10975                           ; BSR set to: 0
 10976  012246  0E00               	movlw	0
 10977  012248  0100               	movlb	0	; () banked
 10978  01224A  6FBA               	movwf	?___xxtofl& (0+255),b
 10979  01224C  0E00               	movlw	0
 10980  01224E  6FBB               	movwf	(?___xxtofl+1)& (0+255),b
 10981  012250  0E00               	movlw	0
 10982  012252  6FBC               	movwf	(?___xxtofl+2)& (0+255),b
 10983  012254  0E00               	movlw	0
 10984  012256  6FBD               	movwf	(?___xxtofl+3)& (0+255),b
 10985                           
 10986                           ; BSR set to: 0
 10987  012258  0012               	return	
 10988  01225A                     l2999:
 10989                           
 10990                           ; BSR set to: 0
 10991                           
 10992                           ; BSR set to: 0
 10993  01225A  0E96               	movlw	150
 10994  01225C  0100               	movlb	0	; () banked
 10995  01225E  6FC3               	movwf	___xxtofl@exp& (0+255),b
 10996  012260  D008               	goto	l3001
 10997  012262                     
 10998                           ; BSR set to: 0
 10999                           
 11000                           ; BSR set to: 0
 11001  012262  0100               	movlb	0	; () banked
 11002  012264  2BC3               	incf	___xxtofl@exp& (0+255),f,b
 11003  012266  0100               	movlb	0	; () banked
 11004  012268  90D8               	bcf	status,0,c
 11005  01226A  33C7               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 11006  01226C  33C6               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 11007  01226E  33C5               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 11008  012270  33C4               	rrcf	___xxtofl@arg& (0+255),f,b
 11009  012272                     l3001:
 11010                           
 11011                           ; BSR set to: 0
 11012                           
 11013                           ; BSR set to: 0
 11014  012272  0E00               	movlw	0
 11015  012274  0100               	movlb	0	; () banked
 11016  012276  15C4               	andwf	___xxtofl@arg& (0+255),w,b
 11017  012278  0100               	movlb	0	; () banked
 11018  01227A  6FBE               	movwf	??___xxtofl& (0+255),b
 11019  01227C  0E00               	movlw	0
 11020  01227E  0100               	movlb	0	; () banked
 11021  012280  15C5               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 11022  012282  0100               	movlb	0	; () banked
 11023  012284  6FBF               	movwf	(??___xxtofl+1)& (0+255),b
 11024  012286  0E00               	movlw	0
 11025  012288  0100               	movlb	0	; () banked
 11026  01228A  15C6               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 11027  01228C  0100               	movlb	0	; () banked
 11028  01228E  6FC0               	movwf	(??___xxtofl+2)& (0+255),b
 11029  012290  0EFE               	movlw	254
 11030  012292  0100               	movlb	0	; () banked
 11031  012294  15C7               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 11032  012296  0100               	movlb	0	; () banked
 11033  012298  6FC1               	movwf	(??___xxtofl+3)& (0+255),b
 11034  01229A  0100               	movlb	0	; () banked
 11035  01229C  51BE               	movf	??___xxtofl& (0+255),w,b
 11036  01229E  0100               	movlb	0	; () banked
 11037  0122A0  11BF               	iorwf	(??___xxtofl+1)& (0+255),w,b
 11038  0122A2  0100               	movlb	0	; () banked
 11039  0122A4  11C0               	iorwf	(??___xxtofl+2)& (0+255),w,b
 11040  0122A6  0100               	movlb	0	; () banked
 11041  0122A8  11C1               	iorwf	(??___xxtofl+3)& (0+255),w,b
 11042  0122AA  B4D8               	btfsc	status,2,c
 11043  0122AC  D010               	goto	l3004
 11044  0122AE  D7D9               	goto	l3002
 11045  0122B0                     
 11046                           ; BSR set to: 0
 11047                           
 11048                           ; BSR set to: 0
 11049  0122B0  0100               	movlb	0	; () banked
 11050  0122B2  2BC3               	incf	___xxtofl@exp& (0+255),f,b
 11051                           
 11052                           ; BSR set to: 0
 11053  0122B4  0E01               	movlw	1
 11054  0122B6  0100               	movlb	0	; () banked
 11055  0122B8  27C4               	addwf	___xxtofl@arg& (0+255),f,b
 11056  0122BA  0E00               	movlw	0
 11057  0122BC  23C5               	addwfc	(___xxtofl@arg+1)& (0+255),f,b
 11058  0122BE  23C6               	addwfc	(___xxtofl@arg+2)& (0+255),f,b
 11059  0122C0  23C7               	addwfc	(___xxtofl@arg+3)& (0+255),f,b
 11060                           
 11061                           ; BSR set to: 0
 11062  0122C2  0100               	movlb	0	; () banked
 11063  0122C4  90D8               	bcf	status,0,c
 11064  0122C6  33C7               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 11065  0122C8  33C6               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 11066  0122CA  33C5               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 11067  0122CC  33C4               	rrcf	___xxtofl@arg& (0+255),f,b
 11068  0122CE                     l3004:
 11069                           
 11070                           ; BSR set to: 0
 11071  0122CE  0E00               	movlw	0
 11072  0122D0  0100               	movlb	0	; () banked
 11073  0122D2  15C4               	andwf	___xxtofl@arg& (0+255),w,b
 11074  0122D4  0100               	movlb	0	; () banked
 11075  0122D6  6FBE               	movwf	??___xxtofl& (0+255),b
 11076  0122D8  0E00               	movlw	0
 11077  0122DA  0100               	movlb	0	; () banked
 11078  0122DC  15C5               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 11079  0122DE  0100               	movlb	0	; () banked
 11080  0122E0  6FBF               	movwf	(??___xxtofl+1)& (0+255),b
 11081  0122E2  0E00               	movlw	0
 11082  0122E4  0100               	movlb	0	; () banked
 11083  0122E6  15C6               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 11084  0122E8  0100               	movlb	0	; () banked
 11085  0122EA  6FC0               	movwf	(??___xxtofl+2)& (0+255),b
 11086  0122EC  0EFF               	movlw	255
 11087  0122EE  0100               	movlb	0	; () banked
 11088  0122F0  15C7               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 11089  0122F2  0100               	movlb	0	; () banked
 11090  0122F4  6FC1               	movwf	(??___xxtofl+3)& (0+255),b
 11091  0122F6  0100               	movlb	0	; () banked
 11092  0122F8  51BE               	movf	??___xxtofl& (0+255),w,b
 11093  0122FA  0100               	movlb	0	; () banked
 11094  0122FC  11BF               	iorwf	(??___xxtofl+1)& (0+255),w,b
 11095  0122FE  0100               	movlb	0	; () banked
 11096  012300  11C0               	iorwf	(??___xxtofl+2)& (0+255),w,b
 11097  012302  0100               	movlb	0	; () banked
 11098  012304  11C1               	iorwf	(??___xxtofl+3)& (0+255),w,b
 11099  012306  B4D8               	btfsc	status,2,c
 11100  012308  D009               	goto	l3007
 11101  01230A  D7D2               	goto	l3005
 11102  01230C                     
 11103                           ; BSR set to: 0
 11104                           
 11105                           ; BSR set to: 0
 11106  01230C  0100               	movlb	0	; () banked
 11107  01230E  07C3               	decf	___xxtofl@exp& (0+255),f,b
 11108  012310  0100               	movlb	0	; () banked
 11109  012312  90D8               	bcf	status,0,c
 11110  012314  37C4               	rlcf	___xxtofl@arg& (0+255),f,b
 11111  012316  37C5               	rlcf	(___xxtofl@arg+1)& (0+255),f,b
 11112  012318  37C6               	rlcf	(___xxtofl@arg+2)& (0+255),f,b
 11113  01231A  37C7               	rlcf	(___xxtofl@arg+3)& (0+255),f,b
 11114  01231C                     l3007:
 11115                           
 11116                           ; BSR set to: 0
 11117                           
 11118                           ; BSR set to: 0
 11119  01231C  0100               	movlb	0	; () banked
 11120  01231E  BFC6               	btfsc	(___xxtofl@arg+2)& (0+255),7,b
 11121  012320  D004               	goto	u10490
 11122                           
 11123                           ; BSR set to: 0
 11124  012322  0E02               	movlw	2
 11125  012324  0100               	movlb	0	; () banked
 11126  012326  61C3               	cpfslt	___xxtofl@exp& (0+255),b
 11127  012328  D7F1               	goto	l3008
 11128  01232A                     u10490:
 11129                           
 11130                           ; BSR set to: 0
 11131                           
 11132                           ; BSR set to: 0
 11133  01232A  0100               	movlb	0	; () banked
 11134  01232C  B1C3               	btfsc	___xxtofl@exp& (0+255),0,b
 11135  01232E  D009               	goto	l3012
 11136                           
 11137                           ; BSR set to: 0
 11138  012330  0EFF               	movlw	255
 11139  012332  0100               	movlb	0	; () banked
 11140  012334  17C4               	andwf	___xxtofl@arg& (0+255),f,b
 11141  012336  0EFF               	movlw	255
 11142  012338  17C5               	andwf	(___xxtofl@arg+1)& (0+255),f,b
 11143  01233A  0E7F               	movlw	127
 11144  01233C  17C6               	andwf	(___xxtofl@arg+2)& (0+255),f,b
 11145  01233E  0EFF               	movlw	255
 11146  012340  17C7               	andwf	(___xxtofl@arg+3)& (0+255),f,b
 11147  012342                     l3012:
 11148                           
 11149                           ; BSR set to: 0
 11150  012342  0100               	movlb	0	; () banked
 11151  012344  90D8               	bcf	status,0,c
 11152  012346  33C3               	rrcf	___xxtofl@exp& (0+255),f,b
 11153  012348  C0C3  F0BE         	movff	___xxtofl@exp,??___xxtofl
 11154  01234C  0100               	movlb	0	; () banked
 11155  01234E  6BBF               	clrf	(??___xxtofl+1)& (0+255),b
 11156  012350  6BC0               	clrf	(??___xxtofl+2)& (0+255),b
 11157  012352  6BC1               	clrf	(??___xxtofl+3)& (0+255),b
 11158  012354  C0BE  F0C1         	movff	??___xxtofl,??___xxtofl+3
 11159  012358  0100               	movlb	0	; () banked
 11160  01235A  6BC0               	clrf	(??___xxtofl+2)& (0+255),b
 11161  01235C  6BBF               	clrf	(??___xxtofl+1)& (0+255),b
 11162  01235E  6BBE               	clrf	??___xxtofl& (0+255),b
 11163  012360  0100               	movlb	0	; () banked
 11164  012362  51BE               	movf	??___xxtofl& (0+255),w,b
 11165  012364  0100               	movlb	0	; () banked
 11166  012366  13C4               	iorwf	___xxtofl@arg& (0+255),f,b
 11167  012368  0100               	movlb	0	; () banked
 11168  01236A  51BF               	movf	(??___xxtofl+1)& (0+255),w,b
 11169  01236C  0100               	movlb	0	; () banked
 11170  01236E  13C5               	iorwf	(___xxtofl@arg+1)& (0+255),f,b
 11171  012370  0100               	movlb	0	; () banked
 11172  012372  51C0               	movf	(??___xxtofl+2)& (0+255),w,b
 11173  012374  0100               	movlb	0	; () banked
 11174  012376  13C6               	iorwf	(___xxtofl@arg+2)& (0+255),f,b
 11175  012378  0100               	movlb	0	; () banked
 11176  01237A  51C1               	movf	(??___xxtofl+3)& (0+255),w,b
 11177  01237C  0100               	movlb	0	; () banked
 11178  01237E  13C7               	iorwf	(___xxtofl@arg+3)& (0+255),f,b
 11179                           
 11180                           ; BSR set to: 0
 11181  012380  0100               	movlb	0	; () banked
 11182  012382  51C2               	movf	___xxtofl@sign& (0+255),w,b
 11183  012384  0100               	movlb	0	; () banked
 11184  012386  B4D8               	btfsc	status,2,c
 11185  012388  D005               	goto	l3013
 11186                           
 11187                           ; BSR set to: 0
 11188  01238A  0100               	movlb	0	; () banked
 11189  01238C  AFBD               	btfss	(___xxtofl@val+3)& (0+255),7,b
 11190  01238E  D002               	goto	l3013
 11191                           
 11192                           ; BSR set to: 0
 11193  012390  0100               	movlb	0	; () banked
 11194  012392  8FC7               	bsf	(___xxtofl@arg+3)& (0+255),7,b
 11195  012394                     l3013:
 11196                           
 11197                           ; BSR set to: 0
 11198                           
 11199                           ; BSR set to: 0
 11200  012394  C0C4  F0BA         	movff	___xxtofl@arg,?___xxtofl
 11201  012398  C0C5  F0BB         	movff	___xxtofl@arg+1,?___xxtofl+1
 11202  01239C  C0C6  F0BC         	movff	___xxtofl@arg+2,?___xxtofl+2
 11203  0123A0  C0C7  F0BD         	movff	___xxtofl@arg+3,?___xxtofl+3
 11204  0123A4  0012               	return	
 11205  0123A6                     __end_of___xxtofl:
 11206                           	opt stack 0
 11207                           tblptru	equ	0xFF8
 11208                           tblptrh	equ	0xFF7
 11209                           tblptrl	equ	0xFF6
 11210                           tablat	equ	0xFF5
 11211                           prodh	equ	0xFF4
 11212                           prodl	equ	0xFF3
 11213                           intcon	equ	0xFF2
 11214                           postinc0	equ	0xFEE
 11215                           wreg	equ	0xFE8
 11216                           postdec1	equ	0xFE5
 11217                           fsr1h	equ	0xFE2
 11218                           fsr1l	equ	0xFE1
 11219                           indf2	equ	0xFDF
 11220                           postinc2	equ	0xFDE
 11221                           postdec2	equ	0xFDD
 11222                           fsr2h	equ	0xFDA
 11223                           fsr2l	equ	0xFD9
 11224                           status	equ	0xFD8
 11225                           
 11226 ;; *************** function ___flmul *****************
 11227 ;; Defined at:
 11228 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcmul.c"
 11229 ;; Parameters:    Size  Location     Type
 11230 ;;  b               4   14[BANK0 ] unsigned char 
 11231 ;;  a               4   18[BANK0 ] unsigned char 
 11232 ;; Auto vars:     Size  Location     Type
 11233 ;;  prod            4   33[BANK0 ] struct .
 11234 ;;  grs             4   28[BANK0 ] unsigned long 
 11235 ;;  temp            2   37[BANK0 ] struct .
 11236 ;;  bexp            1   32[BANK0 ] unsigned char 
 11237 ;;  aexp            1   27[BANK0 ] unsigned char 
 11238 ;;  sign            1   26[BANK0 ] unsigned char 
 11239 ;; Return value:  Size  Location     Type
 11240 ;;                  4   14[BANK0 ] unsigned char 
 11241 ;; Registers used:
 11242 ;;		wreg, status,2, status,0, prodl, prodh
 11243 ;; Tracked objects:
 11244 ;;		On entry : 0/0
 11245 ;;		On exit  : 0/0
 11246 ;;		Unchanged: 0/0
 11247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11248 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11249 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11250 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11251 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11252 ;;Total ram usage:       25 bytes
 11253 ;; Hardware stack levels used:    1
 11254 ;; Hardware stack levels required when called:    7
 11255 ;; This function calls:
 11256 ;;		Nothing
 11257 ;; This function is called by:
 11258 ;;		_ADC_Voltage
 11259 ;;		_findClosestWall
 11260 ;; This function uses a non-reentrant model
 11261 ;;
 11262                           
 11263                           	psect	text47
 11264  010000                     __ptext47:
 11265                           	opt stack 0
 11266  010000                     ___flmul:
 11267                           	opt stack 21
 11268                           
 11269                           ; BSR set to: 0
 11270                           ;incstack = 0
 11271  010000  0100               	movlb	0	; () banked
 11272  010002  51CB               	movf	(___flmul@b+3)& (0+255),w,b
 11273  010004  0B80               	andlw	128
 11274  010006  0100               	movlb	0	; () banked
 11275  010008  6FD4               	movwf	___flmul@sign& (0+255),b
 11276  01000A  0100               	movlb	0	; () banked
 11277  01000C  51CB               	movf	(___flmul@b+3)& (0+255),w,b
 11278  01000E  25CB               	addwf	(___flmul@b+3)& (0+255),w,b
 11279  010010  0100               	movlb	0	; () banked
 11280  010012  6FDA               	movwf	___flmul@bexp& (0+255),b
 11281                           
 11282                           ; BSR set to: 0
 11283  010014  0100               	movlb	0	; () banked
 11284  010016  AFCA               	btfss	(___flmul@b+2)& (0+255),7,b
 11285  010018  D002               	goto	l2968
 11286                           
 11287                           ; BSR set to: 0
 11288  01001A  0100               	movlb	0	; () banked
 11289  01001C  81DA               	bsf	___flmul@bexp& (0+255),0,b
 11290  01001E                     l2968:
 11291                           
 11292                           ; BSR set to: 0
 11293                           
 11294                           ; BSR set to: 0
 11295  01001E  0100               	movlb	0	; () banked
 11296  010020  51DA               	movf	___flmul@bexp& (0+255),w,b
 11297  010022  0100               	movlb	0	; () banked
 11298  010024  B4D8               	btfsc	status,2,c
 11299  010026  D010               	goto	l2969
 11300                           
 11301                           ; BSR set to: 0
 11302  010028  0100               	movlb	0	; () banked
 11303  01002A  29DA               	incf	___flmul@bexp& (0+255),w,b
 11304  01002C  A4D8               	btfss	status,2,c
 11305  01002E  D009               	goto	l2970
 11306                           
 11307                           ; BSR set to: 0
 11308  010030  0E00               	movlw	0
 11309  010032  0100               	movlb	0	; () banked
 11310  010034  6FC8               	movwf	___flmul@b& (0+255),b
 11311  010036  0E00               	movlw	0
 11312  010038  6FC9               	movwf	(___flmul@b+1)& (0+255),b
 11313  01003A  0E00               	movlw	0
 11314  01003C  6FCA               	movwf	(___flmul@b+2)& (0+255),b
 11315  01003E  0E00               	movlw	0
 11316  010040  6FCB               	movwf	(___flmul@b+3)& (0+255),b
 11317  010042                     l2970:
 11318                           
 11319                           ; BSR set to: 0
 11320                           
 11321                           ; BSR set to: 0
 11322  010042  0100               	movlb	0	; () banked
 11323  010044  8FCA               	bsf	(___flmul@b+2)& (0+255),7,b
 11324  010046  D009               	goto	l2971
 11325  010048                     l2969:
 11326                           
 11327                           ; BSR set to: 0
 11328                           
 11329                           ; BSR set to: 0
 11330  010048  0E00               	movlw	0
 11331  01004A  0100               	movlb	0	; () banked
 11332  01004C  6FC8               	movwf	___flmul@b& (0+255),b
 11333  01004E  0E00               	movlw	0
 11334  010050  6FC9               	movwf	(___flmul@b+1)& (0+255),b
 11335  010052  0E00               	movlw	0
 11336  010054  6FCA               	movwf	(___flmul@b+2)& (0+255),b
 11337  010056  0E00               	movlw	0
 11338  010058  6FCB               	movwf	(___flmul@b+3)& (0+255),b
 11339  01005A                     l2971:
 11340                           
 11341                           ; BSR set to: 0
 11342                           
 11343                           ; BSR set to: 0
 11344  01005A  0100               	movlb	0	; () banked
 11345  01005C  51CF               	movf	(___flmul@a+3)& (0+255),w,b
 11346  01005E  0B80               	andlw	128
 11347  010060  0100               	movlb	0	; () banked
 11348  010062  1BD4               	xorwf	___flmul@sign& (0+255),f,b
 11349                           
 11350                           ; BSR set to: 0
 11351  010064  0100               	movlb	0	; () banked
 11352  010066  51CF               	movf	(___flmul@a+3)& (0+255),w,b
 11353  010068  25CF               	addwf	(___flmul@a+3)& (0+255),w,b
 11354  01006A  0100               	movlb	0	; () banked
 11355  01006C  6FD5               	movwf	___flmul@aexp& (0+255),b
 11356                           
 11357                           ; BSR set to: 0
 11358  01006E  0100               	movlb	0	; () banked
 11359  010070  AFCE               	btfss	(___flmul@a+2)& (0+255),7,b
 11360  010072  D002               	goto	l2972
 11361                           
 11362                           ; BSR set to: 0
 11363  010074  0100               	movlb	0	; () banked
 11364  010076  81D5               	bsf	___flmul@aexp& (0+255),0,b
 11365  010078                     l2972:
 11366                           
 11367                           ; BSR set to: 0
 11368                           
 11369                           ; BSR set to: 0
 11370  010078  0100               	movlb	0	; () banked
 11371  01007A  51D5               	movf	___flmul@aexp& (0+255),w,b
 11372  01007C  0100               	movlb	0	; () banked
 11373  01007E  B4D8               	btfsc	status,2,c
 11374  010080  D010               	goto	l2973
 11375                           
 11376                           ; BSR set to: 0
 11377  010082  0100               	movlb	0	; () banked
 11378  010084  29D5               	incf	___flmul@aexp& (0+255),w,b
 11379  010086  A4D8               	btfss	status,2,c
 11380  010088  D009               	goto	l2974
 11381                           
 11382                           ; BSR set to: 0
 11383  01008A  0E00               	movlw	0
 11384  01008C  0100               	movlb	0	; () banked
 11385  01008E  6FCC               	movwf	___flmul@a& (0+255),b
 11386  010090  0E00               	movlw	0
 11387  010092  6FCD               	movwf	(___flmul@a+1)& (0+255),b
 11388  010094  0E00               	movlw	0
 11389  010096  6FCE               	movwf	(___flmul@a+2)& (0+255),b
 11390  010098  0E00               	movlw	0
 11391  01009A  6FCF               	movwf	(___flmul@a+3)& (0+255),b
 11392  01009C                     l2974:
 11393                           
 11394                           ; BSR set to: 0
 11395                           
 11396                           ; BSR set to: 0
 11397  01009C  0100               	movlb	0	; () banked
 11398  01009E  8FCE               	bsf	(___flmul@a+2)& (0+255),7,b
 11399  0100A0  D009               	goto	l2975
 11400  0100A2                     l2973:
 11401                           
 11402                           ; BSR set to: 0
 11403                           
 11404                           ; BSR set to: 0
 11405  0100A2  0E00               	movlw	0
 11406  0100A4  0100               	movlb	0	; () banked
 11407  0100A6  6FCC               	movwf	___flmul@a& (0+255),b
 11408  0100A8  0E00               	movlw	0
 11409  0100AA  6FCD               	movwf	(___flmul@a+1)& (0+255),b
 11410  0100AC  0E00               	movlw	0
 11411  0100AE  6FCE               	movwf	(___flmul@a+2)& (0+255),b
 11412  0100B0  0E00               	movlw	0
 11413  0100B2  6FCF               	movwf	(___flmul@a+3)& (0+255),b
 11414  0100B4                     l2975:
 11415                           
 11416                           ; BSR set to: 0
 11417  0100B4  0100               	movlb	0	; () banked
 11418  0100B6  51D5               	movf	___flmul@aexp& (0+255),w,b
 11419  0100B8  0100               	movlb	0	; () banked
 11420  0100BA  B4D8               	btfsc	status,2,c
 11421  0100BC  D005               	goto	u10310
 11422                           
 11423                           ; BSR set to: 0
 11424  0100BE  0100               	movlb	0	; () banked
 11425  0100C0  51DA               	movf	___flmul@bexp& (0+255),w,b
 11426  0100C2  0100               	movlb	0	; () banked
 11427  0100C4  A4D8               	btfss	status,2,c
 11428  0100C6  D00A               	goto	l2976
 11429  0100C8                     u10310:
 11430                           
 11431                           ; BSR set to: 0
 11432                           
 11433                           ; BSR set to: 0
 11434  0100C8  0E00               	movlw	0
 11435  0100CA  0100               	movlb	0	; () banked
 11436  0100CC  6FC8               	movwf	?___flmul& (0+255),b
 11437  0100CE  0E00               	movlw	0
 11438  0100D0  6FC9               	movwf	(?___flmul+1)& (0+255),b
 11439  0100D2  0E00               	movlw	0
 11440  0100D4  6FCA               	movwf	(?___flmul+2)& (0+255),b
 11441  0100D6  0E00               	movlw	0
 11442  0100D8  6FCB               	movwf	(?___flmul+3)& (0+255),b
 11443                           
 11444                           ; BSR set to: 0
 11445  0100DA  0012               	return	
 11446  0100DC                     l2976:
 11447                           
 11448                           ; BSR set to: 0
 11449                           
 11450                           ; BSR set to: 0
 11451  0100DC  0100               	movlb	0	; () banked
 11452  0100DE  51CE               	movf	(___flmul@a+2)& (0+255),w,b
 11453  0100E0  0100               	movlb	0	; () banked
 11454  0100E2  03C8               	mulwf	___flmul@b& (0+255),b
 11455  0100E4  CFF3 F0DF          	movff	prodl,___flmul@temp
 11456  0100E8  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11457                           
 11458                           ; BSR set to: 0
 11459  0100EC  0100               	movlb	0	; () banked
 11460  0100EE  51DF               	movf	___flmul@temp& (0+255),w,b
 11461  0100F0  0100               	movlb	0	; () banked
 11462  0100F2  6FD6               	movwf	___flmul@grs& (0+255),b
 11463  0100F4  6BD7               	clrf	(___flmul@grs+1)& (0+255),b
 11464  0100F6  6BD8               	clrf	(___flmul@grs+2)& (0+255),b
 11465  0100F8  6BD9               	clrf	(___flmul@grs+3)& (0+255),b
 11466                           
 11467                           ; BSR set to: 0
 11468  0100FA  0100               	movlb	0	; () banked
 11469  0100FC  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11470  0100FE  0100               	movlb	0	; () banked
 11471  010100  6FDB               	movwf	___flmul@prod& (0+255),b
 11472  010102  6BDC               	clrf	(___flmul@prod+1)& (0+255),b
 11473  010104  6BDD               	clrf	(___flmul@prod+2)& (0+255),b
 11474  010106  6BDE               	clrf	(___flmul@prod+3)& (0+255),b
 11475  010108  0100               	movlb	0	; () banked
 11476  01010A  51CD               	movf	(___flmul@a+1)& (0+255),w,b
 11477  01010C  0100               	movlb	0	; () banked
 11478  01010E  03C9               	mulwf	(___flmul@b+1)& (0+255),b
 11479  010110  CFF3 F0DF          	movff	prodl,___flmul@temp
 11480  010114  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11481                           
 11482                           ; BSR set to: 0
 11483  010118  0100               	movlb	0	; () banked
 11484  01011A  51DF               	movf	___flmul@temp& (0+255),w,b
 11485  01011C  0100               	movlb	0	; () banked
 11486  01011E  27D6               	addwf	___flmul@grs& (0+255),f,b
 11487  010120  0E00               	movlw	0
 11488  010122  23D7               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11489  010124  23D8               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11490  010126  23D9               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11491                           
 11492                           ; BSR set to: 0
 11493  010128  0100               	movlb	0	; () banked
 11494  01012A  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11495  01012C  0100               	movlb	0	; () banked
 11496  01012E  27DB               	addwf	___flmul@prod& (0+255),f,b
 11497  010130  0E00               	movlw	0
 11498  010132  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11499  010134  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11500  010136  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11501  010138  0100               	movlb	0	; () banked
 11502  01013A  51CC               	movf	___flmul@a& (0+255),w,b
 11503  01013C  0100               	movlb	0	; () banked
 11504  01013E  03CA               	mulwf	(___flmul@b+2)& (0+255),b
 11505  010140  CFF3 F0DF          	movff	prodl,___flmul@temp
 11506  010144  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11507                           
 11508                           ; BSR set to: 0
 11509  010148  0100               	movlb	0	; () banked
 11510  01014A  51DF               	movf	___flmul@temp& (0+255),w,b
 11511  01014C  0100               	movlb	0	; () banked
 11512  01014E  27D6               	addwf	___flmul@grs& (0+255),f,b
 11513  010150  0E00               	movlw	0
 11514  010152  23D7               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11515  010154  23D8               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11516  010156  23D9               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11517                           
 11518                           ; BSR set to: 0
 11519  010158  0100               	movlb	0	; () banked
 11520  01015A  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11521  01015C  0100               	movlb	0	; () banked
 11522  01015E  27DB               	addwf	___flmul@prod& (0+255),f,b
 11523  010160  0E00               	movlw	0
 11524  010162  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11525  010164  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11526  010166  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11527                           
 11528                           ; BSR set to: 0
 11529  010168  C0D8  F0D9         	movff	___flmul@grs+2,___flmul@grs+3
 11530  01016C  C0D7  F0D8         	movff	___flmul@grs+1,___flmul@grs+2
 11531  010170  C0D6  F0D7         	movff	___flmul@grs,___flmul@grs+1
 11532  010174  0100               	movlb	0	; () banked
 11533  010176  6BD6               	clrf	___flmul@grs& (0+255),b
 11534                           
 11535                           ; BSR set to: 0
 11536  010178  0100               	movlb	0	; () banked
 11537  01017A  51CC               	movf	___flmul@a& (0+255),w,b
 11538  01017C  0100               	movlb	0	; () banked
 11539  01017E  03C9               	mulwf	(___flmul@b+1)& (0+255),b
 11540  010180  CFF3 F0DF          	movff	prodl,___flmul@temp
 11541  010184  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11542                           
 11543                           ; BSR set to: 0
 11544  010188  0100               	movlb	0	; () banked
 11545  01018A  51DF               	movf	___flmul@temp& (0+255),w,b
 11546  01018C  0100               	movlb	0	; () banked
 11547  01018E  27D6               	addwf	___flmul@grs& (0+255),f,b
 11548  010190  0100               	movlb	0	; () banked
 11549  010192  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11550  010194  0100               	movlb	0	; () banked
 11551  010196  23D7               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11552  010198  0E00               	movlw	0
 11553  01019A  0100               	movlb	0	; () banked
 11554  01019C  23D8               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11555  01019E  0E00               	movlw	0
 11556  0101A0  0100               	movlb	0	; () banked
 11557  0101A2  23D9               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11558                           
 11559                           ; BSR set to: 0
 11560  0101A4  0100               	movlb	0	; () banked
 11561  0101A6  51CD               	movf	(___flmul@a+1)& (0+255),w,b
 11562  0101A8  0100               	movlb	0	; () banked
 11563  0101AA  03C8               	mulwf	___flmul@b& (0+255),b
 11564  0101AC  CFF3 F0DF          	movff	prodl,___flmul@temp
 11565  0101B0  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11566                           
 11567                           ; BSR set to: 0
 11568  0101B4  0100               	movlb	0	; () banked
 11569  0101B6  51DF               	movf	___flmul@temp& (0+255),w,b
 11570  0101B8  0100               	movlb	0	; () banked
 11571  0101BA  27D6               	addwf	___flmul@grs& (0+255),f,b
 11572  0101BC  0100               	movlb	0	; () banked
 11573  0101BE  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11574  0101C0  0100               	movlb	0	; () banked
 11575  0101C2  23D7               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11576  0101C4  0E00               	movlw	0
 11577  0101C6  0100               	movlb	0	; () banked
 11578  0101C8  23D8               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11579  0101CA  0E00               	movlw	0
 11580  0101CC  0100               	movlb	0	; () banked
 11581  0101CE  23D9               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11582                           
 11583                           ; BSR set to: 0
 11584  0101D0  C0D8  F0D9         	movff	___flmul@grs+2,___flmul@grs+3
 11585  0101D4  C0D7  F0D8         	movff	___flmul@grs+1,___flmul@grs+2
 11586  0101D8  C0D6  F0D7         	movff	___flmul@grs,___flmul@grs+1
 11587  0101DC  0100               	movlb	0	; () banked
 11588  0101DE  6BD6               	clrf	___flmul@grs& (0+255),b
 11589  0101E0  0100               	movlb	0	; () banked
 11590  0101E2  51CC               	movf	___flmul@a& (0+255),w,b
 11591  0101E4  0100               	movlb	0	; () banked
 11592  0101E6  03C8               	mulwf	___flmul@b& (0+255),b
 11593  0101E8  CFF3 F0DF          	movff	prodl,___flmul@temp
 11594  0101EC  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11595                           
 11596                           ; BSR set to: 0
 11597  0101F0  0100               	movlb	0	; () banked
 11598  0101F2  51DF               	movf	___flmul@temp& (0+255),w,b
 11599  0101F4  0100               	movlb	0	; () banked
 11600  0101F6  27D6               	addwf	___flmul@grs& (0+255),f,b
 11601  0101F8  0100               	movlb	0	; () banked
 11602  0101FA  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11603  0101FC  0100               	movlb	0	; () banked
 11604  0101FE  23D7               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11605  010200  0E00               	movlw	0
 11606  010202  0100               	movlb	0	; () banked
 11607  010204  23D8               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11608  010206  0E00               	movlw	0
 11609  010208  0100               	movlb	0	; () banked
 11610  01020A  23D9               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11611                           
 11612                           ; BSR set to: 0
 11613  01020C  0100               	movlb	0	; () banked
 11614  01020E  51CE               	movf	(___flmul@a+2)& (0+255),w,b
 11615  010210  0100               	movlb	0	; () banked
 11616  010212  03C9               	mulwf	(___flmul@b+1)& (0+255),b
 11617  010214  CFF3 F0DF          	movff	prodl,___flmul@temp
 11618  010218  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11619  01021C  0100               	movlb	0	; () banked
 11620  01021E  51DF               	movf	___flmul@temp& (0+255),w,b
 11621  010220  0100               	movlb	0	; () banked
 11622  010222  27DB               	addwf	___flmul@prod& (0+255),f,b
 11623  010224  0100               	movlb	0	; () banked
 11624  010226  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11625  010228  0100               	movlb	0	; () banked
 11626  01022A  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11627  01022C  0E00               	movlw	0
 11628  01022E  0100               	movlb	0	; () banked
 11629  010230  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11630  010232  0E00               	movlw	0
 11631  010234  0100               	movlb	0	; () banked
 11632  010236  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11633                           
 11634                           ; BSR set to: 0
 11635  010238  0100               	movlb	0	; () banked
 11636  01023A  51CD               	movf	(___flmul@a+1)& (0+255),w,b
 11637  01023C  0100               	movlb	0	; () banked
 11638  01023E  03CA               	mulwf	(___flmul@b+2)& (0+255),b
 11639  010240  CFF3 F0DF          	movff	prodl,___flmul@temp
 11640  010244  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11641                           
 11642                           ; BSR set to: 0
 11643  010248  0100               	movlb	0	; () banked
 11644  01024A  51DF               	movf	___flmul@temp& (0+255),w,b
 11645  01024C  0100               	movlb	0	; () banked
 11646  01024E  27DB               	addwf	___flmul@prod& (0+255),f,b
 11647  010250  0100               	movlb	0	; () banked
 11648  010252  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11649  010254  0100               	movlb	0	; () banked
 11650  010256  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11651  010258  0E00               	movlw	0
 11652  01025A  0100               	movlb	0	; () banked
 11653  01025C  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11654  01025E  0E00               	movlw	0
 11655  010260  0100               	movlb	0	; () banked
 11656  010262  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11657  010264  0100               	movlb	0	; () banked
 11658  010266  51CE               	movf	(___flmul@a+2)& (0+255),w,b
 11659  010268  0100               	movlb	0	; () banked
 11660  01026A  03CA               	mulwf	(___flmul@b+2)& (0+255),b
 11661  01026C  CFF3 F0DF          	movff	prodl,___flmul@temp
 11662  010270  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11663                           
 11664                           ; BSR set to: 0
 11665  010274  0100               	movlb	0	; () banked
 11666  010276  51DF               	movf	___flmul@temp& (0+255),w,b
 11667  010278  0100               	movlb	0	; () banked
 11668  01027A  6FD0               	movwf	??___flmul& (0+255),b
 11669  01027C  0100               	movlb	0	; () banked
 11670  01027E  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11671  010280  0100               	movlb	0	; () banked
 11672  010282  6FD1               	movwf	(??___flmul+1)& (0+255),b
 11673  010284  0100               	movlb	0	; () banked
 11674  010286  6BD2               	clrf	(??___flmul+2)& (0+255),b
 11675  010288  0100               	movlb	0	; () banked
 11676  01028A  6BD3               	clrf	(??___flmul+3)& (0+255),b
 11677  01028C  C0D2  F0D3         	movff	??___flmul+2,??___flmul+3
 11678  010290  C0D1  F0D2         	movff	??___flmul+1,??___flmul+2
 11679  010294  C0D0  F0D1         	movff	??___flmul,??___flmul+1
 11680  010298  0100               	movlb	0	; () banked
 11681  01029A  6BD0               	clrf	??___flmul& (0+255),b
 11682  01029C  0100               	movlb	0	; () banked
 11683  01029E  51D0               	movf	??___flmul& (0+255),w,b
 11684  0102A0  0100               	movlb	0	; () banked
 11685  0102A2  27DB               	addwf	___flmul@prod& (0+255),f,b
 11686  0102A4  0100               	movlb	0	; () banked
 11687  0102A6  51D1               	movf	(??___flmul+1)& (0+255),w,b
 11688  0102A8  0100               	movlb	0	; () banked
 11689  0102AA  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11690  0102AC  0100               	movlb	0	; () banked
 11691  0102AE  51D2               	movf	(??___flmul+2)& (0+255),w,b
 11692  0102B0  0100               	movlb	0	; () banked
 11693  0102B2  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11694  0102B4  0100               	movlb	0	; () banked
 11695  0102B6  51D3               	movf	(??___flmul+3)& (0+255),w,b
 11696  0102B8  0100               	movlb	0	; () banked
 11697  0102BA  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11698                           
 11699                           ; BSR set to: 0
 11700  0102BC  C0D6  F0D0         	movff	___flmul@grs,??___flmul
 11701  0102C0  C0D7  F0D1         	movff	___flmul@grs+1,??___flmul+1
 11702  0102C4  C0D8  F0D2         	movff	___flmul@grs+2,??___flmul+2
 11703  0102C8  C0D9  F0D3         	movff	___flmul@grs+3,??___flmul+3
 11704  0102CC  0E19               	movlw	25
 11705  0102CE  D006               	goto	u10320
 11706  0102D0                     u10325:
 11707  0102D0  0100               	movlb	0	; () banked
 11708  0102D2  90D8               	bcf	status,0,c
 11709  0102D4  33D3               	rrcf	(??___flmul+3)& (0+255),f,b
 11710  0102D6  33D2               	rrcf	(??___flmul+2)& (0+255),f,b
 11711  0102D8  33D1               	rrcf	(??___flmul+1)& (0+255),f,b
 11712  0102DA  33D0               	rrcf	??___flmul& (0+255),f,b
 11713  0102DC                     u10320:
 11714  0102DC  2EE8               	decfsz	wreg,f,c
 11715  0102DE  D7F8               	goto	u10325
 11716  0102E0  0100               	movlb	0	; () banked
 11717  0102E2  51D0               	movf	??___flmul& (0+255),w,b
 11718  0102E4  0100               	movlb	0	; () banked
 11719  0102E6  27DB               	addwf	___flmul@prod& (0+255),f,b
 11720  0102E8  0100               	movlb	0	; () banked
 11721  0102EA  51D1               	movf	(??___flmul+1)& (0+255),w,b
 11722  0102EC  0100               	movlb	0	; () banked
 11723  0102EE  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11724  0102F0  0100               	movlb	0	; () banked
 11725  0102F2  51D2               	movf	(??___flmul+2)& (0+255),w,b
 11726  0102F4  0100               	movlb	0	; () banked
 11727  0102F6  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11728  0102F8  0100               	movlb	0	; () banked
 11729  0102FA  51D3               	movf	(??___flmul+3)& (0+255),w,b
 11730  0102FC  0100               	movlb	0	; () banked
 11731  0102FE  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11732                           
 11733                           ; BSR set to: 0
 11734  010300  C0D8  F0D9         	movff	___flmul@grs+2,___flmul@grs+3
 11735  010304  C0D7  F0D8         	movff	___flmul@grs+1,___flmul@grs+2
 11736  010308  C0D6  F0D7         	movff	___flmul@grs,___flmul@grs+1
 11737  01030C  0100               	movlb	0	; () banked
 11738  01030E  6BD6               	clrf	___flmul@grs& (0+255),b
 11739                           
 11740                           ; BSR set to: 0
 11741  010310  0100               	movlb	0	; () banked
 11742  010312  51D5               	movf	___flmul@aexp& (0+255),w,b
 11743  010314  C0DA  F0D0         	movff	___flmul@bexp,??___flmul
 11744  010318  0100               	movlb	0	; () banked
 11745  01031A  6BD1               	clrf	(??___flmul+1)& (0+255),b
 11746  01031C  0100               	movlb	0	; () banked
 11747  01031E  27D0               	addwf	??___flmul& (0+255),f,b
 11748  010320  0E00               	movlw	0
 11749  010322  23D1               	addwfc	(??___flmul+1)& (0+255),f,b
 11750  010324  0E82               	movlw	130
 11751  010326  0100               	movlb	0	; () banked
 11752  010328  25D0               	addwf	??___flmul& (0+255),w,b
 11753  01032A  0100               	movlb	0	; () banked
 11754  01032C  6FDF               	movwf	___flmul@temp& (0+255),b
 11755  01032E  0EFF               	movlw	255
 11756  010330  0100               	movlb	0	; () banked
 11757  010332  21D1               	addwfc	(??___flmul+1)& (0+255),w,b
 11758  010334  0100               	movlb	0	; () banked
 11759  010336  6FE0               	movwf	(___flmul@temp+1)& (0+255),b
 11760  010338  D015               	goto	l2980
 11761  01033A                     
 11762                           ; BSR set to: 0
 11763                           
 11764                           ; BSR set to: 0
 11765  01033A  0100               	movlb	0	; () banked
 11766  01033C  90D8               	bcf	status,0,c
 11767  01033E  37DB               	rlcf	___flmul@prod& (0+255),f,b
 11768  010340  37DC               	rlcf	(___flmul@prod+1)& (0+255),f,b
 11769  010342  37DD               	rlcf	(___flmul@prod+2)& (0+255),f,b
 11770  010344  37DE               	rlcf	(___flmul@prod+3)& (0+255),f,b
 11771                           
 11772                           ; BSR set to: 0
 11773  010346  0100               	movlb	0	; () banked
 11774  010348  AFD9               	btfss	(___flmul@grs+3)& (0+255),7,b
 11775  01034A  D002               	goto	l2982
 11776                           
 11777                           ; BSR set to: 0
 11778  01034C  0100               	movlb	0	; () banked
 11779  01034E  81DB               	bsf	___flmul@prod& (0+255),0,b
 11780  010350                     l2982:
 11781                           
 11782                           ; BSR set to: 0
 11783  010350  0100               	movlb	0	; () banked
 11784  010352  90D8               	bcf	status,0,c
 11785  010354  37D6               	rlcf	___flmul@grs& (0+255),f,b
 11786  010356  37D7               	rlcf	(___flmul@grs+1)& (0+255),f,b
 11787  010358  37D8               	rlcf	(___flmul@grs+2)& (0+255),f,b
 11788  01035A  37D9               	rlcf	(___flmul@grs+3)& (0+255),f,b
 11789  01035C  0100               	movlb	0	; () banked
 11790  01035E  07DF               	decf	___flmul@temp& (0+255),f,b
 11791  010360  A0D8               	btfss	status,0,c
 11792  010362  07E0               	decf	(___flmul@temp+1)& (0+255),f,b
 11793  010364                     l2980:
 11794                           
 11795                           ; BSR set to: 0
 11796                           
 11797                           ; BSR set to: 0
 11798  010364  0100               	movlb	0	; () banked
 11799  010366  AFDD               	btfss	(___flmul@prod+2)& (0+255),7,b
 11800  010368  D7E8               	goto	l2981
 11801                           
 11802                           ; BSR set to: 0
 11803                           
 11804                           ; BSR set to: 0
 11805  01036A  0E00               	movlw	0
 11806  01036C  0100               	movlb	0	; () banked
 11807  01036E  6FD5               	movwf	___flmul@aexp& (0+255),b
 11808                           
 11809                           ; BSR set to: 0
 11810  010370  0100               	movlb	0	; () banked
 11811  010372  AFD9               	btfss	(___flmul@grs+3)& (0+255),7,b
 11812  010374  D024               	goto	l2987
 11813                           
 11814                           ; BSR set to: 0
 11815  010376  0EFF               	movlw	255
 11816  010378  0100               	movlb	0	; () banked
 11817  01037A  15D6               	andwf	___flmul@grs& (0+255),w,b
 11818  01037C  0100               	movlb	0	; () banked
 11819  01037E  6FD0               	movwf	??___flmul& (0+255),b
 11820  010380  0EFF               	movlw	255
 11821  010382  0100               	movlb	0	; () banked
 11822  010384  15D7               	andwf	(___flmul@grs+1)& (0+255),w,b
 11823  010386  0100               	movlb	0	; () banked
 11824  010388  6FD1               	movwf	(??___flmul+1)& (0+255),b
 11825  01038A  0EFF               	movlw	255
 11826  01038C  0100               	movlb	0	; () banked
 11827  01038E  15D8               	andwf	(___flmul@grs+2)& (0+255),w,b
 11828  010390  0100               	movlb	0	; () banked
 11829  010392  6FD2               	movwf	(??___flmul+2)& (0+255),b
 11830  010394  0E7F               	movlw	127
 11831  010396  0100               	movlb	0	; () banked
 11832  010398  15D9               	andwf	(___flmul@grs+3)& (0+255),w,b
 11833  01039A  0100               	movlb	0	; () banked
 11834  01039C  6FD3               	movwf	(??___flmul+3)& (0+255),b
 11835  01039E  0100               	movlb	0	; () banked
 11836  0103A0  51D0               	movf	??___flmul& (0+255),w,b
 11837  0103A2  0100               	movlb	0	; () banked
 11838  0103A4  11D1               	iorwf	(??___flmul+1)& (0+255),w,b
 11839  0103A6  0100               	movlb	0	; () banked
 11840  0103A8  11D2               	iorwf	(??___flmul+2)& (0+255),w,b
 11841  0103AA  0100               	movlb	0	; () banked
 11842  0103AC  11D3               	iorwf	(??___flmul+3)& (0+255),w,b
 11843  0103AE  A4D8               	btfss	status,2,c
 11844  0103B0  D003               	goto	u10370
 11845                           
 11846                           ; BSR set to: 0
 11847                           
 11848                           ; BSR set to: 0
 11849  0103B2  0100               	movlb	0	; () banked
 11850  0103B4  A1DB               	btfss	___flmul@prod& (0+255),0,b
 11851  0103B6  D003               	goto	l2987
 11852  0103B8                     u10370:
 11853                           
 11854                           ; BSR set to: 0
 11855  0103B8  0E01               	movlw	1
 11856  0103BA  0100               	movlb	0	; () banked
 11857  0103BC  6FD5               	movwf	___flmul@aexp& (0+255),b
 11858  0103BE                     l2987:
 11859                           
 11860                           ; BSR set to: 0
 11861                           
 11862                           ; BSR set to: 0
 11863                           
 11864                           ; BSR set to: 0
 11865  0103BE  0100               	movlb	0	; () banked
 11866  0103C0  51D5               	movf	___flmul@aexp& (0+255),w,b
 11867  0103C2  0100               	movlb	0	; () banked
 11868  0103C4  B4D8               	btfsc	status,2,c
 11869  0103C6  D023               	goto	l2989
 11870                           
 11871                           ; BSR set to: 0
 11872  0103C8  0E01               	movlw	1
 11873  0103CA  0100               	movlb	0	; () banked
 11874  0103CC  27DB               	addwf	___flmul@prod& (0+255),f,b
 11875  0103CE  0E00               	movlw	0
 11876  0103D0  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11877  0103D2  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11878  0103D4  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11879                           
 11880                           ; BSR set to: 0
 11881  0103D6  0100               	movlb	0	; () banked
 11882  0103D8  A1DE               	btfss	(___flmul@prod+3)& (0+255),0,b
 11883  0103DA  D019               	goto	l2989
 11884                           
 11885                           ; BSR set to: 0
 11886  0103DC  C0DB  F0D0         	movff	___flmul@prod,??___flmul
 11887  0103E0  C0DC  F0D1         	movff	___flmul@prod+1,??___flmul+1
 11888  0103E4  C0DD  F0D2         	movff	___flmul@prod+2,??___flmul+2
 11889  0103E8  C0DE  F0D3         	movff	___flmul@prod+3,??___flmul+3
 11890  0103EC  0100               	movlb	0	; () banked
 11891  0103EE  35D3               	rlcf	(??___flmul+3)& (0+255),w,b
 11892  0103F0  33D3               	rrcf	(??___flmul+3)& (0+255),f,b
 11893  0103F2  33D2               	rrcf	(??___flmul+2)& (0+255),f,b
 11894  0103F4  33D1               	rrcf	(??___flmul+1)& (0+255),f,b
 11895  0103F6  33D0               	rrcf	??___flmul& (0+255),f,b
 11896  0103F8  C0D0  F0DB         	movff	??___flmul,___flmul@prod
 11897  0103FC  C0D1  F0DC         	movff	??___flmul+1,___flmul@prod+1
 11898  010400  C0D2  F0DD         	movff	??___flmul+2,___flmul@prod+2
 11899  010404  C0D3  F0DE         	movff	??___flmul+3,___flmul@prod+3
 11900                           
 11901                           ; BSR set to: 0
 11902  010408  0100               	movlb	0	; () banked
 11903  01040A  4BDF               	infsnz	___flmul@temp& (0+255),f,b
 11904  01040C  2BE0               	incf	(___flmul@temp+1)& (0+255),f,b
 11905  01040E                     l2989:
 11906                           
 11907                           ; BSR set to: 0
 11908                           
 11909                           ; BSR set to: 0
 11910                           
 11911                           ; BSR set to: 0
 11912  01040E  0100               	movlb	0	; () banked
 11913  010410  BFE0               	btfsc	(___flmul@temp+1)& (0+255),7,b
 11914  010412  D010               	goto	l2990
 11915  010414  0100               	movlb	0	; () banked
 11916  010416  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11917  010418  E104               	bnz	u10400
 11918  01041A  0100               	movlb	0	; () banked
 11919  01041C  29DF               	incf	___flmul@temp& (0+255),w,b
 11920  01041E  A0D8               	btfss	status,0,c
 11921  010420  D009               	goto	l2990
 11922  010422                     u10400:
 11923                           
 11924                           ; BSR set to: 0
 11925  010422  0E00               	movlw	0
 11926  010424  0100               	movlb	0	; () banked
 11927  010426  6FDB               	movwf	___flmul@prod& (0+255),b
 11928  010428  0E00               	movlw	0
 11929  01042A  6FDC               	movwf	(___flmul@prod+1)& (0+255),b
 11930  01042C  0E80               	movlw	128
 11931  01042E  6FDD               	movwf	(___flmul@prod+2)& (0+255),b
 11932  010430  0E7F               	movlw	127
 11933  010432  D02B               	goto	L5
 11934  010434                     l2990:
 11935                           
 11936                           ; BSR set to: 0
 11937                           
 11938                           ; BSR set to: 0
 11939  010434  0100               	movlb	0	; () banked
 11940  010436  BFE0               	btfsc	(___flmul@temp+1)& (0+255),7,b
 11941  010438  D007               	goto	u10410
 11942  01043A  0100               	movlb	0	; () banked
 11943  01043C  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11944  01043E  E111               	bnz	l2992
 11945  010440  0100               	movlb	0	; () banked
 11946  010442  05DF               	decf	___flmul@temp& (0+255),w,b
 11947  010444  B0D8               	btfsc	status,0,c
 11948  010446  D00D               	goto	l2992
 11949  010448                     u10410:
 11950                           
 11951                           ; BSR set to: 0
 11952  010448  0E00               	movlw	0
 11953  01044A  0100               	movlb	0	; () banked
 11954  01044C  6FDB               	movwf	___flmul@prod& (0+255),b
 11955  01044E  0E00               	movlw	0
 11956  010450  6FDC               	movwf	(___flmul@prod+1)& (0+255),b
 11957  010452  0E00               	movlw	0
 11958  010454  6FDD               	movwf	(___flmul@prod+2)& (0+255),b
 11959  010456  0E00               	movlw	0
 11960  010458  6FDE               	movwf	(___flmul@prod+3)& (0+255),b
 11961  01045A  0E00               	movlw	0
 11962  01045C  0100               	movlb	0	; () banked
 11963  01045E  6FD4               	movwf	___flmul@sign& (0+255),b
 11964  010460  D015               	goto	l2993
 11965  010462                     l2992:
 11966                           
 11967                           ; BSR set to: 0
 11968  010462  C0DF  F0DA         	movff	___flmul@temp,___flmul@bexp
 11969                           
 11970                           ; BSR set to: 0
 11971  010466  0EFF               	movlw	255
 11972  010468  0100               	movlb	0	; () banked
 11973  01046A  17DB               	andwf	___flmul@prod& (0+255),f,b
 11974  01046C  0EFF               	movlw	255
 11975  01046E  17DC               	andwf	(___flmul@prod+1)& (0+255),f,b
 11976  010470  0E7F               	movlw	127
 11977  010472  17DD               	andwf	(___flmul@prod+2)& (0+255),f,b
 11978  010474  0E00               	movlw	0
 11979  010476  17DE               	andwf	(___flmul@prod+3)& (0+255),f,b
 11980                           
 11981                           ; BSR set to: 0
 11982  010478  0100               	movlb	0	; () banked
 11983  01047A  A1DA               	btfss	___flmul@bexp& (0+255),0,b
 11984  01047C  D002               	goto	l2994
 11985                           
 11986                           ; BSR set to: 0
 11987  01047E  0100               	movlb	0	; () banked
 11988  010480  8FDD               	bsf	(___flmul@prod+2)& (0+255),7,b
 11989  010482                     l2994:
 11990                           
 11991                           ; BSR set to: 0
 11992                           
 11993                           ; BSR set to: 0
 11994  010482  0100               	movlb	0	; () banked
 11995  010484  90D8               	bcf	status,0,c
 11996  010486  31DA               	rrcf	___flmul@bexp& (0+255),w,b
 11997  010488  0100               	movlb	0	; () banked
 11998  01048A                     L5:
 11999  01048A  6FDE               	movwf	(___flmul@prod+3)& (0+255),b
 12000  01048C                     l2993:
 12001                           
 12002                           ; BSR set to: 0
 12003                           
 12004                           ; BSR set to: 0
 12005                           
 12006                           ; BSR set to: 0
 12007  01048C  0100               	movlb	0	; () banked
 12008  01048E  51D4               	movf	___flmul@sign& (0+255),w,b
 12009  010490  0100               	movlb	0	; () banked
 12010  010492  13DE               	iorwf	(___flmul@prod+3)& (0+255),f,b
 12011                           
 12012                           ; BSR set to: 0
 12013  010494  C0DB  F0C8         	movff	___flmul@prod,?___flmul
 12014  010498  C0DC  F0C9         	movff	___flmul@prod+1,?___flmul+1
 12015  01049C  C0DD  F0CA         	movff	___flmul@prod+2,?___flmul+2
 12016  0104A0  C0DE  F0CB         	movff	___flmul@prod+3,?___flmul+3
 12017  0104A4  0012               	return	
 12018  0104A6                     __end_of___flmul:
 12019                           	opt stack 0
 12020                           tblptru	equ	0xFF8
 12021                           tblptrh	equ	0xFF7
 12022                           tblptrl	equ	0xFF6
 12023                           tablat	equ	0xFF5
 12024                           prodh	equ	0xFF4
 12025                           prodl	equ	0xFF3
 12026                           intcon	equ	0xFF2
 12027                           postinc0	equ	0xFEE
 12028                           wreg	equ	0xFE8
 12029                           postdec1	equ	0xFE5
 12030                           fsr1h	equ	0xFE2
 12031                           fsr1l	equ	0xFE1
 12032                           indf2	equ	0xFDF
 12033                           postinc2	equ	0xFDE
 12034                           postdec2	equ	0xFDD
 12035                           fsr2h	equ	0xFDA
 12036                           fsr2l	equ	0xFD9
 12037                           status	equ	0xFD8
 12038                           
 12039 ;; *************** function ___fldiv *****************
 12040 ;; Defined at:
 12041 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcdiv.c"
 12042 ;; Parameters:    Size  Location     Type
 12043 ;;  b               4    0[BANK0 ] unsigned char 
 12044 ;;  a               4    4[BANK0 ] unsigned char 
 12045 ;; Auto vars:     Size  Location     Type
 12046 ;;  grs             4   19[BANK0 ] unsigned long 
 12047 ;;  rem             4   13[BANK0 ] unsigned long 
 12048 ;;  new_exp         2   17[BANK0 ] int 
 12049 ;;  aexp            1   24[BANK0 ] unsigned char 
 12050 ;;  bexp            1   23[BANK0 ] unsigned char 
 12051 ;;  sign            1   12[BANK0 ] unsigned char 
 12052 ;; Return value:  Size  Location     Type
 12053 ;;                  4    0[BANK0 ] unsigned char 
 12054 ;; Registers used:
 12055 ;;		wreg, status,2, status,0
 12056 ;; Tracked objects:
 12057 ;;		On entry : 0/0
 12058 ;;		On exit  : 0/0
 12059 ;;		Unchanged: 0/0
 12060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12061 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12062 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12063 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12064 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12065 ;;Total ram usage:       25 bytes
 12066 ;; Hardware stack levels used:    1
 12067 ;; Hardware stack levels required when called:    7
 12068 ;; This function calls:
 12069 ;;		Nothing
 12070 ;; This function is called by:
 12071 ;;		_ADC_Voltage
 12072 ;;		_findClosestWall
 12073 ;;		_mode1
 12074 ;; This function uses a non-reentrant model
 12075 ;;
 12076                           
 12077                           	psect	text48
 12078  010C98                     __ptext48:
 12079                           	opt stack 0
 12080  010C98                     ___fldiv:
 12081                           	opt stack 21
 12082                           
 12083                           ; BSR set to: 0
 12084                           ;incstack = 0
 12085  010C98  0100               	movlb	0	; () banked
 12086  010C9A  51BD               	movf	(___fldiv@b+3)& (0+255),w,b
 12087  010C9C  0B80               	andlw	128
 12088  010C9E  0100               	movlb	0	; () banked
 12089  010CA0  6FC6               	movwf	___fldiv@sign& (0+255),b
 12090  010CA2  0100               	movlb	0	; () banked
 12091  010CA4  51BD               	movf	(___fldiv@b+3)& (0+255),w,b
 12092  010CA6  25BD               	addwf	(___fldiv@b+3)& (0+255),w,b
 12093  010CA8  0100               	movlb	0	; () banked
 12094  010CAA  6FD1               	movwf	___fldiv@bexp& (0+255),b
 12095                           
 12096                           ; BSR set to: 0
 12097  010CAC  0100               	movlb	0	; () banked
 12098  010CAE  AFBC               	btfss	(___fldiv@b+2)& (0+255),7,b
 12099  010CB0  D002               	goto	l2934
 12100                           
 12101                           ; BSR set to: 0
 12102  010CB2  0100               	movlb	0	; () banked
 12103  010CB4  81D1               	bsf	___fldiv@bexp& (0+255),0,b
 12104  010CB6                     l2934:
 12105                           
 12106                           ; BSR set to: 0
 12107                           
 12108                           ; BSR set to: 0
 12109  010CB6  0100               	movlb	0	; () banked
 12110  010CB8  51D1               	movf	___fldiv@bexp& (0+255),w,b
 12111  010CBA  0100               	movlb	0	; () banked
 12112  010CBC  B4D8               	btfsc	status,2,c
 12113  010CBE  D012               	goto	l2935
 12114                           
 12115                           ; BSR set to: 0
 12116  010CC0  0100               	movlb	0	; () banked
 12117  010CC2  29D1               	incf	___fldiv@bexp& (0+255),w,b
 12118  010CC4  A4D8               	btfss	status,2,c
 12119  010CC6  D009               	goto	l2936
 12120                           
 12121                           ; BSR set to: 0
 12122  010CC8  0E00               	movlw	0
 12123  010CCA  0100               	movlb	0	; () banked
 12124  010CCC  6FBA               	movwf	___fldiv@b& (0+255),b
 12125  010CCE  0E00               	movlw	0
 12126  010CD0  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 12127  010CD2  0E00               	movlw	0
 12128  010CD4  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 12129  010CD6  0E00               	movlw	0
 12130  010CD8  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12131  010CDA                     l2936:
 12132                           
 12133                           ; BSR set to: 0
 12134                           
 12135                           ; BSR set to: 0
 12136  010CDA  0100               	movlb	0	; () banked
 12137  010CDC  8FBC               	bsf	(___fldiv@b+2)& (0+255),7,b
 12138                           
 12139                           ; BSR set to: 0
 12140  010CDE  0E00               	movlw	0
 12141  010CE0  0100               	movlb	0	; () banked
 12142  010CE2  D008               	goto	L6
 12143  010CE4                     l2935:
 12144                           
 12145                           ; BSR set to: 0
 12146                           
 12147                           ; BSR set to: 0
 12148  010CE4  0E00               	movlw	0
 12149  010CE6  0100               	movlb	0	; () banked
 12150  010CE8  6FBA               	movwf	___fldiv@b& (0+255),b
 12151  010CEA  0E00               	movlw	0
 12152  010CEC  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 12153  010CEE  0E00               	movlw	0
 12154  010CF0  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 12155  010CF2  0E00               	movlw	0
 12156  010CF4                     L6:
 12157  010CF4  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12158                           
 12159                           ; BSR set to: 0
 12160                           
 12161                           ; BSR set to: 0
 12162  010CF6  0100               	movlb	0	; () banked
 12163  010CF8  51C1               	movf	(___fldiv@a+3)& (0+255),w,b
 12164  010CFA  0B80               	andlw	128
 12165  010CFC  0100               	movlb	0	; () banked
 12166  010CFE  1BC6               	xorwf	___fldiv@sign& (0+255),f,b
 12167                           
 12168                           ; BSR set to: 0
 12169  010D00  0100               	movlb	0	; () banked
 12170  010D02  51C1               	movf	(___fldiv@a+3)& (0+255),w,b
 12171  010D04  25C1               	addwf	(___fldiv@a+3)& (0+255),w,b
 12172  010D06  0100               	movlb	0	; () banked
 12173  010D08  6FD2               	movwf	___fldiv@aexp& (0+255),b
 12174                           
 12175                           ; BSR set to: 0
 12176  010D0A  0100               	movlb	0	; () banked
 12177  010D0C  AFC0               	btfss	(___fldiv@a+2)& (0+255),7,b
 12178  010D0E  D002               	goto	l2938
 12179                           
 12180                           ; BSR set to: 0
 12181  010D10  0100               	movlb	0	; () banked
 12182  010D12  81D2               	bsf	___fldiv@aexp& (0+255),0,b
 12183  010D14                     l2938:
 12184                           
 12185                           ; BSR set to: 0
 12186                           
 12187                           ; BSR set to: 0
 12188  010D14  0100               	movlb	0	; () banked
 12189  010D16  51D2               	movf	___fldiv@aexp& (0+255),w,b
 12190  010D18  0100               	movlb	0	; () banked
 12191  010D1A  B4D8               	btfsc	status,2,c
 12192  010D1C  D012               	goto	l2939
 12193                           
 12194                           ; BSR set to: 0
 12195  010D1E  0100               	movlb	0	; () banked
 12196  010D20  29D2               	incf	___fldiv@aexp& (0+255),w,b
 12197  010D22  A4D8               	btfss	status,2,c
 12198  010D24  D009               	goto	l2940
 12199                           
 12200                           ; BSR set to: 0
 12201  010D26  0E00               	movlw	0
 12202  010D28  0100               	movlb	0	; () banked
 12203  010D2A  6FBE               	movwf	___fldiv@a& (0+255),b
 12204  010D2C  0E00               	movlw	0
 12205  010D2E  6FBF               	movwf	(___fldiv@a+1)& (0+255),b
 12206  010D30  0E00               	movlw	0
 12207  010D32  6FC0               	movwf	(___fldiv@a+2)& (0+255),b
 12208  010D34  0E00               	movlw	0
 12209  010D36  6FC1               	movwf	(___fldiv@a+3)& (0+255),b
 12210  010D38                     l2940:
 12211                           
 12212                           ; BSR set to: 0
 12213                           
 12214                           ; BSR set to: 0
 12215  010D38  0100               	movlb	0	; () banked
 12216  010D3A  8FC0               	bsf	(___fldiv@a+2)& (0+255),7,b
 12217                           
 12218                           ; BSR set to: 0
 12219  010D3C  0E00               	movlw	0
 12220  010D3E  0100               	movlb	0	; () banked
 12221  010D40  D008               	goto	L7
 12222  010D42                     l2939:
 12223                           
 12224                           ; BSR set to: 0
 12225                           
 12226                           ; BSR set to: 0
 12227  010D42  0E00               	movlw	0
 12228  010D44  0100               	movlb	0	; () banked
 12229  010D46  6FBE               	movwf	___fldiv@a& (0+255),b
 12230  010D48  0E00               	movlw	0
 12231  010D4A  6FBF               	movwf	(___fldiv@a+1)& (0+255),b
 12232  010D4C  0E00               	movlw	0
 12233  010D4E  6FC0               	movwf	(___fldiv@a+2)& (0+255),b
 12234  010D50  0E00               	movlw	0
 12235  010D52                     L7:
 12236  010D52  6FC1               	movwf	(___fldiv@a+3)& (0+255),b
 12237                           
 12238                           ; BSR set to: 0
 12239                           
 12240                           ; BSR set to: 0
 12241  010D54  0100               	movlb	0	; () banked
 12242  010D56  51BE               	movf	___fldiv@a& (0+255),w,b
 12243  010D58  0100               	movlb	0	; () banked
 12244  010D5A  11BF               	iorwf	(___fldiv@a+1)& (0+255),w,b
 12245  010D5C  0100               	movlb	0	; () banked
 12246  010D5E  11C0               	iorwf	(___fldiv@a+2)& (0+255),w,b
 12247  010D60  0100               	movlb	0	; () banked
 12248  010D62  11C1               	iorwf	(___fldiv@a+3)& (0+255),w,b
 12249  010D64  A4D8               	btfss	status,2,c
 12250  010D66  D017               	goto	l2942
 12251                           
 12252                           ; BSR set to: 0
 12253  010D68  0E00               	movlw	0
 12254  010D6A  0100               	movlb	0	; () banked
 12255  010D6C  6FBA               	movwf	___fldiv@b& (0+255),b
 12256  010D6E  0E00               	movlw	0
 12257  010D70  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 12258  010D72  0E00               	movlw	0
 12259  010D74  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 12260  010D76  0E00               	movlw	0
 12261  010D78  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12262                           
 12263                           ; BSR set to: 0
 12264  010D7A  0100               	movlb	0	; () banked
 12265  010D7C  0E80               	movlw	128
 12266  010D7E  13BC               	iorwf	(___fldiv@b+2)& (0+255),f,b
 12267  010D80  0E7F               	movlw	127
 12268  010D82  13BD               	iorwf	(___fldiv@b+3)& (0+255),f,b
 12269                           
 12270                           ; BSR set to: 0
 12271  010D84  C0BA  F0BA         	movff	___fldiv@b,?___fldiv
 12272  010D88  C0BB  F0BB         	movff	___fldiv@b+1,?___fldiv+1
 12273  010D8C  C0BC  F0BC         	movff	___fldiv@b+2,?___fldiv+2
 12274  010D90  C0BD  F0BD         	movff	___fldiv@b+3,?___fldiv+3
 12275                           
 12276                           ; BSR set to: 0
 12277  010D94  0012               	return	
 12278  010D96                     l2942:
 12279                           
 12280                           ; BSR set to: 0
 12281                           
 12282                           ; BSR set to: 0
 12283  010D96  0100               	movlb	0	; () banked
 12284  010D98  51D1               	movf	___fldiv@bexp& (0+255),w,b
 12285  010D9A  0100               	movlb	0	; () banked
 12286  010D9C  A4D8               	btfss	status,2,c
 12287  010D9E  D012               	goto	l2944
 12288                           
 12289                           ; BSR set to: 0
 12290  010DA0  0E00               	movlw	0
 12291  010DA2  0100               	movlb	0	; () banked
 12292  010DA4  6FBA               	movwf	___fldiv@b& (0+255),b
 12293  010DA6  0E00               	movlw	0
 12294  010DA8  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 12295  010DAA  0E00               	movlw	0
 12296  010DAC  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 12297  010DAE  0E00               	movlw	0
 12298  010DB0  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12299                           
 12300                           ; BSR set to: 0
 12301  010DB2  C0BA  F0BA         	movff	___fldiv@b,?___fldiv
 12302  010DB6  C0BB  F0BB         	movff	___fldiv@b+1,?___fldiv+1
 12303  010DBA  C0BC  F0BC         	movff	___fldiv@b+2,?___fldiv+2
 12304  010DBE  C0BD  F0BD         	movff	___fldiv@b+3,?___fldiv+3
 12305                           
 12306                           ; BSR set to: 0
 12307  010DC2  0012               	return	
 12308  010DC4                     l2944:
 12309                           
 12310                           ; BSR set to: 0
 12311                           
 12312                           ; BSR set to: 0
 12313  010DC4  0100               	movlb	0	; () banked
 12314  010DC6  51D2               	movf	___fldiv@aexp& (0+255),w,b
 12315  010DC8  0100               	movlb	0	; () banked
 12316  010DCA  6FC2               	movwf	??___fldiv& (0+255),b
 12317  010DCC  6BC3               	clrf	(??___fldiv+1)& (0+255),b
 12318  010DCE  0100               	movlb	0	; () banked
 12319  010DD0  1FC2               	comf	??___fldiv& (0+255),f,b
 12320  010DD2  1FC3               	comf	(??___fldiv+1)& (0+255),f,b
 12321  010DD4  4BC2               	infsnz	??___fldiv& (0+255),f,b
 12322  010DD6  2BC3               	incf	(??___fldiv+1)& (0+255),f,b
 12323  010DD8  0100               	movlb	0	; () banked
 12324  010DDA  51D1               	movf	___fldiv@bexp& (0+255),w,b
 12325  010DDC  0100               	movlb	0	; () banked
 12326  010DDE  6FC4               	movwf	(??___fldiv+2)& (0+255),b
 12327  010DE0  6BC5               	clrf	(??___fldiv+3)& (0+255),b
 12328  010DE2  0100               	movlb	0	; () banked
 12329  010DE4  51C2               	movf	??___fldiv& (0+255),w,b
 12330  010DE6  0100               	movlb	0	; () banked
 12331  010DE8  27C4               	addwf	(??___fldiv+2)& (0+255),f,b
 12332  010DEA  0100               	movlb	0	; () banked
 12333  010DEC  51C3               	movf	(??___fldiv+1)& (0+255),w,b
 12334  010DEE  0100               	movlb	0	; () banked
 12335  010DF0  23C5               	addwfc	(??___fldiv+3)& (0+255),f,b
 12336  010DF2  0E7F               	movlw	127
 12337  010DF4  0100               	movlb	0	; () banked
 12338  010DF6  25C4               	addwf	(??___fldiv+2)& (0+255),w,b
 12339  010DF8  0100               	movlb	0	; () banked
 12340  010DFA  6FCB               	movwf	___fldiv@new_exp& (0+255),b
 12341  010DFC  0E00               	movlw	0
 12342  010DFE  0100               	movlb	0	; () banked
 12343  010E00  21C5               	addwfc	(??___fldiv+3)& (0+255),w,b
 12344  010E02  0100               	movlb	0	; () banked
 12345  010E04  6FCC               	movwf	(___fldiv@new_exp+1)& (0+255),b
 12346                           
 12347                           ; BSR set to: 0
 12348  010E06  C0BA  F0C7         	movff	___fldiv@b,___fldiv@rem
 12349  010E0A  C0BB  F0C8         	movff	___fldiv@b+1,___fldiv@rem+1
 12350  010E0E  C0BC  F0C9         	movff	___fldiv@b+2,___fldiv@rem+2
 12351  010E12  C0BD  F0CA         	movff	___fldiv@b+3,___fldiv@rem+3
 12352                           
 12353                           ; BSR set to: 0
 12354  010E16  0E00               	movlw	0
 12355  010E18  0100               	movlb	0	; () banked
 12356  010E1A  6FBA               	movwf	___fldiv@b& (0+255),b
 12357  010E1C  0E00               	movlw	0
 12358  010E1E  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 12359  010E20  0E00               	movlw	0
 12360  010E22  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 12361  010E24  0E00               	movlw	0
 12362  010E26  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12363                           
 12364                           ; BSR set to: 0
 12365  010E28  0E00               	movlw	0
 12366  010E2A  0100               	movlb	0	; () banked
 12367  010E2C  6FCD               	movwf	___fldiv@grs& (0+255),b
 12368  010E2E  0E00               	movlw	0
 12369  010E30  6FCE               	movwf	(___fldiv@grs+1)& (0+255),b
 12370  010E32  0E00               	movlw	0
 12371  010E34  6FCF               	movwf	(___fldiv@grs+2)& (0+255),b
 12372  010E36  0E00               	movlw	0
 12373  010E38  6FD0               	movwf	(___fldiv@grs+3)& (0+255),b
 12374                           
 12375                           ; BSR set to: 0
 12376  010E3A  0E00               	movlw	0
 12377  010E3C  0100               	movlb	0	; () banked
 12378  010E3E  6FD2               	movwf	___fldiv@aexp& (0+255),b
 12379  010E40  D042               	goto	l2945
 12380  010E42                     
 12381                           ; BSR set to: 0
 12382                           
 12383                           ; BSR set to: 0
 12384  010E42  0100               	movlb	0	; () banked
 12385  010E44  51D2               	movf	___fldiv@aexp& (0+255),w,b
 12386  010E46  0100               	movlb	0	; () banked
 12387  010E48  B4D8               	btfsc	status,2,c
 12388  010E4A  D017               	goto	l2947
 12389                           
 12390                           ; BSR set to: 0
 12391  010E4C  0100               	movlb	0	; () banked
 12392  010E4E  90D8               	bcf	status,0,c
 12393  010E50  37C7               	rlcf	___fldiv@rem& (0+255),f,b
 12394  010E52  37C8               	rlcf	(___fldiv@rem+1)& (0+255),f,b
 12395  010E54  37C9               	rlcf	(___fldiv@rem+2)& (0+255),f,b
 12396  010E56  37CA               	rlcf	(___fldiv@rem+3)& (0+255),f,b
 12397  010E58  0100               	movlb	0	; () banked
 12398  010E5A  90D8               	bcf	status,0,c
 12399  010E5C  37BA               	rlcf	___fldiv@b& (0+255),f,b
 12400  010E5E  37BB               	rlcf	(___fldiv@b+1)& (0+255),f,b
 12401  010E60  37BC               	rlcf	(___fldiv@b+2)& (0+255),f,b
 12402  010E62  37BD               	rlcf	(___fldiv@b+3)& (0+255),f,b
 12403                           
 12404                           ; BSR set to: 0
 12405  010E64  0100               	movlb	0	; () banked
 12406  010E66  AFD0               	btfss	(___fldiv@grs+3)& (0+255),7,b
 12407  010E68  D002               	goto	l2948
 12408                           
 12409                           ; BSR set to: 0
 12410  010E6A  0100               	movlb	0	; () banked
 12411  010E6C  81BA               	bsf	___fldiv@b& (0+255),0,b
 12412  010E6E                     l2948:
 12413                           
 12414                           ; BSR set to: 0
 12415  010E6E  0100               	movlb	0	; () banked
 12416  010E70  90D8               	bcf	status,0,c
 12417  010E72  37CD               	rlcf	___fldiv@grs& (0+255),f,b
 12418  010E74  37CE               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 12419  010E76  37CF               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 12420  010E78  37D0               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 12421  010E7A                     l2947:
 12422                           
 12423                           ; BSR set to: 0
 12424                           
 12425                           ; BSR set to: 0
 12426  010E7A  0100               	movlb	0	; () banked
 12427  010E7C  51BE               	movf	___fldiv@a& (0+255),w,b
 12428  010E7E  0100               	movlb	0	; () banked
 12429  010E80  5DC7               	subwf	___fldiv@rem& (0+255),w,b
 12430  010E82  0100               	movlb	0	; () banked
 12431  010E84  51BF               	movf	(___fldiv@a+1)& (0+255),w,b
 12432  010E86  0100               	movlb	0	; () banked
 12433  010E88  59C8               	subwfb	(___fldiv@rem+1)& (0+255),w,b
 12434  010E8A  0100               	movlb	0	; () banked
 12435  010E8C  51C0               	movf	(___fldiv@a+2)& (0+255),w,b
 12436  010E8E  0100               	movlb	0	; () banked
 12437  010E90  59C9               	subwfb	(___fldiv@rem+2)& (0+255),w,b
 12438  010E92  0100               	movlb	0	; () banked
 12439  010E94  51C1               	movf	(___fldiv@a+3)& (0+255),w,b
 12440  010E96  0100               	movlb	0	; () banked
 12441  010E98  59CA               	subwfb	(___fldiv@rem+3)& (0+255),w,b
 12442  010E9A  A0D8               	btfss	status,0,c
 12443  010E9C  D012               	goto	l2949
 12444                           
 12445                           ; BSR set to: 0
 12446  010E9E  0100               	movlb	0	; () banked
 12447  010EA0  8DD0               	bsf	(___fldiv@grs+3)& (0+255),6,b
 12448                           
 12449                           ; BSR set to: 0
 12450  010EA2  0100               	movlb	0	; () banked
 12451  010EA4  51BE               	movf	___fldiv@a& (0+255),w,b
 12452  010EA6  0100               	movlb	0	; () banked
 12453  010EA8  5FC7               	subwf	___fldiv@rem& (0+255),f,b
 12454  010EAA  0100               	movlb	0	; () banked
 12455  010EAC  51BF               	movf	(___fldiv@a+1)& (0+255),w,b
 12456  010EAE  0100               	movlb	0	; () banked
 12457  010EB0  5BC8               	subwfb	(___fldiv@rem+1)& (0+255),f,b
 12458  010EB2  0100               	movlb	0	; () banked
 12459  010EB4  51C0               	movf	(___fldiv@a+2)& (0+255),w,b
 12460  010EB6  0100               	movlb	0	; () banked
 12461  010EB8  5BC9               	subwfb	(___fldiv@rem+2)& (0+255),f,b
 12462  010EBA  0100               	movlb	0	; () banked
 12463  010EBC  51C1               	movf	(___fldiv@a+3)& (0+255),w,b
 12464  010EBE  0100               	movlb	0	; () banked
 12465  010EC0  5BCA               	subwfb	(___fldiv@rem+3)& (0+255),f,b
 12466  010EC2                     l2949:
 12467                           
 12468                           ; BSR set to: 0
 12469                           
 12470                           ; BSR set to: 0
 12471  010EC2  0100               	movlb	0	; () banked
 12472  010EC4  2BD2               	incf	___fldiv@aexp& (0+255),f,b
 12473  010EC6                     l2945:
 12474                           
 12475                           ; BSR set to: 0
 12476  010EC6  0E19               	movlw	25
 12477  010EC8  0100               	movlb	0	; () banked
 12478  010ECA  65D2               	cpfsgt	___fldiv@aexp& (0+255),b
 12479  010ECC  D7BA               	goto	l2946
 12480                           
 12481                           ; BSR set to: 0
 12482                           
 12483                           ; BSR set to: 0
 12484  010ECE  0100               	movlb	0	; () banked
 12485  010ED0  51C7               	movf	___fldiv@rem& (0+255),w,b
 12486  010ED2  0100               	movlb	0	; () banked
 12487  010ED4  11C8               	iorwf	(___fldiv@rem+1)& (0+255),w,b
 12488  010ED6  0100               	movlb	0	; () banked
 12489  010ED8  11C9               	iorwf	(___fldiv@rem+2)& (0+255),w,b
 12490  010EDA  0100               	movlb	0	; () banked
 12491  010EDC  11CA               	iorwf	(___fldiv@rem+3)& (0+255),w,b
 12492  010EDE  B4D8               	btfsc	status,2,c
 12493  010EE0  D018               	goto	l2952
 12494                           
 12495                           ; BSR set to: 0
 12496  010EE2  0100               	movlb	0	; () banked
 12497  010EE4  81CD               	bsf	___fldiv@grs& (0+255),0,b
 12498                           
 12499                           ; BSR set to: 0
 12500  010EE6  D015               	goto	l2952
 12501  010EE8                     
 12502                           ; BSR set to: 0
 12503                           
 12504                           ; BSR set to: 0
 12505  010EE8  0100               	movlb	0	; () banked
 12506  010EEA  90D8               	bcf	status,0,c
 12507  010EEC  37BA               	rlcf	___fldiv@b& (0+255),f,b
 12508  010EEE  37BB               	rlcf	(___fldiv@b+1)& (0+255),f,b
 12509  010EF0  37BC               	rlcf	(___fldiv@b+2)& (0+255),f,b
 12510  010EF2  37BD               	rlcf	(___fldiv@b+3)& (0+255),f,b
 12511                           
 12512                           ; BSR set to: 0
 12513  010EF4  0100               	movlb	0	; () banked
 12514  010EF6  AFD0               	btfss	(___fldiv@grs+3)& (0+255),7,b
 12515  010EF8  D002               	goto	l2954
 12516                           
 12517                           ; BSR set to: 0
 12518  010EFA  0100               	movlb	0	; () banked
 12519  010EFC  81BA               	bsf	___fldiv@b& (0+255),0,b
 12520  010EFE                     l2954:
 12521                           
 12522                           ; BSR set to: 0
 12523  010EFE  0100               	movlb	0	; () banked
 12524  010F00  90D8               	bcf	status,0,c
 12525  010F02  37CD               	rlcf	___fldiv@grs& (0+255),f,b
 12526  010F04  37CE               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 12527  010F06  37CF               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 12528  010F08  37D0               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 12529  010F0A  0100               	movlb	0	; () banked
 12530  010F0C  07CB               	decf	___fldiv@new_exp& (0+255),f,b
 12531  010F0E  A0D8               	btfss	status,0,c
 12532  010F10  07CC               	decf	(___fldiv@new_exp+1)& (0+255),f,b
 12533  010F12                     l2952:
 12534                           
 12535                           ; BSR set to: 0
 12536                           
 12537                           ; BSR set to: 0
 12538  010F12  0100               	movlb	0	; () banked
 12539  010F14  AFBC               	btfss	(___fldiv@b+2)& (0+255),7,b
 12540  010F16  D7E8               	goto	l2953
 12541                           
 12542                           ; BSR set to: 0
 12543                           
 12544                           ; BSR set to: 0
 12545  010F18  0E00               	movlw	0
 12546  010F1A  0100               	movlb	0	; () banked
 12547  010F1C  6FD2               	movwf	___fldiv@aexp& (0+255),b
 12548                           
 12549                           ; BSR set to: 0
 12550  010F1E  0100               	movlb	0	; () banked
 12551  010F20  AFD0               	btfss	(___fldiv@grs+3)& (0+255),7,b
 12552  010F22  D024               	goto	l2959
 12553                           
 12554                           ; BSR set to: 0
 12555  010F24  0EFF               	movlw	255
 12556  010F26  0100               	movlb	0	; () banked
 12557  010F28  15CD               	andwf	___fldiv@grs& (0+255),w,b
 12558  010F2A  0100               	movlb	0	; () banked
 12559  010F2C  6FC2               	movwf	??___fldiv& (0+255),b
 12560  010F2E  0EFF               	movlw	255
 12561  010F30  0100               	movlb	0	; () banked
 12562  010F32  15CE               	andwf	(___fldiv@grs+1)& (0+255),w,b
 12563  010F34  0100               	movlb	0	; () banked
 12564  010F36  6FC3               	movwf	(??___fldiv+1)& (0+255),b
 12565  010F38  0EFF               	movlw	255
 12566  010F3A  0100               	movlb	0	; () banked
 12567  010F3C  15CF               	andwf	(___fldiv@grs+2)& (0+255),w,b
 12568  010F3E  0100               	movlb	0	; () banked
 12569  010F40  6FC4               	movwf	(??___fldiv+2)& (0+255),b
 12570  010F42  0E7F               	movlw	127
 12571  010F44  0100               	movlb	0	; () banked
 12572  010F46  15D0               	andwf	(___fldiv@grs+3)& (0+255),w,b
 12573  010F48  0100               	movlb	0	; () banked
 12574  010F4A  6FC5               	movwf	(??___fldiv+3)& (0+255),b
 12575  010F4C  0100               	movlb	0	; () banked
 12576  010F4E  51C2               	movf	??___fldiv& (0+255),w,b
 12577  010F50  0100               	movlb	0	; () banked
 12578  010F52  11C3               	iorwf	(??___fldiv+1)& (0+255),w,b
 12579  010F54  0100               	movlb	0	; () banked
 12580  010F56  11C4               	iorwf	(??___fldiv+2)& (0+255),w,b
 12581  010F58  0100               	movlb	0	; () banked
 12582  010F5A  11C5               	iorwf	(??___fldiv+3)& (0+255),w,b
 12583  010F5C  A4D8               	btfss	status,2,c
 12584  010F5E  D003               	goto	u10180
 12585                           
 12586                           ; BSR set to: 0
 12587                           
 12588                           ; BSR set to: 0
 12589  010F60  0100               	movlb	0	; () banked
 12590  010F62  A1BA               	btfss	___fldiv@b& (0+255),0,b
 12591  010F64  D003               	goto	l2959
 12592  010F66                     u10180:
 12593                           
 12594                           ; BSR set to: 0
 12595  010F66  0E01               	movlw	1
 12596  010F68  0100               	movlb	0	; () banked
 12597  010F6A  6FD2               	movwf	___fldiv@aexp& (0+255),b
 12598  010F6C                     l2959:
 12599                           
 12600                           ; BSR set to: 0
 12601                           
 12602                           ; BSR set to: 0
 12603                           
 12604                           ; BSR set to: 0
 12605  010F6C  0100               	movlb	0	; () banked
 12606  010F6E  51D2               	movf	___fldiv@aexp& (0+255),w,b
 12607  010F70  0100               	movlb	0	; () banked
 12608  010F72  B4D8               	btfsc	status,2,c
 12609  010F74  D023               	goto	l2961
 12610                           
 12611                           ; BSR set to: 0
 12612  010F76  0E01               	movlw	1
 12613  010F78  0100               	movlb	0	; () banked
 12614  010F7A  27BA               	addwf	___fldiv@b& (0+255),f,b
 12615  010F7C  0E00               	movlw	0
 12616  010F7E  23BB               	addwfc	(___fldiv@b+1)& (0+255),f,b
 12617  010F80  23BC               	addwfc	(___fldiv@b+2)& (0+255),f,b
 12618  010F82  23BD               	addwfc	(___fldiv@b+3)& (0+255),f,b
 12619                           
 12620                           ; BSR set to: 0
 12621  010F84  0100               	movlb	0	; () banked
 12622  010F86  A1BD               	btfss	(___fldiv@b+3)& (0+255),0,b
 12623  010F88  D019               	goto	l2961
 12624                           
 12625                           ; BSR set to: 0
 12626  010F8A  C0BA  F0C2         	movff	___fldiv@b,??___fldiv
 12627  010F8E  C0BB  F0C3         	movff	___fldiv@b+1,??___fldiv+1
 12628  010F92  C0BC  F0C4         	movff	___fldiv@b+2,??___fldiv+2
 12629  010F96  C0BD  F0C5         	movff	___fldiv@b+3,??___fldiv+3
 12630  010F9A  0100               	movlb	0	; () banked
 12631  010F9C  35C5               	rlcf	(??___fldiv+3)& (0+255),w,b
 12632  010F9E  33C5               	rrcf	(??___fldiv+3)& (0+255),f,b
 12633  010FA0  33C4               	rrcf	(??___fldiv+2)& (0+255),f,b
 12634  010FA2  33C3               	rrcf	(??___fldiv+1)& (0+255),f,b
 12635  010FA4  33C2               	rrcf	??___fldiv& (0+255),f,b
 12636  010FA6  C0C2  F0BA         	movff	??___fldiv,___fldiv@b
 12637  010FAA  C0C3  F0BB         	movff	??___fldiv+1,___fldiv@b+1
 12638  010FAE  C0C4  F0BC         	movff	??___fldiv+2,___fldiv@b+2
 12639  010FB2  C0C5  F0BD         	movff	??___fldiv+3,___fldiv@b+3
 12640                           
 12641                           ; BSR set to: 0
 12642  010FB6  0100               	movlb	0	; () banked
 12643  010FB8  4BCB               	infsnz	___fldiv@new_exp& (0+255),f,b
 12644  010FBA  2BCC               	incf	(___fldiv@new_exp+1)& (0+255),f,b
 12645  010FBC                     l2961:
 12646                           
 12647                           ; BSR set to: 0
 12648                           
 12649                           ; BSR set to: 0
 12650                           
 12651                           ; BSR set to: 0
 12652  010FBC  0100               	movlb	0	; () banked
 12653  010FBE  BFCC               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 12654  010FC0  D014               	goto	l2962
 12655  010FC2  0100               	movlb	0	; () banked
 12656  010FC4  51CC               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 12657  010FC6  E104               	bnz	u10210
 12658  010FC8  0100               	movlb	0	; () banked
 12659  010FCA  29CB               	incf	___fldiv@new_exp& (0+255),w,b
 12660  010FCC  A0D8               	btfss	status,0,c
 12661  010FCE  D00D               	goto	l2962
 12662  010FD0                     u10210:
 12663                           
 12664                           ; BSR set to: 0
 12665  010FD0  0E00               	movlw	0
 12666  010FD2  0100               	movlb	0	; () banked
 12667  010FD4  6FCC               	movwf	(___fldiv@new_exp+1)& (0+255),b
 12668  010FD6  69CB               	setf	___fldiv@new_exp& (0+255),b
 12669  010FD8  0E00               	movlw	0
 12670  010FDA  0100               	movlb	0	; () banked
 12671  010FDC  6FBA               	movwf	___fldiv@b& (0+255),b
 12672  010FDE  0E00               	movlw	0
 12673  010FE0  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 12674  010FE2  0E00               	movlw	0
 12675  010FE4  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 12676  010FE6  0E00               	movlw	0
 12677  010FE8  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12678  010FEA                     l2962:
 12679                           
 12680                           ; BSR set to: 0
 12681                           
 12682                           ; BSR set to: 0
 12683  010FEA  0100               	movlb	0	; () banked
 12684  010FEC  BFCC               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 12685  010FEE  D007               	goto	u10220
 12686  010FF0  0100               	movlb	0	; () banked
 12687  010FF2  51CC               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 12688  010FF4  E115               	bnz	l13663
 12689  010FF6  0100               	movlb	0	; () banked
 12690  010FF8  05CB               	decf	___fldiv@new_exp& (0+255),w,b
 12691  010FFA  B0D8               	btfsc	status,0,c
 12692  010FFC  D011               	goto	l2963
 12693  010FFE                     u10220:
 12694                           
 12695                           ; BSR set to: 0
 12696  010FFE  0E00               	movlw	0
 12697  011000  0100               	movlb	0	; () banked
 12698  011002  6FCC               	movwf	(___fldiv@new_exp+1)& (0+255),b
 12699  011004  0E00               	movlw	0
 12700  011006  6FCB               	movwf	___fldiv@new_exp& (0+255),b
 12701  011008  0E00               	movlw	0
 12702  01100A  0100               	movlb	0	; () banked
 12703  01100C  6FBA               	movwf	___fldiv@b& (0+255),b
 12704  01100E  0E00               	movlw	0
 12705  011010  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 12706  011012  0E00               	movlw	0
 12707  011014  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 12708  011016  0E00               	movlw	0
 12709  011018  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12710  01101A  0E00               	movlw	0
 12711  01101C  0100               	movlb	0	; () banked
 12712  01101E  6FC6               	movwf	___fldiv@sign& (0+255),b
 12713  011020                     l2963:
 12714  011020                     l13663:
 12715                           
 12716                           ; BSR set to: 0
 12717  011020  C0CB  F0D1         	movff	___fldiv@new_exp,___fldiv@bexp
 12718                           
 12719                           ; BSR set to: 0
 12720  011024  0100               	movlb	0	; () banked
 12721  011026  A1D1               	btfss	___fldiv@bexp& (0+255),0,b
 12722  011028  D003               	goto	l2964
 12723                           
 12724                           ; BSR set to: 0
 12725  01102A  0100               	movlb	0	; () banked
 12726  01102C  8FBC               	bsf	(___fldiv@b+2)& (0+255),7,b
 12727  01102E  D002               	goto	l2965
 12728  011030                     l2964:
 12729                           
 12730                           ; BSR set to: 0
 12731                           
 12732                           ; BSR set to: 0
 12733  011030  0100               	movlb	0	; () banked
 12734  011032  9FBC               	bcf	(___fldiv@b+2)& (0+255),7,b
 12735  011034                     l2965:
 12736                           
 12737                           ; BSR set to: 0
 12738                           
 12739                           ; BSR set to: 0
 12740  011034  0100               	movlb	0	; () banked
 12741  011036  90D8               	bcf	status,0,c
 12742  011038  31D1               	rrcf	___fldiv@bexp& (0+255),w,b
 12743  01103A  0100               	movlb	0	; () banked
 12744  01103C  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12745                           
 12746                           ; BSR set to: 0
 12747  01103E  0100               	movlb	0	; () banked
 12748  011040  51C6               	movf	___fldiv@sign& (0+255),w,b
 12749  011042  0100               	movlb	0	; () banked
 12750  011044  13BD               	iorwf	(___fldiv@b+3)& (0+255),f,b
 12751                           
 12752                           ; BSR set to: 0
 12753  011046  C0BA  F0BA         	movff	___fldiv@b,?___fldiv
 12754  01104A  C0BB  F0BB         	movff	___fldiv@b+1,?___fldiv+1
 12755  01104E  C0BC  F0BC         	movff	___fldiv@b+2,?___fldiv+2
 12756  011052  C0BD  F0BD         	movff	___fldiv@b+3,?___fldiv+3
 12757  011056  0012               	return	
 12758  011058                     __end_of___fldiv:
 12759                           	opt stack 0
 12760                           tblptru	equ	0xFF8
 12761                           tblptrh	equ	0xFF7
 12762                           tblptrl	equ	0xFF6
 12763                           tablat	equ	0xFF5
 12764                           prodh	equ	0xFF4
 12765                           prodl	equ	0xFF3
 12766                           intcon	equ	0xFF2
 12767                           postinc0	equ	0xFEE
 12768                           wreg	equ	0xFE8
 12769                           postdec1	equ	0xFE5
 12770                           fsr1h	equ	0xFE2
 12771                           fsr1l	equ	0xFE1
 12772                           indf2	equ	0xFDF
 12773                           postinc2	equ	0xFDE
 12774                           postdec2	equ	0xFDD
 12775                           fsr2h	equ	0xFDA
 12776                           fsr2l	equ	0xFD9
 12777                           status	equ	0xFD8
 12778                           
 12779 ;; *************** function _init *****************
 12780 ;; Defined at:
 12781 ;;		line 64 in file "main.c"
 12782 ;; Parameters:    Size  Location     Type
 12783 ;;		None
 12784 ;; Auto vars:     Size  Location     Type
 12785 ;;		None
 12786 ;; Return value:  Size  Location     Type
 12787 ;;                  1    wreg      void 
 12788 ;; Registers used:
 12789 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 12790 ;; Tracked objects:
 12791 ;;		On entry : 0/0
 12792 ;;		On exit  : 0/0
 12793 ;;		Unchanged: 0/0
 12794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12798 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12799 ;;Total ram usage:        0 bytes
 12800 ;; Hardware stack levels used:    1
 12801 ;; Hardware stack levels required when called:   17
 12802 ;; This function calls:
 12803 ;;		_ADC_Init
 12804 ;;		_ADC_Start
 12805 ;;		_Console_Init
 12806 ;;		_HMI_Init
 12807 ;;		_ISR_Enable
 12808 ;;		_LCD_Init
 12809 ;;		_MXK_BlockSwitchTo
 12810 ;;		_MXK_Dequeue
 12811 ;;		_MXK_Init
 12812 ;;		_MXK_Release
 12813 ;;		_Motor_Init
 12814 ;;		_delay_ms
 12815 ;;		_eusart_init
 12816 ;;		_irobot_init
 12817 ;;		_irobot_init_song_0
 12818 ;;		_irobot_led_power_on
 12819 ;; This function is called by:
 12820 ;;		_main
 12821 ;; This function uses a non-reentrant model
 12822 ;;
 12823                           
 12824                           	psect	text49
 12825  01473A                     __ptext49:
 12826                           	opt stack 0
 12827  01473A                     _init:
 12828                           	opt stack 13
 12829                           
 12830                           ;main.c: 66: MXK_Init();
 12831                           
 12832                           ; BSR set to: 0
 12833                           ;incstack = 0
 12834  01473A  ECC2  F096         	call	_MXK_Init	;wreg free
 12835                           
 12836                           ;main.c: 69: ISR_Enable();
 12837  01473E  EC2B  F0B3         	call	_ISR_Enable	;wreg free
 12838                           
 12839                           ;main.c: 72: if (MXK_BlockSwitchTo(eMXK_HMI)) {
 12840  014742  0E01               	movlw	1
 12841  014744  EC92  F0AF         	call	_MXK_BlockSwitchTo
 12842  014748  0900               	iorlw	0
 12843  01474A  B4D8               	btfsc	status,2,c
 12844  01474C  D00C               	goto	l2301
 12845                           
 12846                           ;main.c: 73: Console_Init();
 12847  01474E  ECFB  F0A6         	call	_Console_Init	;wreg free
 12848                           
 12849                           ;main.c: 74: HMI_Init();
 12850  014752  ECEF  F08F         	call	_HMI_Init	;wreg free
 12851                           
 12852                           ;main.c: 75: LCD_Init();
 12853  014756  EC82  F097         	call	_LCD_Init	;wreg free
 12854                           
 12855                           ;main.c: 76: if (MXK_Release())
 12856  01475A  EC21  F0B2         	call	_MXK_Release	;wreg free
 12857  01475E  0900               	iorlw	0
 12858  014760  A4D8               	btfss	status,2,c
 12859                           
 12860                           ;main.c: 77: MXK_Dequeue();
 12861  014762  EC73  F0AF         	call	_MXK_Dequeue	;wreg free
 12862  014766                     l2301:
 12863                           
 12864                           ;main.c: 78: }
 12865                           ;main.c: 81: if (MXK_BlockSwitchTo(eMXK_Motor)) {
 12866  014766  0E08               	movlw	8
 12867  014768  EC92  F0AF         	call	_MXK_BlockSwitchTo
 12868  01476C  0900               	iorlw	0
 12869  01476E  B4D8               	btfsc	status,2,c
 12870  014770  D013               	goto	l2303
 12871                           
 12872                           ;main.c: 82: Motor_Init(&Stepper, 0b1000);
 12873  014772  0ECF               	movlw	low _Stepper
 12874  014774  0100               	movlb	0	; () banked
 12875  014776  6FE7               	movwf	Motor_Init@pMotor& (0+255),b
 12876  014778  0E03               	movlw	high _Stepper
 12877  01477A  0100               	movlb	0	; () banked
 12878  01477C  6FE8               	movwf	(Motor_Init@pMotor+1)& (0+255),b
 12879  01477E  0E00               	movlw	0
 12880  014780  0100               	movlb	0	; () banked
 12881  014782  6FEA               	movwf	(Motor_Init@pAddress+1)& (0+255),b
 12882  014784  0E08               	movlw	8
 12883  014786  6FE9               	movwf	Motor_Init@pAddress& (0+255),b
 12884  014788  EC1A  F09E         	call	_Motor_Init	;wreg free
 12885                           
 12886                           ;main.c: 83: if (MXK_Release())
 12887  01478C  EC21  F0B2         	call	_MXK_Release	;wreg free
 12888  014790  0900               	iorlw	0
 12889  014792  A4D8               	btfss	status,2,c
 12890                           
 12891                           ;main.c: 84: MXK_Dequeue();
 12892  014794  EC73  F0AF         	call	_MXK_Dequeue	;wreg free
 12893  014798                     l2303:
 12894                           
 12895                           ;main.c: 85: }
 12896                           ;main.c: 88: ADC_Init(&ADC_AN0, eADC_Ch0);
 12897  014798  0EB1               	movlw	low _ADC_AN0
 12898  01479A  0100               	movlb	0	; () banked
 12899  01479C  6FBE               	movwf	ADC_Init@pInput& (0+255),b
 12900  01479E  0E00               	movlw	high _ADC_AN0
 12901  0147A0  0100               	movlb	0	; () banked
 12902  0147A2  6FBF               	movwf	(ADC_Init@pInput+1)& (0+255),b
 12903  0147A4  0E00               	movlw	0
 12904  0147A6  0100               	movlb	0	; () banked
 12905  0147A8  6FC0               	movwf	ADC_Init@pChannel& (0+255),b
 12906  0147AA  EC87  F0A8         	call	_ADC_Init	;wreg free
 12907                           
 12908                           ;main.c: 89: float ADC_Voltage(ADCPtr plnput);
 12909                           ;main.c: 90: ADC_Start(&ADC_AN0);
 12910  0147AE  0EB1               	movlw	low _ADC_AN0
 12911  0147B0  0100               	movlb	0	; () banked
 12912  0147B2  6FBC               	movwf	ADC_Start@pInput& (0+255),b
 12913  0147B4  0E00               	movlw	high _ADC_AN0
 12914  0147B6  0100               	movlb	0	; () banked
 12915  0147B8  6FBD               	movwf	(ADC_Start@pInput+1)& (0+255),b
 12916  0147BA  EC85  F0A7         	call	_ADC_Start	;wreg free
 12917                           
 12918                           ;main.c: 92: eusart_init();
 12919  0147BE  ECAA  F0B1         	call	_eusart_init	;wreg free
 12920                           
 12921                           ;main.c: 93: irobot_init();
 12922  0147C2  ECEB  F0B2         	call	_irobot_init	;wreg free
 12923                           
 12924                           ;main.c: 95: irobot_led_power_on(0xA);
 12925  0147C6  0E0A               	movlw	10
 12926  0147C8  EC13  F0B2         	call	_irobot_led_power_on
 12927                           
 12928                           ;main.c: 96: irobot_init_song_0();
 12929  0147CC  EC8B  F0B1         	call	_irobot_init_song_0	;wreg free
 12930                           
 12931                           ;main.c: 97: delay_ms(20);
 12932  0147D0  0E00               	movlw	0
 12933  0147D2  0100               	movlb	0	; () banked
 12934  0147D4  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 12935  0147D6  0E14               	movlw	20
 12936  0147D8  6FBA               	movwf	delay_ms@ms& (0+255),b
 12937  0147DA  ECFC  F0AA         	call	_delay_ms	;wreg free
 12938  0147DE  0012               	return		;funcret
 12939  0147E0                     __end_of_init:
 12940                           	opt stack 0
 12941                           tblptru	equ	0xFF8
 12942                           tblptrh	equ	0xFF7
 12943                           tblptrl	equ	0xFF6
 12944                           tablat	equ	0xFF5
 12945                           prodh	equ	0xFF4
 12946                           prodl	equ	0xFF3
 12947                           intcon	equ	0xFF2
 12948                           postinc0	equ	0xFEE
 12949                           wreg	equ	0xFE8
 12950                           postdec1	equ	0xFE5
 12951                           fsr1h	equ	0xFE2
 12952                           fsr1l	equ	0xFE1
 12953                           indf2	equ	0xFDF
 12954                           postinc2	equ	0xFDE
 12955                           postdec2	equ	0xFDD
 12956                           fsr2h	equ	0xFDA
 12957                           fsr2l	equ	0xFD9
 12958                           status	equ	0xFD8
 12959                           
 12960 ;; *************** function _irobot_led_power_on *****************
 12961 ;; Defined at:
 12962 ;;		line 303 in file "Library/iRobotSerial.c"
 12963 ;; Parameters:    Size  Location     Type
 12964 ;;  powerOnColou    1    wreg     unsigned char 
 12965 ;; Auto vars:     Size  Location     Type
 12966 ;;  powerOnColou    1   20[BANK0 ] unsigned char 
 12967 ;; Return value:  Size  Location     Type
 12968 ;;                  1    wreg      void 
 12969 ;; Registers used:
 12970 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 12971 ;; Tracked objects:
 12972 ;;		On entry : 0/0
 12973 ;;		On exit  : 0/0
 12974 ;;		Unchanged: 0/0
 12975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12977 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12979 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12980 ;;Total ram usage:        1 bytes
 12981 ;; Hardware stack levels used:    1
 12982 ;; Hardware stack levels required when called:    9
 12983 ;; This function calls:
 12984 ;;		_irobot_leds
 12985 ;; This function is called by:
 12986 ;;		_init
 12987 ;; This function uses a non-reentrant model
 12988 ;;
 12989                           
 12990                           	psect	text50
 12991  016426                     __ptext50:
 12992                           	opt stack 0
 12993  016426                     _irobot_led_power_on:
 12994                           	opt stack 20
 12995                           
 12996                           ;incstack = 0
 12997                           ;irobot_led_power_on@powerOnColour stored from wreg
 12998  016426  0100               	movlb	0	; () banked
 12999  016428  6FCE               	movwf	irobot_led_power_on@powerOnColour& (0+255),b
 13000                           
 13001                           ;iRobotSerial.c: 304: irobot_leds(0, 0, powerOnColour, iR_CONST_LED_ON);
 13002  01642A  0E00               	movlw	0
 13003  01642C  0100               	movlb	0	; () banked
 13004  01642E  6FCA               	movwf	irobot_leds@LEDBit& (0+255),b
 13005  016430  C0CE  F0CB         	movff	irobot_led_power_on@powerOnColour,irobot_leds@powerColour
 13006  016434  0EFF               	movlw	255
 13007  016436  0100               	movlb	0	; () banked
 13008  016438  6FCC               	movwf	irobot_leds@powerLuminosity& (0+255),b
 13009  01643A  0E00               	movlw	0
 13010  01643C  ECBB  F0AC         	call	_irobot_leds
 13011  016440  0012               	return		;funcret
 13012  016442                     __end_of_irobot_led_power_on:
 13013                           	opt stack 0
 13014                           tblptru	equ	0xFF8
 13015                           tblptrh	equ	0xFF7
 13016                           tblptrl	equ	0xFF6
 13017                           tablat	equ	0xFF5
 13018                           prodh	equ	0xFF4
 13019                           prodl	equ	0xFF3
 13020                           intcon	equ	0xFF2
 13021                           postinc0	equ	0xFEE
 13022                           wreg	equ	0xFE8
 13023                           postdec1	equ	0xFE5
 13024                           fsr1h	equ	0xFE2
 13025                           fsr1l	equ	0xFE1
 13026                           indf2	equ	0xFDF
 13027                           postinc2	equ	0xFDE
 13028                           postdec2	equ	0xFDD
 13029                           fsr2h	equ	0xFDA
 13030                           fsr2l	equ	0xFD9
 13031                           status	equ	0xFD8
 13032                           
 13033 ;; *************** function _irobot_leds *****************
 13034 ;; Defined at:
 13035 ;;		line 238 in file "Library/iRobotSerial.c"
 13036 ;; Parameters:    Size  Location     Type
 13037 ;;  isScript        1    wreg     unsigned char 
 13038 ;;  LEDBit          1   16[BANK0 ] unsigned char 
 13039 ;;  powerColour     1   17[BANK0 ] unsigned char 
 13040 ;;  powerLuminos    1   18[BANK0 ] unsigned char 
 13041 ;; Auto vars:     Size  Location     Type
 13042 ;;  isScript        1   19[BANK0 ] unsigned char 
 13043 ;; Return value:  Size  Location     Type
 13044 ;;                  1    wreg      void 
 13045 ;; Registers used:
 13046 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 13047 ;; Tracked objects:
 13048 ;;		On entry : 0/0
 13049 ;;		On exit  : 0/0
 13050 ;;		Unchanged: 0/0
 13051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13052 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13053 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13055 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13056 ;;Total ram usage:        4 bytes
 13057 ;; Hardware stack levels used:    1
 13058 ;; Hardware stack levels required when called:    8
 13059 ;; This function calls:
 13060 ;;		_eusart_putch
 13061 ;;		_load_iRScriptStack
 13062 ;; This function is called by:
 13063 ;;		_irobot_led_power_on
 13064 ;;		_irobot_led_power_off
 13065 ;; This function uses a non-reentrant model
 13066 ;;
 13067                           
 13068                           	psect	text51
 13069  015976                     __ptext51:
 13070                           	opt stack 0
 13071  015976                     _irobot_leds:
 13072                           	opt stack 20
 13073                           
 13074                           ;incstack = 0
 13075                           ;irobot_leds@isScript stored from wreg
 13076  015976  0100               	movlb	0	; () banked
 13077  015978  6FCD               	movwf	irobot_leds@isScript& (0+255),b
 13078                           
 13079                           ;iRobotSerial.c: 239: if (isScript) {
 13080  01597A  0100               	movlb	0	; () banked
 13081  01597C  51CD               	movf	irobot_leds@isScript& (0+255),w,b
 13082  01597E  0100               	movlb	0	; () banked
 13083  015980  B4D8               	btfsc	status,2,c
 13084  015982  D015               	goto	l2144
 13085                           
 13086                           ; BSR set to: 0
 13087                           ;iRobotSerial.c: 240: load_iRScriptStack(4, iR_LEDS,
 13088                           ;iRobotSerial.c: 241: LEDBit, powerColour, powerLuminosity);
 13089  015984  0E00               	movlw	0
 13090  015986  0100               	movlb	0	; () banked
 13091  015988  6FBB               	movwf	(?_load_iRScriptStack+1)& (0+255),b
 13092  01598A  0E8B               	movlw	139
 13093  01598C  6FBA               	movwf	?_load_iRScriptStack& (0+255),b
 13094  01598E  C0CA  F0BC         	movff	irobot_leds@LEDBit,?_load_iRScriptStack+2
 13095  015992  0100               	movlb	0	; () banked
 13096  015994  6BBD               	clrf	(?_load_iRScriptStack+3)& (0+255),b
 13097  015996  C0CB  F0BE         	movff	irobot_leds@powerColour,?_load_iRScriptStack+4
 13098  01599A  0100               	movlb	0	; () banked
 13099  01599C  6BBF               	clrf	(?_load_iRScriptStack+5)& (0+255),b
 13100  01599E  C0CC  F0C0         	movff	irobot_leds@powerLuminosity,?_load_iRScriptStack+6
 13101  0159A2  0100               	movlb	0	; () banked
 13102  0159A4  6BC1               	clrf	(?_load_iRScriptStack+7)& (0+255),b
 13103  0159A6  0E04               	movlw	4
 13104  0159A8  ECC7  F0AA         	call	_load_iRScriptStack
 13105                           
 13106                           ;iRobotSerial.c: 242: }
 13107  0159AC  0012               	return	
 13108  0159AE                     l2144:
 13109                           
 13110                           ;iRobotSerial.c: 243: else{
 13111                           ;iRobotSerial.c: 244: eusart_putch(iR_LEDS);
 13112  0159AE  0E8B               	movlw	139
 13113  0159B0  ECF2  F0B2         	call	_eusart_putch
 13114                           
 13115                           ;iRobotSerial.c: 245: eusart_putch(LEDBit);
 13116  0159B4  0100               	movlb	0	; () banked
 13117  0159B6  51CA               	movf	irobot_leds@LEDBit& (0+255),w,b
 13118  0159B8  ECF2  F0B2         	call	_eusart_putch
 13119                           
 13120                           ;iRobotSerial.c: 246: eusart_putch(powerColour);
 13121  0159BC  0100               	movlb	0	; () banked
 13122  0159BE  51CB               	movf	irobot_leds@powerColour& (0+255),w,b
 13123  0159C0  ECF2  F0B2         	call	_eusart_putch
 13124                           
 13125                           ;iRobotSerial.c: 247: eusart_putch(powerLuminosity);
 13126  0159C4  0100               	movlb	0	; () banked
 13127  0159C6  51CC               	movf	irobot_leds@powerLuminosity& (0+255),w,b
 13128  0159C8  ECF2  F0B2         	call	_eusart_putch
 13129  0159CC  0012               	return	
 13130  0159CE                     __end_of_irobot_leds:
 13131                           	opt stack 0
 13132                           tblptru	equ	0xFF8
 13133                           tblptrh	equ	0xFF7
 13134                           tblptrl	equ	0xFF6
 13135                           tablat	equ	0xFF5
 13136                           prodh	equ	0xFF4
 13137                           prodl	equ	0xFF3
 13138                           intcon	equ	0xFF2
 13139                           postinc0	equ	0xFEE
 13140                           wreg	equ	0xFE8
 13141                           postdec1	equ	0xFE5
 13142                           fsr1h	equ	0xFE2
 13143                           fsr1l	equ	0xFE1
 13144                           indf2	equ	0xFDF
 13145                           postinc2	equ	0xFDE
 13146                           postdec2	equ	0xFDD
 13147                           fsr2h	equ	0xFDA
 13148                           fsr2l	equ	0xFD9
 13149                           status	equ	0xFD8
 13150                           
 13151 ;; *************** function _load_iRScriptStack *****************
 13152 ;; Defined at:
 13153 ;;		line 175 in file "Library/iRobotSerial.c"
 13154 ;; Parameters:    Size  Location     Type
 13155 ;;  bytesToLoad     1    wreg     unsigned char 
 13156 ;; Auto vars:     Size  Location     Type
 13157 ;;  bytesToLoad     1   14[BANK0 ] unsigned char 
 13158 ;;  i               1   15[BANK0 ] unsigned char 
 13159 ;;  loadByte        2   12[BANK0 ] PTR void [1]
 13160 ;;		 -> ?_load_iRScriptStack(1), 
 13161 ;; Return value:  Size  Location     Type
 13162 ;;                  1    wreg      void 
 13163 ;; Registers used:
 13164 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 13165 ;; Tracked objects:
 13166 ;;		On entry : 0/0
 13167 ;;		On exit  : 0/0
 13168 ;;		Unchanged: 0/0
 13169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13170 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13171 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13172 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13173 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13174 ;;Total ram usage:       16 bytes
 13175 ;; Hardware stack levels used:    1
 13176 ;; Hardware stack levels required when called:    7
 13177 ;; This function calls:
 13178 ;;		Nothing
 13179 ;; This function is called by:
 13180 ;;		_irobot_move
 13181 ;;		_irobot_leds
 13182 ;;		_irobot_angle_wait
 13183 ;;		_irobot_distance_wait
 13184 ;; This function uses a non-reentrant model
 13185 ;;
 13186                           
 13187                           	psect	text52
 13188  01558E                     __ptext52:
 13189                           	opt stack 0
 13190  01558E                     _load_iRScriptStack:
 13191                           	opt stack 19
 13192                           
 13193                           ;incstack = 0
 13194                           ;load_iRScriptStack@bytesToLoad stored from wreg
 13195  01558E  0100               	movlb	0	; () banked
 13196  015590  6FC8               	movwf	load_iRScriptStack@bytesToLoad& (0+255),b
 13197                           
 13198                           ;iRobotSerial.c: 176: va_list loadByte;
 13199                           ;iRobotSerial.c: 177: *loadByte = __va_start();
 13200  015592  0EBA               	movlw	low ?_load_iRScriptStack
 13201  015594  0100               	movlb	0	; () banked
 13202  015596  6FC6               	movwf	load_iRScriptStack@loadByte& (0+255),b
 13203  015598  0E00               	movlw	high ?_load_iRScriptStack
 13204  01559A  0100               	movlb	0	; () banked
 13205  01559C  6FC7               	movwf	(load_iRScriptStack@loadByte+1)& (0+255),b
 13206                           
 13207                           ;iRobotSerial.c: 178: for (UINT8 i = 0; i < bytesToLoad; i++) {
 13208  01559E  0E00               	movlw	0
 13209  0155A0  0100               	movlb	0	; () banked
 13210  0155A2  6FC9               	movwf	load_iRScriptStack@i& (0+255),b
 13211  0155A4  D01F               	goto	l2118
 13212  0155A6                     
 13213                           ; BSR set to: 0
 13214                           ;iRobotSerial.c: 179: iRScriptStack[iRScriptIndex + i] = (*(int *)__va_arg((*(int **)loa
      +                          dByte), (int)0));
 13215                           
 13216                           ; BSR set to: 0
 13217  0155A6  C0C6  FFD9         	movff	load_iRScriptStack@loadByte,fsr2l
 13218  0155AA  C0C7  FFDA         	movff	load_iRScriptStack@loadByte+1,fsr2h
 13219  0155AE  0100               	movlb	0	; () banked
 13220  0155B0  51C9               	movf	load_iRScriptStack@i& (0+255),w,b
 13221  0155B2  C037  F0C4         	movff	_iRScriptIndex,??_load_iRScriptStack
 13222  0155B6  0100               	movlb	0	; () banked
 13223  0155B8  6BC5               	clrf	(??_load_iRScriptStack+1)& (0+255),b
 13224  0155BA  0100               	movlb	0	; () banked
 13225  0155BC  27C4               	addwf	??_load_iRScriptStack& (0+255),f,b
 13226  0155BE  0E00               	movlw	0
 13227  0155C0  23C5               	addwfc	(??_load_iRScriptStack+1)& (0+255),f,b
 13228  0155C2  0E00               	movlw	low _iRScriptStack
 13229  0155C4  0100               	movlb	0	; () banked
 13230  0155C6  25C4               	addwf	??_load_iRScriptStack& (0+255),w,b
 13231  0155C8  6EE1               	movwf	fsr1l,c
 13232  0155CA  0E04               	movlw	high _iRScriptStack
 13233  0155CC  0100               	movlb	0	; () banked
 13234  0155CE  21C5               	addwfc	(??_load_iRScriptStack+1)& (0+255),w,b
 13235  0155D0  6EE2               	movwf	fsr1h,c
 13236  0155D2  CFDF FFE7          	movff	indf2,indf1
 13237                           
 13238                           ; BSR set to: 0
 13239  0155D6  0E02               	movlw	2
 13240  0155D8  0100               	movlb	0	; () banked
 13241  0155DA  27C6               	addwf	load_iRScriptStack@loadByte& (0+255),f,b
 13242  0155DC  0E00               	movlw	0
 13243  0155DE  23C7               	addwfc	(load_iRScriptStack@loadByte+1)& (0+255),f,b
 13244                           
 13245                           ; BSR set to: 0
 13246  0155E0  0100               	movlb	0	; () banked
 13247  0155E2  2BC9               	incf	load_iRScriptStack@i& (0+255),f,b
 13248  0155E4                     l2118:
 13249                           
 13250                           ; BSR set to: 0
 13251                           
 13252                           ; BSR set to: 0
 13253  0155E4  0100               	movlb	0	; () banked
 13254  0155E6  51C8               	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
 13255  0155E8  0100               	movlb	0	; () banked
 13256  0155EA  5DC9               	subwf	load_iRScriptStack@i& (0+255),w,b
 13257  0155EC  A0D8               	btfss	status,0,c
 13258  0155EE  D7DB               	goto	l2119
 13259                           
 13260                           ; BSR set to: 0
 13261                           ;iRobotSerial.c: 180: }
 13262                           ;iRobotSerial.c: 181: ;
 13263                           ;iRobotSerial.c: 182: iRScriptIndex += bytesToLoad;
 13264                           
 13265                           ; BSR set to: 0
 13266  0155F0  0100               	movlb	0	; () banked
 13267  0155F2  51C8               	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
 13268  0155F4  2637               	addwf	_iRScriptIndex,f,c
 13269                           
 13270                           ; BSR set to: 0
 13271  0155F6  0012               	return		;funcret
 13272  0155F8                     __end_of_load_iRScriptStack:
 13273                           	opt stack 0
 13274                           tblptru	equ	0xFF8
 13275                           tblptrh	equ	0xFF7
 13276                           tblptrl	equ	0xFF6
 13277                           tablat	equ	0xFF5
 13278                           prodh	equ	0xFF4
 13279                           prodl	equ	0xFF3
 13280                           intcon	equ	0xFF2
 13281                           postinc0	equ	0xFEE
 13282                           wreg	equ	0xFE8
 13283                           indf1	equ	0xFE7
 13284                           postdec1	equ	0xFE5
 13285                           fsr1h	equ	0xFE2
 13286                           fsr1l	equ	0xFE1
 13287                           indf2	equ	0xFDF
 13288                           postinc2	equ	0xFDE
 13289                           postdec2	equ	0xFDD
 13290                           fsr2h	equ	0xFDA
 13291                           fsr2l	equ	0xFD9
 13292                           status	equ	0xFD8
 13293                           
 13294 ;; *************** function _irobot_init_song_0 *****************
 13295 ;; Defined at:
 13296 ;;		line 251 in file "Library/iRobotSerial.c"
 13297 ;; Parameters:    Size  Location     Type
 13298 ;;		None
 13299 ;; Auto vars:     Size  Location     Type
 13300 ;;		None
 13301 ;; Return value:  Size  Location     Type
 13302 ;;                  1    wreg      void 
 13303 ;; Registers used:
 13304 ;;		wreg, cstack
 13305 ;; Tracked objects:
 13306 ;;		On entry : 0/0
 13307 ;;		On exit  : 0/0
 13308 ;;		Unchanged: 0/0
 13309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13313 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13314 ;;Total ram usage:        0 bytes
 13315 ;; Hardware stack levels used:    1
 13316 ;; Hardware stack levels required when called:    8
 13317 ;; This function calls:
 13318 ;;		_eusart_putch
 13319 ;; This function is called by:
 13320 ;;		_init
 13321 ;; This function uses a non-reentrant model
 13322 ;;
 13323                           
 13324                           	psect	text53
 13325  016316                     __ptext53:
 13326                           	opt stack 0
 13327  016316                     _irobot_init_song_0:
 13328                           	opt stack 21
 13329                           
 13330                           ;iRobotSerial.c: 252: eusart_putch(iR_SONG_INIT);
 13331                           
 13332                           ; BSR set to: 0
 13333                           ;incstack = 0
 13334  016316  0E8C               	movlw	140
 13335  016318  ECF2  F0B2         	call	_eusart_putch
 13336                           
 13337                           ;iRobotSerial.c: 253: eusart_putch(0);
 13338  01631C  0E00               	movlw	0
 13339  01631E  ECF2  F0B2         	call	_eusart_putch
 13340                           
 13341                           ;iRobotSerial.c: 254: eusart_putch(1);
 13342  016322  0E01               	movlw	1
 13343  016324  ECF2  F0B2         	call	_eusart_putch
 13344                           
 13345                           ;iRobotSerial.c: 255: eusart_putch(60);
 13346  016328  0E3C               	movlw	60
 13347  01632A  ECF2  F0B2         	call	_eusart_putch
 13348                           
 13349                           ;iRobotSerial.c: 256: eusart_putch(4);
 13350  01632E  0E04               	movlw	4
 13351  016330  ECF2  F0B2         	call	_eusart_putch
 13352  016334  0012               	return		;funcret
 13353  016336                     __end_of_irobot_init_song_0:
 13354                           	opt stack 0
 13355                           tblptru	equ	0xFF8
 13356                           tblptrh	equ	0xFF7
 13357                           tblptrl	equ	0xFF6
 13358                           tablat	equ	0xFF5
 13359                           prodh	equ	0xFF4
 13360                           prodl	equ	0xFF3
 13361                           intcon	equ	0xFF2
 13362                           postinc0	equ	0xFEE
 13363                           wreg	equ	0xFE8
 13364                           indf1	equ	0xFE7
 13365                           postdec1	equ	0xFE5
 13366                           fsr1h	equ	0xFE2
 13367                           fsr1l	equ	0xFE1
 13368                           indf2	equ	0xFDF
 13369                           postinc2	equ	0xFDE
 13370                           postdec2	equ	0xFDD
 13371                           fsr2h	equ	0xFDA
 13372                           fsr2l	equ	0xFD9
 13373                           status	equ	0xFD8
 13374                           
 13375 ;; *************** function _irobot_init *****************
 13376 ;; Defined at:
 13377 ;;		line 197 in file "Library/iRobotSerial.c"
 13378 ;; Parameters:    Size  Location     Type
 13379 ;;		None
 13380 ;; Auto vars:     Size  Location     Type
 13381 ;;		None
 13382 ;; Return value:  Size  Location     Type
 13383 ;;                  1    wreg      void 
 13384 ;; Registers used:
 13385 ;;		wreg, cstack
 13386 ;; Tracked objects:
 13387 ;;		On entry : 0/0
 13388 ;;		On exit  : 0/0
 13389 ;;		Unchanged: 0/0
 13390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13394 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13395 ;;Total ram usage:        0 bytes
 13396 ;; Hardware stack levels used:    1
 13397 ;; Hardware stack levels required when called:    8
 13398 ;; This function calls:
 13399 ;;		_eusart_putch
 13400 ;; This function is called by:
 13401 ;;		_init
 13402 ;; This function uses a non-reentrant model
 13403 ;;
 13404                           
 13405                           	psect	text54
 13406  0165D6                     __ptext54:
 13407                           	opt stack 0
 13408  0165D6                     _irobot_init:
 13409                           	opt stack 21
 13410                           
 13411                           ;iRobotSerial.c: 198: eusart_putch(iR_START);
 13412                           
 13413                           ;incstack = 0
 13414  0165D6  0E80               	movlw	128
 13415  0165D8  ECF2  F0B2         	call	_eusart_putch
 13416                           
 13417                           ;iRobotSerial.c: 199: eusart_putch(iR_FULL_MODE);
 13418  0165DC  0E84               	movlw	132
 13419  0165DE  ECF2  F0B2         	call	_eusart_putch
 13420  0165E2  0012               	return		;funcret
 13421  0165E4                     __end_of_irobot_init:
 13422                           	opt stack 0
 13423                           tblptru	equ	0xFF8
 13424                           tblptrh	equ	0xFF7
 13425                           tblptrl	equ	0xFF6
 13426                           tablat	equ	0xFF5
 13427                           prodh	equ	0xFF4
 13428                           prodl	equ	0xFF3
 13429                           intcon	equ	0xFF2
 13430                           postinc0	equ	0xFEE
 13431                           wreg	equ	0xFE8
 13432                           indf1	equ	0xFE7
 13433                           postdec1	equ	0xFE5
 13434                           fsr1h	equ	0xFE2
 13435                           fsr1l	equ	0xFE1
 13436                           indf2	equ	0xFDF
 13437                           postinc2	equ	0xFDE
 13438                           postdec2	equ	0xFDD
 13439                           fsr2h	equ	0xFDA
 13440                           fsr2l	equ	0xFD9
 13441                           status	equ	0xFD8
 13442                           
 13443 ;; *************** function _eusart_putch *****************
 13444 ;; Defined at:
 13445 ;;		line 120 in file "Library/iRobotSerial.c"
 13446 ;; Parameters:    Size  Location     Type
 13447 ;;  eusartSendCh    1    wreg     unsigned char 
 13448 ;; Auto vars:     Size  Location     Type
 13449 ;;  eusartSendCh    1    0[BANK0 ] unsigned char 
 13450 ;; Return value:  Size  Location     Type
 13451 ;;                  1    wreg      void 
 13452 ;; Registers used:
 13453 ;;		wreg
 13454 ;; Tracked objects:
 13455 ;;		On entry : 0/0
 13456 ;;		On exit  : 0/0
 13457 ;;		Unchanged: 0/0
 13458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13460 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13462 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13463 ;;Total ram usage:        1 bytes
 13464 ;; Hardware stack levels used:    1
 13465 ;; Hardware stack levels required when called:    7
 13466 ;; This function calls:
 13467 ;;		Nothing
 13468 ;; This function is called by:
 13469 ;;		_irobot_query_and_update
 13470 ;;		_irobot_init
 13471 ;;		_irobot_move
 13472 ;;		_irobot_leds
 13473 ;;		_irobot_init_song_0
 13474 ;;		_irobot_song_play
 13475 ;;		_irobot_script_play
 13476 ;; This function uses a non-reentrant model
 13477 ;;
 13478                           
 13479                           	psect	text55
 13480  0165E4                     __ptext55:
 13481                           	opt stack 0
 13482  0165E4                     _eusart_putch:
 13483                           	opt stack 20
 13484                           
 13485                           ;incstack = 0
 13486                           ;eusart_putch@eusartSendChar stored from wreg
 13487  0165E4  0100               	movlb	0	; () banked
 13488  0165E6  6FBA               	movwf	eusart_putch@eusartSendChar& (0+255),b
 13489  0165E8                     
 13490                           ;iRobotSerial.c: 121: while (!TXSTA1bits.TRMT) {};
 13491  0165E8  A2AD               	btfss	4013,1,c	;volatile
 13492  0165EA  D7FE               	goto	l12635
 13493                           
 13494                           ;iRobotSerial.c: 122: TXREG1 = eusartSendChar;
 13495  0165EC  C0BA  FFAE         	movff	eusart_putch@eusartSendChar,4014	;volatile
 13496  0165F0  0012               	return		;funcret
 13497  0165F2                     __end_of_eusart_putch:
 13498                           	opt stack 0
 13499                           tblptru	equ	0xFF8
 13500                           tblptrh	equ	0xFF7
 13501                           tblptrl	equ	0xFF6
 13502                           tablat	equ	0xFF5
 13503                           prodh	equ	0xFF4
 13504                           prodl	equ	0xFF3
 13505                           intcon	equ	0xFF2
 13506                           postinc0	equ	0xFEE
 13507                           wreg	equ	0xFE8
 13508                           indf1	equ	0xFE7
 13509                           postdec1	equ	0xFE5
 13510                           fsr1h	equ	0xFE2
 13511                           fsr1l	equ	0xFE1
 13512                           indf2	equ	0xFDF
 13513                           postinc2	equ	0xFDE
 13514                           postdec2	equ	0xFDD
 13515                           fsr2h	equ	0xFDA
 13516                           fsr2l	equ	0xFD9
 13517                           status	equ	0xFD8
 13518                           
 13519 ;; *************** function _eusart_init *****************
 13520 ;; Defined at:
 13521 ;;		line 103 in file "Library/iRobotSerial.c"
 13522 ;; Parameters:    Size  Location     Type
 13523 ;;		None
 13524 ;; Auto vars:     Size  Location     Type
 13525 ;;		None
 13526 ;; Return value:  Size  Location     Type
 13527 ;;                  1    wreg      void 
 13528 ;; Registers used:
 13529 ;;		wreg, status,2
 13530 ;; Tracked objects:
 13531 ;;		On entry : 0/0
 13532 ;;		On exit  : 0/0
 13533 ;;		Unchanged: 0/0
 13534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13538 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13539 ;;Total ram usage:        0 bytes
 13540 ;; Hardware stack levels used:    1
 13541 ;; Hardware stack levels required when called:    7
 13542 ;; This function calls:
 13543 ;;		Nothing
 13544 ;; This function is called by:
 13545 ;;		_init
 13546 ;; This function uses a non-reentrant model
 13547 ;;
 13548                           
 13549                           	psect	text56
 13550  016354                     __ptext56:
 13551                           	opt stack 0
 13552  016354                     _eusart_init:
 13553                           	opt stack 22
 13554                           
 13555                           ;iRobotSerial.c: 104: TRISCbits.TRISC6 = 0;
 13556                           
 13557                           ;incstack = 0
 13558  016354  9C94               	bcf	3988,6,c	;volatile
 13559                           
 13560                           ;iRobotSerial.c: 105: TRISCbits.TRISC7 = 1;
 13561  016356  8E94               	bsf	3988,7,c	;volatile
 13562                           
 13563                           ;iRobotSerial.c: 107: TXSTA1 = 0b00100100;
 13564  016358  0E24               	movlw	36
 13565  01635A  6EAD               	movwf	4013,c	;volatile
 13566                           
 13567                           ;iRobotSerial.c: 108: RCSTA1 = 0b10011000;
 13568  01635C  0E98               	movlw	152
 13569  01635E  6EAC               	movwf	4012,c	;volatile
 13570                           
 13571                           ;iRobotSerial.c: 110: BAUDCON1bits.DTRXP = 0;
 13572  016360  9A7E               	bcf	3966,5,c	;volatile
 13573                           
 13574                           ;iRobotSerial.c: 111: BAUDCON1bits.SCKP = 0;
 13575  016362  987E               	bcf	3966,4,c	;volatile
 13576                           
 13577                           ;iRobotSerial.c: 112: BAUDCON1bits.WUE = 0;
 13578  016364  927E               	bcf	3966,1,c	;volatile
 13579                           
 13580                           ;iRobotSerial.c: 113: BAUDCON1bits.ABDEN = 0;
 13581  016366  907E               	bcf	3966,0,c	;volatile
 13582                           
 13583                           ;iRobotSerial.c: 115: TXSTA1bits.BRGH = 1;
 13584  016368  84AD               	bsf	4013,2,c	;volatile
 13585                           
 13586                           ;iRobotSerial.c: 116: BAUDCON1bits.BRG16 = 0;
 13587  01636A  967E               	bcf	3966,3,c	;volatile
 13588                           
 13589                           ;iRobotSerial.c: 117: SPBRG1 = 51;
 13590  01636C  0E33               	movlw	51
 13591  01636E  6EB0               	movwf	4016,c	;volatile
 13592  016370  0012               	return		;funcret
 13593  016372                     __end_of_eusart_init:
 13594                           	opt stack 0
 13595                           tblptru	equ	0xFF8
 13596                           tblptrh	equ	0xFF7
 13597                           tblptrl	equ	0xFF6
 13598                           tablat	equ	0xFF5
 13599                           prodh	equ	0xFF4
 13600                           prodl	equ	0xFF3
 13601                           intcon	equ	0xFF2
 13602                           postinc0	equ	0xFEE
 13603                           wreg	equ	0xFE8
 13604                           indf1	equ	0xFE7
 13605                           postdec1	equ	0xFE5
 13606                           fsr1h	equ	0xFE2
 13607                           fsr1l	equ	0xFE1
 13608                           indf2	equ	0xFDF
 13609                           postinc2	equ	0xFDE
 13610                           postdec2	equ	0xFDD
 13611                           fsr2h	equ	0xFDA
 13612                           fsr2l	equ	0xFD9
 13613                           status	equ	0xFD8
 13614                           
 13615 ;; *************** function _Motor_Init *****************
 13616 ;; Defined at:
 13617 ;;		line 26 in file "Library/Motor.c"
 13618 ;; Parameters:    Size  Location     Type
 13619 ;;  pMotor          2   45[BANK0 ] PTR struct Motor
 13620 ;;		 -> Stepper(6), 
 13621 ;;  pAddress        2   47[BANK0 ] unsigned short 
 13622 ;; Auto vars:     Size  Location     Type
 13623 ;;		None
 13624 ;; Return value:  Size  Location     Type
 13625 ;;                  1    wreg      void 
 13626 ;; Registers used:
 13627 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13628 ;; Tracked objects:
 13629 ;;		On entry : 0/0
 13630 ;;		On exit  : 0/0
 13631 ;;		Unchanged: 0/0
 13632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13633 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13634 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13636 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13637 ;;Total ram usage:        4 bytes
 13638 ;; Hardware stack levels used:    1
 13639 ;; Hardware stack levels required when called:   12
 13640 ;; This function calls:
 13641 ;;		_Port_SetPin
 13642 ;;		_Port_SetPinType
 13643 ;;		_Timer0_Init
 13644 ;; This function is called by:
 13645 ;;		_init
 13646 ;; This function uses a non-reentrant model
 13647 ;;
 13648                           
 13649                           	psect	text57
 13650  013C34                     __ptext57:
 13651                           	opt stack 0
 13652  013C34                     _Motor_Init:
 13653                           	opt stack 17
 13654                           
 13655                           ;Motor.c: 28: pMotor->mDelta = 0;
 13656                           
 13657                           ;incstack = 0
 13658  013C34  C0E7  FFD9         	movff	Motor_Init@pMotor,fsr2l
 13659  013C38  C0E8  FFDA         	movff	Motor_Init@pMotor+1,fsr2h
 13660  013C3C  0E00               	movlw	0
 13661  013C3E  6EDE               	movwf	postinc2,c
 13662  013C40  0E00               	movlw	0
 13663  013C42  6EDD               	movwf	postdec2,c
 13664                           
 13665                           ;Motor.c: 29: pMotor->mFrequency = 0;
 13666  013C44  0100               	movlb	0	; () banked
 13667  013C46  EE20 F002          	lfsr	2,2
 13668  013C4A  51E7               	movf	Motor_Init@pMotor& (0+255),w,b
 13669  013C4C  26D9               	addwf	fsr2l,f,c
 13670  013C4E  51E8               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 13671  013C50  22DA               	addwfc	fsr2h,f,c
 13672  013C52  0E00               	movlw	0
 13673  013C54  6EDE               	movwf	postinc2,c
 13674  013C56  0E00               	movlw	0
 13675  013C58  6EDD               	movwf	postdec2,c
 13676                           
 13677                           ; BSR set to: 0
 13678                           ;Motor.c: 30: pMotor->mAddress = pAddress;
 13679  013C5A  0100               	movlb	0	; () banked
 13680  013C5C  EE20 F004          	lfsr	2,4
 13681  013C60  51E7               	movf	Motor_Init@pMotor& (0+255),w,b
 13682  013C62  26D9               	addwf	fsr2l,f,c
 13683  013C64  51E8               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 13684  013C66  22DA               	addwfc	fsr2h,f,c
 13685  013C68  C0E9  FFDE         	movff	Motor_Init@pAddress,postinc2
 13686  013C6C  C0EA  FFDD         	movff	Motor_Init@pAddress+1,postdec2
 13687                           
 13688                           ; BSR set to: 0
 13689                           ;Motor.c: 33: Port_SetPinType (&PortE, eP0, eTypeOutputPushPull);
 13690  013C70  0E93               	movlw	low _PortE
 13691  013C72  0100               	movlb	0	; () banked
 13692  013C74  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 13693  013C76  0E00               	movlw	high _PortE
 13694  013C78  0100               	movlb	0	; () banked
 13695  013C7A  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13696  013C7C  0E00               	movlw	0
 13697  013C7E  0100               	movlb	0	; () banked
 13698  013C80  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 13699  013C82  0E03               	movlw	3
 13700  013C84  0100               	movlb	0	; () banked
 13701  013C86  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 13702  013C88  ECB4  F092         	call	_Port_SetPinType	;wreg free
 13703                           
 13704                           ;Motor.c: 34: Port_SetPinType (&PortE, eP1, eTypeOutputPushPull);
 13705  013C8C  0E93               	movlw	low _PortE
 13706  013C8E  0100               	movlb	0	; () banked
 13707  013C90  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 13708  013C92  0E00               	movlw	high _PortE
 13709  013C94  0100               	movlb	0	; () banked
 13710  013C96  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13711  013C98  0E01               	movlw	1
 13712  013C9A  0100               	movlb	0	; () banked
 13713  013C9C  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 13714  013C9E  0E03               	movlw	3
 13715  013CA0  0100               	movlb	0	; () banked
 13716  013CA2  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 13717  013CA4  ECB4  F092         	call	_Port_SetPinType	;wreg free
 13718                           
 13719                           ;Motor.c: 35: Port_SetPin (&PortE, eP0, 0);
 13720  013CA8  0E93               	movlw	low _PortE
 13721  013CAA  0100               	movlb	0	; () banked
 13722  013CAC  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 13723  013CAE  0E00               	movlw	high _PortE
 13724  013CB0  0100               	movlb	0	; () banked
 13725  013CB2  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 13726  013CB4  0E00               	movlw	0
 13727  013CB6  0100               	movlb	0	; () banked
 13728  013CB8  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 13729  013CBA  0E00               	movlw	0
 13730  013CBC  0100               	movlb	0	; () banked
 13731  013CBE  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 13732  013CC0  EC57  F09F         	call	_Port_SetPin	;wreg free
 13733                           
 13734                           ;Motor.c: 36: Port_SetPin (&PortE, eP1, 0);
 13735  013CC4  0E93               	movlw	low _PortE
 13736  013CC6  0100               	movlb	0	; () banked
 13737  013CC8  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 13738  013CCA  0E00               	movlw	high _PortE
 13739  013CCC  0100               	movlb	0	; () banked
 13740  013CCE  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 13741  013CD0  0E01               	movlw	1
 13742  013CD2  0100               	movlb	0	; () banked
 13743  013CD4  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 13744  013CD6  0E00               	movlw	0
 13745  013CD8  0100               	movlb	0	; () banked
 13746  013CDA  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 13747  013CDC  EC57  F09F         	call	_Port_SetPin	;wreg free
 13748                           
 13749                           ;Motor.c: 38: lStepFunction = Motor_Step;
 13750  013CE0  0E9C               	movlw	low _Motor_Step
 13751  013CE2  0100               	movlb	0	; () banked
 13752  013CE4  6F66               	movwf	_lStepFunction& (0+255),b
 13753  013CE6  0E34               	movlw	high _Motor_Step
 13754  013CE8  0100               	movlb	0	; () banked
 13755  013CEA  6F67               	movwf	(_lStepFunction+1)& (0+255),b
 13756  013CEC  0E01               	movlw	low (_Motor_Step shr (0+16))
 13757  013CEE  0100               	movlb	0	; () banked
 13758  013CF0  6F68               	movwf	(_lStepFunction+2)& (0+255),b
 13759                           
 13760                           ; BSR set to: 0
 13761                           ;Motor.c: 39: Timer0_Init(1000);
 13762  013CF2  0EE8               	movlw	232
 13763  013CF4  0100               	movlb	0	; () banked
 13764  013CF6  6FC7               	movwf	Timer0_Init@pFrequency& (0+255),b
 13765  013CF8  0E03               	movlw	3
 13766  013CFA  6FC8               	movwf	(Timer0_Init@pFrequency+1)& (0+255),b
 13767  013CFC  0E00               	movlw	0
 13768  013CFE  6FC9               	movwf	(Timer0_Init@pFrequency+2)& (0+255),b
 13769  013D00  0E00               	movlw	0
 13770  013D02  6FCA               	movwf	(Timer0_Init@pFrequency+3)& (0+255),b
 13771  013D04  ECEE  F098         	call	_Timer0_Init	;wreg free
 13772  013D08  0012               	return		;funcret
 13773  013D0A                     __end_of_Motor_Init:
 13774                           	opt stack 0
 13775                           tblptru	equ	0xFF8
 13776                           tblptrh	equ	0xFF7
 13777                           tblptrl	equ	0xFF6
 13778                           tablat	equ	0xFF5
 13779                           prodh	equ	0xFF4
 13780                           prodl	equ	0xFF3
 13781                           intcon	equ	0xFF2
 13782                           postinc0	equ	0xFEE
 13783                           wreg	equ	0xFE8
 13784                           indf1	equ	0xFE7
 13785                           postdec1	equ	0xFE5
 13786                           fsr1h	equ	0xFE2
 13787                           fsr1l	equ	0xFE1
 13788                           indf2	equ	0xFDF
 13789                           postinc2	equ	0xFDE
 13790                           postdec2	equ	0xFDD
 13791                           fsr2h	equ	0xFDA
 13792                           fsr2l	equ	0xFD9
 13793                           status	equ	0xFD8
 13794                           
 13795 ;; *************** function _Timer0_Init *****************
 13796 ;; Defined at:
 13797 ;;		line 25 in file "Library/Timer0.c"
 13798 ;; Parameters:    Size  Location     Type
 13799 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 13800 ;; Auto vars:     Size  Location     Type
 13801 ;;  DIVIDE          4   23[BANK0 ] unsigned long 
 13802 ;;  pCPUClock       4   19[BANK0 ] unsigned long 
 13803 ;; Return value:  Size  Location     Type
 13804 ;;                  1    wreg      void 
 13805 ;; Registers used:
 13806 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13807 ;; Tracked objects:
 13808 ;;		On entry : 0/0
 13809 ;;		On exit  : 0/0
 13810 ;;		Unchanged: 0/0
 13811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13812 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13813 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13814 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13815 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13816 ;;Total ram usage:       14 bytes
 13817 ;; Hardware stack levels used:    1
 13818 ;; Hardware stack levels required when called:    8
 13819 ;; This function calls:
 13820 ;;		_Timer0_Clear
 13821 ;;		___lldiv
 13822 ;; This function is called by:
 13823 ;;		_Motor_Init
 13824 ;;		_Motor_Speed
 13825 ;; This function uses a non-reentrant model
 13826 ;;
 13827                           
 13828                           	psect	text58
 13829  0131DC                     __ptext58:
 13830                           	opt stack 0
 13831  0131DC                     _Timer0_Init:
 13832                           	opt stack 19
 13833                           
 13834                           ;Timer0.c: 27: UINT32 pCPUClock = (48*1000000L)/8;
 13835                           
 13836                           ;incstack = 0
 13837  0131DC  0E80               	movlw	128
 13838  0131DE  0100               	movlb	0	; () banked
 13839  0131E0  6FCD               	movwf	Timer0_Init@pCPUClock& (0+255),b
 13840  0131E2  0E8D               	movlw	141
 13841  0131E4  6FCE               	movwf	(Timer0_Init@pCPUClock+1)& (0+255),b
 13842  0131E6  0E5B               	movlw	91
 13843  0131E8  6FCF               	movwf	(Timer0_Init@pCPUClock+2)& (0+255),b
 13844  0131EA  0E00               	movlw	0
 13845  0131EC  6FD0               	movwf	(Timer0_Init@pCPUClock+3)& (0+255),b
 13846                           
 13847                           ; BSR set to: 0
 13848                           ;Timer0.c: 29: static const UINT16 PRESCALE[] = {2, 4, 8, 16, 32, 64 ,128, 256};
 13849                           ;Timer0.c: 31: static UINT8 PRE = 0;
 13850                           ;Timer0.c: 32: static UINT32 DIV = 0;
 13851                           ;Timer0.c: 34: UINT32 DIVIDE;
 13852                           ;Timer0.c: 37: T0CONbits.TMR0ON = 0;
 13853  0131EE  9ED5               	bcf	4053,7,c	;volatile
 13854                           
 13855                           ; BSR set to: 0
 13856                           ;Timer0.c: 38: if (pFrequency == 0)
 13857  0131F0  0100               	movlb	0	; () banked
 13858  0131F2  51C7               	movf	Timer0_Init@pFrequency& (0+255),w,b
 13859  0131F4  0100               	movlb	0	; () banked
 13860  0131F6  11C8               	iorwf	(Timer0_Init@pFrequency+1)& (0+255),w,b
 13861  0131F8  0100               	movlb	0	; () banked
 13862  0131FA  11C9               	iorwf	(Timer0_Init@pFrequency+2)& (0+255),w,b
 13863  0131FC  0100               	movlb	0	; () banked
 13864  0131FE  11CA               	iorwf	(Timer0_Init@pFrequency+3)& (0+255),w,b
 13865  013200  B4D8               	btfsc	status,2,c
 13866  013202  0012               	return	
 13867                           
 13868                           ; BSR set to: 0
 13869                           ;Timer0.c: 41: T0CONbits.PSA = 0;
 13870                           
 13871                           ; BSR set to: 0
 13872                           ;Timer0.c: 39: return;
 13873  013204  96D5               	bcf	4053,3,c	;volatile
 13874                           
 13875                           ;Timer0.c: 42: T0CONbits.T08BIT = 0;
 13876  013206  9CD5               	bcf	4053,6,c	;volatile
 13877                           
 13878                           ;Timer0.c: 43: T0CONbits.T0CS = 0;
 13879  013208  9AD5               	bcf	4053,5,c	;volatile
 13880                           
 13881                           ;Timer0.c: 44: T0CONbits.T0SE = 0;
 13882  01320A  98D5               	bcf	4053,4,c	;volatile
 13883                           
 13884                           ; BSR set to: 0
 13885                           ;Timer0.c: 46: DIVIDE = pCPUClock / pFrequency;
 13886  01320C  C0CD  F0BA         	movff	Timer0_Init@pCPUClock,___lldiv@dividend
 13887  013210  C0CE  F0BB         	movff	Timer0_Init@pCPUClock+1,___lldiv@dividend+1
 13888  013214  C0CF  F0BC         	movff	Timer0_Init@pCPUClock+2,___lldiv@dividend+2
 13889  013218  C0D0  F0BD         	movff	Timer0_Init@pCPUClock+3,___lldiv@dividend+3
 13890  01321C  C0C7  F0BE         	movff	Timer0_Init@pFrequency,___lldiv@divisor
 13891  013220  C0C8  F0BF         	movff	Timer0_Init@pFrequency+1,___lldiv@divisor+1
 13892  013224  C0C9  F0C0         	movff	Timer0_Init@pFrequency+2,___lldiv@divisor+2
 13893  013228  C0CA  F0C1         	movff	Timer0_Init@pFrequency+3,___lldiv@divisor+3
 13894  01322C  ECD9  F0A0         	call	___lldiv	;wreg free
 13895  013230  C0BA  F0D1         	movff	?___lldiv,Timer0_Init@DIVIDE
 13896  013234  C0BB  F0D2         	movff	?___lldiv+1,Timer0_Init@DIVIDE+1
 13897  013238  C0BC  F0D3         	movff	?___lldiv+2,Timer0_Init@DIVIDE+2
 13898  01323C  C0BD  F0D4         	movff	?___lldiv+3,Timer0_Init@DIVIDE+3
 13899                           
 13900                           ;Timer0.c: 49: while ((DIVIDE/PRESCALE[INDEX]) > 0xFFFF)
 13901  013240  D00C               	goto	l1787
 13902  013242                     l13465:
 13903                           
 13904                           ;Timer0.c: 50: {
 13905                           ;Timer0.c: 51: INDEX ++;
 13906  013242  0100               	movlb	0	; () banked
 13907  013244  2B8F               	incf	_INDEX& (0+255),f,b
 13908                           
 13909                           ; BSR set to: 0
 13910                           ;Timer0.c: 52: if (INDEX >= 3)
 13911  013246  0E02               	movlw	2
 13912  013248  0100               	movlb	0	; () banked
 13913  01324A  658F               	cpfsgt	_INDEX& (0+255),b
 13914  01324C  D001               	goto	l1785
 13915  01324E  D02F               	goto	u9940
 13916  013250                     l1785:
 13917                           
 13918                           ; BSR set to: 0
 13919                           ;Timer0.c: 56: if (INDEX >= 8)
 13920                           
 13921                           ; BSR set to: 0
 13922  013250  0E07               	movlw	7
 13923  013252  0100               	movlb	0	; () banked
 13924  013254  658F               	cpfsgt	_INDEX& (0+255),b
 13925  013256  D001               	goto	l1787
 13926  013258  0012               	return	
 13927  01325A                     l1787:
 13928                           
 13929                           ; BSR set to: 0
 13930                           
 13931                           ; BSR set to: 0
 13932  01325A  C0D1  F0BA         	movff	Timer0_Init@DIVIDE,___lldiv@dividend
 13933  01325E  C0D2  F0BB         	movff	Timer0_Init@DIVIDE+1,___lldiv@dividend+1
 13934  013262  C0D3  F0BC         	movff	Timer0_Init@DIVIDE+2,___lldiv@dividend+2
 13935  013266  C0D4  F0BD         	movff	Timer0_Init@DIVIDE+3,___lldiv@dividend+3
 13936  01326A  0100               	movlb	0	; () banked
 13937  01326C  518F               	movf	_INDEX& (0+255),w,b
 13938  01326E  0D02               	mullw	2
 13939  013270  0EE5               	movlw	low Timer0_Init@PRESCALE
 13940  013272  24F3               	addwf	prodl,w,c
 13941  013274  6EF6               	movwf	tblptrl,c
 13942  013276  0EFC               	movlw	high Timer0_Init@PRESCALE
 13943  013278  20F4               	addwfc	prodh,w,c
 13944  01327A  6EF7               	movwf	tblptrh,c
 13945  01327C                     	if	1	;There are 3 active tblptr bytes
 13946  01327C  6AF8               	clrf	tblptru,c
 13947  01327E  0E00               	movlw	low (__mediumconst shr (0+16))
 13948  013280  22F8               	addwfc	tblptru,f,c
 13949  013282                     	endif
 13950  013282  0009               	tblrd		*+
 13951  013284  CFF5 F0CB          	movff	tablat,??_Timer0_Init
 13952  013288  0009               	tblrd		*+
 13953  01328A  CFF5 F0CC          	movff	tablat,??_Timer0_Init+1
 13954  01328E  C0CB  F0BE         	movff	??_Timer0_Init,___lldiv@divisor
 13955  013292  C0CC  F0BF         	movff	??_Timer0_Init+1,___lldiv@divisor+1
 13956  013296  0100               	movlb	0	; () banked
 13957  013298  6BC0               	clrf	(___lldiv@divisor+2)& (0+255),b
 13958  01329A  6BC1               	clrf	(___lldiv@divisor+3)& (0+255),b
 13959  01329C  ECD9  F0A0         	call	___lldiv	;wreg free
 13960  0132A0  0100               	movlb	0	; () banked
 13961  0132A2  51BD               	movf	(?___lldiv+3)& (0+255),w,b
 13962  0132A4  E1CE               	bnz	l13465
 13963  0132A6  0100               	movlb	0	; () banked
 13964  0132A8  05BC               	decf	(?___lldiv+2)& (0+255),w,b
 13965  0132AA  B0D8               	btfsc	status,0,c
 13966  0132AC  D7CA               	goto	l1784
 13967  0132AE                     u9940:
 13968                           
 13969                           ; BSR set to: 0
 13970                           ;Timer0.c: 58: }
 13971                           ;Timer0.c: 62: PRE = PRESCALE[INDEX];
 13972                           
 13973                           ; BSR set to: 0
 13974  0132AE  0100               	movlb	0	; () banked
 13975  0132B0  518F               	movf	_INDEX& (0+255),w,b
 13976  0132B2  0D02               	mullw	2
 13977  0132B4  0EE5               	movlw	low Timer0_Init@PRESCALE
 13978  0132B6  24F3               	addwf	prodl,w,c
 13979  0132B8  6EF6               	movwf	tblptrl,c
 13980  0132BA  0EFC               	movlw	high Timer0_Init@PRESCALE
 13981  0132BC  20F4               	addwfc	prodh,w,c
 13982  0132BE  6EF7               	movwf	tblptrh,c
 13983  0132C0                     	if	1	;There are 3 active tblptr bytes
 13984  0132C0  6AF8               	clrf	tblptru,c
 13985  0132C2  0E00               	movlw	low (__mediumconst shr (0+16))
 13986  0132C4  22F8               	addwfc	tblptru,f,c
 13987  0132C6                     	endif
 13988  0132C6  0008               	tblrd		*
 13989  0132C8  CFF5 F08E          	movff	tablat,Timer0_Init@PRE
 13990                           
 13991                           ; BSR set to: 0
 13992                           ;Timer0.c: 63: DIV = (DIVIDE-1);
 13993  0132CC  0EFF               	movlw	255
 13994  0132CE  0100               	movlb	0	; () banked
 13995  0132D0  25D1               	addwf	Timer0_Init@DIVIDE& (0+255),w,b
 13996  0132D2  0103               	movlb	3	; () banked
 13997  0132D4  6F2A               	movwf	Timer0_Init@DIV& (0+255),b
 13998  0132D6  0EFF               	movlw	255
 13999  0132D8  0100               	movlb	0	; () banked
 14000  0132DA  21D2               	addwfc	(Timer0_Init@DIVIDE+1)& (0+255),w,b
 14001  0132DC  0103               	movlb	3	; () banked
 14002  0132DE  6F2B               	movwf	(Timer0_Init@DIV+1)& (0+255),b
 14003  0132E0  0EFF               	movlw	255
 14004  0132E2  0100               	movlb	0	; () banked
 14005  0132E4  21D3               	addwfc	(Timer0_Init@DIVIDE+2)& (0+255),w,b
 14006  0132E6  0103               	movlb	3	; () banked
 14007  0132E8  6F2C               	movwf	(Timer0_Init@DIV+2)& (0+255),b
 14008  0132EA  0EFF               	movlw	255
 14009  0132EC  0100               	movlb	0	; () banked
 14010  0132EE  21D4               	addwfc	(Timer0_Init@DIVIDE+3)& (0+255),w,b
 14011  0132F0  0103               	movlb	3	; () banked
 14012  0132F2  6F2D               	movwf	(Timer0_Init@DIV+3)& (0+255),b
 14013                           
 14014                           ; BSR set to: 3
 14015                           ;Timer0.c: 65: COUNTER = 0xFFFF-DIV/PRE;
 14016  0132F4  C32A  F0BA         	movff	Timer0_Init@DIV,___lldiv@dividend
 14017  0132F8  C32B  F0BB         	movff	Timer0_Init@DIV+1,___lldiv@dividend+1
 14018  0132FC  C32C  F0BC         	movff	Timer0_Init@DIV+2,___lldiv@dividend+2
 14019  013300  C32D  F0BD         	movff	Timer0_Init@DIV+3,___lldiv@dividend+3
 14020  013304  0100               	movlb	0	; () banked
 14021  013306  518E               	movf	Timer0_Init@PRE& (0+255),w,b
 14022  013308  0100               	movlb	0	; () banked
 14023  01330A  6FBE               	movwf	___lldiv@divisor& (0+255),b
 14024  01330C  6BBF               	clrf	(___lldiv@divisor+1)& (0+255),b
 14025  01330E  6BC0               	clrf	(___lldiv@divisor+2)& (0+255),b
 14026  013310  6BC1               	clrf	(___lldiv@divisor+3)& (0+255),b
 14027  013312  ECD9  F0A0         	call	___lldiv	;wreg free
 14028  013316  0100               	movlb	0	; () banked
 14029  013318  1FBA               	comf	?___lldiv& (0+255),f,b
 14030  01331A  0100               	movlb	0	; () banked
 14031  01331C  1FBB               	comf	(?___lldiv+1)& (0+255),f,b
 14032  01331E  0100               	movlb	0	; () banked
 14033  013320  4BBA               	infsnz	?___lldiv& (0+255),f,b
 14034  013322  2BBB               	incf	(?___lldiv+1)& (0+255),f,b
 14035  013324  0EFF               	movlw	255
 14036  013326  0100               	movlb	0	; () banked
 14037  013328  25BA               	addwf	?___lldiv& (0+255),w,b
 14038  01332A  6E29               	movwf	_COUNTER,c
 14039  01332C  0EFF               	movlw	255
 14040  01332E  0100               	movlb	0	; () banked
 14041  013330  21BB               	addwfc	(?___lldiv+1)& (0+255),w,b
 14042  013332  6E2A               	movwf	_COUNTER+1,c
 14043                           
 14044                           ; BSR set to: 0
 14045                           ;Timer0.c: 68: Timer0_Clear();
 14046  013334  EC14  F0B3         	call	_Timer0_Clear	;wreg free
 14047                           
 14048                           ;Timer0.c: 71: T0CONbits.TMR0ON = 1;
 14049  013338  8ED5               	bsf	4053,7,c	;volatile
 14050  01333A  0012               	return		;funcret
 14051  01333C                     __end_of_Timer0_Init:
 14052                           	opt stack 0
 14053                           tblptru	equ	0xFF8
 14054                           tblptrh	equ	0xFF7
 14055                           tblptrl	equ	0xFF6
 14056                           tablat	equ	0xFF5
 14057                           prodh	equ	0xFF4
 14058                           prodl	equ	0xFF3
 14059                           intcon	equ	0xFF2
 14060                           postinc0	equ	0xFEE
 14061                           wreg	equ	0xFE8
 14062                           indf1	equ	0xFE7
 14063                           postdec1	equ	0xFE5
 14064                           fsr1h	equ	0xFE2
 14065                           fsr1l	equ	0xFE1
 14066                           indf2	equ	0xFDF
 14067                           postinc2	equ	0xFDE
 14068                           postdec2	equ	0xFDD
 14069                           fsr2h	equ	0xFDA
 14070                           fsr2l	equ	0xFD9
 14071                           status	equ	0xFD8
 14072                           
 14073 ;; *************** function _Timer0_Clear *****************
 14074 ;; Defined at:
 14075 ;;		line 20 in file "Library/Timer0.c"
 14076 ;; Parameters:    Size  Location     Type
 14077 ;;		None
 14078 ;; Auto vars:     Size  Location     Type
 14079 ;;		None
 14080 ;; Return value:  Size  Location     Type
 14081 ;;                  1    wreg      void 
 14082 ;; Registers used:
 14083 ;;		None
 14084 ;; Tracked objects:
 14085 ;;		On entry : 0/0
 14086 ;;		On exit  : 0/0
 14087 ;;		Unchanged: 0/0
 14088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14092 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14093 ;;Total ram usage:        0 bytes
 14094 ;; Hardware stack levels used:    1
 14095 ;; Hardware stack levels required when called:    7
 14096 ;; This function calls:
 14097 ;;		Nothing
 14098 ;; This function is called by:
 14099 ;;		_Timer0_Init
 14100 ;; This function uses a non-reentrant model
 14101 ;;
 14102                           
 14103                           	psect	text59
 14104  016628                     __ptext59:
 14105                           	opt stack 0
 14106  016628                     _Timer0_Clear:
 14107                           	opt stack 19
 14108                           
 14109                           ;Timer0.c: 22: TMR0 = COUNTER;
 14110                           
 14111                           ;incstack = 0
 14112  016628  C029  FFD6         	movff	_COUNTER,4054	;volatile
 14113  01662C  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 14114                           
 14115                           ;Timer0.c: 23: INTCONbits.TMR0IF = 0;
 14116  016630  94F2               	bcf	intcon,2,c	;volatile
 14117  016632  0012               	return		;funcret
 14118  016634                     __end_of_Timer0_Clear:
 14119                           	opt stack 0
 14120                           tblptru	equ	0xFF8
 14121                           tblptrh	equ	0xFF7
 14122                           tblptrl	equ	0xFF6
 14123                           tablat	equ	0xFF5
 14124                           prodh	equ	0xFF4
 14125                           prodl	equ	0xFF3
 14126                           intcon	equ	0xFF2
 14127                           postinc0	equ	0xFEE
 14128                           wreg	equ	0xFE8
 14129                           indf1	equ	0xFE7
 14130                           postdec1	equ	0xFE5
 14131                           fsr1h	equ	0xFE2
 14132                           fsr1l	equ	0xFE1
 14133                           indf2	equ	0xFDF
 14134                           postinc2	equ	0xFDE
 14135                           postdec2	equ	0xFDD
 14136                           fsr2h	equ	0xFDA
 14137                           fsr2l	equ	0xFD9
 14138                           status	equ	0xFD8
 14139                           
 14140 ;; *************** function _MXK_Init *****************
 14141 ;; Defined at:
 14142 ;;		line 33 in file "Library/MXK.c"
 14143 ;; Parameters:    Size  Location     Type
 14144 ;;		None
 14145 ;; Auto vars:     Size  Location     Type
 14146 ;;		None
 14147 ;; Return value:  Size  Location     Type
 14148 ;;                  1    wreg      void 
 14149 ;; Registers used:
 14150 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14151 ;; Tracked objects:
 14152 ;;		On entry : 0/0
 14153 ;;		On exit  : 0/0
 14154 ;;		Unchanged: 0/0
 14155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14159 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14160 ;;Total ram usage:        0 bytes
 14161 ;; Hardware stack levels used:    1
 14162 ;; Hardware stack levels required when called:   16
 14163 ;; This function calls:
 14164 ;;		_LED_Init
 14165 ;;		_Port_Init
 14166 ;;		_Port_SetPin
 14167 ;;		_Port_SetPinType
 14168 ;;		_Port_SetQuadType
 14169 ;;		_Port_SetType
 14170 ;;		_delay_ms
 14171 ;; This function is called by:
 14172 ;;		_init
 14173 ;; This function uses a non-reentrant model
 14174 ;;
 14175                           
 14176                           	psect	text60
 14177  012D84                     __ptext60:
 14178                           	opt stack 0
 14179  012D84                     _MXK_Init:
 14180                           	opt stack 13
 14181                           
 14182                           ;MXK.c: 35: Bus_State = eMXK_Idle;
 14183                           
 14184                           ;incstack = 0
 14185  012D84  0E01               	movlw	1
 14186  012D86  6E4B               	movwf	_Bus_State,c
 14187                           
 14188                           ;MXK.c: 36: lQueue = (Function)0;
 14189  012D88  0E00               	movlw	0
 14190  012D8A  0100               	movlb	0	; () banked
 14191  012D8C  6F63               	movwf	_lQueue& (0+255),b	;volatile
 14192  012D8E  0E00               	movlw	0
 14193  012D90  0100               	movlb	0	; () banked
 14194  012D92  6F64               	movwf	(_lQueue+1)& (0+255),b	;volatile
 14195  012D94  0E00               	movlw	0
 14196  012D96  0100               	movlb	0	; () banked
 14197  012D98  6F65               	movwf	(_lQueue+2)& (0+255),b	;volatile
 14198                           
 14199                           ; BSR set to: 0
 14200                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
 14201  012D9A  0EB4               	movlw	low _PortA
 14202  012D9C  0101               	movlb	1	; () banked
 14203  012D9E  6F01               	movwf	Port_Init@pInput& (0+255),b
 14204  012DA0  0E03               	movlw	high _PortA
 14205  012DA2  0101               	movlb	1	; () banked
 14206  012DA4  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14207  012DA6  0E00               	movlw	0
 14208  012DA8  0101               	movlb	1	; () banked
 14209  012DAA  6F03               	movwf	Port_Init@pPort& (0+255),b
 14210  012DAC  EC36  F095         	call	_Port_Init	;wreg free
 14211                           
 14212                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
 14213  012DB0  0EAA               	movlw	low _PortB
 14214  012DB2  0101               	movlb	1	; () banked
 14215  012DB4  6F01               	movwf	Port_Init@pInput& (0+255),b
 14216  012DB6  0E03               	movlw	high _PortB
 14217  012DB8  0101               	movlb	1	; () banked
 14218  012DBA  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14219  012DBC  0E01               	movlw	1
 14220  012DBE  0101               	movlb	1	; () banked
 14221  012DC0  6F03               	movwf	Port_Init@pPort& (0+255),b
 14222  012DC2  EC36  F095         	call	_Port_Init	;wreg free
 14223                           
 14224                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
 14225  012DC6  0EA7               	movlw	low _PortC
 14226  012DC8  0101               	movlb	1	; () banked
 14227  012DCA  6F01               	movwf	Port_Init@pInput& (0+255),b
 14228  012DCC  0E00               	movlw	high _PortC
 14229  012DCE  0101               	movlb	1	; () banked
 14230  012DD0  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14231  012DD2  0E02               	movlw	2
 14232  012DD4  0101               	movlb	1	; () banked
 14233  012DD6  6F03               	movwf	Port_Init@pPort& (0+255),b
 14234  012DD8  EC36  F095         	call	_Port_Init	;wreg free
 14235                           
 14236                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
 14237  012DDC  0E9D               	movlw	low _PortD
 14238  012DDE  0101               	movlb	1	; () banked
 14239  012DE0  6F01               	movwf	Port_Init@pInput& (0+255),b
 14240  012DE2  0E00               	movlw	high _PortD
 14241  012DE4  0101               	movlb	1	; () banked
 14242  012DE6  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14243  012DE8  0E03               	movlw	3
 14244  012DEA  0101               	movlb	1	; () banked
 14245  012DEC  6F03               	movwf	Port_Init@pPort& (0+255),b
 14246  012DEE  EC36  F095         	call	_Port_Init	;wreg free
 14247                           
 14248                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
 14249  012DF2  0E93               	movlw	low _PortE
 14250  012DF4  0101               	movlb	1	; () banked
 14251  012DF6  6F01               	movwf	Port_Init@pInput& (0+255),b
 14252  012DF8  0E00               	movlw	high _PortE
 14253  012DFA  0101               	movlb	1	; () banked
 14254  012DFC  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14255  012DFE  0E04               	movlw	4
 14256  012E00  0101               	movlb	1	; () banked
 14257  012E02  6F03               	movwf	Port_Init@pPort& (0+255),b
 14258  012E04  EC36  F095         	call	_Port_Init	;wreg free
 14259                           
 14260                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
 14261  012E08  0EBE               	movlw	low _PortF
 14262  012E0A  0101               	movlb	1	; () banked
 14263  012E0C  6F01               	movwf	Port_Init@pInput& (0+255),b
 14264  012E0E  0E03               	movlw	high _PortF
 14265  012E10  0101               	movlb	1	; () banked
 14266  012E12  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14267  012E14  0E05               	movlw	5
 14268  012E16  0101               	movlb	1	; () banked
 14269  012E18  6F03               	movwf	Port_Init@pPort& (0+255),b
 14270  012E1A  EC36  F095         	call	_Port_Init	;wreg free
 14271                           
 14272                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
 14273  012E1E  0EA0               	movlw	low _PortG
 14274  012E20  0101               	movlb	1	; () banked
 14275  012E22  6F01               	movwf	Port_Init@pInput& (0+255),b
 14276  012E24  0E03               	movlw	high _PortG
 14277  012E26  0101               	movlb	1	; () banked
 14278  012E28  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14279  012E2A  0E06               	movlw	6
 14280  012E2C  0101               	movlb	1	; () banked
 14281  012E2E  6F03               	movwf	Port_Init@pPort& (0+255),b
 14282  012E30  EC36  F095         	call	_Port_Init	;wreg free
 14283                           
 14284                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
 14285  012E34  0EBE               	movlw	low _PortF
 14286  012E36  0100               	movlb	0	; () banked
 14287  012E38  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 14288  012E3A  0E03               	movlw	high _PortF
 14289  012E3C  0100               	movlb	0	; () banked
 14290  012E3E  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14291  012E40  0E05               	movlw	5
 14292  012E42  0100               	movlb	0	; () banked
 14293  012E44  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 14294  012E46  0E00               	movlw	0
 14295  012E48  0100               	movlb	0	; () banked
 14296  012E4A  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 14297  012E4C  ECB4  F092         	call	_Port_SetPinType	;wreg free
 14298                           
 14299                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
 14300  012E50  0EAA               	movlw	low _PortB
 14301  012E52  0100               	movlb	0	; () banked
 14302  012E54  6FF0               	movwf	Port_SetQuadType@pInput& (0+255),b
 14303  012E56  0E03               	movlw	high _PortB
 14304  012E58  0100               	movlb	0	; () banked
 14305  012E5A  6FF1               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 14306  012E5C  0E00               	movlw	0
 14307  012E5E  0100               	movlb	0	; () banked
 14308  012E60  6FF2               	movwf	Port_SetQuadType@pQuad& (0+255),b
 14309  012E62  0E00               	movlw	0
 14310  012E64  0100               	movlb	0	; () banked
 14311  012E66  6FF3               	movwf	Port_SetQuadType@pType& (0+255),b
 14312  012E68  ECA7  F08C         	call	_Port_SetQuadType	;wreg free
 14313                           
 14314                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
 14315  012E6C  0EBE               	movlw	low _PortF
 14316  012E6E  0100               	movlb	0	; () banked
 14317  012E70  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 14318  012E72  0E03               	movlw	high _PortF
 14319  012E74  0100               	movlb	0	; () banked
 14320  012E76  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14321  012E78  0E06               	movlw	6
 14322  012E7A  0100               	movlb	0	; () banked
 14323  012E7C  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 14324  012E7E  0E03               	movlw	3
 14325  012E80  0100               	movlb	0	; () banked
 14326  012E82  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 14327  012E84  ECB4  F092         	call	_Port_SetPinType	;wreg free
 14328                           
 14329                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
 14330  012E88  0EA0               	movlw	low _PortG
 14331  012E8A  0100               	movlb	0	; () banked
 14332  012E8C  6FF4               	movwf	Port_SetType@pInput& (0+255),b
 14333  012E8E  0E03               	movlw	high _PortG
 14334  012E90  0100               	movlb	0	; () banked
 14335  012E92  6FF5               	movwf	(Port_SetType@pInput+1)& (0+255),b
 14336  012E94  0E03               	movlw	3
 14337  012E96  0100               	movlb	0	; () banked
 14338  012E98  6FF6               	movwf	Port_SetType@pType& (0+255),b
 14339  012E9A  ECD2  F08D         	call	_Port_SetType	;wreg free
 14340                           
 14341                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
 14342  012E9E  0EA0               	movlw	low _PortG
 14343  012EA0  0100               	movlb	0	; () banked
 14344  012EA2  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 14345  012EA4  0E03               	movlw	high _PortG
 14346  012EA6  0100               	movlb	0	; () banked
 14347  012EA8  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14348  012EAA  0E04               	movlw	4
 14349  012EAC  0100               	movlb	0	; () banked
 14350  012EAE  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 14351  012EB0  0E00               	movlw	0
 14352  012EB2  0100               	movlb	0	; () banked
 14353  012EB4  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 14354  012EB6  EC57  F09F         	call	_Port_SetPin	;wreg free
 14355                           
 14356                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
 14357  012EBA  0EBE               	movlw	low _PortF
 14358  012EBC  0100               	movlb	0	; () banked
 14359  012EBE  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 14360  012EC0  0E03               	movlw	high _PortF
 14361  012EC2  0100               	movlb	0	; () banked
 14362  012EC4  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14363  012EC6  0E06               	movlw	6
 14364  012EC8  0100               	movlb	0	; () banked
 14365  012ECA  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 14366  012ECC  0E01               	movlw	1
 14367  012ECE  0100               	movlb	0	; () banked
 14368  012ED0  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 14369  012ED2  EC57  F09F         	call	_Port_SetPin	;wreg free
 14370                           
 14371                           ;MXK.c: 55: LED_Init(eLED1);
 14372  012ED6  0E00               	movlw	0
 14373  012ED8  ECFE  F0AB         	call	_LED_Init
 14374                           
 14375                           ;MXK.c: 56: LED_Init(eLED2);
 14376  012EDC  0E01               	movlw	1
 14377  012EDE  ECFE  F0AB         	call	_LED_Init
 14378                           
 14379                           ;MXK.c: 58: PIR1 = 0;
 14380  012EE2  0E00               	movlw	0
 14381  012EE4  6E9E               	movwf	3998,c	;volatile
 14382                           
 14383                           ;MXK.c: 59: PIR2 = 0;
 14384  012EE6  0E00               	movlw	0
 14385  012EE8  6EA1               	movwf	4001,c	;volatile
 14386                           
 14387                           ;MXK.c: 60: PIR3 = 0;
 14388  012EEA  0E00               	movlw	0
 14389  012EEC  6EA4               	movwf	4004,c	;volatile
 14390                           
 14391                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
 14392  012EEE  8E9B               	bsf	3995,7,c	;volatile
 14393                           
 14394                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
 14395  012EF0  8C9B               	bsf	3995,6,c	;volatile
 14396                           
 14397                           ;MXK.c: 66: delay_ms(100);
 14398  012EF2  0E00               	movlw	0
 14399  012EF4  0100               	movlb	0	; () banked
 14400  012EF6  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 14401  012EF8  0E64               	movlw	100
 14402  012EFA  6FBA               	movwf	delay_ms@ms& (0+255),b
 14403  012EFC  ECFC  F0AA         	call	_delay_ms	;wreg free
 14404                           
 14405                           ;MXK.c: 68: RCONbits.IPEN = 1;
 14406  012F00  8ED0               	bsf	4048,7,c	;volatile
 14407  012F02  0012               	return		;funcret
 14408  012F04                     __end_of_MXK_Init:
 14409                           	opt stack 0
 14410                           tblptru	equ	0xFF8
 14411                           tblptrh	equ	0xFF7
 14412                           tblptrl	equ	0xFF6
 14413                           tablat	equ	0xFF5
 14414                           prodh	equ	0xFF4
 14415                           prodl	equ	0xFF3
 14416                           intcon	equ	0xFF2
 14417                           postinc0	equ	0xFEE
 14418                           wreg	equ	0xFE8
 14419                           indf1	equ	0xFE7
 14420                           postdec1	equ	0xFE5
 14421                           fsr1h	equ	0xFE2
 14422                           fsr1l	equ	0xFE1
 14423                           indf2	equ	0xFDF
 14424                           postinc2	equ	0xFDE
 14425                           postdec2	equ	0xFDD
 14426                           fsr2h	equ	0xFDA
 14427                           fsr2l	equ	0xFD9
 14428                           status	equ	0xFD8
 14429                           
 14430 ;; *************** function _Port_Init *****************
 14431 ;; Defined at:
 14432 ;;		line 150 in file "Library/Port.c"
 14433 ;; Parameters:    Size  Location     Type
 14434 ;;  pInput          2    1[BANK1 ] const PTR struct Port
 14435 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 14436 ;;		 -> PortD(10), PortC(10), PortF(10), 
 14437 ;;  pPort           1    3[BANK1 ] enum E6786
 14438 ;; Auto vars:     Size  Location     Type
 14439 ;;  i               1    6[BANK1 ] unsigned char 
 14440 ;; Return value:  Size  Location     Type
 14441 ;;                  1    wreg      void 
 14442 ;; Registers used:
 14443 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14444 ;; Tracked objects:
 14445 ;;		On entry : 0/0
 14446 ;;		On exit  : 0/0
 14447 ;;		Unchanged: 0/0
 14448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14449 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14450 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14451 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14452 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14453 ;;Total ram usage:        6 bytes
 14454 ;; Hardware stack levels used:    1
 14455 ;; Hardware stack levels required when called:   15
 14456 ;; This function calls:
 14457 ;;		_GetPortPORT
 14458 ;;		_GetPortProperties
 14459 ;;		_GetPortTRIS
 14460 ;;		_Port_Set
 14461 ;;		_Port_SetPinType
 14462 ;;		_Port_SetType
 14463 ;;		_Word_GetPair
 14464 ;; This function is called by:
 14465 ;;		_MXK_Init
 14466 ;; This function uses a non-reentrant model
 14467 ;;
 14468                           
 14469                           	psect	text61
 14470  012A6C                     __ptext61:
 14471                           	opt stack 0
 14472  012A6C                     _Port_Init:
 14473                           	opt stack 13
 14474                           
 14475                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
 14476                           
 14477                           ;incstack = 0
 14478  012A6C  0101               	movlb	1	; () banked
 14479  012A6E  5103               	movf	Port_Init@pPort& (0+255),w,b
 14480  012A70  EC43  F0A4         	call	_GetPortProperties
 14481  012A74  C101  FFD9         	movff	Port_Init@pInput,fsr2l
 14482  012A78  C102  FFDA         	movff	Port_Init@pInput+1,fsr2h
 14483  012A7C  0100               	movlb	0	; () banked
 14484  012A7E  C0BA  FFDE         	movff	?_GetPortProperties,postinc2
 14485  012A82  0100               	movlb	0	; () banked
 14486  012A84  C0BB  FFDD         	movff	?_GetPortProperties+1,postdec2
 14487                           
 14488                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
 14489  012A88  0101               	movlb	1	; () banked
 14490  012A8A  5103               	movf	Port_Init@pPort& (0+255),w,b
 14491  012A8C  EC96  F0A4         	call	_GetPortPORT
 14492  012A90  0101               	movlb	1	; () banked
 14493  012A92  EE20 F006          	lfsr	2,6
 14494  012A96  5101               	movf	Port_Init@pInput& (0+255),w,b
 14495  012A98  26D9               	addwf	fsr2l,f,c
 14496  012A9A  5102               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14497  012A9C  22DA               	addwfc	fsr2h,f,c
 14498  012A9E  0100               	movlb	0	; () banked
 14499  012AA0  C0BA  FFDE         	movff	?_GetPortPORT,postinc2
 14500  012AA4  0100               	movlb	0	; () banked
 14501  012AA6  C0BB  FFDD         	movff	?_GetPortPORT+1,postdec2
 14502                           
 14503                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
 14504  012AAA  0101               	movlb	1	; () banked
 14505  012AAC  5103               	movf	Port_Init@pPort& (0+255),w,b
 14506  012AAE  EC96  F0A4         	call	_GetPortPORT
 14507  012AB2  0101               	movlb	1	; () banked
 14508  012AB4  EE20 F004          	lfsr	2,4
 14509  012AB8  5101               	movf	Port_Init@pInput& (0+255),w,b
 14510  012ABA  26D9               	addwf	fsr2l,f,c
 14511  012ABC  5102               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14512  012ABE  22DA               	addwfc	fsr2h,f,c
 14513  012AC0  0100               	movlb	0	; () banked
 14514  012AC2  C0BA  FFDE         	movff	?_GetPortPORT,postinc2
 14515  012AC6  0100               	movlb	0	; () banked
 14516  012AC8  C0BB  FFDD         	movff	?_GetPortPORT+1,postdec2
 14517                           
 14518                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
 14519  012ACC  0101               	movlb	1	; () banked
 14520  012ACE  5103               	movf	Port_Init@pPort& (0+255),w,b
 14521  012AD0  ECF0  F0A3         	call	_GetPortTRIS
 14522  012AD4  0101               	movlb	1	; () banked
 14523  012AD6  EE20 F002          	lfsr	2,2
 14524  012ADA  5101               	movf	Port_Init@pInput& (0+255),w,b
 14525  012ADC  26D9               	addwf	fsr2l,f,c
 14526  012ADE  5102               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14527  012AE0  22DA               	addwfc	fsr2h,f,c
 14528  012AE2  0100               	movlb	0	; () banked
 14529  012AE4  C0BA  FFDE         	movff	?_GetPortTRIS,postinc2
 14530  012AE8  0100               	movlb	0	; () banked
 14531  012AEA  C0BB  FFDD         	movff	?_GetPortTRIS+1,postdec2
 14532                           
 14533                           ; BSR set to: 0
 14534                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
 14535  012AEE  0101               	movlb	1	; () banked
 14536  012AF0  EE20 F004          	lfsr	2,4
 14537  012AF4  5101               	movf	Port_Init@pInput& (0+255),w,b
 14538  012AF6  26D9               	addwf	fsr2l,f,c
 14539  012AF8  5102               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14540  012AFA  22DA               	addwfc	fsr2h,f,c
 14541  012AFC  CFDE F104          	movff	postinc2,??_Port_Init
 14542  012B00  CFDD F105          	movff	postdec2,??_Port_Init+1
 14543  012B04  C104  FFD9         	movff	??_Port_Init,fsr2l
 14544  012B08  C105  FFDA         	movff	??_Port_Init+1,fsr2h
 14545  012B0C  0E00               	movlw	0
 14546  012B0E  6EDF               	movwf	indf2,c
 14547                           
 14548                           ; BSR set to: 1
 14549                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
 14550  012B10  0101               	movlb	1	; () banked
 14551  012B12  EE20 F002          	lfsr	2,2
 14552  012B16  5101               	movf	Port_Init@pInput& (0+255),w,b
 14553  012B18  26D9               	addwf	fsr2l,f,c
 14554  012B1A  5102               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14555  012B1C  22DA               	addwfc	fsr2h,f,c
 14556  012B1E  CFDE F104          	movff	postinc2,??_Port_Init
 14557  012B22  CFDD F105          	movff	postdec2,??_Port_Init+1
 14558  012B26  C104  FFD9         	movff	??_Port_Init,fsr2l
 14559  012B2A  C105  FFDA         	movff	??_Port_Init+1,fsr2h
 14560  012B2E  0EFF               	movlw	255
 14561  012B30  6EDF               	movwf	indf2,c
 14562                           
 14563                           ; BSR set to: 1
 14564                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
 14565  012B32  C101  F0F4         	movff	Port_Init@pInput,Port_SetType@pInput
 14566  012B36  C102  F0F5         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
 14567  012B3A  0E00               	movlw	0
 14568  012B3C  0100               	movlb	0	; () banked
 14569  012B3E  6FF6               	movwf	Port_SetType@pType& (0+255),b
 14570  012B40  ECD2  F08D         	call	_Port_SetType	;wreg free
 14571                           
 14572                           ;Port.c: 166: UINT8 i;
 14573                           ;Port.c: 167: for (i=0; i<8; i++)
 14574  012B44  0E00               	movlw	0
 14575  012B46  0101               	movlb	1	; () banked
 14576  012B48  6F06               	movwf	Port_Init@i& (0+255),b
 14577  012B4A                     l13967:
 14578                           
 14579                           ; BSR set to: 1
 14580  012B4A  0E07               	movlw	7
 14581  012B4C  0101               	movlb	1	; () banked
 14582  012B4E  6506               	cpfsgt	Port_Init@i& (0+255),b
 14583  012B50  D031               	goto	l403
 14584  012B52  D04B               	goto	u10640
 14585  012B54                     
 14586                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
 14587                           
 14588                           ; BSR set to: 1
 14589  012B54  C101  F0E0         	movff	Port_Init@pInput,Port_SetPinType@pInput
 14590  012B58  C102  F0E1         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 14591  012B5C  C106  F0E2         	movff	Port_Init@i,Port_SetPinType@pPin
 14592  012B60  0E03               	movlw	3
 14593  012B62  0100               	movlb	0	; () banked
 14594  012B64  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 14595  012B66  ECB4  F092         	call	_Port_SetPinType	;wreg free
 14596                           
 14597                           ;Port.c: 173: break;
 14598  012B6A  D03C               	goto	l405
 14599  012B6C                     
 14600                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
 14601  012B6C  C101  F0E0         	movff	Port_Init@pInput,Port_SetPinType@pInput
 14602  012B70  C102  F0E1         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 14603  012B74  C106  F0E2         	movff	Port_Init@i,Port_SetPinType@pPin
 14604  012B78  0E02               	movlw	2
 14605  012B7A  0100               	movlb	0	; () banked
 14606  012B7C  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 14607  012B7E  ECB4  F092         	call	_Port_SetPinType	;wreg free
 14608                           
 14609                           ;Port.c: 176: break;
 14610  012B82  D030               	goto	l405
 14611  012B84                     
 14612                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
 14613  012B84  C101  F0E0         	movff	Port_Init@pInput,Port_SetPinType@pInput
 14614  012B88  C102  F0E1         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 14615  012B8C  C106  F0E2         	movff	Port_Init@i,Port_SetPinType@pPin
 14616  012B90  0E01               	movlw	1
 14617  012B92  0100               	movlb	0	; () banked
 14618  012B94  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 14619  012B96  ECB4  F092         	call	_Port_SetPinType	;wreg free
 14620                           
 14621                           ;Port.c: 179: break;
 14622  012B9A  D024               	goto	l405
 14623  012B9C                     
 14624                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
 14625  012B9C  C101  F0E0         	movff	Port_Init@pInput,Port_SetPinType@pInput
 14626  012BA0  C102  F0E1         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 14627  012BA4  C106  F0E2         	movff	Port_Init@i,Port_SetPinType@pPin
 14628  012BA8  0E00               	movlw	0
 14629  012BAA  0100               	movlb	0	; () banked
 14630  012BAC  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 14631  012BAE  ECB4  F092         	call	_Port_SetPinType	;wreg free
 14632                           
 14633                           ;Port.c: 183: }
 14634                           
 14635                           ;Port.c: 182: break;
 14636  012BB2  D018               	goto	l405
 14637  012BB4                     l403:
 14638  012BB4  C101  FFD9         	movff	Port_Init@pInput,fsr2l
 14639  012BB8  C102  FFDA         	movff	Port_Init@pInput+1,fsr2h
 14640  012BBC  CFDE F0C6          	movff	postinc2,Word_GetPair@pInput
 14641  012BC0  CFDD F0C7          	movff	postdec2,Word_GetPair@pInput+1
 14642  012BC4  C106  F0C8         	movff	Port_Init@i,Word_GetPair@pPair
 14643  012BC8  ECB1  F0AF         	call	_Word_GetPair	;wreg free
 14644                           
 14645                           ; Switch size 1, requested type "space"
 14646                           ; Number of cases is 4, Range of values is 0 to 3
 14647                           ; switch strategies available:
 14648                           ; Name         Instructions Cycles
 14649                           ; simple_byte           13     7 (average)
 14650                           ;	Chosen strategy is simple_byte
 14651  012BCC  0A00               	xorlw	0	; case 0
 14652  012BCE  B4D8               	btfsc	status,2,c
 14653  012BD0  D7C1               	goto	l404
 14654  012BD2  0A01               	xorlw	1	; case 1
 14655  012BD4  B4D8               	btfsc	status,2,c
 14656  012BD6  D7D6               	goto	l407
 14657  012BD8  0A03               	xorlw	3	; case 2
 14658  012BDA  B4D8               	btfsc	status,2,c
 14659  012BDC  D7C7               	goto	l406
 14660  012BDE  0A01               	xorlw	1	; case 3
 14661  012BE0  B4D8               	btfsc	status,2,c
 14662  012BE2  D7DC               	goto	l408
 14663  012BE4                     l405:
 14664  012BE4  0101               	movlb	1	; () banked
 14665  012BE6  2B06               	incf	Port_Init@i& (0+255),f,b
 14666  012BE8  D7B0               	goto	l13967
 14667  012BEA                     u10640:
 14668                           
 14669                           ; BSR set to: 1
 14670                           ;Port.c: 184: }
 14671                           ;Port.c: 185: Port_Set(pInput, 0x00);
 14672                           
 14673                           ; BSR set to: 1
 14674  012BEA  C101  F0C9         	movff	Port_Init@pInput,Port_Set@pInput
 14675  012BEE  C102  F0CA         	movff	Port_Init@pInput+1,Port_Set@pInput+1
 14676  012BF2  0E00               	movlw	0
 14677  012BF4  0100               	movlb	0	; () banked
 14678  012BF6  6FCB               	movwf	Port_Set@pValue& (0+255),b
 14679  012BF8  EC2C  F088         	call	_Port_Set	;wreg free
 14680  012BFC  0012               	return		;funcret
 14681  012BFE                     __end_of_Port_Init:
 14682                           	opt stack 0
 14683                           tblptru	equ	0xFF8
 14684                           tblptrh	equ	0xFF7
 14685                           tblptrl	equ	0xFF6
 14686                           tablat	equ	0xFF5
 14687                           prodh	equ	0xFF4
 14688                           prodl	equ	0xFF3
 14689                           intcon	equ	0xFF2
 14690                           postinc0	equ	0xFEE
 14691                           wreg	equ	0xFE8
 14692                           indf1	equ	0xFE7
 14693                           postdec1	equ	0xFE5
 14694                           fsr1h	equ	0xFE2
 14695                           fsr1l	equ	0xFE1
 14696                           indf2	equ	0xFDF
 14697                           postinc2	equ	0xFDE
 14698                           postdec2	equ	0xFDD
 14699                           fsr2h	equ	0xFDA
 14700                           fsr2l	equ	0xFD9
 14701                           status	equ	0xFD8
 14702                           
 14703 ;; *************** function _Port_SetType *****************
 14704 ;; Defined at:
 14705 ;;		line 513 in file "Library/Port.c"
 14706 ;; Parameters:    Size  Location     Type
 14707 ;;  pInput          2   58[BANK0 ] const PTR struct Port
 14708 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 14709 ;;		 -> PortD(10), PortC(10), PortF(10), 
 14710 ;;  pType           1   60[BANK0 ] enum E6795
 14711 ;; Auto vars:     Size  Location     Type
 14712 ;;  Output          1    0[BANK1 ] enum E6475
 14713 ;; Return value:  Size  Location     Type
 14714 ;;                  1    wreg      enum E6475
 14715 ;; Registers used:
 14716 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14717 ;; Tracked objects:
 14718 ;;		On entry : 0/0
 14719 ;;		On exit  : 0/0
 14720 ;;		Unchanged: 0/0
 14721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14722 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14723 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14724 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14725 ;;      Totals:         0       5       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14726 ;;Total ram usage:        6 bytes
 14727 ;; Hardware stack levels used:    1
 14728 ;; Hardware stack levels required when called:   14
 14729 ;; This function calls:
 14730 ;;		_Port_CheckPortType
 14731 ;;		_Word_SetPair
 14732 ;; This function is called by:
 14733 ;;		_Port_Init
 14734 ;;		_MXK_Init
 14735 ;; This function uses a non-reentrant model
 14736 ;;
 14737                           
 14738                           	psect	text62
 14739  011BA4                     __ptext62:
 14740                           	opt stack 0
 14741  011BA4                     _Port_SetType:
 14742                           	opt stack 14
 14743                           
 14744                           ;Port.c: 515: ePinError Output = ePinErrorState;
 14745                           
 14746                           ;incstack = 0
 14747  011BA4  0E05               	movlw	5
 14748  011BA6  0101               	movlb	1	; () banked
 14749  011BA8  6F00               	movwf	Port_SetType@Output& (0+255),b
 14750                           
 14751                           ;Port.c: 517: switch (pType)
 14752  011BAA  D07A               	goto	l509
 14753  011BAC                     
 14754                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
 14755                           
 14756                           ; BSR set to: 1
 14757  011BAC  0100               	movlb	0	; () banked
 14758  011BAE  EE20 F002          	lfsr	2,2
 14759  011BB2  51F4               	movf	Port_SetType@pInput& (0+255),w,b
 14760  011BB4  26D9               	addwf	fsr2l,f,c
 14761  011BB6  51F5               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 14762  011BB8  22DA               	addwfc	fsr2h,f,c
 14763  011BBA  CFDE F0F7          	movff	postinc2,??_Port_SetType
 14764  011BBE  CFDD F0F8          	movff	postdec2,??_Port_SetType+1
 14765  011BC2  C0F7  FFD9         	movff	??_Port_SetType,fsr2l
 14766  011BC6  C0F8  FFDA         	movff	??_Port_SetType+1,fsr2h
 14767  011BCA  0EFF               	movlw	255
 14768  011BCC  D067               	goto	L10
 14769  011BCE                     
 14770                           ; BSR set to: 0
 14771                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
 14772                           
 14773                           ; BSR set to: 0
 14774  011BCE  C0F4  F0F0         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 14775  011BD2  C0F5  F0F1         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 14776  011BD6  0E01               	movlw	1
 14777  011BD8  0100               	movlb	0	; () banked
 14778  011BDA  6FF2               	movwf	Port_CheckPortType@pDrive& (0+255),b
 14779  011BDC  ECFC  F0AD         	call	_Port_CheckPortType	;wreg free
 14780  011BE0  0101               	movlb	1	; () banked
 14781  011BE2  6F00               	movwf	Port_SetType@Output& (0+255),b
 14782  011BE4  0101               	movlb	1	; () banked
 14783  011BE6  5100               	movf	Port_SetType@Output& (0+255),w,b
 14784  011BE8  A4D8               	btfss	status,2,c
 14785  011BEA  0012               	return	
 14786                           
 14787                           ; BSR set to: 1
 14788                           ;Port.c: 527: {
 14789                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
 14790  011BEC  0100               	movlb	0	; () banked
 14791  011BEE  EE20 F002          	lfsr	2,2
 14792  011BF2  51F4               	movf	Port_SetType@pInput& (0+255),w,b
 14793  011BF4  26D9               	addwf	fsr2l,f,c
 14794  011BF6  51F5               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 14795  011BF8  22DA               	addwfc	fsr2h,f,c
 14796  011BFA  CFDE F0F7          	movff	postinc2,??_Port_SetType
 14797  011BFE  CFDD F0F8          	movff	postdec2,??_Port_SetType+1
 14798  011C02  C0F7  FFD9         	movff	??_Port_SetType,fsr2l
 14799  011C06  C0F8  FFDA         	movff	??_Port_SetType+1,fsr2h
 14800  011C0A  0E00               	movlw	0
 14801  011C0C  6EDF               	movwf	indf2,c
 14802                           
 14803                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
 14804  011C0E  0100               	movlb	0	; () banked
 14805  011C10  EE20 F004          	lfsr	2,4
 14806  011C14  D036               	goto	L21
 14807  011C16                     
 14808                           ; BSR set to: 0
 14809                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
 14810                           
 14811                           ; BSR set to: 0
 14812  011C16  C0F4  F0F0         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 14813  011C1A  C0F5  F0F1         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 14814  011C1E  0E02               	movlw	2
 14815  011C20  0100               	movlb	0	; () banked
 14816  011C22  6FF2               	movwf	Port_CheckPortType@pDrive& (0+255),b
 14817  011C24  ECFC  F0AD         	call	_Port_CheckPortType	;wreg free
 14818  011C28  0101               	movlb	1	; () banked
 14819  011C2A  6F00               	movwf	Port_SetType@Output& (0+255),b
 14820  011C2C  0101               	movlb	1	; () banked
 14821  011C2E  5100               	movf	Port_SetType@Output& (0+255),w,b
 14822  011C30  A4D8               	btfss	status,2,c
 14823  011C32  0012               	return	
 14824                           
 14825                           ; BSR set to: 1
 14826                           ;Port.c: 538: {
 14827                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
 14828  011C34  0100               	movlb	0	; () banked
 14829  011C36  EE20 F002          	lfsr	2,2
 14830  011C3A  51F4               	movf	Port_SetType@pInput& (0+255),w,b
 14831  011C3C  26D9               	addwf	fsr2l,f,c
 14832  011C3E  51F5               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 14833  011C40  22DA               	addwfc	fsr2h,f,c
 14834  011C42  CFDE F0F7          	movff	postinc2,??_Port_SetType
 14835  011C46  CFDD F0F8          	movff	postdec2,??_Port_SetType+1
 14836  011C4A  C0F7  FFD9         	movff	??_Port_SetType,fsr2l
 14837  011C4E  C0F8  FFDA         	movff	??_Port_SetType+1,fsr2h
 14838  011C52  0EFF               	movlw	255
 14839  011C54  6EDF               	movwf	indf2,c
 14840                           
 14841                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
 14842  011C56  0100               	movlb	0	; () banked
 14843  011C58  EE20 F004          	lfsr	2,4
 14844  011C5C  D7AA               	goto	L11
 14845  011C5E                     
 14846                           ; BSR set to: 0
 14847                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
 14848                           
 14849                           ; BSR set to: 0
 14850  011C5E  C0F4  F0F0         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 14851  011C62  C0F5  F0F1         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 14852  011C66  0E00               	movlw	0
 14853  011C68  0100               	movlb	0	; () banked
 14854  011C6A  6FF2               	movwf	Port_CheckPortType@pDrive& (0+255),b
 14855  011C6C  ECFC  F0AD         	call	_Port_CheckPortType	;wreg free
 14856  011C70  0101               	movlb	1	; () banked
 14857  011C72  6F00               	movwf	Port_SetType@Output& (0+255),b
 14858  011C74  0101               	movlb	1	; () banked
 14859  011C76  5100               	movf	Port_SetType@Output& (0+255),w,b
 14860  011C78  A4D8               	btfss	status,2,c
 14861  011C7A  0012               	return	
 14862                           
 14863                           ; BSR set to: 1
 14864                           ;Port.c: 549: {
 14865                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
 14866  011C7C  0100               	movlb	0	; () banked
 14867  011C7E  EE20 F002          	lfsr	2,2
 14868  011C82                     L21:
 14869  011C82  51F4               	movf	Port_SetType@pInput& (0+255),w,b
 14870  011C84  26D9               	addwf	fsr2l,f,c
 14871  011C86  51F5               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 14872  011C88  22DA               	addwfc	fsr2h,f,c
 14873  011C8A  CFDE F0F7          	movff	postinc2,??_Port_SetType
 14874  011C8E  CFDD F0F8          	movff	postdec2,??_Port_SetType+1
 14875  011C92  C0F7  FFD9         	movff	??_Port_SetType,fsr2l
 14876  011C96  C0F8  FFDA         	movff	??_Port_SetType+1,fsr2h
 14877  011C9A  0E00               	movlw	0
 14878  011C9C                     L10:
 14879  011C9C  6EDF               	movwf	indf2,c
 14880                           
 14881                           ;Port.c: 552: }
 14882  011C9E  D00E               	goto	l511
 14883  011CA0                     l509:
 14884                           
 14885                           ; BSR set to: 0
 14886  011CA0  0100               	movlb	0	; () banked
 14887  011CA2  51F6               	movf	Port_SetType@pType& (0+255),w,b
 14888                           
 14889                           ; Switch size 1, requested type "space"
 14890                           ; Number of cases is 4, Range of values is 0 to 3
 14891                           ; switch strategies available:
 14892                           ; Name         Instructions Cycles
 14893                           ; simple_byte           13     7 (average)
 14894                           ;	Chosen strategy is simple_byte
 14895  011CA4  0A00               	xorlw	0	; case 0
 14896  011CA6  B4D8               	btfsc	status,2,c
 14897  011CA8  D781               	goto	l510
 14898  011CAA  0A01               	xorlw	1	; case 1
 14899  011CAC  B4D8               	btfsc	status,2,c
 14900  011CAE  D78F               	goto	l512
 14901  011CB0  0A03               	xorlw	3	; case 2
 14902  011CB2  B4D8               	btfsc	status,2,c
 14903  011CB4  D7B0               	goto	l516
 14904  011CB6  0A01               	xorlw	1	; case 3
 14905  011CB8  B4D8               	btfsc	status,2,c
 14906  011CBA  D7D1               	goto	l519
 14907  011CBC                     l511:
 14908                           
 14909                           ; BSR set to: 0
 14910                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
 14911                           
 14912                           ; BSR set to: 0
 14913  011CBC  0E08               	movlw	8
 14914  011CBE  0100               	movlb	0	; () banked
 14915  011CC0  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 14916  011CC2  0100               	movlb	0	; () banked
 14917  011CC4  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 14918  011CC6  0E00               	movlw	0
 14919  011CC8  0100               	movlb	0	; () banked
 14920  011CCA  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14921  011CCC  0100               	movlb	0	; () banked
 14922  011CCE  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14923  011CD0  0E00               	movlw	0
 14924  011CD2  0100               	movlb	0	; () banked
 14925  011CD4  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 14926  011CD6  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 14927  011CDA  EC8B  F0AE         	call	_Word_SetPair	;wreg free
 14928                           
 14929                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
 14930  011CDE  0E08               	movlw	8
 14931  011CE0  0100               	movlb	0	; () banked
 14932  011CE2  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 14933  011CE4  0100               	movlb	0	; () banked
 14934  011CE6  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 14935  011CE8  0E00               	movlw	0
 14936  011CEA  0100               	movlb	0	; () banked
 14937  011CEC  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14938  011CEE  0100               	movlb	0	; () banked
 14939  011CF0  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14940  011CF2  0E01               	movlw	1
 14941  011CF4  0100               	movlb	0	; () banked
 14942  011CF6  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 14943  011CF8  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 14944  011CFC  EC8B  F0AE         	call	_Word_SetPair	;wreg free
 14945                           
 14946                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
 14947  011D00  0E08               	movlw	8
 14948  011D02  0100               	movlb	0	; () banked
 14949  011D04  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 14950  011D06  0100               	movlb	0	; () banked
 14951  011D08  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 14952  011D0A  0E00               	movlw	0
 14953  011D0C  0100               	movlb	0	; () banked
 14954  011D0E  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14955  011D10  0100               	movlb	0	; () banked
 14956  011D12  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14957  011D14  0E02               	movlw	2
 14958  011D16  0100               	movlb	0	; () banked
 14959  011D18  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 14960  011D1A  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 14961  011D1E  EC8B  F0AE         	call	_Word_SetPair	;wreg free
 14962                           
 14963                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
 14964  011D22  0E08               	movlw	8
 14965  011D24  0100               	movlb	0	; () banked
 14966  011D26  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 14967  011D28  0100               	movlb	0	; () banked
 14968  011D2A  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 14969  011D2C  0E00               	movlw	0
 14970  011D2E  0100               	movlb	0	; () banked
 14971  011D30  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14972  011D32  0100               	movlb	0	; () banked
 14973  011D34  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14974  011D36  0E03               	movlw	3
 14975  011D38  0100               	movlb	0	; () banked
 14976  011D3A  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 14977  011D3C  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 14978  011D40  EC8B  F0AE         	call	_Word_SetPair	;wreg free
 14979                           
 14980                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
 14981  011D44  0E08               	movlw	8
 14982  011D46  0100               	movlb	0	; () banked
 14983  011D48  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 14984  011D4A  0100               	movlb	0	; () banked
 14985  011D4C  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 14986  011D4E  0E00               	movlw	0
 14987  011D50  0100               	movlb	0	; () banked
 14988  011D52  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14989  011D54  0100               	movlb	0	; () banked
 14990  011D56  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14991  011D58  0E04               	movlw	4
 14992  011D5A  0100               	movlb	0	; () banked
 14993  011D5C  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 14994  011D5E  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 14995  011D62  EC8B  F0AE         	call	_Word_SetPair	;wreg free
 14996                           
 14997                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
 14998  011D66  0E08               	movlw	8
 14999  011D68  0100               	movlb	0	; () banked
 15000  011D6A  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 15001  011D6C  0100               	movlb	0	; () banked
 15002  011D6E  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 15003  011D70  0E00               	movlw	0
 15004  011D72  0100               	movlb	0	; () banked
 15005  011D74  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 15006  011D76  0100               	movlb	0	; () banked
 15007  011D78  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15008  011D7A  0E05               	movlw	5
 15009  011D7C  0100               	movlb	0	; () banked
 15010  011D7E  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 15011  011D80  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 15012  011D84  EC8B  F0AE         	call	_Word_SetPair	;wreg free
 15013                           
 15014                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
 15015  011D88  0E08               	movlw	8
 15016  011D8A  0100               	movlb	0	; () banked
 15017  011D8C  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 15018  011D8E  0100               	movlb	0	; () banked
 15019  011D90  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 15020  011D92  0E00               	movlw	0
 15021  011D94  0100               	movlb	0	; () banked
 15022  011D96  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 15023  011D98  0100               	movlb	0	; () banked
 15024  011D9A  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15025  011D9C  0E06               	movlw	6
 15026  011D9E  0100               	movlb	0	; () banked
 15027  011DA0  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 15028  011DA2  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 15029  011DA6  EC8B  F0AE         	call	_Word_SetPair	;wreg free
 15030                           
 15031                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
 15032  011DAA  0E08               	movlw	8
 15033  011DAC  0100               	movlb	0	; () banked
 15034  011DAE  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 15035  011DB0  0100               	movlb	0	; () banked
 15036  011DB2  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 15037  011DB4  0E00               	movlw	0
 15038  011DB6  0100               	movlb	0	; () banked
 15039  011DB8  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 15040  011DBA  0100               	movlb	0	; () banked
 15041  011DBC  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15042  011DBE  0E07               	movlw	7
 15043  011DC0  0100               	movlb	0	; () banked
 15044  011DC2  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 15045  011DC4  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 15046  011DC8  EC8B  F0AE         	call	_Word_SetPair	;wreg free
 15047  011DCC  0012               	return	
 15048  011DCE                     __end_of_Port_SetType:
 15049                           	opt stack 0
 15050                           tblptru	equ	0xFF8
 15051                           tblptrh	equ	0xFF7
 15052                           tblptrl	equ	0xFF6
 15053                           tablat	equ	0xFF5
 15054                           prodh	equ	0xFF4
 15055                           prodl	equ	0xFF3
 15056                           intcon	equ	0xFF2
 15057                           postinc0	equ	0xFEE
 15058                           wreg	equ	0xFE8
 15059                           indf1	equ	0xFE7
 15060                           postdec1	equ	0xFE5
 15061                           fsr1h	equ	0xFE2
 15062                           fsr1l	equ	0xFE1
 15063                           indf2	equ	0xFDF
 15064                           postinc2	equ	0xFDE
 15065                           postdec2	equ	0xFDD
 15066                           fsr2h	equ	0xFDA
 15067                           fsr2l	equ	0xFD9
 15068                           status	equ	0xFD8
 15069                           
 15070 ;; *************** function _Port_CheckPortType *****************
 15071 ;; Defined at:
 15072 ;;		line 138 in file "Library/Port.c"
 15073 ;; Parameters:    Size  Location     Type
 15074 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 15075 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 15076 ;;		 -> PortD(10), PortC(10), PortF(10), 
 15077 ;;  pDrive          1   56[BANK0 ] enum E6469
 15078 ;; Auto vars:     Size  Location     Type
 15079 ;;  Output          1   57[BANK0 ] enum E6475
 15080 ;; Return value:  Size  Location     Type
 15081 ;;                  1    wreg      enum E6475
 15082 ;; Registers used:
 15083 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15084 ;; Tracked objects:
 15085 ;;		On entry : 0/0
 15086 ;;		On exit  : 0/0
 15087 ;;		Unchanged: 0/0
 15088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15089 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15090 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15092 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15093 ;;Total ram usage:        4 bytes
 15094 ;; Hardware stack levels used:    1
 15095 ;; Hardware stack levels required when called:   13
 15096 ;; This function calls:
 15097 ;;		_Port_CheckQuadType
 15098 ;; This function is called by:
 15099 ;;		_Port_SetType
 15100 ;; This function uses a non-reentrant model
 15101 ;;
 15102                           
 15103                           	psect	text63
 15104  015BF8                     __ptext63:
 15105                           	opt stack 0
 15106  015BF8                     _Port_CheckPortType:
 15107                           	opt stack 14
 15108                           
 15109                           ;Port.c: 140: ePinError Output = ePinErrorState;
 15110                           
 15111                           ;incstack = 0
 15112  015BF8  0E05               	movlw	5
 15113  015BFA  0100               	movlb	0	; () banked
 15114  015BFC  6FF3               	movwf	Port_CheckPortType@Output& (0+255),b
 15115                           
 15116                           ; BSR set to: 0
 15117                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
 15118  015BFE  C0F0  F0E9         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 15119  015C02  C0F1  F0EA         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 15120  015C06  0E00               	movlw	0
 15121  015C08  0100               	movlb	0	; () banked
 15122  015C0A  6FEB               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 15123  015C0C  C0F2  F0EC         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 15124  015C10  EC8E  F0AC         	call	_Port_CheckQuadType	;wreg free
 15125  015C14  0100               	movlb	0	; () banked
 15126  015C16  6FF3               	movwf	Port_CheckPortType@Output& (0+255),b
 15127  015C18  0100               	movlb	0	; () banked
 15128  015C1A  51F3               	movf	Port_CheckPortType@Output& (0+255),w,b
 15129  015C1C  A4D8               	btfss	status,2,c
 15130  015C1E  D00D               	goto	l397
 15131                           
 15132                           ; BSR set to: 0
 15133                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
 15134  015C20  C0F0  F0E9         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 15135  015C24  C0F1  F0EA         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 15136  015C28  0E01               	movlw	1
 15137  015C2A  0100               	movlb	0	; () banked
 15138  015C2C  6FEB               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 15139  015C2E  C0F2  F0EC         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 15140  015C32  EC8E  F0AC         	call	_Port_CheckQuadType	;wreg free
 15141  015C36  0100               	movlb	0	; () banked
 15142  015C38  6FF3               	movwf	Port_CheckPortType@Output& (0+255),b
 15143  015C3A                     l397:
 15144                           
 15145                           ; BSR set to: 0
 15146                           ;Port.c: 146: return Output;
 15147                           
 15148                           ; BSR set to: 0
 15149  015C3A  0100               	movlb	0	; () banked
 15150  015C3C  51F3               	movf	Port_CheckPortType@Output& (0+255),w,b
 15151  015C3E  0012               	return	
 15152  015C40                     __end_of_Port_CheckPortType:
 15153                           	opt stack 0
 15154                           tblptru	equ	0xFF8
 15155                           tblptrh	equ	0xFF7
 15156                           tblptrl	equ	0xFF6
 15157                           tablat	equ	0xFF5
 15158                           prodh	equ	0xFF4
 15159                           prodl	equ	0xFF3
 15160                           intcon	equ	0xFF2
 15161                           postinc0	equ	0xFEE
 15162                           wreg	equ	0xFE8
 15163                           indf1	equ	0xFE7
 15164                           postdec1	equ	0xFE5
 15165                           fsr1h	equ	0xFE2
 15166                           fsr1l	equ	0xFE1
 15167                           indf2	equ	0xFDF
 15168                           postinc2	equ	0xFDE
 15169                           postdec2	equ	0xFDD
 15170                           fsr2h	equ	0xFDA
 15171                           fsr2l	equ	0xFD9
 15172                           status	equ	0xFD8
 15173                           
 15174 ;; *************** function _Port_Set *****************
 15175 ;; Defined at:
 15176 ;;		line 570 in file "Library/Port.c"
 15177 ;; Parameters:    Size  Location     Type
 15178 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 15179 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 15180 ;;		 -> PortD(10), PortC(10), PortF(10), 
 15181 ;;  pValue          1   17[BANK0 ] unsigned char 
 15182 ;; Auto vars:     Size  Location     Type
 15183 ;;  TypeActual      2   36[BANK0 ] unsigned short 
 15184 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
 15185 ;;  Type            1   38[BANK0 ] enum E6795
 15186 ;; Return value:  Size  Location     Type
 15187 ;;                  1    wreg      void 
 15188 ;; Registers used:
 15189 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15190 ;; Tracked objects:
 15191 ;;		On entry : 0/0
 15192 ;;		On exit  : 0/0
 15193 ;;		Unchanged: 0/0
 15194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15195 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15196 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15197 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15198 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15199 ;;Total ram usage:       24 bytes
 15200 ;; Hardware stack levels used:    1
 15201 ;; Hardware stack levels required when called:   10
 15202 ;; This function calls:
 15203 ;;		_Byte_SetByte
 15204 ;;		_Word_GetPair
 15205 ;; This function is called by:
 15206 ;;		_Port_Init
 15207 ;;		_Port_Toggle
 15208 ;; This function uses a non-reentrant model
 15209 ;;
 15210                           
 15211                           	psect	text64
 15212  011058                     __ptext64:
 15213                           	opt stack 0
 15214  011058                     _Port_Set:
 15215                           	opt stack 17
 15216                           
 15217                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
 15218                           
 15219                           ; BSR set to: 0
 15220                           ;incstack = 0
 15221  011058  0E08               	movlw	8
 15222  01105A  0100               	movlb	0	; () banked
 15223  01105C  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15224  01105E  0100               	movlb	0	; () banked
 15225  011060  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15226  011062  0E00               	movlw	0
 15227  011064  0100               	movlb	0	; () banked
 15228  011066  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15229  011068  0100               	movlb	0	; () banked
 15230  01106A  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15231  01106C  0E00               	movlw	0
 15232  01106E  0100               	movlb	0	; () banked
 15233  011070  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15234  011072  ECB1  F0AF         	call	_Word_GetPair	;wreg free
 15235  011076  0100               	movlb	0	; () banked
 15236  011078  6FE0               	movwf	Port_Set@Type& (0+255),b
 15237                           
 15238                           ; BSR set to: 0
 15239                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
 15240  01107A  0100               	movlb	0	; () banked
 15241  01107C  51E0               	movf	Port_Set@Type& (0+255),w,b
 15242  01107E  0100               	movlb	0	; () banked
 15243  011080  6FCC               	movwf	??_Port_Set& (0+255),b
 15244  011082  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15245  011084  0E0E               	movlw	14
 15246  011086                     u9735:
 15247  011086  90D8               	bcf	status,0,c
 15248  011088  0100               	movlb	0	; () banked
 15249  01108A  37CC               	rlcf	??_Port_Set& (0+255),f,b
 15250  01108C  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15251  01108E  2EE8               	decfsz	wreg,f,c
 15252  011090  D7FA               	goto	u9735
 15253  011092  0100               	movlb	0	; () banked
 15254  011094  51E0               	movf	Port_Set@Type& (0+255),w,b
 15255  011096  0100               	movlb	0	; () banked
 15256  011098  6FCE               	movwf	(??_Port_Set+2)& (0+255),b
 15257  01109A  6BCF               	clrf	(??_Port_Set+3)& (0+255),b
 15258  01109C  0E0C               	movlw	12
 15259  01109E                     u9745:
 15260  01109E  90D8               	bcf	status,0,c
 15261  0110A0  0100               	movlb	0	; () banked
 15262  0110A2  37CE               	rlcf	(??_Port_Set+2)& (0+255),f,b
 15263  0110A4  37CF               	rlcf	(??_Port_Set+3)& (0+255),f,b
 15264  0110A6  2EE8               	decfsz	wreg,f,c
 15265  0110A8  D7FA               	goto	u9745
 15266  0110AA  0100               	movlb	0	; () banked
 15267  0110AC  51E0               	movf	Port_Set@Type& (0+255),w,b
 15268  0110AE  0100               	movlb	0	; () banked
 15269  0110B0  6FD0               	movwf	(??_Port_Set+4)& (0+255),b
 15270  0110B2  6BD1               	clrf	(??_Port_Set+5)& (0+255),b
 15271  0110B4  0E0A               	movlw	10
 15272  0110B6                     u9755:
 15273  0110B6  90D8               	bcf	status,0,c
 15274  0110B8  0100               	movlb	0	; () banked
 15275  0110BA  37D0               	rlcf	(??_Port_Set+4)& (0+255),f,b
 15276  0110BC  37D1               	rlcf	(??_Port_Set+5)& (0+255),f,b
 15277  0110BE  2EE8               	decfsz	wreg,f,c
 15278  0110C0  D7FA               	goto	u9755
 15279  0110C2  0100               	movlb	0	; () banked
 15280  0110C4  51E0               	movf	Port_Set@Type& (0+255),w,b
 15281  0110C6  0100               	movlb	0	; () banked
 15282  0110C8  6FD3               	movwf	(??_Port_Set+7)& (0+255),b
 15283  0110CA  6BD2               	clrf	(??_Port_Set+6)& (0+255),b
 15284  0110CC  0100               	movlb	0	; () banked
 15285  0110CE  51E0               	movf	Port_Set@Type& (0+255),w,b
 15286  0110D0  0100               	movlb	0	; () banked
 15287  0110D2  6FD4               	movwf	(??_Port_Set+8)& (0+255),b
 15288  0110D4  6BD5               	clrf	(??_Port_Set+9)& (0+255),b
 15289  0110D6  0E06               	movlw	6
 15290  0110D8                     u9765:
 15291  0110D8  90D8               	bcf	status,0,c
 15292  0110DA  0100               	movlb	0	; () banked
 15293  0110DC  37D4               	rlcf	(??_Port_Set+8)& (0+255),f,b
 15294  0110DE  37D5               	rlcf	(??_Port_Set+9)& (0+255),f,b
 15295  0110E0  2EE8               	decfsz	wreg,f,c
 15296  0110E2  D7FA               	goto	u9765
 15297  0110E4  0100               	movlb	0	; () banked
 15298  0110E6  51E0               	movf	Port_Set@Type& (0+255),w,b
 15299  0110E8  0100               	movlb	0	; () banked
 15300  0110EA  6FD6               	movwf	(??_Port_Set+10)& (0+255),b
 15301  0110EC  6BD7               	clrf	(??_Port_Set+11)& (0+255),b
 15302  0110EE  0100               	movlb	0	; () banked
 15303  0110F0  3BD6               	swapf	(??_Port_Set+10)& (0+255),f,b
 15304  0110F2  3BD7               	swapf	(??_Port_Set+11)& (0+255),f,b
 15305  0110F4  0EF0               	movlw	240
 15306  0110F6  17D7               	andwf	(??_Port_Set+11)& (0+255),f,b
 15307  0110F8  51D6               	movf	(??_Port_Set+10)& (0+255),w,b
 15308  0110FA  0B0F               	andlw	15
 15309  0110FC  13D7               	iorwf	(??_Port_Set+11)& (0+255),f,b
 15310  0110FE  0EF0               	movlw	240
 15311  011100  17D6               	andwf	(??_Port_Set+10)& (0+255),f,b
 15312  011102  0100               	movlb	0	; () banked
 15313  011104  51E0               	movf	Port_Set@Type& (0+255),w,b
 15314  011106  0100               	movlb	0	; () banked
 15315  011108  6FD8               	movwf	(??_Port_Set+12)& (0+255),b
 15316  01110A  6BD9               	clrf	(??_Port_Set+13)& (0+255),b
 15317  01110C  0100               	movlb	0	; () banked
 15318  01110E  90D8               	bcf	status,0,c
 15319  011110  37D8               	rlcf	(??_Port_Set+12)& (0+255),f,b
 15320  011112  37D9               	rlcf	(??_Port_Set+13)& (0+255),f,b
 15321  011114  0100               	movlb	0	; () banked
 15322  011116  90D8               	bcf	status,0,c
 15323  011118  37D8               	rlcf	(??_Port_Set+12)& (0+255),f,b
 15324  01111A  37D9               	rlcf	(??_Port_Set+13)& (0+255),f,b
 15325  01111C  0100               	movlb	0	; () banked
 15326  01111E  51E0               	movf	Port_Set@Type& (0+255),w,b
 15327  011120  0100               	movlb	0	; () banked
 15328  011122  6FDA               	movwf	(??_Port_Set+14)& (0+255),b
 15329  011124  6BDB               	clrf	(??_Port_Set+15)& (0+255),b
 15330  011126  0100               	movlb	0	; () banked
 15331  011128  51D8               	movf	(??_Port_Set+12)& (0+255),w,b
 15332  01112A  0100               	movlb	0	; () banked
 15333  01112C  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15334  01112E  0100               	movlb	0	; () banked
 15335  011130  51D9               	movf	(??_Port_Set+13)& (0+255),w,b
 15336  011132  0100               	movlb	0	; () banked
 15337  011134  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15338  011136  0100               	movlb	0	; () banked
 15339  011138  51D6               	movf	(??_Port_Set+10)& (0+255),w,b
 15340  01113A  0100               	movlb	0	; () banked
 15341  01113C  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15342  01113E  0100               	movlb	0	; () banked
 15343  011140  51D7               	movf	(??_Port_Set+11)& (0+255),w,b
 15344  011142  0100               	movlb	0	; () banked
 15345  011144  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15346  011146  0100               	movlb	0	; () banked
 15347  011148  51D4               	movf	(??_Port_Set+8)& (0+255),w,b
 15348  01114A  0100               	movlb	0	; () banked
 15349  01114C  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15350  01114E  0100               	movlb	0	; () banked
 15351  011150  51D5               	movf	(??_Port_Set+9)& (0+255),w,b
 15352  011152  0100               	movlb	0	; () banked
 15353  011154  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15354  011156  0100               	movlb	0	; () banked
 15355  011158  51D2               	movf	(??_Port_Set+6)& (0+255),w,b
 15356  01115A  0100               	movlb	0	; () banked
 15357  01115C  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15358  01115E  0100               	movlb	0	; () banked
 15359  011160  51D3               	movf	(??_Port_Set+7)& (0+255),w,b
 15360  011162  0100               	movlb	0	; () banked
 15361  011164  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15362  011166  0100               	movlb	0	; () banked
 15363  011168  51D0               	movf	(??_Port_Set+4)& (0+255),w,b
 15364  01116A  0100               	movlb	0	; () banked
 15365  01116C  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15366  01116E  0100               	movlb	0	; () banked
 15367  011170  51D1               	movf	(??_Port_Set+5)& (0+255),w,b
 15368  011172  0100               	movlb	0	; () banked
 15369  011174  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15370  011176  0100               	movlb	0	; () banked
 15371  011178  51CE               	movf	(??_Port_Set+2)& (0+255),w,b
 15372  01117A  0100               	movlb	0	; () banked
 15373  01117C  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15374  01117E  0100               	movlb	0	; () banked
 15375  011180  51CF               	movf	(??_Port_Set+3)& (0+255),w,b
 15376  011182  0100               	movlb	0	; () banked
 15377  011184  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15378  011186  0100               	movlb	0	; () banked
 15379  011188  51CC               	movf	??_Port_Set& (0+255),w,b
 15380  01118A  0100               	movlb	0	; () banked
 15381  01118C  11DA               	iorwf	(??_Port_Set+14)& (0+255),w,b
 15382  01118E  0100               	movlb	0	; () banked
 15383  011190  6FDC               	movwf	Port_Set@TypeRequired& (0+255),b
 15384  011192  0100               	movlb	0	; () banked
 15385  011194  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15386  011196  0100               	movlb	0	; () banked
 15387  011198  11DB               	iorwf	(??_Port_Set+15)& (0+255),w,b
 15388  01119A  0100               	movlb	0	; () banked
 15389  01119C  6FDD               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
 15390                           
 15391                           ; BSR set to: 0
 15392                           ;Port.c: 574: UINT16 TypeActual = Type;
 15393  01119E  C0E0  F0DE         	movff	Port_Set@Type,Port_Set@TypeActual
 15394  0111A2  0100               	movlb	0	; () banked
 15395  0111A4  6BDF               	clrf	(Port_Set@TypeActual+1)& (0+255),b
 15396                           
 15397                           ; BSR set to: 0
 15398                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
 15399  0111A6  0E08               	movlw	8
 15400  0111A8  0100               	movlb	0	; () banked
 15401  0111AA  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15402  0111AC  0100               	movlb	0	; () banked
 15403  0111AE  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15404  0111B0  0E00               	movlw	0
 15405  0111B2  0100               	movlb	0	; () banked
 15406  0111B4  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15407  0111B6  0100               	movlb	0	; () banked
 15408  0111B8  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15409  0111BA  0E01               	movlw	1
 15410  0111BC  0100               	movlb	0	; () banked
 15411  0111BE  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15412  0111C0  ECB1  F0AF         	call	_Word_GetPair	;wreg free
 15413  0111C4  0100               	movlb	0	; () banked
 15414  0111C6  6FCC               	movwf	??_Port_Set& (0+255),b
 15415  0111C8  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15416  0111CA  0100               	movlb	0	; () banked
 15417  0111CC  90D8               	bcf	status,0,c
 15418  0111CE  37CC               	rlcf	??_Port_Set& (0+255),f,b
 15419  0111D0  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15420  0111D2  0100               	movlb	0	; () banked
 15421  0111D4  90D8               	bcf	status,0,c
 15422  0111D6  37CC               	rlcf	??_Port_Set& (0+255),f,b
 15423  0111D8  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15424  0111DA  0100               	movlb	0	; () banked
 15425  0111DC  51CC               	movf	??_Port_Set& (0+255),w,b
 15426  0111DE  0100               	movlb	0	; () banked
 15427  0111E0  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15428  0111E2  0100               	movlb	0	; () banked
 15429  0111E4  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15430  0111E6  0100               	movlb	0	; () banked
 15431  0111E8  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15432                           
 15433                           ; BSR set to: 0
 15434                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
 15435  0111EA  0E08               	movlw	8
 15436  0111EC  0100               	movlb	0	; () banked
 15437  0111EE  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15438  0111F0  0100               	movlb	0	; () banked
 15439  0111F2  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15440  0111F4  0E00               	movlw	0
 15441  0111F6  0100               	movlb	0	; () banked
 15442  0111F8  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15443  0111FA  0100               	movlb	0	; () banked
 15444  0111FC  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15445  0111FE  0E02               	movlw	2
 15446  011200  0100               	movlb	0	; () banked
 15447  011202  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15448  011204  ECB1  F0AF         	call	_Word_GetPair	;wreg free
 15449  011208  0100               	movlb	0	; () banked
 15450  01120A  6FCC               	movwf	??_Port_Set& (0+255),b
 15451  01120C  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15452  01120E  0100               	movlb	0	; () banked
 15453  011210  3BCC               	swapf	??_Port_Set& (0+255),f,b
 15454  011212  3BCD               	swapf	(??_Port_Set+1)& (0+255),f,b
 15455  011214  0EF0               	movlw	240
 15456  011216  17CD               	andwf	(??_Port_Set+1)& (0+255),f,b
 15457  011218  51CC               	movf	??_Port_Set& (0+255),w,b
 15458  01121A  0B0F               	andlw	15
 15459  01121C  13CD               	iorwf	(??_Port_Set+1)& (0+255),f,b
 15460  01121E  0EF0               	movlw	240
 15461  011220  17CC               	andwf	??_Port_Set& (0+255),f,b
 15462  011222  0100               	movlb	0	; () banked
 15463  011224  51CC               	movf	??_Port_Set& (0+255),w,b
 15464  011226  0100               	movlb	0	; () banked
 15465  011228  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15466  01122A  0100               	movlb	0	; () banked
 15467  01122C  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15468  01122E  0100               	movlb	0	; () banked
 15469  011230  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15470                           
 15471                           ; BSR set to: 0
 15472                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
 15473  011232  0E08               	movlw	8
 15474  011234  0100               	movlb	0	; () banked
 15475  011236  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15476  011238  0100               	movlb	0	; () banked
 15477  01123A  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15478  01123C  0E00               	movlw	0
 15479  01123E  0100               	movlb	0	; () banked
 15480  011240  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15481  011242  0100               	movlb	0	; () banked
 15482  011244  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15483  011246  0E03               	movlw	3
 15484  011248  0100               	movlb	0	; () banked
 15485  01124A  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15486  01124C  ECB1  F0AF         	call	_Word_GetPair	;wreg free
 15487  011250  0100               	movlb	0	; () banked
 15488  011252  6FCC               	movwf	??_Port_Set& (0+255),b
 15489  011254  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15490  011256  0E06               	movlw	6
 15491  011258                     u9775:
 15492  011258  90D8               	bcf	status,0,c
 15493  01125A  0100               	movlb	0	; () banked
 15494  01125C  37CC               	rlcf	??_Port_Set& (0+255),f,b
 15495  01125E  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15496  011260  2EE8               	decfsz	wreg,f,c
 15497  011262  D7FA               	goto	u9775
 15498  011264  0100               	movlb	0	; () banked
 15499  011266  51CC               	movf	??_Port_Set& (0+255),w,b
 15500  011268  0100               	movlb	0	; () banked
 15501  01126A  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15502  01126C  0100               	movlb	0	; () banked
 15503  01126E  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15504  011270  0100               	movlb	0	; () banked
 15505  011272  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15506                           
 15507                           ; BSR set to: 0
 15508                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
 15509  011274  0E08               	movlw	8
 15510  011276  0100               	movlb	0	; () banked
 15511  011278  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15512  01127A  0100               	movlb	0	; () banked
 15513  01127C  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15514  01127E  0E00               	movlw	0
 15515  011280  0100               	movlb	0	; () banked
 15516  011282  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15517  011284  0100               	movlb	0	; () banked
 15518  011286  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15519  011288  0E04               	movlw	4
 15520  01128A  0100               	movlb	0	; () banked
 15521  01128C  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15522  01128E  ECB1  F0AF         	call	_Word_GetPair	;wreg free
 15523  011292  0100               	movlb	0	; () banked
 15524  011294  6FCC               	movwf	??_Port_Set& (0+255),b
 15525  011296  0100               	movlb	0	; () banked
 15526  011298  51CC               	movf	??_Port_Set& (0+255),w,b
 15527  01129A  0100               	movlb	0	; () banked
 15528  01129C  6FCE               	movwf	(??_Port_Set+2)& (0+255),b
 15529  01129E  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15530  0112A0  0100               	movlb	0	; () banked
 15531  0112A2  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15532  0112A4  0100               	movlb	0	; () banked
 15533  0112A6  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15534  0112A8  0100               	movlb	0	; () banked
 15535  0112AA  51CE               	movf	(??_Port_Set+2)& (0+255),w,b
 15536  0112AC  0100               	movlb	0	; () banked
 15537  0112AE  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15538                           
 15539                           ; BSR set to: 0
 15540                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
 15541  0112B0  0E08               	movlw	8
 15542  0112B2  0100               	movlb	0	; () banked
 15543  0112B4  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15544  0112B6  0100               	movlb	0	; () banked
 15545  0112B8  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15546  0112BA  0E00               	movlw	0
 15547  0112BC  0100               	movlb	0	; () banked
 15548  0112BE  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15549  0112C0  0100               	movlb	0	; () banked
 15550  0112C2  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15551  0112C4  0E05               	movlw	5
 15552  0112C6  0100               	movlb	0	; () banked
 15553  0112C8  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15554  0112CA  ECB1  F0AF         	call	_Word_GetPair	;wreg free
 15555  0112CE  0100               	movlb	0	; () banked
 15556  0112D0  6FCC               	movwf	??_Port_Set& (0+255),b
 15557  0112D2  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15558  0112D4  0E0A               	movlw	10
 15559  0112D6                     u9785:
 15560  0112D6  90D8               	bcf	status,0,c
 15561  0112D8  0100               	movlb	0	; () banked
 15562  0112DA  37CC               	rlcf	??_Port_Set& (0+255),f,b
 15563  0112DC  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15564  0112DE  2EE8               	decfsz	wreg,f,c
 15565  0112E0  D7FA               	goto	u9785
 15566  0112E2  0100               	movlb	0	; () banked
 15567  0112E4  51CC               	movf	??_Port_Set& (0+255),w,b
 15568  0112E6  0100               	movlb	0	; () banked
 15569  0112E8  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15570  0112EA  0100               	movlb	0	; () banked
 15571  0112EC  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15572  0112EE  0100               	movlb	0	; () banked
 15573  0112F0  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15574                           
 15575                           ; BSR set to: 0
 15576                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
 15577  0112F2  0E08               	movlw	8
 15578  0112F4  0100               	movlb	0	; () banked
 15579  0112F6  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15580  0112F8  0100               	movlb	0	; () banked
 15581  0112FA  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15582  0112FC  0E00               	movlw	0
 15583  0112FE  0100               	movlb	0	; () banked
 15584  011300  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15585  011302  0100               	movlb	0	; () banked
 15586  011304  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15587  011306  0E06               	movlw	6
 15588  011308  0100               	movlb	0	; () banked
 15589  01130A  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15590  01130C  ECB1  F0AF         	call	_Word_GetPair	;wreg free
 15591  011310  0100               	movlb	0	; () banked
 15592  011312  6FCC               	movwf	??_Port_Set& (0+255),b
 15593  011314  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15594  011316  0E0C               	movlw	12
 15595  011318                     u9795:
 15596  011318  90D8               	bcf	status,0,c
 15597  01131A  0100               	movlb	0	; () banked
 15598  01131C  37CC               	rlcf	??_Port_Set& (0+255),f,b
 15599  01131E  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15600  011320  2EE8               	decfsz	wreg,f,c
 15601  011322  D7FA               	goto	u9795
 15602  011324  0100               	movlb	0	; () banked
 15603  011326  51CC               	movf	??_Port_Set& (0+255),w,b
 15604  011328  0100               	movlb	0	; () banked
 15605  01132A  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15606  01132C  0100               	movlb	0	; () banked
 15607  01132E  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15608  011330  0100               	movlb	0	; () banked
 15609  011332  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15610                           
 15611                           ; BSR set to: 0
 15612                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
 15613  011334  0E08               	movlw	8
 15614  011336  0100               	movlb	0	; () banked
 15615  011338  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15616  01133A  0100               	movlb	0	; () banked
 15617  01133C  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15618  01133E  0E00               	movlw	0
 15619  011340  0100               	movlb	0	; () banked
 15620  011342  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15621  011344  0100               	movlb	0	; () banked
 15622  011346  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15623  011348  0E07               	movlw	7
 15624  01134A  0100               	movlb	0	; () banked
 15625  01134C  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15626  01134E  ECB1  F0AF         	call	_Word_GetPair	;wreg free
 15627  011352  0100               	movlb	0	; () banked
 15628  011354  6FCC               	movwf	??_Port_Set& (0+255),b
 15629  011356  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15630  011358  0E0E               	movlw	14
 15631  01135A                     u9805:
 15632  01135A  90D8               	bcf	status,0,c
 15633  01135C  0100               	movlb	0	; () banked
 15634  01135E  37CC               	rlcf	??_Port_Set& (0+255),f,b
 15635  011360  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15636  011362  2EE8               	decfsz	wreg,f,c
 15637  011364  D7FA               	goto	u9805
 15638  011366  0100               	movlb	0	; () banked
 15639  011368  51CC               	movf	??_Port_Set& (0+255),w,b
 15640  01136A  0100               	movlb	0	; () banked
 15641  01136C  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15642  01136E  0100               	movlb	0	; () banked
 15643  011370  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15644  011372  0100               	movlb	0	; () banked
 15645  011374  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15646                           
 15647                           ;Port.c: 584: if (TypeRequired == TypeActual)
 15648  011376  0100               	movlb	0	; () banked
 15649  011378  51DE               	movf	Port_Set@TypeActual& (0+255),w,b
 15650  01137A  0100               	movlb	0	; () banked
 15651  01137C  19DC               	xorwf	Port_Set@TypeRequired& (0+255),w,b
 15652  01137E  E148               	bnz	l528
 15653  011380  0100               	movlb	0	; () banked
 15654  011382  51DF               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
 15655  011384  0100               	movlb	0	; () banked
 15656  011386  19DD               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
 15657  011388  A4D8               	btfss	status,2,c
 15658  01138A  0012               	return	
 15659  01138C  D032               	goto	l526
 15660  01138E                     
 15661                           ; BSR set to: 0
 15662                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
 15663                           
 15664                           ; BSR set to: 0
 15665  01138E  0100               	movlb	0	; () banked
 15666  011390  EE20 F002          	lfsr	2,2
 15667  011394  51C9               	movf	Port_Set@pInput& (0+255),w,b
 15668  011396  26D9               	addwf	fsr2l,f,c
 15669  011398  51CA               	movf	(Port_Set@pInput+1)& (0+255),w,b
 15670  01139A  22DA               	addwfc	fsr2h,f,c
 15671  01139C  CFDE F0BA          	movff	postinc2,Byte_SetByte@pInput
 15672  0113A0  CFDD F0BB          	movff	postdec2,Byte_SetByte@pInput+1
 15673  0113A4  C0CB  F0BC         	movff	Port_Set@pValue,Byte_SetByte@pValue
 15674  0113A8  ECF9  F0B2         	call	_Byte_SetByte	;wreg free
 15675                           
 15676                           ;Port.c: 594: break;
 15677  0113AC  0012               	return	
 15678  0113AE                     
 15679                           ;Port.c: 597: pValue = ~pValue;
 15680  0113AE  0100               	movlb	0	; () banked
 15681  0113B0  1FCB               	comf	Port_Set@pValue& (0+255),f,b
 15682                           
 15683                           ; BSR set to: 0
 15684                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
 15685  0113B2  0100               	movlb	0	; () banked
 15686  0113B4  EE20 F002          	lfsr	2,2
 15687  0113B8  51C9               	movf	Port_Set@pInput& (0+255),w,b
 15688  0113BA  26D9               	addwf	fsr2l,f,c
 15689  0113BC  51CA               	movf	(Port_Set@pInput+1)& (0+255),w,b
 15690  0113BE  22DA               	addwfc	fsr2h,f,c
 15691  0113C0  CFDE F0BA          	movff	postinc2,Byte_SetByte@pInput
 15692  0113C4  CFDD F0BB          	movff	postdec2,Byte_SetByte@pInput+1
 15693  0113C8  C0CB  F0BC         	movff	Port_Set@pValue,Byte_SetByte@pValue
 15694  0113CC  ECF9  F0B2         	call	_Byte_SetByte	;wreg free
 15695                           
 15696                           ;Port.c: 599: break;
 15697  0113D0  0012               	return	
 15698  0113D2                     
 15699                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
 15700  0113D2  0100               	movlb	0	; () banked
 15701  0113D4  EE20 F004          	lfsr	2,4
 15702  0113D8  51C9               	movf	Port_Set@pInput& (0+255),w,b
 15703  0113DA  26D9               	addwf	fsr2l,f,c
 15704  0113DC  51CA               	movf	(Port_Set@pInput+1)& (0+255),w,b
 15705  0113DE  22DA               	addwfc	fsr2h,f,c
 15706  0113E0  CFDE F0BA          	movff	postinc2,Byte_SetByte@pInput
 15707  0113E4  CFDD F0BB          	movff	postdec2,Byte_SetByte@pInput+1
 15708  0113E8  C0CB  F0BC         	movff	Port_Set@pValue,Byte_SetByte@pValue
 15709  0113EC  ECF9  F0B2         	call	_Byte_SetByte	;wreg free
 15710                           
 15711                           ;Port.c: 606: }
 15712                           
 15713                           ;Port.c: 605: break;
 15714                           
 15715                           ;Port.c: 604: default:
 15716                           
 15717                           ;Port.c: 603: break;
 15718  0113F0  0012               	return	
 15719  0113F2                     l526:
 15720  0113F2  0100               	movlb	0	; () banked
 15721  0113F4  51E0               	movf	Port_Set@Type& (0+255),w,b
 15722                           
 15723                           ; Switch size 1, requested type "space"
 15724                           ; Number of cases is 4, Range of values is 0 to 3
 15725                           ; switch strategies available:
 15726                           ; Name         Instructions Cycles
 15727                           ; simple_byte           13     7 (average)
 15728                           ;	Chosen strategy is simple_byte
 15729  0113F6  0A00               	xorlw	0	; case 0
 15730  0113F8  B4D8               	btfsc	status,2,c
 15731  0113FA  0012               	return	
 15732  0113FC  0A01               	xorlw	1	; case 1
 15733  0113FE  B4D8               	btfsc	status,2,c
 15734  011400  D7C6               	goto	l529
 15735  011402  0A03               	xorlw	3	; case 2
 15736  011404  B4D8               	btfsc	status,2,c
 15737  011406  D7D3               	goto	l531
 15738  011408  0A01               	xorlw	1	; case 3
 15739  01140A  A4D8               	btfss	status,2,c
 15740                           
 15741                           ; BSR set to: 0
 15742                           
 15743                           ; BSR set to: 0
 15744                           ;Port.c: 607: }
 15745  01140C  0012               	return	
 15746  01140E  D7E1               	goto	l532
 15747  011410                     l528:
 15748  011410  0012               	return		;funcret
 15749  011412                     __end_of_Port_Set:
 15750                           	opt stack 0
 15751                           tblptru	equ	0xFF8
 15752                           tblptrh	equ	0xFF7
 15753                           tblptrl	equ	0xFF6
 15754                           tablat	equ	0xFF5
 15755                           prodh	equ	0xFF4
 15756                           prodl	equ	0xFF3
 15757                           intcon	equ	0xFF2
 15758                           postinc0	equ	0xFEE
 15759                           wreg	equ	0xFE8
 15760                           indf1	equ	0xFE7
 15761                           postdec1	equ	0xFE5
 15762                           fsr1h	equ	0xFE2
 15763                           fsr1l	equ	0xFE1
 15764                           indf2	equ	0xFDF
 15765                           postinc2	equ	0xFDE
 15766                           postdec2	equ	0xFDD
 15767                           fsr2h	equ	0xFDA
 15768                           fsr2l	equ	0xFD9
 15769                           status	equ	0xFD8
 15770                           
 15771 ;; *************** function _Byte_SetByte *****************
 15772 ;; Defined at:
 15773 ;;		line 110 in file "Library/Types.c"
 15774 ;; Parameters:    Size  Location     Type
 15775 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 15776 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
 15777 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 15778 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 15779 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 15780 ;;		 -> NULL(0), 
 15781 ;;  pValue          1    2[BANK0 ] unsigned char 
 15782 ;; Auto vars:     Size  Location     Type
 15783 ;;		None
 15784 ;; Return value:  Size  Location     Type
 15785 ;;                  1    wreg      void 
 15786 ;; Registers used:
 15787 ;;		fsr2l, fsr2h
 15788 ;; Tracked objects:
 15789 ;;		On entry : 0/0
 15790 ;;		On exit  : 0/0
 15791 ;;		Unchanged: 0/0
 15792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15793 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15796 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15797 ;;Total ram usage:        3 bytes
 15798 ;; Hardware stack levels used:    1
 15799 ;; Hardware stack levels required when called:    7
 15800 ;; This function calls:
 15801 ;;		Nothing
 15802 ;; This function is called by:
 15803 ;;		_Port_Set
 15804 ;;		_I2C_Init
 15805 ;; This function uses a non-reentrant model
 15806 ;;
 15807                           
 15808                           	psect	text65
 15809  0165F2                     __ptext65:
 15810                           	opt stack 0
 15811  0165F2                     _Byte_SetByte:
 15812                           	opt stack 19
 15813                           
 15814                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
 15815                           
 15816                           ;incstack = 0
 15817  0165F2  C0BA  FFD9         	movff	Byte_SetByte@pInput,fsr2l
 15818  0165F6  C0BB  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
 15819  0165FA  C0BC  FFDF         	movff	Byte_SetByte@pValue,indf2
 15820  0165FE  0012               	return		;funcret
 15821  016600                     __end_of_Byte_SetByte:
 15822                           	opt stack 0
 15823                           tblptru	equ	0xFF8
 15824                           tblptrh	equ	0xFF7
 15825                           tblptrl	equ	0xFF6
 15826                           tablat	equ	0xFF5
 15827                           prodh	equ	0xFF4
 15828                           prodl	equ	0xFF3
 15829                           intcon	equ	0xFF2
 15830                           postinc0	equ	0xFEE
 15831                           wreg	equ	0xFE8
 15832                           indf1	equ	0xFE7
 15833                           postdec1	equ	0xFE5
 15834                           fsr1h	equ	0xFE2
 15835                           fsr1l	equ	0xFE1
 15836                           indf2	equ	0xFDF
 15837                           postinc2	equ	0xFDE
 15838                           postdec2	equ	0xFDD
 15839                           fsr2h	equ	0xFDA
 15840                           fsr2l	equ	0xFD9
 15841                           status	equ	0xFD8
 15842                           
 15843 ;; *************** function _GetPortTRIS *****************
 15844 ;; Defined at:
 15845 ;;		line 67 in file "Library/Port.c"
 15846 ;; Parameters:    Size  Location     Type
 15847 ;;  pInput          1    wreg     enum E6786
 15848 ;; Auto vars:     Size  Location     Type
 15849 ;;  pInput          1    2[BANK0 ] enum E6786
 15850 ;; Return value:  Size  Location     Type
 15851 ;;                  2    0[BANK0 ] PTR struct Byte
 15852 ;; Registers used:
 15853 ;;		wreg, status,2, status,0
 15854 ;; Tracked objects:
 15855 ;;		On entry : 0/0
 15856 ;;		On exit  : 0/0
 15857 ;;		Unchanged: 0/0
 15858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15859 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15860 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15862 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15863 ;;Total ram usage:        3 bytes
 15864 ;; Hardware stack levels used:    1
 15865 ;; Hardware stack levels required when called:    7
 15866 ;; This function calls:
 15867 ;;		Nothing
 15868 ;; This function is called by:
 15869 ;;		_Port_Init
 15870 ;; This function uses a non-reentrant model
 15871 ;;
 15872                           
 15873                           	psect	text66
 15874  0147E0                     __ptext66:
 15875                           	opt stack 0
 15876  0147E0                     _GetPortTRIS:
 15877                           	opt stack 20
 15878                           
 15879                           ;incstack = 0
 15880                           ;GetPortTRIS@pInput stored from wreg
 15881  0147E0  0100               	movlb	0	; () banked
 15882  0147E2  6FBC               	movwf	GetPortTRIS@pInput& (0+255),b
 15883                           
 15884                           ;Port.c: 69: switch (pInput)
 15885  0147E4  D038               	goto	l363
 15886  0147E6                     
 15887                           ;Port.c: 72: return (BytePtr)&TRISA;
 15888  0147E6  0E92               	movlw	146
 15889  0147E8  0100               	movlb	0	; () banked
 15890  0147EA  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 15891  0147EC  0E0F               	movlw	15
 15892  0147EE  0100               	movlb	0	; () banked
 15893  0147F0  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15894                           
 15895                           ; BSR set to: 0
 15896  0147F2  0012               	return	
 15897  0147F4                     
 15898                           ; BSR set to: 0
 15899                           ;Port.c: 74: return (BytePtr)&TRISB;
 15900                           
 15901                           ; BSR set to: 0
 15902  0147F4  0E93               	movlw	147
 15903  0147F6  0100               	movlb	0	; () banked
 15904  0147F8  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 15905  0147FA  0E0F               	movlw	15
 15906  0147FC  0100               	movlb	0	; () banked
 15907  0147FE  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15908                           
 15909                           ; BSR set to: 0
 15910  014800  0012               	return	
 15911  014802                     
 15912                           ; BSR set to: 0
 15913                           ;Port.c: 76: return (BytePtr)&TRISC;
 15914                           
 15915                           ; BSR set to: 0
 15916  014802  0E94               	movlw	148
 15917  014804  0100               	movlb	0	; () banked
 15918  014806  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 15919  014808  0E0F               	movlw	15
 15920  01480A  0100               	movlb	0	; () banked
 15921  01480C  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15922                           
 15923                           ; BSR set to: 0
 15924  01480E  0012               	return	
 15925  014810                     
 15926                           ; BSR set to: 0
 15927                           ;Port.c: 78: return (BytePtr)&TRISD;
 15928                           
 15929                           ; BSR set to: 0
 15930  014810  0E95               	movlw	149
 15931  014812  0100               	movlb	0	; () banked
 15932  014814  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 15933  014816  0E0F               	movlw	15
 15934  014818  0100               	movlb	0	; () banked
 15935  01481A  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15936                           
 15937                           ; BSR set to: 0
 15938  01481C  0012               	return	
 15939  01481E                     
 15940                           ; BSR set to: 0
 15941                           ;Port.c: 80: return (BytePtr)&TRISE;
 15942                           
 15943                           ; BSR set to: 0
 15944  01481E  0E96               	movlw	150
 15945  014820  0100               	movlb	0	; () banked
 15946  014822  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 15947  014824  0E0F               	movlw	15
 15948  014826  0100               	movlb	0	; () banked
 15949  014828  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15950                           
 15951                           ; BSR set to: 0
 15952  01482A  0012               	return	
 15953  01482C                     
 15954                           ; BSR set to: 0
 15955                           ;Port.c: 82: return (BytePtr)&TRISF;
 15956                           
 15957                           ; BSR set to: 0
 15958  01482C  0E97               	movlw	151
 15959  01482E  0100               	movlb	0	; () banked
 15960  014830  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 15961  014832  0E0F               	movlw	15
 15962  014834  0100               	movlb	0	; () banked
 15963  014836  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15964                           
 15965                           ; BSR set to: 0
 15966  014838  0012               	return	
 15967  01483A                     
 15968                           ; BSR set to: 0
 15969                           ;Port.c: 84: return (BytePtr)&TRISG;
 15970                           
 15971                           ; BSR set to: 0
 15972  01483A  0E98               	movlw	152
 15973  01483C  0100               	movlb	0	; () banked
 15974  01483E  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 15975  014840  0E0F               	movlw	15
 15976  014842  0100               	movlb	0	; () banked
 15977  014844  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15978                           
 15979                           ; BSR set to: 0
 15980  014846  0012               	return	
 15981  014848                     
 15982                           ; BSR set to: 0
 15983                           ;Port.c: 86: return (void*)0;
 15984                           
 15985                           ; BSR set to: 0
 15986  014848  0E00               	movlw	0
 15987  01484A  0100               	movlb	0	; () banked
 15988  01484C  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 15989  01484E  0E00               	movlw	0
 15990  014850  0100               	movlb	0	; () banked
 15991  014852  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15992                           
 15993                           ; BSR set to: 0
 15994                           ;Port.c: 87: }
 15995                           
 15996                           ; BSR set to: 0
 15997  014854  0012               	return	
 15998  014856                     l363:
 15999                           
 16000                           ; BSR set to: 0
 16001  014856  0100               	movlb	0	; () banked
 16002  014858  51BC               	movf	GetPortTRIS@pInput& (0+255),w,b
 16003                           
 16004                           ; Switch size 1, requested type "space"
 16005                           ; Number of cases is 7, Range of values is 0 to 6
 16006                           ; switch strategies available:
 16007                           ; Name         Instructions Cycles
 16008                           ; simple_byte           22    12 (average)
 16009                           ;	Chosen strategy is simple_byte
 16010  01485A  0A00               	xorlw	0	; case 0
 16011  01485C  B4D8               	btfsc	status,2,c
 16012  01485E  D7C3               	goto	l364
 16013  014860  0A01               	xorlw	1	; case 1
 16014  014862  B4D8               	btfsc	status,2,c
 16015  014864  D7C7               	goto	l366
 16016  014866  0A03               	xorlw	3	; case 2
 16017  014868  B4D8               	btfsc	status,2,c
 16018  01486A  D7CB               	goto	l367
 16019  01486C  0A01               	xorlw	1	; case 3
 16020  01486E  B4D8               	btfsc	status,2,c
 16021  014870  D7CF               	goto	l368
 16022  014872  0A07               	xorlw	7	; case 4
 16023  014874  B4D8               	btfsc	status,2,c
 16024  014876  D7D3               	goto	l369
 16025  014878  0A01               	xorlw	1	; case 5
 16026  01487A  B4D8               	btfsc	status,2,c
 16027  01487C  D7D7               	goto	l370
 16028  01487E  0A03               	xorlw	3	; case 6
 16029  014880  B4D8               	btfsc	status,2,c
 16030  014882  D7DB               	goto	l371
 16031  014884  D7E1               	goto	l372
 16032  014886                     __end_of_GetPortTRIS:
 16033                           	opt stack 0
 16034                           tblptru	equ	0xFF8
 16035                           tblptrh	equ	0xFF7
 16036                           tblptrl	equ	0xFF6
 16037                           tablat	equ	0xFF5
 16038                           prodh	equ	0xFF4
 16039                           prodl	equ	0xFF3
 16040                           intcon	equ	0xFF2
 16041                           postinc0	equ	0xFEE
 16042                           wreg	equ	0xFE8
 16043                           indf1	equ	0xFE7
 16044                           postdec1	equ	0xFE5
 16045                           fsr1h	equ	0xFE2
 16046                           fsr1l	equ	0xFE1
 16047                           indf2	equ	0xFDF
 16048                           postinc2	equ	0xFDE
 16049                           postdec2	equ	0xFDD
 16050                           fsr2h	equ	0xFDA
 16051                           fsr2l	equ	0xFD9
 16052                           status	equ	0xFD8
 16053                           
 16054 ;; *************** function _GetPortProperties *****************
 16055 ;; Defined at:
 16056 ;;		line 21 in file "Library/Port.c"
 16057 ;; Parameters:    Size  Location     Type
 16058 ;;  pInput          1    wreg     enum E6786
 16059 ;; Auto vars:     Size  Location     Type
 16060 ;;  pInput          1    2[BANK0 ] enum E6786
 16061 ;; Return value:  Size  Location     Type
 16062 ;;                  2    0[BANK0 ] PTR struct PortProperty
 16063 ;; Registers used:
 16064 ;;		wreg, status,2, status,0
 16065 ;; Tracked objects:
 16066 ;;		On entry : 0/0
 16067 ;;		On exit  : 0/0
 16068 ;;		Unchanged: 0/0
 16069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16070 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16071 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16073 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16074 ;;Total ram usage:        3 bytes
 16075 ;; Hardware stack levels used:    1
 16076 ;; Hardware stack levels required when called:    7
 16077 ;; This function calls:
 16078 ;;		Nothing
 16079 ;; This function is called by:
 16080 ;;		_Port_Init
 16081 ;; This function uses a non-reentrant model
 16082 ;;
 16083                           
 16084                           	psect	text67
 16085  014886                     __ptext67:
 16086                           	opt stack 0
 16087  014886                     _GetPortProperties:
 16088                           	opt stack 20
 16089                           
 16090                           ; BSR set to: 0
 16091                           ;incstack = 0
 16092                           ;GetPortProperties@pInput stored from wreg
 16093  014886  0100               	movlb	0	; () banked
 16094  014888  6FBC               	movwf	GetPortProperties@pInput& (0+255),b
 16095                           
 16096                           ;Port.c: 23: switch (pInput)
 16097  01488A  D038               	goto	l337
 16098  01488C                     
 16099                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
 16100  01488C  0E0B               	movlw	low _PortA_Property
 16101  01488E  0100               	movlb	0	; () banked
 16102  014890  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16103  014892  0EFF               	movlw	high _PortA_Property
 16104  014894  0100               	movlb	0	; () banked
 16105  014896  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16106                           
 16107                           ; BSR set to: 0
 16108  014898  0012               	return	
 16109  01489A                     
 16110                           ; BSR set to: 0
 16111                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
 16112                           
 16113                           ; BSR set to: 0
 16114  01489A  0E09               	movlw	low _PortB_Property
 16115  01489C  0100               	movlb	0	; () banked
 16116  01489E  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16117  0148A0  0EFF               	movlw	high _PortB_Property
 16118  0148A2  0100               	movlb	0	; () banked
 16119  0148A4  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16120                           
 16121                           ; BSR set to: 0
 16122  0148A6  0012               	return	
 16123  0148A8                     
 16124                           ; BSR set to: 0
 16125                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
 16126                           
 16127                           ; BSR set to: 0
 16128  0148A8  0E07               	movlw	low _PortC_Property
 16129  0148AA  0100               	movlb	0	; () banked
 16130  0148AC  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16131  0148AE  0EFF               	movlw	high _PortC_Property
 16132  0148B0  0100               	movlb	0	; () banked
 16133  0148B2  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16134                           
 16135                           ; BSR set to: 0
 16136  0148B4  0012               	return	
 16137  0148B6                     
 16138                           ; BSR set to: 0
 16139                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
 16140                           
 16141                           ; BSR set to: 0
 16142  0148B6  0E05               	movlw	low _PortD_Property
 16143  0148B8  0100               	movlb	0	; () banked
 16144  0148BA  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16145  0148BC  0EFF               	movlw	high _PortD_Property
 16146  0148BE  0100               	movlb	0	; () banked
 16147  0148C0  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16148                           
 16149                           ; BSR set to: 0
 16150  0148C2  0012               	return	
 16151  0148C4                     
 16152                           ; BSR set to: 0
 16153                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
 16154                           
 16155                           ; BSR set to: 0
 16156  0148C4  0E03               	movlw	low _PortE_Property
 16157  0148C6  0100               	movlb	0	; () banked
 16158  0148C8  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16159  0148CA  0EFF               	movlw	high _PortE_Property
 16160  0148CC  0100               	movlb	0	; () banked
 16161  0148CE  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16162                           
 16163                           ; BSR set to: 0
 16164  0148D0  0012               	return	
 16165  0148D2                     
 16166                           ; BSR set to: 0
 16167                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
 16168                           
 16169                           ; BSR set to: 0
 16170  0148D2  0E01               	movlw	low _PortF_Property
 16171  0148D4  0100               	movlb	0	; () banked
 16172  0148D6  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16173  0148D8  0EFF               	movlw	high _PortF_Property
 16174  0148DA  0100               	movlb	0	; () banked
 16175  0148DC  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16176                           
 16177                           ; BSR set to: 0
 16178  0148DE  0012               	return	
 16179  0148E0                     
 16180                           ; BSR set to: 0
 16181                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
 16182                           
 16183                           ; BSR set to: 0
 16184  0148E0  0EFF               	movlw	low _PortG_Property
 16185  0148E2  0100               	movlb	0	; () banked
 16186  0148E4  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16187  0148E6  0EFE               	movlw	high _PortG_Property
 16188  0148E8  0100               	movlb	0	; () banked
 16189  0148EA  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16190                           
 16191                           ; BSR set to: 0
 16192  0148EC  0012               	return	
 16193  0148EE                     
 16194                           ; BSR set to: 0
 16195                           ;Port.c: 40: return (void*)0;
 16196                           
 16197                           ; BSR set to: 0
 16198  0148EE  0E00               	movlw	0
 16199  0148F0  0100               	movlb	0	; () banked
 16200  0148F2  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16201  0148F4  0E00               	movlw	0
 16202  0148F6  0100               	movlb	0	; () banked
 16203  0148F8  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16204                           
 16205                           ; BSR set to: 0
 16206                           ;Port.c: 41: }
 16207                           
 16208                           ; BSR set to: 0
 16209  0148FA  0012               	return	
 16210  0148FC                     l337:
 16211                           
 16212                           ; BSR set to: 0
 16213  0148FC  0100               	movlb	0	; () banked
 16214  0148FE  51BC               	movf	GetPortProperties@pInput& (0+255),w,b
 16215                           
 16216                           ; Switch size 1, requested type "space"
 16217                           ; Number of cases is 7, Range of values is 0 to 6
 16218                           ; switch strategies available:
 16219                           ; Name         Instructions Cycles
 16220                           ; simple_byte           22    12 (average)
 16221                           ;	Chosen strategy is simple_byte
 16222  014900  0A00               	xorlw	0	; case 0
 16223  014902  B4D8               	btfsc	status,2,c
 16224  014904  D7C3               	goto	l338
 16225  014906  0A01               	xorlw	1	; case 1
 16226  014908  B4D8               	btfsc	status,2,c
 16227  01490A  D7C7               	goto	l340
 16228  01490C  0A03               	xorlw	3	; case 2
 16229  01490E  B4D8               	btfsc	status,2,c
 16230  014910  D7CB               	goto	l341
 16231  014912  0A01               	xorlw	1	; case 3
 16232  014914  B4D8               	btfsc	status,2,c
 16233  014916  D7CF               	goto	l342
 16234  014918  0A07               	xorlw	7	; case 4
 16235  01491A  B4D8               	btfsc	status,2,c
 16236  01491C  D7D3               	goto	l343
 16237  01491E  0A01               	xorlw	1	; case 5
 16238  014920  B4D8               	btfsc	status,2,c
 16239  014922  D7D7               	goto	l344
 16240  014924  0A03               	xorlw	3	; case 6
 16241  014926  B4D8               	btfsc	status,2,c
 16242  014928  D7DB               	goto	l345
 16243  01492A  D7E1               	goto	l346
 16244  01492C                     __end_of_GetPortProperties:
 16245                           	opt stack 0
 16246                           tblptru	equ	0xFF8
 16247                           tblptrh	equ	0xFF7
 16248                           tblptrl	equ	0xFF6
 16249                           tablat	equ	0xFF5
 16250                           prodh	equ	0xFF4
 16251                           prodl	equ	0xFF3
 16252                           intcon	equ	0xFF2
 16253                           postinc0	equ	0xFEE
 16254                           wreg	equ	0xFE8
 16255                           indf1	equ	0xFE7
 16256                           postdec1	equ	0xFE5
 16257                           fsr1h	equ	0xFE2
 16258                           fsr1l	equ	0xFE1
 16259                           indf2	equ	0xFDF
 16260                           postinc2	equ	0xFDE
 16261                           postdec2	equ	0xFDD
 16262                           fsr2h	equ	0xFDA
 16263                           fsr2l	equ	0xFD9
 16264                           status	equ	0xFD8
 16265                           
 16266 ;; *************** function _GetPortPORT *****************
 16267 ;; Defined at:
 16268 ;;		line 44 in file "Library/Port.c"
 16269 ;; Parameters:    Size  Location     Type
 16270 ;;  pInput          1    wreg     enum E6786
 16271 ;; Auto vars:     Size  Location     Type
 16272 ;;  pInput          1    2[BANK0 ] enum E6786
 16273 ;; Return value:  Size  Location     Type
 16274 ;;                  2    0[BANK0 ] PTR struct Byte
 16275 ;; Registers used:
 16276 ;;		wreg, status,2, status,0
 16277 ;; Tracked objects:
 16278 ;;		On entry : 0/0
 16279 ;;		On exit  : 0/0
 16280 ;;		Unchanged: 0/0
 16281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16282 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16283 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16285 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16286 ;;Total ram usage:        3 bytes
 16287 ;; Hardware stack levels used:    1
 16288 ;; Hardware stack levels required when called:    7
 16289 ;; This function calls:
 16290 ;;		Nothing
 16291 ;; This function is called by:
 16292 ;;		_Port_Init
 16293 ;; This function uses a non-reentrant model
 16294 ;;
 16295                           
 16296                           	psect	text68
 16297  01492C                     __ptext68:
 16298                           	opt stack 0
 16299  01492C                     _GetPortPORT:
 16300                           	opt stack 20
 16301                           
 16302                           ; BSR set to: 0
 16303                           ;incstack = 0
 16304                           ;GetPortPORT@pInput stored from wreg
 16305  01492C  0100               	movlb	0	; () banked
 16306  01492E  6FBC               	movwf	GetPortPORT@pInput& (0+255),b
 16307                           
 16308                           ;Port.c: 46: switch (pInput)
 16309  014930  D038               	goto	l350
 16310  014932                     
 16311                           ;Port.c: 49: return (BytePtr)&PORTA;
 16312  014932  0E80               	movlw	128
 16313  014934  0100               	movlb	0	; () banked
 16314  014936  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16315  014938  0E0F               	movlw	15
 16316  01493A  0100               	movlb	0	; () banked
 16317  01493C  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16318                           
 16319                           ; BSR set to: 0
 16320  01493E  0012               	return	
 16321  014940                     
 16322                           ; BSR set to: 0
 16323                           ;Port.c: 51: return (BytePtr)&PORTB;
 16324                           
 16325                           ; BSR set to: 0
 16326  014940  0E81               	movlw	129
 16327  014942  0100               	movlb	0	; () banked
 16328  014944  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16329  014946  0E0F               	movlw	15
 16330  014948  0100               	movlb	0	; () banked
 16331  01494A  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16332                           
 16333                           ; BSR set to: 0
 16334  01494C  0012               	return	
 16335  01494E                     
 16336                           ; BSR set to: 0
 16337                           ;Port.c: 53: return (BytePtr)&PORTC;
 16338                           
 16339                           ; BSR set to: 0
 16340  01494E  0E82               	movlw	130
 16341  014950  0100               	movlb	0	; () banked
 16342  014952  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16343  014954  0E0F               	movlw	15
 16344  014956  0100               	movlb	0	; () banked
 16345  014958  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16346                           
 16347                           ; BSR set to: 0
 16348  01495A  0012               	return	
 16349  01495C                     
 16350                           ; BSR set to: 0
 16351                           ;Port.c: 55: return (BytePtr)&PORTD;
 16352                           
 16353                           ; BSR set to: 0
 16354  01495C  0E83               	movlw	131
 16355  01495E  0100               	movlb	0	; () banked
 16356  014960  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16357  014962  0E0F               	movlw	15
 16358  014964  0100               	movlb	0	; () banked
 16359  014966  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16360                           
 16361                           ; BSR set to: 0
 16362  014968  0012               	return	
 16363  01496A                     
 16364                           ; BSR set to: 0
 16365                           ;Port.c: 57: return (BytePtr)&PORTE;
 16366                           
 16367                           ; BSR set to: 0
 16368  01496A  0E84               	movlw	132
 16369  01496C  0100               	movlb	0	; () banked
 16370  01496E  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16371  014970  0E0F               	movlw	15
 16372  014972  0100               	movlb	0	; () banked
 16373  014974  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16374                           
 16375                           ; BSR set to: 0
 16376  014976  0012               	return	
 16377  014978                     
 16378                           ; BSR set to: 0
 16379                           ;Port.c: 59: return (BytePtr)&PORTF;
 16380                           
 16381                           ; BSR set to: 0
 16382  014978  0E85               	movlw	133
 16383  01497A  0100               	movlb	0	; () banked
 16384  01497C  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16385  01497E  0E0F               	movlw	15
 16386  014980  0100               	movlb	0	; () banked
 16387  014982  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16388                           
 16389                           ; BSR set to: 0
 16390  014984  0012               	return	
 16391  014986                     
 16392                           ; BSR set to: 0
 16393                           ;Port.c: 61: return (BytePtr)&PORTG;
 16394                           
 16395                           ; BSR set to: 0
 16396  014986  0E86               	movlw	134
 16397  014988  0100               	movlb	0	; () banked
 16398  01498A  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16399  01498C  0E0F               	movlw	15
 16400  01498E  0100               	movlb	0	; () banked
 16401  014990  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16402                           
 16403                           ; BSR set to: 0
 16404  014992  0012               	return	
 16405  014994                     
 16406                           ; BSR set to: 0
 16407                           ;Port.c: 63: return (void*)0;
 16408                           
 16409                           ; BSR set to: 0
 16410  014994  0E00               	movlw	0
 16411  014996  0100               	movlb	0	; () banked
 16412  014998  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16413  01499A  0E00               	movlw	0
 16414  01499C  0100               	movlb	0	; () banked
 16415  01499E  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16416                           
 16417                           ; BSR set to: 0
 16418                           ;Port.c: 64: }
 16419                           
 16420                           ; BSR set to: 0
 16421  0149A0  0012               	return	
 16422  0149A2                     l350:
 16423                           
 16424                           ; BSR set to: 0
 16425  0149A2  0100               	movlb	0	; () banked
 16426  0149A4  51BC               	movf	GetPortPORT@pInput& (0+255),w,b
 16427                           
 16428                           ; Switch size 1, requested type "space"
 16429                           ; Number of cases is 7, Range of values is 0 to 6
 16430                           ; switch strategies available:
 16431                           ; Name         Instructions Cycles
 16432                           ; simple_byte           22    12 (average)
 16433                           ;	Chosen strategy is simple_byte
 16434  0149A6  0A00               	xorlw	0	; case 0
 16435  0149A8  B4D8               	btfsc	status,2,c
 16436  0149AA  D7C3               	goto	l351
 16437  0149AC  0A01               	xorlw	1	; case 1
 16438  0149AE  B4D8               	btfsc	status,2,c
 16439  0149B0  D7C7               	goto	l353
 16440  0149B2  0A03               	xorlw	3	; case 2
 16441  0149B4  B4D8               	btfsc	status,2,c
 16442  0149B6  D7CB               	goto	l354
 16443  0149B8  0A01               	xorlw	1	; case 3
 16444  0149BA  B4D8               	btfsc	status,2,c
 16445  0149BC  D7CF               	goto	l355
 16446  0149BE  0A07               	xorlw	7	; case 4
 16447  0149C0  B4D8               	btfsc	status,2,c
 16448  0149C2  D7D3               	goto	l356
 16449  0149C4  0A01               	xorlw	1	; case 5
 16450  0149C6  B4D8               	btfsc	status,2,c
 16451  0149C8  D7D7               	goto	l357
 16452  0149CA  0A03               	xorlw	3	; case 6
 16453  0149CC  B4D8               	btfsc	status,2,c
 16454  0149CE  D7DB               	goto	l358
 16455  0149D0  D7E1               	goto	l359
 16456  0149D2                     __end_of_GetPortPORT:
 16457                           	opt stack 0
 16458                           tblptru	equ	0xFF8
 16459                           tblptrh	equ	0xFF7
 16460                           tblptrl	equ	0xFF6
 16461                           tablat	equ	0xFF5
 16462                           prodh	equ	0xFF4
 16463                           prodl	equ	0xFF3
 16464                           intcon	equ	0xFF2
 16465                           postinc0	equ	0xFEE
 16466                           wreg	equ	0xFE8
 16467                           indf1	equ	0xFE7
 16468                           postdec1	equ	0xFE5
 16469                           fsr1h	equ	0xFE2
 16470                           fsr1l	equ	0xFE1
 16471                           indf2	equ	0xFDF
 16472                           postinc2	equ	0xFDE
 16473                           postdec2	equ	0xFDD
 16474                           fsr2h	equ	0xFDA
 16475                           fsr2l	equ	0xFD9
 16476                           status	equ	0xFD8
 16477                           
 16478 ;; *************** function _LED_Init *****************
 16479 ;; Defined at:
 16480 ;;		line 15 in file "Library/LED.c"
 16481 ;; Parameters:    Size  Location     Type
 16482 ;;  pLED            1    wreg     enum E6739
 16483 ;; Auto vars:     Size  Location     Type
 16484 ;;  pLED            1   45[BANK0 ] enum E6739
 16485 ;; Return value:  Size  Location     Type
 16486 ;;                  1    wreg      void 
 16487 ;; Registers used:
 16488 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16489 ;; Tracked objects:
 16490 ;;		On entry : 0/0
 16491 ;;		On exit  : 0/0
 16492 ;;		Unchanged: 0/0
 16493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16495 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16497 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16498 ;;Total ram usage:        1 bytes
 16499 ;; Hardware stack levels used:    1
 16500 ;; Hardware stack levels required when called:   12
 16501 ;; This function calls:
 16502 ;;		_LED_Set
 16503 ;;		_Port_SetPinType
 16504 ;; This function is called by:
 16505 ;;		_MXK_Init
 16506 ;; This function uses a non-reentrant model
 16507 ;;
 16508                           
 16509                           	psect	text69
 16510  0157FC                     __ptext69:
 16511                           	opt stack 0
 16512  0157FC                     _LED_Init:
 16513                           	opt stack 16
 16514                           
 16515                           ; BSR set to: 0
 16516                           ;incstack = 0
 16517                           ;LED_Init@pLED stored from wreg
 16518  0157FC  0100               	movlb	0	; () banked
 16519  0157FE  6FE7               	movwf	LED_Init@pLED& (0+255),b
 16520                           
 16521                           ;LED.c: 17: switch (pLED)
 16522  015800  D01E               	goto	l220
 16523  015802                     
 16524                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
 16525  015802  0EA7               	movlw	low _PortC
 16526  015804  0100               	movlb	0	; () banked
 16527  015806  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 16528  015808  0E00               	movlw	high _PortC
 16529  01580A  0100               	movlb	0	; () banked
 16530  01580C  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16531  01580E  0E00               	movlw	0
 16532  015810  0100               	movlb	0	; () banked
 16533  015812  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 16534  015814  0E03               	movlw	3
 16535  015816  0100               	movlb	0	; () banked
 16536  015818  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 16537  01581A  ECB4  F092         	call	_Port_SetPinType	;wreg free
 16538                           
 16539                           ;LED.c: 21: break;
 16540  01581E  D017               	goto	l222
 16541  015820                     
 16542                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
 16543  015820  0EA7               	movlw	low _PortC
 16544  015822  0100               	movlb	0	; () banked
 16545  015824  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 16546  015826  0E00               	movlw	high _PortC
 16547  015828  0100               	movlb	0	; () banked
 16548  01582A  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16549  01582C  0E01               	movlw	1
 16550  01582E  0100               	movlb	0	; () banked
 16551  015830  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 16552  015832  0E03               	movlw	3
 16553  015834  0100               	movlb	0	; () banked
 16554  015836  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 16555  015838  ECB4  F092         	call	_Port_SetPinType	;wreg free
 16556                           
 16557                           ;LED.c: 25: }
 16558                           
 16559                           ;LED.c: 24: break;
 16560  01583C  D008               	goto	l222
 16561  01583E                     l220:
 16562  01583E  0100               	movlb	0	; () banked
 16563  015840  51E7               	movf	LED_Init@pLED& (0+255),w,b
 16564                           
 16565                           ; Switch size 1, requested type "space"
 16566                           ; Number of cases is 2, Range of values is 0 to 1
 16567                           ; switch strategies available:
 16568                           ; Name         Instructions Cycles
 16569                           ; simple_byte            7     4 (average)
 16570                           ;	Chosen strategy is simple_byte
 16571  015842  0A00               	xorlw	0	; case 0
 16572  015844  B4D8               	btfsc	status,2,c
 16573  015846  D7DD               	goto	l221
 16574  015848  0A01               	xorlw	1	; case 1
 16575  01584A  B4D8               	btfsc	status,2,c
 16576  01584C  D7E9               	goto	l223
 16577  01584E                     l222:
 16578                           
 16579                           ;LED.c: 26: LED_Set(pLED, 0);
 16580                           
 16581                           ; BSR set to: 0
 16582  01584E  0E00               	movlw	0
 16583  015850  0100               	movlb	0	; () banked
 16584  015852  6FCE               	movwf	LED_Set@pValue& (0+255),b
 16585  015854  0100               	movlb	0	; () banked
 16586  015856  51E7               	movf	LED_Init@pLED& (0+255),w,b
 16587  015858  EC3C  F0AD         	call	_LED_Set
 16588  01585C  0012               	return		;funcret
 16589  01585E                     __end_of_LED_Init:
 16590                           	opt stack 0
 16591                           tblptru	equ	0xFF8
 16592                           tblptrh	equ	0xFF7
 16593                           tblptrl	equ	0xFF6
 16594                           tablat	equ	0xFF5
 16595                           prodh	equ	0xFF4
 16596                           prodl	equ	0xFF3
 16597                           intcon	equ	0xFF2
 16598                           postinc0	equ	0xFEE
 16599                           wreg	equ	0xFE8
 16600                           indf1	equ	0xFE7
 16601                           postdec1	equ	0xFE5
 16602                           fsr1h	equ	0xFE2
 16603                           fsr1l	equ	0xFE1
 16604                           indf2	equ	0xFDF
 16605                           postinc2	equ	0xFDE
 16606                           postdec2	equ	0xFDD
 16607                           fsr2h	equ	0xFDA
 16608                           fsr2l	equ	0xFD9
 16609                           status	equ	0xFD8
 16610                           
 16611 ;; *************** function _LED_Set *****************
 16612 ;; Defined at:
 16613 ;;		line 33 in file "Library/LED.c"
 16614 ;; Parameters:    Size  Location     Type
 16615 ;;  pLED            1    wreg     enum E6739
 16616 ;;  pValue          1   20[BANK0 ] unsigned char 
 16617 ;; Auto vars:     Size  Location     Type
 16618 ;;  pLED            1   21[BANK0 ] enum E6739
 16619 ;; Return value:  Size  Location     Type
 16620 ;;                  1    wreg      void 
 16621 ;; Registers used:
 16622 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16623 ;; Tracked objects:
 16624 ;;		On entry : 0/0
 16625 ;;		On exit  : 0/0
 16626 ;;		Unchanged: 0/0
 16627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16628 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16629 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16631 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16632 ;;Total ram usage:        2 bytes
 16633 ;; Hardware stack levels used:    1
 16634 ;; Hardware stack levels required when called:   11
 16635 ;; This function calls:
 16636 ;;		_Port_SetPin
 16637 ;; This function is called by:
 16638 ;;		_LED_Init
 16639 ;;		_SYSTEM_Initialize
 16640 ;; This function uses a non-reentrant model
 16641 ;;
 16642                           
 16643                           	psect	text70
 16644  015A78                     __ptext70:
 16645                           	opt stack 0
 16646  015A78                     _LED_Set:
 16647                           	opt stack 16
 16648                           
 16649                           ;incstack = 0
 16650                           ;LED_Set@pLED stored from wreg
 16651  015A78  0100               	movlb	0	; () banked
 16652  015A7A  6FCF               	movwf	LED_Set@pLED& (0+255),b
 16653                           
 16654                           ;LED.c: 35: switch (pLED)
 16655  015A7C  D01C               	goto	l227
 16656  015A7E                     
 16657                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
 16658  015A7E  0EA7               	movlw	low _PortC
 16659  015A80  0100               	movlb	0	; () banked
 16660  015A82  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 16661  015A84  0E00               	movlw	high _PortC
 16662  015A86  0100               	movlb	0	; () banked
 16663  015A88  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16664  015A8A  0E00               	movlw	0
 16665  015A8C  0100               	movlb	0	; () banked
 16666  015A8E  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 16667  015A90  C0CE  F0CC         	movff	LED_Set@pValue,Port_SetPin@pValue
 16668  015A94  EC57  F09F         	call	_Port_SetPin	;wreg free
 16669                           
 16670                           ;LED.c: 39: break;
 16671  015A98  0012               	return	
 16672  015A9A                     
 16673                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
 16674  015A9A  0EA7               	movlw	low _PortC
 16675  015A9C  0100               	movlb	0	; () banked
 16676  015A9E  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 16677  015AA0  0E00               	movlw	high _PortC
 16678  015AA2  0100               	movlb	0	; () banked
 16679  015AA4  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16680  015AA6  0E01               	movlw	1
 16681  015AA8  0100               	movlb	0	; () banked
 16682  015AAA  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 16683  015AAC  C0CE  F0CC         	movff	LED_Set@pValue,Port_SetPin@pValue
 16684  015AB0  EC57  F09F         	call	_Port_SetPin	;wreg free
 16685                           
 16686                           ;LED.c: 43: }
 16687                           
 16688                           ;LED.c: 42: break;
 16689  015AB4  0012               	return	
 16690  015AB6                     l227:
 16691  015AB6  0100               	movlb	0	; () banked
 16692  015AB8  51CF               	movf	LED_Set@pLED& (0+255),w,b
 16693                           
 16694                           ; Switch size 1, requested type "space"
 16695                           ; Number of cases is 2, Range of values is 0 to 1
 16696                           ; switch strategies available:
 16697                           ; Name         Instructions Cycles
 16698                           ; simple_byte            7     4 (average)
 16699                           ;	Chosen strategy is simple_byte
 16700  015ABA  0A00               	xorlw	0	; case 0
 16701  015ABC  B4D8               	btfsc	status,2,c
 16702  015ABE  D7DF               	goto	l228
 16703  015AC0  0A01               	xorlw	1	; case 1
 16704  015AC2  A4D8               	btfss	status,2,c
 16705  015AC4  0012               	return	
 16706  015AC6  D7E9               	goto	l230
 16707  015AC8                     __end_of_LED_Set:
 16708                           	opt stack 0
 16709                           tblptru	equ	0xFF8
 16710                           tblptrh	equ	0xFF7
 16711                           tblptrl	equ	0xFF6
 16712                           tablat	equ	0xFF5
 16713                           prodh	equ	0xFF4
 16714                           prodl	equ	0xFF3
 16715                           intcon	equ	0xFF2
 16716                           postinc0	equ	0xFEE
 16717                           wreg	equ	0xFE8
 16718                           indf1	equ	0xFE7
 16719                           postdec1	equ	0xFE5
 16720                           fsr1h	equ	0xFE2
 16721                           fsr1l	equ	0xFE1
 16722                           indf2	equ	0xFDF
 16723                           postinc2	equ	0xFDE
 16724                           postdec2	equ	0xFDD
 16725                           fsr2h	equ	0xFDA
 16726                           fsr2l	equ	0xFD9
 16727                           status	equ	0xFD8
 16728                           
 16729 ;; *************** function _MXK_Dequeue *****************
 16730 ;; Defined at:
 16731 ;;		line 153 in file "Library/MXK.c"
 16732 ;; Parameters:    Size  Location     Type
 16733 ;;		None
 16734 ;; Auto vars:     Size  Location     Type
 16735 ;;		None
 16736 ;; Return value:  Size  Location     Type
 16737 ;;                  1    wreg      void 
 16738 ;; Registers used:
 16739 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16740 ;; Tracked objects:
 16741 ;;		On entry : 0/0
 16742 ;;		On exit  : 0/0
 16743 ;;		Unchanged: 0/0
 16744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16748 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16749 ;;Total ram usage:        0 bytes
 16750 ;; Hardware stack levels used:    1
 16751 ;; Hardware stack levels required when called:   12
 16752 ;; This function calls:
 16753 ;;		Absolute function
 16754 ;;		_Motor_Step
 16755 ;; This function is called by:
 16756 ;;		_init
 16757 ;;		_findClosestWall
 16758 ;;		_mode1
 16759 ;;		_mode2
 16760 ;;		_mode4
 16761 ;;		_main
 16762 ;; This function uses a non-reentrant model
 16763 ;;
 16764                           
 16765                           	psect	text71
 16766  015EE6                     __ptext71:
 16767                           	opt stack 0
 16768  015EE6                     _MXK_Dequeue:
 16769                           	opt stack 16
 16770                           
 16771                           ;MXK.c: 155: if (lQueue)
 16772                           
 16773                           ;incstack = 0
 16774  015EE6  0100               	movlb	0	; () banked
 16775  015EE8  5163               	movf	_lQueue& (0+255),w,b	;volatile
 16776  015EEA  0100               	movlb	0	; () banked
 16777  015EEC  1164               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 16778  015EEE  0100               	movlb	0	; () banked
 16779  015EF0  1165               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 16780  015EF2  B4D8               	btfsc	status,2,c
 16781  015EF4  D00D               	goto	u13349
 16782                           
 16783                           ; BSR set to: 0
 16784                           ;MXK.c: 156: lQueue();
 16785  015EF6  D801               	call	u13348
 16786  015EF8  D00B               	goto	u13349
 16787  015EFA                     u13348:
 16788  015EFA  0005               	push	
 16789  015EFC  6EFA               	movwf	pclath,c
 16790  015EFE  0100               	movlb	0	; () banked
 16791  015F00  5163               	movf	_lQueue& (0+255),w,b	;volatile
 16792  015F02  6EFD               	movwf	tosl,c
 16793  015F04  5164               	movf	(_lQueue+1)& (0+255),w,b	;volatile
 16794  015F06  6EFE               	movwf	tosh,c
 16795  015F08  5165               	movf	(_lQueue+2)& (0+255),w,b	;volatile
 16796  015F0A  6EFF               	movwf	tosu,c
 16797  015F0C  50FA               	movf	pclath,w,c
 16798  015F0E  0012               	return		;indir
 16799  015F10                     u13349:
 16800                           
 16801                           ;MXK.c: 157: lQueue = 0;
 16802  015F10  0E00               	movlw	0
 16803  015F12  0100               	movlb	0	; () banked
 16804  015F14  6F63               	movwf	_lQueue& (0+255),b	;volatile
 16805  015F16  0E00               	movlw	0
 16806  015F18  0100               	movlb	0	; () banked
 16807  015F1A  6F64               	movwf	(_lQueue+1)& (0+255),b	;volatile
 16808  015F1C  0E00               	movlw	0
 16809  015F1E  0100               	movlb	0	; () banked
 16810  015F20  6F65               	movwf	(_lQueue+2)& (0+255),b	;volatile
 16811                           
 16812                           ; BSR set to: 0
 16813  015F22  0012               	return		;funcret
 16814  015F24                     __end_of_MXK_Dequeue:
 16815                           	opt stack 0
 16816                           tosu	equ	0xFFF
 16817                           tosh	equ	0xFFE
 16818                           tosl	equ	0xFFD
 16819                           pclath	equ	0xFFA
 16820                           tblptru	equ	0xFF8
 16821                           tblptrh	equ	0xFF7
 16822                           tblptrl	equ	0xFF6
 16823                           tablat	equ	0xFF5
 16824                           prodh	equ	0xFF4
 16825                           prodl	equ	0xFF3
 16826                           intcon	equ	0xFF2
 16827                           postinc0	equ	0xFEE
 16828                           wreg	equ	0xFE8
 16829                           indf1	equ	0xFE7
 16830                           postdec1	equ	0xFE5
 16831                           fsr1h	equ	0xFE2
 16832                           fsr1l	equ	0xFE1
 16833                           indf2	equ	0xFDF
 16834                           postinc2	equ	0xFDE
 16835                           postdec2	equ	0xFDD
 16836                           fsr2h	equ	0xFDA
 16837                           fsr2l	equ	0xFD9
 16838                           status	equ	0xFD8
 16839                           
 16840 ;; *************** function _Motor_Step *****************
 16841 ;; Defined at:
 16842 ;;		line 75 in file "Library/Motor.c"
 16843 ;; Parameters:    Size  Location     Type
 16844 ;;		None
 16845 ;; Auto vars:     Size  Location     Type
 16846 ;;		None
 16847 ;; Return value:  Size  Location     Type
 16848 ;;                  1    wreg      void 
 16849 ;; Registers used:
 16850 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16851 ;; Tracked objects:
 16852 ;;		On entry : 0/0
 16853 ;;		On exit  : 0/0
 16854 ;;		Unchanged: 0/0
 16855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16857 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16858 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16859 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16860 ;;Total ram usage:        2 bytes
 16861 ;; Hardware stack levels used:    1
 16862 ;; Hardware stack levels required when called:   11
 16863 ;; This function calls:
 16864 ;;		_MXK_Queue
 16865 ;;		_MXK_Release
 16866 ;;		_MXK_SwitchTo
 16867 ;;		_Port_SetPin
 16868 ;;		_Timer0_Restart
 16869 ;;		_Timer0_Stop
 16870 ;; This function is called by:
 16871 ;;		_Motor_Init
 16872 ;;		_MXK_Dequeue
 16873 ;;		_Timer0_ISR
 16874 ;; This function uses a non-reentrant model
 16875 ;;
 16876                           
 16877                           	psect	text72
 16878  01349C                     __ptext72:
 16879                           	opt stack 0
 16880  01349C                     _Motor_Step:
 16881                           	opt stack 0
 16882                           
 16883                           ; BSR set to: 0
 16884                           ;Skip over the trampoline to the duplicate function for level 2
 16885  01349C  B251               	btfsc	btemp,1,c
 16886  01349E  EF67  F09B         	goto	i2_Motor_Step
 16887  0134A2                     _Motor_Step$intlevel0:
 16888                           	opt stack 16
 16889                           
 16890                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 16891                           
 16892                           ;incstack = 0
 16893  0134A2  0100               	movlb	0	; () banked
 16894  0134A4  EE20 F004          	lfsr	2,4
 16895  0134A8  5181               	movf	_lMotor& (0+255),w,b
 16896  0134AA  26D9               	addwf	fsr2l,f,c
 16897  0134AC  5182               	movf	(_lMotor+1)& (0+255),w,b
 16898  0134AE  22DA               	addwfc	fsr2h,f,c
 16899  0134B0  50DF               	movf	indf2,w,c
 16900  0134B2  ECF3  F0AE         	call	_MXK_SwitchTo
 16901  0134B6  0900               	iorlw	0
 16902  0134B8  B4D8               	btfsc	status,2,c
 16903  0134BA  D07A               	goto	l1627
 16904                           
 16905                           ;Motor.c: 78: {
 16906                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 16907  0134BC  C081  FFD9         	movff	_lMotor,fsr2l
 16908  0134C0  C082  FFDA         	movff	_lMotor+1,fsr2h
 16909  0134C4  50DE               	movf	postinc2,w,c
 16910  0134C6  10DE               	iorwf	postinc2,w,c
 16911  0134C8  B4D8               	btfsc	status,2,c
 16912  0134CA  D06D               	goto	l1628
 16913                           
 16914                           ;Motor.c: 80: {
 16915                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 16916  0134CC  C081  FFD9         	movff	_lMotor,fsr2l
 16917  0134D0  C082  FFDA         	movff	_lMotor+1,fsr2h
 16918  0134D4  0E01               	movlw	1
 16919  0134D6  BEDB               	btfsc	plusw2,7,c
 16920  0134D8  D026               	goto	l1629
 16921  0134DA  0E01               	movlw	1
 16922  0134DC  50DB               	movf	plusw2,w,c
 16923  0134DE  E103               	bnz	u9970
 16924  0134E0  04DE               	decf	postinc2,w,c
 16925  0134E2  A0D8               	btfss	status,0,c
 16926  0134E4  D020               	goto	l1629
 16927  0134E6                     u9970:
 16928                           
 16929                           ;Motor.c: 83: {
 16930                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 16931  0134E6  C081  FFD9         	movff	_lMotor,fsr2l
 16932  0134EA  C082  FFDA         	movff	_lMotor+1,fsr2h
 16933  0134EE  28DE               	incf	postinc2,w,c
 16934  0134F0  E104               	bnz	u9980
 16935  0134F2  0E7F               	movlw	127
 16936  0134F4  18DE               	xorwf	postinc2,w,c
 16937  0134F6  B4D8               	btfsc	status,2,c
 16938  0134F8  D007               	goto	l1630
 16939  0134FA                     u9980:
 16940                           
 16941                           ;Motor.c: 85: lMotor->mDelta --;
 16942  0134FA  C081  FFD9         	movff	_lMotor,fsr2l
 16943  0134FE  C082  FFDA         	movff	_lMotor+1,fsr2h
 16944  013502  06DE               	decf	postinc2,f,c
 16945  013504  0E00               	movlw	0
 16946  013506  5ADD               	subwfb	postdec2,f,c
 16947  013508                     l1630:
 16948                           
 16949                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 16950  013508  0E93               	movlw	low _PortE
 16951  01350A  0100               	movlb	0	; () banked
 16952  01350C  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 16953  01350E  0E00               	movlw	high _PortE
 16954  013510  0100               	movlb	0	; () banked
 16955  013512  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16956  013514  0E00               	movlw	0
 16957  013516  0100               	movlb	0	; () banked
 16958  013518  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 16959  01351A  0E01               	movlw	1
 16960  01351C  0100               	movlb	0	; () banked
 16961  01351E  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 16962  013520  EC57  F09F         	call	_Port_SetPin	;wreg free
 16963                           
 16964                           ;Motor.c: 88: }
 16965  013524  D01F               	goto	l1631
 16966  013526                     l1629:
 16967                           
 16968                           ;Motor.c: 89: else
 16969                           ;Motor.c: 90: {
 16970                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 16971  013526  C081  FFD9         	movff	_lMotor,fsr2l
 16972  01352A  C082  FFDA         	movff	_lMotor+1,fsr2h
 16973  01352E  04DE               	decf	postinc2,w,c
 16974  013530  E104               	bnz	u9990
 16975  013532  0E80               	movlw	128
 16976  013534  18DE               	xorwf	postinc2,w,c
 16977  013536  B4D8               	btfsc	status,2,c
 16978  013538  D007               	goto	l1632
 16979  01353A                     u9990:
 16980                           
 16981                           ;Motor.c: 92: lMotor->mDelta ++;
 16982  01353A  C081  FFD9         	movff	_lMotor,fsr2l
 16983  01353E  C082  FFDA         	movff	_lMotor+1,fsr2h
 16984  013542  2ADE               	incf	postinc2,f,c
 16985  013544  0E00               	movlw	0
 16986  013546  22DD               	addwfc	postdec2,f,c
 16987  013548                     l1632:
 16988                           
 16989                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 16990  013548  0E93               	movlw	low _PortE
 16991  01354A  0100               	movlb	0	; () banked
 16992  01354C  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 16993  01354E  0E00               	movlw	high _PortE
 16994  013550  0100               	movlb	0	; () banked
 16995  013552  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16996  013554  0E00               	movlw	0
 16997  013556  0100               	movlb	0	; () banked
 16998  013558  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 16999  01355A  0E00               	movlw	0
 17000  01355C  0100               	movlb	0	; () banked
 17001  01355E  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 17002  013560  EC57  F09F         	call	_Port_SetPin	;wreg free
 17003  013564                     l1631:
 17004                           
 17005                           ;Motor.c: 95: }
 17006                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 17007  013564  0E93               	movlw	low _PortE
 17008  013566  0100               	movlb	0	; () banked
 17009  013568  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 17010  01356A  0E00               	movlw	high _PortE
 17011  01356C  0100               	movlb	0	; () banked
 17012  01356E  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 17013  013570  0E01               	movlw	1
 17014  013572  0100               	movlb	0	; () banked
 17015  013574  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 17016  013576  0E01               	movlw	1
 17017  013578  0100               	movlb	0	; () banked
 17018  01357A  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 17019  01357C  EC57  F09F         	call	_Port_SetPin	;wreg free
 17020                           
 17021                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 17022  013580  0E93               	movlw	low _PortE
 17023  013582  0100               	movlb	0	; () banked
 17024  013584  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 17025  013586  0E00               	movlw	high _PortE
 17026  013588  0100               	movlb	0	; () banked
 17027  01358A  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 17028  01358C  0E01               	movlw	1
 17029  01358E  0100               	movlb	0	; () banked
 17030  013590  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 17031  013592  0E00               	movlw	0
 17032  013594  0100               	movlb	0	; () banked
 17033  013596  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 17034  013598  EC57  F09F         	call	_Port_SetPin	;wreg free
 17035                           
 17036                           ;Motor.c: 101: MXK_Release();
 17037  01359C  EC21  F0B2         	call	_MXK_Release	;wreg free
 17038                           
 17039                           ;Motor.c: 102: Timer0_Restart();
 17040  0135A0  EC1A  F0B3         	call	_Timer0_Restart	;wreg free
 17041                           
 17042                           ;Motor.c: 103: return;
 17043  0135A4  0012               	return	
 17044  0135A6                     l1628:
 17045                           
 17046                           ;Motor.c: 104: }
 17047                           ;Motor.c: 105: MXK_Release();
 17048  0135A6  EC21  F0B2         	call	_MXK_Release	;wreg free
 17049                           
 17050                           ;Motor.c: 106: Timer0_Stop();
 17051  0135AA  EC45  F0B3         	call	_Timer0_Stop	;wreg free
 17052                           
 17053                           ;Motor.c: 107: return;
 17054  0135AE  0012               	return	
 17055  0135B0                     l1627:
 17056                           
 17057                           ;Motor.c: 108: }
 17058                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 17059  0135B0  C066  F0BA         	movff	_lStepFunction,MXK_Queue@pCallback
 17060  0135B4  C067  F0BB         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
 17061  0135B8  C068  F0BC         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
 17062  0135BC  EC00  F0B3         	call	_MXK_Queue	;wreg free
 17063  0135C0  0012               	return		;funcret
 17064  0135C2                     __end_of_Motor_Step:
 17065                           	opt stack 0
 17066                           tosu	equ	0xFFF
 17067                           tosh	equ	0xFFE
 17068                           tosl	equ	0xFFD
 17069                           pclath	equ	0xFFA
 17070                           tblptru	equ	0xFF8
 17071                           tblptrh	equ	0xFF7
 17072                           tblptrl	equ	0xFF6
 17073                           tablat	equ	0xFF5
 17074                           prodh	equ	0xFF4
 17075                           prodl	equ	0xFF3
 17076                           intcon	equ	0xFF2
 17077                           postinc0	equ	0xFEE
 17078                           wreg	equ	0xFE8
 17079                           indf1	equ	0xFE7
 17080                           postdec1	equ	0xFE5
 17081                           fsr1h	equ	0xFE2
 17082                           fsr1l	equ	0xFE1
 17083                           indf2	equ	0xFDF
 17084                           postinc2	equ	0xFDE
 17085                           postdec2	equ	0xFDD
 17086                           plusw2	equ	0xFDB
 17087                           fsr2h	equ	0xFDA
 17088                           fsr2l	equ	0xFD9
 17089                           status	equ	0xFD8
 17090                           
 17091 ;; *************** function _Timer0_Stop *****************
 17092 ;; Defined at:
 17093 ;;		line 89 in file "Library/Timer0.c"
 17094 ;; Parameters:    Size  Location     Type
 17095 ;;		None
 17096 ;; Auto vars:     Size  Location     Type
 17097 ;;		None
 17098 ;; Return value:  Size  Location     Type
 17099 ;;                  1    wreg      void 
 17100 ;; Registers used:
 17101 ;;		None
 17102 ;; Tracked objects:
 17103 ;;		On entry : 0/0
 17104 ;;		On exit  : 0/0
 17105 ;;		Unchanged: 0/0
 17106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17110 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17111 ;;Total ram usage:        0 bytes
 17112 ;; Hardware stack levels used:    1
 17113 ;; Hardware stack levels required when called:    7
 17114 ;; This function calls:
 17115 ;;		Nothing
 17116 ;; This function is called by:
 17117 ;;		_Motor_Step
 17118 ;; This function uses a non-reentrant model
 17119 ;;
 17120                           
 17121                           	psect	text73
 17122  01668A                     __ptext73:
 17123                           	opt stack 0
 17124  01668A                     _Timer0_Stop:
 17125                           	opt stack 19
 17126                           
 17127                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 17128                           
 17129                           ;incstack = 0
 17130  01668A  9AF2               	bcf	intcon,5,c	;volatile
 17131                           
 17132                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 17133  01668C  94F2               	bcf	intcon,2,c	;volatile
 17134  01668E  0012               	return		;funcret
 17135  016690                     __end_of_Timer0_Stop:
 17136                           	opt stack 0
 17137                           tosu	equ	0xFFF
 17138                           tosh	equ	0xFFE
 17139                           tosl	equ	0xFFD
 17140                           pclath	equ	0xFFA
 17141                           tblptru	equ	0xFF8
 17142                           tblptrh	equ	0xFF7
 17143                           tblptrl	equ	0xFF6
 17144                           tablat	equ	0xFF5
 17145                           prodh	equ	0xFF4
 17146                           prodl	equ	0xFF3
 17147                           intcon	equ	0xFF2
 17148                           postinc0	equ	0xFEE
 17149                           wreg	equ	0xFE8
 17150                           indf1	equ	0xFE7
 17151                           postdec1	equ	0xFE5
 17152                           fsr1h	equ	0xFE2
 17153                           fsr1l	equ	0xFE1
 17154                           indf2	equ	0xFDF
 17155                           postinc2	equ	0xFDE
 17156                           postdec2	equ	0xFDD
 17157                           plusw2	equ	0xFDB
 17158                           fsr2h	equ	0xFDA
 17159                           fsr2l	equ	0xFD9
 17160                           status	equ	0xFD8
 17161                           
 17162 ;; *************** function _Timer0_Restart *****************
 17163 ;; Defined at:
 17164 ;;		line 83 in file "Library/Timer0.c"
 17165 ;; Parameters:    Size  Location     Type
 17166 ;;		None
 17167 ;; Auto vars:     Size  Location     Type
 17168 ;;		None
 17169 ;; Return value:  Size  Location     Type
 17170 ;;                  1    wreg      void 
 17171 ;; Registers used:
 17172 ;;		None
 17173 ;; Tracked objects:
 17174 ;;		On entry : 0/0
 17175 ;;		On exit  : 0/0
 17176 ;;		Unchanged: 0/0
 17177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17181 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17182 ;;Total ram usage:        0 bytes
 17183 ;; Hardware stack levels used:    1
 17184 ;; Hardware stack levels required when called:    7
 17185 ;; This function calls:
 17186 ;;		Nothing
 17187 ;; This function is called by:
 17188 ;;		_Motor_Step
 17189 ;; This function uses a non-reentrant model
 17190 ;;
 17191                           
 17192                           	psect	text74
 17193  016634                     __ptext74:
 17194                           	opt stack 0
 17195  016634                     _Timer0_Restart:
 17196                           	opt stack 19
 17197                           
 17198                           ;Timer0.c: 85: TMR0 = COUNTER;
 17199                           
 17200                           ;incstack = 0
 17201  016634  C029  FFD6         	movff	_COUNTER,4054	;volatile
 17202  016638  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 17203                           
 17204                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 17205  01663C  8AF2               	bsf	intcon,5,c	;volatile
 17206  01663E  0012               	return		;funcret
 17207  016640                     __end_of_Timer0_Restart:
 17208                           	opt stack 0
 17209                           tosu	equ	0xFFF
 17210                           tosh	equ	0xFFE
 17211                           tosl	equ	0xFFD
 17212                           pclath	equ	0xFFA
 17213                           tblptru	equ	0xFF8
 17214                           tblptrh	equ	0xFF7
 17215                           tblptrl	equ	0xFF6
 17216                           tablat	equ	0xFF5
 17217                           prodh	equ	0xFF4
 17218                           prodl	equ	0xFF3
 17219                           intcon	equ	0xFF2
 17220                           postinc0	equ	0xFEE
 17221                           wreg	equ	0xFE8
 17222                           indf1	equ	0xFE7
 17223                           postdec1	equ	0xFE5
 17224                           fsr1h	equ	0xFE2
 17225                           fsr1l	equ	0xFE1
 17226                           indf2	equ	0xFDF
 17227                           postinc2	equ	0xFDE
 17228                           postdec2	equ	0xFDD
 17229                           plusw2	equ	0xFDB
 17230                           fsr2h	equ	0xFDA
 17231                           fsr2l	equ	0xFD9
 17232                           status	equ	0xFD8
 17233                           
 17234 ;; *************** function _MXK_SwitchTo *****************
 17235 ;; Defined at:
 17236 ;;		line 105 in file "Library/MXK.c"
 17237 ;; Parameters:    Size  Location     Type
 17238 ;;  pModule         1    wreg     enum E6927
 17239 ;; Auto vars:     Size  Location     Type
 17240 ;;  pModule         1    7[BANK0 ] enum E6927
 17241 ;;  CUR             1    6[BANK0 ] unsigned char 
 17242 ;; Return value:  Size  Location     Type
 17243 ;;                  1    wreg      unsigned char 
 17244 ;; Registers used:
 17245 ;;		wreg, status,2, status,0, cstack
 17246 ;; Tracked objects:
 17247 ;;		On entry : 0/0
 17248 ;;		On exit  : 0/0
 17249 ;;		Unchanged: 0/0
 17250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17252 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17254 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17255 ;;Total ram usage:        2 bytes
 17256 ;; Hardware stack levels used:    1
 17257 ;; Hardware stack levels required when called:    8
 17258 ;; This function calls:
 17259 ;;		_delay_us
 17260 ;; This function is called by:
 17261 ;;		_Motor_Step
 17262 ;;		_findClosestWall
 17263 ;;		_mode1
 17264 ;;		_mode2
 17265 ;;		_mode4
 17266 ;;		_main
 17267 ;; This function uses a non-reentrant model
 17268 ;;
 17269                           
 17270                           	psect	text75
 17271  015DE6                     __ptext75:
 17272                           	opt stack 0
 17273  015DE6                     _MXK_SwitchTo:
 17274                           	opt stack 20
 17275                           
 17276                           ;incstack = 0
 17277                           ;MXK_SwitchTo@pModule stored from wreg
 17278  015DE6  0100               	movlb	0	; () banked
 17279  015DE8  6FC1               	movwf	MXK_SwitchTo@pModule& (0+255),b
 17280                           
 17281                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 17282  015DEA  5086               	movf	3974,w,c	;volatile
 17283  015DEC  0B0F               	andlw	15
 17284  015DEE  0100               	movlb	0	; () banked
 17285  015DF0  6FC0               	movwf	MXK_SwitchTo@CUR& (0+255),b
 17286                           
 17287                           ; BSR set to: 0
 17288                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 17289  015DF2  504B               	movf	_Bus_State,w,c
 17290  015DF4  A4D8               	btfss	status,2,c
 17291  015DF6  D002               	goto	l1730
 17292                           
 17293                           ; BSR set to: 0
 17294                           ;MXK.c: 110: return 0;
 17295  015DF8  0E00               	movlw	0
 17296                           
 17297                           ; BSR set to: 0
 17298  015DFA  0012               	return	
 17299  015DFC                     l1730:
 17300                           
 17301                           ; BSR set to: 0
 17302                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 17303                           
 17304                           ; BSR set to: 0
 17305  015DFC  0E00               	movlw	0
 17306  015DFE  6E4B               	movwf	_Bus_State,c
 17307                           
 17308                           ; BSR set to: 0
 17309                           ;MXK.c: 114: if (CUR != pModule)
 17310  015E00  0100               	movlb	0	; () banked
 17311  015E02  51C1               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 17312  015E04  0100               	movlb	0	; () banked
 17313  015E06  19C0               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
 17314  015E08  B4D8               	btfsc	status,2,c
 17315  015E0A  D00C               	goto	l1732
 17316                           
 17317                           ; BSR set to: 0
 17318                           ;MXK.c: 115: {
 17319                           ;MXK.c: 116: PORTG &= ~(0xF);
 17320  015E0C  0EF0               	movlw	240
 17321  015E0E  1686               	andwf	3974,f,c	;volatile
 17322                           
 17323                           ;MXK.c: 117: PORTG |= pModule;
 17324  015E10  0100               	movlb	0	; () banked
 17325  015E12  51C1               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 17326  015E14  1286               	iorwf	3974,f,c	;volatile
 17327                           
 17328                           ; BSR set to: 0
 17329                           ;MXK.c: 120: delay_us(10);
 17330  015E16  0E00               	movlw	0
 17331  015E18  0100               	movlb	0	; () banked
 17332  015E1A  6FBB               	movwf	(delay_us@us+1)& (0+255),b
 17333  015E1C  0E0A               	movlw	10
 17334  015E1E  6FBA               	movwf	delay_us@us& (0+255),b
 17335  015E20  EC13  F0AD         	call	_delay_us	;wreg free
 17336  015E24                     l1732:
 17337                           
 17338                           ;MXK.c: 121: }
 17339                           ;MXK.c: 122: return 1;
 17340  015E24  0E01               	movlw	1
 17341  015E26  0012               	return	
 17342  015E28                     __end_of_MXK_SwitchTo:
 17343                           	opt stack 0
 17344                           tosu	equ	0xFFF
 17345                           tosh	equ	0xFFE
 17346                           tosl	equ	0xFFD
 17347                           pclath	equ	0xFFA
 17348                           tblptru	equ	0xFF8
 17349                           tblptrh	equ	0xFF7
 17350                           tblptrl	equ	0xFF6
 17351                           tablat	equ	0xFF5
 17352                           prodh	equ	0xFF4
 17353                           prodl	equ	0xFF3
 17354                           intcon	equ	0xFF2
 17355                           postinc0	equ	0xFEE
 17356                           wreg	equ	0xFE8
 17357                           indf1	equ	0xFE7
 17358                           postdec1	equ	0xFE5
 17359                           fsr1h	equ	0xFE2
 17360                           fsr1l	equ	0xFE1
 17361                           indf2	equ	0xFDF
 17362                           postinc2	equ	0xFDE
 17363                           postdec2	equ	0xFDD
 17364                           plusw2	equ	0xFDB
 17365                           fsr2h	equ	0xFDA
 17366                           fsr2l	equ	0xFD9
 17367                           status	equ	0xFD8
 17368                           
 17369 ;; *************** function _MXK_Release *****************
 17370 ;; Defined at:
 17371 ;;		line 130 in file "Library/MXK.c"
 17372 ;; Parameters:    Size  Location     Type
 17373 ;;		None
 17374 ;; Auto vars:     Size  Location     Type
 17375 ;;		None
 17376 ;; Return value:  Size  Location     Type
 17377 ;;                  1    wreg      unsigned char 
 17378 ;; Registers used:
 17379 ;;		wreg, status,2, status,0
 17380 ;; Tracked objects:
 17381 ;;		On entry : 0/0
 17382 ;;		On exit  : 0/0
 17383 ;;		Unchanged: 0/0
 17384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17388 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17389 ;;Total ram usage:        0 bytes
 17390 ;; Hardware stack levels used:    1
 17391 ;; Hardware stack levels required when called:    7
 17392 ;; This function calls:
 17393 ;;		Nothing
 17394 ;; This function is called by:
 17395 ;;		_Motor_Step
 17396 ;;		_init
 17397 ;;		_findClosestWall
 17398 ;;		_mode1
 17399 ;;		_mode2
 17400 ;;		_mode4
 17401 ;;		_main
 17402 ;; This function uses a non-reentrant model
 17403 ;;
 17404                           
 17405                           	psect	text76
 17406  016442                     __ptext76:
 17407                           	opt stack 0
 17408  016442                     _MXK_Release:
 17409                           	opt stack 21
 17410                           
 17411                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 17412                           
 17413                           ;incstack = 0
 17414  016442  0E01               	movlw	1
 17415  016444  6E4B               	movwf	_Bus_State,c
 17416                           
 17417                           ;MXK.c: 134: if (lQueue != 0)
 17418  016446  0100               	movlb	0	; () banked
 17419  016448  5163               	movf	_lQueue& (0+255),w,b	;volatile
 17420  01644A  0100               	movlb	0	; () banked
 17421  01644C  1164               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 17422  01644E  0100               	movlb	0	; () banked
 17423  016450  1165               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 17424  016452  B4D8               	btfsc	status,2,c
 17425  016454  D002               	goto	l1735
 17426                           
 17427                           ; BSR set to: 0
 17428                           ;MXK.c: 135: return 1;
 17429  016456  0E01               	movlw	1
 17430                           
 17431                           ; BSR set to: 0
 17432  016458  0012               	return	
 17433  01645A                     l1735:
 17434                           
 17435                           ; BSR set to: 0
 17436                           ;MXK.c: 137: return 0;
 17437                           
 17438                           ; BSR set to: 0
 17439  01645A  0E00               	movlw	0
 17440  01645C  0012               	return	
 17441  01645E                     __end_of_MXK_Release:
 17442                           	opt stack 0
 17443                           tosu	equ	0xFFF
 17444                           tosh	equ	0xFFE
 17445                           tosl	equ	0xFFD
 17446                           pclath	equ	0xFFA
 17447                           tblptru	equ	0xFF8
 17448                           tblptrh	equ	0xFF7
 17449                           tblptrl	equ	0xFF6
 17450                           tablat	equ	0xFF5
 17451                           prodh	equ	0xFF4
 17452                           prodl	equ	0xFF3
 17453                           intcon	equ	0xFF2
 17454                           postinc0	equ	0xFEE
 17455                           wreg	equ	0xFE8
 17456                           indf1	equ	0xFE7
 17457                           postdec1	equ	0xFE5
 17458                           fsr1h	equ	0xFE2
 17459                           fsr1l	equ	0xFE1
 17460                           indf2	equ	0xFDF
 17461                           postinc2	equ	0xFDE
 17462                           postdec2	equ	0xFDD
 17463                           plusw2	equ	0xFDB
 17464                           fsr2h	equ	0xFDA
 17465                           fsr2l	equ	0xFD9
 17466                           status	equ	0xFD8
 17467                           
 17468 ;; *************** function _MXK_Queue *****************
 17469 ;; Defined at:
 17470 ;;		line 144 in file "Library/MXK.c"
 17471 ;; Parameters:    Size  Location     Type
 17472 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
 17473 ;;		 -> Absolute function(1), Motor_Step(1), 
 17474 ;; Auto vars:     Size  Location     Type
 17475 ;;		None
 17476 ;; Return value:  Size  Location     Type
 17477 ;;                  1    wreg      void 
 17478 ;; Registers used:
 17479 ;;		wreg, status,2, status,0
 17480 ;; Tracked objects:
 17481 ;;		On entry : 0/0
 17482 ;;		On exit  : 0/0
 17483 ;;		Unchanged: 0/0
 17484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17485 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17486 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17488 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17489 ;;Total ram usage:        3 bytes
 17490 ;; Hardware stack levels used:    1
 17491 ;; Hardware stack levels required when called:    7
 17492 ;; This function calls:
 17493 ;;		Nothing
 17494 ;; This function is called by:
 17495 ;;		_Motor_Step
 17496 ;; This function uses a non-reentrant model
 17497 ;;
 17498                           
 17499                           	psect	text77
 17500  016600                     __ptext77:
 17501                           	opt stack 0
 17502  016600                     _MXK_Queue:
 17503                           	opt stack 19
 17504                           
 17505                           ;MXK.c: 146: lQueue = pCallback;
 17506                           
 17507                           ; BSR set to: 0
 17508                           ;incstack = 0
 17509  016600  C0BA  F063         	movff	MXK_Queue@pCallback,_lQueue	;volatile
 17510  016604  C0BB  F064         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
 17511  016608  C0BC  F065         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
 17512  01660C  0012               	return		;funcret
 17513  01660E                     __end_of_MXK_Queue:
 17514                           	opt stack 0
 17515                           tosu	equ	0xFFF
 17516                           tosh	equ	0xFFE
 17517                           tosl	equ	0xFFD
 17518                           pclath	equ	0xFFA
 17519                           tblptru	equ	0xFF8
 17520                           tblptrh	equ	0xFF7
 17521                           tblptrl	equ	0xFF6
 17522                           tablat	equ	0xFF5
 17523                           prodh	equ	0xFF4
 17524                           prodl	equ	0xFF3
 17525                           intcon	equ	0xFF2
 17526                           postinc0	equ	0xFEE
 17527                           wreg	equ	0xFE8
 17528                           indf1	equ	0xFE7
 17529                           postdec1	equ	0xFE5
 17530                           fsr1h	equ	0xFE2
 17531                           fsr1l	equ	0xFE1
 17532                           indf2	equ	0xFDF
 17533                           postinc2	equ	0xFDE
 17534                           postdec2	equ	0xFDD
 17535                           plusw2	equ	0xFDB
 17536                           fsr2h	equ	0xFDA
 17537                           fsr2l	equ	0xFD9
 17538                           status	equ	0xFD8
 17539                           
 17540 ;; *************** function _MXK_BlockSwitchTo *****************
 17541 ;; Defined at:
 17542 ;;		line 82 in file "Library/MXK.c"
 17543 ;; Parameters:    Size  Location     Type
 17544 ;;  pModule         1    wreg     enum E6927
 17545 ;; Auto vars:     Size  Location     Type
 17546 ;;  pModule         1    7[BANK0 ] enum E6927
 17547 ;;  CUR             1    6[BANK0 ] unsigned char 
 17548 ;; Return value:  Size  Location     Type
 17549 ;;                  1    wreg      unsigned char 
 17550 ;; Registers used:
 17551 ;;		wreg, status,2, status,0, cstack
 17552 ;; Tracked objects:
 17553 ;;		On entry : 0/0
 17554 ;;		On exit  : 0/0
 17555 ;;		Unchanged: 0/0
 17556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17558 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17560 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17561 ;;Total ram usage:        2 bytes
 17562 ;; Hardware stack levels used:    1
 17563 ;; Hardware stack levels required when called:    8
 17564 ;; This function calls:
 17565 ;;		_delay_us
 17566 ;; This function is called by:
 17567 ;;		_init
 17568 ;; This function uses a non-reentrant model
 17569 ;;
 17570                           
 17571                           	psect	text78
 17572  015F24                     __ptext78:
 17573                           	opt stack 0
 17574  015F24                     _MXK_BlockSwitchTo:
 17575                           	opt stack 21
 17576                           
 17577                           ;incstack = 0
 17578                           ;MXK_BlockSwitchTo@pModule stored from wreg
 17579  015F24  0100               	movlb	0	; () banked
 17580  015F26  6FC1               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
 17581                           
 17582                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
 17583  015F28  5086               	movf	3974,w,c	;volatile
 17584  015F2A  0B0F               	andlw	15
 17585  015F2C  0100               	movlb	0	; () banked
 17586  015F2E  6FC0               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
 17587  015F30                     
 17588                           ; BSR set to: 0
 17589                           
 17590                           ; BSR set to: 0
 17591  015F30  504B               	movf	_Bus_State,w,c
 17592  015F32  B4D8               	btfsc	status,2,c
 17593  015F34  D7FD               	goto	l1724
 17594                           
 17595                           ;MXK.c: 88: Bus_State = eMXK_Busy;
 17596  015F36  0E00               	movlw	0
 17597  015F38  6E4B               	movwf	_Bus_State,c
 17598                           
 17599                           ;MXK.c: 90: if (CUR != pModule)
 17600  015F3A  0100               	movlb	0	; () banked
 17601  015F3C  51C1               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 17602  015F3E  0100               	movlb	0	; () banked
 17603  015F40  19C0               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
 17604  015F42  B4D8               	btfsc	status,2,c
 17605  015F44  D00C               	goto	l1726
 17606                           
 17607                           ; BSR set to: 0
 17608                           ;MXK.c: 91: {
 17609                           ;MXK.c: 92: PORTG &= ~(0xF);
 17610  015F46  0EF0               	movlw	240
 17611  015F48  1686               	andwf	3974,f,c	;volatile
 17612                           
 17613                           ;MXK.c: 93: PORTG |= pModule;
 17614  015F4A  0100               	movlb	0	; () banked
 17615  015F4C  51C1               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 17616  015F4E  1286               	iorwf	3974,f,c	;volatile
 17617                           
 17618                           ; BSR set to: 0
 17619                           ;MXK.c: 96: delay_us(10);
 17620  015F50  0E00               	movlw	0
 17621  015F52  0100               	movlb	0	; () banked
 17622  015F54  6FBB               	movwf	(delay_us@us+1)& (0+255),b
 17623  015F56  0E0A               	movlw	10
 17624  015F58  6FBA               	movwf	delay_us@us& (0+255),b
 17625  015F5A  EC13  F0AD         	call	_delay_us	;wreg free
 17626  015F5E                     l1726:
 17627                           
 17628                           ;MXK.c: 97: }
 17629                           ;MXK.c: 98: return 1;
 17630  015F5E  0E01               	movlw	1
 17631  015F60  0012               	return	
 17632  015F62                     __end_of_MXK_BlockSwitchTo:
 17633                           	opt stack 0
 17634                           tosu	equ	0xFFF
 17635                           tosh	equ	0xFFE
 17636                           tosl	equ	0xFFD
 17637                           pclath	equ	0xFFA
 17638                           tblptru	equ	0xFF8
 17639                           tblptrh	equ	0xFF7
 17640                           tblptrl	equ	0xFF6
 17641                           tablat	equ	0xFF5
 17642                           prodh	equ	0xFF4
 17643                           prodl	equ	0xFF3
 17644                           intcon	equ	0xFF2
 17645                           postinc0	equ	0xFEE
 17646                           wreg	equ	0xFE8
 17647                           indf1	equ	0xFE7
 17648                           postdec1	equ	0xFE5
 17649                           fsr1h	equ	0xFE2
 17650                           fsr1l	equ	0xFE1
 17651                           indf2	equ	0xFDF
 17652                           postinc2	equ	0xFDE
 17653                           postdec2	equ	0xFDD
 17654                           plusw2	equ	0xFDB
 17655                           fsr2h	equ	0xFDA
 17656                           fsr2l	equ	0xFD9
 17657                           status	equ	0xFD8
 17658                           
 17659 ;; *************** function _delay_us *****************
 17660 ;; Defined at:
 17661 ;;		line 255 in file "Library/Types.c"
 17662 ;; Parameters:    Size  Location     Type
 17663 ;;  us              2    0[BANK0 ] unsigned short 
 17664 ;; Auto vars:     Size  Location     Type
 17665 ;;  u               4    2[BANK0 ] unsigned long 
 17666 ;; Return value:  Size  Location     Type
 17667 ;;                  1    wreg      void 
 17668 ;; Registers used:
 17669 ;;		wreg, status,2, status,0
 17670 ;; Tracked objects:
 17671 ;;		On entry : 0/0
 17672 ;;		On exit  : 0/0
 17673 ;;		Unchanged: 0/0
 17674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17675 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17676 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17678 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17679 ;;Total ram usage:        6 bytes
 17680 ;; Hardware stack levels used:    1
 17681 ;; Hardware stack levels required when called:    7
 17682 ;; This function calls:
 17683 ;;		Nothing
 17684 ;; This function is called by:
 17685 ;;		_MXK_BlockSwitchTo
 17686 ;;		_MXK_SwitchTo
 17687 ;; This function uses a non-reentrant model
 17688 ;;
 17689                           
 17690                           	psect	text79
 17691  015A26                     __ptext79:
 17692                           	opt stack 0
 17693  015A26                     _delay_us:
 17694                           	opt stack 20
 17695                           
 17696                           ;Types.c: 256: unsigned long u;
 17697                           ;Types.c: 257: while (us--) {
 17698                           
 17699                           ;incstack = 0
 17700  015A26  D01C               	goto	u9160
 17701  015A28                     l12505:
 17702                           
 17703                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 17704  015A28  0E00               	movlw	0
 17705  015A2A  0100               	movlb	0	; () banked
 17706  015A2C  6FBC               	movwf	delay_us@u& (0+255),b
 17707  015A2E  0E00               	movlw	0
 17708  015A30  6FBD               	movwf	(delay_us@u+1)& (0+255),b
 17709  015A32  0E00               	movlw	0
 17710  015A34  6FBE               	movwf	(delay_us@u+2)& (0+255),b
 17711  015A36  0E00               	movlw	0
 17712  015A38  6FBF               	movwf	(delay_us@u+3)& (0+255),b
 17713  015A3A                     l12507:
 17714                           
 17715                           ; BSR set to: 0
 17716  015A3A  0100               	movlb	0	; () banked
 17717  015A3C  51BC               	movf	delay_us@u& (0+255),w,b
 17718  015A3E  0100               	movlb	0	; () banked
 17719  015A40  11BD               	iorwf	(delay_us@u+1)& (0+255),w,b
 17720  015A42  0100               	movlb	0	; () banked
 17721  015A44  11BE               	iorwf	(delay_us@u+2)& (0+255),w,b
 17722  015A46  0100               	movlb	0	; () banked
 17723  015A48  11BF               	iorwf	(delay_us@u+3)& (0+255),w,b
 17724  015A4A  A4D8               	btfss	status,2,c
 17725  015A4C  D009               	goto	u9160
 17726                           
 17727                           ; BSR set to: 0
 17728                           
 17729                           ; BSR set to: 0
 17730  015A4E  F000               	nop		; ;# 
 17731  015A50  0E01               	movlw	1
 17732  015A52  0100               	movlb	0	; () banked
 17733  015A54  27BC               	addwf	delay_us@u& (0+255),f,b
 17734  015A56  0E00               	movlw	0
 17735  015A58  23BD               	addwfc	(delay_us@u+1)& (0+255),f,b
 17736  015A5A  23BE               	addwfc	(delay_us@u+2)& (0+255),f,b
 17737  015A5C  23BF               	addwfc	(delay_us@u+3)& (0+255),f,b
 17738  015A5E  D7ED               	goto	l12507
 17739  015A60                     u9160:
 17740                           
 17741                           ; BSR set to: 0
 17742                           
 17743                           ; BSR set to: 0
 17744  015A60  0100               	movlb	0	; () banked
 17745  015A62  07BA               	decf	delay_us@us& (0+255),f,b
 17746  015A64  A0D8               	btfss	status,0,c
 17747  015A66  07BB               	decf	(delay_us@us+1)& (0+255),f,b
 17748  015A68  0100               	movlb	0	; () banked
 17749  015A6A  29BA               	incf	delay_us@us& (0+255),w,b
 17750  015A6C  E1DD               	bnz	l12505
 17751  015A6E  0100               	movlb	0	; () banked
 17752  015A70  29BB               	incf	(delay_us@us+1)& (0+255),w,b
 17753  015A72  B4D8               	btfsc	status,2,c
 17754  015A74  0012               	return	
 17755  015A76  D7D8               	goto	l832
 17756  015A78                     __end_of_delay_us:
 17757                           	opt stack 0
 17758                           tosu	equ	0xFFF
 17759                           tosh	equ	0xFFE
 17760                           tosl	equ	0xFFD
 17761                           pclath	equ	0xFFA
 17762                           tblptru	equ	0xFF8
 17763                           tblptrh	equ	0xFF7
 17764                           tblptrl	equ	0xFF6
 17765                           tablat	equ	0xFF5
 17766                           prodh	equ	0xFF4
 17767                           prodl	equ	0xFF3
 17768                           intcon	equ	0xFF2
 17769                           postinc0	equ	0xFEE
 17770                           wreg	equ	0xFE8
 17771                           indf1	equ	0xFE7
 17772                           postdec1	equ	0xFE5
 17773                           fsr1h	equ	0xFE2
 17774                           fsr1l	equ	0xFE1
 17775                           indf2	equ	0xFDF
 17776                           postinc2	equ	0xFDE
 17777                           postdec2	equ	0xFDD
 17778                           plusw2	equ	0xFDB
 17779                           fsr2h	equ	0xFDA
 17780                           fsr2l	equ	0xFD9
 17781                           status	equ	0xFD8
 17782                           
 17783 ;; *************** function _LCD_Init *****************
 17784 ;; Defined at:
 17785 ;;		line 172 in file "Library/LCD.c"
 17786 ;; Parameters:    Size  Location     Type
 17787 ;;		None
 17788 ;; Auto vars:     Size  Location     Type
 17789 ;;  i               2   55[BANK0 ] unsigned short 
 17790 ;; Return value:  Size  Location     Type
 17791 ;;                  1    wreg      void 
 17792 ;; Registers used:
 17793 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17794 ;; Tracked objects:
 17795 ;;		On entry : 0/0
 17796 ;;		On exit  : 0/0
 17797 ;;		Unchanged: 0/0
 17798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17800 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17801 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17802 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17803 ;;Total ram usage:        4 bytes
 17804 ;; Hardware stack levels used:    1
 17805 ;; Hardware stack levels required when called:   15
 17806 ;; This function calls:
 17807 ;;		_Configure_GPIOs
 17808 ;;		_LCD_Fill
 17809 ;;		_LCD_Write
 17810 ;;		_Set_Rotation
 17811 ;;		_delay_ms
 17812 ;; This function is called by:
 17813 ;;		_init
 17814 ;; This function uses a non-reentrant model
 17815 ;;
 17816                           
 17817                           	psect	text80
 17818  012F04                     __ptext80:
 17819                           	opt stack 0
 17820  012F04                     _LCD_Init:
 17821                           	opt stack 14
 17822                           
 17823                           ;LCD.c: 174: UINT16 i;
 17824                           ;LCD.c: 175: Configure_GPIOs();
 17825                           
 17826                           ; BSR set to: 0
 17827                           ;incstack = 0
 17828  012F04  EC23  F0AA         	call	_Configure_GPIOs	;wreg free
 17829                           
 17830                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
 17831  012F08  0E00               	movlw	0
 17832  012F0A  0100               	movlb	0	; () banked
 17833  012F0C  6FF2               	movwf	(LCD_Init@i+1)& (0+255),b
 17834  012F0E  0E00               	movlw	0
 17835  012F10  6FF1               	movwf	LCD_Init@i& (0+255),b
 17836                           
 17837                           ; BSR set to: 0
 17838  012F12  0100               	movlb	0	; () banked
 17839  012F14  51F2               	movf	(LCD_Init@i+1)& (0+255),w,b
 17840  012F16  E106               	bnz	u11080
 17841  012F18  0E59               	movlw	89
 17842  012F1A  0100               	movlb	0	; () banked
 17843  012F1C  5DF1               	subwf	LCD_Init@i& (0+255),w,b
 17844  012F1E  B0D8               	btfsc	status,0,c
 17845  012F20  D08B               	goto	u11120
 17846  012F22  D001               	goto	l85
 17847  012F24                     u11080:
 17848                           
 17849                           ; BSR set to: 0
 17850  012F24  D089               	goto	u11120
 17851  012F26                     l85:
 17852                           
 17853                           ; BSR set to: 0
 17854                           ;LCD.c: 178: {
 17855                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
 17856                           
 17857                           ; BSR set to: 0
 17858  012F26  90D8               	bcf	status,0,c
 17859  012F28  0100               	movlb	0	; () banked
 17860  012F2A  35F1               	rlcf	LCD_Init@i& (0+255),w,b
 17861  012F2C  6EF6               	movwf	tblptrl,c
 17862  012F2E  0100               	movlb	0	; () banked
 17863  012F30  35F2               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 17864  012F32  6EF7               	movwf	tblptrh,c
 17865  012F34  0E33               	movlw	low _InitList
 17866  012F36  26F6               	addwf	tblptrl,f,c
 17867  012F38  0EFC               	movlw	high _InitList
 17868  012F3A  22F7               	addwfc	tblptrh,f,c
 17869  012F3C                     	if	1	;There are 3 active tblptr bytes
 17870  012F3C  6AF8               	clrf	tblptru,c
 17871  012F3E  0E00               	movlw	low (__mediumconst shr (0+16))
 17872  012F40  22F8               	addwfc	tblptru,f,c
 17873  012F42                     	endif
 17874  012F42  0009               	tblrd		*+
 17875  012F44  0E80               	movlw	128
 17876  012F46  18F5               	xorwf	tablat,w,c
 17877  012F48  0009               	tblrd		*+
 17878  012F4A  10F5               	iorwf	tablat,w,c
 17879  012F4C  A4D8               	btfss	status,2,c
 17880  012F4E  D022               	goto	l87
 17881                           
 17882                           ; BSR set to: 0
 17883  012F50  0100               	movlb	0	; () banked
 17884  012F52  51F2               	movf	(LCD_Init@i+1)& (0+255),w,b
 17885  012F54  E11F               	bnz	l14333
 17886  012F56  0E58               	movlw	88
 17887  012F58  0100               	movlb	0	; () banked
 17888  012F5A  5DF1               	subwf	LCD_Init@i& (0+255),w,b
 17889  012F5C  B0D8               	btfsc	status,0,c
 17890  012F5E  D01A               	goto	l87
 17891                           
 17892                           ; BSR set to: 0
 17893                           ;LCD.c: 180: delay_ms(InitList[++i]);
 17894  012F60  0100               	movlb	0	; () banked
 17895  012F62  4BF1               	infsnz	LCD_Init@i& (0+255),f,b
 17896  012F64  2BF2               	incf	(LCD_Init@i+1)& (0+255),f,b
 17897  012F66  90D8               	bcf	status,0,c
 17898  012F68  0100               	movlb	0	; () banked
 17899  012F6A  35F1               	rlcf	LCD_Init@i& (0+255),w,b
 17900  012F6C  6EF6               	movwf	tblptrl,c
 17901  012F6E  0100               	movlb	0	; () banked
 17902  012F70  35F2               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 17903  012F72  6EF7               	movwf	tblptrh,c
 17904  012F74  0E33               	movlw	low _InitList
 17905  012F76  26F6               	addwf	tblptrl,f,c
 17906  012F78  0EFC               	movlw	high _InitList
 17907  012F7A  22F7               	addwfc	tblptrh,f,c
 17908  012F7C                     	if	1	;There are 3 active tblptr bytes
 17909  012F7C  6AF8               	clrf	tblptru,c
 17910  012F7E  0E00               	movlw	low (__mediumconst shr (0+16))
 17911  012F80  22F8               	addwfc	tblptru,f,c
 17912  012F82                     	endif
 17913  012F82  0009               	tblrd		*+
 17914  012F84  CFF5 F0BA          	movff	tablat,delay_ms@ms
 17915  012F88  000A               	tblrd		*-
 17916  012F8A  CFF5 F0BB          	movff	tablat,delay_ms@ms+1
 17917  012F8E  ECFC  F0AA         	call	_delay_ms	;wreg free
 17918  012F92  D04B               	goto	l90
 17919  012F94                     l87:
 17920  012F94                     l14333:
 17921                           
 17922                           ;LCD.c: 181: else
 17923                           ;LCD.c: 182: {
 17924                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
 17925  012F94  90D8               	bcf	status,0,c
 17926  012F96  0100               	movlb	0	; () banked
 17927  012F98  35F1               	rlcf	LCD_Init@i& (0+255),w,b
 17928  012F9A  6EF6               	movwf	tblptrl,c
 17929  012F9C  0100               	movlb	0	; () banked
 17930  012F9E  35F2               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 17931  012FA0  6EF7               	movwf	tblptrh,c
 17932  012FA2  0E33               	movlw	low _InitList
 17933  012FA4  26F6               	addwf	tblptrl,f,c
 17934  012FA6  0EFC               	movlw	high _InitList
 17935  012FA8  22F7               	addwfc	tblptrh,f,c
 17936  012FAA                     	if	1	;There are 3 active tblptr bytes
 17937  012FAA  6AF8               	clrf	tblptru,c
 17938  012FAC  0E00               	movlw	low (__mediumconst shr (0+16))
 17939  012FAE  22F8               	addwfc	tblptru,f,c
 17940  012FB0                     	endif
 17941  012FB0  0009               	tblrd		*+
 17942  012FB2  0E00               	movlw	0
 17943  012FB4  5EF5               	subwf	tablat,f,c
 17944  012FB6  0009               	tblrd		*+
 17945  012FB8  0E01               	movlw	1
 17946  012FBA  5AF5               	subwfb	tablat,f,c
 17947  012FBC  A0D8               	btfss	status,0,c
 17948  012FBE  D020               	goto	l89
 17949                           
 17950                           ; BSR set to: 0
 17951  012FC0  0E00               	movlw	0
 17952  012FC2  0100               	movlb	0	; () banked
 17953  012FC4  6FBD               	movwf	LCD_Write@mode& (0+255),b
 17954  012FC6  90D8               	bcf	status,0,c
 17955  012FC8  0100               	movlb	0	; () banked
 17956  012FCA  35F1               	rlcf	LCD_Init@i& (0+255),w,b
 17957  012FCC  6EF6               	movwf	tblptrl,c
 17958  012FCE  0100               	movlb	0	; () banked
 17959  012FD0  35F2               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 17960  012FD2  6EF7               	movwf	tblptrh,c
 17961  012FD4  0E33               	movlw	low _InitList
 17962  012FD6  26F6               	addwf	tblptrl,f,c
 17963  012FD8  0EFC               	movlw	high _InitList
 17964  012FDA  22F7               	addwfc	tblptrh,f,c
 17965  012FDC                     	if	1	;There are 3 active tblptr bytes
 17966  012FDC  6AF8               	clrf	tblptru,c
 17967  012FDE  0E00               	movlw	low (__mediumconst shr (0+16))
 17968  012FE0  22F8               	addwfc	tblptru,f,c
 17969  012FE2                     	endif
 17970  012FE2  0009               	tblrd		*+
 17971  012FE4  CFF5 F0EF          	movff	tablat,??_LCD_Init
 17972  012FE8  0009               	tblrd		*+
 17973  012FEA  CFF5 F0F0          	movff	tablat,??_LCD_Init+1
 17974  012FEE  C0F0  F0EF         	movff	??_LCD_Init+1,??_LCD_Init
 17975  012FF2  0100               	movlb	0	; () banked
 17976  012FF4  6BF0               	clrf	(??_LCD_Init+1)& (0+255),b
 17977  012FF6  0100               	movlb	0	; () banked
 17978  012FF8  51EF               	movf	??_LCD_Init& (0+255),w,b
 17979  012FFA  EC58  F0B1         	call	_LCD_Write
 17980  012FFE  D015               	goto	l90
 17981  013000                     l89:
 17982                           
 17983                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
 17984  013000  0E01               	movlw	1
 17985  013002  0100               	movlb	0	; () banked
 17986  013004  6FBD               	movwf	LCD_Write@mode& (0+255),b
 17987  013006  90D8               	bcf	status,0,c
 17988  013008  0100               	movlb	0	; () banked
 17989  01300A  35F1               	rlcf	LCD_Init@i& (0+255),w,b
 17990  01300C  6EF6               	movwf	tblptrl,c
 17991  01300E  0100               	movlb	0	; () banked
 17992  013010  35F2               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 17993  013012  6EF7               	movwf	tblptrh,c
 17994  013014  0E33               	movlw	low _InitList
 17995  013016  26F6               	addwf	tblptrl,f,c
 17996  013018  0EFC               	movlw	high _InitList
 17997  01301A  22F7               	addwfc	tblptrh,f,c
 17998  01301C                     	if	1	;There are 3 active tblptr bytes
 17999  01301C  6AF8               	clrf	tblptru,c
 18000  01301E  0E00               	movlw	low (__mediumconst shr (0+16))
 18001  013020  22F8               	addwfc	tblptru,f,c
 18002  013022                     	endif
 18003  013022  0008               	tblrd		*
 18004  013024  50F5               	movf	tablat,w,c
 18005  013026  EC58  F0B1         	call	_LCD_Write
 18006  01302A                     l90:
 18007  01302A  0100               	movlb	0	; () banked
 18008  01302C  4BF1               	infsnz	LCD_Init@i& (0+255),f,b
 18009  01302E  2BF2               	incf	(LCD_Init@i+1)& (0+255),f,b
 18010                           
 18011                           ; BSR set to: 0
 18012  013030  0100               	movlb	0	; () banked
 18013  013032  51F2               	movf	(LCD_Init@i+1)& (0+255),w,b
 18014  013034  E101               	bnz	l14343
 18015  013036  D770               	goto	L12
 18016  013038                     u11120:
 18017  013038                     l14343:
 18018                           
 18019                           ; BSR set to: 0
 18020                           ;LCD.c: 185: }
 18021                           ;LCD.c: 186: }
 18022                           ;LCD.c: 187: delay_ms(100);
 18023  013038  0E00               	movlw	0
 18024  01303A  0100               	movlb	0	; () banked
 18025  01303C  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 18026  01303E  0E64               	movlw	100
 18027  013040  6FBA               	movwf	delay_ms@ms& (0+255),b
 18028  013042  ECFC  F0AA         	call	_delay_ms	;wreg free
 18029                           
 18030                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
 18031  013046  0E00               	movlw	0
 18032  013048  0100               	movlb	0	; () banked
 18033  01304A  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18034  01304C  0E29               	movlw	41
 18035  01304E  EC58  F0B1         	call	_LCD_Write
 18036                           
 18037                           ;LCD.c: 189: Set_Rotation(1);
 18038  013052  0E01               	movlw	1
 18039  013054  ECDA  F0A5         	call	_Set_Rotation
 18040                           
 18041                           ;LCD.c: 191: delay_ms(100);
 18042  013058  0E00               	movlw	0
 18043  01305A  0100               	movlb	0	; () banked
 18044  01305C  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 18045  01305E  0E64               	movlw	100
 18046  013060  6FBA               	movwf	delay_ms@ms& (0+255),b
 18047  013062  ECFC  F0AA         	call	_delay_ms	;wreg free
 18048                           
 18049                           ;LCD.c: 192: LCD_Fill(0x0000);
 18050  013066  0E00               	movlw	0
 18051  013068  0100               	movlb	0	; () banked
 18052  01306A  6FC4               	movwf	(LCD_Fill@pColour+1)& (0+255),b
 18053  01306C  0E00               	movlw	0
 18054  01306E  6FC3               	movwf	LCD_Fill@pColour& (0+255),b
 18055  013070  ECE7  F0AC         	call	_LCD_Fill	;wreg free
 18056  013074  0012               	return		;funcret
 18057  013076                     __end_of_LCD_Init:
 18058                           	opt stack 0
 18059                           tosu	equ	0xFFF
 18060                           tosh	equ	0xFFE
 18061                           tosl	equ	0xFFD
 18062                           pclath	equ	0xFFA
 18063                           tblptru	equ	0xFF8
 18064                           tblptrh	equ	0xFF7
 18065                           tblptrl	equ	0xFF6
 18066                           tablat	equ	0xFF5
 18067                           prodh	equ	0xFF4
 18068                           prodl	equ	0xFF3
 18069                           intcon	equ	0xFF2
 18070                           postinc0	equ	0xFEE
 18071                           wreg	equ	0xFE8
 18072                           indf1	equ	0xFE7
 18073                           postdec1	equ	0xFE5
 18074                           fsr1h	equ	0xFE2
 18075                           fsr1l	equ	0xFE1
 18076                           indf2	equ	0xFDF
 18077                           postinc2	equ	0xFDE
 18078                           postdec2	equ	0xFDD
 18079                           plusw2	equ	0xFDB
 18080                           fsr2h	equ	0xFDA
 18081                           fsr2l	equ	0xFD9
 18082                           status	equ	0xFD8
 18083                           
 18084 ;; *************** function _Set_Rotation *****************
 18085 ;; Defined at:
 18086 ;;		line 248 in file "Library/LCD.c"
 18087 ;; Parameters:    Size  Location     Type
 18088 ;;  m               1    wreg     unsigned char 
 18089 ;; Auto vars:     Size  Location     Type
 18090 ;;  m               1    5[BANK0 ] unsigned char 
 18091 ;;  rotation        1    6[BANK0 ] unsigned char 
 18092 ;; Return value:  Size  Location     Type
 18093 ;;                  1    wreg      void 
 18094 ;; Registers used:
 18095 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18096 ;; Tracked objects:
 18097 ;;		On entry : 0/0
 18098 ;;		On exit  : 0/0
 18099 ;;		Unchanged: 0/0
 18100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18102 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18104 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18105 ;;Total ram usage:        2 bytes
 18106 ;; Hardware stack levels used:    1
 18107 ;; Hardware stack levels required when called:    9
 18108 ;; This function calls:
 18109 ;;		_LCD_Write
 18110 ;; This function is called by:
 18111 ;;		_LCD_Init
 18112 ;; This function uses a non-reentrant model
 18113 ;;
 18114                           
 18115                           	psect	text81
 18116  014BB4                     __ptext81:
 18117                           	opt stack 0
 18118  014BB4                     _Set_Rotation:
 18119                           	opt stack 19
 18120                           
 18121                           ;incstack = 0
 18122                           ;Set_Rotation@m stored from wreg
 18123  014BB4  0100               	movlb	0	; () banked
 18124  014BB6  6FBF               	movwf	Set_Rotation@m& (0+255),b
 18125                           
 18126                           ;LCD.c: 250: UINT8 rotation = 0x00;
 18127  014BB8  0E00               	movlw	0
 18128  014BBA  0100               	movlb	0	; () banked
 18129  014BBC  6FC0               	movwf	Set_Rotation@rotation& (0+255),b
 18130                           
 18131                           ; BSR set to: 0
 18132                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
 18133  014BBE  0E00               	movlw	0
 18134  014BC0  0100               	movlb	0	; () banked
 18135  014BC2  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18136  014BC4  0E36               	movlw	54
 18137  014BC6  EC58  F0B1         	call	_LCD_Write
 18138                           
 18139                           ;LCD.c: 253: rotation = (m % 4);
 18140  014BCA  0100               	movlb	0	; () banked
 18141  014BCC  51BF               	movf	Set_Rotation@m& (0+255),w,b
 18142  014BCE  0B03               	andlw	3
 18143  014BD0  0100               	movlb	0	; () banked
 18144  014BD2  6FC0               	movwf	Set_Rotation@rotation& (0+255),b
 18145                           
 18146                           ;LCD.c: 255: switch(rotation)
 18147  014BD4  D02C               	goto	l117
 18148  014BD6                     
 18149                           ; BSR set to: 0
 18150                           ;LCD.c: 258: {
 18151                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
 18152                           
 18153                           ; BSR set to: 0
 18154  014BD6  0E01               	movlw	1
 18155  014BD8  0100               	movlb	0	; () banked
 18156  014BDA  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18157  014BDC  0EC8               	movlw	200
 18158  014BDE  EC58  F0B1         	call	_LCD_Write
 18159                           
 18160                           ;LCD.c: 260: w = 128;
 18161  014BE2  0E80               	movlw	128
 18162  014BE4  6E50               	movwf	_w,c
 18163                           
 18164                           ;LCD.c: 261: l = 128;
 18165  014BE6  0E80               	movlw	128
 18166  014BE8  6E4F               	movwf	_l,c
 18167                           
 18168                           ;LCD.c: 262: break;
 18169  014BEA  0012               	return	
 18170  014BEC                     
 18171                           ;LCD.c: 265: {
 18172                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
 18173  014BEC  0E01               	movlw	1
 18174  014BEE  0100               	movlb	0	; () banked
 18175  014BF0  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18176  014BF2  0EA8               	movlw	168
 18177  014BF4  EC58  F0B1         	call	_LCD_Write
 18178                           
 18179                           ;LCD.c: 267: w = 128;
 18180  014BF8  0E80               	movlw	128
 18181  014BFA  6E50               	movwf	_w,c
 18182                           
 18183                           ;LCD.c: 268: l = 128;
 18184  014BFC  0E80               	movlw	128
 18185  014BFE  6E4F               	movwf	_l,c
 18186                           
 18187                           ;LCD.c: 269: break;
 18188  014C00  0012               	return	
 18189  014C02                     
 18190                           ;LCD.c: 272: {
 18191                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
 18192  014C02  0E01               	movlw	1
 18193  014C04  0100               	movlb	0	; () banked
 18194  014C06  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18195  014C08  0E08               	movlw	8
 18196  014C0A  EC58  F0B1         	call	_LCD_Write
 18197                           
 18198                           ;LCD.c: 274: w = 128;
 18199  014C0E  0E80               	movlw	128
 18200  014C10  6E50               	movwf	_w,c
 18201                           
 18202                           ;LCD.c: 275: l = 128;
 18203  014C12  0E80               	movlw	128
 18204  014C14  6E4F               	movwf	_l,c
 18205                           
 18206                           ;LCD.c: 276: break;
 18207  014C16  0012               	return	
 18208  014C18                     
 18209                           ;LCD.c: 279: {
 18210                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
 18211  014C18  0E01               	movlw	1
 18212  014C1A  0100               	movlb	0	; () banked
 18213  014C1C  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18214  014C1E  0E68               	movlw	104
 18215  014C20  EC58  F0B1         	call	_LCD_Write
 18216                           
 18217                           ;LCD.c: 281: w = 128;
 18218  014C24  0E80               	movlw	128
 18219  014C26  6E50               	movwf	_w,c
 18220                           
 18221                           ;LCD.c: 282: l = 128;
 18222  014C28  0E80               	movlw	128
 18223  014C2A  6E4F               	movwf	_l,c
 18224                           
 18225                           ;LCD.c: 284: }
 18226                           ;LCD.c: 285: }
 18227                           
 18228                           ;LCD.c: 283: break;
 18229  014C2C  0012               	return	
 18230  014C2E                     l117:
 18231  014C2E  0100               	movlb	0	; () banked
 18232  014C30  51C0               	movf	Set_Rotation@rotation& (0+255),w,b
 18233                           
 18234                           ; Switch size 1, requested type "space"
 18235                           ; Number of cases is 4, Range of values is 0 to 3
 18236                           ; switch strategies available:
 18237                           ; Name         Instructions Cycles
 18238                           ; simple_byte           13     7 (average)
 18239                           ;	Chosen strategy is simple_byte
 18240  014C32  0A00               	xorlw	0	; case 0
 18241  014C34  B4D8               	btfsc	status,2,c
 18242  014C36  D7CF               	goto	l118
 18243  014C38  0A01               	xorlw	1	; case 1
 18244  014C3A  B4D8               	btfsc	status,2,c
 18245  014C3C  D7D7               	goto	l120
 18246  014C3E  0A03               	xorlw	3	; case 2
 18247  014C40  B4D8               	btfsc	status,2,c
 18248  014C42  D7DF               	goto	l121
 18249  014C44  0A01               	xorlw	1	; case 3
 18250  014C46  A4D8               	btfss	status,2,c
 18251  014C48  0012               	return	
 18252  014C4A  D7E6               	goto	l122
 18253  014C4C                     __end_of_Set_Rotation:
 18254                           	opt stack 0
 18255                           tosu	equ	0xFFF
 18256                           tosh	equ	0xFFE
 18257                           tosl	equ	0xFFD
 18258                           pclath	equ	0xFFA
 18259                           tblptru	equ	0xFF8
 18260                           tblptrh	equ	0xFF7
 18261                           tblptrl	equ	0xFF6
 18262                           tablat	equ	0xFF5
 18263                           prodh	equ	0xFF4
 18264                           prodl	equ	0xFF3
 18265                           intcon	equ	0xFF2
 18266                           postinc0	equ	0xFEE
 18267                           wreg	equ	0xFE8
 18268                           indf1	equ	0xFE7
 18269                           postdec1	equ	0xFE5
 18270                           fsr1h	equ	0xFE2
 18271                           fsr1l	equ	0xFE1
 18272                           indf2	equ	0xFDF
 18273                           postinc2	equ	0xFDE
 18274                           postdec2	equ	0xFDD
 18275                           plusw2	equ	0xFDB
 18276                           fsr2h	equ	0xFDA
 18277                           fsr2l	equ	0xFD9
 18278                           status	equ	0xFD8
 18279                           
 18280 ;; *************** function _LCD_Fill *****************
 18281 ;; Defined at:
 18282 ;;		line 287 in file "Library/LCD.c"
 18283 ;; Parameters:    Size  Location     Type
 18284 ;;  pColour         2    9[BANK0 ] unsigned short 
 18285 ;; Auto vars:     Size  Location     Type
 18286 ;;  j               1   12[BANK0 ] unsigned char 
 18287 ;;  i               1   11[BANK0 ] unsigned char 
 18288 ;; Return value:  Size  Location     Type
 18289 ;;                  1    wreg      void 
 18290 ;; Registers used:
 18291 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18292 ;; Tracked objects:
 18293 ;;		On entry : 0/0
 18294 ;;		On exit  : 0/0
 18295 ;;		Unchanged: 0/0
 18296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18297 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18298 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18300 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18301 ;;Total ram usage:        4 bytes
 18302 ;; Hardware stack levels used:    1
 18303 ;; Hardware stack levels required when called:   10
 18304 ;; This function calls:
 18305 ;;		_LCD_Word_Write
 18306 ;;		_Set_Addr_Window
 18307 ;; This function is called by:
 18308 ;;		_LCD_Init
 18309 ;; This function uses a non-reentrant model
 18310 ;;
 18311                           
 18312                           	psect	text82
 18313  0159CE                     __ptext82:
 18314                           	opt stack 0
 18315  0159CE                     _LCD_Fill:
 18316                           	opt stack 18
 18317                           
 18318                           ;LCD.c: 296: UINT8 i = 0x00;
 18319                           
 18320                           ;incstack = 0
 18321  0159CE  0E00               	movlw	0
 18322  0159D0  0100               	movlb	0	; () banked
 18323  0159D2  6FC5               	movwf	LCD_Fill@i& (0+255),b
 18324                           
 18325                           ;LCD.c: 297: UINT8 j = 0x00;
 18326  0159D4  0E00               	movlw	0
 18327  0159D6  0100               	movlb	0	; () banked
 18328  0159D8  6FC6               	movwf	LCD_Fill@j& (0+255),b
 18329                           
 18330                           ; BSR set to: 0
 18331                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
 18332  0159DA  0E00               	movlw	0
 18333  0159DC  0100               	movlb	0	; () banked
 18334  0159DE  6FBF               	movwf	Set_Addr_Window@ys& (0+255),b
 18335  0159E0  0450               	decf	_w,w,c
 18336  0159E2  0100               	movlb	0	; () banked
 18337  0159E4  6FC0               	movwf	Set_Addr_Window@xe& (0+255),b
 18338  0159E6  044F               	decf	_l,w,c
 18339  0159E8  0100               	movlb	0	; () banked
 18340  0159EA  6FC1               	movwf	Set_Addr_Window@ye& (0+255),b
 18341  0159EC  0E00               	movlw	0
 18342  0159EE  ECF3  F0A2         	call	_Set_Addr_Window
 18343                           
 18344                           ;LCD.c: 299: for (j = l; j > 0; j--)
 18345  0159F2  C04F  F0C6         	movff	_l,LCD_Fill@j
 18346  0159F6                     l13927:
 18347  0159F6  0100               	movlb	0	; () banked
 18348  0159F8  51C6               	movf	LCD_Fill@j& (0+255),w,b
 18349  0159FA  0100               	movlb	0	; () banked
 18350  0159FC  B4D8               	btfsc	status,2,c
 18351  0159FE  0012               	return	
 18352                           
 18353                           ; BSR set to: 0
 18354                           ;LCD.c: 300: for (i = w; i > 0; i--)
 18355                           
 18356                           ; BSR set to: 0
 18357  015A00  C050  F0C5         	movff	_w,LCD_Fill@i
 18358  015A04                     l13931:
 18359                           
 18360                           ; BSR set to: 0
 18361  015A04  0100               	movlb	0	; () banked
 18362  015A06  51C5               	movf	LCD_Fill@i& (0+255),w,b
 18363  015A08  0100               	movlb	0	; () banked
 18364  015A0A  B4D8               	btfsc	status,2,c
 18365  015A0C  D009               	goto	u10610
 18366                           
 18367                           ; BSR set to: 0
 18368                           ;LCD.c: 301: LCD_Word_Write(pColour);
 18369                           
 18370                           ; BSR set to: 0
 18371                           
 18372                           ; BSR set to: 0
 18373  015A0E  C0C3  F0BF         	movff	LCD_Fill@pColour,LCD_Word_Write@value
 18374  015A12  C0C4  F0C0         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
 18375  015A16  ECB9  F0B1         	call	_LCD_Word_Write	;wreg free
 18376  015A1A  0100               	movlb	0	; () banked
 18377  015A1C  07C5               	decf	LCD_Fill@i& (0+255),f,b
 18378  015A1E  D7F2               	goto	l13931
 18379  015A20                     u10610:
 18380                           
 18381                           ; BSR set to: 0
 18382                           
 18383                           ; BSR set to: 0
 18384  015A20  0100               	movlb	0	; () banked
 18385  015A22  07C6               	decf	LCD_Fill@j& (0+255),f,b
 18386  015A24  D7E8               	goto	l13927
 18387  015A26                     __end_of_LCD_Fill:
 18388                           	opt stack 0
 18389                           tosu	equ	0xFFF
 18390                           tosh	equ	0xFFE
 18391                           tosl	equ	0xFFD
 18392                           pclath	equ	0xFFA
 18393                           tblptru	equ	0xFF8
 18394                           tblptrh	equ	0xFF7
 18395                           tblptrl	equ	0xFF6
 18396                           tablat	equ	0xFF5
 18397                           prodh	equ	0xFF4
 18398                           prodl	equ	0xFF3
 18399                           intcon	equ	0xFF2
 18400                           postinc0	equ	0xFEE
 18401                           wreg	equ	0xFE8
 18402                           indf1	equ	0xFE7
 18403                           postdec1	equ	0xFE5
 18404                           fsr1h	equ	0xFE2
 18405                           fsr1l	equ	0xFE1
 18406                           indf2	equ	0xFDF
 18407                           postinc2	equ	0xFDE
 18408                           postdec2	equ	0xFDD
 18409                           plusw2	equ	0xFDB
 18410                           fsr2h	equ	0xFDA
 18411                           fsr2l	equ	0xFD9
 18412                           status	equ	0xFD8
 18413                           
 18414 ;; *************** function _Set_Addr_Window *****************
 18415 ;; Defined at:
 18416 ;;		line 214 in file "Library/LCD.c"
 18417 ;; Parameters:    Size  Location     Type
 18418 ;;  xs              1    wreg     unsigned char 
 18419 ;;  ys              1    5[BANK0 ] unsigned char 
 18420 ;;  xe              1    6[BANK0 ] unsigned char 
 18421 ;;  ye              1    7[BANK0 ] unsigned char 
 18422 ;; Auto vars:     Size  Location     Type
 18423 ;;  xs              1    8[BANK0 ] unsigned char 
 18424 ;; Return value:  Size  Location     Type
 18425 ;;                  1    wreg      void 
 18426 ;; Registers used:
 18427 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18428 ;; Tracked objects:
 18429 ;;		On entry : 0/0
 18430 ;;		On exit  : 0/0
 18431 ;;		Unchanged: 0/0
 18432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18433 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18434 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18436 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18437 ;;Total ram usage:        4 bytes
 18438 ;; Hardware stack levels used:    1
 18439 ;; Hardware stack levels required when called:    9
 18440 ;; This function calls:
 18441 ;;		_LCD_Write
 18442 ;; This function is called by:
 18443 ;;		_LCD_Fill
 18444 ;;		_LCD_FillRectangle
 18445 ;;		_LCD_DrawField
 18446 ;;		_RAM_Address_Set
 18447 ;;		_LCD_DrawPixel
 18448 ;; This function uses a non-reentrant model
 18449 ;;
 18450                           
 18451                           	psect	text83
 18452  0145E6                     __ptext83:
 18453                           	opt stack 0
 18454  0145E6                     _Set_Addr_Window:
 18455                           	opt stack 17
 18456                           
 18457                           ; BSR set to: 0
 18458                           ;incstack = 0
 18459                           ;Set_Addr_Window@xs stored from wreg
 18460  0145E6  0100               	movlb	0	; () banked
 18461  0145E8  6FC2               	movwf	Set_Addr_Window@xs& (0+255),b
 18462                           
 18463                           ;LCD.c: 216: ys+=2;
 18464  0145EA  0E02               	movlw	2
 18465  0145EC  0100               	movlb	0	; () banked
 18466  0145EE  27BF               	addwf	Set_Addr_Window@ys& (0+255),f,b
 18467                           
 18468                           ;LCD.c: 217: ye+=2;
 18469  0145F0  0E02               	movlw	2
 18470  0145F2  0100               	movlb	0	; () banked
 18471  0145F4  27C1               	addwf	Set_Addr_Window@ye& (0+255),f,b
 18472                           
 18473                           ;LCD.c: 218: xs+=3;
 18474  0145F6  0E03               	movlw	3
 18475  0145F8  0100               	movlb	0	; () banked
 18476  0145FA  27C2               	addwf	Set_Addr_Window@xs& (0+255),f,b
 18477                           
 18478                           ;LCD.c: 219: xe+=3;
 18479  0145FC  0E03               	movlw	3
 18480  0145FE  0100               	movlb	0	; () banked
 18481  014600  27C0               	addwf	Set_Addr_Window@xe& (0+255),f,b
 18482                           
 18483                           ; BSR set to: 0
 18484                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 18485  014602  0E00               	movlw	0
 18486  014604  0100               	movlb	0	; () banked
 18487  014606  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18488  014608  0E2A               	movlw	42
 18489  01460A  EC58  F0B1         	call	_LCD_Write
 18490                           
 18491                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 18492  01460E  0E01               	movlw	1
 18493  014610  0100               	movlb	0	; () banked
 18494  014612  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18495  014614  0E00               	movlw	0
 18496  014616  EC58  F0B1         	call	_LCD_Write
 18497                           
 18498                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 18499  01461A  0E01               	movlw	1
 18500  01461C  0100               	movlb	0	; () banked
 18501  01461E  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18502  014620  0100               	movlb	0	; () banked
 18503  014622  51C2               	movf	Set_Addr_Window@xs& (0+255),w,b
 18504  014624  EC58  F0B1         	call	_LCD_Write
 18505                           
 18506                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 18507  014628  0E01               	movlw	1
 18508  01462A  0100               	movlb	0	; () banked
 18509  01462C  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18510  01462E  0E00               	movlw	0
 18511  014630  EC58  F0B1         	call	_LCD_Write
 18512                           
 18513                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 18514  014634  0E01               	movlw	1
 18515  014636  0100               	movlb	0	; () banked
 18516  014638  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18517  01463A  0100               	movlb	0	; () banked
 18518  01463C  51C0               	movf	Set_Addr_Window@xe& (0+255),w,b
 18519  01463E  EC58  F0B1         	call	_LCD_Write
 18520                           
 18521                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 18522  014642  0E00               	movlw	0
 18523  014644  0100               	movlb	0	; () banked
 18524  014646  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18525  014648  0E2B               	movlw	43
 18526  01464A  EC58  F0B1         	call	_LCD_Write
 18527                           
 18528                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 18529  01464E  0E01               	movlw	1
 18530  014650  0100               	movlb	0	; () banked
 18531  014652  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18532  014654  0E00               	movlw	0
 18533  014656  EC58  F0B1         	call	_LCD_Write
 18534                           
 18535                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 18536  01465A  0E01               	movlw	1
 18537  01465C  0100               	movlb	0	; () banked
 18538  01465E  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18539  014660  0100               	movlb	0	; () banked
 18540  014662  51BF               	movf	Set_Addr_Window@ys& (0+255),w,b
 18541  014664  EC58  F0B1         	call	_LCD_Write
 18542                           
 18543                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 18544  014668  0E01               	movlw	1
 18545  01466A  0100               	movlb	0	; () banked
 18546  01466C  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18547  01466E  0E00               	movlw	0
 18548  014670  EC58  F0B1         	call	_LCD_Write
 18549                           
 18550                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 18551  014674  0E01               	movlw	1
 18552  014676  0100               	movlb	0	; () banked
 18553  014678  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18554  01467A  0100               	movlb	0	; () banked
 18555  01467C  51C1               	movf	Set_Addr_Window@ye& (0+255),w,b
 18556  01467E  EC58  F0B1         	call	_LCD_Write
 18557                           
 18558                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 18559  014682  0E00               	movlw	0
 18560  014684  0100               	movlb	0	; () banked
 18561  014686  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18562  014688  0E2C               	movlw	44
 18563  01468A  EC58  F0B1         	call	_LCD_Write
 18564  01468E  0012               	return		;funcret
 18565  014690                     __end_of_Set_Addr_Window:
 18566                           	opt stack 0
 18567                           tosu	equ	0xFFF
 18568                           tosh	equ	0xFFE
 18569                           tosl	equ	0xFFD
 18570                           pclath	equ	0xFFA
 18571                           tblptru	equ	0xFF8
 18572                           tblptrh	equ	0xFF7
 18573                           tblptrl	equ	0xFF6
 18574                           tablat	equ	0xFF5
 18575                           prodh	equ	0xFF4
 18576                           prodl	equ	0xFF3
 18577                           intcon	equ	0xFF2
 18578                           postinc0	equ	0xFEE
 18579                           wreg	equ	0xFE8
 18580                           indf1	equ	0xFE7
 18581                           postdec1	equ	0xFE5
 18582                           fsr1h	equ	0xFE2
 18583                           fsr1l	equ	0xFE1
 18584                           indf2	equ	0xFDF
 18585                           postinc2	equ	0xFDE
 18586                           postdec2	equ	0xFDD
 18587                           plusw2	equ	0xFDB
 18588                           fsr2h	equ	0xFDA
 18589                           fsr2l	equ	0xFD9
 18590                           status	equ	0xFD8
 18591                           
 18592 ;; *************** function _LCD_Word_Write *****************
 18593 ;; Defined at:
 18594 ;;		line 198 in file "Library/LCD.c"
 18595 ;; Parameters:    Size  Location     Type
 18596 ;;  value           2    5[BANK0 ] unsigned short 
 18597 ;; Auto vars:     Size  Location     Type
 18598 ;;		None
 18599 ;; Return value:  Size  Location     Type
 18600 ;;                  1    wreg      void 
 18601 ;; Registers used:
 18602 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18603 ;; Tracked objects:
 18604 ;;		On entry : 0/0
 18605 ;;		On exit  : 0/0
 18606 ;;		Unchanged: 0/0
 18607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18608 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18611 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18612 ;;Total ram usage:        2 bytes
 18613 ;; Hardware stack levels used:    1
 18614 ;; Hardware stack levels required when called:    9
 18615 ;; This function calls:
 18616 ;;		_LCD_Write
 18617 ;; This function is called by:
 18618 ;;		_LCD_Fill
 18619 ;;		_LCD_FillRectangle
 18620 ;;		_LCD_DrawField
 18621 ;;		_LCD_DrawPixel
 18622 ;; This function uses a non-reentrant model
 18623 ;;
 18624                           
 18625                           	psect	text84
 18626  016372                     __ptext84:
 18627                           	opt stack 0
 18628  016372                     _LCD_Word_Write:
 18629                           	opt stack 17
 18630                           
 18631                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 18632                           
 18633                           ;incstack = 0
 18634  016372  0E01               	movlw	1
 18635  016374  0100               	movlb	0	; () banked
 18636  016376  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18637  016378  0100               	movlb	0	; () banked
 18638  01637A  51C0               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 18639  01637C  EC58  F0B1         	call	_LCD_Write
 18640                           
 18641                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 18642  016380  0E01               	movlw	1
 18643  016382  0100               	movlb	0	; () banked
 18644  016384  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18645  016386  0100               	movlb	0	; () banked
 18646  016388  51BF               	movf	LCD_Word_Write@value& (0+255),w,b
 18647  01638A  EC58  F0B1         	call	_LCD_Write
 18648  01638E  0012               	return		;funcret
 18649  016390                     __end_of_LCD_Word_Write:
 18650                           	opt stack 0
 18651                           tosu	equ	0xFFF
 18652                           tosh	equ	0xFFE
 18653                           tosl	equ	0xFFD
 18654                           pclath	equ	0xFFA
 18655                           tblptru	equ	0xFF8
 18656                           tblptrh	equ	0xFF7
 18657                           tblptrl	equ	0xFF6
 18658                           tablat	equ	0xFF5
 18659                           prodh	equ	0xFF4
 18660                           prodl	equ	0xFF3
 18661                           intcon	equ	0xFF2
 18662                           postinc0	equ	0xFEE
 18663                           wreg	equ	0xFE8
 18664                           indf1	equ	0xFE7
 18665                           postdec1	equ	0xFE5
 18666                           fsr1h	equ	0xFE2
 18667                           fsr1l	equ	0xFE1
 18668                           indf2	equ	0xFDF
 18669                           postinc2	equ	0xFDE
 18670                           postdec2	equ	0xFDD
 18671                           plusw2	equ	0xFDB
 18672                           fsr2h	equ	0xFDA
 18673                           fsr2l	equ	0xFD9
 18674                           status	equ	0xFD8
 18675                           
 18676 ;; *************** function _LCD_Write *****************
 18677 ;; Defined at:
 18678 ;;		line 67 in file "Library/LCD.c"
 18679 ;; Parameters:    Size  Location     Type
 18680 ;;  value           1    wreg     unsigned char 
 18681 ;;  mode            1    3[BANK0 ] enum E6761
 18682 ;; Auto vars:     Size  Location     Type
 18683 ;;  value           1    4[BANK0 ] unsigned char 
 18684 ;; Return value:  Size  Location     Type
 18685 ;;                  1    wreg      void 
 18686 ;; Registers used:
 18687 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18688 ;; Tracked objects:
 18689 ;;		On entry : 0/0
 18690 ;;		On exit  : 0/0
 18691 ;;		Unchanged: 0/0
 18692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18693 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18694 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18696 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18697 ;;Total ram usage:        2 bytes
 18698 ;; Hardware stack levels used:    1
 18699 ;; Hardware stack levels required when called:    8
 18700 ;; This function calls:
 18701 ;;		_Mode_Set
 18702 ;;		_SPI_Send
 18703 ;; This function is called by:
 18704 ;;		_LCD_Init
 18705 ;;		_LCD_Word_Write
 18706 ;;		_Set_Addr_Window
 18707 ;;		_Set_Rotation
 18708 ;;		_LCD_WriteCMD
 18709 ;;		_LCD_WriteData
 18710 ;;		_LCD_Data_Write
 18711 ;;		_LCD_Data_Write_4k
 18712 ;;		_Invert_Display
 18713 ;; This function uses a non-reentrant model
 18714 ;;
 18715                           
 18716                           	psect	text85
 18717  0162B0                     __ptext85:
 18718                           	opt stack 0
 18719  0162B0                     _LCD_Write:
 18720                           	opt stack 17
 18721                           
 18722                           ;incstack = 0
 18723                           ;LCD_Write@value stored from wreg
 18724  0162B0  0100               	movlb	0	; () banked
 18725  0162B2  6FBE               	movwf	LCD_Write@value& (0+255),b
 18726                           
 18727                           ;LCD.c: 89: Mode_Set(mode);
 18728  0162B4  0100               	movlb	0	; () banked
 18729  0162B6  51BD               	movf	LCD_Write@mode& (0+255),w,b
 18730  0162B8  ECDB  F0B2         	call	_Mode_Set
 18731                           
 18732                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 18733  0162BC  0E81               	movlw	low _SPI2
 18734  0162BE  0100               	movlb	0	; () banked
 18735  0162C0  6FBA               	movwf	SPI_Send@pInput& (0+255),b
 18736  0162C2  0E03               	movlw	high _SPI2
 18737  0162C4  0100               	movlb	0	; () banked
 18738  0162C6  6FBB               	movwf	(SPI_Send@pInput+1)& (0+255),b
 18739  0162C8  C0BE  F0BC         	movff	LCD_Write@value,SPI_Send@pData
 18740  0162CC  EC5B  F0AA         	call	_SPI_Send	;wreg free
 18741  0162D0  0012               	return		;funcret
 18742  0162D2                     __end_of_LCD_Write:
 18743                           	opt stack 0
 18744                           tosu	equ	0xFFF
 18745                           tosh	equ	0xFFE
 18746                           tosl	equ	0xFFD
 18747                           pclath	equ	0xFFA
 18748                           tblptru	equ	0xFF8
 18749                           tblptrh	equ	0xFF7
 18750                           tblptrl	equ	0xFF6
 18751                           tablat	equ	0xFF5
 18752                           prodh	equ	0xFF4
 18753                           prodl	equ	0xFF3
 18754                           intcon	equ	0xFF2
 18755                           postinc0	equ	0xFEE
 18756                           wreg	equ	0xFE8
 18757                           indf1	equ	0xFE7
 18758                           postdec1	equ	0xFE5
 18759                           fsr1h	equ	0xFE2
 18760                           fsr1l	equ	0xFE1
 18761                           indf2	equ	0xFDF
 18762                           postinc2	equ	0xFDE
 18763                           postdec2	equ	0xFDD
 18764                           plusw2	equ	0xFDB
 18765                           fsr2h	equ	0xFDA
 18766                           fsr2l	equ	0xFD9
 18767                           status	equ	0xFD8
 18768                           
 18769 ;; *************** function _SPI_Send *****************
 18770 ;; Defined at:
 18771 ;;		line 226 in file "Library/SPI.c"
 18772 ;; Parameters:    Size  Location     Type
 18773 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 18774 ;;		 -> SPI1(11), SPI2(11), 
 18775 ;;  pData           1    2[BANK0 ] unsigned char 
 18776 ;; Auto vars:     Size  Location     Type
 18777 ;;		None
 18778 ;; Return value:  Size  Location     Type
 18779 ;;                  1    wreg      unsigned char 
 18780 ;; Registers used:
 18781 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18782 ;; Tracked objects:
 18783 ;;		On entry : 0/0
 18784 ;;		On exit  : 0/0
 18785 ;;		Unchanged: 0/0
 18786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18787 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18790 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18791 ;;Total ram usage:        3 bytes
 18792 ;; Hardware stack levels used:    1
 18793 ;; Hardware stack levels required when called:    7
 18794 ;; This function calls:
 18795 ;;		Nothing
 18796 ;; This function is called by:
 18797 ;;		_LCD_Write
 18798 ;;		_OutSeg
 18799 ;; This function uses a non-reentrant model
 18800 ;;
 18801                           
 18802                           	psect	text86
 18803  0154B6                     __ptext86:
 18804                           	opt stack 0
 18805  0154B6                     _SPI_Send:
 18806                           	opt stack 19
 18807                           
 18808                           ;SPI.c: 253: switch (pInput->mChannel)
 18809                           
 18810                           ;incstack = 0
 18811  0154B6  D026               	goto	l678
 18812  0154B8                     
 18813                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 18814  0154B8  C0AB  FFD9         	movff	_PortC+4,fsr2l
 18815  0154BC  C0AC  FFDA         	movff	_PortC+5,fsr2h
 18816  0154C0  0100               	movlb	0	; () banked
 18817  0154C2  94DF               	bcf	indf2,2,c
 18818                           
 18819                           ; BSR set to: 0
 18820                           ;SPI.c: 257: SSP1BUF = pData;
 18821  0154C4  C0BC  FFC9         	movff	SPI_Send@pData,4041	;volatile
 18822  0154C8                     
 18823                           ; BSR set to: 0
 18824  0154C8  A0C7               	btfss	4039,0,c	;volatile
 18825  0154CA  D7FE               	goto	l681
 18826                           
 18827                           ;SPI.c: 259: pData = SSP1BUF;
 18828  0154CC  CFC9 F0BC          	movff	4041,SPI_Send@pData	;volatile
 18829                           
 18830                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 18831  0154D0  C0AB  FFD9         	movff	_PortC+4,fsr2l
 18832  0154D4  C0AC  FFDA         	movff	_PortC+5,fsr2h
 18833  0154D8  0100               	movlb	0	; () banked
 18834  0154DA  84DF               	bsf	indf2,2,c
 18835                           
 18836                           ; BSR set to: 0
 18837                           ;SPI.c: 261: return pData;
 18838                           ;	Return value of _SPI_Send is never used
 18839  0154DC  0012               	return	
 18840  0154DE                     
 18841                           ; BSR set to: 0
 18842                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 18843                           
 18844                           ; BSR set to: 0
 18845  0154DE  C0A1  FFD9         	movff	_PortD+4,fsr2l
 18846  0154E2  C0A2  FFDA         	movff	_PortD+5,fsr2h
 18847  0154E6  0100               	movlb	0	; () banked
 18848  0154E8  9EDF               	bcf	indf2,7,c
 18849                           
 18850                           ; BSR set to: 0
 18851                           ;SPI.c: 264: SSP2BUF = pData;
 18852  0154EA  C0BC  FF6F         	movff	SPI_Send@pData,3951	;volatile
 18853  0154EE                     
 18854                           ; BSR set to: 0
 18855  0154EE  A06D               	btfss	3949,0,c	;volatile
 18856  0154F0  D7FE               	goto	l686
 18857                           
 18858                           ;SPI.c: 266: pData = SSP2BUF;
 18859  0154F2  CF6F F0BC          	movff	3951,SPI_Send@pData	;volatile
 18860                           
 18861                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 18862  0154F6  C0A1  FFD9         	movff	_PortD+4,fsr2l
 18863  0154FA  C0A2  FFDA         	movff	_PortD+5,fsr2h
 18864  0154FE  0100               	movlb	0	; () banked
 18865  015500  8EDF               	bsf	indf2,7,c
 18866                           
 18867                           ; BSR set to: 0
 18868                           ;SPI.c: 269: };
 18869                           
 18870                           ; BSR set to: 0
 18871                           ;SPI.c: 268: return pData;
 18872                           ;	Return value of _SPI_Send is never used
 18873  015502  0012               	return	
 18874  015504                     l678:
 18875                           
 18876                           ; BSR set to: 0
 18877  015504  0100               	movlb	0	; () banked
 18878  015506  EE20 F002          	lfsr	2,2
 18879  01550A  51BA               	movf	SPI_Send@pInput& (0+255),w,b
 18880  01550C  26D9               	addwf	fsr2l,f,c
 18881  01550E  51BB               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 18882  015510  22DA               	addwfc	fsr2h,f,c
 18883  015512  50DF               	movf	indf2,w,c
 18884                           
 18885                           ; Switch size 1, requested type "space"
 18886                           ; Number of cases is 2, Range of values is 0 to 1
 18887                           ; switch strategies available:
 18888                           ; Name         Instructions Cycles
 18889                           ; simple_byte            7     4 (average)
 18890                           ;	Chosen strategy is simple_byte
 18891  015514  0A00               	xorlw	0	; case 0
 18892  015516  B4D8               	btfsc	status,2,c
 18893  015518  D7CF               	goto	l679
 18894  01551A  0A01               	xorlw	1	; case 1
 18895  01551C  A4D8               	btfss	status,2,c
 18896  01551E  0012               	return	
 18897  015520  D7DE               	goto	l684
 18898  015522                     __end_of_SPI_Send:
 18899                           	opt stack 0
 18900                           tosu	equ	0xFFF
 18901                           tosh	equ	0xFFE
 18902                           tosl	equ	0xFFD
 18903                           pclath	equ	0xFFA
 18904                           tblptru	equ	0xFF8
 18905                           tblptrh	equ	0xFF7
 18906                           tblptrl	equ	0xFF6
 18907                           tablat	equ	0xFF5
 18908                           prodh	equ	0xFF4
 18909                           prodl	equ	0xFF3
 18910                           intcon	equ	0xFF2
 18911                           postinc0	equ	0xFEE
 18912                           wreg	equ	0xFE8
 18913                           indf1	equ	0xFE7
 18914                           postdec1	equ	0xFE5
 18915                           fsr1h	equ	0xFE2
 18916                           fsr1l	equ	0xFE1
 18917                           indf2	equ	0xFDF
 18918                           postinc2	equ	0xFDE
 18919                           postdec2	equ	0xFDD
 18920                           plusw2	equ	0xFDB
 18921                           fsr2h	equ	0xFDA
 18922                           fsr2l	equ	0xFD9
 18923                           status	equ	0xFD8
 18924                           
 18925 ;; *************** function _Mode_Set *****************
 18926 ;; Defined at:
 18927 ;;		line 40 in file "Library/LCD.c"
 18928 ;; Parameters:    Size  Location     Type
 18929 ;;  pMode           1    wreg     enum E6761
 18930 ;; Auto vars:     Size  Location     Type
 18931 ;;  pMode           1    0[BANK0 ] enum E6761
 18932 ;; Return value:  Size  Location     Type
 18933 ;;                  1    wreg      void 
 18934 ;; Registers used:
 18935 ;;		wreg
 18936 ;; Tracked objects:
 18937 ;;		On entry : 0/0
 18938 ;;		On exit  : 0/0
 18939 ;;		Unchanged: 0/0
 18940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18942 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18944 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18945 ;;Total ram usage:        1 bytes
 18946 ;; Hardware stack levels used:    1
 18947 ;; Hardware stack levels required when called:    7
 18948 ;; This function calls:
 18949 ;;		Nothing
 18950 ;; This function is called by:
 18951 ;;		_LCD_Write
 18952 ;; This function uses a non-reentrant model
 18953 ;;
 18954                           
 18955                           	psect	text87
 18956  0165B6                     __ptext87:
 18957                           	opt stack 0
 18958  0165B6                     _Mode_Set:
 18959                           	opt stack 17
 18960                           
 18961                           ; BSR set to: 0
 18962                           ;incstack = 0
 18963                           ;Mode_Set@pMode stored from wreg
 18964  0165B6  0100               	movlb	0	; () banked
 18965  0165B8  6FBA               	movwf	Mode_Set@pMode& (0+255),b
 18966                           
 18967                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 18968  0165BA  0100               	movlb	0	; () banked
 18969  0165BC  B1BA               	btfsc	Mode_Set@pMode& (0+255),0,b
 18970  0165BE  D002               	bra	u8885
 18971  0165C0  9E85               	bcf	3973,7,c	;volatile
 18972  0165C2  D001               	bra	u8886
 18973  0165C4                     u8885:
 18974  0165C4  8E85               	bsf	3973,7,c	;volatile
 18975  0165C6                     u8886:
 18976  0165C6  0012               	return		;funcret
 18977  0165C8                     __end_of_Mode_Set:
 18978                           	opt stack 0
 18979                           tosu	equ	0xFFF
 18980                           tosh	equ	0xFFE
 18981                           tosl	equ	0xFFD
 18982                           pclath	equ	0xFFA
 18983                           tblptru	equ	0xFF8
 18984                           tblptrh	equ	0xFF7
 18985                           tblptrl	equ	0xFF6
 18986                           tablat	equ	0xFF5
 18987                           prodh	equ	0xFF4
 18988                           prodl	equ	0xFF3
 18989                           intcon	equ	0xFF2
 18990                           postinc0	equ	0xFEE
 18991                           wreg	equ	0xFE8
 18992                           indf1	equ	0xFE7
 18993                           postdec1	equ	0xFE5
 18994                           fsr1h	equ	0xFE2
 18995                           fsr1l	equ	0xFE1
 18996                           indf2	equ	0xFDF
 18997                           postinc2	equ	0xFDE
 18998                           postdec2	equ	0xFDD
 18999                           plusw2	equ	0xFDB
 19000                           fsr2h	equ	0xFDA
 19001                           fsr2l	equ	0xFD9
 19002                           status	equ	0xFD8
 19003                           
 19004 ;; *************** function _Configure_GPIOs *****************
 19005 ;; Defined at:
 19006 ;;		line 46 in file "Library/LCD.c"
 19007 ;; Parameters:    Size  Location     Type
 19008 ;;		None
 19009 ;; Auto vars:     Size  Location     Type
 19010 ;;		None
 19011 ;; Return value:  Size  Location     Type
 19012 ;;                  1    wreg      void 
 19013 ;; Registers used:
 19014 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19015 ;; Tracked objects:
 19016 ;;		On entry : 0/0
 19017 ;;		On exit  : 0/0
 19018 ;;		Unchanged: 0/0
 19019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19023 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19024 ;;Total ram usage:        0 bytes
 19025 ;; Hardware stack levels used:    1
 19026 ;; Hardware stack levels required when called:   14
 19027 ;; This function calls:
 19028 ;;		_LCD_Reset
 19029 ;;		_Port_SetPinType
 19030 ;;		_SPI_Init
 19031 ;;		_SPI_MaxSpeed
 19032 ;; This function is called by:
 19033 ;;		_LCD_Init
 19034 ;; This function uses a non-reentrant model
 19035 ;;
 19036                           
 19037                           	psect	text88
 19038  015446                     __ptext88:
 19039                           	opt stack 0
 19040  015446                     _Configure_GPIOs:
 19041                           	opt stack 14
 19042                           
 19043                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
 19044                           
 19045                           ;incstack = 0
 19046  015446  0EBE               	movlw	low _PortF
 19047  015448  0100               	movlb	0	; () banked
 19048  01544A  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 19049  01544C  0E03               	movlw	high _PortF
 19050  01544E  0100               	movlb	0	; () banked
 19051  015450  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 19052  015452  0E07               	movlw	7
 19053  015454  0100               	movlb	0	; () banked
 19054  015456  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 19055  015458  0E03               	movlw	3
 19056  01545A  0100               	movlb	0	; () banked
 19057  01545C  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 19058  01545E  ECB4  F092         	call	_Port_SetPinType	;wreg free
 19059                           
 19060                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
 19061  015462  0EBE               	movlw	low _PortF
 19062  015464  0100               	movlb	0	; () banked
 19063  015466  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 19064  015468  0E03               	movlw	high _PortF
 19065  01546A  0100               	movlb	0	; () banked
 19066  01546C  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 19067  01546E  0E06               	movlw	6
 19068  015470  0100               	movlb	0	; () banked
 19069  015472  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 19070  015474  0E03               	movlw	3
 19071  015476  0100               	movlb	0	; () banked
 19072  015478  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 19073  01547A  ECB4  F092         	call	_Port_SetPinType	;wreg free
 19074                           
 19075                           ;LCD.c: 55: LCD_Reset();
 19076  01547E  EC64  F0AD         	call	_LCD_Reset	;wreg free
 19077                           
 19078                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
 19079  015482  0EC0               	movlw	192
 19080  015484  0100               	movlb	0	; () banked
 19081  015486  6FE7               	movwf	SPI_Init@pClock& (0+255),b
 19082  015488  0EC6               	movlw	198
 19083  01548A  6FE8               	movwf	(SPI_Init@pClock+1)& (0+255),b
 19084  01548C  0E2D               	movlw	45
 19085  01548E  6FE9               	movwf	(SPI_Init@pClock+2)& (0+255),b
 19086  015490  0E00               	movlw	0
 19087  015492  6FEA               	movwf	(SPI_Init@pClock+3)& (0+255),b
 19088  015494  0E01               	movlw	1
 19089  015496  0100               	movlb	0	; () banked
 19090  015498  6FEB               	movwf	SPI_Init@pChannel& (0+255),b
 19091  01549A  0E01               	movlw	1
 19092  01549C  0100               	movlb	0	; () banked
 19093  01549E  6FEC               	movwf	SPI_Init@pMode& (0+255),b
 19094  0154A0  EC53  F082         	call	_SPI_Init	;wreg free
 19095                           
 19096                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
 19097  0154A4  0E81               	movlw	low _SPI2
 19098  0154A6  0100               	movlb	0	; () banked
 19099  0154A8  6FC9               	movwf	SPI_MaxSpeed@pInput& (0+255),b
 19100  0154AA  0E03               	movlw	high _SPI2
 19101  0154AC  0100               	movlb	0	; () banked
 19102  0154AE  6FCA               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
 19103  0154B0  EC75  F0A9         	call	_SPI_MaxSpeed	;wreg free
 19104  0154B4  0012               	return		;funcret
 19105  0154B6                     __end_of_Configure_GPIOs:
 19106                           	opt stack 0
 19107                           tosu	equ	0xFFF
 19108                           tosh	equ	0xFFE
 19109                           tosl	equ	0xFFD
 19110                           pclath	equ	0xFFA
 19111                           tblptru	equ	0xFF8
 19112                           tblptrh	equ	0xFF7
 19113                           tblptrl	equ	0xFF6
 19114                           tablat	equ	0xFF5
 19115                           prodh	equ	0xFF4
 19116                           prodl	equ	0xFF3
 19117                           intcon	equ	0xFF2
 19118                           postinc0	equ	0xFEE
 19119                           wreg	equ	0xFE8
 19120                           indf1	equ	0xFE7
 19121                           postdec1	equ	0xFE5
 19122                           fsr1h	equ	0xFE2
 19123                           fsr1l	equ	0xFE1
 19124                           indf2	equ	0xFDF
 19125                           postinc2	equ	0xFDE
 19126                           postdec2	equ	0xFDD
 19127                           plusw2	equ	0xFDB
 19128                           fsr2h	equ	0xFDA
 19129                           fsr2l	equ	0xFD9
 19130                           status	equ	0xFD8
 19131                           
 19132 ;; *************** function _SPI_MaxSpeed *****************
 19133 ;; Defined at:
 19134 ;;		line 201 in file "Library/SPI.c"
 19135 ;; Parameters:    Size  Location     Type
 19136 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 19137 ;;		 -> SPI2(11), 
 19138 ;; Auto vars:     Size  Location     Type
 19139 ;;		None
 19140 ;; Return value:  Size  Location     Type
 19141 ;;                  1    wreg      void 
 19142 ;; Registers used:
 19143 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19144 ;; Tracked objects:
 19145 ;;		On entry : 0/0
 19146 ;;		On exit  : 0/0
 19147 ;;		Unchanged: 0/0
 19148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19149 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19152 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19153 ;;Total ram usage:        2 bytes
 19154 ;; Hardware stack levels used:    1
 19155 ;; Hardware stack levels required when called:    9
 19156 ;; This function calls:
 19157 ;;		_Byte_SetBit
 19158 ;;		_Byte_SetQuad
 19159 ;; This function is called by:
 19160 ;;		_Configure_GPIOs
 19161 ;; This function uses a non-reentrant model
 19162 ;;
 19163                           
 19164                           	psect	text89
 19165  0152EA                     __ptext89:
 19166                           	opt stack 0
 19167  0152EA                     _SPI_MaxSpeed:
 19168                           	opt stack 18
 19169                           
 19170                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 19171                           
 19172                           ;incstack = 0
 19173  0152EA  0100               	movlb	0	; () banked
 19174  0152EC  EE20 F006          	lfsr	2,6
 19175  0152F0  51C9               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 19176  0152F2  26D9               	addwf	fsr2l,f,c
 19177  0152F4  51CA               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 19178  0152F6  22DA               	addwfc	fsr2h,f,c
 19179  0152F8  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 19180  0152FC  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 19181  015300  0E05               	movlw	5
 19182  015302  0100               	movlb	0	; () banked
 19183  015304  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 19184  015306  0E00               	movlw	0
 19185  015308  0100               	movlb	0	; () banked
 19186  01530A  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 19187  01530C  ECCC  F0AB         	call	_Byte_SetBit	;wreg free
 19188                           
 19189                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
 19190  015310  0100               	movlb	0	; () banked
 19191  015312  EE20 F006          	lfsr	2,6
 19192  015316  51C9               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 19193  015318  26D9               	addwf	fsr2l,f,c
 19194  01531A  51CA               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 19195  01531C  22DA               	addwfc	fsr2h,f,c
 19196  01531E  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 19197  015322  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 19198  015326  0E00               	movlw	0
 19199  015328  0100               	movlb	0	; () banked
 19200  01532A  6FC7               	movwf	Byte_SetQuad@pQuad& (0+255),b
 19201  01532C  0E00               	movlw	0
 19202  01532E  0100               	movlb	0	; () banked
 19203  015330  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 19204  015332  EC7A  F0B1         	call	_Byte_SetQuad	;wreg free
 19205                           
 19206                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 19207  015336  0100               	movlb	0	; () banked
 19208  015338  EE20 F006          	lfsr	2,6
 19209  01533C  51C9               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 19210  01533E  26D9               	addwf	fsr2l,f,c
 19211  015340  51CA               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 19212  015342  22DA               	addwfc	fsr2h,f,c
 19213  015344  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 19214  015348  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 19215  01534C  0E05               	movlw	5
 19216  01534E  0100               	movlb	0	; () banked
 19217  015350  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 19218  015352  0E01               	movlw	1
 19219  015354  0100               	movlb	0	; () banked
 19220  015356  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 19221  015358  ECCC  F0AB         	call	_Byte_SetBit	;wreg free
 19222  01535C  0012               	return		;funcret
 19223  01535E                     __end_of_SPI_MaxSpeed:
 19224                           	opt stack 0
 19225                           tosu	equ	0xFFF
 19226                           tosh	equ	0xFFE
 19227                           tosl	equ	0xFFD
 19228                           pclath	equ	0xFFA
 19229                           tblptru	equ	0xFF8
 19230                           tblptrh	equ	0xFF7
 19231                           tblptrl	equ	0xFF6
 19232                           tablat	equ	0xFF5
 19233                           prodh	equ	0xFF4
 19234                           prodl	equ	0xFF3
 19235                           intcon	equ	0xFF2
 19236                           postinc0	equ	0xFEE
 19237                           wreg	equ	0xFE8
 19238                           indf1	equ	0xFE7
 19239                           postdec1	equ	0xFE5
 19240                           fsr1h	equ	0xFE2
 19241                           fsr1l	equ	0xFE1
 19242                           indf2	equ	0xFDF
 19243                           postinc2	equ	0xFDE
 19244                           postdec2	equ	0xFDD
 19245                           plusw2	equ	0xFDB
 19246                           fsr2h	equ	0xFDA
 19247                           fsr2l	equ	0xFD9
 19248                           status	equ	0xFD8
 19249                           
 19250 ;; *************** function _LCD_Reset *****************
 19251 ;; Defined at:
 19252 ;;		line 95 in file "Library/LCD.c"
 19253 ;; Parameters:    Size  Location     Type
 19254 ;;		None
 19255 ;; Auto vars:     Size  Location     Type
 19256 ;;		None
 19257 ;; Return value:  Size  Location     Type
 19258 ;;                  1    wreg      void 
 19259 ;; Registers used:
 19260 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19261 ;; Tracked objects:
 19262 ;;		On entry : 0/0
 19263 ;;		On exit  : 0/0
 19264 ;;		Unchanged: 0/0
 19265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19269 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19270 ;;Total ram usage:        0 bytes
 19271 ;; Hardware stack levels used:    1
 19272 ;; Hardware stack levels required when called:   13
 19273 ;; This function calls:
 19274 ;;		_LED_Toggle
 19275 ;;		_Reset_High
 19276 ;;		_Reset_Low
 19277 ;;		_delay_ms
 19278 ;; This function is called by:
 19279 ;;		_Configure_GPIOs
 19280 ;; This function uses a non-reentrant model
 19281 ;;
 19282                           
 19283                           	psect	text90
 19284  015AC8                     __ptext90:
 19285                           	opt stack 0
 19286  015AC8                     _LCD_Reset:
 19287                           	opt stack 14
 19288                           
 19289                           ;LCD.c: 97: Reset_High();
 19290                           
 19291                           ;incstack = 0
 19292  015AC8  ECD7  F0B1         	call	_Reset_High	;wreg free
 19293                           
 19294                           ;LCD.c: 98: LED_Toggle(eLED2);
 19295  015ACC  0E01               	movlw	1
 19296  015ACE  EC44  F0AE         	call	_LED_Toggle
 19297                           
 19298                           ;LCD.c: 99: delay_ms(0x80);
 19299  015AD2  0E00               	movlw	0
 19300  015AD4  0100               	movlb	0	; () banked
 19301  015AD6  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 19302  015AD8  0E80               	movlw	128
 19303  015ADA  6FBA               	movwf	delay_ms@ms& (0+255),b
 19304  015ADC  ECFC  F0AA         	call	_delay_ms	;wreg free
 19305                           
 19306                           ;LCD.c: 100: LED_Toggle(eLED2);
 19307  015AE0  0E01               	movlw	1
 19308  015AE2  EC44  F0AE         	call	_LED_Toggle
 19309                           
 19310                           ;LCD.c: 101: Reset_Low();
 19311  015AE6  ECC8  F0B1         	call	_Reset_Low	;wreg free
 19312                           
 19313                           ;LCD.c: 102: delay_ms(0x80);
 19314  015AEA  0E00               	movlw	0
 19315  015AEC  0100               	movlb	0	; () banked
 19316  015AEE  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 19317  015AF0  0E80               	movlw	128
 19318  015AF2  6FBA               	movwf	delay_ms@ms& (0+255),b
 19319  015AF4  ECFC  F0AA         	call	_delay_ms	;wreg free
 19320                           
 19321                           ;LCD.c: 103: LED_Toggle(eLED2);
 19322  015AF8  0E01               	movlw	1
 19323  015AFA  EC44  F0AE         	call	_LED_Toggle
 19324                           
 19325                           ;LCD.c: 104: Reset_High();
 19326  015AFE  ECD7  F0B1         	call	_Reset_High	;wreg free
 19327                           
 19328                           ;LCD.c: 105: delay_ms(0x80);
 19329  015B02  0E00               	movlw	0
 19330  015B04  0100               	movlb	0	; () banked
 19331  015B06  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 19332  015B08  0E80               	movlw	128
 19333  015B0A  6FBA               	movwf	delay_ms@ms& (0+255),b
 19334  015B0C  ECFC  F0AA         	call	_delay_ms	;wreg free
 19335                           
 19336                           ;LCD.c: 106: LED_Toggle(eLED2);
 19337  015B10  0E01               	movlw	1
 19338  015B12  EC44  F0AE         	call	_LED_Toggle
 19339  015B16  0012               	return		;funcret
 19340  015B18                     __end_of_LCD_Reset:
 19341                           	opt stack 0
 19342                           tosu	equ	0xFFF
 19343                           tosh	equ	0xFFE
 19344                           tosl	equ	0xFFD
 19345                           pclath	equ	0xFFA
 19346                           tblptru	equ	0xFF8
 19347                           tblptrh	equ	0xFF7
 19348                           tblptrl	equ	0xFF6
 19349                           tablat	equ	0xFF5
 19350                           prodh	equ	0xFF4
 19351                           prodl	equ	0xFF3
 19352                           intcon	equ	0xFF2
 19353                           postinc0	equ	0xFEE
 19354                           wreg	equ	0xFE8
 19355                           indf1	equ	0xFE7
 19356                           postdec1	equ	0xFE5
 19357                           fsr1h	equ	0xFE2
 19358                           fsr1l	equ	0xFE1
 19359                           indf2	equ	0xFDF
 19360                           postinc2	equ	0xFDE
 19361                           postdec2	equ	0xFDD
 19362                           plusw2	equ	0xFDB
 19363                           fsr2h	equ	0xFDA
 19364                           fsr2l	equ	0xFD9
 19365                           status	equ	0xFD8
 19366                           
 19367 ;; *************** function _delay_ms *****************
 19368 ;; Defined at:
 19369 ;;		line 240 in file "Library/Types.c"
 19370 ;; Parameters:    Size  Location     Type
 19371 ;;  ms              2    0[BANK0 ] unsigned short 
 19372 ;; Auto vars:     Size  Location     Type
 19373 ;;  u               4    2[BANK0 ] volatile unsigned long 
 19374 ;; Return value:  Size  Location     Type
 19375 ;;                  1    wreg      void 
 19376 ;; Registers used:
 19377 ;;		wreg, status,2, status,0
 19378 ;; Tracked objects:
 19379 ;;		On entry : 0/0
 19380 ;;		On exit  : 0/0
 19381 ;;		Unchanged: 0/0
 19382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19383 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19384 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19386 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19387 ;;Total ram usage:        6 bytes
 19388 ;; Hardware stack levels used:    1
 19389 ;; Hardware stack levels required when called:    7
 19390 ;; This function calls:
 19391 ;;		Nothing
 19392 ;; This function is called by:
 19393 ;;		_LCD_Reset
 19394 ;;		_LCD_Init
 19395 ;;		_MXK_Init
 19396 ;;		_init
 19397 ;;		_move_and_rotate
 19398 ;; This function uses a non-reentrant model
 19399 ;;
 19400                           
 19401                           	psect	text91
 19402  0155F8                     __ptext91:
 19403                           	opt stack 0
 19404  0155F8                     _delay_ms:
 19405                           	opt stack 21
 19406                           
 19407                           ;Types.c: 242: volatile unsigned long u;
 19408                           ;Types.c: 243: while (ms--)
 19409                           
 19410                           ;incstack = 0
 19411  0155F8  D01F               	goto	u9360
 19412  0155FA                     l12727:
 19413                           
 19414                           ;Types.c: 244: {
 19415                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 19416  0155FA  0E00               	movlw	0
 19417  0155FC  0100               	movlb	0	; () banked
 19418  0155FE  6FBC               	movwf	delay_ms@u& (0+255),b	;volatile
 19419  015600  0E00               	movlw	0
 19420  015602  6FBD               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 19421  015604  0E00               	movlw	0
 19422  015606  6FBE               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 19423  015608  0E00               	movlw	0
 19424  01560A  6FBF               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 19425  01560C                     l12729:
 19426                           
 19427                           ; BSR set to: 0
 19428  01560C  0100               	movlb	0	; () banked
 19429  01560E  51BF               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 19430  015610  0100               	movlb	0	; () banked
 19431  015612  11BE               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 19432  015614  E111               	bnz	l12735
 19433  015616  0EB0               	movlw	176
 19434  015618  0100               	movlb	0	; () banked
 19435  01561A  5DBC               	subwf	delay_ms@u& (0+255),w,b	;volatile
 19436  01561C  0E04               	movlw	4
 19437  01561E  0100               	movlb	0	; () banked
 19438  015620  59BD               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 19439  015622  B0D8               	btfsc	status,0,c
 19440  015624  D009               	goto	u9360
 19441                           
 19442                           ; BSR set to: 0
 19443                           
 19444                           ; BSR set to: 0
 19445  015626  F000               	nop		; ;# 
 19446  015628  0E01               	movlw	1
 19447  01562A  0100               	movlb	0	; () banked
 19448  01562C  27BC               	addwf	delay_ms@u& (0+255),f,b	;volatile
 19449  01562E  0E00               	movlw	0
 19450  015630  23BD               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 19451  015632  23BE               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 19452  015634  23BF               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 19453  015636  D7EA               	goto	l12729
 19454  015638                     u9360:
 19455  015638                     l12735:
 19456  015638  0100               	movlb	0	; () banked
 19457  01563A  07BA               	decf	delay_ms@ms& (0+255),f,b
 19458  01563C  A0D8               	btfss	status,0,c
 19459  01563E  07BB               	decf	(delay_ms@ms+1)& (0+255),f,b
 19460  015640  0100               	movlb	0	; () banked
 19461  015642  29BA               	incf	delay_ms@ms& (0+255),w,b
 19462  015644  E1DA               	bnz	l12727
 19463  015646  0100               	movlb	0	; () banked
 19464  015648  29BB               	incf	(delay_ms@ms+1)& (0+255),w,b
 19465  01564A  A4D8               	btfss	status,2,c
 19466  01564C  D7D6               	goto	l824
 19467                           
 19468                           ; BSR set to: 0
 19469                           ;Types.c: 251: }
 19470                           ;Types.c: 252: }
 19471                           ;Types.c: 253: u = 0x8008;
 19472                           
 19473                           ; BSR set to: 0
 19474  01564E  0E08               	movlw	8
 19475  015650  0100               	movlb	0	; () banked
 19476  015652  6FBC               	movwf	delay_ms@u& (0+255),b	;volatile
 19477  015654  0E80               	movlw	128
 19478  015656  6FBD               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 19479  015658  0E00               	movlw	0
 19480  01565A  6FBE               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 19481  01565C  0E00               	movlw	0
 19482  01565E  6FBF               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 19483                           
 19484                           ; BSR set to: 0
 19485  015660  0012               	return		;funcret
 19486  015662                     __end_of_delay_ms:
 19487                           	opt stack 0
 19488                           tosu	equ	0xFFF
 19489                           tosh	equ	0xFFE
 19490                           tosl	equ	0xFFD
 19491                           pclath	equ	0xFFA
 19492                           tblptru	equ	0xFF8
 19493                           tblptrh	equ	0xFF7
 19494                           tblptrl	equ	0xFF6
 19495                           tablat	equ	0xFF5
 19496                           prodh	equ	0xFF4
 19497                           prodl	equ	0xFF3
 19498                           intcon	equ	0xFF2
 19499                           postinc0	equ	0xFEE
 19500                           wreg	equ	0xFE8
 19501                           indf1	equ	0xFE7
 19502                           postdec1	equ	0xFE5
 19503                           fsr1h	equ	0xFE2
 19504                           fsr1l	equ	0xFE1
 19505                           indf2	equ	0xFDF
 19506                           postinc2	equ	0xFDE
 19507                           postdec2	equ	0xFDD
 19508                           plusw2	equ	0xFDB
 19509                           fsr2h	equ	0xFDA
 19510                           fsr2l	equ	0xFD9
 19511                           status	equ	0xFD8
 19512                           
 19513 ;; *************** function _Reset_Low *****************
 19514 ;; Defined at:
 19515 ;;		line 32 in file "Library/LCD.c"
 19516 ;; Parameters:    Size  Location     Type
 19517 ;;		None
 19518 ;; Auto vars:     Size  Location     Type
 19519 ;;		None
 19520 ;; Return value:  Size  Location     Type
 19521 ;;                  1    wreg      void 
 19522 ;; Registers used:
 19523 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19524 ;; Tracked objects:
 19525 ;;		On entry : 0/0
 19526 ;;		On exit  : 0/0
 19527 ;;		Unchanged: 0/0
 19528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19532 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19533 ;;Total ram usage:        0 bytes
 19534 ;; Hardware stack levels used:    1
 19535 ;; Hardware stack levels required when called:   11
 19536 ;; This function calls:
 19537 ;;		_Port_SetPin
 19538 ;; This function is called by:
 19539 ;;		_LCD_Reset
 19540 ;; This function uses a non-reentrant model
 19541 ;;
 19542                           
 19543                           	psect	text92
 19544  016390                     __ptext92:
 19545                           	opt stack 0
 19546  016390                     _Reset_Low:
 19547                           	opt stack 15
 19548                           
 19549                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
 19550                           
 19551                           ; BSR set to: 0
 19552                           ;incstack = 0
 19553  016390  0EBE               	movlw	low _PortF
 19554  016392  0100               	movlb	0	; () banked
 19555  016394  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 19556  016396  0E03               	movlw	high _PortF
 19557  016398  0100               	movlb	0	; () banked
 19558  01639A  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 19559  01639C  0E06               	movlw	6
 19560  01639E  0100               	movlb	0	; () banked
 19561  0163A0  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 19562  0163A2  0E01               	movlw	1
 19563  0163A4  0100               	movlb	0	; () banked
 19564  0163A6  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 19565  0163A8  EC57  F09F         	call	_Port_SetPin	;wreg free
 19566  0163AC  0012               	return		;funcret
 19567  0163AE                     __end_of_Reset_Low:
 19568                           	opt stack 0
 19569                           tosu	equ	0xFFF
 19570                           tosh	equ	0xFFE
 19571                           tosl	equ	0xFFD
 19572                           pclath	equ	0xFFA
 19573                           tblptru	equ	0xFF8
 19574                           tblptrh	equ	0xFF7
 19575                           tblptrl	equ	0xFF6
 19576                           tablat	equ	0xFF5
 19577                           prodh	equ	0xFF4
 19578                           prodl	equ	0xFF3
 19579                           intcon	equ	0xFF2
 19580                           postinc0	equ	0xFEE
 19581                           wreg	equ	0xFE8
 19582                           indf1	equ	0xFE7
 19583                           postdec1	equ	0xFE5
 19584                           fsr1h	equ	0xFE2
 19585                           fsr1l	equ	0xFE1
 19586                           indf2	equ	0xFDF
 19587                           postinc2	equ	0xFDE
 19588                           postdec2	equ	0xFDD
 19589                           plusw2	equ	0xFDB
 19590                           fsr2h	equ	0xFDA
 19591                           fsr2l	equ	0xFD9
 19592                           status	equ	0xFD8
 19593                           
 19594 ;; *************** function _Reset_High *****************
 19595 ;; Defined at:
 19596 ;;		line 36 in file "Library/LCD.c"
 19597 ;; Parameters:    Size  Location     Type
 19598 ;;		None
 19599 ;; Auto vars:     Size  Location     Type
 19600 ;;		None
 19601 ;; Return value:  Size  Location     Type
 19602 ;;                  1    wreg      void 
 19603 ;; Registers used:
 19604 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19605 ;; Tracked objects:
 19606 ;;		On entry : 0/0
 19607 ;;		On exit  : 0/0
 19608 ;;		Unchanged: 0/0
 19609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19613 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19614 ;;Total ram usage:        0 bytes
 19615 ;; Hardware stack levels used:    1
 19616 ;; Hardware stack levels required when called:   11
 19617 ;; This function calls:
 19618 ;;		_Port_SetPin
 19619 ;; This function is called by:
 19620 ;;		_LCD_Reset
 19621 ;; This function uses a non-reentrant model
 19622 ;;
 19623                           
 19624                           	psect	text93
 19625  0163AE                     __ptext93:
 19626                           	opt stack 0
 19627  0163AE                     _Reset_High:
 19628                           	opt stack 15
 19629                           
 19630                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
 19631                           
 19632                           ;incstack = 0
 19633  0163AE  0EBE               	movlw	low _PortF
 19634  0163B0  0100               	movlb	0	; () banked
 19635  0163B2  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 19636  0163B4  0E03               	movlw	high _PortF
 19637  0163B6  0100               	movlb	0	; () banked
 19638  0163B8  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 19639  0163BA  0E06               	movlw	6
 19640  0163BC  0100               	movlb	0	; () banked
 19641  0163BE  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 19642  0163C0  0E00               	movlw	0
 19643  0163C2  0100               	movlb	0	; () banked
 19644  0163C4  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 19645  0163C6  EC57  F09F         	call	_Port_SetPin	;wreg free
 19646  0163CA  0012               	return		;funcret
 19647  0163CC                     __end_of_Reset_High:
 19648                           	opt stack 0
 19649                           tosu	equ	0xFFF
 19650                           tosh	equ	0xFFE
 19651                           tosl	equ	0xFFD
 19652                           pclath	equ	0xFFA
 19653                           tblptru	equ	0xFF8
 19654                           tblptrh	equ	0xFF7
 19655                           tblptrl	equ	0xFF6
 19656                           tablat	equ	0xFF5
 19657                           prodh	equ	0xFF4
 19658                           prodl	equ	0xFF3
 19659                           intcon	equ	0xFF2
 19660                           postinc0	equ	0xFEE
 19661                           wreg	equ	0xFE8
 19662                           indf1	equ	0xFE7
 19663                           postdec1	equ	0xFE5
 19664                           fsr1h	equ	0xFE2
 19665                           fsr1l	equ	0xFE1
 19666                           indf2	equ	0xFDF
 19667                           postinc2	equ	0xFDE
 19668                           postdec2	equ	0xFDD
 19669                           plusw2	equ	0xFDB
 19670                           fsr2h	equ	0xFDA
 19671                           fsr2l	equ	0xFD9
 19672                           status	equ	0xFD8
 19673                           
 19674 ;; *************** function _ISR_Enable *****************
 19675 ;; Defined at:
 19676 ;;		line 27 in file "Library/ISR.c"
 19677 ;; Parameters:    Size  Location     Type
 19678 ;;		None
 19679 ;; Auto vars:     Size  Location     Type
 19680 ;;		None
 19681 ;; Return value:  Size  Location     Type
 19682 ;;                  1    wreg      void 
 19683 ;; Registers used:
 19684 ;;		None
 19685 ;; Tracked objects:
 19686 ;;		On entry : 0/0
 19687 ;;		On exit  : 0/0
 19688 ;;		Unchanged: 0/0
 19689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19693 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19694 ;;Total ram usage:        0 bytes
 19695 ;; Hardware stack levels used:    1
 19696 ;; Hardware stack levels required when called:    7
 19697 ;; This function calls:
 19698 ;;		Nothing
 19699 ;; This function is called by:
 19700 ;;		_init
 19701 ;; This function uses a non-reentrant model
 19702 ;;
 19703                           
 19704                           	psect	text94
 19705  016656                     __ptext94:
 19706                           	opt stack 0
 19707  016656                     _ISR_Enable:
 19708                           	opt stack 22
 19709                           
 19710                           ;ISR.c: 29: INTCONbits.PEIE = 1;
 19711                           
 19712                           ;incstack = 0
 19713  016656  8CF2               	bsf	intcon,6,c	;volatile
 19714                           
 19715                           ;ISR.c: 30: INTCONbits.GIE = 1;
 19716  016658  8EF2               	bsf	intcon,7,c	;volatile
 19717                           
 19718                           ;ISR.c: 31: INTCONbits.INT0IE = 1;
 19719  01665A  88F2               	bsf	intcon,4,c	;volatile
 19720                           
 19721                           ;ISR.c: 32: INTCONbits.INT0IF = 0;
 19722  01665C  92F2               	bcf	intcon,1,c	;volatile
 19723  01665E  0012               	return		;funcret
 19724  016660                     __end_of_ISR_Enable:
 19725                           	opt stack 0
 19726                           tosu	equ	0xFFF
 19727                           tosh	equ	0xFFE
 19728                           tosl	equ	0xFFD
 19729                           pclath	equ	0xFFA
 19730                           tblptru	equ	0xFF8
 19731                           tblptrh	equ	0xFF7
 19732                           tblptrl	equ	0xFF6
 19733                           tablat	equ	0xFF5
 19734                           prodh	equ	0xFF4
 19735                           prodl	equ	0xFF3
 19736                           intcon	equ	0xFF2
 19737                           postinc0	equ	0xFEE
 19738                           wreg	equ	0xFE8
 19739                           indf1	equ	0xFE7
 19740                           postdec1	equ	0xFE5
 19741                           fsr1h	equ	0xFE2
 19742                           fsr1l	equ	0xFE1
 19743                           indf2	equ	0xFDF
 19744                           postinc2	equ	0xFDE
 19745                           postdec2	equ	0xFDD
 19746                           plusw2	equ	0xFDB
 19747                           fsr2h	equ	0xFDA
 19748                           fsr2l	equ	0xFD9
 19749                           status	equ	0xFD8
 19750                           
 19751 ;; *************** function _HMI_Init *****************
 19752 ;; Defined at:
 19753 ;;		line 104 in file "HMI.c"
 19754 ;; Parameters:    Size  Location     Type
 19755 ;;		None
 19756 ;; Auto vars:     Size  Location     Type
 19757 ;;  in              2   59[BANK0 ] unsigned short 
 19758 ;; Return value:  Size  Location     Type
 19759 ;;                  1    wreg      void 
 19760 ;; Registers used:
 19761 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19762 ;; Tracked objects:
 19763 ;;		On entry : 0/0
 19764 ;;		On exit  : 0/0
 19765 ;;		Unchanged: 0/0
 19766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19768 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19770 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19771 ;;Total ram usage:        2 bytes
 19772 ;; Hardware stack levels used:    1
 19773 ;; Hardware stack levels required when called:   16
 19774 ;; This function calls:
 19775 ;;		_Button_Init
 19776 ;;		_SPI_Init
 19777 ;;		_SPI_MinSpeed
 19778 ;; This function is called by:
 19779 ;;		_init
 19780 ;; This function uses a non-reentrant model
 19781 ;;
 19782                           
 19783                           	psect	text95
 19784  011FDE                     __ptext95:
 19785                           	opt stack 0
 19786  011FDE                     _HMI_Init:
 19787                           	opt stack 13
 19788                           
 19789                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 19790                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_NULL);
 19791                           
 19792                           ;incstack = 0
 19793  011FDE  0E6C               	movlw	low (_HMIBoard+48)
 19794  011FE0  0101               	movlb	1	; () banked
 19795  011FE2  6F00               	movwf	Button_Init@pInput& (0+255),b
 19796  011FE4  0E03               	movlw	high (_HMIBoard+48)
 19797  011FE6  0101               	movlb	1	; () banked
 19798  011FE8  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 19799  011FEA  0E00               	movlw	0
 19800  011FEC  0101               	movlb	1	; () banked
 19801  011FEE  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 19802  011FF0  0E02               	movlw	2
 19803  011FF2  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 19804  011FF4  0E90               	movlw	low _HMI_InitButtons
 19805  011FF6  0101               	movlb	1	; () banked
 19806  011FF8  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 19807  011FFA  0E66               	movlw	high _HMI_InitButtons
 19808  011FFC  0101               	movlb	1	; () banked
 19809  011FFE  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 19810  012000  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 19811  012002  0101               	movlb	1	; () banked
 19812  012004  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 19813  012006  0EC4               	movlw	low _HMI_DIPSwitch
 19814  012008  0101               	movlb	1	; () banked
 19815  01200A  6F07               	movwf	Button_Init@pGetState& (0+255),b
 19816  01200C  0E64               	movlw	high _HMI_DIPSwitch
 19817  01200E  0101               	movlb	1	; () banked
 19818  012010  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 19819  012012  0E01               	movlw	low (_HMI_DIPSwitch shr (0+16))
 19820  012014  0101               	movlb	1	; () banked
 19821  012016  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 19822  012018  0E04               	movlw	low _Event_NULL
 19823  01201A  0101               	movlb	1	; () banked
 19824  01201C  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 19825  01201E  0E14               	movlw	high _Event_NULL
 19826  012020  0101               	movlb	1	; () banked
 19827  012022  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 19828  012024  0E00               	movlw	low (_Event_NULL shr (0+16))
 19829  012026  0101               	movlb	1	; () banked
 19830  012028  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 19831  01202A  EC85  F09E         	call	_Button_Init	;wreg free
 19832                           
 19833                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 19834                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_NULL);
 19835  01202E  0E4E               	movlw	low (_HMIBoard+18)
 19836  012030  0101               	movlb	1	; () banked
 19837  012032  6F00               	movwf	Button_Init@pInput& (0+255),b
 19838  012034  0E03               	movlw	high (_HMIBoard+18)
 19839  012036  0101               	movlb	1	; () banked
 19840  012038  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 19841  01203A  0E00               	movlw	0
 19842  01203C  0101               	movlb	1	; () banked
 19843  01203E  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 19844  012040  0E02               	movlw	2
 19845  012042  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 19846  012044  0E90               	movlw	low _HMI_InitButtons
 19847  012046  0101               	movlb	1	; () banked
 19848  012048  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 19849  01204A  0E66               	movlw	high _HMI_InitButtons
 19850  01204C  0101               	movlb	1	; () banked
 19851  01204E  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 19852  012050  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 19853  012052  0101               	movlb	1	; () banked
 19854  012054  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 19855  012056  0E24               	movlw	low _HMI_LeftSwitch
 19856  012058  0101               	movlb	1	; () banked
 19857  01205A  6F07               	movwf	Button_Init@pGetState& (0+255),b
 19858  01205C  0E65               	movlw	high _HMI_LeftSwitch
 19859  01205E  0101               	movlb	1	; () banked
 19860  012060  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 19861  012062  0E01               	movlw	low (_HMI_LeftSwitch shr (0+16))
 19862  012064  0101               	movlb	1	; () banked
 19863  012066  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 19864  012068  0E04               	movlw	low _Event_NULL
 19865  01206A  0101               	movlb	1	; () banked
 19866  01206C  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 19867  01206E  0E14               	movlw	high _Event_NULL
 19868  012070  0101               	movlb	1	; () banked
 19869  012072  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 19870  012074  0E00               	movlw	low (_Event_NULL shr (0+16))
 19871  012076  0101               	movlb	1	; () banked
 19872  012078  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 19873  01207A  EC85  F09E         	call	_Button_Init	;wreg free
 19874                           
 19875                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 19876                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_NULL);
 19877  01207E  0E44               	movlw	low (_HMIBoard+8)
 19878  012080  0101               	movlb	1	; () banked
 19879  012082  6F00               	movwf	Button_Init@pInput& (0+255),b
 19880  012084  0E03               	movlw	high (_HMIBoard+8)
 19881  012086  0101               	movlb	1	; () banked
 19882  012088  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 19883  01208A  0E00               	movlw	0
 19884  01208C  0101               	movlb	1	; () banked
 19885  01208E  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 19886  012090  0E02               	movlw	2
 19887  012092  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 19888  012094  0E90               	movlw	low _HMI_InitButtons
 19889  012096  0101               	movlb	1	; () banked
 19890  012098  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 19891  01209A  0E66               	movlw	high _HMI_InitButtons
 19892  01209C  0101               	movlb	1	; () banked
 19893  01209E  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 19894  0120A0  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 19895  0120A2  0101               	movlb	1	; () banked
 19896  0120A4  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 19897  0120A6  0E0C               	movlw	low _HMI_RightSwitch
 19898  0120A8  0101               	movlb	1	; () banked
 19899  0120AA  6F07               	movwf	Button_Init@pGetState& (0+255),b
 19900  0120AC  0E65               	movlw	high _HMI_RightSwitch
 19901  0120AE  0101               	movlb	1	; () banked
 19902  0120B0  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 19903  0120B2  0E01               	movlw	low (_HMI_RightSwitch shr (0+16))
 19904  0120B4  0101               	movlb	1	; () banked
 19905  0120B6  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 19906  0120B8  0E04               	movlw	low _Event_NULL
 19907  0120BA  0101               	movlb	1	; () banked
 19908  0120BC  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 19909  0120BE  0E14               	movlw	high _Event_NULL
 19910  0120C0  0101               	movlb	1	; () banked
 19911  0120C2  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 19912  0120C4  0E00               	movlw	low (_Event_NULL shr (0+16))
 19913  0120C6  0101               	movlb	1	; () banked
 19914  0120C8  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 19915  0120CA  EC85  F09E         	call	_Button_Init	;wreg free
 19916                           
 19917                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 19918                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_NULL);
 19919  0120CE  0E58               	movlw	low (_HMIBoard+28)
 19920  0120D0  0101               	movlb	1	; () banked
 19921  0120D2  6F00               	movwf	Button_Init@pInput& (0+255),b
 19922  0120D4  0E03               	movlw	high (_HMIBoard+28)
 19923  0120D6  0101               	movlb	1	; () banked
 19924  0120D8  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 19925  0120DA  0E00               	movlw	0
 19926  0120DC  0101               	movlb	1	; () banked
 19927  0120DE  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 19928  0120E0  0E02               	movlw	2
 19929  0120E2  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 19930  0120E4  0E90               	movlw	low _HMI_InitButtons
 19931  0120E6  0101               	movlb	1	; () banked
 19932  0120E8  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 19933  0120EA  0E66               	movlw	high _HMI_InitButtons
 19934  0120EC  0101               	movlb	1	; () banked
 19935  0120EE  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 19936  0120F0  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 19937  0120F2  0101               	movlb	1	; () banked
 19938  0120F4  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 19939  0120F6  0EF4               	movlw	low _HMI_UpSwitch
 19940  0120F8  0101               	movlb	1	; () banked
 19941  0120FA  6F07               	movwf	Button_Init@pGetState& (0+255),b
 19942  0120FC  0E64               	movlw	high _HMI_UpSwitch
 19943  0120FE  0101               	movlb	1	; () banked
 19944  012100  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 19945  012102  0E01               	movlw	low (_HMI_UpSwitch shr (0+16))
 19946  012104  0101               	movlb	1	; () banked
 19947  012106  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 19948  012108  0E04               	movlw	low _Event_NULL
 19949  01210A  0101               	movlb	1	; () banked
 19950  01210C  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 19951  01210E  0E14               	movlw	high _Event_NULL
 19952  012110  0101               	movlb	1	; () banked
 19953  012112  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 19954  012114  0E00               	movlw	low (_Event_NULL shr (0+16))
 19955  012116  0101               	movlb	1	; () banked
 19956  012118  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 19957  01211A  EC85  F09E         	call	_Button_Init	;wreg free
 19958                           
 19959                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 19960                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_NULL);
 19961  01211E  0E62               	movlw	low (_HMIBoard+38)
 19962  012120  0101               	movlb	1	; () banked
 19963  012122  6F00               	movwf	Button_Init@pInput& (0+255),b
 19964  012124  0E03               	movlw	high (_HMIBoard+38)
 19965  012126  0101               	movlb	1	; () banked
 19966  012128  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 19967  01212A  0E00               	movlw	0
 19968  01212C  0101               	movlb	1	; () banked
 19969  01212E  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 19970  012130  0E02               	movlw	2
 19971  012132  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 19972  012134  0E90               	movlw	low _HMI_InitButtons
 19973  012136  0101               	movlb	1	; () banked
 19974  012138  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 19975  01213A  0E66               	movlw	high _HMI_InitButtons
 19976  01213C  0101               	movlb	1	; () banked
 19977  01213E  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 19978  012140  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 19979  012142  0101               	movlb	1	; () banked
 19980  012144  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 19981  012146  0EDC               	movlw	low _HMI_DownSwitch
 19982  012148  0101               	movlb	1	; () banked
 19983  01214A  6F07               	movwf	Button_Init@pGetState& (0+255),b
 19984  01214C  0E64               	movlw	high _HMI_DownSwitch
 19985  01214E  0101               	movlb	1	; () banked
 19986  012150  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 19987  012152  0E01               	movlw	low (_HMI_DownSwitch shr (0+16))
 19988  012154  0101               	movlb	1	; () banked
 19989  012156  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 19990  012158  0E04               	movlw	low _Event_NULL
 19991  01215A  0101               	movlb	1	; () banked
 19992  01215C  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 19993  01215E  0E14               	movlw	high _Event_NULL
 19994  012160  0101               	movlb	1	; () banked
 19995  012162  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 19996  012164  0E00               	movlw	low (_Event_NULL shr (0+16))
 19997  012166  0101               	movlb	1	; () banked
 19998  012168  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 19999  01216A  EC85  F09E         	call	_Button_Init	;wreg free
 20000                           
 20001                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 20002  01216E  0EA0               	movlw	160
 20003  012170  0100               	movlb	0	; () banked
 20004  012172  6FE7               	movwf	SPI_Init@pClock& (0+255),b
 20005  012174  0E86               	movlw	134
 20006  012176  6FE8               	movwf	(SPI_Init@pClock+1)& (0+255),b
 20007  012178  0E01               	movlw	1
 20008  01217A  6FE9               	movwf	(SPI_Init@pClock+2)& (0+255),b
 20009  01217C  0E00               	movlw	0
 20010  01217E  6FEA               	movwf	(SPI_Init@pClock+3)& (0+255),b
 20011  012180  0E00               	movlw	0
 20012  012182  0100               	movlb	0	; () banked
 20013  012184  6FEB               	movwf	SPI_Init@pChannel& (0+255),b
 20014  012186  0E02               	movlw	2
 20015  012188  0100               	movlb	0	; () banked
 20016  01218A  6FEC               	movwf	SPI_Init@pMode& (0+255),b
 20017  01218C  EC53  F082         	call	_SPI_Init	;wreg free
 20018                           
 20019                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 20020  012190  0E76               	movlw	low _SPI1
 20021  012192  0100               	movlb	0	; () banked
 20022  012194  6FC9               	movwf	SPI_MinSpeed@pInput& (0+255),b
 20023  012196  0E03               	movlw	high _SPI1
 20024  012198  0100               	movlb	0	; () banked
 20025  01219A  6FCA               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 20026  01219C  ECAF  F0A9         	call	_SPI_MinSpeed	;wreg free
 20027                           
 20028                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 20029  0121A0  0E00               	movlw	0
 20030  0121A2  0100               	movlb	0	; () banked
 20031  0121A4  6FF6               	movwf	(HMI_Init@in+1)& (0+255),b
 20032  0121A6  0E00               	movlw	0
 20033  0121A8  6FF5               	movwf	HMI_Init@in& (0+255),b
 20034  0121AA                     l14383:
 20035                           
 20036                           ; BSR set to: 0
 20037  0121AA  0100               	movlb	0	; () banked
 20038  0121AC  51F6               	movf	(HMI_Init@in+1)& (0+255),w,b
 20039  0121AE  E113               	bnz	l1153
 20040  0121B0  0E08               	movlw	8
 20041  0121B2  0100               	movlb	0	; () banked
 20042  0121B4  5DF5               	subwf	HMI_Init@in& (0+255),w,b
 20043  0121B6  B0D8               	btfsc	status,0,c
 20044  0121B8  0012               	return	
 20045                           
 20046                           ; BSR set to: 0
 20047                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 20048                           
 20049                           ; BSR set to: 0
 20050                           
 20051                           ; BSR set to: 0
 20052  0121BA  0E3C               	movlw	low _HMIBoard
 20053  0121BC  0100               	movlb	0	; () banked
 20054  0121BE  25F5               	addwf	HMI_Init@in& (0+255),w,b
 20055  0121C0  6ED9               	movwf	fsr2l,c
 20056  0121C2  0E03               	movlw	high _HMIBoard
 20057  0121C4  0100               	movlb	0	; () banked
 20058  0121C6  21F6               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 20059  0121C8  6EDA               	movwf	fsr2h,c
 20060  0121CA  0E00               	movlw	0
 20061  0121CC  6EDF               	movwf	indf2,c
 20062                           
 20063                           ; BSR set to: 0
 20064  0121CE  0100               	movlb	0	; () banked
 20065  0121D0  4BF5               	infsnz	HMI_Init@in& (0+255),f,b
 20066  0121D2  2BF6               	incf	(HMI_Init@in+1)& (0+255),f,b
 20067  0121D4  D7EA               	goto	l14383
 20068  0121D6                     l1153:
 20069                           
 20070                           ; BSR set to: 0
 20071  0121D6  0012               	return		;funcret
 20072  0121D8                     __end_of_HMI_Init:
 20073                           	opt stack 0
 20074                           tosu	equ	0xFFF
 20075                           tosh	equ	0xFFE
 20076                           tosl	equ	0xFFD
 20077                           pclath	equ	0xFFA
 20078                           tblptru	equ	0xFF8
 20079                           tblptrh	equ	0xFF7
 20080                           tblptrl	equ	0xFF6
 20081                           tablat	equ	0xFF5
 20082                           prodh	equ	0xFF4
 20083                           prodl	equ	0xFF3
 20084                           intcon	equ	0xFF2
 20085                           postinc0	equ	0xFEE
 20086                           wreg	equ	0xFE8
 20087                           indf1	equ	0xFE7
 20088                           postdec1	equ	0xFE5
 20089                           fsr1h	equ	0xFE2
 20090                           fsr1l	equ	0xFE1
 20091                           indf2	equ	0xFDF
 20092                           postinc2	equ	0xFDE
 20093                           postdec2	equ	0xFDD
 20094                           plusw2	equ	0xFDB
 20095                           fsr2h	equ	0xFDA
 20096                           fsr2l	equ	0xFD9
 20097                           status	equ	0xFD8
 20098                           
 20099 ;; *************** function _SPI_MinSpeed *****************
 20100 ;; Defined at:
 20101 ;;		line 190 in file "Library/SPI.c"
 20102 ;; Parameters:    Size  Location     Type
 20103 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 20104 ;;		 -> SPI1(11), 
 20105 ;; Auto vars:     Size  Location     Type
 20106 ;;		None
 20107 ;; Return value:  Size  Location     Type
 20108 ;;                  1    wreg      void 
 20109 ;; Registers used:
 20110 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20111 ;; Tracked objects:
 20112 ;;		On entry : 0/0
 20113 ;;		On exit  : 0/0
 20114 ;;		Unchanged: 0/0
 20115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20116 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20119 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20120 ;;Total ram usage:        2 bytes
 20121 ;; Hardware stack levels used:    1
 20122 ;; Hardware stack levels required when called:    9
 20123 ;; This function calls:
 20124 ;;		_Byte_SetBit
 20125 ;;		_Byte_SetQuad
 20126 ;; This function is called by:
 20127 ;;		_HMI_Init
 20128 ;; This function uses a non-reentrant model
 20129 ;;
 20130                           
 20131                           	psect	text96
 20132  01535E                     __ptext96:
 20133                           	opt stack 0
 20134  01535E                     _SPI_MinSpeed:
 20135                           	opt stack 19
 20136                           
 20137                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 20138                           
 20139                           ; BSR set to: 0
 20140                           ;incstack = 0
 20141  01535E  0100               	movlb	0	; () banked
 20142  015360  EE20 F006          	lfsr	2,6
 20143  015364  51C9               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 20144  015366  26D9               	addwf	fsr2l,f,c
 20145  015368  51CA               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 20146  01536A  22DA               	addwfc	fsr2h,f,c
 20147  01536C  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20148  015370  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20149  015374  0E05               	movlw	5
 20150  015376  0100               	movlb	0	; () banked
 20151  015378  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20152  01537A  0E00               	movlw	0
 20153  01537C  0100               	movlb	0	; () banked
 20154  01537E  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20155  015380  ECCC  F0AB         	call	_Byte_SetBit	;wreg free
 20156                           
 20157                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 20158  015384  0100               	movlb	0	; () banked
 20159  015386  EE20 F006          	lfsr	2,6
 20160  01538A  51C9               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 20161  01538C  26D9               	addwf	fsr2l,f,c
 20162  01538E  51CA               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 20163  015390  22DA               	addwfc	fsr2h,f,c
 20164  015392  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 20165  015396  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 20166  01539A  0E00               	movlw	0
 20167  01539C  0100               	movlb	0	; () banked
 20168  01539E  6FC7               	movwf	Byte_SetQuad@pQuad& (0+255),b
 20169  0153A0  0E02               	movlw	2
 20170  0153A2  0100               	movlb	0	; () banked
 20171  0153A4  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 20172  0153A6  EC7A  F0B1         	call	_Byte_SetQuad	;wreg free
 20173                           
 20174                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 20175  0153AA  0100               	movlb	0	; () banked
 20176  0153AC  EE20 F006          	lfsr	2,6
 20177  0153B0  51C9               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 20178  0153B2  26D9               	addwf	fsr2l,f,c
 20179  0153B4  51CA               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 20180  0153B6  22DA               	addwfc	fsr2h,f,c
 20181  0153B8  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20182  0153BC  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20183  0153C0  0E05               	movlw	5
 20184  0153C2  0100               	movlb	0	; () banked
 20185  0153C4  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20186  0153C6  0E01               	movlw	1
 20187  0153C8  0100               	movlb	0	; () banked
 20188  0153CA  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20189  0153CC  ECCC  F0AB         	call	_Byte_SetBit	;wreg free
 20190  0153D0  0012               	return		;funcret
 20191  0153D2                     __end_of_SPI_MinSpeed:
 20192                           	opt stack 0
 20193                           tosu	equ	0xFFF
 20194                           tosh	equ	0xFFE
 20195                           tosl	equ	0xFFD
 20196                           pclath	equ	0xFFA
 20197                           tblptru	equ	0xFF8
 20198                           tblptrh	equ	0xFF7
 20199                           tblptrl	equ	0xFF6
 20200                           tablat	equ	0xFF5
 20201                           prodh	equ	0xFF4
 20202                           prodl	equ	0xFF3
 20203                           intcon	equ	0xFF2
 20204                           postinc0	equ	0xFEE
 20205                           wreg	equ	0xFE8
 20206                           indf1	equ	0xFE7
 20207                           postdec1	equ	0xFE5
 20208                           fsr1h	equ	0xFE2
 20209                           fsr1l	equ	0xFE1
 20210                           indf2	equ	0xFDF
 20211                           postinc2	equ	0xFDE
 20212                           postdec2	equ	0xFDD
 20213                           plusw2	equ	0xFDB
 20214                           fsr2h	equ	0xFDA
 20215                           fsr2l	equ	0xFD9
 20216                           status	equ	0xFD8
 20217                           
 20218 ;; *************** function _SPI_Init *****************
 20219 ;; Defined at:
 20220 ;;		line 12 in file "Library/SPI.c"
 20221 ;; Parameters:    Size  Location     Type
 20222 ;;  pClock          4   45[BANK0 ] unsigned long 
 20223 ;;  pChannel        1   49[BANK0 ] enum E6744
 20224 ;;  pMode           1   50[BANK0 ] enum E6748
 20225 ;; Auto vars:     Size  Location     Type
 20226 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 20227 ;;		 -> SPI1(11), SPI2(11), 
 20228 ;; Return value:  Size  Location     Type
 20229 ;;                  1    wreg      void 
 20230 ;; Registers used:
 20231 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20232 ;; Tracked objects:
 20233 ;;		On entry : 0/0
 20234 ;;		On exit  : 0/0
 20235 ;;		Unchanged: 0/0
 20236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20237 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20238 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20240 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20241 ;;Total ram usage:        8 bytes
 20242 ;; Hardware stack levels used:    1
 20243 ;; Hardware stack levels required when called:   12
 20244 ;; This function calls:
 20245 ;;		_Byte_SetBit
 20246 ;;		_Byte_SetQuad
 20247 ;;		_Port_SetPinType
 20248 ;;		_SPI_DCS
 20249 ;;		_SPI_DisableISR
 20250 ;;		_Timer2_Init
 20251 ;; This function is called by:
 20252 ;;		_Configure_GPIOs
 20253 ;;		_HMI_Init
 20254 ;; This function uses a non-reentrant model
 20255 ;;
 20256                           
 20257                           	psect	text97
 20258  0104A6                     __ptext97:
 20259                           	opt stack 0
 20260  0104A6                     _SPI_Init:
 20261                           	opt stack 15
 20262                           
 20263                           ;SPI.c: 14: SPIPtr pInput;
 20264                           ;SPI.c: 16: switch (pChannel)
 20265                           
 20266                           ;incstack = 0
 20267  0104A6  D00C               	goto	l597
 20268  0104A8                     
 20269                           ;SPI.c: 19: pInput = &SPI1;
 20270  0104A8  0E76               	movlw	low _SPI1
 20271  0104AA  0100               	movlb	0	; () banked
 20272  0104AC  6FED               	movwf	SPI_Init@pInput& (0+255),b
 20273  0104AE  0E03               	movlw	high _SPI1
 20274  0104B0  D004               	goto	L13
 20275  0104B2                     
 20276                           ; BSR set to: 0
 20277                           ;SPI.c: 22: pInput = &SPI2;
 20278                           
 20279                           ; BSR set to: 0
 20280  0104B2  0E81               	movlw	low _SPI2
 20281  0104B4  0100               	movlb	0	; () banked
 20282  0104B6  6FED               	movwf	SPI_Init@pInput& (0+255),b
 20283  0104B8  0E03               	movlw	high _SPI2
 20284  0104BA                     L13:
 20285  0104BA  0100               	movlb	0	; () banked
 20286  0104BC  6FEE               	movwf	(SPI_Init@pInput+1)& (0+255),b
 20287                           
 20288                           ; BSR set to: 0
 20289                           ;SPI.c: 24: };
 20290                           
 20291                           ;SPI.c: 23: break;
 20292  0104BE  D008               	goto	l599
 20293  0104C0                     l597:
 20294                           
 20295                           ; BSR set to: 0
 20296  0104C0  0100               	movlb	0	; () banked
 20297  0104C2  51EB               	movf	SPI_Init@pChannel& (0+255),w,b
 20298                           
 20299                           ; Switch size 1, requested type "space"
 20300                           ; Number of cases is 2, Range of values is 0 to 1
 20301                           ; switch strategies available:
 20302                           ; Name         Instructions Cycles
 20303                           ; simple_byte            7     4 (average)
 20304                           ;	Chosen strategy is simple_byte
 20305  0104C4  0A00               	xorlw	0	; case 0
 20306  0104C6  B4D8               	btfsc	status,2,c
 20307  0104C8  D7EF               	goto	l598
 20308  0104CA  0A01               	xorlw	1	; case 1
 20309  0104CC  B4D8               	btfsc	status,2,c
 20310  0104CE  D7F1               	goto	l600
 20311  0104D0                     l599:
 20312                           
 20313                           ; BSR set to: 0
 20314                           ;SPI.c: 26: pInput->mChannel = pChannel;
 20315                           
 20316                           ; BSR set to: 0
 20317  0104D0  0100               	movlb	0	; () banked
 20318  0104D2  EE20 F002          	lfsr	2,2
 20319  0104D6  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20320  0104D8  26D9               	addwf	fsr2l,f,c
 20321  0104DA  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20322  0104DC  22DA               	addwfc	fsr2h,f,c
 20323  0104DE  C0EB  FFDF         	movff	SPI_Init@pChannel,indf2
 20324                           
 20325                           ;SPI.c: 35: switch (pChannel)
 20326  0104E2  D0B1               	goto	l601
 20327  0104E4                     
 20328                           ; BSR set to: 0
 20329                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 20330                           
 20331                           ; BSR set to: 0
 20332  0104E4  0EA7               	movlw	low _PortC
 20333  0104E6  0100               	movlb	0	; () banked
 20334  0104E8  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20335  0104EA  0E00               	movlw	high _PortC
 20336  0104EC  0100               	movlb	0	; () banked
 20337  0104EE  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20338  0104F0  0E02               	movlw	2
 20339  0104F2  0100               	movlb	0	; () banked
 20340  0104F4  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20341  0104F6  0E03               	movlw	3
 20342  0104F8  0100               	movlb	0	; () banked
 20343  0104FA  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20344  0104FC  ECB4  F092         	call	_Port_SetPinType	;wreg free
 20345                           
 20346                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 20347  010500  0EA7               	movlw	low _PortC
 20348  010502  0100               	movlb	0	; () banked
 20349  010504  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20350  010506  0E00               	movlw	high _PortC
 20351  010508  0100               	movlb	0	; () banked
 20352  01050A  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20353  01050C  0E03               	movlw	3
 20354  01050E  0100               	movlb	0	; () banked
 20355  010510  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20356  010512  0E03               	movlw	3
 20357  010514  0100               	movlb	0	; () banked
 20358  010516  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20359  010518  ECB4  F092         	call	_Port_SetPinType	;wreg free
 20360                           
 20361                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 20362  01051C  0EA7               	movlw	low _PortC
 20363  01051E  0100               	movlb	0	; () banked
 20364  010520  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20365  010522  0E00               	movlw	high _PortC
 20366  010524  0100               	movlb	0	; () banked
 20367  010526  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20368  010528  0E05               	movlw	5
 20369  01052A  0100               	movlb	0	; () banked
 20370  01052C  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20371  01052E  0E03               	movlw	3
 20372  010530  0100               	movlb	0	; () banked
 20373  010532  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20374  010534  ECB4  F092         	call	_Port_SetPinType	;wreg free
 20375                           
 20376                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 20377  010538  0EA7               	movlw	low _PortC
 20378  01053A  0100               	movlb	0	; () banked
 20379  01053C  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20380  01053E  0E00               	movlw	high _PortC
 20381  010540  0100               	movlb	0	; () banked
 20382  010542  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20383  010544  0E04               	movlw	4
 20384  010546  0100               	movlb	0	; () banked
 20385  010548  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20386  01054A  0E00               	movlw	0
 20387  01054C  0100               	movlb	0	; () banked
 20388  01054E  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20389  010550  ECB4  F092         	call	_Port_SetPinType	;wreg free
 20390                           
 20391                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 20392  010554  0100               	movlb	0	; () banked
 20393  010556  EE20 F003          	lfsr	2,3
 20394  01055A  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20395  01055C  26D9               	addwf	fsr2l,f,c
 20396  01055E  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20397  010560  22DA               	addwfc	fsr2h,f,c
 20398  010562  0EC7               	movlw	199
 20399  010564  6EDE               	movwf	postinc2,c
 20400  010566  0E0F               	movlw	15
 20401  010568  6EDD               	movwf	postdec2,c
 20402                           
 20403                           ; BSR set to: 0
 20404                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 20405  01056A  0100               	movlb	0	; () banked
 20406  01056C  EE20 F006          	lfsr	2,6
 20407  010570  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20408  010572  26D9               	addwf	fsr2l,f,c
 20409  010574  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20410  010576  22DA               	addwfc	fsr2h,f,c
 20411  010578  0EC6               	movlw	198
 20412  01057A  6EDE               	movwf	postinc2,c
 20413  01057C  0E0F               	movlw	15
 20414  01057E  6EDD               	movwf	postdec2,c
 20415                           
 20416                           ; BSR set to: 0
 20417                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 20418  010580  0100               	movlb	0	; () banked
 20419  010582  EE20 F009          	lfsr	2,9
 20420  010586  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20421  010588  26D9               	addwf	fsr2l,f,c
 20422  01058A  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20423  01058C  22DA               	addwfc	fsr2h,f,c
 20424  01058E  0EC9               	movlw	201
 20425  010590  D056               	goto	L14
 20426  010592                     
 20427                           ; BSR set to: 0
 20428                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 20429                           
 20430                           ; BSR set to: 0
 20431  010592  0E9D               	movlw	low _PortD
 20432  010594  0100               	movlb	0	; () banked
 20433  010596  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20434  010598  0E00               	movlw	high _PortD
 20435  01059A  0100               	movlb	0	; () banked
 20436  01059C  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20437  01059E  0E07               	movlw	7
 20438  0105A0  0100               	movlb	0	; () banked
 20439  0105A2  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20440  0105A4  0E03               	movlw	3
 20441  0105A6  0100               	movlb	0	; () banked
 20442  0105A8  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20443  0105AA  ECB4  F092         	call	_Port_SetPinType	;wreg free
 20444                           
 20445                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 20446  0105AE  0E9D               	movlw	low _PortD
 20447  0105B0  0100               	movlb	0	; () banked
 20448  0105B2  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20449  0105B4  0E00               	movlw	high _PortD
 20450  0105B6  0100               	movlb	0	; () banked
 20451  0105B8  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20452  0105BA  0E06               	movlw	6
 20453  0105BC  0100               	movlb	0	; () banked
 20454  0105BE  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20455  0105C0  0E03               	movlw	3
 20456  0105C2  0100               	movlb	0	; () banked
 20457  0105C4  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20458  0105C6  ECB4  F092         	call	_Port_SetPinType	;wreg free
 20459                           
 20460                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 20461  0105CA  0E9D               	movlw	low _PortD
 20462  0105CC  0100               	movlb	0	; () banked
 20463  0105CE  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20464  0105D0  0E00               	movlw	high _PortD
 20465  0105D2  0100               	movlb	0	; () banked
 20466  0105D4  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20467  0105D6  0E04               	movlw	4
 20468  0105D8  0100               	movlb	0	; () banked
 20469  0105DA  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20470  0105DC  0E03               	movlw	3
 20471  0105DE  0100               	movlb	0	; () banked
 20472  0105E0  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20473  0105E2  ECB4  F092         	call	_Port_SetPinType	;wreg free
 20474                           
 20475                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 20476  0105E6  0E9D               	movlw	low _PortD
 20477  0105E8  0100               	movlb	0	; () banked
 20478  0105EA  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20479  0105EC  0E00               	movlw	high _PortD
 20480  0105EE  0100               	movlb	0	; () banked
 20481  0105F0  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20482  0105F2  0E05               	movlw	5
 20483  0105F4  0100               	movlb	0	; () banked
 20484  0105F6  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20485  0105F8  0E00               	movlw	0
 20486  0105FA  0100               	movlb	0	; () banked
 20487  0105FC  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20488  0105FE  ECB4  F092         	call	_Port_SetPinType	;wreg free
 20489                           
 20490                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 20491  010602  0100               	movlb	0	; () banked
 20492  010604  EE20 F003          	lfsr	2,3
 20493  010608  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20494  01060A  26D9               	addwf	fsr2l,f,c
 20495  01060C  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20496  01060E  22DA               	addwfc	fsr2h,f,c
 20497  010610  0E6D               	movlw	109
 20498  010612  6EDE               	movwf	postinc2,c
 20499  010614  0E0F               	movlw	15
 20500  010616  6EDD               	movwf	postdec2,c
 20501                           
 20502                           ; BSR set to: 0
 20503                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 20504  010618  0100               	movlb	0	; () banked
 20505  01061A  EE20 F006          	lfsr	2,6
 20506  01061E  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20507  010620  26D9               	addwf	fsr2l,f,c
 20508  010622  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20509  010624  22DA               	addwfc	fsr2h,f,c
 20510  010626  0E6C               	movlw	108
 20511  010628  6EDE               	movwf	postinc2,c
 20512  01062A  0E0F               	movlw	15
 20513  01062C  6EDD               	movwf	postdec2,c
 20514                           
 20515                           ; BSR set to: 0
 20516                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 20517  01062E  0100               	movlb	0	; () banked
 20518  010630  EE20 F009          	lfsr	2,9
 20519  010634  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20520  010636  26D9               	addwf	fsr2l,f,c
 20521  010638  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20522  01063A  22DA               	addwfc	fsr2h,f,c
 20523  01063C  0E6F               	movlw	111
 20524  01063E                     L14:
 20525  01063E  6EDE               	movwf	postinc2,c
 20526  010640  0E0F               	movlw	15
 20527  010642  6EDD               	movwf	postdec2,c
 20528                           
 20529                           ;SPI.c: 68: break;
 20530  010644  D009               	goto	l603
 20531  010646                     l601:
 20532                           
 20533                           ; BSR set to: 0
 20534                           
 20535                           ; BSR set to: 0
 20536  010646  0100               	movlb	0	; () banked
 20537  010648  51EB               	movf	SPI_Init@pChannel& (0+255),w,b
 20538                           
 20539                           ; Switch size 1, requested type "space"
 20540                           ; Number of cases is 2, Range of values is 0 to 1
 20541                           ; switch strategies available:
 20542                           ; Name         Instructions Cycles
 20543                           ; simple_byte            7     4 (average)
 20544                           ;	Chosen strategy is simple_byte
 20545  01064A  0A00               	xorlw	0	; case 0
 20546  01064C  B4D8               	btfsc	status,2,c
 20547  01064E  D74A               	goto	l602
 20548  010650  0A01               	xorlw	1	; case 1
 20549  010652  A4D8               	btfss	status,2,c
 20550  010654  0012               	return	
 20551  010656  D79D               	goto	l604
 20552  010658                     l603:
 20553                           
 20554                           ; BSR set to: 0
 20555                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 20556                           
 20557                           ; BSR set to: 0
 20558  010658  0100               	movlb	0	; () banked
 20559  01065A  EE20 F006          	lfsr	2,6
 20560  01065E  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20561  010660  26D9               	addwf	fsr2l,f,c
 20562  010662  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20563  010664  22DA               	addwfc	fsr2h,f,c
 20564  010666  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20565  01066A  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20566  01066E  0E05               	movlw	5
 20567  010670  0100               	movlb	0	; () banked
 20568  010672  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20569  010674  0E00               	movlw	0
 20570  010676  0100               	movlb	0	; () banked
 20571  010678  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20572  01067A  ECCC  F0AB         	call	_Byte_SetBit	;wreg free
 20573                           
 20574                           ;SPI.c: 77: switch(pMode)
 20575  01067E  D09C               	goto	l607
 20576  010680                     
 20577                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 20578  010680  0100               	movlb	0	; () banked
 20579  010682  EE20 F006          	lfsr	2,6
 20580  010686  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20581  010688  26D9               	addwf	fsr2l,f,c
 20582  01068A  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20583  01068C  22DA               	addwfc	fsr2h,f,c
 20584  01068E  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20585  010692  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20586  010696  0E04               	movlw	4
 20587  010698  0100               	movlb	0	; () banked
 20588  01069A  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20589  01069C  0E00               	movlw	0
 20590  01069E  0100               	movlb	0	; () banked
 20591  0106A0  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20592  0106A2  ECCC  F0AB         	call	_Byte_SetBit	;wreg free
 20593                           
 20594                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 20595  0106A6  0100               	movlb	0	; () banked
 20596  0106A8  EE20 F003          	lfsr	2,3
 20597  0106AC  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20598  0106AE  26D9               	addwf	fsr2l,f,c
 20599  0106B0  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20600  0106B2  22DA               	addwfc	fsr2h,f,c
 20601  0106B4  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20602  0106B8  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20603  0106BC  0E06               	movlw	6
 20604  0106BE  0100               	movlb	0	; () banked
 20605  0106C0  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20606  0106C2  0E00               	movlw	0
 20607  0106C4  0100               	movlb	0	; () banked
 20608  0106C6  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20609  0106C8  ECCC  F0AB         	call	_Byte_SetBit	;wreg free
 20610                           
 20611                           ;SPI.c: 82: break;
 20612  0106CC  D084               	goto	l609
 20613  0106CE                     
 20614                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 20615  0106CE  0100               	movlb	0	; () banked
 20616  0106D0  EE20 F006          	lfsr	2,6
 20617  0106D4  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20618  0106D6  26D9               	addwf	fsr2l,f,c
 20619  0106D8  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20620  0106DA  22DA               	addwfc	fsr2h,f,c
 20621  0106DC  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20622  0106E0  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20623  0106E4  0E04               	movlw	4
 20624  0106E6  0100               	movlb	0	; () banked
 20625  0106E8  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20626  0106EA  0E00               	movlw	0
 20627  0106EC  0100               	movlb	0	; () banked
 20628  0106EE  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20629  0106F0  ECCC  F0AB         	call	_Byte_SetBit	;wreg free
 20630                           
 20631                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 20632  0106F4  0100               	movlb	0	; () banked
 20633  0106F6  EE20 F003          	lfsr	2,3
 20634  0106FA  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20635  0106FC  26D9               	addwf	fsr2l,f,c
 20636  0106FE  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20637  010700  22DA               	addwfc	fsr2h,f,c
 20638  010702  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20639  010706  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20640  01070A  0E06               	movlw	6
 20641  01070C  0100               	movlb	0	; () banked
 20642  01070E  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20643  010710  0E01               	movlw	1
 20644  010712  0100               	movlb	0	; () banked
 20645  010714  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20646  010716  ECCC  F0AB         	call	_Byte_SetBit	;wreg free
 20647                           
 20648                           ;SPI.c: 86: break;
 20649  01071A  D05D               	goto	l609
 20650  01071C                     
 20651                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 20652  01071C  0100               	movlb	0	; () banked
 20653  01071E  EE20 F006          	lfsr	2,6
 20654  010722  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20655  010724  26D9               	addwf	fsr2l,f,c
 20656  010726  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20657  010728  22DA               	addwfc	fsr2h,f,c
 20658  01072A  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20659  01072E  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20660  010732  0E04               	movlw	4
 20661  010734  0100               	movlb	0	; () banked
 20662  010736  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20663  010738  0E01               	movlw	1
 20664  01073A  0100               	movlb	0	; () banked
 20665  01073C  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20666  01073E  ECCC  F0AB         	call	_Byte_SetBit	;wreg free
 20667                           
 20668                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 20669  010742  0100               	movlb	0	; () banked
 20670  010744  EE20 F003          	lfsr	2,3
 20671  010748  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20672  01074A  26D9               	addwf	fsr2l,f,c
 20673  01074C  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20674  01074E  22DA               	addwfc	fsr2h,f,c
 20675  010750  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20676  010754  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20677  010758  0E06               	movlw	6
 20678  01075A  0100               	movlb	0	; () banked
 20679  01075C  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20680  01075E  0E00               	movlw	0
 20681  010760  0100               	movlb	0	; () banked
 20682  010762  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20683  010764  ECCC  F0AB         	call	_Byte_SetBit	;wreg free
 20684                           
 20685                           ;SPI.c: 90: break;
 20686  010768  D036               	goto	l609
 20687  01076A                     
 20688                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 20689  01076A  0100               	movlb	0	; () banked
 20690  01076C  EE20 F006          	lfsr	2,6
 20691  010770  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20692  010772  26D9               	addwf	fsr2l,f,c
 20693  010774  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20694  010776  22DA               	addwfc	fsr2h,f,c
 20695  010778  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20696  01077C  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20697  010780  0E04               	movlw	4
 20698  010782  0100               	movlb	0	; () banked
 20699  010784  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20700  010786  0E01               	movlw	1
 20701  010788  0100               	movlb	0	; () banked
 20702  01078A  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20703  01078C  ECCC  F0AB         	call	_Byte_SetBit	;wreg free
 20704                           
 20705                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 20706  010790  0100               	movlb	0	; () banked
 20707  010792  EE20 F003          	lfsr	2,3
 20708  010796  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20709  010798  26D9               	addwf	fsr2l,f,c
 20710  01079A  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20711  01079C  22DA               	addwfc	fsr2h,f,c
 20712  01079E  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20713  0107A2  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20714  0107A6  0E06               	movlw	6
 20715  0107A8  0100               	movlb	0	; () banked
 20716  0107AA  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20717  0107AC  0E01               	movlw	1
 20718  0107AE  0100               	movlb	0	; () banked
 20719  0107B0  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20720  0107B2  ECCC  F0AB         	call	_Byte_SetBit	;wreg free
 20721                           
 20722                           ;SPI.c: 94: break;
 20723  0107B6  D00F               	goto	l609
 20724  0107B8                     l607:
 20725  0107B8  0100               	movlb	0	; () banked
 20726  0107BA  51EC               	movf	SPI_Init@pMode& (0+255),w,b
 20727                           
 20728                           ; Switch size 1, requested type "space"
 20729                           ; Number of cases is 4, Range of values is 0 to 3
 20730                           ; switch strategies available:
 20731                           ; Name         Instructions Cycles
 20732                           ; simple_byte           13     7 (average)
 20733                           ;	Chosen strategy is simple_byte
 20734  0107BC  0A00               	xorlw	0	; case 0
 20735  0107BE  B4D8               	btfsc	status,2,c
 20736  0107C0  D75F               	goto	l608
 20737  0107C2  0A01               	xorlw	1	; case 1
 20738  0107C4  B4D8               	btfsc	status,2,c
 20739  0107C6  D783               	goto	l610
 20740  0107C8  0A03               	xorlw	3	; case 2
 20741  0107CA  B4D8               	btfsc	status,2,c
 20742  0107CC  D7A7               	goto	l611
 20743  0107CE  0A01               	xorlw	1	; case 3
 20744  0107D0  A4D8               	btfss	status,2,c
 20745  0107D2  0012               	return	
 20746  0107D4  D7CA               	goto	l612
 20747  0107D6                     l609:
 20748                           
 20749                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 20750                           
 20751                           ; BSR set to: 0
 20752  0107D6  0100               	movlb	0	; () banked
 20753  0107D8  EE20 F006          	lfsr	2,6
 20754  0107DC  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20755  0107DE  26D9               	addwf	fsr2l,f,c
 20756  0107E0  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20757  0107E2  22DA               	addwfc	fsr2h,f,c
 20758  0107E4  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20759  0107E8  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20760  0107EC  0E07               	movlw	7
 20761  0107EE  0100               	movlb	0	; () banked
 20762  0107F0  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20763  0107F2  0E00               	movlw	0
 20764  0107F4  0100               	movlb	0	; () banked
 20765  0107F6  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20766  0107F8  ECCC  F0AB         	call	_Byte_SetBit	;wreg free
 20767                           
 20768                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 20769  0107FC  0100               	movlb	0	; () banked
 20770  0107FE  EE20 F006          	lfsr	2,6
 20771  010802  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20772  010804  26D9               	addwf	fsr2l,f,c
 20773  010806  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20774  010808  22DA               	addwfc	fsr2h,f,c
 20775  01080A  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20776  01080E  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20777  010812  0E06               	movlw	6
 20778  010814  0100               	movlb	0	; () banked
 20779  010816  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20780  010818  0E00               	movlw	0
 20781  01081A  0100               	movlb	0	; () banked
 20782  01081C  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20783  01081E  ECCC  F0AB         	call	_Byte_SetBit	;wreg free
 20784                           
 20785                           ;SPI.c: 106: Timer2_Init(pClock);
 20786  010822  C0E7  F0C7         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 20787  010826  C0E8  F0C8         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 20788  01082A  C0E9  F0C9         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 20789  01082E  C0EA  F0CA         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 20790  010832  EC9E  F099         	call	_Timer2_Init	;wreg free
 20791                           
 20792                           ;SPI.c: 112: SPI_DisableISR(pInput);
 20793  010836  C0ED  F0BA         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 20794  01083A  C0EE  F0BB         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 20795  01083E  EC31  F0B1         	call	_SPI_DisableISR	;wreg free
 20796                           
 20797                           ;SPI.c: 116: switch (pChannel)
 20798  010842  D004               	goto	l614
 20799  010844                     l615:
 20800                           
 20801                           ; BSR set to: 0
 20802  010844  869F               	bsf	3999,3,c	;volatile
 20803  010846  D00B               	goto	l616
 20804  010848                     l617:
 20805                           
 20806                           ; BSR set to: 0
 20807  010848  8EA5               	bsf	4005,7,c	;volatile
 20808  01084A  D009               	goto	l616
 20809  01084C                     l614:
 20810                           
 20811                           ; BSR set to: 0
 20812  01084C  0100               	movlb	0	; () banked
 20813  01084E  51EB               	movf	SPI_Init@pChannel& (0+255),w,b
 20814                           
 20815                           ; Switch size 1, requested type "space"
 20816                           ; Number of cases is 2, Range of values is 0 to 1
 20817                           ; switch strategies available:
 20818                           ; Name         Instructions Cycles
 20819                           ; simple_byte            7     4 (average)
 20820                           ;	Chosen strategy is simple_byte
 20821  010850  0A00               	xorlw	0	; case 0
 20822  010852  B4D8               	btfsc	status,2,c
 20823  010854  D7F7               	goto	l615
 20824  010856  0A01               	xorlw	1	; case 1
 20825  010858  A4D8               	btfss	status,2,c
 20826  01085A  0012               	return	
 20827  01085C  D7F5               	goto	l617
 20828  01085E                     l616:
 20829                           
 20830                           ; BSR set to: 0
 20831                           ;SPI.c: 124: SPI_DCS(pInput);
 20832                           
 20833                           ; BSR set to: 0
 20834  01085E  C0ED  F0BA         	movff	SPI_Init@pInput,SPI_DCS@pInput
 20835  010862  C0EE  F0BB         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 20836  010866  EC91  F0B0         	call	_SPI_DCS	;wreg free
 20837                           
 20838                           ;SPI.c: 126: pInput->mBusy = 0;
 20839  01086A  C0ED  FFD9         	movff	SPI_Init@pInput,fsr2l
 20840  01086E  C0EE  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 20841  010872  0E00               	movlw	0
 20842  010874  6EDF               	movwf	indf2,c
 20843                           
 20844                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 20845  010876  0100               	movlb	0	; () banked
 20846  010878  EE20 F006          	lfsr	2,6
 20847  01087C  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20848  01087E  26D9               	addwf	fsr2l,f,c
 20849  010880  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20850  010882  22DA               	addwfc	fsr2h,f,c
 20851  010884  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 20852  010888  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 20853  01088C  0E00               	movlw	0
 20854  01088E  0100               	movlb	0	; () banked
 20855  010890  6FC7               	movwf	Byte_SetQuad@pQuad& (0+255),b
 20856  010892  0E03               	movlw	3
 20857  010894  0100               	movlb	0	; () banked
 20858  010896  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 20859  010898  EC7A  F0B1         	call	_Byte_SetQuad	;wreg free
 20860                           
 20861                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 20862  01089C  0100               	movlb	0	; () banked
 20863  01089E  EE20 F006          	lfsr	2,6
 20864  0108A2  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20865  0108A4  26D9               	addwf	fsr2l,f,c
 20866  0108A6  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20867  0108A8  22DA               	addwfc	fsr2h,f,c
 20868  0108AA  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20869  0108AE  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20870  0108B2  0E05               	movlw	5
 20871  0108B4  0100               	movlb	0	; () banked
 20872  0108B6  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20873  0108B8  0E01               	movlw	1
 20874  0108BA  0100               	movlb	0	; () banked
 20875  0108BC  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20876  0108BE  ECCC  F0AB         	call	_Byte_SetBit	;wreg free
 20877  0108C2  0012               	return		;funcret
 20878  0108C4                     __end_of_SPI_Init:
 20879                           	opt stack 0
 20880                           tosu	equ	0xFFF
 20881                           tosh	equ	0xFFE
 20882                           tosl	equ	0xFFD
 20883                           pclath	equ	0xFFA
 20884                           tblptru	equ	0xFF8
 20885                           tblptrh	equ	0xFF7
 20886                           tblptrl	equ	0xFF6
 20887                           tablat	equ	0xFF5
 20888                           prodh	equ	0xFF4
 20889                           prodl	equ	0xFF3
 20890                           intcon	equ	0xFF2
 20891                           postinc0	equ	0xFEE
 20892                           wreg	equ	0xFE8
 20893                           indf1	equ	0xFE7
 20894                           postdec1	equ	0xFE5
 20895                           fsr1h	equ	0xFE2
 20896                           fsr1l	equ	0xFE1
 20897                           indf2	equ	0xFDF
 20898                           postinc2	equ	0xFDE
 20899                           postdec2	equ	0xFDD
 20900                           plusw2	equ	0xFDB
 20901                           fsr2h	equ	0xFDA
 20902                           fsr2l	equ	0xFD9
 20903                           status	equ	0xFD8
 20904                           
 20905 ;; *************** function _Timer2_Init *****************
 20906 ;; Defined at:
 20907 ;;		line 10 in file "Library/Timer2.c"
 20908 ;; Parameters:    Size  Location     Type
 20909 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 20910 ;; Auto vars:     Size  Location     Type
 20911 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 20912 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 20913 ;;  RDIV            4   18[BANK0 ] unsigned long 
 20914 ;; Return value:  Size  Location     Type
 20915 ;;                  1    wreg      void 
 20916 ;; Registers used:
 20917 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20918 ;; Tracked objects:
 20919 ;;		On entry : 0/0
 20920 ;;		On exit  : 0/0
 20921 ;;		Unchanged: 0/0
 20922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20923 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20924 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20925 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20926 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20927 ;;Total ram usage:       17 bytes
 20928 ;; Hardware stack levels used:    1
 20929 ;; Hardware stack levels required when called:    8
 20930 ;; This function calls:
 20931 ;;		_Timer2_Clear
 20932 ;;		___lldiv
 20933 ;; This function is called by:
 20934 ;;		_SPI_Init
 20935 ;; This function uses a non-reentrant model
 20936 ;;
 20937                           
 20938                           	psect	text98
 20939  01333C                     __ptext98:
 20940                           	opt stack 0
 20941  01333C                     _Timer2_Init:
 20942                           	opt stack 18
 20943                           
 20944                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 20945                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 20946                           ;Timer2.c: 14: static UINT8 PRE = 0;
 20947                           ;Timer2.c: 15: static UINT32 DIV = 0;
 20948                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 20949                           
 20950                           ;incstack = 0
 20951  01333C  0E00               	movlw	0
 20952  01333E  0100               	movlb	0	; () banked
 20953  013340  6FD0               	movwf	Timer2_Init@pCPUClock& (0+255),b
 20954  013342  0E6C               	movlw	108
 20955  013344  6FD1               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 20956  013346  0EDC               	movlw	220
 20957  013348  6FD2               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 20958  01334A  0E02               	movlw	2
 20959  01334C  6FD3               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 20960                           
 20961                           ; BSR set to: 0
 20962                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 20963                           ;Timer2.c: 20: pFrequency *= 2;
 20964  01334E  0100               	movlb	0	; () banked
 20965  013350  90D8               	bcf	status,0,c
 20966  013352  37C7               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 20967  013354  37C8               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 20968  013356  37C9               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 20969  013358  37CA               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 20970                           
 20971                           ; BSR set to: 0
 20972                           ;Timer2.c: 23: pCPUClock /= 4;
 20973  01335A  0E02               	movlw	2
 20974  01335C  0100               	movlb	0	; () banked
 20975  01335E  6FCB               	movwf	??_Timer2_Init& (0+255),b
 20976  013360                     u9425:
 20977  013360  90D8               	bcf	status,0,c
 20978  013362  0100               	movlb	0	; () banked
 20979  013364  33D3               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 20980  013366  33D2               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 20981  013368  33D1               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 20982  01336A  33D0               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 20983  01336C  0100               	movlb	0	; () banked
 20984  01336E  2FCB               	decfsz	??_Timer2_Init& (0+255),f,b
 20985  013370  D7F7               	goto	u9425
 20986                           
 20987                           ; BSR set to: 0
 20988                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 20989  013372  C0D0  F0BA         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 20990  013376  C0D1  F0BB         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 20991  01337A  C0D2  F0BC         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 20992  01337E  C0D3  F0BD         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 20993  013382  C0C7  F0BE         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 20994  013386  C0C8  F0BF         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 20995  01338A  C0C9  F0C0         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 20996  01338E  C0CA  F0C1         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 20997  013392  ECD9  F0A0         	call	___lldiv	;wreg free
 20998  013396  C0BA  F0D4         	movff	?___lldiv,Timer2_Init@DIVIDE
 20999  01339A  C0BB  F0D5         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 21000  01339E  C0BC  F0D6         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 21001  0133A2  C0BD  F0D7         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 21002                           
 21003                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 21004  0133A6  D010               	goto	l1828
 21005  0133A8                     l12809:
 21006                           
 21007                           ;Timer2.c: 28: {
 21008                           ;Timer2.c: 29: RDIV = 0;
 21009  0133A8  0E00               	movlw	0
 21010  0133AA  0100               	movlb	0	; () banked
 21011  0133AC  6FCC               	movwf	Timer2_Init@RDIV& (0+255),b
 21012  0133AE  0E00               	movlw	0
 21013  0133B0  6FCD               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 21014  0133B2  0E00               	movlw	0
 21015  0133B4  6FCE               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 21016  0133B6  0E00               	movlw	0
 21017  0133B8  6FCF               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 21018                           
 21019                           ; BSR set to: 0
 21020                           ;Timer2.c: 30: INDEX ++;
 21021  0133BA  0100               	movlb	0	; () banked
 21022  0133BC  2B8D               	incf	Timer2_Init@INDEX& (0+255),f,b
 21023                           
 21024                           ; BSR set to: 0
 21025                           ;Timer2.c: 31: if (INDEX >= 3)
 21026  0133BE  0E02               	movlw	2
 21027  0133C0  0100               	movlb	0	; () banked
 21028  0133C2  658D               	cpfsgt	Timer2_Init@INDEX& (0+255),b
 21029  0133C4  D001               	goto	l1828
 21030  0133C6  D026               	goto	u9440
 21031  0133C8                     l1828:
 21032                           
 21033                           ; BSR set to: 0
 21034                           
 21035                           ; BSR set to: 0
 21036  0133C8  C0D4  F0BA         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 21037  0133CC  C0D5  F0BB         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 21038  0133D0  C0D6  F0BC         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 21039  0133D4  C0D7  F0BD         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 21040  0133D8  0100               	movlb	0	; () banked
 21041  0133DA  518D               	movf	Timer2_Init@INDEX& (0+255),w,b
 21042  0133DC  0D01               	mullw	1
 21043  0133DE  0E1C               	movlw	low Timer2_Init@PRESCALE
 21044  0133E0  24F3               	addwf	prodl,w,c
 21045  0133E2  6EF6               	movwf	tblptrl,c
 21046  0133E4  0EFD               	movlw	high Timer2_Init@PRESCALE
 21047  0133E6  20F4               	addwfc	prodh,w,c
 21048  0133E8  6EF7               	movwf	tblptrh,c
 21049  0133EA                     	if	1	;There are 3 active tblptr bytes
 21050  0133EA  6AF8               	clrf	tblptru,c
 21051  0133EC  0E00               	movlw	low (__mediumconst shr (0+16))
 21052  0133EE  22F8               	addwfc	tblptru,f,c
 21053  0133F0                     	endif
 21054  0133F0  0008               	tblrd		*
 21055  0133F2  50F5               	movf	tablat,w,c
 21056  0133F4  0100               	movlb	0	; () banked
 21057  0133F6  6FBE               	movwf	___lldiv@divisor& (0+255),b
 21058  0133F8  6BBF               	clrf	(___lldiv@divisor+1)& (0+255),b
 21059  0133FA  6BC0               	clrf	(___lldiv@divisor+2)& (0+255),b
 21060  0133FC  6BC1               	clrf	(___lldiv@divisor+3)& (0+255),b
 21061  0133FE  ECD9  F0A0         	call	___lldiv	;wreg free
 21062  013402  0100               	movlb	0	; () banked
 21063  013404  51BD               	movf	(?___lldiv+3)& (0+255),w,b
 21064  013406  0100               	movlb	0	; () banked
 21065  013408  11BC               	iorwf	(?___lldiv+2)& (0+255),w,b
 21066  01340A  E1CE               	bnz	l12809
 21067  01340C  0100               	movlb	0	; () banked
 21068  01340E  05BB               	decf	(?___lldiv+1)& (0+255),w,b
 21069  013410  B0D8               	btfsc	status,0,c
 21070  013412  D7CA               	goto	l1827
 21071  013414                     u9440:
 21072                           
 21073                           ; BSR set to: 0
 21074                           ;Timer2.c: 33: }
 21075                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 21076                           
 21077                           ; BSR set to: 0
 21078  013414  50CA               	movf	4042,w,c	;volatile
 21079  013416  0100               	movlb	0	; () banked
 21080  013418  198D               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 21081  01341A  0BFC               	andlw	-4
 21082  01341C  198D               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 21083  01341E  6ECA               	movwf	4042,c	;volatile
 21084                           
 21085                           ; BSR set to: 0
 21086                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 21087  013420  84CA               	bsf	4042,2,c	;volatile
 21088                           
 21089                           ; BSR set to: 0
 21090                           ;Timer2.c: 44: Timer2_Clear();
 21091  013422  EC39  F0B3         	call	_Timer2_Clear	;wreg free
 21092                           
 21093                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 21094  013426  0100               	movlb	0	; () banked
 21095  013428  518D               	movf	Timer2_Init@INDEX& (0+255),w,b
 21096  01342A  0D01               	mullw	1
 21097  01342C  0E1C               	movlw	low Timer2_Init@PRESCALE
 21098  01342E  24F3               	addwf	prodl,w,c
 21099  013430  6EF6               	movwf	tblptrl,c
 21100  013432  0EFD               	movlw	high Timer2_Init@PRESCALE
 21101  013434  20F4               	addwfc	prodh,w,c
 21102  013436  6EF7               	movwf	tblptrh,c
 21103  013438                     	if	1	;There are 3 active tblptr bytes
 21104  013438  6AF8               	clrf	tblptru,c
 21105  01343A  0E00               	movlw	low (__mediumconst shr (0+16))
 21106  01343C  22F8               	addwfc	tblptru,f,c
 21107  01343E                     	endif
 21108  01343E  0008               	tblrd		*
 21109  013440  CFF5 F08C          	movff	tablat,Timer2_Init@PRE
 21110                           
 21111                           ; BSR set to: 0
 21112                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 21113  013444  0EFF               	movlw	255
 21114  013446  0100               	movlb	0	; () banked
 21115  013448  25D4               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 21116  01344A  0103               	movlb	3	; () banked
 21117  01344C  6F26               	movwf	Timer2_Init@DIV& (0+255),b
 21118  01344E  0EFF               	movlw	255
 21119  013450  0100               	movlb	0	; () banked
 21120  013452  21D5               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 21121  013454  0103               	movlb	3	; () banked
 21122  013456  6F27               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 21123  013458  0EFF               	movlw	255
 21124  01345A  0100               	movlb	0	; () banked
 21125  01345C  21D6               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 21126  01345E  0103               	movlb	3	; () banked
 21127  013460  6F28               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 21128  013462  0EFF               	movlw	255
 21129  013464  0100               	movlb	0	; () banked
 21130  013466  21D7               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 21131  013468  0103               	movlb	3	; () banked
 21132  01346A  6F29               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 21133                           
 21134                           ; BSR set to: 3
 21135                           ;Timer2.c: 48: INDEX = DIV/PRE;
 21136  01346C  C326  F0BA         	movff	Timer2_Init@DIV,___lldiv@dividend
 21137  013470  C327  F0BB         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 21138  013474  C328  F0BC         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 21139  013478  C329  F0BD         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 21140  01347C  0100               	movlb	0	; () banked
 21141  01347E  518C               	movf	Timer2_Init@PRE& (0+255),w,b
 21142  013480  0100               	movlb	0	; () banked
 21143  013482  6FBE               	movwf	___lldiv@divisor& (0+255),b
 21144  013484  6BBF               	clrf	(___lldiv@divisor+1)& (0+255),b
 21145  013486  6BC0               	clrf	(___lldiv@divisor+2)& (0+255),b
 21146  013488  6BC1               	clrf	(___lldiv@divisor+3)& (0+255),b
 21147  01348A  ECD9  F0A0         	call	___lldiv	;wreg free
 21148  01348E  0100               	movlb	0	; () banked
 21149  013490  51BA               	movf	?___lldiv& (0+255),w,b
 21150  013492  0100               	movlb	0	; () banked
 21151  013494  6F8D               	movwf	Timer2_Init@INDEX& (0+255),b
 21152                           
 21153                           ; BSR set to: 0
 21154                           ;Timer2.c: 49: PR2 = INDEX;
 21155  013496  C08D  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 21156                           
 21157                           ; BSR set to: 0
 21158  01349A  0012               	return		;funcret
 21159  01349C                     __end_of_Timer2_Init:
 21160                           	opt stack 0
 21161                           tosu	equ	0xFFF
 21162                           tosh	equ	0xFFE
 21163                           tosl	equ	0xFFD
 21164                           pclath	equ	0xFFA
 21165                           tblptru	equ	0xFF8
 21166                           tblptrh	equ	0xFF7
 21167                           tblptrl	equ	0xFF6
 21168                           tablat	equ	0xFF5
 21169                           prodh	equ	0xFF4
 21170                           prodl	equ	0xFF3
 21171                           intcon	equ	0xFF2
 21172                           postinc0	equ	0xFEE
 21173                           wreg	equ	0xFE8
 21174                           indf1	equ	0xFE7
 21175                           postdec1	equ	0xFE5
 21176                           fsr1h	equ	0xFE2
 21177                           fsr1l	equ	0xFE1
 21178                           indf2	equ	0xFDF
 21179                           postinc2	equ	0xFDE
 21180                           postdec2	equ	0xFDD
 21181                           plusw2	equ	0xFDB
 21182                           fsr2h	equ	0xFDA
 21183                           fsr2l	equ	0xFD9
 21184                           status	equ	0xFD8
 21185                           
 21186 ;; *************** function ___lldiv *****************
 21187 ;; Defined at:
 21188 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
 21189 ;; Parameters:    Size  Location     Type
 21190 ;;  dividend        4    0[BANK0 ] unsigned long 
 21191 ;;  divisor         4    4[BANK0 ] unsigned long 
 21192 ;; Auto vars:     Size  Location     Type
 21193 ;;  quotient        4    8[BANK0 ] unsigned long 
 21194 ;;  counter         1   12[BANK0 ] unsigned char 
 21195 ;; Return value:  Size  Location     Type
 21196 ;;                  4    0[BANK0 ] unsigned long 
 21197 ;; Registers used:
 21198 ;;		wreg, status,2, status,0
 21199 ;; Tracked objects:
 21200 ;;		On entry : 0/0
 21201 ;;		On exit  : 0/0
 21202 ;;		Unchanged: 0/0
 21203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21204 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21205 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21207 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21208 ;;Total ram usage:       13 bytes
 21209 ;; Hardware stack levels used:    1
 21210 ;; Hardware stack levels required when called:    7
 21211 ;; This function calls:
 21212 ;;		Nothing
 21213 ;; This function is called by:
 21214 ;;		_Timer0_Init
 21215 ;;		_Timer2_Init
 21216 ;;		_rand_between
 21217 ;;		_I2C_Init
 21218 ;; This function uses a non-reentrant model
 21219 ;;
 21220                           
 21221                           	psect	text99
 21222  0141B2                     __ptext99:
 21223                           	opt stack 0
 21224  0141B2                     ___lldiv:
 21225                           	opt stack 19
 21226                           
 21227                           ; BSR set to: 0
 21228                           ;incstack = 0
 21229  0141B2  0E00               	movlw	0
 21230  0141B4  0100               	movlb	0	; () banked
 21231  0141B6  6FC2               	movwf	___lldiv@quotient& (0+255),b
 21232  0141B8  0E00               	movlw	0
 21233  0141BA  6FC3               	movwf	(___lldiv@quotient+1)& (0+255),b
 21234  0141BC  0E00               	movlw	0
 21235  0141BE  6FC4               	movwf	(___lldiv@quotient+2)& (0+255),b
 21236  0141C0  0E00               	movlw	0
 21237  0141C2  6FC5               	movwf	(___lldiv@quotient+3)& (0+255),b
 21238                           
 21239                           ; BSR set to: 0
 21240  0141C4  0100               	movlb	0	; () banked
 21241  0141C6  51BE               	movf	___lldiv@divisor& (0+255),w,b
 21242  0141C8  0100               	movlb	0	; () banked
 21243  0141CA  11BF               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 21244  0141CC  0100               	movlb	0	; () banked
 21245  0141CE  11C0               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 21246  0141D0  0100               	movlb	0	; () banked
 21247  0141D2  11C1               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 21248  0141D4  B4D8               	btfsc	status,2,c
 21249  0141D6  D042               	goto	l2799
 21250                           
 21251                           ; BSR set to: 0
 21252  0141D8  0E01               	movlw	1
 21253  0141DA  0100               	movlb	0	; () banked
 21254  0141DC  6FC6               	movwf	___lldiv@counter& (0+255),b
 21255  0141DE  D008               	goto	l2794
 21256  0141E0                     
 21257                           ; BSR set to: 0
 21258                           
 21259                           ; BSR set to: 0
 21260  0141E0  0100               	movlb	0	; () banked
 21261  0141E2  90D8               	bcf	status,0,c
 21262  0141E4  37BE               	rlcf	___lldiv@divisor& (0+255),f,b
 21263  0141E6  37BF               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 21264  0141E8  37C0               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 21265  0141EA  37C1               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 21266  0141EC  0100               	movlb	0	; () banked
 21267  0141EE  2BC6               	incf	___lldiv@counter& (0+255),f,b
 21268  0141F0                     l2794:
 21269                           
 21270                           ; BSR set to: 0
 21271                           
 21272                           ; BSR set to: 0
 21273  0141F0  0100               	movlb	0	; () banked
 21274  0141F2  AFC1               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 21275  0141F4  D7F5               	goto	l2795
 21276  0141F6                     u9300:
 21277                           
 21278                           ; BSR set to: 0
 21279                           
 21280                           ; BSR set to: 0
 21281                           
 21282                           ; BSR set to: 0
 21283  0141F6  0100               	movlb	0	; () banked
 21284  0141F8  90D8               	bcf	status,0,c
 21285  0141FA  37C2               	rlcf	___lldiv@quotient& (0+255),f,b
 21286  0141FC  37C3               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 21287  0141FE  37C4               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 21288  014200  37C5               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 21289                           
 21290                           ; BSR set to: 0
 21291  014202  0100               	movlb	0	; () banked
 21292  014204  51BE               	movf	___lldiv@divisor& (0+255),w,b
 21293  014206  0100               	movlb	0	; () banked
 21294  014208  5DBA               	subwf	___lldiv@dividend& (0+255),w,b
 21295  01420A  0100               	movlb	0	; () banked
 21296  01420C  51BF               	movf	(___lldiv@divisor+1)& (0+255),w,b
 21297  01420E  0100               	movlb	0	; () banked
 21298  014210  59BB               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 21299  014212  0100               	movlb	0	; () banked
 21300  014214  51C0               	movf	(___lldiv@divisor+2)& (0+255),w,b
 21301  014216  0100               	movlb	0	; () banked
 21302  014218  59BC               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 21303  01421A  0100               	movlb	0	; () banked
 21304  01421C  51C1               	movf	(___lldiv@divisor+3)& (0+255),w,b
 21305  01421E  0100               	movlb	0	; () banked
 21306  014220  59BD               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 21307  014222  A0D8               	btfss	status,0,c
 21308  014224  D012               	goto	l2798
 21309                           
 21310                           ; BSR set to: 0
 21311  014226  0100               	movlb	0	; () banked
 21312  014228  51BE               	movf	___lldiv@divisor& (0+255),w,b
 21313  01422A  0100               	movlb	0	; () banked
 21314  01422C  5FBA               	subwf	___lldiv@dividend& (0+255),f,b
 21315  01422E  0100               	movlb	0	; () banked
 21316  014230  51BF               	movf	(___lldiv@divisor+1)& (0+255),w,b
 21317  014232  0100               	movlb	0	; () banked
 21318  014234  5BBB               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 21319  014236  0100               	movlb	0	; () banked
 21320  014238  51C0               	movf	(___lldiv@divisor+2)& (0+255),w,b
 21321  01423A  0100               	movlb	0	; () banked
 21322  01423C  5BBC               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 21323  01423E  0100               	movlb	0	; () banked
 21324  014240  51C1               	movf	(___lldiv@divisor+3)& (0+255),w,b
 21325  014242  0100               	movlb	0	; () banked
 21326  014244  5BBD               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 21327                           
 21328                           ; BSR set to: 0
 21329  014246  0100               	movlb	0	; () banked
 21330  014248  81C2               	bsf	___lldiv@quotient& (0+255),0,b
 21331  01424A                     l2798:
 21332                           
 21333                           ; BSR set to: 0
 21334                           
 21335                           ; BSR set to: 0
 21336  01424A  0100               	movlb	0	; () banked
 21337  01424C  90D8               	bcf	status,0,c
 21338  01424E  33C1               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 21339  014250  33C0               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 21340  014252  33BF               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 21341  014254  33BE               	rrcf	___lldiv@divisor& (0+255),f,b
 21342                           
 21343                           ; BSR set to: 0
 21344  014256  0100               	movlb	0	; () banked
 21345  014258  2FC6               	decfsz	___lldiv@counter& (0+255),f,b
 21346  01425A  D7CD               	goto	u9300
 21347  01425C                     l2799:
 21348                           
 21349                           ; BSR set to: 0
 21350                           
 21351                           ; BSR set to: 0
 21352  01425C  C0C2  F0BA         	movff	___lldiv@quotient,?___lldiv
 21353  014260  C0C3  F0BB         	movff	___lldiv@quotient+1,?___lldiv+1
 21354  014264  C0C4  F0BC         	movff	___lldiv@quotient+2,?___lldiv+2
 21355  014268  C0C5  F0BD         	movff	___lldiv@quotient+3,?___lldiv+3
 21356                           
 21357                           ; BSR set to: 0
 21358  01426C  0012               	return		;funcret
 21359  01426E                     __end_of___lldiv:
 21360                           	opt stack 0
 21361                           tosu	equ	0xFFF
 21362                           tosh	equ	0xFFE
 21363                           tosl	equ	0xFFD
 21364                           pclath	equ	0xFFA
 21365                           tblptru	equ	0xFF8
 21366                           tblptrh	equ	0xFF7
 21367                           tblptrl	equ	0xFF6
 21368                           tablat	equ	0xFF5
 21369                           prodh	equ	0xFF4
 21370                           prodl	equ	0xFF3
 21371                           intcon	equ	0xFF2
 21372                           postinc0	equ	0xFEE
 21373                           wreg	equ	0xFE8
 21374                           indf1	equ	0xFE7
 21375                           postdec1	equ	0xFE5
 21376                           fsr1h	equ	0xFE2
 21377                           fsr1l	equ	0xFE1
 21378                           indf2	equ	0xFDF
 21379                           postinc2	equ	0xFDE
 21380                           postdec2	equ	0xFDD
 21381                           plusw2	equ	0xFDB
 21382                           fsr2h	equ	0xFDA
 21383                           fsr2l	equ	0xFD9
 21384                           status	equ	0xFD8
 21385                           
 21386 ;; *************** function _Timer2_Clear *****************
 21387 ;; Defined at:
 21388 ;;		line 3 in file "Library/Timer2.c"
 21389 ;; Parameters:    Size  Location     Type
 21390 ;;		None
 21391 ;; Auto vars:     Size  Location     Type
 21392 ;;		None
 21393 ;; Return value:  Size  Location     Type
 21394 ;;                  1    wreg      void 
 21395 ;; Registers used:
 21396 ;;		None
 21397 ;; Tracked objects:
 21398 ;;		On entry : 0/0
 21399 ;;		On exit  : 0/0
 21400 ;;		Unchanged: 0/0
 21401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21405 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21406 ;;Total ram usage:        0 bytes
 21407 ;; Hardware stack levels used:    1
 21408 ;; Hardware stack levels required when called:    7
 21409 ;; This function calls:
 21410 ;;		Nothing
 21411 ;; This function is called by:
 21412 ;;		_Timer2_Init
 21413 ;; This function uses a non-reentrant model
 21414 ;;
 21415                           
 21416                           	psect	text100
 21417  016672                     __ptext100:
 21418                           	opt stack 0
 21419  016672                     _Timer2_Clear:
 21420                           	opt stack 18
 21421                           
 21422                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 21423                           
 21424                           ; BSR set to: 0
 21425                           ;incstack = 0
 21426  016672  929E               	bcf	3998,1,c	;volatile
 21427                           
 21428                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 21429  016674  929D               	bcf	3997,1,c	;volatile
 21430                           
 21431                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 21432  016676  929F               	bcf	3999,1,c	;volatile
 21433  016678  0012               	return		;funcret
 21434  01667A                     __end_of_Timer2_Clear:
 21435                           	opt stack 0
 21436                           tosu	equ	0xFFF
 21437                           tosh	equ	0xFFE
 21438                           tosl	equ	0xFFD
 21439                           pclath	equ	0xFFA
 21440                           tblptru	equ	0xFF8
 21441                           tblptrh	equ	0xFF7
 21442                           tblptrl	equ	0xFF6
 21443                           tablat	equ	0xFF5
 21444                           prodh	equ	0xFF4
 21445                           prodl	equ	0xFF3
 21446                           intcon	equ	0xFF2
 21447                           postinc0	equ	0xFEE
 21448                           wreg	equ	0xFE8
 21449                           indf1	equ	0xFE7
 21450                           postdec1	equ	0xFE5
 21451                           fsr1h	equ	0xFE2
 21452                           fsr1l	equ	0xFE1
 21453                           indf2	equ	0xFDF
 21454                           postinc2	equ	0xFDE
 21455                           postdec2	equ	0xFDD
 21456                           plusw2	equ	0xFDB
 21457                           fsr2h	equ	0xFDA
 21458                           fsr2l	equ	0xFD9
 21459                           status	equ	0xFD8
 21460                           
 21461 ;; *************** function _SPI_DisableISR *****************
 21462 ;; Defined at:
 21463 ;;		line 181 in file "Library/SPI.c"
 21464 ;; Parameters:    Size  Location     Type
 21465 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 21466 ;;		 -> SPI1(11), SPI2(11), 
 21467 ;; Auto vars:     Size  Location     Type
 21468 ;;		None
 21469 ;; Return value:  Size  Location     Type
 21470 ;;                  1    wreg      void 
 21471 ;; Registers used:
 21472 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 21473 ;; Tracked objects:
 21474 ;;		On entry : 0/0
 21475 ;;		On exit  : 0/0
 21476 ;;		Unchanged: 0/0
 21477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21478 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21481 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21482 ;;Total ram usage:        2 bytes
 21483 ;; Hardware stack levels used:    1
 21484 ;; Hardware stack levels required when called:    7
 21485 ;; This function calls:
 21486 ;;		Nothing
 21487 ;; This function is called by:
 21488 ;;		_SPI_Init
 21489 ;; This function uses a non-reentrant model
 21490 ;;
 21491                           
 21492                           	psect	text101
 21493  016262                     __ptext101:
 21494                           	opt stack 0
 21495  016262                     _SPI_DisableISR:
 21496                           	opt stack 19
 21497                           
 21498                           ;SPI.c: 183: switch (pInput->mChannel)
 21499                           
 21500                           ;incstack = 0
 21501  016262  D004               	goto	l654
 21502  016264                     l655:
 21503                           
 21504                           ; BSR set to: 0
 21505  016264  969D               	bcf	3997,3,c	;volatile
 21506  016266  0012               	return	
 21507  016268                     l657:
 21508                           
 21509                           ; BSR set to: 0
 21510  016268  9EA3               	bcf	4003,7,c	;volatile
 21511                           
 21512                           ; BSR set to: 0
 21513                           ;SPI.c: 188: };
 21514                           
 21515                           ; BSR set to: 0
 21516                           
 21517                           ;SPI.c: 187: default: return;
 21518  01626A  0012               	return	
 21519  01626C                     l654:
 21520                           
 21521                           ; BSR set to: 0
 21522  01626C  0100               	movlb	0	; () banked
 21523  01626E  EE20 F002          	lfsr	2,2
 21524  016272  51BA               	movf	SPI_DisableISR@pInput& (0+255),w,b
 21525  016274  26D9               	addwf	fsr2l,f,c
 21526  016276  51BB               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 21527  016278  22DA               	addwfc	fsr2h,f,c
 21528  01627A  50DF               	movf	indf2,w,c
 21529                           
 21530                           ; Switch size 1, requested type "space"
 21531                           ; Number of cases is 2, Range of values is 0 to 1
 21532                           ; switch strategies available:
 21533                           ; Name         Instructions Cycles
 21534                           ; simple_byte            7     4 (average)
 21535                           ;	Chosen strategy is simple_byte
 21536  01627C  0A00               	xorlw	0	; case 0
 21537  01627E  B4D8               	btfsc	status,2,c
 21538  016280  D7F1               	goto	l655
 21539  016282  0A01               	xorlw	1	; case 1
 21540  016284  A4D8               	btfss	status,2,c
 21541  016286  0012               	return	
 21542  016288  D7EF               	goto	l657
 21543  01628A                     __end_of_SPI_DisableISR:
 21544                           	opt stack 0
 21545                           tosu	equ	0xFFF
 21546                           tosh	equ	0xFFE
 21547                           tosl	equ	0xFFD
 21548                           pclath	equ	0xFFA
 21549                           tblptru	equ	0xFF8
 21550                           tblptrh	equ	0xFF7
 21551                           tblptrl	equ	0xFF6
 21552                           tablat	equ	0xFF5
 21553                           prodh	equ	0xFF4
 21554                           prodl	equ	0xFF3
 21555                           intcon	equ	0xFF2
 21556                           postinc0	equ	0xFEE
 21557                           wreg	equ	0xFE8
 21558                           indf1	equ	0xFE7
 21559                           postdec1	equ	0xFE5
 21560                           fsr1h	equ	0xFE2
 21561                           fsr1l	equ	0xFE1
 21562                           indf2	equ	0xFDF
 21563                           postinc2	equ	0xFDE
 21564                           postdec2	equ	0xFDD
 21565                           plusw2	equ	0xFDB
 21566                           fsr2h	equ	0xFDA
 21567                           fsr2l	equ	0xFD9
 21568                           status	equ	0xFD8
 21569                           
 21570 ;; *************** function _SPI_DCS *****************
 21571 ;; Defined at:
 21572 ;;		line 219 in file "Library/SPI.c"
 21573 ;; Parameters:    Size  Location     Type
 21574 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 21575 ;;		 -> SPI1(11), SPI2(11), 
 21576 ;; Auto vars:     Size  Location     Type
 21577 ;;		None
 21578 ;; Return value:  Size  Location     Type
 21579 ;;                  1    wreg      void 
 21580 ;; Registers used:
 21581 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 21582 ;; Tracked objects:
 21583 ;;		On entry : 0/0
 21584 ;;		On exit  : 0/0
 21585 ;;		Unchanged: 0/0
 21586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21587 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21590 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21591 ;;Total ram usage:        2 bytes
 21592 ;; Hardware stack levels used:    1
 21593 ;; Hardware stack levels required when called:    7
 21594 ;; This function calls:
 21595 ;;		Nothing
 21596 ;; This function is called by:
 21597 ;;		_SPI_Init
 21598 ;; This function uses a non-reentrant model
 21599 ;;
 21600                           
 21601                           	psect	text102
 21602  016122                     __ptext102:
 21603                           	opt stack 0
 21604  016122                     _SPI_DCS:
 21605                           	opt stack 19
 21606                           
 21607                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 21608                           
 21609                           ; BSR set to: 0
 21610                           ;incstack = 0
 21611  016122  0100               	movlb	0	; () banked
 21612  016124  EE20 F002          	lfsr	2,2
 21613  016128  51BA               	movf	SPI_DCS@pInput& (0+255),w,b
 21614  01612A  26D9               	addwf	fsr2l,f,c
 21615  01612C  51BB               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 21616  01612E  22DA               	addwfc	fsr2h,f,c
 21617  016130  50DF               	movf	indf2,w,c
 21618  016132  A4D8               	btfss	status,2,c
 21619  016134  D007               	goto	l673
 21620                           
 21621                           ; BSR set to: 0
 21622                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 21623  016136  C0AB  FFD9         	movff	_PortC+4,fsr2l
 21624  01613A  C0AC  FFDA         	movff	_PortC+5,fsr2h
 21625  01613E  0100               	movlb	0	; () banked
 21626  016140  84DF               	bsf	indf2,2,c
 21627  016142  0012               	return	
 21628  016144                     l673:
 21629                           
 21630                           ; BSR set to: 0
 21631                           ;SPI.c: 223: else
 21632                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 21633                           
 21634                           ; BSR set to: 0
 21635  016144  C0A1  FFD9         	movff	_PortD+4,fsr2l
 21636  016148  C0A2  FFDA         	movff	_PortD+5,fsr2h
 21637  01614C  0100               	movlb	0	; () banked
 21638  01614E  8EDF               	bsf	indf2,7,c
 21639  016150  0012               	return	
 21640  016152                     __end_of_SPI_DCS:
 21641                           	opt stack 0
 21642                           tosu	equ	0xFFF
 21643                           tosh	equ	0xFFE
 21644                           tosl	equ	0xFFD
 21645                           pclath	equ	0xFFA
 21646                           tblptru	equ	0xFF8
 21647                           tblptrh	equ	0xFF7
 21648                           tblptrl	equ	0xFF6
 21649                           tablat	equ	0xFF5
 21650                           prodh	equ	0xFF4
 21651                           prodl	equ	0xFF3
 21652                           intcon	equ	0xFF2
 21653                           postinc0	equ	0xFEE
 21654                           wreg	equ	0xFE8
 21655                           indf1	equ	0xFE7
 21656                           postdec1	equ	0xFE5
 21657                           fsr1h	equ	0xFE2
 21658                           fsr1l	equ	0xFE1
 21659                           indf2	equ	0xFDF
 21660                           postinc2	equ	0xFDE
 21661                           postdec2	equ	0xFDD
 21662                           plusw2	equ	0xFDB
 21663                           fsr2h	equ	0xFDA
 21664                           fsr2l	equ	0xFD9
 21665                           status	equ	0xFD8
 21666                           
 21667 ;; *************** function _Button_Init *****************
 21668 ;; Defined at:
 21669 ;;		line 18 in file "Library/Button.c"
 21670 ;; Parameters:    Size  Location     Type
 21671 ;;  pInput          2    0[BANK1 ] const PTR struct Button
 21672 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 21673 ;;  pThreshold      2    2[BANK1 ] unsigned short 
 21674 ;;  pInitIO         3    4[BANK1 ] PTR FTN()void 
 21675 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 21676 ;;  pGetState       3    7[BANK1 ] PTR FTN()unsigned char 
 21677 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 21678 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 21679 ;;  pFunction       3   10[BANK1 ] PTR FTN(unsigned char ,)
 21680 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_NULL(1), 
 21681 ;; Auto vars:     Size  Location     Type
 21682 ;;		None
 21683 ;; Return value:  Size  Location     Type
 21684 ;;                  1    wreg      void 
 21685 ;; Registers used:
 21686 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21687 ;; Tracked objects:
 21688 ;;		On entry : 0/0
 21689 ;;		On exit  : 0/0
 21690 ;;		Unchanged: 0/0
 21691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21692 ;;      Params:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21695 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21696 ;;Total ram usage:       13 bytes
 21697 ;; Hardware stack levels used:    1
 21698 ;; Hardware stack levels required when called:   15
 21699 ;; This function calls:
 21700 ;;		_HMI_InitButtons
 21701 ;;		_MXK_InitDIPSwitch
 21702 ;;		_MXK_InitTestButton
 21703 ;; This function is called by:
 21704 ;;		_HMI_Init
 21705 ;;		_FunctInitButton
 21706 ;; This function uses a non-reentrant model
 21707 ;;
 21708                           
 21709                           	psect	text103
 21710  013D0A                     __ptext103:
 21711                           	opt stack 0
 21712  013D0A                     _Button_Init:
 21713                           	opt stack 13
 21714                           
 21715                           ;Button.c: 21: if(pInput==(void*)0)
 21716                           
 21717                           ; BSR set to: 0
 21718                           ;incstack = 0
 21719  013D0A  0101               	movlb	1	; () banked
 21720  013D0C  5100               	movf	Button_Init@pInput& (0+255),w,b
 21721  013D0E  0101               	movlb	1	; () banked
 21722  013D10  1101               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 21723  013D12  B4D8               	btfsc	status,2,c
 21724  013D14  0012               	return	
 21725                           
 21726                           ; BSR set to: 1
 21727                           ;Button.c: 23: if(pInitIO==(void*)0)
 21728                           
 21729                           ; BSR set to: 1
 21730                           
 21731                           ; BSR set to: 1
 21732                           ;Button.c: 22: return;
 21733  013D16  0101               	movlb	1	; () banked
 21734  013D18  5104               	movf	Button_Init@pInitIO& (0+255),w,b
 21735  013D1A  0101               	movlb	1	; () banked
 21736  013D1C  1105               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 21737  013D1E  0101               	movlb	1	; () banked
 21738  013D20  1106               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 21739  013D22  B4D8               	btfsc	status,2,c
 21740  013D24  0012               	return	
 21741                           
 21742                           ; BSR set to: 1
 21743                           ;Button.c: 25: if(pGetState==(void*)0)
 21744                           
 21745                           ; BSR set to: 1
 21746                           
 21747                           ; BSR set to: 1
 21748                           ;Button.c: 24: return;
 21749  013D26  0101               	movlb	1	; () banked
 21750  013D28  5107               	movf	Button_Init@pGetState& (0+255),w,b
 21751  013D2A  0101               	movlb	1	; () banked
 21752  013D2C  1108               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 21753  013D2E  0101               	movlb	1	; () banked
 21754  013D30  1109               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 21755  013D32  B4D8               	btfsc	status,2,c
 21756  013D34  0012               	return	
 21757                           
 21758                           ; BSR set to: 1
 21759                           ;Button.c: 27: if(pFunction==(void*)0)
 21760                           
 21761                           ; BSR set to: 1
 21762                           
 21763                           ; BSR set to: 1
 21764                           ;Button.c: 26: return;
 21765  013D36  0101               	movlb	1	; () banked
 21766  013D38  510A               	movf	Button_Init@pFunction& (0+255),w,b
 21767  013D3A  0101               	movlb	1	; () banked
 21768  013D3C  110B               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 21769  013D3E  0101               	movlb	1	; () banked
 21770  013D40  110C               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 21771  013D42  B4D8               	btfsc	status,2,c
 21772  013D44  0012               	return	
 21773                           
 21774                           ; BSR set to: 1
 21775                           ;Button.c: 30: if(pThreshold == 0)
 21776                           
 21777                           ; BSR set to: 1
 21778                           
 21779                           ; BSR set to: 1
 21780                           ;Button.c: 28: return;
 21781  013D46  0101               	movlb	1	; () banked
 21782  013D48  5102               	movf	Button_Init@pThreshold& (0+255),w,b
 21783  013D4A  0101               	movlb	1	; () banked
 21784  013D4C  1103               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 21785  013D4E  A4D8               	btfss	status,2,c
 21786  013D50  D005               	goto	l8
 21787                           
 21788                           ; BSR set to: 1
 21789                           ;Button.c: 31: pThreshold = 1;
 21790  013D52  0E00               	movlw	0
 21791  013D54  0101               	movlb	1	; () banked
 21792  013D56  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 21793  013D58  0E01               	movlw	1
 21794  013D5A  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 21795  013D5C                     l8:
 21796                           
 21797                           ; BSR set to: 1
 21798                           ;Button.c: 34: pInput->mState = 0;
 21799                           
 21800                           ; BSR set to: 1
 21801  013D5C  C100  FFD9         	movff	Button_Init@pInput,fsr2l
 21802  013D60  C101  FFDA         	movff	Button_Init@pInput+1,fsr2h
 21803  013D64  0E00               	movlw	0
 21804  013D66  6EDF               	movwf	indf2,c
 21805                           
 21806                           ; BSR set to: 1
 21807                           ;Button.c: 35: pInput->mCount = 0;
 21808  013D68  0101               	movlb	1	; () banked
 21809  013D6A  EE20 F001          	lfsr	2,1
 21810  013D6E  5100               	movf	Button_Init@pInput& (0+255),w,b
 21811  013D70  26D9               	addwf	fsr2l,f,c
 21812  013D72  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 21813  013D74  22DA               	addwfc	fsr2h,f,c
 21814  013D76  0E00               	movlw	0
 21815  013D78  6EDF               	movwf	indf2,c
 21816                           
 21817                           ; BSR set to: 1
 21818                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 21819  013D7A  0101               	movlb	1	; () banked
 21820  013D7C  EE20 F002          	lfsr	2,2
 21821  013D80  5100               	movf	Button_Init@pInput& (0+255),w,b
 21822  013D82  26D9               	addwf	fsr2l,f,c
 21823  013D84  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 21824  013D86  22DA               	addwfc	fsr2h,f,c
 21825  013D88  C102  FFDE         	movff	Button_Init@pThreshold,postinc2
 21826  013D8C  C103  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 21827                           
 21828                           ; BSR set to: 1
 21829                           ;Button.c: 37: pInput->mFunction = pFunction;
 21830  013D90  0101               	movlb	1	; () banked
 21831  013D92  EE20 F004          	lfsr	2,4
 21832  013D96  5100               	movf	Button_Init@pInput& (0+255),w,b
 21833  013D98  26D9               	addwf	fsr2l,f,c
 21834  013D9A  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 21835  013D9C  22DA               	addwfc	fsr2h,f,c
 21836  013D9E  C10A  FFDE         	movff	Button_Init@pFunction,postinc2
 21837  013DA2  C10B  FFDE         	movff	Button_Init@pFunction+1,postinc2
 21838  013DA6  C10C  FFDE         	movff	Button_Init@pFunction+2,postinc2
 21839                           
 21840                           ; BSR set to: 1
 21841                           ;Button.c: 38: pInput->mGetState = pGetState;
 21842  013DAA  0101               	movlb	1	; () banked
 21843  013DAC  EE20 F007          	lfsr	2,7
 21844  013DB0  5100               	movf	Button_Init@pInput& (0+255),w,b
 21845  013DB2  26D9               	addwf	fsr2l,f,c
 21846  013DB4  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 21847  013DB6  22DA               	addwfc	fsr2h,f,c
 21848  013DB8  C107  FFDE         	movff	Button_Init@pGetState,postinc2
 21849  013DBC  C108  FFDE         	movff	Button_Init@pGetState+1,postinc2
 21850  013DC0  C109  FFDE         	movff	Button_Init@pGetState+2,postinc2
 21851                           
 21852                           ; BSR set to: 1
 21853                           ;Button.c: 41: pInitIO();
 21854  013DC4  D801               	call	u10588
 21855  013DC6  0012               	return	
 21856  013DC8                     u10588:
 21857  013DC8  0005               	push	
 21858  013DCA  6EFA               	movwf	pclath,c
 21859  013DCC  0101               	movlb	1	; () banked
 21860  013DCE  5104               	movf	Button_Init@pInitIO& (0+255),w,b
 21861  013DD0  6EFD               	movwf	tosl,c
 21862  013DD2  5105               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 21863  013DD4  6EFE               	movwf	tosh,c
 21864  013DD6  5106               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 21865  013DD8  6EFF               	movwf	tosu,c
 21866  013DDA  50FA               	movf	pclath,w,c
 21867  013DDC  0012               	return		;indir
 21868  013DDE                     __end_of_Button_Init:
 21869                           	opt stack 0
 21870                           tosu	equ	0xFFF
 21871                           tosh	equ	0xFFE
 21872                           tosl	equ	0xFFD
 21873                           pclath	equ	0xFFA
 21874                           tblptru	equ	0xFF8
 21875                           tblptrh	equ	0xFF7
 21876                           tblptrl	equ	0xFF6
 21877                           tablat	equ	0xFF5
 21878                           prodh	equ	0xFF4
 21879                           prodl	equ	0xFF3
 21880                           intcon	equ	0xFF2
 21881                           postinc0	equ	0xFEE
 21882                           wreg	equ	0xFE8
 21883                           indf1	equ	0xFE7
 21884                           postdec1	equ	0xFE5
 21885                           fsr1h	equ	0xFE2
 21886                           fsr1l	equ	0xFE1
 21887                           indf2	equ	0xFDF
 21888                           postinc2	equ	0xFDE
 21889                           postdec2	equ	0xFDD
 21890                           plusw2	equ	0xFDB
 21891                           fsr2h	equ	0xFDA
 21892                           fsr2l	equ	0xFD9
 21893                           status	equ	0xFD8
 21894                           
 21895 ;; *************** function _MXK_InitDIPSwitch *****************
 21896 ;; Defined at:
 21897 ;;		line 20 in file "Library/MXK.c"
 21898 ;; Parameters:    Size  Location     Type
 21899 ;;		None
 21900 ;; Auto vars:     Size  Location     Type
 21901 ;;		None
 21902 ;; Return value:  Size  Location     Type
 21903 ;;                  1    wreg      void 
 21904 ;; Registers used:
 21905 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21906 ;; Tracked objects:
 21907 ;;		On entry : 0/0
 21908 ;;		On exit  : 0/0
 21909 ;;		Unchanged: 0/0
 21910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21914 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21915 ;;Total ram usage:        0 bytes
 21916 ;; Hardware stack levels used:    1
 21917 ;; Hardware stack levels required when called:   14
 21918 ;; This function calls:
 21919 ;;		_Port_SetQuadType
 21920 ;; This function is called by:
 21921 ;;		_FunctInitButton
 21922 ;;		_Button_Init
 21923 ;; This function uses a non-reentrant model
 21924 ;;
 21925                           
 21926                           	psect	text104
 21927  0163CC                     __ptext104:
 21928                           	opt stack 0
 21929  0163CC                     _MXK_InitDIPSwitch:
 21930                           	opt stack 13
 21931                           
 21932                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 21933                           
 21934                           ;incstack = 0
 21935  0163CC  0E9D               	movlw	low _PortD
 21936  0163CE  0100               	movlb	0	; () banked
 21937  0163D0  6FF0               	movwf	Port_SetQuadType@pInput& (0+255),b
 21938  0163D2  0E00               	movlw	high _PortD
 21939  0163D4  0100               	movlb	0	; () banked
 21940  0163D6  6FF1               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 21941  0163D8  0E00               	movlw	0
 21942  0163DA  0100               	movlb	0	; () banked
 21943  0163DC  6FF2               	movwf	Port_SetQuadType@pQuad& (0+255),b
 21944  0163DE  0E00               	movlw	0
 21945  0163E0  0100               	movlb	0	; () banked
 21946  0163E2  6FF3               	movwf	Port_SetQuadType@pType& (0+255),b
 21947  0163E4  ECA7  F08C         	call	_Port_SetQuadType	;wreg free
 21948  0163E8  0012               	return		;funcret
 21949  0163EA                     __end_of_MXK_InitDIPSwitch:
 21950                           	opt stack 0
 21951                           tosu	equ	0xFFF
 21952                           tosh	equ	0xFFE
 21953                           tosl	equ	0xFFD
 21954                           pclath	equ	0xFFA
 21955                           tblptru	equ	0xFF8
 21956                           tblptrh	equ	0xFF7
 21957                           tblptrl	equ	0xFF6
 21958                           tablat	equ	0xFF5
 21959                           prodh	equ	0xFF4
 21960                           prodl	equ	0xFF3
 21961                           intcon	equ	0xFF2
 21962                           postinc0	equ	0xFEE
 21963                           wreg	equ	0xFE8
 21964                           indf1	equ	0xFE7
 21965                           postdec1	equ	0xFE5
 21966                           fsr1h	equ	0xFE2
 21967                           fsr1l	equ	0xFE1
 21968                           indf2	equ	0xFDF
 21969                           postinc2	equ	0xFDE
 21970                           postdec2	equ	0xFDD
 21971                           plusw2	equ	0xFDB
 21972                           fsr2h	equ	0xFDA
 21973                           fsr2l	equ	0xFD9
 21974                           status	equ	0xFD8
 21975                           
 21976 ;; *************** function _HMI_InitButtons *****************
 21977 ;; Defined at:
 21978 ;;		line 21 in file "HMI.c"
 21979 ;; Parameters:    Size  Location     Type
 21980 ;;		None
 21981 ;; Auto vars:     Size  Location     Type
 21982 ;;		None
 21983 ;; Return value:  Size  Location     Type
 21984 ;;                  1    wreg      void 
 21985 ;; Registers used:
 21986 ;;		wreg, status,2
 21987 ;; Tracked objects:
 21988 ;;		On entry : 0/0
 21989 ;;		On exit  : 0/0
 21990 ;;		Unchanged: 0/0
 21991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21995 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21996 ;;Total ram usage:        0 bytes
 21997 ;; Hardware stack levels used:    1
 21998 ;; Hardware stack levels required when called:    7
 21999 ;; This function calls:
 22000 ;;		Nothing
 22001 ;; This function is called by:
 22002 ;;		_HMI_Init
 22003 ;;		_Button_Init
 22004 ;; This function uses a non-reentrant model
 22005 ;;
 22006                           
 22007                           	psect	text105
 22008  016690                     __ptext105:
 22009                           	opt stack 0
 22010  016690                     _HMI_InitButtons:
 22011                           	opt stack 20
 22012                           
 22013                           ;HMI.c: 23: TRISE = 0xFC;
 22014                           
 22015                           ;incstack = 0
 22016  016690  0EFC               	movlw	252
 22017  016692  6E96               	movwf	3990,c	;volatile
 22018  016694  0012               	return		;funcret
 22019  016696                     __end_of_HMI_InitButtons:
 22020                           	opt stack 0
 22021                           tosu	equ	0xFFF
 22022                           tosh	equ	0xFFE
 22023                           tosl	equ	0xFFD
 22024                           pclath	equ	0xFFA
 22025                           tblptru	equ	0xFF8
 22026                           tblptrh	equ	0xFF7
 22027                           tblptrl	equ	0xFF6
 22028                           tablat	equ	0xFF5
 22029                           prodh	equ	0xFF4
 22030                           prodl	equ	0xFF3
 22031                           intcon	equ	0xFF2
 22032                           postinc0	equ	0xFEE
 22033                           wreg	equ	0xFE8
 22034                           indf1	equ	0xFE7
 22035                           postdec1	equ	0xFE5
 22036                           fsr1h	equ	0xFE2
 22037                           fsr1l	equ	0xFE1
 22038                           indf2	equ	0xFDF
 22039                           postinc2	equ	0xFDE
 22040                           postdec2	equ	0xFDD
 22041                           plusw2	equ	0xFDB
 22042                           fsr2h	equ	0xFDA
 22043                           fsr2l	equ	0xFD9
 22044                           status	equ	0xFD8
 22045                           
 22046 ;; *************** function _MXK_InitTestButton *****************
 22047 ;; Defined at:
 22048 ;;		line 10 in file "Library/MXK.c"
 22049 ;; Parameters:    Size  Location     Type
 22050 ;;		None
 22051 ;; Auto vars:     Size  Location     Type
 22052 ;;		None
 22053 ;; Return value:  Size  Location     Type
 22054 ;;                  1    wreg      void 
 22055 ;; Registers used:
 22056 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22057 ;; Tracked objects:
 22058 ;;		On entry : 0/0
 22059 ;;		On exit  : 0/0
 22060 ;;		Unchanged: 0/0
 22061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22065 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22066 ;;Total ram usage:        0 bytes
 22067 ;; Hardware stack levels used:    1
 22068 ;; Hardware stack levels required when called:   12
 22069 ;; This function calls:
 22070 ;;		_Port_SetPinType
 22071 ;; This function is called by:
 22072 ;;		_FunctInitButton
 22073 ;;		_Button_Init
 22074 ;; This function uses a non-reentrant model
 22075 ;;
 22076                           
 22077                           	psect	text106
 22078  0163EA                     __ptext106:
 22079                           	opt stack 0
 22080  0163EA                     _MXK_InitTestButton:
 22081                           	opt stack 15
 22082                           
 22083                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 22084                           
 22085                           ;incstack = 0
 22086  0163EA  0EAA               	movlw	low _PortB
 22087  0163EC  0100               	movlb	0	; () banked
 22088  0163EE  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 22089  0163F0  0E03               	movlw	high _PortB
 22090  0163F2  0100               	movlb	0	; () banked
 22091  0163F4  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 22092  0163F6  0E04               	movlw	4
 22093  0163F8  0100               	movlb	0	; () banked
 22094  0163FA  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 22095  0163FC  0E00               	movlw	0
 22096  0163FE  0100               	movlb	0	; () banked
 22097  016400  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 22098  016402  ECB4  F092         	call	_Port_SetPinType	;wreg free
 22099  016406  0012               	return		;funcret
 22100  016408                     __end_of_MXK_InitTestButton:
 22101                           	opt stack 0
 22102                           tosu	equ	0xFFF
 22103                           tosh	equ	0xFFE
 22104                           tosl	equ	0xFFD
 22105                           pclath	equ	0xFFA
 22106                           tblptru	equ	0xFF8
 22107                           tblptrh	equ	0xFF7
 22108                           tblptrl	equ	0xFF6
 22109                           tablat	equ	0xFF5
 22110                           prodh	equ	0xFF4
 22111                           prodl	equ	0xFF3
 22112                           intcon	equ	0xFF2
 22113                           postinc0	equ	0xFEE
 22114                           wreg	equ	0xFE8
 22115                           indf1	equ	0xFE7
 22116                           postdec1	equ	0xFE5
 22117                           fsr1h	equ	0xFE2
 22118                           fsr1l	equ	0xFE1
 22119                           indf2	equ	0xFDF
 22120                           postinc2	equ	0xFDE
 22121                           postdec2	equ	0xFDD
 22122                           plusw2	equ	0xFDB
 22123                           fsr2h	equ	0xFDA
 22124                           fsr2l	equ	0xFD9
 22125                           status	equ	0xFD8
 22126                           
 22127 ;; *************** function _Port_SetPinType *****************
 22128 ;; Defined at:
 22129 ;;		line 189 in file "Library/Port.c"
 22130 ;; Parameters:    Size  Location     Type
 22131 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 22132 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 22133 ;;		 -> PortD(10), PortC(10), PortF(10), 
 22134 ;;  pPin            1   40[BANK0 ] enum E6750
 22135 ;;  pType           1   41[BANK0 ] enum E6795
 22136 ;; Auto vars:     Size  Location     Type
 22137 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 22138 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 22139 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 22140 ;;  Output          1   42[BANK0 ] enum E6475
 22141 ;; Return value:  Size  Location     Type
 22142 ;;                  1    wreg      enum E6475
 22143 ;; Registers used:
 22144 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22145 ;; Tracked objects:
 22146 ;;		On entry : 0/0
 22147 ;;		On exit  : 0/0
 22148 ;;		Unchanged: 0/0
 22149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22150 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22151 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22153 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22154 ;;Total ram usage:        7 bytes
 22155 ;; Hardware stack levels used:    1
 22156 ;; Hardware stack levels required when called:   11
 22157 ;; This function calls:
 22158 ;;		_Byte_SetBit
 22159 ;;		_PortProperty_Valid
 22160 ;;		_Word_SetPair
 22161 ;; This function is called by:
 22162 ;;		_Configure_GPIOs
 22163 ;;		_LED_Init
 22164 ;;		_Port_Init
 22165 ;;		_SPI_Init
 22166 ;;		_Motor_Init
 22167 ;;		_MXK_InitTestButton
 22168 ;;		_MXK_Init
 22169 ;;		_I2C_Init
 22170 ;; This function uses a non-reentrant model
 22171 ;;
 22172                           
 22173                           	psect	text107
 22174  012568                     __ptext107:
 22175                           	opt stack 0
 22176  012568                     _Port_SetPinType:
 22177                           	opt stack 17
 22178                           
 22179                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 22180                           
 22181                           ;incstack = 0
 22182  012568  C0E0  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 22183  01256C  C0E1  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 22184  012570  CFDE F0E5          	movff	postinc2,Port_SetPinType@Props
 22185  012574  CFDD F0E6          	movff	postdec2,Port_SetPinType@Props+1
 22186                           
 22187                           ;Port.c: 192: ePinError Output = ePinErrorState;
 22188  012578  0E05               	movlw	5
 22189  01257A  0100               	movlb	0	; () banked
 22190  01257C  6FE4               	movwf	Port_SetPinType@Output& (0+255),b
 22191                           
 22192                           ;Port.c: 193: switch (pType)
 22193  01257E  D0B5               	goto	l412
 22194  012580                     
 22195                           ; BSR set to: 0
 22196                           ;Port.c: 197: {
 22197                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 22198                           
 22199                           ; BSR set to: 0
 22200  012580  0100               	movlb	0	; () banked
 22201  012582  EE20 F002          	lfsr	2,2
 22202  012586  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22203  012588  26D9               	addwf	fsr2l,f,c
 22204  01258A  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22205  01258C  22DA               	addwfc	fsr2h,f,c
 22206  01258E  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22207  012592  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22208  012596  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22209  01259A  0E01               	movlw	1
 22210  01259C  0100               	movlb	0	; () banked
 22211  01259E  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22212  0125A0  ECCC  F0AB         	call	_Byte_SetBit	;wreg free
 22213                           
 22214                           ;Port.c: 203: break;
 22215  0125A4  D0B0               	goto	l414
 22216  0125A6                     
 22217                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 22218  0125A6  C0E5  F0C9         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 22219  0125AA  C0E6  F0CA         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 22220  0125AE  0E01               	movlw	1
 22221  0125B0  0100               	movlb	0	; () banked
 22222  0125B2  6FCB               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 22223  0125B4  C0E2  F0CC         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 22224  0125B8  EC49  F0A8         	call	_PortProperty_Valid	;wreg free
 22225  0125BC  0100               	movlb	0	; () banked
 22226  0125BE  6FE4               	movwf	Port_SetPinType@Output& (0+255),b
 22227  0125C0  0100               	movlb	0	; () banked
 22228  0125C2  51E4               	movf	Port_SetPinType@Output& (0+255),w,b
 22229  0125C4  A4D8               	btfss	status,2,c
 22230  0125C6  0012               	return	
 22231                           
 22232                           ; BSR set to: 0
 22233                           ;Port.c: 208: {
 22234                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 22235  0125C8  0100               	movlb	0	; () banked
 22236  0125CA  EE20 F002          	lfsr	2,2
 22237  0125CE  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22238  0125D0  26D9               	addwf	fsr2l,f,c
 22239  0125D2  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22240  0125D4  22DA               	addwfc	fsr2h,f,c
 22241  0125D6  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22242  0125DA  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22243  0125DE  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22244  0125E2  0E00               	movlw	0
 22245  0125E4  0100               	movlb	0	; () banked
 22246  0125E6  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22247  0125E8  ECCC  F0AB         	call	_Byte_SetBit	;wreg free
 22248                           
 22249                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 22250  0125EC  0100               	movlb	0	; () banked
 22251  0125EE  EE20 F004          	lfsr	2,4
 22252  0125F2  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22253  0125F4  26D9               	addwf	fsr2l,f,c
 22254  0125F6  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22255  0125F8  22DA               	addwfc	fsr2h,f,c
 22256  0125FA  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22257  0125FE  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22258  012602  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22259  012606  0E00               	movlw	0
 22260  012608  0100               	movlb	0	; () banked
 22261  01260A  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22262  01260C  ECCC  F0AB         	call	_Byte_SetBit	;wreg free
 22263                           
 22264                           ;Port.c: 214: break;
 22265  012610  D07A               	goto	l414
 22266  012612                     
 22267                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 22268                           
 22269                           ;Port.c: 218: case eTypeOutputOpenSource:
 22270  012612  C0E5  F0C9         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 22271  012616  C0E6  F0CA         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 22272  01261A  0E02               	movlw	2
 22273  01261C  0100               	movlb	0	; () banked
 22274  01261E  6FCB               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 22275  012620  C0E2  F0CC         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 22276  012624  EC49  F0A8         	call	_PortProperty_Valid	;wreg free
 22277  012628  0100               	movlb	0	; () banked
 22278  01262A  6FE4               	movwf	Port_SetPinType@Output& (0+255),b
 22279  01262C  0100               	movlb	0	; () banked
 22280  01262E  51E4               	movf	Port_SetPinType@Output& (0+255),w,b
 22281  012630  A4D8               	btfss	status,2,c
 22282  012632  0012               	return	
 22283                           
 22284                           ; BSR set to: 0
 22285                           ;Port.c: 220: {
 22286                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 22287  012634  0100               	movlb	0	; () banked
 22288  012636  EE20 F002          	lfsr	2,2
 22289  01263A  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22290  01263C  26D9               	addwf	fsr2l,f,c
 22291  01263E  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22292  012640  22DA               	addwfc	fsr2h,f,c
 22293  012642  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22294  012646  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22295  01264A  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22296  01264E  0E01               	movlw	1
 22297  012650  0100               	movlb	0	; () banked
 22298  012652  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22299  012654  ECCC  F0AB         	call	_Byte_SetBit	;wreg free
 22300                           
 22301                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 22302  012658  0100               	movlb	0	; () banked
 22303  01265A  EE20 F004          	lfsr	2,4
 22304  01265E  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22305  012660  26D9               	addwf	fsr2l,f,c
 22306  012662  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22307  012664  22DA               	addwfc	fsr2h,f,c
 22308  012666  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22309  01266A  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22310  01266E  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22311  012672  0E01               	movlw	1
 22312  012674  0100               	movlb	0	; () banked
 22313  012676  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22314  012678  ECCC  F0AB         	call	_Byte_SetBit	;wreg free
 22315                           
 22316                           ;Port.c: 226: break;
 22317  01267C  D044               	goto	l414
 22318  01267E                     
 22319                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 22320                           
 22321                           ;Port.c: 230: case eTypeOutputPushPull:
 22322  01267E  C0E5  F0C9         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 22323  012682  C0E6  F0CA         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 22324  012686  0E00               	movlw	0
 22325  012688  0100               	movlb	0	; () banked
 22326  01268A  6FCB               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 22327  01268C  C0E2  F0CC         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 22328  012690  EC49  F0A8         	call	_PortProperty_Valid	;wreg free
 22329  012694  0100               	movlb	0	; () banked
 22330  012696  6FE4               	movwf	Port_SetPinType@Output& (0+255),b
 22331  012698  0100               	movlb	0	; () banked
 22332  01269A  51E4               	movf	Port_SetPinType@Output& (0+255),w,b
 22333  01269C  A4D8               	btfss	status,2,c
 22334  01269E  0012               	return	
 22335                           
 22336                           ; BSR set to: 0
 22337                           ;Port.c: 232: {
 22338                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 22339  0126A0  0100               	movlb	0	; () banked
 22340  0126A2  EE20 F002          	lfsr	2,2
 22341  0126A6  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22342  0126A8  26D9               	addwf	fsr2l,f,c
 22343  0126AA  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22344  0126AC  22DA               	addwfc	fsr2h,f,c
 22345  0126AE  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22346  0126B2  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22347  0126B6  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22348  0126BA  0E00               	movlw	0
 22349  0126BC  0100               	movlb	0	; () banked
 22350  0126BE  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22351  0126C0  ECCC  F0AB         	call	_Byte_SetBit	;wreg free
 22352                           
 22353                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 22354  0126C4  0100               	movlb	0	; () banked
 22355  0126C6  EE20 F004          	lfsr	2,4
 22356  0126CA  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22357  0126CC  26D9               	addwf	fsr2l,f,c
 22358  0126CE  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22359  0126D0  22DA               	addwfc	fsr2h,f,c
 22360  0126D2  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22361  0126D6  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22362  0126DA  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22363  0126DE  0E00               	movlw	0
 22364  0126E0  0100               	movlb	0	; () banked
 22365  0126E2  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22366  0126E4  ECCC  F0AB         	call	_Byte_SetBit	;wreg free
 22367                           
 22368                           ;Port.c: 239: }
 22369                           
 22370                           ;Port.c: 238: break;
 22371  0126E8  D00E               	goto	l414
 22372  0126EA                     l412:
 22373  0126EA  0100               	movlb	0	; () banked
 22374  0126EC  51E3               	movf	Port_SetPinType@pType& (0+255),w,b
 22375                           
 22376                           ; Switch size 1, requested type "space"
 22377                           ; Number of cases is 4, Range of values is 0 to 3
 22378                           ; switch strategies available:
 22379                           ; Name         Instructions Cycles
 22380                           ; simple_byte           13     7 (average)
 22381                           ;	Chosen strategy is simple_byte
 22382  0126EE  0A00               	xorlw	0	; case 0
 22383  0126F0  B4D8               	btfsc	status,2,c
 22384  0126F2  D746               	goto	l413
 22385  0126F4  0A01               	xorlw	1	; case 1
 22386  0126F6  B4D8               	btfsc	status,2,c
 22387  0126F8  D756               	goto	l415
 22388  0126FA  0A03               	xorlw	3	; case 2
 22389  0126FC  B4D8               	btfsc	status,2,c
 22390  0126FE  D789               	goto	l417
 22391  012700  0A01               	xorlw	1	; case 3
 22392  012702  B4D8               	btfsc	status,2,c
 22393  012704  D7BC               	goto	l421
 22394  012706                     l414:
 22395                           
 22396                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 22397                           
 22398                           ; BSR set to: 0
 22399  012706  0E08               	movlw	8
 22400  012708  0100               	movlb	0	; () banked
 22401  01270A  25E0               	addwf	Port_SetPinType@pInput& (0+255),w,b
 22402  01270C  0100               	movlb	0	; () banked
 22403  01270E  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 22404  012710  0E00               	movlw	0
 22405  012712  0100               	movlb	0	; () banked
 22406  012714  21E1               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 22407  012716  0100               	movlb	0	; () banked
 22408  012718  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22409  01271A  C0E2  F0CB         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 22410  01271E  C0E3  F0CC         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 22411  012722  EC8B  F0AE         	call	_Word_SetPair	;wreg free
 22412  012726  0012               	return	
 22413  012728                     __end_of_Port_SetPinType:
 22414                           	opt stack 0
 22415                           tosu	equ	0xFFF
 22416                           tosh	equ	0xFFE
 22417                           tosl	equ	0xFFD
 22418                           pclath	equ	0xFFA
 22419                           tblptru	equ	0xFF8
 22420                           tblptrh	equ	0xFF7
 22421                           tblptrl	equ	0xFF6
 22422                           tablat	equ	0xFF5
 22423                           prodh	equ	0xFF4
 22424                           prodl	equ	0xFF3
 22425                           intcon	equ	0xFF2
 22426                           postinc0	equ	0xFEE
 22427                           wreg	equ	0xFE8
 22428                           indf1	equ	0xFE7
 22429                           postdec1	equ	0xFE5
 22430                           fsr1h	equ	0xFE2
 22431                           fsr1l	equ	0xFE1
 22432                           indf2	equ	0xFDF
 22433                           postinc2	equ	0xFDE
 22434                           postdec2	equ	0xFDD
 22435                           plusw2	equ	0xFDB
 22436                           fsr2h	equ	0xFDA
 22437                           fsr2l	equ	0xFD9
 22438                           status	equ	0xFD8
 22439                           
 22440 ;; *************** function _Port_SetQuadType *****************
 22441 ;; Defined at:
 22442 ;;		line 399 in file "Library/Port.c"
 22443 ;; Parameters:    Size  Location     Type
 22444 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 22445 ;;		 -> PortB(10), PortD(10), 
 22446 ;;  pQuad           1   56[BANK0 ] enum E6776
 22447 ;;  pType           1   57[BANK0 ] enum E6795
 22448 ;; Auto vars:     Size  Location     Type
 22449 ;;  Output          1   58[BANK0 ] enum E6475
 22450 ;; Return value:  Size  Location     Type
 22451 ;;                  1    wreg      enum E6475
 22452 ;; Registers used:
 22453 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22454 ;; Tracked objects:
 22455 ;;		On entry : 0/0
 22456 ;;		On exit  : 0/0
 22457 ;;		Unchanged: 0/0
 22458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22459 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22460 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22462 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22463 ;;Total ram usage:        5 bytes
 22464 ;; Hardware stack levels used:    1
 22465 ;; Hardware stack levels required when called:   13
 22466 ;; This function calls:
 22467 ;;		_Byte_SetQuad
 22468 ;;		_Port_CheckQuadType
 22469 ;;		_Word_SetPair
 22470 ;; This function is called by:
 22471 ;;		_MXK_InitDIPSwitch
 22472 ;;		_MXK_Init
 22473 ;; This function uses a non-reentrant model
 22474 ;;
 22475                           
 22476                           	psect	text108
 22477  01194E                     __ptext108:
 22478                           	opt stack 0
 22479  01194E                     _Port_SetQuadType:
 22480                           	opt stack 15
 22481                           
 22482                           ;Port.c: 401: ePinError Output = ePinErrorState;
 22483                           
 22484                           ;incstack = 0
 22485  01194E  0E05               	movlw	5
 22486  011950  0100               	movlb	0	; () banked
 22487  011952  6FF4               	movwf	Port_SetQuadType@Output& (0+255),b
 22488                           
 22489                           ;Port.c: 403: switch (pType)
 22490  011954  D0C7               	goto	l476
 22491  011956                     
 22492                           ; BSR set to: 0
 22493                           ;Port.c: 407: {
 22494                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 22495                           
 22496                           ; BSR set to: 0
 22497  011956  0100               	movlb	0	; () banked
 22498  011958  EE20 F002          	lfsr	2,2
 22499  01195C  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22500  01195E  26D9               	addwf	fsr2l,f,c
 22501  011960  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22502  011962  22DA               	addwfc	fsr2h,f,c
 22503  011964  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22504  011968  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22505  01196C  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22506  011970  0E0F               	movlw	15
 22507  011972  0100               	movlb	0	; () banked
 22508  011974  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22509  011976  EC7A  F0B1         	call	_Byte_SetQuad	;wreg free
 22510                           
 22511                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 22512  01197A  0100               	movlb	0	; () banked
 22513  01197C  EE20 F004          	lfsr	2,4
 22514  011980  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22515  011982  26D9               	addwf	fsr2l,f,c
 22516  011984  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22517  011986  22DA               	addwfc	fsr2h,f,c
 22518  011988  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22519  01198C  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22520  011990  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22521  011994  0E00               	movlw	0
 22522  011996  0100               	movlb	0	; () banked
 22523  011998  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22524  01199A  EC7A  F0B1         	call	_Byte_SetQuad	;wreg free
 22525                           
 22526                           ;Port.c: 413: }
 22527                           ;Port.c: 415: break;
 22528  01199E  D0B0               	goto	l478
 22529  0119A0                     
 22530                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 22531  0119A0  C0F0  F0E9         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 22532  0119A4  C0F1  F0EA         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 22533  0119A8  C0F2  F0EB         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 22534  0119AC  0E03               	movlw	3
 22535  0119AE  0100               	movlb	0	; () banked
 22536  0119B0  6FEC               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 22537  0119B2  EC8E  F0AC         	call	_Port_CheckQuadType	;wreg free
 22538  0119B6  0100               	movlb	0	; () banked
 22539  0119B8  6FF4               	movwf	Port_SetQuadType@Output& (0+255),b
 22540  0119BA  0100               	movlb	0	; () banked
 22541  0119BC  51F4               	movf	Port_SetQuadType@Output& (0+255),w,b
 22542  0119BE  A4D8               	btfss	status,2,c
 22543  0119C0  0012               	return	
 22544                           
 22545                           ; BSR set to: 0
 22546                           ;Port.c: 418: {
 22547                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 22548  0119C2  0100               	movlb	0	; () banked
 22549  0119C4  EE20 F002          	lfsr	2,2
 22550  0119C8  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22551  0119CA  26D9               	addwf	fsr2l,f,c
 22552  0119CC  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22553  0119CE  22DA               	addwfc	fsr2h,f,c
 22554  0119D0  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22555  0119D4  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22556  0119D8  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22557  0119DC  0E00               	movlw	0
 22558  0119DE  0100               	movlb	0	; () banked
 22559  0119E0  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22560  0119E2  EC7A  F0B1         	call	_Byte_SetQuad	;wreg free
 22561                           
 22562                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 22563  0119E6  0100               	movlb	0	; () banked
 22564  0119E8  EE20 F004          	lfsr	2,4
 22565  0119EC  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22566  0119EE  26D9               	addwf	fsr2l,f,c
 22567  0119F0  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22568  0119F2  22DA               	addwfc	fsr2h,f,c
 22569  0119F4  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22570  0119F8  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22571  0119FC  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22572  011A00  0E00               	movlw	0
 22573  011A02  0100               	movlb	0	; () banked
 22574  011A04  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22575  011A06  EC7A  F0B1         	call	_Byte_SetQuad	;wreg free
 22576                           
 22577                           ;Port.c: 424: }
 22578  011A0A  D07A               	goto	l478
 22579  011A0C                     
 22580                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 22581  011A0C  C0F0  F0E9         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 22582  011A10  C0F1  F0EA         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 22583  011A14  C0F2  F0EB         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 22584  011A18  0E03               	movlw	3
 22585  011A1A  0100               	movlb	0	; () banked
 22586  011A1C  6FEC               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 22587  011A1E  EC8E  F0AC         	call	_Port_CheckQuadType	;wreg free
 22588  011A22  0100               	movlb	0	; () banked
 22589  011A24  6FF4               	movwf	Port_SetQuadType@Output& (0+255),b
 22590  011A26  0100               	movlb	0	; () banked
 22591  011A28  51F4               	movf	Port_SetQuadType@Output& (0+255),w,b
 22592  011A2A  A4D8               	btfss	status,2,c
 22593  011A2C  0012               	return	
 22594                           
 22595                           ; BSR set to: 0
 22596                           ;Port.c: 429: {
 22597                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 22598  011A2E  0100               	movlb	0	; () banked
 22599  011A30  EE20 F002          	lfsr	2,2
 22600  011A34  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22601  011A36  26D9               	addwf	fsr2l,f,c
 22602  011A38  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22603  011A3A  22DA               	addwfc	fsr2h,f,c
 22604  011A3C  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22605  011A40  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22606  011A44  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22607  011A48  0E0F               	movlw	15
 22608  011A4A  0100               	movlb	0	; () banked
 22609  011A4C  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22610  011A4E  EC7A  F0B1         	call	_Byte_SetQuad	;wreg free
 22611                           
 22612                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 22613  011A52  0100               	movlb	0	; () banked
 22614  011A54  EE20 F004          	lfsr	2,4
 22615  011A58  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22616  011A5A  26D9               	addwf	fsr2l,f,c
 22617  011A5C  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22618  011A5E  22DA               	addwfc	fsr2h,f,c
 22619  011A60  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22620  011A64  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22621  011A68  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22622  011A6C  0E0F               	movlw	15
 22623  011A6E  0100               	movlb	0	; () banked
 22624  011A70  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22625  011A72  EC7A  F0B1         	call	_Byte_SetQuad	;wreg free
 22626                           
 22627                           ;Port.c: 435: }
 22628  011A76  D044               	goto	l478
 22629  011A78                     
 22630                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 22631  011A78  C0F0  F0E9         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 22632  011A7C  C0F1  F0EA         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 22633  011A80  C0F2  F0EB         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 22634  011A84  0E03               	movlw	3
 22635  011A86  0100               	movlb	0	; () banked
 22636  011A88  6FEC               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 22637  011A8A  EC8E  F0AC         	call	_Port_CheckQuadType	;wreg free
 22638  011A8E  0100               	movlb	0	; () banked
 22639  011A90  6FF4               	movwf	Port_SetQuadType@Output& (0+255),b
 22640  011A92  0100               	movlb	0	; () banked
 22641  011A94  51F4               	movf	Port_SetQuadType@Output& (0+255),w,b
 22642  011A96  A4D8               	btfss	status,2,c
 22643  011A98  0012               	return	
 22644                           
 22645                           ; BSR set to: 0
 22646                           ;Port.c: 440: {
 22647                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 22648  011A9A  0100               	movlb	0	; () banked
 22649  011A9C  EE20 F002          	lfsr	2,2
 22650  011AA0  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22651  011AA2  26D9               	addwf	fsr2l,f,c
 22652  011AA4  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22653  011AA6  22DA               	addwfc	fsr2h,f,c
 22654  011AA8  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22655  011AAC  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22656  011AB0  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22657  011AB4  0E00               	movlw	0
 22658  011AB6  0100               	movlb	0	; () banked
 22659  011AB8  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22660  011ABA  EC7A  F0B1         	call	_Byte_SetQuad	;wreg free
 22661                           
 22662                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 22663  011ABE  0100               	movlb	0	; () banked
 22664  011AC0  EE20 F004          	lfsr	2,4
 22665  011AC4  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22666  011AC6  26D9               	addwf	fsr2l,f,c
 22667  011AC8  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22668  011ACA  22DA               	addwfc	fsr2h,f,c
 22669  011ACC  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22670  011AD0  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22671  011AD4  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22672  011AD8  0E00               	movlw	0
 22673  011ADA  0100               	movlb	0	; () banked
 22674  011ADC  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22675  011ADE  EC7A  F0B1         	call	_Byte_SetQuad	;wreg free
 22676                           
 22677                           ;Port.c: 446: }
 22678  011AE2  D00E               	goto	l478
 22679  011AE4                     l476:
 22680  011AE4  0100               	movlb	0	; () banked
 22681  011AE6  51F3               	movf	Port_SetQuadType@pType& (0+255),w,b
 22682                           
 22683                           ; Switch size 1, requested type "space"
 22684                           ; Number of cases is 4, Range of values is 0 to 3
 22685                           ; switch strategies available:
 22686                           ; Name         Instructions Cycles
 22687                           ; simple_byte           13     7 (average)
 22688                           ;	Chosen strategy is simple_byte
 22689  011AE8  0A00               	xorlw	0	; case 0
 22690  011AEA  B4D8               	btfsc	status,2,c
 22691  011AEC  D734               	goto	l477
 22692  011AEE  0A01               	xorlw	1	; case 1
 22693  011AF0  B4D8               	btfsc	status,2,c
 22694  011AF2  D756               	goto	l479
 22695  011AF4  0A03               	xorlw	3	; case 2
 22696  011AF6  B4D8               	btfsc	status,2,c
 22697  011AF8  D789               	goto	l483
 22698  011AFA  0A01               	xorlw	1	; case 3
 22699  011AFC  B4D8               	btfsc	status,2,c
 22700  011AFE  D7BC               	goto	l486
 22701  011B00                     l478:
 22702                           
 22703                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 22704                           
 22705                           ; BSR set to: 0
 22706  011B00  0E08               	movlw	8
 22707  011B02  0100               	movlb	0	; () banked
 22708  011B04  25F0               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 22709  011B06  0100               	movlb	0	; () banked
 22710  011B08  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 22711  011B0A  0E00               	movlw	0
 22712  011B0C  0100               	movlb	0	; () banked
 22713  011B0E  21F1               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22714  011B10  0100               	movlb	0	; () banked
 22715  011B12  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22716  011B14  0100               	movlb	0	; () banked
 22717  011B16  51F2               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 22718  011B18  0D04               	mullw	4
 22719  011B1A  CFF3 F0CB          	movff	prodl,Word_SetPair@pPair
 22720  011B1E  C0F3  F0CC         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 22721  011B22  EC8B  F0AE         	call	_Word_SetPair	;wreg free
 22722                           
 22723                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 22724  011B26  0E08               	movlw	8
 22725  011B28  0100               	movlb	0	; () banked
 22726  011B2A  25F0               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 22727  011B2C  0100               	movlb	0	; () banked
 22728  011B2E  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 22729  011B30  0E00               	movlw	0
 22730  011B32  0100               	movlb	0	; () banked
 22731  011B34  21F1               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22732  011B36  0100               	movlb	0	; () banked
 22733  011B38  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22734  011B3A  0100               	movlb	0	; () banked
 22735  011B3C  51F2               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 22736  011B3E  0D04               	mullw	4
 22737  011B40  28F3               	incf	prodl,w,c
 22738  011B42  0100               	movlb	0	; () banked
 22739  011B44  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 22740  011B46  C0F3  F0CC         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 22741  011B4A  EC8B  F0AE         	call	_Word_SetPair	;wreg free
 22742                           
 22743                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 22744  011B4E  0E08               	movlw	8
 22745  011B50  0100               	movlb	0	; () banked
 22746  011B52  25F0               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 22747  011B54  0100               	movlb	0	; () banked
 22748  011B56  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 22749  011B58  0E00               	movlw	0
 22750  011B5A  0100               	movlb	0	; () banked
 22751  011B5C  21F1               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22752  011B5E  0100               	movlb	0	; () banked
 22753  011B60  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22754  011B62  0100               	movlb	0	; () banked
 22755  011B64  51F2               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 22756  011B66  0D04               	mullw	4
 22757  011B68  50F3               	movf	prodl,w,c
 22758  011B6A  0F02               	addlw	2
 22759  011B6C  0100               	movlb	0	; () banked
 22760  011B6E  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 22761  011B70  C0F3  F0CC         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 22762  011B74  EC8B  F0AE         	call	_Word_SetPair	;wreg free
 22763                           
 22764                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 22765  011B78  0E08               	movlw	8
 22766  011B7A  0100               	movlb	0	; () banked
 22767  011B7C  25F0               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 22768  011B7E  0100               	movlb	0	; () banked
 22769  011B80  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 22770  011B82  0E00               	movlw	0
 22771  011B84  0100               	movlb	0	; () banked
 22772  011B86  21F1               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22773  011B88  0100               	movlb	0	; () banked
 22774  011B8A  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22775  011B8C  0100               	movlb	0	; () banked
 22776  011B8E  51F2               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 22777  011B90  0D04               	mullw	4
 22778  011B92  50F3               	movf	prodl,w,c
 22779  011B94  0F03               	addlw	3
 22780  011B96  0100               	movlb	0	; () banked
 22781  011B98  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 22782  011B9A  C0F3  F0CC         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 22783  011B9E  EC8B  F0AE         	call	_Word_SetPair	;wreg free
 22784  011BA2  0012               	return	
 22785  011BA4                     __end_of_Port_SetQuadType:
 22786                           	opt stack 0
 22787                           tosu	equ	0xFFF
 22788                           tosh	equ	0xFFE
 22789                           tosl	equ	0xFFD
 22790                           pclath	equ	0xFFA
 22791                           tblptru	equ	0xFF8
 22792                           tblptrh	equ	0xFF7
 22793                           tblptrl	equ	0xFF6
 22794                           tablat	equ	0xFF5
 22795                           prodh	equ	0xFF4
 22796                           prodl	equ	0xFF3
 22797                           intcon	equ	0xFF2
 22798                           postinc0	equ	0xFEE
 22799                           wreg	equ	0xFE8
 22800                           indf1	equ	0xFE7
 22801                           postdec1	equ	0xFE5
 22802                           fsr1h	equ	0xFE2
 22803                           fsr1l	equ	0xFE1
 22804                           indf2	equ	0xFDF
 22805                           postinc2	equ	0xFDE
 22806                           postdec2	equ	0xFDD
 22807                           plusw2	equ	0xFDB
 22808                           fsr2h	equ	0xFDA
 22809                           fsr2l	equ	0xFD9
 22810                           status	equ	0xFD8
 22811                           
 22812 ;; *************** function _Word_SetPair *****************
 22813 ;; Defined at:
 22814 ;;		line 149 in file "Library/Types.c"
 22815 ;; Parameters:    Size  Location     Type
 22816 ;;  pInput          2   15[BANK0 ] PTR struct Word
 22817 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 22818 ;;		 -> PortD(10), PortC(10), PortF(10), 
 22819 ;;  pPair           1   17[BANK0 ] unsigned char 
 22820 ;;  pValue          1   18[BANK0 ] unsigned char 
 22821 ;; Auto vars:     Size  Location     Type
 22822 ;;		None
 22823 ;; Return value:  Size  Location     Type
 22824 ;;                  1    wreg      void 
 22825 ;; Registers used:
 22826 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22827 ;; Tracked objects:
 22828 ;;		On entry : 0/0
 22829 ;;		On exit  : 0/0
 22830 ;;		Unchanged: 0/0
 22831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22832 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22835 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22836 ;;Total ram usage:        4 bytes
 22837 ;; Hardware stack levels used:    1
 22838 ;; Hardware stack levels required when called:    9
 22839 ;; This function calls:
 22840 ;;		_Byte_SetPair
 22841 ;; This function is called by:
 22842 ;;		_Port_SetPinType
 22843 ;;		_Port_SetQuadType
 22844 ;;		_Port_SetType
 22845 ;;		_Port_SetPairType
 22846 ;;		_PortProperty_Init
 22847 ;; This function uses a non-reentrant model
 22848 ;;
 22849                           
 22850                           	psect	text109
 22851  015D16                     __ptext109:
 22852                           	opt stack 0
 22853  015D16                     _Word_SetPair:
 22854                           	opt stack 18
 22855                           
 22856                           ;Types.c: 151: if (pPair >= 4)
 22857                           
 22858                           ;incstack = 0
 22859  015D16  0E03               	movlw	3
 22860  015D18  0100               	movlb	0	; () banked
 22861  015D1A  65CB               	cpfsgt	Word_SetPair@pPair& (0+255),b
 22862  015D1C  D014               	goto	l776
 22863                           
 22864                           ; BSR set to: 0
 22865                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 22866  015D1E  0E01               	movlw	1
 22867  015D20  0100               	movlb	0	; () banked
 22868  015D22  25C9               	addwf	Word_SetPair@pInput& (0+255),w,b
 22869  015D24  0100               	movlb	0	; () banked
 22870  015D26  6FC5               	movwf	Byte_SetPair@pInput& (0+255),b
 22871  015D28  0E00               	movlw	0
 22872  015D2A  0100               	movlb	0	; () banked
 22873  015D2C  21CA               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 22874  015D2E  0100               	movlb	0	; () banked
 22875  015D30  6FC6               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 22876  015D32  0100               	movlb	0	; () banked
 22877  015D34  51CB               	movf	Word_SetPair@pPair& (0+255),w,b
 22878  015D36  0FFC               	addlw	252
 22879  015D38  0100               	movlb	0	; () banked
 22880  015D3A  6FC7               	movwf	Byte_SetPair@pPair& (0+255),b
 22881  015D3C  C0CC  F0C8         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 22882  015D40  EC69  F0B1         	call	_Byte_SetPair	;wreg free
 22883  015D44  0012               	return	
 22884  015D46                     l776:
 22885                           
 22886                           ;Types.c: 153: else
 22887                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 22888  015D46  C0C9  F0C5         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 22889  015D4A  C0CA  F0C6         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 22890  015D4E  C0CB  F0C7         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 22891  015D52  C0CC  F0C8         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 22892  015D56  EC69  F0B1         	call	_Byte_SetPair	;wreg free
 22893  015D5A  0012               	return	
 22894  015D5C                     __end_of_Word_SetPair:
 22895                           	opt stack 0
 22896                           tosu	equ	0xFFF
 22897                           tosh	equ	0xFFE
 22898                           tosl	equ	0xFFD
 22899                           pclath	equ	0xFFA
 22900                           tblptru	equ	0xFF8
 22901                           tblptrh	equ	0xFF7
 22902                           tblptrl	equ	0xFF6
 22903                           tablat	equ	0xFF5
 22904                           prodh	equ	0xFF4
 22905                           prodl	equ	0xFF3
 22906                           intcon	equ	0xFF2
 22907                           postinc0	equ	0xFEE
 22908                           wreg	equ	0xFE8
 22909                           indf1	equ	0xFE7
 22910                           postdec1	equ	0xFE5
 22911                           fsr1h	equ	0xFE2
 22912                           fsr1l	equ	0xFE1
 22913                           indf2	equ	0xFDF
 22914                           postinc2	equ	0xFDE
 22915                           postdec2	equ	0xFDD
 22916                           plusw2	equ	0xFDB
 22917                           fsr2h	equ	0xFDA
 22918                           fsr2l	equ	0xFD9
 22919                           status	equ	0xFD8
 22920                           
 22921 ;; *************** function _Byte_SetPair *****************
 22922 ;; Defined at:
 22923 ;;		line 83 in file "Library/Types.c"
 22924 ;; Parameters:    Size  Location     Type
 22925 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 22926 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 22927 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 22928 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 22929 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 22930 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 22931 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 22932 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 22933 ;;		 -> NULL(0), 
 22934 ;;  pPair           1   13[BANK0 ] unsigned char 
 22935 ;;  pValue          1   14[BANK0 ] unsigned char 
 22936 ;; Auto vars:     Size  Location     Type
 22937 ;;		None
 22938 ;; Return value:  Size  Location     Type
 22939 ;;                  1    wreg      void 
 22940 ;; Registers used:
 22941 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22942 ;; Tracked objects:
 22943 ;;		On entry : 0/0
 22944 ;;		On exit  : 0/0
 22945 ;;		Unchanged: 0/0
 22946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22947 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22948 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22950 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22951 ;;Total ram usage:        4 bytes
 22952 ;; Hardware stack levels used:    1
 22953 ;; Hardware stack levels required when called:    8
 22954 ;; This function calls:
 22955 ;;		_Byte_SetZone
 22956 ;; This function is called by:
 22957 ;;		_Word_SetPair
 22958 ;;		_Port_SetPairType
 22959 ;;		_Port_SetPair
 22960 ;; This function uses a non-reentrant model
 22961 ;;
 22962                           
 22963                           	psect	text110
 22964  0162D2                     __ptext110:
 22965                           	opt stack 0
 22966  0162D2                     _Byte_SetPair:
 22967                           	opt stack 18
 22968                           
 22969                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 22970                           
 22971                           ;incstack = 0
 22972  0162D2  C0C5  F0BA         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 22973  0162D6  C0C6  F0BB         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 22974  0162DA  0E04               	movlw	4
 22975  0162DC  0100               	movlb	0	; () banked
 22976  0162DE  6FBC               	movwf	Byte_SetZone@pMax& (0+255),b
 22977  0162E0  C0C7  F0BD         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 22978  0162E4  0E02               	movlw	2
 22979  0162E6  0100               	movlb	0	; () banked
 22980  0162E8  6FBE               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 22981  0162EA  C0C8  F0BF         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 22982  0162EE  EC94  F0A1         	call	_Byte_SetZone	;wreg free
 22983  0162F2  0012               	return		;funcret
 22984  0162F4                     __end_of_Byte_SetPair:
 22985                           	opt stack 0
 22986                           tosu	equ	0xFFF
 22987                           tosh	equ	0xFFE
 22988                           tosl	equ	0xFFD
 22989                           pclath	equ	0xFFA
 22990                           tblptru	equ	0xFF8
 22991                           tblptrh	equ	0xFF7
 22992                           tblptrl	equ	0xFF6
 22993                           tablat	equ	0xFF5
 22994                           prodh	equ	0xFF4
 22995                           prodl	equ	0xFF3
 22996                           intcon	equ	0xFF2
 22997                           postinc0	equ	0xFEE
 22998                           wreg	equ	0xFE8
 22999                           indf1	equ	0xFE7
 23000                           postdec1	equ	0xFE5
 23001                           fsr1h	equ	0xFE2
 23002                           fsr1l	equ	0xFE1
 23003                           indf2	equ	0xFDF
 23004                           postinc2	equ	0xFDE
 23005                           postdec2	equ	0xFDD
 23006                           plusw2	equ	0xFDB
 23007                           fsr2h	equ	0xFDA
 23008                           fsr2l	equ	0xFD9
 23009                           status	equ	0xFD8
 23010                           
 23011 ;; *************** function _Port_CheckQuadType *****************
 23012 ;; Defined at:
 23013 ;;		line 126 in file "Library/Port.c"
 23014 ;; Parameters:    Size  Location     Type
 23015 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 23016 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 23017 ;;		 -> PortD(10), PortC(10), PortF(10), 
 23018 ;;  pQuad           1   49[BANK0 ] enum E6776
 23019 ;;  pDrive          1   50[BANK0 ] enum E6469
 23020 ;; Auto vars:     Size  Location     Type
 23021 ;;  Output          1   53[BANK0 ] enum E6475
 23022 ;;  Pair2           1   52[BANK0 ] enum E6760
 23023 ;;  Pair1           1   51[BANK0 ] enum E6760
 23024 ;; Return value:  Size  Location     Type
 23025 ;;                  1    wreg      enum E6475
 23026 ;; Registers used:
 23027 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23028 ;; Tracked objects:
 23029 ;;		On entry : 0/0
 23030 ;;		On exit  : 0/0
 23031 ;;		Unchanged: 0/0
 23032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23033 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23034 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23036 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23037 ;;Total ram usage:        7 bytes
 23038 ;; Hardware stack levels used:    1
 23039 ;; Hardware stack levels required when called:   12
 23040 ;; This function calls:
 23041 ;;		_Port_CheckPairType
 23042 ;; This function is called by:
 23043 ;;		_Port_CheckPortType
 23044 ;;		_Port_SetQuadType
 23045 ;; This function uses a non-reentrant model
 23046 ;;
 23047                           
 23048                           	psect	text111
 23049  01591C                     __ptext111:
 23050                           	opt stack 0
 23051  01591C                     _Port_CheckQuadType:
 23052                           	opt stack 14
 23053                           
 23054                           ;Port.c: 128: ePinError Output = ePinErrorState;
 23055                           
 23056                           ;incstack = 0
 23057  01591C  0E05               	movlw	5
 23058  01591E  0100               	movlb	0	; () banked
 23059  015920  6FEF               	movwf	Port_CheckQuadType@Output& (0+255),b
 23060                           
 23061                           ; BSR set to: 0
 23062                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 23063  015922  0100               	movlb	0	; () banked
 23064  015924  51EB               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 23065  015926  0D02               	mullw	2
 23066  015928  CFF3 F0ED          	movff	prodl,Port_CheckQuadType@Pair1
 23067                           
 23068                           ; BSR set to: 0
 23069                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 23070  01592C  0100               	movlb	0	; () banked
 23071  01592E  51EB               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 23072  015930  0D02               	mullw	2
 23073  015932  28F3               	incf	prodl,w,c
 23074  015934  0100               	movlb	0	; () banked
 23075  015936  6FEE               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 23076                           
 23077                           ; BSR set to: 0
 23078                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 23079  015938  C0E9  F0E0         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 23080  01593C  C0EA  F0E1         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 23081  015940  C0ED  F0E2         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 23082  015944  C0EC  F0E3         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 23083  015948  EC31  F0AB         	call	_Port_CheckPairType	;wreg free
 23084  01594C  0100               	movlb	0	; () banked
 23085  01594E  6FEF               	movwf	Port_CheckQuadType@Output& (0+255),b
 23086  015950  0100               	movlb	0	; () banked
 23087  015952  51EF               	movf	Port_CheckQuadType@Output& (0+255),w,b
 23088  015954  A4D8               	btfss	status,2,c
 23089  015956  D00C               	goto	l393
 23090                           
 23091                           ; BSR set to: 0
 23092                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 23093  015958  C0E9  F0E0         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 23094  01595C  C0EA  F0E1         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 23095  015960  C0EE  F0E2         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 23096  015964  C0EC  F0E3         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 23097  015968  EC31  F0AB         	call	_Port_CheckPairType	;wreg free
 23098  01596C  0100               	movlb	0	; () banked
 23099  01596E  6FEF               	movwf	Port_CheckQuadType@Output& (0+255),b
 23100  015970                     l393:
 23101                           
 23102                           ; BSR set to: 0
 23103                           ;Port.c: 136: return Output;
 23104                           
 23105                           ; BSR set to: 0
 23106  015970  0100               	movlb	0	; () banked
 23107  015972  51EF               	movf	Port_CheckQuadType@Output& (0+255),w,b
 23108  015974  0012               	return	
 23109  015976                     __end_of_Port_CheckQuadType:
 23110                           	opt stack 0
 23111                           tosu	equ	0xFFF
 23112                           tosh	equ	0xFFE
 23113                           tosl	equ	0xFFD
 23114                           pclath	equ	0xFFA
 23115                           tblptru	equ	0xFF8
 23116                           tblptrh	equ	0xFF7
 23117                           tblptrl	equ	0xFF6
 23118                           tablat	equ	0xFF5
 23119                           prodh	equ	0xFF4
 23120                           prodl	equ	0xFF3
 23121                           intcon	equ	0xFF2
 23122                           postinc0	equ	0xFEE
 23123                           wreg	equ	0xFE8
 23124                           indf1	equ	0xFE7
 23125                           postdec1	equ	0xFE5
 23126                           fsr1h	equ	0xFE2
 23127                           fsr1l	equ	0xFE1
 23128                           indf2	equ	0xFDF
 23129                           postinc2	equ	0xFDE
 23130                           postdec2	equ	0xFDD
 23131                           plusw2	equ	0xFDB
 23132                           fsr2h	equ	0xFDA
 23133                           fsr2l	equ	0xFD9
 23134                           status	equ	0xFD8
 23135                           
 23136 ;; *************** function _Port_CheckPairType *****************
 23137 ;; Defined at:
 23138 ;;		line 112 in file "Library/Port.c"
 23139 ;; Parameters:    Size  Location     Type
 23140 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 23141 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 23142 ;;		 -> PortD(10), PortC(10), PortF(10), 
 23143 ;;  pPair           1   40[BANK0 ] enum E6760
 23144 ;;  pDrive          1   41[BANK0 ] enum E6469
 23145 ;; Auto vars:     Size  Location     Type
 23146 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 23147 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 23148 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 23149 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 23150 ;;		 -> PortC(10), PortF(10), NULL(0), 
 23151 ;;  Output          1   44[BANK0 ] enum E6475
 23152 ;;  Pin2            1   43[BANK0 ] enum E6750
 23153 ;;  Pin1            1   42[BANK0 ] enum E6750
 23154 ;; Return value:  Size  Location     Type
 23155 ;;                  1    wreg      enum E6475
 23156 ;; Registers used:
 23157 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23158 ;; Tracked objects:
 23159 ;;		On entry : 0/0
 23160 ;;		On exit  : 0/0
 23161 ;;		Unchanged: 0/0
 23162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23163 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23164 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23166 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23167 ;;Total ram usage:        9 bytes
 23168 ;; Hardware stack levels used:    1
 23169 ;; Hardware stack levels required when called:   11
 23170 ;; This function calls:
 23171 ;;		_PortProperty_Valid
 23172 ;; This function is called by:
 23173 ;;		_Port_CheckQuadType
 23174 ;;		_Port_SetPairType
 23175 ;; This function uses a non-reentrant model
 23176 ;;
 23177                           
 23178                           	psect	text112
 23179  015662                     __ptext112:
 23180                           	opt stack 0
 23181  015662                     _Port_CheckPairType:
 23182                           	opt stack 14
 23183                           
 23184                           ;Port.c: 114: ePinError Output = ePinErrorState;
 23185                           
 23186                           ; BSR set to: 0
 23187                           ;incstack = 0
 23188  015662  0E05               	movlw	5
 23189  015664  0100               	movlb	0	; () banked
 23190  015666  6FE6               	movwf	Port_CheckPairType@Output& (0+255),b
 23191                           
 23192                           ; BSR set to: 0
 23193                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 23194  015668  C0E0  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 23195  01566C  C0E1  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 23196  015670  CFDE F0E7          	movff	postinc2,Port_CheckPairType@Props
 23197  015674  CFDD F0E8          	movff	postdec2,Port_CheckPairType@Props+1
 23198                           
 23199                           ; BSR set to: 0
 23200                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 23201  015678  0100               	movlb	0	; () banked
 23202  01567A  51E2               	movf	Port_CheckPairType@pPair& (0+255),w,b
 23203  01567C  0D02               	mullw	2
 23204  01567E  CFF3 F0E4          	movff	prodl,Port_CheckPairType@Pin1
 23205                           
 23206                           ; BSR set to: 0
 23207                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 23208  015682  0100               	movlb	0	; () banked
 23209  015684  51E2               	movf	Port_CheckPairType@pPair& (0+255),w,b
 23210  015686  0D02               	mullw	2
 23211  015688  28F3               	incf	prodl,w,c
 23212  01568A  0100               	movlb	0	; () banked
 23213  01568C  6FE5               	movwf	Port_CheckPairType@Pin2& (0+255),b
 23214                           
 23215                           ; BSR set to: 0
 23216                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 23217  01568E  C0E7  F0C9         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 23218  015692  C0E8  F0CA         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 23219  015696  C0E3  F0CB         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 23220  01569A  C0E4  F0CC         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 23221  01569E  EC49  F0A8         	call	_PortProperty_Valid	;wreg free
 23222  0156A2  0100               	movlb	0	; () banked
 23223  0156A4  6FE6               	movwf	Port_CheckPairType@Output& (0+255),b
 23224  0156A6  0100               	movlb	0	; () banked
 23225  0156A8  51E6               	movf	Port_CheckPairType@Output& (0+255),w,b
 23226  0156AA  A4D8               	btfss	status,2,c
 23227  0156AC  D00C               	goto	l389
 23228                           
 23229                           ; BSR set to: 0
 23230                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 23231  0156AE  C0E7  F0C9         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 23232  0156B2  C0E8  F0CA         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 23233  0156B6  C0E3  F0CB         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 23234  0156BA  C0E5  F0CC         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 23235  0156BE  EC49  F0A8         	call	_PortProperty_Valid	;wreg free
 23236  0156C2  0100               	movlb	0	; () banked
 23237  0156C4  6FE6               	movwf	Port_CheckPairType@Output& (0+255),b
 23238  0156C6                     l389:
 23239                           
 23240                           ; BSR set to: 0
 23241                           ;Port.c: 124: return Output;
 23242                           
 23243                           ; BSR set to: 0
 23244  0156C6  0100               	movlb	0	; () banked
 23245  0156C8  51E6               	movf	Port_CheckPairType@Output& (0+255),w,b
 23246  0156CA  0012               	return	
 23247  0156CC                     __end_of_Port_CheckPairType:
 23248                           	opt stack 0
 23249                           tosu	equ	0xFFF
 23250                           tosh	equ	0xFFE
 23251                           tosl	equ	0xFFD
 23252                           pclath	equ	0xFFA
 23253                           tblptru	equ	0xFF8
 23254                           tblptrh	equ	0xFF7
 23255                           tblptrl	equ	0xFF6
 23256                           tablat	equ	0xFF5
 23257                           prodh	equ	0xFF4
 23258                           prodl	equ	0xFF3
 23259                           intcon	equ	0xFF2
 23260                           postinc0	equ	0xFEE
 23261                           wreg	equ	0xFE8
 23262                           indf1	equ	0xFE7
 23263                           postdec1	equ	0xFE5
 23264                           fsr1h	equ	0xFE2
 23265                           fsr1l	equ	0xFE1
 23266                           indf2	equ	0xFDF
 23267                           postinc2	equ	0xFDE
 23268                           postdec2	equ	0xFDD
 23269                           plusw2	equ	0xFDB
 23270                           fsr2h	equ	0xFDA
 23271                           fsr2l	equ	0xFD9
 23272                           status	equ	0xFD8
 23273                           
 23274 ;; *************** function _PortProperty_Valid *****************
 23275 ;; Defined at:
 23276 ;;		line 220 in file "Library/Types.c"
 23277 ;; Parameters:    Size  Location     Type
 23278 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 23279 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 23280 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 23281 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 23282 ;;		 -> PortC(10), PortF(10), NULL(0), 
 23283 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 23284 ;;  pPin            1   18[BANK0 ] unsigned char 
 23285 ;; Auto vars:     Size  Location     Type
 23286 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 23287 ;;  Pair            1   37[BANK0 ] enum E6469
 23288 ;; Return value:  Size  Location     Type
 23289 ;;                  1    wreg      enum E6475
 23290 ;; Registers used:
 23291 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23292 ;; Tracked objects:
 23293 ;;		On entry : 0/0
 23294 ;;		On exit  : 0/0
 23295 ;;		Unchanged: 0/0
 23296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23297 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23298 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23299 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23300 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23301 ;;Total ram usage:       23 bytes
 23302 ;; Hardware stack levels used:    1
 23303 ;; Hardware stack levels required when called:   10
 23304 ;; This function calls:
 23305 ;;		_Word_GetPair
 23306 ;; This function is called by:
 23307 ;;		_Port_CheckPairType
 23308 ;;		_Port_SetPinType
 23309 ;; This function uses a non-reentrant model
 23310 ;;
 23311                           
 23312                           	psect	text113
 23313  015092                     __ptext113:
 23314                           	opt stack 0
 23315  015092                     _PortProperty_Valid:
 23316                           	opt stack 17
 23317                           
 23318                           ;Types.c: 222: ePinDrive Pair;
 23319                           ;Types.c: 223: const ePinError Errors[4][4] =
 23320                           ;Types.c: 224: {
 23321                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 23322                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 23323                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 23324                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 23325                           ;Types.c: 230: };
 23326                           
 23327                           ; BSR set to: 0
 23328                           ;incstack = 0
 23329  015092  0EF5               	movlw	low PortProperty_Valid@F6830
 23330  015094  6EF6               	movwf	tblptrl,c
 23331  015096                     	if	1	;There is more than 1 active tblptr byte
 23332  015096  0EFC               	movlw	high PortProperty_Valid@F6830
 23333  015098  6EF7               	movwf	tblptrh,c
 23334  01509A                     	endif
 23335  01509A                     	if	1	;There are 3 active tblptr bytes
 23336  01509A  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 23337  01509C  6EF8               	movwf	tblptru,c
 23338  01509E                     	endif
 23339  01509E  EE20  F0CF         	lfsr	2,PortProperty_Valid@Errors
 23340  0150A2  0E0F               	movlw	15
 23341  0150A4                     u8680:
 23342  0150A4  0009               	tblrd		*+
 23343  0150A6  CFF5 FFDE          	movff	tablat,postinc2
 23344  0150AA  06E8               	decf	wreg,f,c
 23345  0150AC  E2FB               	bc	u8680
 23346                           
 23347                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 23348  0150AE  C0C9  F0C6         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 23349  0150B2  C0CA  F0C7         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 23350  0150B6  C0CC  F0C8         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 23351  0150BA  ECB1  F0AF         	call	_Word_GetPair	;wreg free
 23352  0150BE  0100               	movlb	0	; () banked
 23353  0150C0  6FDF               	movwf	PortProperty_Valid@Pair& (0+255),b
 23354                           
 23355                           ; BSR set to: 0
 23356                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 23357  0150C2  0E04               	movlw	4
 23358  0150C4  0100               	movlb	0	; () banked
 23359  0150C6  61CB               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 23360  0150C8  D020               	goto	l819
 23361                           
 23362                           ; BSR set to: 0
 23363  0150CA  0E04               	movlw	4
 23364  0150CC  0100               	movlb	0	; () banked
 23365  0150CE  61DF               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 23366  0150D0  D01C               	goto	l819
 23367                           
 23368                           ; BSR set to: 0
 23369                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 23370  0150D2  0100               	movlb	0	; () banked
 23371  0150D4  51CB               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 23372  0150D6  0D04               	mullw	4
 23373  0150D8  0ECF               	movlw	low PortProperty_Valid@Errors
 23374  0150DA  0100               	movlb	0	; () banked
 23375  0150DC  6FCD               	movwf	??_PortProperty_Valid& (0+255),b
 23376  0150DE  0E00               	movlw	high PortProperty_Valid@Errors
 23377  0150E0  0100               	movlb	0	; () banked
 23378  0150E2  6FCE               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 23379  0150E4  50F3               	movf	prodl,w,c
 23380  0150E6  0100               	movlb	0	; () banked
 23381  0150E8  27CD               	addwf	??_PortProperty_Valid& (0+255),f,b
 23382  0150EA  50F4               	movf	prodh,w,c
 23383  0150EC  0100               	movlb	0	; () banked
 23384  0150EE  23CE               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 23385  0150F0  0100               	movlb	0	; () banked
 23386  0150F2  51DF               	movf	PortProperty_Valid@Pair& (0+255),w,b
 23387  0150F4  0D01               	mullw	1
 23388  0150F6  50F3               	movf	prodl,w,c
 23389  0150F8  0100               	movlb	0	; () banked
 23390  0150FA  25CD               	addwf	??_PortProperty_Valid& (0+255),w,b
 23391  0150FC  6ED9               	movwf	fsr2l,c
 23392  0150FE  50F4               	movf	prodh,w,c
 23393  015100  0100               	movlb	0	; () banked
 23394  015102  21CE               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 23395  015104  6EDA               	movwf	fsr2h,c
 23396  015106  50DF               	movf	indf2,w,c
 23397                           
 23398                           ; BSR set to: 0
 23399  015108  0012               	return	
 23400  01510A                     l819:
 23401                           
 23402                           ; BSR set to: 0
 23403                           ;Types.c: 237: return ePinErrorState;
 23404                           
 23405                           ; BSR set to: 0
 23406  01510A  0E05               	movlw	5
 23407  01510C  0012               	return	
 23408  01510E                     __end_of_PortProperty_Valid:
 23409                           	opt stack 0
 23410                           tosu	equ	0xFFF
 23411                           tosh	equ	0xFFE
 23412                           tosl	equ	0xFFD
 23413                           pclath	equ	0xFFA
 23414                           tblptru	equ	0xFF8
 23415                           tblptrh	equ	0xFF7
 23416                           tblptrl	equ	0xFF6
 23417                           tablat	equ	0xFF5
 23418                           prodh	equ	0xFF4
 23419                           prodl	equ	0xFF3
 23420                           intcon	equ	0xFF2
 23421                           postinc0	equ	0xFEE
 23422                           wreg	equ	0xFE8
 23423                           indf1	equ	0xFE7
 23424                           postdec1	equ	0xFE5
 23425                           fsr1h	equ	0xFE2
 23426                           fsr1l	equ	0xFE1
 23427                           indf2	equ	0xFDF
 23428                           postinc2	equ	0xFDE
 23429                           postdec2	equ	0xFDD
 23430                           plusw2	equ	0xFDB
 23431                           fsr2h	equ	0xFDA
 23432                           fsr2l	equ	0xFD9
 23433                           status	equ	0xFD8
 23434                           
 23435 ;; *************** function _Byte_SetQuad *****************
 23436 ;; Defined at:
 23437 ;;		line 101 in file "Library/Types.c"
 23438 ;; Parameters:    Size  Location     Type
 23439 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 23440 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 23441 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 23442 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 23443 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 23444 ;;		 -> NULL(0), 
 23445 ;;  pQuad           1   13[BANK0 ] unsigned char 
 23446 ;;  pValue          1   14[BANK0 ] unsigned char 
 23447 ;; Auto vars:     Size  Location     Type
 23448 ;;		None
 23449 ;; Return value:  Size  Location     Type
 23450 ;;                  1    wreg      void 
 23451 ;; Registers used:
 23452 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23453 ;; Tracked objects:
 23454 ;;		On entry : 0/0
 23455 ;;		On exit  : 0/0
 23456 ;;		Unchanged: 0/0
 23457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23458 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23461 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23462 ;;Total ram usage:        4 bytes
 23463 ;; Hardware stack levels used:    1
 23464 ;; Hardware stack levels required when called:    8
 23465 ;; This function calls:
 23466 ;;		_Byte_SetZone
 23467 ;; This function is called by:
 23468 ;;		_Port_SetQuadType
 23469 ;;		_SPI_Init
 23470 ;;		_SPI_MinSpeed
 23471 ;;		_SPI_MaxSpeed
 23472 ;;		_Port_SetQuad
 23473 ;;		_Word_SetQuad
 23474 ;;		_I2C_Init
 23475 ;; This function uses a non-reentrant model
 23476 ;;
 23477                           
 23478                           	psect	text114
 23479  0162F4                     __ptext114:
 23480                           	opt stack 0
 23481  0162F4                     _Byte_SetQuad:
 23482                           	opt stack 19
 23483                           
 23484                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 23485                           
 23486                           ; BSR set to: 0
 23487                           ;incstack = 0
 23488  0162F4  C0C5  F0BA         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 23489  0162F8  C0C6  F0BB         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 23490  0162FC  0E02               	movlw	2
 23491  0162FE  0100               	movlb	0	; () banked
 23492  016300  6FBC               	movwf	Byte_SetZone@pMax& (0+255),b
 23493  016302  C0C7  F0BD         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 23494  016306  0E04               	movlw	4
 23495  016308  0100               	movlb	0	; () banked
 23496  01630A  6FBE               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 23497  01630C  C0C8  F0BF         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 23498  016310  EC94  F0A1         	call	_Byte_SetZone	;wreg free
 23499  016314  0012               	return		;funcret
 23500  016316                     __end_of_Byte_SetQuad:
 23501                           	opt stack 0
 23502                           tosu	equ	0xFFF
 23503                           tosh	equ	0xFFE
 23504                           tosl	equ	0xFFD
 23505                           pclath	equ	0xFFA
 23506                           tblptru	equ	0xFF8
 23507                           tblptrh	equ	0xFF7
 23508                           tblptrl	equ	0xFF6
 23509                           tablat	equ	0xFF5
 23510                           prodh	equ	0xFF4
 23511                           prodl	equ	0xFF3
 23512                           intcon	equ	0xFF2
 23513                           postinc0	equ	0xFEE
 23514                           wreg	equ	0xFE8
 23515                           indf1	equ	0xFE7
 23516                           postdec1	equ	0xFE5
 23517                           fsr1h	equ	0xFE2
 23518                           fsr1l	equ	0xFE1
 23519                           indf2	equ	0xFDF
 23520                           postinc2	equ	0xFDE
 23521                           postdec2	equ	0xFDD
 23522                           plusw2	equ	0xFDB
 23523                           fsr2h	equ	0xFDA
 23524                           fsr2l	equ	0xFD9
 23525                           status	equ	0xFD8
 23526                           
 23527 ;; *************** function _Byte_SetZone *****************
 23528 ;; Defined at:
 23529 ;;		line 47 in file "Library/Types.c"
 23530 ;; Parameters:    Size  Location     Type
 23531 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 23532 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 23533 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 23534 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 23535 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 23536 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 23537 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 23538 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 23539 ;;		 -> PortC(10), PortF(10), NULL(0), 
 23540 ;;  pMax            1    2[BANK0 ] unsigned char 
 23541 ;;  pChunk          1    3[BANK0 ] unsigned char 
 23542 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 23543 ;;  pValue          1    5[BANK0 ] unsigned char 
 23544 ;; Auto vars:     Size  Location     Type
 23545 ;;  MASK            1   10[BANK0 ] unsigned char 
 23546 ;;  Offset          1    9[BANK0 ] unsigned char 
 23547 ;; Return value:  Size  Location     Type
 23548 ;;                  1    wreg      void 
 23549 ;; Registers used:
 23550 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 23551 ;; Tracked objects:
 23552 ;;		On entry : 0/0
 23553 ;;		On exit  : 0/0
 23554 ;;		Unchanged: 0/0
 23555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23556 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23557 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23558 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23559 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23560 ;;Total ram usage:       11 bytes
 23561 ;; Hardware stack levels used:    1
 23562 ;; Hardware stack levels required when called:    7
 23563 ;; This function calls:
 23564 ;;		Nothing
 23565 ;; This function is called by:
 23566 ;;		_Byte_SetPair
 23567 ;;		_Byte_SetQuad
 23568 ;;		_Byte_SetTriple
 23569 ;; This function uses a non-reentrant model
 23570 ;;
 23571                           
 23572                           	psect	text115
 23573  014328                     __ptext115:
 23574                           	opt stack 0
 23575  014328                     _Byte_SetZone:
 23576                           	opt stack 18
 23577                           
 23578                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 23579                           
 23580                           ;incstack = 0
 23581  014328  0100               	movlb	0	; () banked
 23582  01432A  51BE               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 23583  01432C  0D01               	mullw	1
 23584  01432E  0E0F               	movlw	low _MASKS
 23585  014330  24F3               	addwf	prodl,w,c
 23586  014332  6EF6               	movwf	tblptrl,c
 23587  014334  0EFD               	movlw	high _MASKS
 23588  014336  20F4               	addwfc	prodh,w,c
 23589  014338  6EF7               	movwf	tblptrh,c
 23590  01433A                     	if	1	;There are 3 active tblptr bytes
 23591  01433A  6AF8               	clrf	tblptru,c
 23592  01433C  0E00               	movlw	low (__mediumconst shr (0+16))
 23593  01433E  22F8               	addwfc	tblptru,f,c
 23594  014340                     	endif
 23595  014340  0008               	tblrd		*
 23596  014342  CFF5 F0C4          	movff	tablat,Byte_SetZone@MASK
 23597                           
 23598                           ; BSR set to: 0
 23599                           ;Types.c: 50: UINT8 Offset = 0;
 23600  014346  0E00               	movlw	0
 23601  014348  0100               	movlb	0	; () banked
 23602  01434A  6FC3               	movwf	Byte_SetZone@Offset& (0+255),b
 23603                           
 23604                           ;Types.c: 52: while (pChunk >= pMax)
 23605  01434C  D006               	goto	l726
 23606  01434E                     
 23607                           ; BSR set to: 0
 23608                           ;Types.c: 53: {
 23609                           ;Types.c: 54: pChunk -= pMax;
 23610                           
 23611                           ; BSR set to: 0
 23612  01434E  0100               	movlb	0	; () banked
 23613  014350  51BC               	movf	Byte_SetZone@pMax& (0+255),w,b
 23614  014352  0100               	movlb	0	; () banked
 23615  014354  5FBD               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 23616                           
 23617                           ; BSR set to: 0
 23618                           ;Types.c: 55: Offset += 1;
 23619  014356  0100               	movlb	0	; () banked
 23620  014358  2BC3               	incf	Byte_SetZone@Offset& (0+255),f,b
 23621  01435A                     l726:
 23622                           
 23623                           ; BSR set to: 0
 23624                           
 23625                           ; BSR set to: 0
 23626  01435A  0100               	movlb	0	; () banked
 23627  01435C  51BC               	movf	Byte_SetZone@pMax& (0+255),w,b
 23628  01435E  0100               	movlb	0	; () banked
 23629  014360  5DBD               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 23630  014362  B0D8               	btfsc	status,0,c
 23631  014364  D7F4               	goto	l727
 23632                           
 23633                           ; BSR set to: 0
 23634                           ;Types.c: 56: }
 23635                           ;Types.c: 57: pChunk *= pChunkSize;
 23636                           
 23637                           ; BSR set to: 0
 23638  014366  0100               	movlb	0	; () banked
 23639  014368  51BE               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 23640  01436A  0100               	movlb	0	; () banked
 23641  01436C  03BD               	mulwf	Byte_SetZone@pChunk& (0+255),b
 23642  01436E  50F3               	movf	prodl,w,c
 23643  014370  6FBD               	movwf	Byte_SetZone@pChunk& (0+255),b
 23644                           
 23645                           ; BSR set to: 0
 23646                           ;Types.c: 58: pChunk += Offset;
 23647  014372  0100               	movlb	0	; () banked
 23648  014374  51C3               	movf	Byte_SetZone@Offset& (0+255),w,b
 23649  014376  0100               	movlb	0	; () banked
 23650  014378  27BD               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 23651                           
 23652                           ; BSR set to: 0
 23653                           ;Types.c: 60: pValue &= MASK;
 23654  01437A  0100               	movlb	0	; () banked
 23655  01437C  51C4               	movf	Byte_SetZone@MASK& (0+255),w,b
 23656  01437E  0100               	movlb	0	; () banked
 23657  014380  17BF               	andwf	Byte_SetZone@pValue& (0+255),f,b
 23658                           
 23659                           ; BSR set to: 0
 23660                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 23661  014382  C0BD  F0C0         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 23662  014386  C0C4  F0C1         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 23663  01438A  0100               	movlb	0	; () banked
 23664  01438C  2BC0               	incf	??_Byte_SetZone& (0+255),f,b
 23665  01438E  D003               	goto	u8734
 23666  014390                     u8735:
 23667  014390  0100               	movlb	0	; () banked
 23668  014392  90D8               	bcf	status,0,c
 23669  014394  37C1               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 23670  014396                     u8734:
 23671  014396  0100               	movlb	0	; () banked
 23672  014398  2FC0               	decfsz	??_Byte_SetZone& (0+255),f,b
 23673  01439A  D7FA               	goto	u8735
 23674  01439C  0100               	movlb	0	; () banked
 23675  01439E  51C1               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 23676  0143A0  0AFF               	xorlw	255
 23677  0143A2  0100               	movlb	0	; () banked
 23678  0143A4  6FC2               	movwf	(??_Byte_SetZone+2)& (0+255),b
 23679  0143A6  C0BA  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 23680  0143AA  C0BB  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 23681  0143AE  0100               	movlb	0	; () banked
 23682  0143B0  51C2               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 23683  0143B2  16DF               	andwf	indf2,f,c
 23684                           
 23685                           ; BSR set to: 0
 23686                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 23687  0143B4  C0BD  F0C0         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 23688  0143B8  C0BF  F0C1         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 23689  0143BC  0100               	movlb	0	; () banked
 23690  0143BE  2BC0               	incf	??_Byte_SetZone& (0+255),f,b
 23691  0143C0  D003               	goto	u8744
 23692  0143C2                     u8745:
 23693  0143C2  0100               	movlb	0	; () banked
 23694  0143C4  90D8               	bcf	status,0,c
 23695  0143C6  37C1               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 23696  0143C8                     u8744:
 23697  0143C8  0100               	movlb	0	; () banked
 23698  0143CA  2FC0               	decfsz	??_Byte_SetZone& (0+255),f,b
 23699  0143CC  D7FA               	goto	u8745
 23700  0143CE  C0BA  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 23701  0143D2  C0BB  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 23702  0143D6  0100               	movlb	0	; () banked
 23703  0143D8  51C1               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 23704  0143DA  12DF               	iorwf	indf2,f,c
 23705                           
 23706                           ; BSR set to: 0
 23707  0143DC  0012               	return		;funcret
 23708  0143DE                     __end_of_Byte_SetZone:
 23709                           	opt stack 0
 23710                           tosu	equ	0xFFF
 23711                           tosh	equ	0xFFE
 23712                           tosl	equ	0xFFD
 23713                           pclath	equ	0xFFA
 23714                           tblptru	equ	0xFF8
 23715                           tblptrh	equ	0xFF7
 23716                           tblptrl	equ	0xFF6
 23717                           tablat	equ	0xFF5
 23718                           prodh	equ	0xFF4
 23719                           prodl	equ	0xFF3
 23720                           intcon	equ	0xFF2
 23721                           postinc0	equ	0xFEE
 23722                           wreg	equ	0xFE8
 23723                           indf1	equ	0xFE7
 23724                           postdec1	equ	0xFE5
 23725                           fsr1h	equ	0xFE2
 23726                           fsr1l	equ	0xFE1
 23727                           indf2	equ	0xFDF
 23728                           postinc2	equ	0xFDE
 23729                           postdec2	equ	0xFDD
 23730                           plusw2	equ	0xFDB
 23731                           fsr2h	equ	0xFDA
 23732                           fsr2l	equ	0xFD9
 23733                           status	equ	0xFD8
 23734                           
 23735 ;; *************** function _Console_Init *****************
 23736 ;; Defined at:
 23737 ;;		line 157 in file "Library/Console.c"
 23738 ;; Parameters:    Size  Location     Type
 23739 ;;		None
 23740 ;; Auto vars:     Size  Location     Type
 23741 ;;  y               1    3[BANK0 ] unsigned char 
 23742 ;;  x               1    2[BANK0 ] unsigned char 
 23743 ;; Return value:  Size  Location     Type
 23744 ;;                  1    wreg      void 
 23745 ;; Registers used:
 23746 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 23747 ;; Tracked objects:
 23748 ;;		On entry : 0/0
 23749 ;;		On exit  : 0/0
 23750 ;;		Unchanged: 0/0
 23751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23753 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23754 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23755 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23756 ;;Total ram usage:        4 bytes
 23757 ;; Hardware stack levels used:    1
 23758 ;; Hardware stack levels required when called:    7
 23759 ;; This function calls:
 23760 ;;		Nothing
 23761 ;; This function is called by:
 23762 ;;		_init
 23763 ;; This function uses a non-reentrant model
 23764 ;;
 23765                           
 23766                           	psect	text116
 23767  014DF6                     __ptext116:
 23768                           	opt stack 0
 23769  014DF6                     _Console_Init:
 23770                           	opt stack 22
 23771                           
 23772                           ;Console.c: 160: lBufferX = 0;
 23773                           
 23774                           ; BSR set to: 0
 23775                           ;incstack = 0
 23776  014DF6  0E00               	movlw	0
 23777  014DF8  0100               	movlb	0	; () banked
 23778  014DFA  6F91               	movwf	_lBufferX& (0+255),b
 23779                           
 23780                           ;Console.c: 161: lBufferY = 0;
 23781  014DFC  0E00               	movlw	0
 23782  014DFE  0100               	movlb	0	; () banked
 23783  014E00  6F90               	movwf	_lBufferY& (0+255),b
 23784                           
 23785                           ;Console.c: 163: UINT8 x, y;
 23786                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 23787  014E02  0E00               	movlw	0
 23788  014E04  0100               	movlb	0	; () banked
 23789  014E06  6FBC               	movwf	Console_Init@x& (0+255),b
 23790  014E08                     l14355:
 23791                           
 23792                           ; BSR set to: 0
 23793  014E08  0E13               	movlw	19
 23794  014E0A  0100               	movlb	0	; () banked
 23795  014E0C  65BC               	cpfsgt	Console_Init@x& (0+255),b
 23796  014E0E  D001               	goto	l976
 23797  014E10  0012               	return	
 23798  014E12                     l976:
 23799                           
 23800                           ; BSR set to: 0
 23801                           ;Console.c: 165: {
 23802                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 23803                           
 23804                           ; BSR set to: 0
 23805  014E12  0E00               	movlw	0
 23806  014E14  0100               	movlb	0	; () banked
 23807  014E16  6FBD               	movwf	Console_Init@y& (0+255),b
 23808  014E18                     l14361:
 23809                           
 23810                           ; BSR set to: 0
 23811  014E18  0E0E               	movlw	14
 23812  014E1A  0100               	movlb	0	; () banked
 23813  014E1C  65BD               	cpfsgt	Console_Init@y& (0+255),b
 23814  014E1E  D001               	goto	l978
 23815  014E20  D02C               	goto	u11150
 23816  014E22                     l978:
 23817                           
 23818                           ; BSR set to: 0
 23819                           ;Console.c: 167: {
 23820                           ;Console.c: 168: lBuffer[y][x] = '\0';
 23821                           
 23822                           ; BSR set to: 0
 23823  014E22  0100               	movlb	0	; () banked
 23824  014E24  51BD               	movf	Console_Init@y& (0+255),w,b
 23825  014E26  0D14               	mullw	20
 23826  014E28  0EAA               	movlw	low _lBuffer
 23827  014E2A  0100               	movlb	0	; () banked
 23828  014E2C  6FBA               	movwf	??_Console_Init& (0+255),b
 23829  014E2E  0E04               	movlw	high _lBuffer
 23830  014E30  0100               	movlb	0	; () banked
 23831  014E32  6FBB               	movwf	(??_Console_Init+1)& (0+255),b
 23832  014E34  50F3               	movf	prodl,w,c
 23833  014E36  0100               	movlb	0	; () banked
 23834  014E38  27BA               	addwf	??_Console_Init& (0+255),f,b
 23835  014E3A  50F4               	movf	prodh,w,c
 23836  014E3C  0100               	movlb	0	; () banked
 23837  014E3E  23BB               	addwfc	(??_Console_Init+1)& (0+255),f,b
 23838  014E40  0100               	movlb	0	; () banked
 23839  014E42  51BC               	movf	Console_Init@x& (0+255),w,b
 23840  014E44  0D01               	mullw	1
 23841  014E46  50F3               	movf	prodl,w,c
 23842  014E48  0100               	movlb	0	; () banked
 23843  014E4A  25BA               	addwf	??_Console_Init& (0+255),w,b
 23844  014E4C  6ED9               	movwf	fsr2l,c
 23845  014E4E  50F4               	movf	prodh,w,c
 23846  014E50  0100               	movlb	0	; () banked
 23847  014E52  21BB               	addwfc	(??_Console_Init+1)& (0+255),w,b
 23848  014E54  6EDA               	movwf	fsr2h,c
 23849  014E56  0E00               	movlw	0
 23850  014E58  6EDF               	movwf	indf2,c
 23851                           
 23852                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 23853  014E5A  0100               	movlb	0	; () banked
 23854  014E5C  51BD               	movf	Console_Init@y& (0+255),w,b
 23855  014E5E  0D02               	mullw	2
 23856  014E60  0E00               	movlw	low _lCBuffer
 23857  014E62  24F3               	addwf	prodl,w,c
 23858  014E64  6ED9               	movwf	fsr2l,c
 23859  014E66  0E03               	movlw	high _lCBuffer
 23860  014E68  20F4               	addwfc	prodh,w,c
 23861  014E6A  6EDA               	movwf	fsr2h,c
 23862  014E6C  0EFF               	movlw	255
 23863  014E6E  6EDE               	movwf	postinc2,c
 23864  014E70  0EFF               	movlw	255
 23865  014E72  6EDD               	movwf	postdec2,c
 23866                           
 23867                           ; BSR set to: 0
 23868  014E74  0100               	movlb	0	; () banked
 23869  014E76  2BBD               	incf	Console_Init@y& (0+255),f,b
 23870  014E78  D7CF               	goto	l14361
 23871  014E7A                     u11150:
 23872                           
 23873                           ; BSR set to: 0
 23874                           
 23875                           ; BSR set to: 0
 23876  014E7A  0100               	movlb	0	; () banked
 23877  014E7C  2BBC               	incf	Console_Init@x& (0+255),f,b
 23878  014E7E  D7C4               	goto	l14355
 23879  014E80                     __end_of_Console_Init:
 23880                           	opt stack 0
 23881                           tosu	equ	0xFFF
 23882                           tosh	equ	0xFFE
 23883                           tosl	equ	0xFFD
 23884                           pclath	equ	0xFFA
 23885                           tblptru	equ	0xFF8
 23886                           tblptrh	equ	0xFF7
 23887                           tblptrl	equ	0xFF6
 23888                           tablat	equ	0xFF5
 23889                           prodh	equ	0xFF4
 23890                           prodl	equ	0xFF3
 23891                           intcon	equ	0xFF2
 23892                           postinc0	equ	0xFEE
 23893                           wreg	equ	0xFE8
 23894                           indf1	equ	0xFE7
 23895                           postdec1	equ	0xFE5
 23896                           fsr1h	equ	0xFE2
 23897                           fsr1l	equ	0xFE1
 23898                           indf2	equ	0xFDF
 23899                           postinc2	equ	0xFDE
 23900                           postdec2	equ	0xFDD
 23901                           plusw2	equ	0xFDB
 23902                           fsr2h	equ	0xFDA
 23903                           fsr2l	equ	0xFD9
 23904                           status	equ	0xFD8
 23905                           
 23906 ;; *************** function _ADC_Start *****************
 23907 ;; Defined at:
 23908 ;;		line 114 in file "Library/ADC.c"
 23909 ;; Parameters:    Size  Location     Type
 23910 ;;  pInput          2    2[BANK0 ] PTR struct ADC
 23911 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 23912 ;;		 -> NULL(0), 
 23913 ;; Auto vars:     Size  Location     Type
 23914 ;;		None
 23915 ;; Return value:  Size  Location     Type
 23916 ;;                  1    wreg      void 
 23917 ;; Registers used:
 23918 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23919 ;; Tracked objects:
 23920 ;;		On entry : 0/0
 23921 ;;		On exit  : 0/0
 23922 ;;		Unchanged: 0/0
 23923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23924 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23926 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23927 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23928 ;;Total ram usage:        4 bytes
 23929 ;; Hardware stack levels used:    1
 23930 ;; Hardware stack levels required when called:    8
 23931 ;; This function calls:
 23932 ;;		_ADC_Off
 23933 ;;		_ADC_On
 23934 ;;		_ADC_SetChannel
 23935 ;; This function is called by:
 23936 ;;		_init
 23937 ;;		_findClosestWall
 23938 ;;		_mode1
 23939 ;;		_FunctADC
 23940 ;; This function uses a non-reentrant model
 23941 ;;
 23942                           
 23943                           	psect	text117
 23944  014F0A                     __ptext117:
 23945                           	opt stack 0
 23946  014F0A                     _ADC_Start:
 23947                           	opt stack 20
 23948                           
 23949                           ;ADC.c: 117: if ((ADCON0bits.GODONE))
 23950                           
 23951                           ; BSR set to: 0
 23952                           ;incstack = 0
 23953  014F0A  B2C2               	btfsc	4034,1,c	;volatile
 23954  014F0C  0012               	return	
 23955  014F0E                     
 23956                           ;ADC.c: 128: {
 23957                           ;ADC.c: 129: ADC_Off();
 23958                           
 23959                           ;ADC.c: 127: for(;;)
 23960  014F0E  EC3D  F0B3         	call	_ADC_Off	;wreg free
 23961                           
 23962                           ;ADC.c: 130: ADC_SetChannel(pInput->mChannel);
 23963  014F12  C0BC  FFD9         	movff	ADC_Start@pInput,fsr2l
 23964  014F16  C0BD  FFDA         	movff	ADC_Start@pInput+1,fsr2h
 23965  014F1A  50DF               	movf	indf2,w,c
 23966  014F1C  EC2F  F0B2         	call	_ADC_SetChannel
 23967                           
 23968                           ;ADC.c: 131: ADC_On();
 23969  014F20  EC4B  F0B3         	call	_ADC_On	;wreg free
 23970                           
 23971                           ;ADC.c: 134: (ADCON0bits.GO) = 1;
 23972  014F24  82C2               	bsf	4034,1,c	;volatile
 23973  014F26  B2C2               	btfsc	4034,1,c	;volatile
 23974  014F28  D7FE               	goto	l1280
 23975                           
 23976                           ;ADC.c: 138: pInput->mValue = (ADRESH << 8) | ADRESL;
 23977  014F2A  50C3               	movf	4035,w,c	;volatile
 23978  014F2C  CFC4 F0BE          	movff	4036,??_ADC_Start	;volatile
 23979  014F30  0100               	movlb	0	; () banked
 23980  014F32  6BBF               	clrf	(??_ADC_Start+1)& (0+255),b
 23981  014F34  C0BE  F0BF         	movff	??_ADC_Start,??_ADC_Start+1
 23982  014F38  0100               	movlb	0	; () banked
 23983  014F3A  6BBE               	clrf	??_ADC_Start& (0+255),b
 23984  014F3C  0100               	movlb	0	; () banked
 23985  014F3E  13BE               	iorwf	??_ADC_Start& (0+255),f,b
 23986  014F40  0E00               	movlw	0
 23987  014F42  13BF               	iorwf	(??_ADC_Start+1)& (0+255),f,b
 23988  014F44  0100               	movlb	0	; () banked
 23989  014F46  EE20 F001          	lfsr	2,1
 23990  014F4A  51BC               	movf	ADC_Start@pInput& (0+255),w,b
 23991  014F4C  26D9               	addwf	fsr2l,f,c
 23992  014F4E  51BD               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 23993  014F50  22DA               	addwfc	fsr2h,f,c
 23994  014F52  C0BE  FFDE         	movff	??_ADC_Start,postinc2
 23995  014F56  C0BF  FFDD         	movff	??_ADC_Start+1,postdec2
 23996                           
 23997                           ;ADC.c: 141: if (pInput->mNext == 0)
 23998  014F5A  0100               	movlb	0	; () banked
 23999  014F5C  EE20 F003          	lfsr	2,3
 24000  014F60  51BC               	movf	ADC_Start@pInput& (0+255),w,b
 24001  014F62  26D9               	addwf	fsr2l,f,c
 24002  014F64  51BD               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 24003  014F66  22DA               	addwfc	fsr2h,f,c
 24004  014F68  50DE               	movf	postinc2,w,c
 24005  014F6A  10DE               	iorwf	postinc2,w,c
 24006  014F6C  B4D8               	btfsc	status,2,c
 24007  014F6E  D00C               	goto	l1283
 24008                           
 24009                           ; BSR set to: 0
 24010                           ;ADC.c: 145: pInput = pInput->mNext;
 24011                           
 24012                           ; BSR set to: 0
 24013                           
 24014                           ; BSR set to: 0
 24015                           ;ADC.c: 142: break;
 24016  014F70  0100               	movlb	0	; () banked
 24017  014F72  EE20 F003          	lfsr	2,3
 24018  014F76  51BC               	movf	ADC_Start@pInput& (0+255),w,b
 24019  014F78  26D9               	addwf	fsr2l,f,c
 24020  014F7A  51BD               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 24021  014F7C  22DA               	addwfc	fsr2h,f,c
 24022  014F7E  CFDE F0BC          	movff	postinc2,ADC_Start@pInput
 24023  014F82  CFDD F0BD          	movff	postdec2,ADC_Start@pInput+1
 24024                           
 24025                           ;ADC.c: 146: }
 24026  014F86  D7C3               	goto	l1276
 24027  014F88                     l1283:
 24028                           
 24029                           ; BSR set to: 0
 24030                           ;ADC.c: 147: ADC_Off();
 24031                           
 24032                           ; BSR set to: 0
 24033  014F88  EC3D  F0B3         	call	_ADC_Off	;wreg free
 24034  014F8C  0012               	return		;funcret
 24035  014F8E                     __end_of_ADC_Start:
 24036                           	opt stack 0
 24037                           tosu	equ	0xFFF
 24038                           tosh	equ	0xFFE
 24039                           tosl	equ	0xFFD
 24040                           pclath	equ	0xFFA
 24041                           tblptru	equ	0xFF8
 24042                           tblptrh	equ	0xFF7
 24043                           tblptrl	equ	0xFF6
 24044                           tablat	equ	0xFF5
 24045                           prodh	equ	0xFF4
 24046                           prodl	equ	0xFF3
 24047                           intcon	equ	0xFF2
 24048                           postinc0	equ	0xFEE
 24049                           wreg	equ	0xFE8
 24050                           indf1	equ	0xFE7
 24051                           postdec1	equ	0xFE5
 24052                           fsr1h	equ	0xFE2
 24053                           fsr1l	equ	0xFE1
 24054                           indf2	equ	0xFDF
 24055                           postinc2	equ	0xFDE
 24056                           postdec2	equ	0xFDD
 24057                           plusw2	equ	0xFDB
 24058                           fsr2h	equ	0xFDA
 24059                           fsr2l	equ	0xFD9
 24060                           status	equ	0xFD8
 24061                           
 24062 ;; *************** function _ADC_Init *****************
 24063 ;; Defined at:
 24064 ;;		line 19 in file "Library/ADC.c"
 24065 ;; Parameters:    Size  Location     Type
 24066 ;;  pInput          2    4[BANK0 ] PTR struct ADC
 24067 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 24068 ;;  pChannel        1    6[BANK0 ] enum E6742
 24069 ;; Auto vars:     Size  Location     Type
 24070 ;;		None
 24071 ;; Return value:  Size  Location     Type
 24072 ;;                  1    wreg      void 
 24073 ;; Registers used:
 24074 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24075 ;; Tracked objects:
 24076 ;;		On entry : 0/0
 24077 ;;		On exit  : 0/0
 24078 ;;		Unchanged: 0/0
 24079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24080 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24083 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24084 ;;Total ram usage:        3 bytes
 24085 ;; Hardware stack levels used:    1
 24086 ;; Hardware stack levels required when called:    9
 24087 ;; This function calls:
 24088 ;;		_ADC_Calibrate
 24089 ;;		_ADC_ClockDivision
 24090 ;;		_ADC_ConversionTime
 24091 ;;		_ADC_SetChannel
 24092 ;;		_ADC_SetupIO
 24093 ;; This function is called by:
 24094 ;;		_init
 24095 ;;		_FunctInitADC
 24096 ;; This function uses a non-reentrant model
 24097 ;;
 24098                           
 24099                           	psect	text118
 24100  01510E                     __ptext118:
 24101                           	opt stack 0
 24102  01510E                     _ADC_Init:
 24103                           	opt stack 20
 24104                           
 24105                           ;ADC.c: 21: if(pInput==(void*)0)
 24106                           
 24107                           ;incstack = 0
 24108  01510E  0100               	movlb	0	; () banked
 24109  015110  51BE               	movf	ADC_Init@pInput& (0+255),w,b
 24110  015112  0100               	movlb	0	; () banked
 24111  015114  11BF               	iorwf	(ADC_Init@pInput+1)& (0+255),w,b
 24112  015116  B4D8               	btfsc	status,2,c
 24113  015118  0012               	return	
 24114                           
 24115                           ; BSR set to: 0
 24116                           ;ADC.c: 25: lCurrent = pInput;
 24117                           
 24118                           ; BSR set to: 0
 24119                           
 24120                           ; BSR set to: 0
 24121                           ;ADC.c: 22: return;
 24122  01511A  C0BE  F083         	movff	ADC_Init@pInput,_lCurrent
 24123  01511E  C0BF  F084         	movff	ADC_Init@pInput+1,_lCurrent+1
 24124                           
 24125                           ; BSR set to: 0
 24126                           ;ADC.c: 27: pInput->mChannel = pChannel;
 24127  015122  C0BE  FFD9         	movff	ADC_Init@pInput,fsr2l
 24128  015126  C0BF  FFDA         	movff	ADC_Init@pInput+1,fsr2h
 24129  01512A  C0C0  FFDF         	movff	ADC_Init@pChannel,indf2
 24130                           
 24131                           ;ADC.c: 28: pInput->mNext = (ADCPtr)0;
 24132  01512E  0100               	movlb	0	; () banked
 24133  015130  EE20 F003          	lfsr	2,3
 24134  015134  51BE               	movf	ADC_Init@pInput& (0+255),w,b
 24135  015136  26D9               	addwf	fsr2l,f,c
 24136  015138  51BF               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 24137  01513A  22DA               	addwfc	fsr2h,f,c
 24138  01513C  0E00               	movlw	0
 24139  01513E  6EDE               	movwf	postinc2,c
 24140  015140  0E00               	movlw	0
 24141  015142  6EDD               	movwf	postdec2,c
 24142                           
 24143                           ;ADC.c: 29: pInput->mValue = 0;
 24144  015144  0100               	movlb	0	; () banked
 24145  015146  EE20 F001          	lfsr	2,1
 24146  01514A  51BE               	movf	ADC_Init@pInput& (0+255),w,b
 24147  01514C  26D9               	addwf	fsr2l,f,c
 24148  01514E  51BF               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 24149  015150  22DA               	addwfc	fsr2h,f,c
 24150  015152  0E00               	movlw	0
 24151  015154  6EDE               	movwf	postinc2,c
 24152  015156  0E00               	movlw	0
 24153  015158  6EDD               	movwf	postdec2,c
 24154                           
 24155                           ; BSR set to: 0
 24156                           ;ADC.c: 32: ADC_SetChannel(pChannel);
 24157  01515A  0100               	movlb	0	; () banked
 24158  01515C  51C0               	movf	ADC_Init@pChannel& (0+255),w,b
 24159  01515E  EC2F  F0B2         	call	_ADC_SetChannel
 24160                           
 24161                           ;ADC.c: 35: ADCON0bits.VCFG1 = 0;
 24162  015162  9EC2               	bcf	4034,7,c	;volatile
 24163                           
 24164                           ;ADC.c: 36: ADCON0bits.VCFG0 = 0;
 24165  015164  9CC2               	bcf	4034,6,c	;volatile
 24166                           
 24167                           ;ADC.c: 39: ADCON1bits.ADFM = 1;
 24168  015166  8EC1               	bsf	4033,7,c	;volatile
 24169                           
 24170                           ;ADC.c: 40: ADCON1bits.ADCAL = 1;
 24171  015168  8CC1               	bsf	4033,6,c	;volatile
 24172                           
 24173                           ;ADC.c: 43: ADC_ConversionTime(12);
 24174  01516A  0E0C               	movlw	12
 24175  01516C  EC20  F0AE         	call	_ADC_ConversionTime
 24176                           
 24177                           ;ADC.c: 47: ADC_ClockDivision(16);
 24178  015170  0E10               	movlw	16
 24179  015172  EC40  F0A7         	call	_ADC_ClockDivision
 24180                           
 24181                           ;ADC.c: 50: ADC_SetupIO(pChannel);
 24182  015176  0100               	movlb	0	; () banked
 24183  015178  51C0               	movf	ADC_Init@pChannel& (0+255),w,b
 24184  01517A  EC78  F0B0         	call	_ADC_SetupIO
 24185                           
 24186                           ;ADC.c: 58: ADC_Initialised = 1;
 24187  01517E  0E01               	movlw	1
 24188  015180  6E3C               	movwf	_ADC_Initialised,c
 24189                           
 24190                           ;ADC.c: 61: ADC_Calibrate();
 24191  015182  ECBF  F0B2         	call	_ADC_Calibrate	;wreg free
 24192  015186  0012               	return		;funcret
 24193  015188                     __end_of_ADC_Init:
 24194                           	opt stack 0
 24195                           tosu	equ	0xFFF
 24196                           tosh	equ	0xFFE
 24197                           tosl	equ	0xFFD
 24198                           pclath	equ	0xFFA
 24199                           tblptru	equ	0xFF8
 24200                           tblptrh	equ	0xFF7
 24201                           tblptrl	equ	0xFF6
 24202                           tablat	equ	0xFF5
 24203                           prodh	equ	0xFF4
 24204                           prodl	equ	0xFF3
 24205                           intcon	equ	0xFF2
 24206                           postinc0	equ	0xFEE
 24207                           wreg	equ	0xFE8
 24208                           indf1	equ	0xFE7
 24209                           postdec1	equ	0xFE5
 24210                           fsr1h	equ	0xFE2
 24211                           fsr1l	equ	0xFE1
 24212                           indf2	equ	0xFDF
 24213                           postinc2	equ	0xFDE
 24214                           postdec2	equ	0xFDD
 24215                           plusw2	equ	0xFDB
 24216                           fsr2h	equ	0xFDA
 24217                           fsr2l	equ	0xFD9
 24218                           status	equ	0xFD8
 24219                           
 24220 ;; *************** function _ADC_SetupIO *****************
 24221 ;; Defined at:
 24222 ;;		line 150 in file "Library/ADC.c"
 24223 ;; Parameters:    Size  Location     Type
 24224 ;;  pChannel        1    wreg     enum E6742
 24225 ;; Auto vars:     Size  Location     Type
 24226 ;;  pChannel        1    2[BANK0 ] enum E6742
 24227 ;;  MASK            1    3[BANK0 ] unsigned char 
 24228 ;; Return value:  Size  Location     Type
 24229 ;;                  1    wreg      void 
 24230 ;; Registers used:
 24231 ;;		wreg, status,2, status,0
 24232 ;; Tracked objects:
 24233 ;;		On entry : 0/0
 24234 ;;		On exit  : 0/0
 24235 ;;		Unchanged: 0/0
 24236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24238 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24239 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24240 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24241 ;;Total ram usage:        4 bytes
 24242 ;; Hardware stack levels used:    1
 24243 ;; Hardware stack levels required when called:    7
 24244 ;; This function calls:
 24245 ;;		Nothing
 24246 ;; This function is called by:
 24247 ;;		_ADC_Init
 24248 ;; This function uses a non-reentrant model
 24249 ;;
 24250                           
 24251                           	psect	text119
 24252  0160F0                     __ptext119:
 24253                           	opt stack 0
 24254  0160F0                     _ADC_SetupIO:
 24255                           	opt stack 21
 24256                           
 24257                           ;incstack = 0
 24258                           ;ADC_SetupIO@pChannel stored from wreg
 24259  0160F0  0100               	movlb	0	; () banked
 24260  0160F2  6FBC               	movwf	ADC_SetupIO@pChannel& (0+255),b
 24261                           
 24262                           ;ADC.c: 152: UINT8 MASK = ~(1 << pChannel);
 24263  0160F4  C0BC  F0BA         	movff	ADC_SetupIO@pChannel,??_ADC_SetupIO
 24264  0160F8  0E01               	movlw	1
 24265  0160FA  0100               	movlb	0	; () banked
 24266  0160FC  6FBB               	movwf	(??_ADC_SetupIO+1)& (0+255),b
 24267  0160FE  0100               	movlb	0	; () banked
 24268  016100  2BBA               	incf	??_ADC_SetupIO& (0+255),f,b
 24269  016102  D003               	goto	u10804
 24270  016104                     u10805:
 24271  016104  0100               	movlb	0	; () banked
 24272  016106  90D8               	bcf	status,0,c
 24273  016108  37BB               	rlcf	(??_ADC_SetupIO+1)& (0+255),f,b
 24274  01610A                     u10804:
 24275  01610A  0100               	movlb	0	; () banked
 24276  01610C  2FBA               	decfsz	??_ADC_SetupIO& (0+255),f,b
 24277  01610E  D7FA               	goto	u10805
 24278  016110  0100               	movlb	0	; () banked
 24279  016112  51BB               	movf	(??_ADC_SetupIO+1)& (0+255),w,b
 24280  016114  0AFF               	xorlw	255
 24281  016116  0100               	movlb	0	; () banked
 24282  016118  6FBD               	movwf	ADC_SetupIO@MASK& (0+255),b
 24283                           
 24284                           ;ADC.c: 153: ANCON0 &= MASK;
 24285  01611A  0100               	movlb	0	; () banked
 24286  01611C  51BD               	movf	ADC_SetupIO@MASK& (0+255),w,b
 24287  01611E  16C1               	andwf	4033,f,c	;volatile
 24288                           
 24289                           ; BSR set to: 0
 24290  016120  0012               	return		;funcret
 24291  016122                     __end_of_ADC_SetupIO:
 24292                           	opt stack 0
 24293                           tosu	equ	0xFFF
 24294                           tosh	equ	0xFFE
 24295                           tosl	equ	0xFFD
 24296                           pclath	equ	0xFFA
 24297                           tblptru	equ	0xFF8
 24298                           tblptrh	equ	0xFF7
 24299                           tblptrl	equ	0xFF6
 24300                           tablat	equ	0xFF5
 24301                           prodh	equ	0xFF4
 24302                           prodl	equ	0xFF3
 24303                           intcon	equ	0xFF2
 24304                           postinc0	equ	0xFEE
 24305                           wreg	equ	0xFE8
 24306                           indf1	equ	0xFE7
 24307                           postdec1	equ	0xFE5
 24308                           fsr1h	equ	0xFE2
 24309                           fsr1l	equ	0xFE1
 24310                           indf2	equ	0xFDF
 24311                           postinc2	equ	0xFDE
 24312                           postdec2	equ	0xFDD
 24313                           plusw2	equ	0xFDB
 24314                           fsr2h	equ	0xFDA
 24315                           fsr2l	equ	0xFD9
 24316                           status	equ	0xFD8
 24317                           
 24318 ;; *************** function _ADC_SetChannel *****************
 24319 ;; Defined at:
 24320 ;;		line 155 in file "Library/ADC.c"
 24321 ;; Parameters:    Size  Location     Type
 24322 ;;  pChannel        1    wreg     enum E6742
 24323 ;; Auto vars:     Size  Location     Type
 24324 ;;  pChannel        1    1[BANK0 ] enum E6742
 24325 ;; Return value:  Size  Location     Type
 24326 ;;                  1    wreg      void 
 24327 ;; Registers used:
 24328 ;;		wreg, status,2, status,0
 24329 ;; Tracked objects:
 24330 ;;		On entry : 0/0
 24331 ;;		On exit  : 0/0
 24332 ;;		Unchanged: 0/0
 24333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24335 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24336 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24337 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24338 ;;Total ram usage:        2 bytes
 24339 ;; Hardware stack levels used:    1
 24340 ;; Hardware stack levels required when called:    7
 24341 ;; This function calls:
 24342 ;;		Nothing
 24343 ;; This function is called by:
 24344 ;;		_ADC_Init
 24345 ;;		_ADC_Start
 24346 ;;		_ADC_ISR
 24347 ;;		_ADC_Sample
 24348 ;; This function uses a non-reentrant model
 24349 ;;
 24350                           
 24351                           	psect	text120
 24352  01645E                     __ptext120:
 24353                           	opt stack 0
 24354  01645E                     _ADC_SetChannel:
 24355                           	opt stack 20
 24356                           
 24357                           ; BSR set to: 0
 24358                           ;incstack = 0
 24359                           ;ADC_SetChannel@pChannel stored from wreg
 24360  01645E  0100               	movlb	0	; () banked
 24361  016460  6FBB               	movwf	ADC_SetChannel@pChannel& (0+255),b
 24362                           
 24363                           ;ADC.c: 157: ADCON0bits.CHS = (UINT8)pChannel;
 24364  016462  C0BB  F0BA         	movff	ADC_SetChannel@pChannel,??_ADC_SetChannel
 24365  016466  0100               	movlb	0	; () banked
 24366  016468  47BA               	rlncf	??_ADC_SetChannel& (0+255),f,b
 24367  01646A  47BA               	rlncf	??_ADC_SetChannel& (0+255),f,b
 24368  01646C  50C2               	movf	4034,w,c	;volatile
 24369  01646E  0100               	movlb	0	; () banked
 24370  016470  19BA               	xorwf	??_ADC_SetChannel& (0+255),w,b
 24371  016472  0BC3               	andlw	-61
 24372  016474  19BA               	xorwf	??_ADC_SetChannel& (0+255),w,b
 24373  016476  6EC2               	movwf	4034,c	;volatile
 24374                           
 24375                           ; BSR set to: 0
 24376  016478  0012               	return		;funcret
 24377  01647A                     __end_of_ADC_SetChannel:
 24378                           	opt stack 0
 24379                           tosu	equ	0xFFF
 24380                           tosh	equ	0xFFE
 24381                           tosl	equ	0xFFD
 24382                           pclath	equ	0xFFA
 24383                           tblptru	equ	0xFF8
 24384                           tblptrh	equ	0xFF7
 24385                           tblptrl	equ	0xFF6
 24386                           tablat	equ	0xFF5
 24387                           prodh	equ	0xFF4
 24388                           prodl	equ	0xFF3
 24389                           intcon	equ	0xFF2
 24390                           postinc0	equ	0xFEE
 24391                           wreg	equ	0xFE8
 24392                           indf1	equ	0xFE7
 24393                           postdec1	equ	0xFE5
 24394                           fsr1h	equ	0xFE2
 24395                           fsr1l	equ	0xFE1
 24396                           indf2	equ	0xFDF
 24397                           postinc2	equ	0xFDE
 24398                           postdec2	equ	0xFDD
 24399                           plusw2	equ	0xFDB
 24400                           fsr2h	equ	0xFDA
 24401                           fsr2l	equ	0xFD9
 24402                           status	equ	0xFD8
 24403                           
 24404 ;; *************** function _ADC_ConversionTime *****************
 24405 ;; Defined at:
 24406 ;;		line 199 in file "Library/ADC.c"
 24407 ;; Parameters:    Size  Location     Type
 24408 ;;  pCount          1    wreg     unsigned char 
 24409 ;; Auto vars:     Size  Location     Type
 24410 ;;  pCount          1    1[BANK0 ] unsigned char 
 24411 ;; Return value:  Size  Location     Type
 24412 ;;                  1    wreg      void 
 24413 ;; Registers used:
 24414 ;;		wreg, status,2, status,0
 24415 ;; Tracked objects:
 24416 ;;		On entry : 0/0
 24417 ;;		On exit  : 0/0
 24418 ;;		Unchanged: 0/0
 24419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24421 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24422 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24423 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24424 ;;Total ram usage:        2 bytes
 24425 ;; Hardware stack levels used:    1
 24426 ;; Hardware stack levels required when called:    7
 24427 ;; This function calls:
 24428 ;;		Nothing
 24429 ;; This function is called by:
 24430 ;;		_ADC_Init
 24431 ;; This function uses a non-reentrant model
 24432 ;;
 24433                           
 24434                           	psect	text121
 24435  015C40                     __ptext121:
 24436                           	opt stack 0
 24437  015C40                     _ADC_ConversionTime:
 24438                           	opt stack 21
 24439                           
 24440                           ; BSR set to: 0
 24441                           ;incstack = 0
 24442                           ;ADC_ConversionTime@pCount stored from wreg
 24443  015C40  0100               	movlb	0	; () banked
 24444  015C42  6FBB               	movwf	ADC_ConversionTime@pCount& (0+255),b
 24445                           
 24446                           ;ADC.c: 201: if (pCount == 10)
 24447  015C44  0E0A               	movlw	10
 24448  015C46  0100               	movlb	0	; () banked
 24449  015C48  19BB               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 24450  015C4A  B4D8               	btfsc	status,2,c
 24451  015C4C  D00A               	goto	u10770
 24452                           
 24453                           ; BSR set to: 0
 24454                           ;ADC.c: 203: else if (pCount == 14)
 24455                           
 24456                           ; BSR set to: 0
 24457                           
 24458                           ; BSR set to: 0
 24459                           ;ADC.c: 202: pCount -= 2;
 24460  015C4E  0E0E               	movlw	14
 24461  015C50  0100               	movlb	0	; () banked
 24462  015C52  19BB               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 24463  015C54  B4D8               	btfsc	status,2,c
 24464  015C56  D005               	goto	u10770
 24465                           
 24466                           ; BSR set to: 0
 24467                           ;ADC.c: 205: else if (pCount == 18)
 24468                           
 24469                           ; BSR set to: 0
 24470                           
 24471                           ; BSR set to: 0
 24472                           ;ADC.c: 204: pCount -= 2;
 24473  015C58  0E12               	movlw	18
 24474  015C5A  0100               	movlb	0	; () banked
 24475  015C5C  19BB               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 24476  015C5E  A4D8               	btfss	status,2,c
 24477  015C60  D003               	goto	l1313
 24478  015C62                     u10770:
 24479                           
 24480                           ; BSR set to: 0
 24481                           ;ADC.c: 206: pCount -= 2;
 24482  015C62  0E02               	movlw	2
 24483  015C64  0100               	movlb	0	; () banked
 24484  015C66  5FBB               	subwf	ADC_ConversionTime@pCount& (0+255),f,b
 24485  015C68                     l1313:
 24486                           
 24487                           ; BSR set to: 0
 24488                           ;ADC.c: 208: pCount <<= 1;
 24489                           
 24490                           ; BSR set to: 0
 24491                           
 24492                           ; BSR set to: 0
 24493  015C68  0100               	movlb	0	; () banked
 24494  015C6A  90D8               	bcf	status,0,c
 24495  015C6C  37BB               	rlcf	ADC_ConversionTime@pCount& (0+255),f,b
 24496                           
 24497                           ;ADC.c: 209: ADCON1bits.ACQT = pCount;
 24498  015C6E  C0BB  F0BA         	movff	ADC_ConversionTime@pCount,??_ADC_ConversionTime
 24499  015C72  0100               	movlb	0	; () banked
 24500  015C74  47BA               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 24501  015C76  47BA               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 24502  015C78  47BA               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 24503  015C7A  50C1               	movf	4033,w,c	;volatile
 24504  015C7C  0100               	movlb	0	; () banked
 24505  015C7E  19BA               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 24506  015C80  0BC7               	andlw	-57
 24507  015C82  19BA               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 24508  015C84  6EC1               	movwf	4033,c	;volatile
 24509                           
 24510                           ; BSR set to: 0
 24511  015C86  0012               	return		;funcret
 24512  015C88                     __end_of_ADC_ConversionTime:
 24513                           	opt stack 0
 24514                           tosu	equ	0xFFF
 24515                           tosh	equ	0xFFE
 24516                           tosl	equ	0xFFD
 24517                           pclath	equ	0xFFA
 24518                           tblptru	equ	0xFF8
 24519                           tblptrh	equ	0xFF7
 24520                           tblptrl	equ	0xFF6
 24521                           tablat	equ	0xFF5
 24522                           prodh	equ	0xFF4
 24523                           prodl	equ	0xFF3
 24524                           intcon	equ	0xFF2
 24525                           postinc0	equ	0xFEE
 24526                           wreg	equ	0xFE8
 24527                           indf1	equ	0xFE7
 24528                           postdec1	equ	0xFE5
 24529                           fsr1h	equ	0xFE2
 24530                           fsr1l	equ	0xFE1
 24531                           indf2	equ	0xFDF
 24532                           postinc2	equ	0xFDE
 24533                           postdec2	equ	0xFDD
 24534                           plusw2	equ	0xFDB
 24535                           fsr2h	equ	0xFDA
 24536                           fsr2l	equ	0xFD9
 24537                           status	equ	0xFD8
 24538                           
 24539 ;; *************** function _ADC_ClockDivision *****************
 24540 ;; Defined at:
 24541 ;;		line 159 in file "Library/ADC.c"
 24542 ;; Parameters:    Size  Location     Type
 24543 ;;  pDivide         1    wreg     unsigned char 
 24544 ;; Auto vars:     Size  Location     Type
 24545 ;;  pDivide         1    0[BANK0 ] unsigned char 
 24546 ;;  unfound         1    2[BANK0 ] unsigned char 
 24547 ;;  reg             1    1[BANK0 ] unsigned char 
 24548 ;; Return value:  Size  Location     Type
 24549 ;;                  1    wreg      void 
 24550 ;; Registers used:
 24551 ;;		wreg, status,2, status,0
 24552 ;; Tracked objects:
 24553 ;;		On entry : 0/0
 24554 ;;		On exit  : 0/0
 24555 ;;		Unchanged: 0/0
 24556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24558 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24560 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24561 ;;Total ram usage:        3 bytes
 24562 ;; Hardware stack levels used:    1
 24563 ;; Hardware stack levels required when called:    7
 24564 ;; This function calls:
 24565 ;;		Nothing
 24566 ;; This function is called by:
 24567 ;;		_ADC_Init
 24568 ;; This function uses a non-reentrant model
 24569 ;;
 24570                           
 24571                           	psect	text122
 24572  014E80                     __ptext122:
 24573                           	opt stack 0
 24574  014E80                     _ADC_ClockDivision:
 24575                           	opt stack 21
 24576                           
 24577                           ; BSR set to: 0
 24578                           ;incstack = 0
 24579                           ;ADC_ClockDivision@pDivide stored from wreg
 24580  014E80  0100               	movlb	0	; () banked
 24581  014E82  6FBA               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 24582                           
 24583                           ;ADC.c: 161: UINT8 reg = 0;
 24584  014E84  0E00               	movlw	0
 24585  014E86  0100               	movlb	0	; () banked
 24586  014E88  6FBB               	movwf	ADC_ClockDivision@reg& (0+255),b
 24587                           
 24588                           ;ADC.c: 162: bool unfound = 1;
 24589  014E8A  0E01               	movlw	1
 24590  014E8C  D002               	goto	L15
 24591  014E8E                     
 24592                           ; BSR set to: 0
 24593                           ;ADC.c: 167: reg = 0;
 24594                           
 24595                           ; BSR set to: 0
 24596  014E8E  0E00               	movlw	0
 24597  014E90  D00C               	goto	L20
 24598  014E92                     L15:
 24599  014E92  0100               	movlb	0	; () banked
 24600  014E94  6FBC               	movwf	ADC_ClockDivision@unfound& (0+255),b
 24601                           
 24602                           ;ADC.c: 169: break;
 24603  014E96  D02D               	goto	l1296
 24604  014E98                     
 24605                           ; BSR set to: 0
 24606                           ;ADC.c: 171: reg = 0b100;
 24607                           
 24608                           ; BSR set to: 0
 24609  014E98  0E04               	movlw	4
 24610  014E9A  D007               	goto	L20
 24611  014E9C                     
 24612                           ; BSR set to: 0
 24613                           ;ADC.c: 175: reg = 0b001;
 24614                           
 24615                           ; BSR set to: 0
 24616  014E9C  0E01               	movlw	1
 24617  014E9E  D005               	goto	L20
 24618  014EA0                     
 24619                           ; BSR set to: 0
 24620                           ;ADC.c: 179: reg = 0b101;
 24621                           
 24622                           ; BSR set to: 0
 24623  014EA0  0E05               	movlw	5
 24624  014EA2  D003               	goto	L20
 24625  014EA4                     
 24626                           ; BSR set to: 0
 24627                           ;ADC.c: 183: reg = 0b010;
 24628                           
 24629                           ; BSR set to: 0
 24630  014EA4  0E02               	movlw	2
 24631  014EA6  D001               	goto	L20
 24632  014EA8                     
 24633                           ; BSR set to: 0
 24634                           ;ADC.c: 187: reg = 0b110;
 24635                           
 24636                           ; BSR set to: 0
 24637  014EA8  0E06               	movlw	6
 24638  014EAA                     L20:
 24639  014EAA  0100               	movlb	0	; () banked
 24640  014EAC  6FBB               	movwf	ADC_ClockDivision@reg& (0+255),b
 24641                           
 24642                           ;ADC.c: 188: unfound = 0;
 24643  014EAE  0E00               	movlw	0
 24644  014EB0  D7F0               	goto	L15
 24645  014EB2                     
 24646                           ; BSR set to: 0
 24647                           ;ADC.c: 191: if (pDivide > 2)
 24648                           
 24649                           ; BSR set to: 0
 24650  014EB2  0E02               	movlw	2
 24651  014EB4  0100               	movlb	0	; () banked
 24652  014EB6  65BA               	cpfsgt	ADC_ClockDivision@pDivide& (0+255),b
 24653  014EB8  D003               	goto	l1303
 24654                           
 24655                           ; BSR set to: 0
 24656                           ;ADC.c: 192: pDivide --;
 24657  014EBA  0100               	movlb	0	; () banked
 24658  014EBC  07BA               	decf	ADC_ClockDivision@pDivide& (0+255),f,b
 24659  014EBE  D019               	goto	l1296
 24660  014EC0                     l1303:
 24661                           
 24662                           ; BSR set to: 0
 24663                           ;ADC.c: 193: else
 24664                           ;ADC.c: 194: pDivide = 2;
 24665                           
 24666                           ; BSR set to: 0
 24667  014EC0  0E02               	movlw	2
 24668  014EC2  0100               	movlb	0	; () banked
 24669  014EC4  6FBA               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 24670                           
 24671                           ; BSR set to: 0
 24672                           ;ADC.c: 195: };
 24673  014EC6  D015               	goto	l1296
 24674  014EC8                     
 24675                           ; BSR set to: 0
 24676                           
 24677                           ; BSR set to: 0
 24678  014EC8  0100               	movlb	0	; () banked
 24679  014ECA  51BA               	movf	ADC_ClockDivision@pDivide& (0+255),w,b
 24680                           
 24681                           ; Switch size 1, requested type "space"
 24682                           ; Number of cases is 6, Range of values is 2 to 64
 24683                           ; switch strategies available:
 24684                           ; Name         Instructions Cycles
 24685                           ; simple_byte           19    10 (average)
 24686                           ;	Chosen strategy is simple_byte
 24687  014ECC  0A02               	xorlw	2	; case 2
 24688  014ECE  B4D8               	btfsc	status,2,c
 24689  014ED0  D7DE               	goto	l1295
 24690  014ED2  0A06               	xorlw	6	; case 4
 24691  014ED4  B4D8               	btfsc	status,2,c
 24692  014ED6  D7E0               	goto	l1297
 24693  014ED8  0A0C               	xorlw	12	; case 8
 24694  014EDA  B4D8               	btfsc	status,2,c
 24695  014EDC  D7DF               	goto	l1298
 24696  014EDE  0A18               	xorlw	24	; case 16
 24697  014EE0  B4D8               	btfsc	status,2,c
 24698  014EE2  D7DE               	goto	l1299
 24699  014EE4  0A30               	xorlw	48	; case 32
 24700  014EE6  B4D8               	btfsc	status,2,c
 24701  014EE8  D7DD               	goto	l1300
 24702  014EEA  0A60               	xorlw	96	; case 64
 24703  014EEC  B4D8               	btfsc	status,2,c
 24704  014EEE  D7DC               	goto	l1301
 24705  014EF0  D7E0               	goto	l1302
 24706  014EF2                     l1296:
 24707                           
 24708                           ; BSR set to: 0
 24709                           
 24710                           ; BSR set to: 0
 24711                           
 24712                           ; BSR set to: 0
 24713  014EF2  0100               	movlb	0	; () banked
 24714  014EF4  51BC               	movf	ADC_ClockDivision@unfound& (0+255),w,b
 24715  014EF6  0100               	movlb	0	; () banked
 24716  014EF8  A4D8               	btfss	status,2,c
 24717  014EFA  D7E6               	goto	l1294
 24718                           
 24719                           ; BSR set to: 0
 24720                           ;ADC.c: 197: ADCON1bits.ADCS = reg;
 24721                           
 24722                           ; BSR set to: 0
 24723  014EFC  50C1               	movf	4033,w,c	;volatile
 24724  014EFE  0100               	movlb	0	; () banked
 24725  014F00  19BB               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 24726  014F02  0BF8               	andlw	-8
 24727  014F04  19BB               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 24728  014F06  6EC1               	movwf	4033,c	;volatile
 24729                           
 24730                           ; BSR set to: 0
 24731  014F08  0012               	return		;funcret
 24732  014F0A                     __end_of_ADC_ClockDivision:
 24733                           	opt stack 0
 24734                           tosu	equ	0xFFF
 24735                           tosh	equ	0xFFE
 24736                           tosl	equ	0xFFD
 24737                           pclath	equ	0xFFA
 24738                           tblptru	equ	0xFF8
 24739                           tblptrh	equ	0xFF7
 24740                           tblptrl	equ	0xFF6
 24741                           tablat	equ	0xFF5
 24742                           prodh	equ	0xFF4
 24743                           prodl	equ	0xFF3
 24744                           intcon	equ	0xFF2
 24745                           postinc0	equ	0xFEE
 24746                           wreg	equ	0xFE8
 24747                           indf1	equ	0xFE7
 24748                           postdec1	equ	0xFE5
 24749                           fsr1h	equ	0xFE2
 24750                           fsr1l	equ	0xFE1
 24751                           indf2	equ	0xFDF
 24752                           postinc2	equ	0xFDE
 24753                           postdec2	equ	0xFDD
 24754                           plusw2	equ	0xFDB
 24755                           fsr2h	equ	0xFDA
 24756                           fsr2l	equ	0xFD9
 24757                           status	equ	0xFD8
 24758                           
 24759 ;; *************** function _ADC_Calibrate *****************
 24760 ;; Defined at:
 24761 ;;		line 63 in file "Library/ADC.c"
 24762 ;; Parameters:    Size  Location     Type
 24763 ;;		None
 24764 ;; Auto vars:     Size  Location     Type
 24765 ;;		None
 24766 ;; Return value:  Size  Location     Type
 24767 ;;                  1    wreg      void 
 24768 ;; Registers used:
 24769 ;;		cstack
 24770 ;; Tracked objects:
 24771 ;;		On entry : 0/0
 24772 ;;		On exit  : 0/0
 24773 ;;		Unchanged: 0/0
 24774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24778 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24779 ;;Total ram usage:        0 bytes
 24780 ;; Hardware stack levels used:    1
 24781 ;; Hardware stack levels required when called:    8
 24782 ;; This function calls:
 24783 ;;		_ADC_Off
 24784 ;;		_ADC_On
 24785 ;; This function is called by:
 24786 ;;		_ADC_Init
 24787 ;; This function uses a non-reentrant model
 24788 ;;
 24789                           
 24790                           	psect	text123
 24791  01657E                     __ptext123:
 24792                           	opt stack 0
 24793  01657E                     _ADC_Calibrate:
 24794                           	opt stack 20
 24795                           
 24796                           ;ADC.c: 65: ADC_On();
 24797                           
 24798                           ; BSR set to: 0
 24799                           ;incstack = 0
 24800  01657E  EC4B  F0B3         	call	_ADC_On	;wreg free
 24801                           
 24802                           ;ADC.c: 67: ADCON1bits.ADCAL = 1;
 24803  016582  8CC1               	bsf	4033,6,c	;volatile
 24804                           
 24805                           ;ADC.c: 69: (ADCON0bits.GO) = 1;
 24806  016584  82C2               	bsf	4034,1,c	;volatile
 24807  016586  B2C2               	btfsc	4034,1,c	;volatile
 24808  016588  D7FE               	goto	l1254
 24809                           
 24810                           ;ADC.c: 71: ADCON1bits.ADCAL = 0;
 24811  01658A  9CC1               	bcf	4033,6,c	;volatile
 24812                           
 24813                           ;ADC.c: 73: ADC_Off();
 24814  01658C  EC3D  F0B3         	call	_ADC_Off	;wreg free
 24815  016590  0012               	return		;funcret
 24816  016592                     __end_of_ADC_Calibrate:
 24817                           	opt stack 0
 24818                           tosu	equ	0xFFF
 24819                           tosh	equ	0xFFE
 24820                           tosl	equ	0xFFD
 24821                           pclath	equ	0xFFA
 24822                           tblptru	equ	0xFF8
 24823                           tblptrh	equ	0xFF7
 24824                           tblptrl	equ	0xFF6
 24825                           tablat	equ	0xFF5
 24826                           prodh	equ	0xFF4
 24827                           prodl	equ	0xFF3
 24828                           intcon	equ	0xFF2
 24829                           postinc0	equ	0xFEE
 24830                           wreg	equ	0xFE8
 24831                           indf1	equ	0xFE7
 24832                           postdec1	equ	0xFE5
 24833                           fsr1h	equ	0xFE2
 24834                           fsr1l	equ	0xFE1
 24835                           indf2	equ	0xFDF
 24836                           postinc2	equ	0xFDE
 24837                           postdec2	equ	0xFDD
 24838                           plusw2	equ	0xFDB
 24839                           fsr2h	equ	0xFDA
 24840                           fsr2l	equ	0xFD9
 24841                           status	equ	0xFD8
 24842                           
 24843 ;; *************** function _ADC_On *****************
 24844 ;; Defined at:
 24845 ;;		line 85 in file "Library/ADC.c"
 24846 ;; Parameters:    Size  Location     Type
 24847 ;;		None
 24848 ;; Auto vars:     Size  Location     Type
 24849 ;;		None
 24850 ;; Return value:  Size  Location     Type
 24851 ;;                  1    wreg      void 
 24852 ;; Registers used:
 24853 ;;		None
 24854 ;; Tracked objects:
 24855 ;;		On entry : 0/0
 24856 ;;		On exit  : 0/0
 24857 ;;		Unchanged: 0/0
 24858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24862 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24863 ;;Total ram usage:        0 bytes
 24864 ;; Hardware stack levels used:    1
 24865 ;; Hardware stack levels required when called:    7
 24866 ;; This function calls:
 24867 ;;		Nothing
 24868 ;; This function is called by:
 24869 ;;		_ADC_Calibrate
 24870 ;;		_ADC_Start
 24871 ;;		_ADC_ISR
 24872 ;;		_ADC_Sample
 24873 ;; This function uses a non-reentrant model
 24874 ;;
 24875                           
 24876                           	psect	text124
 24877  016696                     __ptext124:
 24878                           	opt stack 0
 24879  016696                     _ADC_On:
 24880                           	opt stack 20
 24881                           
 24882                           ;ADC.c: 87: ADCON0bits.ADON = 1;
 24883                           
 24884                           ;incstack = 0
 24885  016696  80C2               	bsf	4034,0,c	;volatile
 24886                           
 24887                           ;ADC.c: 88: PIR1bits.ADIF = 0;
 24888  016698  9C9E               	bcf	3998,6,c	;volatile
 24889  01669A  0012               	return		;funcret
 24890  01669C                     __end_of_ADC_On:
 24891                           	opt stack 0
 24892                           tosu	equ	0xFFF
 24893                           tosh	equ	0xFFE
 24894                           tosl	equ	0xFFD
 24895                           pclath	equ	0xFFA
 24896                           tblptru	equ	0xFF8
 24897                           tblptrh	equ	0xFF7
 24898                           tblptrl	equ	0xFF6
 24899                           tablat	equ	0xFF5
 24900                           prodh	equ	0xFF4
 24901                           prodl	equ	0xFF3
 24902                           intcon	equ	0xFF2
 24903                           postinc0	equ	0xFEE
 24904                           wreg	equ	0xFE8
 24905                           indf1	equ	0xFE7
 24906                           postdec1	equ	0xFE5
 24907                           fsr1h	equ	0xFE2
 24908                           fsr1l	equ	0xFE1
 24909                           indf2	equ	0xFDF
 24910                           postinc2	equ	0xFDE
 24911                           postdec2	equ	0xFDD
 24912                           plusw2	equ	0xFDB
 24913                           fsr2h	equ	0xFDA
 24914                           fsr2l	equ	0xFD9
 24915                           status	equ	0xFD8
 24916                           
 24917 ;; *************** function _ADC_Off *****************
 24918 ;; Defined at:
 24919 ;;		line 94 in file "Library/ADC.c"
 24920 ;; Parameters:    Size  Location     Type
 24921 ;;		None
 24922 ;; Auto vars:     Size  Location     Type
 24923 ;;		None
 24924 ;; Return value:  Size  Location     Type
 24925 ;;                  1    wreg      void 
 24926 ;; Registers used:
 24927 ;;		None
 24928 ;; Tracked objects:
 24929 ;;		On entry : 0/0
 24930 ;;		On exit  : 0/0
 24931 ;;		Unchanged: 0/0
 24932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24936 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24937 ;;Total ram usage:        0 bytes
 24938 ;; Hardware stack levels used:    1
 24939 ;; Hardware stack levels required when called:    7
 24940 ;; This function calls:
 24941 ;;		Nothing
 24942 ;; This function is called by:
 24943 ;;		_ADC_Calibrate
 24944 ;;		_ADC_Start
 24945 ;;		_ADC_ISR
 24946 ;;		_ADC_Sample
 24947 ;; This function uses a non-reentrant model
 24948 ;;
 24949                           
 24950                           	psect	text125
 24951  01667A                     __ptext125:
 24952                           	opt stack 0
 24953  01667A                     _ADC_Off:
 24954                           	opt stack 20
 24955                           
 24956                           ;ADC.c: 96: ADCON0bits.ADON = 0;
 24957                           
 24958                           ;incstack = 0
 24959  01667A  90C2               	bcf	4034,0,c	;volatile
 24960                           
 24961                           ;ADC.c: 97: PIR1bits.ADIF = 0;
 24962  01667C  9C9E               	bcf	3998,6,c	;volatile
 24963                           
 24964                           ;ADC.c: 98: PIE1bits.ADIE = 0;
 24965  01667E  9C9D               	bcf	3997,6,c	;volatile
 24966  016680  0012               	return		;funcret
 24967  016682                     __end_of_ADC_Off:
 24968                           	opt stack 0
 24969                           tosu	equ	0xFFF
 24970                           tosh	equ	0xFFE
 24971                           tosl	equ	0xFFD
 24972                           pclath	equ	0xFFA
 24973                           tblptru	equ	0xFF8
 24974                           tblptrh	equ	0xFF7
 24975                           tblptrl	equ	0xFF6
 24976                           tablat	equ	0xFF5
 24977                           prodh	equ	0xFF4
 24978                           prodl	equ	0xFF3
 24979                           intcon	equ	0xFF2
 24980                           postinc0	equ	0xFEE
 24981                           wreg	equ	0xFE8
 24982                           indf1	equ	0xFE7
 24983                           postdec1	equ	0xFE5
 24984                           fsr1h	equ	0xFE2
 24985                           fsr1l	equ	0xFE1
 24986                           indf2	equ	0xFDF
 24987                           postinc2	equ	0xFDE
 24988                           postdec2	equ	0xFDD
 24989                           plusw2	equ	0xFDB
 24990                           fsr2h	equ	0xFDA
 24991                           fsr2l	equ	0xFD9
 24992                           status	equ	0xFD8
 24993                           
 24994 ;; *************** function _getMode *****************
 24995 ;; Defined at:
 24996 ;;		line 104 in file "main.c"
 24997 ;; Parameters:    Size  Location     Type
 24998 ;;		None
 24999 ;; Auto vars:     Size  Location     Type
 25000 ;;		None
 25001 ;; Return value:  Size  Location     Type
 25002 ;;                  1    wreg      void 
 25003 ;; Registers used:
 25004 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 25005 ;; Tracked objects:
 25006 ;;		On entry : 0/0
 25007 ;;		On exit  : 0/0
 25008 ;;		Unchanged: 0/0
 25009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25013 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25014 ;;Total ram usage:        0 bytes
 25015 ;; Hardware stack levels used:    1
 25016 ;; Hardware stack levels required when called:   16
 25017 ;; This function calls:
 25018 ;;		_HMI_DIPSwitch
 25019 ;;		_HMI_DownSwitch
 25020 ;;		_HMI_LeftSwitch
 25021 ;;		_HMI_Poll
 25022 ;;		_HMI_RightSwitch
 25023 ;;		_HMI_UpSwitch
 25024 ;;		_MXK_DIPSwitch
 25025 ;;		_MXK_TestButton
 25026 ;; This function is called by:
 25027 ;;		_main
 25028 ;; This function uses a non-reentrant model
 25029 ;;
 25030                           
 25031                           	psect	text126
 25032  014034                     __ptext126:
 25033                           	opt stack 0
 25034  014034                     _getMode:
 25035                           	opt stack 14
 25036                           
 25037                           ;main.c: 105: HMI_Poll();
 25038                           
 25039                           ;incstack = 0
 25040  014034  ECE9  F0A9         	call	_HMI_Poll	;wreg free
 25041                           
 25042                           ;main.c: 106: mode = 0;
 25043  014038  0E00               	movlw	0
 25044  01403A  0100               	movlb	0	; () banked
 25045  01403C  6F74               	movwf	(_mode+1)& (0+255),b
 25046  01403E  0E00               	movlw	0
 25047  014040  6F73               	movwf	_mode& (0+255),b
 25048                           
 25049                           ; BSR set to: 0
 25050                           ;main.c: 107: if (HMIBoard.mUp.mGetState()) {
 25051  014042  EE23  F05F         	lfsr	2,_HMIBoard+35
 25052  014046  D801               	call	u11658
 25053  014048  D00A               	goto	u11659
 25054  01404A                     u11658:
 25055  01404A  0005               	push	
 25056  01404C  6EFA               	movwf	pclath,c
 25057  01404E  50DE               	movf	postinc2,w,c
 25058  014050  6EFD               	movwf	tosl,c
 25059  014052  50DE               	movf	postinc2,w,c
 25060  014054  6EFE               	movwf	tosh,c
 25061  014056  50DE               	movf	postinc2,w,c
 25062  014058  6EFF               	movwf	tosu,c
 25063  01405A  50FA               	movf	pclath,w,c
 25064  01405C  0012               	return		;indir
 25065  01405E                     u11659:
 25066  01405E  0900               	iorlw	0
 25067  014060  B4D8               	btfsc	status,2,c
 25068  014062  D005               	goto	l2309
 25069                           
 25070                           ;main.c: 108: mode = 1;
 25071  014064  0E00               	movlw	0
 25072  014066  0100               	movlb	0	; () banked
 25073  014068  6F74               	movwf	(_mode+1)& (0+255),b
 25074  01406A  0E01               	movlw	1
 25075  01406C  6F73               	movwf	_mode& (0+255),b
 25076  01406E                     l2309:
 25077                           
 25078                           ;main.c: 109: }
 25079                           ;main.c: 110: if (HMIBoard.mRight.mGetState()) {
 25080                           
 25081                           ; BSR set to: 0
 25082  01406E  EE23  F04B         	lfsr	2,_HMIBoard+15
 25083  014072  D801               	call	u11678
 25084  014074  D00A               	goto	u11679
 25085  014076                     u11678:
 25086  014076  0005               	push	
 25087  014078  6EFA               	movwf	pclath,c
 25088  01407A  50DE               	movf	postinc2,w,c
 25089  01407C  6EFD               	movwf	tosl,c
 25090  01407E  50DE               	movf	postinc2,w,c
 25091  014080  6EFE               	movwf	tosh,c
 25092  014082  50DE               	movf	postinc2,w,c
 25093  014084  6EFF               	movwf	tosu,c
 25094  014086  50FA               	movf	pclath,w,c
 25095  014088  0012               	return		;indir
 25096  01408A                     u11679:
 25097  01408A  0900               	iorlw	0
 25098  01408C  B4D8               	btfsc	status,2,c
 25099  01408E  D005               	goto	l2310
 25100                           
 25101                           ;main.c: 111: mode = 2;
 25102  014090  0E00               	movlw	0
 25103  014092  0100               	movlb	0	; () banked
 25104  014094  6F74               	movwf	(_mode+1)& (0+255),b
 25105  014096  0E02               	movlw	2
 25106  014098  6F73               	movwf	_mode& (0+255),b
 25107  01409A                     l2310:
 25108                           
 25109                           ;main.c: 112: }
 25110                           ;main.c: 113: if (HMIBoard.mDown.mGetState()) {
 25111                           
 25112                           ; BSR set to: 0
 25113  01409A  EE23  F069         	lfsr	2,_HMIBoard+45
 25114  01409E  D801               	call	u11698
 25115  0140A0  D00A               	goto	u11699
 25116  0140A2                     u11698:
 25117  0140A2  0005               	push	
 25118  0140A4  6EFA               	movwf	pclath,c
 25119  0140A6  50DE               	movf	postinc2,w,c
 25120  0140A8  6EFD               	movwf	tosl,c
 25121  0140AA  50DE               	movf	postinc2,w,c
 25122  0140AC  6EFE               	movwf	tosh,c
 25123  0140AE  50DE               	movf	postinc2,w,c
 25124  0140B0  6EFF               	movwf	tosu,c
 25125  0140B2  50FA               	movf	pclath,w,c
 25126  0140B4  0012               	return		;indir
 25127  0140B6                     u11699:
 25128  0140B6  0900               	iorlw	0
 25129  0140B8  B4D8               	btfsc	status,2,c
 25130  0140BA  D005               	goto	l2311
 25131                           
 25132                           ;main.c: 114: mode = 3;
 25133  0140BC  0E00               	movlw	0
 25134  0140BE  0100               	movlb	0	; () banked
 25135  0140C0  6F74               	movwf	(_mode+1)& (0+255),b
 25136  0140C2  0E03               	movlw	3
 25137  0140C4  6F73               	movwf	_mode& (0+255),b
 25138  0140C6                     l2311:
 25139                           
 25140                           ;main.c: 115: }
 25141                           ;main.c: 116: if (HMIBoard.mLeft.mGetState()) {
 25142                           
 25143                           ; BSR set to: 0
 25144  0140C6  EE23  F055         	lfsr	2,_HMIBoard+25
 25145  0140CA  D801               	call	u11718
 25146  0140CC  D00A               	goto	u11719
 25147  0140CE                     u11718:
 25148  0140CE  0005               	push	
 25149  0140D0  6EFA               	movwf	pclath,c
 25150  0140D2  50DE               	movf	postinc2,w,c
 25151  0140D4  6EFD               	movwf	tosl,c
 25152  0140D6  50DE               	movf	postinc2,w,c
 25153  0140D8  6EFE               	movwf	tosh,c
 25154  0140DA  50DE               	movf	postinc2,w,c
 25155  0140DC  6EFF               	movwf	tosu,c
 25156  0140DE  50FA               	movf	pclath,w,c
 25157  0140E0  0012               	return		;indir
 25158  0140E2                     u11719:
 25159  0140E2  0900               	iorlw	0
 25160  0140E4  B4D8               	btfsc	status,2,c
 25161  0140E6  0012               	return	
 25162                           
 25163                           ;main.c: 117: mode = 4;
 25164  0140E8  0E00               	movlw	0
 25165  0140EA  0100               	movlb	0	; () banked
 25166  0140EC  6F74               	movwf	(_mode+1)& (0+255),b
 25167  0140EE  0E04               	movlw	4
 25168  0140F0  6F73               	movwf	_mode& (0+255),b
 25169  0140F2  0012               	return	
 25170  0140F4                     __end_of_getMode:
 25171                           	opt stack 0
 25172                           tosu	equ	0xFFF
 25173                           tosh	equ	0xFFE
 25174                           tosl	equ	0xFFD
 25175                           pclath	equ	0xFFA
 25176                           tblptru	equ	0xFF8
 25177                           tblptrh	equ	0xFF7
 25178                           tblptrl	equ	0xFF6
 25179                           tablat	equ	0xFF5
 25180                           prodh	equ	0xFF4
 25181                           prodl	equ	0xFF3
 25182                           intcon	equ	0xFF2
 25183                           postinc0	equ	0xFEE
 25184                           wreg	equ	0xFE8
 25185                           indf1	equ	0xFE7
 25186                           postdec1	equ	0xFE5
 25187                           fsr1h	equ	0xFE2
 25188                           fsr1l	equ	0xFE1
 25189                           indf2	equ	0xFDF
 25190                           postinc2	equ	0xFDE
 25191                           postdec2	equ	0xFDD
 25192                           plusw2	equ	0xFDB
 25193                           fsr2h	equ	0xFDA
 25194                           fsr2l	equ	0xFD9
 25195                           status	equ	0xFD8
 25196                           
 25197 ;; *************** function _HMI_Poll *****************
 25198 ;; Defined at:
 25199 ;;		line 252 in file "HMI.c"
 25200 ;; Parameters:    Size  Location     Type
 25201 ;;		None
 25202 ;; Auto vars:     Size  Location     Type
 25203 ;;		None
 25204 ;; Return value:  Size  Location     Type
 25205 ;;                  1    wreg      void 
 25206 ;; Registers used:
 25207 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 25208 ;; Tracked objects:
 25209 ;;		On entry : 0/0
 25210 ;;		On exit  : 0/0
 25211 ;;		Unchanged: 0/0
 25212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25216 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25217 ;;Total ram usage:        0 bytes
 25218 ;; Hardware stack levels used:    1
 25219 ;; Hardware stack levels required when called:   15
 25220 ;; This function calls:
 25221 ;;		_Button_Poll
 25222 ;; This function is called by:
 25223 ;;		_getMode
 25224 ;;		_safeToGo
 25225 ;;		_main
 25226 ;; This function uses a non-reentrant model
 25227 ;;
 25228                           
 25229                           	psect	text127
 25230  0153D2                     __ptext127:
 25231                           	opt stack 0
 25232  0153D2                     _HMI_Poll:
 25233                           	opt stack 13
 25234                           
 25235                           ;HMI.c: 254: TRISE = 0xFC;
 25236                           
 25237                           ;incstack = 0
 25238  0153D2  0EFC               	movlw	252
 25239  0153D4  6E96               	movwf	3990,c	;volatile
 25240                           
 25241                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
 25242  0153D6  0E6C               	movlw	low (_HMIBoard+48)
 25243  0153D8  0100               	movlb	0	; () banked
 25244  0153DA  6FD5               	movwf	Button_Poll@pButton& (0+255),b
 25245  0153DC  0E03               	movlw	high (_HMIBoard+48)
 25246  0153DE  0100               	movlb	0	; () banked
 25247  0153E0  6FD6               	movwf	(Button_Poll@pButton+1)& (0+255),b
 25248  0153E2  0E01               	movlw	1
 25249  0153E4  0100               	movlb	0	; () banked
 25250  0153E6  6FD7               	movwf	Button_Poll@pIncrement& (0+255),b
 25251  0153E8  EC3B  F098         	call	_Button_Poll	;wreg free
 25252                           
 25253                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
 25254  0153EC  0E4E               	movlw	low (_HMIBoard+18)
 25255  0153EE  0100               	movlb	0	; () banked
 25256  0153F0  6FD5               	movwf	Button_Poll@pButton& (0+255),b
 25257  0153F2  0E03               	movlw	high (_HMIBoard+18)
 25258  0153F4  0100               	movlb	0	; () banked
 25259  0153F6  6FD6               	movwf	(Button_Poll@pButton+1)& (0+255),b
 25260  0153F8  0E01               	movlw	1
 25261  0153FA  0100               	movlb	0	; () banked
 25262  0153FC  6FD7               	movwf	Button_Poll@pIncrement& (0+255),b
 25263  0153FE  EC3B  F098         	call	_Button_Poll	;wreg free
 25264                           
 25265                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
 25266  015402  0E44               	movlw	low (_HMIBoard+8)
 25267  015404  0100               	movlb	0	; () banked
 25268  015406  6FD5               	movwf	Button_Poll@pButton& (0+255),b
 25269  015408  0E03               	movlw	high (_HMIBoard+8)
 25270  01540A  0100               	movlb	0	; () banked
 25271  01540C  6FD6               	movwf	(Button_Poll@pButton+1)& (0+255),b
 25272  01540E  0E01               	movlw	1
 25273  015410  0100               	movlb	0	; () banked
 25274  015412  6FD7               	movwf	Button_Poll@pIncrement& (0+255),b
 25275  015414  EC3B  F098         	call	_Button_Poll	;wreg free
 25276                           
 25277                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
 25278  015418  0E58               	movlw	low (_HMIBoard+28)
 25279  01541A  0100               	movlb	0	; () banked
 25280  01541C  6FD5               	movwf	Button_Poll@pButton& (0+255),b
 25281  01541E  0E03               	movlw	high (_HMIBoard+28)
 25282  015420  0100               	movlb	0	; () banked
 25283  015422  6FD6               	movwf	(Button_Poll@pButton+1)& (0+255),b
 25284  015424  0E01               	movlw	1
 25285  015426  0100               	movlb	0	; () banked
 25286  015428  6FD7               	movwf	Button_Poll@pIncrement& (0+255),b
 25287  01542A  EC3B  F098         	call	_Button_Poll	;wreg free
 25288                           
 25289                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
 25290  01542E  0E62               	movlw	low (_HMIBoard+38)
 25291  015430  0100               	movlb	0	; () banked
 25292  015432  6FD5               	movwf	Button_Poll@pButton& (0+255),b
 25293  015434  0E03               	movlw	high (_HMIBoard+38)
 25294  015436  0100               	movlb	0	; () banked
 25295  015438  6FD6               	movwf	(Button_Poll@pButton+1)& (0+255),b
 25296  01543A  0E01               	movlw	1
 25297  01543C  0100               	movlb	0	; () banked
 25298  01543E  6FD7               	movwf	Button_Poll@pIncrement& (0+255),b
 25299  015440  EC3B  F098         	call	_Button_Poll	;wreg free
 25300  015444  0012               	return		;funcret
 25301  015446                     __end_of_HMI_Poll:
 25302                           	opt stack 0
 25303                           tosu	equ	0xFFF
 25304                           tosh	equ	0xFFE
 25305                           tosl	equ	0xFFD
 25306                           pclath	equ	0xFFA
 25307                           tblptru	equ	0xFF8
 25308                           tblptrh	equ	0xFF7
 25309                           tblptrl	equ	0xFF6
 25310                           tablat	equ	0xFF5
 25311                           prodh	equ	0xFF4
 25312                           prodl	equ	0xFF3
 25313                           intcon	equ	0xFF2
 25314                           postinc0	equ	0xFEE
 25315                           wreg	equ	0xFE8
 25316                           indf1	equ	0xFE7
 25317                           postdec1	equ	0xFE5
 25318                           fsr1h	equ	0xFE2
 25319                           fsr1l	equ	0xFE1
 25320                           indf2	equ	0xFDF
 25321                           postinc2	equ	0xFDE
 25322                           postdec2	equ	0xFDD
 25323                           plusw2	equ	0xFDB
 25324                           fsr2h	equ	0xFDA
 25325                           fsr2l	equ	0xFD9
 25326                           status	equ	0xFD8
 25327                           
 25328 ;; *************** function _Button_Poll *****************
 25329 ;; Defined at:
 25330 ;;		line 57 in file "Library/Button.c"
 25331 ;; Parameters:    Size  Location     Type
 25332 ;;  pButton         2   27[BANK0 ] const PTR struct Button
 25333 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 25334 ;;  pIncrement      1   29[BANK0 ] unsigned char 
 25335 ;; Auto vars:     Size  Location     Type
 25336 ;;  Pin             1   35[BANK0 ] unsigned char 
 25337 ;; Return value:  Size  Location     Type
 25338 ;;                  1    wreg      unsigned char 
 25339 ;; Registers used:
 25340 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 25341 ;; Tracked objects:
 25342 ;;		On entry : 0/0
 25343 ;;		On exit  : 0/0
 25344 ;;		Unchanged: 0/0
 25345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25346 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25347 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25348 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25349 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25350 ;;Total ram usage:        9 bytes
 25351 ;; Hardware stack levels used:    1
 25352 ;; Hardware stack levels required when called:   14
 25353 ;; This function calls:
 25354 ;;		_Event_DIPSwitch
 25355 ;;		_Event_NULL
 25356 ;;		_Event_TestButton
 25357 ;;		_HMI_DIPSwitch
 25358 ;;		_HMI_DownSwitch
 25359 ;;		_HMI_LeftSwitch
 25360 ;;		_HMI_RightSwitch
 25361 ;;		_HMI_UpSwitch
 25362 ;;		_MXK_DIPSwitch
 25363 ;;		_MXK_TestButton
 25364 ;; This function is called by:
 25365 ;;		_HMI_Poll
 25366 ;;		_MXK_Poll
 25367 ;; This function uses a non-reentrant model
 25368 ;;
 25369                           
 25370                           	psect	text128
 25371  013076                     __ptext128:
 25372                           	opt stack 0
 25373  013076                     _Button_Poll:
 25374                           	opt stack 13
 25375                           
 25376                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
 25377                           
 25378                           ;incstack = 0
 25379  013076  0100               	movlb	0	; () banked
 25380  013078  EE20 F007          	lfsr	2,7
 25381  01307C  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25382  01307E  26D9               	addwf	fsr2l,f,c
 25383  013080  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25384  013082  22DA               	addwfc	fsr2h,f,c
 25385  013084  D801               	call	u9598
 25386  013086  D00A               	goto	u9599
 25387  013088                     u9598:
 25388  013088  0005               	push	
 25389  01308A  6EFA               	movwf	pclath,c
 25390  01308C  50DE               	movf	postinc2,w,c
 25391  01308E  6EFD               	movwf	tosl,c
 25392  013090  50DE               	movf	postinc2,w,c
 25393  013092  6EFE               	movwf	tosh,c
 25394  013094  50DE               	movf	postinc2,w,c
 25395  013096  6EFF               	movwf	tosu,c
 25396  013098  50FA               	movf	pclath,w,c
 25397  01309A  0012               	return		;indir
 25398  01309C                     u9599:
 25399  01309C  0100               	movlb	0	; () banked
 25400  01309E  6FDD               	movwf	Button_Poll@Pin& (0+255),b
 25401                           
 25402                           ; BSR set to: 0
 25403                           ;Button.c: 61: if (pButton->mState == Pin)
 25404  0130A0  C0D5  FFD9         	movff	Button_Poll@pButton,fsr2l
 25405  0130A4  C0D6  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 25406  0130A8  0100               	movlb	0	; () banked
 25407  0130AA  51DD               	movf	Button_Poll@Pin& (0+255),w,b
 25408  0130AC  18DE               	xorwf	postinc2,w,c
 25409  0130AE  A4D8               	btfss	status,2,c
 25410  0130B0  D021               	goto	l11
 25411                           
 25412                           ; BSR set to: 0
 25413                           ;Button.c: 62: {
 25414                           ;Button.c: 65: if(pIncrement > pButton->mCount)
 25415  0130B2  0100               	movlb	0	; () banked
 25416  0130B4  EE20 F001          	lfsr	2,1
 25417  0130B8  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25418  0130BA  26D9               	addwf	fsr2l,f,c
 25419  0130BC  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25420  0130BE  22DA               	addwfc	fsr2h,f,c
 25421  0130C0  0100               	movlb	0	; () banked
 25422  0130C2  51D7               	movf	Button_Poll@pIncrement& (0+255),w,b
 25423  0130C4  5CDE               	subwf	postinc2,w,c
 25424  0130C6  B0D8               	btfsc	status,0,c
 25425  0130C8  D00A               	goto	l12
 25426                           
 25427                           ; BSR set to: 0
 25428                           ;Button.c: 66: pButton->mCount = 0;
 25429  0130CA  0100               	movlb	0	; () banked
 25430  0130CC  EE20 F001          	lfsr	2,1
 25431  0130D0  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25432  0130D2  26D9               	addwf	fsr2l,f,c
 25433  0130D4  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25434  0130D6  22DA               	addwfc	fsr2h,f,c
 25435  0130D8  0E00               	movlw	0
 25436  0130DA  6EDF               	movwf	indf2,c
 25437  0130DC  0012               	return	
 25438  0130DE                     l12:
 25439                           
 25440                           ; BSR set to: 0
 25441                           ;Button.c: 67: else
 25442                           ;Button.c: 68: pButton->mCount -= pIncrement;
 25443                           
 25444                           ; BSR set to: 0
 25445  0130DE  0100               	movlb	0	; () banked
 25446  0130E0  EE20 F001          	lfsr	2,1
 25447  0130E4  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25448  0130E6  26D9               	addwf	fsr2l,f,c
 25449  0130E8  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25450  0130EA  22DA               	addwfc	fsr2h,f,c
 25451  0130EC  0100               	movlb	0	; () banked
 25452  0130EE  51D7               	movf	Button_Poll@pIncrement& (0+255),w,b
 25453  0130F0  5EDF               	subwf	indf2,f,c
 25454                           
 25455                           ; BSR set to: 0
 25456                           ;Button.c: 69: }
 25457  0130F2  0012               	return	
 25458  0130F4                     l11:
 25459                           
 25460                           ; BSR set to: 0
 25461                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
 25462                           
 25463                           ; BSR set to: 0
 25464  0130F4  0100               	movlb	0	; () banked
 25465  0130F6  EE20 F001          	lfsr	2,1
 25466  0130FA  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25467  0130FC  26D9               	addwf	fsr2l,f,c
 25468  0130FE  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25469  013100  22DA               	addwfc	fsr2h,f,c
 25470  013102  50DF               	movf	indf2,w,c
 25471  013104  0100               	movlb	0	; () banked
 25472  013106  6FD8               	movwf	??_Button_Poll& (0+255),b
 25473  013108  6BD9               	clrf	(??_Button_Poll+1)& (0+255),b
 25474  01310A  0100               	movlb	0	; () banked
 25475  01310C  51D7               	movf	Button_Poll@pIncrement& (0+255),w,b
 25476  01310E  0100               	movlb	0	; () banked
 25477  013110  27D8               	addwf	??_Button_Poll& (0+255),f,b
 25478  013112  0E00               	movlw	0
 25479  013114  23D9               	addwfc	(??_Button_Poll+1)& (0+255),f,b
 25480  013116  0100               	movlb	0	; () banked
 25481  013118  EE20 F001          	lfsr	2,1
 25482  01311C  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25483  01311E  26D9               	addwf	fsr2l,f,c
 25484  013120  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25485  013122  22DA               	addwfc	fsr2h,f,c
 25486  013124  50DF               	movf	indf2,w,c
 25487  013126  0100               	movlb	0	; () banked
 25488  013128  6FDA               	movwf	(??_Button_Poll+2)& (0+255),b
 25489  01312A  6BDB               	clrf	(??_Button_Poll+3)& (0+255),b
 25490  01312C  0100               	movlb	0	; () banked
 25491  01312E  51D8               	movf	??_Button_Poll& (0+255),w,b
 25492  013130  0100               	movlb	0	; () banked
 25493  013132  5DDA               	subwf	(??_Button_Poll+2)& (0+255),w,b
 25494  013134  0100               	movlb	0	; () banked
 25495  013136  51DB               	movf	(??_Button_Poll+3)& (0+255),w,b
 25496  013138  0A80               	xorlw	128
 25497  01313A  0100               	movlb	0	; () banked
 25498  01313C  6FDC               	movwf	(??_Button_Poll+4)& (0+255),b
 25499  01313E  0100               	movlb	0	; () banked
 25500  013140  51D9               	movf	(??_Button_Poll+1)& (0+255),w,b
 25501  013142  0A80               	xorlw	128
 25502  013144  0100               	movlb	0	; () banked
 25503  013146  59DC               	subwfb	(??_Button_Poll+4)& (0+255),w,b
 25504  013148  B0D8               	btfsc	status,0,c
 25505  01314A  0012               	return	
 25506                           
 25507                           ; BSR set to: 0
 25508                           ;Button.c: 73: {
 25509                           ;Button.c: 75: pButton->mCount += pIncrement;
 25510  01314C  0100               	movlb	0	; () banked
 25511  01314E  EE20 F001          	lfsr	2,1
 25512  013152  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25513  013154  26D9               	addwf	fsr2l,f,c
 25514  013156  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25515  013158  22DA               	addwfc	fsr2h,f,c
 25516  01315A  0100               	movlb	0	; () banked
 25517  01315C  51D7               	movf	Button_Poll@pIncrement& (0+255),w,b
 25518  01315E  26DF               	addwf	indf2,f,c
 25519                           
 25520                           ; BSR set to: 0
 25521                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
 25522  013160  0100               	movlb	0	; () banked
 25523  013162  EE20 F002          	lfsr	2,2
 25524  013166  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25525  013168  26D9               	addwf	fsr2l,f,c
 25526  01316A  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25527  01316C  22DA               	addwfc	fsr2h,f,c
 25528  01316E  0100               	movlb	0	; () banked
 25529  013170  EE10 F001          	lfsr	1,1
 25530  013174  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25531  013176  26E1               	addwf	fsr1l,f,c
 25532  013178  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25533  01317A  22E2               	addwfc	fsr1h,f,c
 25534  01317C  50E7               	movf	indf1,w,c
 25535  01317E  0100               	movlb	0	; () banked
 25536  013180  6FDA               	movwf	(??_Button_Poll+2)& (0+255),b
 25537  013182  6BDB               	clrf	(??_Button_Poll+3)& (0+255),b
 25538  013184  50DE               	movf	postinc2,w,c
 25539  013186  0100               	movlb	0	; () banked
 25540  013188  5DDA               	subwf	(??_Button_Poll+2)& (0+255),w,b
 25541  01318A  50DE               	movf	postinc2,w,c
 25542  01318C  0100               	movlb	0	; () banked
 25543  01318E  59DB               	subwfb	(??_Button_Poll+3)& (0+255),w,b
 25544  013190  A0D8               	btfss	status,0,c
 25545  013192  0012               	return	
 25546                           
 25547                           ; BSR set to: 0
 25548                           ;Button.c: 77: {
 25549                           ;Button.c: 79: pButton->mState = Pin;
 25550  013194  C0D5  FFD9         	movff	Button_Poll@pButton,fsr2l
 25551  013198  C0D6  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 25552  01319C  C0DD  FFDF         	movff	Button_Poll@Pin,indf2
 25553                           
 25554                           ; BSR set to: 0
 25555                           ;Button.c: 80: pButton->mCount = 0;
 25556  0131A0  0100               	movlb	0	; () banked
 25557  0131A2  EE20 F001          	lfsr	2,1
 25558  0131A6  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25559  0131A8  26D9               	addwf	fsr2l,f,c
 25560  0131AA  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25561  0131AC  22DA               	addwfc	fsr2h,f,c
 25562  0131AE  0E00               	movlw	0
 25563  0131B0  6EDF               	movwf	indf2,c
 25564                           
 25565                           ; BSR set to: 0
 25566                           ;Button.c: 83: pButton->mFunction(Pin);
 25567  0131B2  0100               	movlb	0	; () banked
 25568  0131B4  EE20 F004          	lfsr	2,4
 25569  0131B8  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25570  0131BA  26D9               	addwf	fsr2l,f,c
 25571  0131BC  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25572  0131BE  22DA               	addwfc	fsr2h,f,c
 25573  0131C0  D801               	call	u9648
 25574  0131C2  0012               	return	
 25575  0131C4                     u9648:
 25576  0131C4  0005               	push	
 25577  0131C6  6EFA               	movwf	pclath,c
 25578  0131C8  50DE               	movf	postinc2,w,c
 25579  0131CA  6EFD               	movwf	tosl,c
 25580  0131CC  50DE               	movf	postinc2,w,c
 25581  0131CE  6EFE               	movwf	tosh,c
 25582  0131D0  50DE               	movf	postinc2,w,c
 25583  0131D2  6EFF               	movwf	tosu,c
 25584  0131D4  50FA               	movf	pclath,w,c
 25585  0131D6  0100               	movlb	0	; () banked
 25586  0131D8  51DD               	movf	Button_Poll@Pin& (0+255),w,b
 25587  0131DA  0012               	return		;indir
 25588  0131DC                     __end_of_Button_Poll:
 25589                           	opt stack 0
 25590                           tosu	equ	0xFFF
 25591                           tosh	equ	0xFFE
 25592                           tosl	equ	0xFFD
 25593                           pclath	equ	0xFFA
 25594                           tblptru	equ	0xFF8
 25595                           tblptrh	equ	0xFF7
 25596                           tblptrl	equ	0xFF6
 25597                           tablat	equ	0xFF5
 25598                           prodh	equ	0xFF4
 25599                           prodl	equ	0xFF3
 25600                           intcon	equ	0xFF2
 25601                           postinc0	equ	0xFEE
 25602                           wreg	equ	0xFE8
 25603                           indf1	equ	0xFE7
 25604                           postdec1	equ	0xFE5
 25605                           fsr1h	equ	0xFE2
 25606                           fsr1l	equ	0xFE1
 25607                           indf2	equ	0xFDF
 25608                           postinc2	equ	0xFDE
 25609                           postdec2	equ	0xFDD
 25610                           plusw2	equ	0xFDB
 25611                           fsr2h	equ	0xFDA
 25612                           fsr2l	equ	0xFD9
 25613                           status	equ	0xFD8
 25614                           
 25615 ;; *************** function _MXK_DIPSwitch *****************
 25616 ;; Defined at:
 25617 ;;		line 24 in file "Library/MXK.c"
 25618 ;; Parameters:    Size  Location     Type
 25619 ;;		None
 25620 ;; Auto vars:     Size  Location     Type
 25621 ;;		None
 25622 ;; Return value:  Size  Location     Type
 25623 ;;                  1    wreg      unsigned char 
 25624 ;; Registers used:
 25625 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25626 ;; Tracked objects:
 25627 ;;		On entry : 0/0
 25628 ;;		On exit  : 0/0
 25629 ;;		Unchanged: 0/0
 25630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25634 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25635 ;;Total ram usage:        0 bytes
 25636 ;; Hardware stack levels used:    1
 25637 ;; Hardware stack levels required when called:    8
 25638 ;; This function calls:
 25639 ;;		_Port_GetQuad
 25640 ;; This function is called by:
 25641 ;;		_FunctInitButton
 25642 ;;		_Button_Poll
 25643 ;;		_getMode
 25644 ;; This function uses a non-reentrant model
 25645 ;;
 25646                           
 25647                           	psect	text129
 25648  0164AC                     __ptext129:
 25649                           	opt stack 0
 25650  0164AC                     _MXK_DIPSwitch:
 25651                           	opt stack 18
 25652                           
 25653                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
 25654                           
 25655                           ;incstack = 0
 25656  0164AC  0E9D               	movlw	low _PortD
 25657  0164AE  0100               	movlb	0	; () banked
 25658  0164B0  6FBA               	movwf	Port_GetQuad@pInput& (0+255),b
 25659  0164B2  0E00               	movlw	high _PortD
 25660  0164B4  0100               	movlb	0	; () banked
 25661  0164B6  6FBB               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 25662  0164B8  0E00               	movlw	0
 25663  0164BA  0100               	movlb	0	; () banked
 25664  0164BC  6FBC               	movwf	Port_GetQuad@pQuad& (0+255),b
 25665  0164BE  ECD7  F0AD         	call	_Port_GetQuad
 25666  0164C2  0012               	return	
 25667  0164C4                     __end_of_MXK_DIPSwitch:
 25668                           	opt stack 0
 25669                           tosu	equ	0xFFF
 25670                           tosh	equ	0xFFE
 25671                           tosl	equ	0xFFD
 25672                           pclath	equ	0xFFA
 25673                           tblptru	equ	0xFF8
 25674                           tblptrh	equ	0xFF7
 25675                           tblptrl	equ	0xFF6
 25676                           tablat	equ	0xFF5
 25677                           prodh	equ	0xFF4
 25678                           prodl	equ	0xFF3
 25679                           intcon	equ	0xFF2
 25680                           postinc0	equ	0xFEE
 25681                           wreg	equ	0xFE8
 25682                           indf1	equ	0xFE7
 25683                           postdec1	equ	0xFE5
 25684                           fsr1h	equ	0xFE2
 25685                           fsr1l	equ	0xFE1
 25686                           indf2	equ	0xFDF
 25687                           postinc2	equ	0xFDE
 25688                           postdec2	equ	0xFDD
 25689                           plusw2	equ	0xFDB
 25690                           fsr2h	equ	0xFDA
 25691                           fsr2l	equ	0xFD9
 25692                           status	equ	0xFD8
 25693                           
 25694 ;; *************** function _HMI_DIPSwitch *****************
 25695 ;; Defined at:
 25696 ;;		line 47 in file "HMI.c"
 25697 ;; Parameters:    Size  Location     Type
 25698 ;;		None
 25699 ;; Auto vars:     Size  Location     Type
 25700 ;;		None
 25701 ;; Return value:  Size  Location     Type
 25702 ;;                  1    wreg      unsigned char 
 25703 ;; Registers used:
 25704 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25705 ;; Tracked objects:
 25706 ;;		On entry : 0/0
 25707 ;;		On exit  : 0/0
 25708 ;;		Unchanged: 0/0
 25709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25713 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25714 ;;Total ram usage:        0 bytes
 25715 ;; Hardware stack levels used:    1
 25716 ;; Hardware stack levels required when called:    8
 25717 ;; This function calls:
 25718 ;;		_Port_GetQuad
 25719 ;; This function is called by:
 25720 ;;		_HMI_Init
 25721 ;;		_Button_Poll
 25722 ;;		_getMode
 25723 ;; This function uses a non-reentrant model
 25724 ;;
 25725                           
 25726                           	psect	text130
 25727  0164C4                     __ptext130:
 25728                           	opt stack 0
 25729  0164C4                     _HMI_DIPSwitch:
 25730                           	opt stack 18
 25731                           
 25732                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
 25733                           
 25734                           ;incstack = 0
 25735  0164C4  0E93               	movlw	low _PortE
 25736  0164C6  0100               	movlb	0	; () banked
 25737  0164C8  6FBA               	movwf	Port_GetQuad@pInput& (0+255),b
 25738  0164CA  0E00               	movlw	high _PortE
 25739  0164CC  0100               	movlb	0	; () banked
 25740  0164CE  6FBB               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 25741  0164D0  0E00               	movlw	0
 25742  0164D2  0100               	movlb	0	; () banked
 25743  0164D4  6FBC               	movwf	Port_GetQuad@pQuad& (0+255),b
 25744  0164D6  ECD7  F0AD         	call	_Port_GetQuad	;wreg free
 25745  0164DA  0012               	return	
 25746  0164DC                     __end_of_HMI_DIPSwitch:
 25747                           	opt stack 0
 25748                           tosu	equ	0xFFF
 25749                           tosh	equ	0xFFE
 25750                           tosl	equ	0xFFD
 25751                           pclath	equ	0xFFA
 25752                           tblptru	equ	0xFF8
 25753                           tblptrh	equ	0xFF7
 25754                           tblptrl	equ	0xFF6
 25755                           tablat	equ	0xFF5
 25756                           prodh	equ	0xFF4
 25757                           prodl	equ	0xFF3
 25758                           intcon	equ	0xFF2
 25759                           postinc0	equ	0xFEE
 25760                           wreg	equ	0xFE8
 25761                           indf1	equ	0xFE7
 25762                           postdec1	equ	0xFE5
 25763                           fsr1h	equ	0xFE2
 25764                           fsr1l	equ	0xFE1
 25765                           indf2	equ	0xFDF
 25766                           postinc2	equ	0xFDE
 25767                           postdec2	equ	0xFDD
 25768                           plusw2	equ	0xFDB
 25769                           fsr2h	equ	0xFDA
 25770                           fsr2l	equ	0xFD9
 25771                           status	equ	0xFD8
 25772                           
 25773 ;; *************** function _HMI_DownSwitch *****************
 25774 ;; Defined at:
 25775 ;;		line 42 in file "HMI.c"
 25776 ;; Parameters:    Size  Location     Type
 25777 ;;		None
 25778 ;; Auto vars:     Size  Location     Type
 25779 ;;		None
 25780 ;; Return value:  Size  Location     Type
 25781 ;;                  1    wreg      unsigned char 
 25782 ;; Registers used:
 25783 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25784 ;; Tracked objects:
 25785 ;;		On entry : 0/0
 25786 ;;		On exit  : 0/0
 25787 ;;		Unchanged: 0/0
 25788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25792 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25793 ;;Total ram usage:        0 bytes
 25794 ;; Hardware stack levels used:    1
 25795 ;; Hardware stack levels required when called:    8
 25796 ;; This function calls:
 25797 ;;		_Port_GetPin
 25798 ;; This function is called by:
 25799 ;;		_HMI_Init
 25800 ;;		_Button_Poll
 25801 ;;		_getMode
 25802 ;; This function uses a non-reentrant model
 25803 ;;
 25804                           
 25805                           	psect	text131
 25806  0164DC                     __ptext131:
 25807                           	opt stack 0
 25808  0164DC                     _HMI_DownSwitch:
 25809                           	opt stack 18
 25810                           
 25811                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
 25812                           
 25813                           ;incstack = 0
 25814  0164DC  0E93               	movlw	low _PortE
 25815  0164DE  0100               	movlb	0	; () banked
 25816  0164E0  6FBA               	movwf	Port_GetPin@pInput& (0+255),b
 25817  0164E2  0E00               	movlw	high _PortE
 25818  0164E4  0100               	movlb	0	; () banked
 25819  0164E6  6FBB               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 25820  0164E8  0E06               	movlw	6
 25821  0164EA  0100               	movlb	0	; () banked
 25822  0164EC  6FBC               	movwf	Port_GetPin@pPin& (0+255),b
 25823  0164EE  ECAE  F0AE         	call	_Port_GetPin	;wreg free
 25824  0164F2  0012               	return	
 25825  0164F4                     __end_of_HMI_DownSwitch:
 25826                           	opt stack 0
 25827                           tosu	equ	0xFFF
 25828                           tosh	equ	0xFFE
 25829                           tosl	equ	0xFFD
 25830                           pclath	equ	0xFFA
 25831                           tblptru	equ	0xFF8
 25832                           tblptrh	equ	0xFF7
 25833                           tblptrl	equ	0xFF6
 25834                           tablat	equ	0xFF5
 25835                           prodh	equ	0xFF4
 25836                           prodl	equ	0xFF3
 25837                           intcon	equ	0xFF2
 25838                           postinc0	equ	0xFEE
 25839                           wreg	equ	0xFE8
 25840                           indf1	equ	0xFE7
 25841                           postdec1	equ	0xFE5
 25842                           fsr1h	equ	0xFE2
 25843                           fsr1l	equ	0xFE1
 25844                           indf2	equ	0xFDF
 25845                           postinc2	equ	0xFDE
 25846                           postdec2	equ	0xFDD
 25847                           plusw2	equ	0xFDB
 25848                           fsr2h	equ	0xFDA
 25849                           fsr2l	equ	0xFD9
 25850                           status	equ	0xFD8
 25851                           
 25852 ;; *************** function _HMI_UpSwitch *****************
 25853 ;; Defined at:
 25854 ;;		line 37 in file "HMI.c"
 25855 ;; Parameters:    Size  Location     Type
 25856 ;;		None
 25857 ;; Auto vars:     Size  Location     Type
 25858 ;;		None
 25859 ;; Return value:  Size  Location     Type
 25860 ;;                  1    wreg      unsigned char 
 25861 ;; Registers used:
 25862 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25863 ;; Tracked objects:
 25864 ;;		On entry : 0/0
 25865 ;;		On exit  : 0/0
 25866 ;;		Unchanged: 0/0
 25867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25869 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25871 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25872 ;;Total ram usage:        0 bytes
 25873 ;; Hardware stack levels used:    1
 25874 ;; Hardware stack levels required when called:    8
 25875 ;; This function calls:
 25876 ;;		_Port_GetPin
 25877 ;; This function is called by:
 25878 ;;		_HMI_Init
 25879 ;;		_Button_Poll
 25880 ;;		_getMode
 25881 ;; This function uses a non-reentrant model
 25882 ;;
 25883                           
 25884                           	psect	text132
 25885  0164F4                     __ptext132:
 25886                           	opt stack 0
 25887  0164F4                     _HMI_UpSwitch:
 25888                           	opt stack 18
 25889                           
 25890                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
 25891                           
 25892                           ;incstack = 0
 25893  0164F4  0E93               	movlw	low _PortE
 25894  0164F6  0100               	movlb	0	; () banked
 25895  0164F8  6FBA               	movwf	Port_GetPin@pInput& (0+255),b
 25896  0164FA  0E00               	movlw	high _PortE
 25897  0164FC  0100               	movlb	0	; () banked
 25898  0164FE  6FBB               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 25899  016500  0E07               	movlw	7
 25900  016502  0100               	movlb	0	; () banked
 25901  016504  6FBC               	movwf	Port_GetPin@pPin& (0+255),b
 25902  016506  ECAE  F0AE         	call	_Port_GetPin	;wreg free
 25903  01650A  0012               	return	
 25904  01650C                     __end_of_HMI_UpSwitch:
 25905                           	opt stack 0
 25906                           tosu	equ	0xFFF
 25907                           tosh	equ	0xFFE
 25908                           tosl	equ	0xFFD
 25909                           pclath	equ	0xFFA
 25910                           tblptru	equ	0xFF8
 25911                           tblptrh	equ	0xFF7
 25912                           tblptrl	equ	0xFF6
 25913                           tablat	equ	0xFF5
 25914                           prodh	equ	0xFF4
 25915                           prodl	equ	0xFF3
 25916                           intcon	equ	0xFF2
 25917                           postinc0	equ	0xFEE
 25918                           wreg	equ	0xFE8
 25919                           indf1	equ	0xFE7
 25920                           postdec1	equ	0xFE5
 25921                           fsr1h	equ	0xFE2
 25922                           fsr1l	equ	0xFE1
 25923                           indf2	equ	0xFDF
 25924                           postinc2	equ	0xFDE
 25925                           postdec2	equ	0xFDD
 25926                           plusw2	equ	0xFDB
 25927                           fsr2h	equ	0xFDA
 25928                           fsr2l	equ	0xFD9
 25929                           status	equ	0xFD8
 25930                           
 25931 ;; *************** function _HMI_RightSwitch *****************
 25932 ;; Defined at:
 25933 ;;		line 32 in file "HMI.c"
 25934 ;; Parameters:    Size  Location     Type
 25935 ;;		None
 25936 ;; Auto vars:     Size  Location     Type
 25937 ;;		None
 25938 ;; Return value:  Size  Location     Type
 25939 ;;                  1    wreg      unsigned char 
 25940 ;; Registers used:
 25941 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25942 ;; Tracked objects:
 25943 ;;		On entry : 0/0
 25944 ;;		On exit  : 0/0
 25945 ;;		Unchanged: 0/0
 25946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25948 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25950 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25951 ;;Total ram usage:        0 bytes
 25952 ;; Hardware stack levels used:    1
 25953 ;; Hardware stack levels required when called:    8
 25954 ;; This function calls:
 25955 ;;		_Port_GetPin
 25956 ;; This function is called by:
 25957 ;;		_HMI_Init
 25958 ;;		_Button_Poll
 25959 ;;		_getMode
 25960 ;; This function uses a non-reentrant model
 25961 ;;
 25962                           
 25963                           	psect	text133
 25964  01650C                     __ptext133:
 25965                           	opt stack 0
 25966  01650C                     _HMI_RightSwitch:
 25967                           	opt stack 18
 25968                           
 25969                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
 25970                           
 25971                           ;incstack = 0
 25972  01650C  0E93               	movlw	low _PortE
 25973  01650E  0100               	movlb	0	; () banked
 25974  016510  6FBA               	movwf	Port_GetPin@pInput& (0+255),b
 25975  016512  0E00               	movlw	high _PortE
 25976  016514  0100               	movlb	0	; () banked
 25977  016516  6FBB               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 25978  016518  0E04               	movlw	4
 25979  01651A  0100               	movlb	0	; () banked
 25980  01651C  6FBC               	movwf	Port_GetPin@pPin& (0+255),b
 25981  01651E  ECAE  F0AE         	call	_Port_GetPin	;wreg free
 25982  016522  0012               	return	
 25983  016524                     __end_of_HMI_RightSwitch:
 25984                           	opt stack 0
 25985                           tosu	equ	0xFFF
 25986                           tosh	equ	0xFFE
 25987                           tosl	equ	0xFFD
 25988                           pclath	equ	0xFFA
 25989                           tblptru	equ	0xFF8
 25990                           tblptrh	equ	0xFF7
 25991                           tblptrl	equ	0xFF6
 25992                           tablat	equ	0xFF5
 25993                           prodh	equ	0xFF4
 25994                           prodl	equ	0xFF3
 25995                           intcon	equ	0xFF2
 25996                           postinc0	equ	0xFEE
 25997                           wreg	equ	0xFE8
 25998                           indf1	equ	0xFE7
 25999                           postdec1	equ	0xFE5
 26000                           fsr1h	equ	0xFE2
 26001                           fsr1l	equ	0xFE1
 26002                           indf2	equ	0xFDF
 26003                           postinc2	equ	0xFDE
 26004                           postdec2	equ	0xFDD
 26005                           plusw2	equ	0xFDB
 26006                           fsr2h	equ	0xFDA
 26007                           fsr2l	equ	0xFD9
 26008                           status	equ	0xFD8
 26009                           
 26010 ;; *************** function _HMI_LeftSwitch *****************
 26011 ;; Defined at:
 26012 ;;		line 27 in file "HMI.c"
 26013 ;; Parameters:    Size  Location     Type
 26014 ;;		None
 26015 ;; Auto vars:     Size  Location     Type
 26016 ;;		None
 26017 ;; Return value:  Size  Location     Type
 26018 ;;                  1    wreg      unsigned char 
 26019 ;; Registers used:
 26020 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 26021 ;; Tracked objects:
 26022 ;;		On entry : 0/0
 26023 ;;		On exit  : 0/0
 26024 ;;		Unchanged: 0/0
 26025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26029 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26030 ;;Total ram usage:        0 bytes
 26031 ;; Hardware stack levels used:    1
 26032 ;; Hardware stack levels required when called:    8
 26033 ;; This function calls:
 26034 ;;		_Port_GetPin
 26035 ;; This function is called by:
 26036 ;;		_HMI_Init
 26037 ;;		_Button_Poll
 26038 ;;		_getMode
 26039 ;; This function uses a non-reentrant model
 26040 ;;
 26041                           
 26042                           	psect	text134
 26043  016524                     __ptext134:
 26044                           	opt stack 0
 26045  016524                     _HMI_LeftSwitch:
 26046                           	opt stack 18
 26047                           
 26048                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
 26049                           
 26050                           ;incstack = 0
 26051  016524  0E93               	movlw	low _PortE
 26052  016526  0100               	movlb	0	; () banked
 26053  016528  6FBA               	movwf	Port_GetPin@pInput& (0+255),b
 26054  01652A  0E00               	movlw	high _PortE
 26055  01652C  0100               	movlb	0	; () banked
 26056  01652E  6FBB               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 26057  016530  0E05               	movlw	5
 26058  016532  0100               	movlb	0	; () banked
 26059  016534  6FBC               	movwf	Port_GetPin@pPin& (0+255),b
 26060  016536  ECAE  F0AE         	call	_Port_GetPin	;wreg free
 26061  01653A  0012               	return	
 26062  01653C                     __end_of_HMI_LeftSwitch:
 26063                           	opt stack 0
 26064                           tosu	equ	0xFFF
 26065                           tosh	equ	0xFFE
 26066                           tosl	equ	0xFFD
 26067                           pclath	equ	0xFFA
 26068                           tblptru	equ	0xFF8
 26069                           tblptrh	equ	0xFF7
 26070                           tblptrl	equ	0xFF6
 26071                           tablat	equ	0xFF5
 26072                           prodh	equ	0xFF4
 26073                           prodl	equ	0xFF3
 26074                           intcon	equ	0xFF2
 26075                           postinc0	equ	0xFEE
 26076                           wreg	equ	0xFE8
 26077                           indf1	equ	0xFE7
 26078                           postdec1	equ	0xFE5
 26079                           fsr1h	equ	0xFE2
 26080                           fsr1l	equ	0xFE1
 26081                           indf2	equ	0xFDF
 26082                           postinc2	equ	0xFDE
 26083                           postdec2	equ	0xFDD
 26084                           plusw2	equ	0xFDB
 26085                           fsr2h	equ	0xFDA
 26086                           fsr2l	equ	0xFD9
 26087                           status	equ	0xFD8
 26088                           
 26089 ;; *************** function _MXK_TestButton *****************
 26090 ;; Defined at:
 26091 ;;		line 14 in file "Library/MXK.c"
 26092 ;; Parameters:    Size  Location     Type
 26093 ;;		None
 26094 ;; Auto vars:     Size  Location     Type
 26095 ;;		None
 26096 ;; Return value:  Size  Location     Type
 26097 ;;                  1    wreg      unsigned char 
 26098 ;; Registers used:
 26099 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 26100 ;; Tracked objects:
 26101 ;;		On entry : 0/0
 26102 ;;		On exit  : 0/0
 26103 ;;		Unchanged: 0/0
 26104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26108 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26109 ;;Total ram usage:        0 bytes
 26110 ;; Hardware stack levels used:    1
 26111 ;; Hardware stack levels required when called:    8
 26112 ;; This function calls:
 26113 ;;		_Port_GetPin
 26114 ;; This function is called by:
 26115 ;;		_FunctInitButton
 26116 ;;		_Button_Poll
 26117 ;;		_getMode
 26118 ;; This function uses a non-reentrant model
 26119 ;;
 26120                           
 26121                           	psect	text135
 26122  01653C                     __ptext135:
 26123                           	opt stack 0
 26124  01653C                     _MXK_TestButton:
 26125                           	opt stack 18
 26126                           
 26127                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
 26128                           
 26129                           ;incstack = 0
 26130  01653C  0EAA               	movlw	low _PortB
 26131  01653E  0100               	movlb	0	; () banked
 26132  016540  6FBA               	movwf	Port_GetPin@pInput& (0+255),b
 26133  016542  0E03               	movlw	high _PortB
 26134  016544  0100               	movlb	0	; () banked
 26135  016546  6FBB               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 26136  016548  0E04               	movlw	4
 26137  01654A  0100               	movlb	0	; () banked
 26138  01654C  6FBC               	movwf	Port_GetPin@pPin& (0+255),b
 26139  01654E  ECAE  F0AE         	call	_Port_GetPin	;wreg free
 26140  016552  0012               	return	
 26141  016554                     __end_of_MXK_TestButton:
 26142                           	opt stack 0
 26143                           tosu	equ	0xFFF
 26144                           tosh	equ	0xFFE
 26145                           tosl	equ	0xFFD
 26146                           pclath	equ	0xFFA
 26147                           tblptru	equ	0xFF8
 26148                           tblptrh	equ	0xFF7
 26149                           tblptrl	equ	0xFF6
 26150                           tablat	equ	0xFF5
 26151                           prodh	equ	0xFF4
 26152                           prodl	equ	0xFF3
 26153                           intcon	equ	0xFF2
 26154                           postinc0	equ	0xFEE
 26155                           wreg	equ	0xFE8
 26156                           indf1	equ	0xFE7
 26157                           postdec1	equ	0xFE5
 26158                           fsr1h	equ	0xFE2
 26159                           fsr1l	equ	0xFE1
 26160                           indf2	equ	0xFDF
 26161                           postinc2	equ	0xFDE
 26162                           postdec2	equ	0xFDD
 26163                           plusw2	equ	0xFDB
 26164                           fsr2h	equ	0xFDA
 26165                           fsr2l	equ	0xFD9
 26166                           status	equ	0xFD8
 26167                           
 26168 ;; *************** function _Port_GetQuad *****************
 26169 ;; Defined at:
 26170 ;;		line 498 in file "Library/Port.c"
 26171 ;; Parameters:    Size  Location     Type
 26172 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 26173 ;;		 -> PortE(10), PortD(10), 
 26174 ;;  pQuad           1    2[BANK0 ] enum E6776
 26175 ;; Auto vars:     Size  Location     Type
 26176 ;;  Output          1    5[BANK0 ] unsigned char 
 26177 ;; Return value:  Size  Location     Type
 26178 ;;                  1    wreg      unsigned char 
 26179 ;; Registers used:
 26180 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 26181 ;; Tracked objects:
 26182 ;;		On entry : 0/0
 26183 ;;		On exit  : 0/0
 26184 ;;		Unchanged: 0/0
 26185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26186 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26187 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26188 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26189 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26190 ;;Total ram usage:        6 bytes
 26191 ;; Hardware stack levels used:    1
 26192 ;; Hardware stack levels required when called:    7
 26193 ;; This function calls:
 26194 ;;		Nothing
 26195 ;; This function is called by:
 26196 ;;		_HMI_DIPSwitch
 26197 ;;		_MXK_DIPSwitch
 26198 ;;		_Port_ToggleQuad
 26199 ;; This function uses a non-reentrant model
 26200 ;;
 26201                           
 26202                           	psect	text136
 26203  015BAE                     __ptext136:
 26204                           	opt stack 0
 26205  015BAE                     _Port_GetQuad:
 26206                           	opt stack 18
 26207                           
 26208                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
 26209                           
 26210                           ;incstack = 0
 26211  015BAE  0100               	movlb	0	; () banked
 26212  015BB0  EE20 F006          	lfsr	2,6
 26213  015BB4  51BA               	movf	Port_GetQuad@pInput& (0+255),w,b
 26214  015BB6  26D9               	addwf	fsr2l,f,c
 26215  015BB8  51BB               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
 26216  015BBA  22DA               	addwfc	fsr2h,f,c
 26217  015BBC  CFDE F0BD          	movff	postinc2,??_Port_GetQuad
 26218  015BC0  CFDD F0BE          	movff	postdec2,??_Port_GetQuad+1
 26219  015BC4  C0BD  FFD9         	movff	??_Port_GetQuad,fsr2l
 26220  015BC8  C0BE  FFDA         	movff	??_Port_GetQuad+1,fsr2h
 26221  015BCC  50DF               	movf	indf2,w,c
 26222  015BCE  0100               	movlb	0	; () banked
 26223  015BD0  6FBF               	movwf	Port_GetQuad@Output& (0+255),b
 26224                           
 26225                           ; BSR set to: 0
 26226                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
 26227  015BD2  0100               	movlb	0	; () banked
 26228  015BD4  51BC               	movf	Port_GetQuad@pQuad& (0+255),w,b
 26229  015BD6  0D04               	mullw	4
 26230  015BD8  28F3               	incf	prodl,w,c
 26231  015BDA  0100               	movlb	0	; () banked
 26232  015BDC  6FBD               	movwf	??_Port_GetQuad& (0+255),b
 26233  015BDE  D003               	goto	u9140
 26234  015BE0                     u9145:
 26235  015BE0  0100               	movlb	0	; () banked
 26236  015BE2  90D8               	bcf	status,0,c
 26237  015BE4  33BF               	rrcf	Port_GetQuad@Output& (0+255),f,b
 26238  015BE6                     u9140:
 26239  015BE6  0100               	movlb	0	; () banked
 26240  015BE8  2FBD               	decfsz	??_Port_GetQuad& (0+255),f,b
 26241  015BEA  D7FA               	goto	u9145
 26242                           
 26243                           ;Port.c: 502: Output &= 0xF;
 26244  015BEC  0E0F               	movlw	15
 26245  015BEE  0100               	movlb	0	; () banked
 26246  015BF0  17BF               	andwf	Port_GetQuad@Output& (0+255),f,b
 26247                           
 26248                           ; BSR set to: 0
 26249                           ;Port.c: 503: return Output;
 26250  015BF2  0100               	movlb	0	; () banked
 26251  015BF4  51BF               	movf	Port_GetQuad@Output& (0+255),w,b
 26252  015BF6  0012               	return	
 26253  015BF8                     __end_of_Port_GetQuad:
 26254                           	opt stack 0
 26255                           tosu	equ	0xFFF
 26256                           tosh	equ	0xFFE
 26257                           tosl	equ	0xFFD
 26258                           pclath	equ	0xFFA
 26259                           tblptru	equ	0xFF8
 26260                           tblptrh	equ	0xFF7
 26261                           tblptrl	equ	0xFF6
 26262                           tablat	equ	0xFF5
 26263                           prodh	equ	0xFF4
 26264                           prodl	equ	0xFF3
 26265                           intcon	equ	0xFF2
 26266                           postinc0	equ	0xFEE
 26267                           wreg	equ	0xFE8
 26268                           indf1	equ	0xFE7
 26269                           postdec1	equ	0xFE5
 26270                           fsr1h	equ	0xFE2
 26271                           fsr1l	equ	0xFE1
 26272                           indf2	equ	0xFDF
 26273                           postinc2	equ	0xFDE
 26274                           postdec2	equ	0xFDD
 26275                           plusw2	equ	0xFDB
 26276                           fsr2h	equ	0xFDA
 26277                           fsr2l	equ	0xFD9
 26278                           status	equ	0xFD8
 26279                           
 26280 ;; *************** function _Event_DIPSwitch *****************
 26281 ;; Defined at:
 26282 ;;		line 22 in file "Events.c"
 26283 ;; Parameters:    Size  Location     Type
 26284 ;;  pState          1    wreg     unsigned char 
 26285 ;; Auto vars:     Size  Location     Type
 26286 ;;  pState          1   25[BANK0 ] unsigned char 
 26287 ;;  Bar             1   26[BANK0 ] unsigned char 
 26288 ;; Return value:  Size  Location     Type
 26289 ;;                  1    wreg      void 
 26290 ;; Registers used:
 26291 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26292 ;; Tracked objects:
 26293 ;;		On entry : 0/0
 26294 ;;		On exit  : 0/0
 26295 ;;		Unchanged: 0/0
 26296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26298 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26300 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26301 ;;Total ram usage:        2 bytes
 26302 ;; Hardware stack levels used:    1
 26303 ;; Hardware stack levels required when called:   13
 26304 ;; This function calls:
 26305 ;;		_HMI_GetBar
 26306 ;;		_HMI_SetBar
 26307 ;;		_LED_Toggle
 26308 ;; This function is called by:
 26309 ;;		_FunctInitButton
 26310 ;;		_Button_Poll
 26311 ;; This function uses a non-reentrant model
 26312 ;;
 26313                           
 26314                           	psect	text137
 26315  0161B2                     __ptext137:
 26316                           	opt stack 0
 26317  0161B2                     _Event_DIPSwitch:
 26318                           	opt stack 13
 26319                           
 26320                           ; BSR set to: 0
 26321                           ;incstack = 0
 26322                           ;Event_DIPSwitch@pState stored from wreg
 26323  0161B2  0100               	movlb	0	; () banked
 26324  0161B4  6FD3               	movwf	Event_DIPSwitch@pState& (0+255),b
 26325                           
 26326                           ;Events.c: 24: UINT8 Bar = HMI_GetBar();
 26327  0161B6  EC4E  F0B3         	call	_HMI_GetBar	;wreg free
 26328  0161BA  0100               	movlb	0	; () banked
 26329  0161BC  6FD4               	movwf	Event_DIPSwitch@Bar& (0+255),b
 26330                           
 26331                           ; BSR set to: 0
 26332                           ;Events.c: 25: Bar &= 0x0F;
 26333  0161BE  0E0F               	movlw	15
 26334  0161C0  0100               	movlb	0	; () banked
 26335  0161C2  17D4               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
 26336                           
 26337                           ; BSR set to: 0
 26338                           ;Events.c: 26: pState <<= 4;
 26339  0161C4  0100               	movlb	0	; () banked
 26340  0161C6  3BD3               	swapf	Event_DIPSwitch@pState& (0+255),f,b
 26341  0161C8  0EF0               	movlw	240
 26342  0161CA  17D3               	andwf	Event_DIPSwitch@pState& (0+255),f,b
 26343                           
 26344                           ; BSR set to: 0
 26345                           ;Events.c: 29: HMI_SetBar(pState | Bar);
 26346  0161CC  0100               	movlb	0	; () banked
 26347  0161CE  51D3               	movf	Event_DIPSwitch@pState& (0+255),w,b
 26348  0161D0  0100               	movlb	0	; () banked
 26349  0161D2  11D4               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
 26350  0161D4  EC30  F0B3         	call	_HMI_SetBar
 26351                           
 26352                           ;Events.c: 32: LED_Toggle(eLED1);
 26353  0161D8  0E00               	movlw	0
 26354  0161DA  EC44  F0AE         	call	_LED_Toggle
 26355  0161DE  0012               	return		;funcret
 26356  0161E0                     __end_of_Event_DIPSwitch:
 26357                           	opt stack 0
 26358                           tosu	equ	0xFFF
 26359                           tosh	equ	0xFFE
 26360                           tosl	equ	0xFFD
 26361                           pclath	equ	0xFFA
 26362                           tblptru	equ	0xFF8
 26363                           tblptrh	equ	0xFF7
 26364                           tblptrl	equ	0xFF6
 26365                           tablat	equ	0xFF5
 26366                           prodh	equ	0xFF4
 26367                           prodl	equ	0xFF3
 26368                           intcon	equ	0xFF2
 26369                           postinc0	equ	0xFEE
 26370                           wreg	equ	0xFE8
 26371                           indf1	equ	0xFE7
 26372                           postdec1	equ	0xFE5
 26373                           fsr1h	equ	0xFE2
 26374                           fsr1l	equ	0xFE1
 26375                           indf2	equ	0xFDF
 26376                           postinc2	equ	0xFDE
 26377                           postdec2	equ	0xFDD
 26378                           plusw2	equ	0xFDB
 26379                           fsr2h	equ	0xFDA
 26380                           fsr2l	equ	0xFD9
 26381                           status	equ	0xFD8
 26382                           
 26383 ;; *************** function _Event_NULL *****************
 26384 ;; Defined at:
 26385 ;;		line 9 in file "Events.c"
 26386 ;; Parameters:    Size  Location     Type
 26387 ;;  pState          1    wreg     unsigned char 
 26388 ;; Auto vars:     Size  Location     Type
 26389 ;;  pState          1    0[COMRAM] unsigned char 
 26390 ;; Return value:  Size  Location     Type
 26391 ;;                  1    wreg      void 
 26392 ;; Registers used:
 26393 ;;		wreg
 26394 ;; Tracked objects:
 26395 ;;		On entry : 0/0
 26396 ;;		On exit  : 0/0
 26397 ;;		Unchanged: 0/0
 26398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26402 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26403 ;;Total ram usage:        0 bytes
 26404 ;; Hardware stack levels used:    1
 26405 ;; Hardware stack levels required when called:    7
 26406 ;; This function calls:
 26407 ;;		Nothing
 26408 ;; This function is called by:
 26409 ;;		_HMI_Init
 26410 ;;		_Button_Poll
 26411 ;; This function uses a non-reentrant model
 26412 ;;
 26413                           
 26414                           	psect	text138
 26415  001404                     __ptext138:
 26416                           	opt stack 0
 26417  001404                     _Event_NULL:
 26418                           	opt stack 19
 26419                           
 26420                           ;incstack = 0
 26421  001404  0012               	return		;funcret
 26422  001406                     __end_of_Event_NULL:
 26423                           	opt stack 0
 26424                           tosu	equ	0xFFF
 26425                           tosh	equ	0xFFE
 26426                           tosl	equ	0xFFD
 26427                           pclath	equ	0xFFA
 26428                           tblptru	equ	0xFF8
 26429                           tblptrh	equ	0xFF7
 26430                           tblptrl	equ	0xFF6
 26431                           tablat	equ	0xFF5
 26432                           prodh	equ	0xFF4
 26433                           prodl	equ	0xFF3
 26434                           intcon	equ	0xFF2
 26435                           postinc0	equ	0xFEE
 26436                           wreg	equ	0xFE8
 26437                           indf1	equ	0xFE7
 26438                           postdec1	equ	0xFE5
 26439                           fsr1h	equ	0xFE2
 26440                           fsr1l	equ	0xFE1
 26441                           indf2	equ	0xFDF
 26442                           postinc2	equ	0xFDE
 26443                           postdec2	equ	0xFDD
 26444                           plusw2	equ	0xFDB
 26445                           fsr2h	equ	0xFDA
 26446                           fsr2l	equ	0xFD9
 26447                           status	equ	0xFD8
 26448                           
 26449 ;; *************** function _Event_TestButton *****************
 26450 ;; Defined at:
 26451 ;;		line 52 in file "Events.c"
 26452 ;; Parameters:    Size  Location     Type
 26453 ;;  pState          1    wreg     unsigned char 
 26454 ;; Auto vars:     Size  Location     Type
 26455 ;;  pState          1   25[BANK0 ] unsigned char 
 26456 ;; Return value:  Size  Location     Type
 26457 ;;                  1    wreg      void 
 26458 ;; Registers used:
 26459 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26460 ;; Tracked objects:
 26461 ;;		On entry : 0/0
 26462 ;;		On exit  : 0/0
 26463 ;;		Unchanged: 0/0
 26464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26466 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26468 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26469 ;;Total ram usage:        1 bytes
 26470 ;; Hardware stack levels used:    1
 26471 ;; Hardware stack levels required when called:   13
 26472 ;; This function calls:
 26473 ;;		_HMI_SetButton
 26474 ;;		_HMI_SetNumber
 26475 ;;		_LED_Toggle
 26476 ;; This function is called by:
 26477 ;;		_FunctInitButton
 26478 ;;		_Button_Poll
 26479 ;; This function uses a non-reentrant model
 26480 ;;
 26481                           
 26482                           	psect	text139
 26483  015FA0                     __ptext139:
 26484                           	opt stack 0
 26485  015FA0                     _Event_TestButton:
 26486                           	opt stack 13
 26487                           
 26488                           ;incstack = 0
 26489                           ;Event_TestButton@pState stored from wreg
 26490  015FA0  0100               	movlb	0	; () banked
 26491  015FA2  6FD3               	movwf	Event_TestButton@pState& (0+255),b
 26492                           
 26493                           ;Events.c: 56: static UINT8 j = 0;
 26494                           ;Events.c: 60: if (pState == 0)
 26495  015FA4  0100               	movlb	0	; () banked
 26496  015FA6  51D3               	movf	Event_TestButton@pState& (0+255),w,b
 26497  015FA8  0100               	movlb	0	; () banked
 26498  015FAA  A4D8               	btfss	status,2,c
 26499  015FAC  D013               	goto	l1873
 26500                           
 26501                           ; BSR set to: 0
 26502                           ;Events.c: 61: {
 26503                           ;Events.c: 62: j++;
 26504  015FAE  0100               	movlb	0	; () banked
 26505  015FB0  2B8B               	incf	Event_TestButton@j& (0+255),f,b
 26506                           
 26507                           ; BSR set to: 0
 26508                           ;Events.c: 63: val += j;
 26509  015FB2  0100               	movlb	0	; () banked
 26510  015FB4  518B               	movf	Event_TestButton@j& (0+255),w,b
 26511  015FB6  0100               	movlb	0	; () banked
 26512  015FB8  277F               	addwf	_val& (0+255),f,b
 26513  015FBA  0E00               	movlw	0
 26514  015FBC  2380               	addwfc	(_val+1)& (0+255),f,b
 26515                           
 26516                           ; BSR set to: 0
 26517                           ;Events.c: 64: HMI_SetNumber( val );
 26518  015FBE  C07F  F0D0         	movff	_val,HMI_SetNumber@pInput
 26519  015FC2  C080  F0D1         	movff	_val+1,HMI_SetNumber@pInput+1
 26520  015FC6  EC1C  F0B1         	call	_HMI_SetNumber	;wreg free
 26521                           
 26522                           ;Events.c: 67: HMI_SetButton( j & 3 );
 26523  015FCA  0100               	movlb	0	; () banked
 26524  015FCC  518B               	movf	Event_TestButton@j& (0+255),w,b
 26525  015FCE  0B03               	andlw	3
 26526  015FD0  EC26  F0A6         	call	_HMI_SetButton
 26527  015FD4                     l1873:
 26528                           
 26529                           ;Events.c: 68: }
 26530                           ;Events.c: 72: LED_Toggle(eLED1);
 26531  015FD4  0E00               	movlw	0
 26532  015FD6  EC44  F0AE         	call	_LED_Toggle
 26533  015FDA  0012               	return		;funcret
 26534  015FDC                     __end_of_Event_TestButton:
 26535                           	opt stack 0
 26536                           tosu	equ	0xFFF
 26537                           tosh	equ	0xFFE
 26538                           tosl	equ	0xFFD
 26539                           pclath	equ	0xFFA
 26540                           tblptru	equ	0xFF8
 26541                           tblptrh	equ	0xFF7
 26542                           tblptrl	equ	0xFF6
 26543                           tablat	equ	0xFF5
 26544                           prodh	equ	0xFF4
 26545                           prodl	equ	0xFF3
 26546                           intcon	equ	0xFF2
 26547                           postinc0	equ	0xFEE
 26548                           wreg	equ	0xFE8
 26549                           indf1	equ	0xFE7
 26550                           postdec1	equ	0xFE5
 26551                           fsr1h	equ	0xFE2
 26552                           fsr1l	equ	0xFE1
 26553                           indf2	equ	0xFDF
 26554                           postinc2	equ	0xFDE
 26555                           postdec2	equ	0xFDD
 26556                           plusw2	equ	0xFDB
 26557                           fsr2h	equ	0xFDA
 26558                           fsr2l	equ	0xFD9
 26559                           status	equ	0xFD8
 26560                           
 26561 ;; *************** function _HMI_SetNumber *****************
 26562 ;; Defined at:
 26563 ;;		line 221 in file "HMI.c"
 26564 ;; Parameters:    Size  Location     Type
 26565 ;;  pInput          2   22[BANK0 ] int 
 26566 ;; Auto vars:     Size  Location     Type
 26567 ;;		None
 26568 ;; Return value:  Size  Location     Type
 26569 ;;                  1    wreg      void 
 26570 ;; Registers used:
 26571 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 26572 ;; Tracked objects:
 26573 ;;		On entry : 0/0
 26574 ;;		On exit  : 0/0
 26575 ;;		Unchanged: 0/0
 26576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26577 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26578 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26580 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26581 ;;Total ram usage:        2 bytes
 26582 ;; Hardware stack levels used:    1
 26583 ;; Hardware stack levels required when called:    9
 26584 ;; This function calls:
 26585 ;;		_HMI_SetSegments
 26586 ;;		_itos
 26587 ;; This function is called by:
 26588 ;;		_Event_TestButton
 26589 ;;		_findClosestWall
 26590 ;;		_mode1
 26591 ;;		_Event_HMI_UpButton
 26592 ;;		_Event_HMI_DownButton
 26593 ;; This function uses a non-reentrant model
 26594 ;;
 26595                           
 26596                           	psect	text140
 26597  016238                     __ptext140:
 26598                           	opt stack 0
 26599  016238                     _HMI_SetNumber:
 26600                           	opt stack 16
 26601                           
 26602                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
 26603                           
 26604                           ;incstack = 0
 26605  016238  C0D0  F0C6         	movff	HMI_SetNumber@pInput,itos@input
 26606  01623C  C0D1  F0C7         	movff	HMI_SetNumber@pInput+1,itos@input+1
 26607  016240  0E3C               	movlw	low _HMIBoard
 26608  016242  0100               	movlb	0	; () banked
 26609  016244  6FC8               	movwf	itos@destination& (0+255),b
 26610  016246  0E03               	movlw	high _HMIBoard
 26611  016248  0100               	movlb	0	; () banked
 26612  01624A  6FC9               	movwf	(itos@destination+1)& (0+255),b
 26613  01624C  ECAE  F09D         	call	_itos	;wreg free
 26614                           
 26615                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
 26616  016250  0E3C               	movlw	low _HMIBoard
 26617  016252  0100               	movlb	0	; () banked
 26618  016254  6FBB               	movwf	HMI_SetSegments@pString& (0+255),b
 26619  016256  0E03               	movlw	high _HMIBoard
 26620  016258  0100               	movlb	0	; () banked
 26621  01625A  6FBC               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
 26622  01625C  EC37  F0A1         	call	_HMI_SetSegments	;wreg free
 26623  016260  0012               	return		;funcret
 26624  016262                     __end_of_HMI_SetNumber:
 26625                           	opt stack 0
 26626                           tosu	equ	0xFFF
 26627                           tosh	equ	0xFFE
 26628                           tosl	equ	0xFFD
 26629                           pclath	equ	0xFFA
 26630                           tblptru	equ	0xFF8
 26631                           tblptrh	equ	0xFF7
 26632                           tblptrl	equ	0xFF6
 26633                           tablat	equ	0xFF5
 26634                           prodh	equ	0xFF4
 26635                           prodl	equ	0xFF3
 26636                           intcon	equ	0xFF2
 26637                           postinc0	equ	0xFEE
 26638                           wreg	equ	0xFE8
 26639                           indf1	equ	0xFE7
 26640                           postdec1	equ	0xFE5
 26641                           fsr1h	equ	0xFE2
 26642                           fsr1l	equ	0xFE1
 26643                           indf2	equ	0xFDF
 26644                           postinc2	equ	0xFDE
 26645                           postdec2	equ	0xFDD
 26646                           plusw2	equ	0xFDB
 26647                           fsr2h	equ	0xFDA
 26648                           fsr2l	equ	0xFD9
 26649                           status	equ	0xFD8
 26650                           
 26651 ;; *************** function _itos *****************
 26652 ;; Defined at:
 26653 ;;		line 369 in file "Library/Types.c"
 26654 ;; Parameters:    Size  Location     Type
 26655 ;;  input           2   12[BANK0 ] unsigned short 
 26656 ;;  destination     2   14[BANK0 ] PTR unsigned char 
 26657 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 26658 ;; Auto vars:     Size  Location     Type
 26659 ;;  Out             2   20[BANK0 ] unsigned short 
 26660 ;;  Length          2   18[BANK0 ] unsigned short 
 26661 ;;  Data            2   16[BANK0 ] PTR unsigned char 
 26662 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 26663 ;; Return value:  Size  Location     Type
 26664 ;;                  1    wreg      void 
 26665 ;; Registers used:
 26666 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 26667 ;; Tracked objects:
 26668 ;;		On entry : 0/0
 26669 ;;		On exit  : 0/0
 26670 ;;		Unchanged: 0/0
 26671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26672 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26673 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26675 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26676 ;;Total ram usage:       10 bytes
 26677 ;; Hardware stack levels used:    1
 26678 ;; Hardware stack levels required when called:    8
 26679 ;; This function calls:
 26680 ;;		___lwdiv
 26681 ;;		___lwmod
 26682 ;;		_reverse
 26683 ;; This function is called by:
 26684 ;;		_HMI_SetNumber
 26685 ;; This function uses a non-reentrant model
 26686 ;;
 26687                           
 26688                           	psect	text141
 26689  013B5C                     __ptext141:
 26690                           	opt stack 0
 26691  013B5C                     _itos:
 26692                           	opt stack 16
 26693                           
 26694                           ;Types.c: 371: UINT16 Out = input;
 26695                           
 26696                           ;incstack = 0
 26697  013B5C  C0C6  F0CE         	movff	itos@input,itos@Out
 26698  013B60  C0C7  F0CF         	movff	itos@input+1,itos@Out+1
 26699                           
 26700                           ;Types.c: 372: UINT16 Length = 0;
 26701  013B64  0E00               	movlw	0
 26702  013B66  0100               	movlb	0	; () banked
 26703  013B68  6FCD               	movwf	(itos@Length+1)& (0+255),b
 26704  013B6A  0E00               	movlw	0
 26705  013B6C  6FCC               	movwf	itos@Length& (0+255),b
 26706                           
 26707                           ; BSR set to: 0
 26708                           ;Types.c: 373: char *Data = destination;
 26709  013B6E  C0C8  F0CA         	movff	itos@destination,itos@Data
 26710  013B72  C0C9  F0CB         	movff	itos@destination+1,itos@Data+1
 26711                           
 26712                           ; BSR set to: 0
 26713                           ;Types.c: 374: if(Out == 0)
 26714  013B76  0100               	movlb	0	; () banked
 26715  013B78  51CE               	movf	itos@Out& (0+255),w,b
 26716  013B7A  0100               	movlb	0	; () banked
 26717  013B7C  11CF               	iorwf	(itos@Out+1)& (0+255),w,b
 26718  013B7E  A4D8               	btfss	status,2,c
 26719  013B80  D034               	goto	l929
 26720                           
 26721                           ; BSR set to: 0
 26722                           ;Types.c: 375: {
 26723                           ;Types.c: 376: Data[0] = (UINT16)'0';
 26724  013B82  C0CA  FFD9         	movff	itos@Data,fsr2l
 26725  013B86  C0CB  FFDA         	movff	itos@Data+1,fsr2h
 26726  013B8A  0E30               	movlw	48
 26727  013B8C  6EDF               	movwf	indf2,c
 26728                           
 26729                           ; BSR set to: 0
 26730                           ;Types.c: 377: Length = 1;
 26731  013B8E  0E00               	movlw	0
 26732  013B90  0100               	movlb	0	; () banked
 26733  013B92  6FCD               	movwf	(itos@Length+1)& (0+255),b
 26734  013B94  0E01               	movlw	1
 26735  013B96  6FCC               	movwf	itos@Length& (0+255),b
 26736                           
 26737                           ;Types.c: 378: }
 26738  013B98  D040               	goto	l928
 26739  013B9A                     
 26740                           ; BSR set to: 0
 26741                           ;Types.c: 382: {
 26742                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
 26743                           
 26744                           ; BSR set to: 0
 26745  013B9A  C0CE  F0C1         	movff	itos@Out,___lwmod@dividend
 26746  013B9E  C0CF  F0C2         	movff	itos@Out+1,___lwmod@dividend+1
 26747  013BA2  0E00               	movlw	0
 26748  013BA4  0100               	movlb	0	; () banked
 26749  013BA6  6FC4               	movwf	(___lwmod@divisor+1)& (0+255),b
 26750  013BA8  0E0A               	movlw	10
 26751  013BAA  6FC3               	movwf	___lwmod@divisor& (0+255),b
 26752  013BAC  EC2F  F0AC         	call	___lwmod	;wreg free
 26753  013BB0  0100               	movlb	0	; () banked
 26754  013BB2  51C1               	movf	?___lwmod& (0+255),w,b
 26755  013BB4  0F30               	addlw	48
 26756  013BB6  C0CA  FFD9         	movff	itos@Data,fsr2l
 26757  013BBA  C0CB  FFDA         	movff	itos@Data+1,fsr2h
 26758  013BBE  6EDF               	movwf	indf2,c
 26759                           
 26760                           ; BSR set to: 0
 26761                           ;Types.c: 384: Out /= 10;
 26762  013BC0  C0CE  F0BA         	movff	itos@Out,___lwdiv@dividend
 26763  013BC4  C0CF  F0BB         	movff	itos@Out+1,___lwdiv@dividend+1
 26764  013BC8  0E00               	movlw	0
 26765  013BCA  0100               	movlb	0	; () banked
 26766  013BCC  6FBD               	movwf	(___lwdiv@divisor+1)& (0+255),b
 26767  013BCE  0E0A               	movlw	10
 26768  013BD0  6FBC               	movwf	___lwdiv@divisor& (0+255),b
 26769  013BD2  ECC4  F0A8         	call	___lwdiv	;wreg free
 26770  013BD6  C0BA  F0CE         	movff	?___lwdiv,itos@Out
 26771  013BDA  C0BB  F0CF         	movff	?___lwdiv+1,itos@Out+1
 26772                           
 26773                           ;Types.c: 385: Length ++;
 26774  013BDE  0100               	movlb	0	; () banked
 26775  013BE0  4BCC               	infsnz	itos@Length& (0+255),f,b
 26776  013BE2  2BCD               	incf	(itos@Length+1)& (0+255),f,b
 26777                           
 26778                           ; BSR set to: 0
 26779                           ;Types.c: 386: Data++;
 26780  013BE4  0100               	movlb	0	; () banked
 26781  013BE6  4BCA               	infsnz	itos@Data& (0+255),f,b
 26782  013BE8  2BCB               	incf	(itos@Data+1)& (0+255),f,b
 26783  013BEA                     l929:
 26784                           
 26785                           ; BSR set to: 0
 26786                           
 26787                           ; BSR set to: 0
 26788  013BEA  0100               	movlb	0	; () banked
 26789  013BEC  51CE               	movf	itos@Out& (0+255),w,b
 26790  013BEE  0100               	movlb	0	; () banked
 26791  013BF0  11CF               	iorwf	(itos@Out+1)& (0+255),w,b
 26792  013BF2  B4D8               	btfsc	status,2,c
 26793  013BF4  D008               	goto	u8940
 26794                           
 26795                           ; BSR set to: 0
 26796  013BF6  0100               	movlb	0	; () banked
 26797  013BF8  51CD               	movf	(itos@Length+1)& (0+255),w,b
 26798  013BFA  E105               	bnz	l12329
 26799  013BFC  0E06               	movlw	6
 26800  013BFE  0100               	movlb	0	; () banked
 26801  013C00  5DCC               	subwf	itos@Length& (0+255),w,b
 26802  013C02  A0D8               	btfss	status,0,c
 26803  013C04  D7CA               	goto	l930
 26804  013C06                     u8940:
 26805  013C06                     l12329:
 26806                           
 26807                           ; BSR set to: 0
 26808                           ;Types.c: 387: }
 26809                           ;Types.c: 388: reverse(destination, Length);
 26810  013C06  C0C8  F0BA         	movff	itos@destination,reverse@input
 26811  013C0A  C0C9  F0BB         	movff	itos@destination+1,reverse@input+1
 26812  013C0E  C0CC  F0BC         	movff	itos@Length,reverse@length
 26813  013C12  C0CD  F0BD         	movff	itos@Length+1,reverse@length+1
 26814  013C16  EC91  F0AA         	call	_reverse	;wreg free
 26815  013C1A                     l928:
 26816                           
 26817                           ;Types.c: 389: }
 26818                           ;Types.c: 390: destination[Length] = '\0';
 26819  013C1A  0100               	movlb	0	; () banked
 26820  013C1C  51CC               	movf	itos@Length& (0+255),w,b
 26821  013C1E  0100               	movlb	0	; () banked
 26822  013C20  25C8               	addwf	itos@destination& (0+255),w,b
 26823  013C22  6ED9               	movwf	fsr2l,c
 26824  013C24  0100               	movlb	0	; () banked
 26825  013C26  51CD               	movf	(itos@Length+1)& (0+255),w,b
 26826  013C28  0100               	movlb	0	; () banked
 26827  013C2A  21C9               	addwfc	(itos@destination+1)& (0+255),w,b
 26828  013C2C  6EDA               	movwf	fsr2h,c
 26829  013C2E  0E00               	movlw	0
 26830  013C30  6EDF               	movwf	indf2,c
 26831                           
 26832                           ; BSR set to: 0
 26833  013C32  0012               	return		;funcret
 26834  013C34                     __end_of_itos:
 26835                           	opt stack 0
 26836                           tosu	equ	0xFFF
 26837                           tosh	equ	0xFFE
 26838                           tosl	equ	0xFFD
 26839                           pclath	equ	0xFFA
 26840                           tblptru	equ	0xFF8
 26841                           tblptrh	equ	0xFF7
 26842                           tblptrl	equ	0xFF6
 26843                           tablat	equ	0xFF5
 26844                           prodh	equ	0xFF4
 26845                           prodl	equ	0xFF3
 26846                           intcon	equ	0xFF2
 26847                           postinc0	equ	0xFEE
 26848                           wreg	equ	0xFE8
 26849                           indf1	equ	0xFE7
 26850                           postdec1	equ	0xFE5
 26851                           fsr1h	equ	0xFE2
 26852                           fsr1l	equ	0xFE1
 26853                           indf2	equ	0xFDF
 26854                           postinc2	equ	0xFDE
 26855                           postdec2	equ	0xFDD
 26856                           plusw2	equ	0xFDB
 26857                           fsr2h	equ	0xFDA
 26858                           fsr2l	equ	0xFD9
 26859                           status	equ	0xFD8
 26860                           
 26861 ;; *************** function _reverse *****************
 26862 ;; Defined at:
 26863 ;;		line 357 in file "Library/Types.c"
 26864 ;; Parameters:    Size  Location     Type
 26865 ;;  input           2    0[BANK0 ] PTR unsigned char 
 26866 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 26867 ;;  length          2    2[BANK0 ] unsigned short 
 26868 ;; Auto vars:     Size  Location     Type
 26869 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
 26870 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 26871 ;;  tempVar         1    4[BANK0 ] unsigned char 
 26872 ;; Return value:  Size  Location     Type
 26873 ;;                  1    wreg      void 
 26874 ;; Registers used:
 26875 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 26876 ;; Tracked objects:
 26877 ;;		On entry : 0/0
 26878 ;;		On exit  : 0/0
 26879 ;;		Unchanged: 0/0
 26880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26881 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26882 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26884 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26885 ;;Total ram usage:        7 bytes
 26886 ;; Hardware stack levels used:    1
 26887 ;; Hardware stack levels required when called:    7
 26888 ;; This function calls:
 26889 ;;		Nothing
 26890 ;; This function is called by:
 26891 ;;		_itos
 26892 ;; This function uses a non-reentrant model
 26893 ;;
 26894                           
 26895                           	psect	text142
 26896  015522                     __ptext142:
 26897                           	opt stack 0
 26898  015522                     _reverse:
 26899                           	opt stack 16
 26900                           
 26901                           ;Types.c: 359: char tempVar,
 26902                           ;Types.c: 360: *iterator = input + length;
 26903                           
 26904                           ; BSR set to: 0
 26905                           ;incstack = 0
 26906  015522  0100               	movlb	0	; () banked
 26907  015524  51BC               	movf	reverse@length& (0+255),w,b
 26908  015526  0100               	movlb	0	; () banked
 26909  015528  25BA               	addwf	reverse@input& (0+255),w,b
 26910  01552A  0100               	movlb	0	; () banked
 26911  01552C  6FBF               	movwf	reverse@iterator& (0+255),b
 26912  01552E  0100               	movlb	0	; () banked
 26913  015530  51BD               	movf	(reverse@length+1)& (0+255),w,b
 26914  015532  0100               	movlb	0	; () banked
 26915  015534  21BB               	addwfc	(reverse@input+1)& (0+255),w,b
 26916  015536  0100               	movlb	0	; () banked
 26917  015538  6FC0               	movwf	(reverse@iterator+1)& (0+255),b
 26918                           
 26919                           ;Types.c: 362: while ( --iterator > input )
 26920  01553A  D01A               	goto	l921
 26921  01553C                     
 26922                           ; BSR set to: 0
 26923                           ;Types.c: 363: {
 26924                           ;Types.c: 364: tempVar = *input;
 26925                           
 26926                           ; BSR set to: 0
 26927  01553C  C0BA  FFD9         	movff	reverse@input,fsr2l
 26928  015540  C0BB  FFDA         	movff	reverse@input+1,fsr2h
 26929  015544  50DF               	movf	indf2,w,c
 26930  015546  0100               	movlb	0	; () banked
 26931  015548  6FBE               	movwf	reverse@tempVar& (0+255),b
 26932                           
 26933                           ; BSR set to: 0
 26934                           ;Types.c: 365: *input++=*iterator;
 26935  01554A  C0BF  FFD9         	movff	reverse@iterator,fsr2l
 26936  01554E  C0C0  FFDA         	movff	reverse@iterator+1,fsr2h
 26937  015552  C0BA  FFE1         	movff	reverse@input,fsr1l
 26938  015556  C0BB  FFE2         	movff	reverse@input+1,fsr1h
 26939  01555A  CFDF FFE7          	movff	indf2,indf1
 26940                           
 26941                           ; BSR set to: 0
 26942  01555E  0100               	movlb	0	; () banked
 26943  015560  4BBA               	infsnz	reverse@input& (0+255),f,b
 26944  015562  2BBB               	incf	(reverse@input+1)& (0+255),f,b
 26945                           
 26946                           ; BSR set to: 0
 26947                           ;Types.c: 366: *iterator=tempVar;
 26948  015564  C0BF  FFD9         	movff	reverse@iterator,fsr2l
 26949  015568  C0C0  FFDA         	movff	reverse@iterator+1,fsr2h
 26950  01556C  C0BE  FFDF         	movff	reverse@tempVar,indf2
 26951  015570                     l921:
 26952                           
 26953                           ; BSR set to: 0
 26954                           
 26955                           ; BSR set to: 0
 26956  015570  0100               	movlb	0	; () banked
 26957  015572  07BF               	decf	reverse@iterator& (0+255),f,b
 26958  015574  A0D8               	btfss	status,0,c
 26959  015576  07C0               	decf	(reverse@iterator+1)& (0+255),f,b
 26960  015578  0100               	movlb	0	; () banked
 26961  01557A  51BF               	movf	reverse@iterator& (0+255),w,b
 26962  01557C  0100               	movlb	0	; () banked
 26963  01557E  5DBA               	subwf	reverse@input& (0+255),w,b
 26964  015580  0100               	movlb	0	; () banked
 26965  015582  51C0               	movf	(reverse@iterator+1)& (0+255),w,b
 26966  015584  0100               	movlb	0	; () banked
 26967  015586  59BB               	subwfb	(reverse@input+1)& (0+255),w,b
 26968  015588  B0D8               	btfsc	status,0,c
 26969  01558A  0012               	return	
 26970  01558C  D7D7               	goto	l922
 26971  01558E                     __end_of_reverse:
 26972                           	opt stack 0
 26973                           tosu	equ	0xFFF
 26974                           tosh	equ	0xFFE
 26975                           tosl	equ	0xFFD
 26976                           pclath	equ	0xFFA
 26977                           tblptru	equ	0xFF8
 26978                           tblptrh	equ	0xFF7
 26979                           tblptrl	equ	0xFF6
 26980                           tablat	equ	0xFF5
 26981                           prodh	equ	0xFF4
 26982                           prodl	equ	0xFF3
 26983                           intcon	equ	0xFF2
 26984                           postinc0	equ	0xFEE
 26985                           wreg	equ	0xFE8
 26986                           indf1	equ	0xFE7
 26987                           postdec1	equ	0xFE5
 26988                           fsr1h	equ	0xFE2
 26989                           fsr1l	equ	0xFE1
 26990                           indf2	equ	0xFDF
 26991                           postinc2	equ	0xFDE
 26992                           postdec2	equ	0xFDD
 26993                           plusw2	equ	0xFDB
 26994                           fsr2h	equ	0xFDA
 26995                           fsr2l	equ	0xFD9
 26996                           status	equ	0xFD8
 26997                           
 26998 ;; *************** function ___lwmod *****************
 26999 ;; Defined at:
 27000 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
 27001 ;; Parameters:    Size  Location     Type
 27002 ;;  dividend        2    7[BANK0 ] unsigned int 
 27003 ;;  divisor         2    9[BANK0 ] unsigned int 
 27004 ;; Auto vars:     Size  Location     Type
 27005 ;;  counter         1   11[BANK0 ] unsigned char 
 27006 ;; Return value:  Size  Location     Type
 27007 ;;                  2    7[BANK0 ] unsigned int 
 27008 ;; Registers used:
 27009 ;;		wreg, status,2, status,0
 27010 ;; Tracked objects:
 27011 ;;		On entry : 0/0
 27012 ;;		On exit  : 0/0
 27013 ;;		Unchanged: 0/0
 27014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27015 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27016 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27018 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27019 ;;Total ram usage:        5 bytes
 27020 ;; Hardware stack levels used:    1
 27021 ;; Hardware stack levels required when called:    7
 27022 ;; This function calls:
 27023 ;;		Nothing
 27024 ;; This function is called by:
 27025 ;;		_itos
 27026 ;;		_printf
 27027 ;; This function uses a non-reentrant model
 27028 ;;
 27029                           
 27030                           	psect	text143
 27031  01585E                     __ptext143:
 27032                           	opt stack 0
 27033  01585E                     ___lwmod:
 27034                           	opt stack 22
 27035                           
 27036                           ; BSR set to: 0
 27037                           ;incstack = 0
 27038  01585E  0100               	movlb	0	; () banked
 27039  015860  51C3               	movf	___lwmod@divisor& (0+255),w,b
 27040  015862  0100               	movlb	0	; () banked
 27041  015864  11C4               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 27042  015866  B4D8               	btfsc	status,2,c
 27043  015868  D026               	goto	l2862
 27044                           
 27045                           ; BSR set to: 0
 27046  01586A  0E01               	movlw	1
 27047  01586C  0100               	movlb	0	; () banked
 27048  01586E  6FC5               	movwf	___lwmod@counter& (0+255),b
 27049  015870  D006               	goto	l2857
 27050  015872                     
 27051                           ; BSR set to: 0
 27052                           
 27053                           ; BSR set to: 0
 27054  015872  0100               	movlb	0	; () banked
 27055  015874  90D8               	bcf	status,0,c
 27056  015876  37C3               	rlcf	___lwmod@divisor& (0+255),f,b
 27057  015878  37C4               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 27058  01587A  0100               	movlb	0	; () banked
 27059  01587C  2BC5               	incf	___lwmod@counter& (0+255),f,b
 27060  01587E                     l2857:
 27061                           
 27062                           ; BSR set to: 0
 27063                           
 27064                           ; BSR set to: 0
 27065  01587E  0100               	movlb	0	; () banked
 27066  015880  AFC4               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 27067  015882  D7F7               	goto	l2858
 27068  015884                     u8860:
 27069                           
 27070                           ; BSR set to: 0
 27071                           
 27072                           ; BSR set to: 0
 27073                           
 27074                           ; BSR set to: 0
 27075  015884  0100               	movlb	0	; () banked
 27076  015886  51C3               	movf	___lwmod@divisor& (0+255),w,b
 27077  015888  0100               	movlb	0	; () banked
 27078  01588A  5DC1               	subwf	___lwmod@dividend& (0+255),w,b
 27079  01588C  0100               	movlb	0	; () banked
 27080  01588E  51C4               	movf	(___lwmod@divisor+1)& (0+255),w,b
 27081  015890  0100               	movlb	0	; () banked
 27082  015892  59C2               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 27083  015894  A0D8               	btfss	status,0,c
 27084  015896  D008               	goto	l2861
 27085                           
 27086                           ; BSR set to: 0
 27087  015898  0100               	movlb	0	; () banked
 27088  01589A  51C3               	movf	___lwmod@divisor& (0+255),w,b
 27089  01589C  0100               	movlb	0	; () banked
 27090  01589E  5FC1               	subwf	___lwmod@dividend& (0+255),f,b
 27091  0158A0  0100               	movlb	0	; () banked
 27092  0158A2  51C4               	movf	(___lwmod@divisor+1)& (0+255),w,b
 27093  0158A4  0100               	movlb	0	; () banked
 27094  0158A6  5BC2               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 27095  0158A8                     l2861:
 27096                           
 27097                           ; BSR set to: 0
 27098                           
 27099                           ; BSR set to: 0
 27100  0158A8  0100               	movlb	0	; () banked
 27101  0158AA  90D8               	bcf	status,0,c
 27102  0158AC  33C4               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 27103  0158AE  33C3               	rrcf	___lwmod@divisor& (0+255),f,b
 27104                           
 27105                           ; BSR set to: 0
 27106  0158B0  0100               	movlb	0	; () banked
 27107  0158B2  2FC5               	decfsz	___lwmod@counter& (0+255),f,b
 27108  0158B4  D7E7               	goto	u8860
 27109  0158B6                     l2862:
 27110                           
 27111                           ; BSR set to: 0
 27112                           
 27113                           ; BSR set to: 0
 27114  0158B6  C0C1  F0C1         	movff	___lwmod@dividend,?___lwmod
 27115  0158BA  C0C2  F0C2         	movff	___lwmod@dividend+1,?___lwmod+1
 27116                           
 27117                           ; BSR set to: 0
 27118  0158BE  0012               	return		;funcret
 27119  0158C0                     __end_of___lwmod:
 27120                           	opt stack 0
 27121                           tosu	equ	0xFFF
 27122                           tosh	equ	0xFFE
 27123                           tosl	equ	0xFFD
 27124                           pclath	equ	0xFFA
 27125                           tblptru	equ	0xFF8
 27126                           tblptrh	equ	0xFF7
 27127                           tblptrl	equ	0xFF6
 27128                           tablat	equ	0xFF5
 27129                           prodh	equ	0xFF4
 27130                           prodl	equ	0xFF3
 27131                           intcon	equ	0xFF2
 27132                           postinc0	equ	0xFEE
 27133                           wreg	equ	0xFE8
 27134                           indf1	equ	0xFE7
 27135                           postdec1	equ	0xFE5
 27136                           fsr1h	equ	0xFE2
 27137                           fsr1l	equ	0xFE1
 27138                           indf2	equ	0xFDF
 27139                           postinc2	equ	0xFDE
 27140                           postdec2	equ	0xFDD
 27141                           plusw2	equ	0xFDB
 27142                           fsr2h	equ	0xFDA
 27143                           fsr2l	equ	0xFD9
 27144                           status	equ	0xFD8
 27145                           
 27146 ;; *************** function ___lwdiv *****************
 27147 ;; Defined at:
 27148 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
 27149 ;; Parameters:    Size  Location     Type
 27150 ;;  dividend        2    0[BANK0 ] unsigned int 
 27151 ;;  divisor         2    2[BANK0 ] unsigned int 
 27152 ;; Auto vars:     Size  Location     Type
 27153 ;;  quotient        2    5[BANK0 ] unsigned int 
 27154 ;;  counter         1    4[BANK0 ] unsigned char 
 27155 ;; Return value:  Size  Location     Type
 27156 ;;                  2    0[BANK0 ] unsigned int 
 27157 ;; Registers used:
 27158 ;;		wreg, status,2, status,0
 27159 ;; Tracked objects:
 27160 ;;		On entry : 0/0
 27161 ;;		On exit  : 0/0
 27162 ;;		Unchanged: 0/0
 27163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27164 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27165 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27167 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27168 ;;Total ram usage:        7 bytes
 27169 ;; Hardware stack levels used:    1
 27170 ;; Hardware stack levels required when called:    7
 27171 ;; This function calls:
 27172 ;;		Nothing
 27173 ;; This function is called by:
 27174 ;;		_itos
 27175 ;;		_printf
 27176 ;; This function uses a non-reentrant model
 27177 ;;
 27178                           
 27179                           	psect	text144
 27180  015188                     __ptext144:
 27181                           	opt stack 0
 27182  015188                     ___lwdiv:
 27183                           	opt stack 22
 27184                           
 27185                           ; BSR set to: 0
 27186                           ;incstack = 0
 27187  015188  0E00               	movlw	0
 27188  01518A  0100               	movlb	0	; () banked
 27189  01518C  6FC0               	movwf	(___lwdiv@quotient+1)& (0+255),b
 27190  01518E  0E00               	movlw	0
 27191  015190  6FBF               	movwf	___lwdiv@quotient& (0+255),b
 27192                           
 27193                           ; BSR set to: 0
 27194  015192  0100               	movlb	0	; () banked
 27195  015194  51BC               	movf	___lwdiv@divisor& (0+255),w,b
 27196  015196  0100               	movlb	0	; () banked
 27197  015198  11BD               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 27198  01519A  B4D8               	btfsc	status,2,c
 27199  01519C  D02C               	goto	l2852
 27200                           
 27201                           ; BSR set to: 0
 27202  01519E  0E01               	movlw	1
 27203  0151A0  0100               	movlb	0	; () banked
 27204  0151A2  6FBE               	movwf	___lwdiv@counter& (0+255),b
 27205  0151A4  D006               	goto	l2847
 27206  0151A6                     
 27207                           ; BSR set to: 0
 27208                           
 27209                           ; BSR set to: 0
 27210  0151A6  0100               	movlb	0	; () banked
 27211  0151A8  90D8               	bcf	status,0,c
 27212  0151AA  37BC               	rlcf	___lwdiv@divisor& (0+255),f,b
 27213  0151AC  37BD               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 27214  0151AE  0100               	movlb	0	; () banked
 27215  0151B0  2BBE               	incf	___lwdiv@counter& (0+255),f,b
 27216  0151B2                     l2847:
 27217                           
 27218                           ; BSR set to: 0
 27219                           
 27220                           ; BSR set to: 0
 27221  0151B2  0100               	movlb	0	; () banked
 27222  0151B4  AFBD               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 27223  0151B6  D7F7               	goto	l2848
 27224  0151B8                     u8830:
 27225                           
 27226                           ; BSR set to: 0
 27227                           
 27228                           ; BSR set to: 0
 27229                           
 27230                           ; BSR set to: 0
 27231  0151B8  0100               	movlb	0	; () banked
 27232  0151BA  90D8               	bcf	status,0,c
 27233  0151BC  37BF               	rlcf	___lwdiv@quotient& (0+255),f,b
 27234  0151BE  37C0               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 27235                           
 27236                           ; BSR set to: 0
 27237  0151C0  0100               	movlb	0	; () banked
 27238  0151C2  51BC               	movf	___lwdiv@divisor& (0+255),w,b
 27239  0151C4  0100               	movlb	0	; () banked
 27240  0151C6  5DBA               	subwf	___lwdiv@dividend& (0+255),w,b
 27241  0151C8  0100               	movlb	0	; () banked
 27242  0151CA  51BD               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 27243  0151CC  0100               	movlb	0	; () banked
 27244  0151CE  59BB               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 27245  0151D0  A0D8               	btfss	status,0,c
 27246  0151D2  D00A               	goto	l2851
 27247                           
 27248                           ; BSR set to: 0
 27249  0151D4  0100               	movlb	0	; () banked
 27250  0151D6  51BC               	movf	___lwdiv@divisor& (0+255),w,b
 27251  0151D8  0100               	movlb	0	; () banked
 27252  0151DA  5FBA               	subwf	___lwdiv@dividend& (0+255),f,b
 27253  0151DC  0100               	movlb	0	; () banked
 27254  0151DE  51BD               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 27255  0151E0  0100               	movlb	0	; () banked
 27256  0151E2  5BBB               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 27257                           
 27258                           ; BSR set to: 0
 27259  0151E4  0100               	movlb	0	; () banked
 27260  0151E6  81BF               	bsf	___lwdiv@quotient& (0+255),0,b
 27261  0151E8                     l2851:
 27262                           
 27263                           ; BSR set to: 0
 27264                           
 27265                           ; BSR set to: 0
 27266  0151E8  0100               	movlb	0	; () banked
 27267  0151EA  90D8               	bcf	status,0,c
 27268  0151EC  33BD               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 27269  0151EE  33BC               	rrcf	___lwdiv@divisor& (0+255),f,b
 27270                           
 27271                           ; BSR set to: 0
 27272  0151F0  0100               	movlb	0	; () banked
 27273  0151F2  2FBE               	decfsz	___lwdiv@counter& (0+255),f,b
 27274  0151F4  D7E1               	goto	u8830
 27275  0151F6                     l2852:
 27276                           
 27277                           ; BSR set to: 0
 27278                           
 27279                           ; BSR set to: 0
 27280  0151F6  C0BF  F0BA         	movff	___lwdiv@quotient,?___lwdiv
 27281  0151FA  C0C0  F0BB         	movff	___lwdiv@quotient+1,?___lwdiv+1
 27282                           
 27283                           ; BSR set to: 0
 27284  0151FE  0012               	return		;funcret
 27285  015200                     __end_of___lwdiv:
 27286                           	opt stack 0
 27287                           tosu	equ	0xFFF
 27288                           tosh	equ	0xFFE
 27289                           tosl	equ	0xFFD
 27290                           pclath	equ	0xFFA
 27291                           tblptru	equ	0xFF8
 27292                           tblptrh	equ	0xFF7
 27293                           tblptrl	equ	0xFF6
 27294                           tablat	equ	0xFF5
 27295                           prodh	equ	0xFF4
 27296                           prodl	equ	0xFF3
 27297                           intcon	equ	0xFF2
 27298                           postinc0	equ	0xFEE
 27299                           wreg	equ	0xFE8
 27300                           indf1	equ	0xFE7
 27301                           postdec1	equ	0xFE5
 27302                           fsr1h	equ	0xFE2
 27303                           fsr1l	equ	0xFE1
 27304                           indf2	equ	0xFDF
 27305                           postinc2	equ	0xFDE
 27306                           postdec2	equ	0xFDD
 27307                           plusw2	equ	0xFDB
 27308                           fsr2h	equ	0xFDA
 27309                           fsr2l	equ	0xFD9
 27310                           status	equ	0xFD8
 27311                           
 27312 ;; *************** function _HMI_SetSegments *****************
 27313 ;; Defined at:
 27314 ;;		line 226 in file "HMI.c"
 27315 ;; Parameters:    Size  Location     Type
 27316 ;;  pString         2    1[BANK0 ] PTR unsigned char 
 27317 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 27318 ;; Auto vars:     Size  Location     Type
 27319 ;;  in              2    4[BANK0 ] unsigned short 
 27320 ;; Return value:  Size  Location     Type
 27321 ;;                  1    wreg      void 
 27322 ;; Registers used:
 27323 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 27324 ;; Tracked objects:
 27325 ;;		On entry : 0/0
 27326 ;;		On exit  : 0/0
 27327 ;;		Unchanged: 0/0
 27328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27329 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27330 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27331 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27332 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27333 ;;Total ram usage:        5 bytes
 27334 ;; Hardware stack levels used:    1
 27335 ;; Hardware stack levels required when called:    8
 27336 ;; This function calls:
 27337 ;;		_ToSegment
 27338 ;; This function is called by:
 27339 ;;		_HMI_SetNumber
 27340 ;; This function uses a non-reentrant model
 27341 ;;
 27342                           
 27343                           	psect	text145
 27344  01426E                     __ptext145:
 27345                           	opt stack 0
 27346  01426E                     _HMI_SetSegments:
 27347                           	opt stack 16
 27348                           
 27349                           ;HMI.c: 228: UINT16 in=0;
 27350                           
 27351                           ; BSR set to: 0
 27352                           ;incstack = 0
 27353  01426E  0E00               	movlw	0
 27354  014270  0100               	movlb	0	; () banked
 27355  014272  6FBF               	movwf	(HMI_SetSegments@in+1)& (0+255),b
 27356  014274  0E00               	movlw	0
 27357  014276  6FBE               	movwf	HMI_SetSegments@in& (0+255),b
 27358                           
 27359                           ;HMI.c: 229: while(*pString)
 27360  014278  D038               	goto	l1202
 27361  01427A                     
 27362                           ; BSR set to: 0
 27363                           ;HMI.c: 230: {
 27364                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
 27365                           
 27366                           ; BSR set to: 0
 27367  01427A  0E3C               	movlw	low _HMIBoard
 27368  01427C  0100               	movlb	0	; () banked
 27369  01427E  25BE               	addwf	HMI_SetSegments@in& (0+255),w,b
 27370  014280  6ED9               	movwf	fsr2l,c
 27371  014282  0E03               	movlw	high _HMIBoard
 27372  014284  0100               	movlb	0	; () banked
 27373  014286  21BF               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27374  014288  6EDA               	movwf	fsr2h,c
 27375  01428A  C0BB  FFE1         	movff	HMI_SetSegments@pString,fsr1l
 27376  01428E  C0BC  FFE2         	movff	HMI_SetSegments@pString+1,fsr1h
 27377  014292  50E7               	movf	indf1,w,c
 27378  014294  EC65  F08B         	call	_ToSegment
 27379  014298  6EDF               	movwf	indf2,c
 27380                           
 27381                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
 27382  01429A  0E3C               	movlw	low _HMIBoard
 27383  01429C  0100               	movlb	0	; () banked
 27384  01429E  25BE               	addwf	HMI_SetSegments@in& (0+255),w,b
 27385  0142A0  6ED9               	movwf	fsr2l,c
 27386  0142A2  0E03               	movlw	high _HMIBoard
 27387  0142A4  0100               	movlb	0	; () banked
 27388  0142A6  21BF               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27389  0142A8  6EDA               	movwf	fsr2h,c
 27390  0142AA  0E80               	movlw	128
 27391  0142AC  18DE               	xorwf	postinc2,w,c
 27392  0142AE  A4D8               	btfss	status,2,c
 27393  0142B0  D00E               	goto	l1201
 27394                           
 27395                           ; BSR set to: 0
 27396                           ;HMI.c: 234: {
 27397                           ;HMI.c: 235: in--;
 27398  0142B2  0100               	movlb	0	; () banked
 27399  0142B4  07BE               	decf	HMI_SetSegments@in& (0+255),f,b
 27400  0142B6  A0D8               	btfss	status,0,c
 27401  0142B8  07BF               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
 27402                           
 27403                           ; BSR set to: 0
 27404                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
 27405  0142BA  0E3C               	movlw	low _HMIBoard
 27406  0142BC  0100               	movlb	0	; () banked
 27407  0142BE  25BE               	addwf	HMI_SetSegments@in& (0+255),w,b
 27408  0142C0  6ED9               	movwf	fsr2l,c
 27409  0142C2  0E03               	movlw	high _HMIBoard
 27410  0142C4  0100               	movlb	0	; () banked
 27411  0142C6  21BF               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27412  0142C8  6EDA               	movwf	fsr2h,c
 27413  0142CA  0E00               	movlw	0
 27414  0142CC  8EDB               	bsf	plusw2,7,c
 27415  0142CE                     l1201:
 27416                           
 27417                           ; BSR set to: 0
 27418                           ;HMI.c: 237: }
 27419                           ;HMI.c: 239: pString++;
 27420                           
 27421                           ; BSR set to: 0
 27422  0142CE  0100               	movlb	0	; () banked
 27423  0142D0  4BBB               	infsnz	HMI_SetSegments@pString& (0+255),f,b
 27424  0142D2  2BBC               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
 27425                           
 27426                           ; BSR set to: 0
 27427                           ;HMI.c: 240: in++;
 27428  0142D4  0100               	movlb	0	; () banked
 27429  0142D6  4BBE               	infsnz	HMI_SetSegments@in& (0+255),f,b
 27430  0142D8  2BBF               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 27431                           
 27432                           ; BSR set to: 0
 27433                           ;HMI.c: 241: if (in>=6)
 27434  0142DA  0100               	movlb	0	; () banked
 27435  0142DC  51BF               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 27436  0142DE  E11A               	bnz	l12381
 27437  0142E0  0E06               	movlw	6
 27438  0142E2  0100               	movlb	0	; () banked
 27439  0142E4  5DBE               	subwf	HMI_SetSegments@in& (0+255),w,b
 27440  0142E6  B0D8               	btfsc	status,0,c
 27441  0142E8  D015               	goto	l1204
 27442  0142EA                     l1202:
 27443                           
 27444                           ; BSR set to: 0
 27445                           
 27446                           ; BSR set to: 0
 27447                           
 27448                           ; BSR set to: 0
 27449  0142EA  C0BB  FFD9         	movff	HMI_SetSegments@pString,fsr2l
 27450  0142EE  C0BC  FFDA         	movff	HMI_SetSegments@pString+1,fsr2h
 27451  0142F2  50DF               	movf	indf2,w,c
 27452  0142F4  B4D8               	btfsc	status,2,c
 27453  0142F6  D00E               	goto	l1204
 27454  0142F8  D7C0               	goto	l1200
 27455  0142FA                     
 27456                           ; BSR set to: 0
 27457                           ;HMI.c: 245: {
 27458                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
 27459                           
 27460                           ; BSR set to: 0
 27461  0142FA  0E3C               	movlw	low _HMIBoard
 27462  0142FC  0100               	movlb	0	; () banked
 27463  0142FE  25BE               	addwf	HMI_SetSegments@in& (0+255),w,b
 27464  014300  6ED9               	movwf	fsr2l,c
 27465  014302  0E03               	movlw	high _HMIBoard
 27466  014304  0100               	movlb	0	; () banked
 27467  014306  21BF               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27468  014308  6EDA               	movwf	fsr2h,c
 27469  01430A  0E00               	movlw	0
 27470  01430C  6EDF               	movwf	indf2,c
 27471                           
 27472                           ; BSR set to: 0
 27473                           ;HMI.c: 247: in++;
 27474  01430E  0100               	movlb	0	; () banked
 27475  014310  4BBE               	infsnz	HMI_SetSegments@in& (0+255),f,b
 27476  014312  2BBF               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 27477  014314                     l1204:
 27478  014314                     l12381:
 27479                           
 27480                           ; BSR set to: 0
 27481  014314  0100               	movlb	0	; () banked
 27482  014316  51BF               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 27483  014318  E106               	bnz	l1207
 27484  01431A  0E06               	movlw	6
 27485  01431C  0100               	movlb	0	; () banked
 27486  01431E  5DBE               	subwf	HMI_SetSegments@in& (0+255),w,b
 27487  014320  B0D8               	btfsc	status,0,c
 27488  014322  0012               	return	
 27489  014324  D7EA               	goto	l1205
 27490  014326                     l1207:
 27491                           
 27492                           ; BSR set to: 0
 27493  014326  0012               	return		;funcret
 27494  014328                     __end_of_HMI_SetSegments:
 27495                           	opt stack 0
 27496                           tosu	equ	0xFFF
 27497                           tosh	equ	0xFFE
 27498                           tosl	equ	0xFFD
 27499                           pclath	equ	0xFFA
 27500                           tblptru	equ	0xFF8
 27501                           tblptrh	equ	0xFF7
 27502                           tblptrl	equ	0xFF6
 27503                           tablat	equ	0xFF5
 27504                           prodh	equ	0xFF4
 27505                           prodl	equ	0xFF3
 27506                           intcon	equ	0xFF2
 27507                           postinc0	equ	0xFEE
 27508                           wreg	equ	0xFE8
 27509                           indf1	equ	0xFE7
 27510                           postdec1	equ	0xFE5
 27511                           fsr1h	equ	0xFE2
 27512                           fsr1l	equ	0xFE1
 27513                           indf2	equ	0xFDF
 27514                           postinc2	equ	0xFDE
 27515                           postdec2	equ	0xFDD
 27516                           plusw2	equ	0xFDB
 27517                           fsr2h	equ	0xFDA
 27518                           fsr2l	equ	0xFD9
 27519                           status	equ	0xFD8
 27520                           
 27521 ;; *************** function _ToSegment *****************
 27522 ;; Defined at:
 27523 ;;		line 284 in file "Library/Types.c"
 27524 ;; Parameters:    Size  Location     Type
 27525 ;;  pCHR            1    wreg     unsigned char 
 27526 ;; Auto vars:     Size  Location     Type
 27527 ;;  pCHR            1    0[BANK0 ] unsigned char 
 27528 ;; Return value:  Size  Location     Type
 27529 ;;                  1    wreg      unsigned char 
 27530 ;; Registers used:
 27531 ;;		wreg, status,2, status,0
 27532 ;; Tracked objects:
 27533 ;;		On entry : 0/0
 27534 ;;		On exit  : 0/0
 27535 ;;		Unchanged: 0/0
 27536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27538 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27540 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27541 ;;Total ram usage:        1 bytes
 27542 ;; Hardware stack levels used:    1
 27543 ;; Hardware stack levels required when called:    7
 27544 ;; This function calls:
 27545 ;;		Nothing
 27546 ;; This function is called by:
 27547 ;;		_HMI_SetSegments
 27548 ;; This function uses a non-reentrant model
 27549 ;;
 27550                           
 27551                           	psect	text146
 27552  0116CA                     __ptext146:
 27553                           	opt stack 0
 27554  0116CA                     _ToSegment:
 27555                           	opt stack 16
 27556                           
 27557                           ; BSR set to: 0
 27558                           ;incstack = 0
 27559                           ;ToSegment@pCHR stored from wreg
 27560  0116CA  0100               	movlb	0	; () banked
 27561  0116CC  6FBA               	movwf	ToSegment@pCHR& (0+255),b
 27562                           
 27563                           ;Types.c: 286: switch(pCHR)
 27564  0116CE  D07E               	goto	l853
 27565  0116D0  0E3F               	movlw	63
 27566  0116D2  0012               	return	
 27567  0116D4  0E06               	movlw	6
 27568  0116D6  0012               	return	
 27569  0116D8  0E5B               	movlw	91
 27570  0116DA  0012               	return	
 27571  0116DC  0E4F               	movlw	79
 27572  0116DE  0012               	return	
 27573  0116E0  0E66               	movlw	102
 27574  0116E2  0012               	return	
 27575  0116E4  0E6D               	movlw	109
 27576  0116E6  0012               	return	
 27577  0116E8  0E7D               	movlw	125
 27578  0116EA  0012               	return	
 27579  0116EC  0E07               	movlw	7
 27580  0116EE  0012               	return	
 27581  0116F0  0E7F               	movlw	127
 27582  0116F2  0012               	return	
 27583  0116F4  0E6F               	movlw	111
 27584  0116F6  0012               	return	
 27585  0116F8  0E5F               	movlw	95
 27586  0116FA  0012               	return	
 27587  0116FC  0E7C               	movlw	124
 27588  0116FE  0012               	return	
 27589  011700  0E58               	movlw	88
 27590  011702  0012               	return	
 27591  011704  0E5E               	movlw	94
 27592  011706  0012               	return	
 27593  011708  0E7B               	movlw	123
 27594  01170A  0012               	return	
 27595  01170C  0E71               	movlw	113
 27596  01170E  0012               	return	
 27597  011710  0E6F               	movlw	111
 27598  011712  0012               	return	
 27599  011714  0E74               	movlw	116
 27600  011716  0012               	return	
 27601  011718  0E04               	movlw	4
 27602  01171A  0012               	return	
 27603  01171C  0E0E               	movlw	14
 27604  01171E  0012               	return	
 27605  011720  0E7A               	movlw	122
 27606  011722  0012               	return	
 27607  011724  0E06               	movlw	6
 27608  011726  0012               	return	
 27609  011728  0E14               	movlw	20
 27610  01172A  0012               	return	
 27611  01172C  0E54               	movlw	84
 27612  01172E  0012               	return	
 27613  011730  0E5C               	movlw	92
 27614  011732  0012               	return	
 27615  011734  0E73               	movlw	115
 27616  011736  0012               	return	
 27617  011738  0E67               	movlw	103
 27618  01173A  0012               	return	
 27619  01173C  0E50               	movlw	80
 27620  01173E  0012               	return	
 27621  011740  0E6D               	movlw	109
 27622  011742  0012               	return	
 27623  011744  0E78               	movlw	120
 27624  011746  0012               	return	
 27625  011748  0E1C               	movlw	28
 27626  01174A  0012               	return	
 27627  01174C  0E62               	movlw	98
 27628  01174E  0012               	return	
 27629  011750  0E2A               	movlw	42
 27630  011752  0012               	return	
 27631  011754  0E64               	movlw	100
 27632  011756  0012               	return	
 27633  011758  0E6E               	movlw	110
 27634  01175A  0012               	return	
 27635  01175C  0E5B               	movlw	91
 27636  01175E  0012               	return	
 27637  011760  0E77               	movlw	119
 27638  011762  0012               	return	
 27639  011764  0E7F               	movlw	127
 27640  011766  0012               	return	
 27641  011768  0E39               	movlw	57
 27642  01176A  0012               	return	
 27643  01176C  0E3F               	movlw	63
 27644  01176E  0012               	return	
 27645  011770  0E79               	movlw	121
 27646  011772  0012               	return	
 27647  011774  0E71               	movlw	113
 27648  011776  0012               	return	
 27649  011778  0E3D               	movlw	61
 27650  01177A  0012               	return	
 27651  01177C  0E76               	movlw	118
 27652  01177E  0012               	return	
 27653  011780  0E06               	movlw	6
 27654  011782  0012               	return	
 27655  011784  0E1E               	movlw	30
 27656  011786  0012               	return	
 27657  011788  0E57               	movlw	87
 27658  01178A  0012               	return	
 27659  01178C  0E38               	movlw	56
 27660  01178E  0012               	return	
 27661  011790  0E76               	movlw	118
 27662  011792  0012               	return	
 27663  011794  0E76               	movlw	118
 27664  011796  0012               	return	
 27665  011798  0E3F               	movlw	63
 27666  01179A  0012               	return	
 27667  01179C  0E73               	movlw	115
 27668  01179E  0012               	return	
 27669  0117A0  0E3F               	movlw	63
 27670  0117A2  0012               	return	
 27671  0117A4  0E77               	movlw	119
 27672  0117A6  0012               	return	
 27673  0117A8  0E6D               	movlw	109
 27674  0117AA  0012               	return	
 27675  0117AC  0E31               	movlw	49
 27676  0117AE  0012               	return	
 27677  0117B0  0E3E               	movlw	62
 27678  0117B2  0012               	return	
 27679  0117B4  0E3E               	movlw	62
 27680  0117B6  0012               	return	
 27681  0117B8  0E7E               	movlw	126
 27682  0117BA  0012               	return	
 27683  0117BC  0E76               	movlw	118
 27684  0117BE  0012               	return	
 27685  0117C0  0E66               	movlw	102
 27686  0117C2  0012               	return	
 27687  0117C4  0E5B               	movlw	91
 27688  0117C6  0012               	return	
 27689  0117C8  0E80               	movlw	128
 27690  0117CA  0012               	return	
 27691  0117CC                     l853:
 27692  0117CC  0100               	movlb	0	; () banked
 27693  0117CE  51BA               	movf	ToSegment@pCHR& (0+255),w,b
 27694                           
 27695                           ; Switch size 1, requested type "space"
 27696                           ; Number of cases is 63, Range of values is 46 to 122
 27697                           ; switch strategies available:
 27698                           ; Name         Instructions Cycles
 27699                           ; simple_byte          190    96 (average)
 27700                           ;	Chosen strategy is simple_byte
 27701  0117D0  0A2E               	xorlw	46	; case 46
 27702  0117D2  B4D8               	btfsc	status,2,c
 27703  0117D4  D7F9               	goto	l917
 27704  0117D6  0A1E               	xorlw	30	; case 48
 27705  0117D8  B4D8               	btfsc	status,2,c
 27706  0117DA  D77A               	goto	l854
 27707  0117DC  0A01               	xorlw	1	; case 49
 27708  0117DE  B4D8               	btfsc	status,2,c
 27709  0117E0  D779               	goto	l856
 27710  0117E2  0A03               	xorlw	3	; case 50
 27711  0117E4  B4D8               	btfsc	status,2,c
 27712  0117E6  D778               	goto	l857
 27713  0117E8  0A01               	xorlw	1	; case 51
 27714  0117EA  B4D8               	btfsc	status,2,c
 27715  0117EC  D777               	goto	l858
 27716  0117EE  0A07               	xorlw	7	; case 52
 27717  0117F0  B4D8               	btfsc	status,2,c
 27718  0117F2  D776               	goto	l859
 27719  0117F4  0A01               	xorlw	1	; case 53
 27720  0117F6  B4D8               	btfsc	status,2,c
 27721  0117F8  D775               	goto	l860
 27722  0117FA  0A03               	xorlw	3	; case 54
 27723  0117FC  B4D8               	btfsc	status,2,c
 27724  0117FE  D774               	goto	l861
 27725  011800  0A01               	xorlw	1	; case 55
 27726  011802  B4D8               	btfsc	status,2,c
 27727  011804  D773               	goto	l862
 27728  011806  0A0F               	xorlw	15	; case 56
 27729  011808  B4D8               	btfsc	status,2,c
 27730  01180A  D772               	goto	l863
 27731  01180C  0A01               	xorlw	1	; case 57
 27732  01180E  B4D8               	btfsc	status,2,c
 27733  011810  D771               	goto	l864
 27734  011812  0A78               	xorlw	120	; case 65
 27735  011814  B4D8               	btfsc	status,2,c
 27736  011816  D7A4               	goto	l891
 27737  011818  0A03               	xorlw	3	; case 66
 27738  01181A  B4D8               	btfsc	status,2,c
 27739  01181C  D7A3               	goto	l892
 27740  01181E  0A01               	xorlw	1	; case 67
 27741  011820  B4D8               	btfsc	status,2,c
 27742  011822  D7A2               	goto	l893
 27743  011824  0A07               	xorlw	7	; case 68
 27744  011826  B4D8               	btfsc	status,2,c
 27745  011828  D7A1               	goto	l894
 27746  01182A  0A01               	xorlw	1	; case 69
 27747  01182C  B4D8               	btfsc	status,2,c
 27748  01182E  D7A0               	goto	l895
 27749  011830  0A03               	xorlw	3	; case 70
 27750  011832  B4D8               	btfsc	status,2,c
 27751  011834  D79F               	goto	l896
 27752  011836  0A01               	xorlw	1	; case 71
 27753  011838  B4D8               	btfsc	status,2,c
 27754  01183A  D79E               	goto	l897
 27755  01183C  0A0F               	xorlw	15	; case 72
 27756  01183E  B4D8               	btfsc	status,2,c
 27757  011840  D79D               	goto	l898
 27758  011842  0A01               	xorlw	1	; case 73
 27759  011844  B4D8               	btfsc	status,2,c
 27760  011846  D79C               	goto	l899
 27761  011848  0A03               	xorlw	3	; case 74
 27762  01184A  B4D8               	btfsc	status,2,c
 27763  01184C  D79B               	goto	l900
 27764  01184E  0A01               	xorlw	1	; case 75
 27765  011850  B4D8               	btfsc	status,2,c
 27766  011852  D79A               	goto	l901
 27767  011854  0A07               	xorlw	7	; case 76
 27768  011856  B4D8               	btfsc	status,2,c
 27769  011858  D799               	goto	l902
 27770  01185A  0A01               	xorlw	1	; case 77
 27771  01185C  B4D8               	btfsc	status,2,c
 27772  01185E  D798               	goto	l903
 27773  011860  0A03               	xorlw	3	; case 78
 27774  011862  B4D8               	btfsc	status,2,c
 27775  011864  D797               	goto	l904
 27776  011866  0A01               	xorlw	1	; case 79
 27777  011868  B4D8               	btfsc	status,2,c
 27778  01186A  D796               	goto	l905
 27779  01186C  0A1F               	xorlw	31	; case 80
 27780  01186E  B4D8               	btfsc	status,2,c
 27781  011870  D795               	goto	l906
 27782  011872  0A01               	xorlw	1	; case 81
 27783  011874  B4D8               	btfsc	status,2,c
 27784  011876  D794               	goto	l907
 27785  011878  0A03               	xorlw	3	; case 82
 27786  01187A  B4D8               	btfsc	status,2,c
 27787  01187C  D793               	goto	l908
 27788  01187E  0A01               	xorlw	1	; case 83
 27789  011880  B4D8               	btfsc	status,2,c
 27790  011882  D792               	goto	l909
 27791  011884  0A07               	xorlw	7	; case 84
 27792  011886  B4D8               	btfsc	status,2,c
 27793  011888  D791               	goto	l910
 27794  01188A  0A01               	xorlw	1	; case 85
 27795  01188C  B4D8               	btfsc	status,2,c
 27796  01188E  D790               	goto	l911
 27797  011890  0A03               	xorlw	3	; case 86
 27798  011892  B4D8               	btfsc	status,2,c
 27799  011894  D78F               	goto	l912
 27800  011896  0A01               	xorlw	1	; case 87
 27801  011898  B4D8               	btfsc	status,2,c
 27802  01189A  D78E               	goto	l913
 27803  01189C  0A0F               	xorlw	15	; case 88
 27804  01189E  B4D8               	btfsc	status,2,c
 27805  0118A0  D78D               	goto	l914
 27806  0118A2  0A01               	xorlw	1	; case 89
 27807  0118A4  B4D8               	btfsc	status,2,c
 27808  0118A6  D78C               	goto	l915
 27809  0118A8  0A03               	xorlw	3	; case 90
 27810  0118AA  B4D8               	btfsc	status,2,c
 27811  0118AC  D78B               	goto	l916
 27812  0118AE  0A3B               	xorlw	59	; case 97
 27813  0118B0  B4D8               	btfsc	status,2,c
 27814  0118B2  D722               	goto	l865
 27815  0118B4  0A03               	xorlw	3	; case 98
 27816  0118B6  B4D8               	btfsc	status,2,c
 27817  0118B8  D721               	goto	l866
 27818  0118BA  0A01               	xorlw	1	; case 99
 27819  0118BC  B4D8               	btfsc	status,2,c
 27820  0118BE  D720               	goto	l867
 27821  0118C0  0A07               	xorlw	7	; case 100
 27822  0118C2  B4D8               	btfsc	status,2,c
 27823  0118C4  D71F               	goto	l868
 27824  0118C6  0A01               	xorlw	1	; case 101
 27825  0118C8  B4D8               	btfsc	status,2,c
 27826  0118CA  D71E               	goto	l869
 27827  0118CC  0A03               	xorlw	3	; case 102
 27828  0118CE  B4D8               	btfsc	status,2,c
 27829  0118D0  D71D               	goto	l870
 27830  0118D2  0A01               	xorlw	1	; case 103
 27831  0118D4  B4D8               	btfsc	status,2,c
 27832  0118D6  D71C               	goto	l871
 27833  0118D8  0A0F               	xorlw	15	; case 104
 27834  0118DA  B4D8               	btfsc	status,2,c
 27835  0118DC  D71B               	goto	l872
 27836  0118DE  0A01               	xorlw	1	; case 105
 27837  0118E0  B4D8               	btfsc	status,2,c
 27838  0118E2  D71A               	goto	l873
 27839  0118E4  0A03               	xorlw	3	; case 106
 27840  0118E6  B4D8               	btfsc	status,2,c
 27841  0118E8  D719               	goto	l874
 27842  0118EA  0A01               	xorlw	1	; case 107
 27843  0118EC  B4D8               	btfsc	status,2,c
 27844  0118EE  D718               	goto	l875
 27845  0118F0  0A07               	xorlw	7	; case 108
 27846  0118F2  B4D8               	btfsc	status,2,c
 27847  0118F4  D717               	goto	l876
 27848  0118F6  0A01               	xorlw	1	; case 109
 27849  0118F8  B4D8               	btfsc	status,2,c
 27850  0118FA  D716               	goto	l877
 27851  0118FC  0A03               	xorlw	3	; case 110
 27852  0118FE  B4D8               	btfsc	status,2,c
 27853  011900  D715               	goto	l878
 27854  011902  0A01               	xorlw	1	; case 111
 27855  011904  B4D8               	btfsc	status,2,c
 27856  011906  D714               	goto	l879
 27857  011908  0A1F               	xorlw	31	; case 112
 27858  01190A  B4D8               	btfsc	status,2,c
 27859  01190C  D713               	goto	l880
 27860  01190E  0A01               	xorlw	1	; case 113
 27861  011910  B4D8               	btfsc	status,2,c
 27862  011912  D712               	goto	l881
 27863  011914  0A03               	xorlw	3	; case 114
 27864  011916  B4D8               	btfsc	status,2,c
 27865  011918  D711               	goto	l882
 27866  01191A  0A01               	xorlw	1	; case 115
 27867  01191C  B4D8               	btfsc	status,2,c
 27868  01191E  D710               	goto	l883
 27869  011920  0A07               	xorlw	7	; case 116
 27870  011922  B4D8               	btfsc	status,2,c
 27871  011924  D70F               	goto	l884
 27872  011926  0A01               	xorlw	1	; case 117
 27873  011928  B4D8               	btfsc	status,2,c
 27874  01192A  D70E               	goto	l885
 27875  01192C  0A03               	xorlw	3	; case 118
 27876  01192E  B4D8               	btfsc	status,2,c
 27877  011930  D70D               	goto	l886
 27878  011932  0A01               	xorlw	1	; case 119
 27879  011934  B4D8               	btfsc	status,2,c
 27880  011936  D70C               	goto	l887
 27881  011938  0A0F               	xorlw	15	; case 120
 27882  01193A  B4D8               	btfsc	status,2,c
 27883  01193C  D70B               	goto	l888
 27884  01193E  0A01               	xorlw	1	; case 121
 27885  011940  B4D8               	btfsc	status,2,c
 27886  011942  D70A               	goto	l889
 27887  011944  0A03               	xorlw	3	; case 122
 27888  011946  B4D8               	btfsc	status,2,c
 27889  011948  D709               	goto	l890
 27890                           
 27891                           ;Types.c: 354: return 0;
 27892                           
 27893                           ; BSR set to: 0
 27894  01194A  0E00               	movlw	0
 27895  01194C  0012               	return	
 27896  01194E                     __end_of_ToSegment:
 27897                           	opt stack 0
 27898                           tosu	equ	0xFFF
 27899                           tosh	equ	0xFFE
 27900                           tosl	equ	0xFFD
 27901                           pclath	equ	0xFFA
 27902                           tblptru	equ	0xFF8
 27903                           tblptrh	equ	0xFF7
 27904                           tblptrl	equ	0xFF6
 27905                           tablat	equ	0xFF5
 27906                           prodh	equ	0xFF4
 27907                           prodl	equ	0xFF3
 27908                           intcon	equ	0xFF2
 27909                           postinc0	equ	0xFEE
 27910                           wreg	equ	0xFE8
 27911                           indf1	equ	0xFE7
 27912                           postdec1	equ	0xFE5
 27913                           fsr1h	equ	0xFE2
 27914                           fsr1l	equ	0xFE1
 27915                           indf2	equ	0xFDF
 27916                           postinc2	equ	0xFDE
 27917                           postdec2	equ	0xFDD
 27918                           plusw2	equ	0xFDB
 27919                           fsr2h	equ	0xFDA
 27920                           fsr2l	equ	0xFD9
 27921                           status	equ	0xFD8
 27922                           
 27923 ;; *************** function _HMI_SetButton *****************
 27924 ;; Defined at:
 27925 ;;		line 186 in file "HMI.c"
 27926 ;; Parameters:    Size  Location     Type
 27927 ;;  pValue          1    wreg     unsigned char 
 27928 ;; Auto vars:     Size  Location     Type
 27929 ;;  pValue          1    6[BANK0 ] unsigned char 
 27930 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
 27931 ;;  v               1    7[BANK0 ] unsigned char 
 27932 ;; Return value:  Size  Location     Type
 27933 ;;                  1    wreg      void 
 27934 ;; Registers used:
 27935 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 27936 ;; Tracked objects:
 27937 ;;		On entry : 0/0
 27938 ;;		On exit  : 0/0
 27939 ;;		Unchanged: 0/0
 27940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27942 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27943 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27944 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27945 ;;Total ram usage:        8 bytes
 27946 ;; Hardware stack levels used:    1
 27947 ;; Hardware stack levels required when called:    7
 27948 ;; This function calls:
 27949 ;;		Nothing
 27950 ;; This function is called by:
 27951 ;;		_Event_TestButton
 27952 ;; This function uses a non-reentrant model
 27953 ;;
 27954                           
 27955                           	psect	text147
 27956  014C4C                     __ptext147:
 27957                           	opt stack 0
 27958  014C4C                     _HMI_SetButton:
 27959                           	opt stack 18
 27960                           
 27961                           ;incstack = 0
 27962                           ;HMI_SetButton@pValue stored from wreg
 27963  014C4C  0100               	movlb	0	; () banked
 27964  014C4E  6FC0               	movwf	HMI_SetButton@pValue& (0+255),b
 27965                           
 27966                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
 27967  014C50  0E18               	movlw	low HMI_SetButton@F7213
 27968  014C52  6EF6               	movwf	tblptrl,c
 27969  014C54                     	if	1	;There is more than 1 active tblptr byte
 27970  014C54  0EFD               	movlw	high HMI_SetButton@F7213
 27971  014C56  6EF7               	movwf	tblptrh,c
 27972  014C58                     	endif
 27973  014C58                     	if	1	;There are 3 active tblptr bytes
 27974  014C58  0E00               	movlw	low (HMI_SetButton@F7213 shr (0+16))
 27975  014C5A  6EF8               	movwf	tblptru,c
 27976  014C5C                     	endif
 27977  014C5C  0009               	tblrd		*+
 27978  014C5E  CFF5 F0BC          	movff	tablat,HMI_SetButton@reindex
 27979  014C62  0009               	tblrd		*+
 27980  014C64  CFF5 F0BD          	movff	tablat,HMI_SetButton@reindex+1
 27981  014C68  0009               	tblrd		*+
 27982  014C6A  CFF5 F0BE          	movff	tablat,HMI_SetButton@reindex+2
 27983  014C6E  000A               	tblrd		*-
 27984  014C70  CFF5 F0BF          	movff	tablat,HMI_SetButton@reindex+3
 27985                           
 27986                           ;HMI.c: 189: UINT8 v = 0b00010001;
 27987  014C74  0E11               	movlw	17
 27988  014C76  0100               	movlb	0	; () banked
 27989  014C78  6FC1               	movwf	HMI_SetButton@v& (0+255),b
 27990                           
 27991                           ; BSR set to: 0
 27992                           ;HMI.c: 190: pValue &= 3;
 27993  014C7A  0E03               	movlw	3
 27994  014C7C  0100               	movlb	0	; () banked
 27995  014C7E  17C0               	andwf	HMI_SetButton@pValue& (0+255),f,b
 27996                           
 27997                           ; BSR set to: 0
 27998                           ;HMI.c: 191: v = v << reindex[pValue];
 27999  014C80  0100               	movlb	0	; () banked
 28000  014C82  51C0               	movf	HMI_SetButton@pValue& (0+255),w,b
 28001  014C84  0D01               	mullw	1
 28002  014C86  0EBC               	movlw	low HMI_SetButton@reindex
 28003  014C88  24F3               	addwf	prodl,w,c
 28004  014C8A  6ED9               	movwf	fsr2l,c
 28005  014C8C  0E00               	movlw	high HMI_SetButton@reindex
 28006  014C8E  20F4               	addwfc	prodh,w,c
 28007  014C90  6EDA               	movwf	fsr2h,c
 28008  014C92  50DF               	movf	indf2,w,c
 28009  014C94  0100               	movlb	0	; () banked
 28010  014C96  6FBA               	movwf	??_HMI_SetButton& (0+255),b
 28011  014C98  C0C1  F0BB         	movff	HMI_SetButton@v,??_HMI_SetButton+1
 28012  014C9C  0100               	movlb	0	; () banked
 28013  014C9E  2BBA               	incf	??_HMI_SetButton& (0+255),f,b
 28014  014CA0  D003               	goto	u9214
 28015  014CA2                     u9215:
 28016  014CA2  0100               	movlb	0	; () banked
 28017  014CA4  90D8               	bcf	status,0,c
 28018  014CA6  37BB               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
 28019  014CA8                     u9214:
 28020  014CA8  0100               	movlb	0	; () banked
 28021  014CAA  2FBA               	decfsz	??_HMI_SetButton& (0+255),f,b
 28022  014CAC  D7FA               	goto	u9215
 28023  014CAE  0100               	movlb	0	; () banked
 28024  014CB0  51BB               	movf	(??_HMI_SetButton+1)& (0+255),w,b
 28025  014CB2  0100               	movlb	0	; () banked
 28026  014CB4  6FC1               	movwf	HMI_SetButton@v& (0+255),b
 28027                           
 28028                           ; BSR set to: 0
 28029                           ;HMI.c: 192: v = v >> 4;
 28030  014CB6  0100               	movlb	0	; () banked
 28031  014CB8  39C1               	swapf	HMI_SetButton@v& (0+255),w,b
 28032  014CBA  0B0F               	andlw	15
 28033  014CBC  0100               	movlb	0	; () banked
 28034  014CBE  6FC1               	movwf	HMI_SetButton@v& (0+255),b
 28035                           
 28036                           ; BSR set to: 0
 28037                           ;HMI.c: 193: v = v & 0x0F;
 28038  014CC0  0100               	movlb	0	; () banked
 28039  014CC2  51C1               	movf	HMI_SetButton@v& (0+255),w,b
 28040  014CC4  0B0F               	andlw	15
 28041  014CC6  0100               	movlb	0	; () banked
 28042  014CC8  6FC1               	movwf	HMI_SetButton@v& (0+255),b
 28043                           
 28044                           ; BSR set to: 0
 28045                           ;HMI.c: 194: HMIBoard.pButton = v;
 28046  014CCA  0103               	movlb	3	; () banked
 28047  014CCC  5142               	movf	(_HMIBoard+6)& (0+255),w,b
 28048  014CCE  0100               	movlb	0	; () banked
 28049  014CD0  19C1               	xorwf	HMI_SetButton@v& (0+255),w,b
 28050  014CD2  0BF0               	andlw	-16
 28051  014CD4  19C1               	xorwf	HMI_SetButton@v& (0+255),w,b
 28052  014CD6  0103               	movlb	3	; () banked
 28053  014CD8  6F42               	movwf	(_HMIBoard+6)& (0+255),b
 28054                           
 28055                           ; BSR set to: 3
 28056  014CDA  0012               	return		;funcret
 28057  014CDC                     __end_of_HMI_SetButton:
 28058                           	opt stack 0
 28059                           tosu	equ	0xFFF
 28060                           tosh	equ	0xFFE
 28061                           tosl	equ	0xFFD
 28062                           pclath	equ	0xFFA
 28063                           tblptru	equ	0xFF8
 28064                           tblptrh	equ	0xFF7
 28065                           tblptrl	equ	0xFF6
 28066                           tablat	equ	0xFF5
 28067                           prodh	equ	0xFF4
 28068                           prodl	equ	0xFF3
 28069                           intcon	equ	0xFF2
 28070                           postinc0	equ	0xFEE
 28071                           wreg	equ	0xFE8
 28072                           indf1	equ	0xFE7
 28073                           postdec1	equ	0xFE5
 28074                           fsr1h	equ	0xFE2
 28075                           fsr1l	equ	0xFE1
 28076                           indf2	equ	0xFDF
 28077                           postinc2	equ	0xFDE
 28078                           postdec2	equ	0xFDD
 28079                           plusw2	equ	0xFDB
 28080                           fsr2h	equ	0xFDA
 28081                           fsr2l	equ	0xFD9
 28082                           status	equ	0xFD8
 28083                           
 28084 ;; *************** function _LED_Toggle *****************
 28085 ;; Defined at:
 28086 ;;		line 50 in file "Library/LED.c"
 28087 ;; Parameters:    Size  Location     Type
 28088 ;;  pLED            1    wreg     enum E6739
 28089 ;; Auto vars:     Size  Location     Type
 28090 ;;  pLED            1   24[BANK0 ] enum E6739
 28091 ;; Return value:  Size  Location     Type
 28092 ;;                  1    wreg      void 
 28093 ;; Registers used:
 28094 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28095 ;; Tracked objects:
 28096 ;;		On entry : 0/0
 28097 ;;		On exit  : 0/0
 28098 ;;		Unchanged: 0/0
 28099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28101 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28103 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28104 ;;Total ram usage:        1 bytes
 28105 ;; Hardware stack levels used:    1
 28106 ;; Hardware stack levels required when called:   12
 28107 ;; This function calls:
 28108 ;;		_Port_TogglePin
 28109 ;; This function is called by:
 28110 ;;		_LCD_Reset
 28111 ;;		_Event_DIPSwitch
 28112 ;;		_Event_TestButton
 28113 ;;		_Event_ADCSequenceComplete
 28114 ;;		_Event_HMI_DIPSwitch
 28115 ;;		_Event_HMI_LeftButton
 28116 ;;		_Event_HMI_RightButton
 28117 ;;		_Event_HMI_UpButton
 28118 ;;		_Event_HMI_DownButton
 28119 ;; This function uses a non-reentrant model
 28120 ;;
 28121                           
 28122                           	psect	text148
 28123  015C88                     __ptext148:
 28124                           	opt stack 0
 28125  015C88                     _LED_Toggle:
 28126                           	opt stack 13
 28127                           
 28128                           ; BSR set to: 3
 28129                           ;incstack = 0
 28130                           ;LED_Toggle@pLED stored from wreg
 28131  015C88  0100               	movlb	0	; () banked
 28132  015C8A  6FD2               	movwf	LED_Toggle@pLED& (0+255),b
 28133                           
 28134                           ;LED.c: 52: switch (pLED)
 28135  015C8C  D018               	goto	l234
 28136  015C8E                     
 28137                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 28138  015C8E  0EA7               	movlw	low _PortC
 28139  015C90  0100               	movlb	0	; () banked
 28140  015C92  6FCE               	movwf	Port_TogglePin@pInput& (0+255),b
 28141  015C94  0E00               	movlw	high _PortC
 28142  015C96  0100               	movlb	0	; () banked
 28143  015C98  6FCF               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 28144  015C9A  0E00               	movlw	0
 28145  015C9C  0100               	movlb	0	; () banked
 28146  015C9E  6FD0               	movwf	Port_TogglePin@pPin& (0+255),b
 28147  015CA0  ECA9  F0B0         	call	_Port_TogglePin	;wreg free
 28148                           
 28149                           ;LED.c: 56: break;
 28150  015CA4  0012               	return	
 28151  015CA6                     
 28152                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 28153  015CA6  0EA7               	movlw	low _PortC
 28154  015CA8  0100               	movlb	0	; () banked
 28155  015CAA  6FCE               	movwf	Port_TogglePin@pInput& (0+255),b
 28156  015CAC  0E00               	movlw	high _PortC
 28157  015CAE  0100               	movlb	0	; () banked
 28158  015CB0  6FCF               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 28159  015CB2  0E01               	movlw	1
 28160  015CB4  0100               	movlb	0	; () banked
 28161  015CB6  6FD0               	movwf	Port_TogglePin@pPin& (0+255),b
 28162  015CB8  ECA9  F0B0         	call	_Port_TogglePin	;wreg free
 28163                           
 28164                           ;LED.c: 60: }
 28165                           
 28166                           ;LED.c: 59: break;
 28167  015CBC  0012               	return	
 28168  015CBE                     l234:
 28169  015CBE  0100               	movlb	0	; () banked
 28170  015CC0  51D2               	movf	LED_Toggle@pLED& (0+255),w,b
 28171                           
 28172                           ; Switch size 1, requested type "space"
 28173                           ; Number of cases is 2, Range of values is 0 to 1
 28174                           ; switch strategies available:
 28175                           ; Name         Instructions Cycles
 28176                           ; simple_byte            7     4 (average)
 28177                           ;	Chosen strategy is simple_byte
 28178  015CC2  0A00               	xorlw	0	; case 0
 28179  015CC4  B4D8               	btfsc	status,2,c
 28180  015CC6  D7E3               	goto	l235
 28181  015CC8  0A01               	xorlw	1	; case 1
 28182  015CCA  A4D8               	btfss	status,2,c
 28183  015CCC  0012               	return	
 28184  015CCE  D7EB               	goto	l237
 28185  015CD0                     __end_of_LED_Toggle:
 28186                           	opt stack 0
 28187                           tosu	equ	0xFFF
 28188                           tosh	equ	0xFFE
 28189                           tosl	equ	0xFFD
 28190                           pclath	equ	0xFFA
 28191                           tblptru	equ	0xFF8
 28192                           tblptrh	equ	0xFF7
 28193                           tblptrl	equ	0xFF6
 28194                           tablat	equ	0xFF5
 28195                           prodh	equ	0xFF4
 28196                           prodl	equ	0xFF3
 28197                           intcon	equ	0xFF2
 28198                           postinc0	equ	0xFEE
 28199                           wreg	equ	0xFE8
 28200                           indf1	equ	0xFE7
 28201                           postdec1	equ	0xFE5
 28202                           fsr1h	equ	0xFE2
 28203                           fsr1l	equ	0xFE1
 28204                           indf2	equ	0xFDF
 28205                           postinc2	equ	0xFDE
 28206                           postdec2	equ	0xFDD
 28207                           plusw2	equ	0xFDB
 28208                           fsr2h	equ	0xFDA
 28209                           fsr2l	equ	0xFD9
 28210                           status	equ	0xFD8
 28211                           
 28212 ;; *************** function _Port_TogglePin *****************
 28213 ;; Defined at:
 28214 ;;		line 278 in file "Library/Port.c"
 28215 ;; Parameters:    Size  Location     Type
 28216 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 28217 ;;		 -> PortC(10), 
 28218 ;;  pPin            1   22[BANK0 ] enum E6750
 28219 ;; Auto vars:     Size  Location     Type
 28220 ;;  Value           1   23[BANK0 ] unsigned char 
 28221 ;; Return value:  Size  Location     Type
 28222 ;;                  1    wreg      void 
 28223 ;; Registers used:
 28224 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28225 ;; Tracked objects:
 28226 ;;		On entry : 0/0
 28227 ;;		On exit  : 0/0
 28228 ;;		Unchanged: 0/0
 28229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28230 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28231 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28233 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28234 ;;Total ram usage:        4 bytes
 28235 ;; Hardware stack levels used:    1
 28236 ;; Hardware stack levels required when called:   11
 28237 ;; This function calls:
 28238 ;;		_Port_GetPin
 28239 ;;		_Port_SetPin
 28240 ;; This function is called by:
 28241 ;;		_LED_Toggle
 28242 ;; This function uses a non-reentrant model
 28243 ;;
 28244                           
 28245                           	psect	text149
 28246  016152                     __ptext149:
 28247                           	opt stack 0
 28248  016152                     _Port_TogglePin:
 28249                           	opt stack 13
 28250                           
 28251                           ;Port.c: 280: UINT8 Value;
 28252                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 28253                           
 28254                           ;incstack = 0
 28255  016152  C0CE  F0BA         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 28256  016156  C0CF  F0BB         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 28257  01615A  C0D0  F0BC         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 28258  01615E  ECAE  F0AE         	call	_Port_GetPin	;wreg free
 28259  016162  0100               	movlb	0	; () banked
 28260  016164  6FD1               	movwf	Port_TogglePin@Value& (0+255),b
 28261                           
 28262                           ; BSR set to: 0
 28263                           ;Port.c: 282: Value ^= 0x01;
 28264  016166  0E01               	movlw	1
 28265  016168  0100               	movlb	0	; () banked
 28266  01616A  1BD1               	xorwf	Port_TogglePin@Value& (0+255),f,b
 28267                           
 28268                           ; BSR set to: 0
 28269                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 28270  01616C  C0CE  F0C9         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 28271  016170  C0CF  F0CA         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 28272  016174  C0D0  F0CB         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 28273  016178  C0D1  F0CC         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 28274  01617C  EC57  F09F         	call	_Port_SetPin	;wreg free
 28275  016180  0012               	return		;funcret
 28276  016182                     __end_of_Port_TogglePin:
 28277                           	opt stack 0
 28278                           tosu	equ	0xFFF
 28279                           tosh	equ	0xFFE
 28280                           tosl	equ	0xFFD
 28281                           pclath	equ	0xFFA
 28282                           tblptru	equ	0xFF8
 28283                           tblptrh	equ	0xFF7
 28284                           tblptrl	equ	0xFF6
 28285                           tablat	equ	0xFF5
 28286                           prodh	equ	0xFF4
 28287                           prodl	equ	0xFF3
 28288                           intcon	equ	0xFF2
 28289                           postinc0	equ	0xFEE
 28290                           wreg	equ	0xFE8
 28291                           indf1	equ	0xFE7
 28292                           postdec1	equ	0xFE5
 28293                           fsr1h	equ	0xFE2
 28294                           fsr1l	equ	0xFE1
 28295                           indf2	equ	0xFDF
 28296                           postinc2	equ	0xFDE
 28297                           postdec2	equ	0xFDD
 28298                           plusw2	equ	0xFDB
 28299                           fsr2h	equ	0xFDA
 28300                           fsr2l	equ	0xFD9
 28301                           status	equ	0xFD8
 28302                           
 28303 ;; *************** function _Port_SetPin *****************
 28304 ;; Defined at:
 28305 ;;		line 247 in file "Library/Port.c"
 28306 ;; Parameters:    Size  Location     Type
 28307 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 28308 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 28309 ;;  pPin            1   17[BANK0 ] enum E6750
 28310 ;;  pValue          1   18[BANK0 ] unsigned char 
 28311 ;; Auto vars:     Size  Location     Type
 28312 ;;  Type            1   19[BANK0 ] enum E6795
 28313 ;; Return value:  Size  Location     Type
 28314 ;;                  1    wreg      void 
 28315 ;; Registers used:
 28316 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28317 ;; Tracked objects:
 28318 ;;		On entry : 0/0
 28319 ;;		On exit  : 0/0
 28320 ;;		Unchanged: 0/0
 28321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28322 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28323 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28325 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28326 ;;Total ram usage:        5 bytes
 28327 ;; Hardware stack levels used:    1
 28328 ;; Hardware stack levels required when called:   10
 28329 ;; This function calls:
 28330 ;;		_Byte_SetBit
 28331 ;;		_Word_GetPair
 28332 ;; This function is called by:
 28333 ;;		_Reset_Low
 28334 ;;		_Reset_High
 28335 ;;		_LED_Set
 28336 ;;		_Port_TogglePin
 28337 ;;		_Motor_Init
 28338 ;;		_Motor_Step
 28339 ;;		_MXK_Init
 28340 ;; This function uses a non-reentrant model
 28341 ;;
 28342                           
 28343                           	psect	text150
 28344  013EAE                     __ptext150:
 28345                           	opt stack 0
 28346  013EAE                     _Port_SetPin:
 28347                           	opt stack 13
 28348                           
 28349                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 28350                           
 28351                           ;incstack = 0
 28352  013EAE  0E08               	movlw	8
 28353  013EB0  0100               	movlb	0	; () banked
 28354  013EB2  25C9               	addwf	Port_SetPin@pInput& (0+255),w,b
 28355  013EB4  0100               	movlb	0	; () banked
 28356  013EB6  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 28357  013EB8  0E00               	movlw	0
 28358  013EBA  0100               	movlb	0	; () banked
 28359  013EBC  21CA               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 28360  013EBE  0100               	movlb	0	; () banked
 28361  013EC0  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 28362  013EC2  C0CB  F0C8         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 28363  013EC6  ECB1  F0AF         	call	_Word_GetPair	;wreg free
 28364  013ECA  0100               	movlb	0	; () banked
 28365  013ECC  6FCD               	movwf	Port_SetPin@Type& (0+255),b
 28366                           
 28367                           ;Port.c: 250: switch (Type)
 28368  013ECE  D042               	goto	l427
 28369  013ED0                     
 28370                           ; BSR set to: 0
 28371                           ;Port.c: 256: pValue &= 1;
 28372                           
 28373                           ; BSR set to: 0
 28374  013ED0  0E01               	movlw	1
 28375  013ED2  0100               	movlb	0	; () banked
 28376  013ED4  17CC               	andwf	Port_SetPin@pValue& (0+255),f,b
 28377                           
 28378                           ; BSR set to: 0
 28379                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 28380  013ED6  0100               	movlb	0	; () banked
 28381  013ED8  EE20 F002          	lfsr	2,2
 28382  013EDC  51C9               	movf	Port_SetPin@pInput& (0+255),w,b
 28383  013EDE  26D9               	addwf	fsr2l,f,c
 28384  013EE0  51CA               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 28385  013EE2  22DA               	addwfc	fsr2h,f,c
 28386  013EE4  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 28387  013EE8  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 28388  013EEC  C0CB  F0BC         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 28389  013EF0  C0CC  F0BD         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 28390  013EF4  ECCC  F0AB         	call	_Byte_SetBit	;wreg free
 28391                           
 28392                           ;Port.c: 258: break;
 28393  013EF8  0012               	return	
 28394  013EFA                     
 28395                           ;Port.c: 261: pValue &= 1;
 28396  013EFA  0E01               	movlw	1
 28397  013EFC  0100               	movlb	0	; () banked
 28398  013EFE  17CC               	andwf	Port_SetPin@pValue& (0+255),f,b
 28399                           
 28400                           ;Port.c: 262: pValue ^= 1;
 28401  013F00  0E01               	movlw	1
 28402  013F02  0100               	movlb	0	; () banked
 28403  013F04  1BCC               	xorwf	Port_SetPin@pValue& (0+255),f,b
 28404                           
 28405                           ; BSR set to: 0
 28406                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 28407  013F06  0100               	movlb	0	; () banked
 28408  013F08  EE20 F002          	lfsr	2,2
 28409  013F0C  51C9               	movf	Port_SetPin@pInput& (0+255),w,b
 28410  013F0E  26D9               	addwf	fsr2l,f,c
 28411  013F10  51CA               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 28412  013F12  22DA               	addwfc	fsr2h,f,c
 28413  013F14  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 28414  013F18  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 28415  013F1C  C0CB  F0BC         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 28416  013F20  C0CC  F0BD         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 28417  013F24  ECCC  F0AB         	call	_Byte_SetBit	;wreg free
 28418                           
 28419                           ;Port.c: 264: break;
 28420  013F28  0012               	return	
 28421  013F2A                     
 28422                           ;Port.c: 266: pValue &= 1;
 28423  013F2A  0E01               	movlw	1
 28424  013F2C  0100               	movlb	0	; () banked
 28425  013F2E  17CC               	andwf	Port_SetPin@pValue& (0+255),f,b
 28426                           
 28427                           ; BSR set to: 0
 28428                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 28429  013F30  0100               	movlb	0	; () banked
 28430  013F32  EE20 F004          	lfsr	2,4
 28431  013F36  51C9               	movf	Port_SetPin@pInput& (0+255),w,b
 28432  013F38  26D9               	addwf	fsr2l,f,c
 28433  013F3A  51CA               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 28434  013F3C  22DA               	addwfc	fsr2h,f,c
 28435  013F3E  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 28436  013F42  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 28437  013F46  C0CB  F0BC         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 28438  013F4A  C0CC  F0BD         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 28439  013F4E  ECCC  F0AB         	call	_Byte_SetBit	;wreg free
 28440                           
 28441                           ;Port.c: 269: }
 28442                           
 28443                           ;Port.c: 268: break;
 28444  013F52  0012               	return	
 28445  013F54                     l427:
 28446  013F54  0100               	movlb	0	; () banked
 28447  013F56  51CD               	movf	Port_SetPin@Type& (0+255),w,b
 28448                           
 28449                           ; Switch size 1, requested type "space"
 28450                           ; Number of cases is 4, Range of values is 0 to 3
 28451                           ; switch strategies available:
 28452                           ; Name         Instructions Cycles
 28453                           ; simple_byte           13     7 (average)
 28454                           ;	Chosen strategy is simple_byte
 28455  013F58  0A00               	xorlw	0	; case 0
 28456  013F5A  B4D8               	btfsc	status,2,c
 28457  013F5C  0012               	return	
 28458  013F5E  0A01               	xorlw	1	; case 1
 28459  013F60  B4D8               	btfsc	status,2,c
 28460  013F62  D7B6               	goto	l430
 28461  013F64  0A03               	xorlw	3	; case 2
 28462  013F66  B4D8               	btfsc	status,2,c
 28463  013F68  D7C8               	goto	l432
 28464  013F6A  0A01               	xorlw	1	; case 3
 28465  013F6C  A4D8               	btfss	status,2,c
 28466  013F6E  0012               	return	
 28467  013F70  D7DC               	goto	l433
 28468  013F72                     __end_of_Port_SetPin:
 28469                           	opt stack 0
 28470                           tosu	equ	0xFFF
 28471                           tosh	equ	0xFFE
 28472                           tosl	equ	0xFFD
 28473                           pclath	equ	0xFFA
 28474                           tblptru	equ	0xFF8
 28475                           tblptrh	equ	0xFF7
 28476                           tblptrl	equ	0xFF6
 28477                           tablat	equ	0xFF5
 28478                           prodh	equ	0xFF4
 28479                           prodl	equ	0xFF3
 28480                           intcon	equ	0xFF2
 28481                           postinc0	equ	0xFEE
 28482                           wreg	equ	0xFE8
 28483                           indf1	equ	0xFE7
 28484                           postdec1	equ	0xFE5
 28485                           fsr1h	equ	0xFE2
 28486                           fsr1l	equ	0xFE1
 28487                           indf2	equ	0xFDF
 28488                           postinc2	equ	0xFDE
 28489                           postdec2	equ	0xFDD
 28490                           plusw2	equ	0xFDB
 28491                           fsr2h	equ	0xFDA
 28492                           fsr2l	equ	0xFD9
 28493                           status	equ	0xFD8
 28494                           
 28495 ;; *************** function _Word_GetPair *****************
 28496 ;; Defined at:
 28497 ;;		line 156 in file "Library/Types.c"
 28498 ;; Parameters:    Size  Location     Type
 28499 ;;  pInput          2   12[BANK0 ] PTR struct Word
 28500 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 28501 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 28502 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 28503 ;;		 -> PortC(10), PortF(10), NULL(0), 
 28504 ;;  pPair           1   14[BANK0 ] unsigned char 
 28505 ;; Auto vars:     Size  Location     Type
 28506 ;;		None
 28507 ;; Return value:  Size  Location     Type
 28508 ;;                  1    wreg      unsigned char 
 28509 ;; Registers used:
 28510 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28511 ;; Tracked objects:
 28512 ;;		On entry : 0/0
 28513 ;;		On exit  : 0/0
 28514 ;;		Unchanged: 0/0
 28515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28516 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28519 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28520 ;;Total ram usage:        3 bytes
 28521 ;; Hardware stack levels used:    1
 28522 ;; Hardware stack levels required when called:    9
 28523 ;; This function calls:
 28524 ;;		_Byte_GetPair
 28525 ;; This function is called by:
 28526 ;;		_Port_Init
 28527 ;;		_Port_SetPin
 28528 ;;		_Port_Set
 28529 ;;		_PortProperty_Valid
 28530 ;;		_Port_SetPair
 28531 ;;		_Port_SetQuad
 28532 ;; This function uses a non-reentrant model
 28533 ;;
 28534                           
 28535                           	psect	text151
 28536  015F62                     __ptext151:
 28537                           	opt stack 0
 28538  015F62                     _Word_GetPair:
 28539                           	opt stack 13
 28540                           
 28541                           ;Types.c: 158: if (pPair >= 4)
 28542                           
 28543                           ;incstack = 0
 28544  015F62  0E03               	movlw	3
 28545  015F64  0100               	movlb	0	; () banked
 28546  015F66  65C8               	cpfsgt	Word_GetPair@pPair& (0+255),b
 28547  015F68  D012               	goto	l781
 28548                           
 28549                           ; BSR set to: 0
 28550                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 28551  015F6A  0E01               	movlw	1
 28552  015F6C  0100               	movlb	0	; () banked
 28553  015F6E  25C6               	addwf	Word_GetPair@pInput& (0+255),w,b
 28554  015F70  0100               	movlb	0	; () banked
 28555  015F72  6FC3               	movwf	Byte_GetPair@pInput& (0+255),b
 28556  015F74  0E00               	movlw	0
 28557  015F76  0100               	movlb	0	; () banked
 28558  015F78  21C7               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 28559  015F7A  0100               	movlb	0	; () banked
 28560  015F7C  6FC4               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 28561  015F7E  0100               	movlb	0	; () banked
 28562  015F80  51C8               	movf	Word_GetPair@pPair& (0+255),w,b
 28563  015F82  0FFC               	addlw	252
 28564  015F84  0100               	movlb	0	; () banked
 28565  015F86  6FC5               	movwf	Byte_GetPair@pPair& (0+255),b
 28566  015F88  EC04  F0B2         	call	_Byte_GetPair	;wreg free
 28567  015F8C  0012               	return	
 28568  015F8E                     l781:
 28569                           
 28570                           ;Types.c: 160: else
 28571                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 28572  015F8E  C0C6  F0C3         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 28573  015F92  C0C7  F0C4         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 28574  015F96  C0C8  F0C5         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 28575  015F9A  EC04  F0B2         	call	_Byte_GetPair	;wreg free
 28576  015F9E  0012               	return	
 28577  015FA0                     __end_of_Word_GetPair:
 28578                           	opt stack 0
 28579                           tosu	equ	0xFFF
 28580                           tosh	equ	0xFFE
 28581                           tosl	equ	0xFFD
 28582                           pclath	equ	0xFFA
 28583                           tblptru	equ	0xFF8
 28584                           tblptrh	equ	0xFF7
 28585                           tblptrl	equ	0xFF6
 28586                           tablat	equ	0xFF5
 28587                           prodh	equ	0xFF4
 28588                           prodl	equ	0xFF3
 28589                           intcon	equ	0xFF2
 28590                           postinc0	equ	0xFEE
 28591                           wreg	equ	0xFE8
 28592                           indf1	equ	0xFE7
 28593                           postdec1	equ	0xFE5
 28594                           fsr1h	equ	0xFE2
 28595                           fsr1l	equ	0xFE1
 28596                           indf2	equ	0xFDF
 28597                           postinc2	equ	0xFDE
 28598                           postdec2	equ	0xFDD
 28599                           plusw2	equ	0xFDB
 28600                           fsr2h	equ	0xFDA
 28601                           fsr2l	equ	0xFD9
 28602                           status	equ	0xFD8
 28603                           
 28604 ;; *************** function _Byte_GetPair *****************
 28605 ;; Defined at:
 28606 ;;		line 87 in file "Library/Types.c"
 28607 ;; Parameters:    Size  Location     Type
 28608 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 28609 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 28610 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 28611 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 28612 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 28613 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 28614 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 28615 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 28616 ;;		 -> NULL(0), 
 28617 ;;  pPair           1   11[BANK0 ] unsigned char 
 28618 ;; Auto vars:     Size  Location     Type
 28619 ;;		None
 28620 ;; Return value:  Size  Location     Type
 28621 ;;                  1    wreg      unsigned char 
 28622 ;; Registers used:
 28623 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28624 ;; Tracked objects:
 28625 ;;		On entry : 0/0
 28626 ;;		On exit  : 0/0
 28627 ;;		Unchanged: 0/0
 28628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28629 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28632 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28633 ;;Total ram usage:        3 bytes
 28634 ;; Hardware stack levels used:    1
 28635 ;; Hardware stack levels required when called:    8
 28636 ;; This function calls:
 28637 ;;		_Byte_GetZone
 28638 ;; This function is called by:
 28639 ;;		_Word_GetPair
 28640 ;; This function uses a non-reentrant model
 28641 ;;
 28642                           
 28643                           	psect	text152
 28644  016408                     __ptext152:
 28645                           	opt stack 0
 28646  016408                     _Byte_GetPair:
 28647                           	opt stack 13
 28648                           
 28649                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 28650                           
 28651                           ;incstack = 0
 28652  016408  C0C3  F0BA         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 28653  01640C  C0C4  F0BB         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 28654  016410  0E04               	movlw	4
 28655  016412  0100               	movlb	0	; () banked
 28656  016414  6FBC               	movwf	Byte_GetZone@pMax& (0+255),b
 28657  016416  C0C5  F0BD         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 28658  01641A  0E02               	movlw	2
 28659  01641C  0100               	movlb	0	; () banked
 28660  01641E  6FBE               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 28661  016420  EC8C  F0A5         	call	_Byte_GetZone	;wreg free
 28662  016424  0012               	return	
 28663  016426                     __end_of_Byte_GetPair:
 28664                           	opt stack 0
 28665                           tosu	equ	0xFFF
 28666                           tosh	equ	0xFFE
 28667                           tosl	equ	0xFFD
 28668                           pclath	equ	0xFFA
 28669                           tblptru	equ	0xFF8
 28670                           tblptrh	equ	0xFF7
 28671                           tblptrl	equ	0xFF6
 28672                           tablat	equ	0xFF5
 28673                           prodh	equ	0xFF4
 28674                           prodl	equ	0xFF3
 28675                           intcon	equ	0xFF2
 28676                           postinc0	equ	0xFEE
 28677                           wreg	equ	0xFE8
 28678                           indf1	equ	0xFE7
 28679                           postdec1	equ	0xFE5
 28680                           fsr1h	equ	0xFE2
 28681                           fsr1l	equ	0xFE1
 28682                           indf2	equ	0xFDF
 28683                           postinc2	equ	0xFDE
 28684                           postdec2	equ	0xFDD
 28685                           plusw2	equ	0xFDB
 28686                           fsr2h	equ	0xFDA
 28687                           fsr2l	equ	0xFD9
 28688                           status	equ	0xFD8
 28689                           
 28690 ;; *************** function _Byte_GetZone *****************
 28691 ;; Defined at:
 28692 ;;		line 64 in file "Library/Types.c"
 28693 ;; Parameters:    Size  Location     Type
 28694 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 28695 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 28696 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 28697 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 28698 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 28699 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 28700 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 28701 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 28702 ;;		 -> NULL(0), 
 28703 ;;  pMax            1    2[BANK0 ] unsigned char 
 28704 ;;  pChunk          1    3[BANK0 ] unsigned char 
 28705 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 28706 ;; Auto vars:     Size  Location     Type
 28707 ;;  Output          1    8[BANK0 ] unsigned char 
 28708 ;;  Offset          1    7[BANK0 ] unsigned char 
 28709 ;;  MASK            1    6[BANK0 ] unsigned char 
 28710 ;; Return value:  Size  Location     Type
 28711 ;;                  1    wreg      unsigned char 
 28712 ;; Registers used:
 28713 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 28714 ;; Tracked objects:
 28715 ;;		On entry : 0/0
 28716 ;;		On exit  : 0/0
 28717 ;;		Unchanged: 0/0
 28718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28719 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28720 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28721 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28722 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28723 ;;Total ram usage:        9 bytes
 28724 ;; Hardware stack levels used:    1
 28725 ;; Hardware stack levels required when called:    7
 28726 ;; This function calls:
 28727 ;;		Nothing
 28728 ;; This function is called by:
 28729 ;;		_Byte_GetPair
 28730 ;;		_Byte_GetTriple
 28731 ;;		_Byte_GetQuad
 28732 ;; This function uses a non-reentrant model
 28733 ;;
 28734                           
 28735                           	psect	text153
 28736  014B18                     __ptext153:
 28737                           	opt stack 0
 28738  014B18                     _Byte_GetZone:
 28739                           	opt stack 13
 28740                           
 28741                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 28742                           
 28743                           ;incstack = 0
 28744  014B18  C0BA  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 28745  014B1C  C0BB  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 28746  014B20  0E00               	movlw	low (__mediumconst shr (0+16))
 28747  014B22  6EF8               	movwf	tblptru,c
 28748  014B24  0E0F               	movlw	(high __ramtop+-1)
 28749  014B26  64F7               	cpfsgt	tblptrh,c
 28750  014B28  D003               	bra	u8627
 28751  014B2A  0008               	tblrd		*
 28752  014B2C  50F5               	movf	tablat,w,c
 28753  014B2E  D005               	bra	u8620
 28754  014B30                     u8627:
 28755  014B30  CFF6 FFE9          	movff	tblptrl,fsr0l
 28756  014B34  CFF7 FFEA          	movff	tblptrh,fsr0h
 28757  014B38  50EF               	movf	indf0,w,c
 28758  014B3A                     u8620:
 28759  014B3A  0100               	movlb	0	; () banked
 28760  014B3C  6FC2               	movwf	Byte_GetZone@Output& (0+255),b
 28761                           
 28762                           ; BSR set to: 0
 28763                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 28764  014B3E  0100               	movlb	0	; () banked
 28765  014B40  51BE               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 28766  014B42  0D01               	mullw	1
 28767  014B44  0E0F               	movlw	low _MASKS
 28768  014B46  24F3               	addwf	prodl,w,c
 28769  014B48  6EF6               	movwf	tblptrl,c
 28770  014B4A  0EFD               	movlw	high _MASKS
 28771  014B4C  20F4               	addwfc	prodh,w,c
 28772  014B4E  6EF7               	movwf	tblptrh,c
 28773  014B50                     	if	1	;There are 3 active tblptr bytes
 28774  014B50  6AF8               	clrf	tblptru,c
 28775  014B52  0E00               	movlw	low (__mediumconst shr (0+16))
 28776  014B54  22F8               	addwfc	tblptru,f,c
 28777  014B56                     	endif
 28778  014B56  0008               	tblrd		*
 28779  014B58  CFF5 F0C0          	movff	tablat,Byte_GetZone@MASK
 28780                           
 28781                           ; BSR set to: 0
 28782                           ;Types.c: 68: UINT8 Offset = 0;
 28783  014B5C  0E00               	movlw	0
 28784  014B5E  0100               	movlb	0	; () banked
 28785  014B60  6FC1               	movwf	Byte_GetZone@Offset& (0+255),b
 28786                           
 28787                           ;Types.c: 70: while (pChunk >= pMax)
 28788  014B62  D006               	goto	l732
 28789  014B64                     
 28790                           ; BSR set to: 0
 28791                           ;Types.c: 71: {
 28792                           ;Types.c: 72: pChunk -= pMax;
 28793                           
 28794                           ; BSR set to: 0
 28795  014B64  0100               	movlb	0	; () banked
 28796  014B66  51BC               	movf	Byte_GetZone@pMax& (0+255),w,b
 28797  014B68  0100               	movlb	0	; () banked
 28798  014B6A  5FBD               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 28799                           
 28800                           ; BSR set to: 0
 28801                           ;Types.c: 73: Offset += 1;
 28802  014B6C  0100               	movlb	0	; () banked
 28803  014B6E  2BC1               	incf	Byte_GetZone@Offset& (0+255),f,b
 28804  014B70                     l732:
 28805                           
 28806                           ; BSR set to: 0
 28807                           
 28808                           ; BSR set to: 0
 28809  014B70  0100               	movlb	0	; () banked
 28810  014B72  51BC               	movf	Byte_GetZone@pMax& (0+255),w,b
 28811  014B74  0100               	movlb	0	; () banked
 28812  014B76  5DBD               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 28813  014B78  B0D8               	btfsc	status,0,c
 28814  014B7A  D7F4               	goto	l733
 28815                           
 28816                           ; BSR set to: 0
 28817                           ;Types.c: 74: }
 28818                           ;Types.c: 75: pChunk *= pChunkSize;
 28819                           
 28820                           ; BSR set to: 0
 28821  014B7C  0100               	movlb	0	; () banked
 28822  014B7E  51BE               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 28823  014B80  0100               	movlb	0	; () banked
 28824  014B82  03BD               	mulwf	Byte_GetZone@pChunk& (0+255),b
 28825  014B84  50F3               	movf	prodl,w,c
 28826  014B86  6FBD               	movwf	Byte_GetZone@pChunk& (0+255),b
 28827                           
 28828                           ; BSR set to: 0
 28829                           ;Types.c: 76: pChunk += Offset;
 28830  014B88  0100               	movlb	0	; () banked
 28831  014B8A  51C1               	movf	Byte_GetZone@Offset& (0+255),w,b
 28832  014B8C  0100               	movlb	0	; () banked
 28833  014B8E  27BD               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 28834                           
 28835                           ; BSR set to: 0
 28836                           ;Types.c: 78: Output >>= pChunk;
 28837  014B90  0100               	movlb	0	; () banked
 28838  014B92  29BD               	incf	Byte_GetZone@pChunk& (0+255),w,b
 28839  014B94  0100               	movlb	0	; () banked
 28840  014B96  6FBF               	movwf	??_Byte_GetZone& (0+255),b
 28841  014B98  D003               	goto	u8640
 28842  014B9A                     u8645:
 28843  014B9A  0100               	movlb	0	; () banked
 28844  014B9C  90D8               	bcf	status,0,c
 28845  014B9E  33C2               	rrcf	Byte_GetZone@Output& (0+255),f,b
 28846  014BA0                     u8640:
 28847  014BA0  0100               	movlb	0	; () banked
 28848  014BA2  2FBF               	decfsz	??_Byte_GetZone& (0+255),f,b
 28849  014BA4  D7FA               	goto	u8645
 28850                           
 28851                           ;Types.c: 79: Output &= MASK;
 28852  014BA6  0100               	movlb	0	; () banked
 28853  014BA8  51C0               	movf	Byte_GetZone@MASK& (0+255),w,b
 28854  014BAA  0100               	movlb	0	; () banked
 28855  014BAC  17C2               	andwf	Byte_GetZone@Output& (0+255),f,b
 28856                           
 28857                           ; BSR set to: 0
 28858                           ;Types.c: 80: return Output;
 28859  014BAE  0100               	movlb	0	; () banked
 28860  014BB0  51C2               	movf	Byte_GetZone@Output& (0+255),w,b
 28861  014BB2  0012               	return	
 28862  014BB4                     __end_of_Byte_GetZone:
 28863                           	opt stack 0
 28864                           tosu	equ	0xFFF
 28865                           tosh	equ	0xFFE
 28866                           tosl	equ	0xFFD
 28867                           pclath	equ	0xFFA
 28868                           tblptru	equ	0xFF8
 28869                           tblptrh	equ	0xFF7
 28870                           tblptrl	equ	0xFF6
 28871                           tablat	equ	0xFF5
 28872                           prodh	equ	0xFF4
 28873                           prodl	equ	0xFF3
 28874                           intcon	equ	0xFF2
 28875                           indf0	equ	0xFEF
 28876                           postinc0	equ	0xFEE
 28877                           fsr0h	equ	0xFEA
 28878                           fsr0l	equ	0xFE9
 28879                           wreg	equ	0xFE8
 28880                           indf1	equ	0xFE7
 28881                           postdec1	equ	0xFE5
 28882                           fsr1h	equ	0xFE2
 28883                           fsr1l	equ	0xFE1
 28884                           indf2	equ	0xFDF
 28885                           postinc2	equ	0xFDE
 28886                           postdec2	equ	0xFDD
 28887                           plusw2	equ	0xFDB
 28888                           fsr2h	equ	0xFDA
 28889                           fsr2l	equ	0xFD9
 28890                           status	equ	0xFD8
 28891                           
 28892 ;; *************** function _Byte_SetBit *****************
 28893 ;; Defined at:
 28894 ;;		line 32 in file "Library/Types.c"
 28895 ;; Parameters:    Size  Location     Type
 28896 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 28897 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 28898 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 28899 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 28900 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 28901 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 28902 ;;		 -> NULL(0), 
 28903 ;;  pBit            1    2[BANK0 ] unsigned char 
 28904 ;;  pValue          1    3[BANK0 ] unsigned char 
 28905 ;; Auto vars:     Size  Location     Type
 28906 ;;		None
 28907 ;; Return value:  Size  Location     Type
 28908 ;;                  1    wreg      void 
 28909 ;; Registers used:
 28910 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 28911 ;; Tracked objects:
 28912 ;;		On entry : 0/0
 28913 ;;		On exit  : 0/0
 28914 ;;		Unchanged: 0/0
 28915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28916 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28918 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28919 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28920 ;;Total ram usage:        7 bytes
 28921 ;; Hardware stack levels used:    1
 28922 ;; Hardware stack levels required when called:    7
 28923 ;; This function calls:
 28924 ;;		Nothing
 28925 ;; This function is called by:
 28926 ;;		_Port_SetPinType
 28927 ;;		_Port_SetPin
 28928 ;;		_SPI_Init
 28929 ;;		_SPI_MinSpeed
 28930 ;;		_SPI_MaxSpeed
 28931 ;;		_Word_SetBit
 28932 ;;		_I2C_Init
 28933 ;; This function uses a non-reentrant model
 28934 ;;
 28935                           
 28936                           	psect	text154
 28937  015798                     __ptext154:
 28938                           	opt stack 0
 28939  015798                     _Byte_SetBit:
 28940                           	opt stack 15
 28941                           
 28942                           ;Types.c: 34: pValue &= 1;
 28943                           
 28944                           ; BSR set to: 0
 28945                           ;incstack = 0
 28946  015798  0E01               	movlw	1
 28947  01579A  0100               	movlb	0	; () banked
 28948  01579C  17BD               	andwf	Byte_SetBit@pValue& (0+255),f,b
 28949                           
 28950                           ; BSR set to: 0
 28951                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 28952  01579E  C0BC  F0BE         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 28953  0157A2  0E01               	movlw	1
 28954  0157A4  0100               	movlb	0	; () banked
 28955  0157A6  6FBF               	movwf	(??_Byte_SetBit+1)& (0+255),b
 28956  0157A8  0100               	movlb	0	; () banked
 28957  0157AA  2BBE               	incf	??_Byte_SetBit& (0+255),f,b
 28958  0157AC  D003               	goto	u8664
 28959  0157AE                     u8665:
 28960  0157AE  0100               	movlb	0	; () banked
 28961  0157B0  90D8               	bcf	status,0,c
 28962  0157B2  37BF               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 28963  0157B4                     u8664:
 28964  0157B4  0100               	movlb	0	; () banked
 28965  0157B6  2FBE               	decfsz	??_Byte_SetBit& (0+255),f,b
 28966  0157B8  D7FA               	goto	u8665
 28967  0157BA  0100               	movlb	0	; () banked
 28968  0157BC  51BF               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 28969  0157BE  0AFF               	xorlw	255
 28970  0157C0  0100               	movlb	0	; () banked
 28971  0157C2  6FC0               	movwf	(??_Byte_SetBit+2)& (0+255),b
 28972  0157C4  C0BA  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 28973  0157C8  C0BB  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 28974  0157CC  0100               	movlb	0	; () banked
 28975  0157CE  51C0               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 28976  0157D0  16DF               	andwf	indf2,f,c
 28977                           
 28978                           ; BSR set to: 0
 28979                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 28980  0157D2  C0BC  F0BE         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 28981  0157D6  C0BD  F0BF         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 28982  0157DA  0100               	movlb	0	; () banked
 28983  0157DC  2BBE               	incf	??_Byte_SetBit& (0+255),f,b
 28984  0157DE  D003               	goto	u8674
 28985  0157E0                     u8675:
 28986  0157E0  0100               	movlb	0	; () banked
 28987  0157E2  90D8               	bcf	status,0,c
 28988  0157E4  37BF               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 28989  0157E6                     u8674:
 28990  0157E6  0100               	movlb	0	; () banked
 28991  0157E8  2FBE               	decfsz	??_Byte_SetBit& (0+255),f,b
 28992  0157EA  D7FA               	goto	u8675
 28993  0157EC  C0BA  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 28994  0157F0  C0BB  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 28995  0157F4  0100               	movlb	0	; () banked
 28996  0157F6  51BF               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 28997  0157F8  12DF               	iorwf	indf2,f,c
 28998                           
 28999                           ; BSR set to: 0
 29000  0157FA  0012               	return		;funcret
 29001  0157FC                     __end_of_Byte_SetBit:
 29002                           	opt stack 0
 29003                           tosu	equ	0xFFF
 29004                           tosh	equ	0xFFE
 29005                           tosl	equ	0xFFD
 29006                           pclath	equ	0xFFA
 29007                           tblptru	equ	0xFF8
 29008                           tblptrh	equ	0xFF7
 29009                           tblptrl	equ	0xFF6
 29010                           tablat	equ	0xFF5
 29011                           prodh	equ	0xFF4
 29012                           prodl	equ	0xFF3
 29013                           intcon	equ	0xFF2
 29014                           indf0	equ	0xFEF
 29015                           postinc0	equ	0xFEE
 29016                           fsr0h	equ	0xFEA
 29017                           fsr0l	equ	0xFE9
 29018                           wreg	equ	0xFE8
 29019                           indf1	equ	0xFE7
 29020                           postdec1	equ	0xFE5
 29021                           fsr1h	equ	0xFE2
 29022                           fsr1l	equ	0xFE1
 29023                           indf2	equ	0xFDF
 29024                           postinc2	equ	0xFDE
 29025                           postdec2	equ	0xFDD
 29026                           plusw2	equ	0xFDB
 29027                           fsr2h	equ	0xFDA
 29028                           fsr2l	equ	0xFD9
 29029                           status	equ	0xFD8
 29030                           
 29031 ;; *************** function _Port_GetPin *****************
 29032 ;; Defined at:
 29033 ;;		line 271 in file "Library/Port.c"
 29034 ;; Parameters:    Size  Location     Type
 29035 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 29036 ;;		 -> PortB(10), PortE(10), PortC(10), 
 29037 ;;  pPin            1    2[BANK0 ] enum E6750
 29038 ;; Auto vars:     Size  Location     Type
 29039 ;;  Output          1    5[BANK0 ] unsigned char 
 29040 ;; Return value:  Size  Location     Type
 29041 ;;                  1    wreg      unsigned char 
 29042 ;; Registers used:
 29043 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 29044 ;; Tracked objects:
 29045 ;;		On entry : 0/0
 29046 ;;		On exit  : 0/0
 29047 ;;		Unchanged: 0/0
 29048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29049 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29050 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29051 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29052 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29053 ;;Total ram usage:        6 bytes
 29054 ;; Hardware stack levels used:    1
 29055 ;; Hardware stack levels required when called:    7
 29056 ;; This function calls:
 29057 ;;		Nothing
 29058 ;; This function is called by:
 29059 ;;		_Port_TogglePin
 29060 ;;		_HMI_LeftSwitch
 29061 ;;		_HMI_RightSwitch
 29062 ;;		_HMI_UpSwitch
 29063 ;;		_HMI_DownSwitch
 29064 ;;		_MXK_TestButton
 29065 ;; This function uses a non-reentrant model
 29066 ;;
 29067                           
 29068                           	psect	text155
 29069  015D5C                     __ptext155:
 29070                           	opt stack 0
 29071  015D5C                     _Port_GetPin:
 29072                           	opt stack 18
 29073                           
 29074                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 29075                           
 29076                           ; BSR set to: 0
 29077                           ;incstack = 0
 29078  015D5C  0100               	movlb	0	; () banked
 29079  015D5E  EE20 F006          	lfsr	2,6
 29080  015D62  51BA               	movf	Port_GetPin@pInput& (0+255),w,b
 29081  015D64  26D9               	addwf	fsr2l,f,c
 29082  015D66  51BB               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 29083  015D68  22DA               	addwfc	fsr2h,f,c
 29084  015D6A  CFDE F0BD          	movff	postinc2,??_Port_GetPin
 29085  015D6E  CFDD F0BE          	movff	postdec2,??_Port_GetPin+1
 29086  015D72  C0BD  FFD9         	movff	??_Port_GetPin,fsr2l
 29087  015D76  C0BE  FFDA         	movff	??_Port_GetPin+1,fsr2h
 29088  015D7A  50DF               	movf	indf2,w,c
 29089  015D7C  0100               	movlb	0	; () banked
 29090  015D7E  6FBF               	movwf	Port_GetPin@Output& (0+255),b
 29091                           
 29092                           ; BSR set to: 0
 29093                           ;Port.c: 274: Output >>= (UINT8)pPin;
 29094  015D80  0100               	movlb	0	; () banked
 29095  015D82  29BC               	incf	Port_GetPin@pPin& (0+255),w,b
 29096  015D84  0100               	movlb	0	; () banked
 29097  015D86  6FBD               	movwf	??_Port_GetPin& (0+255),b
 29098  015D88  D003               	goto	u8710
 29099  015D8A                     u8715:
 29100  015D8A  0100               	movlb	0	; () banked
 29101  015D8C  90D8               	bcf	status,0,c
 29102  015D8E  33BF               	rrcf	Port_GetPin@Output& (0+255),f,b
 29103  015D90                     u8710:
 29104  015D90  0100               	movlb	0	; () banked
 29105  015D92  2FBD               	decfsz	??_Port_GetPin& (0+255),f,b
 29106  015D94  D7FA               	goto	u8715
 29107                           
 29108                           ;Port.c: 275: Output &= 1;
 29109  015D96  0E01               	movlw	1
 29110  015D98  0100               	movlb	0	; () banked
 29111  015D9A  17BF               	andwf	Port_GetPin@Output& (0+255),f,b
 29112                           
 29113                           ; BSR set to: 0
 29114                           ;Port.c: 276: return Output;
 29115  015D9C  0100               	movlb	0	; () banked
 29116  015D9E  51BF               	movf	Port_GetPin@Output& (0+255),w,b
 29117  015DA0  0012               	return	
 29118  015DA2                     __end_of_Port_GetPin:
 29119                           	opt stack 0
 29120                           tosu	equ	0xFFF
 29121                           tosh	equ	0xFFE
 29122                           tosl	equ	0xFFD
 29123                           pclath	equ	0xFFA
 29124                           tblptru	equ	0xFF8
 29125                           tblptrh	equ	0xFF7
 29126                           tblptrl	equ	0xFF6
 29127                           tablat	equ	0xFF5
 29128                           prodh	equ	0xFF4
 29129                           prodl	equ	0xFF3
 29130                           intcon	equ	0xFF2
 29131                           indf0	equ	0xFEF
 29132                           postinc0	equ	0xFEE
 29133                           fsr0h	equ	0xFEA
 29134                           fsr0l	equ	0xFE9
 29135                           wreg	equ	0xFE8
 29136                           indf1	equ	0xFE7
 29137                           postdec1	equ	0xFE5
 29138                           fsr1h	equ	0xFE2
 29139                           fsr1l	equ	0xFE1
 29140                           indf2	equ	0xFDF
 29141                           postinc2	equ	0xFDE
 29142                           postdec2	equ	0xFDD
 29143                           plusw2	equ	0xFDB
 29144                           fsr2h	equ	0xFDA
 29145                           fsr2l	equ	0xFD9
 29146                           status	equ	0xFD8
 29147                           
 29148 ;; *************** function _HMI_SetBar *****************
 29149 ;; Defined at:
 29150 ;;		line 205 in file "HMI.c"
 29151 ;; Parameters:    Size  Location     Type
 29152 ;;  pValue          1    wreg     unsigned char 
 29153 ;; Auto vars:     Size  Location     Type
 29154 ;;  pValue          1    0[BANK0 ] unsigned char 
 29155 ;; Return value:  Size  Location     Type
 29156 ;;                  1    wreg      void 
 29157 ;; Registers used:
 29158 ;;		wreg
 29159 ;; Tracked objects:
 29160 ;;		On entry : 0/0
 29161 ;;		On exit  : 0/0
 29162 ;;		Unchanged: 0/0
 29163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29165 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29167 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29168 ;;Total ram usage:        1 bytes
 29169 ;; Hardware stack levels used:    1
 29170 ;; Hardware stack levels required when called:    7
 29171 ;; This function calls:
 29172 ;;		Nothing
 29173 ;; This function is called by:
 29174 ;;		_Event_DIPSwitch
 29175 ;;		_Event_HMI_DIPSwitch
 29176 ;;		_Event_HMI_LeftButton
 29177 ;;		_Event_HMI_RightButton
 29178 ;; This function uses a non-reentrant model
 29179 ;;
 29180                           
 29181                           	psect	text156
 29182  016660                     __ptext156:
 29183                           	opt stack 0
 29184  016660                     _HMI_SetBar:
 29185                           	opt stack 18
 29186                           
 29187                           ; BSR set to: 0
 29188                           ;incstack = 0
 29189                           ;HMI_SetBar@pValue stored from wreg
 29190  016660  0100               	movlb	0	; () banked
 29191  016662  6FBA               	movwf	HMI_SetBar@pValue& (0+255),b
 29192                           
 29193                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
 29194  016664  C0BA  F343         	movff	HMI_SetBar@pValue,_HMIBoard+7
 29195  016668  0012               	return		;funcret
 29196  01666A                     __end_of_HMI_SetBar:
 29197                           	opt stack 0
 29198                           tosu	equ	0xFFF
 29199                           tosh	equ	0xFFE
 29200                           tosl	equ	0xFFD
 29201                           pclath	equ	0xFFA
 29202                           tblptru	equ	0xFF8
 29203                           tblptrh	equ	0xFF7
 29204                           tblptrl	equ	0xFF6
 29205                           tablat	equ	0xFF5
 29206                           prodh	equ	0xFF4
 29207                           prodl	equ	0xFF3
 29208                           intcon	equ	0xFF2
 29209                           indf0	equ	0xFEF
 29210                           postinc0	equ	0xFEE
 29211                           fsr0h	equ	0xFEA
 29212                           fsr0l	equ	0xFE9
 29213                           wreg	equ	0xFE8
 29214                           indf1	equ	0xFE7
 29215                           postdec1	equ	0xFE5
 29216                           fsr1h	equ	0xFE2
 29217                           fsr1l	equ	0xFE1
 29218                           indf2	equ	0xFDF
 29219                           postinc2	equ	0xFDE
 29220                           postdec2	equ	0xFDD
 29221                           plusw2	equ	0xFDB
 29222                           fsr2h	equ	0xFDA
 29223                           fsr2l	equ	0xFD9
 29224                           status	equ	0xFD8
 29225                           
 29226 ;; *************** function _HMI_GetBar *****************
 29227 ;; Defined at:
 29228 ;;		line 209 in file "HMI.c"
 29229 ;; Parameters:    Size  Location     Type
 29230 ;;		None
 29231 ;; Auto vars:     Size  Location     Type
 29232 ;;		None
 29233 ;; Return value:  Size  Location     Type
 29234 ;;                  1    wreg      unsigned char 
 29235 ;; Registers used:
 29236 ;;		wreg, status,2
 29237 ;; Tracked objects:
 29238 ;;		On entry : 0/0
 29239 ;;		On exit  : 0/0
 29240 ;;		Unchanged: 0/0
 29241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29243 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29245 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29246 ;;Total ram usage:        0 bytes
 29247 ;; Hardware stack levels used:    1
 29248 ;; Hardware stack levels required when called:    7
 29249 ;; This function calls:
 29250 ;;		Nothing
 29251 ;; This function is called by:
 29252 ;;		_Event_DIPSwitch
 29253 ;;		_Event_HMI_DIPSwitch
 29254 ;; This function uses a non-reentrant model
 29255 ;;
 29256                           
 29257                           	psect	text157
 29258  01669C                     __ptext157:
 29259                           	opt stack 0
 29260  01669C                     _HMI_GetBar:
 29261                           	opt stack 18
 29262                           
 29263                           ;HMI.c: 211: return HMIBoard.pBarGraph;
 29264                           
 29265                           ;incstack = 0
 29266  01669C  0103               	movlb	3	; () banked
 29267  01669E  5143               	movf	(_HMIBoard+7)& (0+255),w,b
 29268  0166A0  0012               	return	
 29269  0166A2                     __end_of_HMI_GetBar:
 29270                           	opt stack 0
 29271                           tosu	equ	0xFFF
 29272                           tosh	equ	0xFFE
 29273                           tosl	equ	0xFFD
 29274                           pclath	equ	0xFFA
 29275                           tblptru	equ	0xFF8
 29276                           tblptrh	equ	0xFF7
 29277                           tblptrl	equ	0xFF6
 29278                           tablat	equ	0xFF5
 29279                           prodh	equ	0xFF4
 29280                           prodl	equ	0xFF3
 29281                           intcon	equ	0xFF2
 29282                           indf0	equ	0xFEF
 29283                           postinc0	equ	0xFEE
 29284                           fsr0h	equ	0xFEA
 29285                           fsr0l	equ	0xFE9
 29286                           wreg	equ	0xFE8
 29287                           indf1	equ	0xFE7
 29288                           postdec1	equ	0xFE5
 29289                           fsr1h	equ	0xFE2
 29290                           fsr1l	equ	0xFE1
 29291                           indf2	equ	0xFDF
 29292                           postinc2	equ	0xFDE
 29293                           postdec2	equ	0xFDD
 29294                           plusw2	equ	0xFDB
 29295                           fsr2h	equ	0xFDA
 29296                           fsr2l	equ	0xFD9
 29297                           status	equ	0xFD8
 29298                           
 29299 ;; *************** function _ISR_Function *****************
 29300 ;; Defined at:
 29301 ;;		line 38 in file "Library/ISR.c"
 29302 ;; Parameters:    Size  Location     Type
 29303 ;;		None
 29304 ;; Auto vars:     Size  Location     Type
 29305 ;;		None
 29306 ;; Return value:  Size  Location     Type
 29307 ;;                  1    wreg      void 
 29308 ;; Registers used:
 29309 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29310 ;; Tracked objects:
 29311 ;;		On entry : 0/0
 29312 ;;		On exit  : 0/0
 29313 ;;		Unchanged: 0/0
 29314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29316 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29317 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29318 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29319 ;;Total ram usage:       18 bytes
 29320 ;; Hardware stack levels used:    1
 29321 ;; Hardware stack levels required when called:    6
 29322 ;; This function calls:
 29323 ;;		_Timer0_ISR
 29324 ;; This function is called by:
 29325 ;;		Interrupt level 2
 29326 ;; This function uses a non-reentrant model
 29327 ;;
 29328                           
 29329                           	psect	intcode
 29330  001408                     __pintcode:
 29331                           	opt stack 0
 29332  001408                     _ISR_Function:
 29333                           	opt stack 13
 29334                           
 29335                           ; BSR set to: 3
 29336                           ;incstack = 0
 29337  001408  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 29338  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 29339  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 29340  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 29341  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 29342  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 29343  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 29344  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 29345  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 29346  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 29347  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 29348  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 29349  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 29350  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 29351  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 29352  001442  C051  F025         	movff	btemp,??_ISR_Function+14
 29353  001446  C052  F026         	movff	btemp+1,??_ISR_Function+15
 29354  00144A  C053  F027         	movff	btemp+2,??_ISR_Function+16
 29355  00144E  C054  F028         	movff	btemp+3,??_ISR_Function+17
 29356                           
 29357                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 29358  001452  92F2               	bcf	intcon,1,c	;volatile
 29359                           
 29360                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 29361  001454  B4F2               	btfsc	intcon,2,c	;volatile
 29362  001456  AAF2               	btfss	intcon,5,c	;volatile
 29363  001458  D002               	goto	i2l1590
 29364                           
 29365                           ;ISR.c: 68: Timer0_ISR();
 29366  00145A  ECF0  F0B0         	call	_Timer0_ISR	;wreg free
 29367  00145E                     i2l1590:
 29368  00145E  C028  F054         	movff	??_ISR_Function+17,btemp+3
 29369  001462  C027  F053         	movff	??_ISR_Function+16,btemp+2
 29370  001466  C026  F052         	movff	??_ISR_Function+15,btemp+1
 29371  00146A  C025  F051         	movff	??_ISR_Function+14,btemp
 29372  00146E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 29373  001472  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 29374  001476  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 29375  00147A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 29376  00147E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 29377  001482  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 29378  001486  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 29379  00148A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 29380  00148E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 29381  001492  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 29382  001496  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 29383  00149A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 29384  00149E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 29385  0014A2  C017  FFFA         	movff	??_ISR_Function,pclath
 29386  0014A6  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 29387  0014A8  0011               	retfie		f
 29388  0014AA                     __end_of_ISR_Function:
 29389                           	opt stack 0
 29390                           tosu	equ	0xFFF
 29391                           tosh	equ	0xFFE
 29392                           tosl	equ	0xFFD
 29393                           pclatu	equ	0xFFB
 29394                           pclath	equ	0xFFA
 29395                           tblptru	equ	0xFF8
 29396                           tblptrh	equ	0xFF7
 29397                           tblptrl	equ	0xFF6
 29398                           tablat	equ	0xFF5
 29399                           prodh	equ	0xFF4
 29400                           prodl	equ	0xFF3
 29401                           intcon	equ	0xFF2
 29402                           indf0	equ	0xFEF
 29403                           postinc0	equ	0xFEE
 29404                           fsr0h	equ	0xFEA
 29405                           fsr0l	equ	0xFE9
 29406                           wreg	equ	0xFE8
 29407                           indf1	equ	0xFE7
 29408                           postdec1	equ	0xFE5
 29409                           fsr1h	equ	0xFE2
 29410                           fsr1l	equ	0xFE1
 29411                           indf2	equ	0xFDF
 29412                           postinc2	equ	0xFDE
 29413                           postdec2	equ	0xFDD
 29414                           plusw2	equ	0xFDB
 29415                           fsr2h	equ	0xFDA
 29416                           fsr2l	equ	0xFD9
 29417                           status	equ	0xFD8
 29418                           
 29419 ;; *************** function _Timer0_ISR *****************
 29420 ;; Defined at:
 29421 ;;		line 94 in file "Library/Timer0.c"
 29422 ;; Parameters:    Size  Location     Type
 29423 ;;		None
 29424 ;; Auto vars:     Size  Location     Type
 29425 ;;		None
 29426 ;; Return value:  Size  Location     Type
 29427 ;;                  1    wreg      void 
 29428 ;; Registers used:
 29429 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29430 ;; Tracked objects:
 29431 ;;		On entry : 0/0
 29432 ;;		On exit  : 0/0
 29433 ;;		Unchanged: 0/0
 29434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29438 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29439 ;;Total ram usage:        0 bytes
 29440 ;; Hardware stack levels used:    1
 29441 ;; Hardware stack levels required when called:    5
 29442 ;; This function calls:
 29443 ;;		Absolute function
 29444 ;;		i2_Motor_Step
 29445 ;;		i2_Timer0_Stop
 29446 ;; This function is called by:
 29447 ;;		_ISR_Function
 29448 ;; This function uses a non-reentrant model
 29449 ;;
 29450                           
 29451                           	psect	text159
 29452  0161E0                     __ptext159:
 29453                           	opt stack 0
 29454  0161E0                     _Timer0_ISR:
 29455                           	opt stack 13
 29456                           
 29457                           ;Timer0.c: 96: Timer0_Stop();
 29458                           
 29459                           ;incstack = 0
 29460  0161E0  EC51  F0B3         	call	i2_Timer0_Stop	;wreg free
 29461                           
 29462                           ;Timer0.c: 99: if (gISR != 0)
 29463  0161E4  0100               	movlb	0	; () banked
 29464  0161E6  5160               	movf	_gISR& (0+255),w,b
 29465  0161E8  0100               	movlb	0	; () banked
 29466  0161EA  1161               	iorwf	(_gISR+1)& (0+255),w,b
 29467  0161EC  0100               	movlb	0	; () banked
 29468  0161EE  1162               	iorwf	(_gISR+2)& (0+255),w,b
 29469  0161F0  B4D8               	btfsc	status,2,c
 29470  0161F2  0012               	return	
 29471                           
 29472                           ; BSR set to: 0
 29473                           ;Timer0.c: 100: gISR();
 29474  0161F4  D801               	call	i2u1347_48
 29475  0161F6  0012               	return	
 29476  0161F8                     i2u1347_48:
 29477  0161F8  0005               	push	
 29478  0161FA  6EFA               	movwf	pclath,c
 29479  0161FC  0100               	movlb	0	; () banked
 29480  0161FE  5160               	movf	_gISR& (0+255),w,b
 29481  016200  6EFD               	movwf	tosl,c
 29482  016202  5161               	movf	(_gISR+1)& (0+255),w,b
 29483  016204  6EFE               	movwf	tosh,c
 29484  016206  5162               	movf	(_gISR+2)& (0+255),w,b
 29485  016208  6EFF               	movwf	tosu,c
 29486  01620A  50FA               	movf	pclath,w,c
 29487  01620C  0012               	return		;indir
 29488  01620E                     __end_of_Timer0_ISR:
 29489                           	opt stack 0
 29490                           tosu	equ	0xFFF
 29491                           tosh	equ	0xFFE
 29492                           tosl	equ	0xFFD
 29493                           pclatu	equ	0xFFB
 29494                           pclath	equ	0xFFA
 29495                           tblptru	equ	0xFF8
 29496                           tblptrh	equ	0xFF7
 29497                           tblptrl	equ	0xFF6
 29498                           tablat	equ	0xFF5
 29499                           prodh	equ	0xFF4
 29500                           prodl	equ	0xFF3
 29501                           intcon	equ	0xFF2
 29502                           indf0	equ	0xFEF
 29503                           postinc0	equ	0xFEE
 29504                           fsr0h	equ	0xFEA
 29505                           fsr0l	equ	0xFE9
 29506                           wreg	equ	0xFE8
 29507                           indf1	equ	0xFE7
 29508                           postdec1	equ	0xFE5
 29509                           fsr1h	equ	0xFE2
 29510                           fsr1l	equ	0xFE1
 29511                           indf2	equ	0xFDF
 29512                           postinc2	equ	0xFDE
 29513                           postdec2	equ	0xFDD
 29514                           plusw2	equ	0xFDB
 29515                           fsr2h	equ	0xFDA
 29516                           fsr2l	equ	0xFD9
 29517                           status	equ	0xFD8
 29518                           
 29519 ;; *************** function i2_Motor_Step *****************
 29520 ;; Defined at:
 29521 ;;		line 75 in file "Library/Motor.c"
 29522 ;; Parameters:    Size  Location     Type
 29523 ;;		None
 29524 ;; Auto vars:     Size  Location     Type
 29525 ;;		None
 29526 ;; Return value:  Size  Location     Type
 29527 ;;                  1    wreg      void 
 29528 ;; Registers used:
 29529 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29530 ;; Tracked objects:
 29531 ;;		On entry : 0/0
 29532 ;;		On exit  : 0/0
 29533 ;;		Unchanged: 0/0
 29534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29537 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29538 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29539 ;;Total ram usage:        2 bytes
 29540 ;; Hardware stack levels used:    1
 29541 ;; Hardware stack levels required when called:    4
 29542 ;; This function calls:
 29543 ;;		i2_MXK_Queue
 29544 ;;		i2_MXK_Release
 29545 ;;		i2_MXK_SwitchTo
 29546 ;;		i2_Port_SetPin
 29547 ;;		i2_Timer0_Restart
 29548 ;;		i2_Timer0_Stop
 29549 ;; This function is called by:
 29550 ;; This function uses a non-reentrant model
 29551 ;;
 29552                           
 29553                           	psect	text160
 29554  0136CE                     __ptext160:
 29555                           	opt stack 0
 29556  0136CE                     i2_Motor_Step:
 29557                           	opt stack 13
 29558                           
 29559                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 29560                           
 29561                           ;incstack = 0
 29562  0136CE  0100               	movlb	0	; () banked
 29563  0136D0  EE20 F004          	lfsr	2,4
 29564  0136D4  5181               	movf	_lMotor& (0+255),w,b
 29565  0136D6  26D9               	addwf	fsr2l,f,c
 29566  0136D8  5182               	movf	(_lMotor+1)& (0+255),w,b
 29567  0136DA  22DA               	addwfc	fsr2h,f,c
 29568  0136DC  50DF               	movf	indf2,w,c
 29569  0136DE  EC43  F0B0         	call	i2_MXK_SwitchTo
 29570  0136E2  0900               	iorlw	0
 29571  0136E4  B4D8               	btfsc	status,2,c
 29572  0136E6  D06A               	goto	i2l1627
 29573                           
 29574                           ;Motor.c: 78: {
 29575                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 29576  0136E8  C081  FFD9         	movff	_lMotor,fsr2l
 29577  0136EC  C082  FFDA         	movff	_lMotor+1,fsr2h
 29578  0136F0  50DE               	movf	postinc2,w,c
 29579  0136F2  10DE               	iorwf	postinc2,w,c
 29580  0136F4  B4D8               	btfsc	status,2,c
 29581  0136F6  D05D               	goto	i2l1628
 29582                           
 29583                           ;Motor.c: 80: {
 29584                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 29585  0136F8  C081  FFD9         	movff	_lMotor,fsr2l
 29586  0136FC  C082  FFDA         	movff	_lMotor+1,fsr2h
 29587  013700  0E01               	movlw	1
 29588  013702  BEDB               	btfsc	plusw2,7,c
 29589  013704  D022               	goto	i2l1629
 29590  013706  0E01               	movlw	1
 29591  013708  50DB               	movf	plusw2,w,c
 29592  01370A  E103               	bnz	i2u726_40
 29593  01370C  04DE               	decf	postinc2,w,c
 29594  01370E  A0D8               	btfss	status,0,c
 29595  013710  D01C               	goto	i2l1629
 29596  013712                     i2u726_40:
 29597                           
 29598                           ;Motor.c: 83: {
 29599                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 29600  013712  C081  FFD9         	movff	_lMotor,fsr2l
 29601  013716  C082  FFDA         	movff	_lMotor+1,fsr2h
 29602  01371A  28DE               	incf	postinc2,w,c
 29603  01371C  E104               	bnz	i2u727_40
 29604  01371E  0E7F               	movlw	127
 29605  013720  18DE               	xorwf	postinc2,w,c
 29606  013722  B4D8               	btfsc	status,2,c
 29607  013724  D007               	goto	i2l1630
 29608  013726                     i2u727_40:
 29609                           
 29610                           ;Motor.c: 85: lMotor->mDelta --;
 29611  013726  C081  FFD9         	movff	_lMotor,fsr2l
 29612  01372A  C082  FFDA         	movff	_lMotor+1,fsr2h
 29613  01372E  06DE               	decf	postinc2,f,c
 29614  013730  0E00               	movlw	0
 29615  013732  5ADD               	subwfb	postdec2,f,c
 29616  013734                     i2l1630:
 29617                           
 29618                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 29619  013734  0E93               	movlw	low _PortE
 29620  013736  6E10               	movwf	i2Port_SetPin@pInput,c
 29621  013738  0E00               	movlw	high _PortE
 29622  01373A  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29623  01373C  0E00               	movlw	0
 29624  01373E  6E12               	movwf	i2Port_SetPin@pPin,c
 29625  013740  0E01               	movlw	1
 29626  013742  6E13               	movwf	i2Port_SetPin@pValue,c
 29627  013744  EC48  F0A3         	call	i2_Port_SetPin	;wreg free
 29628                           
 29629                           ;Motor.c: 88: }
 29630  013748  D01B               	goto	i2l1631
 29631  01374A                     i2l1629:
 29632                           
 29633                           ;Motor.c: 89: else
 29634                           ;Motor.c: 90: {
 29635                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 29636  01374A  C081  FFD9         	movff	_lMotor,fsr2l
 29637  01374E  C082  FFDA         	movff	_lMotor+1,fsr2h
 29638  013752  04DE               	decf	postinc2,w,c
 29639  013754  E104               	bnz	i2u728_40
 29640  013756  0E80               	movlw	128
 29641  013758  18DE               	xorwf	postinc2,w,c
 29642  01375A  B4D8               	btfsc	status,2,c
 29643  01375C  D007               	goto	i2l1632
 29644  01375E                     i2u728_40:
 29645                           
 29646                           ;Motor.c: 92: lMotor->mDelta ++;
 29647  01375E  C081  FFD9         	movff	_lMotor,fsr2l
 29648  013762  C082  FFDA         	movff	_lMotor+1,fsr2h
 29649  013766  2ADE               	incf	postinc2,f,c
 29650  013768  0E00               	movlw	0
 29651  01376A  22DD               	addwfc	postdec2,f,c
 29652  01376C                     i2l1632:
 29653                           
 29654                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 29655  01376C  0E93               	movlw	low _PortE
 29656  01376E  6E10               	movwf	i2Port_SetPin@pInput,c
 29657  013770  0E00               	movlw	high _PortE
 29658  013772  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29659  013774  0E00               	movlw	0
 29660  013776  6E12               	movwf	i2Port_SetPin@pPin,c
 29661  013778  0E00               	movlw	0
 29662  01377A  6E13               	movwf	i2Port_SetPin@pValue,c
 29663  01377C  EC48  F0A3         	call	i2_Port_SetPin	;wreg free
 29664  013780                     i2l1631:
 29665                           
 29666                           ;Motor.c: 95: }
 29667                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 29668  013780  0E93               	movlw	low _PortE
 29669  013782  6E10               	movwf	i2Port_SetPin@pInput,c
 29670  013784  0E00               	movlw	high _PortE
 29671  013786  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29672  013788  0E01               	movlw	1
 29673  01378A  6E12               	movwf	i2Port_SetPin@pPin,c
 29674  01378C  0E01               	movlw	1
 29675  01378E  6E13               	movwf	i2Port_SetPin@pValue,c
 29676  013790  EC48  F0A3         	call	i2_Port_SetPin	;wreg free
 29677                           
 29678                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 29679  013794  0E93               	movlw	low _PortE
 29680  013796  6E10               	movwf	i2Port_SetPin@pInput,c
 29681  013798  0E00               	movlw	high _PortE
 29682  01379A  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29683  01379C  0E01               	movlw	1
 29684  01379E  6E12               	movwf	i2Port_SetPin@pPin,c
 29685  0137A0  0E00               	movlw	0
 29686  0137A2  6E13               	movwf	i2Port_SetPin@pValue,c
 29687  0137A4  EC48  F0A3         	call	i2_Port_SetPin	;wreg free
 29688                           
 29689                           ;Motor.c: 101: MXK_Release();
 29690  0137A8  EC54  F0B3         	call	i2_MXK_Release	;wreg free
 29691                           
 29692                           ;Motor.c: 102: Timer0_Restart();
 29693  0137AC  EC20  F0B3         	call	i2_Timer0_Restart	;wreg free
 29694                           
 29695                           ;Motor.c: 103: return;
 29696  0137B0  0012               	return	
 29697  0137B2                     i2l1628:
 29698                           
 29699                           ;Motor.c: 104: }
 29700                           ;Motor.c: 105: MXK_Release();
 29701  0137B2  EC54  F0B3         	call	i2_MXK_Release	;wreg free
 29702                           
 29703                           ;Motor.c: 106: Timer0_Stop();
 29704  0137B6  EC51  F0B3         	call	i2_Timer0_Stop	;wreg free
 29705                           
 29706                           ;Motor.c: 107: return;
 29707  0137BA  0012               	return	
 29708  0137BC                     i2l1627:
 29709                           
 29710                           ;Motor.c: 108: }
 29711                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 29712  0137BC  C066  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 29713  0137C0  C067  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 29714  0137C4  C068  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 29715  0137C8  EC07  F0B3         	call	i2_MXK_Queue	;wreg free
 29716  0137CC  0012               	return		;funcret
 29717  0137CE                     __end_ofi2_Motor_Step:
 29718                           	opt stack 0
 29719                           tosu	equ	0xFFF
 29720                           tosh	equ	0xFFE
 29721                           tosl	equ	0xFFD
 29722                           pclatu	equ	0xFFB
 29723                           pclath	equ	0xFFA
 29724                           tblptru	equ	0xFF8
 29725                           tblptrh	equ	0xFF7
 29726                           tblptrl	equ	0xFF6
 29727                           tablat	equ	0xFF5
 29728                           prodh	equ	0xFF4
 29729                           prodl	equ	0xFF3
 29730                           intcon	equ	0xFF2
 29731                           indf0	equ	0xFEF
 29732                           postinc0	equ	0xFEE
 29733                           fsr0h	equ	0xFEA
 29734                           fsr0l	equ	0xFE9
 29735                           wreg	equ	0xFE8
 29736                           indf1	equ	0xFE7
 29737                           postdec1	equ	0xFE5
 29738                           fsr1h	equ	0xFE2
 29739                           fsr1l	equ	0xFE1
 29740                           indf2	equ	0xFDF
 29741                           postinc2	equ	0xFDE
 29742                           postdec2	equ	0xFDD
 29743                           plusw2	equ	0xFDB
 29744                           fsr2h	equ	0xFDA
 29745                           fsr2l	equ	0xFD9
 29746                           status	equ	0xFD8
 29747                           
 29748 ;; *************** function i2_Timer0_Stop *****************
 29749 ;; Defined at:
 29750 ;;		line 89 in file "Library/Timer0.c"
 29751 ;; Parameters:    Size  Location     Type
 29752 ;;		None
 29753 ;; Auto vars:     Size  Location     Type
 29754 ;;		None
 29755 ;; Return value:  Size  Location     Type
 29756 ;;                  1    wreg      void 
 29757 ;; Registers used:
 29758 ;;		None
 29759 ;; Tracked objects:
 29760 ;;		On entry : 0/0
 29761 ;;		On exit  : 0/0
 29762 ;;		Unchanged: 0/0
 29763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29767 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29768 ;;Total ram usage:        0 bytes
 29769 ;; Hardware stack levels used:    1
 29770 ;; This function calls:
 29771 ;;		Nothing
 29772 ;; This function is called by:
 29773 ;;		_Timer0_ISR
 29774 ;;		i2_Motor_Step
 29775 ;; This function uses a non-reentrant model
 29776 ;;
 29777                           
 29778                           	psect	text161
 29779  0166A2                     __ptext161:
 29780                           	opt stack 0
 29781  0166A2                     i2_Timer0_Stop:
 29782                           	opt stack 17
 29783                           
 29784                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 29785                           
 29786                           ;incstack = 0
 29787  0166A2  9AF2               	bcf	intcon,5,c	;volatile
 29788                           
 29789                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 29790  0166A4  94F2               	bcf	intcon,2,c	;volatile
 29791  0166A6  0012               	return		;funcret
 29792  0166A8                     __end_ofi2_Timer0_Stop:
 29793                           	opt stack 0
 29794                           tosu	equ	0xFFF
 29795                           tosh	equ	0xFFE
 29796                           tosl	equ	0xFFD
 29797                           pclatu	equ	0xFFB
 29798                           pclath	equ	0xFFA
 29799                           tblptru	equ	0xFF8
 29800                           tblptrh	equ	0xFF7
 29801                           tblptrl	equ	0xFF6
 29802                           tablat	equ	0xFF5
 29803                           prodh	equ	0xFF4
 29804                           prodl	equ	0xFF3
 29805                           intcon	equ	0xFF2
 29806                           indf0	equ	0xFEF
 29807                           postinc0	equ	0xFEE
 29808                           fsr0h	equ	0xFEA
 29809                           fsr0l	equ	0xFE9
 29810                           wreg	equ	0xFE8
 29811                           indf1	equ	0xFE7
 29812                           postdec1	equ	0xFE5
 29813                           fsr1h	equ	0xFE2
 29814                           fsr1l	equ	0xFE1
 29815                           indf2	equ	0xFDF
 29816                           postinc2	equ	0xFDE
 29817                           postdec2	equ	0xFDD
 29818                           plusw2	equ	0xFDB
 29819                           fsr2h	equ	0xFDA
 29820                           fsr2l	equ	0xFD9
 29821                           status	equ	0xFD8
 29822                           
 29823 ;; *************** function i2_Timer0_Restart *****************
 29824 ;; Defined at:
 29825 ;;		line 83 in file "Library/Timer0.c"
 29826 ;; Parameters:    Size  Location     Type
 29827 ;;		None
 29828 ;; Auto vars:     Size  Location     Type
 29829 ;;		None
 29830 ;; Return value:  Size  Location     Type
 29831 ;;                  1    wreg      void 
 29832 ;; Registers used:
 29833 ;;		None
 29834 ;; Tracked objects:
 29835 ;;		On entry : 0/0
 29836 ;;		On exit  : 0/0
 29837 ;;		Unchanged: 0/0
 29838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29842 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29843 ;;Total ram usage:        0 bytes
 29844 ;; Hardware stack levels used:    1
 29845 ;; This function calls:
 29846 ;;		Nothing
 29847 ;; This function is called by:
 29848 ;;		i2_Motor_Step
 29849 ;; This function uses a non-reentrant model
 29850 ;;
 29851                           
 29852                           	psect	text162
 29853  016640                     __ptext162:
 29854                           	opt stack 0
 29855  016640                     i2_Timer0_Restart:
 29856                           	opt stack 16
 29857                           
 29858                           ;Timer0.c: 85: TMR0 = COUNTER;
 29859                           
 29860                           ;incstack = 0
 29861  016640  C029  FFD6         	movff	_COUNTER,4054	;volatile
 29862  016644  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 29863                           
 29864                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 29865  016648  8AF2               	bsf	intcon,5,c	;volatile
 29866  01664A  0012               	return		;funcret
 29867  01664C                     __end_ofi2_Timer0_Restart:
 29868                           	opt stack 0
 29869                           tosu	equ	0xFFF
 29870                           tosh	equ	0xFFE
 29871                           tosl	equ	0xFFD
 29872                           pclatu	equ	0xFFB
 29873                           pclath	equ	0xFFA
 29874                           tblptru	equ	0xFF8
 29875                           tblptrh	equ	0xFF7
 29876                           tblptrl	equ	0xFF6
 29877                           tablat	equ	0xFF5
 29878                           prodh	equ	0xFF4
 29879                           prodl	equ	0xFF3
 29880                           intcon	equ	0xFF2
 29881                           indf0	equ	0xFEF
 29882                           postinc0	equ	0xFEE
 29883                           fsr0h	equ	0xFEA
 29884                           fsr0l	equ	0xFE9
 29885                           wreg	equ	0xFE8
 29886                           indf1	equ	0xFE7
 29887                           postdec1	equ	0xFE5
 29888                           fsr1h	equ	0xFE2
 29889                           fsr1l	equ	0xFE1
 29890                           indf2	equ	0xFDF
 29891                           postinc2	equ	0xFDE
 29892                           postdec2	equ	0xFDD
 29893                           plusw2	equ	0xFDB
 29894                           fsr2h	equ	0xFDA
 29895                           fsr2l	equ	0xFD9
 29896                           status	equ	0xFD8
 29897                           
 29898 ;; *************** function i2_Port_SetPin *****************
 29899 ;; Defined at:
 29900 ;;		line 247 in file "Library/Port.c"
 29901 ;; Parameters:    Size  Location     Type
 29902 ;;  pInput          2   15[COMRAM] const PTR struct Port
 29903 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 29904 ;;  pPin            1   17[COMRAM] enum E6750
 29905 ;;  pValue          1   18[COMRAM] unsigned char 
 29906 ;; Auto vars:     Size  Location     Type
 29907 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 29908 ;; Return value:  Size  Location     Type
 29909 ;;                  1    wreg      void 
 29910 ;; Registers used:
 29911 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29912 ;; Tracked objects:
 29913 ;;		On entry : 0/0
 29914 ;;		On exit  : 0/0
 29915 ;;		Unchanged: 0/0
 29916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29917 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29918 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29920 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29921 ;;Total ram usage:        5 bytes
 29922 ;; Hardware stack levels used:    1
 29923 ;; Hardware stack levels required when called:    3
 29924 ;; This function calls:
 29925 ;;		i2_Byte_SetBit
 29926 ;;		i2_Word_GetPair
 29927 ;; This function is called by:
 29928 ;;		i2_Motor_Step
 29929 ;; This function uses a non-reentrant model
 29930 ;;
 29931                           
 29932                           	psect	text163
 29933  014690                     __ptext163:
 29934                           	opt stack 0
 29935  014690                     i2_Port_SetPin:
 29936                           	opt stack 13
 29937                           
 29938                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 29939                           
 29940                           ;incstack = 0
 29941  014690  0E08               	movlw	8
 29942  014692  2410               	addwf	i2Port_SetPin@pInput,w,c
 29943  014694  6E0D               	movwf	i2Word_GetPair@pInput,c
 29944  014696  0E00               	movlw	0
 29945  014698  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 29946  01469A  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 29947  01469C  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 29948  0146A0  ECC1  F0B0         	call	i2_Word_GetPair	;wreg free
 29949  0146A4  6E14               	movwf	i2Port_SetPin@Type,c
 29950                           
 29951                           ;Port.c: 250: switch (Type)
 29952  0146A6  D03B               	goto	i2l427
 29953  0146A8                     
 29954                           ;Port.c: 256: pValue &= 1;
 29955  0146A8  0E01               	movlw	1
 29956  0146AA  1613               	andwf	i2Port_SetPin@pValue,f,c
 29957                           
 29958                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 29959  0146AC  EE20 F002          	lfsr	2,2
 29960  0146B0  5010               	movf	i2Port_SetPin@pInput,w,c
 29961  0146B2  26D9               	addwf	fsr2l,f,c
 29962  0146B4  5011               	movf	i2Port_SetPin@pInput+1,w,c
 29963  0146B6  22DA               	addwfc	fsr2h,f,c
 29964  0146B8  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 29965  0146BC  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 29966  0146C0  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 29967  0146C4  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 29968  0146C8  EC8C  F0AD         	call	i2_Byte_SetBit	;wreg free
 29969                           
 29970                           ;Port.c: 258: break;
 29971  0146CC  0012               	return	
 29972  0146CE                     
 29973                           ;Port.c: 261: pValue &= 1;
 29974  0146CE  0E01               	movlw	1
 29975  0146D0  1613               	andwf	i2Port_SetPin@pValue,f,c
 29976                           
 29977                           ;Port.c: 262: pValue ^= 1;
 29978  0146D2  0E01               	movlw	1
 29979  0146D4  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 29980                           
 29981                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 29982  0146D6  EE20 F002          	lfsr	2,2
 29983  0146DA  5010               	movf	i2Port_SetPin@pInput,w,c
 29984  0146DC  26D9               	addwf	fsr2l,f,c
 29985  0146DE  5011               	movf	i2Port_SetPin@pInput+1,w,c
 29986  0146E0  22DA               	addwfc	fsr2h,f,c
 29987  0146E2  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 29988  0146E6  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 29989  0146EA  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 29990  0146EE  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 29991  0146F2  EC8C  F0AD         	call	i2_Byte_SetBit	;wreg free
 29992                           
 29993                           ;Port.c: 264: break;
 29994  0146F6  0012               	return	
 29995  0146F8                     
 29996                           ;Port.c: 266: pValue &= 1;
 29997  0146F8  0E01               	movlw	1
 29998  0146FA  1613               	andwf	i2Port_SetPin@pValue,f,c
 29999                           
 30000                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 30001  0146FC  EE20 F004          	lfsr	2,4
 30002  014700  5010               	movf	i2Port_SetPin@pInput,w,c
 30003  014702  26D9               	addwf	fsr2l,f,c
 30004  014704  5011               	movf	i2Port_SetPin@pInput+1,w,c
 30005  014706  22DA               	addwfc	fsr2h,f,c
 30006  014708  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 30007  01470C  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 30008  014710  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 30009  014714  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 30010  014718  EC8C  F0AD         	call	i2_Byte_SetBit	;wreg free
 30011                           
 30012                           ;Port.c: 269: }
 30013                           
 30014                           ;Port.c: 268: break;
 30015  01471C  0012               	return	
 30016  01471E                     i2l427:
 30017  01471E  5014               	movf	i2Port_SetPin@Type,w,c
 30018                           
 30019                           ; Switch size 1, requested type "space"
 30020                           ; Number of cases is 4, Range of values is 0 to 3
 30021                           ; switch strategies available:
 30022                           ; Name         Instructions Cycles
 30023                           ; simple_byte           13     7 (average)
 30024                           ;	Chosen strategy is simple_byte
 30025  014720  0A00               	xorlw	0	; case 0
 30026  014722  B4D8               	btfsc	status,2,c
 30027  014724  0012               	return	
 30028  014726  0A01               	xorlw	1	; case 1
 30029  014728  B4D8               	btfsc	status,2,c
 30030  01472A  D7BE               	goto	i2l430
 30031  01472C  0A03               	xorlw	3	; case 2
 30032  01472E  B4D8               	btfsc	status,2,c
 30033  014730  D7CE               	goto	i2l432
 30034  014732  0A01               	xorlw	1	; case 3
 30035  014734  A4D8               	btfss	status,2,c
 30036  014736  0012               	return	
 30037  014738  D7DF               	goto	i2l433
 30038  01473A                     __end_ofi2_Port_SetPin:
 30039                           	opt stack 0
 30040                           tosu	equ	0xFFF
 30041                           tosh	equ	0xFFE
 30042                           tosl	equ	0xFFD
 30043                           pclatu	equ	0xFFB
 30044                           pclath	equ	0xFFA
 30045                           tblptru	equ	0xFF8
 30046                           tblptrh	equ	0xFF7
 30047                           tblptrl	equ	0xFF6
 30048                           tablat	equ	0xFF5
 30049                           prodh	equ	0xFF4
 30050                           prodl	equ	0xFF3
 30051                           intcon	equ	0xFF2
 30052                           indf0	equ	0xFEF
 30053                           postinc0	equ	0xFEE
 30054                           fsr0h	equ	0xFEA
 30055                           fsr0l	equ	0xFE9
 30056                           wreg	equ	0xFE8
 30057                           indf1	equ	0xFE7
 30058                           postdec1	equ	0xFE5
 30059                           fsr1h	equ	0xFE2
 30060                           fsr1l	equ	0xFE1
 30061                           indf2	equ	0xFDF
 30062                           postinc2	equ	0xFDE
 30063                           postdec2	equ	0xFDD
 30064                           plusw2	equ	0xFDB
 30065                           fsr2h	equ	0xFDA
 30066                           fsr2l	equ	0xFD9
 30067                           status	equ	0xFD8
 30068                           
 30069 ;; *************** function i2_Word_GetPair *****************
 30070 ;; Defined at:
 30071 ;;		line 156 in file "Library/Types.c"
 30072 ;; Parameters:    Size  Location     Type
 30073 ;;  pInput          2   12[COMRAM] PTR struct Word
 30074 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 30075 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 30076 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 30077 ;;		 -> PortC(10), PortF(10), NULL(0), 
 30078 ;;  pPair           1   14[COMRAM] unsigned char 
 30079 ;; Auto vars:     Size  Location     Type
 30080 ;;		None
 30081 ;; Return value:  Size  Location     Type
 30082 ;;                  1    wreg      unsigned char 
 30083 ;; Registers used:
 30084 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30085 ;; Tracked objects:
 30086 ;;		On entry : 0/0
 30087 ;;		On exit  : 0/0
 30088 ;;		Unchanged: 0/0
 30089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30090 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30093 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30094 ;;Total ram usage:        3 bytes
 30095 ;; Hardware stack levels used:    1
 30096 ;; Hardware stack levels required when called:    2
 30097 ;; This function calls:
 30098 ;;		i2_Byte_GetPair
 30099 ;; This function is called by:
 30100 ;;		i2_Port_SetPin
 30101 ;; This function uses a non-reentrant model
 30102 ;;
 30103                           
 30104                           	psect	text164
 30105  016182                     __ptext164:
 30106                           	opt stack 0
 30107  016182                     i2_Word_GetPair:
 30108                           	opt stack 13
 30109                           
 30110                           ;Types.c: 158: if (pPair >= 4)
 30111                           
 30112                           ;incstack = 0
 30113  016182  0E03               	movlw	3
 30114  016184  640F               	cpfsgt	i2Word_GetPair@pPair,c
 30115  016186  D00C               	goto	i2l781
 30116                           
 30117                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 30118  016188  0E01               	movlw	1
 30119  01618A  240D               	addwf	i2Word_GetPair@pInput,w,c
 30120  01618C  6E0A               	movwf	i2Byte_GetPair@pInput,c
 30121  01618E  0E00               	movlw	0
 30122  016190  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 30123  016192  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 30124  016194  500F               	movf	i2Word_GetPair@pPair,w,c
 30125  016196  0FFC               	addlw	252
 30126  016198  6E0C               	movwf	i2Byte_GetPair@pPair,c
 30127  01619A  EC3D  F0B2         	call	i2_Byte_GetPair	;wreg free
 30128  01619E  0012               	return	
 30129  0161A0                     i2l781:
 30130                           
 30131                           ;Types.c: 160: else
 30132                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 30133  0161A0  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 30134  0161A4  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 30135  0161A8  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 30136  0161AC  EC3D  F0B2         	call	i2_Byte_GetPair	;wreg free
 30137  0161B0  0012               	return	
 30138  0161B2                     __end_ofi2_Word_GetPair:
 30139                           	opt stack 0
 30140                           tosu	equ	0xFFF
 30141                           tosh	equ	0xFFE
 30142                           tosl	equ	0xFFD
 30143                           pclatu	equ	0xFFB
 30144                           pclath	equ	0xFFA
 30145                           tblptru	equ	0xFF8
 30146                           tblptrh	equ	0xFF7
 30147                           tblptrl	equ	0xFF6
 30148                           tablat	equ	0xFF5
 30149                           prodh	equ	0xFF4
 30150                           prodl	equ	0xFF3
 30151                           intcon	equ	0xFF2
 30152                           indf0	equ	0xFEF
 30153                           postinc0	equ	0xFEE
 30154                           fsr0h	equ	0xFEA
 30155                           fsr0l	equ	0xFE9
 30156                           wreg	equ	0xFE8
 30157                           indf1	equ	0xFE7
 30158                           postdec1	equ	0xFE5
 30159                           fsr1h	equ	0xFE2
 30160                           fsr1l	equ	0xFE1
 30161                           indf2	equ	0xFDF
 30162                           postinc2	equ	0xFDE
 30163                           postdec2	equ	0xFDD
 30164                           plusw2	equ	0xFDB
 30165                           fsr2h	equ	0xFDA
 30166                           fsr2l	equ	0xFD9
 30167                           status	equ	0xFD8
 30168                           
 30169 ;; *************** function i2_Byte_GetPair *****************
 30170 ;; Defined at:
 30171 ;;		line 87 in file "Library/Types.c"
 30172 ;; Parameters:    Size  Location     Type
 30173 ;;  pInput          2    9[COMRAM] PTR struct Byte
 30174 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 30175 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 30176 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 30177 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 30178 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 30179 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 30180 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 30181 ;;		 -> NULL(0), 
 30182 ;;  pPair           1   11[COMRAM] unsigned char 
 30183 ;; Auto vars:     Size  Location     Type
 30184 ;;		None
 30185 ;; Return value:  Size  Location     Type
 30186 ;;                  1    wreg      unsigned char 
 30187 ;; Registers used:
 30188 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30189 ;; Tracked objects:
 30190 ;;		On entry : 0/0
 30191 ;;		On exit  : 0/0
 30192 ;;		Unchanged: 0/0
 30193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30194 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30195 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30197 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30198 ;;Total ram usage:        3 bytes
 30199 ;; Hardware stack levels used:    1
 30200 ;; Hardware stack levels required when called:    1
 30201 ;; This function calls:
 30202 ;;		i2_Byte_GetZone
 30203 ;; This function is called by:
 30204 ;;		i2_Word_GetPair
 30205 ;; This function uses a non-reentrant model
 30206 ;;
 30207                           
 30208                           	psect	text165
 30209  01647A                     __ptext165:
 30210                           	opt stack 0
 30211  01647A                     i2_Byte_GetPair:
 30212                           	opt stack 13
 30213                           
 30214                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 30215                           
 30216                           ;incstack = 0
 30217  01647A  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 30218  01647E  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 30219  016482  0E04               	movlw	4
 30220  016484  6E03               	movwf	i2Byte_GetZone@pMax,c
 30221  016486  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 30222  01648A  0E02               	movlw	2
 30223  01648C  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 30224  01648E  EC00  F0A9         	call	i2_Byte_GetZone	;wreg free
 30225  016492  0012               	return	
 30226  016494                     __end_ofi2_Byte_GetPair:
 30227                           	opt stack 0
 30228                           tosu	equ	0xFFF
 30229                           tosh	equ	0xFFE
 30230                           tosl	equ	0xFFD
 30231                           pclatu	equ	0xFFB
 30232                           pclath	equ	0xFFA
 30233                           tblptru	equ	0xFF8
 30234                           tblptrh	equ	0xFF7
 30235                           tblptrl	equ	0xFF6
 30236                           tablat	equ	0xFF5
 30237                           prodh	equ	0xFF4
 30238                           prodl	equ	0xFF3
 30239                           intcon	equ	0xFF2
 30240                           indf0	equ	0xFEF
 30241                           postinc0	equ	0xFEE
 30242                           fsr0h	equ	0xFEA
 30243                           fsr0l	equ	0xFE9
 30244                           wreg	equ	0xFE8
 30245                           indf1	equ	0xFE7
 30246                           postdec1	equ	0xFE5
 30247                           fsr1h	equ	0xFE2
 30248                           fsr1l	equ	0xFE1
 30249                           indf2	equ	0xFDF
 30250                           postinc2	equ	0xFDE
 30251                           postdec2	equ	0xFDD
 30252                           plusw2	equ	0xFDB
 30253                           fsr2h	equ	0xFDA
 30254                           fsr2l	equ	0xFD9
 30255                           status	equ	0xFD8
 30256                           
 30257 ;; *************** function i2_Byte_GetZone *****************
 30258 ;; Defined at:
 30259 ;;		line 64 in file "Library/Types.c"
 30260 ;; Parameters:    Size  Location     Type
 30261 ;;  pInput          2    0[COMRAM] PTR struct Byte
 30262 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 30263 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 30264 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 30265 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 30266 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 30267 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 30268 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 30269 ;;		 -> NULL(0), 
 30270 ;;  pMax            1    2[COMRAM] unsigned char 
 30271 ;;  pChunk          1    3[COMRAM] unsigned char 
 30272 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 30273 ;; Auto vars:     Size  Location     Type
 30274 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 30275 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 30276 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 30277 ;; Return value:  Size  Location     Type
 30278 ;;                  1    wreg      unsigned char 
 30279 ;; Registers used:
 30280 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 30281 ;; Tracked objects:
 30282 ;;		On entry : 0/0
 30283 ;;		On exit  : 0/0
 30284 ;;		Unchanged: 0/0
 30285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30286 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30287 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30288 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30289 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30290 ;;Total ram usage:        9 bytes
 30291 ;; Hardware stack levels used:    1
 30292 ;; This function calls:
 30293 ;;		Nothing
 30294 ;; This function is called by:
 30295 ;;		i2_Byte_GetPair
 30296 ;; This function uses a non-reentrant model
 30297 ;;
 30298                           
 30299                           	psect	text166
 30300  015200                     __ptext166:
 30301                           	opt stack 0
 30302  015200                     i2_Byte_GetZone:
 30303                           	opt stack 13
 30304                           
 30305                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 30306                           
 30307                           ;incstack = 0
 30308  015200  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 30309  015204  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 30310  015208  0E00               	movlw	low (__mediumconst shr (0+16))
 30311  01520A  6EF8               	movwf	tblptru,c
 30312  01520C  0E0F               	movlw	(high __ramtop+-1)
 30313  01520E  64F7               	cpfsgt	tblptrh,c
 30314  015210  D003               	bra	i2u505_47
 30315  015212  0008               	tblrd		*
 30316  015214  50F5               	movf	tablat,w,c
 30317  015216  D005               	bra	i2u505_40
 30318  015218                     i2u505_47:
 30319  015218  CFF6 FFE9          	movff	tblptrl,fsr0l
 30320  01521C  CFF7 FFEA          	movff	tblptrh,fsr0h
 30321  015220  50EF               	movf	indf0,w,c
 30322  015222                     i2u505_40:
 30323  015222  6E09               	movwf	i2Byte_GetZone@Output,c
 30324                           
 30325                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 30326  015224  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 30327  015226  0D01               	mullw	1
 30328  015228  0E0F               	movlw	low _MASKS
 30329  01522A  24F3               	addwf	prodl,w,c
 30330  01522C  6EF6               	movwf	tblptrl,c
 30331  01522E  0EFD               	movlw	high _MASKS
 30332  015230  20F4               	addwfc	prodh,w,c
 30333  015232  6EF7               	movwf	tblptrh,c
 30334  015234                     	if	1	;There are 3 active tblptr bytes
 30335  015234  6AF8               	clrf	tblptru,c
 30336  015236  0E00               	movlw	low (__mediumconst shr (0+16))
 30337  015238  22F8               	addwfc	tblptru,f,c
 30338  01523A                     	endif
 30339  01523A  0008               	tblrd		*
 30340  01523C  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 30341                           
 30342                           ;Types.c: 68: UINT8 Offset = 0;
 30343  015240  0E00               	movlw	0
 30344  015242  6E08               	movwf	i2Byte_GetZone@Offset,c
 30345                           
 30346                           ;Types.c: 70: while (pChunk >= pMax)
 30347  015244  D003               	goto	i2l732
 30348  015246                     
 30349                           ;Types.c: 71: {
 30350                           ;Types.c: 72: pChunk -= pMax;
 30351  015246  5003               	movf	i2Byte_GetZone@pMax,w,c
 30352  015248  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 30353                           
 30354                           ;Types.c: 73: Offset += 1;
 30355  01524A  2A08               	incf	i2Byte_GetZone@Offset,f,c
 30356  01524C                     i2l732:
 30357  01524C  5003               	movf	i2Byte_GetZone@pMax,w,c
 30358  01524E  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 30359  015250  B0D8               	btfsc	status,0,c
 30360  015252  D7F9               	goto	i2l733
 30361                           
 30362                           ;Types.c: 74: }
 30363                           ;Types.c: 75: pChunk *= pChunkSize;
 30364  015254  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 30365  015256  0204               	mulwf	i2Byte_GetZone@pChunk,c
 30366  015258  50F3               	movf	prodl,w,c
 30367  01525A  6E04               	movwf	i2Byte_GetZone@pChunk,c
 30368                           
 30369                           ;Types.c: 76: pChunk += Offset;
 30370  01525C  5008               	movf	i2Byte_GetZone@Offset,w,c
 30371  01525E  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 30372                           
 30373                           ;Types.c: 78: Output >>= pChunk;
 30374  015260  2804               	incf	i2Byte_GetZone@pChunk,w,c
 30375  015262  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 30376  015264  D002               	goto	i2u507_40
 30377  015266                     i2u507_45:
 30378  015266  90D8               	bcf	status,0,c
 30379  015268  3209               	rrcf	i2Byte_GetZone@Output,f,c
 30380  01526A                     i2u507_40:
 30381  01526A  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 30382  01526C  D7FC               	goto	i2u507_45
 30383                           
 30384                           ;Types.c: 79: Output &= MASK;
 30385  01526E  5007               	movf	i2Byte_GetZone@MASK,w,c
 30386  015270  1609               	andwf	i2Byte_GetZone@Output,f,c
 30387                           
 30388                           ;Types.c: 80: return Output;
 30389  015272  5009               	movf	i2Byte_GetZone@Output,w,c
 30390  015274  0012               	return	
 30391  015276                     __end_ofi2_Byte_GetZone:
 30392                           	opt stack 0
 30393                           tosu	equ	0xFFF
 30394                           tosh	equ	0xFFE
 30395                           tosl	equ	0xFFD
 30396                           pclatu	equ	0xFFB
 30397                           pclath	equ	0xFFA
 30398                           tblptru	equ	0xFF8
 30399                           tblptrh	equ	0xFF7
 30400                           tblptrl	equ	0xFF6
 30401                           tablat	equ	0xFF5
 30402                           prodh	equ	0xFF4
 30403                           prodl	equ	0xFF3
 30404                           intcon	equ	0xFF2
 30405                           indf0	equ	0xFEF
 30406                           postinc0	equ	0xFEE
 30407                           fsr0h	equ	0xFEA
 30408                           fsr0l	equ	0xFE9
 30409                           wreg	equ	0xFE8
 30410                           indf1	equ	0xFE7
 30411                           postdec1	equ	0xFE5
 30412                           fsr1h	equ	0xFE2
 30413                           fsr1l	equ	0xFE1
 30414                           indf2	equ	0xFDF
 30415                           postinc2	equ	0xFDE
 30416                           postdec2	equ	0xFDD
 30417                           plusw2	equ	0xFDB
 30418                           fsr2h	equ	0xFDA
 30419                           fsr2l	equ	0xFD9
 30420                           status	equ	0xFD8
 30421                           
 30422 ;; *************** function i2_Byte_SetBit *****************
 30423 ;; Defined at:
 30424 ;;		line 32 in file "Library/Types.c"
 30425 ;; Parameters:    Size  Location     Type
 30426 ;;  pInput          2    0[COMRAM] PTR struct Byte
 30427 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 30428 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 30429 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 30430 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 30431 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 30432 ;;		 -> NULL(0), 
 30433 ;;  pBit            1    2[COMRAM] unsigned char 
 30434 ;;  pValue          1    3[COMRAM] unsigned char 
 30435 ;; Auto vars:     Size  Location     Type
 30436 ;;		None
 30437 ;; Return value:  Size  Location     Type
 30438 ;;                  1    wreg      void 
 30439 ;; Registers used:
 30440 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 30441 ;; Tracked objects:
 30442 ;;		On entry : 0/0
 30443 ;;		On exit  : 0/0
 30444 ;;		Unchanged: 0/0
 30445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30446 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30448 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30449 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30450 ;;Total ram usage:        7 bytes
 30451 ;; Hardware stack levels used:    1
 30452 ;; This function calls:
 30453 ;;		Nothing
 30454 ;; This function is called by:
 30455 ;;		i2_Port_SetPin
 30456 ;; This function uses a non-reentrant model
 30457 ;;
 30458                           
 30459                           	psect	text167
 30460  015B18                     __ptext167:
 30461                           	opt stack 0
 30462  015B18                     i2_Byte_SetBit:
 30463                           	opt stack 15
 30464                           
 30465                           ;Types.c: 34: pValue &= 1;
 30466                           
 30467                           ;incstack = 0
 30468  015B18  0E01               	movlw	1
 30469  015B1A  1604               	andwf	i2Byte_SetBit@pValue,f,c
 30470                           
 30471                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 30472  015B1C  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 30473  015B20  0E01               	movlw	1
 30474  015B22  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 30475  015B24  2A05               	incf	??i2_Byte_SetBit,f,c
 30476  015B26  D002               	goto	i2u629_44
 30477  015B28                     i2u629_45:
 30478  015B28  90D8               	bcf	status,0,c
 30479  015B2A  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 30480  015B2C                     i2u629_44:
 30481  015B2C  2E05               	decfsz	??i2_Byte_SetBit,f,c
 30482  015B2E  D7FC               	goto	i2u629_45
 30483  015B30  5006               	movf	??i2_Byte_SetBit+1,w,c
 30484  015B32  0AFF               	xorlw	255
 30485  015B34  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 30486  015B36  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 30487  015B3A  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 30488  015B3E  5007               	movf	??i2_Byte_SetBit+2,w,c
 30489  015B40  16DF               	andwf	indf2,f,c
 30490                           
 30491                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 30492  015B42  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 30493  015B46  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 30494  015B4A  2A05               	incf	??i2_Byte_SetBit,f,c
 30495  015B4C  D002               	goto	i2u630_44
 30496  015B4E                     i2u630_45:
 30497  015B4E  90D8               	bcf	status,0,c
 30498  015B50  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 30499  015B52                     i2u630_44:
 30500  015B52  2E05               	decfsz	??i2_Byte_SetBit,f,c
 30501  015B54  D7FC               	goto	i2u630_45
 30502  015B56  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 30503  015B5A  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 30504  015B5E  5006               	movf	??i2_Byte_SetBit+1,w,c
 30505  015B60  12DF               	iorwf	indf2,f,c
 30506  015B62  0012               	return		;funcret
 30507  015B64                     __end_ofi2_Byte_SetBit:
 30508                           	opt stack 0
 30509                           tosu	equ	0xFFF
 30510                           tosh	equ	0xFFE
 30511                           tosl	equ	0xFFD
 30512                           pclatu	equ	0xFFB
 30513                           pclath	equ	0xFFA
 30514                           tblptru	equ	0xFF8
 30515                           tblptrh	equ	0xFF7
 30516                           tblptrl	equ	0xFF6
 30517                           tablat	equ	0xFF5
 30518                           prodh	equ	0xFF4
 30519                           prodl	equ	0xFF3
 30520                           intcon	equ	0xFF2
 30521                           indf0	equ	0xFEF
 30522                           postinc0	equ	0xFEE
 30523                           fsr0h	equ	0xFEA
 30524                           fsr0l	equ	0xFE9
 30525                           wreg	equ	0xFE8
 30526                           indf1	equ	0xFE7
 30527                           postdec1	equ	0xFE5
 30528                           fsr1h	equ	0xFE2
 30529                           fsr1l	equ	0xFE1
 30530                           indf2	equ	0xFDF
 30531                           postinc2	equ	0xFDE
 30532                           postdec2	equ	0xFDD
 30533                           plusw2	equ	0xFDB
 30534                           fsr2h	equ	0xFDA
 30535                           fsr2l	equ	0xFD9
 30536                           status	equ	0xFD8
 30537                           
 30538 ;; *************** function i2_MXK_SwitchTo *****************
 30539 ;; Defined at:
 30540 ;;		line 105 in file "Library/MXK.c"
 30541 ;; Parameters:    Size  Location     Type
 30542 ;;  pModule         1    wreg     enum E6927
 30543 ;; Auto vars:     Size  Location     Type
 30544 ;;  pModule         1    7[COMRAM] enum E6927
 30545 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 30546 ;; Return value:  Size  Location     Type
 30547 ;;                  1    wreg      unsigned char 
 30548 ;; Registers used:
 30549 ;;		wreg, status,2, status,0, cstack
 30550 ;; Tracked objects:
 30551 ;;		On entry : 0/0
 30552 ;;		On exit  : 0/0
 30553 ;;		Unchanged: 0/0
 30554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30556 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30558 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30559 ;;Total ram usage:        2 bytes
 30560 ;; Hardware stack levels used:    1
 30561 ;; Hardware stack levels required when called:    1
 30562 ;; This function calls:
 30563 ;;		i2_delay_us
 30564 ;; This function is called by:
 30565 ;;		i2_Motor_Step
 30566 ;; This function uses a non-reentrant model
 30567 ;;
 30568                           
 30569                           	psect	text168
 30570  016086                     __ptext168:
 30571                           	opt stack 0
 30572  016086                     i2_MXK_SwitchTo:
 30573                           	opt stack 15
 30574                           
 30575                           ;incstack = 0
 30576                           ;i2MXK_SwitchTo@pModule stored from wreg
 30577  016086  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 30578                           
 30579                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 30580  016088  5086               	movf	3974,w,c	;volatile
 30581  01608A  0B0F               	andlw	15
 30582  01608C  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 30583                           
 30584                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 30585  01608E  504B               	movf	_Bus_State,w,c
 30586  016090  A4D8               	btfss	status,2,c
 30587  016092  D002               	goto	i2l1730
 30588                           
 30589                           ;MXK.c: 110: return 0;
 30590  016094  0E00               	movlw	0
 30591  016096  0012               	return	
 30592  016098                     i2l1730:
 30593                           
 30594                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 30595  016098  0E00               	movlw	0
 30596  01609A  6E4B               	movwf	_Bus_State,c
 30597                           
 30598                           ;MXK.c: 114: if (CUR != pModule)
 30599  01609C  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 30600  01609E  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 30601  0160A0  B4D8               	btfsc	status,2,c
 30602  0160A2  D00A               	goto	i2l1732
 30603                           
 30604                           ;MXK.c: 115: {
 30605                           ;MXK.c: 116: PORTG &= ~(0xF);
 30606  0160A4  0EF0               	movlw	240
 30607  0160A6  1686               	andwf	3974,f,c	;volatile
 30608                           
 30609                           ;MXK.c: 117: PORTG |= pModule;
 30610  0160A8  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 30611  0160AA  1286               	iorwf	3974,f,c	;volatile
 30612                           
 30613                           ;MXK.c: 120: delay_us(10);
 30614  0160AC  0E00               	movlw	0
 30615  0160AE  6E02               	movwf	i2delay_us@us+1,c
 30616  0160B0  0E0A               	movlw	10
 30617  0160B2  6E01               	movwf	i2delay_us@us,c
 30618  0160B4  EC34  F0AF         	call	i2_delay_us	;wreg free
 30619  0160B8                     i2l1732:
 30620                           
 30621                           ;MXK.c: 121: }
 30622                           ;MXK.c: 122: return 1;
 30623  0160B8  0E01               	movlw	1
 30624  0160BA  0012               	return	
 30625  0160BC                     __end_ofi2_MXK_SwitchTo:
 30626                           	opt stack 0
 30627                           tosu	equ	0xFFF
 30628                           tosh	equ	0xFFE
 30629                           tosl	equ	0xFFD
 30630                           pclatu	equ	0xFFB
 30631                           pclath	equ	0xFFA
 30632                           tblptru	equ	0xFF8
 30633                           tblptrh	equ	0xFF7
 30634                           tblptrl	equ	0xFF6
 30635                           tablat	equ	0xFF5
 30636                           prodh	equ	0xFF4
 30637                           prodl	equ	0xFF3
 30638                           intcon	equ	0xFF2
 30639                           indf0	equ	0xFEF
 30640                           postinc0	equ	0xFEE
 30641                           fsr0h	equ	0xFEA
 30642                           fsr0l	equ	0xFE9
 30643                           wreg	equ	0xFE8
 30644                           indf1	equ	0xFE7
 30645                           postdec1	equ	0xFE5
 30646                           fsr1h	equ	0xFE2
 30647                           fsr1l	equ	0xFE1
 30648                           indf2	equ	0xFDF
 30649                           postinc2	equ	0xFDE
 30650                           postdec2	equ	0xFDD
 30651                           plusw2	equ	0xFDB
 30652                           fsr2h	equ	0xFDA
 30653                           fsr2l	equ	0xFD9
 30654                           status	equ	0xFD8
 30655                           
 30656 ;; *************** function i2_delay_us *****************
 30657 ;; Defined at:
 30658 ;;		line 255 in file "Library/Types.c"
 30659 ;; Parameters:    Size  Location     Type
 30660 ;;  us              2    0[COMRAM] unsigned short 
 30661 ;; Auto vars:     Size  Location     Type
 30662 ;;  delay_us        4    2[COMRAM] unsigned long 
 30663 ;; Return value:  Size  Location     Type
 30664 ;;                  1    wreg      void 
 30665 ;; Registers used:
 30666 ;;		wreg, status,2, status,0
 30667 ;; Tracked objects:
 30668 ;;		On entry : 0/0
 30669 ;;		On exit  : 0/0
 30670 ;;		Unchanged: 0/0
 30671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30672 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30673 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30675 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30676 ;;Total ram usage:        6 bytes
 30677 ;; Hardware stack levels used:    1
 30678 ;; This function calls:
 30679 ;;		Nothing
 30680 ;; This function is called by:
 30681 ;;		i2_MXK_SwitchTo
 30682 ;; This function uses a non-reentrant model
 30683 ;;
 30684                           
 30685                           	psect	text169
 30686  015E68                     __ptext169:
 30687                           	opt stack 0
 30688  015E68                     i2_delay_us:
 30689                           	opt stack 15
 30690                           
 30691                           ;Types.c: 256: unsigned long u;
 30692                           ;Types.c: 257: while (us--) {
 30693                           
 30694                           ;incstack = 0
 30695  015E68  D016               	goto	i2u633_40
 30696  015E6A                     i2l9637:
 30697                           
 30698                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 30699  015E6A  0E00               	movlw	0
 30700  015E6C  6E03               	movwf	i2delay_us@u,c
 30701  015E6E  0E00               	movlw	0
 30702  015E70  6E04               	movwf	i2delay_us@u+1,c
 30703  015E72  0E00               	movlw	0
 30704  015E74  6E05               	movwf	i2delay_us@u+2,c
 30705  015E76  0E00               	movlw	0
 30706  015E78  6E06               	movwf	i2delay_us@u+3,c
 30707  015E7A                     i2l9639:
 30708  015E7A  5003               	movf	i2delay_us@u,w,c
 30709  015E7C  1004               	iorwf	i2delay_us@u+1,w,c
 30710  015E7E  1005               	iorwf	i2delay_us@u+2,w,c
 30711  015E80  1006               	iorwf	i2delay_us@u+3,w,c
 30712  015E82  A4D8               	btfss	status,2,c
 30713  015E84  D008               	goto	i2u633_40
 30714  015E86  F000               	nop		; ;# 
 30715  015E88  0E01               	movlw	1
 30716  015E8A  2603               	addwf	i2delay_us@u,f,c
 30717  015E8C  0E00               	movlw	0
 30718  015E8E  2204               	addwfc	i2delay_us@u+1,f,c
 30719  015E90  2205               	addwfc	i2delay_us@u+2,f,c
 30720  015E92  2206               	addwfc	i2delay_us@u+3,f,c
 30721  015E94  D7F2               	goto	i2l9639
 30722  015E96                     i2u633_40:
 30723  015E96  0601               	decf	i2delay_us@us,f,c
 30724  015E98  A0D8               	btfss	status,0,c
 30725  015E9A  0602               	decf	i2delay_us@us+1,f,c
 30726  015E9C  2801               	incf	i2delay_us@us,w,c
 30727  015E9E  E1E5               	bnz	i2l9637
 30728  015EA0  2802               	incf	i2delay_us@us+1,w,c
 30729  015EA2  B4D8               	btfsc	status,2,c
 30730  015EA4  0012               	return	
 30731  015EA6  D7E1               	goto	i2l832
 30732  015EA8                     __end_ofi2_delay_us:
 30733                           	opt stack 0
 30734                           tosu	equ	0xFFF
 30735                           tosh	equ	0xFFE
 30736                           tosl	equ	0xFFD
 30737                           pclatu	equ	0xFFB
 30738                           pclath	equ	0xFFA
 30739                           tblptru	equ	0xFF8
 30740                           tblptrh	equ	0xFF7
 30741                           tblptrl	equ	0xFF6
 30742                           tablat	equ	0xFF5
 30743                           prodh	equ	0xFF4
 30744                           prodl	equ	0xFF3
 30745                           intcon	equ	0xFF2
 30746                           indf0	equ	0xFEF
 30747                           postinc0	equ	0xFEE
 30748                           fsr0h	equ	0xFEA
 30749                           fsr0l	equ	0xFE9
 30750                           wreg	equ	0xFE8
 30751                           indf1	equ	0xFE7
 30752                           postdec1	equ	0xFE5
 30753                           fsr1h	equ	0xFE2
 30754                           fsr1l	equ	0xFE1
 30755                           indf2	equ	0xFDF
 30756                           postinc2	equ	0xFDE
 30757                           postdec2	equ	0xFDD
 30758                           plusw2	equ	0xFDB
 30759                           fsr2h	equ	0xFDA
 30760                           fsr2l	equ	0xFD9
 30761                           status	equ	0xFD8
 30762                           
 30763 ;; *************** function i2_MXK_Release *****************
 30764 ;; Defined at:
 30765 ;;		line 130 in file "Library/MXK.c"
 30766 ;; Parameters:    Size  Location     Type
 30767 ;;		None
 30768 ;; Auto vars:     Size  Location     Type
 30769 ;;		None
 30770 ;; Return value:  Size  Location     Type
 30771 ;;                  1    wreg      unsigned char 
 30772 ;; Registers used:
 30773 ;;		wreg, status,2, status,0
 30774 ;; Tracked objects:
 30775 ;;		On entry : 0/0
 30776 ;;		On exit  : 0/0
 30777 ;;		Unchanged: 0/0
 30778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30782 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30783 ;;Total ram usage:        0 bytes
 30784 ;; Hardware stack levels used:    1
 30785 ;; This function calls:
 30786 ;;		Nothing
 30787 ;; This function is called by:
 30788 ;;		i2_Motor_Step
 30789 ;; This function uses a non-reentrant model
 30790 ;;
 30791                           
 30792                           	psect	text170
 30793  0166A8                     __ptext170:
 30794                           	opt stack 0
 30795  0166A8                     i2_MXK_Release:
 30796                           	opt stack 16
 30797                           
 30798                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 30799                           
 30800                           ;incstack = 0
 30801  0166A8  0E01               	movlw	1
 30802  0166AA  6E4B               	movwf	_Bus_State,c
 30803                           
 30804                           ;MXK.c: 135: return 1;
 30805                           ;	Return value of i2_MXK_Release is never used
 30806  0166AC  0012               	return	
 30807  0166AE                     __end_ofi2_MXK_Release:
 30808                           	opt stack 0
 30809                           tosu	equ	0xFFF
 30810                           tosh	equ	0xFFE
 30811                           tosl	equ	0xFFD
 30812                           pclatu	equ	0xFFB
 30813                           pclath	equ	0xFFA
 30814                           tblptru	equ	0xFF8
 30815                           tblptrh	equ	0xFF7
 30816                           tblptrl	equ	0xFF6
 30817                           tablat	equ	0xFF5
 30818                           prodh	equ	0xFF4
 30819                           prodl	equ	0xFF3
 30820                           intcon	equ	0xFF2
 30821                           indf0	equ	0xFEF
 30822                           postinc0	equ	0xFEE
 30823                           fsr0h	equ	0xFEA
 30824                           fsr0l	equ	0xFE9
 30825                           wreg	equ	0xFE8
 30826                           indf1	equ	0xFE7
 30827                           postdec1	equ	0xFE5
 30828                           fsr1h	equ	0xFE2
 30829                           fsr1l	equ	0xFE1
 30830                           indf2	equ	0xFDF
 30831                           postinc2	equ	0xFDE
 30832                           postdec2	equ	0xFDD
 30833                           plusw2	equ	0xFDB
 30834                           fsr2h	equ	0xFDA
 30835                           fsr2l	equ	0xFD9
 30836                           status	equ	0xFD8
 30837                           
 30838 ;; *************** function i2_MXK_Queue *****************
 30839 ;; Defined at:
 30840 ;;		line 144 in file "Library/MXK.c"
 30841 ;; Parameters:    Size  Location     Type
 30842 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 30843 ;;		 -> Absolute function(1), Motor_Step(1), 
 30844 ;; Auto vars:     Size  Location     Type
 30845 ;;		None
 30846 ;; Return value:  Size  Location     Type
 30847 ;;                  1    wreg      void 
 30848 ;; Registers used:
 30849 ;;		wreg, status,2, status,0
 30850 ;; Tracked objects:
 30851 ;;		On entry : 0/0
 30852 ;;		On exit  : 0/0
 30853 ;;		Unchanged: 0/0
 30854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30855 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30858 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30859 ;;Total ram usage:        3 bytes
 30860 ;; Hardware stack levels used:    1
 30861 ;; This function calls:
 30862 ;;		Nothing
 30863 ;; This function is called by:
 30864 ;;		i2_Motor_Step
 30865 ;; This function uses a non-reentrant model
 30866 ;;
 30867                           
 30868                           	psect	text171
 30869  01660E                     __ptext171:
 30870                           	opt stack 0
 30871  01660E                     i2_MXK_Queue:
 30872                           	opt stack 16
 30873                           
 30874                           ;MXK.c: 146: lQueue = pCallback;
 30875                           
 30876                           ;incstack = 0
 30877  01660E  C001  F063         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 30878  016612  C002  F064         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 30879  016616  C003  F065         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 30880  01661A  0012               	return		;funcret
 30881  01661C                     __end_ofi2_MXK_Queue:
 30882                           	opt stack 0
 30883                           tosu	equ	0xFFF
 30884                           tosh	equ	0xFFE
 30885                           tosl	equ	0xFFD
 30886                           pclatu	equ	0xFFB
 30887                           pclath	equ	0xFFA
 30888                           tblptru	equ	0xFF8
 30889                           tblptrh	equ	0xFF7
 30890                           tblptrl	equ	0xFF6
 30891                           tablat	equ	0xFF5
 30892                           prodh	equ	0xFF4
 30893                           prodl	equ	0xFF3
 30894                           intcon	equ	0xFF2
 30895                           indf0	equ	0xFEF
 30896                           postinc0	equ	0xFEE
 30897                           fsr0h	equ	0xFEA
 30898                           fsr0l	equ	0xFE9
 30899                           wreg	equ	0xFE8
 30900                           indf1	equ	0xFE7
 30901                           postdec1	equ	0xFE5
 30902                           fsr1h	equ	0xFE2
 30903                           fsr1l	equ	0xFE1
 30904                           indf2	equ	0xFDF
 30905                           postinc2	equ	0xFDE
 30906                           postdec2	equ	0xFDD
 30907                           plusw2	equ	0xFDB
 30908                           fsr2h	equ	0xFDA
 30909                           fsr2l	equ	0xFD9
 30910                           status	equ	0xFD8
 30911                           tosu	equ	0xFFF
 30912                           tosh	equ	0xFFE
 30913                           tosl	equ	0xFFD
 30914                           pclatu	equ	0xFFB
 30915                           pclath	equ	0xFFA
 30916                           tblptru	equ	0xFF8
 30917                           tblptrh	equ	0xFF7
 30918                           tblptrl	equ	0xFF6
 30919                           tablat	equ	0xFF5
 30920                           prodh	equ	0xFF4
 30921                           prodl	equ	0xFF3
 30922                           intcon	equ	0xFF2
 30923                           indf0	equ	0xFEF
 30924                           postinc0	equ	0xFEE
 30925                           fsr0h	equ	0xFEA
 30926                           fsr0l	equ	0xFE9
 30927                           wreg	equ	0xFE8
 30928                           indf1	equ	0xFE7
 30929                           postdec1	equ	0xFE5
 30930                           fsr1h	equ	0xFE2
 30931                           fsr1l	equ	0xFE1
 30932                           indf2	equ	0xFDF
 30933                           postinc2	equ	0xFDE
 30934                           postdec2	equ	0xFDD
 30935                           plusw2	equ	0xFDB
 30936                           fsr2h	equ	0xFDA
 30937                           fsr2l	equ	0xFD9
 30938                           status	equ	0xFD8
 30939                           
 30940                           	psect	text172
 30941  000000                     __ptext172:
 30942                           	opt stack 0
 30943                           tosu	equ	0xFFF
 30944                           tosh	equ	0xFFE
 30945                           tosl	equ	0xFFD
 30946                           pclatu	equ	0xFFB
 30947                           pclath	equ	0xFFA
 30948                           tblptru	equ	0xFF8
 30949                           tblptrh	equ	0xFF7
 30950                           tblptrl	equ	0xFF6
 30951                           tablat	equ	0xFF5
 30952                           prodh	equ	0xFF4
 30953                           prodl	equ	0xFF3
 30954                           intcon	equ	0xFF2
 30955                           indf0	equ	0xFEF
 30956                           postinc0	equ	0xFEE
 30957                           fsr0h	equ	0xFEA
 30958                           fsr0l	equ	0xFE9
 30959                           wreg	equ	0xFE8
 30960                           indf1	equ	0xFE7
 30961                           postdec1	equ	0xFE5
 30962                           fsr1h	equ	0xFE2
 30963                           fsr1l	equ	0xFE1
 30964                           indf2	equ	0xFDF
 30965                           postinc2	equ	0xFDE
 30966                           postdec2	equ	0xFDD
 30967                           plusw2	equ	0xFDB
 30968                           fsr2h	equ	0xFDA
 30969                           fsr2l	equ	0xFD9
 30970                           status	equ	0xFD8
 30971                           
 30972                           	psect	rparam
 30973  0000                     tosu	equ	0xFFF
 30974                           tosh	equ	0xFFE
 30975                           tosl	equ	0xFFD
 30976                           pclatu	equ	0xFFB
 30977                           pclath	equ	0xFFA
 30978                           tblptru	equ	0xFF8
 30979                           tblptrh	equ	0xFF7
 30980                           tblptrl	equ	0xFF6
 30981                           tablat	equ	0xFF5
 30982                           prodh	equ	0xFF4
 30983                           prodl	equ	0xFF3
 30984                           intcon	equ	0xFF2
 30985                           indf0	equ	0xFEF
 30986                           postinc0	equ	0xFEE
 30987                           fsr0h	equ	0xFEA
 30988                           fsr0l	equ	0xFE9
 30989                           wreg	equ	0xFE8
 30990                           indf1	equ	0xFE7
 30991                           postdec1	equ	0xFE5
 30992                           fsr1h	equ	0xFE2
 30993                           fsr1l	equ	0xFE1
 30994                           indf2	equ	0xFDF
 30995                           postinc2	equ	0xFDE
 30996                           postdec2	equ	0xFDD
 30997                           plusw2	equ	0xFDB
 30998                           fsr2h	equ	0xFDA
 30999                           fsr2l	equ	0xFD9
 31000                           status	equ	0xFD8
 31001                           
 31002                           	psect	temp
 31003  000051                     btemp:
 31004                           	opt stack 0
 31005  000051                     	ds	1
 31006  0000                     int$flags	set	btemp
 31007  0000                     wtemp6	set	btemp+1
 31008                           tosu	equ	0xFFF
 31009                           tosh	equ	0xFFE
 31010                           tosl	equ	0xFFD
 31011                           pclatu	equ	0xFFB
 31012                           pclath	equ	0xFFA
 31013                           tblptru	equ	0xFF8
 31014                           tblptrh	equ	0xFF7
 31015                           tblptrl	equ	0xFF6
 31016                           tablat	equ	0xFF5
 31017                           prodh	equ	0xFF4
 31018                           prodl	equ	0xFF3
 31019                           intcon	equ	0xFF2
 31020                           indf0	equ	0xFEF
 31021                           postinc0	equ	0xFEE
 31022                           fsr0h	equ	0xFEA
 31023                           fsr0l	equ	0xFE9
 31024                           wreg	equ	0xFE8
 31025                           indf1	equ	0xFE7
 31026                           postdec1	equ	0xFE5
 31027                           fsr1h	equ	0xFE2
 31028                           fsr1l	equ	0xFE1
 31029                           indf2	equ	0xFDF
 31030                           postinc2	equ	0xFDE
 31031                           postdec2	equ	0xFDD
 31032                           plusw2	equ	0xFDB
 31033                           fsr2h	equ	0xFDA
 31034                           fsr2l	equ	0xFD9
 31035                           status	equ	0xFD8


Data Sizes:
    Strings     241
    Constant    730
    Data        29
    BSS         822
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      80
    BANK0           160     63     160
    BANK1           256    256     256
    BANK2           256    256     256
    BANK3           256     10     254
    BANK4           256      0     170
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[7]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 76
		 -> STR_16(CODE[21]), STR_15(CODE[21]), STR_14(CODE[21]), STR_13(CODE[21]), 
		 -> STR_12(CODE[21]), STR_11(CODE[3]), STR_10(CODE[76]), STR_9(CODE[3]), 
		 -> STR_8(CODE[14]), STR_7(CODE[3]), STR_6(CODE[46]), STR_5(CODE[3]), 
		 -> STR_4(CODE[46]), STR_3(CODE[3]), STR_2(CODE[60]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__memset	PTR void  size(2) Largest target is 100
		 -> iRScriptStack(BANK4[100]), 

    load_iRScriptStack@loadByte	PTR void [1] size(2) Largest target is 1
		 -> ?_load_iRScriptStack(BANK0[1]), 

    irobot_query_and_update@packetIDs	PTR void [1] size(2) Largest target is 1
		 -> ?_irobot_query_and_update(BANK0[1]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    Timer0_Start@pFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Motor_Speed@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK3[6]), 

    Motor_Move@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK3[6]), 

    lMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK3[6]), NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    Motor_Init@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK3[6]), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11800I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Voltage@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN0(BANK0[5]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Start@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 
		 -> NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    S11482ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 
		 -> NULL(NULL[0]), 

    ADC_Init@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK3[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK3[2]), 
		 -> PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), PortA(BANK3[10]), 
		 -> PortB(BANK3[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK3[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK3[2]), PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), 
		 -> PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), PortD(BANK0[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK3[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK3[2]), 
		 -> PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), PortA(BANK3[10]), 
		 -> PortB(BANK3[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK3[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK3[2]), PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), 
		 -> PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK0[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK3[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortE(BANK0[10]), PortD(BANK0[10]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK3[10]), PortD(BANK0[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK0[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK3[10]), PortE(BANK0[10]), PortC(BANK0[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortE(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK3[10]), TestButton(BANK3[10]), HMIBoard(BANK3[58]), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK3[10]), TestButton(BANK3[10]), HMIBoard(BANK3[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _findClosestWall->___fltol
    _move_and_rotate->_irobot_rotate
    _mode2->_Console_Render
    _irobot_move_straight->_irobot_move
    _mode1->___fltol
    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update
    _irobot_query_and_update->_rx_assign
    _rx_assign->_sort_iRBumpDrop
    _irobot_stop_motion->_irobot_move
    _irobot_move->_load_iRScriptStack
    _irobot_song_play->_eusart_putch
    _printf->_putch
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    ___fltol->_ADC_Voltage
    _Motor_Speed->_Timer0_Init
    _Motor_Move->_Timer0_Start
    _HMI_Render->_OutSeg
    _OutSeg->_SPI_Send
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Console_MakeField->_Byte_GetBit
    _ADC_Voltage->___flmul
    ___flmul->___xxtofl
    _irobot_led_power_on->_irobot_leds
    _irobot_leds->_load_iRScriptStack
    _irobot_init_song_0->_eusart_putch
    _irobot_init->_eusart_putch
    _Motor_Init->_Port_SetPinType
    _Timer0_Init->___lldiv
    _MXK_Init->_Port_SetType
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Byte_SetQuad->_Byte_SetZone
    _ADC_Start->_ADC_SetChannel
    _ADC_Init->_ADC_SetupIO
    _HMI_Poll->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _MXK_TestButton->_Port_GetPin
    _MXK_DIPSwitch->_Port_GetQuad
    _HMI_UpSwitch->_Port_GetPin
    _HMI_RightSwitch->_Port_GetPin
    _HMI_LeftSwitch->_Port_GetPin
    _HMI_DownSwitch->_Port_GetPin
    _HMI_DIPSwitch->_Port_GetQuad
    _Event_TestButton->_LED_Toggle
    _HMI_SetNumber->_itos
    _itos->___lwmod
    ___lwmod->___lwdiv
    _HMI_SetSegments->_ToSegment
    _Event_DIPSwitch->_LED_Toggle
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    _findClosestWall->___fltol
    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update
    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _HMI_Init->_Button_Init

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_mode1

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0 2021880
                                              8 BANK3      2     2      0
                     _Console_Render
                           _HMI_Poll
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                            _getMode
                               _init
                              _mode1
                              _mode2
                              _mode3
                              _mode4
                             _printf
 ---------------------------------------------------------------------------------
 (1) _mode4                                                2     2      0  285164
                                              0 BANK3      2     2      0
                     _Console_Render
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                    _findClosestWall
                      _irobot_rotate
                   _irobot_song_play
                 _irobot_stop_motion
                             _printf
                           _safeToGo
              _update_bump_and_cliff
 ---------------------------------------------------------------------------------
 (2) _findClosestWall                                      9     9      0  103791
                                              4 BANK1      5     5      0
                          _ADC_Start
                        _ADC_Voltage
                     _Console_Render
                         _HMI_Render
                      _HMI_SetNumber
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                         _Motor_Move
                        _Motor_Speed
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl
                             _printf
 ---------------------------------------------------------------------------------
 (1) _mode3                                                0     0      0  113009
                    _move_and_rotate
                           _safeToGo
 ---------------------------------------------------------------------------------
 (2) _move_and_rotate                                      0     0      0   19365
                           _delay_ms
               _irobot_move_straight
                      _irobot_rotate
                 _irobot_stop_motion
                    _update_distance
 ---------------------------------------------------------------------------------
 (2) _irobot_rotate                                       10     6      4    9290
                                             29 BANK0     10     6      4
                        _irobot_move
                 _irobot_stop_motion
                       _update_angle
 ---------------------------------------------------------------------------------
 (1) _mode2                                                2     2      0  175701
                                             44 BANK0      2     2      0
                     _Console_Render
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
               _irobot_move_straight
                 _irobot_stop_motion
                             _printf
                           _safeToGo
                    _update_distance
 ---------------------------------------------------------------------------------
 (3) _irobot_move_straight                                 2     0      2    3510
                                             25 BANK0      2     0      2
                        _irobot_move
 ---------------------------------------------------------------------------------
 (1) _mode1                                               16    16      0  194184
                                              0 BANK3      8     8      0
                          _ADC_Start
                        _ADC_Voltage
                     _Console_Render
                         _HMI_Render
                      _HMI_SetNumber
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                         _Motor_Move
                        _Motor_Speed
                            ___fldiv
                            ___fltol
                             _printf
                           _safeToGo
 ---------------------------------------------------------------------------------
 (2) _safeToGo                                             0     0      0   93644
                           _HMI_Poll
                   _irobot_song_play
                 _irobot_stop_motion
                       _update_angle
              _update_bump_and_cliff
                    _update_distance
 ---------------------------------------------------------------------------------
 (3) _update_distance                                      0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (2) _update_bump_and_cliff                                0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (3) _update_angle                                         0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (3) _irobot_query_and_update                            535   525     10    1737
                                              6 BANK0     23    13     10
                                              0 BANK1    256   256      0
                                              0 BANK2    256   256      0
                       _eusart_getch
                       _eusart_putch
                    _get_packet_size
                          _rx_assign
 ---------------------------------------------------------------------------------
 (4) _rx_assign                                            5     3      2     738
                                              1 BANK0      5     3      2
                    _sort_iRBumpDrop
 ---------------------------------------------------------------------------------
 (5) _sort_iRBumpDrop                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _get_packet_size                                      1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _eusart_getch                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _irobot_stop_motion                                   1     1      0    3206
                                             25 BANK0      1     1      0
                        _irobot_move
 ---------------------------------------------------------------------------------
 (4) _irobot_move                                          9     5      4    3175
                                             16 BANK0      9     5      4
                       _eusart_putch
                 _load_iRScriptStack
                 _twos_complement_of
 ---------------------------------------------------------------------------------
 (5) _twos_complement_of                                   2     0      2     806
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _irobot_song_play                                     1     1      0      62
                                              1 BANK0      1     1      0
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (1) _printf                                              29    17     12    6795
                                             21 BANK0     20     8     12
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0    1972
                                             20 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (3) _Console_PrintChar                                    4     4      0    1941
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (4) _Console_Tab                                          8     8      0    1390
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1053
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (5) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (6) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (5) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4    1249
                                             57 BANK0      6     2      4
                                              0 BANK1      4     4      0
                        _ADC_Voltage (ARG)
                            ___fldiv (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) _Motor_Speed                                          4     0      4    4143
                                             27 BANK0      4     0      4
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (3) _Motor_Move                                           6     2      4    1219
                                              3 BANK0      6     2      4
                       _Timer0_Start
 ---------------------------------------------------------------------------------
 (4) _Timer0_Start                                         3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _HMI_Render                                           2     2      0    1593
                                              8 BANK0      2     2      0
                             _OutSeg
 ---------------------------------------------------------------------------------
 (4) _OutSeg                                               5     4      1    1463
                                              3 BANK0      5     4      1
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (3) _Console_Render                                      11    11      0   35327
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (4) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (4) _LCD_DrawField                                       17     7     10   16520
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     536
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (5) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (3) _ADC_Voltage                                         18    14      4    8425
                                             39 BANK0     18    14      4
                            ___fldiv
                            ___flmul
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     696
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    3065
                                             14 BANK0     25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    3703
                                              0 BANK0     25    17      8
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0  998400
                           _ADC_Init
                          _ADC_Start
                       _Console_Init
                           _HMI_Init
                         _ISR_Enable
                           _LCD_Init
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                         _Motor_Init
                           _delay_ms
                        _eusart_init
                        _irobot_init
                 _irobot_init_song_0
                _irobot_led_power_on
 ---------------------------------------------------------------------------------
 (2) _irobot_led_power_on                                  1     1      0    1358
                                             20 BANK0      1     1      0
                        _irobot_leds
 ---------------------------------------------------------------------------------
 (3) _irobot_leds                                          4     1      3    1327
                                             16 BANK0      4     1      3
                       _eusart_putch
                 _load_iRScriptStack
 ---------------------------------------------------------------------------------
 (5) _load_iRScriptStack                                  16     6     10     167
                                              0 BANK0     16     6     10
 ---------------------------------------------------------------------------------
 (2) _irobot_init_song_0                                   0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (2) _irobot_init                                          0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (4) _eusart_putch                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _eusart_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Motor_Init                                           4     0      4   88478
                                             45 BANK0      4     0      4
                        _Port_SetPin
                    _Port_SetPinType
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (4) _Timer0_Init                                         14    10      4    3138
                                             13 BANK0     14    10      4
                       _Timer0_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) _Timer0_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_Init                                             0     0      0  362616
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Port_Init                                            6     3      3  111429
                                              1 BANK1      6     3      3
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (3) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      5     2      3
                                              0 BANK1      1     1      0
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (4) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (4) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (3) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (4) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (5) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             4     4      0  291428
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (5) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (5) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (6) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (5) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (7) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Configure_GPIOs                                      0     0      0  262117
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (4) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _LCD_Reset                                            0     0      0   94741
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             6     4      2    1622
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (5) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (5) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _ISR_Enable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _HMI_Init                                             2     2      0  217901
                                             59 BANK0      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _SPI_Init                                             8     2      6   86139
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (5) _Timer2_Init                                         17    13      4    2964
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8    2673
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (6) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _Button_Init                                         13     0     13  105207
                                              0 BANK1     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (4) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (6) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (4) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (6) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (4) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _ADC_Start                                            4     2      2    1222
                                              2 BANK0      4     2      2
                            _ADC_Off
                             _ADC_On
                     _ADC_SetChannel
 ---------------------------------------------------------------------------------
 (2) _ADC_Init                                             3     0      3    2172
                                              4 BANK0      3     0      3
                      _ADC_Calibrate
                  _ADC_ClockDivision
                 _ADC_ConversionTime
                     _ADC_SetChannel
                        _ADC_SetupIO
 ---------------------------------------------------------------------------------
 (3) _ADC_SetupIO                                          4     4      0      65
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _ADC_SetChannel                                       2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ConversionTime                                   2     2      0     136
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ClockDivision                                    3     3      0     172
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _ADC_Calibrate                                        0     0      0       0
                            _ADC_Off
                             _ADC_On
 ---------------------------------------------------------------------------------
 (4) _ADC_On                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _ADC_Off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getMode                                              0     0      0   96823
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                           _HMI_Poll
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (3) _HMI_Poll                                             0     0      0   85165
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (4) _Button_Poll                                          9     6      3   85165
                                             27 BANK0      9     6      3
                    _Event_DIPSwitch *
                         _Event_NULL *
                   _Event_TestButton *
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (5) _MXK_TestButton                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _MXK_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (5) _HMI_UpSwitch                                         0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _HMI_RightSwitch                                      0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _HMI_LeftSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _HMI_DownSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _HMI_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (6) _Port_GetQuad                                         6     3      3    1014
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (5) _Event_TestButton                                     1     1      0   37797
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (6) _HMI_SetNumber                                        2     0      2    4702
                                             22 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (7) _itos                                                10     6      4    3009
                                             12 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (8) _reverse                                              7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     840
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     849
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (7) _HMI_SetSegments                                      5     3      2     446
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (8) _ToSegment                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _HMI_SetButton                                        8     8      0     207
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (5) _Event_NULL                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _Event_DIPSwitch                                      2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (6) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (7) _Port_TogglePin                                       4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (8) _Port_SetPin                                          5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (9) _Word_GetPair                                         3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (10) _Byte_GetPair                                        3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (11) _Byte_GetZone                                        9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (9) _Byte_SetBit                                          7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (6) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (6) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _ISR_Function                                       18    18      0    1778
                                             22 COMRAM    18    18      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (13) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (16) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (17) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (18) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (16) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (15) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (16) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Console_Render
     _Console_MakeField
       _Byte_GetBit
     _LCD_DrawField
       _Console_MakeField (ARG)
         _Byte_GetBit
       _LCD_Word_Write (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       ___wmul (ARG)
     _LCD_FillRectangle
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
   _HMI_Poll
     _Button_Poll
       _Event_DIPSwitch *
         _HMI_GetBar
         _HMI_SetBar
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Event_NULL *
       _Event_TestButton *
         _HMI_SetButton
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _reverse
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _HMI_DIPSwitch *
         _Port_GetQuad
       _HMI_DownSwitch *
         _Port_GetPin
       _HMI_LeftSwitch *
         _Port_GetPin
       _HMI_RightSwitch *
         _Port_GetPin
       _HMI_UpSwitch *
         _Port_GetPin
       _MXK_DIPSwitch *
         _Port_GetQuad
       _MXK_TestButton *
         _Port_GetPin
   _MXK_Dequeue
     Absolute function(Fake) *
     _Motor_Step *
       _MXK_Queue
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Timer0_Restart
       _Timer0_Stop
   _MXK_Release
   _MXK_SwitchTo
     _delay_us
   _getMode
     _HMI_DIPSwitch *
       _Port_GetQuad
     _HMI_DownSwitch *
       _Port_GetPin
     _HMI_LeftSwitch *
       _Port_GetPin
     _HMI_Poll *
       _Button_Poll
         _Event_DIPSwitch *
           _HMI_GetBar
           _HMI_SetBar
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Event_NULL *
         _Event_TestButton *
           _HMI_SetButton
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _reverse
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
     _HMI_RightSwitch *
       _Port_GetPin
     _HMI_UpSwitch *
       _Port_GetPin
     _MXK_DIPSwitch *
       _Port_GetQuad
     _MXK_TestButton *
       _Port_GetPin
   _init
     _ADC_Init
       _ADC_Calibrate
         _ADC_Off
         _ADC_On
       _ADC_ClockDivision
       _ADC_ConversionTime
       _ADC_SetChannel
       _ADC_SetupIO
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _Console_Init
     _HMI_Init
       _Button_Init
         _HMI_InitButtons *
         _MXK_InitDIPSwitch *
           _Port_SetQuadType
             _Byte_SetQuad
               _Byte_SetZone
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
         _MXK_InitTestButton *
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MinSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _ISR_Enable
     _LCD_Init
       _Configure_GPIOs
         _LCD_Reset
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Reset_High
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _Reset_Low
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _delay_ms
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_Init
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
           _SPI_DCS
           _SPI_DisableISR
           _Timer2_Init
             _Timer2_Clear
             ___lldiv
         _SPI_MaxSpeed
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
       _LCD_Fill
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
       _LCD_Write
         _Mode_Set
         _SPI_Send
       _Set_Rotation
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _delay_ms
     _MXK_BlockSwitchTo
       _delay_us
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Init
       _LED_Init
         _LED_Set
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _Port_Init
         _GetPortPORT
         _GetPortProperties
         _GetPortTRIS
         _Port_Set
           _Byte_SetByte
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Port_SetType
           _Port_CheckPortType
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetQuadType
         _Byte_SetQuad
           _Byte_SetZone
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _delay_ms
     _MXK_Release
     _Motor_Init
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     _delay_ms
     _eusart_init
     _irobot_init
       _eusart_putch
     _irobot_init_song_0
       _eusart_putch
     _irobot_led_power_on
       _irobot_leds
         _eusart_putch
         _load_iRScriptStack
   _mode1
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _ADC_Voltage
       ___fldiv
       ___flmul
         ___xxtofl (ARG)
       ___xxtofl
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _HMI_Render
       _OutSeg
         _SPI_Send
     _HMI_SetNumber
       _HMI_SetSegments
         _ToSegment
       _itos
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _reverse
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _Motor_Move
       _Timer0_Start
     _Motor_Speed
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     ___fldiv
     ___fltol
       _ADC_Voltage (ARG)
         ___fldiv
         ___flmul
           ___xxtofl (ARG)
         ___xxtofl
       ___fldiv (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _safeToGo
       _HMI_Poll
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_NULL *
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _irobot_song_play
         _eusart_putch
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_angle
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_bump_and_cliff
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
   _mode2
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _irobot_move_straight
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _irobot_stop_motion
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _safeToGo
       _HMI_Poll
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_NULL *
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _irobot_song_play
         _eusart_putch
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_angle
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_bump_and_cliff
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
     _update_distance
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
   _mode3
     _move_and_rotate
       _delay_ms
       _irobot_move_straight
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _irobot_rotate
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
         _irobot_stop_motion
           _irobot_move
             _eusart_putch
             _load_iRScriptStack
             _twos_complement_of
         _update_angle
           _irobot_query_and_update
             _eusart_getch
             _eusart_putch
             _get_packet_size
             _rx_assign
               _sort_iRBumpDrop
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
     _safeToGo
       _HMI_Poll
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_NULL *
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _irobot_song_play
         _eusart_putch
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_angle
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_bump_and_cliff
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
   _mode4
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _findClosestWall
       _ADC_Start
         _ADC_Off
         _ADC_On
         _ADC_SetChannel
       _ADC_Voltage
         ___fldiv
         ___flmul
           ___xxtofl (ARG)
         ___xxtofl
       _Console_Render
         _Console_MakeField
           _Byte_GetBit
         _LCD_DrawField
           _Console_MakeField (ARG)
             _Byte_GetBit
           _LCD_Word_Write (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           ___wmul (ARG)
         _LCD_FillRectangle
           _LCD_Word_Write
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window
             _LCD_Write
               _Mode_Set
               _SPI_Send
       _HMI_Render
         _OutSeg
           _SPI_Send
       _HMI_SetNumber
         _HMI_SetSegments
           _ToSegment
         _itos
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _reverse
       _MXK_Dequeue
         Absolute function(Fake) *
         _Motor_Step *
           _MXK_Queue
           _MXK_Release
           _MXK_SwitchTo
             _delay_us
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Timer0_Restart
           _Timer0_Stop
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Motor_Move
         _Timer0_Start
       _Motor_Speed
         _Timer0_Init
           _Timer0_Clear
           ___lldiv
       ___fldiv
       ___flmul
         ___xxtofl (ARG)
       ___fltol
         _ADC_Voltage (ARG)
           ___fldiv
           ___flmul
             ___xxtofl (ARG)
           ___xxtofl
         ___fldiv (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
     _irobot_rotate
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_angle
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
     _irobot_song_play
       _eusart_putch
     _irobot_stop_motion
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _safeToGo
       _HMI_Poll
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_NULL *
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _irobot_song_play
         _eusart_putch
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_angle
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_bump_and_cliff
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
     _update_bump_and_cliff
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _Console_PrintChar
         _Console_Backspace
           _Console_ClearCursor
         _Console_FormFeed
         _Console_IncrementCursor
           _Console_FormFeed
           _Console_NewLine
         _Console_NewLine
         _Console_ResetCursor
         _Console_Tab
           _Console_ClearCursor
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           ___awdiv

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0      AA      14       66.4%
BITBANK3           100      0       0      10        0.0%
BANK3              100      A      FE      11       99.2%
BITBANK2           100      0       0       8        0.0%
BANK2              100    100     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100    100     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3F      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      50       1       85.1%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     498      12        0.0%
DATA                 0      0     5C4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Fri Sep 15 13:13:44 2017

                                 _update_angle 65A4                                  i2_Timer0_Stop 66A2  
                             SPI_Init@pChannel 00EB                     __size_of_MXK_BlockSwitchTo 003E  
                                 i2_Motor_Step 36CE                                              _A 004C  
                        __end_of_irobot_rotate 45E6                                              l8 3D5C  
                                 ___fldiv@aexp 00D2                                   ___fldiv@bexp 00D1  
                                            _a 004D                                              _i 003A  
                                            _j 0039                                              _l 004F  
                                            _u 0038                                              _w 0050  
                          _irobot_led_power_on 6426                                   ___fldiv@sign 00C6  
                                           l11 30F4                                             l12 30DE  
                                           l90 302A                                             l85 2F26  
                                           l87 2F94                                             l89 3000  
                                 ___awdiv@sign 00BF                             __size_of_ADC_Start 0084  
                          ___wmul@multiplicand 00BC                                  _HMI_DIPSwitch 64C4  
                           LCD_DrawField@pSize 00D2                             LCD_DrawField@count 00D8  
                   __end_of_irobot_stop_motion 5D16                              ?_Event_TestButton 0001  
                             i2_Timer0_Restart 6640                           ADC_ClockDivision@reg 00BB  
                                          l120 4BEC                                            l121 4C02  
                                          l122 4C18                                            l220 583E  
                                          l117 4C2E                                            l221 5802  
                                          l118 4BD6                                            l230 5A9A  
                                          l222 584E                                            l223 5820  
                                  ?_LED_Toggle 0001                                            l234 5CBE  
                                          l235 5C8E                                            l227 5AB6  
                                          l403 2BB4                                            l412 26EA  
                                          l228 5A7E                                            l340 489A  
                                          l404 2B54                                            l237 5CA6  
                                          l421 267E                                            l413 2580  
                                          l341 48A8                                            l405 2BE4  
                                ??_Console_Tab 00C2                                            l430 3ED0  
                                          l414 2706                                            l350 49A2  
                                          l342 48B6                                            l510 1BAC  
                                          l406 2B6C                                            l415 25A6  
                                          l351 4932                                            l343 48C4  
                                          l511 1CBC                                            l407 2B84  
                                          l183 4A56                                            l432 3EFA  
                                          l600 04B2                                            l344 48D2  
                                          l512 1BCE                                            l408 2B9C  
                                          l184 4A30                                            l433 3F2A  
                                          l417 2612                                            l601 0646  
                                          l353 4940                                            l337 48FC  
                                          l345 48E0                                            l610 06CE  
                                          l602 04E4                                            l354 494E  
                                          l346 48EE                                            l338 488C  
                                          l370 482C                                            l427 3F54  
                                          l611 071C                                            l603 0658  
                                          l355 495C                                            l363 4856  
                                          l371 483A                                            l531 13AE  
                                  ?_HMI_GetBar 0001                                            l612 076A  
                                          l604 0592                                            l356 496A  
                                          l372 4848                                            l364 47E6  
                                          l532 13D2                                            l516 1C16  
                                          l357 4978                                            l509 1CA0  
                                          l614 084C                                            l358 4986  
                                          l366 47F4                                            l526 13F2  
                                          l615 0844                                            l607 07B8  
                                          l359 4994                                            l367 4802  
                                          l519 1C5E                                            l616 085E  
                                          l608 0680                                            l368 4810  
                                          l528 1410                                            l393 5970  
                                          l617 0848                                            l609 07D6  
                                          l369 481E                                            l529 138E  
                                          l483 1A0C                                            l732 4B70  
                                          l900 1784                                            l476 1AE4  
                                          l733 4B64                                            l901 1788  
                                          l389 56C6                                            l477 1956  
                                          l397 5C3A                                            l910 17AC  
                                          l902 178C                                            l726 435A  
                                          l478 1B00                                            l486 1A78  
                                          l654 626C                                            l911 17B0  
                                          l903 1790                                            l727 434E  
                                          l479 19A0                                            l655 6264  
                                          l912 17B4                                            l904 1794  
                                          l824 55FA                                            l832 5A28  
                                          l913 17B8                                            l905 1798  
                                          l921 5570                                            l673 6144  
                                          l657 6268                                            l681 54C8  
                                          l914 17BC                                            l906 179C  
                                          l922 553C                                            l930 3B9A  
                                          l915 17C0                                            l907 17A0  
                                          l819 510A                                            l916 17C4  
                                          l908 17A4                                            l860 16E4  
                                          l684 54DE                                            l781 5F8E  
                                          l853 17CC                                            l917 17C8  
                                          l909 17A8                                            l861 16E8  
                                          l597 04C0                                            l870 170C  
                                          l862 16EC                                            l854 16D0  
                                          l598 04A8                                            l678 5504  
                                          l686 54EE                                            l871 1710  
                                          l863 16F0                                            l599 04D0  
                                          l679 54B8                                            l880 1734  
                                          l872 1714                                            l864 16F4  
                                          l856 16D4                                            l928 3C1A  
                                          l776 5D46                                            l881 1738  
                                          l873 1718                                            l865 16F8  
                                          l857 16D8                                            l929 3BEA  
                                          l890 175C                                            l882 173C  
                                          l874 171C                                            l866 16FC  
                                          l858 16DC                                            l891 1760  
                                          l883 1740                                            l875 1720  
                                          l867 1700                                            l859 16E0  
                                          l892 1764                                            l884 1744  
                                          l876 1724                                            l868 1704  
                                          l893 1768                                            l885 1748  
                                          l877 1728                                            l869 1708  
                                          l894 176C                                            l886 174C  
                                          l878 172C                                            l990 4CF8  
                                          l895 1770                                            l887 1750  
                                          l879 1730                                            l983 4AF4  
                                          l896 1774                                            l888 1754  
                                          l976 4E12                                            l992 4D08  
                                          l984 4A78                                            l897 1778  
                                          l889 1758                                            l985 4AF0  
                                          l898 177C                                            l978 4E22  
                                          l899 1780                                            l997 58D6  
                                          l999 58FA                                            _PR2 000FCB  
                                          _dip 033A                                            _val 007F  
                              __end_of_ADC_Off 6682                                    ?_HMI_SetBar 0001  
                           ??_Event_TestButton 00D3                                   _Word_GetPair 5F62  
                                          prod 000FF3                                    ?_HMI_Render 0001  
                          MXK_SwitchTo@pModule 00C1                     __end_of_ADC_ConversionTime 5C88  
                                          tosl 000FFD                                            wreg 000FE8  
                           Console_MakeField@x 00CA                             Console_MakeField@y 00CB  
                                   _TXSTA1bits 000FAD                                _update_distance 6592  
                                 Console_Tab@c 00C9                                   Console_Tab@i 00C8  
                          LCD_DrawField@pField 00CC                                   Console_Tab@t 00C7  
                   __size_of_ADC_ClockDivision 008A                                   ___flmul@aexp 00D5  
                                 ___flmul@bexp 00DA                                     i2_delay_us 5E68  
                         Port_Set@TypeRequired 00DC                                   ___flmul@sign 00D4  
                                 ___flmul@temp 00DF                                   ___flmul@prod 00DB  
                            Console_FormFeed@x 00BC                              Console_FormFeed@y 00BD  
                          LCD_DrawField@pPoint 00CE                                 ?_LCD_DrawField 00CC  
                        Port_SetPinType@Output 00E4                                Port_SetPin@Type 00CD  
                              Port_SetPin@pPin 00CB                           ?_irobot_led_power_on 0001  
                                ?_Byte_GetPair 00C3                                __end_of_LED_Set 5AC8  
                      __size_ofi2_Word_GetPair 0030                                  i2_Port_SetPin 4690  
                                 ___fltol@exp1 00F8                                   _Word_SetPair 5D16  
                                         l1000 5916                                           l1010 3FC4  
                                         l1004 5766                                  ?_Byte_GetZone 00BA  
                                         l1005 5794                                           l1200 427A  
                                         l1040 28DA                                           l1201 42CE  
                                         l1009 3FD0                                           l1041 28E0  
                                         l1202 42EA                                           l1042 28E6  
                                         l1043 28EC                                           l1204 4314  
                                         l1300 4EA4                                           l1036 2A36  
                                         l1044 28F2                                           l1205 42FA  
                                         l1301 4EA8                                           l1045 28F8  
                                         l1037 28D4                                           l2021 56F6  
                                         l2101 2D76                                           l1302 4EB2  
                                         l1062 1F68                                           l2110 5DDC  
                                         l2030 56EE                                           l2022 56D2  
                                         l2102 2CBA                                           l1207 4326  
                                         l1303 4EC0                                           l1063 1F96  
                                         l1047 299E                                           l2031 56F2  
                                         l2103 2D02                                           l1056 1DF8  
                                         l2112 5DC8                                           l2024 56D6  
                                         l2040 37EA                                           l2104 2CC0  
                                         l1313 5C68                                           l1153 21D6  
                                         l3001 2272                                           l1057 1FBE  
                                         l2025 56DA                                           l2041 37F0  
                                         l3002 2262                                           l1082 3E4A  
                                         l1058 1E00                                           l1146 502C  
                                         l2114 5DD0                                           l2026 56DE  
                                         l2042 37F6                                           l1059 1E2A  
                                         l2027 56E2                                           l2035 3882  
                                         l2051 3856                                           l2043 37FC  
                                         l3012 2342                                           l3004 22CE  
                                         l1084 3E52                                           l2028 56E6  
                                         l2044 3802                                           l2036 37D4  
                                         l2301 4766                                           l3013 2394  
                                         l3005 22B0                                           l1077 3E1A  
                                         l2029 56EA                                           l2310 409A  
                                         l1254 6586                                           l2118 55E4  
                                         l1158 5EE4                                           l2070 4DD2  
                                         l2062 4D8C                                           l2046 3816  
                                         l2038 37DE                                           l2311 40C6  
                                         l2119 55A6                                           l2303 4798  
                                         l3007 231C                                           l1079 3E2A  
                                         l2039 37E4                                           l1280 4F26  
                                         l2144 59AE                                           l3008 230C  
                                         l2400 39AE                                           l2049 3842  
                                         l2161 45BE                                           l2074 4DF0  
                                         l2066 4DAC                                           l2058 4D72  
                                         l2162 45AA                                           l2330 14B4  
                                         l2402 39B4                                           l1283 4F88  
                                         l2139 4466                                           l2323 4FBC  
                                         l2331 14E4                                           l2403 39BA  
                                         l1276 4F0E                                           l2316 5B8C  
                                         l2156 456A                                           l2324 4FA8  
                                         l2404 39C0                                           l2309 406E  
                                         l2421 23B4                                           l2333 152E  
                                         l2405 39C6                                           l1294 4EC8  
                                         l1630 3508                                           l2430 23E8  
                                         l2422 23C8                                           l2350 09FA  
                                         l2158 4570                                           l1295 4E8E  
                                         l1631 3564                                           l2423 23F8  
                                         l2431 23F2                                           l2095 2C76  
                                         l2319 5BA8                                           l2351 0A2A  
                                         l2159 4592                                           l2335 15F0  
                                         l1296 4EF2                                           l1632 3548  
                                         l2440 24E2                                           l2432 246C  
                                         l2168 5CFA                                           l2096 2C30  
                                         l2336 154E                                           l1297 4E98  
                                         l2353 0A76                                           l1298 4E9C  
                                         l1730 5DFC                                           l2434 2486  
                                         l2098 2CA6                                           l2346 0926  
                                         l2338 1586                                           l1299 4EA0  
                                         l1627 35B0                                           l2611 4110  
                                         l2099 2C8A                                           l2363 0C82  
                                         l2355 0B38                                           l1724 5F30  
                                         l1732 5E24                                           l1628 35A6  
                                         l2620 41A8                                           l2612 4126  
                                         l2428 2434                                           l2364 0BE8  
                                         l2356 0A96                                           l2348 095A  
                                         l2372 3978                                           l1629 3526  
                                         l2429 23D0                                           l2373 392E  
                                         l1726 5F5E                                           l2614 4150  
                                         l2438 24DC                                           l2366 0C20  
                                         l2358 0ACE                                           l2382 276E  
                                         l1735 645A                                           l2615 4144  
                                         l2439 253A                                           l2383 276A  
                                         l2385 27EA                                           l2618 4186  
                                         l2386 28A0                                           l1827 33A8  
                                         l2619 4194                                           l2387 2822  
                                         l1828 33C8                                           l2389 289C  
                                         l2398 39A8                                           l2399 3A54  
                                         l1784 3242                                           l1873 5FD4  
                                         l1785 3250                                           l2681 3696  
                                         l2673 35E8                                           l2682 3686  
                                         l2851 51E8                                           l1787 325A  
                                         l2675 366A                                           l2852 51F6  
                                         l2940 0D38                                           l2684 36BC  
                                         l2676 3656                                           l2861 58A8  
                                         l2862 58B6                                           l2942 0D96  
                                         l2934 0CB6                                           l2847 51B2  
                                         l2935 0CE4                                           l2848 51A6  
                                         l2952 0F12                                           l2944 0DC4  
                                         l2936 0CDA                                           l2857 587E  
                                         l2961 0FBC                                           l2953 0EE8  
                                         l2945 0EC6                                           l2858 5872  
                                         l2794 41F0                                           l2962 0FEA  
                                         l2954 0EFE                                           l2946 0E42  
                                         l2938 0D14                                           l2970 0042  
                                         l2795 41E0                                           l2963 1020  
                                         l2947 0E7A                                           l2939 0D42  
                                         l2971 005A                                           l2964 1030  
                                         l2948 0E6E                                           l2980 0364  
                                         l2972 0078                                           l2965 1034  
                                         l2949 0EC2                                           l2981 033A  
                                         l2973 00A2                                           l2798 424A  
                                         l2990 0434                                           l2982 0350  
                                         l2974 009C                                           l2799 425C  
                                         l2959 0F6C                                           l2975 00B4  
                                         l2992 0462                                           l2976 00DC  
                                         l2968 001E                                           l2993 048C  
                                         l2969 0048                                           l2994 0482  
                                         l2987 03BE                                           l2989 040E  
                                         l2997 2222                                           l2998 2232  
                                         l2999 225A                                 ??_Console_Init 00BA  
                        Port_SetPinType@pInput 00E0                                           STR_1 FFFB  
                                         STR_2 FF59                                           STR_3 FFFB  
                                         STR_4 FF95                                           STR_5 FFFB  
                                         STR_6 FF95                                           STR_7 FFFB  
                                         STR_8 FFED                                           STR_9 FFFB  
                                         _LATA 000F89                                           _LATB 000F8A  
                                         _LATC 000F8B                                           _LATD 000F8C  
                                         _LATE 000F8D                                           _LATF 000F8E  
                  __size_of_MXK_InitTestButton 001E                                           _LATG 000F8F  
                          __end_of_GetPortPORT 49D2                       __end_of_irobot_song_play 657E  
                                         _PIR1 000F9E                                           _PIR2 000FA1  
                                         _PIR3 000FA4                            __end_of_GetPortTRIS 4886  
                                         u9140 5BE6                                           u9300 41F6  
                                         u9214 4CA8                                           u9215 4CA2  
                                         u9160 5A60                                           u9145 5BE0  
                                         u9090 4156                                           u8620 4B3A  
                                         u8710 5D90                                           u9270 5DBC  
                                         u8640 4BA0                                           u9440 3414  
                                         u9360 5638                                           u8800 4D4C  
                                         u9425 3360                                           u8810 4D52  
                                         u8715 5D8A                                           u8627 4B30  
                                         u9460 60DE                                           u8645 4B9A  
                                         u8830 51B8                                           u8734 4396  
                                         u8735 4390                                           u8664 57B4  
                                         u8744 43C8                                           u8680 50A4  
                                         u8665 57AE                                           u8745 43C2  
                                         u9465 60D8                                           u8674 57E6  
                                         u8675 57E0                                           _SPI1 0376  
                                         u8860 5884                                           u8940 3C06  
                                         u9900 507A                                           _SPI2 0381  
                                         u9805 135A                                           u9670 52E4  
                                         u8950 5762                                           u9735 1086  
                                         u9648 31C4                                           u8960 578C  
                                         u9745 109E                                           u9850 3E94  
                                         u9755 10B6                                           u9940 32AE  
                                         u9860 3EA0                                           u8885 65C4  
                                         u9765 10D8                                           u9598 3088  
                                         u8886 65C6                                           u9599 309C  
                                         u9775 1258                                           _TMR0 000FD6  
                                         u9785 12D6                                           u9970 34E6  
                                         u9795 1318                                           u9980 34FA  
                                         u9990 353A                                           u9895 503C  
               irobot_query_and_update@RXArray 0100                              rx_assign@packetID 00BF  
                                         _gISR 0060                             Event_DIPSwitch@Bar 00D4  
               irobot_query_and_update@TXArray 0200                                  ??_Byte_GetBit 00BD  
                                _iRVirtualWall 0030                           __size_of_ADC_SetupIO 0032  
                           SPI_MaxSpeed@pInput 00C9                                           _dist 0069  
                                ?_Byte_SetByte 00BA                                  ?_Byte_SetPair 00C5  
                              __end_of_SPI_DCS 6152                                           _main 39A4  
                   irobot_leds@powerLuminosity 00CC                                           _init 473A  
                                         _mode 0073                                ??i2_Byte_SetBit 0005  
                                ?_Byte_SetQuad 00C5                                           _itos 3B5C  
                                         fsr0h 000FEA                                           fsr1h 000FE2  
                                         indf0 000FEF                                           fsr2h 000FDA  
                                         fsr0l 000FE9                                           indf1 000FE7  
                                         indf2 000FDF                                           fsr1l 000FE1  
                                         fsr2l 000FD9                                  ?_Byte_SetZone 00BA  
                                         btemp 0051                                           _zero 004E  
                             __end_of_ADC_Init 5188                                  ??_Byte_SetBit 00BE  
                           __size_of_LCD_Reset 0050                           __size_of_ADC_Voltage 00D8  
                                         prodh 000FF4                                           prodl 000FF3  
                             Motor_Move@pDelta 00BF                                           start 14AA  
                           __size_of_LCD_Write 0022                                  __CFG_IESO$OFF 000000  
                              ___fldiv@new_exp 00CB                              Timer0_Init@DIVIDE 00D1  
                              ?_SPI_DisableISR 00BA                               Motor_Move@pMotor 00BD  
                          HMI_SetButton@pValue 00C0                                  Console_Init@x 00BC  
                                Console_Init@y 00BD                                 ?i2_Timer0_Stop 0001  
                            i2Byte_SetBit@pBit 0003                                   ___param_bank 000000  
                              __end_of_Font5x7 FEFF                           Set_Rotation@rotation 00C0  
                       __size_of_HMI_SetButton 0090                         __size_of_HMI_SetNumber 002A  
                                  ?_ISR_Enable 0001                             _irobot_init_song_0 6316  
                 __size_of_Console_ClearCursor 0040                               __end_of_LCD_Fill 5A26  
                             __end_of_LCD_Init 3076                                 ?_HMI_DIPSwitch 0001  
                                __CFG_PLLDIV$3 000000                               __end_of_LED_Init 585E  
                                 _BAUDCON1bits 000F7E                                  ??_Button_Init 00F5  
                      GetPortProperties@pInput 00BC                                  ??_Button_Poll 00D8  
                             __end_of_HMI_Init 21D8                                          l12201 4CFE  
                                        l12329 3C06                                          l12505 5A28  
                                        l14009 1E20                                          l12507 5A3A  
                                        l13403 3E20                                          l13171 52BA  
                                        l12195 4CEE                                          l12381 4314  
                                        l14045 5EB2                                          l13175 52C8  
                                        l12635 65E8                                          l13435 5024  
                                        l14333 2F94                                          l12727 55FA  
                                        l12735 5638                                          l14343 3038  
                                        l14361 4E18                                          l12809 33A8  
                                        l12729 560C                                          l13465 3242  
                                        l14249 248C                                          l14355 4E08  
                                        l13397 3E10                                          l14383 21AA  
                                        l13663 1020                                          l16401 0BE8  
                                        l13931 5A04                                          l16235 154E  
                                        l16253 15F0                               __end_of_HMI_Poll 5446  
                                        l13927 59F6                                          l16461 276A  
                                        l13967 2B4A                                          l16367 0A96  
                                        l16385 0B38                                          _I2C1T 0040  
                                        _I2C2T 03C8                                  ___fltol@sign1 00F7  
                                        ?_main 0001                                          ?_init 0001  
                              __end_of___fldiv 1058                                __end_of___awdiv 41B2  
                        irobot_rotate@isScript 00DC                                          ?_itos 00C6  
                                        STR_10 FF0D                                          STR_11 FFFB  
                                        STR_12 FFD8                                          STR_13 FFC3  
                                        STR_14 FFC3                                          STR_15 FFC3  
                                        STR_16 FFC3                                __end_of___flmul 04A6  
                              __end_of___fltol 36CE                                _Event_DIPSwitch 61B2  
                              __end_of___lldiv 426E                                          u10210 0FD0  
                                        u10220 0FFE                                          u11020 3608  
                                        u10310 00C8                                          u11120 3038  
                                        u10400 0422                                          u10320 02DC  
                                        u11025 35FC                                          u10410 0448  
                                        u10180 0F66                                          u11060 36A0  
                                        u10325 02D0                                          u11150 4E7A  
                                        u11080 2F24                                          u11240 5B80  
                                        u10610 5A20                                          u10370 03B8  
                                        u11250 5BA2                        __size_of_HMI_LeftSwitch 0018  
                                        u10700 1FA6                                ___awdiv@divisor 00BC  
                                        u10640 2BEA                                          u10490 232A  
                                        u10804 610A                                          u10805 6104  
                                        u10770 5C62                                          u10588 3DC8  
                                        u11718 40CE                                          u13430 1604  
                                        u11719 40E2                                          u11658 404A  
                                        u10970 24C8                                          u10890 455E  
                                        u11659 405E                                          u13348 5EFA  
                                        u13620 0B4C                                          u13349 5F10  
                                        u11678 4076                                          u10990 2546  
                                        u11679 408A                                          u13720 2782  
                                        u11698 40A2                                          u11699 40B6  
                                        u13790 28C0                                          _INDEX 008F  
                              __end_of___lwdiv 5200                                          _MASKS FD0F  
                              __end_of___lwmod 58C0                                          i2l430 46A8  
                                        i2l432 46CE                                          i2l433 46F8  
                                        i2l427 471E                                          i2l732 524C  
                                        i2l733 5246                                          i2l832 5E6A  
                                        i2l781 61A0                                ___awdiv@counter 00BE  
                          ?_irobot_init_song_0 0001                                          _PORTA 000F80  
                                        _PORTB 000F81                                          _PORTC 000F82  
                                        _PORTD 000F83                                          _PORTE 000F84  
                                        _PORTF 000F85                                          _PORTG 000F86  
                      __size_of_HMI_DownSwitch 0018                                          _TRISA 000F92  
                                        _TRISB 000F93                                          _TRISC 000F94  
                                        _TRISD 000F95                                          _TRISE 000F96  
                                        _TRISF 000F97                                          _TRISG 000F98  
                             ??i2_Byte_GetPair 000D                               ??i2_Byte_GetZone 0006  
                           Port_TogglePin@pPin 00D0                                __end_of_getMode 40F4  
                               __CFG_FCMEN$OFF 000000                                          _PortA 03B4  
                                        _PortB 03AA                                          _PortC 00A7  
                                        _PortD 009D                                          _PortE 0093  
                                        _PortF 03BE                                          _PortG 03A0  
                      __end_of_Port_SetPinType 2728                                _ADC_Initialised 003C  
                               ??_Byte_GetPair 00C6                          ??_irobot_led_power_on 00CE  
                               ?i2_Port_SetPin 0010                                    LED_Set@pLED 00CF  
                              __end_of_dpowers FD0F                                 ??_Byte_GetZone 00BF  
                    irobot_move@moveTurnRadius 00CC                                          _mode1 08C4  
                                        _mode2 38BE                                          _mode3 6554  
                                        _mode4 2728                                 Button_Poll@Pin 00DD  
                     __size_of_Set_Addr_Window 00AA                            __end_of_Console_Tab 4034  
                             __end_of_MXK_Init 2F04                       __size_of_sort_iRBumpDrop 008C  
                                 ?_eusart_init 0001                           i2Byte_GetPair@pInput 000A  
                                        _putch 65C8                               __end_of_SPI_Init 08C4  
                             __end_of_SPI_Send 5522                          __end_ofi2_MXK_Release 66AE  
                                        pclath 000FFA                                          tablat 000FF5  
                              __end_of_reverse 558E                             __size_of_MXK_Queue 000E  
                               ??_Byte_SetByte 00BD                              __end_of_ADC_Start 4F8E  
                               ??_Byte_SetPair 00C9                                 ??_Byte_SetQuad 00C9  
                                        plusw2 000FDB                                 ??_Byte_SetZone 00C0  
                                        status 000FD8                                          wtemp6 0052  
                       __size_of_ADC_Calibrate 0014                                _Configure_GPIOs 5446  
                              _findClosestWall 1412                           i2MXK_Queue@pCallback 0001  
                                  i2delay_us@u 0003                           ??_irobot_init_song_0 00BB  
                               _LCD_Word_Write 6372                            __size_of_LED_Toggle 0048  
                          __size_of_HMI_GetBar 0006                                  ?_HMI_UpSwitch 0001  
                                   _Event_NULL 1404                    __size_of_Port_CheckPairType 006A  
                                  mode1@moveto 03F6                            __size_of_HMI_SetBar 000A  
                                 ?_irobot_leds 00CA                                   ?_irobot_init 0001  
                              __initialization 448E                            __size_of_HMI_Render 003E  
                                 ?_irobot_move 00CA                            __end_of_Byte_GetBit 60F0  
                       irobot_leds@powerColour 00CB                                   __end_of_main 3A84  
                                 __end_of_init 47E0               irobot_query_and_update@packetIDs 00CF  
                                 __end_of_itos 3C34                           HMI_SetButton@reindex 00BC  
                                 SPI_Send9@dat 002D                            __end_of_Byte_SetBit 57FC  
                             __end_of_InitList FCE5                    __size_of_Port_CheckQuadType 005A  
                             __end_of_Mode_Set 65C8                                      ??_ADC_Off 00BA  
                      __end_of_update_distance 65A4                    __size_of_Port_CheckPortType 0048  
                                  HMI_Render@a 00C2                                         ??_main 03FC  
                                       ??_init 00F9                                         ??_itos 00CA  
                      _Console_MakeField$10974 00C8                                  __activetblptr 000003  
                            Port_SetPin@pInput 00C9                              __end_of_LCD_Reset 5B18  
                            Port_SetPin@pValue 00CC                                      ??_LED_Set 00CF  
                            _MXK_InitDIPSwitch 63CC                              GetPortPORT@pInput 00BC  
                       Port_CheckPairType@Pin1 00E4                         Port_CheckPairType@Pin2 00E5  
                            __end_of_LCD_Write 62D2                                    _GetPortPORT 492C  
                                 ?i2_MXK_Queue 0001                                    _GetPortTRIS 47E0  
                              ??_LCD_DrawField 00D6                     __end_of_PortProperty_Valid 510E  
                             __end_of_Port_Set 1412                                    ?i2_delay_us 0001  
             __size_of_Console_IncrementCursor 0066                            __end_of_Button_Init 3DDE  
                          __end_of_Button_Poll 31DC                              Word_GetPair@pPair 00C8  
                      LCD_FillRectangle@pPoint 00C5                             ?_MXK_InitDIPSwitch 0001  
                                _HMI_SetButton 4C4C                                      ??_SPI_DCS 00BC  
                                       ?_mode1 0001                                         ?_mode2 0001  
                                       ?_mode3 0001                                         ?_mode4 0001  
                           _angleToClosestWall 006B                                         _ADRESH 000FC4  
                                       _ADRESL 000FC3                                         _ADC_On 6696  
                                _HMI_SetNumber 6238                         Port_SetQuadType@Output 00F4  
                                       _ANCON0 000FC1                               ___awdiv@dividend 00BA  
                                       ?_putch 0001                               ??_Console_Render 00DD  
                                ToSegment@pCHR 00BA                               _Console_FormFeed 4CDC  
                       Port_SetQuadType@pInput 00F0                                         i2l1630 3734  
                                       i2l1631 3780                                         i2l1632 376C  
                                       i2l1730 6098                                         i2l1627 37BC  
                                       i2l1732 60B8                                         i2l1628 37B2  
                                       i2l1629 374A                                         i2l1590 145E  
                               __CFG_WDTEN$OFF 000000                            __size_of_ISR_Enable 000A  
                                       i2l9637 5E6A                                         i2l9639 5E7A  
                                       _RCREG1 000FAF                                         _RCSTA1 000FAC  
                       __end_of_LCD_Word_Write 6390                                 _Timer0_Restart 6634  
                                       _SPBRG1 000FB0                            ??_MXK_InitDIPSwitch 00F5  
                                       _TXREG1 000FAE                               __end_of___xxtofl 23A6  
                               i2_MXK_SwitchTo 6086                                         _TXSTA1 000FAD  
                              Byte_GetBit@pBit 00BC                                     _Reset_High 63AE  
                           Console_Render@temp 00DF                                 ??_HMI_UpSwitch 00C0  
                               OutSeg@pSegment 00BD                                ??i2_Timer0_Stop 0001  
                          Port_TogglePin@Value 00D1                         ADC_SetChannel@pChannel 00BB  
                             __end_of_delay_ms 5662                                   LED_Init@pLED 00E7  
                             __end_of_delay_us 5A78                                  ??_Timer0_Init 00CB  
                                ??_Timer2_Init 00CB                                  ??_Timer0_Stop 00BA  
                                   _Timer0_ISR 61E0                       __size_of_Console_NewLine 00A2  
                            Timer2_Init@DIVIDE 00D4                                 __CFG_XINST$OFF 000000  
                                       _TimerX 00F9                                         _OutSeg 5010  
                     __size_of_HMI_InitButtons 0006                                     _Motor_Init 3C34  
                   __end_of_load_iRScriptStack 55F8                                     _Motor_Move 6016  
                                       _iRWall 0035                                  ??_Motor_Speed 00D9  
                                   _Motor_Step 349C                            rx_assign@byteNumber 00BC  
                      __end_of_Event_DIPSwitch 61E0                                         ___wmul 6050  
                              ??_HMI_DIPSwitch 00C0                  load_iRScriptStack@bytesToLoad 00C8  
                                    ??___fldiv 00C2                                      ??___awdiv 00BE  
                               __CFG_STVREN$ON 000000                                         _change 00FF  
                                    ??___flmul 00D0                                         _lMotor 0081  
                                    ??___fltol 0100                                      ??___lldiv 00C2  
                                       _lQueue 0063                                     _TestButton 0396  
                                    ??___lwdiv 00BE                             __size_of_ToSegment 0284  
                                    ??___lwmod 00C5                       __end_of_Port_SetQuadType 1BA4  
                     i2Byte_GetZone@pChunkSize 0005                               __end_of_safeToGo 5BAE  
                                 HMI_GRender@a 002B                           __end_of_Console_Init 4E80  
                            GetPortTRIS@pInput 00BC                             __size_of_Reset_Low 001E  
                                       clear_0 44F6                                         clear_1 4508  
                                       clear_2 4514                                         clear_3 4520  
                                       clear_4 452C                               ___awdiv@quotient 00C0  
                   irobot_stop_motion@isScript 00D3                                  ?_eusart_getch 0001  
                                   Port_Init@i 0106                                     _iRDistance 007B  
                            __end_of_MXK_Queue 660E                     __end_ofHMI_SetButton@F7213 FD1C  
                                    ??_getMode 00DE                                     _iRBumpLeft 0089  
                                       _printf 23A6                                     _iRBumpDrop 0036  
                    __end_of_MXK_InitDIPSwitch 63EA                                  _ADC_Calibrate 657E  
                                   _iRDropLeft 0087                                 HMI_SetButton@v 00C1  
                                ?_eusart_putch 0001                         HMI_SetSegments@pString 00BB  
                                  _Console_Tab 3F72                            LCD_Word_Write@value 00BF  
                                 __pdataCOMRAM 0047                             __size_of_Port_Init 0192  
                                ??_Port_GetPin 00BD                       Port_CheckPortType@Output 00F3  
                                    ?_ADC_Init 00BE                             _twos_complement_of 5DA2  
                              ??i2_Port_SetPin 0014                                   __mediumconst FC32  
                  __end_ofTimer2_Init@PRESCALE FD1F                       Port_CheckPortType@pDrive 00F2  
                                       tblptrh 000FF7                                         tblptrl 000FF6  
                                       tblptru 000FF8                                   ?_MXK_Dequeue 0001  
                               ?_HMI_SetButton 0001                       Port_CheckPortType@pInput 00F0  
                                ??_Port_SetPin 00CD                                      ??_reverse 00BE  
                                   _StepRotate 0071                          Console_MakeField@Fill 0464  
                             ?_Port_SetPinType 00E0                                         putch@c 00CE  
                            Motor_Speed@pMotor 00D5                                 ?_HMI_SetNumber 00D0  
                               i2_Word_GetPair 6182                        __end_of_Configure_GPIOs 54B6  
                          irobot_leds@isScript 00CD                        __end_of_findClosestWall 16CA  
                             ??_MXK_TestButton 00C0                         __end_of_Timer0_Restart 6640  
                                Set_Rotation@m 00BF                                   ?_MXK_Release 0001  
                          ?_twos_complement_of 00BA                  __size_of_irobot_move_straight 0018  
                              __CFG_FOSC$HSPLL 000000                         __end_ofi2_MXK_SwitchTo 60BC  
                                 ___xxtofl@arg 00C4                                   i2delay_us@us 0001  
                                 ___xxtofl@exp 00C3                                   ___xxtofl@val 00BA  
                        _update_bump_and_cliff 5FDC                                ?_LCD_Word_Write 00BF  
                                   __accesstop 0060                        __end_of__initialization 4532  
                                    ?_LCD_Fill 00C3          irobot_query_and_update@packetVariable 00D3  
                                    ?_LCD_Init 0001                                  SPI_Init@pMode 00EC  
                                  _Byte_GetBit 60BC                                     _Stepstomin 006F  
                                    ?_LED_Init 0001                       __end_ofi2_Timer0_Restart 664C  
                                    ?_HMI_Init 0001                              ??_Set_Addr_Window 00C2  
                                    ?_HMI_Poll 0001               __size_of_irobot_query_and_update 0186  
                                ___rparam_used 000001                              ??_sort_iRBumpDrop 00BA  
                                   ___fltol@f1 00F3                                    _Byte_SetBit 5798  
                                __end_of_MASKS FD18                                 _PortA_Property FF0B  
                                  ?_Event_NULL 0001                                      LCD_Fill@i 00C5  
                                    LCD_Fill@j 00C6                            load_iRScriptStack@i 00C9  
                                    LCD_Init@i 00F1                                 __pcstackCOMRAM 0001  
                               _PortB_Property FF09                            __size_ofi2_delay_us 0040  
                                 __pidataBANK0 6682                                   __pidataBANK3 661C  
            irobot_move_straight@straightSpeed 00D3                            i2Byte_SetBit@pInput 0001  
                         __end_of_Byte_GetPair 6426                                Console_Render@x 00E4  
                              Console_Render@y 00E5                            i2Byte_SetBit@pValue 0004  
                                ?_Set_Rotation 0001                            Timer0_Init@PRESCALE FCE5  
                         __end_of_Byte_GetZone 4BB4                                  __end_of_mode1 0C98  
                                __end_of_mode2 39A4                                  __end_of_mode3 656A  
                                __end_of_mode4 28CE                           ??_twos_complement_of 00BC  
                            irobot_leds@LEDBit 00CA                                 _PortC_Property FF07  
                          __end_of_Timer0_Init 333C                                  __end_of_putch 65D6  
                               ??_eusart_getch 00BA                                      ?_MXK_Init 0001  
                          __end_of_Timer2_Init 349C                            __end_of_Timer0_Stop 6690  
                               ?_ADC_Calibrate 0001                                      ?_SPI_Init 00E7  
                             ?_update_distance 0001                                      ?_SPI_Send 00BA  
                               ??_eusart_putch 00BA                                    _Button_Init 3D0A  
                            Port_SetType@pType 00F6                                    _Button_Poll 3076  
                         __end_of_Byte_SetByte 6600                           __end_of_Byte_SetPair 62F4  
                               _HMI_LeftSwitch 6524                                 _PortD_Property FF05  
                         __end_of_Byte_SetQuad 6316                                   ??_LED_Toggle 00D2  
                                 ??_HMI_GetBar 00BA                     eusart_putch@eusartSendChar 00BA  
                         __end_of_Byte_SetZone 43DE                            __end_of_Motor_Speed 6238  
                               _HMI_DownSwitch 64DC                                  SPI_Send@pData 00BC  
                        __end_of_MXK_DIPSwitch 64C4                                   ??_HMI_SetBar 00BA  
                     __size_of_get_packet_size 0066                                   ??_HMI_Render 00C2  
                               _PortE_Property FF03                                     ??_ADC_Init 00C1  
                     __size_of_HMI_SetSegments 00BA                         __end_ofi2_Word_GetPair 61B2  
                      irobot_rotate@angleTotal 00DD                                 _PortF_Property FF01  
                      Port_CheckQuadType@Pair1 00ED                        Port_CheckQuadType@Pair2 00EE  
                     MXK_BlockSwitchTo@pModule 00C1                                        ??_mode1 03F4  
                                      ??_mode2 00E6                                        ??_mode3 00E1  
                                      ??_mode4 03F4                                        ?_ADC_On 0001  
                            _Console_Backspace 58C0                                ?_Timer0_Restart 0001  
                                      ??_putch 00CE                       __size_of_HMI_RightSwitch 0018  
                          _Console_ClearCursor 5E28                              __end_of_ToSegment 194E  
                               _PortG_Property FEFF                                     __pbssBANK0 0060  
                                   __pbssBANK3 0300                                     __pbssBANK4 0400  
                          __end_of_Port_GetPin 5DA2                             _irobot_stop_motion 5CD0  
                      Port_CheckQuadType@pQuad 00EB                                reverse@iterator 00BF  
                             ??_SPI_DisableISR 00BC                                ?i2_MXK_SwitchTo 0001  
                            ?_irobot_song_play 0001                             ?_Console_Backspace 0001  
                            __end_of_Reset_Low 63AE                      __size_of_Event_TestButton 003C  
                      __size_of_Port_TogglePin 0030                                     ??_LCD_Fill 00C5  
                                   ??_LCD_Init 00EF                           __size_of_eusart_init 001E  
                          __end_of_Port_SetPin 3F72                         __end_of_PortA_Property FF0D  
             irobot_led_power_on@powerOnColour 00CE                                      ?_Mode_Set 0001  
                           Byte_SetByte@pInput 00BA                                     ??_LED_Init 00E7  
                     ADC_ClockDivision@pDivide 00BA                             Byte_SetByte@pValue 00BC  
                                ?_ISR_Function 0001                                    ?_Reset_High 0001  
                           _ADC_ConversionTime 5C40                                  ?_Timer0_Clear 0001  
                                   ??_HMI_Init 00F5                             ??_irobot_song_play 00BB  
                                   ??_HMI_Poll 00DE                                  ?_Timer2_Clear 0001  
                      Port_CheckPairType@Props 00E7                         __end_of_PortB_Property FF0B  
                                ?_Timer0_Start 00BA                            ?_irobot_stop_motion 0001  
                            __end_of_Port_Init 2BFE                                    ?_Timer0_ISR 0001  
                      Port_CheckPairType@pPair 00E2                             __end_of_LED_Toggle 5CD0  
                           __end_of_HMI_GetBar 66A2                       LCD_FillRectangle@pColour 00C3  
                                   _angleTotal 0075                            ??_Console_Backspace 00BC  
                            Set_Addr_Window@xe 00C0                              Set_Addr_Window@ye 00C1  
                            Set_Addr_Window@xs 00C2                              Set_Addr_Window@ys 00BF  
                                      ?_OutSeg 00BD                                    ?_Motor_Init 00E7  
                           Byte_SetPair@pInput 00C5                                    ?_Motor_Move 00BD  
                                  ?_Motor_Step 0001                             Byte_SetPair@pValue 00C8  
                           __end_of_HMI_SetBar 666A                         __end_of_PortC_Property FF09  
                           Word_GetPair@pInput 00C6                             __end_of_HMI_Render 5EE6  
                               ??_Set_Rotation 00BF                                      ?_Port_Set 00C9  
                          ?_ADC_ConversionTime 0001                                        ?___wmul 00BA  
                             ?_Event_DIPSwitch 0001                              Port_GetPin@Output 00BF  
                                 ??_ISR_Enable 00BA                   __size_of_Console_ResetCursor 001E  
                         __size_of_irobot_leds 0058                           __size_of_irobot_init 000E  
                         ?_Console_ClearCursor 0001                           __size_of_irobot_move 00B0  
                       __end_of_HMI_LeftSwitch 653C                         __end_of_PortD_Property FF07  
                                      _ADC_AN0 00B1                                        _ADC_AN1 03DF  
                                      _ADC_AN2 03DA                                        _ADC_AN3 03D5  
                                   ??_MXK_Init 00F9                              Port_GetPin@pInput 00BA  
                            _Console_MakeField 3DDE                                        _ADC_Off 667A  
                            ??_Console_NewLine 00BA                       ADC_ClockDivision@unfound 00BC  
                       __end_of_HMI_DownSwitch 64F4                                     ??_SPI_Init 00ED  
                       Event_TestButton@pState 00D3                                     ??_SPI_Send 00BD  
                                      ?_printf 00CF                              ??_HMI_InitButtons 00BA  
                   __size_of_MXK_InitDIPSwitch 001E                       __size_of_move_and_rotate 0082  
                       __end_of_PortE_Property FF05                            Console_Render@F6956 03E8  
                           ?_Console_MakeField 00BF                                        _COUNTER 0029  
                              ??_HMI_SetButton 00BA                           __end_of_HMI_UpSwitch 650C  
                         ??_irobot_stop_motion 00D3                                        _LED_Set 5A78  
                      _Console_IncrementCursor 5732                                      ?___xxtofl 00BA  
                       __end_of_PortF_Property FF03                                    _gBackcolour 0085  
                              ??_HMI_SetNumber 00D2                                      _I2C1_Done 0337  
                              ?i2_Word_GetPair 000D                                      _I2C2_Done 0334  
                                    _I2C1_More 0331                                      _I2C2_More 032E  
                                    ?_delay_ms 00BA                      __end_of_Console_Backspace 591C  
                                    ?_delay_us 00BA                            __size_of_Event_NULL 0002  
                   __end_of_MXK_InitTestButton 6408                                        _SSP1ADD 000FC8  
                                      _SSP1BUF 000FC9                                        _SSP2BUF 000F6F  
                           __size_of_rx_assign 00F0                           ??_ADC_ConversionTime 00BA  
                       __end_of_PortG_Property FF01                            ??_Console_MakeField 00C1  
                      __size_of_ADC_SetChannel 001C                                        _IRValue 006D  
                                      _SPI_DCS 6122                           __size_ofi2_MXK_Queue 000E  
                                ??_ADC_SetupIO 00BA                               ?_Configure_GPIOs 0001  
                             ?_findClosestWall 0001                                __size_of_ADC_On 0006  
                       ?_update_bump_and_cliff 0001                         __size_of_irobot_rotate 00AA  
                             ADC_Init@pChannel 00C0                           i2Byte_GetZone@Offset 0008  
                                ??_ADC_Voltage 00E5                             __end_of_ISR_Enable 6660  
                               ??_ISR_Function 0017                           i2Byte_GetZone@Output 0009  
                               ??_Timer0_Clear 00BA                              Event_TestButton@j 008B  
                                    ?_safeToGo 0001                                     ??_Mode_Set 00BA  
                               ??_Timer2_Clear 00BA                                        _Font5x7 FD1F  
                         i2Byte_GetZone@pChunk 0004                       ADC_ConversionTime@pCount 00BB  
                                      _MinDist 00FB                           i2Byte_GetZone@pInput 0001  
                               ??_Timer0_Start 00BD                           SPI_DisableISR@pInput 00BA  
                                ?_Port_GetQuad 00BA                                Byte_SetBit@pBit 00BC  
                         Port_TogglePin@pInput 00CE                          __end_ofi2_Byte_SetBit 5B64  
                                    _ADC_Start 4F0A                                        __Hparam 0000  
                            Port_GetQuad@pQuad 00BC                                    _Timer0_Init 31DC  
                                  _Timer2_Init 333C                                        __Lparam 0000  
                                  _Timer0_Stop 668A                          __size_of_Console_Init 008A  
                                      OutSeg@a 003D                __end_ofPortProperty_Valid@F6830 FD05  
                                      _iRAngle 0079                                  LCD_Write@mode 00BD  
                              __size_of_OutSeg 0082                                     ??_Port_Set 00CC  
                    __end_of_Console_MakeField 3EAE                              _Console_PrintChar 28CE  
                                  _Motor_Speed 620E                                        _Stepper 03CF  
                                ?_Port_SetType 00F4                                        _gCursor 0047  
                                      ___fldiv 0C98                                        ___awdiv 40F4  
                        ??_Console_ClearCursor 00BA                                        ___flmul 0000  
                                      ___fltol 35C2                                        _lBuffer 04AA  
                                      ___lldiv 41B2                                __size_of___wmul 0036  
                              ??_ADC_Calibrate 00BA                                        ___lwdiv 5188  
                                      ___lwmod 585E                                ?_HMI_LeftSwitch 0001  
                     __end_of_Console_FormFeed 4D6A                             ?_Console_PrintChar 0001  
                                      __pcinit 448E                                ?_HMI_DownSwitch 0001  
                                      __ramtop 1000                                        _getMode 4034  
                                      __ptext0 39A4                                        __ptext1 2728  
                                      __ptext2 1412                                        __ptext3 6554  
                                      __ptext4 4F8E                                        __ptext5 453C  
                                      __ptext6 38BE                                        __ptext7 6494  
                                      __ptext8 08C4                                        __ptext9 5B64  
                              __size_of_printf 01C2                                      _T0CONbits 000FD5  
                  __end_of_irobot_led_power_on 6442                              i2MXK_SwitchTo@CUR 0007  
                                      _dpowers FD05                                      _T2CONbits 000FCA  
                                LED_Set@pValue 00CE                            __size_of_Reset_High 001E  
                        Event_DIPSwitch@pState 00D3                                     ??___xxtofl 00BE  
                                 ?_GetPortPORT 00BA                                   ?_GetPortTRIS 00BA  
                          ??_Console_PrintChar 00CA                                    _Port_GetPin 5D5C  
                            __CFG_MSSPMSK$MSK5 000000                            LCD_DrawRectangle@p2 00B6  
                          LCD_DrawRectangle@p4 03E4                                   ??i2_delay_us 0003  
                                   ??_delay_ms 00BC                                     ??_delay_us 00BC  
                                      _reverse 5522                                      _DIPSwitch 038C  
                          __size_of_Timer0_ISR 002E                                    _Port_SetPin 3EAE  
                                  _iRBumpRight 008A                                 LCD_DrawField@i 00DC  
                                    _LCD_Reset 5AC8                            __size_of_Motor_Init 00D6  
                          __size_of_Motor_Move 003A                            __size_of_Motor_Step 0126  
                                    _LCD_Write 62B0                                    _iRDropRight 0088  
                         __size_of_MXK_Dequeue 003E                                     delay_ms@ms 00BA  
                         end_of_initialization 4532                            ADC_SetupIO@pChannel 00BC  
                            ??_get_packet_size 00BA  irobot_query_and_update@numberOfPacketRequests 00D2  
                                   delay_us@us 00BA                              ??_HMI_SetSegments 00BD  
                      Console_PrintChar@pInput 00CD                                   _Console_Init 4DF6  
                         __end_of_eusart_getch 6672                        _irobot_query_and_update 2BFE  
                                   ??_safeToGo 00DE                           __size_of_MXK_Release 001C  
                   __end_of_Port_CheckPairType 56CC                           __end_of_eusart_putch 65F2  
                                      itos@Out 00CE                                 ??_Port_GetQuad 00BD  
                           _PortProperty_Valid 5092                             Byte_SetQuad@pInput 00C5  
                                    i2u1347_48 61F8                             SPI_MinSpeed@pInput 00C9  
                           Byte_SetQuad@pValue 00C8                            __end_of_ADC_SetupIO 6122  
                        __size_of_Byte_GetPair 001E                    __size_of_irobot_init_song_0 0020  
                              ___lldiv@divisor 00BE                          __size_of_Byte_GetZone 009C  
                                   ?_ADC_Start 00BC                              ??_HMI_RightSwitch 00C0  
                              ___lldiv@counter 00C6                      __end_of_Console_PrintChar 2A6C  
                          __end_of_ADC_Voltage 3B5C                                 ??_Port_SetType 00F7  
                   __end_of_Port_CheckQuadType 5976                                        printf@c 00E2  
                                      printf@f 00CF                                 Port_Init@pPort 0103  
                                      postdec1 000FE5                                        postdec2 000FDD  
                        __size_of_Byte_SetByte 000E                          __size_of_Byte_SetPair 0022  
                       Console_MakeField@Index 00C3                              __end_of_rx_assign 38BE  
                                      postinc0 000FEE                                        postinc2 000FDE  
                          ?_PortProperty_Valid 00C9                          __size_of_Byte_SetQuad 0022  
                   __end_of_Port_CheckPortType 5C40                          __size_of_Byte_SetZone 00B6  
                           __end_ofi2_delay_us 5EA8                             Button_Init@pInitIO 0104  
                                _irobot_rotate 453C                          Timer0_Init@pFrequency 00C7  
                            ?_Port_SetQuadType 00F0                                    _gForecolour 00FD  
                    ??_Console_IncrementCursor 00BE                         __size_ofi2_MXK_Release 0006  
                                    _PORTFbits 000F85                             ??_Port_SetQuadType 00F4  
                                 ?_Console_Tab 0001                               Byte_GetZone@MASK 00C0  
                        Console_Render@lCursor 00E0                             _load_iRScriptStack 558E  
                                    _MXK_Queue 6600                               __CFG_CPUDIV$OSC1 000000  
                                ___xxtofl@sign 00C2                               Byte_GetZone@pMax 00BC  
                   __size_of_Console_Backspace 005C                                      _TRISCbits 000F94  
                   load_iRScriptStack@loadByte 00C6                                _Set_Addr_Window 45E6  
                               SPI_Init@pClock 00E7                               ??_LCD_Word_Write 00C1  
                              _sort_iRBumpDrop 4D6A                              ??_move_and_rotate 00E1  
                                  ___fldiv@grs 00CD                                    ___fldiv@rem 00C7  
                        __end_of_LCD_DrawField 4A76                                 Port_Set@pInput 00C9  
                               SPI_Init@pInput 00ED                           ??_PortProperty_Valid 00CD  
                            __size_of_ADC_Init 007A                                 Port_Set@pValue 00CB  
                                   ?_LCD_Reset 0001                           __end_of_Set_Rotation 4C4C  
                                   ?_LCD_Write 00BD                                   _Byte_GetPair 6408  
                           HMI_SetButton@F7213 FD18                            ?_load_iRScriptStack 00BA  
                                 _Byte_GetZone 4B18                                  ?_MXK_SwitchTo 0001  
                            LCD_DrawField@xmax 00DA                              LCD_DrawField@ymax 00DB  
                               __end_of_ADC_On 669C                                 _Port_TogglePin 6152  
                             _Event_TestButton 5FA0                                    ___flmul@grs 00D6  
                         Port_SetPinType@Props 00E5                                   ?_Byte_GetBit 00BA  
                      __size_ofi2_Byte_GetPair 001A                                   _Byte_SetByte 65F2  
                                 _Byte_SetPair 62D2                                ADC_SetupIO@MASK 00BD  
                                 _Byte_SetQuad 62F4                        __size_ofi2_Byte_GetZone 0076  
                                 _Byte_SetZone 4328                           Port_SetPinType@pType 00E3  
                            ?i2_Timer0_Restart 0001                                   ?_Byte_SetBit 00BA  
                                ?_SPI_MaxSpeed 00C9                              __size_of_LCD_Fill 0058  
                                 ??_Event_NULL 00BA                              __size_of_LCD_Init 0172  
                            __size_of_LED_Init 0062                                  ?_SPI_MinSpeed 00C9  
                        __end_ofi2_Timer0_Stop 66A8                             ??i2_Timer0_Restart 0001  
                            __size_of_HMI_Init 01FA                              __size_of_HMI_Poll 0074  
                                ?_update_angle 0001                                  ?i2_Motor_Step 0001  
                   __size_of_Console_MakeField 00D0                                 ?_irobot_rotate 00D7  
                               __end_of_OutSeg 5092                           ??_load_iRScriptStack 00C4  
                 __end_of_irobot_move_straight 64AC                          __size_of_HMI_UpSwitch 0018  
                               __end_of___wmul 6086                          __end_of_HMI_DIPSwitch 64DC  
                                __pidataCOMRAM 664C                                   ?_Button_Init 0100  
                                 ?_Button_Poll 00D5                                      _Bus_State 004B  
                          i2Byte_GetPair@pPair 000C                           __end_of_ISR_Function 14AA  
                         __end_of_Timer0_Clear 6634                              __size_of_MXK_Init 0180  
                         __end_of_Timer2_Clear 667A                                 __end_of_printf 2568  
                            __size_of_SPI_Init 041E                        get_packet_size@packetID 00BA  
                            __size_of_SPI_Send 006C                                  ?_Word_GetPair 00C6  
                             ??_Timer0_Restart 00BA                           __end_of_Timer0_Start 62B0  
                           Port_SetType@Output 0100                            start_initialization 448E  
                                   ?_MXK_Queue 00BA                       PortProperty_Valid@Errors 00CF  
                             ??i2_MXK_SwitchTo 0007                              _LCD_FillRectangle 5276  
                           Port_SetType@pInput 00F4                                 _ADC_SetChannel 645E  
                                   HMI_Init@in 00F5                            HMI_SetNumber@pInput 00D0  
                        __end_ofi2_Port_SetPin 473A                             __end_of_Event_NULL 1406  
                       rx_assign@packetIDValue 00BB                         __end_of_Port_TogglePin 6182  
                                ?_Word_SetPair 00C9                              Byte_SetBit@pInput 00BA  
                                     ??_ADC_On 00BA                                 ??_MXK_SwitchTo 00C0  
                            Byte_SetBit@pValue 00BD                             ?_LCD_FillRectangle 00C3  
                    ??_irobot_query_and_update 00CA                            _Console_ResetCursor 6336  
                  PortProperty_Valid@pPinDrive 00CB                                    _ADC_SetupIO 60F0  
                         MXK_BlockSwitchTo@CUR 00C0                       PortProperty_Valid@pInput 00C9  
                                i2_MXK_Release 66A8                                    _ADC_Voltage 3A84  
                       LCD_FillRectangle@pSize 00C9                                 SPI_Send@pInput 00BA  
                                 ??_Reset_High 00CE                       __size_of_Port_SetPinType 01C0  
                               ??_SPI_MaxSpeed 00CB                          Port_SetQuadType@pQuad 00F2  
                                    _ToSegment 16CA                            ??_LCD_FillRectangle 00CD  
                        Port_SetQuadType@pType 00F3                                _Console_NewLine 4A76  
                               ??_SPI_MinSpeed 00CB                                    ??_ADC_Start 00BE  
                                 _HMI_UpSwitch 64F4                                      _Reset_Low 6390  
                                 ??_Timer0_ISR 0017                                _HMI_InitButtons 6690  
                            __size_of_Mode_Set 0012                     __size_of_Console_PrintChar 019E  
                               ??_update_angle 00D7                                 ADC_Init@pInput 00BE  
                                    _gCharSize 03F0                               Timer2_Init@INDEX 008D  
                                    OutSeg@cur 003F                                 ??i2_Motor_Step 0015  
                                 ??_Motor_Init 00EB                                       ??_OutSeg 00BE  
                                    OutSeg@out 00C1                        __size_of_Console_Render 0210  
                                 ??_Motor_Move 00C1                                   ??_Motor_Step 00CE  
                                    _iRAngleSS 031E                                      _iRCliffFL 0033  
                                    _iRCliffFR 0032                             Byte_SetZone@Offset 00C3  
                                     ??___wmul 00BE                           ?_Console_ResetCursor 0001  
                                    _Port_Init 2A6C                                    __pdataBANK0 00F9  
                                  __pdataBANK3 03E8                      __size_of_irobot_song_play 0014  
                  __size_of_twos_complement_of 0044                              __size_of_Port_Set 03BA  
                           Byte_SetZone@pChunk 00BD                                       ?_ADC_Off 0001  
                             ??i2_Word_GetPair 0010                             Byte_SetZone@pInput 00BA  
                           Byte_SetZone@pValue 00BF                                  Mode_Set@pMode 00BA  
                                     ??_printf 00DB                        __end_of_Set_Addr_Window 4690  
                     Port_CheckQuadType@Output 00EF                        __end_of_sort_iRBumpDrop 4DF6  
                                    _gLineSize 03EC                       Port_CheckQuadType@pDrive 00EC  
                               ??_Word_GetPair 00C9                       Port_CheckQuadType@pInput 00E9  
                         __end_of_Port_GetQuad 5BF8                                      ___fldiv@a 00BE  
                                    ___fldiv@b 00BA                      __end_of_LCD_FillRectangle 52EA  
                                  __pbssBIGRAM 04AA                         __end_of_ADC_SetChannel 647A  
                                     ?_LED_Set 00CE                                      ___flmul@a 00CC  
                                    ___flmul@b 00C8                                    __pbssCOMRAM 0029  
                              ADC_Start@pInput 00BC                             __end_of_Reset_High 63CC  
                                __pcstackBANK0 00BA                                  __pcstackBANK1 0100  
                                __pcstackBANK2 0200                                  __pcstackBANK3 03F4  
                      ??_update_bump_and_cliff 00D7                                     itos@Length 00CC  
                        __size_of_eusart_getch 0008                                 ??_Word_SetPair 00CD  
                     __size_of_update_distance 0012                              __size_of___xxtofl 01CE  
                           __end_of_Timer0_ISR 620E                           __size_of_GetPortPORT 00A6  
                                  ??_LCD_Reset 00D3                           __size_of_GetPortTRIS 00A6  
                         __end_of_Port_SetType 1DCE                                       ?_SPI_DCS 00BA  
                        __size_of_eusart_putch 000E                                ?_Port_TogglePin 00CE  
                                ??_eusart_init 00BA                                    ??_LCD_Write 00BE  
                            __size_of_delay_ms 006A                              __size_of_delay_us 0052  
                           __end_of_Motor_Init 3D0A                            __CFG_CCP2MX$DEFAULT 000000  
                           __end_of_Motor_Move 6050                             __end_of_Motor_Step 35C2  
                        Timer2_Init@pFrequency 00C7                                 ?i2_MXK_Release 0001  
                     Port_CheckPairType@Output 00E6              twos_complement_of@complementValue 00BA  
                                   ?_ToSegment 0001                       Port_CheckPairType@pDrive 00E3  
                     Port_CheckPairType@pInput 00E0                                 reverse@tempVar 00BE  
                           _MXK_InitTestButton 63EA                                     ?_Reset_Low 0001  
                            __size_of_safeToGo 004A                                   ?_Timer0_Init 00C7  
                       __size_of_MXK_DIPSwitch 0018                                   ?_Timer2_Init 00C7  
                             ??_HMI_LeftSwitch 00C0                                   ?_Timer0_Stop 0001  
                             ___lwdiv@dividend 00BA                                  ??_irobot_leds 00CD  
                                ??_irobot_init 00BB                                ??_irobot_rotate 00DB  
                                ??_irobot_move 00CE                                  _lStepFunction 0066  
                      __size_of_MXK_TestButton 0018                              Byte_SetPair@pPair 00C7  
                             ??_HMI_DownSwitch 00C0                                      __pintcode 1408  
                                __pmediumconst FC32                                   ?_Motor_Speed 00D5  
                        ??_Console_ResetCursor 00BA                                       ?___fldiv 00BA  
                                     ?___awdiv 00BA                                      __ptext100 6672  
                                    __ptext101 6262                                      __ptext110 62D2  
                                    __ptext102 6122                                      __ptext111 591C  
                                    __ptext103 3D0A                                      __ptext120 645E  
                                    __ptext112 5662                                      __ptext104 63CC  
                                    __ptext121 5C40                                      __ptext113 5092  
                                    __ptext105 6690                                      __ptext130 64C4  
                                    __ptext122 4E80                                      __ptext114 62F4  
                                    __ptext106 63EA                                      __ptext131 64DC  
                                    __ptext123 657E                                      __ptext115 4328  
                                    __ptext107 2568                                      __ptext140 6238  
                                    __ptext132 64F4                                      __ptext124 6696  
                                    __ptext116 4DF6                                      __ptext108 194E  
                                    __ptext141 3B5C                                      __ptext133 650C  
                                    __ptext125 667A                                      __ptext117 4F0A  
                                    __ptext109 5D16                                      __ptext150 3EAE  
                                    __ptext142 5522                                      __ptext134 6524  
                                    __ptext126 4034                                      __ptext118 510E  
                                    __ptext151 5F62                                      __ptext143 585E  
                                    __ptext135 653C                                      __ptext127 53D2  
                                    __ptext119 60F0                                      __ptext160 36CE  
                                    __ptext152 6408                                      __ptext144 5188  
                                    __ptext136 5BAE                                      __ptext128 3076  
                                    __ptext161 66A2                                      __ptext153 4B18  
                                    __ptext145 426E                                      __ptext137 61B2  
                                    __ptext129 64AC                                      __ptext170 66A8  
                                    __ptext162 6640                                      __ptext154 5798  
                                    __ptext146 16CA                                      __ptext138 1404  
                                    __ptext171 660E                                      __ptext163 4690  
                                    __ptext155 5D5C                                      __ptext147 4C4C  
                                    __ptext139 5FA0                __end_of_irobot_query_and_update 2D84  
                                    __ptext172 0000                                      __ptext164 6182  
                                    __ptext156 6660                                      __ptext148 5C88  
                                    __ptext165 647A                                      __ptext157 669C  
                                    __ptext149 6152                                      __ptext166 5200  
                                    _pShiftVal 007D                                      __ptext167 5B18  
                                    __ptext159 61E0                                      __ptext168 6086  
                                    __ptext169 5E68                                       ?___flmul 00C8  
                                     ?___fltol 00F3                                       ?___lldiv 00BA  
                                   ?_Port_Init 0101                           Timer0_Init@pCPUClock 00CD  
                                     ?___lwdiv 00BA                                       ?___lwmod 00C1  
                          ?_MXK_InitTestButton 0001                              ?_Console_FormFeed 0001  
                            _GetPortProperties 4886                                       ?_getMode 0001  
                                 _eusart_getch 666A                    __end_ofTimer0_Init@PRESCALE FCF5  
                              _get_packet_size 56CC                                   _eusart_putch 65E4  
                           ??_Console_FormFeed 00BA                                _HMI_SetSegments 426E  
                           ?_GetPortProperties 00BA                               Event_NULL@pState 0001  
                     __size_of_Event_DIPSwitch 002E                          __size_of_Set_Rotation 0098  
                              ?_ADC_SetChannel 0001                                  ??i2_MXK_Queue 0004  
                                  ??_MXK_Queue 00BD                    __size_of_irobot_stop_motion 0046  
                                 ?_Port_GetPin 00BA                                       _ADC_Init 510E  
                 irobot_rotate@rotateDirection 00DF                          __end_of_HMI_SetButton 4CDC  
                         __size_of_Console_Tab 00C2                                       ?_reverse 00BA  
                         irobot_move@moveSpeed 00CA                                   ?_Port_SetPin 00C9  
                        __end_of_HMI_SetNumber 6262                               ___lwdiv@quotient 00BF  
                              _HMI_RightSwitch 650C                    __size_of_ADC_ConversionTime 0048  
                               __size_of_mode1 03D4                                 __size_of_mode2 00E6  
                               __size_of_mode3 0016                                 __size_of_mode4 01A6  
                          ??_GetPortProperties 00BC                        __end_of_Console_NewLine 4B18  
                         ??_MXK_InitTestButton 00E7                             Byte_GetPair@pInput 00C3  
                               __size_of_putch 000E                        __end_of_HMI_InitButtons 6696  
                            i2Port_SetPin@Type 0014                           _irobot_move_straight 6494  
                            i2Port_SetPin@pPin 0012                                 i2_Byte_GetPair 647A  
                                     _LCD_Fill 59CE                                       _LCD_Init 2F04  
                               ___wmul@product 00BE                                       _HMIBoard 033C  
                               i2_Byte_GetZone 5200                                       _LED_Init 57FC  
                                    delay_ms@u 00BC                             Button_Poll@pButton 00D5  
                                    delay_us@u 00BC                                       _HMI_Init 1FDE  
                                     _HMI_Poll 53D2                             MXK_Queue@pCallback 00BA  
                                     _IPR1bits 000F9F                                       _IPR3bits 000FA5  
                                     _PIE1bits 000F9D                            __end_of_eusart_init 6372  
                                     _PIE3bits 000FA3                    __end_of_Console_ClearCursor 5E68  
                     __size_of_Configure_GPIOs 0070                       __size_of_findClosestWall 02B8  
                         __size_of_Byte_GetBit 0034                              Byte_SetQuad@pQuad 00C7  
                                     i2u505_40 5222                                       _PIR1bits 000F9E  
                                     i2u505_47 5218                                       i2u507_40 526A  
                                     i2u507_45 5266                                       _PIR3bits 000FA4  
                                     i2u630_44 5B52                                       i2u630_45 5B4E  
                                     i2u633_40 5E96                                       i2u629_44 5B2C  
                                     i2u629_45 5B28                                       i2u726_40 3712  
                                     i2u727_40 3726                                       i2u728_40 375E  
                         __size_of_Byte_SetBit 0064                                       _RCONbits 000FD0  
                         i2Word_GetPair@pInput 000D                                    _mode1$15599 03F8  
                             __CFG_WDTPS$32768 000000                     irobot_song_play@songNumber 00BB  
                             HMI_SetBar@pValue 00BA                              Button_Init@pInput 0100  
                      __size_of_SPI_DisableISR 0028                                       _SSP1CON1 000FC6  
                            ??_Port_SetPinType 00E4                                       _SSP1CON2 000FC5  
                                     _SSP2CON1 000F6C                                       _SSP2CON2 000F6B  
                        __size_of_ISR_Function 00A2                          __size_of_Timer0_Clear 000C  
                                     _SSP1STAT 000FC7                      __end_of_GetPortProperties 492C  
                                     _SSP2STAT 000F6D                                   _Set_Rotation 4BB4  
                        __size_of_Timer2_Clear 0008                           __end_of_MXK_SwitchTo 5E28  
                           _Port_CheckPairType 5662                                       _MXK_Init 2D84  
                        __size_of_Timer0_Start 0026                                _move_and_rotate 4F8E  
                              MXK_SwitchTo@CUR 00C0                          __end_of_ADC_Calibrate 6592  
                          __end_of_irobot_leds 59CE                                       _SPI_Init 04A6  
                          __end_of_irobot_init 65E4                       __end_of_Event_TestButton 5FDC  
                                     _SPI_Send 54B6                            __end_of_irobot_move 448E  
                                    _rx_assign 37CE                                     _ADCON0bits 000FC2  
                             __size_of_ADC_Off 0008                                     _ADCON1bits 000FC1  
                             ?_Set_Addr_Window 00BF                              ___wmul@multiplier 00BA  
                             ?_sort_iRBumpDrop 0001                              Byte_GetBit@Output 00BE  
                                   printf@flag 00DD                           Timer2_Init@pCPUClock 00D0  
                   __size_of_LCD_FillRectangle 0074                           __size_of_Button_Init 00D4  
                         __end_of_SPI_MaxSpeed 535E                                     printf@prec 00DC  
                        Motor_Speed@pFrequency 00D7                              Byte_GetBit@pInput 00BA  
                          Port_SetPinType@pPin 00E2                           __size_of_Button_Poll 0166  
                                _MXK_DIPSwitch 64AC                             _Port_CheckQuadType 591C  
                          ?_Port_CheckPairType 00E0                           __end_of_SPI_MinSpeed 53D2  
                                ??_MXK_Dequeue 00D0                               __size_of_LED_Set 0050  
                       __size_ofi2_Byte_SetBit 004C                             _Port_CheckPortType 5BF8  
                         __end_of_update_angle 65B6                          Button_Poll@pIncrement 00D7  
                      PortProperty_Valid@F6830 FCF5                           __end_ofi2_Motor_Step 37CE  
                              ??i2_MXK_Release 0001                   __size_of_irobot_led_power_on 001C  
                                    copy_data0 44A2                                      copy_data1 44C2  
                                    copy_data2 44E2                                  ??_MXK_Release 00BA  
                       __end_ofi2_Byte_GetPair 6494                      __size_of_Port_SetQuadType 0256  
                             __size_of_SPI_DCS 0030                            ?_Port_CheckQuadType 00E9  
                        ?_irobot_move_straight 00D3                         __end_ofi2_Byte_GetZone 5276  
                          __end_ofi2_MXK_Queue 661C                                      mode2@dist 00E6  
                          ?_Port_CheckPortType 00F0                                itos@destination 00C8  
                                     _InitList FC33                     __end_of_irobot_init_song_0 6336  
                         _Motor_Step$intlevel0 34A2                                       _Mode_Set 65B6  
                           Port_GetQuad@Output 00BF                              ??_update_distance 00D7  
                                  ??_ToSegment 00BA                                   _ISR_Function 1408  
                                 _Timer0_Clear 6628                             Port_GetQuad@pInput 00BA  
                                 _Timer2_Clear 6672                           __end_of_Word_GetPair 5FA0  
                                     _lCBuffer 0300                           ??_Port_CheckPairType 00E4  
                                  ??_Reset_Low 00CE                                       __Hrparam 0000  
                                 _Timer0_Start 628A                                   OutSeg@pInput 00C0  
                               _Console_Render 1DCE                                       __Lrparam 0000  
                              Timer2_Init@RDIV 00CC                                       _iRCliffL 0034  
                                     _iRCliffR 0031                                 LCD_Write@value 00BE  
                                     _Port_Set 1058                                   OutSeg@segset 003E  
                                    rand@screw 003B                           __end_of_Word_SetPair 5D5C  
                      __end_of_get_packet_size 5732                                    ??_Port_Init 0104  
                      __end_of_HMI_SetSegments 4328                           ??_Port_CheckQuadType 00ED  
                             __size_of___fldiv 03C0                               _irobot_song_play 656A  
                        __size_of_Port_GetQuad 004A                               __size_of___awdiv 00BE  
                             __size_of___flmul 04A6                               __size_of___fltol 010C  
                             __size_of___lldiv 00BC                              _MXK_BlockSwitchTo 5F24  
                             __size_of___lwdiv 0078                           ??_Port_CheckPortType 00F3  
                             __size_of___lwmod 0062                                       _lBufferX 0091  
                                     _lBufferY 0090                            Timer2_Init@PRESCALE FD1C  
                        _findClosestWall$15598 0105                                     ?_rx_assign 00BB  
                              LCD_Fill@pColour 00C3                             ?_MXK_BlockSwitchTo 0001  
                    __size_ofi2_Timer0_Restart 000C                                       _lCurrent 0083  
                             __size_of_getMode 00C0                        __end_of_HMI_RightSwitch 6524  
                       Byte_GetZone@pChunkSize 00BE                                 ?_MXK_DIPSwitch 0001  
                       Byte_SetZone@pChunkSize 00BE                          __size_of_Port_SetType 022A  
                                reverse@length 00BC                                      itos@input 00C6  
                        i2MXK_SwitchTo@pModule 0008                                       ___xxtofl 21D8  
                          irobot_move@isScript 00D2                             Motor_Init@pAddress 00E9  
                                     _delay_ms 55F8                                       _delay_us 5A26  
                                     _clearall 0092                                ___lwdiv@divisor 00BC  
                              ___lwdiv@counter 00BE                                Port_GetPin@pPin 00BC  
                                     __ptext10 6592                                       __ptext11 5FDC  
                                     __ptext20 5DA2                                       __ptext12 65A4  
                                     __ptext21 656A                                       __ptext13 2BFE  
                                     __ptext30 6336                                       __ptext22 23A6  
                                     __ptext14 37CE                                       __ptext31 58C0  
                                     __ptext23 65C8                                       __ptext15 4D6A  
                                     __ptext40 5276                                       __ptext32 5E28  
                                     __ptext24 28CE                                       __ptext16 56CC  
                                     __ptext41 49D2                                       __ptext33 35C2  
                                     __ptext25 3F72                                       __ptext17 666A  
                                     __ptext50 6426                                       __ptext42 6050  
                                     __ptext34 620E                                       __ptext26 40F4  
                                     __ptext18 5CD0                                       __ptext51 5976  
                                     __ptext43 3DDE                                       __ptext35 6016  
                                     __ptext27 5732                                       __ptext19 43DE  
                                     __ptext60 2D84                                       __ptext52 558E  
                                     __ptext44 60BC                                       __ptext36 628A  
                                     __ptext28 4A76                                       __ptext61 2A6C  
                                     __ptext53 6316                                       __ptext45 3A84  
                                     __ptext37 5EA8                                       __ptext29 4CDC  
                                     __ptext70 5A78                                       __ptext62 1BA4  
                                     __ptext54 65D6                                       __ptext46 21D8  
                                     __ptext38 5010                                       __ptext71 5EE6  
                                     __ptext63 5BF8                                       __ptext55 65E4  
                                     __ptext47 0000                                       __ptext39 1DCE  
                          ??_MXK_BlockSwitchTo 00C0                                       __ptext80 2F04  
                                     __ptext72 349C                                       __ptext64 1058  
                                     __ptext56 6354                                       __ptext48 0C98  
                                     __ptext81 4BB4                                       __ptext73 668A  
                                     __ptext65 65F2                                       __ptext57 3C34  
                                     __ptext49 473A                                       __ptext90 5AC8  
                                     __ptext82 59CE                                       __ptext74 6634  
                                     __ptext66 47E0                                       __ptext58 31DC  
                                     __ptext91 55F8                                       __ptext83 45E6  
                                     __ptext75 5DE6                                       __ptext67 4886  
                                     __ptext59 6628                                       __ptext92 6390  
                                     __ptext84 6372                                       __ptext76 6442  
                                     __ptext68 492C                                       __ptext93 63AE  
                                     __ptext85 62B0                                       __ptext77 6600  
                                     __ptext69 57FC                                       __ptext94 6656  
                                     __ptext86 54B6                                       __ptext78 5F24  
                                     __ptext95 1FDE                                       __ptext87 65B6  
                                     __ptext79 5A26                                       __ptext96 535E  
                                     __ptext88 5446                                       __ptext97 04A6  
                                     __ptext89 52EA                                       __ptext98 333C  
                                     __ptext99 41B2                                   _SSP1CON1bits 000FC6  
                             __size_of_reverse 006C                                   _SSP1CON2bits 000FC5  
                  __size_of_PortProperty_Valid 007C                             i2Byte_GetZone@MASK 0007  
                            _ADC_ClockDivision 4E80                                   ?_ADC_SetupIO 0001  
                                 _SSP2CON1bits 000F6C                                   _SSP2CON2bits 000F6B  
                                  _eusart_init 6354                                ?i2_Byte_GetPair 000A  
                             ?_Console_NewLine 0001                              ??_Event_DIPSwitch 00D3  
                              ?i2_Byte_GetZone 0001                             i2Byte_GetZone@pMax 0003  
                             ?_HMI_InitButtons 0001                             ?_ADC_ClockDivision 0001  
                                 ?_ADC_Voltage 00E1                            __end_of_MXK_Dequeue 5F24  
                            HMI_SetSegments@in 00BE                          Button_Init@pThreshold 0102  
                                     _safeToGo 5B64                                  __size_of_main 00E0  
                                __size_of_init 00A6                                  __size_of_itos 00D8  
                            Byte_GetPair@pPair 00C5                         __end_of_Console_Render 1FDE  
                          i2Port_SetPin@pInput 0010                            i2Port_SetPin@pValue 0013  
                                 _Port_GetQuad 5BAE                            __end_of_MXK_Release 645E  
                               _MXK_TestButton 653C                                  i2_Byte_SetBit 5B18  
                      __end_of_move_and_rotate 5010                            ??_ADC_ClockDivision 00BA  
                                 _iRDistanceSS 0322                                    _irobot_leds 5976  
                                  _irobot_init 65D6                            i2Word_GetPair@pPair 000F  
                                  _irobot_move 43DE                                 ADC_Voltage@max 00E7  
                               ADC_Voltage@ref 00EB                      __end_of_MXK_BlockSwitchTo 5F62  
                     ?_Console_IncrementCursor 0001                           __size_of_Timer0_Init 0160  
                         __size_of_Timer2_Init 0160                                       int$flags 0051  
                         __size_of_Timer0_Stop 0006                                   _Port_SetType 1BA4  
                                 Port_Set@Type 00E0                     __size_of_GetPortProperties 00A6  
                       __size_of_LCD_DrawField 00A4                                   _iRDropCaster 002F  
                  __size_of_load_iRScriptStack 006A                              ??_Configure_GPIOs 00EF  
                            ??_findClosestWall 0104                                      printf@val 00E0  
                                 _SSP1STATbits 000FC7                           __size_of_Motor_Speed 002A  
                               Timer0_Init@DIV 032A                                 Timer0_Init@PRE 008E  
                                 _SSP2STATbits 000F6D                                     _LED_Toggle 5C88  
                                   _HMI_GetBar 669C                           Button_Init@pGetState 0107  
                       PortProperty_Valid@Pair 00DF                               ??_Port_TogglePin 00D1  
                                  _OSCTUNEbits 000F9B                                     _INTCONbits 000FF2  
                       PortProperty_Valid@pPin 00CC                                     _HMI_SetBar 6660  
                                   _HMI_Render 5EA8                               Byte_SetZone@MASK 00C4  
                                  i2_MXK_Queue 660E                      __end_of_ADC_ClockDivision 4F0A  
                               Timer2_Init@DIV 0326                                 Timer2_Init@PRE 008C  
                             Byte_SetZone@pMax 00BC                         __size_ofi2_Timer0_Stop 0006  
                         __size_of_Port_GetPin 0046                         ??_irobot_move_straight 00D5  
               __size_of_update_bump_and_cliff 003A                           Button_Init@pFunction 010A  
                                     itos@Data 00CA                  __end_of_update_bump_and_cliff 6016  
                           LCD_FillRectangle@i 00CF                             LCD_FillRectangle@j 00D0  
                         __size_of_Port_SetPin 00C4                                       intlevel2 0000  
                                 reverse@input 00BA                         __size_of_HMI_DIPSwitch 0018  
                             ___lwmod@dividend 00C1                               ___lldiv@dividend 00BA  
                       __end_of_MXK_TestButton 6554                                ?_Console_Render 0001  
                                _iRScriptIndex 0037                        __size_of_LCD_Word_Write 001E  
                               ?i2_Byte_SetBit 0001                                  _iRScriptStack 0400  
                        __size_of_MXK_SwitchTo 0042                       irobot_query_and_update@i 00D6  
                     irobot_query_and_update@j 00D4                                 _SPI_DisableISR 6262  
                   __end_of_twos_complement_of 5DE6                       irobot_rotate@rotateAngle 00D7  
                              Port_Init@pInput 0101                                       printf@ap 00DE  
                             ?_get_packet_size 0001                         __size_ofi2_Port_SetPin 00AA  
                     irobot_rotate@rotateSpeed 00D9                                     _ISR_Enable 6656  
                             ?_HMI_SetSegments 00BB                        Console_MakeField@Column 00C6  
                        __size_of_SPI_MaxSpeed 0074                               ??_ADC_SetChannel 00BA  
                                SPI_DCS@pInput 00BA                          __size_of_SPI_MinSpeed 0074  
                              ??_MXK_DIPSwitch 00C0                                    ??_rx_assign 00BD  
                        __size_of_update_angle 0012                          __size_ofi2_Motor_Step 0100  
                            ADC_Voltage@pInput 00E1                        Console_MakeField@pInput 00C5  
                             ?_HMI_RightSwitch 0001                               ___lldiv@quotient 00C2  
                                ??_GetPortPORT 00BC                                ___lwmod@divisor 00C3  
                                ??_GetPortTRIS 00BC                          Timer0_Start@pFunction 00BA  
                           Word_SetPair@pInput 00C9                                ___lwmod@counter 00C5  
                           Word_SetPair@pValue 00CC                       ?_irobot_query_and_update 00C0  
                             Motor_Init@pMotor 00E7                                    _MXK_Dequeue 5EE6  
                            ADC_Voltage@output 00EF                                  _distanceTotal 0077  
                               LED_Toggle@pLED 00D2                                  _LCD_DrawField 49D2  
                             _Port_SetQuadType 194E                                    _MXK_Release 6442  
                    __size_of_Console_FormFeed 008E                                   _MXK_SwitchTo 5DE6  
                        __size_of_Word_GetPair 003E              irobot_query_and_update@startIndex 00D5  
                           Byte_GetZone@Offset 00C1                                  ?_Console_Init 0001  
                            Word_SetPair@pPair 00CB                                _Port_SetPinType 2568  
                      __size_of_Timer0_Restart 000C                             Byte_GetZone@Output 00C2  
                           Byte_GetZone@pChunk 00BD                                ?_MXK_TestButton 0001  
                  __end_of_Console_ResetCursor 6354                             Byte_GetZone@pInput 00BA  
                      __size_ofi2_MXK_SwitchTo 0036                __end_of_Console_IncrementCursor 5798  
                        __size_of_Word_SetPair 0046                         __end_of_SPI_DisableISR 628A  
                                 _SPI_MaxSpeed 52EA              irobot_query_and_update@streamSize 00D1  
                                 _SPI_MinSpeed 535E                             Port_Set@TypeActual 00DE  
                             ?_move_and_rotate 0001  
