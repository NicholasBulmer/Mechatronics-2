

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Sun Sep 10 16:40:33 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK3,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1,noexec
    19                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    20                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    21                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    23                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    24                           	psect	text0,global,reloc=2,class=CODE,delta=1
    25                           	psect	text1,global,reloc=2,class=CODE,delta=1
    26                           	psect	text2,global,reloc=2,class=CODE,delta=1
    27                           	psect	text3,global,reloc=2,class=CODE,delta=1
    28                           	psect	text4,global,reloc=2,class=CODE,delta=1
    29                           	psect	text5,global,reloc=2,class=CODE,delta=1
    30                           	psect	text6,global,reloc=2,class=CODE,delta=1
    31                           	psect	text7,global,reloc=2,class=CODE,delta=1
    32                           	psect	text8,global,reloc=2,class=CODE,delta=1
    33                           	psect	text9,global,reloc=2,class=CODE,delta=1
    34                           	psect	text10,global,reloc=2,class=CODE,delta=1
    35                           	psect	text11,global,reloc=2,class=CODE,delta=1
    36                           	psect	text12,global,reloc=2,class=CODE,delta=1
    37                           	psect	text13,global,reloc=2,class=CODE,delta=1
    38                           	psect	text14,global,reloc=2,class=CODE,delta=1
    39                           	psect	text15,global,reloc=2,class=CODE,delta=1
    40                           	psect	text16,global,reloc=2,class=CODE,delta=1,inline
    41                           	psect	text17,global,reloc=2,class=CODE,delta=1
    42                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text19,global,reloc=2,class=CODE,delta=1
    44                           	psect	text20,global,reloc=2,class=CODE,delta=1
    45                           	psect	text21,global,reloc=2,class=CODE,delta=1
    46                           	psect	text22,global,reloc=2,class=CODE,delta=1
    47                           	psect	text23,global,reloc=2,class=CODE,delta=1
    48                           	psect	text24,global,reloc=2,class=CODE,delta=1
    49                           	psect	text25,global,reloc=2,class=CODE,delta=1
    50                           	psect	text26,global,reloc=2,class=CODE,delta=1
    51                           	psect	text27,global,reloc=2,class=CODE,delta=1
    52                           	psect	text28,global,reloc=2,class=CODE,delta=1
    53                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text30,global,reloc=2,class=CODE,delta=1
    55                           	psect	text31,global,reloc=2,class=CODE,delta=1
    56                           	psect	text32,global,reloc=2,class=CODE,delta=1
    57                           	psect	text33,global,reloc=2,class=CODE,delta=1
    58                           	psect	text34,global,reloc=2,class=CODE,delta=1
    59                           	psect	text35,global,reloc=2,class=CODE,delta=1
    60                           	psect	text36,global,reloc=2,class=CODE,delta=1
    61                           	psect	text37,global,reloc=2,class=CODE,delta=1
    62                           	psect	text38,global,reloc=2,class=CODE,delta=1
    63                           	psect	text39,global,reloc=2,class=CODE,delta=1
    64                           	psect	text40,global,reloc=2,class=CODE,delta=1
    65                           	psect	text41,global,reloc=2,class=CODE,delta=1
    66                           	psect	text42,global,reloc=2,class=CODE,delta=1
    67                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text45,global,reloc=2,class=CODE,delta=1
    70                           	psect	text46,global,reloc=2,class=CODE,delta=1
    71                           	psect	text47,global,reloc=2,class=CODE,delta=1
    72                           	psect	text48,global,reloc=2,class=CODE,delta=1
    73                           	psect	text49,global,reloc=2,class=CODE,delta=1
    74                           	psect	text50,global,reloc=2,class=CODE,delta=1
    75                           	psect	text51,global,reloc=2,class=CODE,delta=1
    76                           	psect	text52,global,reloc=2,class=CODE,delta=1
    77                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    78                           	psect	text54,global,reloc=2,class=CODE,delta=1
    79                           	psect	text55,global,reloc=2,class=CODE,delta=1
    80                           	psect	text56,global,reloc=2,class=CODE,delta=1
    81                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    82                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=1
    83                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=1
    84                           	psect	text60,global,reloc=2,class=CODE,delta=1
    85                           	psect	text61,global,reloc=2,class=CODE,delta=1
    86                           	psect	text62,global,reloc=2,class=CODE,delta=1
    87                           	psect	text63,global,reloc=2,class=CODE,delta=1
    88                           	psect	text64,global,reloc=2,class=CODE,delta=1
    89                           	psect	text65,global,reloc=2,class=CODE,delta=1
    90                           	psect	text66,global,reloc=2,class=CODE,delta=1
    91                           	psect	text67,global,reloc=2,class=CODE,delta=1
    92                           	psect	text68,global,reloc=2,class=CODE,delta=1
    93                           	psect	text69,global,reloc=2,class=CODE,delta=1
    94                           	psect	text70,global,reloc=2,class=CODE,delta=1
    95                           	psect	text71,global,reloc=2,class=CODE,delta=1
    96                           	psect	text72,global,reloc=2,class=CODE,delta=1
    97                           	psect	text73,global,reloc=2,class=CODE,delta=1
    98                           	psect	text74,global,reloc=2,class=CODE,delta=1
    99                           	psect	text75,global,reloc=2,class=CODE,delta=1
   100                           	psect	text76,global,reloc=2,class=CODE,delta=1
   101                           	psect	text77,global,reloc=2,class=CODE,delta=1
   102                           	psect	text78,global,reloc=2,class=CODE,delta=1
   103                           	psect	text79,global,reloc=2,class=CODE,delta=1
   104                           	psect	text80,global,reloc=2,class=CODE,delta=1
   105                           	psect	text81,global,reloc=2,class=CODE,delta=1
   106                           	psect	text82,global,reloc=2,class=CODE,delta=1
   107                           	psect	text83,global,reloc=2,class=CODE,delta=1
   108                           	psect	text84,global,reloc=2,class=CODE,delta=1
   109                           	psect	text85,global,reloc=2,class=CODE,delta=1
   110                           	psect	text86,global,reloc=2,class=CODE,delta=1
   111                           	psect	text87,global,reloc=2,class=CODE,delta=1
   112                           	psect	text88,global,reloc=2,class=CODE,delta=1
   113                           	psect	text89,global,reloc=2,class=CODE,delta=1
   114                           	psect	text90,global,reloc=2,class=CODE,delta=1
   115                           	psect	text91,global,reloc=2,class=CODE,delta=1
   116                           	psect	text92,global,reloc=2,class=CODE,delta=1
   117                           	psect	text93,global,reloc=2,class=CODE,delta=1
   118                           	psect	text94,global,reloc=2,class=CODE,delta=1
   119                           	psect	text95,global,reloc=2,class=CODE,delta=1
   120                           	psect	text96,global,reloc=2,class=CODE,delta=1
   121                           	psect	text97,global,reloc=2,class=CODE,delta=1
   122                           	psect	text98,global,reloc=2,class=CODE,delta=1,inline
   123                           	psect	text99,global,reloc=2,class=CODE,delta=1
   124                           	psect	text100,global,reloc=2,class=CODE,delta=1
   125                           	psect	text101,global,reloc=2,class=CODE,delta=1
   126                           	psect	text102,global,reloc=2,class=CODE,delta=1
   127                           	psect	text103,global,reloc=2,class=CODE,delta=1,inline
   128                           	psect	text104,global,reloc=2,class=CODE,delta=1,inline
   129                           	psect	text105,global,reloc=2,class=CODE,delta=1
   130                           	psect	text106,global,reloc=2,class=CODE,delta=1
   131                           	psect	text107,global,reloc=2,class=CODE,delta=1
   132                           	psect	text108,global,reloc=2,class=CODE,delta=1
   133                           	psect	text109,global,reloc=2,class=CODE,delta=1
   134                           	psect	text110,global,reloc=2,class=CODE,delta=1
   135                           	psect	text111,global,reloc=2,class=CODE,delta=1
   136                           	psect	text112,global,reloc=2,class=CODE,delta=1
   137                           	psect	text113,global,reloc=2,class=CODE,delta=1,group=1
   138                           	psect	text114,global,reloc=2,class=CODE,delta=1
   139                           	psect	text115,global,reloc=2,class=CODE,delta=1
   140                           	psect	text116,global,reloc=2,class=CODE,delta=1
   141                           	psect	text117,global,reloc=2,class=CODE,delta=1
   142                           	psect	text118,global,reloc=2,class=CODE,delta=1
   143                           	psect	text119,global,reloc=2,class=CODE,delta=1
   144                           	psect	text120,global,reloc=2,class=CODE,delta=1
   145                           	psect	text121,global,reloc=2,class=CODE,delta=1
   146                           	psect	text122,global,reloc=2,class=CODE,delta=1
   147                           	psect	text123,global,reloc=2,class=CODE,delta=1
   148                           	psect	text124,global,reloc=2,class=CODE,delta=1
   149                           	psect	text125,global,reloc=2,class=CODE,delta=1
   150                           	psect	text126,global,reloc=2,class=CODE,delta=1
   151                           	psect	text127,global,reloc=2,class=CODE,delta=1
   152                           	psect	text128,global,reloc=2,class=CODE,delta=1
   153                           	psect	text129,global,reloc=2,class=CODE,delta=1
   154                           	psect	text130,global,reloc=2,class=CODE,delta=1
   155                           	psect	text131,global,reloc=2,class=CODE,delta=1,inline
   156                           	psect	text132,global,reloc=2,class=CODE,delta=1
   157                           	psect	text133,global,reloc=2,class=CODE,delta=1,inline
   158                           	psect	text134,global,reloc=2,class=CODE,delta=1
   159                           	psect	text135,global,reloc=2,class=CODE,delta=1
   160                           	psect	text136,global,reloc=2,class=CODE,delta=1
   161                           	psect	text137,global,reloc=2,class=CODE,delta=1
   162                           	psect	text138,global,reloc=2,class=CODE,delta=1
   163                           	psect	text139,global,reloc=2,class=CODE,delta=1
   164                           	psect	text140,global,reloc=2,class=CODE,delta=1
   165                           	psect	text141,global,reloc=2,class=CODE,delta=1
   166                           	psect	text142,global,reloc=2,class=CODE,delta=1
   167                           	psect	text143,global,reloc=2,class=CODE,delta=1
   168                           	psect	text144,global,reloc=2,class=CODE,delta=1
   169                           	psect	text145,global,reloc=2,class=CODE,delta=1
   170                           	psect	text146,global,reloc=2,class=CODE,delta=1
   171                           	psect	text147,global,reloc=2,class=CODE,delta=1
   172                           	psect	text148,global,reloc=2,class=CODE,delta=1
   173                           	psect	text149,global,reloc=2,class=CODE,delta=1
   174                           	psect	text150,global,reloc=2,class=CODE,delta=1
   175                           	psect	text151,global,reloc=2,class=CODE,delta=1
   176                           	psect	text152,global,reloc=2,class=CODE,delta=1
   177                           	psect	text153,global,reloc=2,class=CODE,delta=1
   178                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   179                           	psect	text155,global,reloc=2,class=CODE,delta=1
   180                           	psect	text156,global,reloc=2,class=CODE,delta=1
   181                           	psect	text157,global,reloc=2,class=CODE,delta=1
   182                           	psect	text158,global,reloc=2,class=CODE,delta=1
   183                           	psect	text159,global,reloc=2,class=CODE,delta=1
   184                           	psect	text160,global,reloc=2,class=CODE,delta=1
   185                           	psect	text161,global,reloc=2,class=CODE,delta=1
   186                           	psect	text162,global,reloc=2,class=CODE,delta=1,inline
   187                           	psect	text163,global,reloc=2,class=CODE,delta=1
   188                           	psect	text164,global,reloc=2,class=CODE,delta=1
   189                           	psect	text165,global,reloc=2,class=CODE,delta=1
   190                           	psect	text166,global,reloc=2,class=CODE,delta=1
   191                           	psect	text167,global,reloc=2,class=CODE,delta=1
   192                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   193                           	psect	text168,global,reloc=2,class=CODE,delta=1
   194                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   195                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   196  0000                     
   197                           ; Version 1.43
   198                           ; Generated 25/07/2017 GMT
   199                           ; 
   200                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   201                           ; All rights reserved.
   202                           ; 
   203                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   204                           ; 
   205                           ; Redistribution and use in source and binary forms, with or without modification, are
   206                           ; permitted provided that the following conditions are met:
   207                           ; 
   208                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   209                           ;        conditions and the following disclaimer.
   210                           ; 
   211                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   212                           ;        of conditions and the following disclaimer in the documentation and/or other
   213                           ;        materials provided with the distribution.
   214                           ; 
   215                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   216                           ;        software without specific prior written permission.
   217                           ; 
   218                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   219                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   220                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   221                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   222                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   223                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   224                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   225                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   226                           ; 
   227                           ; 
   228                           ; Code-generator required, PIC18F67J50 Definitions
   229                           ; 
   230                           ; SFR Addresses
   231  0000                     
   232                           	psect	idataCOMRAM
   233  016492                     __pidataCOMRAM:
   234                           	opt stack 0
   235                           
   236                           ;initializer for _gCursor
   237  016492  0006               	dw	6
   238  016494  0006               	dw	6
   239                           
   240                           ;initializer for _Bus_State
   241  016496  01                 	db	1
   242                           
   243                           ;initializer for _A
   244  016497  41                 	db	65
   245                           
   246                           ;initializer for _a
   247  016498  61                 	db	97
   248                           
   249                           ;initializer for _zero
   250  016499  30                 	db	48
   251                           
   252                           ;initializer for _l
   253  01649A  80                 	db	128
   254                           
   255                           ;initializer for _w
   256  01649B  80                 	db	128
   257                           
   258                           	psect	idataBANK0
   259  0164C8                     __pidataBANK0:
   260                           	opt stack 0
   261                           
   262                           ;initializer for _TimerX
   263  0164C8  0008               	dw	8
   264                           
   265                           ;initializer for _MinDist
   266  0164CA  03E8               	dw	1000
   267                           
   268                           ;initializer for _gForecolour
   269  0164CC  FFFF               	dw	65535
   270                           
   271                           ;initializer for _change
   272  0164CE  01                 	db	1
   273                           
   274                           	psect	idataBANK3
   275  016462                     __pidataBANK3:
   276                           	opt stack 0
   277                           
   278                           ;initializer for Console_Render@F6956
   279  016462  0006               	dw	6
   280  016464  0006               	dw	6
   281                           
   282                           ;initializer for _gLineSize
   283  016466  0080               	dw	128
   284  016468  0007               	dw	7
   285                           
   286                           ;initializer for _gCharSize
   287  01646A  0005               	dw	5
   288  01646C  0007               	dw	7
   289                           
   290                           	psect	mediumconst
   291  00FC96                     __pmediumconst:
   292                           	opt stack 0
   293  00FC96  00                 	db	0
   294  00FC97                     _InitList:
   295                           	opt stack 0
   296  00FC97  1100               	dw	4352
   297  00FC99  0080               	dw	128
   298  00FC9B  012C               	dw	300
   299  00FC9D  B100               	dw	45312
   300  00FC9F  0002               	dw	2
   301  00FCA1  0035               	dw	53
   302  00FCA3  0036               	dw	54
   303  00FCA5  B200               	dw	45568
   304  00FCA7  0002               	dw	2
   305  00FCA9  0035               	dw	53
   306  00FCAB  0036               	dw	54
   307  00FCAD  B300               	dw	45824
   308  00FCAF  0002               	dw	2
   309  00FCB1  0035               	dw	53
   310  00FCB3  0036               	dw	54
   311  00FCB5  0002               	dw	2
   312  00FCB7  0035               	dw	53
   313  00FCB9  0036               	dw	54
   314  00FCBB  B400               	dw	46080
   315  00FCBD  0000               	dw	0
   316  00FCBF  C000               	dw	49152
   317  00FCC1  00A2               	dw	162
   318  00FCC3  0002               	dw	2
   319  00FCC5  0084               	dw	132
   320  00FCC7  C100               	dw	49408
   321  00FCC9  00C5               	dw	197
   322  00FCCB  C200               	dw	49664
   323  00FCCD  000D               	dw	13
   324  00FCCF  0000               	dw	0
   325  00FCD1  C300               	dw	49920
   326  00FCD3  008D               	dw	141
   327  00FCD5  002A               	dw	42
   328  00FCD7  C400               	dw	50176
   329  00FCD9  008D               	dw	141
   330  00FCDB  00EE               	dw	238
   331  00FCDD  C500               	dw	50432
   332  00FCDF  000A               	dw	10
   333  00FCE1  3600               	dw	13824
   334  00FCE3  00C8               	dw	200
   335  00FCE5  E000               	dw	57344
   336  00FCE7  0012               	dw	18
   337  00FCE9  001C               	dw	28
   338  00FCEB  0010               	dw	16
   339  00FCED  0018               	dw	24
   340  00FCEF  0033               	dw	51
   341  00FCF1  002C               	dw	44
   342  00FCF3  0025               	dw	37
   343  00FCF5  0028               	dw	40
   344  00FCF7  0028               	dw	40
   345  00FCF9  0027               	dw	39
   346  00FCFB  002F               	dw	47
   347  00FCFD  003C               	dw	60
   348  00FCFF  0000               	dw	0
   349  00FD01  0003               	dw	3
   350  00FD03  0003               	dw	3
   351  00FD05  0010               	dw	16
   352  00FD07  0080               	dw	128
   353  00FD09  0078               	dw	120
   354  00FD0B  E100               	dw	57600
   355  00FD0D  0012               	dw	18
   356  00FD0F  001C               	dw	28
   357  00FD11  0010               	dw	16
   358  00FD13  0018               	dw	24
   359  00FD15  002D               	dw	45
   360  00FD17  0028               	dw	40
   361  00FD19  0023               	dw	35
   362  00FD1B  0028               	dw	40
   363  00FD1D  0028               	dw	40
   364  00FD1F  0026               	dw	38
   365  00FD21  002F               	dw	47
   366  00FD23  003B               	dw	59
   367  00FD25  0000               	dw	0
   368  00FD27  0003               	dw	3
   369  00FD29  0003               	dw	3
   370  00FD2B  0010               	dw	16
   371  00FD2D  3A00               	dw	14848
   372  00FD2F  0005               	dw	5
   373  00FD31  2A00               	dw	10752
   374  00FD33  0000               	dw	0
   375  00FD35  0002               	dw	2
   376  00FD37  0000               	dw	0
   377  00FD39  0081               	dw	129
   378  00FD3B  2B00               	dw	11008
   379  00FD3D  0000               	dw	0
   380  00FD3F  0003               	dw	3
   381  00FD41  0000               	dw	0
   382  00FD43  00A2               	dw	162
   383  00FD45  2900               	dw	10496
   384  00FD47  2C00               	dw	11264
   385  00FD49                     __end_of_InitList:
   386                           	opt stack 0
   387  00FD49                     Timer0_Init@PRESCALE:
   388                           	opt stack 0
   389  00FD49  0002               	dw	2
   390  00FD4B  0004               	dw	4
   391  00FD4D  0008               	dw	8
   392  00FD4F  0010               	dw	16
   393  00FD51  0020               	dw	32
   394  00FD53  0040               	dw	64
   395  00FD55  0080               	dw	128
   396  00FD57  0100               	dw	256
   397  00FD59                     __end_ofTimer0_Init@PRESCALE:
   398                           	opt stack 0
   399  00FD59                     PortProperty_Valid@F6830:
   400                           	opt stack 0
   401  00FD59  00                 	db	0
   402  00FD5A  01                 	db	1
   403  00FD5B  02                 	db	2
   404  00FD5C  00                 	db	0
   405  00FD5D  01                 	db	1
   406  00FD5E  00                 	db	0
   407  00FD5F  01                 	db	1
   408  00FD60  00                 	db	0
   409  00FD61  02                 	db	2
   410  00FD62  02                 	db	2
   411  00FD63  00                 	db	0
   412  00FD64  00                 	db	0
   413  00FD65  03                 	db	3
   414  00FD66  03                 	db	3
   415  00FD67  03                 	db	3
   416  00FD68  00                 	db	0
   417  00FD69                     __end_ofPortProperty_Valid@F6830:
   418                           	opt stack 0
   419  00FD69                     _dpowers:
   420                           	opt stack 0
   421  00FD69  0001               	dw	1
   422  00FD6B  000A               	dw	10
   423  00FD6D  0064               	dw	100
   424  00FD6F  03E8               	dw	1000
   425  00FD71  2710               	dw	10000
   426  00FD73                     __end_of_dpowers:
   427                           	opt stack 0
   428  00FD73                     _MASKS:
   429                           	opt stack 0
   430  00FD73  00                 	db	0
   431  00FD74  01                 	db	1
   432  00FD75  03                 	db	3
   433  00FD76  07                 	db	7
   434  00FD77  0F                 	db	15
   435  00FD78  1F                 	db	31
   436  00FD79  3F                 	db	63
   437  00FD7A  7F                 	db	127
   438  00FD7B  FF                 	db	255
   439  00FD7C                     __end_of_MASKS:
   440                           	opt stack 0
   441  00FD7C                     HMI_SetButton@F7213:
   442                           	opt stack 0
   443  00FD7C  00                 	db	0
   444  00FD7D  02                 	db	2
   445  00FD7E  01                 	db	1
   446  00FD7F  03                 	db	3
   447  00FD80                     __end_ofHMI_SetButton@F7213:
   448                           	opt stack 0
   449  00FD80                     Timer2_Init@PRESCALE:
   450                           	opt stack 0
   451  00FD80  01                 	db	1
   452  00FD81  04                 	db	4
   453  00FD82  10                 	db	16
   454  00FD83                     __end_ofTimer2_Init@PRESCALE:
   455                           	opt stack 0
   456  00FD83                     _Font5x7:
   457                           	opt stack 0
   458  00FD83  00                 	db	0
   459  00FD84  00                 	db	0
   460  00FD85  00                 	db	0
   461  00FD86  00                 	db	0
   462  00FD87  00                 	db	0
   463  00FD88  00                 	db	0
   464  00FD89  00                 	db	0
   465  00FD8A  5F                 	db	95
   466  00FD8B  00                 	db	0
   467  00FD8C  00                 	db	0
   468  00FD8D  00                 	db	0
   469  00FD8E  07                 	db	7
   470  00FD8F  00                 	db	0
   471  00FD90  07                 	db	7
   472  00FD91  00                 	db	0
   473  00FD92  14                 	db	20
   474  00FD93  7F                 	db	127
   475  00FD94  14                 	db	20
   476  00FD95  7F                 	db	127
   477  00FD96  14                 	db	20
   478  00FD97  24                 	db	36
   479  00FD98  2A                 	db	42
   480  00FD99  7F                 	db	127
   481  00FD9A  2A                 	db	42
   482  00FD9B  12                 	db	18
   483  00FD9C  23                 	db	35
   484  00FD9D  13                 	db	19
   485  00FD9E  08                 	db	8
   486  00FD9F  64                 	db	100
   487  00FDA0  62                 	db	98
   488  00FDA1  36                 	db	54
   489  00FDA2  49                 	db	73
   490  00FDA3  55                 	db	85
   491  00FDA4  22                 	db	34
   492  00FDA5  50                 	db	80
   493  00FDA6  00                 	db	0
   494  00FDA7  05                 	db	5
   495  00FDA8  03                 	db	3
   496  00FDA9  00                 	db	0
   497  00FDAA  00                 	db	0
   498  00FDAB  00                 	db	0
   499  00FDAC  1C                 	db	28
   500  00FDAD  22                 	db	34
   501  00FDAE  41                 	db	65
   502  00FDAF  00                 	db	0
   503  00FDB0  00                 	db	0
   504  00FDB1  41                 	db	65
   505  00FDB2  22                 	db	34
   506  00FDB3  1C                 	db	28
   507  00FDB4  00                 	db	0
   508  00FDB5  08                 	db	8
   509  00FDB6  2A                 	db	42
   510  00FDB7  1C                 	db	28
   511  00FDB8  2A                 	db	42
   512  00FDB9  08                 	db	8
   513  00FDBA  08                 	db	8
   514  00FDBB  08                 	db	8
   515  00FDBC  3E                 	db	62
   516  00FDBD  08                 	db	8
   517  00FDBE  08                 	db	8
   518  00FDBF  00                 	db	0
   519  00FDC0  50                 	db	80
   520  00FDC1  30                 	db	48
   521  00FDC2  00                 	db	0
   522  00FDC3  00                 	db	0
   523  00FDC4  08                 	db	8
   524  00FDC5  08                 	db	8
   525  00FDC6  08                 	db	8
   526  00FDC7  08                 	db	8
   527  00FDC8  08                 	db	8
   528  00FDC9  00                 	db	0
   529  00FDCA  60                 	db	96
   530  00FDCB  60                 	db	96
   531  00FDCC  00                 	db	0
   532  00FDCD  00                 	db	0
   533  00FDCE  20                 	db	32
   534  00FDCF  10                 	db	16
   535  00FDD0  08                 	db	8
   536  00FDD1  04                 	db	4
   537  00FDD2  02                 	db	2
   538  00FDD3  3E                 	db	62
   539  00FDD4  51                 	db	81
   540  00FDD5  49                 	db	73
   541  00FDD6  45                 	db	69
   542  00FDD7  3E                 	db	62
   543  00FDD8  00                 	db	0
   544  00FDD9  42                 	db	66
   545  00FDDA  7F                 	db	127
   546  00FDDB  40                 	db	64
   547  00FDDC  00                 	db	0
   548  00FDDD  42                 	db	66
   549  00FDDE  61                 	db	97
   550  00FDDF  51                 	db	81
   551  00FDE0  49                 	db	73
   552  00FDE1  46                 	db	70
   553  00FDE2  21                 	db	33
   554  00FDE3  41                 	db	65
   555  00FDE4  45                 	db	69
   556  00FDE5  4B                 	db	75
   557  00FDE6  31                 	db	49
   558  00FDE7  18                 	db	24
   559  00FDE8  14                 	db	20
   560  00FDE9  12                 	db	18
   561  00FDEA  7F                 	db	127
   562  00FDEB  10                 	db	16
   563  00FDEC  27                 	db	39
   564  00FDED  45                 	db	69
   565  00FDEE  45                 	db	69
   566  00FDEF  45                 	db	69
   567  00FDF0  39                 	db	57
   568  00FDF1  3C                 	db	60
   569  00FDF2  4A                 	db	74
   570  00FDF3  49                 	db	73
   571  00FDF4  49                 	db	73
   572  00FDF5  30                 	db	48
   573  00FDF6  01                 	db	1
   574  00FDF7  71                 	db	113
   575  00FDF8  09                 	db	9
   576  00FDF9  05                 	db	5
   577  00FDFA  03                 	db	3
   578  00FDFB  36                 	db	54
   579  00FDFC  49                 	db	73
   580  00FDFD  49                 	db	73
   581  00FDFE  49                 	db	73
   582  00FDFF  36                 	db	54
   583  00FE00  06                 	db	6
   584  00FE01  49                 	db	73
   585  00FE02  49                 	db	73
   586  00FE03  29                 	db	41
   587  00FE04  1E                 	db	30
   588  00FE05  00                 	db	0
   589  00FE06  36                 	db	54
   590  00FE07  36                 	db	54
   591  00FE08  00                 	db	0
   592  00FE09  00                 	db	0
   593  00FE0A  00                 	db	0
   594  00FE0B  56                 	db	86
   595  00FE0C  36                 	db	54
   596  00FE0D  00                 	db	0
   597  00FE0E  00                 	db	0
   598  00FE0F  00                 	db	0
   599  00FE10  08                 	db	8
   600  00FE11  14                 	db	20
   601  00FE12  22                 	db	34
   602  00FE13  41                 	db	65
   603  00FE14  14                 	db	20
   604  00FE15  14                 	db	20
   605  00FE16  14                 	db	20
   606  00FE17  14                 	db	20
   607  00FE18  14                 	db	20
   608  00FE19  41                 	db	65
   609  00FE1A  22                 	db	34
   610  00FE1B  14                 	db	20
   611  00FE1C  08                 	db	8
   612  00FE1D  00                 	db	0
   613  00FE1E  02                 	db	2
   614  00FE1F  01                 	db	1
   615  00FE20  51                 	db	81
   616  00FE21  09                 	db	9
   617  00FE22  06                 	db	6
   618  00FE23  32                 	db	50
   619  00FE24  49                 	db	73
   620  00FE25  79                 	db	121
   621  00FE26  41                 	db	65
   622  00FE27  3E                 	db	62
   623  00FE28  7E                 	db	126
   624  00FE29  11                 	db	17
   625  00FE2A  11                 	db	17
   626  00FE2B  11                 	db	17
   627  00FE2C  7E                 	db	126
   628  00FE2D  7F                 	db	127
   629  00FE2E  49                 	db	73
   630  00FE2F  49                 	db	73
   631  00FE30  49                 	db	73
   632  00FE31  36                 	db	54
   633  00FE32  3E                 	db	62
   634  00FE33  41                 	db	65
   635  00FE34  41                 	db	65
   636  00FE35  41                 	db	65
   637  00FE36  22                 	db	34
   638  00FE37  7F                 	db	127
   639  00FE38  41                 	db	65
   640  00FE39  41                 	db	65
   641  00FE3A  22                 	db	34
   642  00FE3B  1C                 	db	28
   643  00FE3C  7F                 	db	127
   644  00FE3D  49                 	db	73
   645  00FE3E  49                 	db	73
   646  00FE3F  49                 	db	73
   647  00FE40  41                 	db	65
   648  00FE41  7F                 	db	127
   649  00FE42  09                 	db	9
   650  00FE43  09                 	db	9
   651  00FE44  01                 	db	1
   652  00FE45  01                 	db	1
   653  00FE46  3E                 	db	62
   654  00FE47  41                 	db	65
   655  00FE48  41                 	db	65
   656  00FE49  51                 	db	81
   657  00FE4A  32                 	db	50
   658  00FE4B  7F                 	db	127
   659  00FE4C  08                 	db	8
   660  00FE4D  08                 	db	8
   661  00FE4E  08                 	db	8
   662  00FE4F  7F                 	db	127
   663  00FE50  00                 	db	0
   664  00FE51  41                 	db	65
   665  00FE52  7F                 	db	127
   666  00FE53  41                 	db	65
   667  00FE54  00                 	db	0
   668  00FE55  20                 	db	32
   669  00FE56  40                 	db	64
   670  00FE57  41                 	db	65
   671  00FE58  3F                 	db	63
   672  00FE59  01                 	db	1
   673  00FE5A  7F                 	db	127
   674  00FE5B  08                 	db	8
   675  00FE5C  14                 	db	20
   676  00FE5D  22                 	db	34
   677  00FE5E  41                 	db	65
   678  00FE5F  7F                 	db	127
   679  00FE60  40                 	db	64
   680  00FE61  40                 	db	64
   681  00FE62  40                 	db	64
   682  00FE63  40                 	db	64
   683  00FE64  7F                 	db	127
   684  00FE65  02                 	db	2
   685  00FE66  04                 	db	4
   686  00FE67  02                 	db	2
   687  00FE68  7F                 	db	127
   688  00FE69  7F                 	db	127
   689  00FE6A  04                 	db	4
   690  00FE6B  08                 	db	8
   691  00FE6C  10                 	db	16
   692  00FE6D  7F                 	db	127
   693  00FE6E  3E                 	db	62
   694  00FE6F  41                 	db	65
   695  00FE70  41                 	db	65
   696  00FE71  41                 	db	65
   697  00FE72  3E                 	db	62
   698  00FE73  7F                 	db	127
   699  00FE74  09                 	db	9
   700  00FE75  09                 	db	9
   701  00FE76  09                 	db	9
   702  00FE77  06                 	db	6
   703  00FE78  3E                 	db	62
   704  00FE79  41                 	db	65
   705  00FE7A  51                 	db	81
   706  00FE7B  21                 	db	33
   707  00FE7C  5E                 	db	94
   708  00FE7D  7F                 	db	127
   709  00FE7E  09                 	db	9
   710  00FE7F  19                 	db	25
   711  00FE80  29                 	db	41
   712  00FE81  46                 	db	70
   713  00FE82  46                 	db	70
   714  00FE83  49                 	db	73
   715  00FE84  49                 	db	73
   716  00FE85  49                 	db	73
   717  00FE86  31                 	db	49
   718  00FE87  01                 	db	1
   719  00FE88  01                 	db	1
   720  00FE89  7F                 	db	127
   721  00FE8A  01                 	db	1
   722  00FE8B  01                 	db	1
   723  00FE8C  3F                 	db	63
   724  00FE8D  40                 	db	64
   725  00FE8E  40                 	db	64
   726  00FE8F  40                 	db	64
   727  00FE90  3F                 	db	63
   728  00FE91  1F                 	db	31
   729  00FE92  20                 	db	32
   730  00FE93  40                 	db	64
   731  00FE94  20                 	db	32
   732  00FE95  1F                 	db	31
   733  00FE96  7F                 	db	127
   734  00FE97  20                 	db	32
   735  00FE98  18                 	db	24
   736  00FE99  20                 	db	32
   737  00FE9A  7F                 	db	127
   738  00FE9B  63                 	db	99
   739  00FE9C  14                 	db	20
   740  00FE9D  08                 	db	8
   741  00FE9E  14                 	db	20
   742  00FE9F  63                 	db	99
   743  00FEA0  03                 	db	3
   744  00FEA1  04                 	db	4
   745  00FEA2  78                 	db	120
   746  00FEA3  04                 	db	4
   747  00FEA4  03                 	db	3
   748  00FEA5  61                 	db	97
   749  00FEA6  51                 	db	81
   750  00FEA7  49                 	db	73
   751  00FEA8  45                 	db	69
   752  00FEA9  43                 	db	67
   753  00FEAA  00                 	db	0
   754  00FEAB  00                 	db	0
   755  00FEAC  7F                 	db	127
   756  00FEAD  41                 	db	65
   757  00FEAE  41                 	db	65
   758  00FEAF  02                 	db	2
   759  00FEB0  04                 	db	4
   760  00FEB1  08                 	db	8
   761  00FEB2  10                 	db	16
   762  00FEB3  20                 	db	32
   763  00FEB4  41                 	db	65
   764  00FEB5  41                 	db	65
   765  00FEB6  7F                 	db	127
   766  00FEB7  00                 	db	0
   767  00FEB8  00                 	db	0
   768  00FEB9  04                 	db	4
   769  00FEBA  02                 	db	2
   770  00FEBB  01                 	db	1
   771  00FEBC  02                 	db	2
   772  00FEBD  04                 	db	4
   773  00FEBE  40                 	db	64
   774  00FEBF  40                 	db	64
   775  00FEC0  40                 	db	64
   776  00FEC1  40                 	db	64
   777  00FEC2  40                 	db	64
   778  00FEC3  00                 	db	0
   779  00FEC4  01                 	db	1
   780  00FEC5  02                 	db	2
   781  00FEC6  04                 	db	4
   782  00FEC7  00                 	db	0
   783  00FEC8  20                 	db	32
   784  00FEC9  54                 	db	84
   785  00FECA  54                 	db	84
   786  00FECB  54                 	db	84
   787  00FECC  78                 	db	120
   788  00FECD  7F                 	db	127
   789  00FECE  48                 	db	72
   790  00FECF  44                 	db	68
   791  00FED0  44                 	db	68
   792  00FED1  38                 	db	56
   793  00FED2  38                 	db	56
   794  00FED3  44                 	db	68
   795  00FED4  44                 	db	68
   796  00FED5  44                 	db	68
   797  00FED6  20                 	db	32
   798  00FED7  38                 	db	56
   799  00FED8  44                 	db	68
   800  00FED9  44                 	db	68
   801  00FEDA  48                 	db	72
   802  00FEDB  7F                 	db	127
   803  00FEDC  38                 	db	56
   804  00FEDD  54                 	db	84
   805  00FEDE  54                 	db	84
   806  00FEDF  54                 	db	84
   807  00FEE0  18                 	db	24
   808  00FEE1  08                 	db	8
   809  00FEE2  7E                 	db	126
   810  00FEE3  09                 	db	9
   811  00FEE4  01                 	db	1
   812  00FEE5  02                 	db	2
   813  00FEE6  08                 	db	8
   814  00FEE7  14                 	db	20
   815  00FEE8  54                 	db	84
   816  00FEE9  54                 	db	84
   817  00FEEA  3C                 	db	60
   818  00FEEB  7F                 	db	127
   819  00FEEC  08                 	db	8
   820  00FEED  04                 	db	4
   821  00FEEE  04                 	db	4
   822  00FEEF  78                 	db	120
   823  00FEF0  00                 	db	0
   824  00FEF1  44                 	db	68
   825  00FEF2  7D                 	db	125
   826  00FEF3  40                 	db	64
   827  00FEF4  00                 	db	0
   828  00FEF5  20                 	db	32
   829  00FEF6  40                 	db	64
   830  00FEF7  44                 	db	68
   831  00FEF8  3D                 	db	61
   832  00FEF9  00                 	db	0
   833  00FEFA  00                 	db	0
   834  00FEFB  7F                 	db	127
   835  00FEFC  10                 	db	16
   836  00FEFD  28                 	db	40
   837  00FEFE  44                 	db	68
   838  00FEFF  00                 	db	0
   839  00FF00  41                 	db	65
   840  00FF01  7F                 	db	127
   841  00FF02  40                 	db	64
   842  00FF03  00                 	db	0
   843  00FF04  7C                 	db	124
   844  00FF05  04                 	db	4
   845  00FF06  18                 	db	24
   846  00FF07  04                 	db	4
   847  00FF08  78                 	db	120
   848  00FF09  7C                 	db	124
   849  00FF0A  08                 	db	8
   850  00FF0B  04                 	db	4
   851  00FF0C  04                 	db	4
   852  00FF0D  78                 	db	120
   853  00FF0E  38                 	db	56
   854  00FF0F  44                 	db	68
   855  00FF10  44                 	db	68
   856  00FF11  44                 	db	68
   857  00FF12  38                 	db	56
   858  00FF13  7C                 	db	124
   859  00FF14  14                 	db	20
   860  00FF15  14                 	db	20
   861  00FF16  14                 	db	20
   862  00FF17  08                 	db	8
   863  00FF18  08                 	db	8
   864  00FF19  14                 	db	20
   865  00FF1A  14                 	db	20
   866  00FF1B  18                 	db	24
   867  00FF1C  7C                 	db	124
   868  00FF1D  7C                 	db	124
   869  00FF1E  08                 	db	8
   870  00FF1F  04                 	db	4
   871  00FF20  04                 	db	4
   872  00FF21  08                 	db	8
   873  00FF22  48                 	db	72
   874  00FF23  54                 	db	84
   875  00FF24  54                 	db	84
   876  00FF25  54                 	db	84
   877  00FF26  20                 	db	32
   878  00FF27  04                 	db	4
   879  00FF28  3F                 	db	63
   880  00FF29  44                 	db	68
   881  00FF2A  40                 	db	64
   882  00FF2B  20                 	db	32
   883  00FF2C  3C                 	db	60
   884  00FF2D  40                 	db	64
   885  00FF2E  40                 	db	64
   886  00FF2F  20                 	db	32
   887  00FF30  7C                 	db	124
   888  00FF31  1C                 	db	28
   889  00FF32  20                 	db	32
   890  00FF33  40                 	db	64
   891  00FF34  20                 	db	32
   892  00FF35  1C                 	db	28
   893  00FF36  3C                 	db	60
   894  00FF37  40                 	db	64
   895  00FF38  30                 	db	48
   896  00FF39  40                 	db	64
   897  00FF3A  3C                 	db	60
   898  00FF3B  44                 	db	68
   899  00FF3C  28                 	db	40
   900  00FF3D  10                 	db	16
   901  00FF3E  28                 	db	40
   902  00FF3F  44                 	db	68
   903  00FF40  0C                 	db	12
   904  00FF41  50                 	db	80
   905  00FF42  50                 	db	80
   906  00FF43  50                 	db	80
   907  00FF44  3C                 	db	60
   908  00FF45  44                 	db	68
   909  00FF46  64                 	db	100
   910  00FF47  54                 	db	84
   911  00FF48  4C                 	db	76
   912  00FF49  44                 	db	68
   913  00FF4A  00                 	db	0
   914  00FF4B  08                 	db	8
   915  00FF4C  36                 	db	54
   916  00FF4D  41                 	db	65
   917  00FF4E  00                 	db	0
   918  00FF4F  00                 	db	0
   919  00FF50  00                 	db	0
   920  00FF51  7F                 	db	127
   921  00FF52  00                 	db	0
   922  00FF53  00                 	db	0
   923  00FF54  00                 	db	0
   924  00FF55  41                 	db	65
   925  00FF56  36                 	db	54
   926  00FF57  08                 	db	8
   927  00FF58  00                 	db	0
   928  00FF59  08                 	db	8
   929  00FF5A  08                 	db	8
   930  00FF5B  2A                 	db	42
   931  00FF5C  1C                 	db	28
   932  00FF5D  08                 	db	8
   933  00FF5E  08                 	db	8
   934  00FF5F  1C                 	db	28
   935  00FF60  2A                 	db	42
   936  00FF61  08                 	db	8
   937  00FF62  08                 	db	8
   938  00FF63                     __end_of_Font5x7:
   939                           	opt stack 0
   940  00FF63                     _PortG_Property:
   941                           	opt stack 0
   942  00FF63  FC00               	dw	64512
   943  00FF65                     __end_of_PortG_Property:
   944                           	opt stack 0
   945  00FF65                     _PortF_Property:
   946                           	opt stack 0
   947  00FF65  0FFF               	dw	4095
   948  00FF67                     __end_of_PortF_Property:
   949                           	opt stack 0
   950  00FF67                     _PortE_Property:
   951                           	opt stack 0
   952  00FF67  0000               	dw	0
   953  00FF69                     __end_of_PortE_Property:
   954                           	opt stack 0
   955  00FF69                     _PortD_Property:
   956                           	opt stack 0
   957  00FF69  FFFF               	dw	65535
   958  00FF6B                     __end_of_PortD_Property:
   959                           	opt stack 0
   960  00FF6B                     _PortC_Property:
   961                           	opt stack 0
   962  00FF6B  FFF0               	dw	65520
   963  00FF6D                     __end_of_PortC_Property:
   964                           	opt stack 0
   965  00FF6D                     _PortB_Property:
   966                           	opt stack 0
   967  00FF6D  FF00               	dw	65280
   968  00FF6F                     __end_of_PortB_Property:
   969                           	opt stack 0
   970  00FF6F                     _PortA_Property:
   971                           	opt stack 0
   972  00FF6F  00FF               	dw	255
   973  00FF71                     __end_of_PortA_Property:
   974                           	opt stack 0
   975  0000                     _TMR0	set	4054
   976  0000                     _RCREG1	set	4015
   977  0000                     _TXREG1	set	4014
   978  0000                     _SPBRG1	set	4016
   979  0000                     _TXSTA1bits	set	4013
   980  0000                     _BAUDCON1bits	set	3966
   981  0000                     _RCSTA1	set	4012
   982  0000                     _TXSTA1	set	4013
   983  0000                     _TRISCbits	set	3988
   984  0000                     _PR2	set	4043
   985  0000                     _T2CONbits	set	4042
   986  0000                     _T0CONbits	set	4053
   987  0000                     _RCONbits	set	4048
   988  0000                     _OSCTUNEbits	set	3995
   989  0000                     _PIR3	set	4004
   990  0000                     _PIR2	set	4001
   991  0000                     _PIR1	set	3998
   992  0000                     _INTCONbits	set	4082
   993  0000                     _SSP2CON2bits	set	3947
   994  0000                     _SSP1CON2bits	set	4037
   995  0000                     _SSP1ADD	set	4040
   996  0000                     _ANCON0	set	4033
   997  0000                     _ADRESL	set	4035
   998  0000                     _ADRESH	set	4036
   999  0000                     _ADCON1bits	set	4033
  1000  0000                     _ADCON0bits	set	4034
  1001  0000                     _SSP2CON1bits	set	3948
  1002  0000                     _SSP1CON1bits	set	4038
  1003  0000                     _SSP2STATbits	set	3949
  1004  0000                     _SSP1STATbits	set	4039
  1005  0000                     _PIE3bits	set	4003
  1006  0000                     _PIE1bits	set	3997
  1007  0000                     _PIR3bits	set	4004
  1008  0000                     _PIR1bits	set	3998
  1009  0000                     _IPR3bits	set	4005
  1010  0000                     _IPR1bits	set	3999
  1011  0000                     _PORTFbits	set	3973
  1012  0000                     _SSP2CON2	set	3947
  1013  0000                     _SSP1CON2	set	4037
  1014  0000                     _SSP2BUF	set	3951
  1015  0000                     _SSP2CON1	set	3948
  1016  0000                     _SSP2STAT	set	3949
  1017  0000                     _SSP1BUF	set	4041
  1018  0000                     _SSP1CON1	set	4038
  1019  0000                     _SSP1STAT	set	4039
  1020  0000                     _LATG	set	3983
  1021  0000                     _LATF	set	3982
  1022  0000                     _LATE	set	3981
  1023  0000                     _LATD	set	3980
  1024  0000                     _LATC	set	3979
  1025  0000                     _LATB	set	3978
  1026  0000                     _LATA	set	3977
  1027  0000                     _TRISG	set	3992
  1028  0000                     _TRISF	set	3991
  1029  0000                     _TRISE	set	3990
  1030  0000                     _TRISD	set	3989
  1031  0000                     _TRISC	set	3988
  1032  0000                     _TRISB	set	3987
  1033  0000                     _TRISA	set	3986
  1034  0000                     _PORTG	set	3974
  1035  0000                     _PORTF	set	3973
  1036  0000                     _PORTE	set	3972
  1037  0000                     _PORTD	set	3971
  1038  0000                     _PORTC	set	3970
  1039  0000                     _PORTB	set	3969
  1040  0000                     _PORTA	set	3968
  1041  00FF71                     STR_8:
  1042  00FF71  54                 	db	84	;'T'
  1043  00FF72  6F                 	db	111	;'o'
  1044  00FF73  74                 	db	116	;'t'
  1045  00FF74  61                 	db	97	;'a'
  1046  00FF75  6C                 	db	108	;'l'
  1047  00FF76  20                 	db	32
  1048  00FF77  44                 	db	68	;'D'
  1049  00FF78  69                 	db	105	;'i'
  1050  00FF79  73                 	db	115	;'s'
  1051  00FF7A  74                 	db	116	;'t'
  1052  00FF7B  61                 	db	97	;'a'
  1053  00FF7C  6E                 	db	110	;'n'
  1054  00FF7D  63                 	db	99	;'c'
  1055  00FF7E  65                 	db	101	;'e'
  1056  00FF7F  3A                 	db	58	;':'
  1057  00FF80  25                 	db	37
  1058  00FF81  75                 	db	117	;'u'
  1059  00FF82  0A                 	db	10
  1060  00FF83  4C                 	db	76	;'L'
  1061  00FF84  65                 	db	101	;'e'
  1062  00FF85  66                 	db	102	;'f'
  1063  00FF86  74                 	db	116	;'t'
  1064  00FF87  20                 	db	32
  1065  00FF88  42                 	db	66	;'B'
  1066  00FF89  75                 	db	117	;'u'
  1067  00FF8A  6D                 	db	109	;'m'
  1068  00FF8B  70                 	db	112	;'p'
  1069  00FF8C  3A                 	db	58	;':'
  1070  00FF8D  25                 	db	37
  1071  00FF8E  75                 	db	117	;'u'
  1072  00FF8F  0A                 	db	10
  1073  00FF90  52                 	db	82	;'R'
  1074  00FF91  69                 	db	105	;'i'
  1075  00FF92  67                 	db	103	;'g'
  1076  00FF93  68                 	db	104	;'h'
  1077  00FF94  74                 	db	116	;'t'
  1078  00FF95  20                 	db	32
  1079  00FF96  42                 	db	66	;'B'
  1080  00FF97  75                 	db	117	;'u'
  1081  00FF98  6D                 	db	109	;'m'
  1082  00FF99  70                 	db	112	;'p'
  1083  00FF9A  3A                 	db	58	;':'
  1084  00FF9B  25                 	db	37
  1085  00FF9C  75                 	db	117	;'u'
  1086  00FF9D  0A                 	db	10
  1087  00FF9E  43                 	db	67	;'C'
  1088  00FF9F  6C                 	db	108	;'l'
  1089  00FFA0  6F                 	db	111	;'o'
  1090  00FFA1  73                 	db	115	;'s'
  1091  00FFA2  65                 	db	101	;'e'
  1092  00FFA3  73                 	db	115	;'s'
  1093  00FFA4  74                 	db	116	;'t'
  1094  00FFA5  20                 	db	32
  1095  00FFA6  57                 	db	87	;'W'
  1096  00FFA7  61                 	db	97	;'a'
  1097  00FFA8  6C                 	db	108	;'l'
  1098  00FFA9  6C                 	db	108	;'l'
  1099  00FFAA  3A                 	db	58	;':'
  1100  00FFAB  25                 	db	37
  1101  00FFAC  75                 	db	117	;'u'
  1102  00FFAD  0A                 	db	10
  1103  00FFAE  43                 	db	67	;'C'
  1104  00FFAF  6C                 	db	108	;'l'
  1105  00FFB0  6F                 	db	111	;'o'
  1106  00FFB1  73                 	db	115	;'s'
  1107  00FFB2  65                 	db	101	;'e'
  1108  00FFB3  73                 	db	115	;'s'
  1109  00FFB4  74                 	db	116	;'t'
  1110  00FFB5  20                 	db	32
  1111  00FFB6  41                 	db	65	;'A'
  1112  00FFB7  6E                 	db	110	;'n'
  1113  00FFB8  67                 	db	103	;'g'
  1114  00FFB9  6C                 	db	108	;'l'
  1115  00FFBA  65                 	db	101	;'e'
  1116  00FFBB  3A                 	db	58	;':'
  1117  00FFBC  25                 	db	37
  1118  00FFBD  75                 	db	117	;'u'
  1119  00FFBE  0A                 	db	10
  1120  00FFBF  00                 	db	0
  1121  00FFC0                     STR_2:
  1122  00FFC0  54                 	db	84	;'T'
  1123  00FFC1  6F                 	db	111	;'o'
  1124  00FFC2  74                 	db	116	;'t'
  1125  00FFC3  61                 	db	97	;'a'
  1126  00FFC4  6C                 	db	108	;'l'
  1127  00FFC5  20                 	db	32
  1128  00FFC6  44                 	db	68	;'D'
  1129  00FFC7  69                 	db	105	;'i'
  1130  00FFC8  73                 	db	115	;'s'
  1131  00FFC9  74                 	db	116	;'t'
  1132  00FFCA  61                 	db	97	;'a'
  1133  00FFCB  6E                 	db	110	;'n'
  1134  00FFCC  63                 	db	99	;'c'
  1135  00FFCD  65                 	db	101	;'e'
  1136  00FFCE  3A                 	db	58	;':'
  1137  00FFCF  25                 	db	37
  1138  00FFD0  75                 	db	117	;'u'
  1139  00FFD1  0A                 	db	10
  1140  00FFD2  4C                 	db	76	;'L'
  1141  00FFD3  65                 	db	101	;'e'
  1142  00FFD4  66                 	db	102	;'f'
  1143  00FFD5  74                 	db	116	;'t'
  1144  00FFD6  20                 	db	32
  1145  00FFD7  42                 	db	66	;'B'
  1146  00FFD8  75                 	db	117	;'u'
  1147  00FFD9  6D                 	db	109	;'m'
  1148  00FFDA  70                 	db	112	;'p'
  1149  00FFDB  3A                 	db	58	;':'
  1150  00FFDC  25                 	db	37
  1151  00FFDD  75                 	db	117	;'u'
  1152  00FFDE  0A                 	db	10
  1153  00FFDF  52                 	db	82	;'R'
  1154  00FFE0  69                 	db	105	;'i'
  1155  00FFE1  67                 	db	103	;'g'
  1156  00FFE2  68                 	db	104	;'h'
  1157  00FFE3  74                 	db	116	;'t'
  1158  00FFE4  20                 	db	32
  1159  00FFE5  42                 	db	66	;'B'
  1160  00FFE6  75                 	db	117	;'u'
  1161  00FFE7  6D                 	db	109	;'m'
  1162  00FFE8  70                 	db	112	;'p'
  1163  00FFE9  3A                 	db	58	;':'
  1164  00FFEA  25                 	db	37
  1165  00FFEB  75                 	db	117	;'u'
  1166  00FFEC  0A                 	db	10
  1167  00FFED  00                 	db	0
  1168  00FFEE                     STR_6:
  1169  00FFEE  44                 	db	68	;'D'
  1170  00FFEF  69                 	db	105	;'i'
  1171  00FFF0  73                 	db	115	;'s'
  1172  00FFF1  74                 	db	116	;'t'
  1173  00FFF2  61                 	db	97	;'a'
  1174  00FFF3  6E                 	db	110	;'n'
  1175  00FFF4  63                 	db	99	;'c'
  1176  00FFF5  65                 	db	101	;'e'
  1177  00FFF6  3A                 	db	58	;':'
  1178  00FFF7  20                 	db	32
  1179  00FFF8  25                 	db	37
  1180  00FFF9  64                 	db	100	;'d'
  1181  00FFFA  0A                 	db	10
  1182  00FFFB  00                 	db	0
  1183  00FFFC                     STR_1:
  1184  00FFFC  25                 	db	37
  1185  00FFFD  63                 	db	99	;'c'
  1186  00FFFE  00                 	db	0
  1187  0000                     
  1188                           ; #config settings
  1189  00FFFF  00                 	db	0	; dummy byte at the end
  1190  0000                     
  1191                           	psect	cinit
  1192  014412                     __pcinit:
  1193                           	opt stack 0
  1194  014412                     start_initialization:
  1195                           	opt stack 0
  1196  014412                     __initialization:
  1197                           	opt stack 0
  1198                           
  1199                           ; Initialize objects allocated to BANK3 (12 bytes)
  1200                           ; load TBLPTR registers with __pidataBANK3
  1201  014412  0E62               	movlw	low __pidataBANK3
  1202  014414  6EF6               	movwf	tblptrl,c
  1203  014416  0E64               	movlw	high __pidataBANK3
  1204  014418  6EF7               	movwf	tblptrh,c
  1205  01441A  0E01               	movlw	low (__pidataBANK3 shr (0+16))
  1206  01441C  6EF8               	movwf	tblptru,c
  1207  01441E  EE03  F0EC         	lfsr	0,__pdataBANK3
  1208  014422  EE10 F00C          	lfsr	1,12
  1209  014426                     copy_data0:
  1210  014426  0009               	tblrd		*+
  1211  014428  CFF5 FFEE          	movff	tablat,postinc0
  1212  01442C  50E5               	movf	postdec1,w,c
  1213  01442E  50E1               	movf	fsr1l,w,c
  1214  014430  E1FA               	bnz	copy_data0
  1215                           
  1216                           ; Initialize objects allocated to BANK0 (7 bytes)
  1217                           ; load TBLPTR registers with __pidataBANK0
  1218  014432  0EC8               	movlw	low __pidataBANK0
  1219  014434  6EF6               	movwf	tblptrl,c
  1220  014436  0E64               	movlw	high __pidataBANK0
  1221  014438  6EF7               	movwf	tblptrh,c
  1222  01443A  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  1223  01443C  6EF8               	movwf	tblptru,c
  1224  01443E  EE00  F0F9         	lfsr	0,__pdataBANK0
  1225  014442  EE10 F007          	lfsr	1,7
  1226  014446                     copy_data1:
  1227  014446  0009               	tblrd		*+
  1228  014448  CFF5 FFEE          	movff	tablat,postinc0
  1229  01444C  50E5               	movf	postdec1,w,c
  1230  01444E  50E1               	movf	fsr1l,w,c
  1231  014450  E1FA               	bnz	copy_data1
  1232                           
  1233                           ; Initialize objects allocated to COMRAM (10 bytes)
  1234                           ; load TBLPTR registers with __pidataCOMRAM
  1235  014452  0E92               	movlw	low __pidataCOMRAM
  1236  014454  6EF6               	movwf	tblptrl,c
  1237  014456  0E64               	movlw	high __pidataCOMRAM
  1238  014458  6EF7               	movwf	tblptrh,c
  1239  01445A  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1240  01445C  6EF8               	movwf	tblptru,c
  1241  01445E  EE00  F047         	lfsr	0,__pdataCOMRAM
  1242  014462  EE10 F00A          	lfsr	1,10
  1243  014466                     copy_data2:
  1244  014466  0009               	tblrd		*+
  1245  014468  CFF5 FFEE          	movff	tablat,postinc0
  1246  01446C  50E5               	movf	postdec1,w,c
  1247  01446E  50E1               	movf	fsr1l,w,c
  1248  014470  E1FA               	bnz	copy_data2
  1249                           
  1250                           ; Clear objects allocated to BIGRAM (300 bytes)
  1251  014472  EE04  F0CA         	lfsr	0,__pbssBIGRAM
  1252  014476  EE11 F02C          	lfsr	1,300
  1253  01447A                     clear_0:
  1254  01447A  6AEE               	clrf	postinc0,c
  1255  01447C  50E5               	movf	postdec1,w,c
  1256  01447E  50E1               	movf	fsr1l,w,c
  1257  014480  E1FC               	bnz	clear_0
  1258  014482  50E2               	movf	fsr1h,w,c
  1259  014484  E1FA               	bnz	clear_0
  1260                           
  1261                           ; Clear objects allocated to BANK4 (200 bytes)
  1262  014486  EE04  F000         	lfsr	0,__pbssBANK4
  1263  01448A  0EC8               	movlw	200
  1264  01448C                     clear_1:
  1265  01448C  6AEE               	clrf	postinc0,c
  1266  01448E  06E8               	decf	wreg,f,c
  1267  014490  E1FD               	bnz	clear_1
  1268                           
  1269                           ; Clear objects allocated to BANK3 (236 bytes)
  1270  014492  EE03  F000         	lfsr	0,__pbssBANK3
  1271  014496  0EEC               	movlw	236
  1272  014498                     clear_2:
  1273  014498  6AEE               	clrf	postinc0,c
  1274  01449A  06E8               	decf	wreg,f,c
  1275  01449C  E1FD               	bnz	clear_2
  1276                           
  1277                           ; Clear objects allocated to BANK0 (64 bytes)
  1278  01449E  EE00  F0B9         	lfsr	0,__pbssBANK0
  1279  0144A2  0E40               	movlw	64
  1280  0144A4                     clear_3:
  1281  0144A4  6AEE               	clrf	postinc0,c
  1282  0144A6  06E8               	decf	wreg,f,c
  1283  0144A8  E1FD               	bnz	clear_3
  1284                           
  1285                           ; Clear objects allocated to COMRAM (30 bytes)
  1286  0144AA  EE00  F029         	lfsr	0,__pbssCOMRAM
  1287  0144AE  0E1E               	movlw	30
  1288  0144B0                     clear_4:
  1289  0144B0  6AEE               	clrf	postinc0,c
  1290  0144B2  06E8               	decf	wreg,f,c
  1291  0144B4  E1FD               	bnz	clear_4
  1292  0144B6                     end_of_initialization:
  1293                           	opt stack 0
  1294  0144B6                     __end_of__initialization:
  1295                           	opt stack 0
  1296  0144B6  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1297  0144B8  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1298  0144BA  0100               	movlb	0
  1299  0144BC  EF3D  F0AC         	goto	_main	;jump to C main() function
  1300                           tblptru	equ	0xFF8
  1301                           tblptrh	equ	0xFF7
  1302                           tblptrl	equ	0xFF6
  1303                           tablat	equ	0xFF5
  1304                           postinc0	equ	0xFEE
  1305                           wreg	equ	0xFE8
  1306                           postdec1	equ	0xFE5
  1307                           fsr1h	equ	0xFE2
  1308                           fsr1l	equ	0xFE1
  1309                           
  1310                           	psect	bssCOMRAM
  1311  000029                     __pbssCOMRAM:
  1312                           	opt stack 0
  1313  000029                     _COUNTER:
  1314                           	opt stack 0
  1315  000029                     	ds	2
  1316  00002B                     HMI_GRender@a:
  1317                           	opt stack 0
  1318  00002B                     	ds	2
  1319  00002D                     _iRDropCaster:
  1320                           	opt stack 0
  1321  00002D                     	ds	1
  1322  00002E                     _iRDropLeft:
  1323                           	opt stack 0
  1324  00002E                     	ds	1
  1325  00002F                     _iRDropRight:
  1326                           	opt stack 0
  1327  00002F                     	ds	1
  1328  000030                     _iRVirtualWall:
  1329                           	opt stack 0
  1330  000030                     	ds	1
  1331  000031                     _iRCliffR:
  1332                           	opt stack 0
  1333  000031                     	ds	1
  1334  000032                     _iRCliffFR:
  1335                           	opt stack 0
  1336  000032                     	ds	1
  1337  000033                     _iRCliffFL:
  1338                           	opt stack 0
  1339  000033                     	ds	1
  1340  000034                     _iRCliffL:
  1341                           	opt stack 0
  1342  000034                     	ds	1
  1343  000035                     _iRWall:
  1344                           	opt stack 0
  1345  000035                     	ds	1
  1346  000036                     _iRBumpDrop:
  1347                           	opt stack 0
  1348  000036                     	ds	1
  1349  000037                     _iRScriptIndex:
  1350                           	opt stack 0
  1351  000037                     	ds	1
  1352  000038                     _u:
  1353                           	opt stack 0
  1354  000038                     	ds	1
  1355  000039                     _j:
  1356                           	opt stack 0
  1357  000039                     	ds	1
  1358  00003A                     _i:
  1359                           	opt stack 0
  1360  00003A                     	ds	1
  1361  00003B                     rand@screw:
  1362                           	opt stack 0
  1363  00003B                     	ds	1
  1364  00003C                     _ADC_Initialised:
  1365                           	opt stack 0
  1366  00003C                     	ds	1
  1367  00003D                     OutSeg@a:
  1368                           	opt stack 0
  1369  00003D                     	ds	1
  1370  00003E                     OutSeg@segset:
  1371                           	opt stack 0
  1372  00003E                     	ds	1
  1373  00003F                     OutSeg@cur:
  1374                           	opt stack 0
  1375  00003F                     	ds	1
  1376  000040                     _I2C1T:
  1377                           	opt stack 0
  1378  000040                     	ds	7
  1379                           tblptru	equ	0xFF8
  1380                           tblptrh	equ	0xFF7
  1381                           tblptrl	equ	0xFF6
  1382                           tablat	equ	0xFF5
  1383                           postinc0	equ	0xFEE
  1384                           wreg	equ	0xFE8
  1385                           postdec1	equ	0xFE5
  1386                           fsr1h	equ	0xFE2
  1387                           fsr1l	equ	0xFE1
  1388                           
  1389                           	psect	dataCOMRAM
  1390  000047                     __pdataCOMRAM:
  1391                           	opt stack 0
  1392  000047                     _gCursor:
  1393                           	opt stack 0
  1394  000047                     	ds	4
  1395  00004B                     _Bus_State:
  1396                           	opt stack 0
  1397  00004B                     	ds	1
  1398  00004C                     	ds	1
  1399  00004D                     	ds	1
  1400  00004E                     	ds	1
  1401  00004F                     _l:
  1402                           	opt stack 0
  1403  00004F                     	ds	1
  1404  000050                     _w:
  1405                           	opt stack 0
  1406  000050                     	ds	1
  1407                           tblptru	equ	0xFF8
  1408                           tblptrh	equ	0xFF7
  1409                           tblptrl	equ	0xFF6
  1410                           tablat	equ	0xFF5
  1411                           postinc0	equ	0xFEE
  1412                           wreg	equ	0xFE8
  1413                           postdec1	equ	0xFE5
  1414                           fsr1h	equ	0xFE2
  1415                           fsr1l	equ	0xFE1
  1416                           
  1417                           	psect	bssBANK0
  1418  0000B9                     __pbssBANK0:
  1419                           	opt stack 0
  1420  0000B9                     _gISR:
  1421                           	opt stack 0
  1422  0000B9                     	ds	3
  1423  0000BC                     _lQueue:
  1424                           	opt stack 0
  1425  0000BC                     	ds	3
  1426  0000BF                     _lStepFunction:
  1427                           	opt stack 0
  1428  0000BF                     	ds	3
  1429  0000C2                     _IRValue:
  1430                           	opt stack 0
  1431  0000C2                     	ds	2
  1432  0000C4                     _Stepstomin:
  1433                           	opt stack 0
  1434  0000C4                     	ds	2
  1435  0000C6                     _StepRotate:
  1436                           	opt stack 0
  1437  0000C6                     	ds	2
  1438  0000C8                     _selectedMode4:
  1439                           	opt stack 0
  1440  0000C8                     	ds	2
  1441  0000CA                     _selectedMode3:
  1442                           	opt stack 0
  1443  0000CA                     	ds	2
  1444  0000CC                     _selectedMode2:
  1445                           	opt stack 0
  1446  0000CC                     	ds	2
  1447  0000CE                     _selectedMode1:
  1448                           	opt stack 0
  1449  0000CE                     	ds	2
  1450  0000D0                     _angleTotal:
  1451                           	opt stack 0
  1452  0000D0                     	ds	2
  1453  0000D2                     _distanceTotal:
  1454                           	opt stack 0
  1455  0000D2                     	ds	2
  1456  0000D4                     _pShiftVal:
  1457                           	opt stack 0
  1458  0000D4                     	ds	2
  1459  0000D6                     _val:
  1460                           	opt stack 0
  1461  0000D6                     	ds	2
  1462  0000D8                     _lMotor:
  1463                           	opt stack 0
  1464  0000D8                     	ds	2
  1465  0000DA                     _lCurrent:
  1466                           	opt stack 0
  1467  0000DA                     	ds	2
  1468  0000DC                     _gBackcolour:
  1469                           	opt stack 0
  1470  0000DC                     	ds	2
  1471  0000DE                     SPI_Send9@dat:
  1472                           	opt stack 0
  1473  0000DE                     	ds	2
  1474  0000E0                     _iRBumpLeft:
  1475                           	opt stack 0
  1476  0000E0                     	ds	1
  1477  0000E1                     _iRBumpRight:
  1478                           	opt stack 0
  1479  0000E1                     	ds	1
  1480  0000E2                     Event_TestButton@j:
  1481                           	opt stack 0
  1482  0000E2                     	ds	1
  1483  0000E3                     Timer2_Init@PRE:
  1484                           	opt stack 0
  1485  0000E3                     	ds	1
  1486  0000E4                     Timer2_Init@INDEX:
  1487                           	opt stack 0
  1488  0000E4                     	ds	1
  1489  0000E5                     Timer0_Init@PRE:
  1490                           	opt stack 0
  1491  0000E5                     	ds	1
  1492  0000E6                     _INDEX:
  1493                           	opt stack 0
  1494  0000E6                     	ds	1
  1495  0000E7                     _lBufferY:
  1496                           	opt stack 0
  1497  0000E7                     	ds	1
  1498  0000E8                     _lBufferX:
  1499                           	opt stack 0
  1500  0000E8                     	ds	1
  1501  0000E9                     _clearall:
  1502                           	opt stack 0
  1503  0000E9                     	ds	1
  1504  0000EA                     _PortC:
  1505                           	opt stack 0
  1506  0000EA                     	ds	10
  1507  0000F4                     _ADC_AN0:
  1508                           	opt stack 0
  1509  0000F4                     	ds	5
  1510                           tblptru	equ	0xFF8
  1511                           tblptrh	equ	0xFF7
  1512                           tblptrl	equ	0xFF6
  1513                           tablat	equ	0xFF5
  1514                           postinc0	equ	0xFEE
  1515                           wreg	equ	0xFE8
  1516                           postdec1	equ	0xFE5
  1517                           fsr1h	equ	0xFE2
  1518                           fsr1l	equ	0xFE1
  1519                           
  1520                           	psect	dataBANK0
  1521  0000F9                     __pdataBANK0:
  1522                           	opt stack 0
  1523  0000F9                     _TimerX:
  1524                           	opt stack 0
  1525  0000F9                     	ds	2
  1526  0000FB                     _MinDist:
  1527                           	opt stack 0
  1528  0000FB                     	ds	2
  1529  0000FD                     _gForecolour:
  1530                           	opt stack 0
  1531  0000FD                     	ds	2
  1532  0000FF                     _change:
  1533                           	opt stack 0
  1534  0000FF                     	ds	1
  1535                           tblptru	equ	0xFF8
  1536                           tblptrh	equ	0xFF7
  1537                           tblptrl	equ	0xFF6
  1538                           tablat	equ	0xFF5
  1539                           postinc0	equ	0xFEE
  1540                           wreg	equ	0xFE8
  1541                           postdec1	equ	0xFE5
  1542                           fsr1h	equ	0xFE2
  1543                           fsr1l	equ	0xFE1
  1544                           
  1545                           	psect	bssBANK3
  1546  000300                     __pbssBANK3:
  1547                           	opt stack 0
  1548  000300                     _stepsToMinDegrees:
  1549                           	opt stack 0
  1550  000300                     	ds	4
  1551  000304                     _iRAngleSS:
  1552                           	opt stack 0
  1553  000304                     	ds	4
  1554  000308                     _iRDistanceSS:
  1555                           	opt stack 0
  1556  000308                     	ds	4
  1557  00030C                     Timer2_Init@DIV:
  1558                           	opt stack 0
  1559  00030C                     	ds	4
  1560  000310                     Timer0_Init@DIV:
  1561                           	opt stack 0
  1562  000310                     	ds	4
  1563  000314                     _I2C2_More:
  1564                           	opt stack 0
  1565  000314                     	ds	3
  1566  000317                     _I2C1_More:
  1567                           	opt stack 0
  1568  000317                     	ds	3
  1569  00031A                     _I2C2_Done:
  1570                           	opt stack 0
  1571  00031A                     	ds	3
  1572  00031D                     _I2C1_Done:
  1573                           	opt stack 0
  1574  00031D                     	ds	3
  1575  000320                     _mode:
  1576                           	opt stack 0
  1577  000320                     	ds	2
  1578  000322                     _dip:
  1579                           	opt stack 0
  1580  000322                     	ds	2
  1581  000324                     _iRAngle:
  1582                           	opt stack 0
  1583  000324                     	ds	2
  1584  000326                     _iRDistance:
  1585                           	opt stack 0
  1586  000326                     	ds	2
  1587  000328                     _HMIBoard:
  1588                           	opt stack 0
  1589  000328                     	ds	58
  1590  000362                     _SPI1:
  1591                           	opt stack 0
  1592  000362                     	ds	11
  1593  00036D                     _SPI2:
  1594                           	opt stack 0
  1595  00036D                     	ds	11
  1596  000378                     _DIPSwitch:
  1597                           	opt stack 0
  1598  000378                     	ds	10
  1599  000382                     _TestButton:
  1600                           	opt stack 0
  1601  000382                     	ds	10
  1602  00038C                     _PortG:
  1603                           	opt stack 0
  1604  00038C                     	ds	10
  1605  000396                     _PortE:
  1606                           	opt stack 0
  1607  000396                     	ds	10
  1608  0003A0                     _PortD:
  1609                           	opt stack 0
  1610  0003A0                     	ds	10
  1611  0003AA                     _PortB:
  1612                           	opt stack 0
  1613  0003AA                     	ds	10
  1614  0003B4                     _PortA:
  1615                           	opt stack 0
  1616  0003B4                     	ds	10
  1617  0003BE                     _PortF:
  1618                           	opt stack 0
  1619  0003BE                     	ds	10
  1620  0003C8                     _I2C2T:
  1621                           	opt stack 0
  1622  0003C8                     	ds	7
  1623  0003CF                     _Stepper:
  1624                           	opt stack 0
  1625  0003CF                     	ds	6
  1626  0003D5                     _ADC_AN3:
  1627                           	opt stack 0
  1628  0003D5                     	ds	5
  1629  0003DA                     _ADC_AN2:
  1630                           	opt stack 0
  1631  0003DA                     	ds	5
  1632  0003DF                     _ADC_AN1:
  1633                           	opt stack 0
  1634  0003DF                     	ds	5
  1635  0003E4                     LCD_DrawRectangle@p4:
  1636                           	opt stack 0
  1637  0003E4                     	ds	4
  1638  0003E8                     LCD_DrawRectangle@p2:
  1639                           	opt stack 0
  1640  0003E8                     	ds	4
  1641                           tblptru	equ	0xFF8
  1642                           tblptrh	equ	0xFF7
  1643                           tblptrl	equ	0xFF6
  1644                           tablat	equ	0xFF5
  1645                           postinc0	equ	0xFEE
  1646                           wreg	equ	0xFE8
  1647                           postdec1	equ	0xFE5
  1648                           fsr1h	equ	0xFE2
  1649                           fsr1l	equ	0xFE1
  1650                           
  1651                           	psect	dataBANK3
  1652  0003EC                     __pdataBANK3:
  1653                           	opt stack 0
  1654  0003EC                     Console_Render@F6956:
  1655                           	opt stack 0
  1656  0003EC                     	ds	4
  1657  0003F0                     _gLineSize:
  1658                           	opt stack 0
  1659  0003F0                     	ds	4
  1660  0003F4                     _gCharSize:
  1661                           	opt stack 0
  1662  0003F4                     	ds	4
  1663                           tblptru	equ	0xFF8
  1664                           tblptrh	equ	0xFF7
  1665                           tblptrl	equ	0xFF6
  1666                           tablat	equ	0xFF5
  1667                           postinc0	equ	0xFEE
  1668                           wreg	equ	0xFE8
  1669                           postdec1	equ	0xFE5
  1670                           fsr1h	equ	0xFE2
  1671                           fsr1l	equ	0xFE1
  1672                           
  1673                           	psect	bssBANK4
  1674  000400                     __pbssBANK4:
  1675                           	opt stack 0
  1676  000400                     _lCBuffer:
  1677                           	opt stack 0
  1678  000400                     	ds	30
  1679  00041E                     _iRScriptStack:
  1680                           	opt stack 0
  1681  00041E                     	ds	100
  1682  000482                     Console_MakeField@Fill:
  1683                           	opt stack 0
  1684  000482                     	ds	70
  1685                           tblptru	equ	0xFF8
  1686                           tblptrh	equ	0xFF7
  1687                           tblptrl	equ	0xFF6
  1688                           tablat	equ	0xFF5
  1689                           postinc0	equ	0xFEE
  1690                           wreg	equ	0xFE8
  1691                           postdec1	equ	0xFE5
  1692                           fsr1h	equ	0xFE2
  1693                           fsr1l	equ	0xFE1
  1694                           
  1695                           	psect	bssBIGRAM
  1696  0004CA                     __pbssBIGRAM:
  1697                           	opt stack 0
  1698  0004CA                     _lBuffer:
  1699                           	opt stack 0
  1700  0004CA                     	ds	300
  1701                           tblptru	equ	0xFF8
  1702                           tblptrh	equ	0xFF7
  1703                           tblptrl	equ	0xFF6
  1704                           tablat	equ	0xFF5
  1705                           postinc0	equ	0xFEE
  1706                           wreg	equ	0xFE8
  1707                           postdec1	equ	0xFE5
  1708                           fsr1h	equ	0xFE2
  1709                           fsr1l	equ	0xFE1
  1710                           
  1711                           	psect	cstackBANK4
  1712  0004C8                     __pcstackBANK4:
  1713                           	opt stack 0
  1714  0004C8                     ??_main:
  1715                           
  1716                           ; 1 bytes @ 0x0
  1717  0004C8                     	ds	2
  1718                           tblptru	equ	0xFF8
  1719                           tblptrh	equ	0xFF7
  1720                           tblptrl	equ	0xFF6
  1721                           tablat	equ	0xFF5
  1722                           postinc0	equ	0xFEE
  1723                           wreg	equ	0xFE8
  1724                           postdec1	equ	0xFE5
  1725                           fsr1h	equ	0xFE2
  1726                           fsr1l	equ	0xFE1
  1727                           
  1728                           	psect	cstackBANK3
  1729  0003F8                     __pcstackBANK3:
  1730                           	opt stack 0
  1731  0003F8                     ??_mode1:
  1732  0003F8                     _mode4$15575:
  1733                           	opt stack 0
  1734                           
  1735                           ; 4 bytes @ 0x0
  1736  0003F8                     	ds	2
  1737  0003FA                     mode1@moveto:
  1738                           	opt stack 0
  1739                           
  1740                           ; 2 bytes @ 0x2
  1741  0003FA                     	ds	2
  1742  0003FC                     _mode1$15574:
  1743                           	opt stack 0
  1744                           
  1745                           ; 4 bytes @ 0x4
  1746  0003FC                     	ds	4
  1747                           tblptru	equ	0xFF8
  1748                           tblptrh	equ	0xFF7
  1749                           tblptrl	equ	0xFF6
  1750                           tablat	equ	0xFF5
  1751                           postinc0	equ	0xFEE
  1752                           wreg	equ	0xFE8
  1753                           postdec1	equ	0xFE5
  1754                           fsr1h	equ	0xFE2
  1755                           fsr1l	equ	0xFE1
  1756                           
  1757                           	psect	cstackBANK2
  1758  000200                     __pcstackBANK2:
  1759                           	opt stack 0
  1760  000200                     irobot_query_and_update@TXArray:
  1761                           	opt stack 0
  1762                           
  1763                           ; 256 bytes @ 0x0
  1764  000200                     	ds	256
  1765                           tblptru	equ	0xFF8
  1766                           tblptrh	equ	0xFF7
  1767                           tblptrl	equ	0xFF6
  1768                           tablat	equ	0xFF5
  1769                           postinc0	equ	0xFEE
  1770                           wreg	equ	0xFE8
  1771                           postdec1	equ	0xFE5
  1772                           fsr1h	equ	0xFE2
  1773                           fsr1l	equ	0xFE1
  1774                           
  1775                           	psect	cstackBANK1
  1776  000100                     __pcstackBANK1:
  1777                           	opt stack 0
  1778  000100                     ??___fltol:
  1779  000100                     irobot_query_and_update@RXArray:
  1780                           	opt stack 0
  1781                           
  1782                           ; 256 bytes @ 0x0
  1783  000100                     	ds	256
  1784                           tblptru	equ	0xFF8
  1785                           tblptrh	equ	0xFF7
  1786                           tblptrl	equ	0xFF6
  1787                           tablat	equ	0xFF5
  1788                           postinc0	equ	0xFEE
  1789                           wreg	equ	0xFE8
  1790                           postdec1	equ	0xFE5
  1791                           fsr1h	equ	0xFE2
  1792                           fsr1l	equ	0xFE1
  1793                           
  1794                           	psect	cstackBANK0
  1795  000060                     __pcstackBANK0:
  1796                           	opt stack 0
  1797  000060                     ??_Console_ClearCursor:
  1798  000060                     ??_ADC_SetChannel:
  1799  000060                     ??_ADC_ConversionTime:
  1800  000060                     ??_ADC_SetupIO:
  1801  000060                     ??_sort_iRBumpDrop:
  1802  000060                     ?_load_iRScriptStack:
  1803                           	opt stack 0
  1804  000060                     ??_Console_Init:
  1805  000060                     ??_Console_NewLine:
  1806  000060                     ??_Console_FormFeed:
  1807  000060                     ??_HMI_SetButton:
  1808  000060                     ?_GetPortProperties:
  1809                           	opt stack 0
  1810  000060                     ?_GetPortPORT:
  1811                           	opt stack 0
  1812  000060                     ?_GetPortTRIS:
  1813                           	opt stack 0
  1814  000060                     ?_twos_complement_of:
  1815                           	opt stack 0
  1816  000060                     ?___wmul:
  1817                           	opt stack 0
  1818  000060                     ?___awdiv:
  1819                           	opt stack 0
  1820  000060                     ?___lwdiv:
  1821                           	opt stack 0
  1822  000060                     ?___lldiv:
  1823                           	opt stack 0
  1824  000060                     ?___xxtofl:
  1825                           	opt stack 0
  1826  000060                     Mode_Set@pMode:
  1827                           	opt stack 0
  1828  000060                     ToSegment@pCHR:
  1829                           	opt stack 0
  1830  000060                     HMI_SetBar@pValue:
  1831                           	opt stack 0
  1832  000060                     ADC_ClockDivision@pDivide:
  1833                           	opt stack 0
  1834  000060                     get_packet_size@packetID:
  1835                           	opt stack 0
  1836  000060                     eusart_putch@eusartSendChar:
  1837                           	opt stack 0
  1838  000060                     Port_GetPin@pInput:
  1839                           	opt stack 0
  1840  000060                     Port_GetQuad@pInput:
  1841                           	opt stack 0
  1842  000060                     SPI_DisableISR@pInput:
  1843                           	opt stack 0
  1844  000060                     SPI_DCS@pInput:
  1845                           	opt stack 0
  1846  000060                     SPI_Send@pInput:
  1847                           	opt stack 0
  1848  000060                     Byte_SetBit@pInput:
  1849                           	opt stack 0
  1850  000060                     Byte_GetBit@pInput:
  1851                           	opt stack 0
  1852  000060                     Byte_SetZone@pInput:
  1853                           	opt stack 0
  1854  000060                     Byte_GetZone@pInput:
  1855                           	opt stack 0
  1856  000060                     Byte_SetByte@pInput:
  1857                           	opt stack 0
  1858  000060                     delay_ms@ms:
  1859                           	opt stack 0
  1860  000060                     delay_us@us:
  1861                           	opt stack 0
  1862  000060                     reverse@input:
  1863                           	opt stack 0
  1864  000060                     twos_complement_of@complementValue:
  1865                           	opt stack 0
  1866  000060                     ___wmul@multiplier:
  1867                           	opt stack 0
  1868  000060                     ___awdiv@dividend:
  1869                           	opt stack 0
  1870  000060                     ___lwdiv@dividend:
  1871                           	opt stack 0
  1872  000060                     MXK_Queue@pCallback:
  1873                           	opt stack 0
  1874  000060                     Timer0_Start@pFunction:
  1875                           	opt stack 0
  1876  000060                     ___lldiv@dividend:
  1877                           	opt stack 0
  1878  000060                     ___xxtofl@val:
  1879                           	opt stack 0
  1880                           
  1881                           ; 4 bytes @ 0x0
  1882  000060                     	ds	1
  1883  000061                     ADC_SetChannel@pChannel:
  1884                           	opt stack 0
  1885  000061                     ADC_ClockDivision@reg:
  1886                           	opt stack 0
  1887  000061                     ADC_ConversionTime@pCount:
  1888                           	opt stack 0
  1889  000061                     rx_assign@packetIDValue:
  1890                           	opt stack 0
  1891  000061                     irobot_song_play@songNumber:
  1892                           	opt stack 0
  1893  000061                     HMI_SetSegments@pString:
  1894                           	opt stack 0
  1895                           
  1896                           ; 2 bytes @ 0x1
  1897  000061                     	ds	1
  1898  000062                     GetPortProperties@pInput:
  1899                           	opt stack 0
  1900  000062                     GetPortPORT@pInput:
  1901                           	opt stack 0
  1902  000062                     GetPortTRIS@pInput:
  1903                           	opt stack 0
  1904  000062                     Port_GetPin@pPin:
  1905                           	opt stack 0
  1906  000062                     Port_GetQuad@pQuad:
  1907                           	opt stack 0
  1908  000062                     SPI_Send@pData:
  1909                           	opt stack 0
  1910  000062                     Byte_SetBit@pBit:
  1911                           	opt stack 0
  1912  000062                     Byte_GetBit@pBit:
  1913                           	opt stack 0
  1914  000062                     Byte_SetZone@pMax:
  1915                           	opt stack 0
  1916  000062                     Byte_GetZone@pMax:
  1917                           	opt stack 0
  1918  000062                     Byte_SetByte@pValue:
  1919                           	opt stack 0
  1920  000062                     Console_Init@x:
  1921                           	opt stack 0
  1922  000062                     Console_FormFeed@x:
  1923                           	opt stack 0
  1924  000062                     ADC_SetupIO@pChannel:
  1925                           	opt stack 0
  1926  000062                     ADC_ClockDivision@unfound:
  1927                           	opt stack 0
  1928  000062                     rx_assign@byteNumber:
  1929                           	opt stack 0
  1930  000062                     reverse@length:
  1931                           	opt stack 0
  1932  000062                     ADC_Start@pInput:
  1933                           	opt stack 0
  1934  000062                     ___wmul@multiplicand:
  1935                           	opt stack 0
  1936  000062                     ___awdiv@divisor:
  1937                           	opt stack 0
  1938  000062                     ___lwdiv@divisor:
  1939                           	opt stack 0
  1940  000062                     delay_ms@u:
  1941                           	opt stack 0
  1942  000062                     delay_us@u:
  1943                           	opt stack 0
  1944  000062                     HMI_SetButton@reindex:
  1945                           	opt stack 0
  1946                           
  1947                           ; 4 bytes @ 0x2
  1948  000062                     	ds	1
  1949  000063                     ??_Port_GetPin:
  1950  000063                     ??_Port_GetQuad:
  1951  000063                     ??_Byte_GetBit:
  1952  000063                     ??_rx_assign:
  1953  000063                     LCD_Write@mode:
  1954                           	opt stack 0
  1955  000063                     Byte_SetBit@pValue:
  1956                           	opt stack 0
  1957  000063                     Byte_SetZone@pChunk:
  1958                           	opt stack 0
  1959  000063                     Byte_GetZone@pChunk:
  1960                           	opt stack 0
  1961  000063                     Console_Init@y:
  1962                           	opt stack 0
  1963  000063                     Console_FormFeed@y:
  1964                           	opt stack 0
  1965  000063                     OutSeg@pSegment:
  1966                           	opt stack 0
  1967  000063                     ADC_SetupIO@MASK:
  1968                           	opt stack 0
  1969  000063                     Motor_Move@pMotor:
  1970                           	opt stack 0
  1971                           
  1972                           ; 2 bytes @ 0x3
  1973  000063                     	ds	1
  1974  000064                     ??_Byte_SetBit:
  1975  000064                     ??_Console_IncrementCursor:
  1976  000064                     ??_OutSeg:
  1977  000064                     ??_ADC_Start:
  1978  000064                     ??___xxtofl:
  1979  000064                     LCD_Write@value:
  1980                           	opt stack 0
  1981  000064                     Byte_GetBit@Output:
  1982                           	opt stack 0
  1983  000064                     Byte_SetZone@pChunkSize:
  1984                           	opt stack 0
  1985  000064                     Byte_GetZone@pChunkSize:
  1986                           	opt stack 0
  1987  000064                     reverse@tempVar:
  1988                           	opt stack 0
  1989  000064                     ___awdiv@counter:
  1990                           	opt stack 0
  1991  000064                     ___lwdiv@counter:
  1992                           	opt stack 0
  1993  000064                     HMI_SetSegments@in:
  1994                           	opt stack 0
  1995  000064                     ADC_Init@pInput:
  1996                           	opt stack 0
  1997  000064                     ___wmul@product:
  1998                           	opt stack 0
  1999  000064                     ___lldiv@divisor:
  2000                           	opt stack 0
  2001                           
  2002                           ; 4 bytes @ 0x4
  2003  000064                     	ds	1
  2004  000065                     ??_Byte_GetZone:
  2005  000065                     ?_Console_MakeField:
  2006                           	opt stack 0
  2007  000065                     Set_Addr_Window@ys:
  2008                           	opt stack 0
  2009  000065                     Set_Rotation@m:
  2010                           	opt stack 0
  2011  000065                     Port_GetPin@Output:
  2012                           	opt stack 0
  2013  000065                     Port_GetQuad@Output:
  2014                           	opt stack 0
  2015  000065                     Byte_SetZone@pValue:
  2016                           	opt stack 0
  2017  000065                     rx_assign@packetID:
  2018                           	opt stack 0
  2019  000065                     ___awdiv@sign:
  2020                           	opt stack 0
  2021  000065                     LCD_Word_Write@value:
  2022                           	opt stack 0
  2023  000065                     reverse@iterator:
  2024                           	opt stack 0
  2025  000065                     Motor_Move@pDelta:
  2026                           	opt stack 0
  2027  000065                     ___lwdiv@quotient:
  2028                           	opt stack 0
  2029                           
  2030                           ; 2 bytes @ 0x5
  2031  000065                     	ds	1
  2032  000066                     ?_irobot_query_and_update:
  2033                           	opt stack 0
  2034  000066                     ??_Byte_SetZone:
  2035  000066                     ??_getMode:
  2036  000066                     Set_Addr_Window@xe:
  2037                           	opt stack 0
  2038  000066                     Set_Rotation@rotation:
  2039                           	opt stack 0
  2040  000066                     Byte_GetZone@MASK:
  2041                           	opt stack 0
  2042  000066                     OutSeg@pInput:
  2043                           	opt stack 0
  2044  000066                     HMI_SetButton@pValue:
  2045                           	opt stack 0
  2046  000066                     ADC_Init@pChannel:
  2047                           	opt stack 0
  2048  000066                     MXK_BlockSwitchTo@CUR:
  2049                           	opt stack 0
  2050  000066                     MXK_SwitchTo@CUR:
  2051                           	opt stack 0
  2052  000066                     ___awdiv@quotient:
  2053                           	opt stack 0
  2054                           
  2055                           ; 2 bytes @ 0x6
  2056  000066                     	ds	1
  2057  000067                     ??_Console_MakeField:
  2058  000067                     ?___lwmod:
  2059                           	opt stack 0
  2060  000067                     Set_Addr_Window@ye:
  2061                           	opt stack 0
  2062  000067                     Byte_GetZone@Offset:
  2063                           	opt stack 0
  2064  000067                     OutSeg@out:
  2065                           	opt stack 0
  2066  000067                     HMI_SetButton@v:
  2067                           	opt stack 0
  2068  000067                     MXK_BlockSwitchTo@pModule:
  2069                           	opt stack 0
  2070  000067                     MXK_SwitchTo@pModule:
  2071                           	opt stack 0
  2072  000067                     ___lwmod@dividend:
  2073                           	opt stack 0
  2074                           
  2075                           ; 2 bytes @ 0x7
  2076  000067                     	ds	1
  2077  000068                     ??_Console_Tab:
  2078  000068                     Set_Addr_Window@xs:
  2079                           	opt stack 0
  2080  000068                     Byte_GetZone@Output:
  2081                           	opt stack 0
  2082  000068                     ___xxtofl@sign:
  2083                           	opt stack 0
  2084  000068                     HMI_Render@a:
  2085                           	opt stack 0
  2086  000068                     ___lldiv@quotient:
  2087                           	opt stack 0
  2088                           
  2089                           ; 4 bytes @ 0x8
  2090  000068                     	ds	1
  2091  000069                     Byte_SetZone@Offset:
  2092                           	opt stack 0
  2093  000069                     ___xxtofl@exp:
  2094                           	opt stack 0
  2095  000069                     LCD_Fill@pColour:
  2096                           	opt stack 0
  2097  000069                     LCD_FillRectangle@pColour:
  2098                           	opt stack 0
  2099  000069                     Byte_GetPair@pInput:
  2100                           	opt stack 0
  2101  000069                     Console_MakeField@Index:
  2102                           	opt stack 0
  2103  000069                     ___lwmod@divisor:
  2104                           	opt stack 0
  2105                           
  2106                           ; 2 bytes @ 0x9
  2107  000069                     	ds	1
  2108  00006A                     ??_load_iRScriptStack:
  2109  00006A                     Byte_SetZone@MASK:
  2110                           	opt stack 0
  2111  00006A                     ___xxtofl@arg:
  2112                           	opt stack 0
  2113                           
  2114                           ; 4 bytes @ 0xA
  2115  00006A                     	ds	1
  2116  00006B                     LCD_Fill@i:
  2117                           	opt stack 0
  2118  00006B                     Byte_GetPair@pPair:
  2119                           	opt stack 0
  2120  00006B                     Console_MakeField@pInput:
  2121                           	opt stack 0
  2122  00006B                     ___lwmod@counter:
  2123                           	opt stack 0
  2124  00006B                     Byte_SetPair@pInput:
  2125                           	opt stack 0
  2126  00006B                     Byte_SetQuad@pInput:
  2127                           	opt stack 0
  2128  00006B                     LCD_FillRectangle@pPoint:
  2129                           	opt stack 0
  2130                           
  2131                           ; 4 bytes @ 0xB
  2132  00006B                     	ds	1
  2133  00006C                     LCD_Fill@j:
  2134                           	opt stack 0
  2135  00006C                     ___lldiv@counter:
  2136                           	opt stack 0
  2137  00006C                     Word_GetPair@pInput:
  2138                           	opt stack 0
  2139  00006C                     itos@input:
  2140                           	opt stack 0
  2141  00006C                     Console_MakeField@Column:
  2142                           	opt stack 0
  2143  00006C                     load_iRScriptStack@loadByte:
  2144                           	opt stack 0
  2145                           
  2146                           ; 2 bytes @ 0xC
  2147  00006C                     	ds	1
  2148  00006D                     Byte_SetPair@pPair:
  2149                           	opt stack 0
  2150  00006D                     Byte_SetQuad@pQuad:
  2151                           	opt stack 0
  2152  00006D                     Console_Tab@t:
  2153                           	opt stack 0
  2154  00006D                     Timer0_Init@pFrequency:
  2155                           	opt stack 0
  2156  00006D                     Timer2_Init@pFrequency:
  2157                           	opt stack 0
  2158                           
  2159                           ; 4 bytes @ 0xD
  2160  00006D                     	ds	1
  2161  00006E                     ?___fldiv:
  2162                           	opt stack 0
  2163  00006E                     Byte_SetPair@pValue:
  2164                           	opt stack 0
  2165  00006E                     Byte_SetQuad@pValue:
  2166                           	opt stack 0
  2167  00006E                     Word_GetPair@pPair:
  2168                           	opt stack 0
  2169  00006E                     Console_Tab@i:
  2170                           	opt stack 0
  2171  00006E                     load_iRScriptStack@bytesToLoad:
  2172                           	opt stack 0
  2173  00006E                     itos@destination:
  2174                           	opt stack 0
  2175  00006E                     _Console_MakeField$10974:
  2176                           	opt stack 0
  2177  00006E                     ___fldiv@b:
  2178                           	opt stack 0
  2179                           
  2180                           ; 4 bytes @ 0xE
  2181  00006E                     	ds	1
  2182  00006F                     Console_Tab@c:
  2183                           	opt stack 0
  2184  00006F                     load_iRScriptStack@i:
  2185                           	opt stack 0
  2186  00006F                     Port_SetPin@pInput:
  2187                           	opt stack 0
  2188  00006F                     Port_Set@pInput:
  2189                           	opt stack 0
  2190  00006F                     SPI_MinSpeed@pInput:
  2191                           	opt stack 0
  2192  00006F                     SPI_MaxSpeed@pInput:
  2193                           	opt stack 0
  2194  00006F                     Word_SetPair@pInput:
  2195                           	opt stack 0
  2196  00006F                     PortProperty_Valid@pInput:
  2197                           	opt stack 0
  2198  00006F                     LCD_FillRectangle@pSize:
  2199                           	opt stack 0
  2200                           
  2201                           ; 4 bytes @ 0xF
  2202  00006F                     	ds	1
  2203  000070                     ??_irobot_query_and_update:
  2204  000070                     ??_Console_PrintChar:
  2205  000070                     Console_MakeField@x:
  2206                           	opt stack 0
  2207  000070                     irobot_leds@LEDBit:
  2208                           	opt stack 0
  2209  000070                     itos@Data:
  2210                           	opt stack 0
  2211  000070                     irobot_move@moveSpeed:
  2212                           	opt stack 0
  2213                           
  2214                           ; 2 bytes @ 0x10
  2215  000070                     	ds	1
  2216  000071                     ??_Timer2_Init:
  2217  000071                     ??_Timer0_Init:
  2218  000071                     Port_SetPin@pPin:
  2219                           	opt stack 0
  2220  000071                     Port_Set@pValue:
  2221                           	opt stack 0
  2222  000071                     Word_SetPair@pPair:
  2223                           	opt stack 0
  2224  000071                     PortProperty_Valid@pPinDrive:
  2225                           	opt stack 0
  2226  000071                     Console_MakeField@y:
  2227                           	opt stack 0
  2228  000071                     irobot_leds@powerColour:
  2229                           	opt stack 0
  2230                           
  2231                           ; 1 bytes @ 0x11
  2232  000071                     	ds	1
  2233  000072                     ??_Port_Set:
  2234  000072                     Port_SetPin@pValue:
  2235                           	opt stack 0
  2236  000072                     Word_SetPair@pValue:
  2237                           	opt stack 0
  2238  000072                     PortProperty_Valid@pPin:
  2239                           	opt stack 0
  2240  000072                     irobot_leds@powerLuminosity:
  2241                           	opt stack 0
  2242  000072                     LCD_DrawField@pField:
  2243                           	opt stack 0
  2244  000072                     itos@Length:
  2245                           	opt stack 0
  2246  000072                     irobot_move@moveTurnRadius:
  2247                           	opt stack 0
  2248  000072                     Timer2_Init@RDIV:
  2249                           	opt stack 0
  2250  000072                     ___fldiv@a:
  2251                           	opt stack 0
  2252                           
  2253                           ; 4 bytes @ 0x12
  2254  000072                     	ds	1
  2255  000073                     ??_PortProperty_Valid:
  2256  000073                     ??_LCD_FillRectangle:
  2257  000073                     Port_SetPin@Type:
  2258                           	opt stack 0
  2259  000073                     Console_PrintChar@pInput:
  2260                           	opt stack 0
  2261  000073                     irobot_leds@isScript:
  2262                           	opt stack 0
  2263  000073                     Timer0_Init@pCPUClock:
  2264                           	opt stack 0
  2265                           
  2266                           ; 4 bytes @ 0x13
  2267  000073                     	ds	1
  2268  000074                     ??_irobot_move:
  2269  000074                     LED_Set@pValue:
  2270                           	opt stack 0
  2271  000074                     putch@c:
  2272                           	opt stack 0
  2273  000074                     irobot_led_power_on@powerOnColour:
  2274                           	opt stack 0
  2275  000074                     Port_TogglePin@pInput:
  2276                           	opt stack 0
  2277  000074                     itos@Out:
  2278                           	opt stack 0
  2279  000074                     LCD_DrawField@pPoint:
  2280                           	opt stack 0
  2281                           
  2282                           ; 4 bytes @ 0x14
  2283  000074                     	ds	1
  2284  000075                     ?_printf:
  2285                           	opt stack 0
  2286  000075                     LCD_FillRectangle@i:
  2287                           	opt stack 0
  2288  000075                     LED_Set@pLED:
  2289                           	opt stack 0
  2290  000075                     irobot_query_and_update@packetIDs:
  2291                           	opt stack 0
  2292  000075                     printf@f:
  2293                           	opt stack 0
  2294  000075                     PortProperty_Valid@Errors:
  2295                           	opt stack 0
  2296                           
  2297                           ; 16 bytes @ 0x15
  2298  000075                     	ds	1
  2299  000076                     ??___fldiv:
  2300  000076                     LCD_FillRectangle@j:
  2301                           	opt stack 0
  2302  000076                     Port_TogglePin@pPin:
  2303                           	opt stack 0
  2304  000076                     HMI_SetNumber@pInput:
  2305                           	opt stack 0
  2306  000076                     Timer2_Init@pCPUClock:
  2307                           	opt stack 0
  2308                           
  2309                           ; 4 bytes @ 0x16
  2310  000076                     	ds	1
  2311  000077                     Port_TogglePin@Value:
  2312                           	opt stack 0
  2313  000077                     irobot_query_and_update@streamSize:
  2314                           	opt stack 0
  2315  000077                     Timer0_Init@DIVIDE:
  2316                           	opt stack 0
  2317                           
  2318                           ; 4 bytes @ 0x17
  2319  000077                     	ds	1
  2320  000078                     LED_Toggle@pLED:
  2321                           	opt stack 0
  2322  000078                     irobot_query_and_update@numberOfPacketRequests:
  2323                           	opt stack 0
  2324  000078                     irobot_move@isScript:
  2325                           	opt stack 0
  2326  000078                     LCD_DrawField@pSize:
  2327                           	opt stack 0
  2328                           
  2329                           ; 4 bytes @ 0x18
  2330  000078                     	ds	1
  2331  000079                     Event_DIPSwitch@pState:
  2332                           	opt stack 0
  2333  000079                     Event_TestButton@pState:
  2334                           	opt stack 0
  2335  000079                     irobot_query_and_update@packetVariable:
  2336                           	opt stack 0
  2337  000079                     irobot_stop_motion@isScript:
  2338                           	opt stack 0
  2339  000079                     irobot_move_straight@straightSpeed:
  2340                           	opt stack 0
  2341                           
  2342                           ; 2 bytes @ 0x19
  2343  000079                     	ds	1
  2344  00007A                     Event_DIPSwitch@Bar:
  2345                           	opt stack 0
  2346  00007A                     irobot_query_and_update@j:
  2347                           	opt stack 0
  2348  00007A                     ___fldiv@sign:
  2349                           	opt stack 0
  2350  00007A                     Timer2_Init@DIVIDE:
  2351                           	opt stack 0
  2352                           
  2353                           ; 4 bytes @ 0x1A
  2354  00007A                     	ds	1
  2355  00007B                     irobot_query_and_update@startIndex:
  2356                           	opt stack 0
  2357  00007B                     Button_Poll@pButton:
  2358                           	opt stack 0
  2359  00007B                     Motor_Speed@pMotor:
  2360                           	opt stack 0
  2361  00007B                     ___fldiv@rem:
  2362                           	opt stack 0
  2363                           
  2364                           ; 4 bytes @ 0x1B
  2365  00007B                     	ds	1
  2366  00007C                     ??_LCD_DrawField:
  2367  00007C                     irobot_query_and_update@i:
  2368                           	opt stack 0
  2369                           
  2370                           ; 1 bytes @ 0x1C
  2371  00007C                     	ds	1
  2372  00007D                     Button_Poll@pIncrement:
  2373                           	opt stack 0
  2374  00007D                     Motor_Speed@pFrequency:
  2375                           	opt stack 0
  2376                           
  2377                           ; 2 bytes @ 0x1D
  2378  00007D                     	ds	1
  2379  00007E                     ??_Button_Poll:
  2380  00007E                     LCD_DrawField@count:
  2381                           	opt stack 0
  2382                           
  2383                           ; 2 bytes @ 0x1E
  2384  00007E                     	ds	1
  2385  00007F                     ___fldiv@new_exp:
  2386                           	opt stack 0
  2387                           
  2388                           ; 2 bytes @ 0x1F
  2389  00007F                     	ds	1
  2390  000080                     LCD_DrawField@xmax:
  2391                           	opt stack 0
  2392                           
  2393                           ; 1 bytes @ 0x20
  2394  000080                     	ds	1
  2395  000081                     LCD_DrawField@ymax:
  2396                           	opt stack 0
  2397  000081                     ___fldiv@grs:
  2398                           	opt stack 0
  2399                           
  2400                           ; 4 bytes @ 0x21
  2401  000081                     	ds	1
  2402  000082                     LCD_DrawField@i:
  2403                           	opt stack 0
  2404  000082                     Port_Set@TypeRequired:
  2405                           	opt stack 0
  2406                           
  2407                           ; 2 bytes @ 0x22
  2408  000082                     	ds	1
  2409  000083                     ??_printf:
  2410  000083                     ??_Console_Render:
  2411  000083                     Button_Poll@Pin:
  2412                           	opt stack 0
  2413                           
  2414                           ; 1 bytes @ 0x23
  2415  000083                     	ds	1
  2416  000084                     printf@prec:
  2417                           	opt stack 0
  2418  000084                     Port_Set@TypeActual:
  2419                           	opt stack 0
  2420                           
  2421                           ; 2 bytes @ 0x24
  2422  000084                     	ds	1
  2423  000085                     PortProperty_Valid@Pair:
  2424                           	opt stack 0
  2425  000085                     Console_Render@temp:
  2426                           	opt stack 0
  2427  000085                     printf@flag:
  2428                           	opt stack 0
  2429  000085                     ___fldiv@bexp:
  2430                           	opt stack 0
  2431                           
  2432                           ; 1 bytes @ 0x25
  2433  000085                     	ds	1
  2434  000086                     Port_Set@Type:
  2435                           	opt stack 0
  2436  000086                     ___fldiv@aexp:
  2437                           	opt stack 0
  2438  000086                     Port_CheckPairType@pInput:
  2439                           	opt stack 0
  2440  000086                     Port_SetPinType@pInput:
  2441                           	opt stack 0
  2442  000086                     printf@ap:
  2443                           	opt stack 0
  2444  000086                     Console_Render@lCursor:
  2445                           	opt stack 0
  2446                           
  2447                           ; 4 bytes @ 0x26
  2448  000086                     	ds	1
  2449  000087                     ?___flmul:
  2450                           	opt stack 0
  2451  000087                     ___flmul@b:
  2452                           	opt stack 0
  2453                           
  2454                           ; 4 bytes @ 0x27
  2455  000087                     	ds	1
  2456  000088                     Port_CheckPairType@pPair:
  2457                           	opt stack 0
  2458  000088                     Port_SetPinType@pPin:
  2459                           	opt stack 0
  2460  000088                     printf@val:
  2461                           	opt stack 0
  2462                           
  2463                           ; 2 bytes @ 0x28
  2464  000088                     	ds	1
  2465  000089                     Port_CheckPairType@pDrive:
  2466                           	opt stack 0
  2467  000089                     Port_SetPinType@pType:
  2468                           	opt stack 0
  2469                           
  2470                           ; 1 bytes @ 0x29
  2471  000089                     	ds	1
  2472  00008A                     Port_CheckPairType@Pin1:
  2473                           	opt stack 0
  2474  00008A                     Port_SetPinType@Output:
  2475                           	opt stack 0
  2476  00008A                     Console_Render@x:
  2477                           	opt stack 0
  2478  00008A                     printf@c:
  2479                           	opt stack 0
  2480                           
  2481                           ; 1 bytes @ 0x2A
  2482  00008A                     	ds	1
  2483  00008B                     Port_CheckPairType@Pin2:
  2484                           	opt stack 0
  2485  00008B                     Console_Render@y:
  2486                           	opt stack 0
  2487  00008B                     Port_SetPinType@Props:
  2488                           	opt stack 0
  2489  00008B                     ___flmul@a:
  2490                           	opt stack 0
  2491                           
  2492                           ; 4 bytes @ 0x2B
  2493  00008B                     	ds	1
  2494  00008C                     Port_CheckPairType@Output:
  2495                           	opt stack 0
  2496  00008C                     mode2@dist:
  2497                           	opt stack 0
  2498                           
  2499                           ; 2 bytes @ 0x2C
  2500  00008C                     	ds	1
  2501  00008D                     LED_Init@pLED:
  2502                           	opt stack 0
  2503  00008D                     Port_CheckPairType@Props:
  2504                           	opt stack 0
  2505  00008D                     Motor_Init@pMotor:
  2506                           	opt stack 0
  2507  00008D                     SPI_Init@pClock:
  2508                           	opt stack 0
  2509                           
  2510                           ; 4 bytes @ 0x2D
  2511  00008D                     	ds	2
  2512  00008F                     ??___flmul:
  2513  00008F                     Port_CheckQuadType@pInput:
  2514                           	opt stack 0
  2515  00008F                     Motor_Init@pAddress:
  2516                           	opt stack 0
  2517                           
  2518                           ; 2 bytes @ 0x2F
  2519  00008F                     	ds	2
  2520  000091                     Port_CheckQuadType@pQuad:
  2521                           	opt stack 0
  2522  000091                     SPI_Init@pChannel:
  2523                           	opt stack 0
  2524                           
  2525                           ; 1 bytes @ 0x31
  2526  000091                     	ds	1
  2527  000092                     Port_CheckQuadType@pDrive:
  2528                           	opt stack 0
  2529  000092                     SPI_Init@pMode:
  2530                           	opt stack 0
  2531                           
  2532                           ; 1 bytes @ 0x32
  2533  000092                     	ds	1
  2534  000093                     Port_CheckQuadType@Pair1:
  2535                           	opt stack 0
  2536  000093                     ___flmul@sign:
  2537                           	opt stack 0
  2538  000093                     SPI_Init@pInput:
  2539                           	opt stack 0
  2540                           
  2541                           ; 2 bytes @ 0x33
  2542  000093                     	ds	1
  2543  000094                     Port_CheckQuadType@Pair2:
  2544                           	opt stack 0
  2545  000094                     ___flmul@aexp:
  2546                           	opt stack 0
  2547                           
  2548                           ; 1 bytes @ 0x34
  2549  000094                     	ds	1
  2550  000095                     ??_LCD_Init:
  2551  000095                     Port_CheckQuadType@Output:
  2552                           	opt stack 0
  2553  000095                     ___flmul@grs:
  2554                           	opt stack 0
  2555                           
  2556                           ; 4 bytes @ 0x35
  2557  000095                     	ds	1
  2558  000096                     Port_CheckPortType@pInput:
  2559                           	opt stack 0
  2560  000096                     Port_SetQuadType@pInput:
  2561                           	opt stack 0
  2562                           
  2563                           ; 2 bytes @ 0x36
  2564  000096                     	ds	1
  2565  000097                     LCD_Init@i:
  2566                           	opt stack 0
  2567                           
  2568                           ; 2 bytes @ 0x37
  2569  000097                     	ds	1
  2570  000098                     Port_CheckPortType@pDrive:
  2571                           	opt stack 0
  2572  000098                     Port_SetQuadType@pQuad:
  2573                           	opt stack 0
  2574                           
  2575                           ; 1 bytes @ 0x38
  2576  000098                     	ds	1
  2577  000099                     Port_CheckPortType@Output:
  2578                           	opt stack 0
  2579  000099                     Port_SetQuadType@pType:
  2580                           	opt stack 0
  2581  000099                     ___flmul@bexp:
  2582                           	opt stack 0
  2583                           
  2584                           ; 1 bytes @ 0x39
  2585  000099                     	ds	1
  2586  00009A                     Port_SetQuadType@Output:
  2587                           	opt stack 0
  2588  00009A                     Port_SetType@pInput:
  2589                           	opt stack 0
  2590  00009A                     ___flmul@prod:
  2591                           	opt stack 0
  2592                           
  2593                           ; 4 bytes @ 0x3A
  2594  00009A                     	ds	1
  2595  00009B                     Button_Init@pInput:
  2596                           	opt stack 0
  2597                           
  2598                           ; 2 bytes @ 0x3B
  2599  00009B                     	ds	1
  2600  00009C                     Port_SetType@pType:
  2601                           	opt stack 0
  2602                           
  2603                           ; 1 bytes @ 0x3C
  2604  00009C                     	ds	1
  2605  00009D                     ??_Port_SetType:
  2606  00009D                     Button_Init@pThreshold:
  2607                           	opt stack 0
  2608                           
  2609                           ; 2 bytes @ 0x3D
  2610  00009D                     	ds	1
  2611  00009E                     ___flmul@temp:
  2612                           	opt stack 0
  2613                           
  2614                           ; 2 bytes @ 0x3E
  2615  00009E                     	ds	1
  2616  00009F                     Port_SetType@Output:
  2617                           	opt stack 0
  2618  00009F                     Button_Init@pInitIO:
  2619                           	opt stack 0
  2620                           
  2621                           ; 3 bytes @ 0x3F
  2622  00009F                     	ds	1
  2623  0000A0                     ?_ADC_Voltage:
  2624                           	opt stack 0
  2625  0000A0                     Port_Init@pInput:
  2626                           	opt stack 0
  2627  0000A0                     ADC_Voltage@pInput:
  2628                           	opt stack 0
  2629                           
  2630                           ; 2 bytes @ 0x40
  2631  0000A0                     	ds	2
  2632  0000A2                     Port_Init@pPort:
  2633                           	opt stack 0
  2634  0000A2                     Button_Init@pGetState:
  2635                           	opt stack 0
  2636                           
  2637                           ; 3 bytes @ 0x42
  2638  0000A2                     	ds	1
  2639  0000A3                     ??_Port_Init:
  2640                           
  2641                           ; 1 bytes @ 0x43
  2642  0000A3                     	ds	1
  2643  0000A4                     ??_ADC_Voltage:
  2644                           
  2645                           ; 1 bytes @ 0x44
  2646  0000A4                     	ds	1
  2647  0000A5                     Port_Init@i:
  2648                           	opt stack 0
  2649  0000A5                     Button_Init@pFunction:
  2650                           	opt stack 0
  2651                           
  2652                           ; 3 bytes @ 0x45
  2653  0000A5                     	ds	1
  2654  0000A6                     ADC_Voltage@max:
  2655                           	opt stack 0
  2656                           
  2657                           ; 4 bytes @ 0x46
  2658  0000A6                     	ds	2
  2659  0000A8                     HMI_Init@in:
  2660                           	opt stack 0
  2661                           
  2662                           ; 2 bytes @ 0x48
  2663  0000A8                     	ds	2
  2664  0000AA                     ADC_Voltage@ref:
  2665                           	opt stack 0
  2666                           
  2667                           ; 4 bytes @ 0x4A
  2668  0000AA                     	ds	4
  2669  0000AE                     ADC_Voltage@output:
  2670                           	opt stack 0
  2671                           
  2672                           ; 4 bytes @ 0x4E
  2673  0000AE                     	ds	4
  2674  0000B2                     ?___fltol:
  2675                           	opt stack 0
  2676  0000B2                     ___fltol@f1:
  2677                           	opt stack 0
  2678                           
  2679                           ; 4 bytes @ 0x52
  2680  0000B2                     	ds	4
  2681  0000B6                     ___fltol@sign1:
  2682                           	opt stack 0
  2683                           
  2684                           ; 1 bytes @ 0x56
  2685  0000B6                     	ds	1
  2686  0000B7                     ___fltol@exp1:
  2687                           	opt stack 0
  2688                           
  2689                           ; 1 bytes @ 0x57
  2690  0000B7                     	ds	1
  2691  0000B8                     ??_mode4:
  2692                           
  2693                           ; 1 bytes @ 0x58
  2694  0000B8                     	ds	1
  2695                           tblptru	equ	0xFF8
  2696                           tblptrh	equ	0xFF7
  2697                           tblptrl	equ	0xFF6
  2698                           tablat	equ	0xFF5
  2699                           postinc0	equ	0xFEE
  2700                           wreg	equ	0xFE8
  2701                           postdec1	equ	0xFE5
  2702                           fsr1h	equ	0xFE2
  2703                           fsr1l	equ	0xFE1
  2704                           
  2705                           	psect	cstackCOMRAM
  2706  000001                     __pcstackCOMRAM:
  2707                           	opt stack 0
  2708  000001                     i2Byte_SetBit@pInput:
  2709                           	opt stack 0
  2710  000001                     i2Byte_GetZone@pInput:
  2711                           	opt stack 0
  2712  000001                     i2delay_us@us:
  2713                           	opt stack 0
  2714  000001                     i2MXK_Queue@pCallback:
  2715                           	opt stack 0
  2716                           
  2717                           ; 3 bytes @ 0x0
  2718  000001                     	ds	2
  2719  000003                     i2Byte_SetBit@pBit:
  2720                           	opt stack 0
  2721  000003                     i2Byte_GetZone@pMax:
  2722                           	opt stack 0
  2723  000003                     i2delay_us@u:
  2724                           	opt stack 0
  2725                           
  2726                           ; 4 bytes @ 0x2
  2727  000003                     	ds	1
  2728  000004                     i2Byte_SetBit@pValue:
  2729                           	opt stack 0
  2730  000004                     i2Byte_GetZone@pChunk:
  2731                           	opt stack 0
  2732                           
  2733                           ; 1 bytes @ 0x3
  2734  000004                     	ds	1
  2735  000005                     ??i2_Byte_SetBit:
  2736  000005                     i2Byte_GetZone@pChunkSize:
  2737                           	opt stack 0
  2738                           
  2739                           ; 1 bytes @ 0x4
  2740  000005                     	ds	1
  2741  000006                     ??i2_Byte_GetZone:
  2742                           
  2743                           ; 1 bytes @ 0x5
  2744  000006                     	ds	1
  2745  000007                     i2Byte_GetZone@MASK:
  2746                           	opt stack 0
  2747  000007                     i2MXK_SwitchTo@CUR:
  2748                           	opt stack 0
  2749                           
  2750                           ; 1 bytes @ 0x6
  2751  000007                     	ds	1
  2752  000008                     i2Byte_GetZone@Offset:
  2753                           	opt stack 0
  2754  000008                     i2MXK_SwitchTo@pModule:
  2755                           	opt stack 0
  2756                           
  2757                           ; 1 bytes @ 0x7
  2758  000008                     	ds	1
  2759  000009                     i2Byte_GetZone@Output:
  2760                           	opt stack 0
  2761                           
  2762                           ; 1 bytes @ 0x8
  2763  000009                     	ds	1
  2764  00000A                     i2Byte_GetPair@pInput:
  2765                           	opt stack 0
  2766                           
  2767                           ; 2 bytes @ 0x9
  2768  00000A                     	ds	2
  2769  00000C                     i2Byte_GetPair@pPair:
  2770                           	opt stack 0
  2771                           
  2772                           ; 1 bytes @ 0xB
  2773  00000C                     	ds	1
  2774  00000D                     i2Word_GetPair@pInput:
  2775                           	opt stack 0
  2776                           
  2777                           ; 2 bytes @ 0xC
  2778  00000D                     	ds	2
  2779  00000F                     i2Word_GetPair@pPair:
  2780                           	opt stack 0
  2781                           
  2782                           ; 1 bytes @ 0xE
  2783  00000F                     	ds	1
  2784  000010                     i2Port_SetPin@pInput:
  2785                           	opt stack 0
  2786                           
  2787                           ; 2 bytes @ 0xF
  2788  000010                     	ds	2
  2789  000012                     i2Port_SetPin@pPin:
  2790                           	opt stack 0
  2791                           
  2792                           ; 1 bytes @ 0x11
  2793  000012                     	ds	1
  2794  000013                     i2Port_SetPin@pValue:
  2795                           	opt stack 0
  2796                           
  2797                           ; 1 bytes @ 0x12
  2798  000013                     	ds	1
  2799  000014                     i2Port_SetPin@Type:
  2800                           	opt stack 0
  2801                           
  2802                           ; 1 bytes @ 0x13
  2803  000014                     	ds	1
  2804  000015                     
  2805                           ; 1 bytes @ 0x14
  2806  000015                     	ds	2
  2807  000017                     ??_ISR_Function:
  2808                           
  2809                           ; 1 bytes @ 0x16
  2810  000017                     	ds	18
  2811                           tblptru	equ	0xFF8
  2812                           tblptrh	equ	0xFF7
  2813                           tblptrl	equ	0xFF6
  2814                           tablat	equ	0xFF5
  2815                           postinc0	equ	0xFEE
  2816                           wreg	equ	0xFE8
  2817                           postdec1	equ	0xFE5
  2818                           fsr1h	equ	0xFE2
  2819                           fsr1l	equ	0xFE1
  2820                           
  2821 ;;
  2822 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2823 ;;
  2824 ;; *************** function _main *****************
  2825 ;; Defined at:
  2826 ;;		line 323 in file "main.c"
  2827 ;; Parameters:    Size  Location     Type
  2828 ;;		None
  2829 ;; Auto vars:     Size  Location     Type
  2830 ;;		None
  2831 ;; Return value:  Size  Location     Type
  2832 ;;                  1    wreg      void 
  2833 ;; Registers used:
  2834 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2835 ;; Tracked objects:
  2836 ;;		On entry : 0/0
  2837 ;;		On exit  : 0/0
  2838 ;;		Unchanged: 0/0
  2839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2842 ;;      Temps:          0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0       0       0       0
  2843 ;;      Totals:         0       0       0       0       0       2       0       0       0       0       0       0       
      +0       0       0       0       0
  2844 ;;Total ram usage:        2 bytes
  2845 ;; Hardware stack levels required when called:   18
  2846 ;; This function calls:
  2847 ;;		_getMode
  2848 ;;		_init
  2849 ;;		_mode1
  2850 ;;		_mode2
  2851 ;;		_mode3
  2852 ;;		_mode4
  2853 ;; This function is called by:
  2854 ;;		Startup code after reset
  2855 ;; This function uses a non-reentrant model
  2856 ;;
  2857                           
  2858                           	psect	text0
  2859  01587A                     __ptext0:
  2860                           	opt stack 0
  2861  01587A                     _main:
  2862                           	opt stack 13
  2863                           
  2864                           ;main.c: 324: init();
  2865                           
  2866                           ;incstack = 0
  2867  01587A  EC0A  F0A3         	call	_init	;wreg free
  2868  01587E                     
  2869                           ;main.c: 326: getMode();
  2870  01587E  ECA7  F09A         	call	_getMode	;wreg free
  2871                           
  2872                           ;main.c: 327: switch (mode) {
  2873  015882  D00C               	goto	l2390
  2874  015884                     
  2875                           ;main.c: 329: mode1();
  2876  015884  EC62  F084         	call	_mode1	;wreg free
  2877                           
  2878                           ;main.c: 330: break;
  2879  015888  D7FA               	goto	l2389
  2880  01588A                     
  2881                           ;main.c: 332: mode2();
  2882  01588A  ECF9  F099         	call	_mode2	;wreg free
  2883                           
  2884                           ;main.c: 333: break;
  2885  01588E  D7F7               	goto	l2389
  2886  015890                     
  2887                           ;main.c: 335: mode3();
  2888  015890  EC02  F00A         	call	_mode3	;wreg free
  2889                           
  2890                           ;main.c: 336: break;
  2891  015894  D7F4               	goto	l2389
  2892  015896                     
  2893                           ;main.c: 338: mode4();
  2894  015896  EC2B  F08A         	call	_mode4	;wreg free
  2895                           
  2896                           ;main.c: 340: }
  2897                           
  2898                           ;main.c: 339: break;
  2899  01589A  D7F1               	goto	l2389
  2900  01589C                     l2390:
  2901  01589C  C320  F4C8         	movff	_mode,??_main
  2902  0158A0  C321  F4C9         	movff	_mode+1,??_main+1
  2903                           
  2904                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2905                           ; Switch size 1, requested type "space"
  2906                           ; Number of cases is 1, Range of values is 0 to 0
  2907                           ; switch strategies available:
  2908                           ; Name         Instructions Cycles
  2909                           ; simple_byte            4     3 (average)
  2910                           ;	Chosen strategy is simple_byte
  2911  0158A4  0104               	movlb	4	; () banked
  2912  0158A6  51C9               	movf	(??_main+1)& (0+255),w,b
  2913  0158A8  0A00               	xorlw	0	; case 0
  2914  0158AA  A4D8               	btfss	status,2,c
  2915  0158AC  D7E8               	goto	l2389
  2916                           
  2917                           ; BSR set to: 4
  2918                           ; Switch size 1, requested type "space"
  2919                           ; Number of cases is 4, Range of values is 1 to 4
  2920                           ; switch strategies available:
  2921                           ; Name         Instructions Cycles
  2922                           ; simple_byte           13     7 (average)
  2923                           ;	Chosen strategy is simple_byte
  2924  0158AE  0104               	movlb	4	; () banked
  2925  0158B0  51C8               	movf	??_main& (0+255),w,b
  2926  0158B2  0A01               	xorlw	1	; case 1
  2927  0158B4  B4D8               	btfsc	status,2,c
  2928  0158B6  D7E6               	goto	l2391
  2929  0158B8  0A03               	xorlw	3	; case 2
  2930  0158BA  B4D8               	btfsc	status,2,c
  2931  0158BC  D7E6               	goto	l2393
  2932  0158BE  0A01               	xorlw	1	; case 3
  2933  0158C0  B4D8               	btfsc	status,2,c
  2934  0158C2  D7E6               	goto	l2394
  2935  0158C4  0A07               	xorlw	7	; case 4
  2936  0158C6  B4D8               	btfsc	status,2,c
  2937  0158C8  D7E6               	goto	l2395
  2938                           
  2939                           ; BSR set to: 4
  2940                           ;main.c: 341: }
  2941  0158CA  D7D9               	goto	l2389
  2942  0158CC                     __end_of_main:
  2943                           	opt stack 0
  2944                           tblptru	equ	0xFF8
  2945                           tblptrh	equ	0xFF7
  2946                           tblptrl	equ	0xFF6
  2947                           tablat	equ	0xFF5
  2948                           postinc0	equ	0xFEE
  2949                           wreg	equ	0xFE8
  2950                           postdec1	equ	0xFE5
  2951                           fsr1h	equ	0xFE2
  2952                           fsr1l	equ	0xFE1
  2953                           status	equ	0xFD8
  2954                           
  2955 ;; *************** function _mode4 *****************
  2956 ;; Defined at:
  2957 ;;		line 256 in file "main.c"
  2958 ;; Parameters:    Size  Location     Type
  2959 ;;		None
  2960 ;; Auto vars:     Size  Location     Type
  2961 ;;		None
  2962 ;; Return value:  Size  Location     Type
  2963 ;;                  1    wreg      void 
  2964 ;; Registers used:
  2965 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2966 ;; Tracked objects:
  2967 ;;		On entry : 0/0
  2968 ;;		On exit  : 0/0
  2969 ;;		Unchanged: 0/0
  2970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2972 ;;      Locals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2973 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2974 ;;      Totals:         0       1       0       0       4       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2975 ;;Total ram usage:        5 bytes
  2976 ;; Hardware stack levels used:    1
  2977 ;; Hardware stack levels required when called:   16
  2978 ;; This function calls:
  2979 ;;		_ADC_Start
  2980 ;;		_ADC_Voltage
  2981 ;;		_Console_Render
  2982 ;;		_HMI_Poll
  2983 ;;		_HMI_Render
  2984 ;;		_HMI_SetNumber
  2985 ;;		_MXK_Dequeue
  2986 ;;		_MXK_Release
  2987 ;;		_MXK_SwitchTo
  2988 ;;		_Motor_Move
  2989 ;;		_Motor_Speed
  2990 ;;		___fldiv
  2991 ;;		___flmul
  2992 ;;		___fltol
  2993 ;;		___xxtofl
  2994 ;;		_irobot_song_play
  2995 ;;		_irobot_stop_motion
  2996 ;;		_printf
  2997 ;;		_update_angle
  2998 ;;		_update_bump_and_cliff
  2999 ;;		_update_distance
  3000 ;; This function is called by:
  3001 ;;		_main
  3002 ;; This function uses a non-reentrant model
  3003 ;;
  3004                           
  3005                           	psect	text1
  3006  011456                     __ptext1:
  3007                           	opt stack 0
  3008  011456                     _mode4:
  3009                           	opt stack 14
  3010                           
  3011                           ;main.c: 257: update_bump_and_cliff();
  3012                           
  3013                           ; BSR set to: 4
  3014                           ;incstack = 0
  3015  011456  EC1C  F0AF         	call	_update_bump_and_cliff	;wreg free
  3016                           
  3017                           ;main.c: 258: update_distance();
  3018  01145A  ECEC  F0B1         	call	_update_distance	;wreg free
  3019                           
  3020                           ;main.c: 259: update_angle();
  3021  01145E  ECF5  F0B1         	call	_update_angle	;wreg free
  3022                           
  3023                           ;main.c: 263: if (iRBumpLeft || iRBumpRight) {
  3024  011462  0100               	movlb	0	; () banked
  3025  011464  51E0               	movf	_iRBumpLeft& (0+255),w,b
  3026  011466  A4D8               	btfss	status,2,c
  3027  011468  D004               	goto	u13680
  3028                           
  3029                           ; BSR set to: 0
  3030  01146A  0100               	movlb	0	; () banked
  3031  01146C  51E1               	movf	_iRBumpRight& (0+255),w,b
  3032  01146E  B4D8               	btfsc	status,2,c
  3033  011470  D006               	goto	l2364
  3034  011472                     u13680:
  3035                           
  3036                           ; BSR set to: 0
  3037                           ;main.c: 264: irobot_song_play(0);
  3038                           
  3039                           ; BSR set to: 0
  3040  011472  0E00               	movlw	0
  3041  011474  ECD8  F0B1         	call	_irobot_song_play
  3042                           
  3043                           ;main.c: 265: irobot_stop_motion(0);
  3044  011478  0E00               	movlw	0
  3045  01147A  EC96  F0AD         	call	_irobot_stop_motion
  3046  01147E                     l2364:
  3047                           
  3048                           ;main.c: 266: }
  3049                           ;main.c: 267: if (angleTotal > 83) {
  3050  01147E  0100               	movlb	0	; () banked
  3051  011480  BFD1               	btfsc	(_angleTotal+1)& (0+255),7,b
  3052  011482  D00B               	goto	l2367
  3053  011484  0100               	movlb	0	; () banked
  3054  011486  51D1               	movf	(_angleTotal+1)& (0+255),w,b
  3055  011488  E105               	bnz	u13690
  3056  01148A  0E54               	movlw	84
  3057  01148C  0100               	movlb	0	; () banked
  3058  01148E  5DD0               	subwf	_angleTotal& (0+255),w,b
  3059  011490  A0D8               	btfss	status,0,c
  3060  011492  D003               	goto	l2367
  3061  011494                     u13690:
  3062                           
  3063                           ; BSR set to: 0
  3064                           ;main.c: 268: irobot_stop_motion(0);
  3065  011494  0E00               	movlw	0
  3066  011496  EC96  F0AD         	call	_irobot_stop_motion
  3067  01149A                     l2367:
  3068                           
  3069                           ;main.c: 269: }
  3070                           ;main.c: 271: if (MXK_SwitchTo(eMXK_HMI)) {
  3071  01149A  0E01               	movlw	1
  3072  01149C  EC21  F0AE         	call	_MXK_SwitchTo
  3073  0114A0  0900               	iorlw	0
  3074  0114A2  B4D8               	btfsc	status,2,c
  3075  0114A4  D035               	goto	l2369
  3076                           
  3077                           ;main.c: 272: printf("%c", (char)35);
  3078  0114A6  0EFC               	movlw	low STR_1
  3079  0114A8  0100               	movlb	0	; () banked
  3080  0114AA  6F75               	movwf	printf@f& (0+255),b
  3081  0114AC  0EFF               	movlw	high STR_1
  3082  0114AE  0100               	movlb	0	; () banked
  3083  0114B0  6F76               	movwf	(printf@f+1)& (0+255),b
  3084  0114B2  0E00               	movlw	0
  3085  0114B4  0100               	movlb	0	; () banked
  3086  0114B6  6F78               	movwf	(?_printf+3)& (0+255),b
  3087  0114B8  0E23               	movlw	35
  3088  0114BA  6F77               	movwf	(?_printf+2)& (0+255),b
  3089  0114BC  EC51  F092         	call	_printf	;wreg free
  3090                           
  3091                           ;main.c: 273: printf("Total Distance:%u\nLeft Bump:%u\nRight Bump:%u\nClosest Wall:%u\nC
      +                          losest Angle:%u\n", distanceTotal, iRBumpLeft, iRBumpRight, MinDist, stepsToMinDegrees);
  3092  0114C0  0E71               	movlw	low STR_8
  3093  0114C2  0100               	movlb	0	; () banked
  3094  0114C4  6F75               	movwf	printf@f& (0+255),b
  3095  0114C6  0EFF               	movlw	high STR_8
  3096  0114C8  0100               	movlb	0	; () banked
  3097  0114CA  6F76               	movwf	(printf@f+1)& (0+255),b
  3098  0114CC  C0D2  F077         	movff	_distanceTotal,?_printf+2
  3099  0114D0  C0D3  F078         	movff	_distanceTotal+1,?_printf+3
  3100  0114D4  C0E0  F079         	movff	_iRBumpLeft,?_printf+4
  3101  0114D8  0100               	movlb	0	; () banked
  3102  0114DA  6B7A               	clrf	(?_printf+5)& (0+255),b
  3103  0114DC  C0E1  F07B         	movff	_iRBumpRight,?_printf+6
  3104  0114E0  0100               	movlb	0	; () banked
  3105  0114E2  6B7C               	clrf	(?_printf+7)& (0+255),b
  3106  0114E4  C0FB  F07D         	movff	_MinDist,?_printf+8
  3107  0114E8  C0FC  F07E         	movff	_MinDist+1,?_printf+9
  3108  0114EC  C300  F07F         	movff	_stepsToMinDegrees,?_printf+10
  3109  0114F0  C301  F080         	movff	_stepsToMinDegrees+1,?_printf+11
  3110  0114F4  C302  F081         	movff	_stepsToMinDegrees+2,?_printf+12
  3111  0114F8  C303  F082         	movff	_stepsToMinDegrees+3,?_printf+13
  3112  0114FC  EC51  F092         	call	_printf	;wreg free
  3113                           
  3114                           ;main.c: 274: Console_Render();
  3115  011500  EC65  F08F         	call	_Console_Render	;wreg free
  3116                           
  3117                           ;main.c: 275: if (MXK_Release())
  3118  011504  EC4F  F0B1         	call	_MXK_Release	;wreg free
  3119  011508  0900               	iorlw	0
  3120  01150A  A4D8               	btfss	status,2,c
  3121                           
  3122                           ;main.c: 276: MXK_Dequeue();
  3123  01150C  ECA1  F0AE         	call	_MXK_Dequeue	;wreg free
  3124  011510                     l2369:
  3125                           
  3126                           ;main.c: 277: }
  3127                           ;main.c: 278: HMI_Poll();
  3128  011510  EC65  F0A8         	call	_HMI_Poll	;wreg free
  3129                           
  3130                           ;main.c: 279: StepRotate = 0;
  3131  011514  0E00               	movlw	0
  3132  011516  0100               	movlb	0	; () banked
  3133  011518  6FC7               	movwf	(_StepRotate+1)& (0+255),b
  3134  01151A  0E00               	movlw	0
  3135  01151C  6FC6               	movwf	_StepRotate& (0+255),b
  3136                           
  3137                           ; BSR set to: 0
  3138                           ;main.c: 280: MinDist = 1000;
  3139  01151E  0E03               	movlw	3
  3140  011520  0100               	movlb	0	; () banked
  3141  011522  6FFC               	movwf	(_MinDist+1)& (0+255),b
  3142  011524  0EE8               	movlw	232
  3143  011526  6FFB               	movwf	_MinDist& (0+255),b
  3144                           
  3145                           ; BSR set to: 0
  3146                           ;main.c: 281: Stepstomin = 0;
  3147  011528  0E00               	movlw	0
  3148  01152A  0100               	movlb	0	; () banked
  3149  01152C  6FC5               	movwf	(_Stepstomin+1)& (0+255),b
  3150  01152E  0E00               	movlw	0
  3151  011530  6FC4               	movwf	_Stepstomin& (0+255),b
  3152                           
  3153                           ; BSR set to: 0
  3154                           ;main.c: 282: stepsToMinDegrees = ((float) Stepstomin / 400) * 360;
  3155  011532  0E00               	movlw	0
  3156  011534  0100               	movlb	0	; () banked
  3157  011536  6F72               	movwf	___fldiv@a& (0+255),b
  3158  011538  0E00               	movlw	0
  3159  01153A  6F73               	movwf	(___fldiv@a+1)& (0+255),b
  3160  01153C  0EC8               	movlw	200
  3161  01153E  6F74               	movwf	(___fldiv@a+2)& (0+255),b
  3162  011540  0E43               	movlw	67
  3163  011542  6F75               	movwf	(___fldiv@a+3)& (0+255),b
  3164  011544  C0C4  F060         	movff	_Stepstomin,___xxtofl@val
  3165  011548  C0C5  F061         	movff	_Stepstomin+1,___xxtofl@val+1
  3166  01154C  0100               	movlb	0	; () banked
  3167  01154E  0E00               	movlw	0
  3168  011550  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
  3169  011552  0EFF               	movlw	-1
  3170  011554  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
  3171  011556  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
  3172  011558  0E01               	movlw	1
  3173  01155A  EC6A  F091         	call	___xxtofl
  3174  01155E  C060  F06E         	movff	?___xxtofl,___fldiv@b
  3175  011562  C061  F06F         	movff	?___xxtofl+1,___fldiv@b+1
  3176  011566  C062  F070         	movff	?___xxtofl+2,___fldiv@b+2
  3177  01156A  C063  F071         	movff	?___xxtofl+3,___fldiv@b+3
  3178  01156E  EC6E  F086         	call	___fldiv	;wreg free
  3179  011572  C06E  F087         	movff	?___fldiv,___flmul@b
  3180  011576  C06F  F088         	movff	?___fldiv+1,___flmul@b+1
  3181  01157A  C070  F089         	movff	?___fldiv+2,___flmul@b+2
  3182  01157E  C071  F08A         	movff	?___fldiv+3,___flmul@b+3
  3183  011582  0E00               	movlw	0
  3184  011584  0100               	movlb	0	; () banked
  3185  011586  6F8B               	movwf	___flmul@a& (0+255),b
  3186  011588  0E00               	movlw	0
  3187  01158A  6F8C               	movwf	(___flmul@a+1)& (0+255),b
  3188  01158C  0EB4               	movlw	180
  3189  01158E  6F8D               	movwf	(___flmul@a+2)& (0+255),b
  3190  011590  0E43               	movlw	67
  3191  011592  6F8E               	movwf	(___flmul@a+3)& (0+255),b
  3192  011594  EC00  F080         	call	___flmul	;wreg free
  3193  011598  C087  F300         	movff	?___flmul,_stepsToMinDegrees
  3194  01159C  C088  F301         	movff	?___flmul+1,_stepsToMinDegrees+1
  3195  0115A0  C089  F302         	movff	?___flmul+2,_stepsToMinDegrees+2
  3196  0115A4  C08A  F303         	movff	?___flmul+3,_stepsToMinDegrees+3
  3197                           
  3198                           ;main.c: 283: IRValue = 0;
  3199  0115A8  0E00               	movlw	0
  3200  0115AA  0100               	movlb	0	; () banked
  3201  0115AC  6FC3               	movwf	(_IRValue+1)& (0+255),b
  3202  0115AE  0E00               	movlw	0
  3203  0115B0  6FC2               	movwf	_IRValue& (0+255),b
  3204                           
  3205                           ; BSR set to: 0
  3206                           ;main.c: 284: TimerX = 8;
  3207  0115B2  0E00               	movlw	0
  3208  0115B4  0100               	movlb	0	; () banked
  3209  0115B6  6FFA               	movwf	(_TimerX+1)& (0+255),b
  3210  0115B8  0E08               	movlw	8
  3211  0115BA  6FF9               	movwf	_TimerX& (0+255),b
  3212                           
  3213                           ;main.c: 285: while (StepRotate < 400) {
  3214  0115BC  D0F8               	goto	u13800
  3215  0115BE                     
  3216                           ; BSR set to: 0
  3217                           ;main.c: 286: StepRotate++;
  3218                           
  3219                           ; BSR set to: 0
  3220  0115BE  0100               	movlb	0	; () banked
  3221  0115C0  4BC6               	infsnz	_StepRotate& (0+255),f,b
  3222  0115C2  2BC7               	incf	(_StepRotate+1)& (0+255),f,b
  3223                           
  3224                           ; BSR set to: 0
  3225                           ;main.c: 287: ADC_Start(&ADC_AN0);
  3226  0115C4  0EF4               	movlw	low _ADC_AN0
  3227  0115C6  0100               	movlb	0	; () banked
  3228  0115C8  6F62               	movwf	ADC_Start@pInput& (0+255),b
  3229  0115CA  0E00               	movlw	high _ADC_AN0
  3230  0115CC  0100               	movlb	0	; () banked
  3231  0115CE  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
  3232  0115D0  ECF0  F0A6         	call	_ADC_Start	;wreg free
  3233                           
  3234                           ;main.c: 288: IRValue = (59/ADC_Voltage(&ADC_AN0));
  3235  0115D4  0EF4               	movlw	low _ADC_AN0
  3236  0115D6  0100               	movlb	0	; () banked
  3237  0115D8  6FA0               	movwf	ADC_Voltage@pInput& (0+255),b
  3238  0115DA  0E00               	movlw	high _ADC_AN0
  3239  0115DC  0100               	movlb	0	; () banked
  3240  0115DE  6FA1               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  3241  0115E0  ECD0  F09D         	call	_ADC_Voltage	;wreg free
  3242  0115E4  C0A0  F3F8         	movff	?_ADC_Voltage,_mode4$15575
  3243  0115E8  C0A1  F3F9         	movff	?_ADC_Voltage+1,_mode4$15575+1
  3244  0115EC  C0A2  F3FA         	movff	?_ADC_Voltage+2,_mode4$15575+2
  3245  0115F0  C0A3  F3FB         	movff	?_ADC_Voltage+3,_mode4$15575+3
  3246                           
  3247                           ;main.c: 288: IRValue = (59/ADC_Voltage(&ADC_AN0));
  3248  0115F4  C3F8  F072         	movff	_mode4$15575,___fldiv@a
  3249  0115F8  C3F9  F073         	movff	_mode4$15575+1,___fldiv@a+1
  3250  0115FC  C3FA  F074         	movff	_mode4$15575+2,___fldiv@a+2
  3251  011600  C3FB  F075         	movff	_mode4$15575+3,___fldiv@a+3
  3252  011604  0E00               	movlw	0
  3253  011606  0100               	movlb	0	; () banked
  3254  011608  6F6E               	movwf	___fldiv@b& (0+255),b
  3255  01160A  0E00               	movlw	0
  3256  01160C  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
  3257  01160E  0E6C               	movlw	108
  3258  011610  6F70               	movwf	(___fldiv@b+2)& (0+255),b
  3259  011612  0E42               	movlw	66
  3260  011614  6F71               	movwf	(___fldiv@b+3)& (0+255),b
  3261  011616  EC6E  F086         	call	___fldiv	;wreg free
  3262  01161A  C06E  F0B2         	movff	?___fldiv,___fltol@f1
  3263  01161E  C06F  F0B3         	movff	?___fldiv+1,___fltol@f1+1
  3264  011622  C070  F0B4         	movff	?___fldiv+2,___fltol@f1+2
  3265  011626  C071  F0B5         	movff	?___fldiv+3,___fltol@f1+3
  3266  01162A  ECE6  F09B         	call	___fltol	;wreg free
  3267  01162E  C0B2  F0C2         	movff	?___fltol,_IRValue
  3268  011632  C0B3  F0C3         	movff	?___fltol+1,_IRValue+1
  3269                           
  3270                           ;main.c: 289: if (MXK_SwitchTo(eMXK_HMI)) {
  3271  011636  0E01               	movlw	1
  3272  011638  EC21  F0AE         	call	_MXK_SwitchTo
  3273  01163C  0900               	iorlw	0
  3274  01163E  B4D8               	btfsc	status,2,c
  3275  011640  D00E               	goto	l2373
  3276                           
  3277                           ;main.c: 290: HMI_SetNumber(IRValue);
  3278  011642  C0C2  F076         	movff	_IRValue,HMI_SetNumber@pInput
  3279  011646  C0C3  F077         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  3280  01164A  EC4A  F0B0         	call	_HMI_SetNumber	;wreg free
  3281                           
  3282                           ;main.c: 291: HMI_Render();
  3283  01164E  EC82  F0AE         	call	_HMI_Render	;wreg free
  3284                           
  3285                           ;main.c: 292: if (MXK_Release())
  3286  011652  EC4F  F0B1         	call	_MXK_Release	;wreg free
  3287  011656  0900               	iorlw	0
  3288  011658  A4D8               	btfss	status,2,c
  3289                           
  3290                           ;main.c: 293: MXK_Dequeue();
  3291  01165A  ECA1  F0AE         	call	_MXK_Dequeue	;wreg free
  3292  01165E                     l2373:
  3293                           
  3294                           ;main.c: 294: }
  3295                           ;main.c: 295: if (IRValue < MinDist) {
  3296  01165E  0100               	movlb	0	; () banked
  3297  011660  51FB               	movf	_MinDist& (0+255),w,b
  3298  011662  0100               	movlb	0	; () banked
  3299  011664  5DC2               	subwf	_IRValue& (0+255),w,b
  3300  011666  0100               	movlb	0	; () banked
  3301  011668  51C3               	movf	(_IRValue+1)& (0+255),w,b
  3302  01166A  0A80               	xorlw	128
  3303  01166C  0100               	movlb	0	; () banked
  3304  01166E  6FB8               	movwf	??_mode4& (0+255),b
  3305  011670  0100               	movlb	0	; () banked
  3306  011672  51FC               	movf	(_MinDist+1)& (0+255),w,b
  3307  011674  0A80               	xorlw	128
  3308  011676  0100               	movlb	0	; () banked
  3309  011678  59B8               	subwfb	??_mode4& (0+255),w,b
  3310  01167A  B0D8               	btfsc	status,0,c
  3311  01167C  D008               	goto	l2374
  3312                           
  3313                           ; BSR set to: 0
  3314                           ;main.c: 296: MinDist = IRValue;
  3315  01167E  C0C2  F0FB         	movff	_IRValue,_MinDist
  3316  011682  C0C3  F0FC         	movff	_IRValue+1,_MinDist+1
  3317                           
  3318                           ;main.c: 297: Stepstomin = StepRotate;
  3319  011686  C0C6  F0C4         	movff	_StepRotate,_Stepstomin
  3320  01168A  C0C7  F0C5         	movff	_StepRotate+1,_Stepstomin+1
  3321  01168E                     l2374:
  3322                           
  3323                           ; BSR set to: 0
  3324                           ;main.c: 298: }
  3325                           ;main.c: 299: if (MXK_SwitchTo(eMXK_Motor)) {
  3326                           
  3327                           ; BSR set to: 0
  3328  01168E  0E08               	movlw	8
  3329  011690  EC21  F0AE         	call	_MXK_SwitchTo
  3330  011694  0900               	iorlw	0
  3331  011696  B4D8               	btfsc	status,2,c
  3332  011698  D01F               	goto	l2376
  3333                           
  3334                           ;main.c: 300: Motor_Speed(&Stepper, (50));
  3335  01169A  0ECF               	movlw	low _Stepper
  3336  01169C  0100               	movlb	0	; () banked
  3337  01169E  6F7B               	movwf	Motor_Speed@pMotor& (0+255),b
  3338  0116A0  0E03               	movlw	high _Stepper
  3339  0116A2  0100               	movlb	0	; () banked
  3340  0116A4  6F7C               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  3341  0116A6  0E00               	movlw	0
  3342  0116A8  0100               	movlb	0	; () banked
  3343  0116AA  6F7E               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  3344  0116AC  0E32               	movlw	50
  3345  0116AE  6F7D               	movwf	Motor_Speed@pFrequency& (0+255),b
  3346  0116B0  EC35  F0B0         	call	_Motor_Speed	;wreg free
  3347                           
  3348                           ;main.c: 301: Motor_Move(&Stepper, -1);
  3349  0116B4  0ECF               	movlw	low _Stepper
  3350  0116B6  0100               	movlb	0	; () banked
  3351  0116B8  6F63               	movwf	Motor_Move@pMotor& (0+255),b
  3352  0116BA  0E03               	movlw	high _Stepper
  3353  0116BC  0100               	movlb	0	; () banked
  3354  0116BE  6F64               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  3355  0116C0  0EFF               	movlw	255
  3356  0116C2  0100               	movlb	0	; () banked
  3357  0116C4  6F66               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  3358  0116C6  6965               	setf	Motor_Move@pDelta& (0+255),b
  3359  0116C8  EC39  F0AF         	call	_Motor_Move	;wreg free
  3360                           
  3361                           ;main.c: 302: if (MXK_Release())
  3362  0116CC  EC4F  F0B1         	call	_MXK_Release	;wreg free
  3363  0116D0  0900               	iorlw	0
  3364  0116D2  A4D8               	btfss	status,2,c
  3365                           
  3366                           ;main.c: 303: MXK_Dequeue();
  3367  0116D4  ECA1  F0AE         	call	_MXK_Dequeue	;wreg free
  3368  0116D8                     l2376:
  3369                           
  3370                           ;main.c: 304: }
  3371                           ;main.c: 305: TimerX = 10;
  3372  0116D8  0E00               	movlw	0
  3373  0116DA  0100               	movlb	0	; () banked
  3374  0116DC  6FFA               	movwf	(_TimerX+1)& (0+255),b
  3375  0116DE  0E0A               	movlw	10
  3376  0116E0  6FF9               	movwf	_TimerX& (0+255),b
  3377                           
  3378                           ; BSR set to: 0
  3379                           ;main.c: 306: if (TimerX > 0) {
  3380  0116E2  0100               	movlb	0	; () banked
  3381  0116E4  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  3382  0116E6  D063               	goto	u13800
  3383  0116E8  0100               	movlb	0	; () banked
  3384  0116EA  51FA               	movf	(_TimerX+1)& (0+255),w,b
  3385  0116EC  E156               	bnz	l16363
  3386  0116EE  0100               	movlb	0	; () banked
  3387  0116F0  05F9               	decf	_TimerX& (0+255),w,b
  3388  0116F2  B0D8               	btfsc	status,0,c
  3389  0116F4  D052               	goto	l2378
  3390  0116F6  D05B               	goto	u13800
  3391  0116F8                     l16345:
  3392                           
  3393                           ; BSR set to: 0
  3394                           ;main.c: 308: ADC_Start(&ADC_AN0);
  3395  0116F8  0EF4               	movlw	low _ADC_AN0
  3396  0116FA  0100               	movlb	0	; () banked
  3397  0116FC  6F62               	movwf	ADC_Start@pInput& (0+255),b
  3398  0116FE  0E00               	movlw	high _ADC_AN0
  3399  011700  0100               	movlb	0	; () banked
  3400  011702  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
  3401  011704  ECF0  F0A6         	call	_ADC_Start	;wreg free
  3402                           
  3403                           ;main.c: 309: if (MXK_SwitchTo(eMXK_HMI)) {
  3404  011708  0E01               	movlw	1
  3405  01170A  EC21  F0AE         	call	_MXK_SwitchTo
  3406  01170E  0900               	iorlw	0
  3407  011710  B4D8               	btfsc	status,2,c
  3408  011712  D00E               	goto	l2381
  3409                           
  3410                           ;main.c: 310: HMI_SetNumber(IRValue);
  3411  011714  C0C2  F076         	movff	_IRValue,HMI_SetNumber@pInput
  3412  011718  C0C3  F077         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  3413  01171C  EC4A  F0B0         	call	_HMI_SetNumber	;wreg free
  3414                           
  3415                           ;main.c: 311: HMI_Render();
  3416  011720  EC82  F0AE         	call	_HMI_Render	;wreg free
  3417                           
  3418                           ;main.c: 312: if (MXK_Release())
  3419  011724  EC4F  F0B1         	call	_MXK_Release	;wreg free
  3420  011728  0900               	iorlw	0
  3421  01172A  A4D8               	btfss	status,2,c
  3422                           
  3423                           ;main.c: 313: MXK_Dequeue();
  3424  01172C  ECA1  F0AE         	call	_MXK_Dequeue	;wreg free
  3425  011730                     l2381:
  3426                           
  3427                           ;main.c: 314: }
  3428                           ;main.c: 315: IRValue = (59/ADC_Voltage(&ADC_AN0));
  3429  011730  0EF4               	movlw	low _ADC_AN0
  3430  011732  0100               	movlb	0	; () banked
  3431  011734  6FA0               	movwf	ADC_Voltage@pInput& (0+255),b
  3432  011736  0E00               	movlw	high _ADC_AN0
  3433  011738  0100               	movlb	0	; () banked
  3434  01173A  6FA1               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  3435  01173C  ECD0  F09D         	call	_ADC_Voltage	;wreg free
  3436  011740  C0A0  F3F8         	movff	?_ADC_Voltage,_mode4$15575
  3437  011744  C0A1  F3F9         	movff	?_ADC_Voltage+1,_mode4$15575+1
  3438  011748  C0A2  F3FA         	movff	?_ADC_Voltage+2,_mode4$15575+2
  3439  01174C  C0A3  F3FB         	movff	?_ADC_Voltage+3,_mode4$15575+3
  3440                           
  3441                           ;main.c: 314: }
  3442                           ;main.c: 315: IRValue = (59/ADC_Voltage(&ADC_AN0));
  3443  011750  C3F8  F072         	movff	_mode4$15575,___fldiv@a
  3444  011754  C3F9  F073         	movff	_mode4$15575+1,___fldiv@a+1
  3445  011758  C3FA  F074         	movff	_mode4$15575+2,___fldiv@a+2
  3446  01175C  C3FB  F075         	movff	_mode4$15575+3,___fldiv@a+3
  3447  011760  0E00               	movlw	0
  3448  011762  0100               	movlb	0	; () banked
  3449  011764  6F6E               	movwf	___fldiv@b& (0+255),b
  3450  011766  0E00               	movlw	0
  3451  011768  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
  3452  01176A  0E6C               	movlw	108
  3453  01176C  6F70               	movwf	(___fldiv@b+2)& (0+255),b
  3454  01176E  0E42               	movlw	66
  3455  011770  6F71               	movwf	(___fldiv@b+3)& (0+255),b
  3456  011772  EC6E  F086         	call	___fldiv	;wreg free
  3457  011776  C06E  F0B2         	movff	?___fldiv,___fltol@f1
  3458  01177A  C06F  F0B3         	movff	?___fldiv+1,___fltol@f1+1
  3459  01177E  C070  F0B4         	movff	?___fldiv+2,___fltol@f1+2
  3460  011782  C071  F0B5         	movff	?___fldiv+3,___fltol@f1+3
  3461  011786  ECE6  F09B         	call	___fltol	;wreg free
  3462  01178A  C0B2  F0C2         	movff	?___fltol,_IRValue
  3463  01178E  C0B3  F0C3         	movff	?___fltol+1,_IRValue+1
  3464                           
  3465                           ;main.c: 316: TimerX--;
  3466  011792  0100               	movlb	0	; () banked
  3467  011794  07F9               	decf	_TimerX& (0+255),f,b
  3468  011796  A0D8               	btfss	status,0,c
  3469  011798  07FA               	decf	(_TimerX+1)& (0+255),f,b
  3470  01179A                     l2378:
  3471  01179A                     l16363:
  3472                           
  3473                           ; BSR set to: 0
  3474  01179A  0100               	movlb	0	; () banked
  3475  01179C  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  3476  01179E  D007               	goto	u13800
  3477  0117A0  0100               	movlb	0	; () banked
  3478  0117A2  51FA               	movf	(_TimerX+1)& (0+255),w,b
  3479  0117A4  E1A9               	bnz	l16345
  3480  0117A6  0100               	movlb	0	; () banked
  3481  0117A8  05F9               	decf	_TimerX& (0+255),w,b
  3482  0117AA  B0D8               	btfsc	status,0,c
  3483  0117AC  D7A5               	goto	l2379
  3484  0117AE                     u13800:
  3485                           
  3486                           ; BSR set to: 0
  3487                           
  3488                           ; BSR set to: 0
  3489                           
  3490                           ; BSR set to: 0
  3491                           
  3492                           ; BSR set to: 0
  3493  0117AE  0100               	movlb	0	; () banked
  3494  0117B0  BFC7               	btfsc	(_StepRotate+1)& (0+255),7,b
  3495  0117B2  D705               	goto	l2371
  3496  0117B4  0E90               	movlw	144
  3497  0117B6  0100               	movlb	0	; () banked
  3498  0117B8  5DC6               	subwf	_StepRotate& (0+255),w,b
  3499  0117BA  0E01               	movlw	1
  3500  0117BC  0100               	movlb	0	; () banked
  3501  0117BE  59C7               	subwfb	(_StepRotate+1)& (0+255),w,b
  3502  0117C0  B0D8               	btfsc	status,0,c
  3503  0117C2  0012               	return	
  3504  0117C4  D6FC               	goto	l2371
  3505  0117C6                     __end_of_mode4:
  3506                           	opt stack 0
  3507                           tblptru	equ	0xFF8
  3508                           tblptrh	equ	0xFF7
  3509                           tblptrl	equ	0xFF6
  3510                           tablat	equ	0xFF5
  3511                           postinc0	equ	0xFEE
  3512                           wreg	equ	0xFE8
  3513                           postdec1	equ	0xFE5
  3514                           fsr1h	equ	0xFE2
  3515                           fsr1l	equ	0xFE1
  3516                           status	equ	0xFD8
  3517                           
  3518 ;; *************** function _mode3 *****************
  3519 ;; Defined at:
  3520 ;;		line 251 in file "main.c"
  3521 ;; Parameters:    Size  Location     Type
  3522 ;;		None
  3523 ;; Auto vars:     Size  Location     Type
  3524 ;;		None
  3525 ;; Return value:  Size  Location     Type
  3526 ;;                  1    wreg      void 
  3527 ;; Registers used:
  3528 ;;		None
  3529 ;; Tracked objects:
  3530 ;;		On entry : 0/0
  3531 ;;		On exit  : 0/0
  3532 ;;		Unchanged: 0/0
  3533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3537 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3538 ;;Total ram usage:        0 bytes
  3539 ;; Hardware stack levels used:    1
  3540 ;; Hardware stack levels required when called:    7
  3541 ;; This function calls:
  3542 ;;		Nothing
  3543 ;; This function is called by:
  3544 ;;		_main
  3545 ;; This function uses a non-reentrant model
  3546 ;;
  3547                           
  3548                           	psect	text2
  3549  001404                     __ptext2:
  3550                           	opt stack 0
  3551  001404                     _mode3:
  3552                           	opt stack 23
  3553                           
  3554                           ; BSR set to: 0
  3555                           ;incstack = 0
  3556  001404  0012               	return		;funcret
  3557  001406                     __end_of_mode3:
  3558                           	opt stack 0
  3559                           tblptru	equ	0xFF8
  3560                           tblptrh	equ	0xFF7
  3561                           tblptrl	equ	0xFF6
  3562                           tablat	equ	0xFF5
  3563                           postinc0	equ	0xFEE
  3564                           wreg	equ	0xFE8
  3565                           postdec1	equ	0xFE5
  3566                           fsr1h	equ	0xFE2
  3567                           fsr1l	equ	0xFE1
  3568                           status	equ	0xFD8
  3569                           
  3570 ;; *************** function _mode2 *****************
  3571 ;; Defined at:
  3572 ;;		line 214 in file "main.c"
  3573 ;; Parameters:    Size  Location     Type
  3574 ;;		None
  3575 ;; Auto vars:     Size  Location     Type
  3576 ;;  dist            2   44[BANK0 ] int 
  3577 ;; Return value:  Size  Location     Type
  3578 ;;                  1    wreg      void 
  3579 ;; Registers used:
  3580 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3581 ;; Tracked objects:
  3582 ;;		On entry : 0/0
  3583 ;;		On exit  : 0/0
  3584 ;;		Unchanged: 0/0
  3585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3587 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3589 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3590 ;;Total ram usage:        2 bytes
  3591 ;; Hardware stack levels used:    1
  3592 ;; Hardware stack levels required when called:   16
  3593 ;; This function calls:
  3594 ;;		_Console_Render
  3595 ;;		_HMI_DIPSwitch
  3596 ;;		_HMI_DownSwitch
  3597 ;;		_HMI_LeftSwitch
  3598 ;;		_HMI_Poll
  3599 ;;		_HMI_RightSwitch
  3600 ;;		_HMI_UpSwitch
  3601 ;;		_MXK_DIPSwitch
  3602 ;;		_MXK_Dequeue
  3603 ;;		_MXK_Release
  3604 ;;		_MXK_SwitchTo
  3605 ;;		_MXK_TestButton
  3606 ;;		_irobot_move_straight
  3607 ;;		_irobot_song_play
  3608 ;;		_irobot_stop_motion
  3609 ;;		_printf
  3610 ;;		_update_angle
  3611 ;;		_update_bump_and_cliff
  3612 ;;		_update_distance
  3613 ;; This function is called by:
  3614 ;;		_main
  3615 ;; This function uses a non-reentrant model
  3616 ;;
  3617                           
  3618                           	psect	text3
  3619  0133F2                     __ptext3:
  3620                           	opt stack 0
  3621  0133F2                     _mode2:
  3622                           	opt stack 14
  3623                           
  3624                           ;main.c: 215: update_bump_and_cliff();
  3625                           
  3626                           ;incstack = 0
  3627  0133F2  EC1C  F0AF         	call	_update_bump_and_cliff	;wreg free
  3628                           
  3629                           ;main.c: 216: update_distance();
  3630  0133F6  ECEC  F0B1         	call	_update_distance	;wreg free
  3631                           
  3632                           ;main.c: 217: update_angle();
  3633  0133FA  ECF5  F0B1         	call	_update_angle	;wreg free
  3634                           
  3635                           ;main.c: 219: angleTotal += iRAngle;
  3636  0133FE  0103               	movlb	3	; () banked
  3637  013400  5124               	movf	_iRAngle& (0+255),w,b
  3638  013402  0100               	movlb	0	; () banked
  3639  013404  27D0               	addwf	_angleTotal& (0+255),f,b
  3640  013406  0103               	movlb	3	; () banked
  3641  013408  5125               	movf	(_iRAngle+1)& (0+255),w,b
  3642  01340A  0100               	movlb	0	; () banked
  3643  01340C  23D1               	addwfc	(_angleTotal+1)& (0+255),f,b
  3644                           
  3645                           ; BSR set to: 0
  3646                           ;main.c: 221: if (iRBumpLeft || iRBumpRight) {
  3647  01340E  0100               	movlb	0	; () banked
  3648  013410  51E0               	movf	_iRBumpLeft& (0+255),w,b
  3649  013412  A4D8               	btfss	status,2,c
  3650  013414  D004               	goto	u13600
  3651                           
  3652                           ; BSR set to: 0
  3653  013416  0100               	movlb	0	; () banked
  3654  013418  51E1               	movf	_iRBumpRight& (0+255),w,b
  3655  01341A  B4D8               	btfsc	status,2,c
  3656  01341C  D006               	goto	l2348
  3657  01341E                     u13600:
  3658                           
  3659                           ; BSR set to: 0
  3660                           ;main.c: 222: irobot_song_play(0);
  3661                           
  3662                           ; BSR set to: 0
  3663  01341E  0E00               	movlw	0
  3664  013420  ECD8  F0B1         	call	_irobot_song_play
  3665                           
  3666                           ;main.c: 223: irobot_stop_motion(0);
  3667  013424  0E00               	movlw	0
  3668  013426  EC96  F0AD         	call	_irobot_stop_motion
  3669  01342A                     l2348:
  3670                           
  3671                           ;main.c: 224: }
  3672                           ;main.c: 225: if (angleTotal > 90) {
  3673  01342A  0100               	movlb	0	; () banked
  3674  01342C  BFD1               	btfsc	(_angleTotal+1)& (0+255),7,b
  3675  01342E  D00B               	goto	l2351
  3676  013430  0100               	movlb	0	; () banked
  3677  013432  51D1               	movf	(_angleTotal+1)& (0+255),w,b
  3678  013434  E105               	bnz	u13610
  3679  013436  0E5B               	movlw	91
  3680  013438  0100               	movlb	0	; () banked
  3681  01343A  5DD0               	subwf	_angleTotal& (0+255),w,b
  3682  01343C  A0D8               	btfss	status,0,c
  3683  01343E  D003               	goto	l2351
  3684  013440                     u13610:
  3685                           
  3686                           ; BSR set to: 0
  3687                           ;main.c: 226: irobot_stop_motion(0);
  3688  013440  0E00               	movlw	0
  3689  013442  EC96  F0AD         	call	_irobot_stop_motion
  3690  013446                     l2351:
  3691                           
  3692                           ;main.c: 227: }
  3693                           ;main.c: 228: HMI_Poll();
  3694  013446  EC65  F0A8         	call	_HMI_Poll	;wreg free
  3695                           
  3696                           ;main.c: 229: if (MXK_SwitchTo(eMXK_HMI)) {
  3697  01344A  0E01               	movlw	1
  3698  01344C  EC21  F0AE         	call	_MXK_SwitchTo
  3699  013450  0900               	iorlw	0
  3700  013452  B4D8               	btfsc	status,2,c
  3701  013454  0012               	return	
  3702                           
  3703                           ;main.c: 230: printf("%c", (char)35);
  3704  013456  0EFC               	movlw	low STR_1
  3705  013458  0100               	movlb	0	; () banked
  3706  01345A  6F75               	movwf	printf@f& (0+255),b
  3707  01345C  0EFF               	movlw	high STR_1
  3708  01345E  0100               	movlb	0	; () banked
  3709  013460  6F76               	movwf	(printf@f+1)& (0+255),b
  3710  013462  0E00               	movlw	0
  3711  013464  0100               	movlb	0	; () banked
  3712  013466  6F78               	movwf	(?_printf+3)& (0+255),b
  3713  013468  0E23               	movlw	35
  3714  01346A  6F77               	movwf	(?_printf+2)& (0+255),b
  3715  01346C  EC51  F092         	call	_printf	;wreg free
  3716                           
  3717                           ;main.c: 231: printf("Total Distance:%u\nLeft Bump:%u\nRight Bump:%u\n", distanceTotal, 
      +                          iRBumpLeft, iRBumpRight);
  3718  013470  0EC0               	movlw	low STR_2
  3719  013472  0100               	movlb	0	; () banked
  3720  013474  6F75               	movwf	printf@f& (0+255),b
  3721  013476  0EFF               	movlw	high STR_2
  3722  013478  0100               	movlb	0	; () banked
  3723  01347A  6F76               	movwf	(printf@f+1)& (0+255),b
  3724  01347C  C0D2  F077         	movff	_distanceTotal,?_printf+2
  3725  013480  C0D3  F078         	movff	_distanceTotal+1,?_printf+3
  3726  013484  C0E0  F079         	movff	_iRBumpLeft,?_printf+4
  3727  013488  0100               	movlb	0	; () banked
  3728  01348A  6B7A               	clrf	(?_printf+5)& (0+255),b
  3729  01348C  C0E1  F07B         	movff	_iRBumpRight,?_printf+6
  3730  013490  0100               	movlb	0	; () banked
  3731  013492  6B7C               	clrf	(?_printf+7)& (0+255),b
  3732  013494  EC51  F092         	call	_printf	;wreg free
  3733                           
  3734                           ;main.c: 232: Console_Render();
  3735  013498  EC65  F08F         	call	_Console_Render	;wreg free
  3736                           
  3737                           ;main.c: 233: if(HMIBoard.mUp.mGetState()) {
  3738  01349C  EE23  F04B         	lfsr	2,_HMIBoard+35
  3739  0134A0  D801               	call	u13638
  3740  0134A2  D00A               	goto	u13639
  3741  0134A4                     u13638:
  3742  0134A4  0005               	push	
  3743  0134A6  6EFA               	movwf	pclath,c
  3744  0134A8  50DE               	movf	postinc2,w,c
  3745  0134AA  6EFD               	movwf	tosl,c
  3746  0134AC  50DE               	movf	postinc2,w,c
  3747  0134AE  6EFE               	movwf	tosh,c
  3748  0134B0  50DE               	movf	postinc2,w,c
  3749  0134B2  6EFF               	movwf	tosu,c
  3750  0134B4  50FA               	movf	pclath,w,c
  3751  0134B6  0012               	return		;indir
  3752  0134B8                     u13639:
  3753  0134B8  0900               	iorlw	0
  3754  0134BA  B4D8               	btfsc	status,2,c
  3755  0134BC  D040               	goto	l2353
  3756                           
  3757                           ;main.c: 234: int dist = 0;
  3758  0134BE  0E00               	movlw	0
  3759  0134C0  0100               	movlb	0	; () banked
  3760  0134C2  6F8D               	movwf	(mode2@dist+1)& (0+255),b
  3761  0134C4  0E00               	movlw	0
  3762  0134C6  6F8C               	movwf	mode2@dist& (0+255),b
  3763                           
  3764                           ; BSR set to: 0
  3765                           ;main.c: 235: irobot_move_straight(200);
  3766  0134C8  0E00               	movlw	0
  3767  0134CA  0100               	movlb	0	; () banked
  3768  0134CC  6F7A               	movwf	(irobot_move_straight@straightSpeed+1)& (0+255),b
  3769  0134CE  0EC8               	movlw	200
  3770  0134D0  6F79               	movwf	irobot_move_straight@straightSpeed& (0+255),b
  3771  0134D2  EC78  F0B1         	call	_irobot_move_straight	;wreg free
  3772                           
  3773                           ;main.c: 236: while(dist<5000) {
  3774  0134D6  D025               	goto	l2354
  3775  0134D8                     
  3776                           ;main.c: 237: update_distance();
  3777  0134D8  ECEC  F0B1         	call	_update_distance	;wreg free
  3778                           
  3779                           ;main.c: 238: dist += iRDistance;
  3780  0134DC  0103               	movlb	3	; () banked
  3781  0134DE  5126               	movf	_iRDistance& (0+255),w,b
  3782  0134E0  0100               	movlb	0	; () banked
  3783  0134E2  278C               	addwf	mode2@dist& (0+255),f,b
  3784  0134E4  0103               	movlb	3	; () banked
  3785  0134E6  5127               	movf	(_iRDistance+1)& (0+255),w,b
  3786  0134E8  0100               	movlb	0	; () banked
  3787  0134EA  238D               	addwfc	(mode2@dist+1)& (0+255),f,b
  3788                           
  3789                           ; BSR set to: 0
  3790                           ;main.c: 239: printf("%c",(char)35);
  3791  0134EC  0EFC               	movlw	low STR_1
  3792  0134EE  0100               	movlb	0	; () banked
  3793  0134F0  6F75               	movwf	printf@f& (0+255),b
  3794  0134F2  0EFF               	movlw	high STR_1
  3795  0134F4  0100               	movlb	0	; () banked
  3796  0134F6  6F76               	movwf	(printf@f+1)& (0+255),b
  3797  0134F8  0E00               	movlw	0
  3798  0134FA  0100               	movlb	0	; () banked
  3799  0134FC  6F78               	movwf	(?_printf+3)& (0+255),b
  3800  0134FE  0E23               	movlw	35
  3801  013500  6F77               	movwf	(?_printf+2)& (0+255),b
  3802  013502  EC51  F092         	call	_printf	;wreg free
  3803                           
  3804                           ;main.c: 240: printf("Distance: %d\n",dist);
  3805  013506  0EEE               	movlw	low STR_6
  3806  013508  0100               	movlb	0	; () banked
  3807  01350A  6F75               	movwf	printf@f& (0+255),b
  3808  01350C  0EFF               	movlw	high STR_6
  3809  01350E  0100               	movlb	0	; () banked
  3810  013510  6F76               	movwf	(printf@f+1)& (0+255),b
  3811  013512  C08C  F077         	movff	mode2@dist,?_printf+2
  3812  013516  C08D  F078         	movff	mode2@dist+1,?_printf+3
  3813  01351A  EC51  F092         	call	_printf	;wreg free
  3814                           
  3815                           ;main.c: 241: Console_Render();
  3816  01351E  EC65  F08F         	call	_Console_Render	;wreg free
  3817  013522                     l2354:
  3818  013522  0100               	movlb	0	; () banked
  3819  013524  BF8D               	btfsc	(mode2@dist+1)& (0+255),7,b
  3820  013526  D7D8               	goto	l2355
  3821  013528  0E88               	movlw	136
  3822  01352A  0100               	movlb	0	; () banked
  3823  01352C  5D8C               	subwf	mode2@dist& (0+255),w,b
  3824  01352E  0E13               	movlw	19
  3825  013530  0100               	movlb	0	; () banked
  3826  013532  598D               	subwfb	(mode2@dist+1)& (0+255),w,b
  3827  013534  A0D8               	btfss	status,0,c
  3828  013536  D7D0               	goto	l2355
  3829                           
  3830                           ; BSR set to: 0
  3831                           ;main.c: 242: }
  3832                           ;main.c: 243: irobot_stop_motion(0);
  3833                           
  3834                           ; BSR set to: 0
  3835  013538  0E00               	movlw	0
  3836  01353A  EC96  F0AD         	call	_irobot_stop_motion
  3837  01353E                     l2353:
  3838                           
  3839                           ;main.c: 244: }
  3840                           ;main.c: 245: if (MXK_Release())
  3841  01353E  EC4F  F0B1         	call	_MXK_Release	;wreg free
  3842  013542  0900               	iorlw	0
  3843  013544  B4D8               	btfsc	status,2,c
  3844  013546  0012               	return	
  3845                           
  3846                           ;main.c: 246: MXK_Dequeue();
  3847  013548  ECA1  F0AE         	call	_MXK_Dequeue	;wreg free
  3848  01354C  0012               	return	
  3849  01354E                     __end_of_mode2:
  3850                           	opt stack 0
  3851                           tosu	equ	0xFFF
  3852                           tosh	equ	0xFFE
  3853                           tosl	equ	0xFFD
  3854                           pclath	equ	0xFFA
  3855                           tblptru	equ	0xFF8
  3856                           tblptrh	equ	0xFF7
  3857                           tblptrl	equ	0xFF6
  3858                           tablat	equ	0xFF5
  3859                           postinc0	equ	0xFEE
  3860                           wreg	equ	0xFE8
  3861                           postdec1	equ	0xFE5
  3862                           fsr1h	equ	0xFE2
  3863                           fsr1l	equ	0xFE1
  3864                           postinc2	equ	0xFDE
  3865                           status	equ	0xFD8
  3866                           
  3867 ;; *************** function _irobot_move_straight *****************
  3868 ;; Defined at:
  3869 ;;		line 303 in file "Library/iRobotSerial.c"
  3870 ;; Parameters:    Size  Location     Type
  3871 ;;  straightSpee    2   25[BANK0 ] short 
  3872 ;; Auto vars:     Size  Location     Type
  3873 ;;		None
  3874 ;; Return value:  Size  Location     Type
  3875 ;;                  1    wreg      void 
  3876 ;; Registers used:
  3877 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3878 ;; Tracked objects:
  3879 ;;		On entry : 0/0
  3880 ;;		On exit  : 0/0
  3881 ;;		Unchanged: 0/0
  3882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3883 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3884 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3886 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3887 ;;Total ram usage:        2 bytes
  3888 ;; Hardware stack levels used:    1
  3889 ;; Hardware stack levels required when called:    9
  3890 ;; This function calls:
  3891 ;;		_irobot_move
  3892 ;; This function is called by:
  3893 ;;		_mode2
  3894 ;; This function uses a non-reentrant model
  3895 ;;
  3896                           
  3897                           	psect	text4
  3898  0162F0                     __ptext4:
  3899                           	opt stack 0
  3900  0162F0                     _irobot_move_straight:
  3901                           	opt stack 20
  3902                           
  3903                           ;iRobotSerial.c: 304: irobot_move(0, straightSpeed, iR_CONST_STRAIGHT_2);
  3904                           
  3905                           ;incstack = 0
  3906  0162F0  C079  F070         	movff	irobot_move_straight@straightSpeed,irobot_move@moveSpeed
  3907  0162F4  C07A  F071         	movff	irobot_move_straight@straightSpeed+1,irobot_move@moveSpeed+1
  3908  0162F8  0E7F               	movlw	127
  3909  0162FA  0100               	movlb	0	; () banked
  3910  0162FC  6F73               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  3911  0162FE  6972               	setf	irobot_move@moveTurnRadius& (0+255),b
  3912  016300  0E00               	movlw	0
  3913  016302  ECB1  F0A1         	call	_irobot_move
  3914  016306  0012               	return		;funcret
  3915  016308                     __end_of_irobot_move_straight:
  3916                           	opt stack 0
  3917                           tosu	equ	0xFFF
  3918                           tosh	equ	0xFFE
  3919                           tosl	equ	0xFFD
  3920                           pclath	equ	0xFFA
  3921                           tblptru	equ	0xFF8
  3922                           tblptrh	equ	0xFF7
  3923                           tblptrl	equ	0xFF6
  3924                           tablat	equ	0xFF5
  3925                           postinc0	equ	0xFEE
  3926                           wreg	equ	0xFE8
  3927                           postdec1	equ	0xFE5
  3928                           fsr1h	equ	0xFE2
  3929                           fsr1l	equ	0xFE1
  3930                           postinc2	equ	0xFDE
  3931                           status	equ	0xFD8
  3932                           
  3933 ;; *************** function _mode1 *****************
  3934 ;; Defined at:
  3935 ;;		line 130 in file "main.c"
  3936 ;; Parameters:    Size  Location     Type
  3937 ;;		None
  3938 ;; Auto vars:     Size  Location     Type
  3939 ;;  moveto          2    2[BANK3 ] int 
  3940 ;; Return value:  Size  Location     Type
  3941 ;;                  1    wreg      void 
  3942 ;; Registers used:
  3943 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3944 ;; Tracked objects:
  3945 ;;		On entry : 0/0
  3946 ;;		On exit  : 0/0
  3947 ;;		Unchanged: 0/0
  3948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3950 ;;      Locals:         0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3951 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3952 ;;      Totals:         0       0       0       0       8       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3953 ;;Total ram usage:        8 bytes
  3954 ;; Hardware stack levels used:    1
  3955 ;; Hardware stack levels required when called:   16
  3956 ;; This function calls:
  3957 ;;		_ADC_Start
  3958 ;;		_ADC_Voltage
  3959 ;;		_Console_Render
  3960 ;;		_HMI_Poll
  3961 ;;		_HMI_Render
  3962 ;;		_HMI_SetNumber
  3963 ;;		_MXK_Dequeue
  3964 ;;		_MXK_Release
  3965 ;;		_MXK_SwitchTo
  3966 ;;		_Motor_Move
  3967 ;;		_Motor_Speed
  3968 ;;		___fldiv
  3969 ;;		___fltol
  3970 ;;		_irobot_song_play
  3971 ;;		_irobot_stop_motion
  3972 ;;		_printf
  3973 ;;		_update_angle
  3974 ;;		_update_bump_and_cliff
  3975 ;;		_update_distance
  3976 ;; This function is called by:
  3977 ;;		_main
  3978 ;; This function uses a non-reentrant model
  3979 ;;
  3980                           
  3981                           	psect	text5
  3982  0108C4                     __ptext5:
  3983                           	opt stack 0
  3984  0108C4                     _mode1:
  3985                           	opt stack 14
  3986                           
  3987                           ;main.c: 131: update_bump_and_cliff();
  3988                           
  3989                           ;incstack = 0
  3990  0108C4  EC1C  F0AF         	call	_update_bump_and_cliff	;wreg free
  3991                           
  3992                           ;main.c: 132: update_distance();
  3993  0108C8  ECEC  F0B1         	call	_update_distance	;wreg free
  3994                           
  3995                           ;main.c: 133: update_angle();
  3996  0108CC  ECF5  F0B1         	call	_update_angle	;wreg free
  3997                           
  3998                           ;main.c: 137: if (iRBumpLeft || iRBumpRight) {
  3999  0108D0  0100               	movlb	0	; () banked
  4000  0108D2  51E0               	movf	_iRBumpLeft& (0+255),w,b
  4001  0108D4  A4D8               	btfss	status,2,c
  4002  0108D6  D004               	goto	u13400
  4003                           
  4004                           ; BSR set to: 0
  4005  0108D8  0100               	movlb	0	; () banked
  4006  0108DA  51E1               	movf	_iRBumpRight& (0+255),w,b
  4007  0108DC  B4D8               	btfsc	status,2,c
  4008  0108DE  D006               	goto	l2318
  4009  0108E0                     u13400:
  4010                           
  4011                           ; BSR set to: 0
  4012                           ;main.c: 138: irobot_song_play(0);
  4013                           
  4014                           ; BSR set to: 0
  4015  0108E0  0E00               	movlw	0
  4016  0108E2  ECD8  F0B1         	call	_irobot_song_play
  4017                           
  4018                           ;main.c: 139: irobot_stop_motion(0);
  4019  0108E6  0E00               	movlw	0
  4020  0108E8  EC96  F0AD         	call	_irobot_stop_motion
  4021  0108EC                     l2318:
  4022                           
  4023                           ;main.c: 140: }
  4024                           ;main.c: 141: if (angleTotal > 83) {
  4025  0108EC  0100               	movlb	0	; () banked
  4026  0108EE  BFD1               	btfsc	(_angleTotal+1)& (0+255),7,b
  4027  0108F0  D00B               	goto	l2321
  4028  0108F2  0100               	movlb	0	; () banked
  4029  0108F4  51D1               	movf	(_angleTotal+1)& (0+255),w,b
  4030  0108F6  E105               	bnz	u13410
  4031  0108F8  0E54               	movlw	84
  4032  0108FA  0100               	movlb	0	; () banked
  4033  0108FC  5DD0               	subwf	_angleTotal& (0+255),w,b
  4034  0108FE  A0D8               	btfss	status,0,c
  4035  010900  D003               	goto	l2321
  4036  010902                     u13410:
  4037                           
  4038                           ; BSR set to: 0
  4039                           ;main.c: 142: irobot_stop_motion(0);
  4040  010902  0E00               	movlw	0
  4041  010904  EC96  F0AD         	call	_irobot_stop_motion
  4042  010908                     l2321:
  4043                           
  4044                           ;main.c: 143: }
  4045                           ;main.c: 145: if (MXK_SwitchTo(eMXK_HMI)) {
  4046  010908  0E01               	movlw	1
  4047  01090A  EC21  F0AE         	call	_MXK_SwitchTo
  4048  01090E  0900               	iorlw	0
  4049  010910  B4D8               	btfsc	status,2,c
  4050  010912  D029               	goto	l2323
  4051                           
  4052                           ;main.c: 146: printf("%c", (char)35);
  4053  010914  0EFC               	movlw	low STR_1
  4054  010916  0100               	movlb	0	; () banked
  4055  010918  6F75               	movwf	printf@f& (0+255),b
  4056  01091A  0EFF               	movlw	high STR_1
  4057  01091C  0100               	movlb	0	; () banked
  4058  01091E  6F76               	movwf	(printf@f+1)& (0+255),b
  4059  010920  0E00               	movlw	0
  4060  010922  0100               	movlb	0	; () banked
  4061  010924  6F78               	movwf	(?_printf+3)& (0+255),b
  4062  010926  0E23               	movlw	35
  4063  010928  6F77               	movwf	(?_printf+2)& (0+255),b
  4064  01092A  EC51  F092         	call	_printf	;wreg free
  4065                           
  4066                           ;main.c: 147: printf("Total Distance:%u\nLeft Bump:%u\nRight Bump:%u\n", distanceTotal, 
      +                          iRBumpLeft, iRBumpRight);
  4067  01092E  0EC0               	movlw	low STR_2
  4068  010930  0100               	movlb	0	; () banked
  4069  010932  6F75               	movwf	printf@f& (0+255),b
  4070  010934  0EFF               	movlw	high STR_2
  4071  010936  0100               	movlb	0	; () banked
  4072  010938  6F76               	movwf	(printf@f+1)& (0+255),b
  4073  01093A  C0D2  F077         	movff	_distanceTotal,?_printf+2
  4074  01093E  C0D3  F078         	movff	_distanceTotal+1,?_printf+3
  4075  010942  C0E0  F079         	movff	_iRBumpLeft,?_printf+4
  4076  010946  0100               	movlb	0	; () banked
  4077  010948  6B7A               	clrf	(?_printf+5)& (0+255),b
  4078  01094A  C0E1  F07B         	movff	_iRBumpRight,?_printf+6
  4079  01094E  0100               	movlb	0	; () banked
  4080  010950  6B7C               	clrf	(?_printf+7)& (0+255),b
  4081  010952  EC51  F092         	call	_printf	;wreg free
  4082                           
  4083                           ;main.c: 148: Console_Render();
  4084  010956  EC65  F08F         	call	_Console_Render	;wreg free
  4085                           
  4086                           ;main.c: 149: if (MXK_Release())
  4087  01095A  EC4F  F0B1         	call	_MXK_Release	;wreg free
  4088  01095E  0900               	iorlw	0
  4089  010960  A4D8               	btfss	status,2,c
  4090                           
  4091                           ;main.c: 150: MXK_Dequeue();
  4092  010962  ECA1  F0AE         	call	_MXK_Dequeue	;wreg free
  4093  010966                     l2323:
  4094                           
  4095                           ;main.c: 151: }
  4096                           ;main.c: 152: HMI_Poll();
  4097  010966  EC65  F0A8         	call	_HMI_Poll	;wreg free
  4098                           
  4099                           ;main.c: 153: StepRotate = 0;
  4100  01096A  0E00               	movlw	0
  4101  01096C  0100               	movlb	0	; () banked
  4102  01096E  6FC7               	movwf	(_StepRotate+1)& (0+255),b
  4103  010970  0E00               	movlw	0
  4104  010972  6FC6               	movwf	_StepRotate& (0+255),b
  4105                           
  4106                           ; BSR set to: 0
  4107                           ;main.c: 154: MinDist = 1000;
  4108  010974  0E03               	movlw	3
  4109  010976  0100               	movlb	0	; () banked
  4110  010978  6FFC               	movwf	(_MinDist+1)& (0+255),b
  4111  01097A  0EE8               	movlw	232
  4112  01097C  6FFB               	movwf	_MinDist& (0+255),b
  4113                           
  4114                           ; BSR set to: 0
  4115                           ;main.c: 155: Stepstomin = 0;
  4116  01097E  0E00               	movlw	0
  4117  010980  0100               	movlb	0	; () banked
  4118  010982  6FC5               	movwf	(_Stepstomin+1)& (0+255),b
  4119  010984  0E00               	movlw	0
  4120  010986  6FC4               	movwf	_Stepstomin& (0+255),b
  4121                           
  4122                           ; BSR set to: 0
  4123                           ;main.c: 156: IRValue = 0;
  4124  010988  0E00               	movlw	0
  4125  01098A  0100               	movlb	0	; () banked
  4126  01098C  6FC3               	movwf	(_IRValue+1)& (0+255),b
  4127  01098E  0E00               	movlw	0
  4128  010990  6FC2               	movwf	_IRValue& (0+255),b
  4129                           
  4130                           ; BSR set to: 0
  4131                           ;main.c: 157: TimerX = 8;
  4132  010992  0E00               	movlw	0
  4133  010994  0100               	movlb	0	; () banked
  4134  010996  6FFA               	movwf	(_TimerX+1)& (0+255),b
  4135  010998  0E08               	movlw	8
  4136  01099A  6FF9               	movwf	_TimerX& (0+255),b
  4137                           
  4138                           ;main.c: 158: while (StepRotate < 400) {
  4139  01099C  D0F9               	goto	u13520
  4140  01099E                     
  4141                           ; BSR set to: 0
  4142                           ;main.c: 159: StepRotate++;
  4143                           
  4144                           ; BSR set to: 0
  4145  01099E  0100               	movlb	0	; () banked
  4146  0109A0  4BC6               	infsnz	_StepRotate& (0+255),f,b
  4147  0109A2  2BC7               	incf	(_StepRotate+1)& (0+255),f,b
  4148                           
  4149                           ; BSR set to: 0
  4150                           ;main.c: 160: ADC_Start(&ADC_AN0);
  4151  0109A4  0EF4               	movlw	low _ADC_AN0
  4152  0109A6  0100               	movlb	0	; () banked
  4153  0109A8  6F62               	movwf	ADC_Start@pInput& (0+255),b
  4154  0109AA  0E00               	movlw	high _ADC_AN0
  4155  0109AC  0100               	movlb	0	; () banked
  4156  0109AE  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
  4157  0109B0  ECF0  F0A6         	call	_ADC_Start	;wreg free
  4158                           
  4159                           ;main.c: 161: IRValue = (59/ADC_Voltage(&ADC_AN0));
  4160  0109B4  0EF4               	movlw	low _ADC_AN0
  4161  0109B6  0100               	movlb	0	; () banked
  4162  0109B8  6FA0               	movwf	ADC_Voltage@pInput& (0+255),b
  4163  0109BA  0E00               	movlw	high _ADC_AN0
  4164  0109BC  0100               	movlb	0	; () banked
  4165  0109BE  6FA1               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  4166  0109C0  ECD0  F09D         	call	_ADC_Voltage	;wreg free
  4167  0109C4  C0A0  F3FC         	movff	?_ADC_Voltage,_mode1$15574
  4168  0109C8  C0A1  F3FD         	movff	?_ADC_Voltage+1,_mode1$15574+1
  4169  0109CC  C0A2  F3FE         	movff	?_ADC_Voltage+2,_mode1$15574+2
  4170  0109D0  C0A3  F3FF         	movff	?_ADC_Voltage+3,_mode1$15574+3
  4171                           
  4172                           ;main.c: 161: IRValue = (59/ADC_Voltage(&ADC_AN0));
  4173  0109D4  C3FC  F072         	movff	_mode1$15574,___fldiv@a
  4174  0109D8  C3FD  F073         	movff	_mode1$15574+1,___fldiv@a+1
  4175  0109DC  C3FE  F074         	movff	_mode1$15574+2,___fldiv@a+2
  4176  0109E0  C3FF  F075         	movff	_mode1$15574+3,___fldiv@a+3
  4177  0109E4  0E00               	movlw	0
  4178  0109E6  0100               	movlb	0	; () banked
  4179  0109E8  6F6E               	movwf	___fldiv@b& (0+255),b
  4180  0109EA  0E00               	movlw	0
  4181  0109EC  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
  4182  0109EE  0E6C               	movlw	108
  4183  0109F0  6F70               	movwf	(___fldiv@b+2)& (0+255),b
  4184  0109F2  0E42               	movlw	66
  4185  0109F4  6F71               	movwf	(___fldiv@b+3)& (0+255),b
  4186  0109F6  EC6E  F086         	call	___fldiv	;wreg free
  4187  0109FA  C06E  F0B2         	movff	?___fldiv,___fltol@f1
  4188  0109FE  C06F  F0B3         	movff	?___fldiv+1,___fltol@f1+1
  4189  010A02  C070  F0B4         	movff	?___fldiv+2,___fltol@f1+2
  4190  010A06  C071  F0B5         	movff	?___fldiv+3,___fltol@f1+3
  4191  010A0A  ECE6  F09B         	call	___fltol	;wreg free
  4192  010A0E  C0B2  F0C2         	movff	?___fltol,_IRValue
  4193  010A12  C0B3  F0C3         	movff	?___fltol+1,_IRValue+1
  4194                           
  4195                           ;main.c: 162: if (MXK_SwitchTo(eMXK_HMI)) {
  4196  010A16  0E01               	movlw	1
  4197  010A18  EC21  F0AE         	call	_MXK_SwitchTo
  4198  010A1C  0900               	iorlw	0
  4199  010A1E  B4D8               	btfsc	status,2,c
  4200  010A20  D00E               	goto	l2327
  4201                           
  4202                           ;main.c: 163: HMI_SetNumber(IRValue);
  4203  010A22  C0C2  F076         	movff	_IRValue,HMI_SetNumber@pInput
  4204  010A26  C0C3  F077         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  4205  010A2A  EC4A  F0B0         	call	_HMI_SetNumber	;wreg free
  4206                           
  4207                           ;main.c: 164: HMI_Render();
  4208  010A2E  EC82  F0AE         	call	_HMI_Render	;wreg free
  4209                           
  4210                           ;main.c: 165: if (MXK_Release())
  4211  010A32  EC4F  F0B1         	call	_MXK_Release	;wreg free
  4212  010A36  0900               	iorlw	0
  4213  010A38  A4D8               	btfss	status,2,c
  4214                           
  4215                           ;main.c: 166: MXK_Dequeue();
  4216  010A3A  ECA1  F0AE         	call	_MXK_Dequeue	;wreg free
  4217  010A3E                     l2327:
  4218                           
  4219                           ;main.c: 167: }
  4220                           ;main.c: 168: if (IRValue < MinDist) {
  4221  010A3E  0100               	movlb	0	; () banked
  4222  010A40  51FB               	movf	_MinDist& (0+255),w,b
  4223  010A42  0100               	movlb	0	; () banked
  4224  010A44  5DC2               	subwf	_IRValue& (0+255),w,b
  4225  010A46  0100               	movlb	0	; () banked
  4226  010A48  51C3               	movf	(_IRValue+1)& (0+255),w,b
  4227  010A4A  0A80               	xorlw	128
  4228  010A4C  0103               	movlb	3	; () banked
  4229  010A4E  6FF8               	movwf	??_mode1& (0+255),b
  4230  010A50  0100               	movlb	0	; () banked
  4231  010A52  51FC               	movf	(_MinDist+1)& (0+255),w,b
  4232  010A54  0A80               	xorlw	128
  4233  010A56  0103               	movlb	3	; () banked
  4234  010A58  59F8               	subwfb	??_mode1& (0+255),w,b
  4235  010A5A  B0D8               	btfsc	status,0,c
  4236  010A5C  D008               	goto	l2328
  4237                           
  4238                           ; BSR set to: 3
  4239                           ;main.c: 169: MinDist = IRValue;
  4240  010A5E  C0C2  F0FB         	movff	_IRValue,_MinDist
  4241  010A62  C0C3  F0FC         	movff	_IRValue+1,_MinDist+1
  4242                           
  4243                           ;main.c: 170: Stepstomin = StepRotate;
  4244  010A66  C0C6  F0C4         	movff	_StepRotate,_Stepstomin
  4245  010A6A  C0C7  F0C5         	movff	_StepRotate+1,_Stepstomin+1
  4246  010A6E                     l2328:
  4247                           
  4248                           ; BSR set to: 3
  4249                           ;main.c: 171: }
  4250                           ;main.c: 172: if (MXK_SwitchTo(eMXK_Motor)) {
  4251                           
  4252                           ; BSR set to: 3
  4253  010A6E  0E08               	movlw	8
  4254  010A70  EC21  F0AE         	call	_MXK_SwitchTo
  4255  010A74  0900               	iorlw	0
  4256  010A76  B4D8               	btfsc	status,2,c
  4257  010A78  D020               	goto	l2330
  4258                           
  4259                           ;main.c: 173: Motor_Speed(&Stepper, (50));
  4260  010A7A  0ECF               	movlw	low _Stepper
  4261  010A7C  0100               	movlb	0	; () banked
  4262  010A7E  6F7B               	movwf	Motor_Speed@pMotor& (0+255),b
  4263  010A80  0E03               	movlw	high _Stepper
  4264  010A82  0100               	movlb	0	; () banked
  4265  010A84  6F7C               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  4266  010A86  0E00               	movlw	0
  4267  010A88  0100               	movlb	0	; () banked
  4268  010A8A  6F7E               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  4269  010A8C  0E32               	movlw	50
  4270  010A8E  6F7D               	movwf	Motor_Speed@pFrequency& (0+255),b
  4271  010A90  EC35  F0B0         	call	_Motor_Speed	;wreg free
  4272                           
  4273                           ;main.c: 174: Motor_Move(&Stepper, 1);
  4274  010A94  0ECF               	movlw	low _Stepper
  4275  010A96  0100               	movlb	0	; () banked
  4276  010A98  6F63               	movwf	Motor_Move@pMotor& (0+255),b
  4277  010A9A  0E03               	movlw	high _Stepper
  4278  010A9C  0100               	movlb	0	; () banked
  4279  010A9E  6F64               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  4280  010AA0  0E00               	movlw	0
  4281  010AA2  0100               	movlb	0	; () banked
  4282  010AA4  6F66               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  4283  010AA6  0E01               	movlw	1
  4284  010AA8  6F65               	movwf	Motor_Move@pDelta& (0+255),b
  4285  010AAA  EC39  F0AF         	call	_Motor_Move	;wreg free
  4286                           
  4287                           ;main.c: 175: if (MXK_Release())
  4288  010AAE  EC4F  F0B1         	call	_MXK_Release	;wreg free
  4289  010AB2  0900               	iorlw	0
  4290  010AB4  A4D8               	btfss	status,2,c
  4291                           
  4292                           ;main.c: 176: MXK_Dequeue();
  4293  010AB6  ECA1  F0AE         	call	_MXK_Dequeue	;wreg free
  4294  010ABA                     l2330:
  4295                           
  4296                           ;main.c: 177: }
  4297                           ;main.c: 178: TimerX = 10;
  4298  010ABA  0E00               	movlw	0
  4299  010ABC  0100               	movlb	0	; () banked
  4300  010ABE  6FFA               	movwf	(_TimerX+1)& (0+255),b
  4301  010AC0  0E0A               	movlw	10
  4302  010AC2  6FF9               	movwf	_TimerX& (0+255),b
  4303                           
  4304                           ; BSR set to: 0
  4305                           ;main.c: 179: if (TimerX > 0) {
  4306  010AC4  0100               	movlb	0	; () banked
  4307  010AC6  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  4308  010AC8  D063               	goto	u13520
  4309  010ACA  0100               	movlb	0	; () banked
  4310  010ACC  51FA               	movf	(_TimerX+1)& (0+255),w,b
  4311  010ACE  E156               	bnz	l16191
  4312  010AD0  0100               	movlb	0	; () banked
  4313  010AD2  05F9               	decf	_TimerX& (0+255),w,b
  4314  010AD4  B0D8               	btfsc	status,0,c
  4315  010AD6  D052               	goto	l2332
  4316  010AD8  D05B               	goto	u13520
  4317  010ADA                     l16173:
  4318                           
  4319                           ; BSR set to: 0
  4320                           ;main.c: 181: ADC_Start(&ADC_AN0);
  4321  010ADA  0EF4               	movlw	low _ADC_AN0
  4322  010ADC  0100               	movlb	0	; () banked
  4323  010ADE  6F62               	movwf	ADC_Start@pInput& (0+255),b
  4324  010AE0  0E00               	movlw	high _ADC_AN0
  4325  010AE2  0100               	movlb	0	; () banked
  4326  010AE4  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
  4327  010AE6  ECF0  F0A6         	call	_ADC_Start	;wreg free
  4328                           
  4329                           ;main.c: 182: if (MXK_SwitchTo(eMXK_HMI)) {
  4330  010AEA  0E01               	movlw	1
  4331  010AEC  EC21  F0AE         	call	_MXK_SwitchTo
  4332  010AF0  0900               	iorlw	0
  4333  010AF2  B4D8               	btfsc	status,2,c
  4334  010AF4  D00E               	goto	l2335
  4335                           
  4336                           ;main.c: 183: HMI_SetNumber(IRValue);
  4337  010AF6  C0C2  F076         	movff	_IRValue,HMI_SetNumber@pInput
  4338  010AFA  C0C3  F077         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  4339  010AFE  EC4A  F0B0         	call	_HMI_SetNumber	;wreg free
  4340                           
  4341                           ;main.c: 184: HMI_Render();
  4342  010B02  EC82  F0AE         	call	_HMI_Render	;wreg free
  4343                           
  4344                           ;main.c: 185: if (MXK_Release())
  4345  010B06  EC4F  F0B1         	call	_MXK_Release	;wreg free
  4346  010B0A  0900               	iorlw	0
  4347  010B0C  A4D8               	btfss	status,2,c
  4348                           
  4349                           ;main.c: 186: MXK_Dequeue();
  4350  010B0E  ECA1  F0AE         	call	_MXK_Dequeue	;wreg free
  4351  010B12                     l2335:
  4352                           
  4353                           ;main.c: 187: }
  4354                           ;main.c: 188: IRValue = (59/ADC_Voltage(&ADC_AN0));
  4355  010B12  0EF4               	movlw	low _ADC_AN0
  4356  010B14  0100               	movlb	0	; () banked
  4357  010B16  6FA0               	movwf	ADC_Voltage@pInput& (0+255),b
  4358  010B18  0E00               	movlw	high _ADC_AN0
  4359  010B1A  0100               	movlb	0	; () banked
  4360  010B1C  6FA1               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  4361  010B1E  ECD0  F09D         	call	_ADC_Voltage	;wreg free
  4362  010B22  C0A0  F3FC         	movff	?_ADC_Voltage,_mode1$15574
  4363  010B26  C0A1  F3FD         	movff	?_ADC_Voltage+1,_mode1$15574+1
  4364  010B2A  C0A2  F3FE         	movff	?_ADC_Voltage+2,_mode1$15574+2
  4365  010B2E  C0A3  F3FF         	movff	?_ADC_Voltage+3,_mode1$15574+3
  4366                           
  4367                           ;main.c: 187: }
  4368                           ;main.c: 188: IRValue = (59/ADC_Voltage(&ADC_AN0));
  4369  010B32  C3FC  F072         	movff	_mode1$15574,___fldiv@a
  4370  010B36  C3FD  F073         	movff	_mode1$15574+1,___fldiv@a+1
  4371  010B3A  C3FE  F074         	movff	_mode1$15574+2,___fldiv@a+2
  4372  010B3E  C3FF  F075         	movff	_mode1$15574+3,___fldiv@a+3
  4373  010B42  0E00               	movlw	0
  4374  010B44  0100               	movlb	0	; () banked
  4375  010B46  6F6E               	movwf	___fldiv@b& (0+255),b
  4376  010B48  0E00               	movlw	0
  4377  010B4A  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
  4378  010B4C  0E6C               	movlw	108
  4379  010B4E  6F70               	movwf	(___fldiv@b+2)& (0+255),b
  4380  010B50  0E42               	movlw	66
  4381  010B52  6F71               	movwf	(___fldiv@b+3)& (0+255),b
  4382  010B54  EC6E  F086         	call	___fldiv	;wreg free
  4383  010B58  C06E  F0B2         	movff	?___fldiv,___fltol@f1
  4384  010B5C  C06F  F0B3         	movff	?___fldiv+1,___fltol@f1+1
  4385  010B60  C070  F0B4         	movff	?___fldiv+2,___fltol@f1+2
  4386  010B64  C071  F0B5         	movff	?___fldiv+3,___fltol@f1+3
  4387  010B68  ECE6  F09B         	call	___fltol	;wreg free
  4388  010B6C  C0B2  F0C2         	movff	?___fltol,_IRValue
  4389  010B70  C0B3  F0C3         	movff	?___fltol+1,_IRValue+1
  4390                           
  4391                           ;main.c: 189: TimerX--;
  4392  010B74  0100               	movlb	0	; () banked
  4393  010B76  07F9               	decf	_TimerX& (0+255),f,b
  4394  010B78  A0D8               	btfss	status,0,c
  4395  010B7A  07FA               	decf	(_TimerX+1)& (0+255),f,b
  4396  010B7C                     l2332:
  4397  010B7C                     l16191:
  4398                           
  4399                           ; BSR set to: 0
  4400  010B7C  0100               	movlb	0	; () banked
  4401  010B7E  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  4402  010B80  D007               	goto	u13520
  4403  010B82  0100               	movlb	0	; () banked
  4404  010B84  51FA               	movf	(_TimerX+1)& (0+255),w,b
  4405  010B86  E1A9               	bnz	l16173
  4406  010B88  0100               	movlb	0	; () banked
  4407  010B8A  05F9               	decf	_TimerX& (0+255),w,b
  4408  010B8C  B0D8               	btfsc	status,0,c
  4409  010B8E  D7A5               	goto	l2333
  4410  010B90                     u13520:
  4411                           
  4412                           ; BSR set to: 0
  4413                           
  4414                           ; BSR set to: 0
  4415                           
  4416                           ; BSR set to: 0
  4417                           
  4418                           ; BSR set to: 0
  4419  010B90  0100               	movlb	0	; () banked
  4420  010B92  BFC7               	btfsc	(_StepRotate+1)& (0+255),7,b
  4421  010B94  D704               	goto	l2325
  4422  010B96  0E90               	movlw	144
  4423  010B98  0100               	movlb	0	; () banked
  4424  010B9A  5DC6               	subwf	_StepRotate& (0+255),w,b
  4425  010B9C  0E01               	movlw	1
  4426  010B9E  0100               	movlb	0	; () banked
  4427  010BA0  59C7               	subwfb	(_StepRotate+1)& (0+255),w,b
  4428  010BA2  A0D8               	btfss	status,0,c
  4429  010BA4  D6FC               	goto	l2325
  4430                           
  4431                           ; BSR set to: 0
  4432                           ;main.c: 190: }
  4433                           ;main.c: 191: }
  4434                           ;main.c: 192: }
  4435                           ;main.c: 193: if (MXK_SwitchTo(eMXK_Motor)) {
  4436                           
  4437                           ; BSR set to: 0
  4438  010BA6  0E08               	movlw	8
  4439  010BA8  EC21  F0AE         	call	_MXK_SwitchTo
  4440  010BAC  0900               	iorlw	0
  4441  010BAE  B4D8               	btfsc	status,2,c
  4442  010BB0  D08A               	goto	l2340
  4443                           
  4444                           ;main.c: 194: Motor_Speed(&Stepper, (50));
  4445  010BB2  0ECF               	movlw	low _Stepper
  4446  010BB4  0100               	movlb	0	; () banked
  4447  010BB6  6F7B               	movwf	Motor_Speed@pMotor& (0+255),b
  4448  010BB8  0E03               	movlw	high _Stepper
  4449  010BBA  0100               	movlb	0	; () banked
  4450  010BBC  6F7C               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  4451  010BBE  0E00               	movlw	0
  4452  010BC0  0100               	movlb	0	; () banked
  4453  010BC2  6F7E               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  4454  010BC4  0E32               	movlw	50
  4455  010BC6  6F7D               	movwf	Motor_Speed@pFrequency& (0+255),b
  4456  010BC8  EC35  F0B0         	call	_Motor_Speed	;wreg free
  4457                           
  4458                           ;main.c: 195: int moveto = 400-Stepstomin;
  4459  010BCC  C0C4  F3F8         	movff	_Stepstomin,??_mode1
  4460  010BD0  C0C5  F3F9         	movff	_Stepstomin+1,??_mode1+1
  4461  010BD4  0103               	movlb	3	; () banked
  4462  010BD6  1FF8               	comf	??_mode1& (0+255),f,b
  4463  010BD8  1FF9               	comf	(??_mode1+1)& (0+255),f,b
  4464  010BDA  4BF8               	infsnz	??_mode1& (0+255),f,b
  4465  010BDC  2BF9               	incf	(??_mode1+1)& (0+255),f,b
  4466  010BDE  0E90               	movlw	144
  4467  010BE0  0103               	movlb	3	; () banked
  4468  010BE2  25F8               	addwf	??_mode1& (0+255),w,b
  4469  010BE4  0103               	movlb	3	; () banked
  4470  010BE6  6FFA               	movwf	mode1@moveto& (0+255),b
  4471  010BE8  0E01               	movlw	1
  4472  010BEA  0103               	movlb	3	; () banked
  4473  010BEC  21F9               	addwfc	(??_mode1+1)& (0+255),w,b
  4474  010BEE  0103               	movlb	3	; () banked
  4475  010BF0  6FFB               	movwf	(mode1@moveto+1)& (0+255),b
  4476                           
  4477                           ; BSR set to: 3
  4478                           ;main.c: 197: Motor_Move(&Stepper, (-moveto));
  4479  010BF2  0ECF               	movlw	low _Stepper
  4480  010BF4  0100               	movlb	0	; () banked
  4481  010BF6  6F63               	movwf	Motor_Move@pMotor& (0+255),b
  4482  010BF8  0E03               	movlw	high _Stepper
  4483  010BFA  0100               	movlb	0	; () banked
  4484  010BFC  6F64               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  4485  010BFE  C3FA  F3F8         	movff	mode1@moveto,??_mode1
  4486  010C02  C3FB  F3F9         	movff	mode1@moveto+1,??_mode1+1
  4487  010C06  0103               	movlb	3	; () banked
  4488  010C08  1FF8               	comf	??_mode1& (0+255),f,b
  4489  010C0A  1FF9               	comf	(??_mode1+1)& (0+255),f,b
  4490  010C0C  4BF8               	infsnz	??_mode1& (0+255),f,b
  4491  010C0E  2BF9               	incf	(??_mode1+1)& (0+255),f,b
  4492  010C10  C3F8  F065         	movff	??_mode1,Motor_Move@pDelta
  4493  010C14  C3F9  F066         	movff	??_mode1+1,Motor_Move@pDelta+1
  4494  010C18  EC39  F0AF         	call	_Motor_Move	;wreg free
  4495                           
  4496                           ;main.c: 198: if (MXK_Release())
  4497  010C1C  EC4F  F0B1         	call	_MXK_Release	;wreg free
  4498  010C20  0900               	iorlw	0
  4499  010C22  B4D8               	btfsc	status,2,c
  4500  010C24  D050               	goto	l2340
  4501                           
  4502                           ;main.c: 199: MXK_Dequeue();
  4503  010C26  ECA1  F0AE         	call	_MXK_Dequeue	;wreg free
  4504                           
  4505                           ;main.c: 200: }
  4506                           ;main.c: 201: while (Stepper.mDelta > 0) {
  4507  010C2A  D04D               	goto	l2340
  4508  010C2C                     l16207:
  4509                           
  4510                           ;main.c: 202: ADC_Start(&ADC_AN0);
  4511  010C2C  0EF4               	movlw	low _ADC_AN0
  4512  010C2E  0100               	movlb	0	; () banked
  4513  010C30  6F62               	movwf	ADC_Start@pInput& (0+255),b
  4514  010C32  0E00               	movlw	high _ADC_AN0
  4515  010C34  0100               	movlb	0	; () banked
  4516  010C36  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
  4517  010C38  ECF0  F0A6         	call	_ADC_Start	;wreg free
  4518                           
  4519                           ;main.c: 203: if (MXK_SwitchTo(eMXK_HMI)) {
  4520  010C3C  0E01               	movlw	1
  4521  010C3E  EC21  F0AE         	call	_MXK_SwitchTo
  4522  010C42  0900               	iorlw	0
  4523  010C44  B4D8               	btfsc	status,2,c
  4524  010C46  D00E               	goto	l2343
  4525                           
  4526                           ;main.c: 204: HMI_SetNumber(IRValue);
  4527  010C48  C0C2  F076         	movff	_IRValue,HMI_SetNumber@pInput
  4528  010C4C  C0C3  F077         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  4529  010C50  EC4A  F0B0         	call	_HMI_SetNumber	;wreg free
  4530                           
  4531                           ;main.c: 205: HMI_Render();
  4532  010C54  EC82  F0AE         	call	_HMI_Render	;wreg free
  4533                           
  4534                           ;main.c: 206: if (MXK_Release())
  4535  010C58  EC4F  F0B1         	call	_MXK_Release	;wreg free
  4536  010C5C  0900               	iorlw	0
  4537  010C5E  A4D8               	btfss	status,2,c
  4538                           
  4539                           ;main.c: 207: MXK_Dequeue();
  4540  010C60  ECA1  F0AE         	call	_MXK_Dequeue	;wreg free
  4541  010C64                     l2343:
  4542                           
  4543                           ;main.c: 208: }
  4544                           ;main.c: 209: IRValue = (59/ADC_Voltage(&ADC_AN0));
  4545  010C64  0EF4               	movlw	low _ADC_AN0
  4546  010C66  0100               	movlb	0	; () banked
  4547  010C68  6FA0               	movwf	ADC_Voltage@pInput& (0+255),b
  4548  010C6A  0E00               	movlw	high _ADC_AN0
  4549  010C6C  0100               	movlb	0	; () banked
  4550  010C6E  6FA1               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  4551  010C70  ECD0  F09D         	call	_ADC_Voltage	;wreg free
  4552  010C74  C0A0  F3FC         	movff	?_ADC_Voltage,_mode1$15574
  4553  010C78  C0A1  F3FD         	movff	?_ADC_Voltage+1,_mode1$15574+1
  4554  010C7C  C0A2  F3FE         	movff	?_ADC_Voltage+2,_mode1$15574+2
  4555  010C80  C0A3  F3FF         	movff	?_ADC_Voltage+3,_mode1$15574+3
  4556                           
  4557                           ;main.c: 208: }
  4558                           ;main.c: 209: IRValue = (59/ADC_Voltage(&ADC_AN0));
  4559  010C84  C3FC  F072         	movff	_mode1$15574,___fldiv@a
  4560  010C88  C3FD  F073         	movff	_mode1$15574+1,___fldiv@a+1
  4561  010C8C  C3FE  F074         	movff	_mode1$15574+2,___fldiv@a+2
  4562  010C90  C3FF  F075         	movff	_mode1$15574+3,___fldiv@a+3
  4563  010C94  0E00               	movlw	0
  4564  010C96  0100               	movlb	0	; () banked
  4565  010C98  6F6E               	movwf	___fldiv@b& (0+255),b
  4566  010C9A  0E00               	movlw	0
  4567  010C9C  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
  4568  010C9E  0E6C               	movlw	108
  4569  010CA0  6F70               	movwf	(___fldiv@b+2)& (0+255),b
  4570  010CA2  0E42               	movlw	66
  4571  010CA4  6F71               	movwf	(___fldiv@b+3)& (0+255),b
  4572  010CA6  EC6E  F086         	call	___fldiv	;wreg free
  4573  010CAA  C06E  F0B2         	movff	?___fldiv,___fltol@f1
  4574  010CAE  C06F  F0B3         	movff	?___fldiv+1,___fltol@f1+1
  4575  010CB2  C070  F0B4         	movff	?___fldiv+2,___fltol@f1+2
  4576  010CB6  C071  F0B5         	movff	?___fldiv+3,___fltol@f1+3
  4577  010CBA  ECE6  F09B         	call	___fltol	;wreg free
  4578  010CBE  C0B2  F0C2         	movff	?___fltol,_IRValue
  4579  010CC2  C0B3  F0C3         	movff	?___fltol+1,_IRValue+1
  4580  010CC6                     l2340:
  4581  010CC6  0103               	movlb	3	; () banked
  4582  010CC8  BFD0               	btfsc	(_Stepper+1)& (0+255),7,b
  4583  010CCA  0012               	return	
  4584  010CCC  0103               	movlb	3	; () banked
  4585  010CCE  51D0               	movf	(_Stepper+1)& (0+255),w,b
  4586  010CD0  E1AD               	bnz	l16207
  4587  010CD2  0103               	movlb	3	; () banked
  4588  010CD4  05CF               	decf	_Stepper& (0+255),w,b
  4589  010CD6  A0D8               	btfss	status,0,c
  4590  010CD8  0012               	return	
  4591  010CDA  D7A8               	goto	l2341
  4592  010CDC                     __end_of_mode1:
  4593                           	opt stack 0
  4594                           tosu	equ	0xFFF
  4595                           tosh	equ	0xFFE
  4596                           tosl	equ	0xFFD
  4597                           pclath	equ	0xFFA
  4598                           tblptru	equ	0xFF8
  4599                           tblptrh	equ	0xFF7
  4600                           tblptrl	equ	0xFF6
  4601                           tablat	equ	0xFF5
  4602                           postinc0	equ	0xFEE
  4603                           wreg	equ	0xFE8
  4604                           postdec1	equ	0xFE5
  4605                           fsr1h	equ	0xFE2
  4606                           fsr1l	equ	0xFE1
  4607                           postinc2	equ	0xFDE
  4608                           status	equ	0xFD8
  4609                           
  4610 ;; *************** function _update_distance *****************
  4611 ;; Defined at:
  4612 ;;		line 315 in file "Library/iRobotSerial.c"
  4613 ;; Parameters:    Size  Location     Type
  4614 ;;		None
  4615 ;; Auto vars:     Size  Location     Type
  4616 ;;		None
  4617 ;; Return value:  Size  Location     Type
  4618 ;;                  1    wreg      void 
  4619 ;; Registers used:
  4620 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4621 ;; Tracked objects:
  4622 ;;		On entry : 0/0
  4623 ;;		On exit  : 0/0
  4624 ;;		Unchanged: 0/0
  4625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4629 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4630 ;;Total ram usage:        0 bytes
  4631 ;; Hardware stack levels used:    1
  4632 ;; Hardware stack levels required when called:   10
  4633 ;; This function calls:
  4634 ;;		_irobot_query_and_update
  4635 ;; This function is called by:
  4636 ;;		_mode1
  4637 ;;		_mode2
  4638 ;;		_mode4
  4639 ;; This function uses a non-reentrant model
  4640 ;;
  4641                           
  4642                           	psect	text6
  4643  0163D8                     __ptext6:
  4644                           	opt stack 0
  4645  0163D8                     _update_distance:
  4646                           	opt stack 19
  4647                           
  4648                           ;iRobotSerial.c: 316: irobot_query_and_update(1, iR_PKT_DISTANCE);
  4649                           
  4650                           ; BSR set to: 3
  4651                           ;incstack = 0
  4652  0163D8  0E00               	movlw	0
  4653  0163DA  0100               	movlb	0	; () banked
  4654  0163DC  6F67               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  4655  0163DE  0E13               	movlw	19
  4656  0163E0  6F66               	movwf	?_irobot_query_and_update& (0+255),b
  4657  0163E2  0E01               	movlw	1
  4658  0163E4  ECAA  F095         	call	_irobot_query_and_update
  4659  0163E8  0012               	return		;funcret
  4660  0163EA                     __end_of_update_distance:
  4661                           	opt stack 0
  4662                           tosu	equ	0xFFF
  4663                           tosh	equ	0xFFE
  4664                           tosl	equ	0xFFD
  4665                           pclath	equ	0xFFA
  4666                           tblptru	equ	0xFF8
  4667                           tblptrh	equ	0xFF7
  4668                           tblptrl	equ	0xFF6
  4669                           tablat	equ	0xFF5
  4670                           postinc0	equ	0xFEE
  4671                           wreg	equ	0xFE8
  4672                           postdec1	equ	0xFE5
  4673                           fsr1h	equ	0xFE2
  4674                           fsr1l	equ	0xFE1
  4675                           postinc2	equ	0xFDE
  4676                           status	equ	0xFD8
  4677                           
  4678 ;; *************** function _update_bump_and_cliff *****************
  4679 ;; Defined at:
  4680 ;;		line 308 in file "Library/iRobotSerial.c"
  4681 ;; Parameters:    Size  Location     Type
  4682 ;;		None
  4683 ;; Auto vars:     Size  Location     Type
  4684 ;;		None
  4685 ;; Return value:  Size  Location     Type
  4686 ;;                  1    wreg      void 
  4687 ;; Registers used:
  4688 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4689 ;; Tracked objects:
  4690 ;;		On entry : 0/0
  4691 ;;		On exit  : 0/0
  4692 ;;		Unchanged: 0/0
  4693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4697 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4698 ;;Total ram usage:        0 bytes
  4699 ;; Hardware stack levels used:    1
  4700 ;; Hardware stack levels required when called:   10
  4701 ;; This function calls:
  4702 ;;		_irobot_query_and_update
  4703 ;; This function is called by:
  4704 ;;		_mode1
  4705 ;;		_mode2
  4706 ;;		_mode4
  4707 ;; This function uses a non-reentrant model
  4708 ;;
  4709                           
  4710                           	psect	text7
  4711  015E38                     __ptext7:
  4712                           	opt stack 0
  4713  015E38                     _update_bump_and_cliff:
  4714                           	opt stack 19
  4715                           
  4716                           ;iRobotSerial.c: 309: irobot_query_and_update(5, iR_PKT_BUMP_DROP,
  4717                           ;iRobotSerial.c: 310: iR_PKT_CLIFF_L, iR_PKT_CLIFF_FL,
  4718                           ;iRobotSerial.c: 311: iR_PKT_CLIFF_FR, iR_PKT_CLIFF_R);
  4719                           
  4720                           ;incstack = 0
  4721  015E38  0E00               	movlw	0
  4722  015E3A  0100               	movlb	0	; () banked
  4723  015E3C  6F67               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  4724  015E3E  0E07               	movlw	7
  4725  015E40  6F66               	movwf	?_irobot_query_and_update& (0+255),b
  4726  015E42  0E00               	movlw	0
  4727  015E44  0100               	movlb	0	; () banked
  4728  015E46  6F69               	movwf	(?_irobot_query_and_update+3)& (0+255),b
  4729  015E48  0E09               	movlw	9
  4730  015E4A  6F68               	movwf	(?_irobot_query_and_update+2)& (0+255),b
  4731  015E4C  0E00               	movlw	0
  4732  015E4E  0100               	movlb	0	; () banked
  4733  015E50  6F6B               	movwf	(?_irobot_query_and_update+5)& (0+255),b
  4734  015E52  0E0A               	movlw	10
  4735  015E54  6F6A               	movwf	(?_irobot_query_and_update+4)& (0+255),b
  4736  015E56  0E00               	movlw	0
  4737  015E58  0100               	movlb	0	; () banked
  4738  015E5A  6F6D               	movwf	(?_irobot_query_and_update+7)& (0+255),b
  4739  015E5C  0E0B               	movlw	11
  4740  015E5E  6F6C               	movwf	(?_irobot_query_and_update+6)& (0+255),b
  4741  015E60  0E00               	movlw	0
  4742  015E62  0100               	movlb	0	; () banked
  4743  015E64  6F6F               	movwf	(?_irobot_query_and_update+9)& (0+255),b
  4744  015E66  0E0C               	movlw	12
  4745  015E68  6F6E               	movwf	(?_irobot_query_and_update+8)& (0+255),b
  4746  015E6A  0E05               	movlw	5
  4747  015E6C  ECAA  F095         	call	_irobot_query_and_update
  4748  015E70  0012               	return		;funcret
  4749  015E72                     __end_of_update_bump_and_cliff:
  4750                           	opt stack 0
  4751                           tosu	equ	0xFFF
  4752                           tosh	equ	0xFFE
  4753                           tosl	equ	0xFFD
  4754                           pclath	equ	0xFFA
  4755                           tblptru	equ	0xFF8
  4756                           tblptrh	equ	0xFF7
  4757                           tblptrl	equ	0xFF6
  4758                           tablat	equ	0xFF5
  4759                           postinc0	equ	0xFEE
  4760                           wreg	equ	0xFE8
  4761                           postdec1	equ	0xFE5
  4762                           fsr1h	equ	0xFE2
  4763                           fsr1l	equ	0xFE1
  4764                           postinc2	equ	0xFDE
  4765                           status	equ	0xFD8
  4766                           
  4767 ;; *************** function _update_angle *****************
  4768 ;; Defined at:
  4769 ;;		line 320 in file "Library/iRobotSerial.c"
  4770 ;; Parameters:    Size  Location     Type
  4771 ;;		None
  4772 ;; Auto vars:     Size  Location     Type
  4773 ;;		None
  4774 ;; Return value:  Size  Location     Type
  4775 ;;                  1    wreg      void 
  4776 ;; Registers used:
  4777 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4778 ;; Tracked objects:
  4779 ;;		On entry : 0/0
  4780 ;;		On exit  : 0/0
  4781 ;;		Unchanged: 0/0
  4782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4786 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4787 ;;Total ram usage:        0 bytes
  4788 ;; Hardware stack levels used:    1
  4789 ;; Hardware stack levels required when called:   10
  4790 ;; This function calls:
  4791 ;;		_irobot_query_and_update
  4792 ;; This function is called by:
  4793 ;;		_mode1
  4794 ;;		_mode2
  4795 ;;		_mode4
  4796 ;; This function uses a non-reentrant model
  4797 ;;
  4798                           
  4799                           	psect	text8
  4800  0163EA                     __ptext8:
  4801                           	opt stack 0
  4802  0163EA                     _update_angle:
  4803                           	opt stack 19
  4804                           
  4805                           ;iRobotSerial.c: 321: irobot_query_and_update(1, iR_PKT_ANGLE);
  4806                           
  4807                           ;incstack = 0
  4808  0163EA  0E00               	movlw	0
  4809  0163EC  0100               	movlb	0	; () banked
  4810  0163EE  6F67               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  4811  0163F0  0E14               	movlw	20
  4812  0163F2  6F66               	movwf	?_irobot_query_and_update& (0+255),b
  4813  0163F4  0E01               	movlw	1
  4814  0163F6  ECAA  F095         	call	_irobot_query_and_update
  4815  0163FA  0012               	return		;funcret
  4816  0163FC                     __end_of_update_angle:
  4817                           	opt stack 0
  4818                           tosu	equ	0xFFF
  4819                           tosh	equ	0xFFE
  4820                           tosl	equ	0xFFD
  4821                           pclath	equ	0xFFA
  4822                           tblptru	equ	0xFF8
  4823                           tblptrh	equ	0xFF7
  4824                           tblptrl	equ	0xFF6
  4825                           tablat	equ	0xFF5
  4826                           postinc0	equ	0xFEE
  4827                           wreg	equ	0xFE8
  4828                           postdec1	equ	0xFE5
  4829                           fsr1h	equ	0xFE2
  4830                           fsr1l	equ	0xFE1
  4831                           postinc2	equ	0xFDE
  4832                           status	equ	0xFD8
  4833                           
  4834 ;; *************** function _irobot_query_and_update *****************
  4835 ;; Defined at:
  4836 ;;		line 130 in file "Library/iRobotSerial.c"
  4837 ;; Parameters:    Size  Location     Type
  4838 ;;  numberOfPack    1    wreg     unsigned char 
  4839 ;; Auto vars:     Size  Location     Type
  4840 ;;  numberOfPack    1   24[BANK0 ] unsigned char 
  4841 ;;  TXArray       256    0[BANK2 ] unsigned char [256]
  4842 ;;  RXArray       256    0[BANK1 ] unsigned char [256]
  4843 ;;  packetIDs       2   21[BANK0 ] PTR void [1]
  4844 ;;		 -> ?_irobot_query_and_update(1), 
  4845 ;;  i               1   28[BANK0 ] unsigned char 
  4846 ;;  startIndex      1   27[BANK0 ] unsigned char 
  4847 ;;  j               1   26[BANK0 ] unsigned char 
  4848 ;;  packetVariab    1   25[BANK0 ] unsigned char 
  4849 ;;  streamSize      1   23[BANK0 ] unsigned char 
  4850 ;; Return value:  Size  Location     Type
  4851 ;;                  1    wreg      void 
  4852 ;; Registers used:
  4853 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4854 ;; Tracked objects:
  4855 ;;		On entry : 0/0
  4856 ;;		On exit  : 0/0
  4857 ;;		Unchanged: 0/0
  4858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4859 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4860 ;;      Locals:         0       8     256     256       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4861 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4862 ;;      Totals:         0      23     256     256       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4863 ;;Total ram usage:      535 bytes
  4864 ;; Hardware stack levels used:    1
  4865 ;; Hardware stack levels required when called:    9
  4866 ;; This function calls:
  4867 ;;		_eusart_getch
  4868 ;;		_eusart_putch
  4869 ;;		_get_packet_size
  4870 ;;		_rx_assign
  4871 ;; This function is called by:
  4872 ;;		_update_bump_and_cliff
  4873 ;;		_update_distance
  4874 ;;		_update_angle
  4875 ;; This function uses a non-reentrant model
  4876 ;;
  4877                           
  4878                           	psect	text9
  4879  012B54                     __ptext9:
  4880                           	opt stack 0
  4881  012B54                     _irobot_query_and_update:
  4882                           	opt stack 19
  4883                           
  4884                           ;incstack = 0
  4885                           ;irobot_query_and_update@numberOfPacketRequests stored from wreg
  4886  012B54  0100               	movlb	0	; () banked
  4887  012B56  6F78               	movwf	irobot_query_and_update@numberOfPacketRequests& (0+255),b
  4888                           
  4889                           ;iRobotSerial.c: 131: UINT8 i, j, packetVariable, streamSize = 0, startIndex = 0, RXArra
      +                          y[256], TXArray[256];
  4890  012B58  0E00               	movlw	0
  4891  012B5A  0100               	movlb	0	; () banked
  4892  012B5C  6F77               	movwf	irobot_query_and_update@streamSize& (0+255),b
  4893  012B5E  0E00               	movlw	0
  4894  012B60  0100               	movlb	0	; () banked
  4895  012B62  6F7B               	movwf	irobot_query_and_update@startIndex& (0+255),b
  4896                           
  4897                           ;iRobotSerial.c: 133: va_list packetIDs;
  4898                           ;iRobotSerial.c: 134: *packetIDs = __va_start();
  4899  012B64  0E66               	movlw	low ?_irobot_query_and_update
  4900  012B66  0100               	movlb	0	; () banked
  4901  012B68  6F75               	movwf	irobot_query_and_update@packetIDs& (0+255),b
  4902  012B6A  0E00               	movlw	high ?_irobot_query_and_update
  4903  012B6C  0100               	movlb	0	; () banked
  4904  012B6E  6F76               	movwf	(irobot_query_and_update@packetIDs+1)& (0+255),b
  4905                           
  4906                           ; BSR set to: 0
  4907                           ;iRobotSerial.c: 135: eusart_putch(iR_QUERY_LIST);
  4908  012B70  0E95               	movlw	149
  4909  012B72  EC15  F0B2         	call	_eusart_putch
  4910                           
  4911                           ;iRobotSerial.c: 136: eusart_putch(numberOfPacketRequests);
  4912  012B76  0100               	movlb	0	; () banked
  4913  012B78  5178               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  4914  012B7A  EC15  F0B2         	call	_eusart_putch
  4915                           
  4916                           ;iRobotSerial.c: 137: for (i = 0; i < numberOfPacketRequests; i++) {
  4917  012B7E  0E00               	movlw	0
  4918  012B80  0100               	movlb	0	; () banked
  4919  012B82  6F7C               	movwf	irobot_query_and_update@i& (0+255),b
  4920  012B84  D023               	goto	l2091
  4921  012B86                     
  4922                           ; BSR set to: 0
  4923                           ;iRobotSerial.c: 138: packetVariable = (*(int *)__va_arg((*(int **)packetIDs), (int)0));
  4924                           
  4925                           ; BSR set to: 0
  4926  012B86  C075  FFD9         	movff	irobot_query_and_update@packetIDs,fsr2l
  4927  012B8A  C076  FFDA         	movff	irobot_query_and_update@packetIDs+1,fsr2h
  4928  012B8E  50DF               	movf	indf2,w,c
  4929  012B90  0100               	movlb	0	; () banked
  4930  012B92  6F79               	movwf	irobot_query_and_update@packetVariable& (0+255),b
  4931                           
  4932                           ; BSR set to: 0
  4933  012B94  0E02               	movlw	2
  4934  012B96  0100               	movlb	0	; () banked
  4935  012B98  2775               	addwf	irobot_query_and_update@packetIDs& (0+255),f,b
  4936  012B9A  0E00               	movlw	0
  4937  012B9C  2376               	addwfc	(irobot_query_and_update@packetIDs+1)& (0+255),f,b
  4938                           
  4939                           ; BSR set to: 0
  4940                           ;iRobotSerial.c: 139: streamSize += get_packet_size(packetVariable);
  4941  012B9E  0100               	movlb	0	; () banked
  4942  012BA0  5179               	movf	irobot_query_and_update@packetVariable& (0+255),w,b
  4943  012BA2  EC90  F0AA         	call	_get_packet_size
  4944  012BA6  0100               	movlb	0	; () banked
  4945  012BA8  2777               	addwf	irobot_query_and_update@streamSize& (0+255),f,b
  4946                           
  4947                           ; BSR set to: 0
  4948                           ;iRobotSerial.c: 140: TXArray[i] = packetVariable;
  4949  012BAA  0100               	movlb	0	; () banked
  4950  012BAC  517C               	movf	irobot_query_and_update@i& (0+255),w,b
  4951  012BAE  0D01               	mullw	1
  4952  012BB0  0E00               	movlw	low irobot_query_and_update@TXArray
  4953  012BB2  24F3               	addwf	prodl,w,c
  4954  012BB4  6ED9               	movwf	fsr2l,c
  4955  012BB6  0E02               	movlw	high irobot_query_and_update@TXArray
  4956  012BB8  20F4               	addwfc	prodh,w,c
  4957  012BBA  6EDA               	movwf	fsr2h,c
  4958  012BBC  C079  FFDF         	movff	irobot_query_and_update@packetVariable,indf2
  4959                           
  4960                           ; BSR set to: 0
  4961                           ;iRobotSerial.c: 141: eusart_putch(packetVariable);
  4962  012BC0  0100               	movlb	0	; () banked
  4963  012BC2  5179               	movf	irobot_query_and_update@packetVariable& (0+255),w,b
  4964  012BC4  EC15  F0B2         	call	_eusart_putch
  4965  012BC8  0100               	movlb	0	; () banked
  4966  012BCA  2B7C               	incf	irobot_query_and_update@i& (0+255),f,b
  4967  012BCC                     l2091:
  4968                           
  4969                           ; BSR set to: 0
  4970                           
  4971                           ; BSR set to: 0
  4972  012BCC  0100               	movlb	0	; () banked
  4973  012BCE  5178               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  4974  012BD0  0100               	movlb	0	; () banked
  4975  012BD2  5D7C               	subwf	irobot_query_and_update@i& (0+255),w,b
  4976  012BD4  A0D8               	btfss	status,0,c
  4977  012BD6  D7D7               	goto	l2092
  4978                           
  4979                           ; BSR set to: 0
  4980                           ;iRobotSerial.c: 142: }
  4981                           ;iRobotSerial.c: 143: ;
  4982                           ;iRobotSerial.c: 145: for (i = 0; i < streamSize; i++) {RXArray[i] = eusart_getch();}
  4983                           
  4984                           ; BSR set to: 0
  4985  012BD8  0E00               	movlw	0
  4986  012BDA  0100               	movlb	0	; () banked
  4987  012BDC  6F7C               	movwf	irobot_query_and_update@i& (0+255),b
  4988  012BDE  D00E               	goto	l2094
  4989  012BE0                     
  4990                           ; BSR set to: 0
  4991                           
  4992                           ; BSR set to: 0
  4993  012BE0  0100               	movlb	0	; () banked
  4994  012BE2  517C               	movf	irobot_query_and_update@i& (0+255),w,b
  4995  012BE4  0D01               	mullw	1
  4996  012BE6  0E00               	movlw	low irobot_query_and_update@RXArray
  4997  012BE8  24F3               	addwf	prodl,w,c
  4998  012BEA  6ED9               	movwf	fsr2l,c
  4999  012BEC  0E01               	movlw	high irobot_query_and_update@RXArray
  5000  012BEE  20F4               	addwfc	prodh,w,c
  5001  012BF0  6EDA               	movwf	fsr2h,c
  5002  012BF2  EC58  F0B2         	call	_eusart_getch	;wreg free
  5003  012BF6  6EDF               	movwf	indf2,c
  5004  012BF8  0100               	movlb	0	; () banked
  5005  012BFA  2B7C               	incf	irobot_query_and_update@i& (0+255),f,b
  5006  012BFC                     l2094:
  5007                           
  5008                           ; BSR set to: 0
  5009                           
  5010                           ; BSR set to: 0
  5011  012BFC  0100               	movlb	0	; () banked
  5012  012BFE  5177               	movf	irobot_query_and_update@streamSize& (0+255),w,b
  5013  012C00  0100               	movlb	0	; () banked
  5014  012C02  5D7C               	subwf	irobot_query_and_update@i& (0+255),w,b
  5015  012C04  A0D8               	btfss	status,0,c
  5016  012C06  D7EC               	goto	l2095
  5017                           
  5018                           ; BSR set to: 0
  5019                           ;iRobotSerial.c: 147: for (i = 0; i < numberOfPacketRequests; i++) {
  5020                           
  5021                           ; BSR set to: 0
  5022  012C08  0E00               	movlw	0
  5023  012C0A  0100               	movlb	0	; () banked
  5024  012C0C  6F7C               	movwf	irobot_query_and_update@i& (0+255),b
  5025  012C0E  D05E               	goto	l2097
  5026  012C10                     l2098:
  5027                           
  5028                           ; BSR set to: 0
  5029                           ;iRobotSerial.c: 148: for (j = startIndex; j < get_packet_size(TXArray[i]) + startIndex;
      +                           j++) {
  5030  012C10  C07B  F07A         	movff	irobot_query_and_update@startIndex,irobot_query_and_update@j
  5031  012C14  D021               	goto	l2099
  5032  012C16                     
  5033                           ; BSR set to: 0
  5034                           ;iRobotSerial.c: 149: rx_assign(TXArray[i], RXArray[j], j - startIndex);
  5035                           
  5036                           ; BSR set to: 0
  5037  012C16  0100               	movlb	0	; () banked
  5038  012C18  517A               	movf	irobot_query_and_update@j& (0+255),w,b
  5039  012C1A  0D01               	mullw	1
  5040  012C1C  0E00               	movlw	low irobot_query_and_update@RXArray
  5041  012C1E  24F3               	addwf	prodl,w,c
  5042  012C20  6ED9               	movwf	fsr2l,c
  5043  012C22  0E01               	movlw	high irobot_query_and_update@RXArray
  5044  012C24  20F4               	addwfc	prodh,w,c
  5045  012C26  6EDA               	movwf	fsr2h,c
  5046  012C28  50DF               	movf	indf2,w,c
  5047  012C2A  0100               	movlb	0	; () banked
  5048  012C2C  6F61               	movwf	rx_assign@packetIDValue& (0+255),b
  5049  012C2E  0100               	movlb	0	; () banked
  5050  012C30  517B               	movf	irobot_query_and_update@startIndex& (0+255),w,b
  5051  012C32  0800               	sublw	0
  5052  012C34  0100               	movlb	0	; () banked
  5053  012C36  257A               	addwf	irobot_query_and_update@j& (0+255),w,b
  5054  012C38  0100               	movlb	0	; () banked
  5055  012C3A  6F62               	movwf	rx_assign@byteNumber& (0+255),b
  5056  012C3C  0100               	movlb	0	; () banked
  5057  012C3E  517C               	movf	irobot_query_and_update@i& (0+255),w,b
  5058  012C40  0D01               	mullw	1
  5059  012C42  0E00               	movlw	low irobot_query_and_update@TXArray
  5060  012C44  24F3               	addwf	prodl,w,c
  5061  012C46  6ED9               	movwf	fsr2l,c
  5062  012C48  0E02               	movlw	high irobot_query_and_update@TXArray
  5063  012C4A  20F4               	addwfc	prodh,w,c
  5064  012C4C  6EDA               	movwf	fsr2h,c
  5065  012C4E  50DF               	movf	indf2,w,c
  5066  012C50  ECEC  F09C         	call	_rx_assign
  5067  012C54  0100               	movlb	0	; () banked
  5068  012C56  2B7A               	incf	irobot_query_and_update@j& (0+255),f,b
  5069  012C58                     l2099:
  5070                           
  5071                           ; BSR set to: 0
  5072                           
  5073                           ; BSR set to: 0
  5074  012C58  0100               	movlb	0	; () banked
  5075  012C5A  517C               	movf	irobot_query_and_update@i& (0+255),w,b
  5076  012C5C  0D01               	mullw	1
  5077  012C5E  0E00               	movlw	low irobot_query_and_update@TXArray
  5078  012C60  24F3               	addwf	prodl,w,c
  5079  012C62  6ED9               	movwf	fsr2l,c
  5080  012C64  0E02               	movlw	high irobot_query_and_update@TXArray
  5081  012C66  20F4               	addwfc	prodh,w,c
  5082  012C68  6EDA               	movwf	fsr2h,c
  5083  012C6A  50DF               	movf	indf2,w,c
  5084  012C6C  EC90  F0AA         	call	_get_packet_size
  5085  012C70  0100               	movlb	0	; () banked
  5086  012C72  6F70               	movwf	??_irobot_query_and_update& (0+255),b
  5087  012C74  6B71               	clrf	(??_irobot_query_and_update+1)& (0+255),b
  5088  012C76  0100               	movlb	0	; () banked
  5089  012C78  517B               	movf	irobot_query_and_update@startIndex& (0+255),w,b
  5090  012C7A  0100               	movlb	0	; () banked
  5091  012C7C  2770               	addwf	??_irobot_query_and_update& (0+255),f,b
  5092  012C7E  0E00               	movlw	0
  5093  012C80  2371               	addwfc	(??_irobot_query_and_update+1)& (0+255),f,b
  5094  012C82  0100               	movlb	0	; () banked
  5095  012C84  517A               	movf	irobot_query_and_update@j& (0+255),w,b
  5096  012C86  0100               	movlb	0	; () banked
  5097  012C88  6F72               	movwf	(??_irobot_query_and_update+2)& (0+255),b
  5098  012C8A  6B73               	clrf	(??_irobot_query_and_update+3)& (0+255),b
  5099  012C8C  0100               	movlb	0	; () banked
  5100  012C8E  5170               	movf	??_irobot_query_and_update& (0+255),w,b
  5101  012C90  0100               	movlb	0	; () banked
  5102  012C92  5D72               	subwf	(??_irobot_query_and_update+2)& (0+255),w,b
  5103  012C94  0100               	movlb	0	; () banked
  5104  012C96  5173               	movf	(??_irobot_query_and_update+3)& (0+255),w,b
  5105  012C98  0A80               	xorlw	128
  5106  012C9A  0100               	movlb	0	; () banked
  5107  012C9C  6F74               	movwf	(??_irobot_query_and_update+4)& (0+255),b
  5108  012C9E  0100               	movlb	0	; () banked
  5109  012CA0  5171               	movf	(??_irobot_query_and_update+1)& (0+255),w,b
  5110  012CA2  0A80               	xorlw	128
  5111  012CA4  0100               	movlb	0	; () banked
  5112  012CA6  5974               	subwfb	(??_irobot_query_and_update+4)& (0+255),w,b
  5113  012CA8  A0D8               	btfss	status,0,c
  5114  012CAA  D7B5               	goto	l2100
  5115                           
  5116                           ; BSR set to: 0
  5117                           ;iRobotSerial.c: 150: }
  5118                           ;iRobotSerial.c: 151: startIndex += get_packet_size(TXArray[i]);
  5119                           
  5120                           ; BSR set to: 0
  5121  012CAC  0100               	movlb	0	; () banked
  5122  012CAE  517C               	movf	irobot_query_and_update@i& (0+255),w,b
  5123  012CB0  0D01               	mullw	1
  5124  012CB2  0E00               	movlw	low irobot_query_and_update@TXArray
  5125  012CB4  24F3               	addwf	prodl,w,c
  5126  012CB6  6ED9               	movwf	fsr2l,c
  5127  012CB8  0E02               	movlw	high irobot_query_and_update@TXArray
  5128  012CBA  20F4               	addwfc	prodh,w,c
  5129  012CBC  6EDA               	movwf	fsr2h,c
  5130  012CBE  50DF               	movf	indf2,w,c
  5131  012CC0  EC90  F0AA         	call	_get_packet_size
  5132  012CC4  0100               	movlb	0	; () banked
  5133  012CC6  277B               	addwf	irobot_query_and_update@startIndex& (0+255),f,b
  5134                           
  5135                           ; BSR set to: 0
  5136  012CC8  0100               	movlb	0	; () banked
  5137  012CCA  2B7C               	incf	irobot_query_and_update@i& (0+255),f,b
  5138  012CCC                     l2097:
  5139                           
  5140                           ; BSR set to: 0
  5141                           
  5142                           ; BSR set to: 0
  5143  012CCC  0100               	movlb	0	; () banked
  5144  012CCE  5178               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  5145  012CD0  0100               	movlb	0	; () banked
  5146  012CD2  5D7C               	subwf	irobot_query_and_update@i& (0+255),w,b
  5147  012CD4  B0D8               	btfsc	status,0,c
  5148  012CD6  0012               	return	
  5149  012CD8  D79B               	goto	l2098
  5150  012CDA                     __end_of_irobot_query_and_update:
  5151                           	opt stack 0
  5152                           tosu	equ	0xFFF
  5153                           tosh	equ	0xFFE
  5154                           tosl	equ	0xFFD
  5155                           pclath	equ	0xFFA
  5156                           tblptru	equ	0xFF8
  5157                           tblptrh	equ	0xFF7
  5158                           tblptrl	equ	0xFF6
  5159                           tablat	equ	0xFF5
  5160                           prodh	equ	0xFF4
  5161                           prodl	equ	0xFF3
  5162                           postinc0	equ	0xFEE
  5163                           wreg	equ	0xFE8
  5164                           postdec1	equ	0xFE5
  5165                           fsr1h	equ	0xFE2
  5166                           fsr1l	equ	0xFE1
  5167                           indf2	equ	0xFDF
  5168                           postinc2	equ	0xFDE
  5169                           fsr2h	equ	0xFDA
  5170                           fsr2l	equ	0xFD9
  5171                           status	equ	0xFD8
  5172                           
  5173 ;; *************** function _rx_assign *****************
  5174 ;; Defined at:
  5175 ;;		line 74 in file "Library/iRobotSerial.c"
  5176 ;; Parameters:    Size  Location     Type
  5177 ;;  packetID        1    wreg     unsigned char 
  5178 ;;  packetIDValu    1    1[BANK0 ] unsigned char 
  5179 ;;  byteNumber      1    2[BANK0 ] unsigned char 
  5180 ;; Auto vars:     Size  Location     Type
  5181 ;;  packetID        1    5[BANK0 ] unsigned char 
  5182 ;; Return value:  Size  Location     Type
  5183 ;;                  1    wreg      void 
  5184 ;; Registers used:
  5185 ;;		wreg, status,2, status,0, cstack
  5186 ;; Tracked objects:
  5187 ;;		On entry : 0/0
  5188 ;;		On exit  : 0/0
  5189 ;;		Unchanged: 0/0
  5190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5191 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5192 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5193 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5194 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5195 ;;Total ram usage:        5 bytes
  5196 ;; Hardware stack levels used:    1
  5197 ;; Hardware stack levels required when called:    8
  5198 ;; This function calls:
  5199 ;;		_sort_iRBumpDrop
  5200 ;; This function is called by:
  5201 ;;		_irobot_query_and_update
  5202 ;; This function uses a non-reentrant model
  5203 ;;
  5204                           
  5205                           	psect	text10
  5206  0139D8                     __ptext10:
  5207                           	opt stack 0
  5208  0139D8                     _rx_assign:
  5209                           	opt stack 19
  5210                           
  5211                           ; BSR set to: 0
  5212                           ;incstack = 0
  5213                           ;rx_assign@packetID stored from wreg
  5214  0139D8  0100               	movlb	0	; () banked
  5215  0139DA  6F65               	movwf	rx_assign@packetID& (0+255),b
  5216                           
  5217                           ;iRobotSerial.c: 75: switch (packetID) {
  5218  0139DC  D057               	goto	l2031
  5219  0139DE                     l2032:
  5220                           
  5221                           ; BSR set to: 0
  5222  0139DE  C061  F036         	movff	rx_assign@packetIDValue,_iRBumpDrop
  5223                           
  5224                           ; BSR set to: 0
  5225  0139E2  ECAC  F0A6         	call	_sort_iRBumpDrop	;wreg free
  5226  0139E6  0012               	return	
  5227  0139E8                     l2034:
  5228                           
  5229                           ; BSR set to: 0
  5230  0139E8  C061  F035         	movff	rx_assign@packetIDValue,_iRWall
  5231  0139EC  0012               	return	
  5232  0139EE                     l2035:
  5233                           
  5234                           ; BSR set to: 0
  5235  0139EE  C061  F034         	movff	rx_assign@packetIDValue,_iRCliffL
  5236  0139F2  0012               	return	
  5237  0139F4                     l2036:
  5238                           
  5239                           ; BSR set to: 0
  5240  0139F4  C061  F033         	movff	rx_assign@packetIDValue,_iRCliffFL
  5241  0139F8  0012               	return	
  5242  0139FA                     l2037:
  5243                           
  5244                           ; BSR set to: 0
  5245  0139FA  C061  F032         	movff	rx_assign@packetIDValue,_iRCliffFR
  5246  0139FE  0012               	return	
  5247  013A00                     l2038:
  5248                           
  5249                           ; BSR set to: 0
  5250  013A00  C061  F031         	movff	rx_assign@packetIDValue,_iRCliffR
  5251  013A04  0012               	return	
  5252  013A06                     l2039:
  5253                           
  5254                           ; BSR set to: 0
  5255  013A06  C061  F030         	movff	rx_assign@packetIDValue,_iRVirtualWall
  5256  013A0A  0012               	return	
  5257  013A0C                     
  5258                           ; BSR set to: 0
  5259                           ;iRobotSerial.c: 84: (byteNumber == 0) ? (iRDistanceSS.HB = packetIDValue) : (iRDistance
      +                          SS.LB = packetIDValue,
  5260                           ;iRobotSerial.c: 85: iRDistance = ((iRDistanceSS.HB)<<8) + iRDistanceSS.LB); break;
  5261                           
  5262                           ; BSR set to: 0
  5263  013A0C  0100               	movlb	0	; () banked
  5264  013A0E  5162               	movf	rx_assign@byteNumber& (0+255),w,b
  5265  013A10  0100               	movlb	0	; () banked
  5266  013A12  A4D8               	btfss	status,2,c
  5267  013A14  D005               	goto	l2042
  5268                           
  5269                           ; BSR set to: 0
  5270  013A16  C061  F308         	movff	rx_assign@packetIDValue,_iRDistanceSS
  5271  013A1A  0103               	movlb	3	; () banked
  5272  013A1C  6B09               	clrf	(_iRDistanceSS+1)& (0+255),b
  5273  013A1E  0012               	return	
  5274  013A20                     l2042:
  5275                           
  5276                           ; BSR set to: 0
  5277  013A20  C061  F30A         	movff	rx_assign@packetIDValue,_iRDistanceSS+2
  5278  013A24  0103               	movlb	3	; () banked
  5279  013A26  6B0B               	clrf	(_iRDistanceSS+3)& (0+255),b
  5280                           
  5281                           ; BSR set to: 3
  5282  013A28  0103               	movlb	3	; () banked
  5283  013A2A  5108               	movf	_iRDistanceSS& (0+255),w,b
  5284  013A2C  0100               	movlb	0	; () banked
  5285  013A2E  6F64               	movwf	(??_rx_assign+1)& (0+255),b
  5286  013A30  6B63               	clrf	??_rx_assign& (0+255),b
  5287  013A32  0103               	movlb	3	; () banked
  5288  013A34  510A               	movf	(_iRDistanceSS+2)& (0+255),w,b
  5289  013A36  0100               	movlb	0	; () banked
  5290  013A38  2563               	addwf	??_rx_assign& (0+255),w,b
  5291  013A3A  0103               	movlb	3	; () banked
  5292  013A3C  6F26               	movwf	_iRDistance& (0+255),b
  5293  013A3E  0103               	movlb	3	; () banked
  5294  013A40  510B               	movf	(_iRDistanceSS+3)& (0+255),w,b
  5295  013A42  0100               	movlb	0	; () banked
  5296  013A44  2164               	addwfc	(??_rx_assign+1)& (0+255),w,b
  5297  013A46  0103               	movlb	3	; () banked
  5298  013A48  6F27               	movwf	(_iRDistance+1)& (0+255),b
  5299                           
  5300                           ; BSR set to: 3
  5301  013A4A  0012               	return	
  5302  013A4C                     
  5303                           ;iRobotSerial.c: 87: (byteNumber == 0) ? (iRAngleSS.HB = packetIDValue) : (iRAngleSS.LB 
      +                          = packetIDValue,
  5304                           ;iRobotSerial.c: 88: iRAngle = ((iRAngleSS.HB)<<8) + iRAngleSS.LB); break;
  5305                           
  5306                           ; BSR set to: 3
  5307  013A4C  0100               	movlb	0	; () banked
  5308  013A4E  5162               	movf	rx_assign@byteNumber& (0+255),w,b
  5309  013A50  0100               	movlb	0	; () banked
  5310  013A52  A4D8               	btfss	status,2,c
  5311  013A54  D005               	goto	l2047
  5312                           
  5313                           ; BSR set to: 0
  5314  013A56  C061  F304         	movff	rx_assign@packetIDValue,_iRAngleSS
  5315  013A5A  0103               	movlb	3	; () banked
  5316  013A5C  6B05               	clrf	(_iRAngleSS+1)& (0+255),b
  5317  013A5E  0012               	return	
  5318  013A60                     l2047:
  5319                           
  5320                           ; BSR set to: 0
  5321  013A60  C061  F306         	movff	rx_assign@packetIDValue,_iRAngleSS+2
  5322  013A64  0103               	movlb	3	; () banked
  5323  013A66  6B07               	clrf	(_iRAngleSS+3)& (0+255),b
  5324                           
  5325                           ; BSR set to: 3
  5326  013A68  0103               	movlb	3	; () banked
  5327  013A6A  5104               	movf	_iRAngleSS& (0+255),w,b
  5328  013A6C  0100               	movlb	0	; () banked
  5329  013A6E  6F64               	movwf	(??_rx_assign+1)& (0+255),b
  5330  013A70  6B63               	clrf	??_rx_assign& (0+255),b
  5331  013A72  0103               	movlb	3	; () banked
  5332  013A74  5106               	movf	(_iRAngleSS+2)& (0+255),w,b
  5333  013A76  0100               	movlb	0	; () banked
  5334  013A78  2563               	addwf	??_rx_assign& (0+255),w,b
  5335  013A7A  0103               	movlb	3	; () banked
  5336  013A7C  6F24               	movwf	_iRAngle& (0+255),b
  5337  013A7E  0103               	movlb	3	; () banked
  5338  013A80  5107               	movf	(_iRAngleSS+3)& (0+255),w,b
  5339  013A82  0100               	movlb	0	; () banked
  5340  013A84  2164               	addwfc	(??_rx_assign+1)& (0+255),w,b
  5341  013A86  0103               	movlb	3	; () banked
  5342  013A88  6F25               	movwf	(_iRAngle+1)& (0+255),b
  5343                           
  5344                           ; BSR set to: 3
  5345                           ;iRobotSerial.c: 89: }
  5346                           
  5347                           ; BSR set to: 3
  5348  013A8A  0012               	return	
  5349  013A8C                     l2031:
  5350                           
  5351                           ; BSR set to: 3
  5352  013A8C  0100               	movlb	0	; () banked
  5353  013A8E  5165               	movf	rx_assign@packetID& (0+255),w,b
  5354                           
  5355                           ; Switch size 1, requested type "space"
  5356                           ; Number of cases is 9, Range of values is 7 to 20
  5357                           ; switch strategies available:
  5358                           ; Name         Instructions Cycles
  5359                           ; simple_byte           28    15 (average)
  5360                           ;	Chosen strategy is simple_byte
  5361  013A90  0A07               	xorlw	7	; case 7
  5362  013A92  B4D8               	btfsc	status,2,c
  5363  013A94  D7A4               	goto	l2032
  5364  013A96  0A0F               	xorlw	15	; case 8
  5365  013A98  B4D8               	btfsc	status,2,c
  5366  013A9A  D7A6               	goto	l2034
  5367  013A9C  0A01               	xorlw	1	; case 9
  5368  013A9E  B4D8               	btfsc	status,2,c
  5369  013AA0  D7A6               	goto	l2035
  5370  013AA2  0A03               	xorlw	3	; case 10
  5371  013AA4  B4D8               	btfsc	status,2,c
  5372  013AA6  D7A6               	goto	l2036
  5373  013AA8  0A01               	xorlw	1	; case 11
  5374  013AAA  B4D8               	btfsc	status,2,c
  5375  013AAC  D7A6               	goto	l2037
  5376  013AAE  0A07               	xorlw	7	; case 12
  5377  013AB0  B4D8               	btfsc	status,2,c
  5378  013AB2  D7A6               	goto	l2038
  5379  013AB4  0A01               	xorlw	1	; case 13
  5380  013AB6  B4D8               	btfsc	status,2,c
  5381  013AB8  D7A6               	goto	l2039
  5382  013ABA  0A1E               	xorlw	30	; case 19
  5383  013ABC  B4D8               	btfsc	status,2,c
  5384  013ABE  D7A6               	goto	l2040
  5385  013AC0  0A07               	xorlw	7	; case 20
  5386  013AC2  A4D8               	btfss	status,2,c
  5387  013AC4  0012               	return	
  5388  013AC6  D7C2               	goto	l2045
  5389  013AC8                     __end_of_rx_assign:
  5390                           	opt stack 0
  5391                           tosu	equ	0xFFF
  5392                           tosh	equ	0xFFE
  5393                           tosl	equ	0xFFD
  5394                           pclath	equ	0xFFA
  5395                           tblptru	equ	0xFF8
  5396                           tblptrh	equ	0xFF7
  5397                           tblptrl	equ	0xFF6
  5398                           tablat	equ	0xFF5
  5399                           prodh	equ	0xFF4
  5400                           prodl	equ	0xFF3
  5401                           postinc0	equ	0xFEE
  5402                           wreg	equ	0xFE8
  5403                           postdec1	equ	0xFE5
  5404                           fsr1h	equ	0xFE2
  5405                           fsr1l	equ	0xFE1
  5406                           indf2	equ	0xFDF
  5407                           postinc2	equ	0xFDE
  5408                           fsr2h	equ	0xFDA
  5409                           fsr2l	equ	0xFD9
  5410                           status	equ	0xFD8
  5411                           
  5412 ;; *************** function _sort_iRBumpDrop *****************
  5413 ;; Defined at:
  5414 ;;		line 92 in file "Library/iRobotSerial.c"
  5415 ;; Parameters:    Size  Location     Type
  5416 ;;		None
  5417 ;; Auto vars:     Size  Location     Type
  5418 ;;		None
  5419 ;; Return value:  Size  Location     Type
  5420 ;;                  1    wreg      void 
  5421 ;; Registers used:
  5422 ;;		wreg, status,2, status,0
  5423 ;; Tracked objects:
  5424 ;;		On entry : 0/0
  5425 ;;		On exit  : 0/0
  5426 ;;		Unchanged: 0/0
  5427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5429 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5430 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5431 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5432 ;;Total ram usage:        1 bytes
  5433 ;; Hardware stack levels used:    1
  5434 ;; Hardware stack levels required when called:    7
  5435 ;; This function calls:
  5436 ;;		Nothing
  5437 ;; This function is called by:
  5438 ;;		_rx_assign
  5439 ;; This function uses a non-reentrant model
  5440 ;;
  5441                           
  5442                           	psect	text11
  5443  014D58                     __ptext11:
  5444                           	opt stack 0
  5445  014D58                     _sort_iRBumpDrop:
  5446                           	opt stack 19
  5447                           
  5448                           ;iRobotSerial.c: 93: (iRBumpDrop & 0x1) ? (iRBumpRight = 1) : (iRBumpRight = 0);
  5449                           
  5450                           ;incstack = 0
  5451  014D58  A036               	btfss	_iRBumpDrop,0,c
  5452  014D5A  D002               	goto	l2054
  5453  014D5C  0E01               	movlw	1
  5454  014D5E  D001               	goto	L1
  5455  014D60                     l2054:
  5456                           
  5457                           ; BSR set to: 0
  5458  014D60  0E00               	movlw	0
  5459  014D62                     L1:
  5460  014D62  0100               	movlb	0	; () banked
  5461  014D64  6FE1               	movwf	_iRBumpRight& (0+255),b
  5462                           
  5463                           ; BSR set to: 0
  5464                           ;iRobotSerial.c: 94: ((iRBumpDrop >> 0x1) & (0x1)) ? (iRBumpLeft = 1) : (iRBumpLeft = 0)
      +                          ;
  5465                           
  5466                           ; BSR set to: 0
  5467  014D66  C036  F060         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  5468  014D6A  0100               	movlb	0	; () banked
  5469  014D6C  90D8               	bcf	status,0,c
  5470  014D6E  3360               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  5471  014D70  0100               	movlb	0	; () banked
  5472  014D72  A160               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  5473  014D74  D002               	goto	l2058
  5474                           
  5475                           ; BSR set to: 0
  5476  014D76  0E01               	movlw	1
  5477  014D78  D001               	goto	L2
  5478  014D7A                     l2058:
  5479                           
  5480                           ; BSR set to: 0
  5481                           
  5482                           ; BSR set to: 0
  5483  014D7A  0E00               	movlw	0
  5484  014D7C                     L2:
  5485  014D7C  0100               	movlb	0	; () banked
  5486  014D7E  6FE0               	movwf	_iRBumpLeft& (0+255),b
  5487                           
  5488                           ; BSR set to: 0
  5489                           ;iRobotSerial.c: 95: ((iRBumpDrop >> 0x2) & (0x1)) ? (iRDropRight = 1) : (iRDropRight = 
      +                          0);
  5490                           
  5491                           ; BSR set to: 0
  5492  014D80  C036  F060         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  5493  014D84  0100               	movlb	0	; () banked
  5494  014D86  90D8               	bcf	status,0,c
  5495  014D88  3360               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  5496  014D8A  0100               	movlb	0	; () banked
  5497  014D8C  90D8               	bcf	status,0,c
  5498  014D8E  3360               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  5499  014D90  0100               	movlb	0	; () banked
  5500  014D92  A160               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  5501  014D94  D002               	goto	l2062
  5502                           
  5503                           ; BSR set to: 0
  5504  014D96  0E01               	movlw	1
  5505  014D98  D001               	goto	L3
  5506  014D9A                     l2062:
  5507                           
  5508                           ; BSR set to: 0
  5509                           
  5510                           ; BSR set to: 0
  5511  014D9A  0E00               	movlw	0
  5512  014D9C                     L3:
  5513  014D9C  6E2F               	movwf	_iRDropRight,c
  5514                           
  5515                           ; BSR set to: 0
  5516                           ;iRobotSerial.c: 96: ((iRBumpDrop >> 0x3) & (0x1)) ? (iRDropLeft = 1) : (iRDropLeft = 0)
      +                          ;
  5517                           
  5518                           ; BSR set to: 0
  5519  014D9E  C036  F060         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  5520  014DA2  0100               	movlb	0	; () banked
  5521  014DA4  90D8               	bcf	status,0,c
  5522  014DA6  3360               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  5523  014DA8  0100               	movlb	0	; () banked
  5524  014DAA  90D8               	bcf	status,0,c
  5525  014DAC  3360               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  5526  014DAE  0100               	movlb	0	; () banked
  5527  014DB0  90D8               	bcf	status,0,c
  5528  014DB2  3360               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  5529  014DB4  0100               	movlb	0	; () banked
  5530  014DB6  A160               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  5531  014DB8  D002               	goto	l2066
  5532                           
  5533                           ; BSR set to: 0
  5534  014DBA  0E01               	movlw	1
  5535  014DBC  D001               	goto	L4
  5536  014DBE                     l2066:
  5537                           
  5538                           ; BSR set to: 0
  5539                           
  5540                           ; BSR set to: 0
  5541  014DBE  0E00               	movlw	0
  5542  014DC0                     L4:
  5543  014DC0  6E2E               	movwf	_iRDropLeft,c
  5544                           
  5545                           ; BSR set to: 0
  5546                           ;iRobotSerial.c: 97: ((iRBumpDrop >> 0x4) & (0x1)) ? (iRDropCaster = 1) : (iRDropCaster 
      +                          = 0);
  5547                           
  5548                           ; BSR set to: 0
  5549  014DC2  C036  F060         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  5550  014DC6  0100               	movlb	0	; () banked
  5551  014DC8  3B60               	swapf	??_sort_iRBumpDrop& (0+255),f,b
  5552  014DCA  0E0F               	movlw	15
  5553  014DCC  1760               	andwf	??_sort_iRBumpDrop& (0+255),f,b
  5554  014DCE  0100               	movlb	0	; () banked
  5555  014DD0  A160               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  5556  014DD2  D003               	goto	l2070
  5557                           
  5558                           ; BSR set to: 0
  5559  014DD4  0E01               	movlw	1
  5560  014DD6  6E2D               	movwf	_iRDropCaster,c
  5561  014DD8  0012               	return	
  5562  014DDA                     l2070:
  5563                           
  5564                           ; BSR set to: 0
  5565                           
  5566                           ; BSR set to: 0
  5567  014DDA  0E00               	movlw	0
  5568  014DDC  6E2D               	movwf	_iRDropCaster,c
  5569  014DDE  0012               	return	
  5570  014DE0                     __end_of_sort_iRBumpDrop:
  5571                           	opt stack 0
  5572                           tosu	equ	0xFFF
  5573                           tosh	equ	0xFFE
  5574                           tosl	equ	0xFFD
  5575                           pclath	equ	0xFFA
  5576                           tblptru	equ	0xFF8
  5577                           tblptrh	equ	0xFF7
  5578                           tblptrl	equ	0xFF6
  5579                           tablat	equ	0xFF5
  5580                           prodh	equ	0xFF4
  5581                           prodl	equ	0xFF3
  5582                           postinc0	equ	0xFEE
  5583                           wreg	equ	0xFE8
  5584                           postdec1	equ	0xFE5
  5585                           fsr1h	equ	0xFE2
  5586                           fsr1l	equ	0xFE1
  5587                           indf2	equ	0xFDF
  5588                           postinc2	equ	0xFDE
  5589                           fsr2h	equ	0xFDA
  5590                           fsr2l	equ	0xFD9
  5591                           status	equ	0xFD8
  5592                           
  5593 ;; *************** function _get_packet_size *****************
  5594 ;; Defined at:
  5595 ;;		line 60 in file "Library/iRobotSerial.c"
  5596 ;; Parameters:    Size  Location     Type
  5597 ;;  packetID        1    wreg     unsigned char 
  5598 ;; Auto vars:     Size  Location     Type
  5599 ;;  packetID        1    0[BANK0 ] unsigned char 
  5600 ;; Return value:  Size  Location     Type
  5601 ;;                  1    wreg      unsigned char 
  5602 ;; Registers used:
  5603 ;;		wreg, status,2, status,0
  5604 ;; Tracked objects:
  5605 ;;		On entry : 0/0
  5606 ;;		On exit  : 0/0
  5607 ;;		Unchanged: 0/0
  5608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5610 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5612 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5613 ;;Total ram usage:        1 bytes
  5614 ;; Hardware stack levels used:    1
  5615 ;; Hardware stack levels required when called:    7
  5616 ;; This function calls:
  5617 ;;		Nothing
  5618 ;; This function is called by:
  5619 ;;		_irobot_query_and_update
  5620 ;; This function uses a non-reentrant model
  5621 ;;
  5622                           
  5623                           	psect	text12
  5624  015520                     __ptext12:
  5625                           	opt stack 0
  5626  015520                     _get_packet_size:
  5627                           	opt stack 20
  5628                           
  5629                           ; BSR set to: 0
  5630                           ;incstack = 0
  5631                           ;get_packet_size@packetID stored from wreg
  5632  015520  0100               	movlb	0	; () banked
  5633  015522  6F60               	movwf	get_packet_size@packetID& (0+255),b
  5634                           
  5635                           ;iRobotSerial.c: 61: switch (packetID) {
  5636  015524  D012               	goto	l2017
  5637  015526  0E01               	movlw	1
  5638  015528  0012               	return	
  5639  01552A  0E01               	movlw	1
  5640  01552C  0012               	return	
  5641  01552E  0E01               	movlw	1
  5642  015530  0012               	return	
  5643  015532  0E01               	movlw	1
  5644  015534  0012               	return	
  5645  015536  0E01               	movlw	1
  5646  015538  0012               	return	
  5647  01553A  0E01               	movlw	1
  5648  01553C  0012               	return	
  5649  01553E  0E01               	movlw	1
  5650  015540  0012               	return	
  5651  015542  0E02               	movlw	2
  5652  015544  0012               	return	
  5653  015546  0E02               	movlw	2
  5654                           
  5655                           ;iRobotSerial.c: 71: }
  5656  015548  0012               	return	
  5657  01554A                     l2017:
  5658  01554A  0100               	movlb	0	; () banked
  5659  01554C  5160               	movf	get_packet_size@packetID& (0+255),w,b
  5660                           
  5661                           ; Switch size 1, requested type "space"
  5662                           ; Number of cases is 9, Range of values is 7 to 20
  5663                           ; switch strategies available:
  5664                           ; Name         Instructions Cycles
  5665                           ; simple_byte           28    15 (average)
  5666                           ;	Chosen strategy is simple_byte
  5667  01554E  0A07               	xorlw	7	; case 7
  5668  015550  B4D8               	btfsc	status,2,c
  5669  015552  D7E9               	goto	l2018
  5670  015554  0A0F               	xorlw	15	; case 8
  5671  015556  B4D8               	btfsc	status,2,c
  5672  015558  D7E8               	goto	l2020
  5673  01555A  0A01               	xorlw	1	; case 9
  5674  01555C  B4D8               	btfsc	status,2,c
  5675  01555E  D7E7               	goto	l2021
  5676  015560  0A03               	xorlw	3	; case 10
  5677  015562  B4D8               	btfsc	status,2,c
  5678  015564  D7E6               	goto	l2022
  5679  015566  0A01               	xorlw	1	; case 11
  5680  015568  B4D8               	btfsc	status,2,c
  5681  01556A  D7E5               	goto	l2023
  5682  01556C  0A07               	xorlw	7	; case 12
  5683  01556E  B4D8               	btfsc	status,2,c
  5684  015570  D7E4               	goto	l2024
  5685  015572  0A01               	xorlw	1	; case 13
  5686  015574  B4D8               	btfsc	status,2,c
  5687  015576  D7E3               	goto	l2025
  5688  015578  0A1E               	xorlw	30	; case 19
  5689  01557A  B4D8               	btfsc	status,2,c
  5690  01557C  D7E2               	goto	l2026
  5691  01557E  0A07               	xorlw	7	; case 20
  5692  015580  A4D8               	btfss	status,2,c
  5693  015582  0012               	return	
  5694  015584  D7E0               	goto	l2027
  5695  015586                     __end_of_get_packet_size:
  5696                           	opt stack 0
  5697                           tosu	equ	0xFFF
  5698                           tosh	equ	0xFFE
  5699                           tosl	equ	0xFFD
  5700                           pclath	equ	0xFFA
  5701                           tblptru	equ	0xFF8
  5702                           tblptrh	equ	0xFF7
  5703                           tblptrl	equ	0xFF6
  5704                           tablat	equ	0xFF5
  5705                           prodh	equ	0xFF4
  5706                           prodl	equ	0xFF3
  5707                           postinc0	equ	0xFEE
  5708                           wreg	equ	0xFE8
  5709                           postdec1	equ	0xFE5
  5710                           fsr1h	equ	0xFE2
  5711                           fsr1l	equ	0xFE1
  5712                           indf2	equ	0xFDF
  5713                           postinc2	equ	0xFDE
  5714                           fsr2h	equ	0xFDA
  5715                           fsr2l	equ	0xFD9
  5716                           status	equ	0xFD8
  5717                           
  5718 ;; *************** function _eusart_getch *****************
  5719 ;; Defined at:
  5720 ;;		line 125 in file "Library/iRobotSerial.c"
  5721 ;; Parameters:    Size  Location     Type
  5722 ;;		None
  5723 ;; Auto vars:     Size  Location     Type
  5724 ;;		None
  5725 ;; Return value:  Size  Location     Type
  5726 ;;                  1    wreg      unsigned char 
  5727 ;; Registers used:
  5728 ;;		wreg, status,2
  5729 ;; Tracked objects:
  5730 ;;		On entry : 0/0
  5731 ;;		On exit  : 0/0
  5732 ;;		Unchanged: 0/0
  5733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5737 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5738 ;;Total ram usage:        0 bytes
  5739 ;; Hardware stack levels used:    1
  5740 ;; Hardware stack levels required when called:    7
  5741 ;; This function calls:
  5742 ;;		Nothing
  5743 ;; This function is called by:
  5744 ;;		_irobot_query_and_update
  5745 ;; This function uses a non-reentrant model
  5746 ;;
  5747                           
  5748                           	psect	text13
  5749  0164B0                     __ptext13:
  5750                           	opt stack 0
  5751  0164B0                     _eusart_getch:
  5752                           	opt stack 20
  5753                           
  5754                           ;iRobotSerial.c: 126: while (!PIR1bits.RC1IF) {};
  5755                           
  5756                           ;incstack = 0
  5757  0164B0  AA9E               	btfss	3998,5,c	;volatile
  5758  0164B2  D7FE               	goto	_eusart_getch
  5759                           
  5760                           ;iRobotSerial.c: 127: return RCREG1;
  5761  0164B4  50AF               	movf	4015,w,c	;volatile
  5762  0164B6  0012               	return	
  5763  0164B8                     __end_of_eusart_getch:
  5764                           	opt stack 0
  5765                           tosu	equ	0xFFF
  5766                           tosh	equ	0xFFE
  5767                           tosl	equ	0xFFD
  5768                           pclath	equ	0xFFA
  5769                           tblptru	equ	0xFF8
  5770                           tblptrh	equ	0xFF7
  5771                           tblptrl	equ	0xFF6
  5772                           tablat	equ	0xFF5
  5773                           prodh	equ	0xFF4
  5774                           prodl	equ	0xFF3
  5775                           postinc0	equ	0xFEE
  5776                           wreg	equ	0xFE8
  5777                           postdec1	equ	0xFE5
  5778                           fsr1h	equ	0xFE2
  5779                           fsr1l	equ	0xFE1
  5780                           indf2	equ	0xFDF
  5781                           postinc2	equ	0xFDE
  5782                           fsr2h	equ	0xFDA
  5783                           fsr2l	equ	0xFD9
  5784                           status	equ	0xFD8
  5785                           
  5786 ;; *************** function _printf *****************
  5787 ;; Defined at:
  5788 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  5789 ;; Parameters:    Size  Location     Type
  5790 ;;  f               2   21[BANK0 ] PTR const unsigned char 
  5791 ;;		 -> STR_8(79), STR_7(3), STR_6(14), STR_5(3), 
  5792 ;;		 -> STR_4(46), STR_3(3), STR_2(46), STR_1(3), 
  5793 ;; Auto vars:     Size  Location     Type
  5794 ;;  tmpval          4    0        struct .
  5795 ;;  cp              3    0        PTR const unsigned char 
  5796 ;;  val             2   40[BANK0 ] unsigned int 
  5797 ;;  ap              2   38[BANK0 ] PTR void [1]
  5798 ;;		 -> ?_printf(2), 
  5799 ;;  len             2    0        unsigned int 
  5800 ;;  c               1   42[BANK0 ] char 
  5801 ;;  flag            1   37[BANK0 ] unsigned char 
  5802 ;;  prec            1   36[BANK0 ] char 
  5803 ;; Return value:  Size  Location     Type
  5804 ;;                  2   21[BANK0 ] int 
  5805 ;; Registers used:
  5806 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5807 ;; Tracked objects:
  5808 ;;		On entry : 0/0
  5809 ;;		On exit  : 0/0
  5810 ;;		Unchanged: 0/0
  5811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5812 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5813 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5814 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5815 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5816 ;;Total ram usage:       22 bytes
  5817 ;; Hardware stack levels used:    1
  5818 ;; Hardware stack levels required when called:   12
  5819 ;; This function calls:
  5820 ;;		___lwdiv
  5821 ;;		___lwmod
  5822 ;;		_putch
  5823 ;; This function is called by:
  5824 ;;		_mode1
  5825 ;;		_mode2
  5826 ;;		_mode4
  5827 ;; This function uses a non-reentrant model
  5828 ;;
  5829                           
  5830                           	psect	text14
  5831  0124A2                     __ptext14:
  5832                           	opt stack 0
  5833  0124A2                     _printf:
  5834                           	opt stack 17
  5835                           
  5836                           ;doprnt.c: 466: va_list ap;
  5837                           ;doprnt.c: 499: signed char c;
  5838                           ;doprnt.c: 506: signed char prec;
  5839                           ;doprnt.c: 508: unsigned char flag;
  5840                           ;doprnt.c: 523: union {
  5841                           ;doprnt.c: 524: unsigned long vd;
  5842                           ;doprnt.c: 525: double integ;
  5843                           ;doprnt.c: 526: } tmpval;
  5844                           ;doprnt.c: 528: unsigned int val;
  5845                           ;doprnt.c: 529: unsigned len;
  5846                           ;doprnt.c: 530: const char * cp;
  5847                           ;doprnt.c: 533: *ap = __va_start();
  5848                           
  5849                           ;incstack = 0
  5850  0124A2  0E77               	movlw	low (?_printf+2)
  5851  0124A4  0100               	movlb	0	; () banked
  5852  0124A6  6F86               	movwf	printf@ap& (0+255),b
  5853  0124A8  0E00               	movlw	high (?_printf+2)
  5854  0124AA  0100               	movlb	0	; () banked
  5855  0124AC  6F87               	movwf	(printf@ap+1)& (0+255),b
  5856                           
  5857                           ;doprnt.c: 536: while(c = *f++) {
  5858  0124AE  D0C9               	goto	u11070
  5859  0124B0                     
  5860                           ; BSR set to: 0
  5861                           ;doprnt.c: 538: if(c != '%')
  5862                           
  5863                           ; BSR set to: 0
  5864  0124B0  0E25               	movlw	37
  5865  0124B2  0100               	movlb	0	; () banked
  5866  0124B4  198A               	xorwf	printf@c& (0+255),w,b
  5867  0124B6  B4D8               	btfsc	status,2,c
  5868  0124B8  D005               	goto	l2410
  5869                           
  5870                           ; BSR set to: 0
  5871                           ;doprnt.c: 540: {
  5872                           ;doprnt.c: 541: (putch(c) );
  5873  0124BA  0100               	movlb	0	; () banked
  5874  0124BC  518A               	movf	printf@c& (0+255),w,b
  5875  0124BE  EC07  F0B2         	call	_putch
  5876                           
  5877                           ;doprnt.c: 542: continue;
  5878  0124C2  D0BF               	goto	u11070
  5879  0124C4                     l2410:
  5880                           
  5881                           ;doprnt.c: 543: }
  5882                           ;doprnt.c: 548: flag = 0;
  5883  0124C4  0E00               	movlw	0
  5884  0124C6  0100               	movlb	0	; () banked
  5885  0124C8  6F85               	movwf	printf@flag& (0+255),b
  5886                           
  5887                           ;doprnt.c: 635: switch(c = *f++) {
  5888  0124CA  D014               	goto	l2411
  5889  0124CC                     
  5890                           ; BSR set to: 0
  5891                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  5892                           
  5893                           ; BSR set to: 0
  5894  0124CC  C086  FFD9         	movff	printf@ap,fsr2l
  5895  0124D0  C087  FFDA         	movff	printf@ap+1,fsr2h
  5896  0124D4  50DF               	movf	indf2,w,c
  5897  0124D6  0100               	movlb	0	; () banked
  5898  0124D8  6F8A               	movwf	printf@c& (0+255),b
  5899                           
  5900                           ; BSR set to: 0
  5901  0124DA  0E02               	movlw	2
  5902  0124DC  0100               	movlb	0	; () banked
  5903  0124DE  2786               	addwf	printf@ap& (0+255),f,b
  5904  0124E0  0E00               	movlw	0
  5905  0124E2  2387               	addwfc	(printf@ap+1)& (0+255),f,b
  5906  0124E4                     
  5907                           ; BSR set to: 0
  5908                           ;doprnt.c: 809: (putch(c) );
  5909                           
  5910                           ; BSR set to: 0
  5911  0124E4  0100               	movlb	0	; () banked
  5912  0124E6  518A               	movf	printf@c& (0+255),w,b
  5913  0124E8  EC07  F0B2         	call	_putch
  5914                           
  5915                           ;doprnt.c: 810: continue;
  5916  0124EC  D0AA               	goto	u11070
  5917  0124EE                     
  5918                           ;doprnt.c: 818: flag |= 0x40;
  5919  0124EE  0100               	movlb	0	; () banked
  5920  0124F0  8D85               	bsf	printf@flag& (0+255),6,b
  5921                           
  5922                           ; BSR set to: 0
  5923                           ;doprnt.c: 822: }
  5924                           
  5925                           ;doprnt.c: 819: break;
  5926  0124F2  D01E               	goto	l2416
  5927  0124F4                     l2411:
  5928                           
  5929                           ; BSR set to: 0
  5930                           
  5931                           ; BSR set to: 0
  5932  0124F4  C075  FFF6         	movff	printf@f,tblptrl
  5933  0124F8  C076  FFF7         	movff	printf@f+1,tblptrh
  5934  0124FC  0100               	movlb	0	; () banked
  5935  0124FE  4B75               	infsnz	printf@f& (0+255),f,b
  5936  012500  2B76               	incf	(printf@f+1)& (0+255),f,b
  5937  012502                     	if	0	;tblptru may be non-zero
  5938  012502                     	endif
  5939  012502                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  5940  012502  0E00               	movlw	low (__mediumconst shr (0+16))
  5941  012504  6EF8               	movwf	tblptru,c
  5942  012506                     	endif
  5943  012506  0008               	tblrd		*
  5944  012508  CFF5 F08A          	movff	tablat,printf@c
  5945  01250C  0100               	movlb	0	; () banked
  5946  01250E  518A               	movf	printf@c& (0+255),w,b
  5947                           
  5948                           ; Switch size 1, requested type "space"
  5949                           ; Number of cases is 5, Range of values is 0 to 117
  5950                           ; switch strategies available:
  5951                           ; Name         Instructions Cycles
  5952                           ; simple_byte           16     9 (average)
  5953                           ;	Chosen strategy is simple_byte
  5954  012510  0A00               	xorlw	0	; case 0
  5955  012512  B4D8               	btfsc	status,2,c
  5956  012514  0012               	return	
  5957  012516  0A63               	xorlw	99	; case 99
  5958  012518  B4D8               	btfsc	status,2,c
  5959  01251A  D7D8               	goto	l2417
  5960  01251C  0A07               	xorlw	7	; case 100
  5961  01251E  B4D8               	btfsc	status,2,c
  5962  012520  D007               	goto	l2416
  5963  012522  0A0D               	xorlw	13	; case 105
  5964  012524  B4D8               	btfsc	status,2,c
  5965  012526  D004               	goto	l2416
  5966  012528  0A1C               	xorlw	28	; case 117
  5967  01252A  B4D8               	btfsc	status,2,c
  5968  01252C  D7E0               	goto	l2419
  5969  01252E  D7DA               	goto	l2418
  5970  012530                     l2416:
  5971                           
  5972                           ; BSR set to: 0
  5973                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  5974  012530  0100               	movlb	0	; () banked
  5975  012532  BD85               	btfsc	printf@flag& (0+255),6,b
  5976  012534  D019               	goto	l2420
  5977                           
  5978                           ; BSR set to: 0
  5979                           ;doprnt.c: 1253: {
  5980                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5981  012536  C086  FFD9         	movff	printf@ap,fsr2l
  5982  01253A  C087  FFDA         	movff	printf@ap+1,fsr2h
  5983  01253E  CFDE F088          	movff	postinc2,printf@val
  5984  012542  CFDD F089          	movff	postdec2,printf@val+1
  5985                           
  5986                           ; BSR set to: 0
  5987  012546  0E02               	movlw	2
  5988  012548  0100               	movlb	0	; () banked
  5989  01254A  2786               	addwf	printf@ap& (0+255),f,b
  5990  01254C  0E00               	movlw	0
  5991  01254E  2387               	addwfc	(printf@ap+1)& (0+255),f,b
  5992                           
  5993                           ; BSR set to: 0
  5994                           ;doprnt.c: 1261: if((int)val < 0) {
  5995  012550  0100               	movlb	0	; () banked
  5996  012552  AF89               	btfss	(printf@val+1)& (0+255),7,b
  5997  012554  D016               	goto	l2422
  5998                           
  5999                           ; BSR set to: 0
  6000                           ;doprnt.c: 1262: flag |= 0x03;
  6001  012556  0E03               	movlw	3
  6002  012558  0100               	movlb	0	; () banked
  6003  01255A  1385               	iorwf	printf@flag& (0+255),f,b
  6004                           
  6005                           ; BSR set to: 0
  6006                           ;doprnt.c: 1263: val = -val;
  6007  01255C  0100               	movlb	0	; () banked
  6008  01255E  6D88               	negf	printf@val& (0+255),b
  6009  012560  1F89               	comf	(printf@val+1)& (0+255),f,b
  6010  012562  B0D8               	btfsc	status,0,c
  6011  012564  2B89               	incf	(printf@val+1)& (0+255),f,b
  6012                           
  6013                           ; BSR set to: 0
  6014                           ;doprnt.c: 1264: }
  6015                           ;doprnt.c: 1266: }
  6016  012566  D00D               	goto	l2422
  6017  012568                     l2420:
  6018                           
  6019                           ; BSR set to: 0
  6020                           ;doprnt.c: 1268: else
  6021                           ;doprnt.c: 1273: {
  6022                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6023                           
  6024                           ; BSR set to: 0
  6025  012568  C086  FFD9         	movff	printf@ap,fsr2l
  6026  01256C  C087  FFDA         	movff	printf@ap+1,fsr2h
  6027  012570  CFDE F088          	movff	postinc2,printf@val
  6028  012574  CFDD F089          	movff	postdec2,printf@val+1
  6029                           
  6030                           ; BSR set to: 0
  6031  012578  0E02               	movlw	2
  6032  01257A  0100               	movlb	0	; () banked
  6033  01257C  2786               	addwf	printf@ap& (0+255),f,b
  6034  01257E  0E00               	movlw	0
  6035  012580  2387               	addwfc	(printf@ap+1)& (0+255),f,b
  6036  012582                     l2422:
  6037                           
  6038                           ; BSR set to: 0
  6039                           ;doprnt.c: 1287: }
  6040                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6041                           
  6042                           ; BSR set to: 0
  6043  012582  0E01               	movlw	1
  6044  012584  0100               	movlb	0	; () banked
  6045  012586  6F8A               	movwf	printf@c& (0+255),b
  6046  012588                     l14341:
  6047                           
  6048                           ; BSR set to: 0
  6049  012588  0E05               	movlw	5
  6050  01258A  0100               	movlb	0	; () banked
  6051  01258C  198A               	xorwf	printf@c& (0+255),w,b
  6052  01258E  B4D8               	btfsc	status,2,c
  6053  012590  D019               	goto	u11050
  6054                           
  6055                           ; BSR set to: 0
  6056                           ;doprnt.c: 1306: if(val < dpowers[c])
  6057                           
  6058                           ; BSR set to: 0
  6059                           
  6060                           ; BSR set to: 0
  6061  012592  0100               	movlb	0	; () banked
  6062  012594  518A               	movf	printf@c& (0+255),w,b
  6063  012596  0D02               	mullw	2
  6064  012598  0E69               	movlw	low _dpowers
  6065  01259A  24F3               	addwf	prodl,w,c
  6066  01259C  6EF6               	movwf	tblptrl,c
  6067  01259E  0EFD               	movlw	high _dpowers
  6068  0125A0  20F4               	addwfc	prodh,w,c
  6069  0125A2  6EF7               	movwf	tblptrh,c
  6070  0125A4                     	if	1	;There are 3 active tblptr bytes
  6071  0125A4  6AF8               	clrf	tblptru,c
  6072  0125A6  0E00               	movlw	low (__mediumconst shr (0+16))
  6073  0125A8  22F8               	addwfc	tblptru,f,c
  6074  0125AA                     	endif
  6075  0125AA  0009               	tblrd		*+
  6076  0125AC  50F5               	movf	tablat,w,c
  6077  0125AE  0100               	movlb	0	; () banked
  6078  0125B0  5D88               	subwf	printf@val& (0+255),w,b
  6079  0125B2  0009               	tblrd		*+
  6080  0125B4  50F5               	movf	tablat,w,c
  6081  0125B6  0100               	movlb	0	; () banked
  6082  0125B8  5989               	subwfb	(printf@val+1)& (0+255),w,b
  6083  0125BA  A0D8               	btfss	status,0,c
  6084  0125BC  D003               	goto	u11050
  6085                           
  6086                           ; BSR set to: 0
  6087                           
  6088                           ; BSR set to: 0
  6089                           
  6090                           ; BSR set to: 0
  6091                           ;doprnt.c: 1307: break;
  6092  0125BE  0100               	movlb	0	; () banked
  6093  0125C0  2B8A               	incf	printf@c& (0+255),f,b
  6094  0125C2  D7E2               	goto	l14341
  6095  0125C4                     u11050:
  6096                           
  6097                           ; BSR set to: 0
  6098                           ;doprnt.c: 1422: {
  6099                           ;doprnt.c: 1438: if(flag & 0x03)
  6100                           
  6101                           ; BSR set to: 0
  6102  0125C4  C085  F083         	movff	printf@flag,??_printf
  6103  0125C8  0E03               	movlw	3
  6104  0125CA  0100               	movlb	0	; () banked
  6105  0125CC  1783               	andwf	??_printf& (0+255),f,b
  6106  0125CE  B4D8               	btfsc	status,2,c
  6107  0125D0  D003               	goto	l2426
  6108                           
  6109                           ; BSR set to: 0
  6110                           ;doprnt.c: 1439: (putch('-') );
  6111  0125D2  0E2D               	movlw	45
  6112  0125D4  EC07  F0B2         	call	_putch
  6113  0125D8                     l2426:
  6114                           
  6115                           ;doprnt.c: 1469: }
  6116                           ;doprnt.c: 1472: prec = c;
  6117  0125D8  C08A  F084         	movff	printf@c,printf@prec
  6118                           
  6119                           ;doprnt.c: 1474: while(prec--) {
  6120  0125DC  D02C               	goto	l2427
  6121  0125DE                     
  6122                           ;doprnt.c: 1478: {
  6123                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6124  0125DE  0100               	movlb	0	; () banked
  6125  0125E0  5184               	movf	printf@prec& (0+255),w,b
  6126  0125E2  0D02               	mullw	2
  6127  0125E4  0E69               	movlw	low _dpowers
  6128  0125E6  24F3               	addwf	prodl,w,c
  6129  0125E8  6EF6               	movwf	tblptrl,c
  6130  0125EA  0EFD               	movlw	high _dpowers
  6131  0125EC  20F4               	addwfc	prodh,w,c
  6132  0125EE  6EF7               	movwf	tblptrh,c
  6133  0125F0                     	if	1	;There are 3 active tblptr bytes
  6134  0125F0  6AF8               	clrf	tblptru,c
  6135  0125F2  0E00               	movlw	low (__mediumconst shr (0+16))
  6136  0125F4  22F8               	addwfc	tblptru,f,c
  6137  0125F6                     	endif
  6138  0125F6  0009               	tblrd		*+
  6139  0125F8  CFF5 F062          	movff	tablat,___lwdiv@divisor
  6140  0125FC  000A               	tblrd		*-
  6141  0125FE  CFF5 F063          	movff	tablat,___lwdiv@divisor+1
  6142  012602  C088  F060         	movff	printf@val,___lwdiv@dividend
  6143  012606  C089  F061         	movff	printf@val+1,___lwdiv@dividend+1
  6144  01260A  ECEE  F0A7         	call	___lwdiv	;wreg free
  6145  01260E  C060  F067         	movff	?___lwdiv,___lwmod@dividend
  6146  012612  C061  F068         	movff	?___lwdiv+1,___lwmod@dividend+1
  6147  012616  0E00               	movlw	0
  6148  012618  0100               	movlb	0	; () banked
  6149  01261A  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
  6150  01261C  0E0A               	movlw	10
  6151  01261E  6F69               	movwf	___lwmod@divisor& (0+255),b
  6152  012620  EC28  F0AB         	call	___lwmod	;wreg free
  6153  012624  0100               	movlb	0	; () banked
  6154  012626  5167               	movf	?___lwmod& (0+255),w,b
  6155  012628  0F30               	addlw	48
  6156  01262A  0100               	movlb	0	; () banked
  6157  01262C  6F8A               	movwf	printf@c& (0+255),b
  6158                           
  6159                           ; BSR set to: 0
  6160                           ;doprnt.c: 1523: }
  6161                           ;doprnt.c: 1524: (putch(c) );
  6162  01262E  0100               	movlb	0	; () banked
  6163  012630  518A               	movf	printf@c& (0+255),w,b
  6164  012632  EC07  F0B2         	call	_putch
  6165  012636                     l2427:
  6166  012636  0100               	movlb	0	; () banked
  6167  012638  0784               	decf	printf@prec& (0+255),f,b
  6168  01263A  0100               	movlb	0	; () banked
  6169  01263C  2984               	incf	printf@prec& (0+255),w,b
  6170  01263E  A4D8               	btfss	status,2,c
  6171  012640  D7CE               	goto	l2428
  6172  012642                     u11070:
  6173                           
  6174                           ; BSR set to: 0
  6175                           
  6176                           ; BSR set to: 0
  6177  012642  C075  FFF6         	movff	printf@f,tblptrl
  6178  012646  C076  FFF7         	movff	printf@f+1,tblptrh
  6179  01264A  0100               	movlb	0	; () banked
  6180  01264C  4B75               	infsnz	printf@f& (0+255),f,b
  6181  01264E  2B76               	incf	(printf@f+1)& (0+255),f,b
  6182  012650                     	if	0	;tblptru may be non-zero
  6183  012650                     	endif
  6184  012650                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  6185  012650  0E00               	movlw	low (__mediumconst shr (0+16))
  6186  012652  6EF8               	movwf	tblptru,c
  6187  012654                     	endif
  6188  012654  0008               	tblrd		*
  6189  012656  CFF5 F08A          	movff	tablat,printf@c
  6190  01265A  0100               	movlb	0	; () banked
  6191  01265C  518A               	movf	printf@c& (0+255),w,b
  6192  01265E  B4D8               	btfsc	status,2,c
  6193  012660  0012               	return	
  6194  012662  D726               	goto	l2409
  6195  012664                     __end_of_printf:
  6196                           	opt stack 0
  6197                           tosu	equ	0xFFF
  6198                           tosh	equ	0xFFE
  6199                           tosl	equ	0xFFD
  6200                           pclath	equ	0xFFA
  6201                           tblptru	equ	0xFF8
  6202                           tblptrh	equ	0xFF7
  6203                           tblptrl	equ	0xFF6
  6204                           tablat	equ	0xFF5
  6205                           prodh	equ	0xFF4
  6206                           prodl	equ	0xFF3
  6207                           postinc0	equ	0xFEE
  6208                           wreg	equ	0xFE8
  6209                           postdec1	equ	0xFE5
  6210                           fsr1h	equ	0xFE2
  6211                           fsr1l	equ	0xFE1
  6212                           indf2	equ	0xFDF
  6213                           postinc2	equ	0xFDE
  6214                           postdec2	equ	0xFDD
  6215                           fsr2h	equ	0xFDA
  6216                           fsr2l	equ	0xFD9
  6217                           status	equ	0xFD8
  6218                           
  6219 ;; *************** function _putch *****************
  6220 ;; Defined at:
  6221 ;;		line 454 in file "Library/Console.c"
  6222 ;; Parameters:    Size  Location     Type
  6223 ;;  c               1    wreg     unsigned char 
  6224 ;; Auto vars:     Size  Location     Type
  6225 ;;  c               1   20[BANK0 ] unsigned char 
  6226 ;; Return value:  Size  Location     Type
  6227 ;;                  1    wreg      void 
  6228 ;; Registers used:
  6229 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6230 ;; Tracked objects:
  6231 ;;		On entry : 0/0
  6232 ;;		On exit  : 0/0
  6233 ;;		Unchanged: 0/0
  6234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6236 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6238 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6239 ;;Total ram usage:        1 bytes
  6240 ;; Hardware stack levels used:    1
  6241 ;; Hardware stack levels required when called:   11
  6242 ;; This function calls:
  6243 ;;		_Console_PrintChar
  6244 ;; This function is called by:
  6245 ;;		_printf
  6246 ;; This function uses a non-reentrant model
  6247 ;;
  6248                           
  6249                           	psect	text15
  6250  01640E                     __ptext15:
  6251                           	opt stack 0
  6252  01640E                     _putch:
  6253                           	opt stack 17
  6254                           
  6255                           ; BSR set to: 0
  6256                           ;incstack = 0
  6257                           ;putch@c stored from wreg
  6258  01640E  0100               	movlb	0	; () banked
  6259  016410  6F74               	movwf	putch@c& (0+255),b
  6260                           
  6261                           ;Console.c: 456: Console_PrintChar(c);
  6262  016412  0100               	movlb	0	; () banked
  6263  016414  5174               	movf	putch@c& (0+255),w,b
  6264  016416  EC12  F094         	call	_Console_PrintChar
  6265  01641A  0012               	return		;funcret
  6266  01641C                     __end_of_putch:
  6267                           	opt stack 0
  6268                           tosu	equ	0xFFF
  6269                           tosh	equ	0xFFE
  6270                           tosl	equ	0xFFD
  6271                           pclath	equ	0xFFA
  6272                           tblptru	equ	0xFF8
  6273                           tblptrh	equ	0xFF7
  6274                           tblptrl	equ	0xFF6
  6275                           tablat	equ	0xFF5
  6276                           prodh	equ	0xFF4
  6277                           prodl	equ	0xFF3
  6278                           postinc0	equ	0xFEE
  6279                           wreg	equ	0xFE8
  6280                           postdec1	equ	0xFE5
  6281                           fsr1h	equ	0xFE2
  6282                           fsr1l	equ	0xFE1
  6283                           indf2	equ	0xFDF
  6284                           postinc2	equ	0xFDE
  6285                           postdec2	equ	0xFDD
  6286                           fsr2h	equ	0xFDA
  6287                           fsr2l	equ	0xFD9
  6288                           status	equ	0xFD8
  6289                           
  6290 ;; *************** function _Console_PrintChar *****************
  6291 ;; Defined at:
  6292 ;;		line 322 in file "Library/Console.c"
  6293 ;; Parameters:    Size  Location     Type
  6294 ;;  pInput          1    wreg     unsigned char 
  6295 ;; Auto vars:     Size  Location     Type
  6296 ;;  pInput          1   19[BANK0 ] unsigned char 
  6297 ;; Return value:  Size  Location     Type
  6298 ;;                  1    wreg      void 
  6299 ;; Registers used:
  6300 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6301 ;; Tracked objects:
  6302 ;;		On entry : 0/0
  6303 ;;		On exit  : 0/0
  6304 ;;		Unchanged: 0/0
  6305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6307 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6308 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6309 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6310 ;;Total ram usage:        4 bytes
  6311 ;; Hardware stack levels used:    1
  6312 ;; Hardware stack levels required when called:   10
  6313 ;; This function calls:
  6314 ;;		_Console_Backspace
  6315 ;;		_Console_FormFeed
  6316 ;;		_Console_IncrementCursor
  6317 ;;		_Console_NewLine
  6318 ;;		_Console_ResetCursor
  6319 ;;		_Console_Tab
  6320 ;; This function is called by:
  6321 ;;		_putch
  6322 ;;		_Console_PrintString
  6323 ;; This function uses a non-reentrant model
  6324 ;;
  6325                           
  6326                           	psect	text16
  6327  012824                     __ptext16:
  6328                           	opt stack 0
  6329  012824                     _Console_PrintChar:
  6330                           	opt stack 17
  6331                           
  6332                           ;incstack = 0
  6333                           ;Console_PrintChar@pInput stored from wreg
  6334  012824  0100               	movlb	0	; () banked
  6335  012826  6F73               	movwf	Console_PrintChar@pInput& (0+255),b
  6336                           
  6337                           ;Console.c: 324: switch(pInput)
  6338  012828  D0B1               	goto	l1036
  6339  01282A                     
  6340                           ;Console.c: 327: case '\n':
  6341                           ;Console.c: 328: Console_NewLine();
  6342  01282A  ECA8  F0A4         	call	_Console_NewLine	;wreg free
  6343                           
  6344                           ;Console.c: 329: return;
  6345  01282E  0012               	return	
  6346  012830                     
  6347                           ;Console.c: 331: Console_Backspace();
  6348  012830  EC8A  F0AB         	call	_Console_Backspace	;wreg free
  6349                           
  6350                           ;Console.c: 332: return;
  6351  012834  0012               	return	
  6352  012836                     
  6353                           ;Console.c: 334: Console_FormFeed();
  6354  012836  ECDB  F0A5         	call	_Console_FormFeed	;wreg free
  6355                           
  6356                           ;Console.c: 335: return;
  6357  01283A  0012               	return	
  6358  01283C                     
  6359                           ;Console.c: 337: Console_Tab();
  6360  01283C  ECDB  F09F         	call	_Console_Tab	;wreg free
  6361                           
  6362                           ;Console.c: 338: return;
  6363  012840  0012               	return	
  6364  012842                     
  6365                           ;Console.c: 340: Console_IncrementCursor();
  6366  012842  ECC3  F0AA         	call	_Console_IncrementCursor	;wreg free
  6367                           
  6368                           ;Console.c: 341: return;
  6369  012846  0012               	return	
  6370  012848                     
  6371                           ;Console.c: 343: Console_ResetCursor();
  6372  012848  ECC9  F0B0         	call	_Console_ResetCursor	;wreg free
  6373                           
  6374                           ;Console.c: 344: return;
  6375  01284C  0012               	return	
  6376  01284E                     
  6377                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  6378                           
  6379                           ;Console.c: 349: default:
  6380  01284E  C073  F070         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  6381  012852  0E7F               	movlw	127
  6382  012854  0100               	movlb	0	; () banked
  6383  012856  1770               	andwf	??_Console_PrintChar& (0+255),f,b
  6384  012858  0100               	movlb	0	; () banked
  6385  01285A  51E7               	movf	_lBufferY& (0+255),w,b
  6386  01285C  0D14               	mullw	20
  6387  01285E  0ECA               	movlw	low _lBuffer
  6388  012860  0100               	movlb	0	; () banked
  6389  012862  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  6390  012864  0E04               	movlw	high _lBuffer
  6391  012866  0100               	movlb	0	; () banked
  6392  012868  6F72               	movwf	(??_Console_PrintChar+2)& (0+255),b
  6393  01286A  50F3               	movf	prodl,w,c
  6394  01286C  0100               	movlb	0	; () banked
  6395  01286E  2771               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  6396  012870  50F4               	movf	prodh,w,c
  6397  012872  0100               	movlb	0	; () banked
  6398  012874  2372               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  6399  012876  0100               	movlb	0	; () banked
  6400  012878  51E8               	movf	_lBufferX& (0+255),w,b
  6401  01287A  0D01               	mullw	1
  6402  01287C  50F3               	movf	prodl,w,c
  6403  01287E  0100               	movlb	0	; () banked
  6404  012880  2571               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  6405  012882  6ED9               	movwf	fsr2l,c
  6406  012884  50F4               	movf	prodh,w,c
  6407  012886  0100               	movlb	0	; () banked
  6408  012888  2172               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  6409  01288A  6EDA               	movwf	fsr2h,c
  6410  01288C  50DF               	movf	indf2,w,c
  6411  01288E  0B7F               	andlw	127
  6412  012890  0100               	movlb	0	; () banked
  6413  012892  1970               	xorwf	??_Console_PrintChar& (0+255),w,b
  6414  012894  B4D8               	btfsc	status,2,c
  6415  012896  D02E               	goto	l1047
  6416                           
  6417                           ; BSR set to: 0
  6418                           ;Console.c: 351: {
  6419                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  6420  012898  0E01               	movlw	1
  6421  01289A  0100               	movlb	0	; () banked
  6422  01289C  6FFF               	movwf	_change& (0+255),b
  6423                           
  6424                           ; BSR set to: 0
  6425  01289E  0100               	movlb	0	; () banked
  6426  0128A0  51E7               	movf	_lBufferY& (0+255),w,b
  6427  0128A2  0D14               	mullw	20
  6428  0128A4  0ECA               	movlw	low _lBuffer
  6429  0128A6  0100               	movlb	0	; () banked
  6430  0128A8  6F70               	movwf	??_Console_PrintChar& (0+255),b
  6431  0128AA  0E04               	movlw	high _lBuffer
  6432  0128AC  0100               	movlb	0	; () banked
  6433  0128AE  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  6434  0128B0  50F3               	movf	prodl,w,c
  6435  0128B2  0100               	movlb	0	; () banked
  6436  0128B4  2770               	addwf	??_Console_PrintChar& (0+255),f,b
  6437  0128B6  50F4               	movf	prodh,w,c
  6438  0128B8  0100               	movlb	0	; () banked
  6439  0128BA  2371               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  6440  0128BC  0100               	movlb	0	; () banked
  6441  0128BE  51E8               	movf	_lBufferX& (0+255),w,b
  6442  0128C0  0D01               	mullw	1
  6443  0128C2  50F3               	movf	prodl,w,c
  6444  0128C4  0100               	movlb	0	; () banked
  6445  0128C6  2570               	addwf	??_Console_PrintChar& (0+255),w,b
  6446  0128C8  6ED9               	movwf	fsr2l,c
  6447  0128CA  50F4               	movf	prodh,w,c
  6448  0128CC  0100               	movlb	0	; () banked
  6449  0128CE  2171               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  6450  0128D0  6EDA               	movwf	fsr2h,c
  6451  0128D2  0100               	movlb	0	; () banked
  6452  0128D4  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
  6453  0128D6  0980               	iorlw	128
  6454  0128D8  6EDF               	movwf	indf2,c
  6455                           
  6456                           ; BSR set to: 0
  6457                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
  6458  0128DA  0100               	movlb	0	; () banked
  6459  0128DC  51E7               	movf	_lBufferY& (0+255),w,b
  6460  0128DE  0D02               	mullw	2
  6461  0128E0  0E00               	movlw	low _lCBuffer
  6462  0128E2  24F3               	addwf	prodl,w,c
  6463  0128E4  6ED9               	movwf	fsr2l,c
  6464  0128E6  0E04               	movlw	high _lCBuffer
  6465  0128E8  20F4               	addwfc	prodh,w,c
  6466  0128EA  6EDA               	movwf	fsr2h,c
  6467  0128EC  C0FD  FFDE         	movff	_gForecolour,postinc2
  6468  0128F0  C0FE  FFDD         	movff	_gForecolour+1,postdec2
  6469  0128F4                     l1047:
  6470                           
  6471                           ; BSR set to: 0
  6472                           ;Console.c: 354: }
  6473                           ;Console.c: 368: if(Console_IncrementCursor())
  6474                           
  6475                           ; BSR set to: 0
  6476  0128F4  ECC3  F0AA         	call	_Console_IncrementCursor	;wreg free
  6477  0128F8  0900               	iorlw	0
  6478  0128FA  B4D8               	btfsc	status,2,c
  6479  0128FC  0012               	return	
  6480                           
  6481                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  6482  0128FE  C073  F070         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  6483  012902  0E7F               	movlw	127
  6484  012904  0100               	movlb	0	; () banked
  6485  012906  1770               	andwf	??_Console_PrintChar& (0+255),f,b
  6486  012908  0100               	movlb	0	; () banked
  6487  01290A  51E7               	movf	_lBufferY& (0+255),w,b
  6488  01290C  0D14               	mullw	20
  6489  01290E  0ECA               	movlw	low _lBuffer
  6490  012910  0100               	movlb	0	; () banked
  6491  012912  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  6492  012914  0E04               	movlw	high _lBuffer
  6493  012916  0100               	movlb	0	; () banked
  6494  012918  6F72               	movwf	(??_Console_PrintChar+2)& (0+255),b
  6495  01291A  50F3               	movf	prodl,w,c
  6496  01291C  0100               	movlb	0	; () banked
  6497  01291E  2771               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  6498  012920  50F4               	movf	prodh,w,c
  6499  012922  0100               	movlb	0	; () banked
  6500  012924  2372               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  6501  012926  0100               	movlb	0	; () banked
  6502  012928  51E8               	movf	_lBufferX& (0+255),w,b
  6503  01292A  0D01               	mullw	1
  6504  01292C  50F3               	movf	prodl,w,c
  6505  01292E  0100               	movlb	0	; () banked
  6506  012930  2571               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  6507  012932  6ED9               	movwf	fsr2l,c
  6508  012934  50F4               	movf	prodh,w,c
  6509  012936  0100               	movlb	0	; () banked
  6510  012938  2172               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  6511  01293A  6EDA               	movwf	fsr2h,c
  6512  01293C  50DF               	movf	indf2,w,c
  6513  01293E  0B7F               	andlw	127
  6514  012940  0100               	movlb	0	; () banked
  6515  012942  1970               	xorwf	??_Console_PrintChar& (0+255),w,b
  6516  012944  B4D8               	btfsc	status,2,c
  6517  012946  0012               	return	
  6518                           
  6519                           ; BSR set to: 0
  6520                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  6521  012948  0E01               	movlw	1
  6522  01294A  0100               	movlb	0	; () banked
  6523  01294C  6FFF               	movwf	_change& (0+255),b
  6524                           
  6525                           ; BSR set to: 0
  6526  01294E  0100               	movlb	0	; () banked
  6527  012950  51E7               	movf	_lBufferY& (0+255),w,b
  6528  012952  0D14               	mullw	20
  6529  012954  0ECA               	movlw	low _lBuffer
  6530  012956  0100               	movlb	0	; () banked
  6531  012958  6F70               	movwf	??_Console_PrintChar& (0+255),b
  6532  01295A  0E04               	movlw	high _lBuffer
  6533  01295C  0100               	movlb	0	; () banked
  6534  01295E  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  6535  012960  50F3               	movf	prodl,w,c
  6536  012962  0100               	movlb	0	; () banked
  6537  012964  2770               	addwf	??_Console_PrintChar& (0+255),f,b
  6538  012966  50F4               	movf	prodh,w,c
  6539  012968  0100               	movlb	0	; () banked
  6540  01296A  2371               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  6541  01296C  0100               	movlb	0	; () banked
  6542  01296E  51E8               	movf	_lBufferX& (0+255),w,b
  6543  012970  0D01               	mullw	1
  6544  012972  50F3               	movf	prodl,w,c
  6545  012974  0100               	movlb	0	; () banked
  6546  012976  2570               	addwf	??_Console_PrintChar& (0+255),w,b
  6547  012978  6ED9               	movwf	fsr2l,c
  6548  01297A  50F4               	movf	prodh,w,c
  6549  01297C  0100               	movlb	0	; () banked
  6550  01297E  2171               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  6551  012980  6EDA               	movwf	fsr2h,c
  6552  012982  0100               	movlb	0	; () banked
  6553  012984  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
  6554  012986  0980               	iorlw	128
  6555  012988  6EDF               	movwf	indf2,c
  6556                           
  6557                           ; BSR set to: 0
  6558                           ;Console.c: 372: };
  6559                           
  6560                           ; BSR set to: 0
  6561                           ;Console.c: 371: return;
  6562                           
  6563                           ; BSR set to: 0
  6564                           
  6565                           ; BSR set to: 0
  6566  01298A  0012               	return	
  6567  01298C                     l1036:
  6568                           
  6569                           ; BSR set to: 0
  6570  01298C  0100               	movlb	0	; () banked
  6571  01298E  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
  6572                           
  6573                           ; Switch size 1, requested type "space"
  6574                           ; Number of cases is 8, Range of values is 7 to 35
  6575                           ; switch strategies available:
  6576                           ; Name         Instructions Cycles
  6577                           ; simple_byte           25    13 (average)
  6578                           ;	Chosen strategy is simple_byte
  6579  012990  0A07               	xorlw	7	; case 7
  6580  012992  B4D8               	btfsc	status,2,c
  6581  012994  D756               	goto	l1043
  6582  012996  0A0F               	xorlw	15	; case 8
  6583  012998  B4D8               	btfsc	status,2,c
  6584  01299A  D74A               	goto	l1040
  6585  01299C  0A01               	xorlw	1	; case 9
  6586  01299E  B4D8               	btfsc	status,2,c
  6587  0129A0  D74D               	goto	l1042
  6588  0129A2  0A03               	xorlw	3	; case 10
  6589  0129A4  B4D8               	btfsc	status,2,c
  6590  0129A6  D741               	goto	l1037
  6591  0129A8  0A06               	xorlw	6	; case 12
  6592  0129AA  B4D8               	btfsc	status,2,c
  6593  0129AC  D744               	goto	l1041
  6594  0129AE  0A01               	xorlw	1	; case 13
  6595  0129B0  B4D8               	btfsc	status,2,c
  6596  0129B2  D73B               	goto	l1037
  6597  0129B4  0A2D               	xorlw	45	; case 32
  6598  0129B6  B4D8               	btfsc	status,2,c
  6599  0129B8  D74A               	goto	l1045
  6600  0129BA  0A03               	xorlw	3	; case 35
  6601  0129BC  B4D8               	btfsc	status,2,c
  6602  0129BE  D744               	goto	l1044
  6603  0129C0  D746               	goto	l1045
  6604  0129C2                     __end_of_Console_PrintChar:
  6605                           	opt stack 0
  6606                           tosu	equ	0xFFF
  6607                           tosh	equ	0xFFE
  6608                           tosl	equ	0xFFD
  6609                           pclath	equ	0xFFA
  6610                           tblptru	equ	0xFF8
  6611                           tblptrh	equ	0xFF7
  6612                           tblptrl	equ	0xFF6
  6613                           tablat	equ	0xFF5
  6614                           prodh	equ	0xFF4
  6615                           prodl	equ	0xFF3
  6616                           postinc0	equ	0xFEE
  6617                           wreg	equ	0xFE8
  6618                           postdec1	equ	0xFE5
  6619                           fsr1h	equ	0xFE2
  6620                           fsr1l	equ	0xFE1
  6621                           indf2	equ	0xFDF
  6622                           postinc2	equ	0xFDE
  6623                           postdec2	equ	0xFDD
  6624                           fsr2h	equ	0xFDA
  6625                           fsr2l	equ	0xFD9
  6626                           status	equ	0xFD8
  6627                           
  6628 ;; *************** function _Console_Tab *****************
  6629 ;; Defined at:
  6630 ;;		line 260 in file "Library/Console.c"
  6631 ;; Parameters:    Size  Location     Type
  6632 ;;		None
  6633 ;; Auto vars:     Size  Location     Type
  6634 ;;  c               1   15[BANK0 ] unsigned char 
  6635 ;;  i               1   14[BANK0 ] unsigned char 
  6636 ;;  t               1   13[BANK0 ] unsigned char 
  6637 ;; Return value:  Size  Location     Type
  6638 ;;                  1    wreg      void 
  6639 ;; Registers used:
  6640 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6641 ;; Tracked objects:
  6642 ;;		On entry : 0/0
  6643 ;;		On exit  : 0/0
  6644 ;;		Unchanged: 0/0
  6645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6647 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6648 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6649 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6650 ;;Total ram usage:        8 bytes
  6651 ;; Hardware stack levels used:    1
  6652 ;; Hardware stack levels required when called:    9
  6653 ;; This function calls:
  6654 ;;		_Console_ClearCursor
  6655 ;;		_Console_IncrementCursor
  6656 ;;		___awdiv
  6657 ;; This function is called by:
  6658 ;;		_Console_PrintChar
  6659 ;; This function uses a non-reentrant model
  6660 ;;
  6661                           
  6662                           	psect	text17
  6663  013FB6                     __ptext17:
  6664                           	opt stack 0
  6665  013FB6                     _Console_Tab:
  6666                           	opt stack 17
  6667                           
  6668                           ;Console.c: 262: UINT8 i = 0;
  6669                           
  6670                           ;incstack = 0
  6671  013FB6  0E00               	movlw	0
  6672  013FB8  0100               	movlb	0	; () banked
  6673  013FBA  6F6E               	movwf	Console_Tab@i& (0+255),b
  6674                           
  6675                           ; BSR set to: 0
  6676                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
  6677  013FBC  0EFA               	movlw	250
  6678  013FBE  2447               	addwf	_gCursor,w,c
  6679  013FC0  0100               	movlb	0	; () banked
  6680  013FC2  6F60               	movwf	___awdiv@dividend& (0+255),b
  6681  013FC4  0EFF               	movlw	255
  6682  013FC6  2048               	addwfc	_gCursor+1,w,c
  6683  013FC8  0100               	movlb	0	; () banked
  6684  013FCA  6F61               	movwf	(___awdiv@dividend+1)& (0+255),b
  6685  013FCC  0E00               	movlw	0
  6686  013FCE  0100               	movlb	0	; () banked
  6687  013FD0  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  6688  013FD2  0E06               	movlw	6
  6689  013FD4  6F62               	movwf	___awdiv@divisor& (0+255),b
  6690  013FD6  EC3C  F0A0         	call	___awdiv	;wreg free
  6691  013FDA  0100               	movlb	0	; () banked
  6692  013FDC  5160               	movf	?___awdiv& (0+255),w,b
  6693  013FDE  0100               	movlb	0	; () banked
  6694  013FE0  6F6F               	movwf	Console_Tab@c& (0+255),b
  6695                           
  6696                           ; BSR set to: 0
  6697                           ;Console.c: 264: UINT8 t = c/4;
  6698  013FE2  C06F  F060         	movff	Console_Tab@c,___awdiv@dividend
  6699  013FE6  0100               	movlb	0	; () banked
  6700  013FE8  6B61               	clrf	(___awdiv@dividend+1)& (0+255),b
  6701  013FEA  0E00               	movlw	0
  6702  013FEC  0100               	movlb	0	; () banked
  6703  013FEE  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  6704  013FF0  0E04               	movlw	4
  6705  013FF2  6F62               	movwf	___awdiv@divisor& (0+255),b
  6706  013FF4  EC3C  F0A0         	call	___awdiv	;wreg free
  6707  013FF8  0100               	movlb	0	; () banked
  6708  013FFA  5160               	movf	?___awdiv& (0+255),w,b
  6709  013FFC  0100               	movlb	0	; () banked
  6710  013FFE  6F6D               	movwf	Console_Tab@t& (0+255),b
  6711                           
  6712                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
  6713  014000  0E00               	movlw	0
  6714  014002  0100               	movlb	0	; () banked
  6715  014004  6F6E               	movwf	Console_Tab@i& (0+255),b
  6716  014006  D006               	goto	l1009
  6717  014008                     
  6718                           ; BSR set to: 0
  6719                           ;Console.c: 266: {
  6720                           ;Console.c: 267: Console_ClearCursor();
  6721                           
  6722                           ; BSR set to: 0
  6723  014008  EC42  F0AE         	call	_Console_ClearCursor	;wreg free
  6724                           
  6725                           ;Console.c: 268: Console_IncrementCursor();
  6726  01400C  ECC3  F0AA         	call	_Console_IncrementCursor	;wreg free
  6727  014010  0100               	movlb	0	; () banked
  6728  014012  2B6E               	incf	Console_Tab@i& (0+255),f,b
  6729  014014                     l1009:
  6730                           
  6731                           ; BSR set to: 0
  6732                           
  6733                           ; BSR set to: 0
  6734  014014  0100               	movlb	0	; () banked
  6735  014016  516D               	movf	Console_Tab@t& (0+255),w,b
  6736  014018  0D04               	mullw	4
  6737  01401A  1EF3               	comf	prodl,f,c
  6738  01401C  1EF4               	comf	prodh,f,c
  6739  01401E  4AF3               	infsnz	prodl,f,c
  6740  014020  2AF4               	incf	prodh,f,c
  6741  014022  0100               	movlb	0	; () banked
  6742  014024  516F               	movf	Console_Tab@c& (0+255),w,b
  6743  014026  0100               	movlb	0	; () banked
  6744  014028  6F68               	movwf	??_Console_Tab& (0+255),b
  6745  01402A  6B69               	clrf	(??_Console_Tab+1)& (0+255),b
  6746  01402C  50F3               	movf	prodl,w,c
  6747  01402E  0100               	movlb	0	; () banked
  6748  014030  2768               	addwf	??_Console_Tab& (0+255),f,b
  6749  014032  50F4               	movf	prodh,w,c
  6750  014034  0100               	movlb	0	; () banked
  6751  014036  2369               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  6752  014038  0100               	movlb	0	; () banked
  6753  01403A  1F68               	comf	??_Console_Tab& (0+255),f,b
  6754  01403C  1F69               	comf	(??_Console_Tab+1)& (0+255),f,b
  6755  01403E  4B68               	infsnz	??_Console_Tab& (0+255),f,b
  6756  014040  2B69               	incf	(??_Console_Tab+1)& (0+255),f,b
  6757  014042  0E04               	movlw	4
  6758  014044  0100               	movlb	0	; () banked
  6759  014046  2768               	addwf	??_Console_Tab& (0+255),f,b
  6760  014048  0E00               	movlw	0
  6761  01404A  2369               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  6762  01404C  0100               	movlb	0	; () banked
  6763  01404E  516E               	movf	Console_Tab@i& (0+255),w,b
  6764  014050  0100               	movlb	0	; () banked
  6765  014052  6F6A               	movwf	(??_Console_Tab+2)& (0+255),b
  6766  014054  6B6B               	clrf	(??_Console_Tab+3)& (0+255),b
  6767  014056  0100               	movlb	0	; () banked
  6768  014058  5168               	movf	??_Console_Tab& (0+255),w,b
  6769  01405A  0100               	movlb	0	; () banked
  6770  01405C  5D6A               	subwf	(??_Console_Tab+2)& (0+255),w,b
  6771  01405E  0100               	movlb	0	; () banked
  6772  014060  516B               	movf	(??_Console_Tab+3)& (0+255),w,b
  6773  014062  0A80               	xorlw	128
  6774  014064  0100               	movlb	0	; () banked
  6775  014066  6F6C               	movwf	(??_Console_Tab+4)& (0+255),b
  6776  014068  0100               	movlb	0	; () banked
  6777  01406A  5169               	movf	(??_Console_Tab+1)& (0+255),w,b
  6778  01406C  0A80               	xorlw	128
  6779  01406E  0100               	movlb	0	; () banked
  6780  014070  596C               	subwfb	(??_Console_Tab+4)& (0+255),w,b
  6781  014072  B0D8               	btfsc	status,0,c
  6782  014074  0012               	return	
  6783  014076  D7C8               	goto	l1010
  6784  014078                     __end_of_Console_Tab:
  6785                           	opt stack 0
  6786                           tosu	equ	0xFFF
  6787                           tosh	equ	0xFFE
  6788                           tosl	equ	0xFFD
  6789                           pclath	equ	0xFFA
  6790                           tblptru	equ	0xFF8
  6791                           tblptrh	equ	0xFF7
  6792                           tblptrl	equ	0xFF6
  6793                           tablat	equ	0xFF5
  6794                           prodh	equ	0xFF4
  6795                           prodl	equ	0xFF3
  6796                           postinc0	equ	0xFEE
  6797                           wreg	equ	0xFE8
  6798                           postdec1	equ	0xFE5
  6799                           fsr1h	equ	0xFE2
  6800                           fsr1l	equ	0xFE1
  6801                           indf2	equ	0xFDF
  6802                           postinc2	equ	0xFDE
  6803                           postdec2	equ	0xFDD
  6804                           fsr2h	equ	0xFDA
  6805                           fsr2l	equ	0xFD9
  6806                           status	equ	0xFD8
  6807                           
  6808 ;; *************** function ___awdiv *****************
  6809 ;; Defined at:
  6810 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
  6811 ;; Parameters:    Size  Location     Type
  6812 ;;  dividend        2    0[BANK0 ] int 
  6813 ;;  divisor         2    2[BANK0 ] int 
  6814 ;; Auto vars:     Size  Location     Type
  6815 ;;  quotient        2    6[BANK0 ] int 
  6816 ;;  sign            1    5[BANK0 ] unsigned char 
  6817 ;;  counter         1    4[BANK0 ] unsigned char 
  6818 ;; Return value:  Size  Location     Type
  6819 ;;                  2    0[BANK0 ] int 
  6820 ;; Registers used:
  6821 ;;		wreg, status,2, status,0
  6822 ;; Tracked objects:
  6823 ;;		On entry : 0/0
  6824 ;;		On exit  : 0/0
  6825 ;;		Unchanged: 0/0
  6826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6827 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6828 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6830 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6831 ;;Total ram usage:        8 bytes
  6832 ;; Hardware stack levels used:    1
  6833 ;; Hardware stack levels required when called:    7
  6834 ;; This function calls:
  6835 ;;		Nothing
  6836 ;; This function is called by:
  6837 ;;		_Console_Tab
  6838 ;; This function uses a non-reentrant model
  6839 ;;
  6840                           
  6841                           	psect	text18
  6842  014078                     __ptext18:
  6843                           	opt stack 0
  6844  014078                     ___awdiv:
  6845                           	opt stack 18
  6846                           
  6847                           ; BSR set to: 0
  6848                           ;incstack = 0
  6849  014078  0E00               	movlw	0
  6850  01407A  0100               	movlb	0	; () banked
  6851  01407C  6F65               	movwf	___awdiv@sign& (0+255),b
  6852                           
  6853                           ; BSR set to: 0
  6854  01407E  0100               	movlb	0	; () banked
  6855  014080  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6856  014082  D008               	goto	l2599
  6857                           
  6858                           ; BSR set to: 0
  6859  014084  0100               	movlb	0	; () banked
  6860  014086  6D62               	negf	___awdiv@divisor& (0+255),b
  6861  014088  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
  6862  01408A  B0D8               	btfsc	status,0,c
  6863  01408C  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
  6864                           
  6865                           ; BSR set to: 0
  6866  01408E  0E01               	movlw	1
  6867  014090  0100               	movlb	0	; () banked
  6868  014092  6F65               	movwf	___awdiv@sign& (0+255),b
  6869  014094                     l2599:
  6870                           
  6871                           ; BSR set to: 0
  6872                           
  6873                           ; BSR set to: 0
  6874  014094  0100               	movlb	0	; () banked
  6875  014096  AF61               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  6876  014098  D008               	goto	l2600
  6877                           
  6878                           ; BSR set to: 0
  6879  01409A  0100               	movlb	0	; () banked
  6880  01409C  6D60               	negf	___awdiv@dividend& (0+255),b
  6881  01409E  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
  6882  0140A0  B0D8               	btfsc	status,0,c
  6883  0140A2  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
  6884                           
  6885                           ; BSR set to: 0
  6886  0140A4  0E01               	movlw	1
  6887  0140A6  0100               	movlb	0	; () banked
  6888  0140A8  1B65               	xorwf	___awdiv@sign& (0+255),f,b
  6889  0140AA                     l2600:
  6890                           
  6891                           ; BSR set to: 0
  6892                           
  6893                           ; BSR set to: 0
  6894  0140AA  0E00               	movlw	0
  6895  0140AC  0100               	movlb	0	; () banked
  6896  0140AE  6F67               	movwf	(___awdiv@quotient+1)& (0+255),b
  6897  0140B0  0E00               	movlw	0
  6898  0140B2  6F66               	movwf	___awdiv@quotient& (0+255),b
  6899                           
  6900                           ; BSR set to: 0
  6901  0140B4  0100               	movlb	0	; () banked
  6902  0140B6  5162               	movf	___awdiv@divisor& (0+255),w,b
  6903  0140B8  0100               	movlb	0	; () banked
  6904  0140BA  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  6905  0140BC  B4D8               	btfsc	status,2,c
  6906  0140BE  D02C               	goto	l2607
  6907                           
  6908                           ; BSR set to: 0
  6909  0140C0  0E01               	movlw	1
  6910  0140C2  0100               	movlb	0	; () banked
  6911  0140C4  6F64               	movwf	___awdiv@counter& (0+255),b
  6912  0140C6  D006               	goto	l2602
  6913  0140C8                     
  6914                           ; BSR set to: 0
  6915                           
  6916                           ; BSR set to: 0
  6917  0140C8  0100               	movlb	0	; () banked
  6918  0140CA  90D8               	bcf	status,0,c
  6919  0140CC  3762               	rlcf	___awdiv@divisor& (0+255),f,b
  6920  0140CE  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  6921  0140D0  0100               	movlb	0	; () banked
  6922  0140D2  2B64               	incf	___awdiv@counter& (0+255),f,b
  6923  0140D4                     l2602:
  6924                           
  6925                           ; BSR set to: 0
  6926                           
  6927                           ; BSR set to: 0
  6928  0140D4  0100               	movlb	0	; () banked
  6929  0140D6  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6930  0140D8  D7F7               	goto	l2603
  6931  0140DA                     u9020:
  6932                           
  6933                           ; BSR set to: 0
  6934                           
  6935                           ; BSR set to: 0
  6936                           
  6937                           ; BSR set to: 0
  6938  0140DA  0100               	movlb	0	; () banked
  6939  0140DC  90D8               	bcf	status,0,c
  6940  0140DE  3766               	rlcf	___awdiv@quotient& (0+255),f,b
  6941  0140E0  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  6942                           
  6943                           ; BSR set to: 0
  6944  0140E2  0100               	movlb	0	; () banked
  6945  0140E4  5162               	movf	___awdiv@divisor& (0+255),w,b
  6946  0140E6  0100               	movlb	0	; () banked
  6947  0140E8  5D60               	subwf	___awdiv@dividend& (0+255),w,b
  6948  0140EA  0100               	movlb	0	; () banked
  6949  0140EC  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6950  0140EE  0100               	movlb	0	; () banked
  6951  0140F0  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  6952  0140F2  A0D8               	btfss	status,0,c
  6953  0140F4  D00A               	goto	l2606
  6954                           
  6955                           ; BSR set to: 0
  6956  0140F6  0100               	movlb	0	; () banked
  6957  0140F8  5162               	movf	___awdiv@divisor& (0+255),w,b
  6958  0140FA  0100               	movlb	0	; () banked
  6959  0140FC  5F60               	subwf	___awdiv@dividend& (0+255),f,b
  6960  0140FE  0100               	movlb	0	; () banked
  6961  014100  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6962  014102  0100               	movlb	0	; () banked
  6963  014104  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  6964                           
  6965                           ; BSR set to: 0
  6966  014106  0100               	movlb	0	; () banked
  6967  014108  8166               	bsf	___awdiv@quotient& (0+255),0,b
  6968  01410A                     l2606:
  6969                           
  6970                           ; BSR set to: 0
  6971                           
  6972                           ; BSR set to: 0
  6973  01410A  0100               	movlb	0	; () banked
  6974  01410C  90D8               	bcf	status,0,c
  6975  01410E  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  6976  014110  3362               	rrcf	___awdiv@divisor& (0+255),f,b
  6977                           
  6978                           ; BSR set to: 0
  6979  014112  0100               	movlb	0	; () banked
  6980  014114  2F64               	decfsz	___awdiv@counter& (0+255),f,b
  6981  014116  D7E1               	goto	u9020
  6982  014118                     l2607:
  6983                           
  6984                           ; BSR set to: 0
  6985                           
  6986                           ; BSR set to: 0
  6987                           
  6988                           ; BSR set to: 0
  6989  014118  0100               	movlb	0	; () banked
  6990  01411A  5165               	movf	___awdiv@sign& (0+255),w,b
  6991  01411C  0100               	movlb	0	; () banked
  6992  01411E  B4D8               	btfsc	status,2,c
  6993  014120  D005               	goto	l2608
  6994                           
  6995                           ; BSR set to: 0
  6996  014122  0100               	movlb	0	; () banked
  6997  014124  6D66               	negf	___awdiv@quotient& (0+255),b
  6998  014126  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
  6999  014128  B0D8               	btfsc	status,0,c
  7000  01412A  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
  7001  01412C                     l2608:
  7002                           
  7003                           ; BSR set to: 0
  7004                           
  7005                           ; BSR set to: 0
  7006  01412C  C066  F060         	movff	___awdiv@quotient,?___awdiv
  7007  014130  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
  7008  014134  0012               	return	
  7009  014136                     __end_of___awdiv:
  7010                           	opt stack 0
  7011                           tosu	equ	0xFFF
  7012                           tosh	equ	0xFFE
  7013                           tosl	equ	0xFFD
  7014                           pclath	equ	0xFFA
  7015                           tblptru	equ	0xFF8
  7016                           tblptrh	equ	0xFF7
  7017                           tblptrl	equ	0xFF6
  7018                           tablat	equ	0xFF5
  7019                           prodh	equ	0xFF4
  7020                           prodl	equ	0xFF3
  7021                           postinc0	equ	0xFEE
  7022                           wreg	equ	0xFE8
  7023                           postdec1	equ	0xFE5
  7024                           fsr1h	equ	0xFE2
  7025                           fsr1l	equ	0xFE1
  7026                           indf2	equ	0xFDF
  7027                           postinc2	equ	0xFDE
  7028                           postdec2	equ	0xFDD
  7029                           fsr2h	equ	0xFDA
  7030                           fsr2l	equ	0xFD9
  7031                           status	equ	0xFD8
  7032                           
  7033 ;; *************** function _Console_IncrementCursor *****************
  7034 ;; Defined at:
  7035 ;;		line 243 in file "Library/Console.c"
  7036 ;; Parameters:    Size  Location     Type
  7037 ;;		None
  7038 ;; Auto vars:     Size  Location     Type
  7039 ;;		None
  7040 ;; Return value:  Size  Location     Type
  7041 ;;                  1    wreg      unsigned char 
  7042 ;; Registers used:
  7043 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7044 ;; Tracked objects:
  7045 ;;		On entry : 0/0
  7046 ;;		On exit  : 0/0
  7047 ;;		Unchanged: 0/0
  7048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7050 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7051 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7052 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7053 ;;Total ram usage:        2 bytes
  7054 ;; Hardware stack levels used:    1
  7055 ;; Hardware stack levels required when called:    8
  7056 ;; This function calls:
  7057 ;;		_Console_FormFeed
  7058 ;;		_Console_NewLine
  7059 ;; This function is called by:
  7060 ;;		_Console_Tab
  7061 ;;		_Console_PrintChar
  7062 ;; This function uses a non-reentrant model
  7063 ;;
  7064                           
  7065                           	psect	text19
  7066  015586                     __ptext19:
  7067                           	opt stack 0
  7068  015586                     _Console_IncrementCursor:
  7069                           	opt stack 17
  7070                           
  7071                           ;Console.c: 246: lBufferX += 1;
  7072                           
  7073                           ; BSR set to: 0
  7074                           ;incstack = 0
  7075  015586  0100               	movlb	0	; () banked
  7076  015588  2BE8               	incf	_lBufferX& (0+255),f,b
  7077                           
  7078                           ; BSR set to: 0
  7079                           ;Console.c: 248: gCursor.x += 6;
  7080  01558A  0E06               	movlw	6
  7081  01558C  2647               	addwf	_gCursor,f,c
  7082  01558E  0E00               	movlw	0
  7083  015590  2248               	addwfc	_gCursor+1,f,c
  7084                           
  7085                           ; BSR set to: 0
  7086                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
  7087  015592  0E06               	movlw	6
  7088  015594  2447               	addwf	_gCursor,w,c
  7089  015596  0100               	movlb	0	; () banked
  7090  015598  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
  7091  01559A  0E00               	movlw	0
  7092  01559C  2048               	addwfc	_gCursor+1,w,c
  7093  01559E  0100               	movlb	0	; () banked
  7094  0155A0  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  7095  0155A2  0100               	movlb	0	; () banked
  7096  0155A4  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  7097  0155A6  D009               	goto	l1004
  7098  0155A8  0100               	movlb	0	; () banked
  7099  0155AA  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  7100  0155AC  E104               	bnz	u8930
  7101  0155AE  0E80               	movlw	128
  7102  0155B0  0100               	movlb	0	; () banked
  7103  0155B2  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
  7104  0155B4  B0D8               	btfsc	status,0,c
  7105  0155B6                     u8930:
  7106                           
  7107                           ; BSR set to: 0
  7108                           ;Console.c: 250: Console_NewLine();
  7109  0155B6  ECA8  F0A4         	call	_Console_NewLine	;wreg free
  7110  0155BA                     l1004:
  7111                           
  7112                           ;Console.c: 251: if (gCursor.y + 8>= 128)
  7113  0155BA  0E08               	movlw	8
  7114  0155BC  2449               	addwf	_gCursor+2,w,c
  7115  0155BE  0100               	movlb	0	; () banked
  7116  0155C0  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
  7117  0155C2  0E00               	movlw	0
  7118  0155C4  204A               	addwfc	_gCursor+3,w,c
  7119  0155C6  0100               	movlb	0	; () banked
  7120  0155C8  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  7121  0155CA  0100               	movlb	0	; () banked
  7122  0155CC  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  7123  0155CE  D00C               	goto	l1005
  7124  0155D0  0100               	movlb	0	; () banked
  7125  0155D2  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  7126  0155D4  E105               	bnz	u8940
  7127  0155D6  0E80               	movlw	128
  7128  0155D8  0100               	movlb	0	; () banked
  7129  0155DA  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
  7130  0155DC  A0D8               	btfss	status,0,c
  7131  0155DE  D004               	goto	l1005
  7132  0155E0                     u8940:
  7133                           
  7134                           ; BSR set to: 0
  7135                           ;Console.c: 252: {
  7136                           ;Console.c: 253: Console_FormFeed();
  7137  0155E0  ECDB  F0A5         	call	_Console_FormFeed	;wreg free
  7138                           
  7139                           ;Console.c: 254: return 1;
  7140  0155E4  0E01               	movlw	1
  7141  0155E6  0012               	return	
  7142  0155E8                     l1005:
  7143                           
  7144                           ;Console.c: 255: }
  7145                           ;Console.c: 257: return 0;
  7146  0155E8  0E00               	movlw	0
  7147  0155EA  0012               	return	
  7148  0155EC                     __end_of_Console_IncrementCursor:
  7149                           	opt stack 0
  7150                           tosu	equ	0xFFF
  7151                           tosh	equ	0xFFE
  7152                           tosl	equ	0xFFD
  7153                           pclath	equ	0xFFA
  7154                           tblptru	equ	0xFF8
  7155                           tblptrh	equ	0xFF7
  7156                           tblptrl	equ	0xFF6
  7157                           tablat	equ	0xFF5
  7158                           prodh	equ	0xFF4
  7159                           prodl	equ	0xFF3
  7160                           postinc0	equ	0xFEE
  7161                           wreg	equ	0xFE8
  7162                           postdec1	equ	0xFE5
  7163                           fsr1h	equ	0xFE2
  7164                           fsr1l	equ	0xFE1
  7165                           indf2	equ	0xFDF
  7166                           postinc2	equ	0xFDE
  7167                           postdec2	equ	0xFDD
  7168                           fsr2h	equ	0xFDA
  7169                           fsr2l	equ	0xFD9
  7170                           status	equ	0xFD8
  7171                           
  7172 ;; *************** function _Console_NewLine *****************
  7173 ;; Defined at:
  7174 ;;		line 175 in file "Library/Console.c"
  7175 ;; Parameters:    Size  Location     Type
  7176 ;;		None
  7177 ;; Auto vars:     Size  Location     Type
  7178 ;;		None
  7179 ;; Return value:  Size  Location     Type
  7180 ;;                  1    wreg      void 
  7181 ;; Registers used:
  7182 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7183 ;; Tracked objects:
  7184 ;;		On entry : 0/0
  7185 ;;		On exit  : 0/0
  7186 ;;		Unchanged: 0/0
  7187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7190 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7191 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7192 ;;Total ram usage:        2 bytes
  7193 ;; Hardware stack levels used:    1
  7194 ;; Hardware stack levels required when called:    7
  7195 ;; This function calls:
  7196 ;;		Nothing
  7197 ;; This function is called by:
  7198 ;;		_Console_IncrementCursor
  7199 ;;		_Console_PrintChar
  7200 ;; This function uses a non-reentrant model
  7201 ;;
  7202                           
  7203                           	psect	text20
  7204  014950                     __ptext20:
  7205                           	opt stack 0
  7206  014950                     _Console_NewLine:
  7207                           	opt stack 17
  7208                           
  7209                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
  7210                           
  7211                           ;incstack = 0
  7212  014950  D03E               	goto	l983
  7213  014952                     
  7214                           ;Console.c: 179: {
  7215                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
  7216  014952  0100               	movlb	0	; () banked
  7217  014954  51E7               	movf	_lBufferY& (0+255),w,b
  7218  014956  0D14               	mullw	20
  7219  014958  0ECA               	movlw	low _lBuffer
  7220  01495A  0100               	movlb	0	; () banked
  7221  01495C  6F60               	movwf	??_Console_NewLine& (0+255),b
  7222  01495E  0E04               	movlw	high _lBuffer
  7223  014960  0100               	movlb	0	; () banked
  7224  014962  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
  7225  014964  50F3               	movf	prodl,w,c
  7226  014966  0100               	movlb	0	; () banked
  7227  014968  2760               	addwf	??_Console_NewLine& (0+255),f,b
  7228  01496A  50F4               	movf	prodh,w,c
  7229  01496C  0100               	movlb	0	; () banked
  7230  01496E  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  7231  014970  0100               	movlb	0	; () banked
  7232  014972  51E8               	movf	_lBufferX& (0+255),w,b
  7233  014974  0D01               	mullw	1
  7234  014976  50F3               	movf	prodl,w,c
  7235  014978  0100               	movlb	0	; () banked
  7236  01497A  2560               	addwf	??_Console_NewLine& (0+255),w,b
  7237  01497C  6ED9               	movwf	fsr2l,c
  7238  01497E  50F4               	movf	prodh,w,c
  7239  014980  0100               	movlb	0	; () banked
  7240  014982  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  7241  014984  6EDA               	movwf	fsr2h,c
  7242  014986  50DF               	movf	indf2,w,c
  7243  014988  B4D8               	btfsc	status,2,c
  7244  01498A  D01F               	goto	l985
  7245                           
  7246                           ; BSR set to: 0
  7247                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
  7248  01498C  0E01               	movlw	1
  7249  01498E  0100               	movlb	0	; () banked
  7250  014990  6FFF               	movwf	_change& (0+255),b
  7251                           
  7252                           ; BSR set to: 0
  7253  014992  0100               	movlb	0	; () banked
  7254  014994  51E7               	movf	_lBufferY& (0+255),w,b
  7255  014996  0D14               	mullw	20
  7256  014998  0ECA               	movlw	low _lBuffer
  7257  01499A  0100               	movlb	0	; () banked
  7258  01499C  6F60               	movwf	??_Console_NewLine& (0+255),b
  7259  01499E  0E04               	movlw	high _lBuffer
  7260  0149A0  0100               	movlb	0	; () banked
  7261  0149A2  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
  7262  0149A4  50F3               	movf	prodl,w,c
  7263  0149A6  0100               	movlb	0	; () banked
  7264  0149A8  2760               	addwf	??_Console_NewLine& (0+255),f,b
  7265  0149AA  50F4               	movf	prodh,w,c
  7266  0149AC  0100               	movlb	0	; () banked
  7267  0149AE  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  7268  0149B0  0100               	movlb	0	; () banked
  7269  0149B2  51E8               	movf	_lBufferX& (0+255),w,b
  7270  0149B4  0D01               	mullw	1
  7271  0149B6  50F3               	movf	prodl,w,c
  7272  0149B8  0100               	movlb	0	; () banked
  7273  0149BA  2560               	addwf	??_Console_NewLine& (0+255),w,b
  7274  0149BC  6ED9               	movwf	fsr2l,c
  7275  0149BE  50F4               	movf	prodh,w,c
  7276  0149C0  0100               	movlb	0	; () banked
  7277  0149C2  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  7278  0149C4  6EDA               	movwf	fsr2h,c
  7279  0149C6  0E80               	movlw	128
  7280  0149C8  6EDF               	movwf	indf2,c
  7281  0149CA                     l985:
  7282                           
  7283                           ; BSR set to: 0
  7284                           ;Console.c: 182: lBufferX ++;
  7285                           
  7286                           ; BSR set to: 0
  7287  0149CA  0100               	movlb	0	; () banked
  7288  0149CC  2BE8               	incf	_lBufferX& (0+255),f,b
  7289  0149CE                     l983:
  7290                           
  7291                           ; BSR set to: 0
  7292  0149CE  0E13               	movlw	19
  7293  0149D0  0100               	movlb	0	; () banked
  7294  0149D2  65E8               	cpfsgt	_lBufferX& (0+255),b
  7295  0149D4  D7BE               	goto	l984
  7296                           
  7297                           ; BSR set to: 0
  7298                           ;Console.c: 183: }
  7299                           ;Console.c: 185: lBufferX = 0;
  7300                           
  7301                           ; BSR set to: 0
  7302  0149D6  0E00               	movlw	0
  7303  0149D8  0100               	movlb	0	; () banked
  7304  0149DA  6FE8               	movwf	_lBufferX& (0+255),b
  7305                           
  7306                           ; BSR set to: 0
  7307                           ;Console.c: 186: lBufferY ++;
  7308  0149DC  0100               	movlb	0	; () banked
  7309  0149DE  2BE7               	incf	_lBufferY& (0+255),f,b
  7310                           
  7311                           ; BSR set to: 0
  7312                           ;Console.c: 188: gCursor.y += 8;
  7313  0149E0  0E08               	movlw	8
  7314  0149E2  2649               	addwf	_gCursor+2,f,c
  7315  0149E4  0E00               	movlw	0
  7316  0149E6  224A               	addwfc	_gCursor+3,f,c
  7317                           
  7318                           ; BSR set to: 0
  7319                           ;Console.c: 189: gCursor.x = 6;
  7320  0149E8  0E00               	movlw	0
  7321  0149EA  6E48               	movwf	_gCursor+1,c
  7322  0149EC  0E06               	movlw	6
  7323  0149EE  6E47               	movwf	_gCursor,c
  7324                           
  7325                           ; BSR set to: 0
  7326  0149F0  0012               	return		;funcret
  7327  0149F2                     __end_of_Console_NewLine:
  7328                           	opt stack 0
  7329                           tosu	equ	0xFFF
  7330                           tosh	equ	0xFFE
  7331                           tosl	equ	0xFFD
  7332                           pclath	equ	0xFFA
  7333                           tblptru	equ	0xFF8
  7334                           tblptrh	equ	0xFF7
  7335                           tblptrl	equ	0xFF6
  7336                           tablat	equ	0xFF5
  7337                           prodh	equ	0xFF4
  7338                           prodl	equ	0xFF3
  7339                           postinc0	equ	0xFEE
  7340                           wreg	equ	0xFE8
  7341                           postdec1	equ	0xFE5
  7342                           fsr1h	equ	0xFE2
  7343                           fsr1l	equ	0xFE1
  7344                           indf2	equ	0xFDF
  7345                           postinc2	equ	0xFDE
  7346                           postdec2	equ	0xFDD
  7347                           fsr2h	equ	0xFDA
  7348                           fsr2l	equ	0xFD9
  7349                           status	equ	0xFD8
  7350                           
  7351 ;; *************** function _Console_FormFeed *****************
  7352 ;; Defined at:
  7353 ;;		line 192 in file "Library/Console.c"
  7354 ;; Parameters:    Size  Location     Type
  7355 ;;		None
  7356 ;; Auto vars:     Size  Location     Type
  7357 ;;  y               1    3[BANK0 ] unsigned char 
  7358 ;;  x               1    2[BANK0 ] unsigned char 
  7359 ;; Return value:  Size  Location     Type
  7360 ;;                  1    wreg      void 
  7361 ;; Registers used:
  7362 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7363 ;; Tracked objects:
  7364 ;;		On entry : 0/0
  7365 ;;		On exit  : 0/0
  7366 ;;		Unchanged: 0/0
  7367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7369 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7370 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7371 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7372 ;;Total ram usage:        4 bytes
  7373 ;; Hardware stack levels used:    1
  7374 ;; Hardware stack levels required when called:    7
  7375 ;; This function calls:
  7376 ;;		Nothing
  7377 ;; This function is called by:
  7378 ;;		_Console_IncrementCursor
  7379 ;;		_Console_PrintChar
  7380 ;; This function uses a non-reentrant model
  7381 ;;
  7382                           
  7383                           	psect	text21
  7384  014BB6                     __ptext21:
  7385                           	opt stack 0
  7386  014BB6                     _Console_FormFeed:
  7387                           	opt stack 17
  7388                           
  7389                           ;Console.c: 195: lBufferX = 0;
  7390                           
  7391                           ; BSR set to: 0
  7392                           ;incstack = 0
  7393  014BB6  0E00               	movlw	0
  7394  014BB8  0100               	movlb	0	; () banked
  7395  014BBA  6FE8               	movwf	_lBufferX& (0+255),b
  7396                           
  7397                           ;Console.c: 196: lBufferY = 0;
  7398  014BBC  0E00               	movlw	0
  7399  014BBE  0100               	movlb	0	; () banked
  7400  014BC0  6FE7               	movwf	_lBufferY& (0+255),b
  7401                           
  7402                           ;Console.c: 197: UINT8 x, y;
  7403                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
  7404  014BC2  0E00               	movlw	0
  7405  014BC4  0100               	movlb	0	; () banked
  7406  014BC6  6F63               	movwf	Console_FormFeed@y& (0+255),b
  7407  014BC8                     l12105:
  7408                           
  7409                           ; BSR set to: 0
  7410  014BC8  0E0E               	movlw	14
  7411  014BCA  0100               	movlb	0	; () banked
  7412  014BCC  6563               	cpfsgt	Console_FormFeed@y& (0+255),b
  7413  014BCE  D001               	goto	l990
  7414  014BD0  D02D               	goto	u8780
  7415  014BD2                     l990:
  7416                           
  7417                           ; BSR set to: 0
  7418                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
  7419                           
  7420                           ; BSR set to: 0
  7421  014BD2  0E00               	movlw	0
  7422  014BD4  0100               	movlb	0	; () banked
  7423  014BD6  6F62               	movwf	Console_FormFeed@x& (0+255),b
  7424  014BD8                     l12111:
  7425                           
  7426                           ; BSR set to: 0
  7427  014BD8  0E13               	movlw	19
  7428  014BDA  0100               	movlb	0	; () banked
  7429  014BDC  6562               	cpfsgt	Console_FormFeed@x& (0+255),b
  7430  014BDE  D001               	goto	l992
  7431  014BE0  D022               	goto	u8770
  7432  014BE2                     l992:
  7433                           
  7434                           ; BSR set to: 0
  7435                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
  7436                           
  7437                           ; BSR set to: 0
  7438  014BE2  0E01               	movlw	1
  7439  014BE4  0100               	movlb	0	; () banked
  7440  014BE6  6FFF               	movwf	_change& (0+255),b
  7441                           
  7442                           ; BSR set to: 0
  7443  014BE8  0100               	movlb	0	; () banked
  7444  014BEA  5163               	movf	Console_FormFeed@y& (0+255),w,b
  7445  014BEC  0D14               	mullw	20
  7446  014BEE  0ECA               	movlw	low _lBuffer
  7447  014BF0  0100               	movlb	0	; () banked
  7448  014BF2  6F60               	movwf	??_Console_FormFeed& (0+255),b
  7449  014BF4  0E04               	movlw	high _lBuffer
  7450  014BF6  0100               	movlb	0	; () banked
  7451  014BF8  6F61               	movwf	(??_Console_FormFeed+1)& (0+255),b
  7452  014BFA  50F3               	movf	prodl,w,c
  7453  014BFC  0100               	movlb	0	; () banked
  7454  014BFE  2760               	addwf	??_Console_FormFeed& (0+255),f,b
  7455  014C00  50F4               	movf	prodh,w,c
  7456  014C02  0100               	movlb	0	; () banked
  7457  014C04  2361               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
  7458  014C06  0100               	movlb	0	; () banked
  7459  014C08  5162               	movf	Console_FormFeed@x& (0+255),w,b
  7460  014C0A  0D01               	mullw	1
  7461  014C0C  50F3               	movf	prodl,w,c
  7462  014C0E  0100               	movlb	0	; () banked
  7463  014C10  2560               	addwf	??_Console_FormFeed& (0+255),w,b
  7464  014C12  6ED9               	movwf	fsr2l,c
  7465  014C14  50F4               	movf	prodh,w,c
  7466  014C16  0100               	movlb	0	; () banked
  7467  014C18  2161               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
  7468  014C1A  6EDA               	movwf	fsr2h,c
  7469  014C1C  0E80               	movlw	128
  7470  014C1E  6EDF               	movwf	indf2,c
  7471                           
  7472                           ; BSR set to: 0
  7473  014C20  0100               	movlb	0	; () banked
  7474  014C22  2B62               	incf	Console_FormFeed@x& (0+255),f,b
  7475  014C24  D7D9               	goto	l12111
  7476  014C26                     u8770:
  7477                           
  7478                           ; BSR set to: 0
  7479                           
  7480                           ; BSR set to: 0
  7481  014C26  0100               	movlb	0	; () banked
  7482  014C28  2B63               	incf	Console_FormFeed@y& (0+255),f,b
  7483  014C2A  D7CE               	goto	l12105
  7484  014C2C                     u8780:
  7485                           
  7486                           ; BSR set to: 0
  7487                           ;Console.c: 204: clearall = 1;
  7488                           
  7489                           ; BSR set to: 0
  7490  014C2C  0E01               	movlw	1
  7491  014C2E  0100               	movlb	0	; () banked
  7492  014C30  6FE9               	movwf	_clearall& (0+255),b
  7493                           
  7494                           ;Console.c: 205: gCursor.x = 6;
  7495  014C32  0E00               	movlw	0
  7496  014C34  6E48               	movwf	_gCursor+1,c
  7497  014C36  0E06               	movlw	6
  7498  014C38  6E47               	movwf	_gCursor,c
  7499                           
  7500                           ;Console.c: 206: gCursor.y = 6;
  7501  014C3A  0E00               	movlw	0
  7502  014C3C  6E4A               	movwf	_gCursor+3,c
  7503  014C3E  0E06               	movlw	6
  7504  014C40  6E49               	movwf	_gCursor+2,c
  7505                           
  7506                           ; BSR set to: 0
  7507  014C42  0012               	return		;funcret
  7508  014C44                     __end_of_Console_FormFeed:
  7509                           	opt stack 0
  7510                           tosu	equ	0xFFF
  7511                           tosh	equ	0xFFE
  7512                           tosl	equ	0xFFD
  7513                           pclath	equ	0xFFA
  7514                           tblptru	equ	0xFF8
  7515                           tblptrh	equ	0xFF7
  7516                           tblptrl	equ	0xFF6
  7517                           tablat	equ	0xFF5
  7518                           prodh	equ	0xFF4
  7519                           prodl	equ	0xFF3
  7520                           postinc0	equ	0xFEE
  7521                           wreg	equ	0xFE8
  7522                           postdec1	equ	0xFE5
  7523                           fsr1h	equ	0xFE2
  7524                           fsr1l	equ	0xFE1
  7525                           indf2	equ	0xFDF
  7526                           postinc2	equ	0xFDE
  7527                           postdec2	equ	0xFDD
  7528                           fsr2h	equ	0xFDA
  7529                           fsr2l	equ	0xFD9
  7530                           status	equ	0xFD8
  7531                           
  7532 ;; *************** function _Console_ResetCursor *****************
  7533 ;; Defined at:
  7534 ;;		line 297 in file "Library/Console.c"
  7535 ;; Parameters:    Size  Location     Type
  7536 ;;		None
  7537 ;; Auto vars:     Size  Location     Type
  7538 ;;		None
  7539 ;; Return value:  Size  Location     Type
  7540 ;;                  1    wreg      void 
  7541 ;; Registers used:
  7542 ;;		wreg, status,2
  7543 ;; Tracked objects:
  7544 ;;		On entry : 0/0
  7545 ;;		On exit  : 0/0
  7546 ;;		Unchanged: 0/0
  7547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7551 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7552 ;;Total ram usage:        0 bytes
  7553 ;; Hardware stack levels used:    1
  7554 ;; Hardware stack levels required when called:    7
  7555 ;; This function calls:
  7556 ;;		Nothing
  7557 ;; This function is called by:
  7558 ;;		_Console_PrintChar
  7559 ;; This function uses a non-reentrant model
  7560 ;;
  7561                           
  7562                           	psect	text22
  7563  016192                     __ptext22:
  7564                           	opt stack 0
  7565  016192                     _Console_ResetCursor:
  7566                           	opt stack 19
  7567                           
  7568                           ;Console.c: 299: gCursor.x = 6;
  7569                           
  7570                           ; BSR set to: 0
  7571                           ;incstack = 0
  7572  016192  0E00               	movlw	0
  7573  016194  6E48               	movwf	_gCursor+1,c
  7574  016196  0E06               	movlw	6
  7575  016198  6E47               	movwf	_gCursor,c
  7576                           
  7577                           ;Console.c: 300: gCursor.y = 6;
  7578  01619A  0E00               	movlw	0
  7579  01619C  6E4A               	movwf	_gCursor+3,c
  7580  01619E  0E06               	movlw	6
  7581  0161A0  6E49               	movwf	_gCursor+2,c
  7582                           
  7583                           ;Console.c: 303: lBufferX = 0;
  7584  0161A2  0E00               	movlw	0
  7585  0161A4  0100               	movlb	0	; () banked
  7586  0161A6  6FE8               	movwf	_lBufferX& (0+255),b
  7587                           
  7588                           ;Console.c: 304: lBufferY = 0;
  7589  0161A8  0E00               	movlw	0
  7590  0161AA  0100               	movlb	0	; () banked
  7591  0161AC  6FE7               	movwf	_lBufferY& (0+255),b
  7592                           
  7593                           ; BSR set to: 0
  7594  0161AE  0012               	return		;funcret
  7595  0161B0                     __end_of_Console_ResetCursor:
  7596                           	opt stack 0
  7597                           tosu	equ	0xFFF
  7598                           tosh	equ	0xFFE
  7599                           tosl	equ	0xFFD
  7600                           pclath	equ	0xFFA
  7601                           tblptru	equ	0xFF8
  7602                           tblptrh	equ	0xFF7
  7603                           tblptrl	equ	0xFF6
  7604                           tablat	equ	0xFF5
  7605                           prodh	equ	0xFF4
  7606                           prodl	equ	0xFF3
  7607                           postinc0	equ	0xFEE
  7608                           wreg	equ	0xFE8
  7609                           postdec1	equ	0xFE5
  7610                           fsr1h	equ	0xFE2
  7611                           fsr1l	equ	0xFE1
  7612                           indf2	equ	0xFDF
  7613                           postinc2	equ	0xFDE
  7614                           postdec2	equ	0xFDD
  7615                           fsr2h	equ	0xFDA
  7616                           fsr2l	equ	0xFD9
  7617                           status	equ	0xFD8
  7618                           
  7619 ;; *************** function _Console_Backspace *****************
  7620 ;; Defined at:
  7621 ;;		line 209 in file "Library/Console.c"
  7622 ;; Parameters:    Size  Location     Type
  7623 ;;		None
  7624 ;; Auto vars:     Size  Location     Type
  7625 ;;		None
  7626 ;; Return value:  Size  Location     Type
  7627 ;;                  1    wreg      void 
  7628 ;; Registers used:
  7629 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7630 ;; Tracked objects:
  7631 ;;		On entry : 0/0
  7632 ;;		On exit  : 0/0
  7633 ;;		Unchanged: 0/0
  7634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7636 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7638 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7639 ;;Total ram usage:        0 bytes
  7640 ;; Hardware stack levels used:    1
  7641 ;; Hardware stack levels required when called:    8
  7642 ;; This function calls:
  7643 ;;		_Console_ClearCursor
  7644 ;; This function is called by:
  7645 ;;		_Console_PrintChar
  7646 ;; This function uses a non-reentrant model
  7647 ;;
  7648                           
  7649                           	psect	text23
  7650  015714                     __ptext23:
  7651                           	opt stack 0
  7652  015714                     _Console_Backspace:
  7653                           	opt stack 18
  7654                           
  7655                           ;Console.c: 211: if (lBufferX > 0)
  7656                           
  7657                           ; BSR set to: 0
  7658                           ;incstack = 0
  7659  015714  0100               	movlb	0	; () banked
  7660  015716  51E8               	movf	_lBufferX& (0+255),w,b
  7661  015718  B4D8               	btfsc	status,2,c
  7662  01571A  D007               	goto	l997
  7663                           
  7664                           ; BSR set to: 0
  7665                           ;Console.c: 212: {
  7666                           ;Console.c: 213: gCursor.x -= 6;
  7667  01571C  0EFA               	movlw	250
  7668  01571E  2647               	addwf	_gCursor,f,c
  7669  015720  0EFF               	movlw	255
  7670  015722  2248               	addwfc	_gCursor+1,f,c
  7671                           
  7672                           ; BSR set to: 0
  7673                           ;Console.c: 216: lBufferX --;
  7674  015724  0100               	movlb	0	; () banked
  7675  015726  07E8               	decf	_lBufferX& (0+255),f,b
  7676                           
  7677                           ;Console.c: 218: }
  7678  015728  D020               	goto	l1000
  7679  01572A                     l997:
  7680                           
  7681                           ; BSR set to: 0
  7682                           ;Console.c: 219: else if (lBufferY > 0)
  7683                           
  7684                           ; BSR set to: 0
  7685  01572A  0100               	movlb	0	; () banked
  7686  01572C  51E7               	movf	_lBufferY& (0+255),w,b
  7687  01572E  B4D8               	btfsc	status,2,c
  7688  015730  D00E               	goto	l999
  7689                           
  7690                           ; BSR set to: 0
  7691                           ;Console.c: 220: {
  7692                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
  7693  015732  0E00               	movlw	0
  7694  015734  6E48               	movwf	_gCursor+1,c
  7695  015736  0E72               	movlw	114
  7696  015738  6E47               	movwf	_gCursor,c
  7697                           
  7698                           ; BSR set to: 0
  7699                           ;Console.c: 222: gCursor.y -= 8;
  7700  01573A  0EF8               	movlw	248
  7701  01573C  2649               	addwf	_gCursor+2,f,c
  7702  01573E  0EFF               	movlw	255
  7703  015740  224A               	addwfc	_gCursor+3,f,c
  7704                           
  7705                           ; BSR set to: 0
  7706                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
  7707  015742  0E13               	movlw	19
  7708  015744  0100               	movlb	0	; () banked
  7709  015746  6FE8               	movwf	_lBufferX& (0+255),b
  7710                           
  7711                           ; BSR set to: 0
  7712                           ;Console.c: 226: lBufferY --;
  7713  015748  0100               	movlb	0	; () banked
  7714  01574A  07E7               	decf	_lBufferY& (0+255),f,b
  7715                           
  7716                           ;Console.c: 228: }
  7717  01574C  D00E               	goto	l1000
  7718  01574E                     l999:
  7719                           
  7720                           ; BSR set to: 0
  7721                           ;Console.c: 229: else
  7722                           ;Console.c: 230: {
  7723                           ;Console.c: 231: gCursor.x = 6;
  7724                           
  7725                           ; BSR set to: 0
  7726  01574E  0E00               	movlw	0
  7727  015750  6E48               	movwf	_gCursor+1,c
  7728  015752  0E06               	movlw	6
  7729  015754  6E47               	movwf	_gCursor,c
  7730                           
  7731                           ;Console.c: 232: gCursor.y = 6;
  7732  015756  0E00               	movlw	0
  7733  015758  6E4A               	movwf	_gCursor+3,c
  7734  01575A  0E06               	movlw	6
  7735  01575C  6E49               	movwf	_gCursor+2,c
  7736                           
  7737                           ;Console.c: 235: lBufferX = 0;
  7738  01575E  0E00               	movlw	0
  7739  015760  0100               	movlb	0	; () banked
  7740  015762  6FE8               	movwf	_lBufferX& (0+255),b
  7741                           
  7742                           ;Console.c: 236: lBufferY = 0;
  7743  015764  0E00               	movlw	0
  7744  015766  0100               	movlb	0	; () banked
  7745  015768  6FE7               	movwf	_lBufferY& (0+255),b
  7746  01576A                     l1000:
  7747                           
  7748                           ; BSR set to: 0
  7749                           ;Console.c: 238: }
  7750                           ;Console.c: 240: Console_ClearCursor();
  7751                           
  7752                           ; BSR set to: 0
  7753                           
  7754                           ; BSR set to: 0
  7755  01576A  EC42  F0AE         	call	_Console_ClearCursor	;wreg free
  7756  01576E  0012               	return		;funcret
  7757  015770                     __end_of_Console_Backspace:
  7758                           	opt stack 0
  7759                           tosu	equ	0xFFF
  7760                           tosh	equ	0xFFE
  7761                           tosl	equ	0xFFD
  7762                           pclath	equ	0xFFA
  7763                           tblptru	equ	0xFF8
  7764                           tblptrh	equ	0xFF7
  7765                           tblptrl	equ	0xFF6
  7766                           tablat	equ	0xFF5
  7767                           prodh	equ	0xFF4
  7768                           prodl	equ	0xFF3
  7769                           postinc0	equ	0xFEE
  7770                           wreg	equ	0xFE8
  7771                           postdec1	equ	0xFE5
  7772                           fsr1h	equ	0xFE2
  7773                           fsr1l	equ	0xFE1
  7774                           indf2	equ	0xFDF
  7775                           postinc2	equ	0xFDE
  7776                           postdec2	equ	0xFDD
  7777                           fsr2h	equ	0xFDA
  7778                           fsr2l	equ	0xFD9
  7779                           status	equ	0xFD8
  7780                           
  7781 ;; *************** function _Console_ClearCursor *****************
  7782 ;; Defined at:
  7783 ;;		line 308 in file "Library/Console.c"
  7784 ;; Parameters:    Size  Location     Type
  7785 ;;		None
  7786 ;; Auto vars:     Size  Location     Type
  7787 ;;		None
  7788 ;; Return value:  Size  Location     Type
  7789 ;;                  1    wreg      void 
  7790 ;; Registers used:
  7791 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7792 ;; Tracked objects:
  7793 ;;		On entry : 0/0
  7794 ;;		On exit  : 0/0
  7795 ;;		Unchanged: 0/0
  7796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7799 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7800 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7801 ;;Total ram usage:        2 bytes
  7802 ;; Hardware stack levels used:    1
  7803 ;; Hardware stack levels required when called:    7
  7804 ;; This function calls:
  7805 ;;		Nothing
  7806 ;; This function is called by:
  7807 ;;		_Console_Backspace
  7808 ;;		_Console_Tab
  7809 ;; This function uses a non-reentrant model
  7810 ;;
  7811                           
  7812                           	psect	text24
  7813  015C84                     __ptext24:
  7814                           	opt stack 0
  7815  015C84                     _Console_ClearCursor:
  7816                           	opt stack 18
  7817                           
  7818                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
  7819                           
  7820                           ;incstack = 0
  7821  015C84  0E01               	movlw	1
  7822  015C86  0100               	movlb	0	; () banked
  7823  015C88  6FFF               	movwf	_change& (0+255),b
  7824                           
  7825                           ; BSR set to: 0
  7826  015C8A  0100               	movlb	0	; () banked
  7827  015C8C  51E7               	movf	_lBufferY& (0+255),w,b
  7828  015C8E  0D14               	mullw	20
  7829  015C90  0ECA               	movlw	low _lBuffer
  7830  015C92  0100               	movlb	0	; () banked
  7831  015C94  6F60               	movwf	??_Console_ClearCursor& (0+255),b
  7832  015C96  0E04               	movlw	high _lBuffer
  7833  015C98  0100               	movlb	0	; () banked
  7834  015C9A  6F61               	movwf	(??_Console_ClearCursor+1)& (0+255),b
  7835  015C9C  50F3               	movf	prodl,w,c
  7836  015C9E  0100               	movlb	0	; () banked
  7837  015CA0  2760               	addwf	??_Console_ClearCursor& (0+255),f,b
  7838  015CA2  50F4               	movf	prodh,w,c
  7839  015CA4  0100               	movlb	0	; () banked
  7840  015CA6  2361               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
  7841  015CA8  0100               	movlb	0	; () banked
  7842  015CAA  51E8               	movf	_lBufferX& (0+255),w,b
  7843  015CAC  0D01               	mullw	1
  7844  015CAE  50F3               	movf	prodl,w,c
  7845  015CB0  0100               	movlb	0	; () banked
  7846  015CB2  2560               	addwf	??_Console_ClearCursor& (0+255),w,b
  7847  015CB4  6ED9               	movwf	fsr2l,c
  7848  015CB6  50F4               	movf	prodh,w,c
  7849  015CB8  0100               	movlb	0	; () banked
  7850  015CBA  2161               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
  7851  015CBC  6EDA               	movwf	fsr2h,c
  7852  015CBE  0E80               	movlw	128
  7853  015CC0  6EDF               	movwf	indf2,c
  7854                           
  7855                           ; BSR set to: 0
  7856  015CC2  0012               	return		;funcret
  7857  015CC4                     __end_of_Console_ClearCursor:
  7858                           	opt stack 0
  7859                           tosu	equ	0xFFF
  7860                           tosh	equ	0xFFE
  7861                           tosl	equ	0xFFD
  7862                           pclath	equ	0xFFA
  7863                           tblptru	equ	0xFF8
  7864                           tblptrh	equ	0xFF7
  7865                           tblptrl	equ	0xFF6
  7866                           tablat	equ	0xFF5
  7867                           prodh	equ	0xFF4
  7868                           prodl	equ	0xFF3
  7869                           postinc0	equ	0xFEE
  7870                           wreg	equ	0xFE8
  7871                           postdec1	equ	0xFE5
  7872                           fsr1h	equ	0xFE2
  7873                           fsr1l	equ	0xFE1
  7874                           indf2	equ	0xFDF
  7875                           postinc2	equ	0xFDE
  7876                           postdec2	equ	0xFDD
  7877                           fsr2h	equ	0xFDA
  7878                           fsr2l	equ	0xFD9
  7879                           status	equ	0xFD8
  7880                           
  7881 ;; *************** function _irobot_stop_motion *****************
  7882 ;; Defined at:
  7883 ;;		line 288 in file "Library/iRobotSerial.c"
  7884 ;; Parameters:    Size  Location     Type
  7885 ;;  isScript        1    wreg     unsigned char 
  7886 ;; Auto vars:     Size  Location     Type
  7887 ;;  isScript        1   25[BANK0 ] unsigned char 
  7888 ;; Return value:  Size  Location     Type
  7889 ;;                  1    wreg      void 
  7890 ;; Registers used:
  7891 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  7892 ;; Tracked objects:
  7893 ;;		On entry : 0/0
  7894 ;;		On exit  : 0/0
  7895 ;;		Unchanged: 0/0
  7896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7898 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7900 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7901 ;;Total ram usage:        1 bytes
  7902 ;; Hardware stack levels used:    1
  7903 ;; Hardware stack levels required when called:    9
  7904 ;; This function calls:
  7905 ;;		_irobot_move
  7906 ;; This function is called by:
  7907 ;;		_mode1
  7908 ;;		_mode2
  7909 ;;		_mode4
  7910 ;;		_irobot_move_to_simple
  7911 ;;		_irobot_rotate_to
  7912 ;; This function uses a non-reentrant model
  7913 ;;
  7914                           
  7915                           	psect	text25
  7916  015B2C                     __ptext25:
  7917                           	opt stack 0
  7918  015B2C                     _irobot_stop_motion:
  7919                           	opt stack 20
  7920                           
  7921                           ; BSR set to: 0
  7922                           ;incstack = 0
  7923                           ;irobot_stop_motion@isScript stored from wreg
  7924  015B2C  0100               	movlb	0	; () banked
  7925  015B2E  6F79               	movwf	irobot_stop_motion@isScript& (0+255),b
  7926                           
  7927                           ;iRobotSerial.c: 289: (isScript) ? irobot_move(1,0,0) : irobot_move(0,0,0);
  7928  015B30  0100               	movlb	0	; () banked
  7929  015B32  5179               	movf	irobot_stop_motion@isScript& (0+255),w,b
  7930  015B34  0100               	movlb	0	; () banked
  7931  015B36  B4D8               	btfsc	status,2,c
  7932  015B38  D00E               	goto	l2163
  7933                           
  7934                           ; BSR set to: 0
  7935  015B3A  0E00               	movlw	0
  7936  015B3C  0100               	movlb	0	; () banked
  7937  015B3E  6F71               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  7938  015B40  0E00               	movlw	0
  7939  015B42  6F70               	movwf	irobot_move@moveSpeed& (0+255),b
  7940  015B44  0E00               	movlw	0
  7941  015B46  0100               	movlb	0	; () banked
  7942  015B48  6F73               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  7943  015B4A  0E00               	movlw	0
  7944  015B4C  6F72               	movwf	irobot_move@moveTurnRadius& (0+255),b
  7945  015B4E  0E01               	movlw	1
  7946  015B50  ECB1  F0A1         	call	_irobot_move
  7947  015B54  0012               	return	
  7948  015B56                     l2163:
  7949  015B56  0E00               	movlw	0
  7950  015B58  0100               	movlb	0	; () banked
  7951  015B5A  6F71               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  7952  015B5C  0E00               	movlw	0
  7953  015B5E  6F70               	movwf	irobot_move@moveSpeed& (0+255),b
  7954  015B60  0E00               	movlw	0
  7955  015B62  0100               	movlb	0	; () banked
  7956  015B64  6F73               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  7957  015B66  0E00               	movlw	0
  7958  015B68  6F72               	movwf	irobot_move@moveTurnRadius& (0+255),b
  7959  015B6A  0E00               	movlw	0
  7960  015B6C  ECB1  F0A1         	call	_irobot_move
  7961  015B70  0012               	return	
  7962  015B72                     __end_of_irobot_stop_motion:
  7963                           	opt stack 0
  7964                           tosu	equ	0xFFF
  7965                           tosh	equ	0xFFE
  7966                           tosl	equ	0xFFD
  7967                           pclath	equ	0xFFA
  7968                           tblptru	equ	0xFF8
  7969                           tblptrh	equ	0xFF7
  7970                           tblptrl	equ	0xFF6
  7971                           tablat	equ	0xFF5
  7972                           prodh	equ	0xFF4
  7973                           prodl	equ	0xFF3
  7974                           postinc0	equ	0xFEE
  7975                           wreg	equ	0xFE8
  7976                           postdec1	equ	0xFE5
  7977                           fsr1h	equ	0xFE2
  7978                           fsr1l	equ	0xFE1
  7979                           indf2	equ	0xFDF
  7980                           postinc2	equ	0xFDE
  7981                           postdec2	equ	0xFDD
  7982                           fsr2h	equ	0xFDA
  7983                           fsr2l	equ	0xFD9
  7984                           status	equ	0xFD8
  7985                           
  7986 ;; *************** function _irobot_move *****************
  7987 ;; Defined at:
  7988 ;;		line 220 in file "Library/iRobotSerial.c"
  7989 ;; Parameters:    Size  Location     Type
  7990 ;;  isScript        1    wreg     unsigned char 
  7991 ;;  moveSpeed       2   16[BANK0 ] short 
  7992 ;;  moveTurnRadi    2   18[BANK0 ] short 
  7993 ;; Auto vars:     Size  Location     Type
  7994 ;;  isScript        1   24[BANK0 ] unsigned char 
  7995 ;; Return value:  Size  Location     Type
  7996 ;;                  1    wreg      void 
  7997 ;; Registers used:
  7998 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  7999 ;; Tracked objects:
  8000 ;;		On entry : 0/0
  8001 ;;		On exit  : 0/0
  8002 ;;		Unchanged: 0/0
  8003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8004 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8005 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8006 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8007 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8008 ;;Total ram usage:        9 bytes
  8009 ;; Hardware stack levels used:    1
  8010 ;; Hardware stack levels required when called:    8
  8011 ;; This function calls:
  8012 ;;		_eusart_putch
  8013 ;;		_load_iRScriptStack
  8014 ;;		_twos_complement_of
  8015 ;; This function is called by:
  8016 ;;		_irobot_stop_motion
  8017 ;;		_irobot_move_straight
  8018 ;;		_irobot_rotate
  8019 ;;		_irobot_move_to_simple
  8020 ;; This function uses a non-reentrant model
  8021 ;;
  8022                           
  8023                           	psect	text26
  8024  014362                     __ptext26:
  8025                           	opt stack 0
  8026  014362                     _irobot_move:
  8027                           	opt stack 20
  8028                           
  8029                           ;incstack = 0
  8030                           ;irobot_move@isScript stored from wreg
  8031  014362  0100               	movlb	0	; () banked
  8032  014364  6F78               	movwf	irobot_move@isScript& (0+255),b
  8033                           
  8034                           ;iRobotSerial.c: 221: moveSpeed = twos_complement_of(moveSpeed);
  8035  014366  C070  F060         	movff	irobot_move@moveSpeed,twos_complement_of@complementValue
  8036  01436A  C071  F061         	movff	irobot_move@moveSpeed+1,twos_complement_of@complementValue+1
  8037  01436E  ECFF  F0AD         	call	_twos_complement_of	;wreg free
  8038  014372  C060  F070         	movff	?_twos_complement_of,irobot_move@moveSpeed
  8039  014376  C061  F071         	movff	?_twos_complement_of+1,irobot_move@moveSpeed+1
  8040                           
  8041                           ;iRobotSerial.c: 222: moveTurnRadius = twos_complement_of(moveTurnRadius);
  8042  01437A  C072  F060         	movff	irobot_move@moveTurnRadius,twos_complement_of@complementValue
  8043  01437E  C073  F061         	movff	irobot_move@moveTurnRadius+1,twos_complement_of@complementValue+1
  8044  014382  ECFF  F0AD         	call	_twos_complement_of	;wreg free
  8045  014386  C060  F072         	movff	?_twos_complement_of,irobot_move@moveTurnRadius
  8046  01438A  C061  F073         	movff	?_twos_complement_of+1,irobot_move@moveTurnRadius+1
  8047                           
  8048                           ;iRobotSerial.c: 224: if (isScript) {
  8049  01438E  0100               	movlb	0	; () banked
  8050  014390  5178               	movf	irobot_move@isScript& (0+255),w,b
  8051  014392  0100               	movlb	0	; () banked
  8052  014394  B4D8               	btfsc	status,2,c
  8053  014396  D029               	goto	l2135
  8054                           
  8055                           ; BSR set to: 0
  8056                           ;iRobotSerial.c: 225: load_iRScriptStack(5, iR_DRIVE,
  8057                           ;iRobotSerial.c: 226: (((moveSpeed)>>8) & 0xFF), ((moveSpeed) & 0xFF),
  8058                           ;iRobotSerial.c: 227: (((moveTurnRadius)>>8) & 0xFF), ((moveTurnRadius) & 0xFF));
  8059  014398  0E00               	movlw	0
  8060  01439A  0100               	movlb	0	; () banked
  8061  01439C  6F61               	movwf	(?_load_iRScriptStack+1)& (0+255),b
  8062  01439E  0E89               	movlw	137
  8063  0143A0  6F60               	movwf	?_load_iRScriptStack& (0+255),b
  8064  0143A2  C071  F074         	movff	irobot_move@moveSpeed+1,??_irobot_move
  8065  0143A6  0100               	movlb	0	; () banked
  8066  0143A8  6B75               	clrf	(??_irobot_move+1)& (0+255),b
  8067  0143AA  BF74               	btfsc	??_irobot_move& (0+255),7,b
  8068  0143AC  6975               	setf	(??_irobot_move+1)& (0+255),b
  8069  0143AE  0100               	movlb	0	; () banked
  8070  0143B0  5174               	movf	??_irobot_move& (0+255),w,b
  8071  0143B2  0100               	movlb	0	; () banked
  8072  0143B4  6F62               	movwf	(?_load_iRScriptStack+2)& (0+255),b
  8073  0143B6  6B63               	clrf	(?_load_iRScriptStack+3)& (0+255),b
  8074  0143B8  0100               	movlb	0	; () banked
  8075  0143BA  5170               	movf	irobot_move@moveSpeed& (0+255),w,b
  8076  0143BC  0100               	movlb	0	; () banked
  8077  0143BE  6F64               	movwf	(?_load_iRScriptStack+4)& (0+255),b
  8078  0143C0  6B65               	clrf	(?_load_iRScriptStack+5)& (0+255),b
  8079  0143C2  C073  F076         	movff	irobot_move@moveTurnRadius+1,??_irobot_move+2
  8080  0143C6  0100               	movlb	0	; () banked
  8081  0143C8  6B77               	clrf	(??_irobot_move+3)& (0+255),b
  8082  0143CA  BF76               	btfsc	(??_irobot_move+2)& (0+255),7,b
  8083  0143CC  6977               	setf	(??_irobot_move+3)& (0+255),b
  8084  0143CE  0100               	movlb	0	; () banked
  8085  0143D0  5176               	movf	(??_irobot_move+2)& (0+255),w,b
  8086  0143D2  0100               	movlb	0	; () banked
  8087  0143D4  6F66               	movwf	(?_load_iRScriptStack+6)& (0+255),b
  8088  0143D6  6B67               	clrf	(?_load_iRScriptStack+7)& (0+255),b
  8089  0143D8  0100               	movlb	0	; () banked
  8090  0143DA  5172               	movf	irobot_move@moveTurnRadius& (0+255),w,b
  8091  0143DC  0100               	movlb	0	; () banked
  8092  0143DE  6F68               	movwf	(?_load_iRScriptStack+8)& (0+255),b
  8093  0143E0  6B69               	clrf	(?_load_iRScriptStack+9)& (0+255),b
  8094  0143E2  0E05               	movlw	5
  8095  0143E4  ECF1  F0A9         	call	_load_iRScriptStack
  8096                           
  8097                           ;iRobotSerial.c: 228: }
  8098  0143E8  0012               	return	
  8099  0143EA                     l2135:
  8100                           
  8101                           ;iRobotSerial.c: 229: else{
  8102                           ;iRobotSerial.c: 230: eusart_putch(iR_DRIVE);
  8103  0143EA  0E89               	movlw	137
  8104  0143EC  EC15  F0B2         	call	_eusart_putch
  8105                           
  8106                           ;iRobotSerial.c: 231: eusart_putch((((moveSpeed)>>8) & 0xFF));
  8107  0143F0  0100               	movlb	0	; () banked
  8108  0143F2  5171               	movf	(irobot_move@moveSpeed+1)& (0+255),w,b
  8109  0143F4  EC15  F0B2         	call	_eusart_putch
  8110                           
  8111                           ;iRobotSerial.c: 232: eusart_putch(((moveSpeed) & 0xFF));
  8112  0143F8  0100               	movlb	0	; () banked
  8113  0143FA  5170               	movf	irobot_move@moveSpeed& (0+255),w,b
  8114  0143FC  EC15  F0B2         	call	_eusart_putch
  8115                           
  8116                           ;iRobotSerial.c: 233: eusart_putch((((moveTurnRadius)>>8) & 0xFF));
  8117  014400  0100               	movlb	0	; () banked
  8118  014402  5173               	movf	(irobot_move@moveTurnRadius+1)& (0+255),w,b
  8119  014404  EC15  F0B2         	call	_eusart_putch
  8120                           
  8121                           ;iRobotSerial.c: 234: eusart_putch(((moveTurnRadius) & 0xFF));
  8122  014408  0100               	movlb	0	; () banked
  8123  01440A  5172               	movf	irobot_move@moveTurnRadius& (0+255),w,b
  8124  01440C  EC15  F0B2         	call	_eusart_putch
  8125  014410  0012               	return	
  8126  014412                     __end_of_irobot_move:
  8127                           	opt stack 0
  8128                           tosu	equ	0xFFF
  8129                           tosh	equ	0xFFE
  8130                           tosl	equ	0xFFD
  8131                           pclath	equ	0xFFA
  8132                           tblptru	equ	0xFF8
  8133                           tblptrh	equ	0xFF7
  8134                           tblptrl	equ	0xFF6
  8135                           tablat	equ	0xFF5
  8136                           prodh	equ	0xFF4
  8137                           prodl	equ	0xFF3
  8138                           postinc0	equ	0xFEE
  8139                           wreg	equ	0xFE8
  8140                           postdec1	equ	0xFE5
  8141                           fsr1h	equ	0xFE2
  8142                           fsr1l	equ	0xFE1
  8143                           indf2	equ	0xFDF
  8144                           postinc2	equ	0xFDE
  8145                           postdec2	equ	0xFDD
  8146                           fsr2h	equ	0xFDA
  8147                           fsr2l	equ	0xFD9
  8148                           status	equ	0xFD8
  8149                           
  8150 ;; *************** function _twos_complement_of *****************
  8151 ;; Defined at:
  8152 ;;		line 167 in file "Library/iRobotSerial.c"
  8153 ;; Parameters:    Size  Location     Type
  8154 ;;  complementVa    2    0[BANK0 ] short 
  8155 ;; Auto vars:     Size  Location     Type
  8156 ;;		None
  8157 ;; Return value:  Size  Location     Type
  8158 ;;                  2    0[BANK0 ] unsigned short 
  8159 ;; Registers used:
  8160 ;;		wreg, status,2, status,0
  8161 ;; Tracked objects:
  8162 ;;		On entry : 0/0
  8163 ;;		On exit  : 0/0
  8164 ;;		Unchanged: 0/0
  8165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8166 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8169 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8170 ;;Total ram usage:        2 bytes
  8171 ;; Hardware stack levels used:    1
  8172 ;; Hardware stack levels required when called:    7
  8173 ;; This function calls:
  8174 ;;		Nothing
  8175 ;; This function is called by:
  8176 ;;		_irobot_move
  8177 ;;		_irobot_angle_wait
  8178 ;;		_irobot_distance_wait
  8179 ;; This function uses a non-reentrant model
  8180 ;;
  8181                           
  8182                           	psect	text27
  8183  015BFE                     __ptext27:
  8184                           	opt stack 0
  8185  015BFE                     _twos_complement_of:
  8186                           	opt stack 20
  8187                           
  8188                           ;iRobotSerial.c: 168: if (complementValue < 0) {
  8189                           
  8190                           ;incstack = 0
  8191  015BFE  0100               	movlb	0	; () banked
  8192  015C00  AF61               	btfss	(twos_complement_of@complementValue+1)& (0+255),7,b
  8193  015C02  D01A               	goto	l2106
  8194                           
  8195                           ; BSR set to: 0
  8196                           ;iRobotSerial.c: 169: complementValue = ((complementValue) > 0 ? (complementValue) : -(c
      +                          omplementValue));
  8197  015C04  0100               	movlb	0	; () banked
  8198  015C06  BF61               	btfsc	(twos_complement_of@complementValue+1)& (0+255),7,b
  8199  015C08  D007               	goto	u9600
  8200  015C0A  0100               	movlb	0	; () banked
  8201  015C0C  5161               	movf	(twos_complement_of@complementValue+1)& (0+255),w,b
  8202  015C0E  E10A               	bnz	l2108
  8203  015C10  0100               	movlb	0	; () banked
  8204  015C12  0560               	decf	twos_complement_of@complementValue& (0+255),w,b
  8205  015C14  B0D8               	btfsc	status,0,c
  8206  015C16  D006               	goto	l2108
  8207  015C18                     u9600:
  8208                           
  8209                           ; BSR set to: 0
  8210  015C18  0100               	movlb	0	; () banked
  8211  015C1A  6D60               	negf	twos_complement_of@complementValue& (0+255),b
  8212  015C1C  1F61               	comf	(twos_complement_of@complementValue+1)& (0+255),f,b
  8213  015C1E  B0D8               	btfsc	status,0,c
  8214  015C20  2B61               	incf	(twos_complement_of@complementValue+1)& (0+255),f,b
  8215  015C22  D004               	goto	l2110
  8216  015C24                     l2108:
  8217                           
  8218                           ; BSR set to: 0
  8219  015C24  C060  F060         	movff	twos_complement_of@complementValue,twos_complement_of@complementValue
  8220  015C28  C061  F061         	movff	twos_complement_of@complementValue+1,twos_complement_of@complementValue+1
  8221  015C2C                     l2110:
  8222                           
  8223                           ; BSR set to: 0
  8224                           ;iRobotSerial.c: 170: complementValue = ~complementValue;
  8225                           
  8226                           ; BSR set to: 0
  8227  015C2C  0100               	movlb	0	; () banked
  8228  015C2E  1F60               	comf	twos_complement_of@complementValue& (0+255),f,b
  8229  015C30  1F61               	comf	(twos_complement_of@complementValue+1)& (0+255),f,b
  8230                           
  8231                           ;iRobotSerial.c: 171: complementValue += 1;
  8232  015C32  0100               	movlb	0	; () banked
  8233  015C34  4B60               	infsnz	twos_complement_of@complementValue& (0+255),f,b
  8234  015C36  2B61               	incf	(twos_complement_of@complementValue+1)& (0+255),f,b
  8235  015C38                     l2106:
  8236                           
  8237                           ; BSR set to: 0
  8238                           ;iRobotSerial.c: 172: }
  8239                           ;iRobotSerial.c: 173: return complementValue;
  8240                           
  8241                           ; BSR set to: 0
  8242  015C38  C060  F060         	movff	twos_complement_of@complementValue,?_twos_complement_of
  8243  015C3C  C061  F061         	movff	twos_complement_of@complementValue+1,?_twos_complement_of+1
  8244  015C40  0012               	return	
  8245  015C42                     __end_of_twos_complement_of:
  8246                           	opt stack 0
  8247                           tosu	equ	0xFFF
  8248                           tosh	equ	0xFFE
  8249                           tosl	equ	0xFFD
  8250                           pclath	equ	0xFFA
  8251                           tblptru	equ	0xFF8
  8252                           tblptrh	equ	0xFF7
  8253                           tblptrl	equ	0xFF6
  8254                           tablat	equ	0xFF5
  8255                           prodh	equ	0xFF4
  8256                           prodl	equ	0xFF3
  8257                           postinc0	equ	0xFEE
  8258                           wreg	equ	0xFE8
  8259                           postdec1	equ	0xFE5
  8260                           fsr1h	equ	0xFE2
  8261                           fsr1l	equ	0xFE1
  8262                           indf2	equ	0xFDF
  8263                           postinc2	equ	0xFDE
  8264                           postdec2	equ	0xFDD
  8265                           fsr2h	equ	0xFDA
  8266                           fsr2l	equ	0xFD9
  8267                           status	equ	0xFD8
  8268                           
  8269 ;; *************** function _irobot_song_play *****************
  8270 ;; Defined at:
  8271 ;;		line 274 in file "Library/iRobotSerial.c"
  8272 ;; Parameters:    Size  Location     Type
  8273 ;;  songNumber      1    wreg     unsigned char 
  8274 ;; Auto vars:     Size  Location     Type
  8275 ;;  songNumber      1    1[BANK0 ] unsigned char 
  8276 ;; Return value:  Size  Location     Type
  8277 ;;                  1    wreg      void 
  8278 ;; Registers used:
  8279 ;;		wreg, status,2, cstack
  8280 ;; Tracked objects:
  8281 ;;		On entry : 0/0
  8282 ;;		On exit  : 0/0
  8283 ;;		Unchanged: 0/0
  8284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8286 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8288 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8289 ;;Total ram usage:        1 bytes
  8290 ;; Hardware stack levels used:    1
  8291 ;; Hardware stack levels required when called:    8
  8292 ;; This function calls:
  8293 ;;		_eusart_putch
  8294 ;; This function is called by:
  8295 ;;		_mode1
  8296 ;;		_mode2
  8297 ;;		_mode4
  8298 ;; This function uses a non-reentrant model
  8299 ;;
  8300                           
  8301                           	psect	text28
  8302  0163B0                     __ptext28:
  8303                           	opt stack 0
  8304  0163B0                     _irobot_song_play:
  8305                           	opt stack 21
  8306                           
  8307                           ; BSR set to: 0
  8308                           ;incstack = 0
  8309                           ;irobot_song_play@songNumber stored from wreg
  8310  0163B0  0100               	movlb	0	; () banked
  8311  0163B2  6F61               	movwf	irobot_song_play@songNumber& (0+255),b
  8312                           
  8313                           ;iRobotSerial.c: 275: eusart_putch(iR_SONG_PLAY);
  8314  0163B4  0E8D               	movlw	141
  8315  0163B6  EC15  F0B2         	call	_eusart_putch
  8316                           
  8317                           ;iRobotSerial.c: 276: eusart_putch(songNumber);
  8318  0163BA  0100               	movlb	0	; () banked
  8319  0163BC  5161               	movf	irobot_song_play@songNumber& (0+255),w,b
  8320  0163BE  EC15  F0B2         	call	_eusart_putch
  8321  0163C2  0012               	return		;funcret
  8322  0163C4                     __end_of_irobot_song_play:
  8323                           	opt stack 0
  8324                           tosu	equ	0xFFF
  8325                           tosh	equ	0xFFE
  8326                           tosl	equ	0xFFD
  8327                           pclath	equ	0xFFA
  8328                           tblptru	equ	0xFF8
  8329                           tblptrh	equ	0xFF7
  8330                           tblptrl	equ	0xFF6
  8331                           tablat	equ	0xFF5
  8332                           prodh	equ	0xFF4
  8333                           prodl	equ	0xFF3
  8334                           postinc0	equ	0xFEE
  8335                           wreg	equ	0xFE8
  8336                           postdec1	equ	0xFE5
  8337                           fsr1h	equ	0xFE2
  8338                           fsr1l	equ	0xFE1
  8339                           indf2	equ	0xFDF
  8340                           postinc2	equ	0xFDE
  8341                           postdec2	equ	0xFDD
  8342                           fsr2h	equ	0xFDA
  8343                           fsr2l	equ	0xFD9
  8344                           status	equ	0xFD8
  8345                           
  8346 ;; *************** function ___fltol *****************
  8347 ;; Defined at:
  8348 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fltol.c"
  8349 ;; Parameters:    Size  Location     Type
  8350 ;;  f1              4   82[BANK0 ] void 
  8351 ;; Auto vars:     Size  Location     Type
  8352 ;;  exp1            1   87[BANK0 ] unsigned char 
  8353 ;;  sign1           1   86[BANK0 ] unsigned char 
  8354 ;; Return value:  Size  Location     Type
  8355 ;;                  4   82[BANK0 ] long 
  8356 ;; Registers used:
  8357 ;;		wreg, status,2, status,0
  8358 ;; Tracked objects:
  8359 ;;		On entry : 0/0
  8360 ;;		On exit  : 0/0
  8361 ;;		Unchanged: 0/0
  8362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8363 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8364 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8365 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8366 ;;      Totals:         0       6       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8367 ;;Total ram usage:       10 bytes
  8368 ;; Hardware stack levels used:    1
  8369 ;; Hardware stack levels required when called:    7
  8370 ;; This function calls:
  8371 ;;		Nothing
  8372 ;; This function is called by:
  8373 ;;		_mode1
  8374 ;;		_mode4
  8375 ;; This function uses a non-reentrant model
  8376 ;;
  8377                           
  8378                           	psect	text29
  8379  0137CC                     __ptext29:
  8380                           	opt stack 0
  8381  0137CC                     ___fltol:
  8382                           	opt stack 22
  8383                           
  8384                           ;incstack = 0
  8385  0137CC  0100               	movlb	0	; () banked
  8386  0137CE  35B4               	rlcf	(___fltol@f1+2)& (0+255),w,b
  8387  0137D0  35B5               	rlcf	(___fltol@f1+3)& (0+255),w,b
  8388  0137D2  0100               	movlb	0	; () banked
  8389  0137D4  6FB7               	movwf	___fltol@exp1& (0+255),b
  8390  0137D6  0100               	movlb	0	; () banked
  8391  0137D8  51B7               	movf	___fltol@exp1& (0+255),w,b
  8392  0137DA  A4D8               	btfss	status,2,c
  8393  0137DC  D00A               	goto	l2661
  8394                           
  8395                           ; BSR set to: 0
  8396  0137DE  0E00               	movlw	0
  8397  0137E0  0100               	movlb	0	; () banked
  8398  0137E2  6FB2               	movwf	?___fltol& (0+255),b
  8399  0137E4  0E00               	movlw	0
  8400  0137E6  6FB3               	movwf	(?___fltol+1)& (0+255),b
  8401  0137E8  0E00               	movlw	0
  8402  0137EA  6FB4               	movwf	(?___fltol+2)& (0+255),b
  8403  0137EC  0E00               	movlw	0
  8404  0137EE  6FB5               	movwf	(?___fltol+3)& (0+255),b
  8405                           
  8406                           ; BSR set to: 0
  8407  0137F0  0012               	return	
  8408  0137F2                     l2661:
  8409                           
  8410                           ; BSR set to: 0
  8411                           
  8412                           ; BSR set to: 0
  8413  0137F2  C0B2  F100         	movff	___fltol@f1,??___fltol
  8414  0137F6  C0B3  F101         	movff	___fltol@f1+1,??___fltol+1
  8415  0137FA  C0B4  F102         	movff	___fltol@f1+2,??___fltol+2
  8416  0137FE  C0B5  F103         	movff	___fltol@f1+3,??___fltol+3
  8417  013802  0E20               	movlw	32
  8418  013804  D006               	goto	u11100
  8419  013806                     u11105:
  8420  013806  0101               	movlb	1	; () banked
  8421  013808  90D8               	bcf	status,0,c
  8422  01380A  3303               	rrcf	(??___fltol+3)& (0+255),f,b
  8423  01380C  3302               	rrcf	(??___fltol+2)& (0+255),f,b
  8424  01380E  3301               	rrcf	(??___fltol+1)& (0+255),f,b
  8425  013810  3300               	rrcf	??___fltol& (0+255),f,b
  8426  013812                     u11100:
  8427  013812  2EE8               	decfsz	wreg,f,c
  8428  013814  D7F8               	goto	u11105
  8429  013816  0101               	movlb	1	; () banked
  8430  013818  5100               	movf	??___fltol& (0+255),w,b
  8431  01381A  0100               	movlb	0	; () banked
  8432  01381C  6FB6               	movwf	___fltol@sign1& (0+255),b
  8433                           
  8434                           ; BSR set to: 0
  8435  01381E  0100               	movlb	0	; () banked
  8436  013820  8FB4               	bsf	(___fltol@f1+2)& (0+255),7,b
  8437                           
  8438                           ; BSR set to: 0
  8439  013822  0EFF               	movlw	255
  8440  013824  0100               	movlb	0	; () banked
  8441  013826  17B2               	andwf	___fltol@f1& (0+255),f,b
  8442  013828  0EFF               	movlw	255
  8443  01382A  17B3               	andwf	(___fltol@f1+1)& (0+255),f,b
  8444  01382C  0EFF               	movlw	255
  8445  01382E  17B4               	andwf	(___fltol@f1+2)& (0+255),f,b
  8446  013830  0E00               	movlw	0
  8447  013832  17B5               	andwf	(___fltol@f1+3)& (0+255),f,b
  8448                           
  8449                           ; BSR set to: 0
  8450  013834  0E96               	movlw	150
  8451  013836  0100               	movlb	0	; () banked
  8452  013838  5FB7               	subwf	___fltol@exp1& (0+255),f,b
  8453                           
  8454                           ; BSR set to: 0
  8455  01383A  0100               	movlb	0	; () banked
  8456  01383C  AFB7               	btfss	___fltol@exp1& (0+255),7,b
  8457  01383E  D01A               	goto	l2663
  8458                           
  8459                           ; BSR set to: 0
  8460  013840  0100               	movlb	0	; () banked
  8461  013842  51B7               	movf	___fltol@exp1& (0+255),w,b
  8462  013844  0A80               	xorlw	128
  8463  013846  0F97               	addlw	151
  8464  013848  B0D8               	btfsc	status,0,c
  8465  01384A  D00A               	goto	l2664
  8466                           
  8467                           ; BSR set to: 0
  8468  01384C  0E00               	movlw	0
  8469  01384E  0100               	movlb	0	; () banked
  8470  013850  6FB2               	movwf	?___fltol& (0+255),b
  8471  013852  0E00               	movlw	0
  8472  013854  6FB3               	movwf	(?___fltol+1)& (0+255),b
  8473  013856  0E00               	movlw	0
  8474  013858  6FB4               	movwf	(?___fltol+2)& (0+255),b
  8475  01385A  0E00               	movlw	0
  8476  01385C  6FB5               	movwf	(?___fltol+3)& (0+255),b
  8477                           
  8478                           ; BSR set to: 0
  8479  01385E  0012               	return	
  8480  013860                     l2664:
  8481                           
  8482                           ; BSR set to: 0
  8483                           
  8484                           ; BSR set to: 0
  8485                           
  8486                           ; BSR set to: 0
  8487  013860  0100               	movlb	0	; () banked
  8488  013862  90D8               	bcf	status,0,c
  8489  013864  33B5               	rrcf	(___fltol@f1+3)& (0+255),f,b
  8490  013866  33B4               	rrcf	(___fltol@f1+2)& (0+255),f,b
  8491  013868  33B3               	rrcf	(___fltol@f1+1)& (0+255),f,b
  8492  01386A  33B2               	rrcf	___fltol@f1& (0+255),f,b
  8493                           
  8494                           ; BSR set to: 0
  8495  01386C  0100               	movlb	0	; () banked
  8496  01386E  3FB7               	incfsz	___fltol@exp1& (0+255),f,b
  8497  013870  D7F7               	goto	l2664
  8498                           
  8499                           ; BSR set to: 0
  8500  013872  D01B               	goto	u11140
  8501  013874                     l2663:
  8502                           
  8503                           ; BSR set to: 0
  8504                           
  8505                           ; BSR set to: 0
  8506  013874  0E1F               	movlw	31
  8507  013876  0100               	movlb	0	; () banked
  8508  013878  65B7               	cpfsgt	___fltol@exp1& (0+255),b
  8509  01387A  D012               	goto	l2669
  8510                           
  8511                           ; BSR set to: 0
  8512  01387C  0E00               	movlw	0
  8513  01387E  0100               	movlb	0	; () banked
  8514  013880  6FB2               	movwf	?___fltol& (0+255),b
  8515  013882  0E00               	movlw	0
  8516  013884  6FB3               	movwf	(?___fltol+1)& (0+255),b
  8517  013886  0E00               	movlw	0
  8518  013888  6FB4               	movwf	(?___fltol+2)& (0+255),b
  8519  01388A  0E00               	movlw	0
  8520  01388C  6FB5               	movwf	(?___fltol+3)& (0+255),b
  8521                           
  8522                           ; BSR set to: 0
  8523  01388E  0012               	return	
  8524  013890                     
  8525                           ; BSR set to: 0
  8526                           
  8527                           ; BSR set to: 0
  8528  013890  0100               	movlb	0	; () banked
  8529  013892  90D8               	bcf	status,0,c
  8530  013894  37B2               	rlcf	___fltol@f1& (0+255),f,b
  8531  013896  37B3               	rlcf	(___fltol@f1+1)& (0+255),f,b
  8532  013898  37B4               	rlcf	(___fltol@f1+2)& (0+255),f,b
  8533  01389A  37B5               	rlcf	(___fltol@f1+3)& (0+255),f,b
  8534  01389C  0100               	movlb	0	; () banked
  8535  01389E  07B7               	decf	___fltol@exp1& (0+255),f,b
  8536  0138A0                     l2669:
  8537                           
  8538                           ; BSR set to: 0
  8539                           
  8540                           ; BSR set to: 0
  8541  0138A0  0100               	movlb	0	; () banked
  8542  0138A2  51B7               	movf	___fltol@exp1& (0+255),w,b
  8543  0138A4  0100               	movlb	0	; () banked
  8544  0138A6  A4D8               	btfss	status,2,c
  8545  0138A8  D7F3               	goto	l2670
  8546  0138AA                     u11140:
  8547                           
  8548                           ; BSR set to: 0
  8549                           
  8550                           ; BSR set to: 0
  8551                           
  8552                           ; BSR set to: 0
  8553  0138AA  0100               	movlb	0	; () banked
  8554  0138AC  51B6               	movf	___fltol@sign1& (0+255),w,b
  8555  0138AE  0100               	movlb	0	; () banked
  8556  0138B0  B4D8               	btfsc	status,2,c
  8557  0138B2  D009               	goto	l2672
  8558                           
  8559                           ; BSR set to: 0
  8560  0138B4  0100               	movlb	0	; () banked
  8561  0138B6  1FB5               	comf	(___fltol@f1+3)& (0+255),f,b
  8562  0138B8  1FB4               	comf	(___fltol@f1+2)& (0+255),f,b
  8563  0138BA  1FB3               	comf	(___fltol@f1+1)& (0+255),f,b
  8564  0138BC  6DB2               	negf	___fltol@f1& (0+255),b
  8565  0138BE  0E00               	movlw	0
  8566  0138C0  23B3               	addwfc	(___fltol@f1+1)& (0+255),f,b
  8567  0138C2  23B4               	addwfc	(___fltol@f1+2)& (0+255),f,b
  8568  0138C4  23B5               	addwfc	(___fltol@f1+3)& (0+255),f,b
  8569  0138C6                     l2672:
  8570                           
  8571                           ; BSR set to: 0
  8572                           
  8573                           ; BSR set to: 0
  8574  0138C6  C0B2  F0B2         	movff	___fltol@f1,?___fltol
  8575  0138CA  C0B3  F0B3         	movff	___fltol@f1+1,?___fltol+1
  8576  0138CE  C0B4  F0B4         	movff	___fltol@f1+2,?___fltol+2
  8577  0138D2  C0B5  F0B5         	movff	___fltol@f1+3,?___fltol+3
  8578  0138D6  0012               	return	
  8579  0138D8                     __end_of___fltol:
  8580                           	opt stack 0
  8581                           tosu	equ	0xFFF
  8582                           tosh	equ	0xFFE
  8583                           tosl	equ	0xFFD
  8584                           pclath	equ	0xFFA
  8585                           tblptru	equ	0xFF8
  8586                           tblptrh	equ	0xFF7
  8587                           tblptrl	equ	0xFF6
  8588                           tablat	equ	0xFF5
  8589                           prodh	equ	0xFF4
  8590                           prodl	equ	0xFF3
  8591                           postinc0	equ	0xFEE
  8592                           wreg	equ	0xFE8
  8593                           postdec1	equ	0xFE5
  8594                           fsr1h	equ	0xFE2
  8595                           fsr1l	equ	0xFE1
  8596                           indf2	equ	0xFDF
  8597                           postinc2	equ	0xFDE
  8598                           postdec2	equ	0xFDD
  8599                           fsr2h	equ	0xFDA
  8600                           fsr2l	equ	0xFD9
  8601                           status	equ	0xFD8
  8602                           
  8603 ;; *************** function _Motor_Speed *****************
  8604 ;; Defined at:
  8605 ;;		line 117 in file "Library/Motor.c"
  8606 ;; Parameters:    Size  Location     Type
  8607 ;;  pMotor          2   27[BANK0 ] PTR struct Motor
  8608 ;;		 -> Stepper(6), 
  8609 ;;  pFrequency      2   29[BANK0 ] unsigned short 
  8610 ;; Auto vars:     Size  Location     Type
  8611 ;;		None
  8612 ;; Return value:  Size  Location     Type
  8613 ;;                  1    wreg      unsigned char 
  8614 ;; Registers used:
  8615 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8616 ;; Tracked objects:
  8617 ;;		On entry : 0/0
  8618 ;;		On exit  : 0/0
  8619 ;;		Unchanged: 0/0
  8620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8621 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8624 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8625 ;;Total ram usage:        4 bytes
  8626 ;; Hardware stack levels used:    1
  8627 ;; Hardware stack levels required when called:    9
  8628 ;; This function calls:
  8629 ;;		_Timer0_Init
  8630 ;; This function is called by:
  8631 ;;		_mode1
  8632 ;;		_mode4
  8633 ;; This function uses a non-reentrant model
  8634 ;;
  8635                           
  8636                           	psect	text30
  8637  01606A                     __ptext30:
  8638                           	opt stack 0
  8639  01606A                     _Motor_Speed:
  8640                           	opt stack 20
  8641                           
  8642                           ;Motor.c: 119: pMotor->mFrequency = pFrequency;
  8643                           
  8644                           ; BSR set to: 0
  8645                           ;incstack = 0
  8646  01606A  0100               	movlb	0	; () banked
  8647  01606C  EE20 F002          	lfsr	2,2
  8648  016070  517B               	movf	Motor_Speed@pMotor& (0+255),w,b
  8649  016072  26D9               	addwf	fsr2l,f,c
  8650  016074  517C               	movf	(Motor_Speed@pMotor+1)& (0+255),w,b
  8651  016076  22DA               	addwfc	fsr2h,f,c
  8652  016078  C07D  FFDE         	movff	Motor_Speed@pFrequency,postinc2
  8653  01607C  C07E  FFDD         	movff	Motor_Speed@pFrequency+1,postdec2
  8654                           
  8655                           ; BSR set to: 0
  8656                           ;Motor.c: 120: Timer0_Init(pFrequency);
  8657  016080  C07D  F06D         	movff	Motor_Speed@pFrequency,Timer0_Init@pFrequency
  8658  016084  C07E  F06E         	movff	Motor_Speed@pFrequency+1,Timer0_Init@pFrequency+1
  8659  016088  0100               	movlb	0	; () banked
  8660  01608A  6B6F               	clrf	(Timer0_Init@pFrequency+2)& (0+255),b
  8661  01608C  6B70               	clrf	(Timer0_Init@pFrequency+3)& (0+255),b
  8662  01608E  EC99  F098         	call	_Timer0_Init	;wreg free
  8663  016092  0012               	return	
  8664  016094                     __end_of_Motor_Speed:
  8665                           	opt stack 0
  8666                           tosu	equ	0xFFF
  8667                           tosh	equ	0xFFE
  8668                           tosl	equ	0xFFD
  8669                           pclath	equ	0xFFA
  8670                           tblptru	equ	0xFF8
  8671                           tblptrh	equ	0xFF7
  8672                           tblptrl	equ	0xFF6
  8673                           tablat	equ	0xFF5
  8674                           prodh	equ	0xFF4
  8675                           prodl	equ	0xFF3
  8676                           postinc0	equ	0xFEE
  8677                           wreg	equ	0xFE8
  8678                           postdec1	equ	0xFE5
  8679                           fsr1h	equ	0xFE2
  8680                           fsr1l	equ	0xFE1
  8681                           indf2	equ	0xFDF
  8682                           postinc2	equ	0xFDE
  8683                           postdec2	equ	0xFDD
  8684                           fsr2h	equ	0xFDA
  8685                           fsr2l	equ	0xFD9
  8686                           status	equ	0xFD8
  8687                           
  8688 ;; *************** function _Motor_Move *****************
  8689 ;; Defined at:
  8690 ;;		line 51 in file "Library/Motor.c"
  8691 ;; Parameters:    Size  Location     Type
  8692 ;;  pMotor          2    3[BANK0 ] PTR struct Motor
  8693 ;;		 -> Stepper(6), 
  8694 ;;  pDelta          2    5[BANK0 ] short 
  8695 ;; Auto vars:     Size  Location     Type
  8696 ;;		None
  8697 ;; Return value:  Size  Location     Type
  8698 ;;                  1    wreg      unsigned char 
  8699 ;; Registers used:
  8700 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8701 ;; Tracked objects:
  8702 ;;		On entry : 0/0
  8703 ;;		On exit  : 0/0
  8704 ;;		Unchanged: 0/0
  8705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8706 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8708 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8709 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8710 ;;Total ram usage:        6 bytes
  8711 ;; Hardware stack levels used:    1
  8712 ;; Hardware stack levels required when called:    8
  8713 ;; This function calls:
  8714 ;;		_Timer0_Start
  8715 ;; This function is called by:
  8716 ;;		_mode1
  8717 ;;		_mode4
  8718 ;; This function uses a non-reentrant model
  8719 ;;
  8720                           
  8721                           	psect	text31
  8722  015E72                     __ptext31:
  8723                           	opt stack 0
  8724  015E72                     _Motor_Move:
  8725                           	opt stack 21
  8726                           
  8727                           ;Motor.c: 54: lMotor = pMotor;
  8728                           
  8729                           ;incstack = 0
  8730  015E72  C063  F0D8         	movff	Motor_Move@pMotor,_lMotor
  8731  015E76  C064  F0D9         	movff	Motor_Move@pMotor+1,_lMotor+1
  8732                           
  8733                           ;Motor.c: 58: if (pMotor->mDelta != 0)
  8734  015E7A  C063  FFD9         	movff	Motor_Move@pMotor,fsr2l
  8735  015E7E  C064  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
  8736  015E82  50DE               	movf	postinc2,w,c
  8737  015E84  10DE               	iorwf	postinc2,w,c
  8738  015E86  A4D8               	btfss	status,2,c
  8739  015E88  0012               	return	
  8740                           
  8741                           ;Motor.c: 63: pMotor->mDelta = pDelta;
  8742                           
  8743                           ;Motor.c: 59: return 0;
  8744                           ;	Return value of _Motor_Move is never used
  8745  015E8A  C063  FFD9         	movff	Motor_Move@pMotor,fsr2l
  8746  015E8E  C064  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
  8747  015E92  C065  FFDE         	movff	Motor_Move@pDelta,postinc2
  8748  015E96  C066  FFDD         	movff	Motor_Move@pDelta+1,postdec2
  8749                           
  8750                           ;Motor.c: 67: Timer0_Start(lStepFunction);
  8751  015E9A  C0BF  F060         	movff	_lStepFunction,Timer0_Start@pFunction
  8752  015E9E  C0C0  F061         	movff	_lStepFunction+1,Timer0_Start@pFunction+1
  8753  015EA2  C0C1  F062         	movff	_lStepFunction+2,Timer0_Start@pFunction+2
  8754  015EA6  EC73  F0B0         	call	_Timer0_Start	;wreg free
  8755  015EAA  0012               	return	
  8756  015EAC                     __end_of_Motor_Move:
  8757                           	opt stack 0
  8758                           tosu	equ	0xFFF
  8759                           tosh	equ	0xFFE
  8760                           tosl	equ	0xFFD
  8761                           pclath	equ	0xFFA
  8762                           tblptru	equ	0xFF8
  8763                           tblptrh	equ	0xFF7
  8764                           tblptrl	equ	0xFF6
  8765                           tablat	equ	0xFF5
  8766                           prodh	equ	0xFF4
  8767                           prodl	equ	0xFF3
  8768                           postinc0	equ	0xFEE
  8769                           wreg	equ	0xFE8
  8770                           postdec1	equ	0xFE5
  8771                           fsr1h	equ	0xFE2
  8772                           fsr1l	equ	0xFE1
  8773                           indf2	equ	0xFDF
  8774                           postinc2	equ	0xFDE
  8775                           postdec2	equ	0xFDD
  8776                           fsr2h	equ	0xFDA
  8777                           fsr2l	equ	0xFD9
  8778                           status	equ	0xFD8
  8779                           
  8780 ;; *************** function _Timer0_Start *****************
  8781 ;; Defined at:
  8782 ;;		line 75 in file "Library/Timer0.c"
  8783 ;; Parameters:    Size  Location     Type
  8784 ;;  pFunction       3    0[BANK0 ] PTR FTN()void 
  8785 ;;		 -> Absolute function(1), Motor_Step(1), 
  8786 ;; Auto vars:     Size  Location     Type
  8787 ;;		None
  8788 ;; Return value:  Size  Location     Type
  8789 ;;                  1    wreg      void 
  8790 ;; Registers used:
  8791 ;;		wreg, status,2, status,0
  8792 ;; Tracked objects:
  8793 ;;		On entry : 0/0
  8794 ;;		On exit  : 0/0
  8795 ;;		Unchanged: 0/0
  8796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8797 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8800 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8801 ;;Total ram usage:        3 bytes
  8802 ;; Hardware stack levels used:    1
  8803 ;; Hardware stack levels required when called:    7
  8804 ;; This function calls:
  8805 ;;		Nothing
  8806 ;; This function is called by:
  8807 ;;		_Motor_Move
  8808 ;; This function uses a non-reentrant model
  8809 ;;
  8810                           
  8811                           	psect	text32
  8812  0160E6                     __ptext32:
  8813                           	opt stack 0
  8814  0160E6                     _Timer0_Start:
  8815                           	opt stack 21
  8816                           
  8817                           ;Timer0.c: 77: gISR = pFunction;
  8818                           
  8819                           ;incstack = 0
  8820  0160E6  C060  F0B9         	movff	Timer0_Start@pFunction,_gISR
  8821  0160EA  C061  F0BA         	movff	Timer0_Start@pFunction+1,_gISR+1
  8822  0160EE  C062  F0BB         	movff	Timer0_Start@pFunction+2,_gISR+2
  8823                           
  8824                           ;Timer0.c: 78: TMR0 = COUNTER;
  8825  0160F2  C029  FFD6         	movff	_COUNTER,4054	;volatile
  8826  0160F6  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
  8827                           
  8828                           ;Timer0.c: 79: T0CONbits.T0PS = INDEX;
  8829  0160FA  50D5               	movf	4053,w,c	;volatile
  8830  0160FC  0100               	movlb	0	; () banked
  8831  0160FE  19E6               	xorwf	_INDEX& (0+255),w,b
  8832  016100  0BF8               	andlw	-8
  8833  016102  19E6               	xorwf	_INDEX& (0+255),w,b
  8834  016104  6ED5               	movwf	4053,c	;volatile
  8835                           
  8836                           ; BSR set to: 0
  8837                           ;Timer0.c: 80: INTCONbits.TMR0IF = 0;
  8838  016106  94F2               	bcf	intcon,2,c	;volatile
  8839                           
  8840                           ; BSR set to: 0
  8841                           ;Timer0.c: 81: INTCONbits.TMR0IE = 1;
  8842  016108  8AF2               	bsf	intcon,5,c	;volatile
  8843                           
  8844                           ; BSR set to: 0
  8845  01610A  0012               	return		;funcret
  8846  01610C                     __end_of_Timer0_Start:
  8847                           	opt stack 0
  8848                           tosu	equ	0xFFF
  8849                           tosh	equ	0xFFE
  8850                           tosl	equ	0xFFD
  8851                           pclath	equ	0xFFA
  8852                           tblptru	equ	0xFF8
  8853                           tblptrh	equ	0xFF7
  8854                           tblptrl	equ	0xFF6
  8855                           tablat	equ	0xFF5
  8856                           prodh	equ	0xFF4
  8857                           prodl	equ	0xFF3
  8858                           intcon	equ	0xFF2
  8859                           postinc0	equ	0xFEE
  8860                           wreg	equ	0xFE8
  8861                           postdec1	equ	0xFE5
  8862                           fsr1h	equ	0xFE2
  8863                           fsr1l	equ	0xFE1
  8864                           indf2	equ	0xFDF
  8865                           postinc2	equ	0xFDE
  8866                           postdec2	equ	0xFDD
  8867                           fsr2h	equ	0xFDA
  8868                           fsr2l	equ	0xFD9
  8869                           status	equ	0xFD8
  8870                           
  8871 ;; *************** function _HMI_Render *****************
  8872 ;; Defined at:
  8873 ;;		line 138 in file "HMI.c"
  8874 ;; Parameters:    Size  Location     Type
  8875 ;;		None
  8876 ;; Auto vars:     Size  Location     Type
  8877 ;;  a               2    8[BANK0 ] unsigned short 
  8878 ;; Return value:  Size  Location     Type
  8879 ;;                  1    wreg      void 
  8880 ;; Registers used:
  8881 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8882 ;; Tracked objects:
  8883 ;;		On entry : 0/0
  8884 ;;		On exit  : 0/0
  8885 ;;		Unchanged: 0/0
  8886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8888 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8890 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8891 ;;Total ram usage:        2 bytes
  8892 ;; Hardware stack levels used:    1
  8893 ;; Hardware stack levels required when called:    9
  8894 ;; This function calls:
  8895 ;;		_OutSeg
  8896 ;; This function is called by:
  8897 ;;		_mode1
  8898 ;;		_mode4
  8899 ;; This function uses a non-reentrant model
  8900 ;;
  8901                           
  8902                           	psect	text33
  8903  015D04                     __ptext33:
  8904                           	opt stack 0
  8905  015D04                     _HMI_Render:
  8906                           	opt stack 20
  8907                           
  8908                           ;HMI.c: 141: for (UINT16 a = 0; a < sizeof(HMIBoard.Bytes); a++)
  8909                           
  8910                           ; BSR set to: 0
  8911                           ;incstack = 0
  8912  015D04  0E00               	movlw	0
  8913  015D06  0100               	movlb	0	; () banked
  8914  015D08  6F69               	movwf	(HMI_Render@a+1)& (0+255),b
  8915  015D0A  0E00               	movlw	0
  8916  015D0C  6F68               	movwf	HMI_Render@a& (0+255),b
  8917  015D0E                     l14063:
  8918                           
  8919                           ; BSR set to: 0
  8920  015D0E  0100               	movlb	0	; () banked
  8921  015D10  5169               	movf	(HMI_Render@a+1)& (0+255),w,b
  8922  015D12  E116               	bnz	l1158
  8923  015D14  0E08               	movlw	8
  8924  015D16  0100               	movlb	0	; () banked
  8925  015D18  5D68               	subwf	HMI_Render@a& (0+255),w,b
  8926  015D1A  B0D8               	btfsc	status,0,c
  8927  015D1C  0012               	return	
  8928                           
  8929                           ; BSR set to: 0
  8930                           ;HMI.c: 142: OutSeg(HMIBoard.Bytes[a], a);
  8931                           
  8932                           ; BSR set to: 0
  8933                           
  8934                           ; BSR set to: 0
  8935  015D1E  C068  F063         	movff	HMI_Render@a,OutSeg@pSegment
  8936  015D22  0E28               	movlw	low _HMIBoard
  8937  015D24  0100               	movlb	0	; () banked
  8938  015D26  2568               	addwf	HMI_Render@a& (0+255),w,b
  8939  015D28  6ED9               	movwf	fsr2l,c
  8940  015D2A  0E03               	movlw	high _HMIBoard
  8941  015D2C  0100               	movlb	0	; () banked
  8942  015D2E  2169               	addwfc	(HMI_Render@a+1)& (0+255),w,b
  8943  015D30  6EDA               	movwf	fsr2h,c
  8944  015D32  50DF               	movf	indf2,w,c
  8945  015D34  EC32  F0A7         	call	_OutSeg
  8946  015D38  0100               	movlb	0	; () banked
  8947  015D3A  4B68               	infsnz	HMI_Render@a& (0+255),f,b
  8948  015D3C  2B69               	incf	(HMI_Render@a+1)& (0+255),f,b
  8949  015D3E  D7E7               	goto	l14063
  8950  015D40                     l1158:
  8951                           
  8952                           ; BSR set to: 0
  8953  015D40  0012               	return		;funcret
  8954  015D42                     __end_of_HMI_Render:
  8955                           	opt stack 0
  8956                           tosu	equ	0xFFF
  8957                           tosh	equ	0xFFE
  8958                           tosl	equ	0xFFD
  8959                           pclath	equ	0xFFA
  8960                           tblptru	equ	0xFF8
  8961                           tblptrh	equ	0xFF7
  8962                           tblptrl	equ	0xFF6
  8963                           tablat	equ	0xFF5
  8964                           prodh	equ	0xFF4
  8965                           prodl	equ	0xFF3
  8966                           intcon	equ	0xFF2
  8967                           postinc0	equ	0xFEE
  8968                           wreg	equ	0xFE8
  8969                           postdec1	equ	0xFE5
  8970                           fsr1h	equ	0xFE2
  8971                           fsr1l	equ	0xFE1
  8972                           indf2	equ	0xFDF
  8973                           postinc2	equ	0xFDE
  8974                           postdec2	equ	0xFDD
  8975                           fsr2h	equ	0xFDA
  8976                           fsr2l	equ	0xFD9
  8977                           status	equ	0xFD8
  8978                           
  8979 ;; *************** function _OutSeg *****************
  8980 ;; Defined at:
  8981 ;;		line 54 in file "HMI.c"
  8982 ;; Parameters:    Size  Location     Type
  8983 ;;  pInput          1    wreg     unsigned char 
  8984 ;;  pSegment        1    3[BANK0 ] unsigned char 
  8985 ;; Auto vars:     Size  Location     Type
  8986 ;;  pInput          1    6[BANK0 ] unsigned char 
  8987 ;;  out             1    7[BANK0 ] volatile unsigned char 
  8988 ;; Return value:  Size  Location     Type
  8989 ;;                  1    wreg      void 
  8990 ;; Registers used:
  8991 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8992 ;; Tracked objects:
  8993 ;;		On entry : 0/0
  8994 ;;		On exit  : 0/0
  8995 ;;		Unchanged: 0/0
  8996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8997 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8998 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8999 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9000 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9001 ;;Total ram usage:        5 bytes
  9002 ;; Hardware stack levels used:    1
  9003 ;; Hardware stack levels required when called:    8
  9004 ;; This function calls:
  9005 ;;		_SPI_Send
  9006 ;; This function is called by:
  9007 ;;		_HMI_Render
  9008 ;;		_HMI_GRender
  9009 ;; This function uses a non-reentrant model
  9010 ;;
  9011                           
  9012                           	psect	text34
  9013  014E64                     __ptext34:
  9014                           	opt stack 0
  9015  014E64                     _OutSeg:
  9016                           	opt stack 20
  9017                           
  9018                           ; BSR set to: 0
  9019                           ;incstack = 0
  9020                           ;OutSeg@pInput stored from wreg
  9021  014E64  0100               	movlb	0	; () banked
  9022  014E66  6F66               	movwf	OutSeg@pInput& (0+255),b
  9023                           
  9024                           ;HMI.c: 58: static UINT8 cur;
  9025                           ;HMI.c: 59: volatile UINT8 out;
  9026                           ;HMI.c: 60: static UINT8 segset;
  9027                           ;HMI.c: 61: static UINT8 a;
  9028                           ;HMI.c: 83: if (pSegment <= 8)
  9029  014E68  0E09               	movlw	9
  9030  014E6A  0100               	movlb	0	; () banked
  9031  014E6C  6163               	cpfslt	OutSeg@pSegment& (0+255),b
  9032  014E6E  0012               	return	
  9033                           
  9034                           ; BSR set to: 0
  9035                           ;HMI.c: 84: {
  9036                           ;HMI.c: 85: cur = pInput;
  9037  014E70  C066  F03F         	movff	OutSeg@pInput,OutSeg@cur
  9038                           
  9039                           ; BSR set to: 0
  9040                           ;HMI.c: 86: for (a = 0u; a<8u; a++)
  9041  014E74  0E00               	movlw	0
  9042  014E76  6E3D               	movwf	OutSeg@a,c
  9043  014E78                     l13421:
  9044                           
  9045                           ; BSR set to: 0
  9046  014E78  0E07               	movlw	7
  9047  014E7A  643D               	cpfsgt	OutSeg@a,c
  9048  014E7C  D001               	goto	l1146
  9049  014E7E  D027               	goto	u9930
  9050  014E80                     l1146:
  9051                           
  9052                           ;HMI.c: 87: {
  9053                           ;HMI.c: 88: segset = (cur & 1u)<<6u;
  9054                           
  9055                           ; BSR set to: 0
  9056  014E80  C03F  F064         	movff	OutSeg@cur,??_OutSeg
  9057  014E84  0E01               	movlw	1
  9058  014E86  0100               	movlb	0	; () banked
  9059  014E88  1764               	andwf	??_OutSeg& (0+255),f,b
  9060  014E8A  0E06               	movlw	6
  9061  014E8C  0100               	movlb	0	; () banked
  9062  014E8E  6F65               	movwf	(??_OutSeg+1)& (0+255),b
  9063  014E90                     u9925:
  9064  014E90  0100               	movlb	0	; () banked
  9065  014E92  90D8               	bcf	status,0,c
  9066  014E94  3764               	rlcf	??_OutSeg& (0+255),f,b
  9067  014E96  0100               	movlb	0	; () banked
  9068  014E98  2F65               	decfsz	(??_OutSeg+1)& (0+255),f,b
  9069  014E9A  D7FA               	goto	u9925
  9070  014E9C  0100               	movlb	0	; () banked
  9071  014E9E  5164               	movf	??_OutSeg& (0+255),w,b
  9072  014EA0  6E3E               	movwf	OutSeg@segset,c
  9073                           
  9074                           ;HMI.c: 89: out = (pSegment<<3u) | a | segset;
  9075  014EA2  0100               	movlb	0	; () banked
  9076  014EA4  3963               	swapf	OutSeg@pSegment& (0+255),w,b
  9077  014EA6  42E8               	rrncf	wreg,f,c
  9078  014EA8  0BF8               	andlw	248
  9079  014EAA  103D               	iorwf	OutSeg@a,w,c
  9080  014EAC  103E               	iorwf	OutSeg@segset,w,c
  9081  014EAE  0100               	movlb	0	; () banked
  9082  014EB0  6F67               	movwf	OutSeg@out& (0+255),b	;volatile
  9083                           
  9084                           ;HMI.c: 90: cur >>= 1;
  9085  014EB2  90D8               	bcf	status,0,c
  9086  014EB4  323F               	rrcf	OutSeg@cur,f,c
  9087                           
  9088                           ; BSR set to: 0
  9089                           ;HMI.c: 91: SPI_Send(&SPI1, out);
  9090  014EB6  0E62               	movlw	low _SPI1
  9091  014EB8  0100               	movlb	0	; () banked
  9092  014EBA  6F60               	movwf	SPI_Send@pInput& (0+255),b
  9093  014EBC  0E03               	movlw	high _SPI1
  9094  014EBE  0100               	movlb	0	; () banked
  9095  014EC0  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
  9096  014EC2  C067  F062         	movff	OutSeg@out,SPI_Send@pData	;volatile
  9097  014EC6  ECBB  F0A9         	call	_SPI_Send	;wreg free
  9098  014ECA  2A3D               	incf	OutSeg@a,f,c
  9099  014ECC  D7D5               	goto	l13421
  9100  014ECE                     u9930:
  9101                           
  9102                           ;HMI.c: 96: }
  9103                           ;HMI.c: 97: SPI_Send(&SPI1, 0);
  9104  014ECE  0E62               	movlw	low _SPI1
  9105  014ED0  0100               	movlb	0	; () banked
  9106  014ED2  6F60               	movwf	SPI_Send@pInput& (0+255),b
  9107  014ED4  0E03               	movlw	high _SPI1
  9108  014ED6  0100               	movlb	0	; () banked
  9109  014ED8  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
  9110  014EDA  0E00               	movlw	0
  9111  014EDC  0100               	movlb	0	; () banked
  9112  014EDE  6F62               	movwf	SPI_Send@pData& (0+255),b
  9113  014EE0  ECBB  F0A9         	call	_SPI_Send	;wreg free
  9114  014EE4  0012               	return	
  9115  014EE6                     __end_of_OutSeg:
  9116                           	opt stack 0
  9117                           tosu	equ	0xFFF
  9118                           tosh	equ	0xFFE
  9119                           tosl	equ	0xFFD
  9120                           pclath	equ	0xFFA
  9121                           tblptru	equ	0xFF8
  9122                           tblptrh	equ	0xFF7
  9123                           tblptrl	equ	0xFF6
  9124                           tablat	equ	0xFF5
  9125                           prodh	equ	0xFF4
  9126                           prodl	equ	0xFF3
  9127                           intcon	equ	0xFF2
  9128                           postinc0	equ	0xFEE
  9129                           wreg	equ	0xFE8
  9130                           postdec1	equ	0xFE5
  9131                           fsr1h	equ	0xFE2
  9132                           fsr1l	equ	0xFE1
  9133                           indf2	equ	0xFDF
  9134                           postinc2	equ	0xFDE
  9135                           postdec2	equ	0xFDD
  9136                           fsr2h	equ	0xFDA
  9137                           fsr2l	equ	0xFD9
  9138                           status	equ	0xFD8
  9139                           
  9140 ;; *************** function _HMI_Poll *****************
  9141 ;; Defined at:
  9142 ;;		line 252 in file "HMI.c"
  9143 ;; Parameters:    Size  Location     Type
  9144 ;;		None
  9145 ;; Auto vars:     Size  Location     Type
  9146 ;;		None
  9147 ;; Return value:  Size  Location     Type
  9148 ;;                  1    wreg      void 
  9149 ;; Registers used:
  9150 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  9151 ;; Tracked objects:
  9152 ;;		On entry : 0/0
  9153 ;;		On exit  : 0/0
  9154 ;;		Unchanged: 0/0
  9155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9159 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9160 ;;Total ram usage:        0 bytes
  9161 ;; Hardware stack levels used:    1
  9162 ;; Hardware stack levels required when called:   15
  9163 ;; This function calls:
  9164 ;;		_Button_Poll
  9165 ;; This function is called by:
  9166 ;;		_mode1
  9167 ;;		_mode2
  9168 ;;		_mode4
  9169 ;; This function uses a non-reentrant model
  9170 ;;
  9171                           
  9172                           	psect	text35
  9173  0150CA                     __ptext35:
  9174                           	opt stack 0
  9175  0150CA                     _HMI_Poll:
  9176                           	opt stack 14
  9177                           
  9178                           ;HMI.c: 254: TRISE = 0xFC;
  9179                           
  9180                           ;incstack = 0
  9181  0150CA  0EFC               	movlw	252
  9182  0150CC  6E96               	movwf	3990,c	;volatile
  9183                           
  9184                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
  9185  0150CE  0E58               	movlw	low (_HMIBoard+48)
  9186  0150D0  0100               	movlb	0	; () banked
  9187  0150D2  6F7B               	movwf	Button_Poll@pButton& (0+255),b
  9188  0150D4  0E03               	movlw	high (_HMIBoard+48)
  9189  0150D6  0100               	movlb	0	; () banked
  9190  0150D8  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
  9191  0150DA  0E01               	movlw	1
  9192  0150DC  0100               	movlb	0	; () banked
  9193  0150DE  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
  9194  0150E0  ECE6  F097         	call	_Button_Poll	;wreg free
  9195                           
  9196                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
  9197  0150E4  0E3A               	movlw	low (_HMIBoard+18)
  9198  0150E6  0100               	movlb	0	; () banked
  9199  0150E8  6F7B               	movwf	Button_Poll@pButton& (0+255),b
  9200  0150EA  0E03               	movlw	high (_HMIBoard+18)
  9201  0150EC  0100               	movlb	0	; () banked
  9202  0150EE  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
  9203  0150F0  0E01               	movlw	1
  9204  0150F2  0100               	movlb	0	; () banked
  9205  0150F4  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
  9206  0150F6  ECE6  F097         	call	_Button_Poll	;wreg free
  9207                           
  9208                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
  9209  0150FA  0E30               	movlw	low (_HMIBoard+8)
  9210  0150FC  0100               	movlb	0	; () banked
  9211  0150FE  6F7B               	movwf	Button_Poll@pButton& (0+255),b
  9212  015100  0E03               	movlw	high (_HMIBoard+8)
  9213  015102  0100               	movlb	0	; () banked
  9214  015104  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
  9215  015106  0E01               	movlw	1
  9216  015108  0100               	movlb	0	; () banked
  9217  01510A  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
  9218  01510C  ECE6  F097         	call	_Button_Poll	;wreg free
  9219                           
  9220                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
  9221  015110  0E44               	movlw	low (_HMIBoard+28)
  9222  015112  0100               	movlb	0	; () banked
  9223  015114  6F7B               	movwf	Button_Poll@pButton& (0+255),b
  9224  015116  0E03               	movlw	high (_HMIBoard+28)
  9225  015118  0100               	movlb	0	; () banked
  9226  01511A  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
  9227  01511C  0E01               	movlw	1
  9228  01511E  0100               	movlb	0	; () banked
  9229  015120  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
  9230  015122  ECE6  F097         	call	_Button_Poll	;wreg free
  9231                           
  9232                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
  9233  015126  0E4E               	movlw	low (_HMIBoard+38)
  9234  015128  0100               	movlb	0	; () banked
  9235  01512A  6F7B               	movwf	Button_Poll@pButton& (0+255),b
  9236  01512C  0E03               	movlw	high (_HMIBoard+38)
  9237  01512E  0100               	movlb	0	; () banked
  9238  015130  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
  9239  015132  0E01               	movlw	1
  9240  015134  0100               	movlb	0	; () banked
  9241  015136  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
  9242  015138  ECE6  F097         	call	_Button_Poll	;wreg free
  9243  01513C  0012               	return		;funcret
  9244  01513E                     __end_of_HMI_Poll:
  9245                           	opt stack 0
  9246                           tosu	equ	0xFFF
  9247                           tosh	equ	0xFFE
  9248                           tosl	equ	0xFFD
  9249                           pclath	equ	0xFFA
  9250                           tblptru	equ	0xFF8
  9251                           tblptrh	equ	0xFF7
  9252                           tblptrl	equ	0xFF6
  9253                           tablat	equ	0xFF5
  9254                           prodh	equ	0xFF4
  9255                           prodl	equ	0xFF3
  9256                           intcon	equ	0xFF2
  9257                           postinc0	equ	0xFEE
  9258                           wreg	equ	0xFE8
  9259                           postdec1	equ	0xFE5
  9260                           fsr1h	equ	0xFE2
  9261                           fsr1l	equ	0xFE1
  9262                           indf2	equ	0xFDF
  9263                           postinc2	equ	0xFDE
  9264                           postdec2	equ	0xFDD
  9265                           fsr2h	equ	0xFDA
  9266                           fsr2l	equ	0xFD9
  9267                           status	equ	0xFD8
  9268                           
  9269 ;; *************** function _Button_Poll *****************
  9270 ;; Defined at:
  9271 ;;		line 57 in file "Library/Button.c"
  9272 ;; Parameters:    Size  Location     Type
  9273 ;;  pButton         2   27[BANK0 ] const PTR struct Button
  9274 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
  9275 ;;  pIncrement      1   29[BANK0 ] unsigned char 
  9276 ;; Auto vars:     Size  Location     Type
  9277 ;;  Pin             1   35[BANK0 ] unsigned char 
  9278 ;; Return value:  Size  Location     Type
  9279 ;;                  1    wreg      unsigned char 
  9280 ;; Registers used:
  9281 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  9282 ;; Tracked objects:
  9283 ;;		On entry : 0/0
  9284 ;;		On exit  : 0/0
  9285 ;;		Unchanged: 0/0
  9286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9287 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9288 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9289 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9290 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9291 ;;Total ram usage:        9 bytes
  9292 ;; Hardware stack levels used:    1
  9293 ;; Hardware stack levels required when called:   14
  9294 ;; This function calls:
  9295 ;;		_Event_DIPSwitch
  9296 ;;		_Event_NULL
  9297 ;;		_Event_TestButton
  9298 ;;		_HMI_DIPSwitch
  9299 ;;		_HMI_DownSwitch
  9300 ;;		_HMI_LeftSwitch
  9301 ;;		_HMI_RightSwitch
  9302 ;;		_HMI_UpSwitch
  9303 ;;		_MXK_DIPSwitch
  9304 ;;		_MXK_TestButton
  9305 ;; This function is called by:
  9306 ;;		_HMI_Poll
  9307 ;;		_MXK_Poll
  9308 ;; This function uses a non-reentrant model
  9309 ;;
  9310                           
  9311                           	psect	text36
  9312  012FCC                     __ptext36:
  9313                           	opt stack 0
  9314  012FCC                     _Button_Poll:
  9315                           	opt stack 14
  9316                           
  9317                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
  9318                           
  9319                           ;incstack = 0
  9320  012FCC  0100               	movlb	0	; () banked
  9321  012FCE  EE20 F007          	lfsr	2,7
  9322  012FD2  517B               	movf	Button_Poll@pButton& (0+255),w,b
  9323  012FD4  26D9               	addwf	fsr2l,f,c
  9324  012FD6  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  9325  012FD8  22DA               	addwfc	fsr2h,f,c
  9326  012FDA  D801               	call	u9688
  9327  012FDC  D00A               	goto	u9689
  9328  012FDE                     u9688:
  9329  012FDE  0005               	push	
  9330  012FE0  6EFA               	movwf	pclath,c
  9331  012FE2  50DE               	movf	postinc2,w,c
  9332  012FE4  6EFD               	movwf	tosl,c
  9333  012FE6  50DE               	movf	postinc2,w,c
  9334  012FE8  6EFE               	movwf	tosh,c
  9335  012FEA  50DE               	movf	postinc2,w,c
  9336  012FEC  6EFF               	movwf	tosu,c
  9337  012FEE  50FA               	movf	pclath,w,c
  9338  012FF0  0012               	return		;indir
  9339  012FF2                     u9689:
  9340  012FF2  0100               	movlb	0	; () banked
  9341  012FF4  6F83               	movwf	Button_Poll@Pin& (0+255),b
  9342                           
  9343                           ; BSR set to: 0
  9344                           ;Button.c: 61: if (pButton->mState == Pin)
  9345  012FF6  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
  9346  012FFA  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
  9347  012FFE  0100               	movlb	0	; () banked
  9348  013000  5183               	movf	Button_Poll@Pin& (0+255),w,b
  9349  013002  18DE               	xorwf	postinc2,w,c
  9350  013004  A4D8               	btfss	status,2,c
  9351  013006  D021               	goto	l11
  9352                           
  9353                           ; BSR set to: 0
  9354                           ;Button.c: 62: {
  9355                           ;Button.c: 65: if(pIncrement > pButton->mCount)
  9356  013008  0100               	movlb	0	; () banked
  9357  01300A  EE20 F001          	lfsr	2,1
  9358  01300E  517B               	movf	Button_Poll@pButton& (0+255),w,b
  9359  013010  26D9               	addwf	fsr2l,f,c
  9360  013012  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  9361  013014  22DA               	addwfc	fsr2h,f,c
  9362  013016  0100               	movlb	0	; () banked
  9363  013018  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
  9364  01301A  5CDE               	subwf	postinc2,w,c
  9365  01301C  B0D8               	btfsc	status,0,c
  9366  01301E  D00A               	goto	l12
  9367                           
  9368                           ; BSR set to: 0
  9369                           ;Button.c: 66: pButton->mCount = 0;
  9370  013020  0100               	movlb	0	; () banked
  9371  013022  EE20 F001          	lfsr	2,1
  9372  013026  517B               	movf	Button_Poll@pButton& (0+255),w,b
  9373  013028  26D9               	addwf	fsr2l,f,c
  9374  01302A  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  9375  01302C  22DA               	addwfc	fsr2h,f,c
  9376  01302E  0E00               	movlw	0
  9377  013030  6EDF               	movwf	indf2,c
  9378  013032  0012               	return	
  9379  013034                     l12:
  9380                           
  9381                           ; BSR set to: 0
  9382                           ;Button.c: 67: else
  9383                           ;Button.c: 68: pButton->mCount -= pIncrement;
  9384                           
  9385                           ; BSR set to: 0
  9386  013034  0100               	movlb	0	; () banked
  9387  013036  EE20 F001          	lfsr	2,1
  9388  01303A  517B               	movf	Button_Poll@pButton& (0+255),w,b
  9389  01303C  26D9               	addwf	fsr2l,f,c
  9390  01303E  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  9391  013040  22DA               	addwfc	fsr2h,f,c
  9392  013042  0100               	movlb	0	; () banked
  9393  013044  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
  9394  013046  5EDF               	subwf	indf2,f,c
  9395                           
  9396                           ; BSR set to: 0
  9397                           ;Button.c: 69: }
  9398  013048  0012               	return	
  9399  01304A                     l11:
  9400                           
  9401                           ; BSR set to: 0
  9402                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
  9403                           
  9404                           ; BSR set to: 0
  9405  01304A  0100               	movlb	0	; () banked
  9406  01304C  EE20 F001          	lfsr	2,1
  9407  013050  517B               	movf	Button_Poll@pButton& (0+255),w,b
  9408  013052  26D9               	addwf	fsr2l,f,c
  9409  013054  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  9410  013056  22DA               	addwfc	fsr2h,f,c
  9411  013058  50DF               	movf	indf2,w,c
  9412  01305A  0100               	movlb	0	; () banked
  9413  01305C  6F7E               	movwf	??_Button_Poll& (0+255),b
  9414  01305E  6B7F               	clrf	(??_Button_Poll+1)& (0+255),b
  9415  013060  0100               	movlb	0	; () banked
  9416  013062  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
  9417  013064  0100               	movlb	0	; () banked
  9418  013066  277E               	addwf	??_Button_Poll& (0+255),f,b
  9419  013068  0E00               	movlw	0
  9420  01306A  237F               	addwfc	(??_Button_Poll+1)& (0+255),f,b
  9421  01306C  0100               	movlb	0	; () banked
  9422  01306E  EE20 F001          	lfsr	2,1
  9423  013072  517B               	movf	Button_Poll@pButton& (0+255),w,b
  9424  013074  26D9               	addwf	fsr2l,f,c
  9425  013076  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  9426  013078  22DA               	addwfc	fsr2h,f,c
  9427  01307A  50DF               	movf	indf2,w,c
  9428  01307C  0100               	movlb	0	; () banked
  9429  01307E  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
  9430  013080  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
  9431  013082  0100               	movlb	0	; () banked
  9432  013084  517E               	movf	??_Button_Poll& (0+255),w,b
  9433  013086  0100               	movlb	0	; () banked
  9434  013088  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
  9435  01308A  0100               	movlb	0	; () banked
  9436  01308C  5181               	movf	(??_Button_Poll+3)& (0+255),w,b
  9437  01308E  0A80               	xorlw	128
  9438  013090  0100               	movlb	0	; () banked
  9439  013092  6F82               	movwf	(??_Button_Poll+4)& (0+255),b
  9440  013094  0100               	movlb	0	; () banked
  9441  013096  517F               	movf	(??_Button_Poll+1)& (0+255),w,b
  9442  013098  0A80               	xorlw	128
  9443  01309A  0100               	movlb	0	; () banked
  9444  01309C  5982               	subwfb	(??_Button_Poll+4)& (0+255),w,b
  9445  01309E  B0D8               	btfsc	status,0,c
  9446  0130A0  0012               	return	
  9447                           
  9448                           ; BSR set to: 0
  9449                           ;Button.c: 73: {
  9450                           ;Button.c: 75: pButton->mCount += pIncrement;
  9451  0130A2  0100               	movlb	0	; () banked
  9452  0130A4  EE20 F001          	lfsr	2,1
  9453  0130A8  517B               	movf	Button_Poll@pButton& (0+255),w,b
  9454  0130AA  26D9               	addwf	fsr2l,f,c
  9455  0130AC  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  9456  0130AE  22DA               	addwfc	fsr2h,f,c
  9457  0130B0  0100               	movlb	0	; () banked
  9458  0130B2  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
  9459  0130B4  26DF               	addwf	indf2,f,c
  9460                           
  9461                           ; BSR set to: 0
  9462                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
  9463  0130B6  0100               	movlb	0	; () banked
  9464  0130B8  EE20 F002          	lfsr	2,2
  9465  0130BC  517B               	movf	Button_Poll@pButton& (0+255),w,b
  9466  0130BE  26D9               	addwf	fsr2l,f,c
  9467  0130C0  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  9468  0130C2  22DA               	addwfc	fsr2h,f,c
  9469  0130C4  0100               	movlb	0	; () banked
  9470  0130C6  EE10 F001          	lfsr	1,1
  9471  0130CA  517B               	movf	Button_Poll@pButton& (0+255),w,b
  9472  0130CC  26E1               	addwf	fsr1l,f,c
  9473  0130CE  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  9474  0130D0  22E2               	addwfc	fsr1h,f,c
  9475  0130D2  50E7               	movf	indf1,w,c
  9476  0130D4  0100               	movlb	0	; () banked
  9477  0130D6  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
  9478  0130D8  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
  9479  0130DA  50DE               	movf	postinc2,w,c
  9480  0130DC  0100               	movlb	0	; () banked
  9481  0130DE  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
  9482  0130E0  50DE               	movf	postinc2,w,c
  9483  0130E2  0100               	movlb	0	; () banked
  9484  0130E4  5981               	subwfb	(??_Button_Poll+3)& (0+255),w,b
  9485  0130E6  A0D8               	btfss	status,0,c
  9486  0130E8  0012               	return	
  9487                           
  9488                           ; BSR set to: 0
  9489                           ;Button.c: 77: {
  9490                           ;Button.c: 79: pButton->mState = Pin;
  9491  0130EA  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
  9492  0130EE  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
  9493  0130F2  C083  FFDF         	movff	Button_Poll@Pin,indf2
  9494                           
  9495                           ; BSR set to: 0
  9496                           ;Button.c: 80: pButton->mCount = 0;
  9497  0130F6  0100               	movlb	0	; () banked
  9498  0130F8  EE20 F001          	lfsr	2,1
  9499  0130FC  517B               	movf	Button_Poll@pButton& (0+255),w,b
  9500  0130FE  26D9               	addwf	fsr2l,f,c
  9501  013100  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  9502  013102  22DA               	addwfc	fsr2h,f,c
  9503  013104  0E00               	movlw	0
  9504  013106  6EDF               	movwf	indf2,c
  9505                           
  9506                           ; BSR set to: 0
  9507                           ;Button.c: 83: pButton->mFunction(Pin);
  9508  013108  0100               	movlb	0	; () banked
  9509  01310A  EE20 F004          	lfsr	2,4
  9510  01310E  517B               	movf	Button_Poll@pButton& (0+255),w,b
  9511  013110  26D9               	addwf	fsr2l,f,c
  9512  013112  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  9513  013114  22DA               	addwfc	fsr2h,f,c
  9514  013116  D801               	call	u9738
  9515  013118  0012               	return	
  9516  01311A                     u9738:
  9517  01311A  0005               	push	
  9518  01311C  6EFA               	movwf	pclath,c
  9519  01311E  50DE               	movf	postinc2,w,c
  9520  013120  6EFD               	movwf	tosl,c
  9521  013122  50DE               	movf	postinc2,w,c
  9522  013124  6EFE               	movwf	tosh,c
  9523  013126  50DE               	movf	postinc2,w,c
  9524  013128  6EFF               	movwf	tosu,c
  9525  01312A  50FA               	movf	pclath,w,c
  9526  01312C  0100               	movlb	0	; () banked
  9527  01312E  5183               	movf	Button_Poll@Pin& (0+255),w,b
  9528  013130  0012               	return		;indir
  9529  013132                     __end_of_Button_Poll:
  9530                           	opt stack 0
  9531                           tosu	equ	0xFFF
  9532                           tosh	equ	0xFFE
  9533                           tosl	equ	0xFFD
  9534                           pclath	equ	0xFFA
  9535                           tblptru	equ	0xFF8
  9536                           tblptrh	equ	0xFF7
  9537                           tblptrl	equ	0xFF6
  9538                           tablat	equ	0xFF5
  9539                           prodh	equ	0xFF4
  9540                           prodl	equ	0xFF3
  9541                           intcon	equ	0xFF2
  9542                           postinc0	equ	0xFEE
  9543                           wreg	equ	0xFE8
  9544                           indf1	equ	0xFE7
  9545                           postdec1	equ	0xFE5
  9546                           fsr1h	equ	0xFE2
  9547                           fsr1l	equ	0xFE1
  9548                           indf2	equ	0xFDF
  9549                           postinc2	equ	0xFDE
  9550                           postdec2	equ	0xFDD
  9551                           fsr2h	equ	0xFDA
  9552                           fsr2l	equ	0xFD9
  9553                           status	equ	0xFD8
  9554                           
  9555 ;; *************** function _Event_DIPSwitch *****************
  9556 ;; Defined at:
  9557 ;;		line 22 in file "Events.c"
  9558 ;; Parameters:    Size  Location     Type
  9559 ;;  pState          1    wreg     unsigned char 
  9560 ;; Auto vars:     Size  Location     Type
  9561 ;;  pState          1   25[BANK0 ] unsigned char 
  9562 ;;  Bar             1   26[BANK0 ] unsigned char 
  9563 ;; Return value:  Size  Location     Type
  9564 ;;                  1    wreg      void 
  9565 ;; Registers used:
  9566 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9567 ;; Tracked objects:
  9568 ;;		On entry : 0/0
  9569 ;;		On exit  : 0/0
  9570 ;;		Unchanged: 0/0
  9571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9573 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9575 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9576 ;;Total ram usage:        2 bytes
  9577 ;; Hardware stack levels used:    1
  9578 ;; Hardware stack levels required when called:   13
  9579 ;; This function calls:
  9580 ;;		_HMI_GetBar
  9581 ;;		_HMI_SetBar
  9582 ;;		_LED_Toggle
  9583 ;; This function is called by:
  9584 ;;		_FunctInitButton
  9585 ;;		_Button_Poll
  9586 ;; This function uses a non-reentrant model
  9587 ;;
  9588                           
  9589                           	psect	text37
  9590  01600E                     __ptext37:
  9591                           	opt stack 0
  9592  01600E                     _Event_DIPSwitch:
  9593                           	opt stack 14
  9594                           
  9595                           ;incstack = 0
  9596                           ;Event_DIPSwitch@pState stored from wreg
  9597  01600E  0100               	movlb	0	; () banked
  9598  016010  6F79               	movwf	Event_DIPSwitch@pState& (0+255),b
  9599                           
  9600                           ;Events.c: 24: UINT8 Bar = HMI_GetBar();
  9601  016012  EC68  F0B2         	call	_HMI_GetBar
  9602  016016  0100               	movlb	0	; () banked
  9603  016018  6F7A               	movwf	Event_DIPSwitch@Bar& (0+255),b
  9604                           
  9605                           ; BSR set to: 0
  9606                           ;Events.c: 25: Bar &= 0x0F;
  9607  01601A  0E0F               	movlw	15
  9608  01601C  0100               	movlb	0	; () banked
  9609  01601E  177A               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
  9610                           
  9611                           ; BSR set to: 0
  9612                           ;Events.c: 26: pState <<= 4;
  9613  016020  0100               	movlb	0	; () banked
  9614  016022  3B79               	swapf	Event_DIPSwitch@pState& (0+255),f,b
  9615  016024  0EF0               	movlw	240
  9616  016026  1779               	andwf	Event_DIPSwitch@pState& (0+255),f,b
  9617                           
  9618                           ; BSR set to: 0
  9619                           ;Events.c: 29: HMI_SetBar(pState | Bar);
  9620  016028  0100               	movlb	0	; () banked
  9621  01602A  5179               	movf	Event_DIPSwitch@pState& (0+255),w,b
  9622  01602C  0100               	movlb	0	; () banked
  9623  01602E  117A               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
  9624  016030  EC4E  F0B2         	call	_HMI_SetBar
  9625                           
  9626                           ;Events.c: 32: LED_Toggle(eLED1);
  9627  016034  0E00               	movlw	0
  9628  016036  EC4E  F0AD         	call	_LED_Toggle
  9629  01603A  0012               	return		;funcret
  9630  01603C                     __end_of_Event_DIPSwitch:
  9631                           	opt stack 0
  9632                           tosu	equ	0xFFF
  9633                           tosh	equ	0xFFE
  9634                           tosl	equ	0xFFD
  9635                           pclath	equ	0xFFA
  9636                           tblptru	equ	0xFF8
  9637                           tblptrh	equ	0xFF7
  9638                           tblptrl	equ	0xFF6
  9639                           tablat	equ	0xFF5
  9640                           prodh	equ	0xFF4
  9641                           prodl	equ	0xFF3
  9642                           intcon	equ	0xFF2
  9643                           postinc0	equ	0xFEE
  9644                           wreg	equ	0xFE8
  9645                           indf1	equ	0xFE7
  9646                           postdec1	equ	0xFE5
  9647                           fsr1h	equ	0xFE2
  9648                           fsr1l	equ	0xFE1
  9649                           indf2	equ	0xFDF
  9650                           postinc2	equ	0xFDE
  9651                           postdec2	equ	0xFDD
  9652                           fsr2h	equ	0xFDA
  9653                           fsr2l	equ	0xFD9
  9654                           status	equ	0xFD8
  9655                           
  9656 ;; *************** function _Event_NULL *****************
  9657 ;; Defined at:
  9658 ;;		line 9 in file "Events.c"
  9659 ;; Parameters:    Size  Location     Type
  9660 ;;  pState          1    wreg     unsigned char 
  9661 ;; Auto vars:     Size  Location     Type
  9662 ;;  pState          1    0[COMRAM] unsigned char 
  9663 ;; Return value:  Size  Location     Type
  9664 ;;                  1    wreg      void 
  9665 ;; Registers used:
  9666 ;;		wreg
  9667 ;; Tracked objects:
  9668 ;;		On entry : 0/0
  9669 ;;		On exit  : 0/0
  9670 ;;		Unchanged: 0/0
  9671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9675 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9676 ;;Total ram usage:        0 bytes
  9677 ;; Hardware stack levels used:    1
  9678 ;; Hardware stack levels required when called:    7
  9679 ;; This function calls:
  9680 ;;		Nothing
  9681 ;; This function is called by:
  9682 ;;		_HMI_Init
  9683 ;;		_Button_Poll
  9684 ;; This function uses a non-reentrant model
  9685 ;;
  9686                           
  9687                           	psect	text38
  9688  0164F4                     __ptext38:
  9689                           	opt stack 0
  9690  0164F4                     _Event_NULL:
  9691                           	opt stack 20
  9692                           
  9693                           ;incstack = 0
  9694  0164F4  0012               	return		;funcret
  9695  0164F6                     __end_of_Event_NULL:
  9696                           	opt stack 0
  9697                           tosu	equ	0xFFF
  9698                           tosh	equ	0xFFE
  9699                           tosl	equ	0xFFD
  9700                           pclath	equ	0xFFA
  9701                           tblptru	equ	0xFF8
  9702                           tblptrh	equ	0xFF7
  9703                           tblptrl	equ	0xFF6
  9704                           tablat	equ	0xFF5
  9705                           prodh	equ	0xFF4
  9706                           prodl	equ	0xFF3
  9707                           intcon	equ	0xFF2
  9708                           postinc0	equ	0xFEE
  9709                           wreg	equ	0xFE8
  9710                           indf1	equ	0xFE7
  9711                           postdec1	equ	0xFE5
  9712                           fsr1h	equ	0xFE2
  9713                           fsr1l	equ	0xFE1
  9714                           indf2	equ	0xFDF
  9715                           postinc2	equ	0xFDE
  9716                           postdec2	equ	0xFDD
  9717                           fsr2h	equ	0xFDA
  9718                           fsr2l	equ	0xFD9
  9719                           status	equ	0xFD8
  9720                           
  9721 ;; *************** function _Event_TestButton *****************
  9722 ;; Defined at:
  9723 ;;		line 52 in file "Events.c"
  9724 ;; Parameters:    Size  Location     Type
  9725 ;;  pState          1    wreg     unsigned char 
  9726 ;; Auto vars:     Size  Location     Type
  9727 ;;  pState          1   25[BANK0 ] unsigned char 
  9728 ;; Return value:  Size  Location     Type
  9729 ;;                  1    wreg      void 
  9730 ;; Registers used:
  9731 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9732 ;; Tracked objects:
  9733 ;;		On entry : 0/0
  9734 ;;		On exit  : 0/0
  9735 ;;		Unchanged: 0/0
  9736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9738 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9740 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9741 ;;Total ram usage:        1 bytes
  9742 ;; Hardware stack levels used:    1
  9743 ;; Hardware stack levels required when called:   13
  9744 ;; This function calls:
  9745 ;;		_HMI_SetButton
  9746 ;;		_HMI_SetNumber
  9747 ;;		_LED_Toggle
  9748 ;; This function is called by:
  9749 ;;		_FunctInitButton
  9750 ;;		_Button_Poll
  9751 ;; This function uses a non-reentrant model
  9752 ;;
  9753                           
  9754                           	psect	text39
  9755  015DFC                     __ptext39:
  9756                           	opt stack 0
  9757  015DFC                     _Event_TestButton:
  9758                           	opt stack 14
  9759                           
  9760                           ;incstack = 0
  9761                           ;Event_TestButton@pState stored from wreg
  9762  015DFC  0100               	movlb	0	; () banked
  9763  015DFE  6F79               	movwf	Event_TestButton@pState& (0+255),b
  9764                           
  9765                           ;Events.c: 56: static UINT8 j = 0;
  9766                           ;Events.c: 60: if (pState == 0)
  9767  015E00  0100               	movlb	0	; () banked
  9768  015E02  5179               	movf	Event_TestButton@pState& (0+255),w,b
  9769  015E04  0100               	movlb	0	; () banked
  9770  015E06  A4D8               	btfss	status,2,c
  9771  015E08  D013               	goto	l1873
  9772                           
  9773                           ; BSR set to: 0
  9774                           ;Events.c: 61: {
  9775                           ;Events.c: 62: j++;
  9776  015E0A  0100               	movlb	0	; () banked
  9777  015E0C  2BE2               	incf	Event_TestButton@j& (0+255),f,b
  9778                           
  9779                           ; BSR set to: 0
  9780                           ;Events.c: 63: val += j;
  9781  015E0E  0100               	movlb	0	; () banked
  9782  015E10  51E2               	movf	Event_TestButton@j& (0+255),w,b
  9783  015E12  0100               	movlb	0	; () banked
  9784  015E14  27D6               	addwf	_val& (0+255),f,b
  9785  015E16  0E00               	movlw	0
  9786  015E18  23D7               	addwfc	(_val+1)& (0+255),f,b
  9787                           
  9788                           ; BSR set to: 0
  9789                           ;Events.c: 64: HMI_SetNumber( val );
  9790  015E1A  C0D6  F076         	movff	_val,HMI_SetNumber@pInput
  9791  015E1E  C0D7  F077         	movff	_val+1,HMI_SetNumber@pInput+1
  9792  015E22  EC4A  F0B0         	call	_HMI_SetNumber	;wreg free
  9793                           
  9794                           ;Events.c: 67: HMI_SetButton( j & 3 );
  9795  015E26  0100               	movlb	0	; () banked
  9796  015E28  51E2               	movf	Event_TestButton@j& (0+255),w,b
  9797  015E2A  0B03               	andlw	3
  9798  015E2C  EC93  F0A5         	call	_HMI_SetButton
  9799  015E30                     l1873:
  9800                           
  9801                           ;Events.c: 68: }
  9802                           ;Events.c: 72: LED_Toggle(eLED1);
  9803  015E30  0E00               	movlw	0
  9804  015E32  EC4E  F0AD         	call	_LED_Toggle
  9805  015E36  0012               	return		;funcret
  9806  015E38                     __end_of_Event_TestButton:
  9807                           	opt stack 0
  9808                           tosu	equ	0xFFF
  9809                           tosh	equ	0xFFE
  9810                           tosl	equ	0xFFD
  9811                           pclath	equ	0xFFA
  9812                           tblptru	equ	0xFF8
  9813                           tblptrh	equ	0xFF7
  9814                           tblptrl	equ	0xFF6
  9815                           tablat	equ	0xFF5
  9816                           prodh	equ	0xFF4
  9817                           prodl	equ	0xFF3
  9818                           intcon	equ	0xFF2
  9819                           postinc0	equ	0xFEE
  9820                           wreg	equ	0xFE8
  9821                           indf1	equ	0xFE7
  9822                           postdec1	equ	0xFE5
  9823                           fsr1h	equ	0xFE2
  9824                           fsr1l	equ	0xFE1
  9825                           indf2	equ	0xFDF
  9826                           postinc2	equ	0xFDE
  9827                           postdec2	equ	0xFDD
  9828                           fsr2h	equ	0xFDA
  9829                           fsr2l	equ	0xFD9
  9830                           status	equ	0xFD8
  9831                           
  9832 ;; *************** function _HMI_SetNumber *****************
  9833 ;; Defined at:
  9834 ;;		line 221 in file "HMI.c"
  9835 ;; Parameters:    Size  Location     Type
  9836 ;;  pInput          2   22[BANK0 ] int 
  9837 ;; Auto vars:     Size  Location     Type
  9838 ;;		None
  9839 ;; Return value:  Size  Location     Type
  9840 ;;                  1    wreg      void 
  9841 ;; Registers used:
  9842 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9843 ;; Tracked objects:
  9844 ;;		On entry : 0/0
  9845 ;;		On exit  : 0/0
  9846 ;;		Unchanged: 0/0
  9847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9848 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9851 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9852 ;;Total ram usage:        2 bytes
  9853 ;; Hardware stack levels used:    1
  9854 ;; Hardware stack levels required when called:    9
  9855 ;; This function calls:
  9856 ;;		_HMI_SetSegments
  9857 ;;		_itos
  9858 ;; This function is called by:
  9859 ;;		_Event_TestButton
  9860 ;;		_mode1
  9861 ;;		_mode4
  9862 ;;		_Event_HMI_UpButton
  9863 ;;		_Event_HMI_DownButton
  9864 ;; This function uses a non-reentrant model
  9865 ;;
  9866                           
  9867                           	psect	text40
  9868  016094                     __ptext40:
  9869                           	opt stack 0
  9870  016094                     _HMI_SetNumber:
  9871                           	opt stack 20
  9872                           
  9873                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
  9874                           
  9875                           ;incstack = 0
  9876  016094  C076  F06C         	movff	HMI_SetNumber@pInput,itos@input
  9877  016098  C077  F06D         	movff	HMI_SetNumber@pInput+1,itos@input+1
  9878  01609C  0E28               	movlw	low _HMIBoard
  9879  01609E  0100               	movlb	0	; () banked
  9880  0160A0  6F6E               	movwf	itos@destination& (0+255),b
  9881  0160A2  0E03               	movlw	high _HMIBoard
  9882  0160A4  0100               	movlb	0	; () banked
  9883  0160A6  6F6F               	movwf	(itos@destination+1)& (0+255),b
  9884  0160A8  EC64  F09D         	call	_itos	;wreg free
  9885                           
  9886                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
  9887  0160AC  0E28               	movlw	low _HMIBoard
  9888  0160AE  0100               	movlb	0	; () banked
  9889  0160B0  6F61               	movwf	HMI_SetSegments@pString& (0+255),b
  9890  0160B2  0E03               	movlw	high _HMIBoard
  9891  0160B4  0100               	movlb	0	; () banked
  9892  0160B6  6F62               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
  9893  0160B8  ECF9  F0A0         	call	_HMI_SetSegments	;wreg free
  9894  0160BC  0012               	return		;funcret
  9895  0160BE                     __end_of_HMI_SetNumber:
  9896                           	opt stack 0
  9897                           tosu	equ	0xFFF
  9898                           tosh	equ	0xFFE
  9899                           tosl	equ	0xFFD
  9900                           pclath	equ	0xFFA
  9901                           tblptru	equ	0xFF8
  9902                           tblptrh	equ	0xFF7
  9903                           tblptrl	equ	0xFF6
  9904                           tablat	equ	0xFF5
  9905                           prodh	equ	0xFF4
  9906                           prodl	equ	0xFF3
  9907                           intcon	equ	0xFF2
  9908                           postinc0	equ	0xFEE
  9909                           wreg	equ	0xFE8
  9910                           indf1	equ	0xFE7
  9911                           postdec1	equ	0xFE5
  9912                           fsr1h	equ	0xFE2
  9913                           fsr1l	equ	0xFE1
  9914                           indf2	equ	0xFDF
  9915                           postinc2	equ	0xFDE
  9916                           postdec2	equ	0xFDD
  9917                           fsr2h	equ	0xFDA
  9918                           fsr2l	equ	0xFD9
  9919                           status	equ	0xFD8
  9920                           
  9921 ;; *************** function _itos *****************
  9922 ;; Defined at:
  9923 ;;		line 369 in file "Library/Types.c"
  9924 ;; Parameters:    Size  Location     Type
  9925 ;;  input           2   12[BANK0 ] unsigned short 
  9926 ;;  destination     2   14[BANK0 ] PTR unsigned char 
  9927 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  9928 ;; Auto vars:     Size  Location     Type
  9929 ;;  Out             2   20[BANK0 ] unsigned short 
  9930 ;;  Length          2   18[BANK0 ] unsigned short 
  9931 ;;  Data            2   16[BANK0 ] PTR unsigned char 
  9932 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  9933 ;; Return value:  Size  Location     Type
  9934 ;;                  1    wreg      void 
  9935 ;; Registers used:
  9936 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9937 ;; Tracked objects:
  9938 ;;		On entry : 0/0
  9939 ;;		On exit  : 0/0
  9940 ;;		Unchanged: 0/0
  9941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9942 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9943 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9945 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9946 ;;Total ram usage:       10 bytes
  9947 ;; Hardware stack levels used:    1
  9948 ;; Hardware stack levels required when called:    8
  9949 ;; This function calls:
  9950 ;;		___lwdiv
  9951 ;;		___lwmod
  9952 ;;		_reverse
  9953 ;; This function is called by:
  9954 ;;		_HMI_SetNumber
  9955 ;; This function uses a non-reentrant model
  9956 ;;
  9957                           
  9958                           	psect	text41
  9959  013AC8                     __ptext41:
  9960                           	opt stack 0
  9961  013AC8                     _itos:
  9962                           	opt stack 20
  9963                           
  9964                           ;Types.c: 371: UINT16 Out = input;
  9965                           
  9966                           ;incstack = 0
  9967  013AC8  C06C  F074         	movff	itos@input,itos@Out
  9968  013ACC  C06D  F075         	movff	itos@input+1,itos@Out+1
  9969                           
  9970                           ;Types.c: 372: UINT16 Length = 0;
  9971  013AD0  0E00               	movlw	0
  9972  013AD2  0100               	movlb	0	; () banked
  9973  013AD4  6F73               	movwf	(itos@Length+1)& (0+255),b
  9974  013AD6  0E00               	movlw	0
  9975  013AD8  6F72               	movwf	itos@Length& (0+255),b
  9976                           
  9977                           ; BSR set to: 0
  9978                           ;Types.c: 373: char *Data = destination;
  9979  013ADA  C06E  F070         	movff	itos@destination,itos@Data
  9980  013ADE  C06F  F071         	movff	itos@destination+1,itos@Data+1
  9981                           
  9982                           ; BSR set to: 0
  9983                           ;Types.c: 374: if(Out == 0)
  9984  013AE2  0100               	movlb	0	; () banked
  9985  013AE4  5174               	movf	itos@Out& (0+255),w,b
  9986  013AE6  0100               	movlb	0	; () banked
  9987  013AE8  1175               	iorwf	(itos@Out+1)& (0+255),w,b
  9988  013AEA  A4D8               	btfss	status,2,c
  9989  013AEC  D034               	goto	l929
  9990                           
  9991                           ; BSR set to: 0
  9992                           ;Types.c: 375: {
  9993                           ;Types.c: 376: Data[0] = (UINT16)'0';
  9994  013AEE  C070  FFD9         	movff	itos@Data,fsr2l
  9995  013AF2  C071  FFDA         	movff	itos@Data+1,fsr2h
  9996  013AF6  0E30               	movlw	48
  9997  013AF8  6EDF               	movwf	indf2,c
  9998                           
  9999                           ; BSR set to: 0
 10000                           ;Types.c: 377: Length = 1;
 10001  013AFA  0E00               	movlw	0
 10002  013AFC  0100               	movlb	0	; () banked
 10003  013AFE  6F73               	movwf	(itos@Length+1)& (0+255),b
 10004  013B00  0E01               	movlw	1
 10005  013B02  6F72               	movwf	itos@Length& (0+255),b
 10006                           
 10007                           ;Types.c: 378: }
 10008  013B04  D040               	goto	l928
 10009  013B06                     
 10010                           ; BSR set to: 0
 10011                           ;Types.c: 382: {
 10012                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
 10013                           
 10014                           ; BSR set to: 0
 10015  013B06  C074  F067         	movff	itos@Out,___lwmod@dividend
 10016  013B0A  C075  F068         	movff	itos@Out+1,___lwmod@dividend+1
 10017  013B0E  0E00               	movlw	0
 10018  013B10  0100               	movlb	0	; () banked
 10019  013B12  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
 10020  013B14  0E0A               	movlw	10
 10021  013B16  6F69               	movwf	___lwmod@divisor& (0+255),b
 10022  013B18  EC28  F0AB         	call	___lwmod	;wreg free
 10023  013B1C  0100               	movlb	0	; () banked
 10024  013B1E  5167               	movf	?___lwmod& (0+255),w,b
 10025  013B20  0F30               	addlw	48
 10026  013B22  C070  FFD9         	movff	itos@Data,fsr2l
 10027  013B26  C071  FFDA         	movff	itos@Data+1,fsr2h
 10028  013B2A  6EDF               	movwf	indf2,c
 10029                           
 10030                           ; BSR set to: 0
 10031                           ;Types.c: 384: Out /= 10;
 10032  013B2C  C074  F060         	movff	itos@Out,___lwdiv@dividend
 10033  013B30  C075  F061         	movff	itos@Out+1,___lwdiv@dividend+1
 10034  013B34  0E00               	movlw	0
 10035  013B36  0100               	movlb	0	; () banked
 10036  013B38  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
 10037  013B3A  0E0A               	movlw	10
 10038  013B3C  6F62               	movwf	___lwdiv@divisor& (0+255),b
 10039  013B3E  ECEE  F0A7         	call	___lwdiv	;wreg free
 10040  013B42  C060  F074         	movff	?___lwdiv,itos@Out
 10041  013B46  C061  F075         	movff	?___lwdiv+1,itos@Out+1
 10042                           
 10043                           ;Types.c: 385: Length ++;
 10044  013B4A  0100               	movlb	0	; () banked
 10045  013B4C  4B72               	infsnz	itos@Length& (0+255),f,b
 10046  013B4E  2B73               	incf	(itos@Length+1)& (0+255),f,b
 10047                           
 10048                           ; BSR set to: 0
 10049                           ;Types.c: 386: Data++;
 10050  013B50  0100               	movlb	0	; () banked
 10051  013B52  4B70               	infsnz	itos@Data& (0+255),f,b
 10052  013B54  2B71               	incf	(itos@Data+1)& (0+255),f,b
 10053  013B56                     l929:
 10054                           
 10055                           ; BSR set to: 0
 10056                           
 10057                           ; BSR set to: 0
 10058  013B56  0100               	movlb	0	; () banked
 10059  013B58  5174               	movf	itos@Out& (0+255),w,b
 10060  013B5A  0100               	movlb	0	; () banked
 10061  013B5C  1175               	iorwf	(itos@Out+1)& (0+255),w,b
 10062  013B5E  B4D8               	btfsc	status,2,c
 10063  013B60  D008               	goto	u8920
 10064                           
 10065                           ; BSR set to: 0
 10066  013B62  0100               	movlb	0	; () banked
 10067  013B64  5173               	movf	(itos@Length+1)& (0+255),w,b
 10068  013B66  E105               	bnz	l12243
 10069  013B68  0E06               	movlw	6
 10070  013B6A  0100               	movlb	0	; () banked
 10071  013B6C  5D72               	subwf	itos@Length& (0+255),w,b
 10072  013B6E  A0D8               	btfss	status,0,c
 10073  013B70  D7CA               	goto	l930
 10074  013B72                     u8920:
 10075  013B72                     l12243:
 10076                           
 10077                           ; BSR set to: 0
 10078                           ;Types.c: 387: }
 10079                           ;Types.c: 388: reverse(destination, Length);
 10080  013B72  C06E  F060         	movff	itos@destination,reverse@input
 10081  013B76  C06F  F061         	movff	itos@destination+1,reverse@input+1
 10082  013B7A  C072  F062         	movff	itos@Length,reverse@length
 10083  013B7E  C073  F063         	movff	itos@Length+1,reverse@length+1
 10084  013B82  EC85  F0A9         	call	_reverse	;wreg free
 10085  013B86                     l928:
 10086                           
 10087                           ;Types.c: 389: }
 10088                           ;Types.c: 390: destination[Length] = '\0';
 10089  013B86  0100               	movlb	0	; () banked
 10090  013B88  5172               	movf	itos@Length& (0+255),w,b
 10091  013B8A  0100               	movlb	0	; () banked
 10092  013B8C  256E               	addwf	itos@destination& (0+255),w,b
 10093  013B8E  6ED9               	movwf	fsr2l,c
 10094  013B90  0100               	movlb	0	; () banked
 10095  013B92  5173               	movf	(itos@Length+1)& (0+255),w,b
 10096  013B94  0100               	movlb	0	; () banked
 10097  013B96  216F               	addwfc	(itos@destination+1)& (0+255),w,b
 10098  013B98  6EDA               	movwf	fsr2h,c
 10099  013B9A  0E00               	movlw	0
 10100  013B9C  6EDF               	movwf	indf2,c
 10101                           
 10102                           ; BSR set to: 0
 10103  013B9E  0012               	return		;funcret
 10104  013BA0                     __end_of_itos:
 10105                           	opt stack 0
 10106                           tosu	equ	0xFFF
 10107                           tosh	equ	0xFFE
 10108                           tosl	equ	0xFFD
 10109                           pclath	equ	0xFFA
 10110                           tblptru	equ	0xFF8
 10111                           tblptrh	equ	0xFF7
 10112                           tblptrl	equ	0xFF6
 10113                           tablat	equ	0xFF5
 10114                           prodh	equ	0xFF4
 10115                           prodl	equ	0xFF3
 10116                           intcon	equ	0xFF2
 10117                           postinc0	equ	0xFEE
 10118                           wreg	equ	0xFE8
 10119                           indf1	equ	0xFE7
 10120                           postdec1	equ	0xFE5
 10121                           fsr1h	equ	0xFE2
 10122                           fsr1l	equ	0xFE1
 10123                           indf2	equ	0xFDF
 10124                           postinc2	equ	0xFDE
 10125                           postdec2	equ	0xFDD
 10126                           fsr2h	equ	0xFDA
 10127                           fsr2l	equ	0xFD9
 10128                           status	equ	0xFD8
 10129                           
 10130 ;; *************** function _reverse *****************
 10131 ;; Defined at:
 10132 ;;		line 357 in file "Library/Types.c"
 10133 ;; Parameters:    Size  Location     Type
 10134 ;;  input           2    0[BANK0 ] PTR unsigned char 
 10135 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 10136 ;;  length          2    2[BANK0 ] unsigned short 
 10137 ;; Auto vars:     Size  Location     Type
 10138 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
 10139 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 10140 ;;  tempVar         1    4[BANK0 ] unsigned char 
 10141 ;; Return value:  Size  Location     Type
 10142 ;;                  1    wreg      void 
 10143 ;; Registers used:
 10144 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 10145 ;; Tracked objects:
 10146 ;;		On entry : 0/0
 10147 ;;		On exit  : 0/0
 10148 ;;		Unchanged: 0/0
 10149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10150 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10151 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10153 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10154 ;;Total ram usage:        7 bytes
 10155 ;; Hardware stack levels used:    1
 10156 ;; Hardware stack levels required when called:    7
 10157 ;; This function calls:
 10158 ;;		Nothing
 10159 ;; This function is called by:
 10160 ;;		_itos
 10161 ;; This function uses a non-reentrant model
 10162 ;;
 10163                           
 10164                           	psect	text42
 10165  01530A                     __ptext42:
 10166                           	opt stack 0
 10167  01530A                     _reverse:
 10168                           	opt stack 20
 10169                           
 10170                           ;Types.c: 359: char tempVar,
 10171                           ;Types.c: 360: *iterator = input + length;
 10172                           
 10173                           ; BSR set to: 0
 10174                           ;incstack = 0
 10175  01530A  0100               	movlb	0	; () banked
 10176  01530C  5162               	movf	reverse@length& (0+255),w,b
 10177  01530E  0100               	movlb	0	; () banked
 10178  015310  2560               	addwf	reverse@input& (0+255),w,b
 10179  015312  0100               	movlb	0	; () banked
 10180  015314  6F65               	movwf	reverse@iterator& (0+255),b
 10181  015316  0100               	movlb	0	; () banked
 10182  015318  5163               	movf	(reverse@length+1)& (0+255),w,b
 10183  01531A  0100               	movlb	0	; () banked
 10184  01531C  2161               	addwfc	(reverse@input+1)& (0+255),w,b
 10185  01531E  0100               	movlb	0	; () banked
 10186  015320  6F66               	movwf	(reverse@iterator+1)& (0+255),b
 10187                           
 10188                           ;Types.c: 362: while ( --iterator > input )
 10189  015322  D01A               	goto	l921
 10190  015324                     
 10191                           ; BSR set to: 0
 10192                           ;Types.c: 363: {
 10193                           ;Types.c: 364: tempVar = *input;
 10194                           
 10195                           ; BSR set to: 0
 10196  015324  C060  FFD9         	movff	reverse@input,fsr2l
 10197  015328  C061  FFDA         	movff	reverse@input+1,fsr2h
 10198  01532C  50DF               	movf	indf2,w,c
 10199  01532E  0100               	movlb	0	; () banked
 10200  015330  6F64               	movwf	reverse@tempVar& (0+255),b
 10201                           
 10202                           ; BSR set to: 0
 10203                           ;Types.c: 365: *input++=*iterator;
 10204  015332  C065  FFD9         	movff	reverse@iterator,fsr2l
 10205  015336  C066  FFDA         	movff	reverse@iterator+1,fsr2h
 10206  01533A  C060  FFE1         	movff	reverse@input,fsr1l
 10207  01533E  C061  FFE2         	movff	reverse@input+1,fsr1h
 10208  015342  CFDF FFE7          	movff	indf2,indf1
 10209                           
 10210                           ; BSR set to: 0
 10211  015346  0100               	movlb	0	; () banked
 10212  015348  4B60               	infsnz	reverse@input& (0+255),f,b
 10213  01534A  2B61               	incf	(reverse@input+1)& (0+255),f,b
 10214                           
 10215                           ; BSR set to: 0
 10216                           ;Types.c: 366: *iterator=tempVar;
 10217  01534C  C065  FFD9         	movff	reverse@iterator,fsr2l
 10218  015350  C066  FFDA         	movff	reverse@iterator+1,fsr2h
 10219  015354  C064  FFDF         	movff	reverse@tempVar,indf2
 10220  015358                     l921:
 10221                           
 10222                           ; BSR set to: 0
 10223                           
 10224                           ; BSR set to: 0
 10225  015358  0100               	movlb	0	; () banked
 10226  01535A  0765               	decf	reverse@iterator& (0+255),f,b
 10227  01535C  A0D8               	btfss	status,0,c
 10228  01535E  0766               	decf	(reverse@iterator+1)& (0+255),f,b
 10229  015360  0100               	movlb	0	; () banked
 10230  015362  5165               	movf	reverse@iterator& (0+255),w,b
 10231  015364  0100               	movlb	0	; () banked
 10232  015366  5D60               	subwf	reverse@input& (0+255),w,b
 10233  015368  0100               	movlb	0	; () banked
 10234  01536A  5166               	movf	(reverse@iterator+1)& (0+255),w,b
 10235  01536C  0100               	movlb	0	; () banked
 10236  01536E  5961               	subwfb	(reverse@input+1)& (0+255),w,b
 10237  015370  B0D8               	btfsc	status,0,c
 10238  015372  0012               	return	
 10239  015374  D7D7               	goto	l922
 10240  015376                     __end_of_reverse:
 10241                           	opt stack 0
 10242                           tosu	equ	0xFFF
 10243                           tosh	equ	0xFFE
 10244                           tosl	equ	0xFFD
 10245                           pclath	equ	0xFFA
 10246                           tblptru	equ	0xFF8
 10247                           tblptrh	equ	0xFF7
 10248                           tblptrl	equ	0xFF6
 10249                           tablat	equ	0xFF5
 10250                           prodh	equ	0xFF4
 10251                           prodl	equ	0xFF3
 10252                           intcon	equ	0xFF2
 10253                           postinc0	equ	0xFEE
 10254                           wreg	equ	0xFE8
 10255                           indf1	equ	0xFE7
 10256                           postdec1	equ	0xFE5
 10257                           fsr1h	equ	0xFE2
 10258                           fsr1l	equ	0xFE1
 10259                           indf2	equ	0xFDF
 10260                           postinc2	equ	0xFDE
 10261                           postdec2	equ	0xFDD
 10262                           fsr2h	equ	0xFDA
 10263                           fsr2l	equ	0xFD9
 10264                           status	equ	0xFD8
 10265                           
 10266 ;; *************** function ___lwmod *****************
 10267 ;; Defined at:
 10268 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
 10269 ;; Parameters:    Size  Location     Type
 10270 ;;  dividend        2    7[BANK0 ] unsigned int 
 10271 ;;  divisor         2    9[BANK0 ] unsigned int 
 10272 ;; Auto vars:     Size  Location     Type
 10273 ;;  counter         1   11[BANK0 ] unsigned char 
 10274 ;; Return value:  Size  Location     Type
 10275 ;;                  2    7[BANK0 ] unsigned int 
 10276 ;; Registers used:
 10277 ;;		wreg, status,2, status,0
 10278 ;; Tracked objects:
 10279 ;;		On entry : 0/0
 10280 ;;		On exit  : 0/0
 10281 ;;		Unchanged: 0/0
 10282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10283 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10284 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10286 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10287 ;;Total ram usage:        5 bytes
 10288 ;; Hardware stack levels used:    1
 10289 ;; Hardware stack levels required when called:    7
 10290 ;; This function calls:
 10291 ;;		Nothing
 10292 ;; This function is called by:
 10293 ;;		_itos
 10294 ;;		_printf
 10295 ;; This function uses a non-reentrant model
 10296 ;;
 10297                           
 10298                           	psect	text43
 10299  015650                     __ptext43:
 10300                           	opt stack 0
 10301  015650                     ___lwmod:
 10302                           	opt stack 21
 10303                           
 10304                           ; BSR set to: 0
 10305                           ;incstack = 0
 10306  015650  0100               	movlb	0	; () banked
 10307  015652  5169               	movf	___lwmod@divisor& (0+255),w,b
 10308  015654  0100               	movlb	0	; () banked
 10309  015656  116A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 10310  015658  B4D8               	btfsc	status,2,c
 10311  01565A  D026               	goto	l2850
 10312                           
 10313                           ; BSR set to: 0
 10314  01565C  0E01               	movlw	1
 10315  01565E  0100               	movlb	0	; () banked
 10316  015660  6F6B               	movwf	___lwmod@counter& (0+255),b
 10317  015662  D006               	goto	l2845
 10318  015664                     
 10319                           ; BSR set to: 0
 10320                           
 10321                           ; BSR set to: 0
 10322  015664  0100               	movlb	0	; () banked
 10323  015666  90D8               	bcf	status,0,c
 10324  015668  3769               	rlcf	___lwmod@divisor& (0+255),f,b
 10325  01566A  376A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 10326  01566C  0100               	movlb	0	; () banked
 10327  01566E  2B6B               	incf	___lwmod@counter& (0+255),f,b
 10328  015670                     l2845:
 10329                           
 10330                           ; BSR set to: 0
 10331                           
 10332                           ; BSR set to: 0
 10333  015670  0100               	movlb	0	; () banked
 10334  015672  AF6A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 10335  015674  D7F7               	goto	l2846
 10336  015676                     u8830:
 10337                           
 10338                           ; BSR set to: 0
 10339                           
 10340                           ; BSR set to: 0
 10341                           
 10342                           ; BSR set to: 0
 10343  015676  0100               	movlb	0	; () banked
 10344  015678  5169               	movf	___lwmod@divisor& (0+255),w,b
 10345  01567A  0100               	movlb	0	; () banked
 10346  01567C  5D67               	subwf	___lwmod@dividend& (0+255),w,b
 10347  01567E  0100               	movlb	0	; () banked
 10348  015680  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 10349  015682  0100               	movlb	0	; () banked
 10350  015684  5968               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 10351  015686  A0D8               	btfss	status,0,c
 10352  015688  D008               	goto	l2849
 10353                           
 10354                           ; BSR set to: 0
 10355  01568A  0100               	movlb	0	; () banked
 10356  01568C  5169               	movf	___lwmod@divisor& (0+255),w,b
 10357  01568E  0100               	movlb	0	; () banked
 10358  015690  5F67               	subwf	___lwmod@dividend& (0+255),f,b
 10359  015692  0100               	movlb	0	; () banked
 10360  015694  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 10361  015696  0100               	movlb	0	; () banked
 10362  015698  5B68               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 10363  01569A                     l2849:
 10364                           
 10365                           ; BSR set to: 0
 10366                           
 10367                           ; BSR set to: 0
 10368  01569A  0100               	movlb	0	; () banked
 10369  01569C  90D8               	bcf	status,0,c
 10370  01569E  336A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 10371  0156A0  3369               	rrcf	___lwmod@divisor& (0+255),f,b
 10372                           
 10373                           ; BSR set to: 0
 10374  0156A2  0100               	movlb	0	; () banked
 10375  0156A4  2F6B               	decfsz	___lwmod@counter& (0+255),f,b
 10376  0156A6  D7E7               	goto	u8830
 10377  0156A8                     l2850:
 10378                           
 10379                           ; BSR set to: 0
 10380                           
 10381                           ; BSR set to: 0
 10382  0156A8  C067  F067         	movff	___lwmod@dividend,?___lwmod
 10383  0156AC  C068  F068         	movff	___lwmod@dividend+1,?___lwmod+1
 10384                           
 10385                           ; BSR set to: 0
 10386  0156B0  0012               	return		;funcret
 10387  0156B2                     __end_of___lwmod:
 10388                           	opt stack 0
 10389                           tosu	equ	0xFFF
 10390                           tosh	equ	0xFFE
 10391                           tosl	equ	0xFFD
 10392                           pclath	equ	0xFFA
 10393                           tblptru	equ	0xFF8
 10394                           tblptrh	equ	0xFF7
 10395                           tblptrl	equ	0xFF6
 10396                           tablat	equ	0xFF5
 10397                           prodh	equ	0xFF4
 10398                           prodl	equ	0xFF3
 10399                           intcon	equ	0xFF2
 10400                           postinc0	equ	0xFEE
 10401                           wreg	equ	0xFE8
 10402                           indf1	equ	0xFE7
 10403                           postdec1	equ	0xFE5
 10404                           fsr1h	equ	0xFE2
 10405                           fsr1l	equ	0xFE1
 10406                           indf2	equ	0xFDF
 10407                           postinc2	equ	0xFDE
 10408                           postdec2	equ	0xFDD
 10409                           fsr2h	equ	0xFDA
 10410                           fsr2l	equ	0xFD9
 10411                           status	equ	0xFD8
 10412                           
 10413 ;; *************** function ___lwdiv *****************
 10414 ;; Defined at:
 10415 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
 10416 ;; Parameters:    Size  Location     Type
 10417 ;;  dividend        2    0[BANK0 ] unsigned int 
 10418 ;;  divisor         2    2[BANK0 ] unsigned int 
 10419 ;; Auto vars:     Size  Location     Type
 10420 ;;  quotient        2    5[BANK0 ] unsigned int 
 10421 ;;  counter         1    4[BANK0 ] unsigned char 
 10422 ;; Return value:  Size  Location     Type
 10423 ;;                  2    0[BANK0 ] unsigned int 
 10424 ;; Registers used:
 10425 ;;		wreg, status,2, status,0
 10426 ;; Tracked objects:
 10427 ;;		On entry : 0/0
 10428 ;;		On exit  : 0/0
 10429 ;;		Unchanged: 0/0
 10430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10431 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10432 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10434 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10435 ;;Total ram usage:        7 bytes
 10436 ;; Hardware stack levels used:    1
 10437 ;; Hardware stack levels required when called:    7
 10438 ;; This function calls:
 10439 ;;		Nothing
 10440 ;; This function is called by:
 10441 ;;		_itos
 10442 ;;		_printf
 10443 ;; This function uses a non-reentrant model
 10444 ;;
 10445                           
 10446                           	psect	text44
 10447  014FDC                     __ptext44:
 10448                           	opt stack 0
 10449  014FDC                     ___lwdiv:
 10450                           	opt stack 21
 10451                           
 10452                           ; BSR set to: 0
 10453                           ;incstack = 0
 10454  014FDC  0E00               	movlw	0
 10455  014FDE  0100               	movlb	0	; () banked
 10456  014FE0  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 10457  014FE2  0E00               	movlw	0
 10458  014FE4  6F65               	movwf	___lwdiv@quotient& (0+255),b
 10459                           
 10460                           ; BSR set to: 0
 10461  014FE6  0100               	movlb	0	; () banked
 10462  014FE8  5162               	movf	___lwdiv@divisor& (0+255),w,b
 10463  014FEA  0100               	movlb	0	; () banked
 10464  014FEC  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 10465  014FEE  B4D8               	btfsc	status,2,c
 10466  014FF0  D02C               	goto	l2840
 10467                           
 10468                           ; BSR set to: 0
 10469  014FF2  0E01               	movlw	1
 10470  014FF4  0100               	movlb	0	; () banked
 10471  014FF6  6F64               	movwf	___lwdiv@counter& (0+255),b
 10472  014FF8  D006               	goto	l2835
 10473  014FFA                     
 10474                           ; BSR set to: 0
 10475                           
 10476                           ; BSR set to: 0
 10477  014FFA  0100               	movlb	0	; () banked
 10478  014FFC  90D8               	bcf	status,0,c
 10479  014FFE  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 10480  015000  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 10481  015002  0100               	movlb	0	; () banked
 10482  015004  2B64               	incf	___lwdiv@counter& (0+255),f,b
 10483  015006                     l2835:
 10484                           
 10485                           ; BSR set to: 0
 10486                           
 10487                           ; BSR set to: 0
 10488  015006  0100               	movlb	0	; () banked
 10489  015008  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 10490  01500A  D7F7               	goto	l2836
 10491  01500C                     u8800:
 10492                           
 10493                           ; BSR set to: 0
 10494                           
 10495                           ; BSR set to: 0
 10496                           
 10497                           ; BSR set to: 0
 10498  01500C  0100               	movlb	0	; () banked
 10499  01500E  90D8               	bcf	status,0,c
 10500  015010  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 10501  015012  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 10502                           
 10503                           ; BSR set to: 0
 10504  015014  0100               	movlb	0	; () banked
 10505  015016  5162               	movf	___lwdiv@divisor& (0+255),w,b
 10506  015018  0100               	movlb	0	; () banked
 10507  01501A  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 10508  01501C  0100               	movlb	0	; () banked
 10509  01501E  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 10510  015020  0100               	movlb	0	; () banked
 10511  015022  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 10512  015024  A0D8               	btfss	status,0,c
 10513  015026  D00A               	goto	l2839
 10514                           
 10515                           ; BSR set to: 0
 10516  015028  0100               	movlb	0	; () banked
 10517  01502A  5162               	movf	___lwdiv@divisor& (0+255),w,b
 10518  01502C  0100               	movlb	0	; () banked
 10519  01502E  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 10520  015030  0100               	movlb	0	; () banked
 10521  015032  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 10522  015034  0100               	movlb	0	; () banked
 10523  015036  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 10524                           
 10525                           ; BSR set to: 0
 10526  015038  0100               	movlb	0	; () banked
 10527  01503A  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 10528  01503C                     l2839:
 10529                           
 10530                           ; BSR set to: 0
 10531                           
 10532                           ; BSR set to: 0
 10533  01503C  0100               	movlb	0	; () banked
 10534  01503E  90D8               	bcf	status,0,c
 10535  015040  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 10536  015042  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 10537                           
 10538                           ; BSR set to: 0
 10539  015044  0100               	movlb	0	; () banked
 10540  015046  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 10541  015048  D7E1               	goto	u8800
 10542  01504A                     l2840:
 10543                           
 10544                           ; BSR set to: 0
 10545                           
 10546                           ; BSR set to: 0
 10547  01504A  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 10548  01504E  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 10549                           
 10550                           ; BSR set to: 0
 10551  015052  0012               	return		;funcret
 10552  015054                     __end_of___lwdiv:
 10553                           	opt stack 0
 10554                           tosu	equ	0xFFF
 10555                           tosh	equ	0xFFE
 10556                           tosl	equ	0xFFD
 10557                           pclath	equ	0xFFA
 10558                           tblptru	equ	0xFF8
 10559                           tblptrh	equ	0xFF7
 10560                           tblptrl	equ	0xFF6
 10561                           tablat	equ	0xFF5
 10562                           prodh	equ	0xFF4
 10563                           prodl	equ	0xFF3
 10564                           intcon	equ	0xFF2
 10565                           postinc0	equ	0xFEE
 10566                           wreg	equ	0xFE8
 10567                           indf1	equ	0xFE7
 10568                           postdec1	equ	0xFE5
 10569                           fsr1h	equ	0xFE2
 10570                           fsr1l	equ	0xFE1
 10571                           indf2	equ	0xFDF
 10572                           postinc2	equ	0xFDE
 10573                           postdec2	equ	0xFDD
 10574                           fsr2h	equ	0xFDA
 10575                           fsr2l	equ	0xFD9
 10576                           status	equ	0xFD8
 10577                           
 10578 ;; *************** function _HMI_SetSegments *****************
 10579 ;; Defined at:
 10580 ;;		line 226 in file "HMI.c"
 10581 ;; Parameters:    Size  Location     Type
 10582 ;;  pString         2    1[BANK0 ] PTR unsigned char 
 10583 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 10584 ;; Auto vars:     Size  Location     Type
 10585 ;;  in              2    4[BANK0 ] unsigned short 
 10586 ;; Return value:  Size  Location     Type
 10587 ;;                  1    wreg      void 
 10588 ;; Registers used:
 10589 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10590 ;; Tracked objects:
 10591 ;;		On entry : 0/0
 10592 ;;		On exit  : 0/0
 10593 ;;		Unchanged: 0/0
 10594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10595 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10596 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10597 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10598 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10599 ;;Total ram usage:        5 bytes
 10600 ;; Hardware stack levels used:    1
 10601 ;; Hardware stack levels required when called:    8
 10602 ;; This function calls:
 10603 ;;		_ToSegment
 10604 ;; This function is called by:
 10605 ;;		_HMI_SetNumber
 10606 ;; This function uses a non-reentrant model
 10607 ;;
 10608                           
 10609                           	psect	text45
 10610  0141F2                     __ptext45:
 10611                           	opt stack 0
 10612  0141F2                     _HMI_SetSegments:
 10613                           	opt stack 20
 10614                           
 10615                           ;HMI.c: 228: UINT16 in=0;
 10616                           
 10617                           ; BSR set to: 0
 10618                           ;incstack = 0
 10619  0141F2  0E00               	movlw	0
 10620  0141F4  0100               	movlb	0	; () banked
 10621  0141F6  6F65               	movwf	(HMI_SetSegments@in+1)& (0+255),b
 10622  0141F8  0E00               	movlw	0
 10623  0141FA  6F64               	movwf	HMI_SetSegments@in& (0+255),b
 10624                           
 10625                           ;HMI.c: 229: while(*pString)
 10626  0141FC  D038               	goto	l1202
 10627  0141FE                     
 10628                           ; BSR set to: 0
 10629                           ;HMI.c: 230: {
 10630                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
 10631                           
 10632                           ; BSR set to: 0
 10633  0141FE  0E28               	movlw	low _HMIBoard
 10634  014200  0100               	movlb	0	; () banked
 10635  014202  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 10636  014204  6ED9               	movwf	fsr2l,c
 10637  014206  0E03               	movlw	high _HMIBoard
 10638  014208  0100               	movlb	0	; () banked
 10639  01420A  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 10640  01420C  6EDA               	movwf	fsr2h,c
 10641  01420E  C061  FFE1         	movff	HMI_SetSegments@pString,fsr1l
 10642  014212  C062  FFE2         	movff	HMI_SetSegments@pString+1,fsr1h
 10643  014216  50E7               	movf	indf1,w,c
 10644  014218  ECE3  F08B         	call	_ToSegment
 10645  01421C  6EDF               	movwf	indf2,c
 10646                           
 10647                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
 10648  01421E  0E28               	movlw	low _HMIBoard
 10649  014220  0100               	movlb	0	; () banked
 10650  014222  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 10651  014224  6ED9               	movwf	fsr2l,c
 10652  014226  0E03               	movlw	high _HMIBoard
 10653  014228  0100               	movlb	0	; () banked
 10654  01422A  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 10655  01422C  6EDA               	movwf	fsr2h,c
 10656  01422E  0E80               	movlw	128
 10657  014230  18DE               	xorwf	postinc2,w,c
 10658  014232  A4D8               	btfss	status,2,c
 10659  014234  D00E               	goto	l1201
 10660                           
 10661                           ; BSR set to: 0
 10662                           ;HMI.c: 234: {
 10663                           ;HMI.c: 235: in--;
 10664  014236  0100               	movlb	0	; () banked
 10665  014238  0764               	decf	HMI_SetSegments@in& (0+255),f,b
 10666  01423A  A0D8               	btfss	status,0,c
 10667  01423C  0765               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
 10668                           
 10669                           ; BSR set to: 0
 10670                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
 10671  01423E  0E28               	movlw	low _HMIBoard
 10672  014240  0100               	movlb	0	; () banked
 10673  014242  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 10674  014244  6ED9               	movwf	fsr2l,c
 10675  014246  0E03               	movlw	high _HMIBoard
 10676  014248  0100               	movlb	0	; () banked
 10677  01424A  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 10678  01424C  6EDA               	movwf	fsr2h,c
 10679  01424E  0E00               	movlw	0
 10680  014250  8EDB               	bsf	plusw2,7,c
 10681  014252                     l1201:
 10682                           
 10683                           ; BSR set to: 0
 10684                           ;HMI.c: 237: }
 10685                           ;HMI.c: 239: pString++;
 10686                           
 10687                           ; BSR set to: 0
 10688  014252  0100               	movlb	0	; () banked
 10689  014254  4B61               	infsnz	HMI_SetSegments@pString& (0+255),f,b
 10690  014256  2B62               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
 10691                           
 10692                           ; BSR set to: 0
 10693                           ;HMI.c: 240: in++;
 10694  014258  0100               	movlb	0	; () banked
 10695  01425A  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
 10696  01425C  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 10697                           
 10698                           ; BSR set to: 0
 10699                           ;HMI.c: 241: if (in>=6)
 10700  01425E  0100               	movlb	0	; () banked
 10701  014260  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 10702  014262  E11A               	bnz	l12295
 10703  014264  0E06               	movlw	6
 10704  014266  0100               	movlb	0	; () banked
 10705  014268  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
 10706  01426A  B0D8               	btfsc	status,0,c
 10707  01426C  D015               	goto	l1204
 10708  01426E                     l1202:
 10709                           
 10710                           ; BSR set to: 0
 10711                           
 10712                           ; BSR set to: 0
 10713                           
 10714                           ; BSR set to: 0
 10715  01426E  C061  FFD9         	movff	HMI_SetSegments@pString,fsr2l
 10716  014272  C062  FFDA         	movff	HMI_SetSegments@pString+1,fsr2h
 10717  014276  50DF               	movf	indf2,w,c
 10718  014278  B4D8               	btfsc	status,2,c
 10719  01427A  D00E               	goto	l1204
 10720  01427C  D7C0               	goto	l1200
 10721  01427E                     
 10722                           ; BSR set to: 0
 10723                           ;HMI.c: 245: {
 10724                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
 10725                           
 10726                           ; BSR set to: 0
 10727  01427E  0E28               	movlw	low _HMIBoard
 10728  014280  0100               	movlb	0	; () banked
 10729  014282  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 10730  014284  6ED9               	movwf	fsr2l,c
 10731  014286  0E03               	movlw	high _HMIBoard
 10732  014288  0100               	movlb	0	; () banked
 10733  01428A  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 10734  01428C  6EDA               	movwf	fsr2h,c
 10735  01428E  0E00               	movlw	0
 10736  014290  6EDF               	movwf	indf2,c
 10737                           
 10738                           ; BSR set to: 0
 10739                           ;HMI.c: 247: in++;
 10740  014292  0100               	movlb	0	; () banked
 10741  014294  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
 10742  014296  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 10743  014298                     l1204:
 10744  014298                     l12295:
 10745                           
 10746                           ; BSR set to: 0
 10747  014298  0100               	movlb	0	; () banked
 10748  01429A  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 10749  01429C  E106               	bnz	l1207
 10750  01429E  0E06               	movlw	6
 10751  0142A0  0100               	movlb	0	; () banked
 10752  0142A2  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
 10753  0142A4  B0D8               	btfsc	status,0,c
 10754  0142A6  0012               	return	
 10755  0142A8  D7EA               	goto	l1205
 10756  0142AA                     l1207:
 10757                           
 10758                           ; BSR set to: 0
 10759  0142AA  0012               	return		;funcret
 10760  0142AC                     __end_of_HMI_SetSegments:
 10761                           	opt stack 0
 10762                           tosu	equ	0xFFF
 10763                           tosh	equ	0xFFE
 10764                           tosl	equ	0xFFD
 10765                           pclath	equ	0xFFA
 10766                           tblptru	equ	0xFF8
 10767                           tblptrh	equ	0xFF7
 10768                           tblptrl	equ	0xFF6
 10769                           tablat	equ	0xFF5
 10770                           prodh	equ	0xFF4
 10771                           prodl	equ	0xFF3
 10772                           intcon	equ	0xFF2
 10773                           postinc0	equ	0xFEE
 10774                           wreg	equ	0xFE8
 10775                           indf1	equ	0xFE7
 10776                           postdec1	equ	0xFE5
 10777                           fsr1h	equ	0xFE2
 10778                           fsr1l	equ	0xFE1
 10779                           indf2	equ	0xFDF
 10780                           postinc2	equ	0xFDE
 10781                           postdec2	equ	0xFDD
 10782                           plusw2	equ	0xFDB
 10783                           fsr2h	equ	0xFDA
 10784                           fsr2l	equ	0xFD9
 10785                           status	equ	0xFD8
 10786                           
 10787 ;; *************** function _ToSegment *****************
 10788 ;; Defined at:
 10789 ;;		line 284 in file "Library/Types.c"
 10790 ;; Parameters:    Size  Location     Type
 10791 ;;  pCHR            1    wreg     unsigned char 
 10792 ;; Auto vars:     Size  Location     Type
 10793 ;;  pCHR            1    0[BANK0 ] unsigned char 
 10794 ;; Return value:  Size  Location     Type
 10795 ;;                  1    wreg      unsigned char 
 10796 ;; Registers used:
 10797 ;;		wreg, status,2, status,0
 10798 ;; Tracked objects:
 10799 ;;		On entry : 0/0
 10800 ;;		On exit  : 0/0
 10801 ;;		Unchanged: 0/0
 10802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10804 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10806 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10807 ;;Total ram usage:        1 bytes
 10808 ;; Hardware stack levels used:    1
 10809 ;; Hardware stack levels required when called:    7
 10810 ;; This function calls:
 10811 ;;		Nothing
 10812 ;; This function is called by:
 10813 ;;		_HMI_SetSegments
 10814 ;; This function uses a non-reentrant model
 10815 ;;
 10816                           
 10817                           	psect	text46
 10818  0117C6                     __ptext46:
 10819                           	opt stack 0
 10820  0117C6                     _ToSegment:
 10821                           	opt stack 20
 10822                           
 10823                           ; BSR set to: 0
 10824                           ;incstack = 0
 10825                           ;ToSegment@pCHR stored from wreg
 10826  0117C6  0100               	movlb	0	; () banked
 10827  0117C8  6F60               	movwf	ToSegment@pCHR& (0+255),b
 10828                           
 10829                           ;Types.c: 286: switch(pCHR)
 10830  0117CA  D07E               	goto	l853
 10831  0117CC  0E3F               	movlw	63
 10832  0117CE  0012               	return	
 10833  0117D0  0E06               	movlw	6
 10834  0117D2  0012               	return	
 10835  0117D4  0E5B               	movlw	91
 10836  0117D6  0012               	return	
 10837  0117D8  0E4F               	movlw	79
 10838  0117DA  0012               	return	
 10839  0117DC  0E66               	movlw	102
 10840  0117DE  0012               	return	
 10841  0117E0  0E6D               	movlw	109
 10842  0117E2  0012               	return	
 10843  0117E4  0E7D               	movlw	125
 10844  0117E6  0012               	return	
 10845  0117E8  0E07               	movlw	7
 10846  0117EA  0012               	return	
 10847  0117EC  0E7F               	movlw	127
 10848  0117EE  0012               	return	
 10849  0117F0  0E6F               	movlw	111
 10850  0117F2  0012               	return	
 10851  0117F4  0E5F               	movlw	95
 10852  0117F6  0012               	return	
 10853  0117F8  0E7C               	movlw	124
 10854  0117FA  0012               	return	
 10855  0117FC  0E58               	movlw	88
 10856  0117FE  0012               	return	
 10857  011800  0E5E               	movlw	94
 10858  011802  0012               	return	
 10859  011804  0E7B               	movlw	123
 10860  011806  0012               	return	
 10861  011808  0E71               	movlw	113
 10862  01180A  0012               	return	
 10863  01180C  0E6F               	movlw	111
 10864  01180E  0012               	return	
 10865  011810  0E74               	movlw	116
 10866  011812  0012               	return	
 10867  011814  0E04               	movlw	4
 10868  011816  0012               	return	
 10869  011818  0E0E               	movlw	14
 10870  01181A  0012               	return	
 10871  01181C  0E7A               	movlw	122
 10872  01181E  0012               	return	
 10873  011820  0E06               	movlw	6
 10874  011822  0012               	return	
 10875  011824  0E14               	movlw	20
 10876  011826  0012               	return	
 10877  011828  0E54               	movlw	84
 10878  01182A  0012               	return	
 10879  01182C  0E5C               	movlw	92
 10880  01182E  0012               	return	
 10881  011830  0E73               	movlw	115
 10882  011832  0012               	return	
 10883  011834  0E67               	movlw	103
 10884  011836  0012               	return	
 10885  011838  0E50               	movlw	80
 10886  01183A  0012               	return	
 10887  01183C  0E6D               	movlw	109
 10888  01183E  0012               	return	
 10889  011840  0E78               	movlw	120
 10890  011842  0012               	return	
 10891  011844  0E1C               	movlw	28
 10892  011846  0012               	return	
 10893  011848  0E62               	movlw	98
 10894  01184A  0012               	return	
 10895  01184C  0E2A               	movlw	42
 10896  01184E  0012               	return	
 10897  011850  0E64               	movlw	100
 10898  011852  0012               	return	
 10899  011854  0E6E               	movlw	110
 10900  011856  0012               	return	
 10901  011858  0E5B               	movlw	91
 10902  01185A  0012               	return	
 10903  01185C  0E77               	movlw	119
 10904  01185E  0012               	return	
 10905  011860  0E7F               	movlw	127
 10906  011862  0012               	return	
 10907  011864  0E39               	movlw	57
 10908  011866  0012               	return	
 10909  011868  0E3F               	movlw	63
 10910  01186A  0012               	return	
 10911  01186C  0E79               	movlw	121
 10912  01186E  0012               	return	
 10913  011870  0E71               	movlw	113
 10914  011872  0012               	return	
 10915  011874  0E3D               	movlw	61
 10916  011876  0012               	return	
 10917  011878  0E76               	movlw	118
 10918  01187A  0012               	return	
 10919  01187C  0E06               	movlw	6
 10920  01187E  0012               	return	
 10921  011880  0E1E               	movlw	30
 10922  011882  0012               	return	
 10923  011884  0E57               	movlw	87
 10924  011886  0012               	return	
 10925  011888  0E38               	movlw	56
 10926  01188A  0012               	return	
 10927  01188C  0E76               	movlw	118
 10928  01188E  0012               	return	
 10929  011890  0E76               	movlw	118
 10930  011892  0012               	return	
 10931  011894  0E3F               	movlw	63
 10932  011896  0012               	return	
 10933  011898  0E73               	movlw	115
 10934  01189A  0012               	return	
 10935  01189C  0E3F               	movlw	63
 10936  01189E  0012               	return	
 10937  0118A0  0E77               	movlw	119
 10938  0118A2  0012               	return	
 10939  0118A4  0E6D               	movlw	109
 10940  0118A6  0012               	return	
 10941  0118A8  0E31               	movlw	49
 10942  0118AA  0012               	return	
 10943  0118AC  0E3E               	movlw	62
 10944  0118AE  0012               	return	
 10945  0118B0  0E3E               	movlw	62
 10946  0118B2  0012               	return	
 10947  0118B4  0E7E               	movlw	126
 10948  0118B6  0012               	return	
 10949  0118B8  0E76               	movlw	118
 10950  0118BA  0012               	return	
 10951  0118BC  0E66               	movlw	102
 10952  0118BE  0012               	return	
 10953  0118C0  0E5B               	movlw	91
 10954  0118C2  0012               	return	
 10955  0118C4  0E80               	movlw	128
 10956  0118C6  0012               	return	
 10957  0118C8                     l853:
 10958  0118C8  0100               	movlb	0	; () banked
 10959  0118CA  5160               	movf	ToSegment@pCHR& (0+255),w,b
 10960                           
 10961                           ; Switch size 1, requested type "space"
 10962                           ; Number of cases is 63, Range of values is 46 to 122
 10963                           ; switch strategies available:
 10964                           ; Name         Instructions Cycles
 10965                           ; simple_byte          190    96 (average)
 10966                           ;	Chosen strategy is simple_byte
 10967  0118CC  0A2E               	xorlw	46	; case 46
 10968  0118CE  B4D8               	btfsc	status,2,c
 10969  0118D0  D7F9               	goto	l917
 10970  0118D2  0A1E               	xorlw	30	; case 48
 10971  0118D4  B4D8               	btfsc	status,2,c
 10972  0118D6  D77A               	goto	l854
 10973  0118D8  0A01               	xorlw	1	; case 49
 10974  0118DA  B4D8               	btfsc	status,2,c
 10975  0118DC  D779               	goto	l856
 10976  0118DE  0A03               	xorlw	3	; case 50
 10977  0118E0  B4D8               	btfsc	status,2,c
 10978  0118E2  D778               	goto	l857
 10979  0118E4  0A01               	xorlw	1	; case 51
 10980  0118E6  B4D8               	btfsc	status,2,c
 10981  0118E8  D777               	goto	l858
 10982  0118EA  0A07               	xorlw	7	; case 52
 10983  0118EC  B4D8               	btfsc	status,2,c
 10984  0118EE  D776               	goto	l859
 10985  0118F0  0A01               	xorlw	1	; case 53
 10986  0118F2  B4D8               	btfsc	status,2,c
 10987  0118F4  D775               	goto	l860
 10988  0118F6  0A03               	xorlw	3	; case 54
 10989  0118F8  B4D8               	btfsc	status,2,c
 10990  0118FA  D774               	goto	l861
 10991  0118FC  0A01               	xorlw	1	; case 55
 10992  0118FE  B4D8               	btfsc	status,2,c
 10993  011900  D773               	goto	l862
 10994  011902  0A0F               	xorlw	15	; case 56
 10995  011904  B4D8               	btfsc	status,2,c
 10996  011906  D772               	goto	l863
 10997  011908  0A01               	xorlw	1	; case 57
 10998  01190A  B4D8               	btfsc	status,2,c
 10999  01190C  D771               	goto	l864
 11000  01190E  0A78               	xorlw	120	; case 65
 11001  011910  B4D8               	btfsc	status,2,c
 11002  011912  D7A4               	goto	l891
 11003  011914  0A03               	xorlw	3	; case 66
 11004  011916  B4D8               	btfsc	status,2,c
 11005  011918  D7A3               	goto	l892
 11006  01191A  0A01               	xorlw	1	; case 67
 11007  01191C  B4D8               	btfsc	status,2,c
 11008  01191E  D7A2               	goto	l893
 11009  011920  0A07               	xorlw	7	; case 68
 11010  011922  B4D8               	btfsc	status,2,c
 11011  011924  D7A1               	goto	l894
 11012  011926  0A01               	xorlw	1	; case 69
 11013  011928  B4D8               	btfsc	status,2,c
 11014  01192A  D7A0               	goto	l895
 11015  01192C  0A03               	xorlw	3	; case 70
 11016  01192E  B4D8               	btfsc	status,2,c
 11017  011930  D79F               	goto	l896
 11018  011932  0A01               	xorlw	1	; case 71
 11019  011934  B4D8               	btfsc	status,2,c
 11020  011936  D79E               	goto	l897
 11021  011938  0A0F               	xorlw	15	; case 72
 11022  01193A  B4D8               	btfsc	status,2,c
 11023  01193C  D79D               	goto	l898
 11024  01193E  0A01               	xorlw	1	; case 73
 11025  011940  B4D8               	btfsc	status,2,c
 11026  011942  D79C               	goto	l899
 11027  011944  0A03               	xorlw	3	; case 74
 11028  011946  B4D8               	btfsc	status,2,c
 11029  011948  D79B               	goto	l900
 11030  01194A  0A01               	xorlw	1	; case 75
 11031  01194C  B4D8               	btfsc	status,2,c
 11032  01194E  D79A               	goto	l901
 11033  011950  0A07               	xorlw	7	; case 76
 11034  011952  B4D8               	btfsc	status,2,c
 11035  011954  D799               	goto	l902
 11036  011956  0A01               	xorlw	1	; case 77
 11037  011958  B4D8               	btfsc	status,2,c
 11038  01195A  D798               	goto	l903
 11039  01195C  0A03               	xorlw	3	; case 78
 11040  01195E  B4D8               	btfsc	status,2,c
 11041  011960  D797               	goto	l904
 11042  011962  0A01               	xorlw	1	; case 79
 11043  011964  B4D8               	btfsc	status,2,c
 11044  011966  D796               	goto	l905
 11045  011968  0A1F               	xorlw	31	; case 80
 11046  01196A  B4D8               	btfsc	status,2,c
 11047  01196C  D795               	goto	l906
 11048  01196E  0A01               	xorlw	1	; case 81
 11049  011970  B4D8               	btfsc	status,2,c
 11050  011972  D794               	goto	l907
 11051  011974  0A03               	xorlw	3	; case 82
 11052  011976  B4D8               	btfsc	status,2,c
 11053  011978  D793               	goto	l908
 11054  01197A  0A01               	xorlw	1	; case 83
 11055  01197C  B4D8               	btfsc	status,2,c
 11056  01197E  D792               	goto	l909
 11057  011980  0A07               	xorlw	7	; case 84
 11058  011982  B4D8               	btfsc	status,2,c
 11059  011984  D791               	goto	l910
 11060  011986  0A01               	xorlw	1	; case 85
 11061  011988  B4D8               	btfsc	status,2,c
 11062  01198A  D790               	goto	l911
 11063  01198C  0A03               	xorlw	3	; case 86
 11064  01198E  B4D8               	btfsc	status,2,c
 11065  011990  D78F               	goto	l912
 11066  011992  0A01               	xorlw	1	; case 87
 11067  011994  B4D8               	btfsc	status,2,c
 11068  011996  D78E               	goto	l913
 11069  011998  0A0F               	xorlw	15	; case 88
 11070  01199A  B4D8               	btfsc	status,2,c
 11071  01199C  D78D               	goto	l914
 11072  01199E  0A01               	xorlw	1	; case 89
 11073  0119A0  B4D8               	btfsc	status,2,c
 11074  0119A2  D78C               	goto	l915
 11075  0119A4  0A03               	xorlw	3	; case 90
 11076  0119A6  B4D8               	btfsc	status,2,c
 11077  0119A8  D78B               	goto	l916
 11078  0119AA  0A3B               	xorlw	59	; case 97
 11079  0119AC  B4D8               	btfsc	status,2,c
 11080  0119AE  D722               	goto	l865
 11081  0119B0  0A03               	xorlw	3	; case 98
 11082  0119B2  B4D8               	btfsc	status,2,c
 11083  0119B4  D721               	goto	l866
 11084  0119B6  0A01               	xorlw	1	; case 99
 11085  0119B8  B4D8               	btfsc	status,2,c
 11086  0119BA  D720               	goto	l867
 11087  0119BC  0A07               	xorlw	7	; case 100
 11088  0119BE  B4D8               	btfsc	status,2,c
 11089  0119C0  D71F               	goto	l868
 11090  0119C2  0A01               	xorlw	1	; case 101
 11091  0119C4  B4D8               	btfsc	status,2,c
 11092  0119C6  D71E               	goto	l869
 11093  0119C8  0A03               	xorlw	3	; case 102
 11094  0119CA  B4D8               	btfsc	status,2,c
 11095  0119CC  D71D               	goto	l870
 11096  0119CE  0A01               	xorlw	1	; case 103
 11097  0119D0  B4D8               	btfsc	status,2,c
 11098  0119D2  D71C               	goto	l871
 11099  0119D4  0A0F               	xorlw	15	; case 104
 11100  0119D6  B4D8               	btfsc	status,2,c
 11101  0119D8  D71B               	goto	l872
 11102  0119DA  0A01               	xorlw	1	; case 105
 11103  0119DC  B4D8               	btfsc	status,2,c
 11104  0119DE  D71A               	goto	l873
 11105  0119E0  0A03               	xorlw	3	; case 106
 11106  0119E2  B4D8               	btfsc	status,2,c
 11107  0119E4  D719               	goto	l874
 11108  0119E6  0A01               	xorlw	1	; case 107
 11109  0119E8  B4D8               	btfsc	status,2,c
 11110  0119EA  D718               	goto	l875
 11111  0119EC  0A07               	xorlw	7	; case 108
 11112  0119EE  B4D8               	btfsc	status,2,c
 11113  0119F0  D717               	goto	l876
 11114  0119F2  0A01               	xorlw	1	; case 109
 11115  0119F4  B4D8               	btfsc	status,2,c
 11116  0119F6  D716               	goto	l877
 11117  0119F8  0A03               	xorlw	3	; case 110
 11118  0119FA  B4D8               	btfsc	status,2,c
 11119  0119FC  D715               	goto	l878
 11120  0119FE  0A01               	xorlw	1	; case 111
 11121  011A00  B4D8               	btfsc	status,2,c
 11122  011A02  D714               	goto	l879
 11123  011A04  0A1F               	xorlw	31	; case 112
 11124  011A06  B4D8               	btfsc	status,2,c
 11125  011A08  D713               	goto	l880
 11126  011A0A  0A01               	xorlw	1	; case 113
 11127  011A0C  B4D8               	btfsc	status,2,c
 11128  011A0E  D712               	goto	l881
 11129  011A10  0A03               	xorlw	3	; case 114
 11130  011A12  B4D8               	btfsc	status,2,c
 11131  011A14  D711               	goto	l882
 11132  011A16  0A01               	xorlw	1	; case 115
 11133  011A18  B4D8               	btfsc	status,2,c
 11134  011A1A  D710               	goto	l883
 11135  011A1C  0A07               	xorlw	7	; case 116
 11136  011A1E  B4D8               	btfsc	status,2,c
 11137  011A20  D70F               	goto	l884
 11138  011A22  0A01               	xorlw	1	; case 117
 11139  011A24  B4D8               	btfsc	status,2,c
 11140  011A26  D70E               	goto	l885
 11141  011A28  0A03               	xorlw	3	; case 118
 11142  011A2A  B4D8               	btfsc	status,2,c
 11143  011A2C  D70D               	goto	l886
 11144  011A2E  0A01               	xorlw	1	; case 119
 11145  011A30  B4D8               	btfsc	status,2,c
 11146  011A32  D70C               	goto	l887
 11147  011A34  0A0F               	xorlw	15	; case 120
 11148  011A36  B4D8               	btfsc	status,2,c
 11149  011A38  D70B               	goto	l888
 11150  011A3A  0A01               	xorlw	1	; case 121
 11151  011A3C  B4D8               	btfsc	status,2,c
 11152  011A3E  D70A               	goto	l889
 11153  011A40  0A03               	xorlw	3	; case 122
 11154  011A42  B4D8               	btfsc	status,2,c
 11155  011A44  D709               	goto	l890
 11156                           
 11157                           ;Types.c: 354: return 0;
 11158                           
 11159                           ; BSR set to: 0
 11160  011A46  0E00               	movlw	0
 11161  011A48  0012               	return	
 11162  011A4A                     __end_of_ToSegment:
 11163                           	opt stack 0
 11164                           tosu	equ	0xFFF
 11165                           tosh	equ	0xFFE
 11166                           tosl	equ	0xFFD
 11167                           pclath	equ	0xFFA
 11168                           tblptru	equ	0xFF8
 11169                           tblptrh	equ	0xFF7
 11170                           tblptrl	equ	0xFF6
 11171                           tablat	equ	0xFF5
 11172                           prodh	equ	0xFF4
 11173                           prodl	equ	0xFF3
 11174                           intcon	equ	0xFF2
 11175                           postinc0	equ	0xFEE
 11176                           wreg	equ	0xFE8
 11177                           indf1	equ	0xFE7
 11178                           postdec1	equ	0xFE5
 11179                           fsr1h	equ	0xFE2
 11180                           fsr1l	equ	0xFE1
 11181                           indf2	equ	0xFDF
 11182                           postinc2	equ	0xFDE
 11183                           postdec2	equ	0xFDD
 11184                           plusw2	equ	0xFDB
 11185                           fsr2h	equ	0xFDA
 11186                           fsr2l	equ	0xFD9
 11187                           status	equ	0xFD8
 11188                           
 11189 ;; *************** function _HMI_SetButton *****************
 11190 ;; Defined at:
 11191 ;;		line 186 in file "HMI.c"
 11192 ;; Parameters:    Size  Location     Type
 11193 ;;  pValue          1    wreg     unsigned char 
 11194 ;; Auto vars:     Size  Location     Type
 11195 ;;  pValue          1    6[BANK0 ] unsigned char 
 11196 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
 11197 ;;  v               1    7[BANK0 ] unsigned char 
 11198 ;; Return value:  Size  Location     Type
 11199 ;;                  1    wreg      void 
 11200 ;; Registers used:
 11201 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 11202 ;; Tracked objects:
 11203 ;;		On entry : 0/0
 11204 ;;		On exit  : 0/0
 11205 ;;		Unchanged: 0/0
 11206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11208 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11209 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11210 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11211 ;;Total ram usage:        8 bytes
 11212 ;; Hardware stack levels used:    1
 11213 ;; Hardware stack levels required when called:    7
 11214 ;; This function calls:
 11215 ;;		Nothing
 11216 ;; This function is called by:
 11217 ;;		_Event_TestButton
 11218 ;; This function uses a non-reentrant model
 11219 ;;
 11220                           
 11221                           	psect	text47
 11222  014B26                     __ptext47:
 11223                           	opt stack 0
 11224  014B26                     _HMI_SetButton:
 11225                           	opt stack 19
 11226                           
 11227                           ;incstack = 0
 11228                           ;HMI_SetButton@pValue stored from wreg
 11229  014B26  0100               	movlb	0	; () banked
 11230  014B28  6F66               	movwf	HMI_SetButton@pValue& (0+255),b
 11231                           
 11232                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
 11233  014B2A  0E7C               	movlw	low HMI_SetButton@F7213
 11234  014B2C  6EF6               	movwf	tblptrl,c
 11235  014B2E                     	if	1	;There is more than 1 active tblptr byte
 11236  014B2E  0EFD               	movlw	high HMI_SetButton@F7213
 11237  014B30  6EF7               	movwf	tblptrh,c
 11238  014B32                     	endif
 11239  014B32                     	if	1	;There are 3 active tblptr bytes
 11240  014B32  0E00               	movlw	low (HMI_SetButton@F7213 shr (0+16))
 11241  014B34  6EF8               	movwf	tblptru,c
 11242  014B36                     	endif
 11243  014B36  0009               	tblrd		*+
 11244  014B38  CFF5 F062          	movff	tablat,HMI_SetButton@reindex
 11245  014B3C  0009               	tblrd		*+
 11246  014B3E  CFF5 F063          	movff	tablat,HMI_SetButton@reindex+1
 11247  014B42  0009               	tblrd		*+
 11248  014B44  CFF5 F064          	movff	tablat,HMI_SetButton@reindex+2
 11249  014B48  000A               	tblrd		*-
 11250  014B4A  CFF5 F065          	movff	tablat,HMI_SetButton@reindex+3
 11251                           
 11252                           ;HMI.c: 189: UINT8 v = 0b00010001;
 11253  014B4E  0E11               	movlw	17
 11254  014B50  0100               	movlb	0	; () banked
 11255  014B52  6F67               	movwf	HMI_SetButton@v& (0+255),b
 11256                           
 11257                           ; BSR set to: 0
 11258                           ;HMI.c: 190: pValue &= 3;
 11259  014B54  0E03               	movlw	3
 11260  014B56  0100               	movlb	0	; () banked
 11261  014B58  1766               	andwf	HMI_SetButton@pValue& (0+255),f,b
 11262                           
 11263                           ; BSR set to: 0
 11264                           ;HMI.c: 191: v = v << reindex[pValue];
 11265  014B5A  0100               	movlb	0	; () banked
 11266  014B5C  5166               	movf	HMI_SetButton@pValue& (0+255),w,b
 11267  014B5E  0D01               	mullw	1
 11268  014B60  0E62               	movlw	low HMI_SetButton@reindex
 11269  014B62  24F3               	addwf	prodl,w,c
 11270  014B64  6ED9               	movwf	fsr2l,c
 11271  014B66  0E00               	movlw	high HMI_SetButton@reindex
 11272  014B68  20F4               	addwfc	prodh,w,c
 11273  014B6A  6EDA               	movwf	fsr2h,c
 11274  014B6C  50DF               	movf	indf2,w,c
 11275  014B6E  0100               	movlb	0	; () banked
 11276  014B70  6F60               	movwf	??_HMI_SetButton& (0+255),b
 11277  014B72  C067  F061         	movff	HMI_SetButton@v,??_HMI_SetButton+1
 11278  014B76  0100               	movlb	0	; () banked
 11279  014B78  2B60               	incf	??_HMI_SetButton& (0+255),f,b
 11280  014B7A  D003               	goto	u9294
 11281  014B7C                     u9295:
 11282  014B7C  0100               	movlb	0	; () banked
 11283  014B7E  90D8               	bcf	status,0,c
 11284  014B80  3761               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
 11285  014B82                     u9294:
 11286  014B82  0100               	movlb	0	; () banked
 11287  014B84  2F60               	decfsz	??_HMI_SetButton& (0+255),f,b
 11288  014B86  D7FA               	goto	u9295
 11289  014B88  0100               	movlb	0	; () banked
 11290  014B8A  5161               	movf	(??_HMI_SetButton+1)& (0+255),w,b
 11291  014B8C  0100               	movlb	0	; () banked
 11292  014B8E  6F67               	movwf	HMI_SetButton@v& (0+255),b
 11293                           
 11294                           ; BSR set to: 0
 11295                           ;HMI.c: 192: v = v >> 4;
 11296  014B90  0100               	movlb	0	; () banked
 11297  014B92  3967               	swapf	HMI_SetButton@v& (0+255),w,b
 11298  014B94  0B0F               	andlw	15
 11299  014B96  0100               	movlb	0	; () banked
 11300  014B98  6F67               	movwf	HMI_SetButton@v& (0+255),b
 11301                           
 11302                           ; BSR set to: 0
 11303                           ;HMI.c: 193: v = v & 0x0F;
 11304  014B9A  0100               	movlb	0	; () banked
 11305  014B9C  5167               	movf	HMI_SetButton@v& (0+255),w,b
 11306  014B9E  0B0F               	andlw	15
 11307  014BA0  0100               	movlb	0	; () banked
 11308  014BA2  6F67               	movwf	HMI_SetButton@v& (0+255),b
 11309                           
 11310                           ; BSR set to: 0
 11311                           ;HMI.c: 194: HMIBoard.pButton = v;
 11312  014BA4  0103               	movlb	3	; () banked
 11313  014BA6  512E               	movf	(_HMIBoard+6)& (0+255),w,b
 11314  014BA8  0100               	movlb	0	; () banked
 11315  014BAA  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
 11316  014BAC  0BF0               	andlw	-16
 11317  014BAE  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
 11318  014BB0  0103               	movlb	3	; () banked
 11319  014BB2  6F2E               	movwf	(_HMIBoard+6)& (0+255),b
 11320                           
 11321                           ; BSR set to: 3
 11322  014BB4  0012               	return		;funcret
 11323  014BB6                     __end_of_HMI_SetButton:
 11324                           	opt stack 0
 11325                           tosu	equ	0xFFF
 11326                           tosh	equ	0xFFE
 11327                           tosl	equ	0xFFD
 11328                           pclath	equ	0xFFA
 11329                           tblptru	equ	0xFF8
 11330                           tblptrh	equ	0xFF7
 11331                           tblptrl	equ	0xFF6
 11332                           tablat	equ	0xFF5
 11333                           prodh	equ	0xFF4
 11334                           prodl	equ	0xFF3
 11335                           intcon	equ	0xFF2
 11336                           postinc0	equ	0xFEE
 11337                           wreg	equ	0xFE8
 11338                           indf1	equ	0xFE7
 11339                           postdec1	equ	0xFE5
 11340                           fsr1h	equ	0xFE2
 11341                           fsr1l	equ	0xFE1
 11342                           indf2	equ	0xFDF
 11343                           postinc2	equ	0xFDE
 11344                           postdec2	equ	0xFDD
 11345                           plusw2	equ	0xFDB
 11346                           fsr2h	equ	0xFDA
 11347                           fsr2l	equ	0xFD9
 11348                           status	equ	0xFD8
 11349                           
 11350 ;; *************** function _HMI_SetBar *****************
 11351 ;; Defined at:
 11352 ;;		line 205 in file "HMI.c"
 11353 ;; Parameters:    Size  Location     Type
 11354 ;;  pValue          1    wreg     unsigned char 
 11355 ;; Auto vars:     Size  Location     Type
 11356 ;;  pValue          1    0[BANK0 ] unsigned char 
 11357 ;; Return value:  Size  Location     Type
 11358 ;;                  1    wreg      void 
 11359 ;; Registers used:
 11360 ;;		wreg
 11361 ;; Tracked objects:
 11362 ;;		On entry : 0/0
 11363 ;;		On exit  : 0/0
 11364 ;;		Unchanged: 0/0
 11365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11367 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11369 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11370 ;;Total ram usage:        1 bytes
 11371 ;; Hardware stack levels used:    1
 11372 ;; Hardware stack levels required when called:    7
 11373 ;; This function calls:
 11374 ;;		Nothing
 11375 ;; This function is called by:
 11376 ;;		_Event_DIPSwitch
 11377 ;;		_Event_HMI_DIPSwitch
 11378 ;;		_Event_HMI_LeftButton
 11379 ;;		_Event_HMI_RightButton
 11380 ;; This function uses a non-reentrant model
 11381 ;;
 11382                           
 11383                           	psect	text48
 11384  01649C                     __ptext48:
 11385                           	opt stack 0
 11386  01649C                     _HMI_SetBar:
 11387                           	opt stack 19
 11388                           
 11389                           ; BSR set to: 3
 11390                           ;incstack = 0
 11391                           ;HMI_SetBar@pValue stored from wreg
 11392  01649C  0100               	movlb	0	; () banked
 11393  01649E  6F60               	movwf	HMI_SetBar@pValue& (0+255),b
 11394                           
 11395                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
 11396  0164A0  C060  F32F         	movff	HMI_SetBar@pValue,_HMIBoard+7
 11397  0164A4  0012               	return		;funcret
 11398  0164A6                     __end_of_HMI_SetBar:
 11399                           	opt stack 0
 11400                           tosu	equ	0xFFF
 11401                           tosh	equ	0xFFE
 11402                           tosl	equ	0xFFD
 11403                           pclath	equ	0xFFA
 11404                           tblptru	equ	0xFF8
 11405                           tblptrh	equ	0xFF7
 11406                           tblptrl	equ	0xFF6
 11407                           tablat	equ	0xFF5
 11408                           prodh	equ	0xFF4
 11409                           prodl	equ	0xFF3
 11410                           intcon	equ	0xFF2
 11411                           postinc0	equ	0xFEE
 11412                           wreg	equ	0xFE8
 11413                           indf1	equ	0xFE7
 11414                           postdec1	equ	0xFE5
 11415                           fsr1h	equ	0xFE2
 11416                           fsr1l	equ	0xFE1
 11417                           indf2	equ	0xFDF
 11418                           postinc2	equ	0xFDE
 11419                           postdec2	equ	0xFDD
 11420                           plusw2	equ	0xFDB
 11421                           fsr2h	equ	0xFDA
 11422                           fsr2l	equ	0xFD9
 11423                           status	equ	0xFD8
 11424                           
 11425 ;; *************** function _HMI_GetBar *****************
 11426 ;; Defined at:
 11427 ;;		line 209 in file "HMI.c"
 11428 ;; Parameters:    Size  Location     Type
 11429 ;;		None
 11430 ;; Auto vars:     Size  Location     Type
 11431 ;;		None
 11432 ;; Return value:  Size  Location     Type
 11433 ;;                  1    wreg      unsigned char 
 11434 ;; Registers used:
 11435 ;;		wreg, status,2
 11436 ;; Tracked objects:
 11437 ;;		On entry : 0/0
 11438 ;;		On exit  : 0/0
 11439 ;;		Unchanged: 0/0
 11440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11444 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11445 ;;Total ram usage:        0 bytes
 11446 ;; Hardware stack levels used:    1
 11447 ;; Hardware stack levels required when called:    7
 11448 ;; This function calls:
 11449 ;;		Nothing
 11450 ;; This function is called by:
 11451 ;;		_Event_DIPSwitch
 11452 ;;		_Event_HMI_DIPSwitch
 11453 ;; This function uses a non-reentrant model
 11454 ;;
 11455                           
 11456                           	psect	text49
 11457  0164D0                     __ptext49:
 11458                           	opt stack 0
 11459  0164D0                     _HMI_GetBar:
 11460                           	opt stack 19
 11461                           
 11462                           ;HMI.c: 211: return HMIBoard.pBarGraph;
 11463                           
 11464                           ;incstack = 0
 11465  0164D0  0103               	movlb	3	; () banked
 11466  0164D2  512F               	movf	(_HMIBoard+7)& (0+255),w,b
 11467  0164D4  0012               	return	
 11468  0164D6                     __end_of_HMI_GetBar:
 11469                           	opt stack 0
 11470                           tosu	equ	0xFFF
 11471                           tosh	equ	0xFFE
 11472                           tosl	equ	0xFFD
 11473                           pclath	equ	0xFFA
 11474                           tblptru	equ	0xFF8
 11475                           tblptrh	equ	0xFF7
 11476                           tblptrl	equ	0xFF6
 11477                           tablat	equ	0xFF5
 11478                           prodh	equ	0xFF4
 11479                           prodl	equ	0xFF3
 11480                           intcon	equ	0xFF2
 11481                           postinc0	equ	0xFEE
 11482                           wreg	equ	0xFE8
 11483                           indf1	equ	0xFE7
 11484                           postdec1	equ	0xFE5
 11485                           fsr1h	equ	0xFE2
 11486                           fsr1l	equ	0xFE1
 11487                           indf2	equ	0xFDF
 11488                           postinc2	equ	0xFDE
 11489                           postdec2	equ	0xFDD
 11490                           plusw2	equ	0xFDB
 11491                           fsr2h	equ	0xFDA
 11492                           fsr2l	equ	0xFD9
 11493                           status	equ	0xFD8
 11494                           
 11495 ;; *************** function _Console_Render *****************
 11496 ;; Defined at:
 11497 ;;		line 377 in file "Library/Console.c"
 11498 ;; Parameters:    Size  Location     Type
 11499 ;;		None
 11500 ;; Auto vars:     Size  Location     Type
 11501 ;;  lCursor         4   38[BANK0 ] struct Point
 11502 ;;  y               1   43[BANK0 ] unsigned char 
 11503 ;;  x               1   42[BANK0 ] unsigned char 
 11504 ;;  temp            1   37[BANK0 ] unsigned char 
 11505 ;;  Temp            2    0        unsigned short 
 11506 ;; Return value:  Size  Location     Type
 11507 ;;                  1    wreg      void 
 11508 ;; Registers used:
 11509 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11510 ;; Tracked objects:
 11511 ;;		On entry : 0/0
 11512 ;;		On exit  : 0/0
 11513 ;;		Unchanged: 0/0
 11514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11516 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11517 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11518 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11519 ;;Total ram usage:        9 bytes
 11520 ;; Hardware stack levels used:    1
 11521 ;; Hardware stack levels required when called:   11
 11522 ;; This function calls:
 11523 ;;		_Console_MakeField
 11524 ;;		_LCD_DrawField
 11525 ;;		_LCD_FillRectangle
 11526 ;; This function is called by:
 11527 ;;		_mode1
 11528 ;;		_mode2
 11529 ;;		_mode4
 11530 ;; This function uses a non-reentrant model
 11531 ;;
 11532                           
 11533                           	psect	text50
 11534  011ECA                     __ptext50:
 11535                           	opt stack 0
 11536  011ECA                     _Console_Render:
 11537                           	opt stack 18
 11538                           
 11539                           ;Console.c: 379: Colour Temp;
 11540                           ;Console.c: 380: if (change)
 11541                           
 11542                           ; BSR set to: 3
 11543                           ;incstack = 0
 11544  011ECA  0100               	movlb	0	; () banked
 11545  011ECC  51FF               	movf	_change& (0+255),w,b
 11546  011ECE  B4D8               	btfsc	status,2,c
 11547  011ED0  0012               	return	
 11548                           
 11549                           ; BSR set to: 0
 11550                           ;Console.c: 381: {
 11551                           ;Console.c: 382: UINT8 x, y, temp;
 11552                           ;Console.c: 383: Point lCursor = {6,6};
 11553  011ED2  C3EC  F086         	movff	Console_Render@F6956,Console_Render@lCursor
 11554  011ED6  C3ED  F087         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
 11555  011EDA  C3EE  F088         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
 11556  011EDE  C3EF  F089         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
 11557                           
 11558                           ; BSR set to: 0
 11559                           ;Console.c: 385: if (clearall)
 11560  011EE2  0100               	movlb	0	; () banked
 11561  011EE4  51E9               	movf	_clearall& (0+255),w,b
 11562  011EE6  B4D8               	btfsc	status,2,c
 11563  011EE8  D005               	goto	l1056
 11564                           
 11565                           ; BSR set to: 0
 11566                           ;Console.c: 386: {
 11567                           ;Console.c: 389: temp = lBufferY;
 11568  011EEA  C0E7  F085         	movff	_lBufferY,Console_Render@temp
 11569                           
 11570                           ; BSR set to: 0
 11571                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
 11572  011EEE  0E0F               	movlw	15
 11573  011EF0  0100               	movlb	0	; () banked
 11574  011EF2  6FE7               	movwf	_lBufferY& (0+255),b
 11575  011EF4                     l1056:
 11576                           
 11577                           ; BSR set to: 0
 11578                           ;Console.c: 391: }
 11579                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
 11580  011EF4  0E00               	movlw	0
 11581  011EF6  0100               	movlb	0	; () banked
 11582  011EF8  6F8B               	movwf	Console_Render@y& (0+255),b
 11583  011EFA  D0DF               	goto	l1057
 11584  011EFC                     
 11585                           ; BSR set to: 0
 11586                           ;Console.c: 394: {
 11587                           ;Console.c: 395: gForecolour = lCBuffer[y];
 11588                           
 11589                           ; BSR set to: 0
 11590  011EFC  0100               	movlb	0	; () banked
 11591  011EFE  518B               	movf	Console_Render@y& (0+255),w,b
 11592  011F00  0D02               	mullw	2
 11593  011F02  0E00               	movlw	low _lCBuffer
 11594  011F04  24F3               	addwf	prodl,w,c
 11595  011F06  6ED9               	movwf	fsr2l,c
 11596  011F08  0E04               	movlw	high _lCBuffer
 11597  011F0A  20F4               	addwfc	prodh,w,c
 11598  011F0C  6EDA               	movwf	fsr2h,c
 11599  011F0E  CFDE F0FD          	movff	postinc2,_gForecolour
 11600  011F12  CFDD F0FE          	movff	postdec2,_gForecolour+1
 11601                           
 11602                           ; BSR set to: 0
 11603                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
 11604  011F16  0E00               	movlw	0
 11605  011F18  0100               	movlb	0	; () banked
 11606  011F1A  6F8A               	movwf	Console_Render@x& (0+255),b
 11607  011F1C                     l14009:
 11608                           
 11609                           ; BSR set to: 0
 11610  011F1C  0E13               	movlw	19
 11611  011F1E  0100               	movlb	0	; () banked
 11612  011F20  658A               	cpfsgt	Console_Render@x& (0+255),b
 11613  011F22  D001               	goto	l1059
 11614  011F24  D0BE               	goto	u10820
 11615  011F26                     l1059:
 11616                           
 11617                           ; BSR set to: 0
 11618                           ;Console.c: 397: {
 11619                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
 11620                           
 11621                           ; BSR set to: 0
 11622  011F26  0100               	movlb	0	; () banked
 11623  011F28  518B               	movf	Console_Render@y& (0+255),w,b
 11624  011F2A  0D14               	mullw	20
 11625  011F2C  0ECA               	movlw	low _lBuffer
 11626  011F2E  0100               	movlb	0	; () banked
 11627  011F30  6F83               	movwf	??_Console_Render& (0+255),b
 11628  011F32  0E04               	movlw	high _lBuffer
 11629  011F34  0100               	movlb	0	; () banked
 11630  011F36  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 11631  011F38  50F3               	movf	prodl,w,c
 11632  011F3A  0100               	movlb	0	; () banked
 11633  011F3C  2783               	addwf	??_Console_Render& (0+255),f,b
 11634  011F3E  50F4               	movf	prodh,w,c
 11635  011F40  0100               	movlb	0	; () banked
 11636  011F42  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 11637  011F44  0100               	movlb	0	; () banked
 11638  011F46  518A               	movf	Console_Render@x& (0+255),w,b
 11639  011F48  0D01               	mullw	1
 11640  011F4A  50F3               	movf	prodl,w,c
 11641  011F4C  0100               	movlb	0	; () banked
 11642  011F4E  2583               	addwf	??_Console_Render& (0+255),w,b
 11643  011F50  6ED9               	movwf	fsr2l,c
 11644  011F52  50F4               	movf	prodh,w,c
 11645  011F54  0100               	movlb	0	; () banked
 11646  011F56  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 11647  011F58  6EDA               	movwf	fsr2h,c
 11648  011F5A  AEDF               	btfss	indf2,7,c
 11649  011F5C  D09A               	goto	l1063
 11650                           
 11651                           ; BSR set to: 0
 11652                           ;Console.c: 399: {
 11653                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
 11654  011F5E  0100               	movlb	0	; () banked
 11655  011F60  518B               	movf	Console_Render@y& (0+255),w,b
 11656  011F62  0D14               	mullw	20
 11657  011F64  0ECA               	movlw	low _lBuffer
 11658  011F66  0100               	movlb	0	; () banked
 11659  011F68  6F83               	movwf	??_Console_Render& (0+255),b
 11660  011F6A  0E04               	movlw	high _lBuffer
 11661  011F6C  0100               	movlb	0	; () banked
 11662  011F6E  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 11663  011F70  50F3               	movf	prodl,w,c
 11664  011F72  0100               	movlb	0	; () banked
 11665  011F74  2783               	addwf	??_Console_Render& (0+255),f,b
 11666  011F76  50F4               	movf	prodh,w,c
 11667  011F78  0100               	movlb	0	; () banked
 11668  011F7A  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 11669  011F7C  0100               	movlb	0	; () banked
 11670  011F7E  518A               	movf	Console_Render@x& (0+255),w,b
 11671  011F80  0D01               	mullw	1
 11672  011F82  50F3               	movf	prodl,w,c
 11673  011F84  0100               	movlb	0	; () banked
 11674  011F86  2583               	addwf	??_Console_Render& (0+255),w,b
 11675  011F88  6ED9               	movwf	fsr2l,c
 11676  011F8A  50F4               	movf	prodh,w,c
 11677  011F8C  0100               	movlb	0	; () banked
 11678  011F8E  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 11679  011F90  6EDA               	movwf	fsr2h,c
 11680  011F92  0E7F               	movlw	127
 11681  011F94  16DF               	andwf	indf2,f,c
 11682                           
 11683                           ;Console.c: 401: if (lBuffer[y][x])
 11684  011F96  0100               	movlb	0	; () banked
 11685  011F98  518B               	movf	Console_Render@y& (0+255),w,b
 11686  011F9A  0D14               	mullw	20
 11687  011F9C  0ECA               	movlw	low _lBuffer
 11688  011F9E  0100               	movlb	0	; () banked
 11689  011FA0  6F83               	movwf	??_Console_Render& (0+255),b
 11690  011FA2  0E04               	movlw	high _lBuffer
 11691  011FA4  0100               	movlb	0	; () banked
 11692  011FA6  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 11693  011FA8  50F3               	movf	prodl,w,c
 11694  011FAA  0100               	movlb	0	; () banked
 11695  011FAC  2783               	addwf	??_Console_Render& (0+255),f,b
 11696  011FAE  50F4               	movf	prodh,w,c
 11697  011FB0  0100               	movlb	0	; () banked
 11698  011FB2  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 11699  011FB4  0100               	movlb	0	; () banked
 11700  011FB6  518A               	movf	Console_Render@x& (0+255),w,b
 11701  011FB8  0D01               	mullw	1
 11702  011FBA  50F3               	movf	prodl,w,c
 11703  011FBC  0100               	movlb	0	; () banked
 11704  011FBE  2583               	addwf	??_Console_Render& (0+255),w,b
 11705  011FC0  6ED9               	movwf	fsr2l,c
 11706  011FC2  50F4               	movf	prodh,w,c
 11707  011FC4  0100               	movlb	0	; () banked
 11708  011FC6  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 11709  011FC8  6EDA               	movwf	fsr2h,c
 11710  011FCA  50DF               	movf	indf2,w,c
 11711  011FCC  B4D8               	btfsc	status,2,c
 11712  011FCE  D04A               	goto	l1062
 11713                           
 11714                           ; BSR set to: 0
 11715                           ;Console.c: 402: {
 11716                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
 11717  011FD0  C0DC  F069         	movff	_gBackcolour,LCD_FillRectangle@pColour
 11718  011FD4  C0DD  F06A         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
 11719  011FD8  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 11720  011FDC  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 11721  011FE0  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 11722  011FE4  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 11723  011FE8  C3F4  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
 11724  011FEC  C3F5  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 11725  011FF0  C3F6  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 11726  011FF4  C3F7  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 11727  011FF8  EC9F  F0A8         	call	_LCD_FillRectangle	;wreg free
 11728                           
 11729                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
 11730  011FFC  0100               	movlb	0	; () banked
 11731  011FFE  518B               	movf	Console_Render@y& (0+255),w,b
 11732  012000  0D14               	mullw	20
 11733  012002  0ECA               	movlw	low _lBuffer
 11734  012004  0100               	movlb	0	; () banked
 11735  012006  6F83               	movwf	??_Console_Render& (0+255),b
 11736  012008  0E04               	movlw	high _lBuffer
 11737  01200A  0100               	movlb	0	; () banked
 11738  01200C  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 11739  01200E  50F3               	movf	prodl,w,c
 11740  012010  0100               	movlb	0	; () banked
 11741  012012  2783               	addwf	??_Console_Render& (0+255),f,b
 11742  012014  50F4               	movf	prodh,w,c
 11743  012016  0100               	movlb	0	; () banked
 11744  012018  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 11745  01201A  0100               	movlb	0	; () banked
 11746  01201C  518A               	movf	Console_Render@x& (0+255),w,b
 11747  01201E  0D01               	mullw	1
 11748  012020  50F3               	movf	prodl,w,c
 11749  012022  0100               	movlb	0	; () banked
 11750  012024  2583               	addwf	??_Console_Render& (0+255),w,b
 11751  012026  6ED9               	movwf	fsr2l,c
 11752  012028  50F4               	movf	prodh,w,c
 11753  01202A  0100               	movlb	0	; () banked
 11754  01202C  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 11755  01202E  6EDA               	movwf	fsr2h,c
 11756  012030  50DF               	movf	indf2,w,c
 11757  012032  EC11  F09F         	call	_Console_MakeField
 11758  012036  C065  F072         	movff	?_Console_MakeField,LCD_DrawField@pField
 11759  01203A  C066  F073         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
 11760  01203E  C086  F074         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
 11761  012042  C087  F075         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
 11762  012046  C088  F076         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
 11763  01204A  C089  F077         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
 11764  01204E  C3F4  F078         	movff	_gCharSize,LCD_DrawField@pSize
 11765  012052  C3F5  F079         	movff	_gCharSize+1,LCD_DrawField@pSize+1
 11766  012056  C3F6  F07A         	movff	_gCharSize+2,LCD_DrawField@pSize+2
 11767  01205A  C3F7  F07B         	movff	_gCharSize+3,LCD_DrawField@pSize+3
 11768  01205E  EC56  F0A4         	call	_LCD_DrawField	;wreg free
 11769                           
 11770                           ;Console.c: 405: }
 11771  012062  D017               	goto	l1063
 11772  012064                     l1062:
 11773                           
 11774                           ;Console.c: 406: else
 11775                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
 11776  012064  0E00               	movlw	0
 11777  012066  0100               	movlb	0	; () banked
 11778  012068  6F6A               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
 11779  01206A  0E00               	movlw	0
 11780  01206C  6F69               	movwf	LCD_FillRectangle@pColour& (0+255),b
 11781  01206E  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 11782  012072  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 11783  012076  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 11784  01207A  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 11785  01207E  C3F4  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
 11786  012082  C3F5  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 11787  012086  C3F6  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 11788  01208A  C3F7  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 11789  01208E  EC9F  F0A8         	call	_LCD_FillRectangle	;wreg free
 11790  012092                     l1063:
 11791                           
 11792                           ;Console.c: 408: }
 11793                           ;Console.c: 409: lCursor.x += (5 + 1);
 11794  012092  0E06               	movlw	6
 11795  012094  0100               	movlb	0	; () banked
 11796  012096  2786               	addwf	Console_Render@lCursor& (0+255),f,b
 11797  012098  0E00               	movlw	0
 11798  01209A  2387               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
 11799                           
 11800                           ; BSR set to: 0
 11801  01209C  0100               	movlb	0	; () banked
 11802  01209E  2B8A               	incf	Console_Render@x& (0+255),f,b
 11803  0120A0  D73D               	goto	l14009
 11804  0120A2                     u10820:
 11805                           
 11806                           ; BSR set to: 0
 11807                           ;Console.c: 410: }
 11808                           ;Console.c: 411: lCursor.y += (7 + 1);
 11809                           
 11810                           ; BSR set to: 0
 11811  0120A2  0E08               	movlw	8
 11812  0120A4  0100               	movlb	0	; () banked
 11813  0120A6  2788               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
 11814  0120A8  0E00               	movlw	0
 11815  0120AA  2389               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
 11816                           
 11817                           ; BSR set to: 0
 11818                           ;Console.c: 412: lCursor.x = 6;
 11819  0120AC  0E00               	movlw	0
 11820  0120AE  0100               	movlb	0	; () banked
 11821  0120B0  6F87               	movwf	(Console_Render@lCursor+1)& (0+255),b
 11822  0120B2  0E06               	movlw	6
 11823  0120B4  6F86               	movwf	Console_Render@lCursor& (0+255),b
 11824                           
 11825                           ; BSR set to: 0
 11826  0120B6  0100               	movlb	0	; () banked
 11827  0120B8  2B8B               	incf	Console_Render@y& (0+255),f,b
 11828  0120BA                     l1057:
 11829                           
 11830                           ; BSR set to: 0
 11831                           
 11832                           ; BSR set to: 0
 11833  0120BA  0100               	movlb	0	; () banked
 11834  0120BC  518B               	movf	Console_Render@y& (0+255),w,b
 11835  0120BE  0100               	movlb	0	; () banked
 11836  0120C0  5DE7               	subwf	_lBufferY& (0+255),w,b
 11837  0120C2  B0D8               	btfsc	status,0,c
 11838  0120C4  D71B               	goto	l1058
 11839                           
 11840                           ; BSR set to: 0
 11841                           ;Console.c: 413: }
 11842                           ;Console.c: 415: if (clearall)
 11843                           
 11844                           ; BSR set to: 0
 11845  0120C6  0100               	movlb	0	; () banked
 11846  0120C8  51E9               	movf	_clearall& (0+255),w,b
 11847  0120CA  B4D8               	btfsc	status,2,c
 11848  0120CC  0012               	return	
 11849                           
 11850                           ; BSR set to: 0
 11851                           ;Console.c: 416: {
 11852                           ;Console.c: 417: clearall = 0;
 11853  0120CE  0E00               	movlw	0
 11854  0120D0  0100               	movlb	0	; () banked
 11855  0120D2  6FE9               	movwf	_clearall& (0+255),b
 11856                           
 11857                           ; BSR set to: 0
 11858                           ;Console.c: 418: lBufferY = temp;
 11859  0120D4  C085  F0E7         	movff	Console_Render@temp,_lBufferY
 11860                           
 11861                           ; BSR set to: 0
 11862  0120D8  0012               	return	
 11863  0120DA                     __end_of_Console_Render:
 11864                           	opt stack 0
 11865                           tosu	equ	0xFFF
 11866                           tosh	equ	0xFFE
 11867                           tosl	equ	0xFFD
 11868                           pclath	equ	0xFFA
 11869                           tblptru	equ	0xFF8
 11870                           tblptrh	equ	0xFF7
 11871                           tblptrl	equ	0xFF6
 11872                           tablat	equ	0xFF5
 11873                           prodh	equ	0xFF4
 11874                           prodl	equ	0xFF3
 11875                           intcon	equ	0xFF2
 11876                           postinc0	equ	0xFEE
 11877                           wreg	equ	0xFE8
 11878                           indf1	equ	0xFE7
 11879                           postdec1	equ	0xFE5
 11880                           fsr1h	equ	0xFE2
 11881                           fsr1l	equ	0xFE1
 11882                           indf2	equ	0xFDF
 11883                           postinc2	equ	0xFDE
 11884                           postdec2	equ	0xFDD
 11885                           plusw2	equ	0xFDB
 11886                           fsr2h	equ	0xFDA
 11887                           fsr2l	equ	0xFD9
 11888                           status	equ	0xFD8
 11889                           
 11890 ;; *************** function _LCD_FillRectangle *****************
 11891 ;; Defined at:
 11892 ;;		line 318 in file "Library/LCD.c"
 11893 ;; Parameters:    Size  Location     Type
 11894 ;;  pColour         2    9[BANK0 ] unsigned short 
 11895 ;;  pPoint          4   11[BANK0 ] struct Point
 11896 ;;  pSize           4   15[BANK0 ] struct Point
 11897 ;; Auto vars:     Size  Location     Type
 11898 ;;  j               1   22[BANK0 ] unsigned char 
 11899 ;;  i               1   21[BANK0 ] unsigned char 
 11900 ;; Return value:  Size  Location     Type
 11901 ;;                  1    wreg      void 
 11902 ;; Registers used:
 11903 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11904 ;; Tracked objects:
 11905 ;;		On entry : 0/0
 11906 ;;		On exit  : 0/0
 11907 ;;		Unchanged: 0/0
 11908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11909 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11910 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11911 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11912 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11913 ;;Total ram usage:       14 bytes
 11914 ;; Hardware stack levels used:    1
 11915 ;; Hardware stack levels required when called:   10
 11916 ;; This function calls:
 11917 ;;		_LCD_Word_Write
 11918 ;;		_Set_Addr_Window
 11919 ;; This function is called by:
 11920 ;;		_Console_Render
 11921 ;;		_Console_ClearLine
 11922 ;; This function uses a non-reentrant model
 11923 ;;
 11924                           
 11925                           	psect	text51
 11926  01513E                     __ptext51:
 11927                           	opt stack 0
 11928  01513E                     _LCD_FillRectangle:
 11929                           	opt stack 18
 11930                           
 11931                           ;LCD.c: 320: UINT8 i = 0x00;
 11932                           
 11933                           ; BSR set to: 0
 11934                           ;incstack = 0
 11935  01513E  0E00               	movlw	0
 11936  015140  0100               	movlb	0	; () banked
 11937  015142  6F75               	movwf	LCD_FillRectangle@i& (0+255),b
 11938                           
 11939                           ;LCD.c: 321: UINT8 j = 0x00;
 11940  015144  0E00               	movlw	0
 11941  015146  0100               	movlb	0	; () banked
 11942  015148  6F76               	movwf	LCD_FillRectangle@j& (0+255),b
 11943                           
 11944                           ; BSR set to: 0
 11945                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
 11946  01514A  C06D  F065         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
 11947  01514E  0100               	movlb	0	; () banked
 11948  015150  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 11949  015152  0100               	movlb	0	; () banked
 11950  015154  256F               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
 11951  015156  0100               	movlb	0	; () banked
 11952  015158  6F73               	movwf	??_LCD_FillRectangle& (0+255),b
 11953  01515A  0100               	movlb	0	; () banked
 11954  01515C  0573               	decf	??_LCD_FillRectangle& (0+255),w,b
 11955  01515E  0100               	movlb	0	; () banked
 11956  015160  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 11957  015162  0100               	movlb	0	; () banked
 11958  015164  516D               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
 11959  015166  0100               	movlb	0	; () banked
 11960  015168  2571               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
 11961  01516A  0100               	movlb	0	; () banked
 11962  01516C  6F74               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
 11963  01516E  0100               	movlb	0	; () banked
 11964  015170  0574               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
 11965  015172  0100               	movlb	0	; () banked
 11966  015174  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 11967  015176  0100               	movlb	0	; () banked
 11968  015178  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 11969  01517A  EC60  F0A2         	call	_Set_Addr_Window
 11970                           
 11971                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
 11972  01517E  C071  F076         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
 11973  015182                     l13291:
 11974  015182  0100               	movlb	0	; () banked
 11975  015184  5176               	movf	LCD_FillRectangle@j& (0+255),w,b
 11976  015186  0100               	movlb	0	; () banked
 11977  015188  B4D8               	btfsc	status,2,c
 11978  01518A  0012               	return	
 11979                           
 11980                           ; BSR set to: 0
 11981                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
 11982                           
 11983                           ; BSR set to: 0
 11984  01518C  C06F  F075         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
 11985  015190                     l13295:
 11986                           
 11987                           ; BSR set to: 0
 11988  015190  0100               	movlb	0	; () banked
 11989  015192  5175               	movf	LCD_FillRectangle@i& (0+255),w,b
 11990  015194  0100               	movlb	0	; () banked
 11991  015196  B4D8               	btfsc	status,2,c
 11992  015198  D009               	goto	u9800
 11993                           
 11994                           ; BSR set to: 0
 11995                           ;LCD.c: 333: LCD_Word_Write(pColour);
 11996                           
 11997                           ; BSR set to: 0
 11998                           
 11999                           ; BSR set to: 0
 12000  01519A  C069  F065         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
 12001  01519E  C06A  F066         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
 12002  0151A2  ECE7  F0B0         	call	_LCD_Word_Write	;wreg free
 12003  0151A6  0100               	movlb	0	; () banked
 12004  0151A8  0775               	decf	LCD_FillRectangle@i& (0+255),f,b
 12005  0151AA  D7F2               	goto	l13295
 12006  0151AC                     u9800:
 12007                           
 12008                           ; BSR set to: 0
 12009                           
 12010                           ; BSR set to: 0
 12011  0151AC  0100               	movlb	0	; () banked
 12012  0151AE  0776               	decf	LCD_FillRectangle@j& (0+255),f,b
 12013  0151B0  D7E8               	goto	l13291
 12014  0151B2                     __end_of_LCD_FillRectangle:
 12015                           	opt stack 0
 12016                           tosu	equ	0xFFF
 12017                           tosh	equ	0xFFE
 12018                           tosl	equ	0xFFD
 12019                           pclath	equ	0xFFA
 12020                           tblptru	equ	0xFF8
 12021                           tblptrh	equ	0xFF7
 12022                           tblptrl	equ	0xFF6
 12023                           tablat	equ	0xFF5
 12024                           prodh	equ	0xFF4
 12025                           prodl	equ	0xFF3
 12026                           intcon	equ	0xFF2
 12027                           postinc0	equ	0xFEE
 12028                           wreg	equ	0xFE8
 12029                           indf1	equ	0xFE7
 12030                           postdec1	equ	0xFE5
 12031                           fsr1h	equ	0xFE2
 12032                           fsr1l	equ	0xFE1
 12033                           indf2	equ	0xFDF
 12034                           postinc2	equ	0xFDE
 12035                           postdec2	equ	0xFDD
 12036                           plusw2	equ	0xFDB
 12037                           fsr2h	equ	0xFDA
 12038                           fsr2l	equ	0xFD9
 12039                           status	equ	0xFD8
 12040                           
 12041 ;; *************** function _LCD_DrawField *****************
 12042 ;; Defined at:
 12043 ;;		line 393 in file "Library/LCD.c"
 12044 ;; Parameters:    Size  Location     Type
 12045 ;;  pField          2   18[BANK0 ] PTR unsigned short 
 12046 ;;		 -> Console_MakeField@Fill(70), 
 12047 ;;  pPoint          4   20[BANK0 ] struct Point
 12048 ;;  pSize           4   24[BANK0 ] struct Point
 12049 ;; Auto vars:     Size  Location     Type
 12050 ;;  count           2   30[BANK0 ] unsigned short 
 12051 ;;  i               1   34[BANK0 ] unsigned char 
 12052 ;;  ymax            1   33[BANK0 ] unsigned char 
 12053 ;;  xmax            1   32[BANK0 ] unsigned char 
 12054 ;; Return value:  Size  Location     Type
 12055 ;;                  1    wreg      void 
 12056 ;; Registers used:
 12057 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12058 ;; Tracked objects:
 12059 ;;		On entry : 0/0
 12060 ;;		On exit  : 0/0
 12061 ;;		Unchanged: 0/0
 12062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12063 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12064 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12065 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12066 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12067 ;;Total ram usage:       17 bytes
 12068 ;; Hardware stack levels used:    1
 12069 ;; Hardware stack levels required when called:   10
 12070 ;; This function calls:
 12071 ;;		_LCD_Word_Write
 12072 ;;		_Set_Addr_Window
 12073 ;;		___wmul
 12074 ;; This function is called by:
 12075 ;;		_Console_Render
 12076 ;; This function uses a non-reentrant model
 12077 ;;
 12078                           
 12079                           	psect	text52
 12080  0148AC                     __ptext52:
 12081                           	opt stack 0
 12082  0148AC                     _LCD_DrawField:
 12083                           	opt stack 18
 12084                           
 12085                           ;LCD.c: 396: UINT8 i = 0x00;
 12086                           
 12087                           ; BSR set to: 0
 12088                           ;incstack = 0
 12089  0148AC  0E00               	movlw	0
 12090  0148AE  0100               	movlb	0	; () banked
 12091  0148B0  6F82               	movwf	LCD_DrawField@i& (0+255),b
 12092                           
 12093                           ; BSR set to: 0
 12094                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
 12095  0148B2  0100               	movlb	0	; () banked
 12096  0148B4  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
 12097  0148B6  0100               	movlb	0	; () banked
 12098  0148B8  2578               	addwf	LCD_DrawField@pSize& (0+255),w,b
 12099  0148BA  0100               	movlb	0	; () banked
 12100  0148BC  6F80               	movwf	LCD_DrawField@xmax& (0+255),b
 12101                           
 12102                           ; BSR set to: 0
 12103                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
 12104  0148BE  0100               	movlb	0	; () banked
 12105  0148C0  5176               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
 12106  0148C2  0100               	movlb	0	; () banked
 12107  0148C4  257A               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
 12108  0148C6  0100               	movlb	0	; () banked
 12109  0148C8  6F81               	movwf	LCD_DrawField@ymax& (0+255),b
 12110                           
 12111                           ; BSR set to: 0
 12112                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
 12113  0148CA  C07A  F060         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
 12114  0148CE  C07B  F061         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
 12115  0148D2  C078  F062         	movff	LCD_DrawField@pSize,___wmul@multiplicand
 12116  0148D6  C079  F063         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
 12117  0148DA  EC56  F0AF         	call	___wmul	;wreg free
 12118  0148DE  C060  F07E         	movff	?___wmul,LCD_DrawField@count
 12119  0148E2  C061  F07F         	movff	?___wmul+1,LCD_DrawField@count+1
 12120                           
 12121                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
 12122  0148E6  C076  F065         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
 12123  0148EA  0100               	movlb	0	; () banked
 12124  0148EC  0580               	decf	LCD_DrawField@xmax& (0+255),w,b
 12125  0148EE  0100               	movlb	0	; () banked
 12126  0148F0  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 12127  0148F2  0100               	movlb	0	; () banked
 12128  0148F4  0581               	decf	LCD_DrawField@ymax& (0+255),w,b
 12129  0148F6  0100               	movlb	0	; () banked
 12130  0148F8  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 12131  0148FA  0100               	movlb	0	; () banked
 12132  0148FC  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
 12133  0148FE  EC60  F0A2         	call	_Set_Addr_Window
 12134                           
 12135                           ;LCD.c: 403: for(i = 0; i < count; i++)
 12136  014902  0E00               	movlw	0
 12137  014904  0100               	movlb	0	; () banked
 12138  014906  6F82               	movwf	LCD_DrawField@i& (0+255),b
 12139  014908  D013               	goto	l183
 12140  01490A                     
 12141                           ; BSR set to: 0
 12142                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
 12143                           
 12144                           ; BSR set to: 0
 12145  01490A  0100               	movlb	0	; () banked
 12146  01490C  5182               	movf	LCD_DrawField@i& (0+255),w,b
 12147  01490E  0D02               	mullw	2
 12148  014910  50F3               	movf	prodl,w,c
 12149  014912  0100               	movlb	0	; () banked
 12150  014914  2572               	addwf	LCD_DrawField@pField& (0+255),w,b
 12151  014916  6ED9               	movwf	fsr2l,c
 12152  014918  50F4               	movf	prodh,w,c
 12153  01491A  0100               	movlb	0	; () banked
 12154  01491C  2173               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
 12155  01491E  6EDA               	movwf	fsr2h,c
 12156  014920  CFDE F065          	movff	postinc2,LCD_Word_Write@value
 12157  014924  CFDD F066          	movff	postdec2,LCD_Word_Write@value+1
 12158  014928  ECE7  F0B0         	call	_LCD_Word_Write	;wreg free
 12159  01492C  0100               	movlb	0	; () banked
 12160  01492E  2B82               	incf	LCD_DrawField@i& (0+255),f,b
 12161  014930                     l183:
 12162                           
 12163                           ; BSR set to: 0
 12164                           
 12165                           ; BSR set to: 0
 12166  014930  0100               	movlb	0	; () banked
 12167  014932  5182               	movf	LCD_DrawField@i& (0+255),w,b
 12168  014934  0100               	movlb	0	; () banked
 12169  014936  6F7C               	movwf	??_LCD_DrawField& (0+255),b
 12170  014938  6B7D               	clrf	(??_LCD_DrawField+1)& (0+255),b
 12171  01493A  0100               	movlb	0	; () banked
 12172  01493C  517E               	movf	LCD_DrawField@count& (0+255),w,b
 12173  01493E  0100               	movlb	0	; () banked
 12174  014940  5D7C               	subwf	??_LCD_DrawField& (0+255),w,b
 12175  014942  0100               	movlb	0	; () banked
 12176  014944  517F               	movf	(LCD_DrawField@count+1)& (0+255),w,b
 12177  014946  0100               	movlb	0	; () banked
 12178  014948  597D               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
 12179  01494A  B0D8               	btfsc	status,0,c
 12180  01494C  0012               	return	
 12181  01494E  D7DD               	goto	l184
 12182  014950                     __end_of_LCD_DrawField:
 12183                           	opt stack 0
 12184                           tosu	equ	0xFFF
 12185                           tosh	equ	0xFFE
 12186                           tosl	equ	0xFFD
 12187                           pclath	equ	0xFFA
 12188                           tblptru	equ	0xFF8
 12189                           tblptrh	equ	0xFF7
 12190                           tblptrl	equ	0xFF6
 12191                           tablat	equ	0xFF5
 12192                           prodh	equ	0xFF4
 12193                           prodl	equ	0xFF3
 12194                           intcon	equ	0xFF2
 12195                           postinc0	equ	0xFEE
 12196                           wreg	equ	0xFE8
 12197                           indf1	equ	0xFE7
 12198                           postdec1	equ	0xFE5
 12199                           fsr1h	equ	0xFE2
 12200                           fsr1l	equ	0xFE1
 12201                           indf2	equ	0xFDF
 12202                           postinc2	equ	0xFDE
 12203                           postdec2	equ	0xFDD
 12204                           plusw2	equ	0xFDB
 12205                           fsr2h	equ	0xFDA
 12206                           fsr2l	equ	0xFD9
 12207                           status	equ	0xFD8
 12208                           
 12209 ;; *************** function ___wmul *****************
 12210 ;; Defined at:
 12211 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
 12212 ;; Parameters:    Size  Location     Type
 12213 ;;  multiplier      2    0[BANK0 ] unsigned int 
 12214 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 12215 ;; Auto vars:     Size  Location     Type
 12216 ;;  product         2    4[BANK0 ] unsigned int 
 12217 ;; Return value:  Size  Location     Type
 12218 ;;                  2    0[BANK0 ] unsigned int 
 12219 ;; Registers used:
 12220 ;;		wreg, status,2, status,0, prodl, prodh
 12221 ;; Tracked objects:
 12222 ;;		On entry : 0/0
 12223 ;;		On exit  : 0/0
 12224 ;;		Unchanged: 0/0
 12225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12226 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12227 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12229 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12230 ;;Total ram usage:        6 bytes
 12231 ;; Hardware stack levels used:    1
 12232 ;; Hardware stack levels required when called:    7
 12233 ;; This function calls:
 12234 ;;		Nothing
 12235 ;; This function is called by:
 12236 ;;		_LCD_DrawField
 12237 ;; This function uses a non-reentrant model
 12238 ;;
 12239                           
 12240                           	psect	text53
 12241  015EAC                     __ptext53:
 12242                           	opt stack 0
 12243  015EAC                     ___wmul:
 12244                           	opt stack 20
 12245                           
 12246                           ; BSR set to: 0
 12247                           ;incstack = 0
 12248  015EAC  0100               	movlb	0	; () banked
 12249  015EAE  5160               	movf	___wmul@multiplier& (0+255),w,b
 12250  015EB0  0100               	movlb	0	; () banked
 12251  015EB2  0362               	mulwf	___wmul@multiplicand& (0+255),b
 12252  015EB4  CFF3 F064          	movff	prodl,___wmul@product
 12253  015EB8  CFF4 F065          	movff	prodh,___wmul@product+1
 12254  015EBC  0100               	movlb	0	; () banked
 12255  015EBE  5160               	movf	___wmul@multiplier& (0+255),w,b
 12256  015EC0  0100               	movlb	0	; () banked
 12257  015EC2  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 12258  015EC4  50F3               	movf	prodl,w,c
 12259  015EC6  0100               	movlb	0	; () banked
 12260  015EC8  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 12261  015ECA  0100               	movlb	0	; () banked
 12262  015ECC  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 12263  015ECE  0100               	movlb	0	; () banked
 12264  015ED0  0362               	mulwf	___wmul@multiplicand& (0+255),b
 12265  015ED2  50F3               	movf	prodl,w,c
 12266  015ED4  0100               	movlb	0	; () banked
 12267  015ED6  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 12268                           
 12269                           ; BSR set to: 0
 12270  015ED8  C064  F060         	movff	___wmul@product,?___wmul
 12271  015EDC  C065  F061         	movff	___wmul@product+1,?___wmul+1
 12272  015EE0  0012               	return	
 12273  015EE2                     __end_of___wmul:
 12274                           	opt stack 0
 12275                           tosu	equ	0xFFF
 12276                           tosh	equ	0xFFE
 12277                           tosl	equ	0xFFD
 12278                           pclath	equ	0xFFA
 12279                           tblptru	equ	0xFF8
 12280                           tblptrh	equ	0xFF7
 12281                           tblptrl	equ	0xFF6
 12282                           tablat	equ	0xFF5
 12283                           prodh	equ	0xFF4
 12284                           prodl	equ	0xFF3
 12285                           intcon	equ	0xFF2
 12286                           postinc0	equ	0xFEE
 12287                           wreg	equ	0xFE8
 12288                           indf1	equ	0xFE7
 12289                           postdec1	equ	0xFE5
 12290                           fsr1h	equ	0xFE2
 12291                           fsr1l	equ	0xFE1
 12292                           indf2	equ	0xFDF
 12293                           postinc2	equ	0xFDE
 12294                           postdec2	equ	0xFDD
 12295                           plusw2	equ	0xFDB
 12296                           fsr2h	equ	0xFDA
 12297                           fsr2l	equ	0xFD9
 12298                           status	equ	0xFD8
 12299                           
 12300 ;; *************** function _Console_MakeField *****************
 12301 ;; Defined at:
 12302 ;;		line 435 in file "Library/Console.c"
 12303 ;; Parameters:    Size  Location     Type
 12304 ;;  pInput          1    wreg     unsigned char 
 12305 ;; Auto vars:     Size  Location     Type
 12306 ;;  pInput          1   11[BANK0 ] unsigned char 
 12307 ;;  y               1   17[BANK0 ] unsigned char 
 12308 ;;  x               1   16[BANK0 ] unsigned char 
 12309 ;;  Column          2   12[BANK0 ] PTR struct Byte
 12310 ;;		 -> Font5x7(480), 
 12311 ;;  Index           2    9[BANK0 ] unsigned short 
 12312 ;; Return value:  Size  Location     Type
 12313 ;;                  2    5[BANK0 ] PTR unsigned short 
 12314 ;; Registers used:
 12315 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12316 ;; Tracked objects:
 12317 ;;		On entry : 0/0
 12318 ;;		On exit  : 0/0
 12319 ;;		Unchanged: 0/0
 12320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12321 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12322 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12323 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12324 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12325 ;;Total ram usage:       13 bytes
 12326 ;; Hardware stack levels used:    1
 12327 ;; Hardware stack levels required when called:    8
 12328 ;; This function calls:
 12329 ;;		_Byte_GetBit
 12330 ;; This function is called by:
 12331 ;;		_Console_Render
 12332 ;; This function uses a non-reentrant model
 12333 ;;
 12334                           
 12335                           	psect	text54
 12336  013E22                     __ptext54:
 12337                           	opt stack 0
 12338  013E22                     _Console_MakeField:
 12339                           	opt stack 20
 12340                           
 12341                           ; BSR set to: 0
 12342                           ;incstack = 0
 12343                           ;Console_MakeField@pInput stored from wreg
 12344  013E22  0100               	movlb	0	; () banked
 12345  013E24  6F6B               	movwf	Console_MakeField@pInput& (0+255),b
 12346                           
 12347                           ;Console.c: 437: static Colour Fill[7][5];
 12348                           ;Console.c: 438: pInput -= 32;
 12349  013E26  0E20               	movlw	32
 12350  013E28  0100               	movlb	0	; () banked
 12351  013E2A  5F6B               	subwf	Console_MakeField@pInput& (0+255),f,b
 12352                           
 12353                           ; BSR set to: 0
 12354                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
 12355  013E2C  0100               	movlb	0	; () banked
 12356  013E2E  516B               	movf	Console_MakeField@pInput& (0+255),w,b
 12357  013E30  0D05               	mullw	5
 12358  013E32  CFF3 F069          	movff	prodl,Console_MakeField@Index
 12359  013E36  CFF4 F06A          	movff	prodh,Console_MakeField@Index+1
 12360                           
 12361                           ; BSR set to: 0
 12362                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 12363  013E3A  0E83               	movlw	low _Font5x7
 12364  013E3C  0100               	movlb	0	; () banked
 12365  013E3E  2569               	addwf	Console_MakeField@Index& (0+255),w,b
 12366  013E40  0100               	movlb	0	; () banked
 12367  013E42  6F6C               	movwf	Console_MakeField@Column& (0+255),b
 12368  013E44  0EFD               	movlw	high _Font5x7
 12369  013E46  0100               	movlb	0	; () banked
 12370  013E48  216A               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 12371  013E4A  0100               	movlb	0	; () banked
 12372  013E4C  6F6D               	movwf	(Console_MakeField@Column+1)& (0+255),b
 12373                           
 12374                           ; BSR set to: 0
 12375                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
 12376  013E4E  0E00               	movlw	0
 12377  013E50  0100               	movlb	0	; () banked
 12378  013E52  6F70               	movwf	Console_MakeField@x& (0+255),b
 12379  013E54                     l13385:
 12380                           
 12381                           ; BSR set to: 0
 12382  013E54  0E04               	movlw	4
 12383  013E56  0100               	movlb	0	; () banked
 12384  013E58  6570               	cpfsgt	Console_MakeField@x& (0+255),b
 12385  013E5A  D001               	goto	l1077
 12386  013E5C  D043               	goto	u9890
 12387  013E5E                     l1077:
 12388                           
 12389                           ; BSR set to: 0
 12390                           ;Console.c: 444: {
 12391                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
 12392                           
 12393                           ; BSR set to: 0
 12394  013E5E  0E00               	movlw	0
 12395  013E60  0100               	movlb	0	; () banked
 12396  013E62  6F71               	movwf	Console_MakeField@y& (0+255),b
 12397  013E64                     l13391:
 12398                           
 12399                           ; BSR set to: 0
 12400  013E64  0E06               	movlw	6
 12401  013E66  0100               	movlb	0	; () banked
 12402  013E68  6571               	cpfsgt	Console_MakeField@y& (0+255),b
 12403  013E6A  D001               	goto	l1079
 12404  013E6C  D035               	goto	u9880
 12405  013E6E                     l1079:
 12406                           
 12407                           ; BSR set to: 0
 12408                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 12409                           
 12410                           ; BSR set to: 0
 12411  013E6E  C06C  F060         	movff	Console_MakeField@Column,Byte_GetBit@pInput
 12412  013E72  C06D  F061         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 12413  013E76  C071  F062         	movff	Console_MakeField@y,Byte_GetBit@pBit
 12414  013E7A  EC8C  F0AF         	call	_Byte_GetBit	;wreg free
 12415  013E7E  0900               	iorlw	0
 12416  013E80  A4D8               	btfss	status,2,c
 12417  013E82  D005               	goto	l1082
 12418  013E84  C0DC  F06E         	movff	_gBackcolour,_Console_MakeField$10974
 12419  013E88  C0DD  F06F         	movff	_gBackcolour+1,_Console_MakeField$10974+1
 12420  013E8C  D004               	goto	l1084
 12421  013E8E                     l1082:
 12422  013E8E  C0FD  F06E         	movff	_gForecolour,_Console_MakeField$10974
 12423  013E92  C0FE  F06F         	movff	_gForecolour+1,_Console_MakeField$10974+1
 12424  013E96                     l1084:
 12425  013E96  0100               	movlb	0	; () banked
 12426  013E98  5171               	movf	Console_MakeField@y& (0+255),w,b
 12427  013E9A  0D0A               	mullw	10
 12428  013E9C  0E82               	movlw	low Console_MakeField@Fill
 12429  013E9E  0100               	movlb	0	; () banked
 12430  013EA0  6F67               	movwf	??_Console_MakeField& (0+255),b
 12431  013EA2  0E04               	movlw	high Console_MakeField@Fill
 12432  013EA4  0100               	movlb	0	; () banked
 12433  013EA6  6F68               	movwf	(??_Console_MakeField+1)& (0+255),b
 12434  013EA8  50F3               	movf	prodl,w,c
 12435  013EAA  0100               	movlb	0	; () banked
 12436  013EAC  2767               	addwf	??_Console_MakeField& (0+255),f,b
 12437  013EAE  50F4               	movf	prodh,w,c
 12438  013EB0  0100               	movlb	0	; () banked
 12439  013EB2  2368               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 12440  013EB4  0100               	movlb	0	; () banked
 12441  013EB6  5170               	movf	Console_MakeField@x& (0+255),w,b
 12442  013EB8  0D02               	mullw	2
 12443  013EBA  50F3               	movf	prodl,w,c
 12444  013EBC  0100               	movlb	0	; () banked
 12445  013EBE  2567               	addwf	??_Console_MakeField& (0+255),w,b
 12446  013EC0  6ED9               	movwf	fsr2l,c
 12447  013EC2  50F4               	movf	prodh,w,c
 12448  013EC4  0100               	movlb	0	; () banked
 12449  013EC6  2168               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 12450  013EC8  6EDA               	movwf	fsr2h,c
 12451  013ECA  C06E  FFDE         	movff	_Console_MakeField$10974,postinc2
 12452  013ECE  C06F  FFDD         	movff	_Console_MakeField$10974+1,postdec2
 12453                           
 12454                           ; BSR set to: 0
 12455  013ED2  0100               	movlb	0	; () banked
 12456  013ED4  2B71               	incf	Console_MakeField@y& (0+255),f,b
 12457  013ED6  D7C6               	goto	l13391
 12458  013ED8                     u9880:
 12459                           
 12460                           ; BSR set to: 0
 12461                           ;Console.c: 447: Column += 1;
 12462                           
 12463                           ; BSR set to: 0
 12464  013ED8  0100               	movlb	0	; () banked
 12465  013EDA  4B6C               	infsnz	Console_MakeField@Column& (0+255),f,b
 12466  013EDC  2B6D               	incf	(Console_MakeField@Column+1)& (0+255),f,b
 12467  013EDE  0100               	movlb	0	; () banked
 12468  013EE0  2B70               	incf	Console_MakeField@x& (0+255),f,b
 12469  013EE2  D7B8               	goto	l13385
 12470  013EE4                     u9890:
 12471                           
 12472                           ; BSR set to: 0
 12473                           ;Console.c: 448: }
 12474                           ;Console.c: 449: return (ColourPtr)Fill;
 12475                           
 12476                           ; BSR set to: 0
 12477  013EE4  0E82               	movlw	low Console_MakeField@Fill
 12478  013EE6  0100               	movlb	0	; () banked
 12479  013EE8  6F65               	movwf	?_Console_MakeField& (0+255),b
 12480  013EEA  0E04               	movlw	high Console_MakeField@Fill
 12481  013EEC  0100               	movlb	0	; () banked
 12482  013EEE  6F66               	movwf	(?_Console_MakeField+1)& (0+255),b
 12483  013EF0  0012               	return	
 12484  013EF2                     __end_of_Console_MakeField:
 12485                           	opt stack 0
 12486                           tosu	equ	0xFFF
 12487                           tosh	equ	0xFFE
 12488                           tosl	equ	0xFFD
 12489                           pclath	equ	0xFFA
 12490                           tblptru	equ	0xFF8
 12491                           tblptrh	equ	0xFF7
 12492                           tblptrl	equ	0xFF6
 12493                           tablat	equ	0xFF5
 12494                           prodh	equ	0xFF4
 12495                           prodl	equ	0xFF3
 12496                           intcon	equ	0xFF2
 12497                           postinc0	equ	0xFEE
 12498                           wreg	equ	0xFE8
 12499                           indf1	equ	0xFE7
 12500                           postdec1	equ	0xFE5
 12501                           fsr1h	equ	0xFE2
 12502                           fsr1l	equ	0xFE1
 12503                           indf2	equ	0xFDF
 12504                           postinc2	equ	0xFDE
 12505                           postdec2	equ	0xFDD
 12506                           plusw2	equ	0xFDB
 12507                           fsr2h	equ	0xFDA
 12508                           fsr2l	equ	0xFD9
 12509                           status	equ	0xFD8
 12510                           
 12511 ;; *************** function _Byte_GetBit *****************
 12512 ;; Defined at:
 12513 ;;		line 38 in file "Library/Types.c"
 12514 ;; Parameters:    Size  Location     Type
 12515 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 12516 ;;		 -> Font5x7(480), 
 12517 ;;  pBit            1    2[BANK0 ] unsigned char 
 12518 ;; Auto vars:     Size  Location     Type
 12519 ;;  Output          1    4[BANK0 ] unsigned char 
 12520 ;; Return value:  Size  Location     Type
 12521 ;;                  1    wreg      unsigned char 
 12522 ;; Registers used:
 12523 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 12524 ;; Tracked objects:
 12525 ;;		On entry : 0/0
 12526 ;;		On exit  : 0/0
 12527 ;;		Unchanged: 0/0
 12528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12529 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12530 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12531 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12532 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12533 ;;Total ram usage:        5 bytes
 12534 ;; Hardware stack levels used:    1
 12535 ;; Hardware stack levels required when called:    7
 12536 ;; This function calls:
 12537 ;;		Nothing
 12538 ;; This function is called by:
 12539 ;;		_Console_MakeField
 12540 ;;		_Word_GetBit
 12541 ;; This function uses a non-reentrant model
 12542 ;;
 12543                           
 12544                           	psect	text55
 12545  015F18                     __ptext55:
 12546                           	opt stack 0
 12547  015F18                     _Byte_GetBit:
 12548                           	opt stack 20
 12549                           
 12550                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 12551                           
 12552                           ; BSR set to: 0
 12553                           ;incstack = 0
 12554  015F18  C060  FFF6         	movff	Byte_GetBit@pInput,tblptrl
 12555  015F1C  C061  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 12556  015F20                     	if	0	;tblptru may be non-zero
 12557  015F20                     	endif
 12558  015F20                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 12559  015F20  0E00               	movlw	low (__mediumconst shr (0+16))
 12560  015F22  6EF8               	movwf	tblptru,c
 12561  015F24                     	endif
 12562  015F24  0008               	tblrd		*
 12563  015F26  CFF5 F064          	movff	tablat,Byte_GetBit@Output
 12564                           
 12565                           ;Types.c: 42: Output >>= pBit;
 12566  015F2A  0100               	movlb	0	; () banked
 12567  015F2C  2962               	incf	Byte_GetBit@pBit& (0+255),w,b
 12568  015F2E  0100               	movlb	0	; () banked
 12569  015F30  6F63               	movwf	??_Byte_GetBit& (0+255),b
 12570  015F32  D003               	goto	u9470
 12571  015F34                     u9475:
 12572  015F34  0100               	movlb	0	; () banked
 12573  015F36  90D8               	bcf	status,0,c
 12574  015F38  3364               	rrcf	Byte_GetBit@Output& (0+255),f,b
 12575  015F3A                     u9470:
 12576  015F3A  0100               	movlb	0	; () banked
 12577  015F3C  2F63               	decfsz	??_Byte_GetBit& (0+255),f,b
 12578  015F3E  D7FA               	goto	u9475
 12579                           
 12580                           ;Types.c: 43: Output &= 1;
 12581  015F40  0E01               	movlw	1
 12582  015F42  0100               	movlb	0	; () banked
 12583  015F44  1764               	andwf	Byte_GetBit@Output& (0+255),f,b
 12584                           
 12585                           ; BSR set to: 0
 12586                           ;Types.c: 44: return Output;
 12587  015F46  0100               	movlb	0	; () banked
 12588  015F48  5164               	movf	Byte_GetBit@Output& (0+255),w,b
 12589  015F4A  0012               	return	
 12590  015F4C                     __end_of_Byte_GetBit:
 12591                           	opt stack 0
 12592                           tosu	equ	0xFFF
 12593                           tosh	equ	0xFFE
 12594                           tosl	equ	0xFFD
 12595                           pclath	equ	0xFFA
 12596                           tblptru	equ	0xFF8
 12597                           tblptrh	equ	0xFF7
 12598                           tblptrl	equ	0xFF6
 12599                           tablat	equ	0xFF5
 12600                           prodh	equ	0xFF4
 12601                           prodl	equ	0xFF3
 12602                           intcon	equ	0xFF2
 12603                           postinc0	equ	0xFEE
 12604                           wreg	equ	0xFE8
 12605                           indf1	equ	0xFE7
 12606                           postdec1	equ	0xFE5
 12607                           fsr1h	equ	0xFE2
 12608                           fsr1l	equ	0xFE1
 12609                           indf2	equ	0xFDF
 12610                           postinc2	equ	0xFDE
 12611                           postdec2	equ	0xFDD
 12612                           plusw2	equ	0xFDB
 12613                           fsr2h	equ	0xFDA
 12614                           fsr2l	equ	0xFD9
 12615                           status	equ	0xFD8
 12616                           
 12617 ;; *************** function _ADC_Voltage *****************
 12618 ;; Defined at:
 12619 ;;		line 259 in file "Library/ADC.c"
 12620 ;; Parameters:    Size  Location     Type
 12621 ;;  pInput          2   64[BANK0 ] PTR struct ADC
 12622 ;;		 -> ADC_AN0(5), 
 12623 ;; Auto vars:     Size  Location     Type
 12624 ;;  output          4   78[BANK0 ] float 
 12625 ;;  ref             4   74[BANK0 ] const float 
 12626 ;;  max             4   70[BANK0 ] const float 
 12627 ;; Return value:  Size  Location     Type
 12628 ;;                  4   64[BANK0 ] float 
 12629 ;; Registers used:
 12630 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12631 ;; Tracked objects:
 12632 ;;		On entry : 0/0
 12633 ;;		On exit  : 0/0
 12634 ;;		Unchanged: 0/0
 12635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12636 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12637 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12638 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12639 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12640 ;;Total ram usage:       18 bytes
 12641 ;; Hardware stack levels used:    1
 12642 ;; Hardware stack levels required when called:    8
 12643 ;; This function calls:
 12644 ;;		___fldiv
 12645 ;;		___flmul
 12646 ;;		___xxtofl
 12647 ;; This function is called by:
 12648 ;;		_mode1
 12649 ;;		_mode4
 12650 ;; This function uses a non-reentrant model
 12651 ;;
 12652                           
 12653                           	psect	text56
 12654  013BA0                     __ptext56:
 12655                           	opt stack 0
 12656  013BA0                     _ADC_Voltage:
 12657                           	opt stack 21
 12658                           
 12659                           ;ADC.c: 261: const float max = 1024;
 12660                           
 12661                           ; BSR set to: 0
 12662                           ;incstack = 0
 12663  013BA0  0E00               	movlw	0
 12664  013BA2  0100               	movlb	0	; () banked
 12665  013BA4  6FA6               	movwf	ADC_Voltage@max& (0+255),b
 12666  013BA6  0E00               	movlw	0
 12667  013BA8  6FA7               	movwf	(ADC_Voltage@max+1)& (0+255),b
 12668  013BAA  0E80               	movlw	128
 12669  013BAC  6FA8               	movwf	(ADC_Voltage@max+2)& (0+255),b
 12670  013BAE  0E44               	movlw	68
 12671  013BB0  6FA9               	movwf	(ADC_Voltage@max+3)& (0+255),b
 12672                           
 12673                           ;ADC.c: 262: const float ref = ((float)3.3-(float)0.000);
 12674  013BB2  0E33               	movlw	51
 12675  013BB4  0100               	movlb	0	; () banked
 12676  013BB6  6FAA               	movwf	ADC_Voltage@ref& (0+255),b
 12677  013BB8  0E33               	movlw	51
 12678  013BBA  6FAB               	movwf	(ADC_Voltage@ref+1)& (0+255),b
 12679  013BBC  0E53               	movlw	83
 12680  013BBE  6FAC               	movwf	(ADC_Voltage@ref+2)& (0+255),b
 12681  013BC0  0E40               	movlw	64
 12682  013BC2  6FAD               	movwf	(ADC_Voltage@ref+3)& (0+255),b
 12683                           
 12684                           ; BSR set to: 0
 12685                           ;ADC.c: 263: float output = pInput->mValue;
 12686  013BC4  0100               	movlb	0	; () banked
 12687  013BC6  EE20 F001          	lfsr	2,1
 12688  013BCA  51A0               	movf	ADC_Voltage@pInput& (0+255),w,b
 12689  013BCC  26D9               	addwf	fsr2l,f,c
 12690  013BCE  51A1               	movf	(ADC_Voltage@pInput+1)& (0+255),w,b
 12691  013BD0  22DA               	addwfc	fsr2h,f,c
 12692  013BD2  CFDE F0A4          	movff	postinc2,??_ADC_Voltage
 12693  013BD6  CFDD F0A5          	movff	postdec2,??_ADC_Voltage+1
 12694  013BDA  C0A4  F060         	movff	??_ADC_Voltage,___xxtofl@val
 12695  013BDE  C0A5  F061         	movff	??_ADC_Voltage+1,___xxtofl@val+1
 12696  013BE2  0100               	movlb	0	; () banked
 12697  013BE4  6B62               	clrf	(___xxtofl@val+2)& (0+255),b
 12698  013BE6  6B63               	clrf	(___xxtofl@val+3)& (0+255),b
 12699  013BE8  0E00               	movlw	0
 12700  013BEA  EC6A  F091         	call	___xxtofl
 12701  013BEE  C060  F0AE         	movff	?___xxtofl,ADC_Voltage@output
 12702  013BF2  C061  F0AF         	movff	?___xxtofl+1,ADC_Voltage@output+1
 12703  013BF6  C062  F0B0         	movff	?___xxtofl+2,ADC_Voltage@output+2
 12704  013BFA  C063  F0B1         	movff	?___xxtofl+3,ADC_Voltage@output+3
 12705                           
 12706                           ;ADC.c: 265: output /= max;
 12707  013BFE  C0AE  F06E         	movff	ADC_Voltage@output,___fldiv@b
 12708  013C02  C0AF  F06F         	movff	ADC_Voltage@output+1,___fldiv@b+1
 12709  013C06  C0B0  F070         	movff	ADC_Voltage@output+2,___fldiv@b+2
 12710  013C0A  C0B1  F071         	movff	ADC_Voltage@output+3,___fldiv@b+3
 12711  013C0E  C0A6  F072         	movff	ADC_Voltage@max,___fldiv@a
 12712  013C12  C0A7  F073         	movff	ADC_Voltage@max+1,___fldiv@a+1
 12713  013C16  C0A8  F074         	movff	ADC_Voltage@max+2,___fldiv@a+2
 12714  013C1A  C0A9  F075         	movff	ADC_Voltage@max+3,___fldiv@a+3
 12715  013C1E  EC6E  F086         	call	___fldiv	;wreg free
 12716  013C22  C06E  F0AE         	movff	?___fldiv,ADC_Voltage@output
 12717  013C26  C06F  F0AF         	movff	?___fldiv+1,ADC_Voltage@output+1
 12718  013C2A  C070  F0B0         	movff	?___fldiv+2,ADC_Voltage@output+2
 12719  013C2E  C071  F0B1         	movff	?___fldiv+3,ADC_Voltage@output+3
 12720                           
 12721                           ;ADC.c: 266: output *= ref;
 12722  013C32  C0AE  F087         	movff	ADC_Voltage@output,___flmul@b
 12723  013C36  C0AF  F088         	movff	ADC_Voltage@output+1,___flmul@b+1
 12724  013C3A  C0B0  F089         	movff	ADC_Voltage@output+2,___flmul@b+2
 12725  013C3E  C0B1  F08A         	movff	ADC_Voltage@output+3,___flmul@b+3
 12726  013C42  C0AA  F08B         	movff	ADC_Voltage@ref,___flmul@a
 12727  013C46  C0AB  F08C         	movff	ADC_Voltage@ref+1,___flmul@a+1
 12728  013C4A  C0AC  F08D         	movff	ADC_Voltage@ref+2,___flmul@a+2
 12729  013C4E  C0AD  F08E         	movff	ADC_Voltage@ref+3,___flmul@a+3
 12730  013C52  EC00  F080         	call	___flmul	;wreg free
 12731  013C56  C087  F0AE         	movff	?___flmul,ADC_Voltage@output
 12732  013C5A  C088  F0AF         	movff	?___flmul+1,ADC_Voltage@output+1
 12733  013C5E  C089  F0B0         	movff	?___flmul+2,ADC_Voltage@output+2
 12734  013C62  C08A  F0B1         	movff	?___flmul+3,ADC_Voltage@output+3
 12735                           
 12736                           ;ADC.c: 268: return output + (float)0.000;
 12737  013C66  C0AE  F0A0         	movff	ADC_Voltage@output,?_ADC_Voltage
 12738  013C6A  C0AF  F0A1         	movff	ADC_Voltage@output+1,?_ADC_Voltage+1
 12739  013C6E  C0B0  F0A2         	movff	ADC_Voltage@output+2,?_ADC_Voltage+2
 12740  013C72  C0B1  F0A3         	movff	ADC_Voltage@output+3,?_ADC_Voltage+3
 12741  013C76  0012               	return	
 12742  013C78                     __end_of_ADC_Voltage:
 12743                           	opt stack 0
 12744                           tosu	equ	0xFFF
 12745                           tosh	equ	0xFFE
 12746                           tosl	equ	0xFFD
 12747                           pclath	equ	0xFFA
 12748                           tblptru	equ	0xFF8
 12749                           tblptrh	equ	0xFF7
 12750                           tblptrl	equ	0xFF6
 12751                           tablat	equ	0xFF5
 12752                           prodh	equ	0xFF4
 12753                           prodl	equ	0xFF3
 12754                           intcon	equ	0xFF2
 12755                           postinc0	equ	0xFEE
 12756                           wreg	equ	0xFE8
 12757                           indf1	equ	0xFE7
 12758                           postdec1	equ	0xFE5
 12759                           fsr1h	equ	0xFE2
 12760                           fsr1l	equ	0xFE1
 12761                           indf2	equ	0xFDF
 12762                           postinc2	equ	0xFDE
 12763                           postdec2	equ	0xFDD
 12764                           plusw2	equ	0xFDB
 12765                           fsr2h	equ	0xFDA
 12766                           fsr2l	equ	0xFD9
 12767                           status	equ	0xFD8
 12768                           
 12769 ;; *************** function ___xxtofl *****************
 12770 ;; Defined at:
 12771 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\xxtofl.c"
 12772 ;; Parameters:    Size  Location     Type
 12773 ;;  sign            1    wreg     unsigned char 
 12774 ;;  val             4    0[BANK0 ] long 
 12775 ;; Auto vars:     Size  Location     Type
 12776 ;;  sign            1    8[BANK0 ] unsigned char 
 12777 ;;  arg             4   10[BANK0 ] unsigned long 
 12778 ;;  exp             1    9[BANK0 ] unsigned char 
 12779 ;; Return value:  Size  Location     Type
 12780 ;;                  4    0[BANK0 ] unsigned char 
 12781 ;; Registers used:
 12782 ;;		wreg, status,2, status,0
 12783 ;; Tracked objects:
 12784 ;;		On entry : 0/0
 12785 ;;		On exit  : 0/0
 12786 ;;		Unchanged: 0/0
 12787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12788 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12789 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12790 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12791 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12792 ;;Total ram usage:       14 bytes
 12793 ;; Hardware stack levels used:    1
 12794 ;; Hardware stack levels required when called:    7
 12795 ;; This function calls:
 12796 ;;		Nothing
 12797 ;; This function is called by:
 12798 ;;		_ADC_Voltage
 12799 ;;		_mode4
 12800 ;; This function uses a non-reentrant model
 12801 ;;
 12802                           
 12803                           	psect	text57
 12804  0122D4                     __ptext57:
 12805                           	opt stack 0
 12806  0122D4                     ___xxtofl:
 12807                           	opt stack 22
 12808                           
 12809                           ;incstack = 0
 12810                           ;___xxtofl@sign stored from wreg
 12811  0122D4  0100               	movlb	0	; () banked
 12812  0122D6  6F68               	movwf	___xxtofl@sign& (0+255),b
 12813  0122D8  0100               	movlb	0	; () banked
 12814  0122DA  5168               	movf	___xxtofl@sign& (0+255),w,b
 12815  0122DC  0100               	movlb	0	; () banked
 12816  0122DE  B4D8               	btfsc	status,2,c
 12817  0122E0  D01E               	goto	l2985
 12818                           
 12819                           ; BSR set to: 0
 12820  0122E2  0100               	movlb	0	; () banked
 12821  0122E4  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 12822  0122E6  D01B               	goto	l2985
 12823                           
 12824                           ; BSR set to: 0
 12825  0122E8  C060  F064         	movff	___xxtofl@val,??___xxtofl
 12826  0122EC  C061  F065         	movff	___xxtofl@val+1,??___xxtofl+1
 12827  0122F0  C062  F066         	movff	___xxtofl@val+2,??___xxtofl+2
 12828  0122F4  C063  F067         	movff	___xxtofl@val+3,??___xxtofl+3
 12829  0122F8  0100               	movlb	0	; () banked
 12830  0122FA  1F64               	comf	??___xxtofl& (0+255),f,b
 12831  0122FC  1F65               	comf	(??___xxtofl+1)& (0+255),f,b
 12832  0122FE  1F66               	comf	(??___xxtofl+2)& (0+255),f,b
 12833  012300  1F67               	comf	(??___xxtofl+3)& (0+255),f,b
 12834  012302  2B64               	incf	??___xxtofl& (0+255),f,b
 12835  012304  0E00               	movlw	0
 12836  012306  2365               	addwfc	(??___xxtofl+1)& (0+255),f,b
 12837  012308  2366               	addwfc	(??___xxtofl+2)& (0+255),f,b
 12838  01230A  2367               	addwfc	(??___xxtofl+3)& (0+255),f,b
 12839  01230C  C064  F06A         	movff	??___xxtofl,___xxtofl@arg
 12840  012310  C065  F06B         	movff	??___xxtofl+1,___xxtofl@arg+1
 12841  012314  C066  F06C         	movff	??___xxtofl+2,___xxtofl@arg+2
 12842  012318  C067  F06D         	movff	??___xxtofl+3,___xxtofl@arg+3
 12843  01231C  D008               	goto	l2986
 12844  01231E                     l2985:
 12845                           
 12846                           ; BSR set to: 0
 12847  01231E  C060  F06A         	movff	___xxtofl@val,___xxtofl@arg
 12848  012322  C061  F06B         	movff	___xxtofl@val+1,___xxtofl@arg+1
 12849  012326  C062  F06C         	movff	___xxtofl@val+2,___xxtofl@arg+2
 12850  01232A  C063  F06D         	movff	___xxtofl@val+3,___xxtofl@arg+3
 12851  01232E                     l2986:
 12852                           
 12853                           ; BSR set to: 0
 12854                           
 12855                           ; BSR set to: 0
 12856  01232E  0100               	movlb	0	; () banked
 12857  012330  5160               	movf	___xxtofl@val& (0+255),w,b
 12858  012332  0100               	movlb	0	; () banked
 12859  012334  1161               	iorwf	(___xxtofl@val+1)& (0+255),w,b
 12860  012336  0100               	movlb	0	; () banked
 12861  012338  1162               	iorwf	(___xxtofl@val+2)& (0+255),w,b
 12862  01233A  0100               	movlb	0	; () banked
 12863  01233C  1163               	iorwf	(___xxtofl@val+3)& (0+255),w,b
 12864  01233E  A4D8               	btfss	status,2,c
 12865  012340  D00A               	goto	l2987
 12866                           
 12867                           ; BSR set to: 0
 12868  012342  0E00               	movlw	0
 12869  012344  0100               	movlb	0	; () banked
 12870  012346  6F60               	movwf	?___xxtofl& (0+255),b
 12871  012348  0E00               	movlw	0
 12872  01234A  6F61               	movwf	(?___xxtofl+1)& (0+255),b
 12873  01234C  0E00               	movlw	0
 12874  01234E  6F62               	movwf	(?___xxtofl+2)& (0+255),b
 12875  012350  0E00               	movlw	0
 12876  012352  6F63               	movwf	(?___xxtofl+3)& (0+255),b
 12877                           
 12878                           ; BSR set to: 0
 12879  012354  0012               	return	
 12880  012356                     l2987:
 12881                           
 12882                           ; BSR set to: 0
 12883                           
 12884                           ; BSR set to: 0
 12885  012356  0E96               	movlw	150
 12886  012358  0100               	movlb	0	; () banked
 12887  01235A  6F69               	movwf	___xxtofl@exp& (0+255),b
 12888  01235C  D008               	goto	l2989
 12889  01235E                     
 12890                           ; BSR set to: 0
 12891                           
 12892                           ; BSR set to: 0
 12893  01235E  0100               	movlb	0	; () banked
 12894  012360  2B69               	incf	___xxtofl@exp& (0+255),f,b
 12895  012362  0100               	movlb	0	; () banked
 12896  012364  90D8               	bcf	status,0,c
 12897  012366  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 12898  012368  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 12899  01236A  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 12900  01236C  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 12901  01236E                     l2989:
 12902                           
 12903                           ; BSR set to: 0
 12904                           
 12905                           ; BSR set to: 0
 12906  01236E  0E00               	movlw	0
 12907  012370  0100               	movlb	0	; () banked
 12908  012372  156A               	andwf	___xxtofl@arg& (0+255),w,b
 12909  012374  0100               	movlb	0	; () banked
 12910  012376  6F64               	movwf	??___xxtofl& (0+255),b
 12911  012378  0E00               	movlw	0
 12912  01237A  0100               	movlb	0	; () banked
 12913  01237C  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 12914  01237E  0100               	movlb	0	; () banked
 12915  012380  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 12916  012382  0E00               	movlw	0
 12917  012384  0100               	movlb	0	; () banked
 12918  012386  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 12919  012388  0100               	movlb	0	; () banked
 12920  01238A  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 12921  01238C  0EFE               	movlw	254
 12922  01238E  0100               	movlb	0	; () banked
 12923  012390  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 12924  012392  0100               	movlb	0	; () banked
 12925  012394  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 12926  012396  0100               	movlb	0	; () banked
 12927  012398  5164               	movf	??___xxtofl& (0+255),w,b
 12928  01239A  0100               	movlb	0	; () banked
 12929  01239C  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 12930  01239E  0100               	movlb	0	; () banked
 12931  0123A0  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 12932  0123A2  0100               	movlb	0	; () banked
 12933  0123A4  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 12934  0123A6  B4D8               	btfsc	status,2,c
 12935  0123A8  D010               	goto	l2992
 12936  0123AA  D7D9               	goto	l2990
 12937  0123AC                     
 12938                           ; BSR set to: 0
 12939                           
 12940                           ; BSR set to: 0
 12941  0123AC  0100               	movlb	0	; () banked
 12942  0123AE  2B69               	incf	___xxtofl@exp& (0+255),f,b
 12943                           
 12944                           ; BSR set to: 0
 12945  0123B0  0E01               	movlw	1
 12946  0123B2  0100               	movlb	0	; () banked
 12947  0123B4  276A               	addwf	___xxtofl@arg& (0+255),f,b
 12948  0123B6  0E00               	movlw	0
 12949  0123B8  236B               	addwfc	(___xxtofl@arg+1)& (0+255),f,b
 12950  0123BA  236C               	addwfc	(___xxtofl@arg+2)& (0+255),f,b
 12951  0123BC  236D               	addwfc	(___xxtofl@arg+3)& (0+255),f,b
 12952                           
 12953                           ; BSR set to: 0
 12954  0123BE  0100               	movlb	0	; () banked
 12955  0123C0  90D8               	bcf	status,0,c
 12956  0123C2  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 12957  0123C4  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 12958  0123C6  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 12959  0123C8  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 12960  0123CA                     l2992:
 12961                           
 12962                           ; BSR set to: 0
 12963  0123CA  0E00               	movlw	0
 12964  0123CC  0100               	movlb	0	; () banked
 12965  0123CE  156A               	andwf	___xxtofl@arg& (0+255),w,b
 12966  0123D0  0100               	movlb	0	; () banked
 12967  0123D2  6F64               	movwf	??___xxtofl& (0+255),b
 12968  0123D4  0E00               	movlw	0
 12969  0123D6  0100               	movlb	0	; () banked
 12970  0123D8  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 12971  0123DA  0100               	movlb	0	; () banked
 12972  0123DC  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 12973  0123DE  0E00               	movlw	0
 12974  0123E0  0100               	movlb	0	; () banked
 12975  0123E2  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 12976  0123E4  0100               	movlb	0	; () banked
 12977  0123E6  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 12978  0123E8  0EFF               	movlw	255
 12979  0123EA  0100               	movlb	0	; () banked
 12980  0123EC  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 12981  0123EE  0100               	movlb	0	; () banked
 12982  0123F0  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 12983  0123F2  0100               	movlb	0	; () banked
 12984  0123F4  5164               	movf	??___xxtofl& (0+255),w,b
 12985  0123F6  0100               	movlb	0	; () banked
 12986  0123F8  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 12987  0123FA  0100               	movlb	0	; () banked
 12988  0123FC  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 12989  0123FE  0100               	movlb	0	; () banked
 12990  012400  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 12991  012402  B4D8               	btfsc	status,2,c
 12992  012404  D009               	goto	l2995
 12993  012406  D7D2               	goto	l2993
 12994  012408                     
 12995                           ; BSR set to: 0
 12996                           
 12997                           ; BSR set to: 0
 12998  012408  0100               	movlb	0	; () banked
 12999  01240A  0769               	decf	___xxtofl@exp& (0+255),f,b
 13000  01240C  0100               	movlb	0	; () banked
 13001  01240E  90D8               	bcf	status,0,c
 13002  012410  376A               	rlcf	___xxtofl@arg& (0+255),f,b
 13003  012412  376B               	rlcf	(___xxtofl@arg+1)& (0+255),f,b
 13004  012414  376C               	rlcf	(___xxtofl@arg+2)& (0+255),f,b
 13005  012416  376D               	rlcf	(___xxtofl@arg+3)& (0+255),f,b
 13006  012418                     l2995:
 13007                           
 13008                           ; BSR set to: 0
 13009                           
 13010                           ; BSR set to: 0
 13011  012418  0100               	movlb	0	; () banked
 13012  01241A  BF6C               	btfsc	(___xxtofl@arg+2)& (0+255),7,b
 13013  01241C  D004               	goto	u10640
 13014                           
 13015                           ; BSR set to: 0
 13016  01241E  0E02               	movlw	2
 13017  012420  0100               	movlb	0	; () banked
 13018  012422  6169               	cpfslt	___xxtofl@exp& (0+255),b
 13019  012424  D7F1               	goto	l2996
 13020  012426                     u10640:
 13021                           
 13022                           ; BSR set to: 0
 13023                           
 13024                           ; BSR set to: 0
 13025  012426  0100               	movlb	0	; () banked
 13026  012428  B169               	btfsc	___xxtofl@exp& (0+255),0,b
 13027  01242A  D009               	goto	l3000
 13028                           
 13029                           ; BSR set to: 0
 13030  01242C  0EFF               	movlw	255
 13031  01242E  0100               	movlb	0	; () banked
 13032  012430  176A               	andwf	___xxtofl@arg& (0+255),f,b
 13033  012432  0EFF               	movlw	255
 13034  012434  176B               	andwf	(___xxtofl@arg+1)& (0+255),f,b
 13035  012436  0E7F               	movlw	127
 13036  012438  176C               	andwf	(___xxtofl@arg+2)& (0+255),f,b
 13037  01243A  0EFF               	movlw	255
 13038  01243C  176D               	andwf	(___xxtofl@arg+3)& (0+255),f,b
 13039  01243E                     l3000:
 13040                           
 13041                           ; BSR set to: 0
 13042  01243E  0100               	movlb	0	; () banked
 13043  012440  90D8               	bcf	status,0,c
 13044  012442  3369               	rrcf	___xxtofl@exp& (0+255),f,b
 13045  012444  C069  F064         	movff	___xxtofl@exp,??___xxtofl
 13046  012448  0100               	movlb	0	; () banked
 13047  01244A  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 13048  01244C  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 13049  01244E  6B67               	clrf	(??___xxtofl+3)& (0+255),b
 13050  012450  C064  F067         	movff	??___xxtofl,??___xxtofl+3
 13051  012454  0100               	movlb	0	; () banked
 13052  012456  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 13053  012458  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 13054  01245A  6B64               	clrf	??___xxtofl& (0+255),b
 13055  01245C  0100               	movlb	0	; () banked
 13056  01245E  5164               	movf	??___xxtofl& (0+255),w,b
 13057  012460  0100               	movlb	0	; () banked
 13058  012462  136A               	iorwf	___xxtofl@arg& (0+255),f,b
 13059  012464  0100               	movlb	0	; () banked
 13060  012466  5165               	movf	(??___xxtofl+1)& (0+255),w,b
 13061  012468  0100               	movlb	0	; () banked
 13062  01246A  136B               	iorwf	(___xxtofl@arg+1)& (0+255),f,b
 13063  01246C  0100               	movlb	0	; () banked
 13064  01246E  5166               	movf	(??___xxtofl+2)& (0+255),w,b
 13065  012470  0100               	movlb	0	; () banked
 13066  012472  136C               	iorwf	(___xxtofl@arg+2)& (0+255),f,b
 13067  012474  0100               	movlb	0	; () banked
 13068  012476  5167               	movf	(??___xxtofl+3)& (0+255),w,b
 13069  012478  0100               	movlb	0	; () banked
 13070  01247A  136D               	iorwf	(___xxtofl@arg+3)& (0+255),f,b
 13071                           
 13072                           ; BSR set to: 0
 13073  01247C  0100               	movlb	0	; () banked
 13074  01247E  5168               	movf	___xxtofl@sign& (0+255),w,b
 13075  012480  0100               	movlb	0	; () banked
 13076  012482  B4D8               	btfsc	status,2,c
 13077  012484  D005               	goto	l3001
 13078                           
 13079                           ; BSR set to: 0
 13080  012486  0100               	movlb	0	; () banked
 13081  012488  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 13082  01248A  D002               	goto	l3001
 13083                           
 13084                           ; BSR set to: 0
 13085  01248C  0100               	movlb	0	; () banked
 13086  01248E  8F6D               	bsf	(___xxtofl@arg+3)& (0+255),7,b
 13087  012490                     l3001:
 13088                           
 13089                           ; BSR set to: 0
 13090                           
 13091                           ; BSR set to: 0
 13092  012490  C06A  F060         	movff	___xxtofl@arg,?___xxtofl
 13093  012494  C06B  F061         	movff	___xxtofl@arg+1,?___xxtofl+1
 13094  012498  C06C  F062         	movff	___xxtofl@arg+2,?___xxtofl+2
 13095  01249C  C06D  F063         	movff	___xxtofl@arg+3,?___xxtofl+3
 13096  0124A0  0012               	return	
 13097  0124A2                     __end_of___xxtofl:
 13098                           	opt stack 0
 13099                           tosu	equ	0xFFF
 13100                           tosh	equ	0xFFE
 13101                           tosl	equ	0xFFD
 13102                           pclath	equ	0xFFA
 13103                           tblptru	equ	0xFF8
 13104                           tblptrh	equ	0xFF7
 13105                           tblptrl	equ	0xFF6
 13106                           tablat	equ	0xFF5
 13107                           prodh	equ	0xFF4
 13108                           prodl	equ	0xFF3
 13109                           intcon	equ	0xFF2
 13110                           postinc0	equ	0xFEE
 13111                           wreg	equ	0xFE8
 13112                           indf1	equ	0xFE7
 13113                           postdec1	equ	0xFE5
 13114                           fsr1h	equ	0xFE2
 13115                           fsr1l	equ	0xFE1
 13116                           indf2	equ	0xFDF
 13117                           postinc2	equ	0xFDE
 13118                           postdec2	equ	0xFDD
 13119                           plusw2	equ	0xFDB
 13120                           fsr2h	equ	0xFDA
 13121                           fsr2l	equ	0xFD9
 13122                           status	equ	0xFD8
 13123                           
 13124 ;; *************** function ___flmul *****************
 13125 ;; Defined at:
 13126 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcmul.c"
 13127 ;; Parameters:    Size  Location     Type
 13128 ;;  b               4   39[BANK0 ] unsigned char 
 13129 ;;  a               4   43[BANK0 ] unsigned char 
 13130 ;; Auto vars:     Size  Location     Type
 13131 ;;  prod            4   58[BANK0 ] struct .
 13132 ;;  grs             4   53[BANK0 ] unsigned long 
 13133 ;;  temp            2   62[BANK0 ] struct .
 13134 ;;  bexp            1   57[BANK0 ] unsigned char 
 13135 ;;  aexp            1   52[BANK0 ] unsigned char 
 13136 ;;  sign            1   51[BANK0 ] unsigned char 
 13137 ;; Return value:  Size  Location     Type
 13138 ;;                  4   39[BANK0 ] unsigned char 
 13139 ;; Registers used:
 13140 ;;		wreg, status,2, status,0, prodl, prodh
 13141 ;; Tracked objects:
 13142 ;;		On entry : 0/0
 13143 ;;		On exit  : 0/0
 13144 ;;		Unchanged: 0/0
 13145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13146 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13147 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13148 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13149 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13150 ;;Total ram usage:       25 bytes
 13151 ;; Hardware stack levels used:    1
 13152 ;; Hardware stack levels required when called:    7
 13153 ;; This function calls:
 13154 ;;		Nothing
 13155 ;; This function is called by:
 13156 ;;		_ADC_Voltage
 13157 ;;		_mode4
 13158 ;; This function uses a non-reentrant model
 13159 ;;
 13160                           
 13161                           	psect	text58
 13162  010000                     __ptext58:
 13163                           	opt stack 0
 13164  010000                     ___flmul:
 13165                           	opt stack 22
 13166                           
 13167                           ; BSR set to: 0
 13168                           ;incstack = 0
 13169  010000  0100               	movlb	0	; () banked
 13170  010002  518A               	movf	(___flmul@b+3)& (0+255),w,b
 13171  010004  0B80               	andlw	128
 13172  010006  0100               	movlb	0	; () banked
 13173  010008  6F93               	movwf	___flmul@sign& (0+255),b
 13174  01000A  0100               	movlb	0	; () banked
 13175  01000C  518A               	movf	(___flmul@b+3)& (0+255),w,b
 13176  01000E  258A               	addwf	(___flmul@b+3)& (0+255),w,b
 13177  010010  0100               	movlb	0	; () banked
 13178  010012  6F99               	movwf	___flmul@bexp& (0+255),b
 13179                           
 13180                           ; BSR set to: 0
 13181  010014  0100               	movlb	0	; () banked
 13182  010016  AF89               	btfss	(___flmul@b+2)& (0+255),7,b
 13183  010018  D002               	goto	l2956
 13184                           
 13185                           ; BSR set to: 0
 13186  01001A  0100               	movlb	0	; () banked
 13187  01001C  8199               	bsf	___flmul@bexp& (0+255),0,b
 13188  01001E                     l2956:
 13189                           
 13190                           ; BSR set to: 0
 13191                           
 13192                           ; BSR set to: 0
 13193  01001E  0100               	movlb	0	; () banked
 13194  010020  5199               	movf	___flmul@bexp& (0+255),w,b
 13195  010022  0100               	movlb	0	; () banked
 13196  010024  B4D8               	btfsc	status,2,c
 13197  010026  D010               	goto	l2957
 13198                           
 13199                           ; BSR set to: 0
 13200  010028  0100               	movlb	0	; () banked
 13201  01002A  2999               	incf	___flmul@bexp& (0+255),w,b
 13202  01002C  A4D8               	btfss	status,2,c
 13203  01002E  D009               	goto	l2958
 13204                           
 13205                           ; BSR set to: 0
 13206  010030  0E00               	movlw	0
 13207  010032  0100               	movlb	0	; () banked
 13208  010034  6F87               	movwf	___flmul@b& (0+255),b
 13209  010036  0E00               	movlw	0
 13210  010038  6F88               	movwf	(___flmul@b+1)& (0+255),b
 13211  01003A  0E00               	movlw	0
 13212  01003C  6F89               	movwf	(___flmul@b+2)& (0+255),b
 13213  01003E  0E00               	movlw	0
 13214  010040  6F8A               	movwf	(___flmul@b+3)& (0+255),b
 13215  010042                     l2958:
 13216                           
 13217                           ; BSR set to: 0
 13218                           
 13219                           ; BSR set to: 0
 13220  010042  0100               	movlb	0	; () banked
 13221  010044  8F89               	bsf	(___flmul@b+2)& (0+255),7,b
 13222  010046  D009               	goto	l2959
 13223  010048                     l2957:
 13224                           
 13225                           ; BSR set to: 0
 13226                           
 13227                           ; BSR set to: 0
 13228  010048  0E00               	movlw	0
 13229  01004A  0100               	movlb	0	; () banked
 13230  01004C  6F87               	movwf	___flmul@b& (0+255),b
 13231  01004E  0E00               	movlw	0
 13232  010050  6F88               	movwf	(___flmul@b+1)& (0+255),b
 13233  010052  0E00               	movlw	0
 13234  010054  6F89               	movwf	(___flmul@b+2)& (0+255),b
 13235  010056  0E00               	movlw	0
 13236  010058  6F8A               	movwf	(___flmul@b+3)& (0+255),b
 13237  01005A                     l2959:
 13238                           
 13239                           ; BSR set to: 0
 13240                           
 13241                           ; BSR set to: 0
 13242  01005A  0100               	movlb	0	; () banked
 13243  01005C  518E               	movf	(___flmul@a+3)& (0+255),w,b
 13244  01005E  0B80               	andlw	128
 13245  010060  0100               	movlb	0	; () banked
 13246  010062  1B93               	xorwf	___flmul@sign& (0+255),f,b
 13247                           
 13248                           ; BSR set to: 0
 13249  010064  0100               	movlb	0	; () banked
 13250  010066  518E               	movf	(___flmul@a+3)& (0+255),w,b
 13251  010068  258E               	addwf	(___flmul@a+3)& (0+255),w,b
 13252  01006A  0100               	movlb	0	; () banked
 13253  01006C  6F94               	movwf	___flmul@aexp& (0+255),b
 13254                           
 13255                           ; BSR set to: 0
 13256  01006E  0100               	movlb	0	; () banked
 13257  010070  AF8D               	btfss	(___flmul@a+2)& (0+255),7,b
 13258  010072  D002               	goto	l2960
 13259                           
 13260                           ; BSR set to: 0
 13261  010074  0100               	movlb	0	; () banked
 13262  010076  8194               	bsf	___flmul@aexp& (0+255),0,b
 13263  010078                     l2960:
 13264                           
 13265                           ; BSR set to: 0
 13266                           
 13267                           ; BSR set to: 0
 13268  010078  0100               	movlb	0	; () banked
 13269  01007A  5194               	movf	___flmul@aexp& (0+255),w,b
 13270  01007C  0100               	movlb	0	; () banked
 13271  01007E  B4D8               	btfsc	status,2,c
 13272  010080  D010               	goto	l2961
 13273                           
 13274                           ; BSR set to: 0
 13275  010082  0100               	movlb	0	; () banked
 13276  010084  2994               	incf	___flmul@aexp& (0+255),w,b
 13277  010086  A4D8               	btfss	status,2,c
 13278  010088  D009               	goto	l2962
 13279                           
 13280                           ; BSR set to: 0
 13281  01008A  0E00               	movlw	0
 13282  01008C  0100               	movlb	0	; () banked
 13283  01008E  6F8B               	movwf	___flmul@a& (0+255),b
 13284  010090  0E00               	movlw	0
 13285  010092  6F8C               	movwf	(___flmul@a+1)& (0+255),b
 13286  010094  0E00               	movlw	0
 13287  010096  6F8D               	movwf	(___flmul@a+2)& (0+255),b
 13288  010098  0E00               	movlw	0
 13289  01009A  6F8E               	movwf	(___flmul@a+3)& (0+255),b
 13290  01009C                     l2962:
 13291                           
 13292                           ; BSR set to: 0
 13293                           
 13294                           ; BSR set to: 0
 13295  01009C  0100               	movlb	0	; () banked
 13296  01009E  8F8D               	bsf	(___flmul@a+2)& (0+255),7,b
 13297  0100A0  D009               	goto	l2963
 13298  0100A2                     l2961:
 13299                           
 13300                           ; BSR set to: 0
 13301                           
 13302                           ; BSR set to: 0
 13303  0100A2  0E00               	movlw	0
 13304  0100A4  0100               	movlb	0	; () banked
 13305  0100A6  6F8B               	movwf	___flmul@a& (0+255),b
 13306  0100A8  0E00               	movlw	0
 13307  0100AA  6F8C               	movwf	(___flmul@a+1)& (0+255),b
 13308  0100AC  0E00               	movlw	0
 13309  0100AE  6F8D               	movwf	(___flmul@a+2)& (0+255),b
 13310  0100B0  0E00               	movlw	0
 13311  0100B2  6F8E               	movwf	(___flmul@a+3)& (0+255),b
 13312  0100B4                     l2963:
 13313                           
 13314                           ; BSR set to: 0
 13315  0100B4  0100               	movlb	0	; () banked
 13316  0100B6  5194               	movf	___flmul@aexp& (0+255),w,b
 13317  0100B8  0100               	movlb	0	; () banked
 13318  0100BA  B4D8               	btfsc	status,2,c
 13319  0100BC  D005               	goto	u10460
 13320                           
 13321                           ; BSR set to: 0
 13322  0100BE  0100               	movlb	0	; () banked
 13323  0100C0  5199               	movf	___flmul@bexp& (0+255),w,b
 13324  0100C2  0100               	movlb	0	; () banked
 13325  0100C4  A4D8               	btfss	status,2,c
 13326  0100C6  D00A               	goto	l2964
 13327  0100C8                     u10460:
 13328                           
 13329                           ; BSR set to: 0
 13330                           
 13331                           ; BSR set to: 0
 13332  0100C8  0E00               	movlw	0
 13333  0100CA  0100               	movlb	0	; () banked
 13334  0100CC  6F87               	movwf	?___flmul& (0+255),b
 13335  0100CE  0E00               	movlw	0
 13336  0100D0  6F88               	movwf	(?___flmul+1)& (0+255),b
 13337  0100D2  0E00               	movlw	0
 13338  0100D4  6F89               	movwf	(?___flmul+2)& (0+255),b
 13339  0100D6  0E00               	movlw	0
 13340  0100D8  6F8A               	movwf	(?___flmul+3)& (0+255),b
 13341                           
 13342                           ; BSR set to: 0
 13343  0100DA  0012               	return	
 13344  0100DC                     l2964:
 13345                           
 13346                           ; BSR set to: 0
 13347                           
 13348                           ; BSR set to: 0
 13349  0100DC  0100               	movlb	0	; () banked
 13350  0100DE  518D               	movf	(___flmul@a+2)& (0+255),w,b
 13351  0100E0  0100               	movlb	0	; () banked
 13352  0100E2  0387               	mulwf	___flmul@b& (0+255),b
 13353  0100E4  CFF3 F09E          	movff	prodl,___flmul@temp
 13354  0100E8  CFF4 F09F          	movff	prodh,___flmul@temp+1
 13355                           
 13356                           ; BSR set to: 0
 13357  0100EC  0100               	movlb	0	; () banked
 13358  0100EE  519E               	movf	___flmul@temp& (0+255),w,b
 13359  0100F0  0100               	movlb	0	; () banked
 13360  0100F2  6F95               	movwf	___flmul@grs& (0+255),b
 13361  0100F4  6B96               	clrf	(___flmul@grs+1)& (0+255),b
 13362  0100F6  6B97               	clrf	(___flmul@grs+2)& (0+255),b
 13363  0100F8  6B98               	clrf	(___flmul@grs+3)& (0+255),b
 13364                           
 13365                           ; BSR set to: 0
 13366  0100FA  0100               	movlb	0	; () banked
 13367  0100FC  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 13368  0100FE  0100               	movlb	0	; () banked
 13369  010100  6F9A               	movwf	___flmul@prod& (0+255),b
 13370  010102  6B9B               	clrf	(___flmul@prod+1)& (0+255),b
 13371  010104  6B9C               	clrf	(___flmul@prod+2)& (0+255),b
 13372  010106  6B9D               	clrf	(___flmul@prod+3)& (0+255),b
 13373  010108  0100               	movlb	0	; () banked
 13374  01010A  518C               	movf	(___flmul@a+1)& (0+255),w,b
 13375  01010C  0100               	movlb	0	; () banked
 13376  01010E  0388               	mulwf	(___flmul@b+1)& (0+255),b
 13377  010110  CFF3 F09E          	movff	prodl,___flmul@temp
 13378  010114  CFF4 F09F          	movff	prodh,___flmul@temp+1
 13379                           
 13380                           ; BSR set to: 0
 13381  010118  0100               	movlb	0	; () banked
 13382  01011A  519E               	movf	___flmul@temp& (0+255),w,b
 13383  01011C  0100               	movlb	0	; () banked
 13384  01011E  2795               	addwf	___flmul@grs& (0+255),f,b
 13385  010120  0E00               	movlw	0
 13386  010122  2396               	addwfc	(___flmul@grs+1)& (0+255),f,b
 13387  010124  2397               	addwfc	(___flmul@grs+2)& (0+255),f,b
 13388  010126  2398               	addwfc	(___flmul@grs+3)& (0+255),f,b
 13389                           
 13390                           ; BSR set to: 0
 13391  010128  0100               	movlb	0	; () banked
 13392  01012A  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 13393  01012C  0100               	movlb	0	; () banked
 13394  01012E  279A               	addwf	___flmul@prod& (0+255),f,b
 13395  010130  0E00               	movlw	0
 13396  010132  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 13397  010134  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 13398  010136  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 13399  010138  0100               	movlb	0	; () banked
 13400  01013A  518B               	movf	___flmul@a& (0+255),w,b
 13401  01013C  0100               	movlb	0	; () banked
 13402  01013E  0389               	mulwf	(___flmul@b+2)& (0+255),b
 13403  010140  CFF3 F09E          	movff	prodl,___flmul@temp
 13404  010144  CFF4 F09F          	movff	prodh,___flmul@temp+1
 13405                           
 13406                           ; BSR set to: 0
 13407  010148  0100               	movlb	0	; () banked
 13408  01014A  519E               	movf	___flmul@temp& (0+255),w,b
 13409  01014C  0100               	movlb	0	; () banked
 13410  01014E  2795               	addwf	___flmul@grs& (0+255),f,b
 13411  010150  0E00               	movlw	0
 13412  010152  2396               	addwfc	(___flmul@grs+1)& (0+255),f,b
 13413  010154  2397               	addwfc	(___flmul@grs+2)& (0+255),f,b
 13414  010156  2398               	addwfc	(___flmul@grs+3)& (0+255),f,b
 13415                           
 13416                           ; BSR set to: 0
 13417  010158  0100               	movlb	0	; () banked
 13418  01015A  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 13419  01015C  0100               	movlb	0	; () banked
 13420  01015E  279A               	addwf	___flmul@prod& (0+255),f,b
 13421  010160  0E00               	movlw	0
 13422  010162  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 13423  010164  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 13424  010166  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 13425                           
 13426                           ; BSR set to: 0
 13427  010168  C097  F098         	movff	___flmul@grs+2,___flmul@grs+3
 13428  01016C  C096  F097         	movff	___flmul@grs+1,___flmul@grs+2
 13429  010170  C095  F096         	movff	___flmul@grs,___flmul@grs+1
 13430  010174  0100               	movlb	0	; () banked
 13431  010176  6B95               	clrf	___flmul@grs& (0+255),b
 13432                           
 13433                           ; BSR set to: 0
 13434  010178  0100               	movlb	0	; () banked
 13435  01017A  518B               	movf	___flmul@a& (0+255),w,b
 13436  01017C  0100               	movlb	0	; () banked
 13437  01017E  0388               	mulwf	(___flmul@b+1)& (0+255),b
 13438  010180  CFF3 F09E          	movff	prodl,___flmul@temp
 13439  010184  CFF4 F09F          	movff	prodh,___flmul@temp+1
 13440                           
 13441                           ; BSR set to: 0
 13442  010188  0100               	movlb	0	; () banked
 13443  01018A  519E               	movf	___flmul@temp& (0+255),w,b
 13444  01018C  0100               	movlb	0	; () banked
 13445  01018E  2795               	addwf	___flmul@grs& (0+255),f,b
 13446  010190  0100               	movlb	0	; () banked
 13447  010192  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 13448  010194  0100               	movlb	0	; () banked
 13449  010196  2396               	addwfc	(___flmul@grs+1)& (0+255),f,b
 13450  010198  0E00               	movlw	0
 13451  01019A  0100               	movlb	0	; () banked
 13452  01019C  2397               	addwfc	(___flmul@grs+2)& (0+255),f,b
 13453  01019E  0E00               	movlw	0
 13454  0101A0  0100               	movlb	0	; () banked
 13455  0101A2  2398               	addwfc	(___flmul@grs+3)& (0+255),f,b
 13456                           
 13457                           ; BSR set to: 0
 13458  0101A4  0100               	movlb	0	; () banked
 13459  0101A6  518C               	movf	(___flmul@a+1)& (0+255),w,b
 13460  0101A8  0100               	movlb	0	; () banked
 13461  0101AA  0387               	mulwf	___flmul@b& (0+255),b
 13462  0101AC  CFF3 F09E          	movff	prodl,___flmul@temp
 13463  0101B0  CFF4 F09F          	movff	prodh,___flmul@temp+1
 13464                           
 13465                           ; BSR set to: 0
 13466  0101B4  0100               	movlb	0	; () banked
 13467  0101B6  519E               	movf	___flmul@temp& (0+255),w,b
 13468  0101B8  0100               	movlb	0	; () banked
 13469  0101BA  2795               	addwf	___flmul@grs& (0+255),f,b
 13470  0101BC  0100               	movlb	0	; () banked
 13471  0101BE  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 13472  0101C0  0100               	movlb	0	; () banked
 13473  0101C2  2396               	addwfc	(___flmul@grs+1)& (0+255),f,b
 13474  0101C4  0E00               	movlw	0
 13475  0101C6  0100               	movlb	0	; () banked
 13476  0101C8  2397               	addwfc	(___flmul@grs+2)& (0+255),f,b
 13477  0101CA  0E00               	movlw	0
 13478  0101CC  0100               	movlb	0	; () banked
 13479  0101CE  2398               	addwfc	(___flmul@grs+3)& (0+255),f,b
 13480                           
 13481                           ; BSR set to: 0
 13482  0101D0  C097  F098         	movff	___flmul@grs+2,___flmul@grs+3
 13483  0101D4  C096  F097         	movff	___flmul@grs+1,___flmul@grs+2
 13484  0101D8  C095  F096         	movff	___flmul@grs,___flmul@grs+1
 13485  0101DC  0100               	movlb	0	; () banked
 13486  0101DE  6B95               	clrf	___flmul@grs& (0+255),b
 13487  0101E0  0100               	movlb	0	; () banked
 13488  0101E2  518B               	movf	___flmul@a& (0+255),w,b
 13489  0101E4  0100               	movlb	0	; () banked
 13490  0101E6  0387               	mulwf	___flmul@b& (0+255),b
 13491  0101E8  CFF3 F09E          	movff	prodl,___flmul@temp
 13492  0101EC  CFF4 F09F          	movff	prodh,___flmul@temp+1
 13493                           
 13494                           ; BSR set to: 0
 13495  0101F0  0100               	movlb	0	; () banked
 13496  0101F2  519E               	movf	___flmul@temp& (0+255),w,b
 13497  0101F4  0100               	movlb	0	; () banked
 13498  0101F6  2795               	addwf	___flmul@grs& (0+255),f,b
 13499  0101F8  0100               	movlb	0	; () banked
 13500  0101FA  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 13501  0101FC  0100               	movlb	0	; () banked
 13502  0101FE  2396               	addwfc	(___flmul@grs+1)& (0+255),f,b
 13503  010200  0E00               	movlw	0
 13504  010202  0100               	movlb	0	; () banked
 13505  010204  2397               	addwfc	(___flmul@grs+2)& (0+255),f,b
 13506  010206  0E00               	movlw	0
 13507  010208  0100               	movlb	0	; () banked
 13508  01020A  2398               	addwfc	(___flmul@grs+3)& (0+255),f,b
 13509                           
 13510                           ; BSR set to: 0
 13511  01020C  0100               	movlb	0	; () banked
 13512  01020E  518D               	movf	(___flmul@a+2)& (0+255),w,b
 13513  010210  0100               	movlb	0	; () banked
 13514  010212  0388               	mulwf	(___flmul@b+1)& (0+255),b
 13515  010214  CFF3 F09E          	movff	prodl,___flmul@temp
 13516  010218  CFF4 F09F          	movff	prodh,___flmul@temp+1
 13517  01021C  0100               	movlb	0	; () banked
 13518  01021E  519E               	movf	___flmul@temp& (0+255),w,b
 13519  010220  0100               	movlb	0	; () banked
 13520  010222  279A               	addwf	___flmul@prod& (0+255),f,b
 13521  010224  0100               	movlb	0	; () banked
 13522  010226  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 13523  010228  0100               	movlb	0	; () banked
 13524  01022A  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 13525  01022C  0E00               	movlw	0
 13526  01022E  0100               	movlb	0	; () banked
 13527  010230  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 13528  010232  0E00               	movlw	0
 13529  010234  0100               	movlb	0	; () banked
 13530  010236  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 13531                           
 13532                           ; BSR set to: 0
 13533  010238  0100               	movlb	0	; () banked
 13534  01023A  518C               	movf	(___flmul@a+1)& (0+255),w,b
 13535  01023C  0100               	movlb	0	; () banked
 13536  01023E  0389               	mulwf	(___flmul@b+2)& (0+255),b
 13537  010240  CFF3 F09E          	movff	prodl,___flmul@temp
 13538  010244  CFF4 F09F          	movff	prodh,___flmul@temp+1
 13539                           
 13540                           ; BSR set to: 0
 13541  010248  0100               	movlb	0	; () banked
 13542  01024A  519E               	movf	___flmul@temp& (0+255),w,b
 13543  01024C  0100               	movlb	0	; () banked
 13544  01024E  279A               	addwf	___flmul@prod& (0+255),f,b
 13545  010250  0100               	movlb	0	; () banked
 13546  010252  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 13547  010254  0100               	movlb	0	; () banked
 13548  010256  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 13549  010258  0E00               	movlw	0
 13550  01025A  0100               	movlb	0	; () banked
 13551  01025C  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 13552  01025E  0E00               	movlw	0
 13553  010260  0100               	movlb	0	; () banked
 13554  010262  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 13555  010264  0100               	movlb	0	; () banked
 13556  010266  518D               	movf	(___flmul@a+2)& (0+255),w,b
 13557  010268  0100               	movlb	0	; () banked
 13558  01026A  0389               	mulwf	(___flmul@b+2)& (0+255),b
 13559  01026C  CFF3 F09E          	movff	prodl,___flmul@temp
 13560  010270  CFF4 F09F          	movff	prodh,___flmul@temp+1
 13561                           
 13562                           ; BSR set to: 0
 13563  010274  0100               	movlb	0	; () banked
 13564  010276  519E               	movf	___flmul@temp& (0+255),w,b
 13565  010278  0100               	movlb	0	; () banked
 13566  01027A  6F8F               	movwf	??___flmul& (0+255),b
 13567  01027C  0100               	movlb	0	; () banked
 13568  01027E  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 13569  010280  0100               	movlb	0	; () banked
 13570  010282  6F90               	movwf	(??___flmul+1)& (0+255),b
 13571  010284  0100               	movlb	0	; () banked
 13572  010286  6B91               	clrf	(??___flmul+2)& (0+255),b
 13573  010288  0100               	movlb	0	; () banked
 13574  01028A  6B92               	clrf	(??___flmul+3)& (0+255),b
 13575  01028C  C091  F092         	movff	??___flmul+2,??___flmul+3
 13576  010290  C090  F091         	movff	??___flmul+1,??___flmul+2
 13577  010294  C08F  F090         	movff	??___flmul,??___flmul+1
 13578  010298  0100               	movlb	0	; () banked
 13579  01029A  6B8F               	clrf	??___flmul& (0+255),b
 13580  01029C  0100               	movlb	0	; () banked
 13581  01029E  518F               	movf	??___flmul& (0+255),w,b
 13582  0102A0  0100               	movlb	0	; () banked
 13583  0102A2  279A               	addwf	___flmul@prod& (0+255),f,b
 13584  0102A4  0100               	movlb	0	; () banked
 13585  0102A6  5190               	movf	(??___flmul+1)& (0+255),w,b
 13586  0102A8  0100               	movlb	0	; () banked
 13587  0102AA  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 13588  0102AC  0100               	movlb	0	; () banked
 13589  0102AE  5191               	movf	(??___flmul+2)& (0+255),w,b
 13590  0102B0  0100               	movlb	0	; () banked
 13591  0102B2  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 13592  0102B4  0100               	movlb	0	; () banked
 13593  0102B6  5192               	movf	(??___flmul+3)& (0+255),w,b
 13594  0102B8  0100               	movlb	0	; () banked
 13595  0102BA  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 13596                           
 13597                           ; BSR set to: 0
 13598  0102BC  C095  F08F         	movff	___flmul@grs,??___flmul
 13599  0102C0  C096  F090         	movff	___flmul@grs+1,??___flmul+1
 13600  0102C4  C097  F091         	movff	___flmul@grs+2,??___flmul+2
 13601  0102C8  C098  F092         	movff	___flmul@grs+3,??___flmul+3
 13602  0102CC  0E19               	movlw	25
 13603  0102CE  D006               	goto	u10470
 13604  0102D0                     u10475:
 13605  0102D0  0100               	movlb	0	; () banked
 13606  0102D2  90D8               	bcf	status,0,c
 13607  0102D4  3392               	rrcf	(??___flmul+3)& (0+255),f,b
 13608  0102D6  3391               	rrcf	(??___flmul+2)& (0+255),f,b
 13609  0102D8  3390               	rrcf	(??___flmul+1)& (0+255),f,b
 13610  0102DA  338F               	rrcf	??___flmul& (0+255),f,b
 13611  0102DC                     u10470:
 13612  0102DC  2EE8               	decfsz	wreg,f,c
 13613  0102DE  D7F8               	goto	u10475
 13614  0102E0  0100               	movlb	0	; () banked
 13615  0102E2  518F               	movf	??___flmul& (0+255),w,b
 13616  0102E4  0100               	movlb	0	; () banked
 13617  0102E6  279A               	addwf	___flmul@prod& (0+255),f,b
 13618  0102E8  0100               	movlb	0	; () banked
 13619  0102EA  5190               	movf	(??___flmul+1)& (0+255),w,b
 13620  0102EC  0100               	movlb	0	; () banked
 13621  0102EE  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 13622  0102F0  0100               	movlb	0	; () banked
 13623  0102F2  5191               	movf	(??___flmul+2)& (0+255),w,b
 13624  0102F4  0100               	movlb	0	; () banked
 13625  0102F6  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 13626  0102F8  0100               	movlb	0	; () banked
 13627  0102FA  5192               	movf	(??___flmul+3)& (0+255),w,b
 13628  0102FC  0100               	movlb	0	; () banked
 13629  0102FE  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 13630                           
 13631                           ; BSR set to: 0
 13632  010300  C097  F098         	movff	___flmul@grs+2,___flmul@grs+3
 13633  010304  C096  F097         	movff	___flmul@grs+1,___flmul@grs+2
 13634  010308  C095  F096         	movff	___flmul@grs,___flmul@grs+1
 13635  01030C  0100               	movlb	0	; () banked
 13636  01030E  6B95               	clrf	___flmul@grs& (0+255),b
 13637                           
 13638                           ; BSR set to: 0
 13639  010310  0100               	movlb	0	; () banked
 13640  010312  5194               	movf	___flmul@aexp& (0+255),w,b
 13641  010314  C099  F08F         	movff	___flmul@bexp,??___flmul
 13642  010318  0100               	movlb	0	; () banked
 13643  01031A  6B90               	clrf	(??___flmul+1)& (0+255),b
 13644  01031C  0100               	movlb	0	; () banked
 13645  01031E  278F               	addwf	??___flmul& (0+255),f,b
 13646  010320  0E00               	movlw	0
 13647  010322  2390               	addwfc	(??___flmul+1)& (0+255),f,b
 13648  010324  0E82               	movlw	130
 13649  010326  0100               	movlb	0	; () banked
 13650  010328  258F               	addwf	??___flmul& (0+255),w,b
 13651  01032A  0100               	movlb	0	; () banked
 13652  01032C  6F9E               	movwf	___flmul@temp& (0+255),b
 13653  01032E  0EFF               	movlw	255
 13654  010330  0100               	movlb	0	; () banked
 13655  010332  2190               	addwfc	(??___flmul+1)& (0+255),w,b
 13656  010334  0100               	movlb	0	; () banked
 13657  010336  6F9F               	movwf	(___flmul@temp+1)& (0+255),b
 13658  010338  D015               	goto	l2968
 13659  01033A                     
 13660                           ; BSR set to: 0
 13661                           
 13662                           ; BSR set to: 0
 13663  01033A  0100               	movlb	0	; () banked
 13664  01033C  90D8               	bcf	status,0,c
 13665  01033E  379A               	rlcf	___flmul@prod& (0+255),f,b
 13666  010340  379B               	rlcf	(___flmul@prod+1)& (0+255),f,b
 13667  010342  379C               	rlcf	(___flmul@prod+2)& (0+255),f,b
 13668  010344  379D               	rlcf	(___flmul@prod+3)& (0+255),f,b
 13669                           
 13670                           ; BSR set to: 0
 13671  010346  0100               	movlb	0	; () banked
 13672  010348  AF98               	btfss	(___flmul@grs+3)& (0+255),7,b
 13673  01034A  D002               	goto	l2970
 13674                           
 13675                           ; BSR set to: 0
 13676  01034C  0100               	movlb	0	; () banked
 13677  01034E  819A               	bsf	___flmul@prod& (0+255),0,b
 13678  010350                     l2970:
 13679                           
 13680                           ; BSR set to: 0
 13681  010350  0100               	movlb	0	; () banked
 13682  010352  90D8               	bcf	status,0,c
 13683  010354  3795               	rlcf	___flmul@grs& (0+255),f,b
 13684  010356  3796               	rlcf	(___flmul@grs+1)& (0+255),f,b
 13685  010358  3797               	rlcf	(___flmul@grs+2)& (0+255),f,b
 13686  01035A  3798               	rlcf	(___flmul@grs+3)& (0+255),f,b
 13687  01035C  0100               	movlb	0	; () banked
 13688  01035E  079E               	decf	___flmul@temp& (0+255),f,b
 13689  010360  A0D8               	btfss	status,0,c
 13690  010362  079F               	decf	(___flmul@temp+1)& (0+255),f,b
 13691  010364                     l2968:
 13692                           
 13693                           ; BSR set to: 0
 13694                           
 13695                           ; BSR set to: 0
 13696  010364  0100               	movlb	0	; () banked
 13697  010366  AF9C               	btfss	(___flmul@prod+2)& (0+255),7,b
 13698  010368  D7E8               	goto	l2969
 13699                           
 13700                           ; BSR set to: 0
 13701                           
 13702                           ; BSR set to: 0
 13703  01036A  0E00               	movlw	0
 13704  01036C  0100               	movlb	0	; () banked
 13705  01036E  6F94               	movwf	___flmul@aexp& (0+255),b
 13706                           
 13707                           ; BSR set to: 0
 13708  010370  0100               	movlb	0	; () banked
 13709  010372  AF98               	btfss	(___flmul@grs+3)& (0+255),7,b
 13710  010374  D024               	goto	l2975
 13711                           
 13712                           ; BSR set to: 0
 13713  010376  0EFF               	movlw	255
 13714  010378  0100               	movlb	0	; () banked
 13715  01037A  1595               	andwf	___flmul@grs& (0+255),w,b
 13716  01037C  0100               	movlb	0	; () banked
 13717  01037E  6F8F               	movwf	??___flmul& (0+255),b
 13718  010380  0EFF               	movlw	255
 13719  010382  0100               	movlb	0	; () banked
 13720  010384  1596               	andwf	(___flmul@grs+1)& (0+255),w,b
 13721  010386  0100               	movlb	0	; () banked
 13722  010388  6F90               	movwf	(??___flmul+1)& (0+255),b
 13723  01038A  0EFF               	movlw	255
 13724  01038C  0100               	movlb	0	; () banked
 13725  01038E  1597               	andwf	(___flmul@grs+2)& (0+255),w,b
 13726  010390  0100               	movlb	0	; () banked
 13727  010392  6F91               	movwf	(??___flmul+2)& (0+255),b
 13728  010394  0E7F               	movlw	127
 13729  010396  0100               	movlb	0	; () banked
 13730  010398  1598               	andwf	(___flmul@grs+3)& (0+255),w,b
 13731  01039A  0100               	movlb	0	; () banked
 13732  01039C  6F92               	movwf	(??___flmul+3)& (0+255),b
 13733  01039E  0100               	movlb	0	; () banked
 13734  0103A0  518F               	movf	??___flmul& (0+255),w,b
 13735  0103A2  0100               	movlb	0	; () banked
 13736  0103A4  1190               	iorwf	(??___flmul+1)& (0+255),w,b
 13737  0103A6  0100               	movlb	0	; () banked
 13738  0103A8  1191               	iorwf	(??___flmul+2)& (0+255),w,b
 13739  0103AA  0100               	movlb	0	; () banked
 13740  0103AC  1192               	iorwf	(??___flmul+3)& (0+255),w,b
 13741  0103AE  A4D8               	btfss	status,2,c
 13742  0103B0  D003               	goto	u10520
 13743                           
 13744                           ; BSR set to: 0
 13745                           
 13746                           ; BSR set to: 0
 13747  0103B2  0100               	movlb	0	; () banked
 13748  0103B4  A19A               	btfss	___flmul@prod& (0+255),0,b
 13749  0103B6  D003               	goto	l2975
 13750  0103B8                     u10520:
 13751                           
 13752                           ; BSR set to: 0
 13753  0103B8  0E01               	movlw	1
 13754  0103BA  0100               	movlb	0	; () banked
 13755  0103BC  6F94               	movwf	___flmul@aexp& (0+255),b
 13756  0103BE                     l2975:
 13757                           
 13758                           ; BSR set to: 0
 13759                           
 13760                           ; BSR set to: 0
 13761                           
 13762                           ; BSR set to: 0
 13763  0103BE  0100               	movlb	0	; () banked
 13764  0103C0  5194               	movf	___flmul@aexp& (0+255),w,b
 13765  0103C2  0100               	movlb	0	; () banked
 13766  0103C4  B4D8               	btfsc	status,2,c
 13767  0103C6  D023               	goto	l2977
 13768                           
 13769                           ; BSR set to: 0
 13770  0103C8  0E01               	movlw	1
 13771  0103CA  0100               	movlb	0	; () banked
 13772  0103CC  279A               	addwf	___flmul@prod& (0+255),f,b
 13773  0103CE  0E00               	movlw	0
 13774  0103D0  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 13775  0103D2  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 13776  0103D4  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 13777                           
 13778                           ; BSR set to: 0
 13779  0103D6  0100               	movlb	0	; () banked
 13780  0103D8  A19D               	btfss	(___flmul@prod+3)& (0+255),0,b
 13781  0103DA  D019               	goto	l2977
 13782                           
 13783                           ; BSR set to: 0
 13784  0103DC  C09A  F08F         	movff	___flmul@prod,??___flmul
 13785  0103E0  C09B  F090         	movff	___flmul@prod+1,??___flmul+1
 13786  0103E4  C09C  F091         	movff	___flmul@prod+2,??___flmul+2
 13787  0103E8  C09D  F092         	movff	___flmul@prod+3,??___flmul+3
 13788  0103EC  0100               	movlb	0	; () banked
 13789  0103EE  3592               	rlcf	(??___flmul+3)& (0+255),w,b
 13790  0103F0  3392               	rrcf	(??___flmul+3)& (0+255),f,b
 13791  0103F2  3391               	rrcf	(??___flmul+2)& (0+255),f,b
 13792  0103F4  3390               	rrcf	(??___flmul+1)& (0+255),f,b
 13793  0103F6  338F               	rrcf	??___flmul& (0+255),f,b
 13794  0103F8  C08F  F09A         	movff	??___flmul,___flmul@prod
 13795  0103FC  C090  F09B         	movff	??___flmul+1,___flmul@prod+1
 13796  010400  C091  F09C         	movff	??___flmul+2,___flmul@prod+2
 13797  010404  C092  F09D         	movff	??___flmul+3,___flmul@prod+3
 13798                           
 13799                           ; BSR set to: 0
 13800  010408  0100               	movlb	0	; () banked
 13801  01040A  4B9E               	infsnz	___flmul@temp& (0+255),f,b
 13802  01040C  2B9F               	incf	(___flmul@temp+1)& (0+255),f,b
 13803  01040E                     l2977:
 13804                           
 13805                           ; BSR set to: 0
 13806                           
 13807                           ; BSR set to: 0
 13808                           
 13809                           ; BSR set to: 0
 13810  01040E  0100               	movlb	0	; () banked
 13811  010410  BF9F               	btfsc	(___flmul@temp+1)& (0+255),7,b
 13812  010412  D010               	goto	l2978
 13813  010414  0100               	movlb	0	; () banked
 13814  010416  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 13815  010418  E104               	bnz	u10550
 13816  01041A  0100               	movlb	0	; () banked
 13817  01041C  299E               	incf	___flmul@temp& (0+255),w,b
 13818  01041E  A0D8               	btfss	status,0,c
 13819  010420  D009               	goto	l2978
 13820  010422                     u10550:
 13821                           
 13822                           ; BSR set to: 0
 13823  010422  0E00               	movlw	0
 13824  010424  0100               	movlb	0	; () banked
 13825  010426  6F9A               	movwf	___flmul@prod& (0+255),b
 13826  010428  0E00               	movlw	0
 13827  01042A  6F9B               	movwf	(___flmul@prod+1)& (0+255),b
 13828  01042C  0E80               	movlw	128
 13829  01042E  6F9C               	movwf	(___flmul@prod+2)& (0+255),b
 13830  010430  0E7F               	movlw	127
 13831  010432  D02B               	goto	L5
 13832  010434                     l2978:
 13833                           
 13834                           ; BSR set to: 0
 13835                           
 13836                           ; BSR set to: 0
 13837  010434  0100               	movlb	0	; () banked
 13838  010436  BF9F               	btfsc	(___flmul@temp+1)& (0+255),7,b
 13839  010438  D007               	goto	u10560
 13840  01043A  0100               	movlb	0	; () banked
 13841  01043C  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 13842  01043E  E111               	bnz	l2980
 13843  010440  0100               	movlb	0	; () banked
 13844  010442  059E               	decf	___flmul@temp& (0+255),w,b
 13845  010444  B0D8               	btfsc	status,0,c
 13846  010446  D00D               	goto	l2980
 13847  010448                     u10560:
 13848                           
 13849                           ; BSR set to: 0
 13850  010448  0E00               	movlw	0
 13851  01044A  0100               	movlb	0	; () banked
 13852  01044C  6F9A               	movwf	___flmul@prod& (0+255),b
 13853  01044E  0E00               	movlw	0
 13854  010450  6F9B               	movwf	(___flmul@prod+1)& (0+255),b
 13855  010452  0E00               	movlw	0
 13856  010454  6F9C               	movwf	(___flmul@prod+2)& (0+255),b
 13857  010456  0E00               	movlw	0
 13858  010458  6F9D               	movwf	(___flmul@prod+3)& (0+255),b
 13859  01045A  0E00               	movlw	0
 13860  01045C  0100               	movlb	0	; () banked
 13861  01045E  6F93               	movwf	___flmul@sign& (0+255),b
 13862  010460  D015               	goto	l2981
 13863  010462                     l2980:
 13864                           
 13865                           ; BSR set to: 0
 13866  010462  C09E  F099         	movff	___flmul@temp,___flmul@bexp
 13867                           
 13868                           ; BSR set to: 0
 13869  010466  0EFF               	movlw	255
 13870  010468  0100               	movlb	0	; () banked
 13871  01046A  179A               	andwf	___flmul@prod& (0+255),f,b
 13872  01046C  0EFF               	movlw	255
 13873  01046E  179B               	andwf	(___flmul@prod+1)& (0+255),f,b
 13874  010470  0E7F               	movlw	127
 13875  010472  179C               	andwf	(___flmul@prod+2)& (0+255),f,b
 13876  010474  0E00               	movlw	0
 13877  010476  179D               	andwf	(___flmul@prod+3)& (0+255),f,b
 13878                           
 13879                           ; BSR set to: 0
 13880  010478  0100               	movlb	0	; () banked
 13881  01047A  A199               	btfss	___flmul@bexp& (0+255),0,b
 13882  01047C  D002               	goto	l2982
 13883                           
 13884                           ; BSR set to: 0
 13885  01047E  0100               	movlb	0	; () banked
 13886  010480  8F9C               	bsf	(___flmul@prod+2)& (0+255),7,b
 13887  010482                     l2982:
 13888                           
 13889                           ; BSR set to: 0
 13890                           
 13891                           ; BSR set to: 0
 13892  010482  0100               	movlb	0	; () banked
 13893  010484  90D8               	bcf	status,0,c
 13894  010486  3199               	rrcf	___flmul@bexp& (0+255),w,b
 13895  010488  0100               	movlb	0	; () banked
 13896  01048A                     L5:
 13897  01048A  6F9D               	movwf	(___flmul@prod+3)& (0+255),b
 13898  01048C                     l2981:
 13899                           
 13900                           ; BSR set to: 0
 13901                           
 13902                           ; BSR set to: 0
 13903                           
 13904                           ; BSR set to: 0
 13905  01048C  0100               	movlb	0	; () banked
 13906  01048E  5193               	movf	___flmul@sign& (0+255),w,b
 13907  010490  0100               	movlb	0	; () banked
 13908  010492  139D               	iorwf	(___flmul@prod+3)& (0+255),f,b
 13909                           
 13910                           ; BSR set to: 0
 13911  010494  C09A  F087         	movff	___flmul@prod,?___flmul
 13912  010498  C09B  F088         	movff	___flmul@prod+1,?___flmul+1
 13913  01049C  C09C  F089         	movff	___flmul@prod+2,?___flmul+2
 13914  0104A0  C09D  F08A         	movff	___flmul@prod+3,?___flmul+3
 13915  0104A4  0012               	return	
 13916  0104A6                     __end_of___flmul:
 13917                           	opt stack 0
 13918                           tosu	equ	0xFFF
 13919                           tosh	equ	0xFFE
 13920                           tosl	equ	0xFFD
 13921                           pclath	equ	0xFFA
 13922                           tblptru	equ	0xFF8
 13923                           tblptrh	equ	0xFF7
 13924                           tblptrl	equ	0xFF6
 13925                           tablat	equ	0xFF5
 13926                           prodh	equ	0xFF4
 13927                           prodl	equ	0xFF3
 13928                           intcon	equ	0xFF2
 13929                           postinc0	equ	0xFEE
 13930                           wreg	equ	0xFE8
 13931                           indf1	equ	0xFE7
 13932                           postdec1	equ	0xFE5
 13933                           fsr1h	equ	0xFE2
 13934                           fsr1l	equ	0xFE1
 13935                           indf2	equ	0xFDF
 13936                           postinc2	equ	0xFDE
 13937                           postdec2	equ	0xFDD
 13938                           plusw2	equ	0xFDB
 13939                           fsr2h	equ	0xFDA
 13940                           fsr2l	equ	0xFD9
 13941                           status	equ	0xFD8
 13942                           
 13943 ;; *************** function ___fldiv *****************
 13944 ;; Defined at:
 13945 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcdiv.c"
 13946 ;; Parameters:    Size  Location     Type
 13947 ;;  b               4   14[BANK0 ] unsigned char 
 13948 ;;  a               4   18[BANK0 ] unsigned char 
 13949 ;; Auto vars:     Size  Location     Type
 13950 ;;  grs             4   33[BANK0 ] unsigned long 
 13951 ;;  rem             4   27[BANK0 ] unsigned long 
 13952 ;;  new_exp         2   31[BANK0 ] int 
 13953 ;;  aexp            1   38[BANK0 ] unsigned char 
 13954 ;;  bexp            1   37[BANK0 ] unsigned char 
 13955 ;;  sign            1   26[BANK0 ] unsigned char 
 13956 ;; Return value:  Size  Location     Type
 13957 ;;                  4   14[BANK0 ] unsigned char 
 13958 ;; Registers used:
 13959 ;;		wreg, status,2, status,0
 13960 ;; Tracked objects:
 13961 ;;		On entry : 0/0
 13962 ;;		On exit  : 0/0
 13963 ;;		Unchanged: 0/0
 13964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13965 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13966 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13967 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13968 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13969 ;;Total ram usage:       25 bytes
 13970 ;; Hardware stack levels used:    1
 13971 ;; Hardware stack levels required when called:    7
 13972 ;; This function calls:
 13973 ;;		Nothing
 13974 ;; This function is called by:
 13975 ;;		_ADC_Voltage
 13976 ;;		_mode1
 13977 ;;		_mode4
 13978 ;; This function uses a non-reentrant model
 13979 ;;
 13980                           
 13981                           	psect	text59
 13982  010CDC                     __ptext59:
 13983                           	opt stack 0
 13984  010CDC                     ___fldiv:
 13985                           	opt stack 22
 13986                           
 13987                           ; BSR set to: 0
 13988                           ;incstack = 0
 13989  010CDC  0100               	movlb	0	; () banked
 13990  010CDE  5171               	movf	(___fldiv@b+3)& (0+255),w,b
 13991  010CE0  0B80               	andlw	128
 13992  010CE2  0100               	movlb	0	; () banked
 13993  010CE4  6F7A               	movwf	___fldiv@sign& (0+255),b
 13994  010CE6  0100               	movlb	0	; () banked
 13995  010CE8  5171               	movf	(___fldiv@b+3)& (0+255),w,b
 13996  010CEA  2571               	addwf	(___fldiv@b+3)& (0+255),w,b
 13997  010CEC  0100               	movlb	0	; () banked
 13998  010CEE  6F85               	movwf	___fldiv@bexp& (0+255),b
 13999                           
 14000                           ; BSR set to: 0
 14001  010CF0  0100               	movlb	0	; () banked
 14002  010CF2  AF70               	btfss	(___fldiv@b+2)& (0+255),7,b
 14003  010CF4  D002               	goto	l2922
 14004                           
 14005                           ; BSR set to: 0
 14006  010CF6  0100               	movlb	0	; () banked
 14007  010CF8  8185               	bsf	___fldiv@bexp& (0+255),0,b
 14008  010CFA                     l2922:
 14009                           
 14010                           ; BSR set to: 0
 14011                           
 14012                           ; BSR set to: 0
 14013  010CFA  0100               	movlb	0	; () banked
 14014  010CFC  5185               	movf	___fldiv@bexp& (0+255),w,b
 14015  010CFE  0100               	movlb	0	; () banked
 14016  010D00  B4D8               	btfsc	status,2,c
 14017  010D02  D012               	goto	l2923
 14018                           
 14019                           ; BSR set to: 0
 14020  010D04  0100               	movlb	0	; () banked
 14021  010D06  2985               	incf	___fldiv@bexp& (0+255),w,b
 14022  010D08  A4D8               	btfss	status,2,c
 14023  010D0A  D009               	goto	l2924
 14024                           
 14025                           ; BSR set to: 0
 14026  010D0C  0E00               	movlw	0
 14027  010D0E  0100               	movlb	0	; () banked
 14028  010D10  6F6E               	movwf	___fldiv@b& (0+255),b
 14029  010D12  0E00               	movlw	0
 14030  010D14  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 14031  010D16  0E00               	movlw	0
 14032  010D18  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 14033  010D1A  0E00               	movlw	0
 14034  010D1C  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 14035  010D1E                     l2924:
 14036                           
 14037                           ; BSR set to: 0
 14038                           
 14039                           ; BSR set to: 0
 14040  010D1E  0100               	movlb	0	; () banked
 14041  010D20  8F70               	bsf	(___fldiv@b+2)& (0+255),7,b
 14042                           
 14043                           ; BSR set to: 0
 14044  010D22  0E00               	movlw	0
 14045  010D24  0100               	movlb	0	; () banked
 14046  010D26  D008               	goto	L6
 14047  010D28                     l2923:
 14048                           
 14049                           ; BSR set to: 0
 14050                           
 14051                           ; BSR set to: 0
 14052  010D28  0E00               	movlw	0
 14053  010D2A  0100               	movlb	0	; () banked
 14054  010D2C  6F6E               	movwf	___fldiv@b& (0+255),b
 14055  010D2E  0E00               	movlw	0
 14056  010D30  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 14057  010D32  0E00               	movlw	0
 14058  010D34  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 14059  010D36  0E00               	movlw	0
 14060  010D38                     L6:
 14061  010D38  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 14062                           
 14063                           ; BSR set to: 0
 14064                           
 14065                           ; BSR set to: 0
 14066  010D3A  0100               	movlb	0	; () banked
 14067  010D3C  5175               	movf	(___fldiv@a+3)& (0+255),w,b
 14068  010D3E  0B80               	andlw	128
 14069  010D40  0100               	movlb	0	; () banked
 14070  010D42  1B7A               	xorwf	___fldiv@sign& (0+255),f,b
 14071                           
 14072                           ; BSR set to: 0
 14073  010D44  0100               	movlb	0	; () banked
 14074  010D46  5175               	movf	(___fldiv@a+3)& (0+255),w,b
 14075  010D48  2575               	addwf	(___fldiv@a+3)& (0+255),w,b
 14076  010D4A  0100               	movlb	0	; () banked
 14077  010D4C  6F86               	movwf	___fldiv@aexp& (0+255),b
 14078                           
 14079                           ; BSR set to: 0
 14080  010D4E  0100               	movlb	0	; () banked
 14081  010D50  AF74               	btfss	(___fldiv@a+2)& (0+255),7,b
 14082  010D52  D002               	goto	l2926
 14083                           
 14084                           ; BSR set to: 0
 14085  010D54  0100               	movlb	0	; () banked
 14086  010D56  8186               	bsf	___fldiv@aexp& (0+255),0,b
 14087  010D58                     l2926:
 14088                           
 14089                           ; BSR set to: 0
 14090                           
 14091                           ; BSR set to: 0
 14092  010D58  0100               	movlb	0	; () banked
 14093  010D5A  5186               	movf	___fldiv@aexp& (0+255),w,b
 14094  010D5C  0100               	movlb	0	; () banked
 14095  010D5E  B4D8               	btfsc	status,2,c
 14096  010D60  D012               	goto	l2927
 14097                           
 14098                           ; BSR set to: 0
 14099  010D62  0100               	movlb	0	; () banked
 14100  010D64  2986               	incf	___fldiv@aexp& (0+255),w,b
 14101  010D66  A4D8               	btfss	status,2,c
 14102  010D68  D009               	goto	l2928
 14103                           
 14104                           ; BSR set to: 0
 14105  010D6A  0E00               	movlw	0
 14106  010D6C  0100               	movlb	0	; () banked
 14107  010D6E  6F72               	movwf	___fldiv@a& (0+255),b
 14108  010D70  0E00               	movlw	0
 14109  010D72  6F73               	movwf	(___fldiv@a+1)& (0+255),b
 14110  010D74  0E00               	movlw	0
 14111  010D76  6F74               	movwf	(___fldiv@a+2)& (0+255),b
 14112  010D78  0E00               	movlw	0
 14113  010D7A  6F75               	movwf	(___fldiv@a+3)& (0+255),b
 14114  010D7C                     l2928:
 14115                           
 14116                           ; BSR set to: 0
 14117                           
 14118                           ; BSR set to: 0
 14119  010D7C  0100               	movlb	0	; () banked
 14120  010D7E  8F74               	bsf	(___fldiv@a+2)& (0+255),7,b
 14121                           
 14122                           ; BSR set to: 0
 14123  010D80  0E00               	movlw	0
 14124  010D82  0100               	movlb	0	; () banked
 14125  010D84  D008               	goto	L7
 14126  010D86                     l2927:
 14127                           
 14128                           ; BSR set to: 0
 14129                           
 14130                           ; BSR set to: 0
 14131  010D86  0E00               	movlw	0
 14132  010D88  0100               	movlb	0	; () banked
 14133  010D8A  6F72               	movwf	___fldiv@a& (0+255),b
 14134  010D8C  0E00               	movlw	0
 14135  010D8E  6F73               	movwf	(___fldiv@a+1)& (0+255),b
 14136  010D90  0E00               	movlw	0
 14137  010D92  6F74               	movwf	(___fldiv@a+2)& (0+255),b
 14138  010D94  0E00               	movlw	0
 14139  010D96                     L7:
 14140  010D96  6F75               	movwf	(___fldiv@a+3)& (0+255),b
 14141                           
 14142                           ; BSR set to: 0
 14143                           
 14144                           ; BSR set to: 0
 14145  010D98  0100               	movlb	0	; () banked
 14146  010D9A  5172               	movf	___fldiv@a& (0+255),w,b
 14147  010D9C  0100               	movlb	0	; () banked
 14148  010D9E  1173               	iorwf	(___fldiv@a+1)& (0+255),w,b
 14149  010DA0  0100               	movlb	0	; () banked
 14150  010DA2  1174               	iorwf	(___fldiv@a+2)& (0+255),w,b
 14151  010DA4  0100               	movlb	0	; () banked
 14152  010DA6  1175               	iorwf	(___fldiv@a+3)& (0+255),w,b
 14153  010DA8  A4D8               	btfss	status,2,c
 14154  010DAA  D017               	goto	l2930
 14155                           
 14156                           ; BSR set to: 0
 14157  010DAC  0E00               	movlw	0
 14158  010DAE  0100               	movlb	0	; () banked
 14159  010DB0  6F6E               	movwf	___fldiv@b& (0+255),b
 14160  010DB2  0E00               	movlw	0
 14161  010DB4  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 14162  010DB6  0E00               	movlw	0
 14163  010DB8  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 14164  010DBA  0E00               	movlw	0
 14165  010DBC  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 14166                           
 14167                           ; BSR set to: 0
 14168  010DBE  0100               	movlb	0	; () banked
 14169  010DC0  0E80               	movlw	128
 14170  010DC2  1370               	iorwf	(___fldiv@b+2)& (0+255),f,b
 14171  010DC4  0E7F               	movlw	127
 14172  010DC6  1371               	iorwf	(___fldiv@b+3)& (0+255),f,b
 14173                           
 14174                           ; BSR set to: 0
 14175  010DC8  C06E  F06E         	movff	___fldiv@b,?___fldiv
 14176  010DCC  C06F  F06F         	movff	___fldiv@b+1,?___fldiv+1
 14177  010DD0  C070  F070         	movff	___fldiv@b+2,?___fldiv+2
 14178  010DD4  C071  F071         	movff	___fldiv@b+3,?___fldiv+3
 14179                           
 14180                           ; BSR set to: 0
 14181  010DD8  0012               	return	
 14182  010DDA                     l2930:
 14183                           
 14184                           ; BSR set to: 0
 14185                           
 14186                           ; BSR set to: 0
 14187  010DDA  0100               	movlb	0	; () banked
 14188  010DDC  5185               	movf	___fldiv@bexp& (0+255),w,b
 14189  010DDE  0100               	movlb	0	; () banked
 14190  010DE0  A4D8               	btfss	status,2,c
 14191  010DE2  D012               	goto	l2932
 14192                           
 14193                           ; BSR set to: 0
 14194  010DE4  0E00               	movlw	0
 14195  010DE6  0100               	movlb	0	; () banked
 14196  010DE8  6F6E               	movwf	___fldiv@b& (0+255),b
 14197  010DEA  0E00               	movlw	0
 14198  010DEC  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 14199  010DEE  0E00               	movlw	0
 14200  010DF0  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 14201  010DF2  0E00               	movlw	0
 14202  010DF4  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 14203                           
 14204                           ; BSR set to: 0
 14205  010DF6  C06E  F06E         	movff	___fldiv@b,?___fldiv
 14206  010DFA  C06F  F06F         	movff	___fldiv@b+1,?___fldiv+1
 14207  010DFE  C070  F070         	movff	___fldiv@b+2,?___fldiv+2
 14208  010E02  C071  F071         	movff	___fldiv@b+3,?___fldiv+3
 14209                           
 14210                           ; BSR set to: 0
 14211  010E06  0012               	return	
 14212  010E08                     l2932:
 14213                           
 14214                           ; BSR set to: 0
 14215                           
 14216                           ; BSR set to: 0
 14217  010E08  0100               	movlb	0	; () banked
 14218  010E0A  5186               	movf	___fldiv@aexp& (0+255),w,b
 14219  010E0C  0100               	movlb	0	; () banked
 14220  010E0E  6F76               	movwf	??___fldiv& (0+255),b
 14221  010E10  6B77               	clrf	(??___fldiv+1)& (0+255),b
 14222  010E12  0100               	movlb	0	; () banked
 14223  010E14  1F76               	comf	??___fldiv& (0+255),f,b
 14224  010E16  1F77               	comf	(??___fldiv+1)& (0+255),f,b
 14225  010E18  4B76               	infsnz	??___fldiv& (0+255),f,b
 14226  010E1A  2B77               	incf	(??___fldiv+1)& (0+255),f,b
 14227  010E1C  0100               	movlb	0	; () banked
 14228  010E1E  5185               	movf	___fldiv@bexp& (0+255),w,b
 14229  010E20  0100               	movlb	0	; () banked
 14230  010E22  6F78               	movwf	(??___fldiv+2)& (0+255),b
 14231  010E24  6B79               	clrf	(??___fldiv+3)& (0+255),b
 14232  010E26  0100               	movlb	0	; () banked
 14233  010E28  5176               	movf	??___fldiv& (0+255),w,b
 14234  010E2A  0100               	movlb	0	; () banked
 14235  010E2C  2778               	addwf	(??___fldiv+2)& (0+255),f,b
 14236  010E2E  0100               	movlb	0	; () banked
 14237  010E30  5177               	movf	(??___fldiv+1)& (0+255),w,b
 14238  010E32  0100               	movlb	0	; () banked
 14239  010E34  2379               	addwfc	(??___fldiv+3)& (0+255),f,b
 14240  010E36  0E7F               	movlw	127
 14241  010E38  0100               	movlb	0	; () banked
 14242  010E3A  2578               	addwf	(??___fldiv+2)& (0+255),w,b
 14243  010E3C  0100               	movlb	0	; () banked
 14244  010E3E  6F7F               	movwf	___fldiv@new_exp& (0+255),b
 14245  010E40  0E00               	movlw	0
 14246  010E42  0100               	movlb	0	; () banked
 14247  010E44  2179               	addwfc	(??___fldiv+3)& (0+255),w,b
 14248  010E46  0100               	movlb	0	; () banked
 14249  010E48  6F80               	movwf	(___fldiv@new_exp+1)& (0+255),b
 14250                           
 14251                           ; BSR set to: 0
 14252  010E4A  C06E  F07B         	movff	___fldiv@b,___fldiv@rem
 14253  010E4E  C06F  F07C         	movff	___fldiv@b+1,___fldiv@rem+1
 14254  010E52  C070  F07D         	movff	___fldiv@b+2,___fldiv@rem+2
 14255  010E56  C071  F07E         	movff	___fldiv@b+3,___fldiv@rem+3
 14256                           
 14257                           ; BSR set to: 0
 14258  010E5A  0E00               	movlw	0
 14259  010E5C  0100               	movlb	0	; () banked
 14260  010E5E  6F6E               	movwf	___fldiv@b& (0+255),b
 14261  010E60  0E00               	movlw	0
 14262  010E62  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 14263  010E64  0E00               	movlw	0
 14264  010E66  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 14265  010E68  0E00               	movlw	0
 14266  010E6A  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 14267                           
 14268                           ; BSR set to: 0
 14269  010E6C  0E00               	movlw	0
 14270  010E6E  0100               	movlb	0	; () banked
 14271  010E70  6F81               	movwf	___fldiv@grs& (0+255),b
 14272  010E72  0E00               	movlw	0
 14273  010E74  6F82               	movwf	(___fldiv@grs+1)& (0+255),b
 14274  010E76  0E00               	movlw	0
 14275  010E78  6F83               	movwf	(___fldiv@grs+2)& (0+255),b
 14276  010E7A  0E00               	movlw	0
 14277  010E7C  6F84               	movwf	(___fldiv@grs+3)& (0+255),b
 14278                           
 14279                           ; BSR set to: 0
 14280  010E7E  0E00               	movlw	0
 14281  010E80  0100               	movlb	0	; () banked
 14282  010E82  6F86               	movwf	___fldiv@aexp& (0+255),b
 14283  010E84  D042               	goto	l2933
 14284  010E86                     
 14285                           ; BSR set to: 0
 14286                           
 14287                           ; BSR set to: 0
 14288  010E86  0100               	movlb	0	; () banked
 14289  010E88  5186               	movf	___fldiv@aexp& (0+255),w,b
 14290  010E8A  0100               	movlb	0	; () banked
 14291  010E8C  B4D8               	btfsc	status,2,c
 14292  010E8E  D017               	goto	l2935
 14293                           
 14294                           ; BSR set to: 0
 14295  010E90  0100               	movlb	0	; () banked
 14296  010E92  90D8               	bcf	status,0,c
 14297  010E94  377B               	rlcf	___fldiv@rem& (0+255),f,b
 14298  010E96  377C               	rlcf	(___fldiv@rem+1)& (0+255),f,b
 14299  010E98  377D               	rlcf	(___fldiv@rem+2)& (0+255),f,b
 14300  010E9A  377E               	rlcf	(___fldiv@rem+3)& (0+255),f,b
 14301  010E9C  0100               	movlb	0	; () banked
 14302  010E9E  90D8               	bcf	status,0,c
 14303  010EA0  376E               	rlcf	___fldiv@b& (0+255),f,b
 14304  010EA2  376F               	rlcf	(___fldiv@b+1)& (0+255),f,b
 14305  010EA4  3770               	rlcf	(___fldiv@b+2)& (0+255),f,b
 14306  010EA6  3771               	rlcf	(___fldiv@b+3)& (0+255),f,b
 14307                           
 14308                           ; BSR set to: 0
 14309  010EA8  0100               	movlb	0	; () banked
 14310  010EAA  AF84               	btfss	(___fldiv@grs+3)& (0+255),7,b
 14311  010EAC  D002               	goto	l2936
 14312                           
 14313                           ; BSR set to: 0
 14314  010EAE  0100               	movlb	0	; () banked
 14315  010EB0  816E               	bsf	___fldiv@b& (0+255),0,b
 14316  010EB2                     l2936:
 14317                           
 14318                           ; BSR set to: 0
 14319  010EB2  0100               	movlb	0	; () banked
 14320  010EB4  90D8               	bcf	status,0,c
 14321  010EB6  3781               	rlcf	___fldiv@grs& (0+255),f,b
 14322  010EB8  3782               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 14323  010EBA  3783               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 14324  010EBC  3784               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 14325  010EBE                     l2935:
 14326                           
 14327                           ; BSR set to: 0
 14328                           
 14329                           ; BSR set to: 0
 14330  010EBE  0100               	movlb	0	; () banked
 14331  010EC0  5172               	movf	___fldiv@a& (0+255),w,b
 14332  010EC2  0100               	movlb	0	; () banked
 14333  010EC4  5D7B               	subwf	___fldiv@rem& (0+255),w,b
 14334  010EC6  0100               	movlb	0	; () banked
 14335  010EC8  5173               	movf	(___fldiv@a+1)& (0+255),w,b
 14336  010ECA  0100               	movlb	0	; () banked
 14337  010ECC  597C               	subwfb	(___fldiv@rem+1)& (0+255),w,b
 14338  010ECE  0100               	movlb	0	; () banked
 14339  010ED0  5174               	movf	(___fldiv@a+2)& (0+255),w,b
 14340  010ED2  0100               	movlb	0	; () banked
 14341  010ED4  597D               	subwfb	(___fldiv@rem+2)& (0+255),w,b
 14342  010ED6  0100               	movlb	0	; () banked
 14343  010ED8  5175               	movf	(___fldiv@a+3)& (0+255),w,b
 14344  010EDA  0100               	movlb	0	; () banked
 14345  010EDC  597E               	subwfb	(___fldiv@rem+3)& (0+255),w,b
 14346  010EDE  A0D8               	btfss	status,0,c
 14347  010EE0  D012               	goto	l2937
 14348                           
 14349                           ; BSR set to: 0
 14350  010EE2  0100               	movlb	0	; () banked
 14351  010EE4  8D84               	bsf	(___fldiv@grs+3)& (0+255),6,b
 14352                           
 14353                           ; BSR set to: 0
 14354  010EE6  0100               	movlb	0	; () banked
 14355  010EE8  5172               	movf	___fldiv@a& (0+255),w,b
 14356  010EEA  0100               	movlb	0	; () banked
 14357  010EEC  5F7B               	subwf	___fldiv@rem& (0+255),f,b
 14358  010EEE  0100               	movlb	0	; () banked
 14359  010EF0  5173               	movf	(___fldiv@a+1)& (0+255),w,b
 14360  010EF2  0100               	movlb	0	; () banked
 14361  010EF4  5B7C               	subwfb	(___fldiv@rem+1)& (0+255),f,b
 14362  010EF6  0100               	movlb	0	; () banked
 14363  010EF8  5174               	movf	(___fldiv@a+2)& (0+255),w,b
 14364  010EFA  0100               	movlb	0	; () banked
 14365  010EFC  5B7D               	subwfb	(___fldiv@rem+2)& (0+255),f,b
 14366  010EFE  0100               	movlb	0	; () banked
 14367  010F00  5175               	movf	(___fldiv@a+3)& (0+255),w,b
 14368  010F02  0100               	movlb	0	; () banked
 14369  010F04  5B7E               	subwfb	(___fldiv@rem+3)& (0+255),f,b
 14370  010F06                     l2937:
 14371                           
 14372                           ; BSR set to: 0
 14373                           
 14374                           ; BSR set to: 0
 14375  010F06  0100               	movlb	0	; () banked
 14376  010F08  2B86               	incf	___fldiv@aexp& (0+255),f,b
 14377  010F0A                     l2933:
 14378                           
 14379                           ; BSR set to: 0
 14380  010F0A  0E19               	movlw	25
 14381  010F0C  0100               	movlb	0	; () banked
 14382  010F0E  6586               	cpfsgt	___fldiv@aexp& (0+255),b
 14383  010F10  D7BA               	goto	l2934
 14384                           
 14385                           ; BSR set to: 0
 14386                           
 14387                           ; BSR set to: 0
 14388  010F12  0100               	movlb	0	; () banked
 14389  010F14  517B               	movf	___fldiv@rem& (0+255),w,b
 14390  010F16  0100               	movlb	0	; () banked
 14391  010F18  117C               	iorwf	(___fldiv@rem+1)& (0+255),w,b
 14392  010F1A  0100               	movlb	0	; () banked
 14393  010F1C  117D               	iorwf	(___fldiv@rem+2)& (0+255),w,b
 14394  010F1E  0100               	movlb	0	; () banked
 14395  010F20  117E               	iorwf	(___fldiv@rem+3)& (0+255),w,b
 14396  010F22  B4D8               	btfsc	status,2,c
 14397  010F24  D018               	goto	l2940
 14398                           
 14399                           ; BSR set to: 0
 14400  010F26  0100               	movlb	0	; () banked
 14401  010F28  8181               	bsf	___fldiv@grs& (0+255),0,b
 14402                           
 14403                           ; BSR set to: 0
 14404  010F2A  D015               	goto	l2940
 14405  010F2C                     
 14406                           ; BSR set to: 0
 14407                           
 14408                           ; BSR set to: 0
 14409  010F2C  0100               	movlb	0	; () banked
 14410  010F2E  90D8               	bcf	status,0,c
 14411  010F30  376E               	rlcf	___fldiv@b& (0+255),f,b
 14412  010F32  376F               	rlcf	(___fldiv@b+1)& (0+255),f,b
 14413  010F34  3770               	rlcf	(___fldiv@b+2)& (0+255),f,b
 14414  010F36  3771               	rlcf	(___fldiv@b+3)& (0+255),f,b
 14415                           
 14416                           ; BSR set to: 0
 14417  010F38  0100               	movlb	0	; () banked
 14418  010F3A  AF84               	btfss	(___fldiv@grs+3)& (0+255),7,b
 14419  010F3C  D002               	goto	l2942
 14420                           
 14421                           ; BSR set to: 0
 14422  010F3E  0100               	movlb	0	; () banked
 14423  010F40  816E               	bsf	___fldiv@b& (0+255),0,b
 14424  010F42                     l2942:
 14425                           
 14426                           ; BSR set to: 0
 14427  010F42  0100               	movlb	0	; () banked
 14428  010F44  90D8               	bcf	status,0,c
 14429  010F46  3781               	rlcf	___fldiv@grs& (0+255),f,b
 14430  010F48  3782               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 14431  010F4A  3783               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 14432  010F4C  3784               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 14433  010F4E  0100               	movlb	0	; () banked
 14434  010F50  077F               	decf	___fldiv@new_exp& (0+255),f,b
 14435  010F52  A0D8               	btfss	status,0,c
 14436  010F54  0780               	decf	(___fldiv@new_exp+1)& (0+255),f,b
 14437  010F56                     l2940:
 14438                           
 14439                           ; BSR set to: 0
 14440                           
 14441                           ; BSR set to: 0
 14442  010F56  0100               	movlb	0	; () banked
 14443  010F58  AF70               	btfss	(___fldiv@b+2)& (0+255),7,b
 14444  010F5A  D7E8               	goto	l2941
 14445                           
 14446                           ; BSR set to: 0
 14447                           
 14448                           ; BSR set to: 0
 14449  010F5C  0E00               	movlw	0
 14450  010F5E  0100               	movlb	0	; () banked
 14451  010F60  6F86               	movwf	___fldiv@aexp& (0+255),b
 14452                           
 14453                           ; BSR set to: 0
 14454  010F62  0100               	movlb	0	; () banked
 14455  010F64  AF84               	btfss	(___fldiv@grs+3)& (0+255),7,b
 14456  010F66  D024               	goto	l2947
 14457                           
 14458                           ; BSR set to: 0
 14459  010F68  0EFF               	movlw	255
 14460  010F6A  0100               	movlb	0	; () banked
 14461  010F6C  1581               	andwf	___fldiv@grs& (0+255),w,b
 14462  010F6E  0100               	movlb	0	; () banked
 14463  010F70  6F76               	movwf	??___fldiv& (0+255),b
 14464  010F72  0EFF               	movlw	255
 14465  010F74  0100               	movlb	0	; () banked
 14466  010F76  1582               	andwf	(___fldiv@grs+1)& (0+255),w,b
 14467  010F78  0100               	movlb	0	; () banked
 14468  010F7A  6F77               	movwf	(??___fldiv+1)& (0+255),b
 14469  010F7C  0EFF               	movlw	255
 14470  010F7E  0100               	movlb	0	; () banked
 14471  010F80  1583               	andwf	(___fldiv@grs+2)& (0+255),w,b
 14472  010F82  0100               	movlb	0	; () banked
 14473  010F84  6F78               	movwf	(??___fldiv+2)& (0+255),b
 14474  010F86  0E7F               	movlw	127
 14475  010F88  0100               	movlb	0	; () banked
 14476  010F8A  1584               	andwf	(___fldiv@grs+3)& (0+255),w,b
 14477  010F8C  0100               	movlb	0	; () banked
 14478  010F8E  6F79               	movwf	(??___fldiv+3)& (0+255),b
 14479  010F90  0100               	movlb	0	; () banked
 14480  010F92  5176               	movf	??___fldiv& (0+255),w,b
 14481  010F94  0100               	movlb	0	; () banked
 14482  010F96  1177               	iorwf	(??___fldiv+1)& (0+255),w,b
 14483  010F98  0100               	movlb	0	; () banked
 14484  010F9A  1178               	iorwf	(??___fldiv+2)& (0+255),w,b
 14485  010F9C  0100               	movlb	0	; () banked
 14486  010F9E  1179               	iorwf	(??___fldiv+3)& (0+255),w,b
 14487  010FA0  A4D8               	btfss	status,2,c
 14488  010FA2  D003               	goto	u10330
 14489                           
 14490                           ; BSR set to: 0
 14491                           
 14492                           ; BSR set to: 0
 14493  010FA4  0100               	movlb	0	; () banked
 14494  010FA6  A16E               	btfss	___fldiv@b& (0+255),0,b
 14495  010FA8  D003               	goto	l2947
 14496  010FAA                     u10330:
 14497                           
 14498                           ; BSR set to: 0
 14499  010FAA  0E01               	movlw	1
 14500  010FAC  0100               	movlb	0	; () banked
 14501  010FAE  6F86               	movwf	___fldiv@aexp& (0+255),b
 14502  010FB0                     l2947:
 14503                           
 14504                           ; BSR set to: 0
 14505                           
 14506                           ; BSR set to: 0
 14507                           
 14508                           ; BSR set to: 0
 14509  010FB0  0100               	movlb	0	; () banked
 14510  010FB2  5186               	movf	___fldiv@aexp& (0+255),w,b
 14511  010FB4  0100               	movlb	0	; () banked
 14512  010FB6  B4D8               	btfsc	status,2,c
 14513  010FB8  D023               	goto	l2949
 14514                           
 14515                           ; BSR set to: 0
 14516  010FBA  0E01               	movlw	1
 14517  010FBC  0100               	movlb	0	; () banked
 14518  010FBE  276E               	addwf	___fldiv@b& (0+255),f,b
 14519  010FC0  0E00               	movlw	0
 14520  010FC2  236F               	addwfc	(___fldiv@b+1)& (0+255),f,b
 14521  010FC4  2370               	addwfc	(___fldiv@b+2)& (0+255),f,b
 14522  010FC6  2371               	addwfc	(___fldiv@b+3)& (0+255),f,b
 14523                           
 14524                           ; BSR set to: 0
 14525  010FC8  0100               	movlb	0	; () banked
 14526  010FCA  A171               	btfss	(___fldiv@b+3)& (0+255),0,b
 14527  010FCC  D019               	goto	l2949
 14528                           
 14529                           ; BSR set to: 0
 14530  010FCE  C06E  F076         	movff	___fldiv@b,??___fldiv
 14531  010FD2  C06F  F077         	movff	___fldiv@b+1,??___fldiv+1
 14532  010FD6  C070  F078         	movff	___fldiv@b+2,??___fldiv+2
 14533  010FDA  C071  F079         	movff	___fldiv@b+3,??___fldiv+3
 14534  010FDE  0100               	movlb	0	; () banked
 14535  010FE0  3579               	rlcf	(??___fldiv+3)& (0+255),w,b
 14536  010FE2  3379               	rrcf	(??___fldiv+3)& (0+255),f,b
 14537  010FE4  3378               	rrcf	(??___fldiv+2)& (0+255),f,b
 14538  010FE6  3377               	rrcf	(??___fldiv+1)& (0+255),f,b
 14539  010FE8  3376               	rrcf	??___fldiv& (0+255),f,b
 14540  010FEA  C076  F06E         	movff	??___fldiv,___fldiv@b
 14541  010FEE  C077  F06F         	movff	??___fldiv+1,___fldiv@b+1
 14542  010FF2  C078  F070         	movff	??___fldiv+2,___fldiv@b+2
 14543  010FF6  C079  F071         	movff	??___fldiv+3,___fldiv@b+3
 14544                           
 14545                           ; BSR set to: 0
 14546  010FFA  0100               	movlb	0	; () banked
 14547  010FFC  4B7F               	infsnz	___fldiv@new_exp& (0+255),f,b
 14548  010FFE  2B80               	incf	(___fldiv@new_exp+1)& (0+255),f,b
 14549  011000                     l2949:
 14550                           
 14551                           ; BSR set to: 0
 14552                           
 14553                           ; BSR set to: 0
 14554                           
 14555                           ; BSR set to: 0
 14556  011000  0100               	movlb	0	; () banked
 14557  011002  BF80               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 14558  011004  D014               	goto	l2950
 14559  011006  0100               	movlb	0	; () banked
 14560  011008  5180               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 14561  01100A  E104               	bnz	u10360
 14562  01100C  0100               	movlb	0	; () banked
 14563  01100E  297F               	incf	___fldiv@new_exp& (0+255),w,b
 14564  011010  A0D8               	btfss	status,0,c
 14565  011012  D00D               	goto	l2950
 14566  011014                     u10360:
 14567                           
 14568                           ; BSR set to: 0
 14569  011014  0E00               	movlw	0
 14570  011016  0100               	movlb	0	; () banked
 14571  011018  6F80               	movwf	(___fldiv@new_exp+1)& (0+255),b
 14572  01101A  697F               	setf	___fldiv@new_exp& (0+255),b
 14573  01101C  0E00               	movlw	0
 14574  01101E  0100               	movlb	0	; () banked
 14575  011020  6F6E               	movwf	___fldiv@b& (0+255),b
 14576  011022  0E00               	movlw	0
 14577  011024  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 14578  011026  0E00               	movlw	0
 14579  011028  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 14580  01102A  0E00               	movlw	0
 14581  01102C  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 14582  01102E                     l2950:
 14583                           
 14584                           ; BSR set to: 0
 14585                           
 14586                           ; BSR set to: 0
 14587  01102E  0100               	movlb	0	; () banked
 14588  011030  BF80               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 14589  011032  D007               	goto	u10370
 14590  011034  0100               	movlb	0	; () banked
 14591  011036  5180               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 14592  011038  E115               	bnz	l13751
 14593  01103A  0100               	movlb	0	; () banked
 14594  01103C  057F               	decf	___fldiv@new_exp& (0+255),w,b
 14595  01103E  B0D8               	btfsc	status,0,c
 14596  011040  D011               	goto	l2951
 14597  011042                     u10370:
 14598                           
 14599                           ; BSR set to: 0
 14600  011042  0E00               	movlw	0
 14601  011044  0100               	movlb	0	; () banked
 14602  011046  6F80               	movwf	(___fldiv@new_exp+1)& (0+255),b
 14603  011048  0E00               	movlw	0
 14604  01104A  6F7F               	movwf	___fldiv@new_exp& (0+255),b
 14605  01104C  0E00               	movlw	0
 14606  01104E  0100               	movlb	0	; () banked
 14607  011050  6F6E               	movwf	___fldiv@b& (0+255),b
 14608  011052  0E00               	movlw	0
 14609  011054  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 14610  011056  0E00               	movlw	0
 14611  011058  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 14612  01105A  0E00               	movlw	0
 14613  01105C  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 14614  01105E  0E00               	movlw	0
 14615  011060  0100               	movlb	0	; () banked
 14616  011062  6F7A               	movwf	___fldiv@sign& (0+255),b
 14617  011064                     l2951:
 14618  011064                     l13751:
 14619                           
 14620                           ; BSR set to: 0
 14621  011064  C07F  F085         	movff	___fldiv@new_exp,___fldiv@bexp
 14622                           
 14623                           ; BSR set to: 0
 14624  011068  0100               	movlb	0	; () banked
 14625  01106A  A185               	btfss	___fldiv@bexp& (0+255),0,b
 14626  01106C  D003               	goto	l2952
 14627                           
 14628                           ; BSR set to: 0
 14629  01106E  0100               	movlb	0	; () banked
 14630  011070  8F70               	bsf	(___fldiv@b+2)& (0+255),7,b
 14631  011072  D002               	goto	l2953
 14632  011074                     l2952:
 14633                           
 14634                           ; BSR set to: 0
 14635                           
 14636                           ; BSR set to: 0
 14637  011074  0100               	movlb	0	; () banked
 14638  011076  9F70               	bcf	(___fldiv@b+2)& (0+255),7,b
 14639  011078                     l2953:
 14640                           
 14641                           ; BSR set to: 0
 14642                           
 14643                           ; BSR set to: 0
 14644  011078  0100               	movlb	0	; () banked
 14645  01107A  90D8               	bcf	status,0,c
 14646  01107C  3185               	rrcf	___fldiv@bexp& (0+255),w,b
 14647  01107E  0100               	movlb	0	; () banked
 14648  011080  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 14649                           
 14650                           ; BSR set to: 0
 14651  011082  0100               	movlb	0	; () banked
 14652  011084  517A               	movf	___fldiv@sign& (0+255),w,b
 14653  011086  0100               	movlb	0	; () banked
 14654  011088  1371               	iorwf	(___fldiv@b+3)& (0+255),f,b
 14655                           
 14656                           ; BSR set to: 0
 14657  01108A  C06E  F06E         	movff	___fldiv@b,?___fldiv
 14658  01108E  C06F  F06F         	movff	___fldiv@b+1,?___fldiv+1
 14659  011092  C070  F070         	movff	___fldiv@b+2,?___fldiv+2
 14660  011096  C071  F071         	movff	___fldiv@b+3,?___fldiv+3
 14661  01109A  0012               	return	
 14662  01109C                     __end_of___fldiv:
 14663                           	opt stack 0
 14664                           tosu	equ	0xFFF
 14665                           tosh	equ	0xFFE
 14666                           tosl	equ	0xFFD
 14667                           pclath	equ	0xFFA
 14668                           tblptru	equ	0xFF8
 14669                           tblptrh	equ	0xFF7
 14670                           tblptrl	equ	0xFF6
 14671                           tablat	equ	0xFF5
 14672                           prodh	equ	0xFF4
 14673                           prodl	equ	0xFF3
 14674                           intcon	equ	0xFF2
 14675                           postinc0	equ	0xFEE
 14676                           wreg	equ	0xFE8
 14677                           indf1	equ	0xFE7
 14678                           postdec1	equ	0xFE5
 14679                           fsr1h	equ	0xFE2
 14680                           fsr1l	equ	0xFE1
 14681                           indf2	equ	0xFDF
 14682                           postinc2	equ	0xFDE
 14683                           postdec2	equ	0xFDD
 14684                           plusw2	equ	0xFDB
 14685                           fsr2h	equ	0xFDA
 14686                           fsr2l	equ	0xFD9
 14687                           status	equ	0xFD8
 14688                           
 14689 ;; *************** function _init *****************
 14690 ;; Defined at:
 14691 ;;		line 64 in file "main.c"
 14692 ;; Parameters:    Size  Location     Type
 14693 ;;		None
 14694 ;; Auto vars:     Size  Location     Type
 14695 ;;		None
 14696 ;; Return value:  Size  Location     Type
 14697 ;;                  1    wreg      void 
 14698 ;; Registers used:
 14699 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 14700 ;; Tracked objects:
 14701 ;;		On entry : 0/0
 14702 ;;		On exit  : 0/0
 14703 ;;		Unchanged: 0/0
 14704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14708 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14709 ;;Total ram usage:        0 bytes
 14710 ;; Hardware stack levels used:    1
 14711 ;; Hardware stack levels required when called:   17
 14712 ;; This function calls:
 14713 ;;		_ADC_Init
 14714 ;;		_ADC_Start
 14715 ;;		_Console_Init
 14716 ;;		_HMI_Init
 14717 ;;		_ISR_Enable
 14718 ;;		_LCD_Init
 14719 ;;		_MXK_BlockSwitchTo
 14720 ;;		_MXK_Dequeue
 14721 ;;		_MXK_Init
 14722 ;;		_MXK_Release
 14723 ;;		_Motor_Init
 14724 ;;		_delay_ms
 14725 ;;		_eusart_init
 14726 ;;		_irobot_init
 14727 ;;		_irobot_init_song_0
 14728 ;;		_irobot_led_power_on
 14729 ;; This function is called by:
 14730 ;;		_main
 14731 ;; This function uses a non-reentrant model
 14732 ;;
 14733                           
 14734                           	psect	text60
 14735  014614                     __ptext60:
 14736                           	opt stack 0
 14737  014614                     _init:
 14738                           	opt stack 13
 14739                           
 14740                           ;main.c: 66: MXK_Init();
 14741                           
 14742                           ; BSR set to: 0
 14743                           ;incstack = 0
 14744  014614  EC6D  F096         	call	_MXK_Init	;wreg free
 14745                           
 14746                           ;main.c: 69: ISR_Enable();
 14747  014618  EC53  F0B2         	call	_ISR_Enable	;wreg free
 14748                           
 14749                           ;main.c: 72: if (MXK_BlockSwitchTo(eMXK_HMI)) {
 14750  01461C  0E01               	movlw	1
 14751  01461E  ECC0  F0AE         	call	_MXK_BlockSwitchTo
 14752  014622  0900               	iorlw	0
 14753  014624  B4D8               	btfsc	status,2,c
 14754  014626  D00C               	goto	l2298
 14755                           
 14756                           ;main.c: 73: Console_Init();
 14757  014628  EC22  F0A6         	call	_Console_Init	;wreg free
 14758                           
 14759                           ;main.c: 74: HMI_Init();
 14760  01462C  EC6D  F090         	call	_HMI_Init	;wreg free
 14761                           
 14762                           ;main.c: 75: LCD_Init();
 14763  014630  EC2D  F097         	call	_LCD_Init	;wreg free
 14764                           
 14765                           ;main.c: 76: if (MXK_Release())
 14766  014634  EC4F  F0B1         	call	_MXK_Release	;wreg free
 14767  014638  0900               	iorlw	0
 14768  01463A  A4D8               	btfss	status,2,c
 14769                           
 14770                           ;main.c: 77: MXK_Dequeue();
 14771  01463C  ECA1  F0AE         	call	_MXK_Dequeue	;wreg free
 14772  014640                     l2298:
 14773                           
 14774                           ;main.c: 78: }
 14775                           ;main.c: 81: if (MXK_BlockSwitchTo(eMXK_Motor)) {
 14776  014640  0E08               	movlw	8
 14777  014642  ECC0  F0AE         	call	_MXK_BlockSwitchTo
 14778  014646  0900               	iorlw	0
 14779  014648  B4D8               	btfsc	status,2,c
 14780  01464A  D013               	goto	l2300
 14781                           
 14782                           ;main.c: 82: Motor_Init(&Stepper, 0b1000);
 14783  01464C  0ECF               	movlw	low _Stepper
 14784  01464E  0100               	movlb	0	; () banked
 14785  014650  6F8D               	movwf	Motor_Init@pMotor& (0+255),b
 14786  014652  0E03               	movlw	high _Stepper
 14787  014654  0100               	movlb	0	; () banked
 14788  014656  6F8E               	movwf	(Motor_Init@pMotor+1)& (0+255),b
 14789  014658  0E00               	movlw	0
 14790  01465A  0100               	movlb	0	; () banked
 14791  01465C  6F90               	movwf	(Motor_Init@pAddress+1)& (0+255),b
 14792  01465E  0E08               	movlw	8
 14793  014660  6F8F               	movwf	Motor_Init@pAddress& (0+255),b
 14794  014662  EC3C  F09E         	call	_Motor_Init	;wreg free
 14795                           
 14796                           ;main.c: 83: if (MXK_Release())
 14797  014666  EC4F  F0B1         	call	_MXK_Release	;wreg free
 14798  01466A  0900               	iorlw	0
 14799  01466C  A4D8               	btfss	status,2,c
 14800                           
 14801                           ;main.c: 84: MXK_Dequeue();
 14802  01466E  ECA1  F0AE         	call	_MXK_Dequeue	;wreg free
 14803  014672                     l2300:
 14804                           
 14805                           ;main.c: 85: }
 14806                           ;main.c: 88: ADC_Init (&ADC_AN0, eADC_Ch0);
 14807  014672  0EF4               	movlw	low _ADC_AN0
 14808  014674  0100               	movlb	0	; () banked
 14809  014676  6F64               	movwf	ADC_Init@pInput& (0+255),b
 14810  014678  0E00               	movlw	high _ADC_AN0
 14811  01467A  0100               	movlb	0	; () banked
 14812  01467C  6F65               	movwf	(ADC_Init@pInput+1)& (0+255),b
 14813  01467E  0E00               	movlw	0
 14814  014680  0100               	movlb	0	; () banked
 14815  014682  6F66               	movwf	ADC_Init@pChannel& (0+255),b
 14816  014684  ECB1  F0A7         	call	_ADC_Init	;wreg free
 14817                           
 14818                           ;main.c: 89: float ADC_Voltage(ADCPtr plnput);
 14819                           ;main.c: 90: ADC_Start(&ADC_AN0);
 14820  014688  0EF4               	movlw	low _ADC_AN0
 14821  01468A  0100               	movlb	0	; () banked
 14822  01468C  6F62               	movwf	ADC_Start@pInput& (0+255),b
 14823  01468E  0E00               	movlw	high _ADC_AN0
 14824  014690  0100               	movlb	0	; () banked
 14825  014692  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
 14826  014694  ECF0  F0A6         	call	_ADC_Start	;wreg free
 14827                           
 14828                           ;main.c: 92: eusart_init();
 14829  014698  ECD8  F0B0         	call	_eusart_init	;wreg free
 14830                           
 14831                           ;main.c: 93: irobot_init();
 14832  01469C  EC0E  F0B2         	call	_irobot_init	;wreg free
 14833                           
 14834                           ;main.c: 95: irobot_led_power_on(0xA);
 14835  0146A0  0E0A               	movlw	10
 14836  0146A2  EC41  F0B1         	call	_irobot_led_power_on
 14837                           
 14838                           ;main.c: 96: irobot_init_song_0();
 14839  0146A6  ECB9  F0B0         	call	_irobot_init_song_0	;wreg free
 14840                           
 14841                           ;main.c: 97: delay_ms(20);
 14842  0146AA  0E00               	movlw	0
 14843  0146AC  0100               	movlb	0	; () banked
 14844  0146AE  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 14845  0146B0  0E14               	movlw	20
 14846  0146B2  6F60               	movwf	delay_ms@ms& (0+255),b
 14847  0146B4  EC26  F0AA         	call	_delay_ms	;wreg free
 14848  0146B8  0012               	return		;funcret
 14849  0146BA                     __end_of_init:
 14850                           	opt stack 0
 14851                           tosu	equ	0xFFF
 14852                           tosh	equ	0xFFE
 14853                           tosl	equ	0xFFD
 14854                           pclath	equ	0xFFA
 14855                           tblptru	equ	0xFF8
 14856                           tblptrh	equ	0xFF7
 14857                           tblptrl	equ	0xFF6
 14858                           tablat	equ	0xFF5
 14859                           prodh	equ	0xFF4
 14860                           prodl	equ	0xFF3
 14861                           intcon	equ	0xFF2
 14862                           postinc0	equ	0xFEE
 14863                           wreg	equ	0xFE8
 14864                           indf1	equ	0xFE7
 14865                           postdec1	equ	0xFE5
 14866                           fsr1h	equ	0xFE2
 14867                           fsr1l	equ	0xFE1
 14868                           indf2	equ	0xFDF
 14869                           postinc2	equ	0xFDE
 14870                           postdec2	equ	0xFDD
 14871                           plusw2	equ	0xFDB
 14872                           fsr2h	equ	0xFDA
 14873                           fsr2l	equ	0xFD9
 14874                           status	equ	0xFD8
 14875                           
 14876 ;; *************** function _irobot_led_power_on *****************
 14877 ;; Defined at:
 14878 ;;		line 293 in file "Library/iRobotSerial.c"
 14879 ;; Parameters:    Size  Location     Type
 14880 ;;  powerOnColou    1    wreg     unsigned char 
 14881 ;; Auto vars:     Size  Location     Type
 14882 ;;  powerOnColou    1   20[BANK0 ] unsigned char 
 14883 ;; Return value:  Size  Location     Type
 14884 ;;                  1    wreg      void 
 14885 ;; Registers used:
 14886 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 14887 ;; Tracked objects:
 14888 ;;		On entry : 0/0
 14889 ;;		On exit  : 0/0
 14890 ;;		Unchanged: 0/0
 14891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14893 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14895 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14896 ;;Total ram usage:        1 bytes
 14897 ;; Hardware stack levels used:    1
 14898 ;; Hardware stack levels required when called:    9
 14899 ;; This function calls:
 14900 ;;		_irobot_leds
 14901 ;; This function is called by:
 14902 ;;		_init
 14903 ;; This function uses a non-reentrant model
 14904 ;;
 14905                           
 14906                           	psect	text61
 14907  016282                     __ptext61:
 14908                           	opt stack 0
 14909  016282                     _irobot_led_power_on:
 14910                           	opt stack 20
 14911                           
 14912                           ;incstack = 0
 14913                           ;irobot_led_power_on@powerOnColour stored from wreg
 14914  016282  0100               	movlb	0	; () banked
 14915  016284  6F74               	movwf	irobot_led_power_on@powerOnColour& (0+255),b
 14916                           
 14917                           ;iRobotSerial.c: 294: irobot_leds(0, 0, powerOnColour, iR_CONST_LED_ON);
 14918  016286  0E00               	movlw	0
 14919  016288  0100               	movlb	0	; () banked
 14920  01628A  6F70               	movwf	irobot_leds@LEDBit& (0+255),b
 14921  01628C  C074  F071         	movff	irobot_led_power_on@powerOnColour,irobot_leds@powerColour
 14922  016290  0EFF               	movlw	255
 14923  016292  0100               	movlb	0	; () banked
 14924  016294  6F72               	movwf	irobot_leds@powerLuminosity& (0+255),b
 14925  016296  0E00               	movlw	0
 14926  016298  ECE5  F0AB         	call	_irobot_leds
 14927  01629C  0012               	return		;funcret
 14928  01629E                     __end_of_irobot_led_power_on:
 14929                           	opt stack 0
 14930                           tosu	equ	0xFFF
 14931                           tosh	equ	0xFFE
 14932                           tosl	equ	0xFFD
 14933                           pclath	equ	0xFFA
 14934                           tblptru	equ	0xFF8
 14935                           tblptrh	equ	0xFF7
 14936                           tblptrl	equ	0xFF6
 14937                           tablat	equ	0xFF5
 14938                           prodh	equ	0xFF4
 14939                           prodl	equ	0xFF3
 14940                           intcon	equ	0xFF2
 14941                           postinc0	equ	0xFEE
 14942                           wreg	equ	0xFE8
 14943                           indf1	equ	0xFE7
 14944                           postdec1	equ	0xFE5
 14945                           fsr1h	equ	0xFE2
 14946                           fsr1l	equ	0xFE1
 14947                           indf2	equ	0xFDF
 14948                           postinc2	equ	0xFDE
 14949                           postdec2	equ	0xFDD
 14950                           plusw2	equ	0xFDB
 14951                           fsr2h	equ	0xFDA
 14952                           fsr2l	equ	0xFD9
 14953                           status	equ	0xFD8
 14954                           
 14955 ;; *************** function _irobot_leds *****************
 14956 ;; Defined at:
 14957 ;;		line 239 in file "Library/iRobotSerial.c"
 14958 ;; Parameters:    Size  Location     Type
 14959 ;;  isScript        1    wreg     unsigned char 
 14960 ;;  LEDBit          1   16[BANK0 ] unsigned char 
 14961 ;;  powerColour     1   17[BANK0 ] unsigned char 
 14962 ;;  powerLuminos    1   18[BANK0 ] unsigned char 
 14963 ;; Auto vars:     Size  Location     Type
 14964 ;;  isScript        1   19[BANK0 ] unsigned char 
 14965 ;; Return value:  Size  Location     Type
 14966 ;;                  1    wreg      void 
 14967 ;; Registers used:
 14968 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 14969 ;; Tracked objects:
 14970 ;;		On entry : 0/0
 14971 ;;		On exit  : 0/0
 14972 ;;		Unchanged: 0/0
 14973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14974 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14975 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14977 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14978 ;;Total ram usage:        4 bytes
 14979 ;; Hardware stack levels used:    1
 14980 ;; Hardware stack levels required when called:    8
 14981 ;; This function calls:
 14982 ;;		_eusart_putch
 14983 ;;		_load_iRScriptStack
 14984 ;; This function is called by:
 14985 ;;		_irobot_led_power_on
 14986 ;;		_irobot_led_power_off
 14987 ;; This function uses a non-reentrant model
 14988 ;;
 14989                           
 14990                           	psect	text62
 14991  0157CA                     __ptext62:
 14992                           	opt stack 0
 14993  0157CA                     _irobot_leds:
 14994                           	opt stack 20
 14995                           
 14996                           ;incstack = 0
 14997                           ;irobot_leds@isScript stored from wreg
 14998  0157CA  0100               	movlb	0	; () banked
 14999  0157CC  6F73               	movwf	irobot_leds@isScript& (0+255),b
 15000                           
 15001                           ;iRobotSerial.c: 240: if (isScript) {
 15002  0157CE  0100               	movlb	0	; () banked
 15003  0157D0  5173               	movf	irobot_leds@isScript& (0+255),w,b
 15004  0157D2  0100               	movlb	0	; () banked
 15005  0157D4  B4D8               	btfsc	status,2,c
 15006  0157D6  D015               	goto	l2140
 15007                           
 15008                           ; BSR set to: 0
 15009                           ;iRobotSerial.c: 241: load_iRScriptStack(4, iR_LEDS,
 15010                           ;iRobotSerial.c: 242: LEDBit, powerColour, powerLuminosity);
 15011  0157D8  0E00               	movlw	0
 15012  0157DA  0100               	movlb	0	; () banked
 15013  0157DC  6F61               	movwf	(?_load_iRScriptStack+1)& (0+255),b
 15014  0157DE  0E8B               	movlw	139
 15015  0157E0  6F60               	movwf	?_load_iRScriptStack& (0+255),b
 15016  0157E2  C070  F062         	movff	irobot_leds@LEDBit,?_load_iRScriptStack+2
 15017  0157E6  0100               	movlb	0	; () banked
 15018  0157E8  6B63               	clrf	(?_load_iRScriptStack+3)& (0+255),b
 15019  0157EA  C071  F064         	movff	irobot_leds@powerColour,?_load_iRScriptStack+4
 15020  0157EE  0100               	movlb	0	; () banked
 15021  0157F0  6B65               	clrf	(?_load_iRScriptStack+5)& (0+255),b
 15022  0157F2  C072  F066         	movff	irobot_leds@powerLuminosity,?_load_iRScriptStack+6
 15023  0157F6  0100               	movlb	0	; () banked
 15024  0157F8  6B67               	clrf	(?_load_iRScriptStack+7)& (0+255),b
 15025  0157FA  0E04               	movlw	4
 15026  0157FC  ECF1  F0A9         	call	_load_iRScriptStack
 15027                           
 15028                           ;iRobotSerial.c: 243: }
 15029  015800  0012               	return	
 15030  015802                     l2140:
 15031                           
 15032                           ;iRobotSerial.c: 244: else{
 15033                           ;iRobotSerial.c: 245: eusart_putch(iR_LEDS);
 15034  015802  0E8B               	movlw	139
 15035  015804  EC15  F0B2         	call	_eusart_putch
 15036                           
 15037                           ;iRobotSerial.c: 246: eusart_putch(LEDBit);
 15038  015808  0100               	movlb	0	; () banked
 15039  01580A  5170               	movf	irobot_leds@LEDBit& (0+255),w,b
 15040  01580C  EC15  F0B2         	call	_eusart_putch
 15041                           
 15042                           ;iRobotSerial.c: 247: eusart_putch(powerColour);
 15043  015810  0100               	movlb	0	; () banked
 15044  015812  5171               	movf	irobot_leds@powerColour& (0+255),w,b
 15045  015814  EC15  F0B2         	call	_eusart_putch
 15046                           
 15047                           ;iRobotSerial.c: 248: eusart_putch(powerLuminosity);
 15048  015818  0100               	movlb	0	; () banked
 15049  01581A  5172               	movf	irobot_leds@powerLuminosity& (0+255),w,b
 15050  01581C  EC15  F0B2         	call	_eusart_putch
 15051  015820  0012               	return	
 15052  015822                     __end_of_irobot_leds:
 15053                           	opt stack 0
 15054                           tosu	equ	0xFFF
 15055                           tosh	equ	0xFFE
 15056                           tosl	equ	0xFFD
 15057                           pclath	equ	0xFFA
 15058                           tblptru	equ	0xFF8
 15059                           tblptrh	equ	0xFF7
 15060                           tblptrl	equ	0xFF6
 15061                           tablat	equ	0xFF5
 15062                           prodh	equ	0xFF4
 15063                           prodl	equ	0xFF3
 15064                           intcon	equ	0xFF2
 15065                           postinc0	equ	0xFEE
 15066                           wreg	equ	0xFE8
 15067                           indf1	equ	0xFE7
 15068                           postdec1	equ	0xFE5
 15069                           fsr1h	equ	0xFE2
 15070                           fsr1l	equ	0xFE1
 15071                           indf2	equ	0xFDF
 15072                           postinc2	equ	0xFDE
 15073                           postdec2	equ	0xFDD
 15074                           plusw2	equ	0xFDB
 15075                           fsr2h	equ	0xFDA
 15076                           fsr2l	equ	0xFD9
 15077                           status	equ	0xFD8
 15078                           
 15079 ;; *************** function _load_iRScriptStack *****************
 15080 ;; Defined at:
 15081 ;;		line 176 in file "Library/iRobotSerial.c"
 15082 ;; Parameters:    Size  Location     Type
 15083 ;;  bytesToLoad     1    wreg     unsigned char 
 15084 ;; Auto vars:     Size  Location     Type
 15085 ;;  bytesToLoad     1   14[BANK0 ] unsigned char 
 15086 ;;  i               1   15[BANK0 ] unsigned char 
 15087 ;;  loadByte        2   12[BANK0 ] PTR void [1]
 15088 ;;		 -> ?_load_iRScriptStack(1), 
 15089 ;; Return value:  Size  Location     Type
 15090 ;;                  1    wreg      void 
 15091 ;; Registers used:
 15092 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 15093 ;; Tracked objects:
 15094 ;;		On entry : 0/0
 15095 ;;		On exit  : 0/0
 15096 ;;		Unchanged: 0/0
 15097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15098 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15099 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15100 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15101 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15102 ;;Total ram usage:       16 bytes
 15103 ;; Hardware stack levels used:    1
 15104 ;; Hardware stack levels required when called:    7
 15105 ;; This function calls:
 15106 ;;		Nothing
 15107 ;; This function is called by:
 15108 ;;		_irobot_move
 15109 ;;		_irobot_leds
 15110 ;;		_irobot_angle_wait
 15111 ;;		_irobot_distance_wait
 15112 ;; This function uses a non-reentrant model
 15113 ;;
 15114                           
 15115                           	psect	text63
 15116  0153E2                     __ptext63:
 15117                           	opt stack 0
 15118  0153E2                     _load_iRScriptStack:
 15119                           	opt stack 20
 15120                           
 15121                           ;incstack = 0
 15122                           ;load_iRScriptStack@bytesToLoad stored from wreg
 15123  0153E2  0100               	movlb	0	; () banked
 15124  0153E4  6F6E               	movwf	load_iRScriptStack@bytesToLoad& (0+255),b
 15125                           
 15126                           ;iRobotSerial.c: 177: va_list loadByte;
 15127                           ;iRobotSerial.c: 178: *loadByte = __va_start();
 15128  0153E6  0E60               	movlw	low ?_load_iRScriptStack
 15129  0153E8  0100               	movlb	0	; () banked
 15130  0153EA  6F6C               	movwf	load_iRScriptStack@loadByte& (0+255),b
 15131  0153EC  0E00               	movlw	high ?_load_iRScriptStack
 15132  0153EE  0100               	movlb	0	; () banked
 15133  0153F0  6F6D               	movwf	(load_iRScriptStack@loadByte+1)& (0+255),b
 15134                           
 15135                           ;iRobotSerial.c: 179: for (UINT8 i = 0; i < bytesToLoad; i++) {
 15136  0153F2  0E00               	movlw	0
 15137  0153F4  0100               	movlb	0	; () banked
 15138  0153F6  6F6F               	movwf	load_iRScriptStack@i& (0+255),b
 15139  0153F8  D01F               	goto	l2114
 15140  0153FA                     
 15141                           ; BSR set to: 0
 15142                           ;iRobotSerial.c: 180: iRScriptStack[iRScriptIndex + i] = (*(int *)__va_arg((*(int **)loa
      +                          dByte), (int)0));
 15143                           
 15144                           ; BSR set to: 0
 15145  0153FA  C06C  FFD9         	movff	load_iRScriptStack@loadByte,fsr2l
 15146  0153FE  C06D  FFDA         	movff	load_iRScriptStack@loadByte+1,fsr2h
 15147  015402  0100               	movlb	0	; () banked
 15148  015404  516F               	movf	load_iRScriptStack@i& (0+255),w,b
 15149  015406  C037  F06A         	movff	_iRScriptIndex,??_load_iRScriptStack
 15150  01540A  0100               	movlb	0	; () banked
 15151  01540C  6B6B               	clrf	(??_load_iRScriptStack+1)& (0+255),b
 15152  01540E  0100               	movlb	0	; () banked
 15153  015410  276A               	addwf	??_load_iRScriptStack& (0+255),f,b
 15154  015412  0E00               	movlw	0
 15155  015414  236B               	addwfc	(??_load_iRScriptStack+1)& (0+255),f,b
 15156  015416  0E1E               	movlw	low _iRScriptStack
 15157  015418  0100               	movlb	0	; () banked
 15158  01541A  256A               	addwf	??_load_iRScriptStack& (0+255),w,b
 15159  01541C  6EE1               	movwf	fsr1l,c
 15160  01541E  0E04               	movlw	high _iRScriptStack
 15161  015420  0100               	movlb	0	; () banked
 15162  015422  216B               	addwfc	(??_load_iRScriptStack+1)& (0+255),w,b
 15163  015424  6EE2               	movwf	fsr1h,c
 15164  015426  CFDF FFE7          	movff	indf2,indf1
 15165                           
 15166                           ; BSR set to: 0
 15167  01542A  0E02               	movlw	2
 15168  01542C  0100               	movlb	0	; () banked
 15169  01542E  276C               	addwf	load_iRScriptStack@loadByte& (0+255),f,b
 15170  015430  0E00               	movlw	0
 15171  015432  236D               	addwfc	(load_iRScriptStack@loadByte+1)& (0+255),f,b
 15172                           
 15173                           ; BSR set to: 0
 15174  015434  0100               	movlb	0	; () banked
 15175  015436  2B6F               	incf	load_iRScriptStack@i& (0+255),f,b
 15176  015438                     l2114:
 15177                           
 15178                           ; BSR set to: 0
 15179                           
 15180                           ; BSR set to: 0
 15181  015438  0100               	movlb	0	; () banked
 15182  01543A  516E               	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
 15183  01543C  0100               	movlb	0	; () banked
 15184  01543E  5D6F               	subwf	load_iRScriptStack@i& (0+255),w,b
 15185  015440  A0D8               	btfss	status,0,c
 15186  015442  D7DB               	goto	l2115
 15187                           
 15188                           ; BSR set to: 0
 15189                           ;iRobotSerial.c: 181: }
 15190                           ;iRobotSerial.c: 182: ;
 15191                           ;iRobotSerial.c: 183: iRScriptIndex += bytesToLoad;
 15192                           
 15193                           ; BSR set to: 0
 15194  015444  0100               	movlb	0	; () banked
 15195  015446  516E               	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
 15196  015448  2637               	addwf	_iRScriptIndex,f,c
 15197                           
 15198                           ; BSR set to: 0
 15199  01544A  0012               	return		;funcret
 15200  01544C                     __end_of_load_iRScriptStack:
 15201                           	opt stack 0
 15202                           tosu	equ	0xFFF
 15203                           tosh	equ	0xFFE
 15204                           tosl	equ	0xFFD
 15205                           pclath	equ	0xFFA
 15206                           tblptru	equ	0xFF8
 15207                           tblptrh	equ	0xFF7
 15208                           tblptrl	equ	0xFF6
 15209                           tablat	equ	0xFF5
 15210                           prodh	equ	0xFF4
 15211                           prodl	equ	0xFF3
 15212                           intcon	equ	0xFF2
 15213                           postinc0	equ	0xFEE
 15214                           wreg	equ	0xFE8
 15215                           indf1	equ	0xFE7
 15216                           postdec1	equ	0xFE5
 15217                           fsr1h	equ	0xFE2
 15218                           fsr1l	equ	0xFE1
 15219                           indf2	equ	0xFDF
 15220                           postinc2	equ	0xFDE
 15221                           postdec2	equ	0xFDD
 15222                           plusw2	equ	0xFDB
 15223                           fsr2h	equ	0xFDA
 15224                           fsr2l	equ	0xFD9
 15225                           status	equ	0xFD8
 15226                           
 15227 ;; *************** function _irobot_init_song_0 *****************
 15228 ;; Defined at:
 15229 ;;		line 252 in file "Library/iRobotSerial.c"
 15230 ;; Parameters:    Size  Location     Type
 15231 ;;		None
 15232 ;; Auto vars:     Size  Location     Type
 15233 ;;		None
 15234 ;; Return value:  Size  Location     Type
 15235 ;;                  1    wreg      void 
 15236 ;; Registers used:
 15237 ;;		wreg, cstack
 15238 ;; Tracked objects:
 15239 ;;		On entry : 0/0
 15240 ;;		On exit  : 0/0
 15241 ;;		Unchanged: 0/0
 15242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15246 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15247 ;;Total ram usage:        0 bytes
 15248 ;; Hardware stack levels used:    1
 15249 ;; Hardware stack levels required when called:    8
 15250 ;; This function calls:
 15251 ;;		_eusart_putch
 15252 ;; This function is called by:
 15253 ;;		_init
 15254 ;; This function uses a non-reentrant model
 15255 ;;
 15256                           
 15257                           	psect	text64
 15258  016172                     __ptext64:
 15259                           	opt stack 0
 15260  016172                     _irobot_init_song_0:
 15261                           	opt stack 21
 15262                           
 15263                           ;iRobotSerial.c: 253: eusart_putch(iR_SONG_INIT);
 15264                           
 15265                           ; BSR set to: 0
 15266                           ;incstack = 0
 15267  016172  0E8C               	movlw	140
 15268  016174  EC15  F0B2         	call	_eusart_putch
 15269                           
 15270                           ;iRobotSerial.c: 254: eusart_putch(0);
 15271  016178  0E00               	movlw	0
 15272  01617A  EC15  F0B2         	call	_eusart_putch
 15273                           
 15274                           ;iRobotSerial.c: 255: eusart_putch(1);
 15275  01617E  0E01               	movlw	1
 15276  016180  EC15  F0B2         	call	_eusart_putch
 15277                           
 15278                           ;iRobotSerial.c: 256: eusart_putch(60);
 15279  016184  0E3C               	movlw	60
 15280  016186  EC15  F0B2         	call	_eusart_putch
 15281                           
 15282                           ;iRobotSerial.c: 257: eusart_putch(4);
 15283  01618A  0E04               	movlw	4
 15284  01618C  EC15  F0B2         	call	_eusart_putch
 15285  016190  0012               	return		;funcret
 15286  016192                     __end_of_irobot_init_song_0:
 15287                           	opt stack 0
 15288                           tosu	equ	0xFFF
 15289                           tosh	equ	0xFFE
 15290                           tosl	equ	0xFFD
 15291                           pclath	equ	0xFFA
 15292                           tblptru	equ	0xFF8
 15293                           tblptrh	equ	0xFF7
 15294                           tblptrl	equ	0xFF6
 15295                           tablat	equ	0xFF5
 15296                           prodh	equ	0xFF4
 15297                           prodl	equ	0xFF3
 15298                           intcon	equ	0xFF2
 15299                           postinc0	equ	0xFEE
 15300                           wreg	equ	0xFE8
 15301                           indf1	equ	0xFE7
 15302                           postdec1	equ	0xFE5
 15303                           fsr1h	equ	0xFE2
 15304                           fsr1l	equ	0xFE1
 15305                           indf2	equ	0xFDF
 15306                           postinc2	equ	0xFDE
 15307                           postdec2	equ	0xFDD
 15308                           plusw2	equ	0xFDB
 15309                           fsr2h	equ	0xFDA
 15310                           fsr2l	equ	0xFD9
 15311                           status	equ	0xFD8
 15312                           
 15313 ;; *************** function _irobot_init *****************
 15314 ;; Defined at:
 15315 ;;		line 198 in file "Library/iRobotSerial.c"
 15316 ;; Parameters:    Size  Location     Type
 15317 ;;		None
 15318 ;; Auto vars:     Size  Location     Type
 15319 ;;		None
 15320 ;; Return value:  Size  Location     Type
 15321 ;;                  1    wreg      void 
 15322 ;; Registers used:
 15323 ;;		wreg, cstack
 15324 ;; Tracked objects:
 15325 ;;		On entry : 0/0
 15326 ;;		On exit  : 0/0
 15327 ;;		Unchanged: 0/0
 15328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15330 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15332 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15333 ;;Total ram usage:        0 bytes
 15334 ;; Hardware stack levels used:    1
 15335 ;; Hardware stack levels required when called:    8
 15336 ;; This function calls:
 15337 ;;		_eusart_putch
 15338 ;; This function is called by:
 15339 ;;		_init
 15340 ;; This function uses a non-reentrant model
 15341 ;;
 15342                           
 15343                           	psect	text65
 15344  01641C                     __ptext65:
 15345                           	opt stack 0
 15346  01641C                     _irobot_init:
 15347                           	opt stack 21
 15348                           
 15349                           ;iRobotSerial.c: 199: eusart_putch(iR_START);
 15350                           
 15351                           ;incstack = 0
 15352  01641C  0E80               	movlw	128
 15353  01641E  EC15  F0B2         	call	_eusart_putch
 15354                           
 15355                           ;iRobotSerial.c: 200: eusart_putch(iR_FULL_MODE);
 15356  016422  0E84               	movlw	132
 15357  016424  EC15  F0B2         	call	_eusart_putch
 15358  016428  0012               	return		;funcret
 15359  01642A                     __end_of_irobot_init:
 15360                           	opt stack 0
 15361                           tosu	equ	0xFFF
 15362                           tosh	equ	0xFFE
 15363                           tosl	equ	0xFFD
 15364                           pclath	equ	0xFFA
 15365                           tblptru	equ	0xFF8
 15366                           tblptrh	equ	0xFF7
 15367                           tblptrl	equ	0xFF6
 15368                           tablat	equ	0xFF5
 15369                           prodh	equ	0xFF4
 15370                           prodl	equ	0xFF3
 15371                           intcon	equ	0xFF2
 15372                           postinc0	equ	0xFEE
 15373                           wreg	equ	0xFE8
 15374                           indf1	equ	0xFE7
 15375                           postdec1	equ	0xFE5
 15376                           fsr1h	equ	0xFE2
 15377                           fsr1l	equ	0xFE1
 15378                           indf2	equ	0xFDF
 15379                           postinc2	equ	0xFDE
 15380                           postdec2	equ	0xFDD
 15381                           plusw2	equ	0xFDB
 15382                           fsr2h	equ	0xFDA
 15383                           fsr2l	equ	0xFD9
 15384                           status	equ	0xFD8
 15385                           
 15386 ;; *************** function _eusart_putch *****************
 15387 ;; Defined at:
 15388 ;;		line 120 in file "Library/iRobotSerial.c"
 15389 ;; Parameters:    Size  Location     Type
 15390 ;;  eusartSendCh    1    wreg     unsigned char 
 15391 ;; Auto vars:     Size  Location     Type
 15392 ;;  eusartSendCh    1    0[BANK0 ] unsigned char 
 15393 ;; Return value:  Size  Location     Type
 15394 ;;                  1    wreg      void 
 15395 ;; Registers used:
 15396 ;;		wreg
 15397 ;; Tracked objects:
 15398 ;;		On entry : 0/0
 15399 ;;		On exit  : 0/0
 15400 ;;		Unchanged: 0/0
 15401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15403 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15405 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15406 ;;Total ram usage:        1 bytes
 15407 ;; Hardware stack levels used:    1
 15408 ;; Hardware stack levels required when called:    7
 15409 ;; This function calls:
 15410 ;;		Nothing
 15411 ;; This function is called by:
 15412 ;;		_irobot_query_and_update
 15413 ;;		_irobot_init
 15414 ;;		_irobot_move
 15415 ;;		_irobot_leds
 15416 ;;		_irobot_init_song_0
 15417 ;;		_irobot_song_play
 15418 ;;		_irobot_script_play
 15419 ;; This function uses a non-reentrant model
 15420 ;;
 15421                           
 15422                           	psect	text66
 15423  01642A                     __ptext66:
 15424                           	opt stack 0
 15425  01642A                     _eusart_putch:
 15426                           	opt stack 20
 15427                           
 15428                           ;incstack = 0
 15429                           ;eusart_putch@eusartSendChar stored from wreg
 15430  01642A  0100               	movlb	0	; () banked
 15431  01642C  6F60               	movwf	eusart_putch@eusartSendChar& (0+255),b
 15432  01642E                     
 15433                           ;iRobotSerial.c: 121: while (!TXSTA1bits.TRMT) {};
 15434  01642E  A2AD               	btfss	4013,1,c	;volatile
 15435  016430  D7FE               	goto	l13127
 15436                           
 15437                           ;iRobotSerial.c: 122: TXREG1 = eusartSendChar;
 15438  016432  C060  FFAE         	movff	eusart_putch@eusartSendChar,4014	;volatile
 15439  016436  0012               	return		;funcret
 15440  016438                     __end_of_eusart_putch:
 15441                           	opt stack 0
 15442                           tosu	equ	0xFFF
 15443                           tosh	equ	0xFFE
 15444                           tosl	equ	0xFFD
 15445                           pclath	equ	0xFFA
 15446                           tblptru	equ	0xFF8
 15447                           tblptrh	equ	0xFF7
 15448                           tblptrl	equ	0xFF6
 15449                           tablat	equ	0xFF5
 15450                           prodh	equ	0xFF4
 15451                           prodl	equ	0xFF3
 15452                           intcon	equ	0xFF2
 15453                           postinc0	equ	0xFEE
 15454                           wreg	equ	0xFE8
 15455                           indf1	equ	0xFE7
 15456                           postdec1	equ	0xFE5
 15457                           fsr1h	equ	0xFE2
 15458                           fsr1l	equ	0xFE1
 15459                           indf2	equ	0xFDF
 15460                           postinc2	equ	0xFDE
 15461                           postdec2	equ	0xFDD
 15462                           plusw2	equ	0xFDB
 15463                           fsr2h	equ	0xFDA
 15464                           fsr2l	equ	0xFD9
 15465                           status	equ	0xFD8
 15466                           
 15467 ;; *************** function _eusart_init *****************
 15468 ;; Defined at:
 15469 ;;		line 103 in file "Library/iRobotSerial.c"
 15470 ;; Parameters:    Size  Location     Type
 15471 ;;		None
 15472 ;; Auto vars:     Size  Location     Type
 15473 ;;		None
 15474 ;; Return value:  Size  Location     Type
 15475 ;;                  1    wreg      void 
 15476 ;; Registers used:
 15477 ;;		wreg, status,2
 15478 ;; Tracked objects:
 15479 ;;		On entry : 0/0
 15480 ;;		On exit  : 0/0
 15481 ;;		Unchanged: 0/0
 15482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15486 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15487 ;;Total ram usage:        0 bytes
 15488 ;; Hardware stack levels used:    1
 15489 ;; Hardware stack levels required when called:    7
 15490 ;; This function calls:
 15491 ;;		Nothing
 15492 ;; This function is called by:
 15493 ;;		_init
 15494 ;; This function uses a non-reentrant model
 15495 ;;
 15496                           
 15497                           	psect	text67
 15498  0161B0                     __ptext67:
 15499                           	opt stack 0
 15500  0161B0                     _eusart_init:
 15501                           	opt stack 22
 15502                           
 15503                           ;iRobotSerial.c: 104: TRISCbits.TRISC6 = 0;
 15504                           
 15505                           ;incstack = 0
 15506  0161B0  9C94               	bcf	3988,6,c	;volatile
 15507                           
 15508                           ;iRobotSerial.c: 105: TRISCbits.TRISC7 = 1;
 15509  0161B2  8E94               	bsf	3988,7,c	;volatile
 15510                           
 15511                           ;iRobotSerial.c: 107: TXSTA1 = 0b00100100;
 15512  0161B4  0E24               	movlw	36
 15513  0161B6  6EAD               	movwf	4013,c	;volatile
 15514                           
 15515                           ;iRobotSerial.c: 108: RCSTA1 = 0b10011000;
 15516  0161B8  0E98               	movlw	152
 15517  0161BA  6EAC               	movwf	4012,c	;volatile
 15518                           
 15519                           ;iRobotSerial.c: 110: BAUDCON1bits.DTRXP = 0;
 15520  0161BC  9A7E               	bcf	3966,5,c	;volatile
 15521                           
 15522                           ;iRobotSerial.c: 111: BAUDCON1bits.SCKP = 0;
 15523  0161BE  987E               	bcf	3966,4,c	;volatile
 15524                           
 15525                           ;iRobotSerial.c: 112: BAUDCON1bits.WUE = 0;
 15526  0161C0  927E               	bcf	3966,1,c	;volatile
 15527                           
 15528                           ;iRobotSerial.c: 113: BAUDCON1bits.ABDEN = 0;
 15529  0161C2  907E               	bcf	3966,0,c	;volatile
 15530                           
 15531                           ;iRobotSerial.c: 115: TXSTA1bits.BRGH = 1;
 15532  0161C4  84AD               	bsf	4013,2,c	;volatile
 15533                           
 15534                           ;iRobotSerial.c: 116: BAUDCON1bits.BRG16 = 0;
 15535  0161C6  967E               	bcf	3966,3,c	;volatile
 15536                           
 15537                           ;iRobotSerial.c: 117: SPBRG1 = 51;
 15538  0161C8  0E33               	movlw	51
 15539  0161CA  6EB0               	movwf	4016,c	;volatile
 15540  0161CC  0012               	return		;funcret
 15541  0161CE                     __end_of_eusart_init:
 15542                           	opt stack 0
 15543                           tosu	equ	0xFFF
 15544                           tosh	equ	0xFFE
 15545                           tosl	equ	0xFFD
 15546                           pclath	equ	0xFFA
 15547                           tblptru	equ	0xFF8
 15548                           tblptrh	equ	0xFF7
 15549                           tblptrl	equ	0xFF6
 15550                           tablat	equ	0xFF5
 15551                           prodh	equ	0xFF4
 15552                           prodl	equ	0xFF3
 15553                           intcon	equ	0xFF2
 15554                           postinc0	equ	0xFEE
 15555                           wreg	equ	0xFE8
 15556                           indf1	equ	0xFE7
 15557                           postdec1	equ	0xFE5
 15558                           fsr1h	equ	0xFE2
 15559                           fsr1l	equ	0xFE1
 15560                           indf2	equ	0xFDF
 15561                           postinc2	equ	0xFDE
 15562                           postdec2	equ	0xFDD
 15563                           plusw2	equ	0xFDB
 15564                           fsr2h	equ	0xFDA
 15565                           fsr2l	equ	0xFD9
 15566                           status	equ	0xFD8
 15567                           
 15568 ;; *************** function _Motor_Init *****************
 15569 ;; Defined at:
 15570 ;;		line 26 in file "Library/Motor.c"
 15571 ;; Parameters:    Size  Location     Type
 15572 ;;  pMotor          2   45[BANK0 ] PTR struct Motor
 15573 ;;		 -> Stepper(6), 
 15574 ;;  pAddress        2   47[BANK0 ] unsigned short 
 15575 ;; Auto vars:     Size  Location     Type
 15576 ;;		None
 15577 ;; Return value:  Size  Location     Type
 15578 ;;                  1    wreg      void 
 15579 ;; Registers used:
 15580 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15581 ;; Tracked objects:
 15582 ;;		On entry : 0/0
 15583 ;;		On exit  : 0/0
 15584 ;;		Unchanged: 0/0
 15585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15586 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15589 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15590 ;;Total ram usage:        4 bytes
 15591 ;; Hardware stack levels used:    1
 15592 ;; Hardware stack levels required when called:   12
 15593 ;; This function calls:
 15594 ;;		_Port_SetPin
 15595 ;;		_Port_SetPinType
 15596 ;;		_Timer0_Init
 15597 ;; This function is called by:
 15598 ;;		_init
 15599 ;; This function uses a non-reentrant model
 15600 ;;
 15601                           
 15602                           	psect	text68
 15603  013C78                     __ptext68:
 15604                           	opt stack 0
 15605  013C78                     _Motor_Init:
 15606                           	opt stack 17
 15607                           
 15608                           ;Motor.c: 28: pMotor->mDelta = 0;
 15609                           
 15610                           ;incstack = 0
 15611  013C78  C08D  FFD9         	movff	Motor_Init@pMotor,fsr2l
 15612  013C7C  C08E  FFDA         	movff	Motor_Init@pMotor+1,fsr2h
 15613  013C80  0E00               	movlw	0
 15614  013C82  6EDE               	movwf	postinc2,c
 15615  013C84  0E00               	movlw	0
 15616  013C86  6EDD               	movwf	postdec2,c
 15617                           
 15618                           ;Motor.c: 29: pMotor->mFrequency = 0;
 15619  013C88  0100               	movlb	0	; () banked
 15620  013C8A  EE20 F002          	lfsr	2,2
 15621  013C8E  518D               	movf	Motor_Init@pMotor& (0+255),w,b
 15622  013C90  26D9               	addwf	fsr2l,f,c
 15623  013C92  518E               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 15624  013C94  22DA               	addwfc	fsr2h,f,c
 15625  013C96  0E00               	movlw	0
 15626  013C98  6EDE               	movwf	postinc2,c
 15627  013C9A  0E00               	movlw	0
 15628  013C9C  6EDD               	movwf	postdec2,c
 15629                           
 15630                           ; BSR set to: 0
 15631                           ;Motor.c: 30: pMotor->mAddress = pAddress;
 15632  013C9E  0100               	movlb	0	; () banked
 15633  013CA0  EE20 F004          	lfsr	2,4
 15634  013CA4  518D               	movf	Motor_Init@pMotor& (0+255),w,b
 15635  013CA6  26D9               	addwf	fsr2l,f,c
 15636  013CA8  518E               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 15637  013CAA  22DA               	addwfc	fsr2h,f,c
 15638  013CAC  C08F  FFDE         	movff	Motor_Init@pAddress,postinc2
 15639  013CB0  C090  FFDD         	movff	Motor_Init@pAddress+1,postdec2
 15640                           
 15641                           ; BSR set to: 0
 15642                           ;Motor.c: 33: Port_SetPinType (&PortE, eP0, eTypeOutputPushPull);
 15643  013CB4  0E96               	movlw	low _PortE
 15644  013CB6  0100               	movlb	0	; () banked
 15645  013CB8  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 15646  013CBA  0E03               	movlw	high _PortE
 15647  013CBC  0100               	movlb	0	; () banked
 15648  013CBE  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15649  013CC0  0E00               	movlw	0
 15650  013CC2  0100               	movlb	0	; () banked
 15651  013CC4  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 15652  013CC6  0E03               	movlw	3
 15653  013CC8  0100               	movlb	0	; () banked
 15654  013CCA  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 15655  013CCC  EC32  F093         	call	_Port_SetPinType	;wreg free
 15656                           
 15657                           ;Motor.c: 34: Port_SetPinType (&PortE, eP1, eTypeOutputPushPull);
 15658  013CD0  0E96               	movlw	low _PortE
 15659  013CD2  0100               	movlb	0	; () banked
 15660  013CD4  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 15661  013CD6  0E03               	movlw	high _PortE
 15662  013CD8  0100               	movlb	0	; () banked
 15663  013CDA  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15664  013CDC  0E01               	movlw	1
 15665  013CDE  0100               	movlb	0	; () banked
 15666  013CE0  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 15667  013CE2  0E03               	movlw	3
 15668  013CE4  0100               	movlb	0	; () banked
 15669  013CE6  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 15670  013CE8  EC32  F093         	call	_Port_SetPinType	;wreg free
 15671                           
 15672                           ;Motor.c: 35: Port_SetPin (&PortE, eP0, 0);
 15673  013CEC  0E96               	movlw	low _PortE
 15674  013CEE  0100               	movlb	0	; () banked
 15675  013CF0  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 15676  013CF2  0E03               	movlw	high _PortE
 15677  013CF4  0100               	movlb	0	; () banked
 15678  013CF6  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 15679  013CF8  0E00               	movlw	0
 15680  013CFA  0100               	movlb	0	; () banked
 15681  013CFC  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 15682  013CFE  0E00               	movlw	0
 15683  013D00  0100               	movlb	0	; () banked
 15684  013D02  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 15685  013D04  EC79  F09F         	call	_Port_SetPin	;wreg free
 15686                           
 15687                           ;Motor.c: 36: Port_SetPin (&PortE, eP1, 0);
 15688  013D08  0E96               	movlw	low _PortE
 15689  013D0A  0100               	movlb	0	; () banked
 15690  013D0C  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 15691  013D0E  0E03               	movlw	high _PortE
 15692  013D10  0100               	movlb	0	; () banked
 15693  013D12  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 15694  013D14  0E01               	movlw	1
 15695  013D16  0100               	movlb	0	; () banked
 15696  013D18  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 15697  013D1A  0E00               	movlw	0
 15698  013D1C  0100               	movlb	0	; () banked
 15699  013D1E  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 15700  013D20  EC79  F09F         	call	_Port_SetPin	;wreg free
 15701                           
 15702                           ;Motor.c: 38: lStepFunction = Motor_Step;
 15703  013D24  0EA6               	movlw	low _Motor_Step
 15704  013D26  0100               	movlb	0	; () banked
 15705  013D28  6FBF               	movwf	_lStepFunction& (0+255),b
 15706  013D2A  0E36               	movlw	high _Motor_Step
 15707  013D2C  0100               	movlb	0	; () banked
 15708  013D2E  6FC0               	movwf	(_lStepFunction+1)& (0+255),b
 15709  013D30  0E01               	movlw	low (_Motor_Step shr (0+16))
 15710  013D32  0100               	movlb	0	; () banked
 15711  013D34  6FC1               	movwf	(_lStepFunction+2)& (0+255),b
 15712                           
 15713                           ; BSR set to: 0
 15714                           ;Motor.c: 39: Timer0_Init(1000);
 15715  013D36  0EE8               	movlw	232
 15716  013D38  0100               	movlb	0	; () banked
 15717  013D3A  6F6D               	movwf	Timer0_Init@pFrequency& (0+255),b
 15718  013D3C  0E03               	movlw	3
 15719  013D3E  6F6E               	movwf	(Timer0_Init@pFrequency+1)& (0+255),b
 15720  013D40  0E00               	movlw	0
 15721  013D42  6F6F               	movwf	(Timer0_Init@pFrequency+2)& (0+255),b
 15722  013D44  0E00               	movlw	0
 15723  013D46  6F70               	movwf	(Timer0_Init@pFrequency+3)& (0+255),b
 15724  013D48  EC99  F098         	call	_Timer0_Init	;wreg free
 15725  013D4C  0012               	return		;funcret
 15726  013D4E                     __end_of_Motor_Init:
 15727                           	opt stack 0
 15728                           tosu	equ	0xFFF
 15729                           tosh	equ	0xFFE
 15730                           tosl	equ	0xFFD
 15731                           pclath	equ	0xFFA
 15732                           tblptru	equ	0xFF8
 15733                           tblptrh	equ	0xFF7
 15734                           tblptrl	equ	0xFF6
 15735                           tablat	equ	0xFF5
 15736                           prodh	equ	0xFF4
 15737                           prodl	equ	0xFF3
 15738                           intcon	equ	0xFF2
 15739                           postinc0	equ	0xFEE
 15740                           wreg	equ	0xFE8
 15741                           indf1	equ	0xFE7
 15742                           postdec1	equ	0xFE5
 15743                           fsr1h	equ	0xFE2
 15744                           fsr1l	equ	0xFE1
 15745                           indf2	equ	0xFDF
 15746                           postinc2	equ	0xFDE
 15747                           postdec2	equ	0xFDD
 15748                           plusw2	equ	0xFDB
 15749                           fsr2h	equ	0xFDA
 15750                           fsr2l	equ	0xFD9
 15751                           status	equ	0xFD8
 15752                           
 15753 ;; *************** function _Timer0_Init *****************
 15754 ;; Defined at:
 15755 ;;		line 25 in file "Library/Timer0.c"
 15756 ;; Parameters:    Size  Location     Type
 15757 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 15758 ;; Auto vars:     Size  Location     Type
 15759 ;;  DIVIDE          4   23[BANK0 ] unsigned long 
 15760 ;;  pCPUClock       4   19[BANK0 ] unsigned long 
 15761 ;; Return value:  Size  Location     Type
 15762 ;;                  1    wreg      void 
 15763 ;; Registers used:
 15764 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15765 ;; Tracked objects:
 15766 ;;		On entry : 0/0
 15767 ;;		On exit  : 0/0
 15768 ;;		Unchanged: 0/0
 15769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15770 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15771 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15772 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15773 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15774 ;;Total ram usage:       14 bytes
 15775 ;; Hardware stack levels used:    1
 15776 ;; Hardware stack levels required when called:    8
 15777 ;; This function calls:
 15778 ;;		_Timer0_Clear
 15779 ;;		___lldiv
 15780 ;; This function is called by:
 15781 ;;		_Motor_Init
 15782 ;;		_Motor_Speed
 15783 ;; This function uses a non-reentrant model
 15784 ;;
 15785                           
 15786                           	psect	text69
 15787  013132                     __ptext69:
 15788                           	opt stack 0
 15789  013132                     _Timer0_Init:
 15790                           	opt stack 20
 15791                           
 15792                           ;Timer0.c: 27: UINT32 pCPUClock = (48*1000000L)/8;
 15793                           
 15794                           ;incstack = 0
 15795  013132  0E80               	movlw	128
 15796  013134  0100               	movlb	0	; () banked
 15797  013136  6F73               	movwf	Timer0_Init@pCPUClock& (0+255),b
 15798  013138  0E8D               	movlw	141
 15799  01313A  6F74               	movwf	(Timer0_Init@pCPUClock+1)& (0+255),b
 15800  01313C  0E5B               	movlw	91
 15801  01313E  6F75               	movwf	(Timer0_Init@pCPUClock+2)& (0+255),b
 15802  013140  0E00               	movlw	0
 15803  013142  6F76               	movwf	(Timer0_Init@pCPUClock+3)& (0+255),b
 15804                           
 15805                           ; BSR set to: 0
 15806                           ;Timer0.c: 29: static const UINT16 PRESCALE[] = {2, 4, 8, 16, 32, 64 ,128, 256};
 15807                           ;Timer0.c: 31: static UINT8 PRE = 0;
 15808                           ;Timer0.c: 32: static UINT32 DIV = 0;
 15809                           ;Timer0.c: 34: UINT32 DIVIDE;
 15810                           ;Timer0.c: 37: T0CONbits.TMR0ON = 0;
 15811  013144  9ED5               	bcf	4053,7,c	;volatile
 15812                           
 15813                           ; BSR set to: 0
 15814                           ;Timer0.c: 38: if (pFrequency == 0)
 15815  013146  0100               	movlb	0	; () banked
 15816  013148  516D               	movf	Timer0_Init@pFrequency& (0+255),w,b
 15817  01314A  0100               	movlb	0	; () banked
 15818  01314C  116E               	iorwf	(Timer0_Init@pFrequency+1)& (0+255),w,b
 15819  01314E  0100               	movlb	0	; () banked
 15820  013150  116F               	iorwf	(Timer0_Init@pFrequency+2)& (0+255),w,b
 15821  013152  0100               	movlb	0	; () banked
 15822  013154  1170               	iorwf	(Timer0_Init@pFrequency+3)& (0+255),w,b
 15823  013156  B4D8               	btfsc	status,2,c
 15824  013158  0012               	return	
 15825                           
 15826                           ; BSR set to: 0
 15827                           ;Timer0.c: 41: T0CONbits.PSA = 0;
 15828                           
 15829                           ; BSR set to: 0
 15830                           ;Timer0.c: 39: return;
 15831  01315A  96D5               	bcf	4053,3,c	;volatile
 15832                           
 15833                           ;Timer0.c: 42: T0CONbits.T08BIT = 0;
 15834  01315C  9CD5               	bcf	4053,6,c	;volatile
 15835                           
 15836                           ;Timer0.c: 43: T0CONbits.T0CS = 0;
 15837  01315E  9AD5               	bcf	4053,5,c	;volatile
 15838                           
 15839                           ;Timer0.c: 44: T0CONbits.T0SE = 0;
 15840  013160  98D5               	bcf	4053,4,c	;volatile
 15841                           
 15842                           ; BSR set to: 0
 15843                           ;Timer0.c: 46: DIVIDE = pCPUClock / pFrequency;
 15844  013162  C073  F060         	movff	Timer0_Init@pCPUClock,___lldiv@dividend
 15845  013166  C074  F061         	movff	Timer0_Init@pCPUClock+1,___lldiv@dividend+1
 15846  01316A  C075  F062         	movff	Timer0_Init@pCPUClock+2,___lldiv@dividend+2
 15847  01316E  C076  F063         	movff	Timer0_Init@pCPUClock+3,___lldiv@dividend+3
 15848  013172  C06D  F064         	movff	Timer0_Init@pFrequency,___lldiv@divisor
 15849  013176  C06E  F065         	movff	Timer0_Init@pFrequency+1,___lldiv@divisor+1
 15850  01317A  C06F  F066         	movff	Timer0_Init@pFrequency+2,___lldiv@divisor+2
 15851  01317E  C070  F067         	movff	Timer0_Init@pFrequency+3,___lldiv@divisor+3
 15852  013182  EC9B  F0A0         	call	___lldiv	;wreg free
 15853  013186  C060  F077         	movff	?___lldiv,Timer0_Init@DIVIDE
 15854  01318A  C061  F078         	movff	?___lldiv+1,Timer0_Init@DIVIDE+1
 15855  01318E  C062  F079         	movff	?___lldiv+2,Timer0_Init@DIVIDE+2
 15856  013192  C063  F07A         	movff	?___lldiv+3,Timer0_Init@DIVIDE+3
 15857                           
 15858                           ;Timer0.c: 49: while ((DIVIDE/PRESCALE[INDEX]) > 0xFFFF)
 15859  013196  D00C               	goto	l1787
 15860  013198                     l13495:
 15861                           
 15862                           ;Timer0.c: 50: {
 15863                           ;Timer0.c: 51: INDEX ++;
 15864  013198  0100               	movlb	0	; () banked
 15865  01319A  2BE6               	incf	_INDEX& (0+255),f,b
 15866                           
 15867                           ; BSR set to: 0
 15868                           ;Timer0.c: 52: if (INDEX >= 3)
 15869  01319C  0E02               	movlw	2
 15870  01319E  0100               	movlb	0	; () banked
 15871  0131A0  65E6               	cpfsgt	_INDEX& (0+255),b
 15872  0131A2  D001               	goto	l1785
 15873  0131A4  D02F               	goto	u10040
 15874  0131A6                     l1785:
 15875                           
 15876                           ; BSR set to: 0
 15877                           ;Timer0.c: 56: if (INDEX >= 8)
 15878                           
 15879                           ; BSR set to: 0
 15880  0131A6  0E07               	movlw	7
 15881  0131A8  0100               	movlb	0	; () banked
 15882  0131AA  65E6               	cpfsgt	_INDEX& (0+255),b
 15883  0131AC  D001               	goto	l1787
 15884  0131AE  0012               	return	
 15885  0131B0                     l1787:
 15886                           
 15887                           ; BSR set to: 0
 15888                           
 15889                           ; BSR set to: 0
 15890  0131B0  C077  F060         	movff	Timer0_Init@DIVIDE,___lldiv@dividend
 15891  0131B4  C078  F061         	movff	Timer0_Init@DIVIDE+1,___lldiv@dividend+1
 15892  0131B8  C079  F062         	movff	Timer0_Init@DIVIDE+2,___lldiv@dividend+2
 15893  0131BC  C07A  F063         	movff	Timer0_Init@DIVIDE+3,___lldiv@dividend+3
 15894  0131C0  0100               	movlb	0	; () banked
 15895  0131C2  51E6               	movf	_INDEX& (0+255),w,b
 15896  0131C4  0D02               	mullw	2
 15897  0131C6  0E49               	movlw	low Timer0_Init@PRESCALE
 15898  0131C8  24F3               	addwf	prodl,w,c
 15899  0131CA  6EF6               	movwf	tblptrl,c
 15900  0131CC  0EFD               	movlw	high Timer0_Init@PRESCALE
 15901  0131CE  20F4               	addwfc	prodh,w,c
 15902  0131D0  6EF7               	movwf	tblptrh,c
 15903  0131D2                     	if	1	;There are 3 active tblptr bytes
 15904  0131D2  6AF8               	clrf	tblptru,c
 15905  0131D4  0E00               	movlw	low (__mediumconst shr (0+16))
 15906  0131D6  22F8               	addwfc	tblptru,f,c
 15907  0131D8                     	endif
 15908  0131D8  0009               	tblrd		*+
 15909  0131DA  CFF5 F071          	movff	tablat,??_Timer0_Init
 15910  0131DE  0009               	tblrd		*+
 15911  0131E0  CFF5 F072          	movff	tablat,??_Timer0_Init+1
 15912  0131E4  C071  F064         	movff	??_Timer0_Init,___lldiv@divisor
 15913  0131E8  C072  F065         	movff	??_Timer0_Init+1,___lldiv@divisor+1
 15914  0131EC  0100               	movlb	0	; () banked
 15915  0131EE  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 15916  0131F0  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 15917  0131F2  EC9B  F0A0         	call	___lldiv	;wreg free
 15918  0131F6  0100               	movlb	0	; () banked
 15919  0131F8  5163               	movf	(?___lldiv+3)& (0+255),w,b
 15920  0131FA  E1CE               	bnz	l13495
 15921  0131FC  0100               	movlb	0	; () banked
 15922  0131FE  0562               	decf	(?___lldiv+2)& (0+255),w,b
 15923  013200  B0D8               	btfsc	status,0,c
 15924  013202  D7CA               	goto	l1784
 15925  013204                     u10040:
 15926                           
 15927                           ; BSR set to: 0
 15928                           ;Timer0.c: 58: }
 15929                           ;Timer0.c: 62: PRE = PRESCALE[INDEX];
 15930                           
 15931                           ; BSR set to: 0
 15932  013204  0100               	movlb	0	; () banked
 15933  013206  51E6               	movf	_INDEX& (0+255),w,b
 15934  013208  0D02               	mullw	2
 15935  01320A  0E49               	movlw	low Timer0_Init@PRESCALE
 15936  01320C  24F3               	addwf	prodl,w,c
 15937  01320E  6EF6               	movwf	tblptrl,c
 15938  013210  0EFD               	movlw	high Timer0_Init@PRESCALE
 15939  013212  20F4               	addwfc	prodh,w,c
 15940  013214  6EF7               	movwf	tblptrh,c
 15941  013216                     	if	1	;There are 3 active tblptr bytes
 15942  013216  6AF8               	clrf	tblptru,c
 15943  013218  0E00               	movlw	low (__mediumconst shr (0+16))
 15944  01321A  22F8               	addwfc	tblptru,f,c
 15945  01321C                     	endif
 15946  01321C  0008               	tblrd		*
 15947  01321E  CFF5 F0E5          	movff	tablat,Timer0_Init@PRE
 15948                           
 15949                           ; BSR set to: 0
 15950                           ;Timer0.c: 63: DIV = (DIVIDE-1);
 15951  013222  0EFF               	movlw	255
 15952  013224  0100               	movlb	0	; () banked
 15953  013226  2577               	addwf	Timer0_Init@DIVIDE& (0+255),w,b
 15954  013228  0103               	movlb	3	; () banked
 15955  01322A  6F10               	movwf	Timer0_Init@DIV& (0+255),b
 15956  01322C  0EFF               	movlw	255
 15957  01322E  0100               	movlb	0	; () banked
 15958  013230  2178               	addwfc	(Timer0_Init@DIVIDE+1)& (0+255),w,b
 15959  013232  0103               	movlb	3	; () banked
 15960  013234  6F11               	movwf	(Timer0_Init@DIV+1)& (0+255),b
 15961  013236  0EFF               	movlw	255
 15962  013238  0100               	movlb	0	; () banked
 15963  01323A  2179               	addwfc	(Timer0_Init@DIVIDE+2)& (0+255),w,b
 15964  01323C  0103               	movlb	3	; () banked
 15965  01323E  6F12               	movwf	(Timer0_Init@DIV+2)& (0+255),b
 15966  013240  0EFF               	movlw	255
 15967  013242  0100               	movlb	0	; () banked
 15968  013244  217A               	addwfc	(Timer0_Init@DIVIDE+3)& (0+255),w,b
 15969  013246  0103               	movlb	3	; () banked
 15970  013248  6F13               	movwf	(Timer0_Init@DIV+3)& (0+255),b
 15971                           
 15972                           ; BSR set to: 3
 15973                           ;Timer0.c: 65: COUNTER = 0xFFFF-DIV/PRE;
 15974  01324A  C310  F060         	movff	Timer0_Init@DIV,___lldiv@dividend
 15975  01324E  C311  F061         	movff	Timer0_Init@DIV+1,___lldiv@dividend+1
 15976  013252  C312  F062         	movff	Timer0_Init@DIV+2,___lldiv@dividend+2
 15977  013256  C313  F063         	movff	Timer0_Init@DIV+3,___lldiv@dividend+3
 15978  01325A  0100               	movlb	0	; () banked
 15979  01325C  51E5               	movf	Timer0_Init@PRE& (0+255),w,b
 15980  01325E  0100               	movlb	0	; () banked
 15981  013260  6F64               	movwf	___lldiv@divisor& (0+255),b
 15982  013262  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 15983  013264  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 15984  013266  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 15985  013268  EC9B  F0A0         	call	___lldiv	;wreg free
 15986  01326C  0100               	movlb	0	; () banked
 15987  01326E  1F60               	comf	?___lldiv& (0+255),f,b
 15988  013270  0100               	movlb	0	; () banked
 15989  013272  1F61               	comf	(?___lldiv+1)& (0+255),f,b
 15990  013274  0100               	movlb	0	; () banked
 15991  013276  4B60               	infsnz	?___lldiv& (0+255),f,b
 15992  013278  2B61               	incf	(?___lldiv+1)& (0+255),f,b
 15993  01327A  0EFF               	movlw	255
 15994  01327C  0100               	movlb	0	; () banked
 15995  01327E  2560               	addwf	?___lldiv& (0+255),w,b
 15996  013280  6E29               	movwf	_COUNTER,c
 15997  013282  0EFF               	movlw	255
 15998  013284  0100               	movlb	0	; () banked
 15999  013286  2161               	addwfc	(?___lldiv+1)& (0+255),w,b
 16000  013288  6E2A               	movwf	_COUNTER+1,c
 16001                           
 16002                           ; BSR set to: 0
 16003                           ;Timer0.c: 68: Timer0_Clear();
 16004  01328A  EC37  F0B2         	call	_Timer0_Clear	;wreg free
 16005                           
 16006                           ;Timer0.c: 71: T0CONbits.TMR0ON = 1;
 16007  01328E  8ED5               	bsf	4053,7,c	;volatile
 16008  013290  0012               	return		;funcret
 16009  013292                     __end_of_Timer0_Init:
 16010                           	opt stack 0
 16011                           tosu	equ	0xFFF
 16012                           tosh	equ	0xFFE
 16013                           tosl	equ	0xFFD
 16014                           pclath	equ	0xFFA
 16015                           tblptru	equ	0xFF8
 16016                           tblptrh	equ	0xFF7
 16017                           tblptrl	equ	0xFF6
 16018                           tablat	equ	0xFF5
 16019                           prodh	equ	0xFF4
 16020                           prodl	equ	0xFF3
 16021                           intcon	equ	0xFF2
 16022                           postinc0	equ	0xFEE
 16023                           wreg	equ	0xFE8
 16024                           indf1	equ	0xFE7
 16025                           postdec1	equ	0xFE5
 16026                           fsr1h	equ	0xFE2
 16027                           fsr1l	equ	0xFE1
 16028                           indf2	equ	0xFDF
 16029                           postinc2	equ	0xFDE
 16030                           postdec2	equ	0xFDD
 16031                           plusw2	equ	0xFDB
 16032                           fsr2h	equ	0xFDA
 16033                           fsr2l	equ	0xFD9
 16034                           status	equ	0xFD8
 16035                           
 16036 ;; *************** function _Timer0_Clear *****************
 16037 ;; Defined at:
 16038 ;;		line 20 in file "Library/Timer0.c"
 16039 ;; Parameters:    Size  Location     Type
 16040 ;;		None
 16041 ;; Auto vars:     Size  Location     Type
 16042 ;;		None
 16043 ;; Return value:  Size  Location     Type
 16044 ;;                  1    wreg      void 
 16045 ;; Registers used:
 16046 ;;		None
 16047 ;; Tracked objects:
 16048 ;;		On entry : 0/0
 16049 ;;		On exit  : 0/0
 16050 ;;		Unchanged: 0/0
 16051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16055 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16056 ;;Total ram usage:        0 bytes
 16057 ;; Hardware stack levels used:    1
 16058 ;; Hardware stack levels required when called:    7
 16059 ;; This function calls:
 16060 ;;		Nothing
 16061 ;; This function is called by:
 16062 ;;		_Timer0_Init
 16063 ;; This function uses a non-reentrant model
 16064 ;;
 16065                           
 16066                           	psect	text70
 16067  01646E                     __ptext70:
 16068                           	opt stack 0
 16069  01646E                     _Timer0_Clear:
 16070                           	opt stack 20
 16071                           
 16072                           ;Timer0.c: 22: TMR0 = COUNTER;
 16073                           
 16074                           ;incstack = 0
 16075  01646E  C029  FFD6         	movff	_COUNTER,4054	;volatile
 16076  016472  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 16077                           
 16078                           ;Timer0.c: 23: INTCONbits.TMR0IF = 0;
 16079  016476  94F2               	bcf	intcon,2,c	;volatile
 16080  016478  0012               	return		;funcret
 16081  01647A                     __end_of_Timer0_Clear:
 16082                           	opt stack 0
 16083                           tosu	equ	0xFFF
 16084                           tosh	equ	0xFFE
 16085                           tosl	equ	0xFFD
 16086                           pclath	equ	0xFFA
 16087                           tblptru	equ	0xFF8
 16088                           tblptrh	equ	0xFF7
 16089                           tblptrl	equ	0xFF6
 16090                           tablat	equ	0xFF5
 16091                           prodh	equ	0xFF4
 16092                           prodl	equ	0xFF3
 16093                           intcon	equ	0xFF2
 16094                           postinc0	equ	0xFEE
 16095                           wreg	equ	0xFE8
 16096                           indf1	equ	0xFE7
 16097                           postdec1	equ	0xFE5
 16098                           fsr1h	equ	0xFE2
 16099                           fsr1l	equ	0xFE1
 16100                           indf2	equ	0xFDF
 16101                           postinc2	equ	0xFDE
 16102                           postdec2	equ	0xFDD
 16103                           plusw2	equ	0xFDB
 16104                           fsr2h	equ	0xFDA
 16105                           fsr2l	equ	0xFD9
 16106                           status	equ	0xFD8
 16107                           
 16108 ;; *************** function _MXK_Init *****************
 16109 ;; Defined at:
 16110 ;;		line 33 in file "Library/MXK.c"
 16111 ;; Parameters:    Size  Location     Type
 16112 ;;		None
 16113 ;; Auto vars:     Size  Location     Type
 16114 ;;		None
 16115 ;; Return value:  Size  Location     Type
 16116 ;;                  1    wreg      void 
 16117 ;; Registers used:
 16118 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16119 ;; Tracked objects:
 16120 ;;		On entry : 0/0
 16121 ;;		On exit  : 0/0
 16122 ;;		Unchanged: 0/0
 16123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16127 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16128 ;;Total ram usage:        0 bytes
 16129 ;; Hardware stack levels used:    1
 16130 ;; Hardware stack levels required when called:   16
 16131 ;; This function calls:
 16132 ;;		_LED_Init
 16133 ;;		_Port_Init
 16134 ;;		_Port_SetPin
 16135 ;;		_Port_SetPinType
 16136 ;;		_Port_SetQuadType
 16137 ;;		_Port_SetType
 16138 ;;		_delay_ms
 16139 ;; This function is called by:
 16140 ;;		_init
 16141 ;; This function uses a non-reentrant model
 16142 ;;
 16143                           
 16144                           	psect	text71
 16145  012CDA                     __ptext71:
 16146                           	opt stack 0
 16147  012CDA                     _MXK_Init:
 16148                           	opt stack 13
 16149                           
 16150                           ;MXK.c: 35: Bus_State = eMXK_Idle;
 16151                           
 16152                           ;incstack = 0
 16153  012CDA  0E01               	movlw	1
 16154  012CDC  6E4B               	movwf	_Bus_State,c
 16155                           
 16156                           ;MXK.c: 36: lQueue = (Function)0;
 16157  012CDE  0E00               	movlw	0
 16158  012CE0  0100               	movlb	0	; () banked
 16159  012CE2  6FBC               	movwf	_lQueue& (0+255),b	;volatile
 16160  012CE4  0E00               	movlw	0
 16161  012CE6  0100               	movlb	0	; () banked
 16162  012CE8  6FBD               	movwf	(_lQueue+1)& (0+255),b	;volatile
 16163  012CEA  0E00               	movlw	0
 16164  012CEC  0100               	movlb	0	; () banked
 16165  012CEE  6FBE               	movwf	(_lQueue+2)& (0+255),b	;volatile
 16166                           
 16167                           ; BSR set to: 0
 16168                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
 16169  012CF0  0EB4               	movlw	low _PortA
 16170  012CF2  0100               	movlb	0	; () banked
 16171  012CF4  6FA0               	movwf	Port_Init@pInput& (0+255),b
 16172  012CF6  0E03               	movlw	high _PortA
 16173  012CF8  0100               	movlb	0	; () banked
 16174  012CFA  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 16175  012CFC  0E00               	movlw	0
 16176  012CFE  0100               	movlb	0	; () banked
 16177  012D00  6FA2               	movwf	Port_Init@pPort& (0+255),b
 16178  012D02  ECE1  F094         	call	_Port_Init	;wreg free
 16179                           
 16180                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
 16181  012D06  0EAA               	movlw	low _PortB
 16182  012D08  0100               	movlb	0	; () banked
 16183  012D0A  6FA0               	movwf	Port_Init@pInput& (0+255),b
 16184  012D0C  0E03               	movlw	high _PortB
 16185  012D0E  0100               	movlb	0	; () banked
 16186  012D10  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 16187  012D12  0E01               	movlw	1
 16188  012D14  0100               	movlb	0	; () banked
 16189  012D16  6FA2               	movwf	Port_Init@pPort& (0+255),b
 16190  012D18  ECE1  F094         	call	_Port_Init	;wreg free
 16191                           
 16192                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
 16193  012D1C  0EEA               	movlw	low _PortC
 16194  012D1E  0100               	movlb	0	; () banked
 16195  012D20  6FA0               	movwf	Port_Init@pInput& (0+255),b
 16196  012D22  0E00               	movlw	high _PortC
 16197  012D24  0100               	movlb	0	; () banked
 16198  012D26  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 16199  012D28  0E02               	movlw	2
 16200  012D2A  0100               	movlb	0	; () banked
 16201  012D2C  6FA2               	movwf	Port_Init@pPort& (0+255),b
 16202  012D2E  ECE1  F094         	call	_Port_Init	;wreg free
 16203                           
 16204                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
 16205  012D32  0EA0               	movlw	low _PortD
 16206  012D34  0100               	movlb	0	; () banked
 16207  012D36  6FA0               	movwf	Port_Init@pInput& (0+255),b
 16208  012D38  0E03               	movlw	high _PortD
 16209  012D3A  0100               	movlb	0	; () banked
 16210  012D3C  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 16211  012D3E  0E03               	movlw	3
 16212  012D40  0100               	movlb	0	; () banked
 16213  012D42  6FA2               	movwf	Port_Init@pPort& (0+255),b
 16214  012D44  ECE1  F094         	call	_Port_Init	;wreg free
 16215                           
 16216                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
 16217  012D48  0E96               	movlw	low _PortE
 16218  012D4A  0100               	movlb	0	; () banked
 16219  012D4C  6FA0               	movwf	Port_Init@pInput& (0+255),b
 16220  012D4E  0E03               	movlw	high _PortE
 16221  012D50  0100               	movlb	0	; () banked
 16222  012D52  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 16223  012D54  0E04               	movlw	4
 16224  012D56  0100               	movlb	0	; () banked
 16225  012D58  6FA2               	movwf	Port_Init@pPort& (0+255),b
 16226  012D5A  ECE1  F094         	call	_Port_Init	;wreg free
 16227                           
 16228                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
 16229  012D5E  0EBE               	movlw	low _PortF
 16230  012D60  0100               	movlb	0	; () banked
 16231  012D62  6FA0               	movwf	Port_Init@pInput& (0+255),b
 16232  012D64  0E03               	movlw	high _PortF
 16233  012D66  0100               	movlb	0	; () banked
 16234  012D68  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 16235  012D6A  0E05               	movlw	5
 16236  012D6C  0100               	movlb	0	; () banked
 16237  012D6E  6FA2               	movwf	Port_Init@pPort& (0+255),b
 16238  012D70  ECE1  F094         	call	_Port_Init	;wreg free
 16239                           
 16240                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
 16241  012D74  0E8C               	movlw	low _PortG
 16242  012D76  0100               	movlb	0	; () banked
 16243  012D78  6FA0               	movwf	Port_Init@pInput& (0+255),b
 16244  012D7A  0E03               	movlw	high _PortG
 16245  012D7C  0100               	movlb	0	; () banked
 16246  012D7E  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 16247  012D80  0E06               	movlw	6
 16248  012D82  0100               	movlb	0	; () banked
 16249  012D84  6FA2               	movwf	Port_Init@pPort& (0+255),b
 16250  012D86  ECE1  F094         	call	_Port_Init	;wreg free
 16251                           
 16252                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
 16253  012D8A  0EBE               	movlw	low _PortF
 16254  012D8C  0100               	movlb	0	; () banked
 16255  012D8E  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 16256  012D90  0E03               	movlw	high _PortF
 16257  012D92  0100               	movlb	0	; () banked
 16258  012D94  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16259  012D96  0E05               	movlw	5
 16260  012D98  0100               	movlb	0	; () banked
 16261  012D9A  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 16262  012D9C  0E00               	movlw	0
 16263  012D9E  0100               	movlb	0	; () banked
 16264  012DA0  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 16265  012DA2  EC32  F093         	call	_Port_SetPinType	;wreg free
 16266                           
 16267                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
 16268  012DA6  0EAA               	movlw	low _PortB
 16269  012DA8  0100               	movlb	0	; () banked
 16270  012DAA  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
 16271  012DAC  0E03               	movlw	high _PortB
 16272  012DAE  0100               	movlb	0	; () banked
 16273  012DB0  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 16274  012DB2  0E00               	movlw	0
 16275  012DB4  0100               	movlb	0	; () banked
 16276  012DB6  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
 16277  012DB8  0E00               	movlw	0
 16278  012DBA  0100               	movlb	0	; () banked
 16279  012DBC  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
 16280  012DBE  EC25  F08D         	call	_Port_SetQuadType	;wreg free
 16281                           
 16282                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
 16283  012DC2  0EBE               	movlw	low _PortF
 16284  012DC4  0100               	movlb	0	; () banked
 16285  012DC6  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 16286  012DC8  0E03               	movlw	high _PortF
 16287  012DCA  0100               	movlb	0	; () banked
 16288  012DCC  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16289  012DCE  0E06               	movlw	6
 16290  012DD0  0100               	movlb	0	; () banked
 16291  012DD2  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 16292  012DD4  0E03               	movlw	3
 16293  012DD6  0100               	movlb	0	; () banked
 16294  012DD8  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 16295  012DDA  EC32  F093         	call	_Port_SetPinType	;wreg free
 16296                           
 16297                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
 16298  012DDE  0E8C               	movlw	low _PortG
 16299  012DE0  0100               	movlb	0	; () banked
 16300  012DE2  6F9A               	movwf	Port_SetType@pInput& (0+255),b
 16301  012DE4  0E03               	movlw	high _PortG
 16302  012DE6  0100               	movlb	0	; () banked
 16303  012DE8  6F9B               	movwf	(Port_SetType@pInput+1)& (0+255),b
 16304  012DEA  0E03               	movlw	3
 16305  012DEC  0100               	movlb	0	; () banked
 16306  012DEE  6F9C               	movwf	Port_SetType@pType& (0+255),b
 16307  012DF0  EC50  F08E         	call	_Port_SetType	;wreg free
 16308                           
 16309                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
 16310  012DF4  0E8C               	movlw	low _PortG
 16311  012DF6  0100               	movlb	0	; () banked
 16312  012DF8  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 16313  012DFA  0E03               	movlw	high _PortG
 16314  012DFC  0100               	movlb	0	; () banked
 16315  012DFE  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16316  012E00  0E04               	movlw	4
 16317  012E02  0100               	movlb	0	; () banked
 16318  012E04  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 16319  012E06  0E00               	movlw	0
 16320  012E08  0100               	movlb	0	; () banked
 16321  012E0A  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 16322  012E0C  EC79  F09F         	call	_Port_SetPin	;wreg free
 16323                           
 16324                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
 16325  012E10  0EBE               	movlw	low _PortF
 16326  012E12  0100               	movlb	0	; () banked
 16327  012E14  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 16328  012E16  0E03               	movlw	high _PortF
 16329  012E18  0100               	movlb	0	; () banked
 16330  012E1A  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16331  012E1C  0E06               	movlw	6
 16332  012E1E  0100               	movlb	0	; () banked
 16333  012E20  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 16334  012E22  0E01               	movlw	1
 16335  012E24  0100               	movlb	0	; () banked
 16336  012E26  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 16337  012E28  EC79  F09F         	call	_Port_SetPin	;wreg free
 16338                           
 16339                           ;MXK.c: 55: LED_Init(eLED1);
 16340  012E2C  0E00               	movlw	0
 16341  012E2E  EC59  F0AB         	call	_LED_Init
 16342                           
 16343                           ;MXK.c: 56: LED_Init(eLED2);
 16344  012E32  0E01               	movlw	1
 16345  012E34  EC59  F0AB         	call	_LED_Init
 16346                           
 16347                           ;MXK.c: 58: PIR1 = 0;
 16348  012E38  0E00               	movlw	0
 16349  012E3A  6E9E               	movwf	3998,c	;volatile
 16350                           
 16351                           ;MXK.c: 59: PIR2 = 0;
 16352  012E3C  0E00               	movlw	0
 16353  012E3E  6EA1               	movwf	4001,c	;volatile
 16354                           
 16355                           ;MXK.c: 60: PIR3 = 0;
 16356  012E40  0E00               	movlw	0
 16357  012E42  6EA4               	movwf	4004,c	;volatile
 16358                           
 16359                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
 16360  012E44  8E9B               	bsf	3995,7,c	;volatile
 16361                           
 16362                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
 16363  012E46  8C9B               	bsf	3995,6,c	;volatile
 16364                           
 16365                           ;MXK.c: 66: delay_ms(100);
 16366  012E48  0E00               	movlw	0
 16367  012E4A  0100               	movlb	0	; () banked
 16368  012E4C  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 16369  012E4E  0E64               	movlw	100
 16370  012E50  6F60               	movwf	delay_ms@ms& (0+255),b
 16371  012E52  EC26  F0AA         	call	_delay_ms	;wreg free
 16372                           
 16373                           ;MXK.c: 68: RCONbits.IPEN = 1;
 16374  012E56  8ED0               	bsf	4048,7,c	;volatile
 16375  012E58  0012               	return		;funcret
 16376  012E5A                     __end_of_MXK_Init:
 16377                           	opt stack 0
 16378                           tosu	equ	0xFFF
 16379                           tosh	equ	0xFFE
 16380                           tosl	equ	0xFFD
 16381                           pclath	equ	0xFFA
 16382                           tblptru	equ	0xFF8
 16383                           tblptrh	equ	0xFF7
 16384                           tblptrl	equ	0xFF6
 16385                           tablat	equ	0xFF5
 16386                           prodh	equ	0xFF4
 16387                           prodl	equ	0xFF3
 16388                           intcon	equ	0xFF2
 16389                           postinc0	equ	0xFEE
 16390                           wreg	equ	0xFE8
 16391                           indf1	equ	0xFE7
 16392                           postdec1	equ	0xFE5
 16393                           fsr1h	equ	0xFE2
 16394                           fsr1l	equ	0xFE1
 16395                           indf2	equ	0xFDF
 16396                           postinc2	equ	0xFDE
 16397                           postdec2	equ	0xFDD
 16398                           plusw2	equ	0xFDB
 16399                           fsr2h	equ	0xFDA
 16400                           fsr2l	equ	0xFD9
 16401                           status	equ	0xFD8
 16402                           
 16403 ;; *************** function _Port_Init *****************
 16404 ;; Defined at:
 16405 ;;		line 150 in file "Library/Port.c"
 16406 ;; Parameters:    Size  Location     Type
 16407 ;;  pInput          2   64[BANK0 ] const PTR struct Port
 16408 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16409 ;;		 -> PortD(10), PortC(10), PortF(10), 
 16410 ;;  pPort           1   66[BANK0 ] enum E6786
 16411 ;; Auto vars:     Size  Location     Type
 16412 ;;  i               1   69[BANK0 ] unsigned char 
 16413 ;; Return value:  Size  Location     Type
 16414 ;;                  1    wreg      void 
 16415 ;; Registers used:
 16416 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16417 ;; Tracked objects:
 16418 ;;		On entry : 0/0
 16419 ;;		On exit  : 0/0
 16420 ;;		Unchanged: 0/0
 16421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16422 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16423 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16424 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16425 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16426 ;;Total ram usage:        6 bytes
 16427 ;; Hardware stack levels used:    1
 16428 ;; Hardware stack levels required when called:   15
 16429 ;; This function calls:
 16430 ;;		_GetPortPORT
 16431 ;;		_GetPortProperties
 16432 ;;		_GetPortTRIS
 16433 ;;		_Port_Set
 16434 ;;		_Port_SetPinType
 16435 ;;		_Port_SetType
 16436 ;;		_Word_GetPair
 16437 ;; This function is called by:
 16438 ;;		_MXK_Init
 16439 ;; This function uses a non-reentrant model
 16440 ;;
 16441                           
 16442                           	psect	text72
 16443  0129C2                     __ptext72:
 16444                           	opt stack 0
 16445  0129C2                     _Port_Init:
 16446                           	opt stack 13
 16447                           
 16448                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
 16449                           
 16450                           ;incstack = 0
 16451  0129C2  0100               	movlb	0	; () banked
 16452  0129C4  51A2               	movf	Port_Init@pPort& (0+255),w,b
 16453  0129C6  ECB0  F0A3         	call	_GetPortProperties
 16454  0129CA  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
 16455  0129CE  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
 16456  0129D2  0100               	movlb	0	; () banked
 16457  0129D4  C060  FFDE         	movff	?_GetPortProperties,postinc2
 16458  0129D8  0100               	movlb	0	; () banked
 16459  0129DA  C061  FFDD         	movff	?_GetPortProperties+1,postdec2
 16460                           
 16461                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
 16462  0129DE  0100               	movlb	0	; () banked
 16463  0129E0  51A2               	movf	Port_Init@pPort& (0+255),w,b
 16464  0129E2  EC03  F0A4         	call	_GetPortPORT
 16465  0129E6  0100               	movlb	0	; () banked
 16466  0129E8  EE20 F006          	lfsr	2,6
 16467  0129EC  51A0               	movf	Port_Init@pInput& (0+255),w,b
 16468  0129EE  26D9               	addwf	fsr2l,f,c
 16469  0129F0  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 16470  0129F2  22DA               	addwfc	fsr2h,f,c
 16471  0129F4  0100               	movlb	0	; () banked
 16472  0129F6  C060  FFDE         	movff	?_GetPortPORT,postinc2
 16473  0129FA  0100               	movlb	0	; () banked
 16474  0129FC  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
 16475                           
 16476                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
 16477  012A00  0100               	movlb	0	; () banked
 16478  012A02  51A2               	movf	Port_Init@pPort& (0+255),w,b
 16479  012A04  EC03  F0A4         	call	_GetPortPORT
 16480  012A08  0100               	movlb	0	; () banked
 16481  012A0A  EE20 F004          	lfsr	2,4
 16482  012A0E  51A0               	movf	Port_Init@pInput& (0+255),w,b
 16483  012A10  26D9               	addwf	fsr2l,f,c
 16484  012A12  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 16485  012A14  22DA               	addwfc	fsr2h,f,c
 16486  012A16  0100               	movlb	0	; () banked
 16487  012A18  C060  FFDE         	movff	?_GetPortPORT,postinc2
 16488  012A1C  0100               	movlb	0	; () banked
 16489  012A1E  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
 16490                           
 16491                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
 16492  012A22  0100               	movlb	0	; () banked
 16493  012A24  51A2               	movf	Port_Init@pPort& (0+255),w,b
 16494  012A26  EC5D  F0A3         	call	_GetPortTRIS
 16495  012A2A  0100               	movlb	0	; () banked
 16496  012A2C  EE20 F002          	lfsr	2,2
 16497  012A30  51A0               	movf	Port_Init@pInput& (0+255),w,b
 16498  012A32  26D9               	addwf	fsr2l,f,c
 16499  012A34  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 16500  012A36  22DA               	addwfc	fsr2h,f,c
 16501  012A38  0100               	movlb	0	; () banked
 16502  012A3A  C060  FFDE         	movff	?_GetPortTRIS,postinc2
 16503  012A3E  0100               	movlb	0	; () banked
 16504  012A40  C061  FFDD         	movff	?_GetPortTRIS+1,postdec2
 16505                           
 16506                           ; BSR set to: 0
 16507                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
 16508  012A44  0100               	movlb	0	; () banked
 16509  012A46  EE20 F004          	lfsr	2,4
 16510  012A4A  51A0               	movf	Port_Init@pInput& (0+255),w,b
 16511  012A4C  26D9               	addwf	fsr2l,f,c
 16512  012A4E  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 16513  012A50  22DA               	addwfc	fsr2h,f,c
 16514  012A52  CFDE F0A3          	movff	postinc2,??_Port_Init
 16515  012A56  CFDD F0A4          	movff	postdec2,??_Port_Init+1
 16516  012A5A  C0A3  FFD9         	movff	??_Port_Init,fsr2l
 16517  012A5E  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
 16518  012A62  0E00               	movlw	0
 16519  012A64  6EDF               	movwf	indf2,c
 16520                           
 16521                           ; BSR set to: 0
 16522                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
 16523  012A66  0100               	movlb	0	; () banked
 16524  012A68  EE20 F002          	lfsr	2,2
 16525  012A6C  51A0               	movf	Port_Init@pInput& (0+255),w,b
 16526  012A6E  26D9               	addwf	fsr2l,f,c
 16527  012A70  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 16528  012A72  22DA               	addwfc	fsr2h,f,c
 16529  012A74  CFDE F0A3          	movff	postinc2,??_Port_Init
 16530  012A78  CFDD F0A4          	movff	postdec2,??_Port_Init+1
 16531  012A7C  C0A3  FFD9         	movff	??_Port_Init,fsr2l
 16532  012A80  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
 16533  012A84  0EFF               	movlw	255
 16534  012A86  6EDF               	movwf	indf2,c
 16535                           
 16536                           ; BSR set to: 0
 16537                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
 16538  012A88  C0A0  F09A         	movff	Port_Init@pInput,Port_SetType@pInput
 16539  012A8C  C0A1  F09B         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
 16540  012A90  0E00               	movlw	0
 16541  012A92  0100               	movlb	0	; () banked
 16542  012A94  6F9C               	movwf	Port_SetType@pType& (0+255),b
 16543  012A96  EC50  F08E         	call	_Port_SetType	;wreg free
 16544                           
 16545                           ;Port.c: 166: UINT8 i;
 16546                           ;Port.c: 167: for (i=0; i<8; i++)
 16547  012A9A  0E00               	movlw	0
 16548  012A9C  0100               	movlb	0	; () banked
 16549  012A9E  6FA5               	movwf	Port_Init@i& (0+255),b
 16550  012AA0                     l13349:
 16551                           
 16552                           ; BSR set to: 0
 16553  012AA0  0E07               	movlw	7
 16554  012AA2  0100               	movlb	0	; () banked
 16555  012AA4  65A5               	cpfsgt	Port_Init@i& (0+255),b
 16556  012AA6  D031               	goto	l403
 16557  012AA8  D04B               	goto	u9840
 16558  012AAA                     
 16559                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
 16560                           
 16561                           ; BSR set to: 0
 16562  012AAA  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 16563  012AAE  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 16564  012AB2  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 16565  012AB6  0E03               	movlw	3
 16566  012AB8  0100               	movlb	0	; () banked
 16567  012ABA  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 16568  012ABC  EC32  F093         	call	_Port_SetPinType	;wreg free
 16569                           
 16570                           ;Port.c: 173: break;
 16571  012AC0  D03C               	goto	l405
 16572  012AC2                     
 16573                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
 16574  012AC2  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 16575  012AC6  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 16576  012ACA  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 16577  012ACE  0E02               	movlw	2
 16578  012AD0  0100               	movlb	0	; () banked
 16579  012AD2  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 16580  012AD4  EC32  F093         	call	_Port_SetPinType	;wreg free
 16581                           
 16582                           ;Port.c: 176: break;
 16583  012AD8  D030               	goto	l405
 16584  012ADA                     
 16585                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
 16586  012ADA  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 16587  012ADE  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 16588  012AE2  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 16589  012AE6  0E01               	movlw	1
 16590  012AE8  0100               	movlb	0	; () banked
 16591  012AEA  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 16592  012AEC  EC32  F093         	call	_Port_SetPinType	;wreg free
 16593                           
 16594                           ;Port.c: 179: break;
 16595  012AF0  D024               	goto	l405
 16596  012AF2                     
 16597                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
 16598  012AF2  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 16599  012AF6  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 16600  012AFA  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 16601  012AFE  0E00               	movlw	0
 16602  012B00  0100               	movlb	0	; () banked
 16603  012B02  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 16604  012B04  EC32  F093         	call	_Port_SetPinType	;wreg free
 16605                           
 16606                           ;Port.c: 183: }
 16607                           
 16608                           ;Port.c: 182: break;
 16609  012B08  D018               	goto	l405
 16610  012B0A                     l403:
 16611  012B0A  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
 16612  012B0E  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
 16613  012B12  CFDE F06C          	movff	postinc2,Word_GetPair@pInput
 16614  012B16  CFDD F06D          	movff	postdec2,Word_GetPair@pInput+1
 16615  012B1A  C0A5  F06E         	movff	Port_Init@i,Word_GetPair@pPair
 16616  012B1E  ECDF  F0AE         	call	_Word_GetPair	;wreg free
 16617                           
 16618                           ; Switch size 1, requested type "space"
 16619                           ; Number of cases is 4, Range of values is 0 to 3
 16620                           ; switch strategies available:
 16621                           ; Name         Instructions Cycles
 16622                           ; simple_byte           13     7 (average)
 16623                           ;	Chosen strategy is simple_byte
 16624  012B22  0A00               	xorlw	0	; case 0
 16625  012B24  B4D8               	btfsc	status,2,c
 16626  012B26  D7C1               	goto	l404
 16627  012B28  0A01               	xorlw	1	; case 1
 16628  012B2A  B4D8               	btfsc	status,2,c
 16629  012B2C  D7D6               	goto	l407
 16630  012B2E  0A03               	xorlw	3	; case 2
 16631  012B30  B4D8               	btfsc	status,2,c
 16632  012B32  D7C7               	goto	l406
 16633  012B34  0A01               	xorlw	1	; case 3
 16634  012B36  B4D8               	btfsc	status,2,c
 16635  012B38  D7DC               	goto	l408
 16636  012B3A                     l405:
 16637  012B3A  0100               	movlb	0	; () banked
 16638  012B3C  2BA5               	incf	Port_Init@i& (0+255),f,b
 16639  012B3E  D7B0               	goto	l13349
 16640  012B40                     u9840:
 16641                           
 16642                           ; BSR set to: 0
 16643                           ;Port.c: 184: }
 16644                           ;Port.c: 185: Port_Set(pInput, 0x00);
 16645                           
 16646                           ; BSR set to: 0
 16647  012B40  C0A0  F06F         	movff	Port_Init@pInput,Port_Set@pInput
 16648  012B44  C0A1  F070         	movff	Port_Init@pInput+1,Port_Set@pInput+1
 16649  012B48  0E00               	movlw	0
 16650  012B4A  0100               	movlb	0	; () banked
 16651  012B4C  6F71               	movwf	Port_Set@pValue& (0+255),b
 16652  012B4E  EC4E  F088         	call	_Port_Set	;wreg free
 16653  012B52  0012               	return		;funcret
 16654  012B54                     __end_of_Port_Init:
 16655                           	opt stack 0
 16656                           tosu	equ	0xFFF
 16657                           tosh	equ	0xFFE
 16658                           tosl	equ	0xFFD
 16659                           pclath	equ	0xFFA
 16660                           tblptru	equ	0xFF8
 16661                           tblptrh	equ	0xFF7
 16662                           tblptrl	equ	0xFF6
 16663                           tablat	equ	0xFF5
 16664                           prodh	equ	0xFF4
 16665                           prodl	equ	0xFF3
 16666                           intcon	equ	0xFF2
 16667                           postinc0	equ	0xFEE
 16668                           wreg	equ	0xFE8
 16669                           indf1	equ	0xFE7
 16670                           postdec1	equ	0xFE5
 16671                           fsr1h	equ	0xFE2
 16672                           fsr1l	equ	0xFE1
 16673                           indf2	equ	0xFDF
 16674                           postinc2	equ	0xFDE
 16675                           postdec2	equ	0xFDD
 16676                           plusw2	equ	0xFDB
 16677                           fsr2h	equ	0xFDA
 16678                           fsr2l	equ	0xFD9
 16679                           status	equ	0xFD8
 16680                           
 16681 ;; *************** function _Port_SetType *****************
 16682 ;; Defined at:
 16683 ;;		line 513 in file "Library/Port.c"
 16684 ;; Parameters:    Size  Location     Type
 16685 ;;  pInput          2   58[BANK0 ] const PTR struct Port
 16686 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16687 ;;		 -> PortD(10), PortC(10), PortF(10), 
 16688 ;;  pType           1   60[BANK0 ] enum E6795
 16689 ;; Auto vars:     Size  Location     Type
 16690 ;;  Output          1   63[BANK0 ] enum E6475
 16691 ;; Return value:  Size  Location     Type
 16692 ;;                  1    wreg      enum E6475
 16693 ;; Registers used:
 16694 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16695 ;; Tracked objects:
 16696 ;;		On entry : 0/0
 16697 ;;		On exit  : 0/0
 16698 ;;		Unchanged: 0/0
 16699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16700 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16701 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16702 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16703 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16704 ;;Total ram usage:        6 bytes
 16705 ;; Hardware stack levels used:    1
 16706 ;; Hardware stack levels required when called:   14
 16707 ;; This function calls:
 16708 ;;		_Port_CheckPortType
 16709 ;;		_Word_SetPair
 16710 ;; This function is called by:
 16711 ;;		_Port_Init
 16712 ;;		_MXK_Init
 16713 ;; This function uses a non-reentrant model
 16714 ;;
 16715                           
 16716                           	psect	text73
 16717  011CA0                     __ptext73:
 16718                           	opt stack 0
 16719  011CA0                     _Port_SetType:
 16720                           	opt stack 14
 16721                           
 16722                           ;Port.c: 515: ePinError Output = ePinErrorState;
 16723                           
 16724                           ;incstack = 0
 16725  011CA0  0E05               	movlw	5
 16726  011CA2  0100               	movlb	0	; () banked
 16727  011CA4  6F9F               	movwf	Port_SetType@Output& (0+255),b
 16728                           
 16729                           ;Port.c: 517: switch (pType)
 16730  011CA6  D07A               	goto	l509
 16731  011CA8                     
 16732                           ; BSR set to: 0
 16733                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
 16734                           
 16735                           ; BSR set to: 0
 16736  011CA8  0100               	movlb	0	; () banked
 16737  011CAA  EE20 F002          	lfsr	2,2
 16738  011CAE  519A               	movf	Port_SetType@pInput& (0+255),w,b
 16739  011CB0  26D9               	addwf	fsr2l,f,c
 16740  011CB2  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 16741  011CB4  22DA               	addwfc	fsr2h,f,c
 16742  011CB6  CFDE F09D          	movff	postinc2,??_Port_SetType
 16743  011CBA  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 16744  011CBE  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 16745  011CC2  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 16746  011CC6  0EFF               	movlw	255
 16747  011CC8  D067               	goto	L10
 16748  011CCA                     
 16749                           ; BSR set to: 0
 16750                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
 16751                           
 16752                           ; BSR set to: 0
 16753  011CCA  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 16754  011CCE  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 16755  011CD2  0E01               	movlw	1
 16756  011CD4  0100               	movlb	0	; () banked
 16757  011CD6  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
 16758  011CD8  EC2A  F0AD         	call	_Port_CheckPortType	;wreg free
 16759  011CDC  0100               	movlb	0	; () banked
 16760  011CDE  6F9F               	movwf	Port_SetType@Output& (0+255),b
 16761  011CE0  0100               	movlb	0	; () banked
 16762  011CE2  519F               	movf	Port_SetType@Output& (0+255),w,b
 16763  011CE4  A4D8               	btfss	status,2,c
 16764  011CE6  0012               	return	
 16765                           
 16766                           ; BSR set to: 0
 16767                           ;Port.c: 527: {
 16768                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
 16769  011CE8  0100               	movlb	0	; () banked
 16770  011CEA  EE20 F002          	lfsr	2,2
 16771  011CEE  519A               	movf	Port_SetType@pInput& (0+255),w,b
 16772  011CF0  26D9               	addwf	fsr2l,f,c
 16773  011CF2  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 16774  011CF4  22DA               	addwfc	fsr2h,f,c
 16775  011CF6  CFDE F09D          	movff	postinc2,??_Port_SetType
 16776  011CFA  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 16777  011CFE  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 16778  011D02  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 16779  011D06  0E00               	movlw	0
 16780  011D08  6EDF               	movwf	indf2,c
 16781                           
 16782                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
 16783  011D0A  0100               	movlb	0	; () banked
 16784  011D0C  EE20 F004          	lfsr	2,4
 16785  011D10  D036               	goto	L21
 16786  011D12                     
 16787                           ; BSR set to: 0
 16788                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
 16789                           
 16790                           ; BSR set to: 0
 16791  011D12  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 16792  011D16  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 16793  011D1A  0E02               	movlw	2
 16794  011D1C  0100               	movlb	0	; () banked
 16795  011D1E  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
 16796  011D20  EC2A  F0AD         	call	_Port_CheckPortType	;wreg free
 16797  011D24  0100               	movlb	0	; () banked
 16798  011D26  6F9F               	movwf	Port_SetType@Output& (0+255),b
 16799  011D28  0100               	movlb	0	; () banked
 16800  011D2A  519F               	movf	Port_SetType@Output& (0+255),w,b
 16801  011D2C  A4D8               	btfss	status,2,c
 16802  011D2E  0012               	return	
 16803                           
 16804                           ; BSR set to: 0
 16805                           ;Port.c: 538: {
 16806                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
 16807  011D30  0100               	movlb	0	; () banked
 16808  011D32  EE20 F002          	lfsr	2,2
 16809  011D36  519A               	movf	Port_SetType@pInput& (0+255),w,b
 16810  011D38  26D9               	addwf	fsr2l,f,c
 16811  011D3A  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 16812  011D3C  22DA               	addwfc	fsr2h,f,c
 16813  011D3E  CFDE F09D          	movff	postinc2,??_Port_SetType
 16814  011D42  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 16815  011D46  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 16816  011D4A  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 16817  011D4E  0EFF               	movlw	255
 16818  011D50  6EDF               	movwf	indf2,c
 16819                           
 16820                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
 16821  011D52  0100               	movlb	0	; () banked
 16822  011D54  EE20 F004          	lfsr	2,4
 16823  011D58  D7AA               	goto	L11
 16824  011D5A                     
 16825                           ; BSR set to: 0
 16826                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
 16827                           
 16828                           ; BSR set to: 0
 16829  011D5A  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 16830  011D5E  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 16831  011D62  0E00               	movlw	0
 16832  011D64  0100               	movlb	0	; () banked
 16833  011D66  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
 16834  011D68  EC2A  F0AD         	call	_Port_CheckPortType	;wreg free
 16835  011D6C  0100               	movlb	0	; () banked
 16836  011D6E  6F9F               	movwf	Port_SetType@Output& (0+255),b
 16837  011D70  0100               	movlb	0	; () banked
 16838  011D72  519F               	movf	Port_SetType@Output& (0+255),w,b
 16839  011D74  A4D8               	btfss	status,2,c
 16840  011D76  0012               	return	
 16841                           
 16842                           ; BSR set to: 0
 16843                           ;Port.c: 549: {
 16844                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
 16845  011D78  0100               	movlb	0	; () banked
 16846  011D7A  EE20 F002          	lfsr	2,2
 16847  011D7E                     L21:
 16848  011D7E  519A               	movf	Port_SetType@pInput& (0+255),w,b
 16849  011D80  26D9               	addwf	fsr2l,f,c
 16850  011D82  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 16851  011D84  22DA               	addwfc	fsr2h,f,c
 16852  011D86  CFDE F09D          	movff	postinc2,??_Port_SetType
 16853  011D8A  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 16854  011D8E  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 16855  011D92  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 16856  011D96  0E00               	movlw	0
 16857  011D98                     L10:
 16858  011D98  6EDF               	movwf	indf2,c
 16859                           
 16860                           ;Port.c: 552: }
 16861  011D9A  D00E               	goto	l511
 16862  011D9C                     l509:
 16863                           
 16864                           ; BSR set to: 0
 16865                           
 16866                           ; BSR set to: 0
 16867  011D9C  0100               	movlb	0	; () banked
 16868  011D9E  519C               	movf	Port_SetType@pType& (0+255),w,b
 16869                           
 16870                           ; Switch size 1, requested type "space"
 16871                           ; Number of cases is 4, Range of values is 0 to 3
 16872                           ; switch strategies available:
 16873                           ; Name         Instructions Cycles
 16874                           ; simple_byte           13     7 (average)
 16875                           ;	Chosen strategy is simple_byte
 16876  011DA0  0A00               	xorlw	0	; case 0
 16877  011DA2  B4D8               	btfsc	status,2,c
 16878  011DA4  D781               	goto	l510
 16879  011DA6  0A01               	xorlw	1	; case 1
 16880  011DA8  B4D8               	btfsc	status,2,c
 16881  011DAA  D78F               	goto	l512
 16882  011DAC  0A03               	xorlw	3	; case 2
 16883  011DAE  B4D8               	btfsc	status,2,c
 16884  011DB0  D7B0               	goto	l516
 16885  011DB2  0A01               	xorlw	1	; case 3
 16886  011DB4  B4D8               	btfsc	status,2,c
 16887  011DB6  D7D1               	goto	l519
 16888  011DB8                     l511:
 16889                           
 16890                           ; BSR set to: 0
 16891                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
 16892                           
 16893                           ; BSR set to: 0
 16894  011DB8  0E08               	movlw	8
 16895  011DBA  0100               	movlb	0	; () banked
 16896  011DBC  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 16897  011DBE  0100               	movlb	0	; () banked
 16898  011DC0  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 16899  011DC2  0E00               	movlw	0
 16900  011DC4  0100               	movlb	0	; () banked
 16901  011DC6  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 16902  011DC8  0100               	movlb	0	; () banked
 16903  011DCA  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16904  011DCC  0E00               	movlw	0
 16905  011DCE  0100               	movlb	0	; () banked
 16906  011DD0  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 16907  011DD2  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 16908  011DD6  ECB9  F0AD         	call	_Word_SetPair	;wreg free
 16909                           
 16910                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
 16911  011DDA  0E08               	movlw	8
 16912  011DDC  0100               	movlb	0	; () banked
 16913  011DDE  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 16914  011DE0  0100               	movlb	0	; () banked
 16915  011DE2  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 16916  011DE4  0E00               	movlw	0
 16917  011DE6  0100               	movlb	0	; () banked
 16918  011DE8  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 16919  011DEA  0100               	movlb	0	; () banked
 16920  011DEC  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16921  011DEE  0E01               	movlw	1
 16922  011DF0  0100               	movlb	0	; () banked
 16923  011DF2  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 16924  011DF4  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 16925  011DF8  ECB9  F0AD         	call	_Word_SetPair	;wreg free
 16926                           
 16927                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
 16928  011DFC  0E08               	movlw	8
 16929  011DFE  0100               	movlb	0	; () banked
 16930  011E00  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 16931  011E02  0100               	movlb	0	; () banked
 16932  011E04  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 16933  011E06  0E00               	movlw	0
 16934  011E08  0100               	movlb	0	; () banked
 16935  011E0A  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 16936  011E0C  0100               	movlb	0	; () banked
 16937  011E0E  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16938  011E10  0E02               	movlw	2
 16939  011E12  0100               	movlb	0	; () banked
 16940  011E14  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 16941  011E16  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 16942  011E1A  ECB9  F0AD         	call	_Word_SetPair	;wreg free
 16943                           
 16944                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
 16945  011E1E  0E08               	movlw	8
 16946  011E20  0100               	movlb	0	; () banked
 16947  011E22  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 16948  011E24  0100               	movlb	0	; () banked
 16949  011E26  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 16950  011E28  0E00               	movlw	0
 16951  011E2A  0100               	movlb	0	; () banked
 16952  011E2C  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 16953  011E2E  0100               	movlb	0	; () banked
 16954  011E30  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16955  011E32  0E03               	movlw	3
 16956  011E34  0100               	movlb	0	; () banked
 16957  011E36  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 16958  011E38  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 16959  011E3C  ECB9  F0AD         	call	_Word_SetPair	;wreg free
 16960                           
 16961                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
 16962  011E40  0E08               	movlw	8
 16963  011E42  0100               	movlb	0	; () banked
 16964  011E44  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 16965  011E46  0100               	movlb	0	; () banked
 16966  011E48  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 16967  011E4A  0E00               	movlw	0
 16968  011E4C  0100               	movlb	0	; () banked
 16969  011E4E  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 16970  011E50  0100               	movlb	0	; () banked
 16971  011E52  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16972  011E54  0E04               	movlw	4
 16973  011E56  0100               	movlb	0	; () banked
 16974  011E58  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 16975  011E5A  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 16976  011E5E  ECB9  F0AD         	call	_Word_SetPair	;wreg free
 16977                           
 16978                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
 16979  011E62  0E08               	movlw	8
 16980  011E64  0100               	movlb	0	; () banked
 16981  011E66  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 16982  011E68  0100               	movlb	0	; () banked
 16983  011E6A  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 16984  011E6C  0E00               	movlw	0
 16985  011E6E  0100               	movlb	0	; () banked
 16986  011E70  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 16987  011E72  0100               	movlb	0	; () banked
 16988  011E74  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16989  011E76  0E05               	movlw	5
 16990  011E78  0100               	movlb	0	; () banked
 16991  011E7A  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 16992  011E7C  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 16993  011E80  ECB9  F0AD         	call	_Word_SetPair	;wreg free
 16994                           
 16995                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
 16996  011E84  0E08               	movlw	8
 16997  011E86  0100               	movlb	0	; () banked
 16998  011E88  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 16999  011E8A  0100               	movlb	0	; () banked
 17000  011E8C  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 17001  011E8E  0E00               	movlw	0
 17002  011E90  0100               	movlb	0	; () banked
 17003  011E92  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 17004  011E94  0100               	movlb	0	; () banked
 17005  011E96  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 17006  011E98  0E06               	movlw	6
 17007  011E9A  0100               	movlb	0	; () banked
 17008  011E9C  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 17009  011E9E  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 17010  011EA2  ECB9  F0AD         	call	_Word_SetPair	;wreg free
 17011                           
 17012                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
 17013  011EA6  0E08               	movlw	8
 17014  011EA8  0100               	movlb	0	; () banked
 17015  011EAA  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 17016  011EAC  0100               	movlb	0	; () banked
 17017  011EAE  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 17018  011EB0  0E00               	movlw	0
 17019  011EB2  0100               	movlb	0	; () banked
 17020  011EB4  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 17021  011EB6  0100               	movlb	0	; () banked
 17022  011EB8  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 17023  011EBA  0E07               	movlw	7
 17024  011EBC  0100               	movlb	0	; () banked
 17025  011EBE  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 17026  011EC0  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 17027  011EC4  ECB9  F0AD         	call	_Word_SetPair	;wreg free
 17028  011EC8  0012               	return	
 17029  011ECA                     __end_of_Port_SetType:
 17030                           	opt stack 0
 17031                           tosu	equ	0xFFF
 17032                           tosh	equ	0xFFE
 17033                           tosl	equ	0xFFD
 17034                           pclath	equ	0xFFA
 17035                           tblptru	equ	0xFF8
 17036                           tblptrh	equ	0xFF7
 17037                           tblptrl	equ	0xFF6
 17038                           tablat	equ	0xFF5
 17039                           prodh	equ	0xFF4
 17040                           prodl	equ	0xFF3
 17041                           intcon	equ	0xFF2
 17042                           postinc0	equ	0xFEE
 17043                           wreg	equ	0xFE8
 17044                           indf1	equ	0xFE7
 17045                           postdec1	equ	0xFE5
 17046                           fsr1h	equ	0xFE2
 17047                           fsr1l	equ	0xFE1
 17048                           indf2	equ	0xFDF
 17049                           postinc2	equ	0xFDE
 17050                           postdec2	equ	0xFDD
 17051                           plusw2	equ	0xFDB
 17052                           fsr2h	equ	0xFDA
 17053                           fsr2l	equ	0xFD9
 17054                           status	equ	0xFD8
 17055                           
 17056 ;; *************** function _Port_CheckPortType *****************
 17057 ;; Defined at:
 17058 ;;		line 138 in file "Library/Port.c"
 17059 ;; Parameters:    Size  Location     Type
 17060 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 17061 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 17062 ;;		 -> PortD(10), PortC(10), PortF(10), 
 17063 ;;  pDrive          1   56[BANK0 ] enum E6469
 17064 ;; Auto vars:     Size  Location     Type
 17065 ;;  Output          1   57[BANK0 ] enum E6475
 17066 ;; Return value:  Size  Location     Type
 17067 ;;                  1    wreg      enum E6475
 17068 ;; Registers used:
 17069 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17070 ;; Tracked objects:
 17071 ;;		On entry : 0/0
 17072 ;;		On exit  : 0/0
 17073 ;;		Unchanged: 0/0
 17074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17075 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17076 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17078 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17079 ;;Total ram usage:        4 bytes
 17080 ;; Hardware stack levels used:    1
 17081 ;; Hardware stack levels required when called:   13
 17082 ;; This function calls:
 17083 ;;		_Port_CheckQuadType
 17084 ;; This function is called by:
 17085 ;;		_Port_SetType
 17086 ;; This function uses a non-reentrant model
 17087 ;;
 17088                           
 17089                           	psect	text74
 17090  015A54                     __ptext74:
 17091                           	opt stack 0
 17092  015A54                     _Port_CheckPortType:
 17093                           	opt stack 14
 17094                           
 17095                           ;Port.c: 140: ePinError Output = ePinErrorState;
 17096                           
 17097                           ;incstack = 0
 17098  015A54  0E05               	movlw	5
 17099  015A56  0100               	movlb	0	; () banked
 17100  015A58  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
 17101                           
 17102                           ; BSR set to: 0
 17103                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
 17104  015A5A  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 17105  015A5E  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 17106  015A62  0E00               	movlw	0
 17107  015A64  0100               	movlb	0	; () banked
 17108  015A66  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 17109  015A68  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 17110  015A6C  ECB8  F0AB         	call	_Port_CheckQuadType	;wreg free
 17111  015A70  0100               	movlb	0	; () banked
 17112  015A72  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
 17113  015A74  0100               	movlb	0	; () banked
 17114  015A76  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
 17115  015A78  A4D8               	btfss	status,2,c
 17116  015A7A  D00D               	goto	l397
 17117                           
 17118                           ; BSR set to: 0
 17119                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
 17120  015A7C  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 17121  015A80  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 17122  015A84  0E01               	movlw	1
 17123  015A86  0100               	movlb	0	; () banked
 17124  015A88  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 17125  015A8A  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 17126  015A8E  ECB8  F0AB         	call	_Port_CheckQuadType	;wreg free
 17127  015A92  0100               	movlb	0	; () banked
 17128  015A94  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
 17129  015A96                     l397:
 17130                           
 17131                           ; BSR set to: 0
 17132                           ;Port.c: 146: return Output;
 17133                           
 17134                           ; BSR set to: 0
 17135  015A96  0100               	movlb	0	; () banked
 17136  015A98  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
 17137  015A9A  0012               	return	
 17138  015A9C                     __end_of_Port_CheckPortType:
 17139                           	opt stack 0
 17140                           tosu	equ	0xFFF
 17141                           tosh	equ	0xFFE
 17142                           tosl	equ	0xFFD
 17143                           pclath	equ	0xFFA
 17144                           tblptru	equ	0xFF8
 17145                           tblptrh	equ	0xFF7
 17146                           tblptrl	equ	0xFF6
 17147                           tablat	equ	0xFF5
 17148                           prodh	equ	0xFF4
 17149                           prodl	equ	0xFF3
 17150                           intcon	equ	0xFF2
 17151                           postinc0	equ	0xFEE
 17152                           wreg	equ	0xFE8
 17153                           indf1	equ	0xFE7
 17154                           postdec1	equ	0xFE5
 17155                           fsr1h	equ	0xFE2
 17156                           fsr1l	equ	0xFE1
 17157                           indf2	equ	0xFDF
 17158                           postinc2	equ	0xFDE
 17159                           postdec2	equ	0xFDD
 17160                           plusw2	equ	0xFDB
 17161                           fsr2h	equ	0xFDA
 17162                           fsr2l	equ	0xFD9
 17163                           status	equ	0xFD8
 17164                           
 17165 ;; *************** function _Port_Set *****************
 17166 ;; Defined at:
 17167 ;;		line 570 in file "Library/Port.c"
 17168 ;; Parameters:    Size  Location     Type
 17169 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 17170 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 17171 ;;		 -> PortD(10), PortC(10), PortF(10), 
 17172 ;;  pValue          1   17[BANK0 ] unsigned char 
 17173 ;; Auto vars:     Size  Location     Type
 17174 ;;  TypeActual      2   36[BANK0 ] unsigned short 
 17175 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
 17176 ;;  Type            1   38[BANK0 ] enum E6795
 17177 ;; Return value:  Size  Location     Type
 17178 ;;                  1    wreg      void 
 17179 ;; Registers used:
 17180 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17181 ;; Tracked objects:
 17182 ;;		On entry : 0/0
 17183 ;;		On exit  : 0/0
 17184 ;;		Unchanged: 0/0
 17185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17186 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17187 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17188 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17189 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17190 ;;Total ram usage:       24 bytes
 17191 ;; Hardware stack levels used:    1
 17192 ;; Hardware stack levels required when called:   10
 17193 ;; This function calls:
 17194 ;;		_Byte_SetByte
 17195 ;;		_Word_GetPair
 17196 ;; This function is called by:
 17197 ;;		_Port_Init
 17198 ;;		_Port_Toggle
 17199 ;; This function uses a non-reentrant model
 17200 ;;
 17201                           
 17202                           	psect	text75
 17203  01109C                     __ptext75:
 17204                           	opt stack 0
 17205  01109C                     _Port_Set:
 17206                           	opt stack 17
 17207                           
 17208                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
 17209                           
 17210                           ; BSR set to: 0
 17211                           ;incstack = 0
 17212  01109C  0E08               	movlw	8
 17213  01109E  0100               	movlb	0	; () banked
 17214  0110A0  256F               	addwf	Port_Set@pInput& (0+255),w,b
 17215  0110A2  0100               	movlb	0	; () banked
 17216  0110A4  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 17217  0110A6  0E00               	movlw	0
 17218  0110A8  0100               	movlb	0	; () banked
 17219  0110AA  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 17220  0110AC  0100               	movlb	0	; () banked
 17221  0110AE  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 17222  0110B0  0E00               	movlw	0
 17223  0110B2  0100               	movlb	0	; () banked
 17224  0110B4  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 17225  0110B6  ECDF  F0AE         	call	_Word_GetPair	;wreg free
 17226  0110BA  0100               	movlb	0	; () banked
 17227  0110BC  6F86               	movwf	Port_Set@Type& (0+255),b
 17228                           
 17229                           ; BSR set to: 0
 17230                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
 17231  0110BE  0100               	movlb	0	; () banked
 17232  0110C0  5186               	movf	Port_Set@Type& (0+255),w,b
 17233  0110C2  0100               	movlb	0	; () banked
 17234  0110C4  6F72               	movwf	??_Port_Set& (0+255),b
 17235  0110C6  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 17236  0110C8  0E0E               	movlw	14
 17237  0110CA                     u9385:
 17238  0110CA  90D8               	bcf	status,0,c
 17239  0110CC  0100               	movlb	0	; () banked
 17240  0110CE  3772               	rlcf	??_Port_Set& (0+255),f,b
 17241  0110D0  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 17242  0110D2  2EE8               	decfsz	wreg,f,c
 17243  0110D4  D7FA               	goto	u9385
 17244  0110D6  0100               	movlb	0	; () banked
 17245  0110D8  5186               	movf	Port_Set@Type& (0+255),w,b
 17246  0110DA  0100               	movlb	0	; () banked
 17247  0110DC  6F74               	movwf	(??_Port_Set+2)& (0+255),b
 17248  0110DE  6B75               	clrf	(??_Port_Set+3)& (0+255),b
 17249  0110E0  0E0C               	movlw	12
 17250  0110E2                     u9395:
 17251  0110E2  90D8               	bcf	status,0,c
 17252  0110E4  0100               	movlb	0	; () banked
 17253  0110E6  3774               	rlcf	(??_Port_Set+2)& (0+255),f,b
 17254  0110E8  3775               	rlcf	(??_Port_Set+3)& (0+255),f,b
 17255  0110EA  2EE8               	decfsz	wreg,f,c
 17256  0110EC  D7FA               	goto	u9395
 17257  0110EE  0100               	movlb	0	; () banked
 17258  0110F0  5186               	movf	Port_Set@Type& (0+255),w,b
 17259  0110F2  0100               	movlb	0	; () banked
 17260  0110F4  6F76               	movwf	(??_Port_Set+4)& (0+255),b
 17261  0110F6  6B77               	clrf	(??_Port_Set+5)& (0+255),b
 17262  0110F8  0E0A               	movlw	10
 17263  0110FA                     u9405:
 17264  0110FA  90D8               	bcf	status,0,c
 17265  0110FC  0100               	movlb	0	; () banked
 17266  0110FE  3776               	rlcf	(??_Port_Set+4)& (0+255),f,b
 17267  011100  3777               	rlcf	(??_Port_Set+5)& (0+255),f,b
 17268  011102  2EE8               	decfsz	wreg,f,c
 17269  011104  D7FA               	goto	u9405
 17270  011106  0100               	movlb	0	; () banked
 17271  011108  5186               	movf	Port_Set@Type& (0+255),w,b
 17272  01110A  0100               	movlb	0	; () banked
 17273  01110C  6F79               	movwf	(??_Port_Set+7)& (0+255),b
 17274  01110E  6B78               	clrf	(??_Port_Set+6)& (0+255),b
 17275  011110  0100               	movlb	0	; () banked
 17276  011112  5186               	movf	Port_Set@Type& (0+255),w,b
 17277  011114  0100               	movlb	0	; () banked
 17278  011116  6F7A               	movwf	(??_Port_Set+8)& (0+255),b
 17279  011118  6B7B               	clrf	(??_Port_Set+9)& (0+255),b
 17280  01111A  0E06               	movlw	6
 17281  01111C                     u9415:
 17282  01111C  90D8               	bcf	status,0,c
 17283  01111E  0100               	movlb	0	; () banked
 17284  011120  377A               	rlcf	(??_Port_Set+8)& (0+255),f,b
 17285  011122  377B               	rlcf	(??_Port_Set+9)& (0+255),f,b
 17286  011124  2EE8               	decfsz	wreg,f,c
 17287  011126  D7FA               	goto	u9415
 17288  011128  0100               	movlb	0	; () banked
 17289  01112A  5186               	movf	Port_Set@Type& (0+255),w,b
 17290  01112C  0100               	movlb	0	; () banked
 17291  01112E  6F7C               	movwf	(??_Port_Set+10)& (0+255),b
 17292  011130  6B7D               	clrf	(??_Port_Set+11)& (0+255),b
 17293  011132  0100               	movlb	0	; () banked
 17294  011134  3B7C               	swapf	(??_Port_Set+10)& (0+255),f,b
 17295  011136  3B7D               	swapf	(??_Port_Set+11)& (0+255),f,b
 17296  011138  0EF0               	movlw	240
 17297  01113A  177D               	andwf	(??_Port_Set+11)& (0+255),f,b
 17298  01113C  517C               	movf	(??_Port_Set+10)& (0+255),w,b
 17299  01113E  0B0F               	andlw	15
 17300  011140  137D               	iorwf	(??_Port_Set+11)& (0+255),f,b
 17301  011142  0EF0               	movlw	240
 17302  011144  177C               	andwf	(??_Port_Set+10)& (0+255),f,b
 17303  011146  0100               	movlb	0	; () banked
 17304  011148  5186               	movf	Port_Set@Type& (0+255),w,b
 17305  01114A  0100               	movlb	0	; () banked
 17306  01114C  6F7E               	movwf	(??_Port_Set+12)& (0+255),b
 17307  01114E  6B7F               	clrf	(??_Port_Set+13)& (0+255),b
 17308  011150  0100               	movlb	0	; () banked
 17309  011152  90D8               	bcf	status,0,c
 17310  011154  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
 17311  011156  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
 17312  011158  0100               	movlb	0	; () banked
 17313  01115A  90D8               	bcf	status,0,c
 17314  01115C  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
 17315  01115E  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
 17316  011160  0100               	movlb	0	; () banked
 17317  011162  5186               	movf	Port_Set@Type& (0+255),w,b
 17318  011164  0100               	movlb	0	; () banked
 17319  011166  6F80               	movwf	(??_Port_Set+14)& (0+255),b
 17320  011168  6B81               	clrf	(??_Port_Set+15)& (0+255),b
 17321  01116A  0100               	movlb	0	; () banked
 17322  01116C  517E               	movf	(??_Port_Set+12)& (0+255),w,b
 17323  01116E  0100               	movlb	0	; () banked
 17324  011170  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 17325  011172  0100               	movlb	0	; () banked
 17326  011174  517F               	movf	(??_Port_Set+13)& (0+255),w,b
 17327  011176  0100               	movlb	0	; () banked
 17328  011178  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 17329  01117A  0100               	movlb	0	; () banked
 17330  01117C  517C               	movf	(??_Port_Set+10)& (0+255),w,b
 17331  01117E  0100               	movlb	0	; () banked
 17332  011180  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 17333  011182  0100               	movlb	0	; () banked
 17334  011184  517D               	movf	(??_Port_Set+11)& (0+255),w,b
 17335  011186  0100               	movlb	0	; () banked
 17336  011188  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 17337  01118A  0100               	movlb	0	; () banked
 17338  01118C  517A               	movf	(??_Port_Set+8)& (0+255),w,b
 17339  01118E  0100               	movlb	0	; () banked
 17340  011190  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 17341  011192  0100               	movlb	0	; () banked
 17342  011194  517B               	movf	(??_Port_Set+9)& (0+255),w,b
 17343  011196  0100               	movlb	0	; () banked
 17344  011198  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 17345  01119A  0100               	movlb	0	; () banked
 17346  01119C  5178               	movf	(??_Port_Set+6)& (0+255),w,b
 17347  01119E  0100               	movlb	0	; () banked
 17348  0111A0  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 17349  0111A2  0100               	movlb	0	; () banked
 17350  0111A4  5179               	movf	(??_Port_Set+7)& (0+255),w,b
 17351  0111A6  0100               	movlb	0	; () banked
 17352  0111A8  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 17353  0111AA  0100               	movlb	0	; () banked
 17354  0111AC  5176               	movf	(??_Port_Set+4)& (0+255),w,b
 17355  0111AE  0100               	movlb	0	; () banked
 17356  0111B0  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 17357  0111B2  0100               	movlb	0	; () banked
 17358  0111B4  5177               	movf	(??_Port_Set+5)& (0+255),w,b
 17359  0111B6  0100               	movlb	0	; () banked
 17360  0111B8  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 17361  0111BA  0100               	movlb	0	; () banked
 17362  0111BC  5174               	movf	(??_Port_Set+2)& (0+255),w,b
 17363  0111BE  0100               	movlb	0	; () banked
 17364  0111C0  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 17365  0111C2  0100               	movlb	0	; () banked
 17366  0111C4  5175               	movf	(??_Port_Set+3)& (0+255),w,b
 17367  0111C6  0100               	movlb	0	; () banked
 17368  0111C8  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 17369  0111CA  0100               	movlb	0	; () banked
 17370  0111CC  5172               	movf	??_Port_Set& (0+255),w,b
 17371  0111CE  0100               	movlb	0	; () banked
 17372  0111D0  1180               	iorwf	(??_Port_Set+14)& (0+255),w,b
 17373  0111D2  0100               	movlb	0	; () banked
 17374  0111D4  6F82               	movwf	Port_Set@TypeRequired& (0+255),b
 17375  0111D6  0100               	movlb	0	; () banked
 17376  0111D8  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 17377  0111DA  0100               	movlb	0	; () banked
 17378  0111DC  1181               	iorwf	(??_Port_Set+15)& (0+255),w,b
 17379  0111DE  0100               	movlb	0	; () banked
 17380  0111E0  6F83               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
 17381                           
 17382                           ; BSR set to: 0
 17383                           ;Port.c: 574: UINT16 TypeActual = Type;
 17384  0111E2  C086  F084         	movff	Port_Set@Type,Port_Set@TypeActual
 17385  0111E6  0100               	movlb	0	; () banked
 17386  0111E8  6B85               	clrf	(Port_Set@TypeActual+1)& (0+255),b
 17387                           
 17388                           ; BSR set to: 0
 17389                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
 17390  0111EA  0E08               	movlw	8
 17391  0111EC  0100               	movlb	0	; () banked
 17392  0111EE  256F               	addwf	Port_Set@pInput& (0+255),w,b
 17393  0111F0  0100               	movlb	0	; () banked
 17394  0111F2  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 17395  0111F4  0E00               	movlw	0
 17396  0111F6  0100               	movlb	0	; () banked
 17397  0111F8  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 17398  0111FA  0100               	movlb	0	; () banked
 17399  0111FC  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 17400  0111FE  0E01               	movlw	1
 17401  011200  0100               	movlb	0	; () banked
 17402  011202  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 17403  011204  ECDF  F0AE         	call	_Word_GetPair	;wreg free
 17404  011208  0100               	movlb	0	; () banked
 17405  01120A  6F72               	movwf	??_Port_Set& (0+255),b
 17406  01120C  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 17407  01120E  0100               	movlb	0	; () banked
 17408  011210  90D8               	bcf	status,0,c
 17409  011212  3772               	rlcf	??_Port_Set& (0+255),f,b
 17410  011214  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 17411  011216  0100               	movlb	0	; () banked
 17412  011218  90D8               	bcf	status,0,c
 17413  01121A  3772               	rlcf	??_Port_Set& (0+255),f,b
 17414  01121C  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 17415  01121E  0100               	movlb	0	; () banked
 17416  011220  5172               	movf	??_Port_Set& (0+255),w,b
 17417  011222  0100               	movlb	0	; () banked
 17418  011224  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 17419  011226  0100               	movlb	0	; () banked
 17420  011228  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 17421  01122A  0100               	movlb	0	; () banked
 17422  01122C  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 17423                           
 17424                           ; BSR set to: 0
 17425                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
 17426  01122E  0E08               	movlw	8
 17427  011230  0100               	movlb	0	; () banked
 17428  011232  256F               	addwf	Port_Set@pInput& (0+255),w,b
 17429  011234  0100               	movlb	0	; () banked
 17430  011236  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 17431  011238  0E00               	movlw	0
 17432  01123A  0100               	movlb	0	; () banked
 17433  01123C  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 17434  01123E  0100               	movlb	0	; () banked
 17435  011240  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 17436  011242  0E02               	movlw	2
 17437  011244  0100               	movlb	0	; () banked
 17438  011246  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 17439  011248  ECDF  F0AE         	call	_Word_GetPair	;wreg free
 17440  01124C  0100               	movlb	0	; () banked
 17441  01124E  6F72               	movwf	??_Port_Set& (0+255),b
 17442  011250  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 17443  011252  0100               	movlb	0	; () banked
 17444  011254  3B72               	swapf	??_Port_Set& (0+255),f,b
 17445  011256  3B73               	swapf	(??_Port_Set+1)& (0+255),f,b
 17446  011258  0EF0               	movlw	240
 17447  01125A  1773               	andwf	(??_Port_Set+1)& (0+255),f,b
 17448  01125C  5172               	movf	??_Port_Set& (0+255),w,b
 17449  01125E  0B0F               	andlw	15
 17450  011260  1373               	iorwf	(??_Port_Set+1)& (0+255),f,b
 17451  011262  0EF0               	movlw	240
 17452  011264  1772               	andwf	??_Port_Set& (0+255),f,b
 17453  011266  0100               	movlb	0	; () banked
 17454  011268  5172               	movf	??_Port_Set& (0+255),w,b
 17455  01126A  0100               	movlb	0	; () banked
 17456  01126C  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 17457  01126E  0100               	movlb	0	; () banked
 17458  011270  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 17459  011272  0100               	movlb	0	; () banked
 17460  011274  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 17461                           
 17462                           ; BSR set to: 0
 17463                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
 17464  011276  0E08               	movlw	8
 17465  011278  0100               	movlb	0	; () banked
 17466  01127A  256F               	addwf	Port_Set@pInput& (0+255),w,b
 17467  01127C  0100               	movlb	0	; () banked
 17468  01127E  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 17469  011280  0E00               	movlw	0
 17470  011282  0100               	movlb	0	; () banked
 17471  011284  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 17472  011286  0100               	movlb	0	; () banked
 17473  011288  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 17474  01128A  0E03               	movlw	3
 17475  01128C  0100               	movlb	0	; () banked
 17476  01128E  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 17477  011290  ECDF  F0AE         	call	_Word_GetPair	;wreg free
 17478  011294  0100               	movlb	0	; () banked
 17479  011296  6F72               	movwf	??_Port_Set& (0+255),b
 17480  011298  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 17481  01129A  0E06               	movlw	6
 17482  01129C                     u9425:
 17483  01129C  90D8               	bcf	status,0,c
 17484  01129E  0100               	movlb	0	; () banked
 17485  0112A0  3772               	rlcf	??_Port_Set& (0+255),f,b
 17486  0112A2  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 17487  0112A4  2EE8               	decfsz	wreg,f,c
 17488  0112A6  D7FA               	goto	u9425
 17489  0112A8  0100               	movlb	0	; () banked
 17490  0112AA  5172               	movf	??_Port_Set& (0+255),w,b
 17491  0112AC  0100               	movlb	0	; () banked
 17492  0112AE  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 17493  0112B0  0100               	movlb	0	; () banked
 17494  0112B2  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 17495  0112B4  0100               	movlb	0	; () banked
 17496  0112B6  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 17497                           
 17498                           ; BSR set to: 0
 17499                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
 17500  0112B8  0E08               	movlw	8
 17501  0112BA  0100               	movlb	0	; () banked
 17502  0112BC  256F               	addwf	Port_Set@pInput& (0+255),w,b
 17503  0112BE  0100               	movlb	0	; () banked
 17504  0112C0  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 17505  0112C2  0E00               	movlw	0
 17506  0112C4  0100               	movlb	0	; () banked
 17507  0112C6  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 17508  0112C8  0100               	movlb	0	; () banked
 17509  0112CA  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 17510  0112CC  0E04               	movlw	4
 17511  0112CE  0100               	movlb	0	; () banked
 17512  0112D0  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 17513  0112D2  ECDF  F0AE         	call	_Word_GetPair	;wreg free
 17514  0112D6  0100               	movlb	0	; () banked
 17515  0112D8  6F72               	movwf	??_Port_Set& (0+255),b
 17516  0112DA  0100               	movlb	0	; () banked
 17517  0112DC  5172               	movf	??_Port_Set& (0+255),w,b
 17518  0112DE  0100               	movlb	0	; () banked
 17519  0112E0  6F74               	movwf	(??_Port_Set+2)& (0+255),b
 17520  0112E2  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 17521  0112E4  0100               	movlb	0	; () banked
 17522  0112E6  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 17523  0112E8  0100               	movlb	0	; () banked
 17524  0112EA  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 17525  0112EC  0100               	movlb	0	; () banked
 17526  0112EE  5174               	movf	(??_Port_Set+2)& (0+255),w,b
 17527  0112F0  0100               	movlb	0	; () banked
 17528  0112F2  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 17529                           
 17530                           ; BSR set to: 0
 17531                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
 17532  0112F4  0E08               	movlw	8
 17533  0112F6  0100               	movlb	0	; () banked
 17534  0112F8  256F               	addwf	Port_Set@pInput& (0+255),w,b
 17535  0112FA  0100               	movlb	0	; () banked
 17536  0112FC  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 17537  0112FE  0E00               	movlw	0
 17538  011300  0100               	movlb	0	; () banked
 17539  011302  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 17540  011304  0100               	movlb	0	; () banked
 17541  011306  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 17542  011308  0E05               	movlw	5
 17543  01130A  0100               	movlb	0	; () banked
 17544  01130C  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 17545  01130E  ECDF  F0AE         	call	_Word_GetPair	;wreg free
 17546  011312  0100               	movlb	0	; () banked
 17547  011314  6F72               	movwf	??_Port_Set& (0+255),b
 17548  011316  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 17549  011318  0E0A               	movlw	10
 17550  01131A                     u9435:
 17551  01131A  90D8               	bcf	status,0,c
 17552  01131C  0100               	movlb	0	; () banked
 17553  01131E  3772               	rlcf	??_Port_Set& (0+255),f,b
 17554  011320  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 17555  011322  2EE8               	decfsz	wreg,f,c
 17556  011324  D7FA               	goto	u9435
 17557  011326  0100               	movlb	0	; () banked
 17558  011328  5172               	movf	??_Port_Set& (0+255),w,b
 17559  01132A  0100               	movlb	0	; () banked
 17560  01132C  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 17561  01132E  0100               	movlb	0	; () banked
 17562  011330  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 17563  011332  0100               	movlb	0	; () banked
 17564  011334  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 17565                           
 17566                           ; BSR set to: 0
 17567                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
 17568  011336  0E08               	movlw	8
 17569  011338  0100               	movlb	0	; () banked
 17570  01133A  256F               	addwf	Port_Set@pInput& (0+255),w,b
 17571  01133C  0100               	movlb	0	; () banked
 17572  01133E  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 17573  011340  0E00               	movlw	0
 17574  011342  0100               	movlb	0	; () banked
 17575  011344  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 17576  011346  0100               	movlb	0	; () banked
 17577  011348  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 17578  01134A  0E06               	movlw	6
 17579  01134C  0100               	movlb	0	; () banked
 17580  01134E  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 17581  011350  ECDF  F0AE         	call	_Word_GetPair	;wreg free
 17582  011354  0100               	movlb	0	; () banked
 17583  011356  6F72               	movwf	??_Port_Set& (0+255),b
 17584  011358  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 17585  01135A  0E0C               	movlw	12
 17586  01135C                     u9445:
 17587  01135C  90D8               	bcf	status,0,c
 17588  01135E  0100               	movlb	0	; () banked
 17589  011360  3772               	rlcf	??_Port_Set& (0+255),f,b
 17590  011362  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 17591  011364  2EE8               	decfsz	wreg,f,c
 17592  011366  D7FA               	goto	u9445
 17593  011368  0100               	movlb	0	; () banked
 17594  01136A  5172               	movf	??_Port_Set& (0+255),w,b
 17595  01136C  0100               	movlb	0	; () banked
 17596  01136E  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 17597  011370  0100               	movlb	0	; () banked
 17598  011372  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 17599  011374  0100               	movlb	0	; () banked
 17600  011376  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 17601                           
 17602                           ; BSR set to: 0
 17603                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
 17604  011378  0E08               	movlw	8
 17605  01137A  0100               	movlb	0	; () banked
 17606  01137C  256F               	addwf	Port_Set@pInput& (0+255),w,b
 17607  01137E  0100               	movlb	0	; () banked
 17608  011380  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 17609  011382  0E00               	movlw	0
 17610  011384  0100               	movlb	0	; () banked
 17611  011386  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 17612  011388  0100               	movlb	0	; () banked
 17613  01138A  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 17614  01138C  0E07               	movlw	7
 17615  01138E  0100               	movlb	0	; () banked
 17616  011390  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 17617  011392  ECDF  F0AE         	call	_Word_GetPair	;wreg free
 17618  011396  0100               	movlb	0	; () banked
 17619  011398  6F72               	movwf	??_Port_Set& (0+255),b
 17620  01139A  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 17621  01139C  0E0E               	movlw	14
 17622  01139E                     u9455:
 17623  01139E  90D8               	bcf	status,0,c
 17624  0113A0  0100               	movlb	0	; () banked
 17625  0113A2  3772               	rlcf	??_Port_Set& (0+255),f,b
 17626  0113A4  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 17627  0113A6  2EE8               	decfsz	wreg,f,c
 17628  0113A8  D7FA               	goto	u9455
 17629  0113AA  0100               	movlb	0	; () banked
 17630  0113AC  5172               	movf	??_Port_Set& (0+255),w,b
 17631  0113AE  0100               	movlb	0	; () banked
 17632  0113B0  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 17633  0113B2  0100               	movlb	0	; () banked
 17634  0113B4  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 17635  0113B6  0100               	movlb	0	; () banked
 17636  0113B8  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 17637                           
 17638                           ;Port.c: 584: if (TypeRequired == TypeActual)
 17639  0113BA  0100               	movlb	0	; () banked
 17640  0113BC  5184               	movf	Port_Set@TypeActual& (0+255),w,b
 17641  0113BE  0100               	movlb	0	; () banked
 17642  0113C0  1982               	xorwf	Port_Set@TypeRequired& (0+255),w,b
 17643  0113C2  E148               	bnz	l528
 17644  0113C4  0100               	movlb	0	; () banked
 17645  0113C6  5185               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
 17646  0113C8  0100               	movlb	0	; () banked
 17647  0113CA  1983               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
 17648  0113CC  A4D8               	btfss	status,2,c
 17649  0113CE  0012               	return	
 17650  0113D0  D032               	goto	l526
 17651  0113D2                     
 17652                           ; BSR set to: 0
 17653                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
 17654                           
 17655                           ; BSR set to: 0
 17656  0113D2  0100               	movlb	0	; () banked
 17657  0113D4  EE20 F002          	lfsr	2,2
 17658  0113D8  516F               	movf	Port_Set@pInput& (0+255),w,b
 17659  0113DA  26D9               	addwf	fsr2l,f,c
 17660  0113DC  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
 17661  0113DE  22DA               	addwfc	fsr2h,f,c
 17662  0113E0  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
 17663  0113E4  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
 17664  0113E8  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
 17665  0113EC  EC1C  F0B2         	call	_Byte_SetByte	;wreg free
 17666                           
 17667                           ;Port.c: 594: break;
 17668  0113F0  0012               	return	
 17669  0113F2                     
 17670                           ;Port.c: 597: pValue = ~pValue;
 17671  0113F2  0100               	movlb	0	; () banked
 17672  0113F4  1F71               	comf	Port_Set@pValue& (0+255),f,b
 17673                           
 17674                           ; BSR set to: 0
 17675                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
 17676  0113F6  0100               	movlb	0	; () banked
 17677  0113F8  EE20 F002          	lfsr	2,2
 17678  0113FC  516F               	movf	Port_Set@pInput& (0+255),w,b
 17679  0113FE  26D9               	addwf	fsr2l,f,c
 17680  011400  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
 17681  011402  22DA               	addwfc	fsr2h,f,c
 17682  011404  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
 17683  011408  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
 17684  01140C  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
 17685  011410  EC1C  F0B2         	call	_Byte_SetByte	;wreg free
 17686                           
 17687                           ;Port.c: 599: break;
 17688  011414  0012               	return	
 17689  011416                     
 17690                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
 17691  011416  0100               	movlb	0	; () banked
 17692  011418  EE20 F004          	lfsr	2,4
 17693  01141C  516F               	movf	Port_Set@pInput& (0+255),w,b
 17694  01141E  26D9               	addwf	fsr2l,f,c
 17695  011420  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
 17696  011422  22DA               	addwfc	fsr2h,f,c
 17697  011424  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
 17698  011428  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
 17699  01142C  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
 17700  011430  EC1C  F0B2         	call	_Byte_SetByte	;wreg free
 17701                           
 17702                           ;Port.c: 606: }
 17703                           
 17704                           ;Port.c: 605: break;
 17705                           
 17706                           ;Port.c: 604: default:
 17707                           
 17708                           ;Port.c: 603: break;
 17709  011434  0012               	return	
 17710  011436                     l526:
 17711  011436  0100               	movlb	0	; () banked
 17712  011438  5186               	movf	Port_Set@Type& (0+255),w,b
 17713                           
 17714                           ; Switch size 1, requested type "space"
 17715                           ; Number of cases is 4, Range of values is 0 to 3
 17716                           ; switch strategies available:
 17717                           ; Name         Instructions Cycles
 17718                           ; simple_byte           13     7 (average)
 17719                           ;	Chosen strategy is simple_byte
 17720  01143A  0A00               	xorlw	0	; case 0
 17721  01143C  B4D8               	btfsc	status,2,c
 17722  01143E  0012               	return	
 17723  011440  0A01               	xorlw	1	; case 1
 17724  011442  B4D8               	btfsc	status,2,c
 17725  011444  D7C6               	goto	l529
 17726  011446  0A03               	xorlw	3	; case 2
 17727  011448  B4D8               	btfsc	status,2,c
 17728  01144A  D7D3               	goto	l531
 17729  01144C  0A01               	xorlw	1	; case 3
 17730  01144E  A4D8               	btfss	status,2,c
 17731                           
 17732                           ; BSR set to: 0
 17733                           
 17734                           ; BSR set to: 0
 17735                           ;Port.c: 607: }
 17736  011450  0012               	return	
 17737  011452  D7E1               	goto	l532
 17738  011454                     l528:
 17739  011454  0012               	return		;funcret
 17740  011456                     __end_of_Port_Set:
 17741                           	opt stack 0
 17742                           tosu	equ	0xFFF
 17743                           tosh	equ	0xFFE
 17744                           tosl	equ	0xFFD
 17745                           pclath	equ	0xFFA
 17746                           tblptru	equ	0xFF8
 17747                           tblptrh	equ	0xFF7
 17748                           tblptrl	equ	0xFF6
 17749                           tablat	equ	0xFF5
 17750                           prodh	equ	0xFF4
 17751                           prodl	equ	0xFF3
 17752                           intcon	equ	0xFF2
 17753                           postinc0	equ	0xFEE
 17754                           wreg	equ	0xFE8
 17755                           indf1	equ	0xFE7
 17756                           postdec1	equ	0xFE5
 17757                           fsr1h	equ	0xFE2
 17758                           fsr1l	equ	0xFE1
 17759                           indf2	equ	0xFDF
 17760                           postinc2	equ	0xFDE
 17761                           postdec2	equ	0xFDD
 17762                           plusw2	equ	0xFDB
 17763                           fsr2h	equ	0xFDA
 17764                           fsr2l	equ	0xFD9
 17765                           status	equ	0xFD8
 17766                           
 17767 ;; *************** function _Byte_SetByte *****************
 17768 ;; Defined at:
 17769 ;;		line 110 in file "Library/Types.c"
 17770 ;; Parameters:    Size  Location     Type
 17771 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 17772 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
 17773 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 17774 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 17775 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 17776 ;;		 -> NULL(0), 
 17777 ;;  pValue          1    2[BANK0 ] unsigned char 
 17778 ;; Auto vars:     Size  Location     Type
 17779 ;;		None
 17780 ;; Return value:  Size  Location     Type
 17781 ;;                  1    wreg      void 
 17782 ;; Registers used:
 17783 ;;		fsr2l, fsr2h
 17784 ;; Tracked objects:
 17785 ;;		On entry : 0/0
 17786 ;;		On exit  : 0/0
 17787 ;;		Unchanged: 0/0
 17788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17789 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17792 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17793 ;;Total ram usage:        3 bytes
 17794 ;; Hardware stack levels used:    1
 17795 ;; Hardware stack levels required when called:    7
 17796 ;; This function calls:
 17797 ;;		Nothing
 17798 ;; This function is called by:
 17799 ;;		_Port_Set
 17800 ;;		_I2C_Init
 17801 ;; This function uses a non-reentrant model
 17802 ;;
 17803                           
 17804                           	psect	text76
 17805  016438                     __ptext76:
 17806                           	opt stack 0
 17807  016438                     _Byte_SetByte:
 17808                           	opt stack 19
 17809                           
 17810                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
 17811                           
 17812                           ;incstack = 0
 17813  016438  C060  FFD9         	movff	Byte_SetByte@pInput,fsr2l
 17814  01643C  C061  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
 17815  016440  C062  FFDF         	movff	Byte_SetByte@pValue,indf2
 17816  016444  0012               	return		;funcret
 17817  016446                     __end_of_Byte_SetByte:
 17818                           	opt stack 0
 17819                           tosu	equ	0xFFF
 17820                           tosh	equ	0xFFE
 17821                           tosl	equ	0xFFD
 17822                           pclath	equ	0xFFA
 17823                           tblptru	equ	0xFF8
 17824                           tblptrh	equ	0xFF7
 17825                           tblptrl	equ	0xFF6
 17826                           tablat	equ	0xFF5
 17827                           prodh	equ	0xFF4
 17828                           prodl	equ	0xFF3
 17829                           intcon	equ	0xFF2
 17830                           postinc0	equ	0xFEE
 17831                           wreg	equ	0xFE8
 17832                           indf1	equ	0xFE7
 17833                           postdec1	equ	0xFE5
 17834                           fsr1h	equ	0xFE2
 17835                           fsr1l	equ	0xFE1
 17836                           indf2	equ	0xFDF
 17837                           postinc2	equ	0xFDE
 17838                           postdec2	equ	0xFDD
 17839                           plusw2	equ	0xFDB
 17840                           fsr2h	equ	0xFDA
 17841                           fsr2l	equ	0xFD9
 17842                           status	equ	0xFD8
 17843                           
 17844 ;; *************** function _GetPortTRIS *****************
 17845 ;; Defined at:
 17846 ;;		line 67 in file "Library/Port.c"
 17847 ;; Parameters:    Size  Location     Type
 17848 ;;  pInput          1    wreg     enum E6786
 17849 ;; Auto vars:     Size  Location     Type
 17850 ;;  pInput          1    2[BANK0 ] enum E6786
 17851 ;; Return value:  Size  Location     Type
 17852 ;;                  2    0[BANK0 ] PTR struct Byte
 17853 ;; Registers used:
 17854 ;;		wreg, status,2, status,0
 17855 ;; Tracked objects:
 17856 ;;		On entry : 0/0
 17857 ;;		On exit  : 0/0
 17858 ;;		Unchanged: 0/0
 17859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17860 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17861 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17863 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17864 ;;Total ram usage:        3 bytes
 17865 ;; Hardware stack levels used:    1
 17866 ;; Hardware stack levels required when called:    7
 17867 ;; This function calls:
 17868 ;;		Nothing
 17869 ;; This function is called by:
 17870 ;;		_Port_Init
 17871 ;; This function uses a non-reentrant model
 17872 ;;
 17873                           
 17874                           	psect	text77
 17875  0146BA                     __ptext77:
 17876                           	opt stack 0
 17877  0146BA                     _GetPortTRIS:
 17878                           	opt stack 20
 17879                           
 17880                           ;incstack = 0
 17881                           ;GetPortTRIS@pInput stored from wreg
 17882  0146BA  0100               	movlb	0	; () banked
 17883  0146BC  6F62               	movwf	GetPortTRIS@pInput& (0+255),b
 17884                           
 17885                           ;Port.c: 69: switch (pInput)
 17886  0146BE  D038               	goto	l363
 17887  0146C0                     
 17888                           ;Port.c: 72: return (BytePtr)&TRISA;
 17889  0146C0  0E92               	movlw	146
 17890  0146C2  0100               	movlb	0	; () banked
 17891  0146C4  6F60               	movwf	?_GetPortTRIS& (0+255),b
 17892  0146C6  0E0F               	movlw	15
 17893  0146C8  0100               	movlb	0	; () banked
 17894  0146CA  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17895                           
 17896                           ; BSR set to: 0
 17897  0146CC  0012               	return	
 17898  0146CE                     
 17899                           ; BSR set to: 0
 17900                           ;Port.c: 74: return (BytePtr)&TRISB;
 17901                           
 17902                           ; BSR set to: 0
 17903  0146CE  0E93               	movlw	147
 17904  0146D0  0100               	movlb	0	; () banked
 17905  0146D2  6F60               	movwf	?_GetPortTRIS& (0+255),b
 17906  0146D4  0E0F               	movlw	15
 17907  0146D6  0100               	movlb	0	; () banked
 17908  0146D8  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17909                           
 17910                           ; BSR set to: 0
 17911  0146DA  0012               	return	
 17912  0146DC                     
 17913                           ; BSR set to: 0
 17914                           ;Port.c: 76: return (BytePtr)&TRISC;
 17915                           
 17916                           ; BSR set to: 0
 17917  0146DC  0E94               	movlw	148
 17918  0146DE  0100               	movlb	0	; () banked
 17919  0146E0  6F60               	movwf	?_GetPortTRIS& (0+255),b
 17920  0146E2  0E0F               	movlw	15
 17921  0146E4  0100               	movlb	0	; () banked
 17922  0146E6  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17923                           
 17924                           ; BSR set to: 0
 17925  0146E8  0012               	return	
 17926  0146EA                     
 17927                           ; BSR set to: 0
 17928                           ;Port.c: 78: return (BytePtr)&TRISD;
 17929                           
 17930                           ; BSR set to: 0
 17931  0146EA  0E95               	movlw	149
 17932  0146EC  0100               	movlb	0	; () banked
 17933  0146EE  6F60               	movwf	?_GetPortTRIS& (0+255),b
 17934  0146F0  0E0F               	movlw	15
 17935  0146F2  0100               	movlb	0	; () banked
 17936  0146F4  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17937                           
 17938                           ; BSR set to: 0
 17939  0146F6  0012               	return	
 17940  0146F8                     
 17941                           ; BSR set to: 0
 17942                           ;Port.c: 80: return (BytePtr)&TRISE;
 17943                           
 17944                           ; BSR set to: 0
 17945  0146F8  0E96               	movlw	150
 17946  0146FA  0100               	movlb	0	; () banked
 17947  0146FC  6F60               	movwf	?_GetPortTRIS& (0+255),b
 17948  0146FE  0E0F               	movlw	15
 17949  014700  0100               	movlb	0	; () banked
 17950  014702  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17951                           
 17952                           ; BSR set to: 0
 17953  014704  0012               	return	
 17954  014706                     
 17955                           ; BSR set to: 0
 17956                           ;Port.c: 82: return (BytePtr)&TRISF;
 17957                           
 17958                           ; BSR set to: 0
 17959  014706  0E97               	movlw	151
 17960  014708  0100               	movlb	0	; () banked
 17961  01470A  6F60               	movwf	?_GetPortTRIS& (0+255),b
 17962  01470C  0E0F               	movlw	15
 17963  01470E  0100               	movlb	0	; () banked
 17964  014710  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17965                           
 17966                           ; BSR set to: 0
 17967  014712  0012               	return	
 17968  014714                     
 17969                           ; BSR set to: 0
 17970                           ;Port.c: 84: return (BytePtr)&TRISG;
 17971                           
 17972                           ; BSR set to: 0
 17973  014714  0E98               	movlw	152
 17974  014716  0100               	movlb	0	; () banked
 17975  014718  6F60               	movwf	?_GetPortTRIS& (0+255),b
 17976  01471A  0E0F               	movlw	15
 17977  01471C  0100               	movlb	0	; () banked
 17978  01471E  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17979                           
 17980                           ; BSR set to: 0
 17981  014720  0012               	return	
 17982  014722                     
 17983                           ; BSR set to: 0
 17984                           ;Port.c: 86: return (void*)0;
 17985                           
 17986                           ; BSR set to: 0
 17987  014722  0E00               	movlw	0
 17988  014724  0100               	movlb	0	; () banked
 17989  014726  6F60               	movwf	?_GetPortTRIS& (0+255),b
 17990  014728  0E00               	movlw	0
 17991  01472A  0100               	movlb	0	; () banked
 17992  01472C  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17993                           
 17994                           ; BSR set to: 0
 17995                           ;Port.c: 87: }
 17996                           
 17997                           ; BSR set to: 0
 17998  01472E  0012               	return	
 17999  014730                     l363:
 18000                           
 18001                           ; BSR set to: 0
 18002  014730  0100               	movlb	0	; () banked
 18003  014732  5162               	movf	GetPortTRIS@pInput& (0+255),w,b
 18004                           
 18005                           ; Switch size 1, requested type "space"
 18006                           ; Number of cases is 7, Range of values is 0 to 6
 18007                           ; switch strategies available:
 18008                           ; Name         Instructions Cycles
 18009                           ; simple_byte           22    12 (average)
 18010                           ;	Chosen strategy is simple_byte
 18011  014734  0A00               	xorlw	0	; case 0
 18012  014736  B4D8               	btfsc	status,2,c
 18013  014738  D7C3               	goto	l364
 18014  01473A  0A01               	xorlw	1	; case 1
 18015  01473C  B4D8               	btfsc	status,2,c
 18016  01473E  D7C7               	goto	l366
 18017  014740  0A03               	xorlw	3	; case 2
 18018  014742  B4D8               	btfsc	status,2,c
 18019  014744  D7CB               	goto	l367
 18020  014746  0A01               	xorlw	1	; case 3
 18021  014748  B4D8               	btfsc	status,2,c
 18022  01474A  D7CF               	goto	l368
 18023  01474C  0A07               	xorlw	7	; case 4
 18024  01474E  B4D8               	btfsc	status,2,c
 18025  014750  D7D3               	goto	l369
 18026  014752  0A01               	xorlw	1	; case 5
 18027  014754  B4D8               	btfsc	status,2,c
 18028  014756  D7D7               	goto	l370
 18029  014758  0A03               	xorlw	3	; case 6
 18030  01475A  B4D8               	btfsc	status,2,c
 18031  01475C  D7DB               	goto	l371
 18032  01475E  D7E1               	goto	l372
 18033  014760                     __end_of_GetPortTRIS:
 18034                           	opt stack 0
 18035                           tosu	equ	0xFFF
 18036                           tosh	equ	0xFFE
 18037                           tosl	equ	0xFFD
 18038                           pclath	equ	0xFFA
 18039                           tblptru	equ	0xFF8
 18040                           tblptrh	equ	0xFF7
 18041                           tblptrl	equ	0xFF6
 18042                           tablat	equ	0xFF5
 18043                           prodh	equ	0xFF4
 18044                           prodl	equ	0xFF3
 18045                           intcon	equ	0xFF2
 18046                           postinc0	equ	0xFEE
 18047                           wreg	equ	0xFE8
 18048                           indf1	equ	0xFE7
 18049                           postdec1	equ	0xFE5
 18050                           fsr1h	equ	0xFE2
 18051                           fsr1l	equ	0xFE1
 18052                           indf2	equ	0xFDF
 18053                           postinc2	equ	0xFDE
 18054                           postdec2	equ	0xFDD
 18055                           plusw2	equ	0xFDB
 18056                           fsr2h	equ	0xFDA
 18057                           fsr2l	equ	0xFD9
 18058                           status	equ	0xFD8
 18059                           
 18060 ;; *************** function _GetPortProperties *****************
 18061 ;; Defined at:
 18062 ;;		line 21 in file "Library/Port.c"
 18063 ;; Parameters:    Size  Location     Type
 18064 ;;  pInput          1    wreg     enum E6786
 18065 ;; Auto vars:     Size  Location     Type
 18066 ;;  pInput          1    2[BANK0 ] enum E6786
 18067 ;; Return value:  Size  Location     Type
 18068 ;;                  2    0[BANK0 ] PTR struct PortProperty
 18069 ;; Registers used:
 18070 ;;		wreg, status,2, status,0
 18071 ;; Tracked objects:
 18072 ;;		On entry : 0/0
 18073 ;;		On exit  : 0/0
 18074 ;;		Unchanged: 0/0
 18075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18076 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18077 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18079 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18080 ;;Total ram usage:        3 bytes
 18081 ;; Hardware stack levels used:    1
 18082 ;; Hardware stack levels required when called:    7
 18083 ;; This function calls:
 18084 ;;		Nothing
 18085 ;; This function is called by:
 18086 ;;		_Port_Init
 18087 ;; This function uses a non-reentrant model
 18088 ;;
 18089                           
 18090                           	psect	text78
 18091  014760                     __ptext78:
 18092                           	opt stack 0
 18093  014760                     _GetPortProperties:
 18094                           	opt stack 20
 18095                           
 18096                           ; BSR set to: 0
 18097                           ;incstack = 0
 18098                           ;GetPortProperties@pInput stored from wreg
 18099  014760  0100               	movlb	0	; () banked
 18100  014762  6F62               	movwf	GetPortProperties@pInput& (0+255),b
 18101                           
 18102                           ;Port.c: 23: switch (pInput)
 18103  014764  D038               	goto	l337
 18104  014766                     
 18105                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
 18106  014766  0E6F               	movlw	low _PortA_Property
 18107  014768  0100               	movlb	0	; () banked
 18108  01476A  6F60               	movwf	?_GetPortProperties& (0+255),b
 18109  01476C  0EFF               	movlw	high _PortA_Property
 18110  01476E  0100               	movlb	0	; () banked
 18111  014770  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 18112                           
 18113                           ; BSR set to: 0
 18114  014772  0012               	return	
 18115  014774                     
 18116                           ; BSR set to: 0
 18117                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
 18118                           
 18119                           ; BSR set to: 0
 18120  014774  0E6D               	movlw	low _PortB_Property
 18121  014776  0100               	movlb	0	; () banked
 18122  014778  6F60               	movwf	?_GetPortProperties& (0+255),b
 18123  01477A  0EFF               	movlw	high _PortB_Property
 18124  01477C  0100               	movlb	0	; () banked
 18125  01477E  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 18126                           
 18127                           ; BSR set to: 0
 18128  014780  0012               	return	
 18129  014782                     
 18130                           ; BSR set to: 0
 18131                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
 18132                           
 18133                           ; BSR set to: 0
 18134  014782  0E6B               	movlw	low _PortC_Property
 18135  014784  0100               	movlb	0	; () banked
 18136  014786  6F60               	movwf	?_GetPortProperties& (0+255),b
 18137  014788  0EFF               	movlw	high _PortC_Property
 18138  01478A  0100               	movlb	0	; () banked
 18139  01478C  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 18140                           
 18141                           ; BSR set to: 0
 18142  01478E  0012               	return	
 18143  014790                     
 18144                           ; BSR set to: 0
 18145                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
 18146                           
 18147                           ; BSR set to: 0
 18148  014790  0E69               	movlw	low _PortD_Property
 18149  014792  0100               	movlb	0	; () banked
 18150  014794  6F60               	movwf	?_GetPortProperties& (0+255),b
 18151  014796  0EFF               	movlw	high _PortD_Property
 18152  014798  0100               	movlb	0	; () banked
 18153  01479A  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 18154                           
 18155                           ; BSR set to: 0
 18156  01479C  0012               	return	
 18157  01479E                     
 18158                           ; BSR set to: 0
 18159                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
 18160                           
 18161                           ; BSR set to: 0
 18162  01479E  0E67               	movlw	low _PortE_Property
 18163  0147A0  0100               	movlb	0	; () banked
 18164  0147A2  6F60               	movwf	?_GetPortProperties& (0+255),b
 18165  0147A4  0EFF               	movlw	high _PortE_Property
 18166  0147A6  0100               	movlb	0	; () banked
 18167  0147A8  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 18168                           
 18169                           ; BSR set to: 0
 18170  0147AA  0012               	return	
 18171  0147AC                     
 18172                           ; BSR set to: 0
 18173                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
 18174                           
 18175                           ; BSR set to: 0
 18176  0147AC  0E65               	movlw	low _PortF_Property
 18177  0147AE  0100               	movlb	0	; () banked
 18178  0147B0  6F60               	movwf	?_GetPortProperties& (0+255),b
 18179  0147B2  0EFF               	movlw	high _PortF_Property
 18180  0147B4  0100               	movlb	0	; () banked
 18181  0147B6  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 18182                           
 18183                           ; BSR set to: 0
 18184  0147B8  0012               	return	
 18185  0147BA                     
 18186                           ; BSR set to: 0
 18187                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
 18188                           
 18189                           ; BSR set to: 0
 18190  0147BA  0E63               	movlw	low _PortG_Property
 18191  0147BC  0100               	movlb	0	; () banked
 18192  0147BE  6F60               	movwf	?_GetPortProperties& (0+255),b
 18193  0147C0  0EFF               	movlw	high _PortG_Property
 18194  0147C2  0100               	movlb	0	; () banked
 18195  0147C4  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 18196                           
 18197                           ; BSR set to: 0
 18198  0147C6  0012               	return	
 18199  0147C8                     
 18200                           ; BSR set to: 0
 18201                           ;Port.c: 40: return (void*)0;
 18202                           
 18203                           ; BSR set to: 0
 18204  0147C8  0E00               	movlw	0
 18205  0147CA  0100               	movlb	0	; () banked
 18206  0147CC  6F60               	movwf	?_GetPortProperties& (0+255),b
 18207  0147CE  0E00               	movlw	0
 18208  0147D0  0100               	movlb	0	; () banked
 18209  0147D2  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 18210                           
 18211                           ; BSR set to: 0
 18212                           ;Port.c: 41: }
 18213                           
 18214                           ; BSR set to: 0
 18215  0147D4  0012               	return	
 18216  0147D6                     l337:
 18217                           
 18218                           ; BSR set to: 0
 18219  0147D6  0100               	movlb	0	; () banked
 18220  0147D8  5162               	movf	GetPortProperties@pInput& (0+255),w,b
 18221                           
 18222                           ; Switch size 1, requested type "space"
 18223                           ; Number of cases is 7, Range of values is 0 to 6
 18224                           ; switch strategies available:
 18225                           ; Name         Instructions Cycles
 18226                           ; simple_byte           22    12 (average)
 18227                           ;	Chosen strategy is simple_byte
 18228  0147DA  0A00               	xorlw	0	; case 0
 18229  0147DC  B4D8               	btfsc	status,2,c
 18230  0147DE  D7C3               	goto	l338
 18231  0147E0  0A01               	xorlw	1	; case 1
 18232  0147E2  B4D8               	btfsc	status,2,c
 18233  0147E4  D7C7               	goto	l340
 18234  0147E6  0A03               	xorlw	3	; case 2
 18235  0147E8  B4D8               	btfsc	status,2,c
 18236  0147EA  D7CB               	goto	l341
 18237  0147EC  0A01               	xorlw	1	; case 3
 18238  0147EE  B4D8               	btfsc	status,2,c
 18239  0147F0  D7CF               	goto	l342
 18240  0147F2  0A07               	xorlw	7	; case 4
 18241  0147F4  B4D8               	btfsc	status,2,c
 18242  0147F6  D7D3               	goto	l343
 18243  0147F8  0A01               	xorlw	1	; case 5
 18244  0147FA  B4D8               	btfsc	status,2,c
 18245  0147FC  D7D7               	goto	l344
 18246  0147FE  0A03               	xorlw	3	; case 6
 18247  014800  B4D8               	btfsc	status,2,c
 18248  014802  D7DB               	goto	l345
 18249  014804  D7E1               	goto	l346
 18250  014806                     __end_of_GetPortProperties:
 18251                           	opt stack 0
 18252                           tosu	equ	0xFFF
 18253                           tosh	equ	0xFFE
 18254                           tosl	equ	0xFFD
 18255                           pclath	equ	0xFFA
 18256                           tblptru	equ	0xFF8
 18257                           tblptrh	equ	0xFF7
 18258                           tblptrl	equ	0xFF6
 18259                           tablat	equ	0xFF5
 18260                           prodh	equ	0xFF4
 18261                           prodl	equ	0xFF3
 18262                           intcon	equ	0xFF2
 18263                           postinc0	equ	0xFEE
 18264                           wreg	equ	0xFE8
 18265                           indf1	equ	0xFE7
 18266                           postdec1	equ	0xFE5
 18267                           fsr1h	equ	0xFE2
 18268                           fsr1l	equ	0xFE1
 18269                           indf2	equ	0xFDF
 18270                           postinc2	equ	0xFDE
 18271                           postdec2	equ	0xFDD
 18272                           plusw2	equ	0xFDB
 18273                           fsr2h	equ	0xFDA
 18274                           fsr2l	equ	0xFD9
 18275                           status	equ	0xFD8
 18276                           
 18277 ;; *************** function _GetPortPORT *****************
 18278 ;; Defined at:
 18279 ;;		line 44 in file "Library/Port.c"
 18280 ;; Parameters:    Size  Location     Type
 18281 ;;  pInput          1    wreg     enum E6786
 18282 ;; Auto vars:     Size  Location     Type
 18283 ;;  pInput          1    2[BANK0 ] enum E6786
 18284 ;; Return value:  Size  Location     Type
 18285 ;;                  2    0[BANK0 ] PTR struct Byte
 18286 ;; Registers used:
 18287 ;;		wreg, status,2, status,0
 18288 ;; Tracked objects:
 18289 ;;		On entry : 0/0
 18290 ;;		On exit  : 0/0
 18291 ;;		Unchanged: 0/0
 18292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18293 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18294 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18296 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18297 ;;Total ram usage:        3 bytes
 18298 ;; Hardware stack levels used:    1
 18299 ;; Hardware stack levels required when called:    7
 18300 ;; This function calls:
 18301 ;;		Nothing
 18302 ;; This function is called by:
 18303 ;;		_Port_Init
 18304 ;; This function uses a non-reentrant model
 18305 ;;
 18306                           
 18307                           	psect	text79
 18308  014806                     __ptext79:
 18309                           	opt stack 0
 18310  014806                     _GetPortPORT:
 18311                           	opt stack 20
 18312                           
 18313                           ; BSR set to: 0
 18314                           ;incstack = 0
 18315                           ;GetPortPORT@pInput stored from wreg
 18316  014806  0100               	movlb	0	; () banked
 18317  014808  6F62               	movwf	GetPortPORT@pInput& (0+255),b
 18318                           
 18319                           ;Port.c: 46: switch (pInput)
 18320  01480A  D038               	goto	l350
 18321  01480C                     
 18322                           ;Port.c: 49: return (BytePtr)&PORTA;
 18323  01480C  0E80               	movlw	128
 18324  01480E  0100               	movlb	0	; () banked
 18325  014810  6F60               	movwf	?_GetPortPORT& (0+255),b
 18326  014812  0E0F               	movlw	15
 18327  014814  0100               	movlb	0	; () banked
 18328  014816  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 18329                           
 18330                           ; BSR set to: 0
 18331  014818  0012               	return	
 18332  01481A                     
 18333                           ; BSR set to: 0
 18334                           ;Port.c: 51: return (BytePtr)&PORTB;
 18335                           
 18336                           ; BSR set to: 0
 18337  01481A  0E81               	movlw	129
 18338  01481C  0100               	movlb	0	; () banked
 18339  01481E  6F60               	movwf	?_GetPortPORT& (0+255),b
 18340  014820  0E0F               	movlw	15
 18341  014822  0100               	movlb	0	; () banked
 18342  014824  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 18343                           
 18344                           ; BSR set to: 0
 18345  014826  0012               	return	
 18346  014828                     
 18347                           ; BSR set to: 0
 18348                           ;Port.c: 53: return (BytePtr)&PORTC;
 18349                           
 18350                           ; BSR set to: 0
 18351  014828  0E82               	movlw	130
 18352  01482A  0100               	movlb	0	; () banked
 18353  01482C  6F60               	movwf	?_GetPortPORT& (0+255),b
 18354  01482E  0E0F               	movlw	15
 18355  014830  0100               	movlb	0	; () banked
 18356  014832  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 18357                           
 18358                           ; BSR set to: 0
 18359  014834  0012               	return	
 18360  014836                     
 18361                           ; BSR set to: 0
 18362                           ;Port.c: 55: return (BytePtr)&PORTD;
 18363                           
 18364                           ; BSR set to: 0
 18365  014836  0E83               	movlw	131
 18366  014838  0100               	movlb	0	; () banked
 18367  01483A  6F60               	movwf	?_GetPortPORT& (0+255),b
 18368  01483C  0E0F               	movlw	15
 18369  01483E  0100               	movlb	0	; () banked
 18370  014840  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 18371                           
 18372                           ; BSR set to: 0
 18373  014842  0012               	return	
 18374  014844                     
 18375                           ; BSR set to: 0
 18376                           ;Port.c: 57: return (BytePtr)&PORTE;
 18377                           
 18378                           ; BSR set to: 0
 18379  014844  0E84               	movlw	132
 18380  014846  0100               	movlb	0	; () banked
 18381  014848  6F60               	movwf	?_GetPortPORT& (0+255),b
 18382  01484A  0E0F               	movlw	15
 18383  01484C  0100               	movlb	0	; () banked
 18384  01484E  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 18385                           
 18386                           ; BSR set to: 0
 18387  014850  0012               	return	
 18388  014852                     
 18389                           ; BSR set to: 0
 18390                           ;Port.c: 59: return (BytePtr)&PORTF;
 18391                           
 18392                           ; BSR set to: 0
 18393  014852  0E85               	movlw	133
 18394  014854  0100               	movlb	0	; () banked
 18395  014856  6F60               	movwf	?_GetPortPORT& (0+255),b
 18396  014858  0E0F               	movlw	15
 18397  01485A  0100               	movlb	0	; () banked
 18398  01485C  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 18399                           
 18400                           ; BSR set to: 0
 18401  01485E  0012               	return	
 18402  014860                     
 18403                           ; BSR set to: 0
 18404                           ;Port.c: 61: return (BytePtr)&PORTG;
 18405                           
 18406                           ; BSR set to: 0
 18407  014860  0E86               	movlw	134
 18408  014862  0100               	movlb	0	; () banked
 18409  014864  6F60               	movwf	?_GetPortPORT& (0+255),b
 18410  014866  0E0F               	movlw	15
 18411  014868  0100               	movlb	0	; () banked
 18412  01486A  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 18413                           
 18414                           ; BSR set to: 0
 18415  01486C  0012               	return	
 18416  01486E                     
 18417                           ; BSR set to: 0
 18418                           ;Port.c: 63: return (void*)0;
 18419                           
 18420                           ; BSR set to: 0
 18421  01486E  0E00               	movlw	0
 18422  014870  0100               	movlb	0	; () banked
 18423  014872  6F60               	movwf	?_GetPortPORT& (0+255),b
 18424  014874  0E00               	movlw	0
 18425  014876  0100               	movlb	0	; () banked
 18426  014878  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 18427                           
 18428                           ; BSR set to: 0
 18429                           ;Port.c: 64: }
 18430                           
 18431                           ; BSR set to: 0
 18432  01487A  0012               	return	
 18433  01487C                     l350:
 18434                           
 18435                           ; BSR set to: 0
 18436  01487C  0100               	movlb	0	; () banked
 18437  01487E  5162               	movf	GetPortPORT@pInput& (0+255),w,b
 18438                           
 18439                           ; Switch size 1, requested type "space"
 18440                           ; Number of cases is 7, Range of values is 0 to 6
 18441                           ; switch strategies available:
 18442                           ; Name         Instructions Cycles
 18443                           ; simple_byte           22    12 (average)
 18444                           ;	Chosen strategy is simple_byte
 18445  014880  0A00               	xorlw	0	; case 0
 18446  014882  B4D8               	btfsc	status,2,c
 18447  014884  D7C3               	goto	l351
 18448  014886  0A01               	xorlw	1	; case 1
 18449  014888  B4D8               	btfsc	status,2,c
 18450  01488A  D7C7               	goto	l353
 18451  01488C  0A03               	xorlw	3	; case 2
 18452  01488E  B4D8               	btfsc	status,2,c
 18453  014890  D7CB               	goto	l354
 18454  014892  0A01               	xorlw	1	; case 3
 18455  014894  B4D8               	btfsc	status,2,c
 18456  014896  D7CF               	goto	l355
 18457  014898  0A07               	xorlw	7	; case 4
 18458  01489A  B4D8               	btfsc	status,2,c
 18459  01489C  D7D3               	goto	l356
 18460  01489E  0A01               	xorlw	1	; case 5
 18461  0148A0  B4D8               	btfsc	status,2,c
 18462  0148A2  D7D7               	goto	l357
 18463  0148A4  0A03               	xorlw	3	; case 6
 18464  0148A6  B4D8               	btfsc	status,2,c
 18465  0148A8  D7DB               	goto	l358
 18466  0148AA  D7E1               	goto	l359
 18467  0148AC                     __end_of_GetPortPORT:
 18468                           	opt stack 0
 18469                           tosu	equ	0xFFF
 18470                           tosh	equ	0xFFE
 18471                           tosl	equ	0xFFD
 18472                           pclath	equ	0xFFA
 18473                           tblptru	equ	0xFF8
 18474                           tblptrh	equ	0xFF7
 18475                           tblptrl	equ	0xFF6
 18476                           tablat	equ	0xFF5
 18477                           prodh	equ	0xFF4
 18478                           prodl	equ	0xFF3
 18479                           intcon	equ	0xFF2
 18480                           postinc0	equ	0xFEE
 18481                           wreg	equ	0xFE8
 18482                           indf1	equ	0xFE7
 18483                           postdec1	equ	0xFE5
 18484                           fsr1h	equ	0xFE2
 18485                           fsr1l	equ	0xFE1
 18486                           indf2	equ	0xFDF
 18487                           postinc2	equ	0xFDE
 18488                           postdec2	equ	0xFDD
 18489                           plusw2	equ	0xFDB
 18490                           fsr2h	equ	0xFDA
 18491                           fsr2l	equ	0xFD9
 18492                           status	equ	0xFD8
 18493                           
 18494 ;; *************** function _LED_Init *****************
 18495 ;; Defined at:
 18496 ;;		line 15 in file "Library/LED.c"
 18497 ;; Parameters:    Size  Location     Type
 18498 ;;  pLED            1    wreg     enum E6739
 18499 ;; Auto vars:     Size  Location     Type
 18500 ;;  pLED            1   45[BANK0 ] enum E6739
 18501 ;; Return value:  Size  Location     Type
 18502 ;;                  1    wreg      void 
 18503 ;; Registers used:
 18504 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18505 ;; Tracked objects:
 18506 ;;		On entry : 0/0
 18507 ;;		On exit  : 0/0
 18508 ;;		Unchanged: 0/0
 18509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18511 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18513 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18514 ;;Total ram usage:        1 bytes
 18515 ;; Hardware stack levels used:    1
 18516 ;; Hardware stack levels required when called:   12
 18517 ;; This function calls:
 18518 ;;		_LED_Set
 18519 ;;		_Port_SetPinType
 18520 ;; This function is called by:
 18521 ;;		_MXK_Init
 18522 ;; This function uses a non-reentrant model
 18523 ;;
 18524                           
 18525                           	psect	text80
 18526  0156B2                     __ptext80:
 18527                           	opt stack 0
 18528  0156B2                     _LED_Init:
 18529                           	opt stack 16
 18530                           
 18531                           ; BSR set to: 0
 18532                           ;incstack = 0
 18533                           ;LED_Init@pLED stored from wreg
 18534  0156B2  0100               	movlb	0	; () banked
 18535  0156B4  6F8D               	movwf	LED_Init@pLED& (0+255),b
 18536                           
 18537                           ;LED.c: 17: switch (pLED)
 18538  0156B6  D01E               	goto	l220
 18539  0156B8                     
 18540                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
 18541  0156B8  0EEA               	movlw	low _PortC
 18542  0156BA  0100               	movlb	0	; () banked
 18543  0156BC  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 18544  0156BE  0E00               	movlw	high _PortC
 18545  0156C0  0100               	movlb	0	; () banked
 18546  0156C2  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18547  0156C4  0E00               	movlw	0
 18548  0156C6  0100               	movlb	0	; () banked
 18549  0156C8  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 18550  0156CA  0E03               	movlw	3
 18551  0156CC  0100               	movlb	0	; () banked
 18552  0156CE  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 18553  0156D0  EC32  F093         	call	_Port_SetPinType	;wreg free
 18554                           
 18555                           ;LED.c: 21: break;
 18556  0156D4  D017               	goto	l222
 18557  0156D6                     
 18558                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
 18559  0156D6  0EEA               	movlw	low _PortC
 18560  0156D8  0100               	movlb	0	; () banked
 18561  0156DA  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 18562  0156DC  0E00               	movlw	high _PortC
 18563  0156DE  0100               	movlb	0	; () banked
 18564  0156E0  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18565  0156E2  0E01               	movlw	1
 18566  0156E4  0100               	movlb	0	; () banked
 18567  0156E6  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 18568  0156E8  0E03               	movlw	3
 18569  0156EA  0100               	movlb	0	; () banked
 18570  0156EC  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 18571  0156EE  EC32  F093         	call	_Port_SetPinType	;wreg free
 18572                           
 18573                           ;LED.c: 25: }
 18574                           
 18575                           ;LED.c: 24: break;
 18576  0156F2  D008               	goto	l222
 18577  0156F4                     l220:
 18578  0156F4  0100               	movlb	0	; () banked
 18579  0156F6  518D               	movf	LED_Init@pLED& (0+255),w,b
 18580                           
 18581                           ; Switch size 1, requested type "space"
 18582                           ; Number of cases is 2, Range of values is 0 to 1
 18583                           ; switch strategies available:
 18584                           ; Name         Instructions Cycles
 18585                           ; simple_byte            7     4 (average)
 18586                           ;	Chosen strategy is simple_byte
 18587  0156F8  0A00               	xorlw	0	; case 0
 18588  0156FA  B4D8               	btfsc	status,2,c
 18589  0156FC  D7DD               	goto	l221
 18590  0156FE  0A01               	xorlw	1	; case 1
 18591  015700  B4D8               	btfsc	status,2,c
 18592  015702  D7E9               	goto	l223
 18593  015704                     l222:
 18594                           
 18595                           ;LED.c: 26: LED_Set(pLED, 0);
 18596                           
 18597                           ; BSR set to: 0
 18598  015704  0E00               	movlw	0
 18599  015706  0100               	movlb	0	; () banked
 18600  015708  6F74               	movwf	LED_Set@pValue& (0+255),b
 18601  01570A  0100               	movlb	0	; () banked
 18602  01570C  518D               	movf	LED_Init@pLED& (0+255),w,b
 18603  01570E  EC8F  F0AC         	call	_LED_Set
 18604  015712  0012               	return		;funcret
 18605  015714                     __end_of_LED_Init:
 18606                           	opt stack 0
 18607                           tosu	equ	0xFFF
 18608                           tosh	equ	0xFFE
 18609                           tosl	equ	0xFFD
 18610                           pclath	equ	0xFFA
 18611                           tblptru	equ	0xFF8
 18612                           tblptrh	equ	0xFF7
 18613                           tblptrl	equ	0xFF6
 18614                           tablat	equ	0xFF5
 18615                           prodh	equ	0xFF4
 18616                           prodl	equ	0xFF3
 18617                           intcon	equ	0xFF2
 18618                           postinc0	equ	0xFEE
 18619                           wreg	equ	0xFE8
 18620                           indf1	equ	0xFE7
 18621                           postdec1	equ	0xFE5
 18622                           fsr1h	equ	0xFE2
 18623                           fsr1l	equ	0xFE1
 18624                           indf2	equ	0xFDF
 18625                           postinc2	equ	0xFDE
 18626                           postdec2	equ	0xFDD
 18627                           plusw2	equ	0xFDB
 18628                           fsr2h	equ	0xFDA
 18629                           fsr2l	equ	0xFD9
 18630                           status	equ	0xFD8
 18631                           
 18632 ;; *************** function _LED_Set *****************
 18633 ;; Defined at:
 18634 ;;		line 33 in file "Library/LED.c"
 18635 ;; Parameters:    Size  Location     Type
 18636 ;;  pLED            1    wreg     enum E6739
 18637 ;;  pValue          1   20[BANK0 ] unsigned char 
 18638 ;; Auto vars:     Size  Location     Type
 18639 ;;  pLED            1   21[BANK0 ] enum E6739
 18640 ;; Return value:  Size  Location     Type
 18641 ;;                  1    wreg      void 
 18642 ;; Registers used:
 18643 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18644 ;; Tracked objects:
 18645 ;;		On entry : 0/0
 18646 ;;		On exit  : 0/0
 18647 ;;		Unchanged: 0/0
 18648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18649 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18650 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18652 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18653 ;;Total ram usage:        2 bytes
 18654 ;; Hardware stack levels used:    1
 18655 ;; Hardware stack levels required when called:   11
 18656 ;; This function calls:
 18657 ;;		_Port_SetPin
 18658 ;; This function is called by:
 18659 ;;		_LED_Init
 18660 ;;		_SYSTEM_Initialize
 18661 ;; This function uses a non-reentrant model
 18662 ;;
 18663                           
 18664                           	psect	text81
 18665  01591E                     __ptext81:
 18666                           	opt stack 0
 18667  01591E                     _LED_Set:
 18668                           	opt stack 16
 18669                           
 18670                           ;incstack = 0
 18671                           ;LED_Set@pLED stored from wreg
 18672  01591E  0100               	movlb	0	; () banked
 18673  015920  6F75               	movwf	LED_Set@pLED& (0+255),b
 18674                           
 18675                           ;LED.c: 35: switch (pLED)
 18676  015922  D01C               	goto	l227
 18677  015924                     
 18678                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
 18679  015924  0EEA               	movlw	low _PortC
 18680  015926  0100               	movlb	0	; () banked
 18681  015928  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 18682  01592A  0E00               	movlw	high _PortC
 18683  01592C  0100               	movlb	0	; () banked
 18684  01592E  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 18685  015930  0E00               	movlw	0
 18686  015932  0100               	movlb	0	; () banked
 18687  015934  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 18688  015936  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
 18689  01593A  EC79  F09F         	call	_Port_SetPin	;wreg free
 18690                           
 18691                           ;LED.c: 39: break;
 18692  01593E  0012               	return	
 18693  015940                     
 18694                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
 18695  015940  0EEA               	movlw	low _PortC
 18696  015942  0100               	movlb	0	; () banked
 18697  015944  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 18698  015946  0E00               	movlw	high _PortC
 18699  015948  0100               	movlb	0	; () banked
 18700  01594A  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 18701  01594C  0E01               	movlw	1
 18702  01594E  0100               	movlb	0	; () banked
 18703  015950  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 18704  015952  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
 18705  015956  EC79  F09F         	call	_Port_SetPin	;wreg free
 18706                           
 18707                           ;LED.c: 43: }
 18708                           
 18709                           ;LED.c: 42: break;
 18710  01595A  0012               	return	
 18711  01595C                     l227:
 18712  01595C  0100               	movlb	0	; () banked
 18713  01595E  5175               	movf	LED_Set@pLED& (0+255),w,b
 18714                           
 18715                           ; Switch size 1, requested type "space"
 18716                           ; Number of cases is 2, Range of values is 0 to 1
 18717                           ; switch strategies available:
 18718                           ; Name         Instructions Cycles
 18719                           ; simple_byte            7     4 (average)
 18720                           ;	Chosen strategy is simple_byte
 18721  015960  0A00               	xorlw	0	; case 0
 18722  015962  B4D8               	btfsc	status,2,c
 18723  015964  D7DF               	goto	l228
 18724  015966  0A01               	xorlw	1	; case 1
 18725  015968  A4D8               	btfss	status,2,c
 18726  01596A  0012               	return	
 18727  01596C  D7E9               	goto	l230
 18728  01596E                     __end_of_LED_Set:
 18729                           	opt stack 0
 18730                           tosu	equ	0xFFF
 18731                           tosh	equ	0xFFE
 18732                           tosl	equ	0xFFD
 18733                           pclath	equ	0xFFA
 18734                           tblptru	equ	0xFF8
 18735                           tblptrh	equ	0xFF7
 18736                           tblptrl	equ	0xFF6
 18737                           tablat	equ	0xFF5
 18738                           prodh	equ	0xFF4
 18739                           prodl	equ	0xFF3
 18740                           intcon	equ	0xFF2
 18741                           postinc0	equ	0xFEE
 18742                           wreg	equ	0xFE8
 18743                           indf1	equ	0xFE7
 18744                           postdec1	equ	0xFE5
 18745                           fsr1h	equ	0xFE2
 18746                           fsr1l	equ	0xFE1
 18747                           indf2	equ	0xFDF
 18748                           postinc2	equ	0xFDE
 18749                           postdec2	equ	0xFDD
 18750                           plusw2	equ	0xFDB
 18751                           fsr2h	equ	0xFDA
 18752                           fsr2l	equ	0xFD9
 18753                           status	equ	0xFD8
 18754                           
 18755 ;; *************** function _MXK_Dequeue *****************
 18756 ;; Defined at:
 18757 ;;		line 153 in file "Library/MXK.c"
 18758 ;; Parameters:    Size  Location     Type
 18759 ;;		None
 18760 ;; Auto vars:     Size  Location     Type
 18761 ;;		None
 18762 ;; Return value:  Size  Location     Type
 18763 ;;                  1    wreg      void 
 18764 ;; Registers used:
 18765 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18766 ;; Tracked objects:
 18767 ;;		On entry : 0/0
 18768 ;;		On exit  : 0/0
 18769 ;;		Unchanged: 0/0
 18770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18774 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18775 ;;Total ram usage:        0 bytes
 18776 ;; Hardware stack levels used:    1
 18777 ;; Hardware stack levels required when called:   12
 18778 ;; This function calls:
 18779 ;;		Absolute function
 18780 ;;		_Motor_Step
 18781 ;; This function is called by:
 18782 ;;		_init
 18783 ;;		_mode1
 18784 ;;		_mode2
 18785 ;;		_mode4
 18786 ;; This function uses a non-reentrant model
 18787 ;;
 18788                           
 18789                           	psect	text82
 18790  015D42                     __ptext82:
 18791                           	opt stack 0
 18792  015D42                     _MXK_Dequeue:
 18793                           	opt stack 17
 18794                           
 18795                           ;MXK.c: 155: if (lQueue)
 18796                           
 18797                           ;incstack = 0
 18798  015D42  0100               	movlb	0	; () banked
 18799  015D44  51BC               	movf	_lQueue& (0+255),w,b	;volatile
 18800  015D46  0100               	movlb	0	; () banked
 18801  015D48  11BD               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 18802  015D4A  0100               	movlb	0	; () banked
 18803  015D4C  11BE               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 18804  015D4E  B4D8               	btfsc	status,2,c
 18805  015D50  D00D               	goto	u13329
 18806                           
 18807                           ; BSR set to: 0
 18808                           ;MXK.c: 156: lQueue();
 18809  015D52  D801               	call	u13328
 18810  015D54  D00B               	goto	u13329
 18811  015D56                     u13328:
 18812  015D56  0005               	push	
 18813  015D58  6EFA               	movwf	pclath,c
 18814  015D5A  0100               	movlb	0	; () banked
 18815  015D5C  51BC               	movf	_lQueue& (0+255),w,b	;volatile
 18816  015D5E  6EFD               	movwf	tosl,c
 18817  015D60  51BD               	movf	(_lQueue+1)& (0+255),w,b	;volatile
 18818  015D62  6EFE               	movwf	tosh,c
 18819  015D64  51BE               	movf	(_lQueue+2)& (0+255),w,b	;volatile
 18820  015D66  6EFF               	movwf	tosu,c
 18821  015D68  50FA               	movf	pclath,w,c
 18822  015D6A  0012               	return		;indir
 18823  015D6C                     u13329:
 18824                           
 18825                           ;MXK.c: 157: lQueue = 0;
 18826  015D6C  0E00               	movlw	0
 18827  015D6E  0100               	movlb	0	; () banked
 18828  015D70  6FBC               	movwf	_lQueue& (0+255),b	;volatile
 18829  015D72  0E00               	movlw	0
 18830  015D74  0100               	movlb	0	; () banked
 18831  015D76  6FBD               	movwf	(_lQueue+1)& (0+255),b	;volatile
 18832  015D78  0E00               	movlw	0
 18833  015D7A  0100               	movlb	0	; () banked
 18834  015D7C  6FBE               	movwf	(_lQueue+2)& (0+255),b	;volatile
 18835                           
 18836                           ; BSR set to: 0
 18837  015D7E  0012               	return		;funcret
 18838  015D80                     __end_of_MXK_Dequeue:
 18839                           	opt stack 0
 18840                           tosu	equ	0xFFF
 18841                           tosh	equ	0xFFE
 18842                           tosl	equ	0xFFD
 18843                           pclath	equ	0xFFA
 18844                           tblptru	equ	0xFF8
 18845                           tblptrh	equ	0xFF7
 18846                           tblptrl	equ	0xFF6
 18847                           tablat	equ	0xFF5
 18848                           prodh	equ	0xFF4
 18849                           prodl	equ	0xFF3
 18850                           intcon	equ	0xFF2
 18851                           postinc0	equ	0xFEE
 18852                           wreg	equ	0xFE8
 18853                           indf1	equ	0xFE7
 18854                           postdec1	equ	0xFE5
 18855                           fsr1h	equ	0xFE2
 18856                           fsr1l	equ	0xFE1
 18857                           indf2	equ	0xFDF
 18858                           postinc2	equ	0xFDE
 18859                           postdec2	equ	0xFDD
 18860                           plusw2	equ	0xFDB
 18861                           fsr2h	equ	0xFDA
 18862                           fsr2l	equ	0xFD9
 18863                           status	equ	0xFD8
 18864                           
 18865 ;; *************** function _Motor_Step *****************
 18866 ;; Defined at:
 18867 ;;		line 75 in file "Library/Motor.c"
 18868 ;; Parameters:    Size  Location     Type
 18869 ;;		None
 18870 ;; Auto vars:     Size  Location     Type
 18871 ;;		None
 18872 ;; Return value:  Size  Location     Type
 18873 ;;                  1    wreg      void 
 18874 ;; Registers used:
 18875 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18876 ;; Tracked objects:
 18877 ;;		On entry : 0/0
 18878 ;;		On exit  : 0/0
 18879 ;;		Unchanged: 0/0
 18880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18883 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18884 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18885 ;;Total ram usage:        2 bytes
 18886 ;; Hardware stack levels used:    1
 18887 ;; Hardware stack levels required when called:   11
 18888 ;; This function calls:
 18889 ;;		_MXK_Queue
 18890 ;;		_MXK_Release
 18891 ;;		_MXK_SwitchTo
 18892 ;;		_Port_SetPin
 18893 ;;		_Timer0_Restart
 18894 ;;		_Timer0_Stop
 18895 ;; This function is called by:
 18896 ;;		_Motor_Init
 18897 ;;		_MXK_Dequeue
 18898 ;;		_Timer0_ISR
 18899 ;; This function uses a non-reentrant model
 18900 ;;
 18901                           
 18902                           	psect	text83
 18903  0136A6                     __ptext83:
 18904                           	opt stack 0
 18905  0136A6                     _Motor_Step:
 18906                           	opt stack 0
 18907                           
 18908                           ; BSR set to: 0
 18909                           ;Skip over the trampoline to the duplicate function for level 2
 18910  0136A6  B251               	btfsc	btemp,1,c
 18911  0136A8  EF6C  F09C         	goto	i2_Motor_Step
 18912  0136AC                     _Motor_Step$intlevel0:
 18913                           	opt stack 17
 18914                           
 18915                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 18916                           
 18917                           ;incstack = 0
 18918  0136AC  0100               	movlb	0	; () banked
 18919  0136AE  EE20 F004          	lfsr	2,4
 18920  0136B2  51D8               	movf	_lMotor& (0+255),w,b
 18921  0136B4  26D9               	addwf	fsr2l,f,c
 18922  0136B6  51D9               	movf	(_lMotor+1)& (0+255),w,b
 18923  0136B8  22DA               	addwfc	fsr2h,f,c
 18924  0136BA  50DF               	movf	indf2,w,c
 18925  0136BC  EC21  F0AE         	call	_MXK_SwitchTo
 18926  0136C0  0900               	iorlw	0
 18927  0136C2  B4D8               	btfsc	status,2,c
 18928  0136C4  D07A               	goto	l1627
 18929                           
 18930                           ;Motor.c: 78: {
 18931                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 18932  0136C6  C0D8  FFD9         	movff	_lMotor,fsr2l
 18933  0136CA  C0D9  FFDA         	movff	_lMotor+1,fsr2h
 18934  0136CE  50DE               	movf	postinc2,w,c
 18935  0136D0  10DE               	iorwf	postinc2,w,c
 18936  0136D2  B4D8               	btfsc	status,2,c
 18937  0136D4  D06D               	goto	l1628
 18938                           
 18939                           ;Motor.c: 80: {
 18940                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 18941  0136D6  C0D8  FFD9         	movff	_lMotor,fsr2l
 18942  0136DA  C0D9  FFDA         	movff	_lMotor+1,fsr2h
 18943  0136DE  0E01               	movlw	1
 18944  0136E0  BEDB               	btfsc	plusw2,7,c
 18945  0136E2  D026               	goto	l1629
 18946  0136E4  0E01               	movlw	1
 18947  0136E6  50DB               	movf	plusw2,w,c
 18948  0136E8  E103               	bnz	u10070
 18949  0136EA  04DE               	decf	postinc2,w,c
 18950  0136EC  A0D8               	btfss	status,0,c
 18951  0136EE  D020               	goto	l1629
 18952  0136F0                     u10070:
 18953                           
 18954                           ;Motor.c: 83: {
 18955                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 18956  0136F0  C0D8  FFD9         	movff	_lMotor,fsr2l
 18957  0136F4  C0D9  FFDA         	movff	_lMotor+1,fsr2h
 18958  0136F8  28DE               	incf	postinc2,w,c
 18959  0136FA  E104               	bnz	u10080
 18960  0136FC  0E7F               	movlw	127
 18961  0136FE  18DE               	xorwf	postinc2,w,c
 18962  013700  B4D8               	btfsc	status,2,c
 18963  013702  D007               	goto	l1630
 18964  013704                     u10080:
 18965                           
 18966                           ;Motor.c: 85: lMotor->mDelta --;
 18967  013704  C0D8  FFD9         	movff	_lMotor,fsr2l
 18968  013708  C0D9  FFDA         	movff	_lMotor+1,fsr2h
 18969  01370C  06DE               	decf	postinc2,f,c
 18970  01370E  0E00               	movlw	0
 18971  013710  5ADD               	subwfb	postdec2,f,c
 18972  013712                     l1630:
 18973                           
 18974                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 18975  013712  0E96               	movlw	low _PortE
 18976  013714  0100               	movlb	0	; () banked
 18977  013716  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 18978  013718  0E03               	movlw	high _PortE
 18979  01371A  0100               	movlb	0	; () banked
 18980  01371C  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 18981  01371E  0E00               	movlw	0
 18982  013720  0100               	movlb	0	; () banked
 18983  013722  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 18984  013724  0E01               	movlw	1
 18985  013726  0100               	movlb	0	; () banked
 18986  013728  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 18987  01372A  EC79  F09F         	call	_Port_SetPin	;wreg free
 18988                           
 18989                           ;Motor.c: 88: }
 18990  01372E  D01F               	goto	l1631
 18991  013730                     l1629:
 18992                           
 18993                           ;Motor.c: 89: else
 18994                           ;Motor.c: 90: {
 18995                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 18996  013730  C0D8  FFD9         	movff	_lMotor,fsr2l
 18997  013734  C0D9  FFDA         	movff	_lMotor+1,fsr2h
 18998  013738  04DE               	decf	postinc2,w,c
 18999  01373A  E104               	bnz	u10090
 19000  01373C  0E80               	movlw	128
 19001  01373E  18DE               	xorwf	postinc2,w,c
 19002  013740  B4D8               	btfsc	status,2,c
 19003  013742  D007               	goto	l1632
 19004  013744                     u10090:
 19005                           
 19006                           ;Motor.c: 92: lMotor->mDelta ++;
 19007  013744  C0D8  FFD9         	movff	_lMotor,fsr2l
 19008  013748  C0D9  FFDA         	movff	_lMotor+1,fsr2h
 19009  01374C  2ADE               	incf	postinc2,f,c
 19010  01374E  0E00               	movlw	0
 19011  013750  22DD               	addwfc	postdec2,f,c
 19012  013752                     l1632:
 19013                           
 19014                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 19015  013752  0E96               	movlw	low _PortE
 19016  013754  0100               	movlb	0	; () banked
 19017  013756  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 19018  013758  0E03               	movlw	high _PortE
 19019  01375A  0100               	movlb	0	; () banked
 19020  01375C  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 19021  01375E  0E00               	movlw	0
 19022  013760  0100               	movlb	0	; () banked
 19023  013762  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 19024  013764  0E00               	movlw	0
 19025  013766  0100               	movlb	0	; () banked
 19026  013768  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 19027  01376A  EC79  F09F         	call	_Port_SetPin	;wreg free
 19028  01376E                     l1631:
 19029                           
 19030                           ;Motor.c: 95: }
 19031                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 19032  01376E  0E96               	movlw	low _PortE
 19033  013770  0100               	movlb	0	; () banked
 19034  013772  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 19035  013774  0E03               	movlw	high _PortE
 19036  013776  0100               	movlb	0	; () banked
 19037  013778  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 19038  01377A  0E01               	movlw	1
 19039  01377C  0100               	movlb	0	; () banked
 19040  01377E  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 19041  013780  0E01               	movlw	1
 19042  013782  0100               	movlb	0	; () banked
 19043  013784  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 19044  013786  EC79  F09F         	call	_Port_SetPin	;wreg free
 19045                           
 19046                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 19047  01378A  0E96               	movlw	low _PortE
 19048  01378C  0100               	movlb	0	; () banked
 19049  01378E  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 19050  013790  0E03               	movlw	high _PortE
 19051  013792  0100               	movlb	0	; () banked
 19052  013794  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 19053  013796  0E01               	movlw	1
 19054  013798  0100               	movlb	0	; () banked
 19055  01379A  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 19056  01379C  0E00               	movlw	0
 19057  01379E  0100               	movlb	0	; () banked
 19058  0137A0  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 19059  0137A2  EC79  F09F         	call	_Port_SetPin	;wreg free
 19060                           
 19061                           ;Motor.c: 101: MXK_Release();
 19062  0137A6  EC4F  F0B1         	call	_MXK_Release	;wreg free
 19063                           
 19064                           ;Motor.c: 102: Timer0_Restart();
 19065  0137AA  EC3D  F0B2         	call	_Timer0_Restart	;wreg free
 19066                           
 19067                           ;Motor.c: 103: return;
 19068  0137AE  0012               	return	
 19069  0137B0                     l1628:
 19070                           
 19071                           ;Motor.c: 104: }
 19072                           ;Motor.c: 105: MXK_Release();
 19073  0137B0  EC4F  F0B1         	call	_MXK_Release	;wreg free
 19074                           
 19075                           ;Motor.c: 106: Timer0_Stop();
 19076  0137B4  EC6B  F0B2         	call	_Timer0_Stop	;wreg free
 19077                           
 19078                           ;Motor.c: 107: return;
 19079  0137B8  0012               	return	
 19080  0137BA                     l1627:
 19081                           
 19082                           ;Motor.c: 108: }
 19083                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 19084  0137BA  C0BF  F060         	movff	_lStepFunction,MXK_Queue@pCallback
 19085  0137BE  C0C0  F061         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
 19086  0137C2  C0C1  F062         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
 19087  0137C6  EC23  F0B2         	call	_MXK_Queue	;wreg free
 19088  0137CA  0012               	return		;funcret
 19089  0137CC                     __end_of_Motor_Step:
 19090                           	opt stack 0
 19091                           tosu	equ	0xFFF
 19092                           tosh	equ	0xFFE
 19093                           tosl	equ	0xFFD
 19094                           pclath	equ	0xFFA
 19095                           tblptru	equ	0xFF8
 19096                           tblptrh	equ	0xFF7
 19097                           tblptrl	equ	0xFF6
 19098                           tablat	equ	0xFF5
 19099                           prodh	equ	0xFF4
 19100                           prodl	equ	0xFF3
 19101                           intcon	equ	0xFF2
 19102                           postinc0	equ	0xFEE
 19103                           wreg	equ	0xFE8
 19104                           indf1	equ	0xFE7
 19105                           postdec1	equ	0xFE5
 19106                           fsr1h	equ	0xFE2
 19107                           fsr1l	equ	0xFE1
 19108                           indf2	equ	0xFDF
 19109                           postinc2	equ	0xFDE
 19110                           postdec2	equ	0xFDD
 19111                           plusw2	equ	0xFDB
 19112                           fsr2h	equ	0xFDA
 19113                           fsr2l	equ	0xFD9
 19114                           status	equ	0xFD8
 19115                           
 19116 ;; *************** function _Timer0_Stop *****************
 19117 ;; Defined at:
 19118 ;;		line 89 in file "Library/Timer0.c"
 19119 ;; Parameters:    Size  Location     Type
 19120 ;;		None
 19121 ;; Auto vars:     Size  Location     Type
 19122 ;;		None
 19123 ;; Return value:  Size  Location     Type
 19124 ;;                  1    wreg      void 
 19125 ;; Registers used:
 19126 ;;		None
 19127 ;; Tracked objects:
 19128 ;;		On entry : 0/0
 19129 ;;		On exit  : 0/0
 19130 ;;		Unchanged: 0/0
 19131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19135 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19136 ;;Total ram usage:        0 bytes
 19137 ;; Hardware stack levels used:    1
 19138 ;; Hardware stack levels required when called:    7
 19139 ;; This function calls:
 19140 ;;		Nothing
 19141 ;; This function is called by:
 19142 ;;		_Motor_Step
 19143 ;; This function uses a non-reentrant model
 19144 ;;
 19145                           
 19146                           	psect	text84
 19147  0164D6                     __ptext84:
 19148                           	opt stack 0
 19149  0164D6                     _Timer0_Stop:
 19150                           	opt stack 20
 19151                           
 19152                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 19153                           
 19154                           ;incstack = 0
 19155  0164D6  9AF2               	bcf	intcon,5,c	;volatile
 19156                           
 19157                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 19158  0164D8  94F2               	bcf	intcon,2,c	;volatile
 19159  0164DA  0012               	return		;funcret
 19160  0164DC                     __end_of_Timer0_Stop:
 19161                           	opt stack 0
 19162                           tosu	equ	0xFFF
 19163                           tosh	equ	0xFFE
 19164                           tosl	equ	0xFFD
 19165                           pclath	equ	0xFFA
 19166                           tblptru	equ	0xFF8
 19167                           tblptrh	equ	0xFF7
 19168                           tblptrl	equ	0xFF6
 19169                           tablat	equ	0xFF5
 19170                           prodh	equ	0xFF4
 19171                           prodl	equ	0xFF3
 19172                           intcon	equ	0xFF2
 19173                           postinc0	equ	0xFEE
 19174                           wreg	equ	0xFE8
 19175                           indf1	equ	0xFE7
 19176                           postdec1	equ	0xFE5
 19177                           fsr1h	equ	0xFE2
 19178                           fsr1l	equ	0xFE1
 19179                           indf2	equ	0xFDF
 19180                           postinc2	equ	0xFDE
 19181                           postdec2	equ	0xFDD
 19182                           plusw2	equ	0xFDB
 19183                           fsr2h	equ	0xFDA
 19184                           fsr2l	equ	0xFD9
 19185                           status	equ	0xFD8
 19186                           
 19187 ;; *************** function _Timer0_Restart *****************
 19188 ;; Defined at:
 19189 ;;		line 83 in file "Library/Timer0.c"
 19190 ;; Parameters:    Size  Location     Type
 19191 ;;		None
 19192 ;; Auto vars:     Size  Location     Type
 19193 ;;		None
 19194 ;; Return value:  Size  Location     Type
 19195 ;;                  1    wreg      void 
 19196 ;; Registers used:
 19197 ;;		None
 19198 ;; Tracked objects:
 19199 ;;		On entry : 0/0
 19200 ;;		On exit  : 0/0
 19201 ;;		Unchanged: 0/0
 19202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19206 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19207 ;;Total ram usage:        0 bytes
 19208 ;; Hardware stack levels used:    1
 19209 ;; Hardware stack levels required when called:    7
 19210 ;; This function calls:
 19211 ;;		Nothing
 19212 ;; This function is called by:
 19213 ;;		_Motor_Step
 19214 ;; This function uses a non-reentrant model
 19215 ;;
 19216                           
 19217                           	psect	text85
 19218  01647A                     __ptext85:
 19219                           	opt stack 0
 19220  01647A                     _Timer0_Restart:
 19221                           	opt stack 20
 19222                           
 19223                           ;Timer0.c: 85: TMR0 = COUNTER;
 19224                           
 19225                           ;incstack = 0
 19226  01647A  C029  FFD6         	movff	_COUNTER,4054	;volatile
 19227  01647E  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 19228                           
 19229                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 19230  016482  8AF2               	bsf	intcon,5,c	;volatile
 19231  016484  0012               	return		;funcret
 19232  016486                     __end_of_Timer0_Restart:
 19233                           	opt stack 0
 19234                           tosu	equ	0xFFF
 19235                           tosh	equ	0xFFE
 19236                           tosl	equ	0xFFD
 19237                           pclath	equ	0xFFA
 19238                           tblptru	equ	0xFF8
 19239                           tblptrh	equ	0xFF7
 19240                           tblptrl	equ	0xFF6
 19241                           tablat	equ	0xFF5
 19242                           prodh	equ	0xFF4
 19243                           prodl	equ	0xFF3
 19244                           intcon	equ	0xFF2
 19245                           postinc0	equ	0xFEE
 19246                           wreg	equ	0xFE8
 19247                           indf1	equ	0xFE7
 19248                           postdec1	equ	0xFE5
 19249                           fsr1h	equ	0xFE2
 19250                           fsr1l	equ	0xFE1
 19251                           indf2	equ	0xFDF
 19252                           postinc2	equ	0xFDE
 19253                           postdec2	equ	0xFDD
 19254                           plusw2	equ	0xFDB
 19255                           fsr2h	equ	0xFDA
 19256                           fsr2l	equ	0xFD9
 19257                           status	equ	0xFD8
 19258                           
 19259 ;; *************** function _MXK_SwitchTo *****************
 19260 ;; Defined at:
 19261 ;;		line 105 in file "Library/MXK.c"
 19262 ;; Parameters:    Size  Location     Type
 19263 ;;  pModule         1    wreg     enum E6927
 19264 ;; Auto vars:     Size  Location     Type
 19265 ;;  pModule         1    7[BANK0 ] enum E6927
 19266 ;;  CUR             1    6[BANK0 ] unsigned char 
 19267 ;; Return value:  Size  Location     Type
 19268 ;;                  1    wreg      unsigned char 
 19269 ;; Registers used:
 19270 ;;		wreg, status,2, status,0, cstack
 19271 ;; Tracked objects:
 19272 ;;		On entry : 0/0
 19273 ;;		On exit  : 0/0
 19274 ;;		Unchanged: 0/0
 19275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19277 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19279 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19280 ;;Total ram usage:        2 bytes
 19281 ;; Hardware stack levels used:    1
 19282 ;; Hardware stack levels required when called:    8
 19283 ;; This function calls:
 19284 ;;		_delay_us
 19285 ;; This function is called by:
 19286 ;;		_Motor_Step
 19287 ;;		_mode1
 19288 ;;		_mode2
 19289 ;;		_mode4
 19290 ;; This function uses a non-reentrant model
 19291 ;;
 19292                           
 19293                           	psect	text86
 19294  015C42                     __ptext86:
 19295                           	opt stack 0
 19296  015C42                     _MXK_SwitchTo:
 19297                           	opt stack 21
 19298                           
 19299                           ;incstack = 0
 19300                           ;MXK_SwitchTo@pModule stored from wreg
 19301  015C42  0100               	movlb	0	; () banked
 19302  015C44  6F67               	movwf	MXK_SwitchTo@pModule& (0+255),b
 19303                           
 19304                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 19305  015C46  5086               	movf	3974,w,c	;volatile
 19306  015C48  0B0F               	andlw	15
 19307  015C4A  0100               	movlb	0	; () banked
 19308  015C4C  6F66               	movwf	MXK_SwitchTo@CUR& (0+255),b
 19309                           
 19310                           ; BSR set to: 0
 19311                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 19312  015C4E  504B               	movf	_Bus_State,w,c
 19313  015C50  A4D8               	btfss	status,2,c
 19314  015C52  D002               	goto	l1730
 19315                           
 19316                           ; BSR set to: 0
 19317                           ;MXK.c: 110: return 0;
 19318  015C54  0E00               	movlw	0
 19319                           
 19320                           ; BSR set to: 0
 19321  015C56  0012               	return	
 19322  015C58                     l1730:
 19323                           
 19324                           ; BSR set to: 0
 19325                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 19326                           
 19327                           ; BSR set to: 0
 19328  015C58  0E00               	movlw	0
 19329  015C5A  6E4B               	movwf	_Bus_State,c
 19330                           
 19331                           ; BSR set to: 0
 19332                           ;MXK.c: 114: if (CUR != pModule)
 19333  015C5C  0100               	movlb	0	; () banked
 19334  015C5E  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 19335  015C60  0100               	movlb	0	; () banked
 19336  015C62  1966               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
 19337  015C64  B4D8               	btfsc	status,2,c
 19338  015C66  D00C               	goto	l1732
 19339                           
 19340                           ; BSR set to: 0
 19341                           ;MXK.c: 115: {
 19342                           ;MXK.c: 116: PORTG &= ~(0xF);
 19343  015C68  0EF0               	movlw	240
 19344  015C6A  1686               	andwf	3974,f,c	;volatile
 19345                           
 19346                           ;MXK.c: 117: PORTG |= pModule;
 19347  015C6C  0100               	movlb	0	; () banked
 19348  015C6E  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 19349  015C70  1286               	iorwf	3974,f,c	;volatile
 19350                           
 19351                           ; BSR set to: 0
 19352                           ;MXK.c: 120: delay_us(10);
 19353  015C72  0E00               	movlw	0
 19354  015C74  0100               	movlb	0	; () banked
 19355  015C76  6F61               	movwf	(delay_us@us+1)& (0+255),b
 19356  015C78  0E0A               	movlw	10
 19357  015C7A  6F60               	movwf	delay_us@us& (0+255),b
 19358  015C7C  EC66  F0AC         	call	_delay_us	;wreg free
 19359  015C80                     l1732:
 19360                           
 19361                           ;MXK.c: 121: }
 19362                           ;MXK.c: 122: return 1;
 19363  015C80  0E01               	movlw	1
 19364  015C82  0012               	return	
 19365  015C84                     __end_of_MXK_SwitchTo:
 19366                           	opt stack 0
 19367                           tosu	equ	0xFFF
 19368                           tosh	equ	0xFFE
 19369                           tosl	equ	0xFFD
 19370                           pclath	equ	0xFFA
 19371                           tblptru	equ	0xFF8
 19372                           tblptrh	equ	0xFF7
 19373                           tblptrl	equ	0xFF6
 19374                           tablat	equ	0xFF5
 19375                           prodh	equ	0xFF4
 19376                           prodl	equ	0xFF3
 19377                           intcon	equ	0xFF2
 19378                           postinc0	equ	0xFEE
 19379                           wreg	equ	0xFE8
 19380                           indf1	equ	0xFE7
 19381                           postdec1	equ	0xFE5
 19382                           fsr1h	equ	0xFE2
 19383                           fsr1l	equ	0xFE1
 19384                           indf2	equ	0xFDF
 19385                           postinc2	equ	0xFDE
 19386                           postdec2	equ	0xFDD
 19387                           plusw2	equ	0xFDB
 19388                           fsr2h	equ	0xFDA
 19389                           fsr2l	equ	0xFD9
 19390                           status	equ	0xFD8
 19391                           
 19392 ;; *************** function _MXK_Release *****************
 19393 ;; Defined at:
 19394 ;;		line 130 in file "Library/MXK.c"
 19395 ;; Parameters:    Size  Location     Type
 19396 ;;		None
 19397 ;; Auto vars:     Size  Location     Type
 19398 ;;		None
 19399 ;; Return value:  Size  Location     Type
 19400 ;;                  1    wreg      unsigned char 
 19401 ;; Registers used:
 19402 ;;		wreg, status,2, status,0
 19403 ;; Tracked objects:
 19404 ;;		On entry : 0/0
 19405 ;;		On exit  : 0/0
 19406 ;;		Unchanged: 0/0
 19407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19411 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19412 ;;Total ram usage:        0 bytes
 19413 ;; Hardware stack levels used:    1
 19414 ;; Hardware stack levels required when called:    7
 19415 ;; This function calls:
 19416 ;;		Nothing
 19417 ;; This function is called by:
 19418 ;;		_Motor_Step
 19419 ;;		_init
 19420 ;;		_mode1
 19421 ;;		_mode2
 19422 ;;		_mode4
 19423 ;; This function uses a non-reentrant model
 19424 ;;
 19425                           
 19426                           	psect	text87
 19427  01629E                     __ptext87:
 19428                           	opt stack 0
 19429  01629E                     _MXK_Release:
 19430                           	opt stack 22
 19431                           
 19432                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 19433                           
 19434                           ;incstack = 0
 19435  01629E  0E01               	movlw	1
 19436  0162A0  6E4B               	movwf	_Bus_State,c
 19437                           
 19438                           ;MXK.c: 134: if (lQueue != 0)
 19439  0162A2  0100               	movlb	0	; () banked
 19440  0162A4  51BC               	movf	_lQueue& (0+255),w,b	;volatile
 19441  0162A6  0100               	movlb	0	; () banked
 19442  0162A8  11BD               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 19443  0162AA  0100               	movlb	0	; () banked
 19444  0162AC  11BE               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 19445  0162AE  B4D8               	btfsc	status,2,c
 19446  0162B0  D002               	goto	l1735
 19447                           
 19448                           ; BSR set to: 0
 19449                           ;MXK.c: 135: return 1;
 19450  0162B2  0E01               	movlw	1
 19451                           
 19452                           ; BSR set to: 0
 19453  0162B4  0012               	return	
 19454  0162B6                     l1735:
 19455                           
 19456                           ; BSR set to: 0
 19457                           ;MXK.c: 137: return 0;
 19458                           
 19459                           ; BSR set to: 0
 19460  0162B6  0E00               	movlw	0
 19461  0162B8  0012               	return	
 19462  0162BA                     __end_of_MXK_Release:
 19463                           	opt stack 0
 19464                           tosu	equ	0xFFF
 19465                           tosh	equ	0xFFE
 19466                           tosl	equ	0xFFD
 19467                           pclath	equ	0xFFA
 19468                           tblptru	equ	0xFF8
 19469                           tblptrh	equ	0xFF7
 19470                           tblptrl	equ	0xFF6
 19471                           tablat	equ	0xFF5
 19472                           prodh	equ	0xFF4
 19473                           prodl	equ	0xFF3
 19474                           intcon	equ	0xFF2
 19475                           postinc0	equ	0xFEE
 19476                           wreg	equ	0xFE8
 19477                           indf1	equ	0xFE7
 19478                           postdec1	equ	0xFE5
 19479                           fsr1h	equ	0xFE2
 19480                           fsr1l	equ	0xFE1
 19481                           indf2	equ	0xFDF
 19482                           postinc2	equ	0xFDE
 19483                           postdec2	equ	0xFDD
 19484                           plusw2	equ	0xFDB
 19485                           fsr2h	equ	0xFDA
 19486                           fsr2l	equ	0xFD9
 19487                           status	equ	0xFD8
 19488                           
 19489 ;; *************** function _MXK_Queue *****************
 19490 ;; Defined at:
 19491 ;;		line 144 in file "Library/MXK.c"
 19492 ;; Parameters:    Size  Location     Type
 19493 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
 19494 ;;		 -> Absolute function(1), Motor_Step(1), 
 19495 ;; Auto vars:     Size  Location     Type
 19496 ;;		None
 19497 ;; Return value:  Size  Location     Type
 19498 ;;                  1    wreg      void 
 19499 ;; Registers used:
 19500 ;;		wreg, status,2, status,0
 19501 ;; Tracked objects:
 19502 ;;		On entry : 0/0
 19503 ;;		On exit  : 0/0
 19504 ;;		Unchanged: 0/0
 19505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19506 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19507 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19508 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19509 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19510 ;;Total ram usage:        3 bytes
 19511 ;; Hardware stack levels used:    1
 19512 ;; Hardware stack levels required when called:    7
 19513 ;; This function calls:
 19514 ;;		Nothing
 19515 ;; This function is called by:
 19516 ;;		_Motor_Step
 19517 ;; This function uses a non-reentrant model
 19518 ;;
 19519                           
 19520                           	psect	text88
 19521  016446                     __ptext88:
 19522                           	opt stack 0
 19523  016446                     _MXK_Queue:
 19524                           	opt stack 20
 19525                           
 19526                           ;MXK.c: 146: lQueue = pCallback;
 19527                           
 19528                           ; BSR set to: 0
 19529                           ;incstack = 0
 19530  016446  C060  F0BC         	movff	MXK_Queue@pCallback,_lQueue	;volatile
 19531  01644A  C061  F0BD         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
 19532  01644E  C062  F0BE         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
 19533  016452  0012               	return		;funcret
 19534  016454                     __end_of_MXK_Queue:
 19535                           	opt stack 0
 19536                           tosu	equ	0xFFF
 19537                           tosh	equ	0xFFE
 19538                           tosl	equ	0xFFD
 19539                           pclath	equ	0xFFA
 19540                           tblptru	equ	0xFF8
 19541                           tblptrh	equ	0xFF7
 19542                           tblptrl	equ	0xFF6
 19543                           tablat	equ	0xFF5
 19544                           prodh	equ	0xFF4
 19545                           prodl	equ	0xFF3
 19546                           intcon	equ	0xFF2
 19547                           postinc0	equ	0xFEE
 19548                           wreg	equ	0xFE8
 19549                           indf1	equ	0xFE7
 19550                           postdec1	equ	0xFE5
 19551                           fsr1h	equ	0xFE2
 19552                           fsr1l	equ	0xFE1
 19553                           indf2	equ	0xFDF
 19554                           postinc2	equ	0xFDE
 19555                           postdec2	equ	0xFDD
 19556                           plusw2	equ	0xFDB
 19557                           fsr2h	equ	0xFDA
 19558                           fsr2l	equ	0xFD9
 19559                           status	equ	0xFD8
 19560                           
 19561 ;; *************** function _MXK_BlockSwitchTo *****************
 19562 ;; Defined at:
 19563 ;;		line 82 in file "Library/MXK.c"
 19564 ;; Parameters:    Size  Location     Type
 19565 ;;  pModule         1    wreg     enum E6927
 19566 ;; Auto vars:     Size  Location     Type
 19567 ;;  pModule         1    7[BANK0 ] enum E6927
 19568 ;;  CUR             1    6[BANK0 ] unsigned char 
 19569 ;; Return value:  Size  Location     Type
 19570 ;;                  1    wreg      unsigned char 
 19571 ;; Registers used:
 19572 ;;		wreg, status,2, status,0, cstack
 19573 ;; Tracked objects:
 19574 ;;		On entry : 0/0
 19575 ;;		On exit  : 0/0
 19576 ;;		Unchanged: 0/0
 19577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19579 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19581 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19582 ;;Total ram usage:        2 bytes
 19583 ;; Hardware stack levels used:    1
 19584 ;; Hardware stack levels required when called:    8
 19585 ;; This function calls:
 19586 ;;		_delay_us
 19587 ;; This function is called by:
 19588 ;;		_init
 19589 ;; This function uses a non-reentrant model
 19590 ;;
 19591                           
 19592                           	psect	text89
 19593  015D80                     __ptext89:
 19594                           	opt stack 0
 19595  015D80                     _MXK_BlockSwitchTo:
 19596                           	opt stack 21
 19597                           
 19598                           ;incstack = 0
 19599                           ;MXK_BlockSwitchTo@pModule stored from wreg
 19600  015D80  0100               	movlb	0	; () banked
 19601  015D82  6F67               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
 19602                           
 19603                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
 19604  015D84  5086               	movf	3974,w,c	;volatile
 19605  015D86  0B0F               	andlw	15
 19606  015D88  0100               	movlb	0	; () banked
 19607  015D8A  6F66               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
 19608  015D8C                     
 19609                           ; BSR set to: 0
 19610                           
 19611                           ; BSR set to: 0
 19612  015D8C  504B               	movf	_Bus_State,w,c
 19613  015D8E  B4D8               	btfsc	status,2,c
 19614  015D90  D7FD               	goto	l1724
 19615                           
 19616                           ;MXK.c: 88: Bus_State = eMXK_Busy;
 19617  015D92  0E00               	movlw	0
 19618  015D94  6E4B               	movwf	_Bus_State,c
 19619                           
 19620                           ;MXK.c: 90: if (CUR != pModule)
 19621  015D96  0100               	movlb	0	; () banked
 19622  015D98  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 19623  015D9A  0100               	movlb	0	; () banked
 19624  015D9C  1966               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
 19625  015D9E  B4D8               	btfsc	status,2,c
 19626  015DA0  D00C               	goto	l1726
 19627                           
 19628                           ; BSR set to: 0
 19629                           ;MXK.c: 91: {
 19630                           ;MXK.c: 92: PORTG &= ~(0xF);
 19631  015DA2  0EF0               	movlw	240
 19632  015DA4  1686               	andwf	3974,f,c	;volatile
 19633                           
 19634                           ;MXK.c: 93: PORTG |= pModule;
 19635  015DA6  0100               	movlb	0	; () banked
 19636  015DA8  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 19637  015DAA  1286               	iorwf	3974,f,c	;volatile
 19638                           
 19639                           ; BSR set to: 0
 19640                           ;MXK.c: 96: delay_us(10);
 19641  015DAC  0E00               	movlw	0
 19642  015DAE  0100               	movlb	0	; () banked
 19643  015DB0  6F61               	movwf	(delay_us@us+1)& (0+255),b
 19644  015DB2  0E0A               	movlw	10
 19645  015DB4  6F60               	movwf	delay_us@us& (0+255),b
 19646  015DB6  EC66  F0AC         	call	_delay_us	;wreg free
 19647  015DBA                     l1726:
 19648                           
 19649                           ;MXK.c: 97: }
 19650                           ;MXK.c: 98: return 1;
 19651  015DBA  0E01               	movlw	1
 19652  015DBC  0012               	return	
 19653  015DBE                     __end_of_MXK_BlockSwitchTo:
 19654                           	opt stack 0
 19655                           tosu	equ	0xFFF
 19656                           tosh	equ	0xFFE
 19657                           tosl	equ	0xFFD
 19658                           pclath	equ	0xFFA
 19659                           tblptru	equ	0xFF8
 19660                           tblptrh	equ	0xFF7
 19661                           tblptrl	equ	0xFF6
 19662                           tablat	equ	0xFF5
 19663                           prodh	equ	0xFF4
 19664                           prodl	equ	0xFF3
 19665                           intcon	equ	0xFF2
 19666                           postinc0	equ	0xFEE
 19667                           wreg	equ	0xFE8
 19668                           indf1	equ	0xFE7
 19669                           postdec1	equ	0xFE5
 19670                           fsr1h	equ	0xFE2
 19671                           fsr1l	equ	0xFE1
 19672                           indf2	equ	0xFDF
 19673                           postinc2	equ	0xFDE
 19674                           postdec2	equ	0xFDD
 19675                           plusw2	equ	0xFDB
 19676                           fsr2h	equ	0xFDA
 19677                           fsr2l	equ	0xFD9
 19678                           status	equ	0xFD8
 19679                           
 19680 ;; *************** function _delay_us *****************
 19681 ;; Defined at:
 19682 ;;		line 255 in file "Library/Types.c"
 19683 ;; Parameters:    Size  Location     Type
 19684 ;;  us              2    0[BANK0 ] unsigned short 
 19685 ;; Auto vars:     Size  Location     Type
 19686 ;;  u               4    2[BANK0 ] unsigned long 
 19687 ;; Return value:  Size  Location     Type
 19688 ;;                  1    wreg      void 
 19689 ;; Registers used:
 19690 ;;		wreg, status,2, status,0
 19691 ;; Tracked objects:
 19692 ;;		On entry : 0/0
 19693 ;;		On exit  : 0/0
 19694 ;;		Unchanged: 0/0
 19695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19696 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19697 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19699 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19700 ;;Total ram usage:        6 bytes
 19701 ;; Hardware stack levels used:    1
 19702 ;; Hardware stack levels required when called:    7
 19703 ;; This function calls:
 19704 ;;		Nothing
 19705 ;; This function is called by:
 19706 ;;		_MXK_BlockSwitchTo
 19707 ;;		_MXK_SwitchTo
 19708 ;; This function uses a non-reentrant model
 19709 ;;
 19710                           
 19711                           	psect	text90
 19712  0158CC                     __ptext90:
 19713                           	opt stack 0
 19714  0158CC                     _delay_us:
 19715                           	opt stack 21
 19716                           
 19717                           ;Types.c: 256: unsigned long u;
 19718                           ;Types.c: 257: while (us--) {
 19719                           
 19720                           ;incstack = 0
 19721  0158CC  D01C               	goto	u9240
 19722  0158CE                     l12519:
 19723                           
 19724                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 19725  0158CE  0E00               	movlw	0
 19726  0158D0  0100               	movlb	0	; () banked
 19727  0158D2  6F62               	movwf	delay_us@u& (0+255),b
 19728  0158D4  0E00               	movlw	0
 19729  0158D6  6F63               	movwf	(delay_us@u+1)& (0+255),b
 19730  0158D8  0E00               	movlw	0
 19731  0158DA  6F64               	movwf	(delay_us@u+2)& (0+255),b
 19732  0158DC  0E00               	movlw	0
 19733  0158DE  6F65               	movwf	(delay_us@u+3)& (0+255),b
 19734  0158E0                     l12521:
 19735                           
 19736                           ; BSR set to: 0
 19737  0158E0  0100               	movlb	0	; () banked
 19738  0158E2  5162               	movf	delay_us@u& (0+255),w,b
 19739  0158E4  0100               	movlb	0	; () banked
 19740  0158E6  1163               	iorwf	(delay_us@u+1)& (0+255),w,b
 19741  0158E8  0100               	movlb	0	; () banked
 19742  0158EA  1164               	iorwf	(delay_us@u+2)& (0+255),w,b
 19743  0158EC  0100               	movlb	0	; () banked
 19744  0158EE  1165               	iorwf	(delay_us@u+3)& (0+255),w,b
 19745  0158F0  A4D8               	btfss	status,2,c
 19746  0158F2  D009               	goto	u9240
 19747                           
 19748                           ; BSR set to: 0
 19749                           
 19750                           ; BSR set to: 0
 19751  0158F4  F000               	nop		; ;# 
 19752  0158F6  0E01               	movlw	1
 19753  0158F8  0100               	movlb	0	; () banked
 19754  0158FA  2762               	addwf	delay_us@u& (0+255),f,b
 19755  0158FC  0E00               	movlw	0
 19756  0158FE  2363               	addwfc	(delay_us@u+1)& (0+255),f,b
 19757  015900  2364               	addwfc	(delay_us@u+2)& (0+255),f,b
 19758  015902  2365               	addwfc	(delay_us@u+3)& (0+255),f,b
 19759  015904  D7ED               	goto	l12521
 19760  015906                     u9240:
 19761                           
 19762                           ; BSR set to: 0
 19763                           
 19764                           ; BSR set to: 0
 19765  015906  0100               	movlb	0	; () banked
 19766  015908  0760               	decf	delay_us@us& (0+255),f,b
 19767  01590A  A0D8               	btfss	status,0,c
 19768  01590C  0761               	decf	(delay_us@us+1)& (0+255),f,b
 19769  01590E  0100               	movlb	0	; () banked
 19770  015910  2960               	incf	delay_us@us& (0+255),w,b
 19771  015912  E1DD               	bnz	l12519
 19772  015914  0100               	movlb	0	; () banked
 19773  015916  2961               	incf	(delay_us@us+1)& (0+255),w,b
 19774  015918  B4D8               	btfsc	status,2,c
 19775  01591A  0012               	return	
 19776  01591C  D7D8               	goto	l832
 19777  01591E                     __end_of_delay_us:
 19778                           	opt stack 0
 19779                           tosu	equ	0xFFF
 19780                           tosh	equ	0xFFE
 19781                           tosl	equ	0xFFD
 19782                           pclath	equ	0xFFA
 19783                           tblptru	equ	0xFF8
 19784                           tblptrh	equ	0xFF7
 19785                           tblptrl	equ	0xFF6
 19786                           tablat	equ	0xFF5
 19787                           prodh	equ	0xFF4
 19788                           prodl	equ	0xFF3
 19789                           intcon	equ	0xFF2
 19790                           postinc0	equ	0xFEE
 19791                           wreg	equ	0xFE8
 19792                           indf1	equ	0xFE7
 19793                           postdec1	equ	0xFE5
 19794                           fsr1h	equ	0xFE2
 19795                           fsr1l	equ	0xFE1
 19796                           indf2	equ	0xFDF
 19797                           postinc2	equ	0xFDE
 19798                           postdec2	equ	0xFDD
 19799                           plusw2	equ	0xFDB
 19800                           fsr2h	equ	0xFDA
 19801                           fsr2l	equ	0xFD9
 19802                           status	equ	0xFD8
 19803                           
 19804 ;; *************** function _LCD_Init *****************
 19805 ;; Defined at:
 19806 ;;		line 172 in file "Library/LCD.c"
 19807 ;; Parameters:    Size  Location     Type
 19808 ;;		None
 19809 ;; Auto vars:     Size  Location     Type
 19810 ;;  i               2   55[BANK0 ] unsigned short 
 19811 ;; Return value:  Size  Location     Type
 19812 ;;                  1    wreg      void 
 19813 ;; Registers used:
 19814 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19815 ;; Tracked objects:
 19816 ;;		On entry : 0/0
 19817 ;;		On exit  : 0/0
 19818 ;;		Unchanged: 0/0
 19819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19821 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19822 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19823 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19824 ;;Total ram usage:        4 bytes
 19825 ;; Hardware stack levels used:    1
 19826 ;; Hardware stack levels required when called:   15
 19827 ;; This function calls:
 19828 ;;		_Configure_GPIOs
 19829 ;;		_LCD_Fill
 19830 ;;		_LCD_Write
 19831 ;;		_Set_Rotation
 19832 ;;		_delay_ms
 19833 ;; This function is called by:
 19834 ;;		_init
 19835 ;; This function uses a non-reentrant model
 19836 ;;
 19837                           
 19838                           	psect	text91
 19839  012E5A                     __ptext91:
 19840                           	opt stack 0
 19841  012E5A                     _LCD_Init:
 19842                           	opt stack 14
 19843                           
 19844                           ;LCD.c: 174: UINT16 i;
 19845                           ;LCD.c: 175: Configure_GPIOs();
 19846                           
 19847                           ; BSR set to: 0
 19848                           ;incstack = 0
 19849  012E5A  EC4D  F0A9         	call	_Configure_GPIOs	;wreg free
 19850                           
 19851                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
 19852  012E5E  0E00               	movlw	0
 19853  012E60  0100               	movlb	0	; () banked
 19854  012E62  6F98               	movwf	(LCD_Init@i+1)& (0+255),b
 19855  012E64  0E00               	movlw	0
 19856  012E66  6F97               	movwf	LCD_Init@i& (0+255),b
 19857                           
 19858                           ; BSR set to: 0
 19859  012E68  0100               	movlb	0	; () banked
 19860  012E6A  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 19861  012E6C  E106               	bnz	u10680
 19862  012E6E  0E59               	movlw	89
 19863  012E70  0100               	movlb	0	; () banked
 19864  012E72  5D97               	subwf	LCD_Init@i& (0+255),w,b
 19865  012E74  B0D8               	btfsc	status,0,c
 19866  012E76  D08B               	goto	u10720
 19867  012E78  D001               	goto	l85
 19868  012E7A                     u10680:
 19869                           
 19870                           ; BSR set to: 0
 19871  012E7A  D089               	goto	u10720
 19872  012E7C                     l85:
 19873                           
 19874                           ; BSR set to: 0
 19875                           ;LCD.c: 178: {
 19876                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
 19877                           
 19878                           ; BSR set to: 0
 19879  012E7C  90D8               	bcf	status,0,c
 19880  012E7E  0100               	movlb	0	; () banked
 19881  012E80  3597               	rlcf	LCD_Init@i& (0+255),w,b
 19882  012E82  6EF6               	movwf	tblptrl,c
 19883  012E84  0100               	movlb	0	; () banked
 19884  012E86  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 19885  012E88  6EF7               	movwf	tblptrh,c
 19886  012E8A  0E97               	movlw	low _InitList
 19887  012E8C  26F6               	addwf	tblptrl,f,c
 19888  012E8E  0EFC               	movlw	high _InitList
 19889  012E90  22F7               	addwfc	tblptrh,f,c
 19890  012E92                     	if	1	;There are 3 active tblptr bytes
 19891  012E92  6AF8               	clrf	tblptru,c
 19892  012E94  0E00               	movlw	low (__mediumconst shr (0+16))
 19893  012E96  22F8               	addwfc	tblptru,f,c
 19894  012E98                     	endif
 19895  012E98  0009               	tblrd		*+
 19896  012E9A  0E80               	movlw	128
 19897  012E9C  18F5               	xorwf	tablat,w,c
 19898  012E9E  0009               	tblrd		*+
 19899  012EA0  10F5               	iorwf	tablat,w,c
 19900  012EA2  A4D8               	btfss	status,2,c
 19901  012EA4  D022               	goto	l87
 19902                           
 19903                           ; BSR set to: 0
 19904  012EA6  0100               	movlb	0	; () banked
 19905  012EA8  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 19906  012EAA  E11F               	bnz	l13953
 19907  012EAC  0E58               	movlw	88
 19908  012EAE  0100               	movlb	0	; () banked
 19909  012EB0  5D97               	subwf	LCD_Init@i& (0+255),w,b
 19910  012EB2  B0D8               	btfsc	status,0,c
 19911  012EB4  D01A               	goto	l87
 19912                           
 19913                           ; BSR set to: 0
 19914                           ;LCD.c: 180: delay_ms(InitList[++i]);
 19915  012EB6  0100               	movlb	0	; () banked
 19916  012EB8  4B97               	infsnz	LCD_Init@i& (0+255),f,b
 19917  012EBA  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
 19918  012EBC  90D8               	bcf	status,0,c
 19919  012EBE  0100               	movlb	0	; () banked
 19920  012EC0  3597               	rlcf	LCD_Init@i& (0+255),w,b
 19921  012EC2  6EF6               	movwf	tblptrl,c
 19922  012EC4  0100               	movlb	0	; () banked
 19923  012EC6  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 19924  012EC8  6EF7               	movwf	tblptrh,c
 19925  012ECA  0E97               	movlw	low _InitList
 19926  012ECC  26F6               	addwf	tblptrl,f,c
 19927  012ECE  0EFC               	movlw	high _InitList
 19928  012ED0  22F7               	addwfc	tblptrh,f,c
 19929  012ED2                     	if	1	;There are 3 active tblptr bytes
 19930  012ED2  6AF8               	clrf	tblptru,c
 19931  012ED4  0E00               	movlw	low (__mediumconst shr (0+16))
 19932  012ED6  22F8               	addwfc	tblptru,f,c
 19933  012ED8                     	endif
 19934  012ED8  0009               	tblrd		*+
 19935  012EDA  CFF5 F060          	movff	tablat,delay_ms@ms
 19936  012EDE  000A               	tblrd		*-
 19937  012EE0  CFF5 F061          	movff	tablat,delay_ms@ms+1
 19938  012EE4  EC26  F0AA         	call	_delay_ms	;wreg free
 19939  012EE8  D04B               	goto	l90
 19940  012EEA                     l87:
 19941  012EEA                     l13953:
 19942                           
 19943                           ;LCD.c: 181: else
 19944                           ;LCD.c: 182: {
 19945                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
 19946  012EEA  90D8               	bcf	status,0,c
 19947  012EEC  0100               	movlb	0	; () banked
 19948  012EEE  3597               	rlcf	LCD_Init@i& (0+255),w,b
 19949  012EF0  6EF6               	movwf	tblptrl,c
 19950  012EF2  0100               	movlb	0	; () banked
 19951  012EF4  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 19952  012EF6  6EF7               	movwf	tblptrh,c
 19953  012EF8  0E97               	movlw	low _InitList
 19954  012EFA  26F6               	addwf	tblptrl,f,c
 19955  012EFC  0EFC               	movlw	high _InitList
 19956  012EFE  22F7               	addwfc	tblptrh,f,c
 19957  012F00                     	if	1	;There are 3 active tblptr bytes
 19958  012F00  6AF8               	clrf	tblptru,c
 19959  012F02  0E00               	movlw	low (__mediumconst shr (0+16))
 19960  012F04  22F8               	addwfc	tblptru,f,c
 19961  012F06                     	endif
 19962  012F06  0009               	tblrd		*+
 19963  012F08  0E00               	movlw	0
 19964  012F0A  5EF5               	subwf	tablat,f,c
 19965  012F0C  0009               	tblrd		*+
 19966  012F0E  0E01               	movlw	1
 19967  012F10  5AF5               	subwfb	tablat,f,c
 19968  012F12  A0D8               	btfss	status,0,c
 19969  012F14  D020               	goto	l89
 19970                           
 19971                           ; BSR set to: 0
 19972  012F16  0E00               	movlw	0
 19973  012F18  0100               	movlb	0	; () banked
 19974  012F1A  6F63               	movwf	LCD_Write@mode& (0+255),b
 19975  012F1C  90D8               	bcf	status,0,c
 19976  012F1E  0100               	movlb	0	; () banked
 19977  012F20  3597               	rlcf	LCD_Init@i& (0+255),w,b
 19978  012F22  6EF6               	movwf	tblptrl,c
 19979  012F24  0100               	movlb	0	; () banked
 19980  012F26  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 19981  012F28  6EF7               	movwf	tblptrh,c
 19982  012F2A  0E97               	movlw	low _InitList
 19983  012F2C  26F6               	addwf	tblptrl,f,c
 19984  012F2E  0EFC               	movlw	high _InitList
 19985  012F30  22F7               	addwfc	tblptrh,f,c
 19986  012F32                     	if	1	;There are 3 active tblptr bytes
 19987  012F32  6AF8               	clrf	tblptru,c
 19988  012F34  0E00               	movlw	low (__mediumconst shr (0+16))
 19989  012F36  22F8               	addwfc	tblptru,f,c
 19990  012F38                     	endif
 19991  012F38  0009               	tblrd		*+
 19992  012F3A  CFF5 F095          	movff	tablat,??_LCD_Init
 19993  012F3E  0009               	tblrd		*+
 19994  012F40  CFF5 F096          	movff	tablat,??_LCD_Init+1
 19995  012F44  C096  F095         	movff	??_LCD_Init+1,??_LCD_Init
 19996  012F48  0100               	movlb	0	; () banked
 19997  012F4A  6B96               	clrf	(??_LCD_Init+1)& (0+255),b
 19998  012F4C  0100               	movlb	0	; () banked
 19999  012F4E  5195               	movf	??_LCD_Init& (0+255),w,b
 20000  012F50  EC86  F0B0         	call	_LCD_Write
 20001  012F54  D015               	goto	l90
 20002  012F56                     l89:
 20003                           
 20004                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
 20005  012F56  0E01               	movlw	1
 20006  012F58  0100               	movlb	0	; () banked
 20007  012F5A  6F63               	movwf	LCD_Write@mode& (0+255),b
 20008  012F5C  90D8               	bcf	status,0,c
 20009  012F5E  0100               	movlb	0	; () banked
 20010  012F60  3597               	rlcf	LCD_Init@i& (0+255),w,b
 20011  012F62  6EF6               	movwf	tblptrl,c
 20012  012F64  0100               	movlb	0	; () banked
 20013  012F66  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 20014  012F68  6EF7               	movwf	tblptrh,c
 20015  012F6A  0E97               	movlw	low _InitList
 20016  012F6C  26F6               	addwf	tblptrl,f,c
 20017  012F6E  0EFC               	movlw	high _InitList
 20018  012F70  22F7               	addwfc	tblptrh,f,c
 20019  012F72                     	if	1	;There are 3 active tblptr bytes
 20020  012F72  6AF8               	clrf	tblptru,c
 20021  012F74  0E00               	movlw	low (__mediumconst shr (0+16))
 20022  012F76  22F8               	addwfc	tblptru,f,c
 20023  012F78                     	endif
 20024  012F78  0008               	tblrd		*
 20025  012F7A  50F5               	movf	tablat,w,c
 20026  012F7C  EC86  F0B0         	call	_LCD_Write
 20027  012F80                     l90:
 20028  012F80  0100               	movlb	0	; () banked
 20029  012F82  4B97               	infsnz	LCD_Init@i& (0+255),f,b
 20030  012F84  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
 20031                           
 20032                           ; BSR set to: 0
 20033  012F86  0100               	movlb	0	; () banked
 20034  012F88  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 20035  012F8A  E101               	bnz	l13963
 20036  012F8C  D770               	goto	L12
 20037  012F8E                     u10720:
 20038  012F8E                     l13963:
 20039                           
 20040                           ; BSR set to: 0
 20041                           ;LCD.c: 185: }
 20042                           ;LCD.c: 186: }
 20043                           ;LCD.c: 187: delay_ms(100);
 20044  012F8E  0E00               	movlw	0
 20045  012F90  0100               	movlb	0	; () banked
 20046  012F92  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 20047  012F94  0E64               	movlw	100
 20048  012F96  6F60               	movwf	delay_ms@ms& (0+255),b
 20049  012F98  EC26  F0AA         	call	_delay_ms	;wreg free
 20050                           
 20051                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
 20052  012F9C  0E00               	movlw	0
 20053  012F9E  0100               	movlb	0	; () banked
 20054  012FA0  6F63               	movwf	LCD_Write@mode& (0+255),b
 20055  012FA2  0E29               	movlw	41
 20056  012FA4  EC86  F0B0         	call	_LCD_Write
 20057                           
 20058                           ;LCD.c: 189: Set_Rotation(1);
 20059  012FA8  0E01               	movlw	1
 20060  012FAA  EC47  F0A5         	call	_Set_Rotation
 20061                           
 20062                           ;LCD.c: 191: delay_ms(100);
 20063  012FAE  0E00               	movlw	0
 20064  012FB0  0100               	movlb	0	; () banked
 20065  012FB2  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 20066  012FB4  0E64               	movlw	100
 20067  012FB6  6F60               	movwf	delay_ms@ms& (0+255),b
 20068  012FB8  EC26  F0AA         	call	_delay_ms	;wreg free
 20069                           
 20070                           ;LCD.c: 192: LCD_Fill(0x0000);
 20071  012FBC  0E00               	movlw	0
 20072  012FBE  0100               	movlb	0	; () banked
 20073  012FC0  6F6A               	movwf	(LCD_Fill@pColour+1)& (0+255),b
 20074  012FC2  0E00               	movlw	0
 20075  012FC4  6F69               	movwf	LCD_Fill@pColour& (0+255),b
 20076  012FC6  EC11  F0AC         	call	_LCD_Fill	;wreg free
 20077  012FCA  0012               	return		;funcret
 20078  012FCC                     __end_of_LCD_Init:
 20079                           	opt stack 0
 20080                           tosu	equ	0xFFF
 20081                           tosh	equ	0xFFE
 20082                           tosl	equ	0xFFD
 20083                           pclath	equ	0xFFA
 20084                           tblptru	equ	0xFF8
 20085                           tblptrh	equ	0xFF7
 20086                           tblptrl	equ	0xFF6
 20087                           tablat	equ	0xFF5
 20088                           prodh	equ	0xFF4
 20089                           prodl	equ	0xFF3
 20090                           intcon	equ	0xFF2
 20091                           postinc0	equ	0xFEE
 20092                           wreg	equ	0xFE8
 20093                           indf1	equ	0xFE7
 20094                           postdec1	equ	0xFE5
 20095                           fsr1h	equ	0xFE2
 20096                           fsr1l	equ	0xFE1
 20097                           indf2	equ	0xFDF
 20098                           postinc2	equ	0xFDE
 20099                           postdec2	equ	0xFDD
 20100                           plusw2	equ	0xFDB
 20101                           fsr2h	equ	0xFDA
 20102                           fsr2l	equ	0xFD9
 20103                           status	equ	0xFD8
 20104                           
 20105 ;; *************** function _Set_Rotation *****************
 20106 ;; Defined at:
 20107 ;;		line 248 in file "Library/LCD.c"
 20108 ;; Parameters:    Size  Location     Type
 20109 ;;  m               1    wreg     unsigned char 
 20110 ;; Auto vars:     Size  Location     Type
 20111 ;;  m               1    5[BANK0 ] unsigned char 
 20112 ;;  rotation        1    6[BANK0 ] unsigned char 
 20113 ;; Return value:  Size  Location     Type
 20114 ;;                  1    wreg      void 
 20115 ;; Registers used:
 20116 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20117 ;; Tracked objects:
 20118 ;;		On entry : 0/0
 20119 ;;		On exit  : 0/0
 20120 ;;		Unchanged: 0/0
 20121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20123 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20125 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20126 ;;Total ram usage:        2 bytes
 20127 ;; Hardware stack levels used:    1
 20128 ;; Hardware stack levels required when called:    9
 20129 ;; This function calls:
 20130 ;;		_LCD_Write
 20131 ;; This function is called by:
 20132 ;;		_LCD_Init
 20133 ;; This function uses a non-reentrant model
 20134 ;;
 20135                           
 20136                           	psect	text92
 20137  014A8E                     __ptext92:
 20138                           	opt stack 0
 20139  014A8E                     _Set_Rotation:
 20140                           	opt stack 19
 20141                           
 20142                           ;incstack = 0
 20143                           ;Set_Rotation@m stored from wreg
 20144  014A8E  0100               	movlb	0	; () banked
 20145  014A90  6F65               	movwf	Set_Rotation@m& (0+255),b
 20146                           
 20147                           ;LCD.c: 250: UINT8 rotation = 0x00;
 20148  014A92  0E00               	movlw	0
 20149  014A94  0100               	movlb	0	; () banked
 20150  014A96  6F66               	movwf	Set_Rotation@rotation& (0+255),b
 20151                           
 20152                           ; BSR set to: 0
 20153                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
 20154  014A98  0E00               	movlw	0
 20155  014A9A  0100               	movlb	0	; () banked
 20156  014A9C  6F63               	movwf	LCD_Write@mode& (0+255),b
 20157  014A9E  0E36               	movlw	54
 20158  014AA0  EC86  F0B0         	call	_LCD_Write
 20159                           
 20160                           ;LCD.c: 253: rotation = (m % 4);
 20161  014AA4  0100               	movlb	0	; () banked
 20162  014AA6  5165               	movf	Set_Rotation@m& (0+255),w,b
 20163  014AA8  0B03               	andlw	3
 20164  014AAA  0100               	movlb	0	; () banked
 20165  014AAC  6F66               	movwf	Set_Rotation@rotation& (0+255),b
 20166                           
 20167                           ;LCD.c: 255: switch(rotation)
 20168  014AAE  D02C               	goto	l117
 20169  014AB0                     
 20170                           ; BSR set to: 0
 20171                           ;LCD.c: 258: {
 20172                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
 20173                           
 20174                           ; BSR set to: 0
 20175  014AB0  0E01               	movlw	1
 20176  014AB2  0100               	movlb	0	; () banked
 20177  014AB4  6F63               	movwf	LCD_Write@mode& (0+255),b
 20178  014AB6  0EC8               	movlw	200
 20179  014AB8  EC86  F0B0         	call	_LCD_Write
 20180                           
 20181                           ;LCD.c: 260: w = 128;
 20182  014ABC  0E80               	movlw	128
 20183  014ABE  6E50               	movwf	_w,c
 20184                           
 20185                           ;LCD.c: 261: l = 128;
 20186  014AC0  0E80               	movlw	128
 20187  014AC2  6E4F               	movwf	_l,c
 20188                           
 20189                           ;LCD.c: 262: break;
 20190  014AC4  0012               	return	
 20191  014AC6                     
 20192                           ;LCD.c: 265: {
 20193                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
 20194  014AC6  0E01               	movlw	1
 20195  014AC8  0100               	movlb	0	; () banked
 20196  014ACA  6F63               	movwf	LCD_Write@mode& (0+255),b
 20197  014ACC  0EA8               	movlw	168
 20198  014ACE  EC86  F0B0         	call	_LCD_Write
 20199                           
 20200                           ;LCD.c: 267: w = 128;
 20201  014AD2  0E80               	movlw	128
 20202  014AD4  6E50               	movwf	_w,c
 20203                           
 20204                           ;LCD.c: 268: l = 128;
 20205  014AD6  0E80               	movlw	128
 20206  014AD8  6E4F               	movwf	_l,c
 20207                           
 20208                           ;LCD.c: 269: break;
 20209  014ADA  0012               	return	
 20210  014ADC                     
 20211                           ;LCD.c: 272: {
 20212                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
 20213  014ADC  0E01               	movlw	1
 20214  014ADE  0100               	movlb	0	; () banked
 20215  014AE0  6F63               	movwf	LCD_Write@mode& (0+255),b
 20216  014AE2  0E08               	movlw	8
 20217  014AE4  EC86  F0B0         	call	_LCD_Write
 20218                           
 20219                           ;LCD.c: 274: w = 128;
 20220  014AE8  0E80               	movlw	128
 20221  014AEA  6E50               	movwf	_w,c
 20222                           
 20223                           ;LCD.c: 275: l = 128;
 20224  014AEC  0E80               	movlw	128
 20225  014AEE  6E4F               	movwf	_l,c
 20226                           
 20227                           ;LCD.c: 276: break;
 20228  014AF0  0012               	return	
 20229  014AF2                     
 20230                           ;LCD.c: 279: {
 20231                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
 20232  014AF2  0E01               	movlw	1
 20233  014AF4  0100               	movlb	0	; () banked
 20234  014AF6  6F63               	movwf	LCD_Write@mode& (0+255),b
 20235  014AF8  0E68               	movlw	104
 20236  014AFA  EC86  F0B0         	call	_LCD_Write
 20237                           
 20238                           ;LCD.c: 281: w = 128;
 20239  014AFE  0E80               	movlw	128
 20240  014B00  6E50               	movwf	_w,c
 20241                           
 20242                           ;LCD.c: 282: l = 128;
 20243  014B02  0E80               	movlw	128
 20244  014B04  6E4F               	movwf	_l,c
 20245                           
 20246                           ;LCD.c: 284: }
 20247                           ;LCD.c: 285: }
 20248                           
 20249                           ;LCD.c: 283: break;
 20250  014B06  0012               	return	
 20251  014B08                     l117:
 20252  014B08  0100               	movlb	0	; () banked
 20253  014B0A  5166               	movf	Set_Rotation@rotation& (0+255),w,b
 20254                           
 20255                           ; Switch size 1, requested type "space"
 20256                           ; Number of cases is 4, Range of values is 0 to 3
 20257                           ; switch strategies available:
 20258                           ; Name         Instructions Cycles
 20259                           ; simple_byte           13     7 (average)
 20260                           ;	Chosen strategy is simple_byte
 20261  014B0C  0A00               	xorlw	0	; case 0
 20262  014B0E  B4D8               	btfsc	status,2,c
 20263  014B10  D7CF               	goto	l118
 20264  014B12  0A01               	xorlw	1	; case 1
 20265  014B14  B4D8               	btfsc	status,2,c
 20266  014B16  D7D7               	goto	l120
 20267  014B18  0A03               	xorlw	3	; case 2
 20268  014B1A  B4D8               	btfsc	status,2,c
 20269  014B1C  D7DF               	goto	l121
 20270  014B1E  0A01               	xorlw	1	; case 3
 20271  014B20  A4D8               	btfss	status,2,c
 20272  014B22  0012               	return	
 20273  014B24  D7E6               	goto	l122
 20274  014B26                     __end_of_Set_Rotation:
 20275                           	opt stack 0
 20276                           tosu	equ	0xFFF
 20277                           tosh	equ	0xFFE
 20278                           tosl	equ	0xFFD
 20279                           pclath	equ	0xFFA
 20280                           tblptru	equ	0xFF8
 20281                           tblptrh	equ	0xFF7
 20282                           tblptrl	equ	0xFF6
 20283                           tablat	equ	0xFF5
 20284                           prodh	equ	0xFF4
 20285                           prodl	equ	0xFF3
 20286                           intcon	equ	0xFF2
 20287                           postinc0	equ	0xFEE
 20288                           wreg	equ	0xFE8
 20289                           indf1	equ	0xFE7
 20290                           postdec1	equ	0xFE5
 20291                           fsr1h	equ	0xFE2
 20292                           fsr1l	equ	0xFE1
 20293                           indf2	equ	0xFDF
 20294                           postinc2	equ	0xFDE
 20295                           postdec2	equ	0xFDD
 20296                           plusw2	equ	0xFDB
 20297                           fsr2h	equ	0xFDA
 20298                           fsr2l	equ	0xFD9
 20299                           status	equ	0xFD8
 20300                           
 20301 ;; *************** function _LCD_Fill *****************
 20302 ;; Defined at:
 20303 ;;		line 287 in file "Library/LCD.c"
 20304 ;; Parameters:    Size  Location     Type
 20305 ;;  pColour         2    9[BANK0 ] unsigned short 
 20306 ;; Auto vars:     Size  Location     Type
 20307 ;;  j               1   12[BANK0 ] unsigned char 
 20308 ;;  i               1   11[BANK0 ] unsigned char 
 20309 ;; Return value:  Size  Location     Type
 20310 ;;                  1    wreg      void 
 20311 ;; Registers used:
 20312 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20313 ;; Tracked objects:
 20314 ;;		On entry : 0/0
 20315 ;;		On exit  : 0/0
 20316 ;;		Unchanged: 0/0
 20317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20318 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20319 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20321 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20322 ;;Total ram usage:        4 bytes
 20323 ;; Hardware stack levels used:    1
 20324 ;; Hardware stack levels required when called:   10
 20325 ;; This function calls:
 20326 ;;		_LCD_Word_Write
 20327 ;;		_Set_Addr_Window
 20328 ;; This function is called by:
 20329 ;;		_LCD_Init
 20330 ;; This function uses a non-reentrant model
 20331 ;;
 20332                           
 20333                           	psect	text93
 20334  015822                     __ptext93:
 20335                           	opt stack 0
 20336  015822                     _LCD_Fill:
 20337                           	opt stack 18
 20338                           
 20339                           ;LCD.c: 296: UINT8 i = 0x00;
 20340                           
 20341                           ;incstack = 0
 20342  015822  0E00               	movlw	0
 20343  015824  0100               	movlb	0	; () banked
 20344  015826  6F6B               	movwf	LCD_Fill@i& (0+255),b
 20345                           
 20346                           ;LCD.c: 297: UINT8 j = 0x00;
 20347  015828  0E00               	movlw	0
 20348  01582A  0100               	movlb	0	; () banked
 20349  01582C  6F6C               	movwf	LCD_Fill@j& (0+255),b
 20350                           
 20351                           ; BSR set to: 0
 20352                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
 20353  01582E  0E00               	movlw	0
 20354  015830  0100               	movlb	0	; () banked
 20355  015832  6F65               	movwf	Set_Addr_Window@ys& (0+255),b
 20356  015834  0450               	decf	_w,w,c
 20357  015836  0100               	movlb	0	; () banked
 20358  015838  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 20359  01583A  044F               	decf	_l,w,c
 20360  01583C  0100               	movlb	0	; () banked
 20361  01583E  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 20362  015840  0E00               	movlw	0
 20363  015842  EC60  F0A2         	call	_Set_Addr_Window
 20364                           
 20365                           ;LCD.c: 299: for (j = l; j > 0; j--)
 20366  015846  C04F  F06C         	movff	_l,LCD_Fill@j
 20367  01584A                     l13267:
 20368  01584A  0100               	movlb	0	; () banked
 20369  01584C  516C               	movf	LCD_Fill@j& (0+255),w,b
 20370  01584E  0100               	movlb	0	; () banked
 20371  015850  B4D8               	btfsc	status,2,c
 20372  015852  0012               	return	
 20373                           
 20374                           ; BSR set to: 0
 20375                           ;LCD.c: 300: for (i = w; i > 0; i--)
 20376                           
 20377                           ; BSR set to: 0
 20378  015854  C050  F06B         	movff	_w,LCD_Fill@i
 20379  015858                     l13271:
 20380                           
 20381                           ; BSR set to: 0
 20382  015858  0100               	movlb	0	; () banked
 20383  01585A  516B               	movf	LCD_Fill@i& (0+255),w,b
 20384  01585C  0100               	movlb	0	; () banked
 20385  01585E  B4D8               	btfsc	status,2,c
 20386  015860  D009               	goto	u9760
 20387                           
 20388                           ; BSR set to: 0
 20389                           ;LCD.c: 301: LCD_Word_Write(pColour);
 20390                           
 20391                           ; BSR set to: 0
 20392                           
 20393                           ; BSR set to: 0
 20394  015862  C069  F065         	movff	LCD_Fill@pColour,LCD_Word_Write@value
 20395  015866  C06A  F066         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
 20396  01586A  ECE7  F0B0         	call	_LCD_Word_Write	;wreg free
 20397  01586E  0100               	movlb	0	; () banked
 20398  015870  076B               	decf	LCD_Fill@i& (0+255),f,b
 20399  015872  D7F2               	goto	l13271
 20400  015874                     u9760:
 20401                           
 20402                           ; BSR set to: 0
 20403                           
 20404                           ; BSR set to: 0
 20405  015874  0100               	movlb	0	; () banked
 20406  015876  076C               	decf	LCD_Fill@j& (0+255),f,b
 20407  015878  D7E8               	goto	l13267
 20408  01587A                     __end_of_LCD_Fill:
 20409                           	opt stack 0
 20410                           tosu	equ	0xFFF
 20411                           tosh	equ	0xFFE
 20412                           tosl	equ	0xFFD
 20413                           pclath	equ	0xFFA
 20414                           tblptru	equ	0xFF8
 20415                           tblptrh	equ	0xFF7
 20416                           tblptrl	equ	0xFF6
 20417                           tablat	equ	0xFF5
 20418                           prodh	equ	0xFF4
 20419                           prodl	equ	0xFF3
 20420                           intcon	equ	0xFF2
 20421                           postinc0	equ	0xFEE
 20422                           wreg	equ	0xFE8
 20423                           indf1	equ	0xFE7
 20424                           postdec1	equ	0xFE5
 20425                           fsr1h	equ	0xFE2
 20426                           fsr1l	equ	0xFE1
 20427                           indf2	equ	0xFDF
 20428                           postinc2	equ	0xFDE
 20429                           postdec2	equ	0xFDD
 20430                           plusw2	equ	0xFDB
 20431                           fsr2h	equ	0xFDA
 20432                           fsr2l	equ	0xFD9
 20433                           status	equ	0xFD8
 20434                           
 20435 ;; *************** function _Set_Addr_Window *****************
 20436 ;; Defined at:
 20437 ;;		line 214 in file "Library/LCD.c"
 20438 ;; Parameters:    Size  Location     Type
 20439 ;;  xs              1    wreg     unsigned char 
 20440 ;;  ys              1    5[BANK0 ] unsigned char 
 20441 ;;  xe              1    6[BANK0 ] unsigned char 
 20442 ;;  ye              1    7[BANK0 ] unsigned char 
 20443 ;; Auto vars:     Size  Location     Type
 20444 ;;  xs              1    8[BANK0 ] unsigned char 
 20445 ;; Return value:  Size  Location     Type
 20446 ;;                  1    wreg      void 
 20447 ;; Registers used:
 20448 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20449 ;; Tracked objects:
 20450 ;;		On entry : 0/0
 20451 ;;		On exit  : 0/0
 20452 ;;		Unchanged: 0/0
 20453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20454 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20455 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20457 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20458 ;;Total ram usage:        4 bytes
 20459 ;; Hardware stack levels used:    1
 20460 ;; Hardware stack levels required when called:    9
 20461 ;; This function calls:
 20462 ;;		_LCD_Write
 20463 ;; This function is called by:
 20464 ;;		_LCD_Fill
 20465 ;;		_LCD_FillRectangle
 20466 ;;		_LCD_DrawField
 20467 ;;		_RAM_Address_Set
 20468 ;;		_LCD_DrawPixel
 20469 ;; This function uses a non-reentrant model
 20470 ;;
 20471                           
 20472                           	psect	text94
 20473  0144C0                     __ptext94:
 20474                           	opt stack 0
 20475  0144C0                     _Set_Addr_Window:
 20476                           	opt stack 18
 20477                           
 20478                           ; BSR set to: 0
 20479                           ;incstack = 0
 20480                           ;Set_Addr_Window@xs stored from wreg
 20481  0144C0  0100               	movlb	0	; () banked
 20482  0144C2  6F68               	movwf	Set_Addr_Window@xs& (0+255),b
 20483                           
 20484                           ;LCD.c: 216: ys+=2;
 20485  0144C4  0E02               	movlw	2
 20486  0144C6  0100               	movlb	0	; () banked
 20487  0144C8  2765               	addwf	Set_Addr_Window@ys& (0+255),f,b
 20488                           
 20489                           ;LCD.c: 217: ye+=2;
 20490  0144CA  0E02               	movlw	2
 20491  0144CC  0100               	movlb	0	; () banked
 20492  0144CE  2767               	addwf	Set_Addr_Window@ye& (0+255),f,b
 20493                           
 20494                           ;LCD.c: 218: xs+=3;
 20495  0144D0  0E03               	movlw	3
 20496  0144D2  0100               	movlb	0	; () banked
 20497  0144D4  2768               	addwf	Set_Addr_Window@xs& (0+255),f,b
 20498                           
 20499                           ;LCD.c: 219: xe+=3;
 20500  0144D6  0E03               	movlw	3
 20501  0144D8  0100               	movlb	0	; () banked
 20502  0144DA  2766               	addwf	Set_Addr_Window@xe& (0+255),f,b
 20503                           
 20504                           ; BSR set to: 0
 20505                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 20506  0144DC  0E00               	movlw	0
 20507  0144DE  0100               	movlb	0	; () banked
 20508  0144E0  6F63               	movwf	LCD_Write@mode& (0+255),b
 20509  0144E2  0E2A               	movlw	42
 20510  0144E4  EC86  F0B0         	call	_LCD_Write
 20511                           
 20512                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 20513  0144E8  0E01               	movlw	1
 20514  0144EA  0100               	movlb	0	; () banked
 20515  0144EC  6F63               	movwf	LCD_Write@mode& (0+255),b
 20516  0144EE  0E00               	movlw	0
 20517  0144F0  EC86  F0B0         	call	_LCD_Write
 20518                           
 20519                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 20520  0144F4  0E01               	movlw	1
 20521  0144F6  0100               	movlb	0	; () banked
 20522  0144F8  6F63               	movwf	LCD_Write@mode& (0+255),b
 20523  0144FA  0100               	movlb	0	; () banked
 20524  0144FC  5168               	movf	Set_Addr_Window@xs& (0+255),w,b
 20525  0144FE  EC86  F0B0         	call	_LCD_Write
 20526                           
 20527                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 20528  014502  0E01               	movlw	1
 20529  014504  0100               	movlb	0	; () banked
 20530  014506  6F63               	movwf	LCD_Write@mode& (0+255),b
 20531  014508  0E00               	movlw	0
 20532  01450A  EC86  F0B0         	call	_LCD_Write
 20533                           
 20534                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 20535  01450E  0E01               	movlw	1
 20536  014510  0100               	movlb	0	; () banked
 20537  014512  6F63               	movwf	LCD_Write@mode& (0+255),b
 20538  014514  0100               	movlb	0	; () banked
 20539  014516  5166               	movf	Set_Addr_Window@xe& (0+255),w,b
 20540  014518  EC86  F0B0         	call	_LCD_Write
 20541                           
 20542                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 20543  01451C  0E00               	movlw	0
 20544  01451E  0100               	movlb	0	; () banked
 20545  014520  6F63               	movwf	LCD_Write@mode& (0+255),b
 20546  014522  0E2B               	movlw	43
 20547  014524  EC86  F0B0         	call	_LCD_Write
 20548                           
 20549                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 20550  014528  0E01               	movlw	1
 20551  01452A  0100               	movlb	0	; () banked
 20552  01452C  6F63               	movwf	LCD_Write@mode& (0+255),b
 20553  01452E  0E00               	movlw	0
 20554  014530  EC86  F0B0         	call	_LCD_Write
 20555                           
 20556                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 20557  014534  0E01               	movlw	1
 20558  014536  0100               	movlb	0	; () banked
 20559  014538  6F63               	movwf	LCD_Write@mode& (0+255),b
 20560  01453A  0100               	movlb	0	; () banked
 20561  01453C  5165               	movf	Set_Addr_Window@ys& (0+255),w,b
 20562  01453E  EC86  F0B0         	call	_LCD_Write
 20563                           
 20564                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 20565  014542  0E01               	movlw	1
 20566  014544  0100               	movlb	0	; () banked
 20567  014546  6F63               	movwf	LCD_Write@mode& (0+255),b
 20568  014548  0E00               	movlw	0
 20569  01454A  EC86  F0B0         	call	_LCD_Write
 20570                           
 20571                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 20572  01454E  0E01               	movlw	1
 20573  014550  0100               	movlb	0	; () banked
 20574  014552  6F63               	movwf	LCD_Write@mode& (0+255),b
 20575  014554  0100               	movlb	0	; () banked
 20576  014556  5167               	movf	Set_Addr_Window@ye& (0+255),w,b
 20577  014558  EC86  F0B0         	call	_LCD_Write
 20578                           
 20579                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 20580  01455C  0E00               	movlw	0
 20581  01455E  0100               	movlb	0	; () banked
 20582  014560  6F63               	movwf	LCD_Write@mode& (0+255),b
 20583  014562  0E2C               	movlw	44
 20584  014564  EC86  F0B0         	call	_LCD_Write
 20585  014568  0012               	return		;funcret
 20586  01456A                     __end_of_Set_Addr_Window:
 20587                           	opt stack 0
 20588                           tosu	equ	0xFFF
 20589                           tosh	equ	0xFFE
 20590                           tosl	equ	0xFFD
 20591                           pclath	equ	0xFFA
 20592                           tblptru	equ	0xFF8
 20593                           tblptrh	equ	0xFF7
 20594                           tblptrl	equ	0xFF6
 20595                           tablat	equ	0xFF5
 20596                           prodh	equ	0xFF4
 20597                           prodl	equ	0xFF3
 20598                           intcon	equ	0xFF2
 20599                           postinc0	equ	0xFEE
 20600                           wreg	equ	0xFE8
 20601                           indf1	equ	0xFE7
 20602                           postdec1	equ	0xFE5
 20603                           fsr1h	equ	0xFE2
 20604                           fsr1l	equ	0xFE1
 20605                           indf2	equ	0xFDF
 20606                           postinc2	equ	0xFDE
 20607                           postdec2	equ	0xFDD
 20608                           plusw2	equ	0xFDB
 20609                           fsr2h	equ	0xFDA
 20610                           fsr2l	equ	0xFD9
 20611                           status	equ	0xFD8
 20612                           
 20613 ;; *************** function _LCD_Word_Write *****************
 20614 ;; Defined at:
 20615 ;;		line 198 in file "Library/LCD.c"
 20616 ;; Parameters:    Size  Location     Type
 20617 ;;  value           2    5[BANK0 ] unsigned short 
 20618 ;; Auto vars:     Size  Location     Type
 20619 ;;		None
 20620 ;; Return value:  Size  Location     Type
 20621 ;;                  1    wreg      void 
 20622 ;; Registers used:
 20623 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20624 ;; Tracked objects:
 20625 ;;		On entry : 0/0
 20626 ;;		On exit  : 0/0
 20627 ;;		Unchanged: 0/0
 20628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20629 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20632 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20633 ;;Total ram usage:        2 bytes
 20634 ;; Hardware stack levels used:    1
 20635 ;; Hardware stack levels required when called:    9
 20636 ;; This function calls:
 20637 ;;		_LCD_Write
 20638 ;; This function is called by:
 20639 ;;		_LCD_Fill
 20640 ;;		_LCD_FillRectangle
 20641 ;;		_LCD_DrawField
 20642 ;;		_LCD_DrawPixel
 20643 ;; This function uses a non-reentrant model
 20644 ;;
 20645                           
 20646                           	psect	text95
 20647  0161CE                     __ptext95:
 20648                           	opt stack 0
 20649  0161CE                     _LCD_Word_Write:
 20650                           	opt stack 18
 20651                           
 20652                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 20653                           
 20654                           ;incstack = 0
 20655  0161CE  0E01               	movlw	1
 20656  0161D0  0100               	movlb	0	; () banked
 20657  0161D2  6F63               	movwf	LCD_Write@mode& (0+255),b
 20658  0161D4  0100               	movlb	0	; () banked
 20659  0161D6  5166               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 20660  0161D8  EC86  F0B0         	call	_LCD_Write
 20661                           
 20662                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 20663  0161DC  0E01               	movlw	1
 20664  0161DE  0100               	movlb	0	; () banked
 20665  0161E0  6F63               	movwf	LCD_Write@mode& (0+255),b
 20666  0161E2  0100               	movlb	0	; () banked
 20667  0161E4  5165               	movf	LCD_Word_Write@value& (0+255),w,b
 20668  0161E6  EC86  F0B0         	call	_LCD_Write
 20669  0161EA  0012               	return		;funcret
 20670  0161EC                     __end_of_LCD_Word_Write:
 20671                           	opt stack 0
 20672                           tosu	equ	0xFFF
 20673                           tosh	equ	0xFFE
 20674                           tosl	equ	0xFFD
 20675                           pclath	equ	0xFFA
 20676                           tblptru	equ	0xFF8
 20677                           tblptrh	equ	0xFF7
 20678                           tblptrl	equ	0xFF6
 20679                           tablat	equ	0xFF5
 20680                           prodh	equ	0xFF4
 20681                           prodl	equ	0xFF3
 20682                           intcon	equ	0xFF2
 20683                           postinc0	equ	0xFEE
 20684                           wreg	equ	0xFE8
 20685                           indf1	equ	0xFE7
 20686                           postdec1	equ	0xFE5
 20687                           fsr1h	equ	0xFE2
 20688                           fsr1l	equ	0xFE1
 20689                           indf2	equ	0xFDF
 20690                           postinc2	equ	0xFDE
 20691                           postdec2	equ	0xFDD
 20692                           plusw2	equ	0xFDB
 20693                           fsr2h	equ	0xFDA
 20694                           fsr2l	equ	0xFD9
 20695                           status	equ	0xFD8
 20696                           
 20697 ;; *************** function _LCD_Write *****************
 20698 ;; Defined at:
 20699 ;;		line 67 in file "Library/LCD.c"
 20700 ;; Parameters:    Size  Location     Type
 20701 ;;  value           1    wreg     unsigned char 
 20702 ;;  mode            1    3[BANK0 ] enum E6761
 20703 ;; Auto vars:     Size  Location     Type
 20704 ;;  value           1    4[BANK0 ] unsigned char 
 20705 ;; Return value:  Size  Location     Type
 20706 ;;                  1    wreg      void 
 20707 ;; Registers used:
 20708 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20709 ;; Tracked objects:
 20710 ;;		On entry : 0/0
 20711 ;;		On exit  : 0/0
 20712 ;;		Unchanged: 0/0
 20713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20714 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20715 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20717 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20718 ;;Total ram usage:        2 bytes
 20719 ;; Hardware stack levels used:    1
 20720 ;; Hardware stack levels required when called:    8
 20721 ;; This function calls:
 20722 ;;		_Mode_Set
 20723 ;;		_SPI_Send
 20724 ;; This function is called by:
 20725 ;;		_LCD_Init
 20726 ;;		_LCD_Word_Write
 20727 ;;		_Set_Addr_Window
 20728 ;;		_Set_Rotation
 20729 ;;		_LCD_WriteCMD
 20730 ;;		_LCD_WriteData
 20731 ;;		_LCD_Data_Write
 20732 ;;		_LCD_Data_Write_4k
 20733 ;;		_Invert_Display
 20734 ;; This function uses a non-reentrant model
 20735 ;;
 20736                           
 20737                           	psect	text96
 20738  01610C                     __ptext96:
 20739                           	opt stack 0
 20740  01610C                     _LCD_Write:
 20741                           	opt stack 18
 20742                           
 20743                           ;incstack = 0
 20744                           ;LCD_Write@value stored from wreg
 20745  01610C  0100               	movlb	0	; () banked
 20746  01610E  6F64               	movwf	LCD_Write@value& (0+255),b
 20747                           
 20748                           ;LCD.c: 89: Mode_Set(mode);
 20749  016110  0100               	movlb	0	; () banked
 20750  016112  5163               	movf	LCD_Write@mode& (0+255),w,b
 20751  016114  ECFE  F0B1         	call	_Mode_Set
 20752                           
 20753                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 20754  016118  0E6D               	movlw	low _SPI2
 20755  01611A  0100               	movlb	0	; () banked
 20756  01611C  6F60               	movwf	SPI_Send@pInput& (0+255),b
 20757  01611E  0E03               	movlw	high _SPI2
 20758  016120  0100               	movlb	0	; () banked
 20759  016122  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 20760  016124  C064  F062         	movff	LCD_Write@value,SPI_Send@pData
 20761  016128  ECBB  F0A9         	call	_SPI_Send	;wreg free
 20762  01612C  0012               	return		;funcret
 20763  01612E                     __end_of_LCD_Write:
 20764                           	opt stack 0
 20765                           tosu	equ	0xFFF
 20766                           tosh	equ	0xFFE
 20767                           tosl	equ	0xFFD
 20768                           pclath	equ	0xFFA
 20769                           tblptru	equ	0xFF8
 20770                           tblptrh	equ	0xFF7
 20771                           tblptrl	equ	0xFF6
 20772                           tablat	equ	0xFF5
 20773                           prodh	equ	0xFF4
 20774                           prodl	equ	0xFF3
 20775                           intcon	equ	0xFF2
 20776                           postinc0	equ	0xFEE
 20777                           wreg	equ	0xFE8
 20778                           indf1	equ	0xFE7
 20779                           postdec1	equ	0xFE5
 20780                           fsr1h	equ	0xFE2
 20781                           fsr1l	equ	0xFE1
 20782                           indf2	equ	0xFDF
 20783                           postinc2	equ	0xFDE
 20784                           postdec2	equ	0xFDD
 20785                           plusw2	equ	0xFDB
 20786                           fsr2h	equ	0xFDA
 20787                           fsr2l	equ	0xFD9
 20788                           status	equ	0xFD8
 20789                           
 20790 ;; *************** function _SPI_Send *****************
 20791 ;; Defined at:
 20792 ;;		line 226 in file "Library/SPI.c"
 20793 ;; Parameters:    Size  Location     Type
 20794 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 20795 ;;		 -> SPI1(11), SPI2(11), 
 20796 ;;  pData           1    2[BANK0 ] unsigned char 
 20797 ;; Auto vars:     Size  Location     Type
 20798 ;;		None
 20799 ;; Return value:  Size  Location     Type
 20800 ;;                  1    wreg      unsigned char 
 20801 ;; Registers used:
 20802 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 20803 ;; Tracked objects:
 20804 ;;		On entry : 0/0
 20805 ;;		On exit  : 0/0
 20806 ;;		Unchanged: 0/0
 20807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20808 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20811 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20812 ;;Total ram usage:        3 bytes
 20813 ;; Hardware stack levels used:    1
 20814 ;; Hardware stack levels required when called:    7
 20815 ;; This function calls:
 20816 ;;		Nothing
 20817 ;; This function is called by:
 20818 ;;		_LCD_Write
 20819 ;;		_OutSeg
 20820 ;; This function uses a non-reentrant model
 20821 ;;
 20822                           
 20823                           	psect	text97
 20824  015376                     __ptext97:
 20825                           	opt stack 0
 20826  015376                     _SPI_Send:
 20827                           	opt stack 20
 20828                           
 20829                           ;SPI.c: 253: switch (pInput->mChannel)
 20830                           
 20831                           ;incstack = 0
 20832  015376  D026               	goto	l678
 20833  015378                     
 20834                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 20835  015378  C0EE  FFD9         	movff	_PortC+4,fsr2l
 20836  01537C  C0EF  FFDA         	movff	_PortC+5,fsr2h
 20837  015380  0100               	movlb	0	; () banked
 20838  015382  94DF               	bcf	indf2,2,c
 20839                           
 20840                           ; BSR set to: 0
 20841                           ;SPI.c: 257: SSP1BUF = pData;
 20842  015384  C062  FFC9         	movff	SPI_Send@pData,4041	;volatile
 20843  015388                     
 20844                           ; BSR set to: 0
 20845  015388  A0C7               	btfss	4039,0,c	;volatile
 20846  01538A  D7FE               	goto	l681
 20847                           
 20848                           ;SPI.c: 259: pData = SSP1BUF;
 20849  01538C  CFC9 F062          	movff	4041,SPI_Send@pData	;volatile
 20850                           
 20851                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 20852  015390  C0EE  FFD9         	movff	_PortC+4,fsr2l
 20853  015394  C0EF  FFDA         	movff	_PortC+5,fsr2h
 20854  015398  0100               	movlb	0	; () banked
 20855  01539A  84DF               	bsf	indf2,2,c
 20856                           
 20857                           ; BSR set to: 0
 20858                           ;SPI.c: 261: return pData;
 20859                           ;	Return value of _SPI_Send is never used
 20860  01539C  0012               	return	
 20861  01539E                     
 20862                           ; BSR set to: 0
 20863                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 20864                           
 20865                           ; BSR set to: 0
 20866  01539E  C3A4  FFD9         	movff	_PortD+4,fsr2l
 20867  0153A2  C3A5  FFDA         	movff	_PortD+5,fsr2h
 20868  0153A6  0103               	movlb	3	; () banked
 20869  0153A8  9EDF               	bcf	indf2,7,c
 20870                           
 20871                           ; BSR set to: 3
 20872                           ;SPI.c: 264: SSP2BUF = pData;
 20873  0153AA  C062  FF6F         	movff	SPI_Send@pData,3951	;volatile
 20874  0153AE                     
 20875                           ; BSR set to: 3
 20876  0153AE  A06D               	btfss	3949,0,c	;volatile
 20877  0153B0  D7FE               	goto	l686
 20878                           
 20879                           ;SPI.c: 266: pData = SSP2BUF;
 20880  0153B2  CF6F F062          	movff	3951,SPI_Send@pData	;volatile
 20881                           
 20882                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 20883  0153B6  C3A4  FFD9         	movff	_PortD+4,fsr2l
 20884  0153BA  C3A5  FFDA         	movff	_PortD+5,fsr2h
 20885  0153BE  0103               	movlb	3	; () banked
 20886  0153C0  8EDF               	bsf	indf2,7,c
 20887                           
 20888                           ; BSR set to: 3
 20889                           ;SPI.c: 269: };
 20890                           
 20891                           ; BSR set to: 3
 20892                           ;SPI.c: 268: return pData;
 20893                           ;	Return value of _SPI_Send is never used
 20894  0153C2  0012               	return	
 20895  0153C4                     l678:
 20896                           
 20897                           ; BSR set to: 3
 20898  0153C4  0100               	movlb	0	; () banked
 20899  0153C6  EE20 F002          	lfsr	2,2
 20900  0153CA  5160               	movf	SPI_Send@pInput& (0+255),w,b
 20901  0153CC  26D9               	addwf	fsr2l,f,c
 20902  0153CE  5161               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 20903  0153D0  22DA               	addwfc	fsr2h,f,c
 20904  0153D2  50DF               	movf	indf2,w,c
 20905                           
 20906                           ; Switch size 1, requested type "space"
 20907                           ; Number of cases is 2, Range of values is 0 to 1
 20908                           ; switch strategies available:
 20909                           ; Name         Instructions Cycles
 20910                           ; simple_byte            7     4 (average)
 20911                           ;	Chosen strategy is simple_byte
 20912  0153D4  0A00               	xorlw	0	; case 0
 20913  0153D6  B4D8               	btfsc	status,2,c
 20914  0153D8  D7CF               	goto	l679
 20915  0153DA  0A01               	xorlw	1	; case 1
 20916  0153DC  A4D8               	btfss	status,2,c
 20917  0153DE  0012               	return	
 20918  0153E0  D7DE               	goto	l684
 20919  0153E2                     __end_of_SPI_Send:
 20920                           	opt stack 0
 20921                           tosu	equ	0xFFF
 20922                           tosh	equ	0xFFE
 20923                           tosl	equ	0xFFD
 20924                           pclath	equ	0xFFA
 20925                           tblptru	equ	0xFF8
 20926                           tblptrh	equ	0xFF7
 20927                           tblptrl	equ	0xFF6
 20928                           tablat	equ	0xFF5
 20929                           prodh	equ	0xFF4
 20930                           prodl	equ	0xFF3
 20931                           intcon	equ	0xFF2
 20932                           postinc0	equ	0xFEE
 20933                           wreg	equ	0xFE8
 20934                           indf1	equ	0xFE7
 20935                           postdec1	equ	0xFE5
 20936                           fsr1h	equ	0xFE2
 20937                           fsr1l	equ	0xFE1
 20938                           indf2	equ	0xFDF
 20939                           postinc2	equ	0xFDE
 20940                           postdec2	equ	0xFDD
 20941                           plusw2	equ	0xFDB
 20942                           fsr2h	equ	0xFDA
 20943                           fsr2l	equ	0xFD9
 20944                           status	equ	0xFD8
 20945                           
 20946 ;; *************** function _Mode_Set *****************
 20947 ;; Defined at:
 20948 ;;		line 40 in file "Library/LCD.c"
 20949 ;; Parameters:    Size  Location     Type
 20950 ;;  pMode           1    wreg     enum E6761
 20951 ;; Auto vars:     Size  Location     Type
 20952 ;;  pMode           1    0[BANK0 ] enum E6761
 20953 ;; Return value:  Size  Location     Type
 20954 ;;                  1    wreg      void 
 20955 ;; Registers used:
 20956 ;;		wreg
 20957 ;; Tracked objects:
 20958 ;;		On entry : 0/0
 20959 ;;		On exit  : 0/0
 20960 ;;		Unchanged: 0/0
 20961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20963 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20965 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20966 ;;Total ram usage:        1 bytes
 20967 ;; Hardware stack levels used:    1
 20968 ;; Hardware stack levels required when called:    7
 20969 ;; This function calls:
 20970 ;;		Nothing
 20971 ;; This function is called by:
 20972 ;;		_LCD_Write
 20973 ;; This function uses a non-reentrant model
 20974 ;;
 20975                           
 20976                           	psect	text98
 20977  0163FC                     __ptext98:
 20978                           	opt stack 0
 20979  0163FC                     _Mode_Set:
 20980                           	opt stack 18
 20981                           
 20982                           ;incstack = 0
 20983                           ;Mode_Set@pMode stored from wreg
 20984  0163FC  0100               	movlb	0	; () banked
 20985  0163FE  6F60               	movwf	Mode_Set@pMode& (0+255),b
 20986                           
 20987                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 20988  016400  0100               	movlb	0	; () banked
 20989  016402  B160               	btfsc	Mode_Set@pMode& (0+255),0,b
 20990  016404  D002               	bra	u8855
 20991  016406  9E85               	bcf	3973,7,c	;volatile
 20992  016408  D001               	bra	u8856
 20993  01640A                     u8855:
 20994  01640A  8E85               	bsf	3973,7,c	;volatile
 20995  01640C                     u8856:
 20996  01640C  0012               	return		;funcret
 20997  01640E                     __end_of_Mode_Set:
 20998                           	opt stack 0
 20999                           tosu	equ	0xFFF
 21000                           tosh	equ	0xFFE
 21001                           tosl	equ	0xFFD
 21002                           pclath	equ	0xFFA
 21003                           tblptru	equ	0xFF8
 21004                           tblptrh	equ	0xFF7
 21005                           tblptrl	equ	0xFF6
 21006                           tablat	equ	0xFF5
 21007                           prodh	equ	0xFF4
 21008                           prodl	equ	0xFF3
 21009                           intcon	equ	0xFF2
 21010                           postinc0	equ	0xFEE
 21011                           wreg	equ	0xFE8
 21012                           indf1	equ	0xFE7
 21013                           postdec1	equ	0xFE5
 21014                           fsr1h	equ	0xFE2
 21015                           fsr1l	equ	0xFE1
 21016                           indf2	equ	0xFDF
 21017                           postinc2	equ	0xFDE
 21018                           postdec2	equ	0xFDD
 21019                           plusw2	equ	0xFDB
 21020                           fsr2h	equ	0xFDA
 21021                           fsr2l	equ	0xFD9
 21022                           status	equ	0xFD8
 21023                           
 21024 ;; *************** function _Configure_GPIOs *****************
 21025 ;; Defined at:
 21026 ;;		line 46 in file "Library/LCD.c"
 21027 ;; Parameters:    Size  Location     Type
 21028 ;;		None
 21029 ;; Auto vars:     Size  Location     Type
 21030 ;;		None
 21031 ;; Return value:  Size  Location     Type
 21032 ;;                  1    wreg      void 
 21033 ;; Registers used:
 21034 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21035 ;; Tracked objects:
 21036 ;;		On entry : 0/0
 21037 ;;		On exit  : 0/0
 21038 ;;		Unchanged: 0/0
 21039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21041 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21043 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21044 ;;Total ram usage:        0 bytes
 21045 ;; Hardware stack levels used:    1
 21046 ;; Hardware stack levels required when called:   14
 21047 ;; This function calls:
 21048 ;;		_LCD_Reset
 21049 ;;		_Port_SetPinType
 21050 ;;		_SPI_Init
 21051 ;;		_SPI_MaxSpeed
 21052 ;; This function is called by:
 21053 ;;		_LCD_Init
 21054 ;; This function uses a non-reentrant model
 21055 ;;
 21056                           
 21057                           	psect	text99
 21058  01529A                     __ptext99:
 21059                           	opt stack 0
 21060  01529A                     _Configure_GPIOs:
 21061                           	opt stack 14
 21062                           
 21063                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
 21064                           
 21065                           ;incstack = 0
 21066  01529A  0EBE               	movlw	low _PortF
 21067  01529C  0100               	movlb	0	; () banked
 21068  01529E  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 21069  0152A0  0E03               	movlw	high _PortF
 21070  0152A2  0100               	movlb	0	; () banked
 21071  0152A4  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 21072  0152A6  0E07               	movlw	7
 21073  0152A8  0100               	movlb	0	; () banked
 21074  0152AA  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 21075  0152AC  0E03               	movlw	3
 21076  0152AE  0100               	movlb	0	; () banked
 21077  0152B0  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 21078  0152B2  EC32  F093         	call	_Port_SetPinType	;wreg free
 21079                           
 21080                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
 21081  0152B6  0EBE               	movlw	low _PortF
 21082  0152B8  0100               	movlb	0	; () banked
 21083  0152BA  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 21084  0152BC  0E03               	movlw	high _PortF
 21085  0152BE  0100               	movlb	0	; () banked
 21086  0152C0  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 21087  0152C2  0E06               	movlw	6
 21088  0152C4  0100               	movlb	0	; () banked
 21089  0152C6  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 21090  0152C8  0E03               	movlw	3
 21091  0152CA  0100               	movlb	0	; () banked
 21092  0152CC  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 21093  0152CE  EC32  F093         	call	_Port_SetPinType	;wreg free
 21094                           
 21095                           ;LCD.c: 55: LCD_Reset();
 21096  0152D2  ECB7  F0AC         	call	_LCD_Reset	;wreg free
 21097                           
 21098                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
 21099  0152D6  0EC0               	movlw	192
 21100  0152D8  0100               	movlb	0	; () banked
 21101  0152DA  6F8D               	movwf	SPI_Init@pClock& (0+255),b
 21102  0152DC  0EC6               	movlw	198
 21103  0152DE  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
 21104  0152E0  0E2D               	movlw	45
 21105  0152E2  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
 21106  0152E4  0E00               	movlw	0
 21107  0152E6  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
 21108  0152E8  0E01               	movlw	1
 21109  0152EA  0100               	movlb	0	; () banked
 21110  0152EC  6F91               	movwf	SPI_Init@pChannel& (0+255),b
 21111  0152EE  0E01               	movlw	1
 21112  0152F0  0100               	movlb	0	; () banked
 21113  0152F2  6F92               	movwf	SPI_Init@pMode& (0+255),b
 21114  0152F4  EC53  F082         	call	_SPI_Init	;wreg free
 21115                           
 21116                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
 21117  0152F8  0E6D               	movlw	low _SPI2
 21118  0152FA  0100               	movlb	0	; () banked
 21119  0152FC  6F6F               	movwf	SPI_MaxSpeed@pInput& (0+255),b
 21120  0152FE  0E03               	movlw	high _SPI2
 21121  015300  0100               	movlb	0	; () banked
 21122  015302  6F70               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
 21123  015304  ECD9  F0A8         	call	_SPI_MaxSpeed	;wreg free
 21124  015308  0012               	return		;funcret
 21125  01530A                     __end_of_Configure_GPIOs:
 21126                           	opt stack 0
 21127                           tosu	equ	0xFFF
 21128                           tosh	equ	0xFFE
 21129                           tosl	equ	0xFFD
 21130                           pclath	equ	0xFFA
 21131                           tblptru	equ	0xFF8
 21132                           tblptrh	equ	0xFF7
 21133                           tblptrl	equ	0xFF6
 21134                           tablat	equ	0xFF5
 21135                           prodh	equ	0xFF4
 21136                           prodl	equ	0xFF3
 21137                           intcon	equ	0xFF2
 21138                           postinc0	equ	0xFEE
 21139                           wreg	equ	0xFE8
 21140                           indf1	equ	0xFE7
 21141                           postdec1	equ	0xFE5
 21142                           fsr1h	equ	0xFE2
 21143                           fsr1l	equ	0xFE1
 21144                           indf2	equ	0xFDF
 21145                           postinc2	equ	0xFDE
 21146                           postdec2	equ	0xFDD
 21147                           plusw2	equ	0xFDB
 21148                           fsr2h	equ	0xFDA
 21149                           fsr2l	equ	0xFD9
 21150                           status	equ	0xFD8
 21151                           
 21152 ;; *************** function _SPI_MaxSpeed *****************
 21153 ;; Defined at:
 21154 ;;		line 201 in file "Library/SPI.c"
 21155 ;; Parameters:    Size  Location     Type
 21156 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 21157 ;;		 -> SPI2(11), 
 21158 ;; Auto vars:     Size  Location     Type
 21159 ;;		None
 21160 ;; Return value:  Size  Location     Type
 21161 ;;                  1    wreg      void 
 21162 ;; Registers used:
 21163 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21164 ;; Tracked objects:
 21165 ;;		On entry : 0/0
 21166 ;;		On exit  : 0/0
 21167 ;;		Unchanged: 0/0
 21168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21169 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21172 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21173 ;;Total ram usage:        2 bytes
 21174 ;; Hardware stack levels used:    1
 21175 ;; Hardware stack levels required when called:    9
 21176 ;; This function calls:
 21177 ;;		_Byte_SetBit
 21178 ;;		_Byte_SetQuad
 21179 ;; This function is called by:
 21180 ;;		_Configure_GPIOs
 21181 ;; This function uses a non-reentrant model
 21182 ;;
 21183                           
 21184                           	psect	text100
 21185  0151B2                     __ptext100:
 21186                           	opt stack 0
 21187  0151B2                     _SPI_MaxSpeed:
 21188                           	opt stack 18
 21189                           
 21190                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 21191                           
 21192                           ;incstack = 0
 21193  0151B2  0100               	movlb	0	; () banked
 21194  0151B4  EE20 F006          	lfsr	2,6
 21195  0151B8  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 21196  0151BA  26D9               	addwf	fsr2l,f,c
 21197  0151BC  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 21198  0151BE  22DA               	addwfc	fsr2h,f,c
 21199  0151C0  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 21200  0151C4  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 21201  0151C8  0E05               	movlw	5
 21202  0151CA  0100               	movlb	0	; () banked
 21203  0151CC  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 21204  0151CE  0E00               	movlw	0
 21205  0151D0  0100               	movlb	0	; () banked
 21206  0151D2  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 21207  0151D4  ECF6  F0AA         	call	_Byte_SetBit	;wreg free
 21208                           
 21209                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
 21210  0151D8  0100               	movlb	0	; () banked
 21211  0151DA  EE20 F006          	lfsr	2,6
 21212  0151DE  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 21213  0151E0  26D9               	addwf	fsr2l,f,c
 21214  0151E2  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 21215  0151E4  22DA               	addwfc	fsr2h,f,c
 21216  0151E6  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 21217  0151EA  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 21218  0151EE  0E00               	movlw	0
 21219  0151F0  0100               	movlb	0	; () banked
 21220  0151F2  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 21221  0151F4  0E00               	movlw	0
 21222  0151F6  0100               	movlb	0	; () banked
 21223  0151F8  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 21224  0151FA  ECA8  F0B0         	call	_Byte_SetQuad	;wreg free
 21225                           
 21226                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 21227  0151FE  0100               	movlb	0	; () banked
 21228  015200  EE20 F006          	lfsr	2,6
 21229  015204  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 21230  015206  26D9               	addwf	fsr2l,f,c
 21231  015208  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 21232  01520A  22DA               	addwfc	fsr2h,f,c
 21233  01520C  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 21234  015210  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 21235  015214  0E05               	movlw	5
 21236  015216  0100               	movlb	0	; () banked
 21237  015218  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 21238  01521A  0E01               	movlw	1
 21239  01521C  0100               	movlb	0	; () banked
 21240  01521E  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 21241  015220  ECF6  F0AA         	call	_Byte_SetBit	;wreg free
 21242  015224  0012               	return		;funcret
 21243  015226                     __end_of_SPI_MaxSpeed:
 21244                           	opt stack 0
 21245                           tosu	equ	0xFFF
 21246                           tosh	equ	0xFFE
 21247                           tosl	equ	0xFFD
 21248                           pclath	equ	0xFFA
 21249                           tblptru	equ	0xFF8
 21250                           tblptrh	equ	0xFF7
 21251                           tblptrl	equ	0xFF6
 21252                           tablat	equ	0xFF5
 21253                           prodh	equ	0xFF4
 21254                           prodl	equ	0xFF3
 21255                           intcon	equ	0xFF2
 21256                           postinc0	equ	0xFEE
 21257                           wreg	equ	0xFE8
 21258                           indf1	equ	0xFE7
 21259                           postdec1	equ	0xFE5
 21260                           fsr1h	equ	0xFE2
 21261                           fsr1l	equ	0xFE1
 21262                           indf2	equ	0xFDF
 21263                           postinc2	equ	0xFDE
 21264                           postdec2	equ	0xFDD
 21265                           plusw2	equ	0xFDB
 21266                           fsr2h	equ	0xFDA
 21267                           fsr2l	equ	0xFD9
 21268                           status	equ	0xFD8
 21269                           
 21270 ;; *************** function _LCD_Reset *****************
 21271 ;; Defined at:
 21272 ;;		line 95 in file "Library/LCD.c"
 21273 ;; Parameters:    Size  Location     Type
 21274 ;;		None
 21275 ;; Auto vars:     Size  Location     Type
 21276 ;;		None
 21277 ;; Return value:  Size  Location     Type
 21278 ;;                  1    wreg      void 
 21279 ;; Registers used:
 21280 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21281 ;; Tracked objects:
 21282 ;;		On entry : 0/0
 21283 ;;		On exit  : 0/0
 21284 ;;		Unchanged: 0/0
 21285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21289 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21290 ;;Total ram usage:        0 bytes
 21291 ;; Hardware stack levels used:    1
 21292 ;; Hardware stack levels required when called:   13
 21293 ;; This function calls:
 21294 ;;		_LED_Toggle
 21295 ;;		_Reset_High
 21296 ;;		_Reset_Low
 21297 ;;		_delay_ms
 21298 ;; This function is called by:
 21299 ;;		_Configure_GPIOs
 21300 ;; This function uses a non-reentrant model
 21301 ;;
 21302                           
 21303                           	psect	text101
 21304  01596E                     __ptext101:
 21305                           	opt stack 0
 21306  01596E                     _LCD_Reset:
 21307                           	opt stack 14
 21308                           
 21309                           ;LCD.c: 97: Reset_High();
 21310                           
 21311                           ;incstack = 0
 21312  01596E  EC05  F0B1         	call	_Reset_High	;wreg free
 21313                           
 21314                           ;LCD.c: 98: LED_Toggle(eLED2);
 21315  015972  0E01               	movlw	1
 21316  015974  EC4E  F0AD         	call	_LED_Toggle
 21317                           
 21318                           ;LCD.c: 99: delay_ms(0x80);
 21319  015978  0E00               	movlw	0
 21320  01597A  0100               	movlb	0	; () banked
 21321  01597C  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 21322  01597E  0E80               	movlw	128
 21323  015980  6F60               	movwf	delay_ms@ms& (0+255),b
 21324  015982  EC26  F0AA         	call	_delay_ms	;wreg free
 21325                           
 21326                           ;LCD.c: 100: LED_Toggle(eLED2);
 21327  015986  0E01               	movlw	1
 21328  015988  EC4E  F0AD         	call	_LED_Toggle
 21329                           
 21330                           ;LCD.c: 101: Reset_Low();
 21331  01598C  ECF6  F0B0         	call	_Reset_Low	;wreg free
 21332                           
 21333                           ;LCD.c: 102: delay_ms(0x80);
 21334  015990  0E00               	movlw	0
 21335  015992  0100               	movlb	0	; () banked
 21336  015994  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 21337  015996  0E80               	movlw	128
 21338  015998  6F60               	movwf	delay_ms@ms& (0+255),b
 21339  01599A  EC26  F0AA         	call	_delay_ms	;wreg free
 21340                           
 21341                           ;LCD.c: 103: LED_Toggle(eLED2);
 21342  01599E  0E01               	movlw	1
 21343  0159A0  EC4E  F0AD         	call	_LED_Toggle
 21344                           
 21345                           ;LCD.c: 104: Reset_High();
 21346  0159A4  EC05  F0B1         	call	_Reset_High	;wreg free
 21347                           
 21348                           ;LCD.c: 105: delay_ms(0x80);
 21349  0159A8  0E00               	movlw	0
 21350  0159AA  0100               	movlb	0	; () banked
 21351  0159AC  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 21352  0159AE  0E80               	movlw	128
 21353  0159B0  6F60               	movwf	delay_ms@ms& (0+255),b
 21354  0159B2  EC26  F0AA         	call	_delay_ms	;wreg free
 21355                           
 21356                           ;LCD.c: 106: LED_Toggle(eLED2);
 21357  0159B6  0E01               	movlw	1
 21358  0159B8  EC4E  F0AD         	call	_LED_Toggle
 21359  0159BC  0012               	return		;funcret
 21360  0159BE                     __end_of_LCD_Reset:
 21361                           	opt stack 0
 21362                           tosu	equ	0xFFF
 21363                           tosh	equ	0xFFE
 21364                           tosl	equ	0xFFD
 21365                           pclath	equ	0xFFA
 21366                           tblptru	equ	0xFF8
 21367                           tblptrh	equ	0xFF7
 21368                           tblptrl	equ	0xFF6
 21369                           tablat	equ	0xFF5
 21370                           prodh	equ	0xFF4
 21371                           prodl	equ	0xFF3
 21372                           intcon	equ	0xFF2
 21373                           postinc0	equ	0xFEE
 21374                           wreg	equ	0xFE8
 21375                           indf1	equ	0xFE7
 21376                           postdec1	equ	0xFE5
 21377                           fsr1h	equ	0xFE2
 21378                           fsr1l	equ	0xFE1
 21379                           indf2	equ	0xFDF
 21380                           postinc2	equ	0xFDE
 21381                           postdec2	equ	0xFDD
 21382                           plusw2	equ	0xFDB
 21383                           fsr2h	equ	0xFDA
 21384                           fsr2l	equ	0xFD9
 21385                           status	equ	0xFD8
 21386                           
 21387 ;; *************** function _delay_ms *****************
 21388 ;; Defined at:
 21389 ;;		line 240 in file "Library/Types.c"
 21390 ;; Parameters:    Size  Location     Type
 21391 ;;  ms              2    0[BANK0 ] unsigned short 
 21392 ;; Auto vars:     Size  Location     Type
 21393 ;;  u               4    2[BANK0 ] volatile unsigned long 
 21394 ;; Return value:  Size  Location     Type
 21395 ;;                  1    wreg      void 
 21396 ;; Registers used:
 21397 ;;		wreg, status,2, status,0
 21398 ;; Tracked objects:
 21399 ;;		On entry : 0/0
 21400 ;;		On exit  : 0/0
 21401 ;;		Unchanged: 0/0
 21402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21403 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21404 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21406 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21407 ;;Total ram usage:        6 bytes
 21408 ;; Hardware stack levels used:    1
 21409 ;; Hardware stack levels required when called:    7
 21410 ;; This function calls:
 21411 ;;		Nothing
 21412 ;; This function is called by:
 21413 ;;		_LCD_Reset
 21414 ;;		_LCD_Init
 21415 ;;		_MXK_Init
 21416 ;;		_init
 21417 ;; This function uses a non-reentrant model
 21418 ;;
 21419                           
 21420                           	psect	text102
 21421  01544C                     __ptext102:
 21422                           	opt stack 0
 21423  01544C                     _delay_ms:
 21424                           	opt stack 22
 21425                           
 21426                           ;Types.c: 242: volatile unsigned long u;
 21427                           ;Types.c: 243: while (ms--)
 21428                           
 21429                           ;incstack = 0
 21430  01544C  D01F               	goto	u9120
 21431  01544E                     l12415:
 21432                           
 21433                           ;Types.c: 244: {
 21434                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 21435  01544E  0E00               	movlw	0
 21436  015450  0100               	movlb	0	; () banked
 21437  015452  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
 21438  015454  0E00               	movlw	0
 21439  015456  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 21440  015458  0E00               	movlw	0
 21441  01545A  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 21442  01545C  0E00               	movlw	0
 21443  01545E  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 21444  015460                     l12417:
 21445                           
 21446                           ; BSR set to: 0
 21447  015460  0100               	movlb	0	; () banked
 21448  015462  5165               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 21449  015464  0100               	movlb	0	; () banked
 21450  015466  1164               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 21451  015468  E111               	bnz	l12423
 21452  01546A  0EB0               	movlw	176
 21453  01546C  0100               	movlb	0	; () banked
 21454  01546E  5D62               	subwf	delay_ms@u& (0+255),w,b	;volatile
 21455  015470  0E04               	movlw	4
 21456  015472  0100               	movlb	0	; () banked
 21457  015474  5963               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 21458  015476  B0D8               	btfsc	status,0,c
 21459  015478  D009               	goto	u9120
 21460                           
 21461                           ; BSR set to: 0
 21462                           
 21463                           ; BSR set to: 0
 21464  01547A  F000               	nop		; ;# 
 21465  01547C  0E01               	movlw	1
 21466  01547E  0100               	movlb	0	; () banked
 21467  015480  2762               	addwf	delay_ms@u& (0+255),f,b	;volatile
 21468  015482  0E00               	movlw	0
 21469  015484  2363               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 21470  015486  2364               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 21471  015488  2365               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 21472  01548A  D7EA               	goto	l12417
 21473  01548C                     u9120:
 21474  01548C                     l12423:
 21475  01548C  0100               	movlb	0	; () banked
 21476  01548E  0760               	decf	delay_ms@ms& (0+255),f,b
 21477  015490  A0D8               	btfss	status,0,c
 21478  015492  0761               	decf	(delay_ms@ms+1)& (0+255),f,b
 21479  015494  0100               	movlb	0	; () banked
 21480  015496  2960               	incf	delay_ms@ms& (0+255),w,b
 21481  015498  E1DA               	bnz	l12415
 21482  01549A  0100               	movlb	0	; () banked
 21483  01549C  2961               	incf	(delay_ms@ms+1)& (0+255),w,b
 21484  01549E  A4D8               	btfss	status,2,c
 21485  0154A0  D7D6               	goto	l824
 21486                           
 21487                           ; BSR set to: 0
 21488                           ;Types.c: 251: }
 21489                           ;Types.c: 252: }
 21490                           ;Types.c: 253: u = 0x8008;
 21491                           
 21492                           ; BSR set to: 0
 21493  0154A2  0E08               	movlw	8
 21494  0154A4  0100               	movlb	0	; () banked
 21495  0154A6  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
 21496  0154A8  0E80               	movlw	128
 21497  0154AA  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 21498  0154AC  0E00               	movlw	0
 21499  0154AE  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 21500  0154B0  0E00               	movlw	0
 21501  0154B2  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 21502                           
 21503                           ; BSR set to: 0
 21504  0154B4  0012               	return		;funcret
 21505  0154B6                     __end_of_delay_ms:
 21506                           	opt stack 0
 21507                           tosu	equ	0xFFF
 21508                           tosh	equ	0xFFE
 21509                           tosl	equ	0xFFD
 21510                           pclath	equ	0xFFA
 21511                           tblptru	equ	0xFF8
 21512                           tblptrh	equ	0xFF7
 21513                           tblptrl	equ	0xFF6
 21514                           tablat	equ	0xFF5
 21515                           prodh	equ	0xFF4
 21516                           prodl	equ	0xFF3
 21517                           intcon	equ	0xFF2
 21518                           postinc0	equ	0xFEE
 21519                           wreg	equ	0xFE8
 21520                           indf1	equ	0xFE7
 21521                           postdec1	equ	0xFE5
 21522                           fsr1h	equ	0xFE2
 21523                           fsr1l	equ	0xFE1
 21524                           indf2	equ	0xFDF
 21525                           postinc2	equ	0xFDE
 21526                           postdec2	equ	0xFDD
 21527                           plusw2	equ	0xFDB
 21528                           fsr2h	equ	0xFDA
 21529                           fsr2l	equ	0xFD9
 21530                           status	equ	0xFD8
 21531                           
 21532 ;; *************** function _Reset_Low *****************
 21533 ;; Defined at:
 21534 ;;		line 32 in file "Library/LCD.c"
 21535 ;; Parameters:    Size  Location     Type
 21536 ;;		None
 21537 ;; Auto vars:     Size  Location     Type
 21538 ;;		None
 21539 ;; Return value:  Size  Location     Type
 21540 ;;                  1    wreg      void 
 21541 ;; Registers used:
 21542 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21543 ;; Tracked objects:
 21544 ;;		On entry : 0/0
 21545 ;;		On exit  : 0/0
 21546 ;;		Unchanged: 0/0
 21547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21551 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21552 ;;Total ram usage:        0 bytes
 21553 ;; Hardware stack levels used:    1
 21554 ;; Hardware stack levels required when called:   11
 21555 ;; This function calls:
 21556 ;;		_Port_SetPin
 21557 ;; This function is called by:
 21558 ;;		_LCD_Reset
 21559 ;; This function uses a non-reentrant model
 21560 ;;
 21561                           
 21562                           	psect	text103
 21563  0161EC                     __ptext103:
 21564                           	opt stack 0
 21565  0161EC                     _Reset_Low:
 21566                           	opt stack 15
 21567                           
 21568                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
 21569                           
 21570                           ; BSR set to: 0
 21571                           ;incstack = 0
 21572  0161EC  0EBE               	movlw	low _PortF
 21573  0161EE  0100               	movlb	0	; () banked
 21574  0161F0  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 21575  0161F2  0E03               	movlw	high _PortF
 21576  0161F4  0100               	movlb	0	; () banked
 21577  0161F6  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 21578  0161F8  0E06               	movlw	6
 21579  0161FA  0100               	movlb	0	; () banked
 21580  0161FC  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 21581  0161FE  0E01               	movlw	1
 21582  016200  0100               	movlb	0	; () banked
 21583  016202  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 21584  016204  EC79  F09F         	call	_Port_SetPin	;wreg free
 21585  016208  0012               	return		;funcret
 21586  01620A                     __end_of_Reset_Low:
 21587                           	opt stack 0
 21588                           tosu	equ	0xFFF
 21589                           tosh	equ	0xFFE
 21590                           tosl	equ	0xFFD
 21591                           pclath	equ	0xFFA
 21592                           tblptru	equ	0xFF8
 21593                           tblptrh	equ	0xFF7
 21594                           tblptrl	equ	0xFF6
 21595                           tablat	equ	0xFF5
 21596                           prodh	equ	0xFF4
 21597                           prodl	equ	0xFF3
 21598                           intcon	equ	0xFF2
 21599                           postinc0	equ	0xFEE
 21600                           wreg	equ	0xFE8
 21601                           indf1	equ	0xFE7
 21602                           postdec1	equ	0xFE5
 21603                           fsr1h	equ	0xFE2
 21604                           fsr1l	equ	0xFE1
 21605                           indf2	equ	0xFDF
 21606                           postinc2	equ	0xFDE
 21607                           postdec2	equ	0xFDD
 21608                           plusw2	equ	0xFDB
 21609                           fsr2h	equ	0xFDA
 21610                           fsr2l	equ	0xFD9
 21611                           status	equ	0xFD8
 21612                           
 21613 ;; *************** function _Reset_High *****************
 21614 ;; Defined at:
 21615 ;;		line 36 in file "Library/LCD.c"
 21616 ;; Parameters:    Size  Location     Type
 21617 ;;		None
 21618 ;; Auto vars:     Size  Location     Type
 21619 ;;		None
 21620 ;; Return value:  Size  Location     Type
 21621 ;;                  1    wreg      void 
 21622 ;; Registers used:
 21623 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21624 ;; Tracked objects:
 21625 ;;		On entry : 0/0
 21626 ;;		On exit  : 0/0
 21627 ;;		Unchanged: 0/0
 21628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21632 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21633 ;;Total ram usage:        0 bytes
 21634 ;; Hardware stack levels used:    1
 21635 ;; Hardware stack levels required when called:   11
 21636 ;; This function calls:
 21637 ;;		_Port_SetPin
 21638 ;; This function is called by:
 21639 ;;		_LCD_Reset
 21640 ;; This function uses a non-reentrant model
 21641 ;;
 21642                           
 21643                           	psect	text104
 21644  01620A                     __ptext104:
 21645                           	opt stack 0
 21646  01620A                     _Reset_High:
 21647                           	opt stack 15
 21648                           
 21649                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
 21650                           
 21651                           ;incstack = 0
 21652  01620A  0EBE               	movlw	low _PortF
 21653  01620C  0100               	movlb	0	; () banked
 21654  01620E  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 21655  016210  0E03               	movlw	high _PortF
 21656  016212  0100               	movlb	0	; () banked
 21657  016214  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 21658  016216  0E06               	movlw	6
 21659  016218  0100               	movlb	0	; () banked
 21660  01621A  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 21661  01621C  0E00               	movlw	0
 21662  01621E  0100               	movlb	0	; () banked
 21663  016220  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 21664  016222  EC79  F09F         	call	_Port_SetPin	;wreg free
 21665  016226  0012               	return		;funcret
 21666  016228                     __end_of_Reset_High:
 21667                           	opt stack 0
 21668                           tosu	equ	0xFFF
 21669                           tosh	equ	0xFFE
 21670                           tosl	equ	0xFFD
 21671                           pclath	equ	0xFFA
 21672                           tblptru	equ	0xFF8
 21673                           tblptrh	equ	0xFF7
 21674                           tblptrl	equ	0xFF6
 21675                           tablat	equ	0xFF5
 21676                           prodh	equ	0xFF4
 21677                           prodl	equ	0xFF3
 21678                           intcon	equ	0xFF2
 21679                           postinc0	equ	0xFEE
 21680                           wreg	equ	0xFE8
 21681                           indf1	equ	0xFE7
 21682                           postdec1	equ	0xFE5
 21683                           fsr1h	equ	0xFE2
 21684                           fsr1l	equ	0xFE1
 21685                           indf2	equ	0xFDF
 21686                           postinc2	equ	0xFDE
 21687                           postdec2	equ	0xFDD
 21688                           plusw2	equ	0xFDB
 21689                           fsr2h	equ	0xFDA
 21690                           fsr2l	equ	0xFD9
 21691                           status	equ	0xFD8
 21692                           
 21693 ;; *************** function _LED_Toggle *****************
 21694 ;; Defined at:
 21695 ;;		line 50 in file "Library/LED.c"
 21696 ;; Parameters:    Size  Location     Type
 21697 ;;  pLED            1    wreg     enum E6739
 21698 ;; Auto vars:     Size  Location     Type
 21699 ;;  pLED            1   24[BANK0 ] enum E6739
 21700 ;; Return value:  Size  Location     Type
 21701 ;;                  1    wreg      void 
 21702 ;; Registers used:
 21703 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21704 ;; Tracked objects:
 21705 ;;		On entry : 0/0
 21706 ;;		On exit  : 0/0
 21707 ;;		Unchanged: 0/0
 21708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21710 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21712 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21713 ;;Total ram usage:        1 bytes
 21714 ;; Hardware stack levels used:    1
 21715 ;; Hardware stack levels required when called:   12
 21716 ;; This function calls:
 21717 ;;		_Port_TogglePin
 21718 ;; This function is called by:
 21719 ;;		_LCD_Reset
 21720 ;;		_Event_DIPSwitch
 21721 ;;		_Event_TestButton
 21722 ;;		_Event_ADCSequenceComplete
 21723 ;;		_Event_HMI_DIPSwitch
 21724 ;;		_Event_HMI_LeftButton
 21725 ;;		_Event_HMI_RightButton
 21726 ;;		_Event_HMI_UpButton
 21727 ;;		_Event_HMI_DownButton
 21728 ;; This function uses a non-reentrant model
 21729 ;;
 21730                           
 21731                           	psect	text105
 21732  015A9C                     __ptext105:
 21733                           	opt stack 0
 21734  015A9C                     _LED_Toggle:
 21735                           	opt stack 14
 21736                           
 21737                           ;incstack = 0
 21738                           ;LED_Toggle@pLED stored from wreg
 21739  015A9C  0100               	movlb	0	; () banked
 21740  015A9E  6F78               	movwf	LED_Toggle@pLED& (0+255),b
 21741                           
 21742                           ;LED.c: 52: switch (pLED)
 21743  015AA0  D018               	goto	l234
 21744  015AA2                     
 21745                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 21746  015AA2  0EEA               	movlw	low _PortC
 21747  015AA4  0100               	movlb	0	; () banked
 21748  015AA6  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 21749  015AA8  0E00               	movlw	high _PortC
 21750  015AAA  0100               	movlb	0	; () banked
 21751  015AAC  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 21752  015AAE  0E00               	movlw	0
 21753  015AB0  0100               	movlb	0	; () banked
 21754  015AB2  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 21755  015AB4  ECBF  F0AF         	call	_Port_TogglePin	;wreg free
 21756                           
 21757                           ;LED.c: 56: break;
 21758  015AB8  0012               	return	
 21759  015ABA                     
 21760                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 21761  015ABA  0EEA               	movlw	low _PortC
 21762  015ABC  0100               	movlb	0	; () banked
 21763  015ABE  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 21764  015AC0  0E00               	movlw	high _PortC
 21765  015AC2  0100               	movlb	0	; () banked
 21766  015AC4  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 21767  015AC6  0E01               	movlw	1
 21768  015AC8  0100               	movlb	0	; () banked
 21769  015ACA  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 21770  015ACC  ECBF  F0AF         	call	_Port_TogglePin	;wreg free
 21771                           
 21772                           ;LED.c: 60: }
 21773                           
 21774                           ;LED.c: 59: break;
 21775  015AD0  0012               	return	
 21776  015AD2                     l234:
 21777  015AD2  0100               	movlb	0	; () banked
 21778  015AD4  5178               	movf	LED_Toggle@pLED& (0+255),w,b
 21779                           
 21780                           ; Switch size 1, requested type "space"
 21781                           ; Number of cases is 2, Range of values is 0 to 1
 21782                           ; switch strategies available:
 21783                           ; Name         Instructions Cycles
 21784                           ; simple_byte            7     4 (average)
 21785                           ;	Chosen strategy is simple_byte
 21786  015AD6  0A00               	xorlw	0	; case 0
 21787  015AD8  B4D8               	btfsc	status,2,c
 21788  015ADA  D7E3               	goto	l235
 21789  015ADC  0A01               	xorlw	1	; case 1
 21790  015ADE  A4D8               	btfss	status,2,c
 21791  015AE0  0012               	return	
 21792  015AE2  D7EB               	goto	l237
 21793  015AE4                     __end_of_LED_Toggle:
 21794                           	opt stack 0
 21795                           tosu	equ	0xFFF
 21796                           tosh	equ	0xFFE
 21797                           tosl	equ	0xFFD
 21798                           pclath	equ	0xFFA
 21799                           tblptru	equ	0xFF8
 21800                           tblptrh	equ	0xFF7
 21801                           tblptrl	equ	0xFF6
 21802                           tablat	equ	0xFF5
 21803                           prodh	equ	0xFF4
 21804                           prodl	equ	0xFF3
 21805                           intcon	equ	0xFF2
 21806                           postinc0	equ	0xFEE
 21807                           wreg	equ	0xFE8
 21808                           indf1	equ	0xFE7
 21809                           postdec1	equ	0xFE5
 21810                           fsr1h	equ	0xFE2
 21811                           fsr1l	equ	0xFE1
 21812                           indf2	equ	0xFDF
 21813                           postinc2	equ	0xFDE
 21814                           postdec2	equ	0xFDD
 21815                           plusw2	equ	0xFDB
 21816                           fsr2h	equ	0xFDA
 21817                           fsr2l	equ	0xFD9
 21818                           status	equ	0xFD8
 21819                           
 21820 ;; *************** function _Port_TogglePin *****************
 21821 ;; Defined at:
 21822 ;;		line 278 in file "Library/Port.c"
 21823 ;; Parameters:    Size  Location     Type
 21824 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 21825 ;;		 -> PortC(10), 
 21826 ;;  pPin            1   22[BANK0 ] enum E6750
 21827 ;; Auto vars:     Size  Location     Type
 21828 ;;  Value           1   23[BANK0 ] unsigned char 
 21829 ;; Return value:  Size  Location     Type
 21830 ;;                  1    wreg      void 
 21831 ;; Registers used:
 21832 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21833 ;; Tracked objects:
 21834 ;;		On entry : 0/0
 21835 ;;		On exit  : 0/0
 21836 ;;		Unchanged: 0/0
 21837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21838 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21839 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21841 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21842 ;;Total ram usage:        4 bytes
 21843 ;; Hardware stack levels used:    1
 21844 ;; Hardware stack levels required when called:   11
 21845 ;; This function calls:
 21846 ;;		_Port_GetPin
 21847 ;;		_Port_SetPin
 21848 ;; This function is called by:
 21849 ;;		_LED_Toggle
 21850 ;; This function uses a non-reentrant model
 21851 ;;
 21852                           
 21853                           	psect	text106
 21854  015F7E                     __ptext106:
 21855                           	opt stack 0
 21856  015F7E                     _Port_TogglePin:
 21857                           	opt stack 14
 21858                           
 21859                           ;Port.c: 280: UINT8 Value;
 21860                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 21861                           
 21862                           ;incstack = 0
 21863  015F7E  C074  F060         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 21864  015F82  C075  F061         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 21865  015F86  C076  F062         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 21866  015F8A  ECDC  F0AD         	call	_Port_GetPin	;wreg free
 21867  015F8E  0100               	movlb	0	; () banked
 21868  015F90  6F77               	movwf	Port_TogglePin@Value& (0+255),b
 21869                           
 21870                           ; BSR set to: 0
 21871                           ;Port.c: 282: Value ^= 0x01;
 21872  015F92  0E01               	movlw	1
 21873  015F94  0100               	movlb	0	; () banked
 21874  015F96  1B77               	xorwf	Port_TogglePin@Value& (0+255),f,b
 21875                           
 21876                           ; BSR set to: 0
 21877                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 21878  015F98  C074  F06F         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 21879  015F9C  C075  F070         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 21880  015FA0  C076  F071         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 21881  015FA4  C077  F072         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 21882  015FA8  EC79  F09F         	call	_Port_SetPin	;wreg free
 21883  015FAC  0012               	return		;funcret
 21884  015FAE                     __end_of_Port_TogglePin:
 21885                           	opt stack 0
 21886                           tosu	equ	0xFFF
 21887                           tosh	equ	0xFFE
 21888                           tosl	equ	0xFFD
 21889                           pclath	equ	0xFFA
 21890                           tblptru	equ	0xFF8
 21891                           tblptrh	equ	0xFF7
 21892                           tblptrl	equ	0xFF6
 21893                           tablat	equ	0xFF5
 21894                           prodh	equ	0xFF4
 21895                           prodl	equ	0xFF3
 21896                           intcon	equ	0xFF2
 21897                           postinc0	equ	0xFEE
 21898                           wreg	equ	0xFE8
 21899                           indf1	equ	0xFE7
 21900                           postdec1	equ	0xFE5
 21901                           fsr1h	equ	0xFE2
 21902                           fsr1l	equ	0xFE1
 21903                           indf2	equ	0xFDF
 21904                           postinc2	equ	0xFDE
 21905                           postdec2	equ	0xFDD
 21906                           plusw2	equ	0xFDB
 21907                           fsr2h	equ	0xFDA
 21908                           fsr2l	equ	0xFD9
 21909                           status	equ	0xFD8
 21910                           
 21911 ;; *************** function _Port_SetPin *****************
 21912 ;; Defined at:
 21913 ;;		line 247 in file "Library/Port.c"
 21914 ;; Parameters:    Size  Location     Type
 21915 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 21916 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 21917 ;;  pPin            1   17[BANK0 ] enum E6750
 21918 ;;  pValue          1   18[BANK0 ] unsigned char 
 21919 ;; Auto vars:     Size  Location     Type
 21920 ;;  Type            1   19[BANK0 ] enum E6795
 21921 ;; Return value:  Size  Location     Type
 21922 ;;                  1    wreg      void 
 21923 ;; Registers used:
 21924 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21925 ;; Tracked objects:
 21926 ;;		On entry : 0/0
 21927 ;;		On exit  : 0/0
 21928 ;;		Unchanged: 0/0
 21929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21930 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21931 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21933 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21934 ;;Total ram usage:        5 bytes
 21935 ;; Hardware stack levels used:    1
 21936 ;; Hardware stack levels required when called:   10
 21937 ;; This function calls:
 21938 ;;		_Byte_SetBit
 21939 ;;		_Word_GetPair
 21940 ;; This function is called by:
 21941 ;;		_Reset_Low
 21942 ;;		_Reset_High
 21943 ;;		_LED_Set
 21944 ;;		_Port_TogglePin
 21945 ;;		_Motor_Init
 21946 ;;		_Motor_Step
 21947 ;;		_MXK_Init
 21948 ;; This function uses a non-reentrant model
 21949 ;;
 21950                           
 21951                           	psect	text107
 21952  013EF2                     __ptext107:
 21953                           	opt stack 0
 21954  013EF2                     _Port_SetPin:
 21955                           	opt stack 17
 21956                           
 21957                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 21958                           
 21959                           ;incstack = 0
 21960  013EF2  0E08               	movlw	8
 21961  013EF4  0100               	movlb	0	; () banked
 21962  013EF6  256F               	addwf	Port_SetPin@pInput& (0+255),w,b
 21963  013EF8  0100               	movlb	0	; () banked
 21964  013EFA  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 21965  013EFC  0E00               	movlw	0
 21966  013EFE  0100               	movlb	0	; () banked
 21967  013F00  2170               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 21968  013F02  0100               	movlb	0	; () banked
 21969  013F04  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 21970  013F06  C071  F06E         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 21971  013F0A  ECDF  F0AE         	call	_Word_GetPair	;wreg free
 21972  013F0E  0100               	movlb	0	; () banked
 21973  013F10  6F73               	movwf	Port_SetPin@Type& (0+255),b
 21974                           
 21975                           ;Port.c: 250: switch (Type)
 21976  013F12  D042               	goto	l427
 21977  013F14                     
 21978                           ; BSR set to: 0
 21979                           ;Port.c: 256: pValue &= 1;
 21980                           
 21981                           ; BSR set to: 0
 21982  013F14  0E01               	movlw	1
 21983  013F16  0100               	movlb	0	; () banked
 21984  013F18  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 21985                           
 21986                           ; BSR set to: 0
 21987                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 21988  013F1A  0100               	movlb	0	; () banked
 21989  013F1C  EE20 F002          	lfsr	2,2
 21990  013F20  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 21991  013F22  26D9               	addwf	fsr2l,f,c
 21992  013F24  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 21993  013F26  22DA               	addwfc	fsr2h,f,c
 21994  013F28  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 21995  013F2C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 21996  013F30  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 21997  013F34  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 21998  013F38  ECF6  F0AA         	call	_Byte_SetBit	;wreg free
 21999                           
 22000                           ;Port.c: 258: break;
 22001  013F3C  0012               	return	
 22002  013F3E                     
 22003                           ;Port.c: 261: pValue &= 1;
 22004  013F3E  0E01               	movlw	1
 22005  013F40  0100               	movlb	0	; () banked
 22006  013F42  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 22007                           
 22008                           ;Port.c: 262: pValue ^= 1;
 22009  013F44  0E01               	movlw	1
 22010  013F46  0100               	movlb	0	; () banked
 22011  013F48  1B72               	xorwf	Port_SetPin@pValue& (0+255),f,b
 22012                           
 22013                           ; BSR set to: 0
 22014                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 22015  013F4A  0100               	movlb	0	; () banked
 22016  013F4C  EE20 F002          	lfsr	2,2
 22017  013F50  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 22018  013F52  26D9               	addwf	fsr2l,f,c
 22019  013F54  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 22020  013F56  22DA               	addwfc	fsr2h,f,c
 22021  013F58  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22022  013F5C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22023  013F60  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 22024  013F64  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 22025  013F68  ECF6  F0AA         	call	_Byte_SetBit	;wreg free
 22026                           
 22027                           ;Port.c: 264: break;
 22028  013F6C  0012               	return	
 22029  013F6E                     
 22030                           ;Port.c: 266: pValue &= 1;
 22031  013F6E  0E01               	movlw	1
 22032  013F70  0100               	movlb	0	; () banked
 22033  013F72  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 22034                           
 22035                           ; BSR set to: 0
 22036                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 22037  013F74  0100               	movlb	0	; () banked
 22038  013F76  EE20 F004          	lfsr	2,4
 22039  013F7A  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 22040  013F7C  26D9               	addwf	fsr2l,f,c
 22041  013F7E  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 22042  013F80  22DA               	addwfc	fsr2h,f,c
 22043  013F82  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22044  013F86  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22045  013F8A  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 22046  013F8E  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 22047  013F92  ECF6  F0AA         	call	_Byte_SetBit	;wreg free
 22048                           
 22049                           ;Port.c: 269: }
 22050                           
 22051                           ;Port.c: 268: break;
 22052  013F96  0012               	return	
 22053  013F98                     l427:
 22054  013F98  0100               	movlb	0	; () banked
 22055  013F9A  5173               	movf	Port_SetPin@Type& (0+255),w,b
 22056                           
 22057                           ; Switch size 1, requested type "space"
 22058                           ; Number of cases is 4, Range of values is 0 to 3
 22059                           ; switch strategies available:
 22060                           ; Name         Instructions Cycles
 22061                           ; simple_byte           13     7 (average)
 22062                           ;	Chosen strategy is simple_byte
 22063  013F9C  0A00               	xorlw	0	; case 0
 22064  013F9E  B4D8               	btfsc	status,2,c
 22065  013FA0  0012               	return	
 22066  013FA2  0A01               	xorlw	1	; case 1
 22067  013FA4  B4D8               	btfsc	status,2,c
 22068  013FA6  D7B6               	goto	l430
 22069  013FA8  0A03               	xorlw	3	; case 2
 22070  013FAA  B4D8               	btfsc	status,2,c
 22071  013FAC  D7C8               	goto	l432
 22072  013FAE  0A01               	xorlw	1	; case 3
 22073  013FB0  A4D8               	btfss	status,2,c
 22074  013FB2  0012               	return	
 22075  013FB4  D7DC               	goto	l433
 22076  013FB6                     __end_of_Port_SetPin:
 22077                           	opt stack 0
 22078                           tosu	equ	0xFFF
 22079                           tosh	equ	0xFFE
 22080                           tosl	equ	0xFFD
 22081                           pclath	equ	0xFFA
 22082                           tblptru	equ	0xFF8
 22083                           tblptrh	equ	0xFF7
 22084                           tblptrl	equ	0xFF6
 22085                           tablat	equ	0xFF5
 22086                           prodh	equ	0xFF4
 22087                           prodl	equ	0xFF3
 22088                           intcon	equ	0xFF2
 22089                           postinc0	equ	0xFEE
 22090                           wreg	equ	0xFE8
 22091                           indf1	equ	0xFE7
 22092                           postdec1	equ	0xFE5
 22093                           fsr1h	equ	0xFE2
 22094                           fsr1l	equ	0xFE1
 22095                           indf2	equ	0xFDF
 22096                           postinc2	equ	0xFDE
 22097                           postdec2	equ	0xFDD
 22098                           plusw2	equ	0xFDB
 22099                           fsr2h	equ	0xFDA
 22100                           fsr2l	equ	0xFD9
 22101                           status	equ	0xFD8
 22102                           
 22103 ;; *************** function _ISR_Enable *****************
 22104 ;; Defined at:
 22105 ;;		line 27 in file "Library/ISR.c"
 22106 ;; Parameters:    Size  Location     Type
 22107 ;;		None
 22108 ;; Auto vars:     Size  Location     Type
 22109 ;;		None
 22110 ;; Return value:  Size  Location     Type
 22111 ;;                  1    wreg      void 
 22112 ;; Registers used:
 22113 ;;		None
 22114 ;; Tracked objects:
 22115 ;;		On entry : 0/0
 22116 ;;		On exit  : 0/0
 22117 ;;		Unchanged: 0/0
 22118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22122 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22123 ;;Total ram usage:        0 bytes
 22124 ;; Hardware stack levels used:    1
 22125 ;; Hardware stack levels required when called:    7
 22126 ;; This function calls:
 22127 ;;		Nothing
 22128 ;; This function is called by:
 22129 ;;		_init
 22130 ;; This function uses a non-reentrant model
 22131 ;;
 22132                           
 22133                           	psect	text108
 22134  0164A6                     __ptext108:
 22135                           	opt stack 0
 22136  0164A6                     _ISR_Enable:
 22137                           	opt stack 22
 22138                           
 22139                           ;ISR.c: 29: INTCONbits.PEIE = 1;
 22140                           
 22141                           ;incstack = 0
 22142  0164A6  8CF2               	bsf	intcon,6,c	;volatile
 22143                           
 22144                           ;ISR.c: 30: INTCONbits.GIE = 1;
 22145  0164A8  8EF2               	bsf	intcon,7,c	;volatile
 22146                           
 22147                           ;ISR.c: 31: INTCONbits.INT0IE = 1;
 22148  0164AA  88F2               	bsf	intcon,4,c	;volatile
 22149                           
 22150                           ;ISR.c: 32: INTCONbits.INT0IF = 0;
 22151  0164AC  92F2               	bcf	intcon,1,c	;volatile
 22152  0164AE  0012               	return		;funcret
 22153  0164B0                     __end_of_ISR_Enable:
 22154                           	opt stack 0
 22155                           tosu	equ	0xFFF
 22156                           tosh	equ	0xFFE
 22157                           tosl	equ	0xFFD
 22158                           pclath	equ	0xFFA
 22159                           tblptru	equ	0xFF8
 22160                           tblptrh	equ	0xFF7
 22161                           tblptrl	equ	0xFF6
 22162                           tablat	equ	0xFF5
 22163                           prodh	equ	0xFF4
 22164                           prodl	equ	0xFF3
 22165                           intcon	equ	0xFF2
 22166                           postinc0	equ	0xFEE
 22167                           wreg	equ	0xFE8
 22168                           indf1	equ	0xFE7
 22169                           postdec1	equ	0xFE5
 22170                           fsr1h	equ	0xFE2
 22171                           fsr1l	equ	0xFE1
 22172                           indf2	equ	0xFDF
 22173                           postinc2	equ	0xFDE
 22174                           postdec2	equ	0xFDD
 22175                           plusw2	equ	0xFDB
 22176                           fsr2h	equ	0xFDA
 22177                           fsr2l	equ	0xFD9
 22178                           status	equ	0xFD8
 22179                           
 22180 ;; *************** function _HMI_Init *****************
 22181 ;; Defined at:
 22182 ;;		line 104 in file "HMI.c"
 22183 ;; Parameters:    Size  Location     Type
 22184 ;;		None
 22185 ;; Auto vars:     Size  Location     Type
 22186 ;;  in              2   72[BANK0 ] unsigned short 
 22187 ;; Return value:  Size  Location     Type
 22188 ;;                  1    wreg      void 
 22189 ;; Registers used:
 22190 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22191 ;; Tracked objects:
 22192 ;;		On entry : 0/0
 22193 ;;		On exit  : 0/0
 22194 ;;		Unchanged: 0/0
 22195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22197 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22199 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22200 ;;Total ram usage:        2 bytes
 22201 ;; Hardware stack levels used:    1
 22202 ;; Hardware stack levels required when called:   16
 22203 ;; This function calls:
 22204 ;;		_Button_Init
 22205 ;;		_SPI_Init
 22206 ;;		_SPI_MinSpeed
 22207 ;; This function is called by:
 22208 ;;		_init
 22209 ;; This function uses a non-reentrant model
 22210 ;;
 22211                           
 22212                           	psect	text109
 22213  0120DA                     __ptext109:
 22214                           	opt stack 0
 22215  0120DA                     _HMI_Init:
 22216                           	opt stack 13
 22217                           
 22218                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 22219                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_NULL);
 22220                           
 22221                           ;incstack = 0
 22222  0120DA  0E58               	movlw	low (_HMIBoard+48)
 22223  0120DC  0100               	movlb	0	; () banked
 22224  0120DE  6F9B               	movwf	Button_Init@pInput& (0+255),b
 22225  0120E0  0E03               	movlw	high (_HMIBoard+48)
 22226  0120E2  0100               	movlb	0	; () banked
 22227  0120E4  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 22228  0120E6  0E00               	movlw	0
 22229  0120E8  0100               	movlb	0	; () banked
 22230  0120EA  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 22231  0120EC  0E02               	movlw	2
 22232  0120EE  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 22233  0120F0  0EDC               	movlw	low _HMI_InitButtons
 22234  0120F2  0100               	movlb	0	; () banked
 22235  0120F4  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 22236  0120F6  0E64               	movlw	high _HMI_InitButtons
 22237  0120F8  0100               	movlb	0	; () banked
 22238  0120FA  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 22239  0120FC  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 22240  0120FE  0100               	movlb	0	; () banked
 22241  012100  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 22242  012102  0E20               	movlw	low _HMI_DIPSwitch
 22243  012104  0100               	movlb	0	; () banked
 22244  012106  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 22245  012108  0E63               	movlw	high _HMI_DIPSwitch
 22246  01210A  0100               	movlb	0	; () banked
 22247  01210C  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 22248  01210E  0E01               	movlw	low (_HMI_DIPSwitch shr (0+16))
 22249  012110  0100               	movlb	0	; () banked
 22250  012112  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 22251  012114  0EF4               	movlw	low _Event_NULL
 22252  012116  0100               	movlb	0	; () banked
 22253  012118  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 22254  01211A  0E64               	movlw	high _Event_NULL
 22255  01211C  0100               	movlb	0	; () banked
 22256  01211E  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 22257  012120  0E01               	movlw	low (_Event_NULL shr (0+16))
 22258  012122  0100               	movlb	0	; () banked
 22259  012124  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 22260  012126  ECA7  F09E         	call	_Button_Init	;wreg free
 22261                           
 22262                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 22263                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_NULL);
 22264  01212A  0E3A               	movlw	low (_HMIBoard+18)
 22265  01212C  0100               	movlb	0	; () banked
 22266  01212E  6F9B               	movwf	Button_Init@pInput& (0+255),b
 22267  012130  0E03               	movlw	high (_HMIBoard+18)
 22268  012132  0100               	movlb	0	; () banked
 22269  012134  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 22270  012136  0E00               	movlw	0
 22271  012138  0100               	movlb	0	; () banked
 22272  01213A  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 22273  01213C  0E02               	movlw	2
 22274  01213E  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 22275  012140  0EDC               	movlw	low _HMI_InitButtons
 22276  012142  0100               	movlb	0	; () banked
 22277  012144  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 22278  012146  0E64               	movlw	high _HMI_InitButtons
 22279  012148  0100               	movlb	0	; () banked
 22280  01214A  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 22281  01214C  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 22282  01214E  0100               	movlb	0	; () banked
 22283  012150  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 22284  012152  0E80               	movlw	low _HMI_LeftSwitch
 22285  012154  0100               	movlb	0	; () banked
 22286  012156  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 22287  012158  0E63               	movlw	high _HMI_LeftSwitch
 22288  01215A  0100               	movlb	0	; () banked
 22289  01215C  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 22290  01215E  0E01               	movlw	low (_HMI_LeftSwitch shr (0+16))
 22291  012160  0100               	movlb	0	; () banked
 22292  012162  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 22293  012164  0EF4               	movlw	low _Event_NULL
 22294  012166  0100               	movlb	0	; () banked
 22295  012168  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 22296  01216A  0E64               	movlw	high _Event_NULL
 22297  01216C  0100               	movlb	0	; () banked
 22298  01216E  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 22299  012170  0E01               	movlw	low (_Event_NULL shr (0+16))
 22300  012172  0100               	movlb	0	; () banked
 22301  012174  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 22302  012176  ECA7  F09E         	call	_Button_Init	;wreg free
 22303                           
 22304                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 22305                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_NULL);
 22306  01217A  0E30               	movlw	low (_HMIBoard+8)
 22307  01217C  0100               	movlb	0	; () banked
 22308  01217E  6F9B               	movwf	Button_Init@pInput& (0+255),b
 22309  012180  0E03               	movlw	high (_HMIBoard+8)
 22310  012182  0100               	movlb	0	; () banked
 22311  012184  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 22312  012186  0E00               	movlw	0
 22313  012188  0100               	movlb	0	; () banked
 22314  01218A  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 22315  01218C  0E02               	movlw	2
 22316  01218E  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 22317  012190  0EDC               	movlw	low _HMI_InitButtons
 22318  012192  0100               	movlb	0	; () banked
 22319  012194  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 22320  012196  0E64               	movlw	high _HMI_InitButtons
 22321  012198  0100               	movlb	0	; () banked
 22322  01219A  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 22323  01219C  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 22324  01219E  0100               	movlb	0	; () banked
 22325  0121A0  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 22326  0121A2  0E68               	movlw	low _HMI_RightSwitch
 22327  0121A4  0100               	movlb	0	; () banked
 22328  0121A6  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 22329  0121A8  0E63               	movlw	high _HMI_RightSwitch
 22330  0121AA  0100               	movlb	0	; () banked
 22331  0121AC  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 22332  0121AE  0E01               	movlw	low (_HMI_RightSwitch shr (0+16))
 22333  0121B0  0100               	movlb	0	; () banked
 22334  0121B2  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 22335  0121B4  0EF4               	movlw	low _Event_NULL
 22336  0121B6  0100               	movlb	0	; () banked
 22337  0121B8  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 22338  0121BA  0E64               	movlw	high _Event_NULL
 22339  0121BC  0100               	movlb	0	; () banked
 22340  0121BE  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 22341  0121C0  0E01               	movlw	low (_Event_NULL shr (0+16))
 22342  0121C2  0100               	movlb	0	; () banked
 22343  0121C4  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 22344  0121C6  ECA7  F09E         	call	_Button_Init	;wreg free
 22345                           
 22346                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 22347                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_NULL);
 22348  0121CA  0E44               	movlw	low (_HMIBoard+28)
 22349  0121CC  0100               	movlb	0	; () banked
 22350  0121CE  6F9B               	movwf	Button_Init@pInput& (0+255),b
 22351  0121D0  0E03               	movlw	high (_HMIBoard+28)
 22352  0121D2  0100               	movlb	0	; () banked
 22353  0121D4  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 22354  0121D6  0E00               	movlw	0
 22355  0121D8  0100               	movlb	0	; () banked
 22356  0121DA  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 22357  0121DC  0E02               	movlw	2
 22358  0121DE  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 22359  0121E0  0EDC               	movlw	low _HMI_InitButtons
 22360  0121E2  0100               	movlb	0	; () banked
 22361  0121E4  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 22362  0121E6  0E64               	movlw	high _HMI_InitButtons
 22363  0121E8  0100               	movlb	0	; () banked
 22364  0121EA  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 22365  0121EC  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 22366  0121EE  0100               	movlb	0	; () banked
 22367  0121F0  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 22368  0121F2  0E50               	movlw	low _HMI_UpSwitch
 22369  0121F4  0100               	movlb	0	; () banked
 22370  0121F6  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 22371  0121F8  0E63               	movlw	high _HMI_UpSwitch
 22372  0121FA  0100               	movlb	0	; () banked
 22373  0121FC  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 22374  0121FE  0E01               	movlw	low (_HMI_UpSwitch shr (0+16))
 22375  012200  0100               	movlb	0	; () banked
 22376  012202  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 22377  012204  0EF4               	movlw	low _Event_NULL
 22378  012206  0100               	movlb	0	; () banked
 22379  012208  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 22380  01220A  0E64               	movlw	high _Event_NULL
 22381  01220C  0100               	movlb	0	; () banked
 22382  01220E  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 22383  012210  0E01               	movlw	low (_Event_NULL shr (0+16))
 22384  012212  0100               	movlb	0	; () banked
 22385  012214  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 22386  012216  ECA7  F09E         	call	_Button_Init	;wreg free
 22387                           
 22388                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 22389                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_NULL);
 22390  01221A  0E4E               	movlw	low (_HMIBoard+38)
 22391  01221C  0100               	movlb	0	; () banked
 22392  01221E  6F9B               	movwf	Button_Init@pInput& (0+255),b
 22393  012220  0E03               	movlw	high (_HMIBoard+38)
 22394  012222  0100               	movlb	0	; () banked
 22395  012224  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 22396  012226  0E00               	movlw	0
 22397  012228  0100               	movlb	0	; () banked
 22398  01222A  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 22399  01222C  0E02               	movlw	2
 22400  01222E  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 22401  012230  0EDC               	movlw	low _HMI_InitButtons
 22402  012232  0100               	movlb	0	; () banked
 22403  012234  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 22404  012236  0E64               	movlw	high _HMI_InitButtons
 22405  012238  0100               	movlb	0	; () banked
 22406  01223A  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 22407  01223C  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 22408  01223E  0100               	movlb	0	; () banked
 22409  012240  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 22410  012242  0E38               	movlw	low _HMI_DownSwitch
 22411  012244  0100               	movlb	0	; () banked
 22412  012246  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 22413  012248  0E63               	movlw	high _HMI_DownSwitch
 22414  01224A  0100               	movlb	0	; () banked
 22415  01224C  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 22416  01224E  0E01               	movlw	low (_HMI_DownSwitch shr (0+16))
 22417  012250  0100               	movlb	0	; () banked
 22418  012252  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 22419  012254  0EF4               	movlw	low _Event_NULL
 22420  012256  0100               	movlb	0	; () banked
 22421  012258  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 22422  01225A  0E64               	movlw	high _Event_NULL
 22423  01225C  0100               	movlb	0	; () banked
 22424  01225E  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 22425  012260  0E01               	movlw	low (_Event_NULL shr (0+16))
 22426  012262  0100               	movlb	0	; () banked
 22427  012264  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 22428  012266  ECA7  F09E         	call	_Button_Init	;wreg free
 22429                           
 22430                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 22431  01226A  0EA0               	movlw	160
 22432  01226C  0100               	movlb	0	; () banked
 22433  01226E  6F8D               	movwf	SPI_Init@pClock& (0+255),b
 22434  012270  0E86               	movlw	134
 22435  012272  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
 22436  012274  0E01               	movlw	1
 22437  012276  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
 22438  012278  0E00               	movlw	0
 22439  01227A  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
 22440  01227C  0E00               	movlw	0
 22441  01227E  0100               	movlb	0	; () banked
 22442  012280  6F91               	movwf	SPI_Init@pChannel& (0+255),b
 22443  012282  0E02               	movlw	2
 22444  012284  0100               	movlb	0	; () banked
 22445  012286  6F92               	movwf	SPI_Init@pMode& (0+255),b
 22446  012288  EC53  F082         	call	_SPI_Init	;wreg free
 22447                           
 22448                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 22449  01228C  0E62               	movlw	low _SPI1
 22450  01228E  0100               	movlb	0	; () banked
 22451  012290  6F6F               	movwf	SPI_MinSpeed@pInput& (0+255),b
 22452  012292  0E03               	movlw	high _SPI1
 22453  012294  0100               	movlb	0	; () banked
 22454  012296  6F70               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 22455  012298  EC13  F0A9         	call	_SPI_MinSpeed	;wreg free
 22456                           
 22457                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 22458  01229C  0E00               	movlw	0
 22459  01229E  0100               	movlb	0	; () banked
 22460  0122A0  6FA9               	movwf	(HMI_Init@in+1)& (0+255),b
 22461  0122A2  0E00               	movlw	0
 22462  0122A4  6FA8               	movwf	HMI_Init@in& (0+255),b
 22463  0122A6                     l14051:
 22464                           
 22465                           ; BSR set to: 0
 22466  0122A6  0100               	movlb	0	; () banked
 22467  0122A8  51A9               	movf	(HMI_Init@in+1)& (0+255),w,b
 22468  0122AA  E113               	bnz	l1153
 22469  0122AC  0E08               	movlw	8
 22470  0122AE  0100               	movlb	0	; () banked
 22471  0122B0  5DA8               	subwf	HMI_Init@in& (0+255),w,b
 22472  0122B2  B0D8               	btfsc	status,0,c
 22473  0122B4  0012               	return	
 22474                           
 22475                           ; BSR set to: 0
 22476                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 22477                           
 22478                           ; BSR set to: 0
 22479                           
 22480                           ; BSR set to: 0
 22481  0122B6  0E28               	movlw	low _HMIBoard
 22482  0122B8  0100               	movlb	0	; () banked
 22483  0122BA  25A8               	addwf	HMI_Init@in& (0+255),w,b
 22484  0122BC  6ED9               	movwf	fsr2l,c
 22485  0122BE  0E03               	movlw	high _HMIBoard
 22486  0122C0  0100               	movlb	0	; () banked
 22487  0122C2  21A9               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 22488  0122C4  6EDA               	movwf	fsr2h,c
 22489  0122C6  0E00               	movlw	0
 22490  0122C8  6EDF               	movwf	indf2,c
 22491                           
 22492                           ; BSR set to: 0
 22493  0122CA  0100               	movlb	0	; () banked
 22494  0122CC  4BA8               	infsnz	HMI_Init@in& (0+255),f,b
 22495  0122CE  2BA9               	incf	(HMI_Init@in+1)& (0+255),f,b
 22496  0122D0  D7EA               	goto	l14051
 22497  0122D2                     l1153:
 22498                           
 22499                           ; BSR set to: 0
 22500  0122D2  0012               	return		;funcret
 22501  0122D4                     __end_of_HMI_Init:
 22502                           	opt stack 0
 22503                           tosu	equ	0xFFF
 22504                           tosh	equ	0xFFE
 22505                           tosl	equ	0xFFD
 22506                           pclath	equ	0xFFA
 22507                           tblptru	equ	0xFF8
 22508                           tblptrh	equ	0xFF7
 22509                           tblptrl	equ	0xFF6
 22510                           tablat	equ	0xFF5
 22511                           prodh	equ	0xFF4
 22512                           prodl	equ	0xFF3
 22513                           intcon	equ	0xFF2
 22514                           postinc0	equ	0xFEE
 22515                           wreg	equ	0xFE8
 22516                           indf1	equ	0xFE7
 22517                           postdec1	equ	0xFE5
 22518                           fsr1h	equ	0xFE2
 22519                           fsr1l	equ	0xFE1
 22520                           indf2	equ	0xFDF
 22521                           postinc2	equ	0xFDE
 22522                           postdec2	equ	0xFDD
 22523                           plusw2	equ	0xFDB
 22524                           fsr2h	equ	0xFDA
 22525                           fsr2l	equ	0xFD9
 22526                           status	equ	0xFD8
 22527                           
 22528 ;; *************** function _SPI_MinSpeed *****************
 22529 ;; Defined at:
 22530 ;;		line 190 in file "Library/SPI.c"
 22531 ;; Parameters:    Size  Location     Type
 22532 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 22533 ;;		 -> SPI1(11), 
 22534 ;; Auto vars:     Size  Location     Type
 22535 ;;		None
 22536 ;; Return value:  Size  Location     Type
 22537 ;;                  1    wreg      void 
 22538 ;; Registers used:
 22539 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22540 ;; Tracked objects:
 22541 ;;		On entry : 0/0
 22542 ;;		On exit  : 0/0
 22543 ;;		Unchanged: 0/0
 22544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22545 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22548 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22549 ;;Total ram usage:        2 bytes
 22550 ;; Hardware stack levels used:    1
 22551 ;; Hardware stack levels required when called:    9
 22552 ;; This function calls:
 22553 ;;		_Byte_SetBit
 22554 ;;		_Byte_SetQuad
 22555 ;; This function is called by:
 22556 ;;		_HMI_Init
 22557 ;; This function uses a non-reentrant model
 22558 ;;
 22559                           
 22560                           	psect	text110
 22561  015226                     __ptext110:
 22562                           	opt stack 0
 22563  015226                     _SPI_MinSpeed:
 22564                           	opt stack 19
 22565                           
 22566                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 22567                           
 22568                           ; BSR set to: 0
 22569                           ;incstack = 0
 22570  015226  0100               	movlb	0	; () banked
 22571  015228  EE20 F006          	lfsr	2,6
 22572  01522C  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 22573  01522E  26D9               	addwf	fsr2l,f,c
 22574  015230  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 22575  015232  22DA               	addwfc	fsr2h,f,c
 22576  015234  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22577  015238  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22578  01523C  0E05               	movlw	5
 22579  01523E  0100               	movlb	0	; () banked
 22580  015240  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 22581  015242  0E00               	movlw	0
 22582  015244  0100               	movlb	0	; () banked
 22583  015246  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 22584  015248  ECF6  F0AA         	call	_Byte_SetBit	;wreg free
 22585                           
 22586                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 22587  01524C  0100               	movlb	0	; () banked
 22588  01524E  EE20 F006          	lfsr	2,6
 22589  015252  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 22590  015254  26D9               	addwf	fsr2l,f,c
 22591  015256  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 22592  015258  22DA               	addwfc	fsr2h,f,c
 22593  01525A  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 22594  01525E  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 22595  015262  0E00               	movlw	0
 22596  015264  0100               	movlb	0	; () banked
 22597  015266  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 22598  015268  0E02               	movlw	2
 22599  01526A  0100               	movlb	0	; () banked
 22600  01526C  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 22601  01526E  ECA8  F0B0         	call	_Byte_SetQuad	;wreg free
 22602                           
 22603                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 22604  015272  0100               	movlb	0	; () banked
 22605  015274  EE20 F006          	lfsr	2,6
 22606  015278  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 22607  01527A  26D9               	addwf	fsr2l,f,c
 22608  01527C  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 22609  01527E  22DA               	addwfc	fsr2h,f,c
 22610  015280  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22611  015284  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22612  015288  0E05               	movlw	5
 22613  01528A  0100               	movlb	0	; () banked
 22614  01528C  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 22615  01528E  0E01               	movlw	1
 22616  015290  0100               	movlb	0	; () banked
 22617  015292  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 22618  015294  ECF6  F0AA         	call	_Byte_SetBit	;wreg free
 22619  015298  0012               	return		;funcret
 22620  01529A                     __end_of_SPI_MinSpeed:
 22621                           	opt stack 0
 22622                           tosu	equ	0xFFF
 22623                           tosh	equ	0xFFE
 22624                           tosl	equ	0xFFD
 22625                           pclath	equ	0xFFA
 22626                           tblptru	equ	0xFF8
 22627                           tblptrh	equ	0xFF7
 22628                           tblptrl	equ	0xFF6
 22629                           tablat	equ	0xFF5
 22630                           prodh	equ	0xFF4
 22631                           prodl	equ	0xFF3
 22632                           intcon	equ	0xFF2
 22633                           postinc0	equ	0xFEE
 22634                           wreg	equ	0xFE8
 22635                           indf1	equ	0xFE7
 22636                           postdec1	equ	0xFE5
 22637                           fsr1h	equ	0xFE2
 22638                           fsr1l	equ	0xFE1
 22639                           indf2	equ	0xFDF
 22640                           postinc2	equ	0xFDE
 22641                           postdec2	equ	0xFDD
 22642                           plusw2	equ	0xFDB
 22643                           fsr2h	equ	0xFDA
 22644                           fsr2l	equ	0xFD9
 22645                           status	equ	0xFD8
 22646                           
 22647 ;; *************** function _SPI_Init *****************
 22648 ;; Defined at:
 22649 ;;		line 12 in file "Library/SPI.c"
 22650 ;; Parameters:    Size  Location     Type
 22651 ;;  pClock          4   45[BANK0 ] unsigned long 
 22652 ;;  pChannel        1   49[BANK0 ] enum E6744
 22653 ;;  pMode           1   50[BANK0 ] enum E6748
 22654 ;; Auto vars:     Size  Location     Type
 22655 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 22656 ;;		 -> SPI1(11), SPI2(11), 
 22657 ;; Return value:  Size  Location     Type
 22658 ;;                  1    wreg      void 
 22659 ;; Registers used:
 22660 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22661 ;; Tracked objects:
 22662 ;;		On entry : 0/0
 22663 ;;		On exit  : 0/0
 22664 ;;		Unchanged: 0/0
 22665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22666 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22667 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22669 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22670 ;;Total ram usage:        8 bytes
 22671 ;; Hardware stack levels used:    1
 22672 ;; Hardware stack levels required when called:   12
 22673 ;; This function calls:
 22674 ;;		_Byte_SetBit
 22675 ;;		_Byte_SetQuad
 22676 ;;		_Port_SetPinType
 22677 ;;		_SPI_DCS
 22678 ;;		_SPI_DisableISR
 22679 ;;		_Timer2_Init
 22680 ;; This function is called by:
 22681 ;;		_Configure_GPIOs
 22682 ;;		_HMI_Init
 22683 ;; This function uses a non-reentrant model
 22684 ;;
 22685                           
 22686                           	psect	text111
 22687  0104A6                     __ptext111:
 22688                           	opt stack 0
 22689  0104A6                     _SPI_Init:
 22690                           	opt stack 15
 22691                           
 22692                           ;SPI.c: 14: SPIPtr pInput;
 22693                           ;SPI.c: 16: switch (pChannel)
 22694                           
 22695                           ;incstack = 0
 22696  0104A6  D00C               	goto	l597
 22697  0104A8                     
 22698                           ;SPI.c: 19: pInput = &SPI1;
 22699  0104A8  0E62               	movlw	low _SPI1
 22700  0104AA  0100               	movlb	0	; () banked
 22701  0104AC  6F93               	movwf	SPI_Init@pInput& (0+255),b
 22702  0104AE  0E03               	movlw	high _SPI1
 22703  0104B0  D004               	goto	L13
 22704  0104B2                     
 22705                           ; BSR set to: 0
 22706                           ;SPI.c: 22: pInput = &SPI2;
 22707                           
 22708                           ; BSR set to: 0
 22709  0104B2  0E6D               	movlw	low _SPI2
 22710  0104B4  0100               	movlb	0	; () banked
 22711  0104B6  6F93               	movwf	SPI_Init@pInput& (0+255),b
 22712  0104B8  0E03               	movlw	high _SPI2
 22713  0104BA                     L13:
 22714  0104BA  0100               	movlb	0	; () banked
 22715  0104BC  6F94               	movwf	(SPI_Init@pInput+1)& (0+255),b
 22716                           
 22717                           ; BSR set to: 0
 22718                           ;SPI.c: 24: };
 22719                           
 22720                           ;SPI.c: 23: break;
 22721  0104BE  D008               	goto	l599
 22722  0104C0                     l597:
 22723                           
 22724                           ; BSR set to: 0
 22725  0104C0  0100               	movlb	0	; () banked
 22726  0104C2  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 22727                           
 22728                           ; Switch size 1, requested type "space"
 22729                           ; Number of cases is 2, Range of values is 0 to 1
 22730                           ; switch strategies available:
 22731                           ; Name         Instructions Cycles
 22732                           ; simple_byte            7     4 (average)
 22733                           ;	Chosen strategy is simple_byte
 22734  0104C4  0A00               	xorlw	0	; case 0
 22735  0104C6  B4D8               	btfsc	status,2,c
 22736  0104C8  D7EF               	goto	l598
 22737  0104CA  0A01               	xorlw	1	; case 1
 22738  0104CC  B4D8               	btfsc	status,2,c
 22739  0104CE  D7F1               	goto	l600
 22740  0104D0                     l599:
 22741                           
 22742                           ; BSR set to: 0
 22743                           ;SPI.c: 26: pInput->mChannel = pChannel;
 22744                           
 22745                           ; BSR set to: 0
 22746  0104D0  0100               	movlb	0	; () banked
 22747  0104D2  EE20 F002          	lfsr	2,2
 22748  0104D6  5193               	movf	SPI_Init@pInput& (0+255),w,b
 22749  0104D8  26D9               	addwf	fsr2l,f,c
 22750  0104DA  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22751  0104DC  22DA               	addwfc	fsr2h,f,c
 22752  0104DE  C091  FFDF         	movff	SPI_Init@pChannel,indf2
 22753                           
 22754                           ;SPI.c: 35: switch (pChannel)
 22755  0104E2  D0B1               	goto	l601
 22756  0104E4                     
 22757                           ; BSR set to: 0
 22758                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 22759                           
 22760                           ; BSR set to: 0
 22761  0104E4  0EEA               	movlw	low _PortC
 22762  0104E6  0100               	movlb	0	; () banked
 22763  0104E8  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 22764  0104EA  0E00               	movlw	high _PortC
 22765  0104EC  0100               	movlb	0	; () banked
 22766  0104EE  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 22767  0104F0  0E02               	movlw	2
 22768  0104F2  0100               	movlb	0	; () banked
 22769  0104F4  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 22770  0104F6  0E03               	movlw	3
 22771  0104F8  0100               	movlb	0	; () banked
 22772  0104FA  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 22773  0104FC  EC32  F093         	call	_Port_SetPinType	;wreg free
 22774                           
 22775                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 22776  010500  0EEA               	movlw	low _PortC
 22777  010502  0100               	movlb	0	; () banked
 22778  010504  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 22779  010506  0E00               	movlw	high _PortC
 22780  010508  0100               	movlb	0	; () banked
 22781  01050A  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 22782  01050C  0E03               	movlw	3
 22783  01050E  0100               	movlb	0	; () banked
 22784  010510  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 22785  010512  0E03               	movlw	3
 22786  010514  0100               	movlb	0	; () banked
 22787  010516  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 22788  010518  EC32  F093         	call	_Port_SetPinType	;wreg free
 22789                           
 22790                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 22791  01051C  0EEA               	movlw	low _PortC
 22792  01051E  0100               	movlb	0	; () banked
 22793  010520  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 22794  010522  0E00               	movlw	high _PortC
 22795  010524  0100               	movlb	0	; () banked
 22796  010526  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 22797  010528  0E05               	movlw	5
 22798  01052A  0100               	movlb	0	; () banked
 22799  01052C  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 22800  01052E  0E03               	movlw	3
 22801  010530  0100               	movlb	0	; () banked
 22802  010532  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 22803  010534  EC32  F093         	call	_Port_SetPinType	;wreg free
 22804                           
 22805                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 22806  010538  0EEA               	movlw	low _PortC
 22807  01053A  0100               	movlb	0	; () banked
 22808  01053C  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 22809  01053E  0E00               	movlw	high _PortC
 22810  010540  0100               	movlb	0	; () banked
 22811  010542  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 22812  010544  0E04               	movlw	4
 22813  010546  0100               	movlb	0	; () banked
 22814  010548  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 22815  01054A  0E00               	movlw	0
 22816  01054C  0100               	movlb	0	; () banked
 22817  01054E  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 22818  010550  EC32  F093         	call	_Port_SetPinType	;wreg free
 22819                           
 22820                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 22821  010554  0100               	movlb	0	; () banked
 22822  010556  EE20 F003          	lfsr	2,3
 22823  01055A  5193               	movf	SPI_Init@pInput& (0+255),w,b
 22824  01055C  26D9               	addwf	fsr2l,f,c
 22825  01055E  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22826  010560  22DA               	addwfc	fsr2h,f,c
 22827  010562  0EC7               	movlw	199
 22828  010564  6EDE               	movwf	postinc2,c
 22829  010566  0E0F               	movlw	15
 22830  010568  6EDD               	movwf	postdec2,c
 22831                           
 22832                           ; BSR set to: 0
 22833                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 22834  01056A  0100               	movlb	0	; () banked
 22835  01056C  EE20 F006          	lfsr	2,6
 22836  010570  5193               	movf	SPI_Init@pInput& (0+255),w,b
 22837  010572  26D9               	addwf	fsr2l,f,c
 22838  010574  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22839  010576  22DA               	addwfc	fsr2h,f,c
 22840  010578  0EC6               	movlw	198
 22841  01057A  6EDE               	movwf	postinc2,c
 22842  01057C  0E0F               	movlw	15
 22843  01057E  6EDD               	movwf	postdec2,c
 22844                           
 22845                           ; BSR set to: 0
 22846                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 22847  010580  0100               	movlb	0	; () banked
 22848  010582  EE20 F009          	lfsr	2,9
 22849  010586  5193               	movf	SPI_Init@pInput& (0+255),w,b
 22850  010588  26D9               	addwf	fsr2l,f,c
 22851  01058A  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22852  01058C  22DA               	addwfc	fsr2h,f,c
 22853  01058E  0EC9               	movlw	201
 22854  010590  D056               	goto	L14
 22855  010592                     
 22856                           ; BSR set to: 0
 22857                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 22858                           
 22859                           ; BSR set to: 0
 22860  010592  0EA0               	movlw	low _PortD
 22861  010594  0100               	movlb	0	; () banked
 22862  010596  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 22863  010598  0E03               	movlw	high _PortD
 22864  01059A  0100               	movlb	0	; () banked
 22865  01059C  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 22866  01059E  0E07               	movlw	7
 22867  0105A0  0100               	movlb	0	; () banked
 22868  0105A2  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 22869  0105A4  0E03               	movlw	3
 22870  0105A6  0100               	movlb	0	; () banked
 22871  0105A8  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 22872  0105AA  EC32  F093         	call	_Port_SetPinType	;wreg free
 22873                           
 22874                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 22875  0105AE  0EA0               	movlw	low _PortD
 22876  0105B0  0100               	movlb	0	; () banked
 22877  0105B2  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 22878  0105B4  0E03               	movlw	high _PortD
 22879  0105B6  0100               	movlb	0	; () banked
 22880  0105B8  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 22881  0105BA  0E06               	movlw	6
 22882  0105BC  0100               	movlb	0	; () banked
 22883  0105BE  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 22884  0105C0  0E03               	movlw	3
 22885  0105C2  0100               	movlb	0	; () banked
 22886  0105C4  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 22887  0105C6  EC32  F093         	call	_Port_SetPinType	;wreg free
 22888                           
 22889                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 22890  0105CA  0EA0               	movlw	low _PortD
 22891  0105CC  0100               	movlb	0	; () banked
 22892  0105CE  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 22893  0105D0  0E03               	movlw	high _PortD
 22894  0105D2  0100               	movlb	0	; () banked
 22895  0105D4  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 22896  0105D6  0E04               	movlw	4
 22897  0105D8  0100               	movlb	0	; () banked
 22898  0105DA  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 22899  0105DC  0E03               	movlw	3
 22900  0105DE  0100               	movlb	0	; () banked
 22901  0105E0  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 22902  0105E2  EC32  F093         	call	_Port_SetPinType	;wreg free
 22903                           
 22904                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 22905  0105E6  0EA0               	movlw	low _PortD
 22906  0105E8  0100               	movlb	0	; () banked
 22907  0105EA  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 22908  0105EC  0E03               	movlw	high _PortD
 22909  0105EE  0100               	movlb	0	; () banked
 22910  0105F0  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 22911  0105F2  0E05               	movlw	5
 22912  0105F4  0100               	movlb	0	; () banked
 22913  0105F6  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 22914  0105F8  0E00               	movlw	0
 22915  0105FA  0100               	movlb	0	; () banked
 22916  0105FC  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 22917  0105FE  EC32  F093         	call	_Port_SetPinType	;wreg free
 22918                           
 22919                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 22920  010602  0100               	movlb	0	; () banked
 22921  010604  EE20 F003          	lfsr	2,3
 22922  010608  5193               	movf	SPI_Init@pInput& (0+255),w,b
 22923  01060A  26D9               	addwf	fsr2l,f,c
 22924  01060C  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22925  01060E  22DA               	addwfc	fsr2h,f,c
 22926  010610  0E6D               	movlw	109
 22927  010612  6EDE               	movwf	postinc2,c
 22928  010614  0E0F               	movlw	15
 22929  010616  6EDD               	movwf	postdec2,c
 22930                           
 22931                           ; BSR set to: 0
 22932                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 22933  010618  0100               	movlb	0	; () banked
 22934  01061A  EE20 F006          	lfsr	2,6
 22935  01061E  5193               	movf	SPI_Init@pInput& (0+255),w,b
 22936  010620  26D9               	addwf	fsr2l,f,c
 22937  010622  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22938  010624  22DA               	addwfc	fsr2h,f,c
 22939  010626  0E6C               	movlw	108
 22940  010628  6EDE               	movwf	postinc2,c
 22941  01062A  0E0F               	movlw	15
 22942  01062C  6EDD               	movwf	postdec2,c
 22943                           
 22944                           ; BSR set to: 0
 22945                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 22946  01062E  0100               	movlb	0	; () banked
 22947  010630  EE20 F009          	lfsr	2,9
 22948  010634  5193               	movf	SPI_Init@pInput& (0+255),w,b
 22949  010636  26D9               	addwf	fsr2l,f,c
 22950  010638  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22951  01063A  22DA               	addwfc	fsr2h,f,c
 22952  01063C  0E6F               	movlw	111
 22953  01063E                     L14:
 22954  01063E  6EDE               	movwf	postinc2,c
 22955  010640  0E0F               	movlw	15
 22956  010642  6EDD               	movwf	postdec2,c
 22957                           
 22958                           ;SPI.c: 68: break;
 22959  010644  D009               	goto	l603
 22960  010646                     l601:
 22961                           
 22962                           ; BSR set to: 0
 22963                           
 22964                           ; BSR set to: 0
 22965  010646  0100               	movlb	0	; () banked
 22966  010648  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 22967                           
 22968                           ; Switch size 1, requested type "space"
 22969                           ; Number of cases is 2, Range of values is 0 to 1
 22970                           ; switch strategies available:
 22971                           ; Name         Instructions Cycles
 22972                           ; simple_byte            7     4 (average)
 22973                           ;	Chosen strategy is simple_byte
 22974  01064A  0A00               	xorlw	0	; case 0
 22975  01064C  B4D8               	btfsc	status,2,c
 22976  01064E  D74A               	goto	l602
 22977  010650  0A01               	xorlw	1	; case 1
 22978  010652  A4D8               	btfss	status,2,c
 22979  010654  0012               	return	
 22980  010656  D79D               	goto	l604
 22981  010658                     l603:
 22982                           
 22983                           ; BSR set to: 0
 22984                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 22985                           
 22986                           ; BSR set to: 0
 22987  010658  0100               	movlb	0	; () banked
 22988  01065A  EE20 F006          	lfsr	2,6
 22989  01065E  5193               	movf	SPI_Init@pInput& (0+255),w,b
 22990  010660  26D9               	addwf	fsr2l,f,c
 22991  010662  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22992  010664  22DA               	addwfc	fsr2h,f,c
 22993  010666  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22994  01066A  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22995  01066E  0E05               	movlw	5
 22996  010670  0100               	movlb	0	; () banked
 22997  010672  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 22998  010674  0E00               	movlw	0
 22999  010676  0100               	movlb	0	; () banked
 23000  010678  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23001  01067A  ECF6  F0AA         	call	_Byte_SetBit	;wreg free
 23002                           
 23003                           ;SPI.c: 77: switch(pMode)
 23004  01067E  D09C               	goto	l607
 23005  010680                     
 23006                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 23007  010680  0100               	movlb	0	; () banked
 23008  010682  EE20 F006          	lfsr	2,6
 23009  010686  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23010  010688  26D9               	addwf	fsr2l,f,c
 23011  01068A  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23012  01068C  22DA               	addwfc	fsr2h,f,c
 23013  01068E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23014  010692  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23015  010696  0E04               	movlw	4
 23016  010698  0100               	movlb	0	; () banked
 23017  01069A  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23018  01069C  0E00               	movlw	0
 23019  01069E  0100               	movlb	0	; () banked
 23020  0106A0  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23021  0106A2  ECF6  F0AA         	call	_Byte_SetBit	;wreg free
 23022                           
 23023                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 23024  0106A6  0100               	movlb	0	; () banked
 23025  0106A8  EE20 F003          	lfsr	2,3
 23026  0106AC  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23027  0106AE  26D9               	addwf	fsr2l,f,c
 23028  0106B0  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23029  0106B2  22DA               	addwfc	fsr2h,f,c
 23030  0106B4  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23031  0106B8  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23032  0106BC  0E06               	movlw	6
 23033  0106BE  0100               	movlb	0	; () banked
 23034  0106C0  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23035  0106C2  0E00               	movlw	0
 23036  0106C4  0100               	movlb	0	; () banked
 23037  0106C6  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23038  0106C8  ECF6  F0AA         	call	_Byte_SetBit	;wreg free
 23039                           
 23040                           ;SPI.c: 82: break;
 23041  0106CC  D084               	goto	l609
 23042  0106CE                     
 23043                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 23044  0106CE  0100               	movlb	0	; () banked
 23045  0106D0  EE20 F006          	lfsr	2,6
 23046  0106D4  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23047  0106D6  26D9               	addwf	fsr2l,f,c
 23048  0106D8  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23049  0106DA  22DA               	addwfc	fsr2h,f,c
 23050  0106DC  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23051  0106E0  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23052  0106E4  0E04               	movlw	4
 23053  0106E6  0100               	movlb	0	; () banked
 23054  0106E8  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23055  0106EA  0E00               	movlw	0
 23056  0106EC  0100               	movlb	0	; () banked
 23057  0106EE  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23058  0106F0  ECF6  F0AA         	call	_Byte_SetBit	;wreg free
 23059                           
 23060                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 23061  0106F4  0100               	movlb	0	; () banked
 23062  0106F6  EE20 F003          	lfsr	2,3
 23063  0106FA  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23064  0106FC  26D9               	addwf	fsr2l,f,c
 23065  0106FE  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23066  010700  22DA               	addwfc	fsr2h,f,c
 23067  010702  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23068  010706  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23069  01070A  0E06               	movlw	6
 23070  01070C  0100               	movlb	0	; () banked
 23071  01070E  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23072  010710  0E01               	movlw	1
 23073  010712  0100               	movlb	0	; () banked
 23074  010714  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23075  010716  ECF6  F0AA         	call	_Byte_SetBit	;wreg free
 23076                           
 23077                           ;SPI.c: 86: break;
 23078  01071A  D05D               	goto	l609
 23079  01071C                     
 23080                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 23081  01071C  0100               	movlb	0	; () banked
 23082  01071E  EE20 F006          	lfsr	2,6
 23083  010722  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23084  010724  26D9               	addwf	fsr2l,f,c
 23085  010726  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23086  010728  22DA               	addwfc	fsr2h,f,c
 23087  01072A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23088  01072E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23089  010732  0E04               	movlw	4
 23090  010734  0100               	movlb	0	; () banked
 23091  010736  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23092  010738  0E01               	movlw	1
 23093  01073A  0100               	movlb	0	; () banked
 23094  01073C  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23095  01073E  ECF6  F0AA         	call	_Byte_SetBit	;wreg free
 23096                           
 23097                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 23098  010742  0100               	movlb	0	; () banked
 23099  010744  EE20 F003          	lfsr	2,3
 23100  010748  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23101  01074A  26D9               	addwf	fsr2l,f,c
 23102  01074C  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23103  01074E  22DA               	addwfc	fsr2h,f,c
 23104  010750  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23105  010754  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23106  010758  0E06               	movlw	6
 23107  01075A  0100               	movlb	0	; () banked
 23108  01075C  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23109  01075E  0E00               	movlw	0
 23110  010760  0100               	movlb	0	; () banked
 23111  010762  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23112  010764  ECF6  F0AA         	call	_Byte_SetBit	;wreg free
 23113                           
 23114                           ;SPI.c: 90: break;
 23115  010768  D036               	goto	l609
 23116  01076A                     
 23117                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 23118  01076A  0100               	movlb	0	; () banked
 23119  01076C  EE20 F006          	lfsr	2,6
 23120  010770  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23121  010772  26D9               	addwf	fsr2l,f,c
 23122  010774  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23123  010776  22DA               	addwfc	fsr2h,f,c
 23124  010778  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23125  01077C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23126  010780  0E04               	movlw	4
 23127  010782  0100               	movlb	0	; () banked
 23128  010784  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23129  010786  0E01               	movlw	1
 23130  010788  0100               	movlb	0	; () banked
 23131  01078A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23132  01078C  ECF6  F0AA         	call	_Byte_SetBit	;wreg free
 23133                           
 23134                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 23135  010790  0100               	movlb	0	; () banked
 23136  010792  EE20 F003          	lfsr	2,3
 23137  010796  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23138  010798  26D9               	addwf	fsr2l,f,c
 23139  01079A  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23140  01079C  22DA               	addwfc	fsr2h,f,c
 23141  01079E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23142  0107A2  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23143  0107A6  0E06               	movlw	6
 23144  0107A8  0100               	movlb	0	; () banked
 23145  0107AA  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23146  0107AC  0E01               	movlw	1
 23147  0107AE  0100               	movlb	0	; () banked
 23148  0107B0  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23149  0107B2  ECF6  F0AA         	call	_Byte_SetBit	;wreg free
 23150                           
 23151                           ;SPI.c: 94: break;
 23152  0107B6  D00F               	goto	l609
 23153  0107B8                     l607:
 23154  0107B8  0100               	movlb	0	; () banked
 23155  0107BA  5192               	movf	SPI_Init@pMode& (0+255),w,b
 23156                           
 23157                           ; Switch size 1, requested type "space"
 23158                           ; Number of cases is 4, Range of values is 0 to 3
 23159                           ; switch strategies available:
 23160                           ; Name         Instructions Cycles
 23161                           ; simple_byte           13     7 (average)
 23162                           ;	Chosen strategy is simple_byte
 23163  0107BC  0A00               	xorlw	0	; case 0
 23164  0107BE  B4D8               	btfsc	status,2,c
 23165  0107C0  D75F               	goto	l608
 23166  0107C2  0A01               	xorlw	1	; case 1
 23167  0107C4  B4D8               	btfsc	status,2,c
 23168  0107C6  D783               	goto	l610
 23169  0107C8  0A03               	xorlw	3	; case 2
 23170  0107CA  B4D8               	btfsc	status,2,c
 23171  0107CC  D7A7               	goto	l611
 23172  0107CE  0A01               	xorlw	1	; case 3
 23173  0107D0  A4D8               	btfss	status,2,c
 23174  0107D2  0012               	return	
 23175  0107D4  D7CA               	goto	l612
 23176  0107D6                     l609:
 23177                           
 23178                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 23179                           
 23180                           ; BSR set to: 0
 23181  0107D6  0100               	movlb	0	; () banked
 23182  0107D8  EE20 F006          	lfsr	2,6
 23183  0107DC  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23184  0107DE  26D9               	addwf	fsr2l,f,c
 23185  0107E0  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23186  0107E2  22DA               	addwfc	fsr2h,f,c
 23187  0107E4  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23188  0107E8  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23189  0107EC  0E07               	movlw	7
 23190  0107EE  0100               	movlb	0	; () banked
 23191  0107F0  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23192  0107F2  0E00               	movlw	0
 23193  0107F4  0100               	movlb	0	; () banked
 23194  0107F6  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23195  0107F8  ECF6  F0AA         	call	_Byte_SetBit	;wreg free
 23196                           
 23197                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 23198  0107FC  0100               	movlb	0	; () banked
 23199  0107FE  EE20 F006          	lfsr	2,6
 23200  010802  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23201  010804  26D9               	addwf	fsr2l,f,c
 23202  010806  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23203  010808  22DA               	addwfc	fsr2h,f,c
 23204  01080A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23205  01080E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23206  010812  0E06               	movlw	6
 23207  010814  0100               	movlb	0	; () banked
 23208  010816  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23209  010818  0E00               	movlw	0
 23210  01081A  0100               	movlb	0	; () banked
 23211  01081C  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23212  01081E  ECF6  F0AA         	call	_Byte_SetBit	;wreg free
 23213                           
 23214                           ;SPI.c: 106: Timer2_Init(pClock);
 23215  010822  C08D  F06D         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 23216  010826  C08E  F06E         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 23217  01082A  C08F  F06F         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 23218  01082E  C090  F070         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 23219  010832  EC49  F099         	call	_Timer2_Init	;wreg free
 23220                           
 23221                           ;SPI.c: 112: SPI_DisableISR(pInput);
 23222  010836  C093  F060         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 23223  01083A  C094  F061         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 23224  01083E  EC5F  F0B0         	call	_SPI_DisableISR	;wreg free
 23225                           
 23226                           ;SPI.c: 116: switch (pChannel)
 23227  010842  D004               	goto	l614
 23228  010844                     l615:
 23229                           
 23230                           ; BSR set to: 0
 23231  010844  869F               	bsf	3999,3,c	;volatile
 23232  010846  D00B               	goto	l616
 23233  010848                     l617:
 23234                           
 23235                           ; BSR set to: 0
 23236  010848  8EA5               	bsf	4005,7,c	;volatile
 23237  01084A  D009               	goto	l616
 23238  01084C                     l614:
 23239                           
 23240                           ; BSR set to: 0
 23241  01084C  0100               	movlb	0	; () banked
 23242  01084E  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 23243                           
 23244                           ; Switch size 1, requested type "space"
 23245                           ; Number of cases is 2, Range of values is 0 to 1
 23246                           ; switch strategies available:
 23247                           ; Name         Instructions Cycles
 23248                           ; simple_byte            7     4 (average)
 23249                           ;	Chosen strategy is simple_byte
 23250  010850  0A00               	xorlw	0	; case 0
 23251  010852  B4D8               	btfsc	status,2,c
 23252  010854  D7F7               	goto	l615
 23253  010856  0A01               	xorlw	1	; case 1
 23254  010858  A4D8               	btfss	status,2,c
 23255  01085A  0012               	return	
 23256  01085C  D7F5               	goto	l617
 23257  01085E                     l616:
 23258                           
 23259                           ; BSR set to: 0
 23260                           ;SPI.c: 124: SPI_DCS(pInput);
 23261                           
 23262                           ; BSR set to: 0
 23263  01085E  C093  F060         	movff	SPI_Init@pInput,SPI_DCS@pInput
 23264  010862  C094  F061         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 23265  010866  ECD7  F0AF         	call	_SPI_DCS	;wreg free
 23266                           
 23267                           ;SPI.c: 126: pInput->mBusy = 0;
 23268  01086A  C093  FFD9         	movff	SPI_Init@pInput,fsr2l
 23269  01086E  C094  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 23270  010872  0E00               	movlw	0
 23271  010874  6EDF               	movwf	indf2,c
 23272                           
 23273                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 23274  010876  0100               	movlb	0	; () banked
 23275  010878  EE20 F006          	lfsr	2,6
 23276  01087C  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23277  01087E  26D9               	addwf	fsr2l,f,c
 23278  010880  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23279  010882  22DA               	addwfc	fsr2h,f,c
 23280  010884  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 23281  010888  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 23282  01088C  0E00               	movlw	0
 23283  01088E  0100               	movlb	0	; () banked
 23284  010890  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 23285  010892  0E03               	movlw	3
 23286  010894  0100               	movlb	0	; () banked
 23287  010896  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 23288  010898  ECA8  F0B0         	call	_Byte_SetQuad	;wreg free
 23289                           
 23290                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 23291  01089C  0100               	movlb	0	; () banked
 23292  01089E  EE20 F006          	lfsr	2,6
 23293  0108A2  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23294  0108A4  26D9               	addwf	fsr2l,f,c
 23295  0108A6  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23296  0108A8  22DA               	addwfc	fsr2h,f,c
 23297  0108AA  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23298  0108AE  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23299  0108B2  0E05               	movlw	5
 23300  0108B4  0100               	movlb	0	; () banked
 23301  0108B6  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23302  0108B8  0E01               	movlw	1
 23303  0108BA  0100               	movlb	0	; () banked
 23304  0108BC  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23305  0108BE  ECF6  F0AA         	call	_Byte_SetBit	;wreg free
 23306  0108C2  0012               	return		;funcret
 23307  0108C4                     __end_of_SPI_Init:
 23308                           	opt stack 0
 23309                           tosu	equ	0xFFF
 23310                           tosh	equ	0xFFE
 23311                           tosl	equ	0xFFD
 23312                           pclath	equ	0xFFA
 23313                           tblptru	equ	0xFF8
 23314                           tblptrh	equ	0xFF7
 23315                           tblptrl	equ	0xFF6
 23316                           tablat	equ	0xFF5
 23317                           prodh	equ	0xFF4
 23318                           prodl	equ	0xFF3
 23319                           intcon	equ	0xFF2
 23320                           postinc0	equ	0xFEE
 23321                           wreg	equ	0xFE8
 23322                           indf1	equ	0xFE7
 23323                           postdec1	equ	0xFE5
 23324                           fsr1h	equ	0xFE2
 23325                           fsr1l	equ	0xFE1
 23326                           indf2	equ	0xFDF
 23327                           postinc2	equ	0xFDE
 23328                           postdec2	equ	0xFDD
 23329                           plusw2	equ	0xFDB
 23330                           fsr2h	equ	0xFDA
 23331                           fsr2l	equ	0xFD9
 23332                           status	equ	0xFD8
 23333                           
 23334 ;; *************** function _Timer2_Init *****************
 23335 ;; Defined at:
 23336 ;;		line 10 in file "Library/Timer2.c"
 23337 ;; Parameters:    Size  Location     Type
 23338 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 23339 ;; Auto vars:     Size  Location     Type
 23340 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 23341 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 23342 ;;  RDIV            4   18[BANK0 ] unsigned long 
 23343 ;; Return value:  Size  Location     Type
 23344 ;;                  1    wreg      void 
 23345 ;; Registers used:
 23346 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23347 ;; Tracked objects:
 23348 ;;		On entry : 0/0
 23349 ;;		On exit  : 0/0
 23350 ;;		Unchanged: 0/0
 23351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23352 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23353 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23354 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23355 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23356 ;;Total ram usage:       17 bytes
 23357 ;; Hardware stack levels used:    1
 23358 ;; Hardware stack levels required when called:    8
 23359 ;; This function calls:
 23360 ;;		_Timer2_Clear
 23361 ;;		___lldiv
 23362 ;; This function is called by:
 23363 ;;		_SPI_Init
 23364 ;; This function uses a non-reentrant model
 23365 ;;
 23366                           
 23367                           	psect	text112
 23368  013292                     __ptext112:
 23369                           	opt stack 0
 23370  013292                     _Timer2_Init:
 23371                           	opt stack 18
 23372                           
 23373                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 23374                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 23375                           ;Timer2.c: 14: static UINT8 PRE = 0;
 23376                           ;Timer2.c: 15: static UINT32 DIV = 0;
 23377                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 23378                           
 23379                           ;incstack = 0
 23380  013292  0E00               	movlw	0
 23381  013294  0100               	movlb	0	; () banked
 23382  013296  6F76               	movwf	Timer2_Init@pCPUClock& (0+255),b
 23383  013298  0E6C               	movlw	108
 23384  01329A  6F77               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 23385  01329C  0EDC               	movlw	220
 23386  01329E  6F78               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 23387  0132A0  0E02               	movlw	2
 23388  0132A2  6F79               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 23389                           
 23390                           ; BSR set to: 0
 23391                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 23392                           ;Timer2.c: 20: pFrequency *= 2;
 23393  0132A4  0100               	movlb	0	; () banked
 23394  0132A6  90D8               	bcf	status,0,c
 23395  0132A8  376D               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 23396  0132AA  376E               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 23397  0132AC  376F               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 23398  0132AE  3770               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 23399                           
 23400                           ; BSR set to: 0
 23401                           ;Timer2.c: 23: pCPUClock /= 4;
 23402  0132B0  0E02               	movlw	2
 23403  0132B2  0100               	movlb	0	; () banked
 23404  0132B4  6F71               	movwf	??_Timer2_Init& (0+255),b
 23405  0132B6                     u9195:
 23406  0132B6  90D8               	bcf	status,0,c
 23407  0132B8  0100               	movlb	0	; () banked
 23408  0132BA  3379               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 23409  0132BC  3378               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 23410  0132BE  3377               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 23411  0132C0  3376               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 23412  0132C2  0100               	movlb	0	; () banked
 23413  0132C4  2F71               	decfsz	??_Timer2_Init& (0+255),f,b
 23414  0132C6  D7F7               	goto	u9195
 23415                           
 23416                           ; BSR set to: 0
 23417                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 23418  0132C8  C076  F060         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 23419  0132CC  C077  F061         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 23420  0132D0  C078  F062         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 23421  0132D4  C079  F063         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 23422  0132D8  C06D  F064         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 23423  0132DC  C06E  F065         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 23424  0132E0  C06F  F066         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 23425  0132E4  C070  F067         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 23426  0132E8  EC9B  F0A0         	call	___lldiv	;wreg free
 23427  0132EC  C060  F07A         	movff	?___lldiv,Timer2_Init@DIVIDE
 23428  0132F0  C061  F07B         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 23429  0132F4  C062  F07C         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 23430  0132F8  C063  F07D         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 23431                           
 23432                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 23433  0132FC  D010               	goto	l1828
 23434  0132FE                     l12481:
 23435                           
 23436                           ;Timer2.c: 28: {
 23437                           ;Timer2.c: 29: RDIV = 0;
 23438  0132FE  0E00               	movlw	0
 23439  013300  0100               	movlb	0	; () banked
 23440  013302  6F72               	movwf	Timer2_Init@RDIV& (0+255),b
 23441  013304  0E00               	movlw	0
 23442  013306  6F73               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 23443  013308  0E00               	movlw	0
 23444  01330A  6F74               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 23445  01330C  0E00               	movlw	0
 23446  01330E  6F75               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 23447                           
 23448                           ; BSR set to: 0
 23449                           ;Timer2.c: 30: INDEX ++;
 23450  013310  0100               	movlb	0	; () banked
 23451  013312  2BE4               	incf	Timer2_Init@INDEX& (0+255),f,b
 23452                           
 23453                           ; BSR set to: 0
 23454                           ;Timer2.c: 31: if (INDEX >= 3)
 23455  013314  0E02               	movlw	2
 23456  013316  0100               	movlb	0	; () banked
 23457  013318  65E4               	cpfsgt	Timer2_Init@INDEX& (0+255),b
 23458  01331A  D001               	goto	l1828
 23459  01331C  D026               	goto	u9210
 23460  01331E                     l1828:
 23461                           
 23462                           ; BSR set to: 0
 23463                           
 23464                           ; BSR set to: 0
 23465  01331E  C07A  F060         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 23466  013322  C07B  F061         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 23467  013326  C07C  F062         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 23468  01332A  C07D  F063         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 23469  01332E  0100               	movlb	0	; () banked
 23470  013330  51E4               	movf	Timer2_Init@INDEX& (0+255),w,b
 23471  013332  0D01               	mullw	1
 23472  013334  0E80               	movlw	low Timer2_Init@PRESCALE
 23473  013336  24F3               	addwf	prodl,w,c
 23474  013338  6EF6               	movwf	tblptrl,c
 23475  01333A  0EFD               	movlw	high Timer2_Init@PRESCALE
 23476  01333C  20F4               	addwfc	prodh,w,c
 23477  01333E  6EF7               	movwf	tblptrh,c
 23478  013340                     	if	1	;There are 3 active tblptr bytes
 23479  013340  6AF8               	clrf	tblptru,c
 23480  013342  0E00               	movlw	low (__mediumconst shr (0+16))
 23481  013344  22F8               	addwfc	tblptru,f,c
 23482  013346                     	endif
 23483  013346  0008               	tblrd		*
 23484  013348  50F5               	movf	tablat,w,c
 23485  01334A  0100               	movlb	0	; () banked
 23486  01334C  6F64               	movwf	___lldiv@divisor& (0+255),b
 23487  01334E  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 23488  013350  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 23489  013352  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 23490  013354  EC9B  F0A0         	call	___lldiv	;wreg free
 23491  013358  0100               	movlb	0	; () banked
 23492  01335A  5163               	movf	(?___lldiv+3)& (0+255),w,b
 23493  01335C  0100               	movlb	0	; () banked
 23494  01335E  1162               	iorwf	(?___lldiv+2)& (0+255),w,b
 23495  013360  E1CE               	bnz	l12481
 23496  013362  0100               	movlb	0	; () banked
 23497  013364  0561               	decf	(?___lldiv+1)& (0+255),w,b
 23498  013366  B0D8               	btfsc	status,0,c
 23499  013368  D7CA               	goto	l1827
 23500  01336A                     u9210:
 23501                           
 23502                           ; BSR set to: 0
 23503                           ;Timer2.c: 33: }
 23504                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 23505                           
 23506                           ; BSR set to: 0
 23507  01336A  50CA               	movf	4042,w,c	;volatile
 23508  01336C  0100               	movlb	0	; () banked
 23509  01336E  19E4               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 23510  013370  0BFC               	andlw	-4
 23511  013372  19E4               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 23512  013374  6ECA               	movwf	4042,c	;volatile
 23513                           
 23514                           ; BSR set to: 0
 23515                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 23516  013376  84CA               	bsf	4042,2,c	;volatile
 23517                           
 23518                           ; BSR set to: 0
 23519                           ;Timer2.c: 44: Timer2_Clear();
 23520  013378  EC5C  F0B2         	call	_Timer2_Clear	;wreg free
 23521                           
 23522                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 23523  01337C  0100               	movlb	0	; () banked
 23524  01337E  51E4               	movf	Timer2_Init@INDEX& (0+255),w,b
 23525  013380  0D01               	mullw	1
 23526  013382  0E80               	movlw	low Timer2_Init@PRESCALE
 23527  013384  24F3               	addwf	prodl,w,c
 23528  013386  6EF6               	movwf	tblptrl,c
 23529  013388  0EFD               	movlw	high Timer2_Init@PRESCALE
 23530  01338A  20F4               	addwfc	prodh,w,c
 23531  01338C  6EF7               	movwf	tblptrh,c
 23532  01338E                     	if	1	;There are 3 active tblptr bytes
 23533  01338E  6AF8               	clrf	tblptru,c
 23534  013390  0E00               	movlw	low (__mediumconst shr (0+16))
 23535  013392  22F8               	addwfc	tblptru,f,c
 23536  013394                     	endif
 23537  013394  0008               	tblrd		*
 23538  013396  CFF5 F0E3          	movff	tablat,Timer2_Init@PRE
 23539                           
 23540                           ; BSR set to: 0
 23541                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 23542  01339A  0EFF               	movlw	255
 23543  01339C  0100               	movlb	0	; () banked
 23544  01339E  257A               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 23545  0133A0  0103               	movlb	3	; () banked
 23546  0133A2  6F0C               	movwf	Timer2_Init@DIV& (0+255),b
 23547  0133A4  0EFF               	movlw	255
 23548  0133A6  0100               	movlb	0	; () banked
 23549  0133A8  217B               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 23550  0133AA  0103               	movlb	3	; () banked
 23551  0133AC  6F0D               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 23552  0133AE  0EFF               	movlw	255
 23553  0133B0  0100               	movlb	0	; () banked
 23554  0133B2  217C               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 23555  0133B4  0103               	movlb	3	; () banked
 23556  0133B6  6F0E               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 23557  0133B8  0EFF               	movlw	255
 23558  0133BA  0100               	movlb	0	; () banked
 23559  0133BC  217D               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 23560  0133BE  0103               	movlb	3	; () banked
 23561  0133C0  6F0F               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 23562                           
 23563                           ; BSR set to: 3
 23564                           ;Timer2.c: 48: INDEX = DIV/PRE;
 23565  0133C2  C30C  F060         	movff	Timer2_Init@DIV,___lldiv@dividend
 23566  0133C6  C30D  F061         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 23567  0133CA  C30E  F062         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 23568  0133CE  C30F  F063         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 23569  0133D2  0100               	movlb	0	; () banked
 23570  0133D4  51E3               	movf	Timer2_Init@PRE& (0+255),w,b
 23571  0133D6  0100               	movlb	0	; () banked
 23572  0133D8  6F64               	movwf	___lldiv@divisor& (0+255),b
 23573  0133DA  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 23574  0133DC  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 23575  0133DE  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 23576  0133E0  EC9B  F0A0         	call	___lldiv	;wreg free
 23577  0133E4  0100               	movlb	0	; () banked
 23578  0133E6  5160               	movf	?___lldiv& (0+255),w,b
 23579  0133E8  0100               	movlb	0	; () banked
 23580  0133EA  6FE4               	movwf	Timer2_Init@INDEX& (0+255),b
 23581                           
 23582                           ; BSR set to: 0
 23583                           ;Timer2.c: 49: PR2 = INDEX;
 23584  0133EC  C0E4  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 23585                           
 23586                           ; BSR set to: 0
 23587  0133F0  0012               	return		;funcret
 23588  0133F2                     __end_of_Timer2_Init:
 23589                           	opt stack 0
 23590                           tosu	equ	0xFFF
 23591                           tosh	equ	0xFFE
 23592                           tosl	equ	0xFFD
 23593                           pclath	equ	0xFFA
 23594                           tblptru	equ	0xFF8
 23595                           tblptrh	equ	0xFF7
 23596                           tblptrl	equ	0xFF6
 23597                           tablat	equ	0xFF5
 23598                           prodh	equ	0xFF4
 23599                           prodl	equ	0xFF3
 23600                           intcon	equ	0xFF2
 23601                           postinc0	equ	0xFEE
 23602                           wreg	equ	0xFE8
 23603                           indf1	equ	0xFE7
 23604                           postdec1	equ	0xFE5
 23605                           fsr1h	equ	0xFE2
 23606                           fsr1l	equ	0xFE1
 23607                           indf2	equ	0xFDF
 23608                           postinc2	equ	0xFDE
 23609                           postdec2	equ	0xFDD
 23610                           plusw2	equ	0xFDB
 23611                           fsr2h	equ	0xFDA
 23612                           fsr2l	equ	0xFD9
 23613                           status	equ	0xFD8
 23614                           
 23615 ;; *************** function ___lldiv *****************
 23616 ;; Defined at:
 23617 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
 23618 ;; Parameters:    Size  Location     Type
 23619 ;;  dividend        4    0[BANK0 ] unsigned long 
 23620 ;;  divisor         4    4[BANK0 ] unsigned long 
 23621 ;; Auto vars:     Size  Location     Type
 23622 ;;  quotient        4    8[BANK0 ] unsigned long 
 23623 ;;  counter         1   12[BANK0 ] unsigned char 
 23624 ;; Return value:  Size  Location     Type
 23625 ;;                  4    0[BANK0 ] unsigned long 
 23626 ;; Registers used:
 23627 ;;		wreg, status,2, status,0
 23628 ;; Tracked objects:
 23629 ;;		On entry : 0/0
 23630 ;;		On exit  : 0/0
 23631 ;;		Unchanged: 0/0
 23632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23633 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23634 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23636 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23637 ;;Total ram usage:       13 bytes
 23638 ;; Hardware stack levels used:    1
 23639 ;; Hardware stack levels required when called:    7
 23640 ;; This function calls:
 23641 ;;		Nothing
 23642 ;; This function is called by:
 23643 ;;		_Timer0_Init
 23644 ;;		_Timer2_Init
 23645 ;;		_rand_between
 23646 ;;		_I2C_Init
 23647 ;; This function uses a non-reentrant model
 23648 ;;
 23649                           
 23650                           	psect	text113
 23651  014136                     __ptext113:
 23652                           	opt stack 0
 23653  014136                     ___lldiv:
 23654                           	opt stack 20
 23655                           
 23656                           ; BSR set to: 0
 23657                           ;incstack = 0
 23658  014136  0E00               	movlw	0
 23659  014138  0100               	movlb	0	; () banked
 23660  01413A  6F68               	movwf	___lldiv@quotient& (0+255),b
 23661  01413C  0E00               	movlw	0
 23662  01413E  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
 23663  014140  0E00               	movlw	0
 23664  014142  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
 23665  014144  0E00               	movlw	0
 23666  014146  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
 23667                           
 23668                           ; BSR set to: 0
 23669  014148  0100               	movlb	0	; () banked
 23670  01414A  5164               	movf	___lldiv@divisor& (0+255),w,b
 23671  01414C  0100               	movlb	0	; () banked
 23672  01414E  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 23673  014150  0100               	movlb	0	; () banked
 23674  014152  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 23675  014154  0100               	movlb	0	; () banked
 23676  014156  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 23677  014158  B4D8               	btfsc	status,2,c
 23678  01415A  D042               	goto	l2787
 23679                           
 23680                           ; BSR set to: 0
 23681  01415C  0E01               	movlw	1
 23682  01415E  0100               	movlb	0	; () banked
 23683  014160  6F6C               	movwf	___lldiv@counter& (0+255),b
 23684  014162  D008               	goto	l2782
 23685  014164                     
 23686                           ; BSR set to: 0
 23687                           
 23688                           ; BSR set to: 0
 23689  014164  0100               	movlb	0	; () banked
 23690  014166  90D8               	bcf	status,0,c
 23691  014168  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 23692  01416A  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 23693  01416C  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 23694  01416E  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 23695  014170  0100               	movlb	0	; () banked
 23696  014172  2B6C               	incf	___lldiv@counter& (0+255),f,b
 23697  014174                     l2782:
 23698                           
 23699                           ; BSR set to: 0
 23700                           
 23701                           ; BSR set to: 0
 23702  014174  0100               	movlb	0	; () banked
 23703  014176  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 23704  014178  D7F5               	goto	l2783
 23705  01417A                     u9060:
 23706                           
 23707                           ; BSR set to: 0
 23708                           
 23709                           ; BSR set to: 0
 23710                           
 23711                           ; BSR set to: 0
 23712  01417A  0100               	movlb	0	; () banked
 23713  01417C  90D8               	bcf	status,0,c
 23714  01417E  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 23715  014180  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 23716  014182  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 23717  014184  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 23718                           
 23719                           ; BSR set to: 0
 23720  014186  0100               	movlb	0	; () banked
 23721  014188  5164               	movf	___lldiv@divisor& (0+255),w,b
 23722  01418A  0100               	movlb	0	; () banked
 23723  01418C  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 23724  01418E  0100               	movlb	0	; () banked
 23725  014190  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 23726  014192  0100               	movlb	0	; () banked
 23727  014194  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 23728  014196  0100               	movlb	0	; () banked
 23729  014198  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 23730  01419A  0100               	movlb	0	; () banked
 23731  01419C  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 23732  01419E  0100               	movlb	0	; () banked
 23733  0141A0  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 23734  0141A2  0100               	movlb	0	; () banked
 23735  0141A4  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 23736  0141A6  A0D8               	btfss	status,0,c
 23737  0141A8  D012               	goto	l2786
 23738                           
 23739                           ; BSR set to: 0
 23740  0141AA  0100               	movlb	0	; () banked
 23741  0141AC  5164               	movf	___lldiv@divisor& (0+255),w,b
 23742  0141AE  0100               	movlb	0	; () banked
 23743  0141B0  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 23744  0141B2  0100               	movlb	0	; () banked
 23745  0141B4  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 23746  0141B6  0100               	movlb	0	; () banked
 23747  0141B8  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 23748  0141BA  0100               	movlb	0	; () banked
 23749  0141BC  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 23750  0141BE  0100               	movlb	0	; () banked
 23751  0141C0  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 23752  0141C2  0100               	movlb	0	; () banked
 23753  0141C4  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 23754  0141C6  0100               	movlb	0	; () banked
 23755  0141C8  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 23756                           
 23757                           ; BSR set to: 0
 23758  0141CA  0100               	movlb	0	; () banked
 23759  0141CC  8168               	bsf	___lldiv@quotient& (0+255),0,b
 23760  0141CE                     l2786:
 23761                           
 23762                           ; BSR set to: 0
 23763                           
 23764                           ; BSR set to: 0
 23765  0141CE  0100               	movlb	0	; () banked
 23766  0141D0  90D8               	bcf	status,0,c
 23767  0141D2  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 23768  0141D4  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 23769  0141D6  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 23770  0141D8  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 23771                           
 23772                           ; BSR set to: 0
 23773  0141DA  0100               	movlb	0	; () banked
 23774  0141DC  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 23775  0141DE  D7CD               	goto	u9060
 23776  0141E0                     l2787:
 23777                           
 23778                           ; BSR set to: 0
 23779                           
 23780                           ; BSR set to: 0
 23781  0141E0  C068  F060         	movff	___lldiv@quotient,?___lldiv
 23782  0141E4  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 23783  0141E8  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 23784  0141EC  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 23785                           
 23786                           ; BSR set to: 0
 23787  0141F0  0012               	return		;funcret
 23788  0141F2                     __end_of___lldiv:
 23789                           	opt stack 0
 23790                           tosu	equ	0xFFF
 23791                           tosh	equ	0xFFE
 23792                           tosl	equ	0xFFD
 23793                           pclath	equ	0xFFA
 23794                           tblptru	equ	0xFF8
 23795                           tblptrh	equ	0xFF7
 23796                           tblptrl	equ	0xFF6
 23797                           tablat	equ	0xFF5
 23798                           prodh	equ	0xFF4
 23799                           prodl	equ	0xFF3
 23800                           intcon	equ	0xFF2
 23801                           postinc0	equ	0xFEE
 23802                           wreg	equ	0xFE8
 23803                           indf1	equ	0xFE7
 23804                           postdec1	equ	0xFE5
 23805                           fsr1h	equ	0xFE2
 23806                           fsr1l	equ	0xFE1
 23807                           indf2	equ	0xFDF
 23808                           postinc2	equ	0xFDE
 23809                           postdec2	equ	0xFDD
 23810                           plusw2	equ	0xFDB
 23811                           fsr2h	equ	0xFDA
 23812                           fsr2l	equ	0xFD9
 23813                           status	equ	0xFD8
 23814                           
 23815 ;; *************** function _Timer2_Clear *****************
 23816 ;; Defined at:
 23817 ;;		line 3 in file "Library/Timer2.c"
 23818 ;; Parameters:    Size  Location     Type
 23819 ;;		None
 23820 ;; Auto vars:     Size  Location     Type
 23821 ;;		None
 23822 ;; Return value:  Size  Location     Type
 23823 ;;                  1    wreg      void 
 23824 ;; Registers used:
 23825 ;;		None
 23826 ;; Tracked objects:
 23827 ;;		On entry : 0/0
 23828 ;;		On exit  : 0/0
 23829 ;;		Unchanged: 0/0
 23830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23834 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23835 ;;Total ram usage:        0 bytes
 23836 ;; Hardware stack levels used:    1
 23837 ;; Hardware stack levels required when called:    7
 23838 ;; This function calls:
 23839 ;;		Nothing
 23840 ;; This function is called by:
 23841 ;;		_Timer2_Init
 23842 ;; This function uses a non-reentrant model
 23843 ;;
 23844                           
 23845                           	psect	text114
 23846  0164B8                     __ptext114:
 23847                           	opt stack 0
 23848  0164B8                     _Timer2_Clear:
 23849                           	opt stack 18
 23850                           
 23851                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 23852                           
 23853                           ; BSR set to: 0
 23854                           ;incstack = 0
 23855  0164B8  929E               	bcf	3998,1,c	;volatile
 23856                           
 23857                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 23858  0164BA  929D               	bcf	3997,1,c	;volatile
 23859                           
 23860                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 23861  0164BC  929F               	bcf	3999,1,c	;volatile
 23862  0164BE  0012               	return		;funcret
 23863  0164C0                     __end_of_Timer2_Clear:
 23864                           	opt stack 0
 23865                           tosu	equ	0xFFF
 23866                           tosh	equ	0xFFE
 23867                           tosl	equ	0xFFD
 23868                           pclath	equ	0xFFA
 23869                           tblptru	equ	0xFF8
 23870                           tblptrh	equ	0xFF7
 23871                           tblptrl	equ	0xFF6
 23872                           tablat	equ	0xFF5
 23873                           prodh	equ	0xFF4
 23874                           prodl	equ	0xFF3
 23875                           intcon	equ	0xFF2
 23876                           postinc0	equ	0xFEE
 23877                           wreg	equ	0xFE8
 23878                           indf1	equ	0xFE7
 23879                           postdec1	equ	0xFE5
 23880                           fsr1h	equ	0xFE2
 23881                           fsr1l	equ	0xFE1
 23882                           indf2	equ	0xFDF
 23883                           postinc2	equ	0xFDE
 23884                           postdec2	equ	0xFDD
 23885                           plusw2	equ	0xFDB
 23886                           fsr2h	equ	0xFDA
 23887                           fsr2l	equ	0xFD9
 23888                           status	equ	0xFD8
 23889                           
 23890 ;; *************** function _SPI_DisableISR *****************
 23891 ;; Defined at:
 23892 ;;		line 181 in file "Library/SPI.c"
 23893 ;; Parameters:    Size  Location     Type
 23894 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 23895 ;;		 -> SPI1(11), SPI2(11), 
 23896 ;; Auto vars:     Size  Location     Type
 23897 ;;		None
 23898 ;; Return value:  Size  Location     Type
 23899 ;;                  1    wreg      void 
 23900 ;; Registers used:
 23901 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 23902 ;; Tracked objects:
 23903 ;;		On entry : 0/0
 23904 ;;		On exit  : 0/0
 23905 ;;		Unchanged: 0/0
 23906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23907 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23910 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23911 ;;Total ram usage:        2 bytes
 23912 ;; Hardware stack levels used:    1
 23913 ;; Hardware stack levels required when called:    7
 23914 ;; This function calls:
 23915 ;;		Nothing
 23916 ;; This function is called by:
 23917 ;;		_SPI_Init
 23918 ;; This function uses a non-reentrant model
 23919 ;;
 23920                           
 23921                           	psect	text115
 23922  0160BE                     __ptext115:
 23923                           	opt stack 0
 23924  0160BE                     _SPI_DisableISR:
 23925                           	opt stack 19
 23926                           
 23927                           ;SPI.c: 183: switch (pInput->mChannel)
 23928                           
 23929                           ;incstack = 0
 23930  0160BE  D004               	goto	l654
 23931  0160C0                     l655:
 23932                           
 23933                           ; BSR set to: 0
 23934  0160C0  969D               	bcf	3997,3,c	;volatile
 23935  0160C2  0012               	return	
 23936  0160C4                     l657:
 23937                           
 23938                           ; BSR set to: 0
 23939  0160C4  9EA3               	bcf	4003,7,c	;volatile
 23940                           
 23941                           ; BSR set to: 0
 23942                           ;SPI.c: 188: };
 23943                           
 23944                           ; BSR set to: 0
 23945                           
 23946                           ;SPI.c: 187: default: return;
 23947  0160C6  0012               	return	
 23948  0160C8                     l654:
 23949                           
 23950                           ; BSR set to: 0
 23951  0160C8  0100               	movlb	0	; () banked
 23952  0160CA  EE20 F002          	lfsr	2,2
 23953  0160CE  5160               	movf	SPI_DisableISR@pInput& (0+255),w,b
 23954  0160D0  26D9               	addwf	fsr2l,f,c
 23955  0160D2  5161               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 23956  0160D4  22DA               	addwfc	fsr2h,f,c
 23957  0160D6  50DF               	movf	indf2,w,c
 23958                           
 23959                           ; Switch size 1, requested type "space"
 23960                           ; Number of cases is 2, Range of values is 0 to 1
 23961                           ; switch strategies available:
 23962                           ; Name         Instructions Cycles
 23963                           ; simple_byte            7     4 (average)
 23964                           ;	Chosen strategy is simple_byte
 23965  0160D8  0A00               	xorlw	0	; case 0
 23966  0160DA  B4D8               	btfsc	status,2,c
 23967  0160DC  D7F1               	goto	l655
 23968  0160DE  0A01               	xorlw	1	; case 1
 23969  0160E0  A4D8               	btfss	status,2,c
 23970  0160E2  0012               	return	
 23971  0160E4  D7EF               	goto	l657
 23972  0160E6                     __end_of_SPI_DisableISR:
 23973                           	opt stack 0
 23974                           tosu	equ	0xFFF
 23975                           tosh	equ	0xFFE
 23976                           tosl	equ	0xFFD
 23977                           pclath	equ	0xFFA
 23978                           tblptru	equ	0xFF8
 23979                           tblptrh	equ	0xFF7
 23980                           tblptrl	equ	0xFF6
 23981                           tablat	equ	0xFF5
 23982                           prodh	equ	0xFF4
 23983                           prodl	equ	0xFF3
 23984                           intcon	equ	0xFF2
 23985                           postinc0	equ	0xFEE
 23986                           wreg	equ	0xFE8
 23987                           indf1	equ	0xFE7
 23988                           postdec1	equ	0xFE5
 23989                           fsr1h	equ	0xFE2
 23990                           fsr1l	equ	0xFE1
 23991                           indf2	equ	0xFDF
 23992                           postinc2	equ	0xFDE
 23993                           postdec2	equ	0xFDD
 23994                           plusw2	equ	0xFDB
 23995                           fsr2h	equ	0xFDA
 23996                           fsr2l	equ	0xFD9
 23997                           status	equ	0xFD8
 23998                           
 23999 ;; *************** function _SPI_DCS *****************
 24000 ;; Defined at:
 24001 ;;		line 219 in file "Library/SPI.c"
 24002 ;; Parameters:    Size  Location     Type
 24003 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 24004 ;;		 -> SPI1(11), SPI2(11), 
 24005 ;; Auto vars:     Size  Location     Type
 24006 ;;		None
 24007 ;; Return value:  Size  Location     Type
 24008 ;;                  1    wreg      void 
 24009 ;; Registers used:
 24010 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 24011 ;; Tracked objects:
 24012 ;;		On entry : 0/0
 24013 ;;		On exit  : 0/0
 24014 ;;		Unchanged: 0/0
 24015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24016 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24019 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24020 ;;Total ram usage:        2 bytes
 24021 ;; Hardware stack levels used:    1
 24022 ;; Hardware stack levels required when called:    7
 24023 ;; This function calls:
 24024 ;;		Nothing
 24025 ;; This function is called by:
 24026 ;;		_SPI_Init
 24027 ;; This function uses a non-reentrant model
 24028 ;;
 24029                           
 24030                           	psect	text116
 24031  015FAE                     __ptext116:
 24032                           	opt stack 0
 24033  015FAE                     _SPI_DCS:
 24034                           	opt stack 19
 24035                           
 24036                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 24037                           
 24038                           ; BSR set to: 0
 24039                           ;incstack = 0
 24040  015FAE  0100               	movlb	0	; () banked
 24041  015FB0  EE20 F002          	lfsr	2,2
 24042  015FB4  5160               	movf	SPI_DCS@pInput& (0+255),w,b
 24043  015FB6  26D9               	addwf	fsr2l,f,c
 24044  015FB8  5161               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 24045  015FBA  22DA               	addwfc	fsr2h,f,c
 24046  015FBC  50DF               	movf	indf2,w,c
 24047  015FBE  A4D8               	btfss	status,2,c
 24048  015FC0  D007               	goto	l673
 24049                           
 24050                           ; BSR set to: 0
 24051                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 24052  015FC2  C0EE  FFD9         	movff	_PortC+4,fsr2l
 24053  015FC6  C0EF  FFDA         	movff	_PortC+5,fsr2h
 24054  015FCA  0100               	movlb	0	; () banked
 24055  015FCC  84DF               	bsf	indf2,2,c
 24056  015FCE  0012               	return	
 24057  015FD0                     l673:
 24058                           
 24059                           ; BSR set to: 0
 24060                           ;SPI.c: 223: else
 24061                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 24062                           
 24063                           ; BSR set to: 0
 24064  015FD0  C3A4  FFD9         	movff	_PortD+4,fsr2l
 24065  015FD4  C3A5  FFDA         	movff	_PortD+5,fsr2h
 24066  015FD8  0103               	movlb	3	; () banked
 24067  015FDA  8EDF               	bsf	indf2,7,c
 24068  015FDC  0012               	return	
 24069  015FDE                     __end_of_SPI_DCS:
 24070                           	opt stack 0
 24071                           tosu	equ	0xFFF
 24072                           tosh	equ	0xFFE
 24073                           tosl	equ	0xFFD
 24074                           pclath	equ	0xFFA
 24075                           tblptru	equ	0xFF8
 24076                           tblptrh	equ	0xFF7
 24077                           tblptrl	equ	0xFF6
 24078                           tablat	equ	0xFF5
 24079                           prodh	equ	0xFF4
 24080                           prodl	equ	0xFF3
 24081                           intcon	equ	0xFF2
 24082                           postinc0	equ	0xFEE
 24083                           wreg	equ	0xFE8
 24084                           indf1	equ	0xFE7
 24085                           postdec1	equ	0xFE5
 24086                           fsr1h	equ	0xFE2
 24087                           fsr1l	equ	0xFE1
 24088                           indf2	equ	0xFDF
 24089                           postinc2	equ	0xFDE
 24090                           postdec2	equ	0xFDD
 24091                           plusw2	equ	0xFDB
 24092                           fsr2h	equ	0xFDA
 24093                           fsr2l	equ	0xFD9
 24094                           status	equ	0xFD8
 24095                           
 24096 ;; *************** function _Button_Init *****************
 24097 ;; Defined at:
 24098 ;;		line 18 in file "Library/Button.c"
 24099 ;; Parameters:    Size  Location     Type
 24100 ;;  pInput          2   59[BANK0 ] const PTR struct Button
 24101 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 24102 ;;  pThreshold      2   61[BANK0 ] unsigned short 
 24103 ;;  pInitIO         3   63[BANK0 ] PTR FTN()void 
 24104 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 24105 ;;  pGetState       3   66[BANK0 ] PTR FTN()unsigned char 
 24106 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 24107 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 24108 ;;  pFunction       3   69[BANK0 ] PTR FTN(unsigned char ,)
 24109 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_NULL(1), 
 24110 ;; Auto vars:     Size  Location     Type
 24111 ;;		None
 24112 ;; Return value:  Size  Location     Type
 24113 ;;                  1    wreg      void 
 24114 ;; Registers used:
 24115 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24116 ;; Tracked objects:
 24117 ;;		On entry : 0/0
 24118 ;;		On exit  : 0/0
 24119 ;;		Unchanged: 0/0
 24120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24121 ;;      Params:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24124 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24125 ;;Total ram usage:       13 bytes
 24126 ;; Hardware stack levels used:    1
 24127 ;; Hardware stack levels required when called:   15
 24128 ;; This function calls:
 24129 ;;		_HMI_InitButtons
 24130 ;;		_MXK_InitDIPSwitch
 24131 ;;		_MXK_InitTestButton
 24132 ;; This function is called by:
 24133 ;;		_HMI_Init
 24134 ;;		_FunctInitButton
 24135 ;; This function uses a non-reentrant model
 24136 ;;
 24137                           
 24138                           	psect	text117
 24139  013D4E                     __ptext117:
 24140                           	opt stack 0
 24141  013D4E                     _Button_Init:
 24142                           	opt stack 13
 24143                           
 24144                           ;Button.c: 21: if(pInput==(void*)0)
 24145                           
 24146                           ;incstack = 0
 24147  013D4E  0100               	movlb	0	; () banked
 24148  013D50  519B               	movf	Button_Init@pInput& (0+255),w,b
 24149  013D52  0100               	movlb	0	; () banked
 24150  013D54  119C               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 24151  013D56  B4D8               	btfsc	status,2,c
 24152  013D58  0012               	return	
 24153                           
 24154                           ; BSR set to: 0
 24155                           ;Button.c: 23: if(pInitIO==(void*)0)
 24156                           
 24157                           ; BSR set to: 0
 24158                           
 24159                           ; BSR set to: 0
 24160                           ;Button.c: 22: return;
 24161  013D5A  0100               	movlb	0	; () banked
 24162  013D5C  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 24163  013D5E  0100               	movlb	0	; () banked
 24164  013D60  11A0               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 24165  013D62  0100               	movlb	0	; () banked
 24166  013D64  11A1               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 24167  013D66  B4D8               	btfsc	status,2,c
 24168  013D68  0012               	return	
 24169                           
 24170                           ; BSR set to: 0
 24171                           ;Button.c: 25: if(pGetState==(void*)0)
 24172                           
 24173                           ; BSR set to: 0
 24174                           
 24175                           ; BSR set to: 0
 24176                           ;Button.c: 24: return;
 24177  013D6A  0100               	movlb	0	; () banked
 24178  013D6C  51A2               	movf	Button_Init@pGetState& (0+255),w,b
 24179  013D6E  0100               	movlb	0	; () banked
 24180  013D70  11A3               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 24181  013D72  0100               	movlb	0	; () banked
 24182  013D74  11A4               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 24183  013D76  B4D8               	btfsc	status,2,c
 24184  013D78  0012               	return	
 24185                           
 24186                           ; BSR set to: 0
 24187                           ;Button.c: 27: if(pFunction==(void*)0)
 24188                           
 24189                           ; BSR set to: 0
 24190                           
 24191                           ; BSR set to: 0
 24192                           ;Button.c: 26: return;
 24193  013D7A  0100               	movlb	0	; () banked
 24194  013D7C  51A5               	movf	Button_Init@pFunction& (0+255),w,b
 24195  013D7E  0100               	movlb	0	; () banked
 24196  013D80  11A6               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 24197  013D82  0100               	movlb	0	; () banked
 24198  013D84  11A7               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 24199  013D86  B4D8               	btfsc	status,2,c
 24200  013D88  0012               	return	
 24201                           
 24202                           ; BSR set to: 0
 24203                           ;Button.c: 30: if(pThreshold == 0)
 24204                           
 24205                           ; BSR set to: 0
 24206                           
 24207                           ; BSR set to: 0
 24208                           ;Button.c: 28: return;
 24209  013D8A  0100               	movlb	0	; () banked
 24210  013D8C  519D               	movf	Button_Init@pThreshold& (0+255),w,b
 24211  013D8E  0100               	movlb	0	; () banked
 24212  013D90  119E               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 24213  013D92  A4D8               	btfss	status,2,c
 24214  013D94  D005               	goto	l8
 24215                           
 24216                           ; BSR set to: 0
 24217                           ;Button.c: 31: pThreshold = 1;
 24218  013D96  0E00               	movlw	0
 24219  013D98  0100               	movlb	0	; () banked
 24220  013D9A  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 24221  013D9C  0E01               	movlw	1
 24222  013D9E  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 24223  013DA0                     l8:
 24224                           
 24225                           ; BSR set to: 0
 24226                           ;Button.c: 34: pInput->mState = 0;
 24227                           
 24228                           ; BSR set to: 0
 24229  013DA0  C09B  FFD9         	movff	Button_Init@pInput,fsr2l
 24230  013DA4  C09C  FFDA         	movff	Button_Init@pInput+1,fsr2h
 24231  013DA8  0E00               	movlw	0
 24232  013DAA  6EDF               	movwf	indf2,c
 24233                           
 24234                           ; BSR set to: 0
 24235                           ;Button.c: 35: pInput->mCount = 0;
 24236  013DAC  0100               	movlb	0	; () banked
 24237  013DAE  EE20 F001          	lfsr	2,1
 24238  013DB2  519B               	movf	Button_Init@pInput& (0+255),w,b
 24239  013DB4  26D9               	addwf	fsr2l,f,c
 24240  013DB6  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 24241  013DB8  22DA               	addwfc	fsr2h,f,c
 24242  013DBA  0E00               	movlw	0
 24243  013DBC  6EDF               	movwf	indf2,c
 24244                           
 24245                           ; BSR set to: 0
 24246                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 24247  013DBE  0100               	movlb	0	; () banked
 24248  013DC0  EE20 F002          	lfsr	2,2
 24249  013DC4  519B               	movf	Button_Init@pInput& (0+255),w,b
 24250  013DC6  26D9               	addwf	fsr2l,f,c
 24251  013DC8  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 24252  013DCA  22DA               	addwfc	fsr2h,f,c
 24253  013DCC  C09D  FFDE         	movff	Button_Init@pThreshold,postinc2
 24254  013DD0  C09E  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 24255                           
 24256                           ; BSR set to: 0
 24257                           ;Button.c: 37: pInput->mFunction = pFunction;
 24258  013DD4  0100               	movlb	0	; () banked
 24259  013DD6  EE20 F004          	lfsr	2,4
 24260  013DDA  519B               	movf	Button_Init@pInput& (0+255),w,b
 24261  013DDC  26D9               	addwf	fsr2l,f,c
 24262  013DDE  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 24263  013DE0  22DA               	addwfc	fsr2h,f,c
 24264  013DE2  C0A5  FFDE         	movff	Button_Init@pFunction,postinc2
 24265  013DE6  C0A6  FFDE         	movff	Button_Init@pFunction+1,postinc2
 24266  013DEA  C0A7  FFDE         	movff	Button_Init@pFunction+2,postinc2
 24267                           
 24268                           ; BSR set to: 0
 24269                           ;Button.c: 38: pInput->mGetState = pGetState;
 24270  013DEE  0100               	movlb	0	; () banked
 24271  013DF0  EE20 F007          	lfsr	2,7
 24272  013DF4  519B               	movf	Button_Init@pInput& (0+255),w,b
 24273  013DF6  26D9               	addwf	fsr2l,f,c
 24274  013DF8  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 24275  013DFA  22DA               	addwfc	fsr2h,f,c
 24276  013DFC  C0A2  FFDE         	movff	Button_Init@pGetState,postinc2
 24277  013E00  C0A3  FFDE         	movff	Button_Init@pGetState+1,postinc2
 24278  013E04  C0A4  FFDE         	movff	Button_Init@pGetState+2,postinc2
 24279                           
 24280                           ; BSR set to: 0
 24281                           ;Button.c: 41: pInitIO();
 24282  013E08  D801               	call	u9678
 24283  013E0A  0012               	return	
 24284  013E0C                     u9678:
 24285  013E0C  0005               	push	
 24286  013E0E  6EFA               	movwf	pclath,c
 24287  013E10  0100               	movlb	0	; () banked
 24288  013E12  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 24289  013E14  6EFD               	movwf	tosl,c
 24290  013E16  51A0               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 24291  013E18  6EFE               	movwf	tosh,c
 24292  013E1A  51A1               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 24293  013E1C  6EFF               	movwf	tosu,c
 24294  013E1E  50FA               	movf	pclath,w,c
 24295  013E20  0012               	return		;indir
 24296  013E22                     __end_of_Button_Init:
 24297                           	opt stack 0
 24298                           tosu	equ	0xFFF
 24299                           tosh	equ	0xFFE
 24300                           tosl	equ	0xFFD
 24301                           pclath	equ	0xFFA
 24302                           tblptru	equ	0xFF8
 24303                           tblptrh	equ	0xFF7
 24304                           tblptrl	equ	0xFF6
 24305                           tablat	equ	0xFF5
 24306                           prodh	equ	0xFF4
 24307                           prodl	equ	0xFF3
 24308                           intcon	equ	0xFF2
 24309                           postinc0	equ	0xFEE
 24310                           wreg	equ	0xFE8
 24311                           indf1	equ	0xFE7
 24312                           postdec1	equ	0xFE5
 24313                           fsr1h	equ	0xFE2
 24314                           fsr1l	equ	0xFE1
 24315                           indf2	equ	0xFDF
 24316                           postinc2	equ	0xFDE
 24317                           postdec2	equ	0xFDD
 24318                           plusw2	equ	0xFDB
 24319                           fsr2h	equ	0xFDA
 24320                           fsr2l	equ	0xFD9
 24321                           status	equ	0xFD8
 24322                           
 24323 ;; *************** function _MXK_InitDIPSwitch *****************
 24324 ;; Defined at:
 24325 ;;		line 20 in file "Library/MXK.c"
 24326 ;; Parameters:    Size  Location     Type
 24327 ;;		None
 24328 ;; Auto vars:     Size  Location     Type
 24329 ;;		None
 24330 ;; Return value:  Size  Location     Type
 24331 ;;                  1    wreg      void 
 24332 ;; Registers used:
 24333 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24334 ;; Tracked objects:
 24335 ;;		On entry : 0/0
 24336 ;;		On exit  : 0/0
 24337 ;;		Unchanged: 0/0
 24338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24342 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24343 ;;Total ram usage:        0 bytes
 24344 ;; Hardware stack levels used:    1
 24345 ;; Hardware stack levels required when called:   14
 24346 ;; This function calls:
 24347 ;;		_Port_SetQuadType
 24348 ;; This function is called by:
 24349 ;;		_FunctInitButton
 24350 ;;		_Button_Init
 24351 ;; This function uses a non-reentrant model
 24352 ;;
 24353                           
 24354                           	psect	text118
 24355  016228                     __ptext118:
 24356                           	opt stack 0
 24357  016228                     _MXK_InitDIPSwitch:
 24358                           	opt stack 13
 24359                           
 24360                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 24361                           
 24362                           ;incstack = 0
 24363  016228  0EA0               	movlw	low _PortD
 24364  01622A  0100               	movlb	0	; () banked
 24365  01622C  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
 24366  01622E  0E03               	movlw	high _PortD
 24367  016230  0100               	movlb	0	; () banked
 24368  016232  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 24369  016234  0E00               	movlw	0
 24370  016236  0100               	movlb	0	; () banked
 24371  016238  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
 24372  01623A  0E00               	movlw	0
 24373  01623C  0100               	movlb	0	; () banked
 24374  01623E  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
 24375  016240  EC25  F08D         	call	_Port_SetQuadType	;wreg free
 24376  016244  0012               	return		;funcret
 24377  016246                     __end_of_MXK_InitDIPSwitch:
 24378                           	opt stack 0
 24379                           tosu	equ	0xFFF
 24380                           tosh	equ	0xFFE
 24381                           tosl	equ	0xFFD
 24382                           pclath	equ	0xFFA
 24383                           tblptru	equ	0xFF8
 24384                           tblptrh	equ	0xFF7
 24385                           tblptrl	equ	0xFF6
 24386                           tablat	equ	0xFF5
 24387                           prodh	equ	0xFF4
 24388                           prodl	equ	0xFF3
 24389                           intcon	equ	0xFF2
 24390                           postinc0	equ	0xFEE
 24391                           wreg	equ	0xFE8
 24392                           indf1	equ	0xFE7
 24393                           postdec1	equ	0xFE5
 24394                           fsr1h	equ	0xFE2
 24395                           fsr1l	equ	0xFE1
 24396                           indf2	equ	0xFDF
 24397                           postinc2	equ	0xFDE
 24398                           postdec2	equ	0xFDD
 24399                           plusw2	equ	0xFDB
 24400                           fsr2h	equ	0xFDA
 24401                           fsr2l	equ	0xFD9
 24402                           status	equ	0xFD8
 24403                           
 24404 ;; *************** function _HMI_InitButtons *****************
 24405 ;; Defined at:
 24406 ;;		line 21 in file "HMI.c"
 24407 ;; Parameters:    Size  Location     Type
 24408 ;;		None
 24409 ;; Auto vars:     Size  Location     Type
 24410 ;;		None
 24411 ;; Return value:  Size  Location     Type
 24412 ;;                  1    wreg      void 
 24413 ;; Registers used:
 24414 ;;		wreg, status,2
 24415 ;; Tracked objects:
 24416 ;;		On entry : 0/0
 24417 ;;		On exit  : 0/0
 24418 ;;		Unchanged: 0/0
 24419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24423 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24424 ;;Total ram usage:        0 bytes
 24425 ;; Hardware stack levels used:    1
 24426 ;; Hardware stack levels required when called:    7
 24427 ;; This function calls:
 24428 ;;		Nothing
 24429 ;; This function is called by:
 24430 ;;		_HMI_Init
 24431 ;;		_Button_Init
 24432 ;; This function uses a non-reentrant model
 24433 ;;
 24434                           
 24435                           	psect	text119
 24436  0164DC                     __ptext119:
 24437                           	opt stack 0
 24438  0164DC                     _HMI_InitButtons:
 24439                           	opt stack 20
 24440                           
 24441                           ;HMI.c: 23: TRISE = 0xFC;
 24442                           
 24443                           ;incstack = 0
 24444  0164DC  0EFC               	movlw	252
 24445  0164DE  6E96               	movwf	3990,c	;volatile
 24446  0164E0  0012               	return		;funcret
 24447  0164E2                     __end_of_HMI_InitButtons:
 24448                           	opt stack 0
 24449                           tosu	equ	0xFFF
 24450                           tosh	equ	0xFFE
 24451                           tosl	equ	0xFFD
 24452                           pclath	equ	0xFFA
 24453                           tblptru	equ	0xFF8
 24454                           tblptrh	equ	0xFF7
 24455                           tblptrl	equ	0xFF6
 24456                           tablat	equ	0xFF5
 24457                           prodh	equ	0xFF4
 24458                           prodl	equ	0xFF3
 24459                           intcon	equ	0xFF2
 24460                           postinc0	equ	0xFEE
 24461                           wreg	equ	0xFE8
 24462                           indf1	equ	0xFE7
 24463                           postdec1	equ	0xFE5
 24464                           fsr1h	equ	0xFE2
 24465                           fsr1l	equ	0xFE1
 24466                           indf2	equ	0xFDF
 24467                           postinc2	equ	0xFDE
 24468                           postdec2	equ	0xFDD
 24469                           plusw2	equ	0xFDB
 24470                           fsr2h	equ	0xFDA
 24471                           fsr2l	equ	0xFD9
 24472                           status	equ	0xFD8
 24473                           
 24474 ;; *************** function _MXK_InitTestButton *****************
 24475 ;; Defined at:
 24476 ;;		line 10 in file "Library/MXK.c"
 24477 ;; Parameters:    Size  Location     Type
 24478 ;;		None
 24479 ;; Auto vars:     Size  Location     Type
 24480 ;;		None
 24481 ;; Return value:  Size  Location     Type
 24482 ;;                  1    wreg      void 
 24483 ;; Registers used:
 24484 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24485 ;; Tracked objects:
 24486 ;;		On entry : 0/0
 24487 ;;		On exit  : 0/0
 24488 ;;		Unchanged: 0/0
 24489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24493 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24494 ;;Total ram usage:        0 bytes
 24495 ;; Hardware stack levels used:    1
 24496 ;; Hardware stack levels required when called:   12
 24497 ;; This function calls:
 24498 ;;		_Port_SetPinType
 24499 ;; This function is called by:
 24500 ;;		_FunctInitButton
 24501 ;;		_Button_Init
 24502 ;; This function uses a non-reentrant model
 24503 ;;
 24504                           
 24505                           	psect	text120
 24506  016246                     __ptext120:
 24507                           	opt stack 0
 24508  016246                     _MXK_InitTestButton:
 24509                           	opt stack 15
 24510                           
 24511                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 24512                           
 24513                           ;incstack = 0
 24514  016246  0EAA               	movlw	low _PortB
 24515  016248  0100               	movlb	0	; () banked
 24516  01624A  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 24517  01624C  0E03               	movlw	high _PortB
 24518  01624E  0100               	movlb	0	; () banked
 24519  016250  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 24520  016252  0E04               	movlw	4
 24521  016254  0100               	movlb	0	; () banked
 24522  016256  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 24523  016258  0E00               	movlw	0
 24524  01625A  0100               	movlb	0	; () banked
 24525  01625C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 24526  01625E  EC32  F093         	call	_Port_SetPinType	;wreg free
 24527  016262  0012               	return		;funcret
 24528  016264                     __end_of_MXK_InitTestButton:
 24529                           	opt stack 0
 24530                           tosu	equ	0xFFF
 24531                           tosh	equ	0xFFE
 24532                           tosl	equ	0xFFD
 24533                           pclath	equ	0xFFA
 24534                           tblptru	equ	0xFF8
 24535                           tblptrh	equ	0xFF7
 24536                           tblptrl	equ	0xFF6
 24537                           tablat	equ	0xFF5
 24538                           prodh	equ	0xFF4
 24539                           prodl	equ	0xFF3
 24540                           intcon	equ	0xFF2
 24541                           postinc0	equ	0xFEE
 24542                           wreg	equ	0xFE8
 24543                           indf1	equ	0xFE7
 24544                           postdec1	equ	0xFE5
 24545                           fsr1h	equ	0xFE2
 24546                           fsr1l	equ	0xFE1
 24547                           indf2	equ	0xFDF
 24548                           postinc2	equ	0xFDE
 24549                           postdec2	equ	0xFDD
 24550                           plusw2	equ	0xFDB
 24551                           fsr2h	equ	0xFDA
 24552                           fsr2l	equ	0xFD9
 24553                           status	equ	0xFD8
 24554                           
 24555 ;; *************** function _Port_SetPinType *****************
 24556 ;; Defined at:
 24557 ;;		line 189 in file "Library/Port.c"
 24558 ;; Parameters:    Size  Location     Type
 24559 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 24560 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 24561 ;;		 -> PortD(10), PortC(10), PortF(10), 
 24562 ;;  pPin            1   40[BANK0 ] enum E6750
 24563 ;;  pType           1   41[BANK0 ] enum E6795
 24564 ;; Auto vars:     Size  Location     Type
 24565 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 24566 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 24567 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 24568 ;;  Output          1   42[BANK0 ] enum E6475
 24569 ;; Return value:  Size  Location     Type
 24570 ;;                  1    wreg      enum E6475
 24571 ;; Registers used:
 24572 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24573 ;; Tracked objects:
 24574 ;;		On entry : 0/0
 24575 ;;		On exit  : 0/0
 24576 ;;		Unchanged: 0/0
 24577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24578 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24579 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24581 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24582 ;;Total ram usage:        7 bytes
 24583 ;; Hardware stack levels used:    1
 24584 ;; Hardware stack levels required when called:   11
 24585 ;; This function calls:
 24586 ;;		_Byte_SetBit
 24587 ;;		_PortProperty_Valid
 24588 ;;		_Word_SetPair
 24589 ;; This function is called by:
 24590 ;;		_Configure_GPIOs
 24591 ;;		_LED_Init
 24592 ;;		_Port_Init
 24593 ;;		_SPI_Init
 24594 ;;		_Motor_Init
 24595 ;;		_MXK_InitTestButton
 24596 ;;		_MXK_Init
 24597 ;;		_I2C_Init
 24598 ;; This function uses a non-reentrant model
 24599 ;;
 24600                           
 24601                           	psect	text121
 24602  012664                     __ptext121:
 24603                           	opt stack 0
 24604  012664                     _Port_SetPinType:
 24605                           	opt stack 17
 24606                           
 24607                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 24608                           
 24609                           ;incstack = 0
 24610  012664  C086  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 24611  012668  C087  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 24612  01266C  CFDE F08B          	movff	postinc2,Port_SetPinType@Props
 24613  012670  CFDD F08C          	movff	postdec2,Port_SetPinType@Props+1
 24614                           
 24615                           ;Port.c: 192: ePinError Output = ePinErrorState;
 24616  012674  0E05               	movlw	5
 24617  012676  0100               	movlb	0	; () banked
 24618  012678  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 24619                           
 24620                           ;Port.c: 193: switch (pType)
 24621  01267A  D0B5               	goto	l412
 24622  01267C                     
 24623                           ; BSR set to: 0
 24624                           ;Port.c: 197: {
 24625                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 24626                           
 24627                           ; BSR set to: 0
 24628  01267C  0100               	movlb	0	; () banked
 24629  01267E  EE20 F002          	lfsr	2,2
 24630  012682  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 24631  012684  26D9               	addwf	fsr2l,f,c
 24632  012686  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 24633  012688  22DA               	addwfc	fsr2h,f,c
 24634  01268A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 24635  01268E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 24636  012692  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 24637  012696  0E01               	movlw	1
 24638  012698  0100               	movlb	0	; () banked
 24639  01269A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 24640  01269C  ECF6  F0AA         	call	_Byte_SetBit	;wreg free
 24641                           
 24642                           ;Port.c: 203: break;
 24643  0126A0  D0B0               	goto	l414
 24644  0126A2                     
 24645                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 24646  0126A2  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 24647  0126A6  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 24648  0126AA  0E01               	movlw	1
 24649  0126AC  0100               	movlb	0	; () banked
 24650  0126AE  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 24651  0126B0  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 24652  0126B4  EC73  F0A7         	call	_PortProperty_Valid	;wreg free
 24653  0126B8  0100               	movlb	0	; () banked
 24654  0126BA  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 24655  0126BC  0100               	movlb	0	; () banked
 24656  0126BE  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 24657  0126C0  A4D8               	btfss	status,2,c
 24658  0126C2  0012               	return	
 24659                           
 24660                           ; BSR set to: 0
 24661                           ;Port.c: 208: {
 24662                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 24663  0126C4  0100               	movlb	0	; () banked
 24664  0126C6  EE20 F002          	lfsr	2,2
 24665  0126CA  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 24666  0126CC  26D9               	addwf	fsr2l,f,c
 24667  0126CE  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 24668  0126D0  22DA               	addwfc	fsr2h,f,c
 24669  0126D2  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 24670  0126D6  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 24671  0126DA  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 24672  0126DE  0E00               	movlw	0
 24673  0126E0  0100               	movlb	0	; () banked
 24674  0126E2  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 24675  0126E4  ECF6  F0AA         	call	_Byte_SetBit	;wreg free
 24676                           
 24677                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 24678  0126E8  0100               	movlb	0	; () banked
 24679  0126EA  EE20 F004          	lfsr	2,4
 24680  0126EE  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 24681  0126F0  26D9               	addwf	fsr2l,f,c
 24682  0126F2  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 24683  0126F4  22DA               	addwfc	fsr2h,f,c
 24684  0126F6  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 24685  0126FA  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 24686  0126FE  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 24687  012702  0E00               	movlw	0
 24688  012704  0100               	movlb	0	; () banked
 24689  012706  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 24690  012708  ECF6  F0AA         	call	_Byte_SetBit	;wreg free
 24691                           
 24692                           ;Port.c: 214: break;
 24693  01270C  D07A               	goto	l414
 24694  01270E                     
 24695                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 24696                           
 24697                           ;Port.c: 218: case eTypeOutputOpenSource:
 24698  01270E  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 24699  012712  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 24700  012716  0E02               	movlw	2
 24701  012718  0100               	movlb	0	; () banked
 24702  01271A  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 24703  01271C  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 24704  012720  EC73  F0A7         	call	_PortProperty_Valid	;wreg free
 24705  012724  0100               	movlb	0	; () banked
 24706  012726  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 24707  012728  0100               	movlb	0	; () banked
 24708  01272A  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 24709  01272C  A4D8               	btfss	status,2,c
 24710  01272E  0012               	return	
 24711                           
 24712                           ; BSR set to: 0
 24713                           ;Port.c: 220: {
 24714                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 24715  012730  0100               	movlb	0	; () banked
 24716  012732  EE20 F002          	lfsr	2,2
 24717  012736  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 24718  012738  26D9               	addwf	fsr2l,f,c
 24719  01273A  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 24720  01273C  22DA               	addwfc	fsr2h,f,c
 24721  01273E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 24722  012742  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 24723  012746  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 24724  01274A  0E01               	movlw	1
 24725  01274C  0100               	movlb	0	; () banked
 24726  01274E  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 24727  012750  ECF6  F0AA         	call	_Byte_SetBit	;wreg free
 24728                           
 24729                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 24730  012754  0100               	movlb	0	; () banked
 24731  012756  EE20 F004          	lfsr	2,4
 24732  01275A  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 24733  01275C  26D9               	addwf	fsr2l,f,c
 24734  01275E  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 24735  012760  22DA               	addwfc	fsr2h,f,c
 24736  012762  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 24737  012766  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 24738  01276A  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 24739  01276E  0E01               	movlw	1
 24740  012770  0100               	movlb	0	; () banked
 24741  012772  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 24742  012774  ECF6  F0AA         	call	_Byte_SetBit	;wreg free
 24743                           
 24744                           ;Port.c: 226: break;
 24745  012778  D044               	goto	l414
 24746  01277A                     
 24747                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 24748                           
 24749                           ;Port.c: 230: case eTypeOutputPushPull:
 24750  01277A  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 24751  01277E  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 24752  012782  0E00               	movlw	0
 24753  012784  0100               	movlb	0	; () banked
 24754  012786  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 24755  012788  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 24756  01278C  EC73  F0A7         	call	_PortProperty_Valid	;wreg free
 24757  012790  0100               	movlb	0	; () banked
 24758  012792  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 24759  012794  0100               	movlb	0	; () banked
 24760  012796  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 24761  012798  A4D8               	btfss	status,2,c
 24762  01279A  0012               	return	
 24763                           
 24764                           ; BSR set to: 0
 24765                           ;Port.c: 232: {
 24766                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 24767  01279C  0100               	movlb	0	; () banked
 24768  01279E  EE20 F002          	lfsr	2,2
 24769  0127A2  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 24770  0127A4  26D9               	addwf	fsr2l,f,c
 24771  0127A6  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 24772  0127A8  22DA               	addwfc	fsr2h,f,c
 24773  0127AA  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 24774  0127AE  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 24775  0127B2  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 24776  0127B6  0E00               	movlw	0
 24777  0127B8  0100               	movlb	0	; () banked
 24778  0127BA  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 24779  0127BC  ECF6  F0AA         	call	_Byte_SetBit	;wreg free
 24780                           
 24781                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 24782  0127C0  0100               	movlb	0	; () banked
 24783  0127C2  EE20 F004          	lfsr	2,4
 24784  0127C6  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 24785  0127C8  26D9               	addwf	fsr2l,f,c
 24786  0127CA  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 24787  0127CC  22DA               	addwfc	fsr2h,f,c
 24788  0127CE  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 24789  0127D2  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 24790  0127D6  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 24791  0127DA  0E00               	movlw	0
 24792  0127DC  0100               	movlb	0	; () banked
 24793  0127DE  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 24794  0127E0  ECF6  F0AA         	call	_Byte_SetBit	;wreg free
 24795                           
 24796                           ;Port.c: 239: }
 24797                           
 24798                           ;Port.c: 238: break;
 24799  0127E4  D00E               	goto	l414
 24800  0127E6                     l412:
 24801  0127E6  0100               	movlb	0	; () banked
 24802  0127E8  5189               	movf	Port_SetPinType@pType& (0+255),w,b
 24803                           
 24804                           ; Switch size 1, requested type "space"
 24805                           ; Number of cases is 4, Range of values is 0 to 3
 24806                           ; switch strategies available:
 24807                           ; Name         Instructions Cycles
 24808                           ; simple_byte           13     7 (average)
 24809                           ;	Chosen strategy is simple_byte
 24810  0127EA  0A00               	xorlw	0	; case 0
 24811  0127EC  B4D8               	btfsc	status,2,c
 24812  0127EE  D746               	goto	l413
 24813  0127F0  0A01               	xorlw	1	; case 1
 24814  0127F2  B4D8               	btfsc	status,2,c
 24815  0127F4  D756               	goto	l415
 24816  0127F6  0A03               	xorlw	3	; case 2
 24817  0127F8  B4D8               	btfsc	status,2,c
 24818  0127FA  D789               	goto	l417
 24819  0127FC  0A01               	xorlw	1	; case 3
 24820  0127FE  B4D8               	btfsc	status,2,c
 24821  012800  D7BC               	goto	l421
 24822  012802                     l414:
 24823                           
 24824                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 24825                           
 24826                           ; BSR set to: 0
 24827  012802  0E08               	movlw	8
 24828  012804  0100               	movlb	0	; () banked
 24829  012806  2586               	addwf	Port_SetPinType@pInput& (0+255),w,b
 24830  012808  0100               	movlb	0	; () banked
 24831  01280A  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 24832  01280C  0E00               	movlw	0
 24833  01280E  0100               	movlb	0	; () banked
 24834  012810  2187               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 24835  012812  0100               	movlb	0	; () banked
 24836  012814  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 24837  012816  C088  F071         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 24838  01281A  C089  F072         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 24839  01281E  ECB9  F0AD         	call	_Word_SetPair	;wreg free
 24840  012822  0012               	return	
 24841  012824                     __end_of_Port_SetPinType:
 24842                           	opt stack 0
 24843                           tosu	equ	0xFFF
 24844                           tosh	equ	0xFFE
 24845                           tosl	equ	0xFFD
 24846                           pclath	equ	0xFFA
 24847                           tblptru	equ	0xFF8
 24848                           tblptrh	equ	0xFF7
 24849                           tblptrl	equ	0xFF6
 24850                           tablat	equ	0xFF5
 24851                           prodh	equ	0xFF4
 24852                           prodl	equ	0xFF3
 24853                           intcon	equ	0xFF2
 24854                           postinc0	equ	0xFEE
 24855                           wreg	equ	0xFE8
 24856                           indf1	equ	0xFE7
 24857                           postdec1	equ	0xFE5
 24858                           fsr1h	equ	0xFE2
 24859                           fsr1l	equ	0xFE1
 24860                           indf2	equ	0xFDF
 24861                           postinc2	equ	0xFDE
 24862                           postdec2	equ	0xFDD
 24863                           plusw2	equ	0xFDB
 24864                           fsr2h	equ	0xFDA
 24865                           fsr2l	equ	0xFD9
 24866                           status	equ	0xFD8
 24867                           
 24868 ;; *************** function _Byte_SetBit *****************
 24869 ;; Defined at:
 24870 ;;		line 32 in file "Library/Types.c"
 24871 ;; Parameters:    Size  Location     Type
 24872 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 24873 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 24874 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 24875 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 24876 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 24877 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 24878 ;;		 -> NULL(0), 
 24879 ;;  pBit            1    2[BANK0 ] unsigned char 
 24880 ;;  pValue          1    3[BANK0 ] unsigned char 
 24881 ;; Auto vars:     Size  Location     Type
 24882 ;;		None
 24883 ;; Return value:  Size  Location     Type
 24884 ;;                  1    wreg      void 
 24885 ;; Registers used:
 24886 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 24887 ;; Tracked objects:
 24888 ;;		On entry : 0/0
 24889 ;;		On exit  : 0/0
 24890 ;;		Unchanged: 0/0
 24891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24892 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24893 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24894 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24895 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24896 ;;Total ram usage:        7 bytes
 24897 ;; Hardware stack levels used:    1
 24898 ;; Hardware stack levels required when called:    7
 24899 ;; This function calls:
 24900 ;;		Nothing
 24901 ;; This function is called by:
 24902 ;;		_Port_SetPinType
 24903 ;;		_Port_SetPin
 24904 ;;		_SPI_Init
 24905 ;;		_SPI_MinSpeed
 24906 ;;		_SPI_MaxSpeed
 24907 ;;		_Word_SetBit
 24908 ;;		_I2C_Init
 24909 ;; This function uses a non-reentrant model
 24910 ;;
 24911                           
 24912                           	psect	text122
 24913  0155EC                     __ptext122:
 24914                           	opt stack 0
 24915  0155EC                     _Byte_SetBit:
 24916                           	opt stack 19
 24917                           
 24918                           ;Types.c: 34: pValue &= 1;
 24919                           
 24920                           ;incstack = 0
 24921  0155EC  0E01               	movlw	1
 24922  0155EE  0100               	movlb	0	; () banked
 24923  0155F0  1763               	andwf	Byte_SetBit@pValue& (0+255),f,b
 24924                           
 24925                           ; BSR set to: 0
 24926                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 24927  0155F2  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 24928  0155F6  0E01               	movlw	1
 24929  0155F8  0100               	movlb	0	; () banked
 24930  0155FA  6F65               	movwf	(??_Byte_SetBit+1)& (0+255),b
 24931  0155FC  0100               	movlb	0	; () banked
 24932  0155FE  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 24933  015600  D003               	goto	u8654
 24934  015602                     u8655:
 24935  015602  0100               	movlb	0	; () banked
 24936  015604  90D8               	bcf	status,0,c
 24937  015606  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 24938  015608                     u8654:
 24939  015608  0100               	movlb	0	; () banked
 24940  01560A  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 24941  01560C  D7FA               	goto	u8655
 24942  01560E  0100               	movlb	0	; () banked
 24943  015610  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 24944  015612  0AFF               	xorlw	255
 24945  015614  0100               	movlb	0	; () banked
 24946  015616  6F66               	movwf	(??_Byte_SetBit+2)& (0+255),b
 24947  015618  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 24948  01561C  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 24949  015620  0100               	movlb	0	; () banked
 24950  015622  5166               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 24951  015624  16DF               	andwf	indf2,f,c
 24952                           
 24953                           ; BSR set to: 0
 24954                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 24955  015626  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 24956  01562A  C063  F065         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 24957  01562E  0100               	movlb	0	; () banked
 24958  015630  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 24959  015632  D003               	goto	u8664
 24960  015634                     u8665:
 24961  015634  0100               	movlb	0	; () banked
 24962  015636  90D8               	bcf	status,0,c
 24963  015638  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 24964  01563A                     u8664:
 24965  01563A  0100               	movlb	0	; () banked
 24966  01563C  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 24967  01563E  D7FA               	goto	u8665
 24968  015640  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 24969  015644  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 24970  015648  0100               	movlb	0	; () banked
 24971  01564A  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 24972  01564C  12DF               	iorwf	indf2,f,c
 24973                           
 24974                           ; BSR set to: 0
 24975  01564E  0012               	return		;funcret
 24976  015650                     __end_of_Byte_SetBit:
 24977                           	opt stack 0
 24978                           tosu	equ	0xFFF
 24979                           tosh	equ	0xFFE
 24980                           tosl	equ	0xFFD
 24981                           pclath	equ	0xFFA
 24982                           tblptru	equ	0xFF8
 24983                           tblptrh	equ	0xFF7
 24984                           tblptrl	equ	0xFF6
 24985                           tablat	equ	0xFF5
 24986                           prodh	equ	0xFF4
 24987                           prodl	equ	0xFF3
 24988                           intcon	equ	0xFF2
 24989                           postinc0	equ	0xFEE
 24990                           wreg	equ	0xFE8
 24991                           indf1	equ	0xFE7
 24992                           postdec1	equ	0xFE5
 24993                           fsr1h	equ	0xFE2
 24994                           fsr1l	equ	0xFE1
 24995                           indf2	equ	0xFDF
 24996                           postinc2	equ	0xFDE
 24997                           postdec2	equ	0xFDD
 24998                           plusw2	equ	0xFDB
 24999                           fsr2h	equ	0xFDA
 25000                           fsr2l	equ	0xFD9
 25001                           status	equ	0xFD8
 25002                           
 25003 ;; *************** function _Port_SetQuadType *****************
 25004 ;; Defined at:
 25005 ;;		line 399 in file "Library/Port.c"
 25006 ;; Parameters:    Size  Location     Type
 25007 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 25008 ;;		 -> PortB(10), PortD(10), 
 25009 ;;  pQuad           1   56[BANK0 ] enum E6776
 25010 ;;  pType           1   57[BANK0 ] enum E6795
 25011 ;; Auto vars:     Size  Location     Type
 25012 ;;  Output          1   58[BANK0 ] enum E6475
 25013 ;; Return value:  Size  Location     Type
 25014 ;;                  1    wreg      enum E6475
 25015 ;; Registers used:
 25016 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25017 ;; Tracked objects:
 25018 ;;		On entry : 0/0
 25019 ;;		On exit  : 0/0
 25020 ;;		Unchanged: 0/0
 25021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25022 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25023 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25025 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25026 ;;Total ram usage:        5 bytes
 25027 ;; Hardware stack levels used:    1
 25028 ;; Hardware stack levels required when called:   13
 25029 ;; This function calls:
 25030 ;;		_Byte_SetQuad
 25031 ;;		_Port_CheckQuadType
 25032 ;;		_Word_SetPair
 25033 ;; This function is called by:
 25034 ;;		_MXK_InitDIPSwitch
 25035 ;;		_MXK_Init
 25036 ;; This function uses a non-reentrant model
 25037 ;;
 25038                           
 25039                           	psect	text123
 25040  011A4A                     __ptext123:
 25041                           	opt stack 0
 25042  011A4A                     _Port_SetQuadType:
 25043                           	opt stack 15
 25044                           
 25045                           ;Port.c: 401: ePinError Output = ePinErrorState;
 25046                           
 25047                           ; BSR set to: 0
 25048                           ;incstack = 0
 25049  011A4A  0E05               	movlw	5
 25050  011A4C  0100               	movlb	0	; () banked
 25051  011A4E  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 25052                           
 25053                           ;Port.c: 403: switch (pType)
 25054  011A50  D0C7               	goto	l476
 25055  011A52                     
 25056                           ; BSR set to: 0
 25057                           ;Port.c: 407: {
 25058                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 25059                           
 25060                           ; BSR set to: 0
 25061  011A52  0100               	movlb	0	; () banked
 25062  011A54  EE20 F002          	lfsr	2,2
 25063  011A58  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 25064  011A5A  26D9               	addwf	fsr2l,f,c
 25065  011A5C  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25066  011A5E  22DA               	addwfc	fsr2h,f,c
 25067  011A60  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 25068  011A64  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 25069  011A68  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 25070  011A6C  0E0F               	movlw	15
 25071  011A6E  0100               	movlb	0	; () banked
 25072  011A70  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 25073  011A72  ECA8  F0B0         	call	_Byte_SetQuad	;wreg free
 25074                           
 25075                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 25076  011A76  0100               	movlb	0	; () banked
 25077  011A78  EE20 F004          	lfsr	2,4
 25078  011A7C  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 25079  011A7E  26D9               	addwf	fsr2l,f,c
 25080  011A80  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25081  011A82  22DA               	addwfc	fsr2h,f,c
 25082  011A84  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 25083  011A88  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 25084  011A8C  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 25085  011A90  0E00               	movlw	0
 25086  011A92  0100               	movlb	0	; () banked
 25087  011A94  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 25088  011A96  ECA8  F0B0         	call	_Byte_SetQuad	;wreg free
 25089                           
 25090                           ;Port.c: 413: }
 25091                           ;Port.c: 415: break;
 25092  011A9A  D0B0               	goto	l478
 25093  011A9C                     
 25094                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 25095  011A9C  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 25096  011AA0  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 25097  011AA4  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 25098  011AA8  0E03               	movlw	3
 25099  011AAA  0100               	movlb	0	; () banked
 25100  011AAC  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 25101  011AAE  ECB8  F0AB         	call	_Port_CheckQuadType	;wreg free
 25102  011AB2  0100               	movlb	0	; () banked
 25103  011AB4  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 25104  011AB6  0100               	movlb	0	; () banked
 25105  011AB8  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 25106  011ABA  A4D8               	btfss	status,2,c
 25107  011ABC  0012               	return	
 25108                           
 25109                           ; BSR set to: 0
 25110                           ;Port.c: 418: {
 25111                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 25112  011ABE  0100               	movlb	0	; () banked
 25113  011AC0  EE20 F002          	lfsr	2,2
 25114  011AC4  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 25115  011AC6  26D9               	addwf	fsr2l,f,c
 25116  011AC8  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25117  011ACA  22DA               	addwfc	fsr2h,f,c
 25118  011ACC  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 25119  011AD0  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 25120  011AD4  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 25121  011AD8  0E00               	movlw	0
 25122  011ADA  0100               	movlb	0	; () banked
 25123  011ADC  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 25124  011ADE  ECA8  F0B0         	call	_Byte_SetQuad	;wreg free
 25125                           
 25126                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 25127  011AE2  0100               	movlb	0	; () banked
 25128  011AE4  EE20 F004          	lfsr	2,4
 25129  011AE8  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 25130  011AEA  26D9               	addwf	fsr2l,f,c
 25131  011AEC  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25132  011AEE  22DA               	addwfc	fsr2h,f,c
 25133  011AF0  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 25134  011AF4  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 25135  011AF8  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 25136  011AFC  0E00               	movlw	0
 25137  011AFE  0100               	movlb	0	; () banked
 25138  011B00  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 25139  011B02  ECA8  F0B0         	call	_Byte_SetQuad	;wreg free
 25140                           
 25141                           ;Port.c: 424: }
 25142  011B06  D07A               	goto	l478
 25143  011B08                     
 25144                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 25145  011B08  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 25146  011B0C  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 25147  011B10  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 25148  011B14  0E03               	movlw	3
 25149  011B16  0100               	movlb	0	; () banked
 25150  011B18  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 25151  011B1A  ECB8  F0AB         	call	_Port_CheckQuadType	;wreg free
 25152  011B1E  0100               	movlb	0	; () banked
 25153  011B20  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 25154  011B22  0100               	movlb	0	; () banked
 25155  011B24  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 25156  011B26  A4D8               	btfss	status,2,c
 25157  011B28  0012               	return	
 25158                           
 25159                           ; BSR set to: 0
 25160                           ;Port.c: 429: {
 25161                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 25162  011B2A  0100               	movlb	0	; () banked
 25163  011B2C  EE20 F002          	lfsr	2,2
 25164  011B30  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 25165  011B32  26D9               	addwf	fsr2l,f,c
 25166  011B34  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25167  011B36  22DA               	addwfc	fsr2h,f,c
 25168  011B38  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 25169  011B3C  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 25170  011B40  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 25171  011B44  0E0F               	movlw	15
 25172  011B46  0100               	movlb	0	; () banked
 25173  011B48  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 25174  011B4A  ECA8  F0B0         	call	_Byte_SetQuad	;wreg free
 25175                           
 25176                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 25177  011B4E  0100               	movlb	0	; () banked
 25178  011B50  EE20 F004          	lfsr	2,4
 25179  011B54  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 25180  011B56  26D9               	addwf	fsr2l,f,c
 25181  011B58  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25182  011B5A  22DA               	addwfc	fsr2h,f,c
 25183  011B5C  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 25184  011B60  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 25185  011B64  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 25186  011B68  0E0F               	movlw	15
 25187  011B6A  0100               	movlb	0	; () banked
 25188  011B6C  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 25189  011B6E  ECA8  F0B0         	call	_Byte_SetQuad	;wreg free
 25190                           
 25191                           ;Port.c: 435: }
 25192  011B72  D044               	goto	l478
 25193  011B74                     
 25194                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 25195  011B74  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 25196  011B78  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 25197  011B7C  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 25198  011B80  0E03               	movlw	3
 25199  011B82  0100               	movlb	0	; () banked
 25200  011B84  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 25201  011B86  ECB8  F0AB         	call	_Port_CheckQuadType	;wreg free
 25202  011B8A  0100               	movlb	0	; () banked
 25203  011B8C  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 25204  011B8E  0100               	movlb	0	; () banked
 25205  011B90  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 25206  011B92  A4D8               	btfss	status,2,c
 25207  011B94  0012               	return	
 25208                           
 25209                           ; BSR set to: 0
 25210                           ;Port.c: 440: {
 25211                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 25212  011B96  0100               	movlb	0	; () banked
 25213  011B98  EE20 F002          	lfsr	2,2
 25214  011B9C  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 25215  011B9E  26D9               	addwf	fsr2l,f,c
 25216  011BA0  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25217  011BA2  22DA               	addwfc	fsr2h,f,c
 25218  011BA4  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 25219  011BA8  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 25220  011BAC  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 25221  011BB0  0E00               	movlw	0
 25222  011BB2  0100               	movlb	0	; () banked
 25223  011BB4  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 25224  011BB6  ECA8  F0B0         	call	_Byte_SetQuad	;wreg free
 25225                           
 25226                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 25227  011BBA  0100               	movlb	0	; () banked
 25228  011BBC  EE20 F004          	lfsr	2,4
 25229  011BC0  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 25230  011BC2  26D9               	addwf	fsr2l,f,c
 25231  011BC4  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25232  011BC6  22DA               	addwfc	fsr2h,f,c
 25233  011BC8  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 25234  011BCC  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 25235  011BD0  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 25236  011BD4  0E00               	movlw	0
 25237  011BD6  0100               	movlb	0	; () banked
 25238  011BD8  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 25239  011BDA  ECA8  F0B0         	call	_Byte_SetQuad	;wreg free
 25240                           
 25241                           ;Port.c: 446: }
 25242  011BDE  D00E               	goto	l478
 25243  011BE0                     l476:
 25244  011BE0  0100               	movlb	0	; () banked
 25245  011BE2  5199               	movf	Port_SetQuadType@pType& (0+255),w,b
 25246                           
 25247                           ; Switch size 1, requested type "space"
 25248                           ; Number of cases is 4, Range of values is 0 to 3
 25249                           ; switch strategies available:
 25250                           ; Name         Instructions Cycles
 25251                           ; simple_byte           13     7 (average)
 25252                           ;	Chosen strategy is simple_byte
 25253  011BE4  0A00               	xorlw	0	; case 0
 25254  011BE6  B4D8               	btfsc	status,2,c
 25255  011BE8  D734               	goto	l477
 25256  011BEA  0A01               	xorlw	1	; case 1
 25257  011BEC  B4D8               	btfsc	status,2,c
 25258  011BEE  D756               	goto	l479
 25259  011BF0  0A03               	xorlw	3	; case 2
 25260  011BF2  B4D8               	btfsc	status,2,c
 25261  011BF4  D789               	goto	l483
 25262  011BF6  0A01               	xorlw	1	; case 3
 25263  011BF8  B4D8               	btfsc	status,2,c
 25264  011BFA  D7BC               	goto	l486
 25265  011BFC                     l478:
 25266                           
 25267                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 25268                           
 25269                           ; BSR set to: 0
 25270  011BFC  0E08               	movlw	8
 25271  011BFE  0100               	movlb	0	; () banked
 25272  011C00  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 25273  011C02  0100               	movlb	0	; () banked
 25274  011C04  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 25275  011C06  0E00               	movlw	0
 25276  011C08  0100               	movlb	0	; () banked
 25277  011C0A  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25278  011C0C  0100               	movlb	0	; () banked
 25279  011C0E  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 25280  011C10  0100               	movlb	0	; () banked
 25281  011C12  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 25282  011C14  0D04               	mullw	4
 25283  011C16  CFF3 F071          	movff	prodl,Word_SetPair@pPair
 25284  011C1A  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 25285  011C1E  ECB9  F0AD         	call	_Word_SetPair	;wreg free
 25286                           
 25287                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 25288  011C22  0E08               	movlw	8
 25289  011C24  0100               	movlb	0	; () banked
 25290  011C26  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 25291  011C28  0100               	movlb	0	; () banked
 25292  011C2A  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 25293  011C2C  0E00               	movlw	0
 25294  011C2E  0100               	movlb	0	; () banked
 25295  011C30  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25296  011C32  0100               	movlb	0	; () banked
 25297  011C34  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 25298  011C36  0100               	movlb	0	; () banked
 25299  011C38  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 25300  011C3A  0D04               	mullw	4
 25301  011C3C  28F3               	incf	prodl,w,c
 25302  011C3E  0100               	movlb	0	; () banked
 25303  011C40  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 25304  011C42  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 25305  011C46  ECB9  F0AD         	call	_Word_SetPair	;wreg free
 25306                           
 25307                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 25308  011C4A  0E08               	movlw	8
 25309  011C4C  0100               	movlb	0	; () banked
 25310  011C4E  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 25311  011C50  0100               	movlb	0	; () banked
 25312  011C52  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 25313  011C54  0E00               	movlw	0
 25314  011C56  0100               	movlb	0	; () banked
 25315  011C58  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25316  011C5A  0100               	movlb	0	; () banked
 25317  011C5C  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 25318  011C5E  0100               	movlb	0	; () banked
 25319  011C60  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 25320  011C62  0D04               	mullw	4
 25321  011C64  50F3               	movf	prodl,w,c
 25322  011C66  0F02               	addlw	2
 25323  011C68  0100               	movlb	0	; () banked
 25324  011C6A  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 25325  011C6C  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 25326  011C70  ECB9  F0AD         	call	_Word_SetPair	;wreg free
 25327                           
 25328                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 25329  011C74  0E08               	movlw	8
 25330  011C76  0100               	movlb	0	; () banked
 25331  011C78  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 25332  011C7A  0100               	movlb	0	; () banked
 25333  011C7C  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 25334  011C7E  0E00               	movlw	0
 25335  011C80  0100               	movlb	0	; () banked
 25336  011C82  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25337  011C84  0100               	movlb	0	; () banked
 25338  011C86  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 25339  011C88  0100               	movlb	0	; () banked
 25340  011C8A  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 25341  011C8C  0D04               	mullw	4
 25342  011C8E  50F3               	movf	prodl,w,c
 25343  011C90  0F03               	addlw	3
 25344  011C92  0100               	movlb	0	; () banked
 25345  011C94  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 25346  011C96  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 25347  011C9A  ECB9  F0AD         	call	_Word_SetPair	;wreg free
 25348  011C9E  0012               	return	
 25349  011CA0                     __end_of_Port_SetQuadType:
 25350                           	opt stack 0
 25351                           tosu	equ	0xFFF
 25352                           tosh	equ	0xFFE
 25353                           tosl	equ	0xFFD
 25354                           pclath	equ	0xFFA
 25355                           tblptru	equ	0xFF8
 25356                           tblptrh	equ	0xFF7
 25357                           tblptrl	equ	0xFF6
 25358                           tablat	equ	0xFF5
 25359                           prodh	equ	0xFF4
 25360                           prodl	equ	0xFF3
 25361                           intcon	equ	0xFF2
 25362                           postinc0	equ	0xFEE
 25363                           wreg	equ	0xFE8
 25364                           indf1	equ	0xFE7
 25365                           postdec1	equ	0xFE5
 25366                           fsr1h	equ	0xFE2
 25367                           fsr1l	equ	0xFE1
 25368                           indf2	equ	0xFDF
 25369                           postinc2	equ	0xFDE
 25370                           postdec2	equ	0xFDD
 25371                           plusw2	equ	0xFDB
 25372                           fsr2h	equ	0xFDA
 25373                           fsr2l	equ	0xFD9
 25374                           status	equ	0xFD8
 25375                           
 25376 ;; *************** function _Word_SetPair *****************
 25377 ;; Defined at:
 25378 ;;		line 149 in file "Library/Types.c"
 25379 ;; Parameters:    Size  Location     Type
 25380 ;;  pInput          2   15[BANK0 ] PTR struct Word
 25381 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 25382 ;;		 -> PortD(10), PortC(10), PortF(10), 
 25383 ;;  pPair           1   17[BANK0 ] unsigned char 
 25384 ;;  pValue          1   18[BANK0 ] unsigned char 
 25385 ;; Auto vars:     Size  Location     Type
 25386 ;;		None
 25387 ;; Return value:  Size  Location     Type
 25388 ;;                  1    wreg      void 
 25389 ;; Registers used:
 25390 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25391 ;; Tracked objects:
 25392 ;;		On entry : 0/0
 25393 ;;		On exit  : 0/0
 25394 ;;		Unchanged: 0/0
 25395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25396 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25397 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25399 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25400 ;;Total ram usage:        4 bytes
 25401 ;; Hardware stack levels used:    1
 25402 ;; Hardware stack levels required when called:    9
 25403 ;; This function calls:
 25404 ;;		_Byte_SetPair
 25405 ;; This function is called by:
 25406 ;;		_Port_SetPinType
 25407 ;;		_Port_SetQuadType
 25408 ;;		_Port_SetType
 25409 ;;		_Port_SetPairType
 25410 ;;		_PortProperty_Init
 25411 ;; This function uses a non-reentrant model
 25412 ;;
 25413                           
 25414                           	psect	text124
 25415  015B72                     __ptext124:
 25416                           	opt stack 0
 25417  015B72                     _Word_SetPair:
 25418                           	opt stack 18
 25419                           
 25420                           ;Types.c: 151: if (pPair >= 4)
 25421                           
 25422                           ;incstack = 0
 25423  015B72  0E03               	movlw	3
 25424  015B74  0100               	movlb	0	; () banked
 25425  015B76  6571               	cpfsgt	Word_SetPair@pPair& (0+255),b
 25426  015B78  D014               	goto	l776
 25427                           
 25428                           ; BSR set to: 0
 25429                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 25430  015B7A  0E01               	movlw	1
 25431  015B7C  0100               	movlb	0	; () banked
 25432  015B7E  256F               	addwf	Word_SetPair@pInput& (0+255),w,b
 25433  015B80  0100               	movlb	0	; () banked
 25434  015B82  6F6B               	movwf	Byte_SetPair@pInput& (0+255),b
 25435  015B84  0E00               	movlw	0
 25436  015B86  0100               	movlb	0	; () banked
 25437  015B88  2170               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 25438  015B8A  0100               	movlb	0	; () banked
 25439  015B8C  6F6C               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 25440  015B8E  0100               	movlb	0	; () banked
 25441  015B90  5171               	movf	Word_SetPair@pPair& (0+255),w,b
 25442  015B92  0FFC               	addlw	252
 25443  015B94  0100               	movlb	0	; () banked
 25444  015B96  6F6D               	movwf	Byte_SetPair@pPair& (0+255),b
 25445  015B98  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 25446  015B9C  EC97  F0B0         	call	_Byte_SetPair	;wreg free
 25447  015BA0  0012               	return	
 25448  015BA2                     l776:
 25449                           
 25450                           ;Types.c: 153: else
 25451                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 25452  015BA2  C06F  F06B         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 25453  015BA6  C070  F06C         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 25454  015BAA  C071  F06D         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 25455  015BAE  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 25456  015BB2  EC97  F0B0         	call	_Byte_SetPair	;wreg free
 25457  015BB6  0012               	return	
 25458  015BB8                     __end_of_Word_SetPair:
 25459                           	opt stack 0
 25460                           tosu	equ	0xFFF
 25461                           tosh	equ	0xFFE
 25462                           tosl	equ	0xFFD
 25463                           pclath	equ	0xFFA
 25464                           tblptru	equ	0xFF8
 25465                           tblptrh	equ	0xFF7
 25466                           tblptrl	equ	0xFF6
 25467                           tablat	equ	0xFF5
 25468                           prodh	equ	0xFF4
 25469                           prodl	equ	0xFF3
 25470                           intcon	equ	0xFF2
 25471                           postinc0	equ	0xFEE
 25472                           wreg	equ	0xFE8
 25473                           indf1	equ	0xFE7
 25474                           postdec1	equ	0xFE5
 25475                           fsr1h	equ	0xFE2
 25476                           fsr1l	equ	0xFE1
 25477                           indf2	equ	0xFDF
 25478                           postinc2	equ	0xFDE
 25479                           postdec2	equ	0xFDD
 25480                           plusw2	equ	0xFDB
 25481                           fsr2h	equ	0xFDA
 25482                           fsr2l	equ	0xFD9
 25483                           status	equ	0xFD8
 25484                           
 25485 ;; *************** function _Byte_SetPair *****************
 25486 ;; Defined at:
 25487 ;;		line 83 in file "Library/Types.c"
 25488 ;; Parameters:    Size  Location     Type
 25489 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 25490 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 25491 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 25492 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 25493 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 25494 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 25495 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 25496 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 25497 ;;		 -> NULL(0), 
 25498 ;;  pPair           1   13[BANK0 ] unsigned char 
 25499 ;;  pValue          1   14[BANK0 ] unsigned char 
 25500 ;; Auto vars:     Size  Location     Type
 25501 ;;		None
 25502 ;; Return value:  Size  Location     Type
 25503 ;;                  1    wreg      void 
 25504 ;; Registers used:
 25505 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25506 ;; Tracked objects:
 25507 ;;		On entry : 0/0
 25508 ;;		On exit  : 0/0
 25509 ;;		Unchanged: 0/0
 25510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25511 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25514 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25515 ;;Total ram usage:        4 bytes
 25516 ;; Hardware stack levels used:    1
 25517 ;; Hardware stack levels required when called:    8
 25518 ;; This function calls:
 25519 ;;		_Byte_SetZone
 25520 ;; This function is called by:
 25521 ;;		_Word_SetPair
 25522 ;;		_Port_SetPairType
 25523 ;;		_Port_SetPair
 25524 ;; This function uses a non-reentrant model
 25525 ;;
 25526                           
 25527                           	psect	text125
 25528  01612E                     __ptext125:
 25529                           	opt stack 0
 25530  01612E                     _Byte_SetPair:
 25531                           	opt stack 18
 25532                           
 25533                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 25534                           
 25535                           ;incstack = 0
 25536  01612E  C06B  F060         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 25537  016132  C06C  F061         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 25538  016136  0E04               	movlw	4
 25539  016138  0100               	movlb	0	; () banked
 25540  01613A  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 25541  01613C  C06D  F063         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 25542  016140  0E02               	movlw	2
 25543  016142  0100               	movlb	0	; () banked
 25544  016144  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 25545  016146  C06E  F065         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 25546  01614A  EC56  F0A1         	call	_Byte_SetZone	;wreg free
 25547  01614E  0012               	return		;funcret
 25548  016150                     __end_of_Byte_SetPair:
 25549                           	opt stack 0
 25550                           tosu	equ	0xFFF
 25551                           tosh	equ	0xFFE
 25552                           tosl	equ	0xFFD
 25553                           pclath	equ	0xFFA
 25554                           tblptru	equ	0xFF8
 25555                           tblptrh	equ	0xFF7
 25556                           tblptrl	equ	0xFF6
 25557                           tablat	equ	0xFF5
 25558                           prodh	equ	0xFF4
 25559                           prodl	equ	0xFF3
 25560                           intcon	equ	0xFF2
 25561                           postinc0	equ	0xFEE
 25562                           wreg	equ	0xFE8
 25563                           indf1	equ	0xFE7
 25564                           postdec1	equ	0xFE5
 25565                           fsr1h	equ	0xFE2
 25566                           fsr1l	equ	0xFE1
 25567                           indf2	equ	0xFDF
 25568                           postinc2	equ	0xFDE
 25569                           postdec2	equ	0xFDD
 25570                           plusw2	equ	0xFDB
 25571                           fsr2h	equ	0xFDA
 25572                           fsr2l	equ	0xFD9
 25573                           status	equ	0xFD8
 25574                           
 25575 ;; *************** function _Port_CheckQuadType *****************
 25576 ;; Defined at:
 25577 ;;		line 126 in file "Library/Port.c"
 25578 ;; Parameters:    Size  Location     Type
 25579 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 25580 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 25581 ;;		 -> PortD(10), PortC(10), PortF(10), 
 25582 ;;  pQuad           1   49[BANK0 ] enum E6776
 25583 ;;  pDrive          1   50[BANK0 ] enum E6469
 25584 ;; Auto vars:     Size  Location     Type
 25585 ;;  Output          1   53[BANK0 ] enum E6475
 25586 ;;  Pair2           1   52[BANK0 ] enum E6760
 25587 ;;  Pair1           1   51[BANK0 ] enum E6760
 25588 ;; Return value:  Size  Location     Type
 25589 ;;                  1    wreg      enum E6475
 25590 ;; Registers used:
 25591 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25592 ;; Tracked objects:
 25593 ;;		On entry : 0/0
 25594 ;;		On exit  : 0/0
 25595 ;;		Unchanged: 0/0
 25596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25597 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25598 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25600 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25601 ;;Total ram usage:        7 bytes
 25602 ;; Hardware stack levels used:    1
 25603 ;; Hardware stack levels required when called:   12
 25604 ;; This function calls:
 25605 ;;		_Port_CheckPairType
 25606 ;; This function is called by:
 25607 ;;		_Port_CheckPortType
 25608 ;;		_Port_SetQuadType
 25609 ;; This function uses a non-reentrant model
 25610 ;;
 25611                           
 25612                           	psect	text126
 25613  015770                     __ptext126:
 25614                           	opt stack 0
 25615  015770                     _Port_CheckQuadType:
 25616                           	opt stack 14
 25617                           
 25618                           ;Port.c: 128: ePinError Output = ePinErrorState;
 25619                           
 25620                           ;incstack = 0
 25621  015770  0E05               	movlw	5
 25622  015772  0100               	movlb	0	; () banked
 25623  015774  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 25624                           
 25625                           ; BSR set to: 0
 25626                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 25627  015776  0100               	movlb	0	; () banked
 25628  015778  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 25629  01577A  0D02               	mullw	2
 25630  01577C  CFF3 F093          	movff	prodl,Port_CheckQuadType@Pair1
 25631                           
 25632                           ; BSR set to: 0
 25633                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 25634  015780  0100               	movlb	0	; () banked
 25635  015782  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 25636  015784  0D02               	mullw	2
 25637  015786  28F3               	incf	prodl,w,c
 25638  015788  0100               	movlb	0	; () banked
 25639  01578A  6F94               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 25640                           
 25641                           ; BSR set to: 0
 25642                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 25643  01578C  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 25644  015790  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 25645  015794  C093  F088         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 25646  015798  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 25647  01579C  EC5B  F0AA         	call	_Port_CheckPairType	;wreg free
 25648  0157A0  0100               	movlb	0	; () banked
 25649  0157A2  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 25650  0157A4  0100               	movlb	0	; () banked
 25651  0157A6  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 25652  0157A8  A4D8               	btfss	status,2,c
 25653  0157AA  D00C               	goto	l393
 25654                           
 25655                           ; BSR set to: 0
 25656                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 25657  0157AC  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 25658  0157B0  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 25659  0157B4  C094  F088         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 25660  0157B8  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 25661  0157BC  EC5B  F0AA         	call	_Port_CheckPairType	;wreg free
 25662  0157C0  0100               	movlb	0	; () banked
 25663  0157C2  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 25664  0157C4                     l393:
 25665                           
 25666                           ; BSR set to: 0
 25667                           ;Port.c: 136: return Output;
 25668                           
 25669                           ; BSR set to: 0
 25670  0157C4  0100               	movlb	0	; () banked
 25671  0157C6  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 25672  0157C8  0012               	return	
 25673  0157CA                     __end_of_Port_CheckQuadType:
 25674                           	opt stack 0
 25675                           tosu	equ	0xFFF
 25676                           tosh	equ	0xFFE
 25677                           tosl	equ	0xFFD
 25678                           pclath	equ	0xFFA
 25679                           tblptru	equ	0xFF8
 25680                           tblptrh	equ	0xFF7
 25681                           tblptrl	equ	0xFF6
 25682                           tablat	equ	0xFF5
 25683                           prodh	equ	0xFF4
 25684                           prodl	equ	0xFF3
 25685                           intcon	equ	0xFF2
 25686                           postinc0	equ	0xFEE
 25687                           wreg	equ	0xFE8
 25688                           indf1	equ	0xFE7
 25689                           postdec1	equ	0xFE5
 25690                           fsr1h	equ	0xFE2
 25691                           fsr1l	equ	0xFE1
 25692                           indf2	equ	0xFDF
 25693                           postinc2	equ	0xFDE
 25694                           postdec2	equ	0xFDD
 25695                           plusw2	equ	0xFDB
 25696                           fsr2h	equ	0xFDA
 25697                           fsr2l	equ	0xFD9
 25698                           status	equ	0xFD8
 25699                           
 25700 ;; *************** function _Port_CheckPairType *****************
 25701 ;; Defined at:
 25702 ;;		line 112 in file "Library/Port.c"
 25703 ;; Parameters:    Size  Location     Type
 25704 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 25705 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 25706 ;;		 -> PortD(10), PortC(10), PortF(10), 
 25707 ;;  pPair           1   40[BANK0 ] enum E6760
 25708 ;;  pDrive          1   41[BANK0 ] enum E6469
 25709 ;; Auto vars:     Size  Location     Type
 25710 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 25711 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 25712 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 25713 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 25714 ;;		 -> PortC(10), PortF(10), NULL(0), 
 25715 ;;  Output          1   44[BANK0 ] enum E6475
 25716 ;;  Pin2            1   43[BANK0 ] enum E6750
 25717 ;;  Pin1            1   42[BANK0 ] enum E6750
 25718 ;; Return value:  Size  Location     Type
 25719 ;;                  1    wreg      enum E6475
 25720 ;; Registers used:
 25721 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25722 ;; Tracked objects:
 25723 ;;		On entry : 0/0
 25724 ;;		On exit  : 0/0
 25725 ;;		Unchanged: 0/0
 25726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25727 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25728 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25730 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25731 ;;Total ram usage:        9 bytes
 25732 ;; Hardware stack levels used:    1
 25733 ;; Hardware stack levels required when called:   11
 25734 ;; This function calls:
 25735 ;;		_PortProperty_Valid
 25736 ;; This function is called by:
 25737 ;;		_Port_CheckQuadType
 25738 ;;		_Port_SetPairType
 25739 ;; This function uses a non-reentrant model
 25740 ;;
 25741                           
 25742                           	psect	text127
 25743  0154B6                     __ptext127:
 25744                           	opt stack 0
 25745  0154B6                     _Port_CheckPairType:
 25746                           	opt stack 14
 25747                           
 25748                           ;Port.c: 114: ePinError Output = ePinErrorState;
 25749                           
 25750                           ; BSR set to: 0
 25751                           ;incstack = 0
 25752  0154B6  0E05               	movlw	5
 25753  0154B8  0100               	movlb	0	; () banked
 25754  0154BA  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 25755                           
 25756                           ; BSR set to: 0
 25757                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 25758  0154BC  C086  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 25759  0154C0  C087  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 25760  0154C4  CFDE F08D          	movff	postinc2,Port_CheckPairType@Props
 25761  0154C8  CFDD F08E          	movff	postdec2,Port_CheckPairType@Props+1
 25762                           
 25763                           ; BSR set to: 0
 25764                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 25765  0154CC  0100               	movlb	0	; () banked
 25766  0154CE  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 25767  0154D0  0D02               	mullw	2
 25768  0154D2  CFF3 F08A          	movff	prodl,Port_CheckPairType@Pin1
 25769                           
 25770                           ; BSR set to: 0
 25771                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 25772  0154D6  0100               	movlb	0	; () banked
 25773  0154D8  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 25774  0154DA  0D02               	mullw	2
 25775  0154DC  28F3               	incf	prodl,w,c
 25776  0154DE  0100               	movlb	0	; () banked
 25777  0154E0  6F8B               	movwf	Port_CheckPairType@Pin2& (0+255),b
 25778                           
 25779                           ; BSR set to: 0
 25780                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 25781  0154E2  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 25782  0154E6  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 25783  0154EA  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 25784  0154EE  C08A  F072         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 25785  0154F2  EC73  F0A7         	call	_PortProperty_Valid	;wreg free
 25786  0154F6  0100               	movlb	0	; () banked
 25787  0154F8  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 25788  0154FA  0100               	movlb	0	; () banked
 25789  0154FC  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 25790  0154FE  A4D8               	btfss	status,2,c
 25791  015500  D00C               	goto	l389
 25792                           
 25793                           ; BSR set to: 0
 25794                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 25795  015502  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 25796  015506  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 25797  01550A  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 25798  01550E  C08B  F072         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 25799  015512  EC73  F0A7         	call	_PortProperty_Valid	;wreg free
 25800  015516  0100               	movlb	0	; () banked
 25801  015518  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 25802  01551A                     l389:
 25803                           
 25804                           ; BSR set to: 0
 25805                           ;Port.c: 124: return Output;
 25806                           
 25807                           ; BSR set to: 0
 25808  01551A  0100               	movlb	0	; () banked
 25809  01551C  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 25810  01551E  0012               	return	
 25811  015520                     __end_of_Port_CheckPairType:
 25812                           	opt stack 0
 25813                           tosu	equ	0xFFF
 25814                           tosh	equ	0xFFE
 25815                           tosl	equ	0xFFD
 25816                           pclath	equ	0xFFA
 25817                           tblptru	equ	0xFF8
 25818                           tblptrh	equ	0xFF7
 25819                           tblptrl	equ	0xFF6
 25820                           tablat	equ	0xFF5
 25821                           prodh	equ	0xFF4
 25822                           prodl	equ	0xFF3
 25823                           intcon	equ	0xFF2
 25824                           postinc0	equ	0xFEE
 25825                           wreg	equ	0xFE8
 25826                           indf1	equ	0xFE7
 25827                           postdec1	equ	0xFE5
 25828                           fsr1h	equ	0xFE2
 25829                           fsr1l	equ	0xFE1
 25830                           indf2	equ	0xFDF
 25831                           postinc2	equ	0xFDE
 25832                           postdec2	equ	0xFDD
 25833                           plusw2	equ	0xFDB
 25834                           fsr2h	equ	0xFDA
 25835                           fsr2l	equ	0xFD9
 25836                           status	equ	0xFD8
 25837                           
 25838 ;; *************** function _PortProperty_Valid *****************
 25839 ;; Defined at:
 25840 ;;		line 220 in file "Library/Types.c"
 25841 ;; Parameters:    Size  Location     Type
 25842 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 25843 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 25844 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 25845 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 25846 ;;		 -> PortC(10), PortF(10), NULL(0), 
 25847 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 25848 ;;  pPin            1   18[BANK0 ] unsigned char 
 25849 ;; Auto vars:     Size  Location     Type
 25850 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 25851 ;;  Pair            1   37[BANK0 ] enum E6469
 25852 ;; Return value:  Size  Location     Type
 25853 ;;                  1    wreg      enum E6475
 25854 ;; Registers used:
 25855 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25856 ;; Tracked objects:
 25857 ;;		On entry : 0/0
 25858 ;;		On exit  : 0/0
 25859 ;;		Unchanged: 0/0
 25860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25861 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25862 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25863 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25864 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25865 ;;Total ram usage:       23 bytes
 25866 ;; Hardware stack levels used:    1
 25867 ;; Hardware stack levels required when called:   10
 25868 ;; This function calls:
 25869 ;;		_Word_GetPair
 25870 ;; This function is called by:
 25871 ;;		_Port_CheckPairType
 25872 ;;		_Port_SetPinType
 25873 ;; This function uses a non-reentrant model
 25874 ;;
 25875                           
 25876                           	psect	text128
 25877  014EE6                     __ptext128:
 25878                           	opt stack 0
 25879  014EE6                     _PortProperty_Valid:
 25880                           	opt stack 17
 25881                           
 25882                           ;Types.c: 222: ePinDrive Pair;
 25883                           ;Types.c: 223: const ePinError Errors[4][4] =
 25884                           ;Types.c: 224: {
 25885                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 25886                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 25887                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 25888                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 25889                           ;Types.c: 230: };
 25890                           
 25891                           ; BSR set to: 0
 25892                           ;incstack = 0
 25893  014EE6  0E59               	movlw	low PortProperty_Valid@F6830
 25894  014EE8  6EF6               	movwf	tblptrl,c
 25895  014EEA                     	if	1	;There is more than 1 active tblptr byte
 25896  014EEA  0EFD               	movlw	high PortProperty_Valid@F6830
 25897  014EEC  6EF7               	movwf	tblptrh,c
 25898  014EEE                     	endif
 25899  014EEE                     	if	1	;There are 3 active tblptr bytes
 25900  014EEE  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 25901  014EF0  6EF8               	movwf	tblptru,c
 25902  014EF2                     	endif
 25903  014EF2  EE20  F075         	lfsr	2,PortProperty_Valid@Errors
 25904  014EF6  0E0F               	movlw	15
 25905  014EF8                     u8620:
 25906  014EF8  0009               	tblrd		*+
 25907  014EFA  CFF5 FFDE          	movff	tablat,postinc2
 25908  014EFE  06E8               	decf	wreg,f,c
 25909  014F00  E2FB               	bc	u8620
 25910                           
 25911                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 25912  014F02  C06F  F06C         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 25913  014F06  C070  F06D         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 25914  014F0A  C072  F06E         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 25915  014F0E  ECDF  F0AE         	call	_Word_GetPair	;wreg free
 25916  014F12  0100               	movlb	0	; () banked
 25917  014F14  6F85               	movwf	PortProperty_Valid@Pair& (0+255),b
 25918                           
 25919                           ; BSR set to: 0
 25920                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 25921  014F16  0E04               	movlw	4
 25922  014F18  0100               	movlb	0	; () banked
 25923  014F1A  6171               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 25924  014F1C  D020               	goto	l819
 25925                           
 25926                           ; BSR set to: 0
 25927  014F1E  0E04               	movlw	4
 25928  014F20  0100               	movlb	0	; () banked
 25929  014F22  6185               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 25930  014F24  D01C               	goto	l819
 25931                           
 25932                           ; BSR set to: 0
 25933                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 25934  014F26  0100               	movlb	0	; () banked
 25935  014F28  5171               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 25936  014F2A  0D04               	mullw	4
 25937  014F2C  0E75               	movlw	low PortProperty_Valid@Errors
 25938  014F2E  0100               	movlb	0	; () banked
 25939  014F30  6F73               	movwf	??_PortProperty_Valid& (0+255),b
 25940  014F32  0E00               	movlw	high PortProperty_Valid@Errors
 25941  014F34  0100               	movlb	0	; () banked
 25942  014F36  6F74               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 25943  014F38  50F3               	movf	prodl,w,c
 25944  014F3A  0100               	movlb	0	; () banked
 25945  014F3C  2773               	addwf	??_PortProperty_Valid& (0+255),f,b
 25946  014F3E  50F4               	movf	prodh,w,c
 25947  014F40  0100               	movlb	0	; () banked
 25948  014F42  2374               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 25949  014F44  0100               	movlb	0	; () banked
 25950  014F46  5185               	movf	PortProperty_Valid@Pair& (0+255),w,b
 25951  014F48  0D01               	mullw	1
 25952  014F4A  50F3               	movf	prodl,w,c
 25953  014F4C  0100               	movlb	0	; () banked
 25954  014F4E  2573               	addwf	??_PortProperty_Valid& (0+255),w,b
 25955  014F50  6ED9               	movwf	fsr2l,c
 25956  014F52  50F4               	movf	prodh,w,c
 25957  014F54  0100               	movlb	0	; () banked
 25958  014F56  2174               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 25959  014F58  6EDA               	movwf	fsr2h,c
 25960  014F5A  50DF               	movf	indf2,w,c
 25961                           
 25962                           ; BSR set to: 0
 25963  014F5C  0012               	return	
 25964  014F5E                     l819:
 25965                           
 25966                           ; BSR set to: 0
 25967                           ;Types.c: 237: return ePinErrorState;
 25968                           
 25969                           ; BSR set to: 0
 25970  014F5E  0E05               	movlw	5
 25971  014F60  0012               	return	
 25972  014F62                     __end_of_PortProperty_Valid:
 25973                           	opt stack 0
 25974                           tosu	equ	0xFFF
 25975                           tosh	equ	0xFFE
 25976                           tosl	equ	0xFFD
 25977                           pclath	equ	0xFFA
 25978                           tblptru	equ	0xFF8
 25979                           tblptrh	equ	0xFF7
 25980                           tblptrl	equ	0xFF6
 25981                           tablat	equ	0xFF5
 25982                           prodh	equ	0xFF4
 25983                           prodl	equ	0xFF3
 25984                           intcon	equ	0xFF2
 25985                           postinc0	equ	0xFEE
 25986                           wreg	equ	0xFE8
 25987                           indf1	equ	0xFE7
 25988                           postdec1	equ	0xFE5
 25989                           fsr1h	equ	0xFE2
 25990                           fsr1l	equ	0xFE1
 25991                           indf2	equ	0xFDF
 25992                           postinc2	equ	0xFDE
 25993                           postdec2	equ	0xFDD
 25994                           plusw2	equ	0xFDB
 25995                           fsr2h	equ	0xFDA
 25996                           fsr2l	equ	0xFD9
 25997                           status	equ	0xFD8
 25998                           
 25999 ;; *************** function _Word_GetPair *****************
 26000 ;; Defined at:
 26001 ;;		line 156 in file "Library/Types.c"
 26002 ;; Parameters:    Size  Location     Type
 26003 ;;  pInput          2   12[BANK0 ] PTR struct Word
 26004 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 26005 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 26006 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 26007 ;;		 -> PortC(10), PortF(10), NULL(0), 
 26008 ;;  pPair           1   14[BANK0 ] unsigned char 
 26009 ;; Auto vars:     Size  Location     Type
 26010 ;;		None
 26011 ;; Return value:  Size  Location     Type
 26012 ;;                  1    wreg      unsigned char 
 26013 ;; Registers used:
 26014 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26015 ;; Tracked objects:
 26016 ;;		On entry : 0/0
 26017 ;;		On exit  : 0/0
 26018 ;;		Unchanged: 0/0
 26019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26020 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26023 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26024 ;;Total ram usage:        3 bytes
 26025 ;; Hardware stack levels used:    1
 26026 ;; Hardware stack levels required when called:    9
 26027 ;; This function calls:
 26028 ;;		_Byte_GetPair
 26029 ;; This function is called by:
 26030 ;;		_Port_Init
 26031 ;;		_Port_SetPin
 26032 ;;		_Port_Set
 26033 ;;		_PortProperty_Valid
 26034 ;;		_Port_SetPair
 26035 ;;		_Port_SetQuad
 26036 ;; This function uses a non-reentrant model
 26037 ;;
 26038                           
 26039                           	psect	text129
 26040  015DBE                     __ptext129:
 26041                           	opt stack 0
 26042  015DBE                     _Word_GetPair:
 26043                           	opt stack 17
 26044                           
 26045                           ;Types.c: 158: if (pPair >= 4)
 26046                           
 26047                           ; BSR set to: 0
 26048                           ;incstack = 0
 26049  015DBE  0E03               	movlw	3
 26050  015DC0  0100               	movlb	0	; () banked
 26051  015DC2  656E               	cpfsgt	Word_GetPair@pPair& (0+255),b
 26052  015DC4  D012               	goto	l781
 26053                           
 26054                           ; BSR set to: 0
 26055                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 26056  015DC6  0E01               	movlw	1
 26057  015DC8  0100               	movlb	0	; () banked
 26058  015DCA  256C               	addwf	Word_GetPair@pInput& (0+255),w,b
 26059  015DCC  0100               	movlb	0	; () banked
 26060  015DCE  6F69               	movwf	Byte_GetPair@pInput& (0+255),b
 26061  015DD0  0E00               	movlw	0
 26062  015DD2  0100               	movlb	0	; () banked
 26063  015DD4  216D               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 26064  015DD6  0100               	movlb	0	; () banked
 26065  015DD8  6F6A               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 26066  015DDA  0100               	movlb	0	; () banked
 26067  015DDC  516E               	movf	Word_GetPair@pPair& (0+255),w,b
 26068  015DDE  0FFC               	addlw	252
 26069  015DE0  0100               	movlb	0	; () banked
 26070  015DE2  6F6B               	movwf	Byte_GetPair@pPair& (0+255),b
 26071  015DE4  EC32  F0B1         	call	_Byte_GetPair	;wreg free
 26072  015DE8  0012               	return	
 26073  015DEA                     l781:
 26074                           
 26075                           ;Types.c: 160: else
 26076                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 26077  015DEA  C06C  F069         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 26078  015DEE  C06D  F06A         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 26079  015DF2  C06E  F06B         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 26080  015DF6  EC32  F0B1         	call	_Byte_GetPair	;wreg free
 26081  015DFA  0012               	return	
 26082  015DFC                     __end_of_Word_GetPair:
 26083                           	opt stack 0
 26084                           tosu	equ	0xFFF
 26085                           tosh	equ	0xFFE
 26086                           tosl	equ	0xFFD
 26087                           pclath	equ	0xFFA
 26088                           tblptru	equ	0xFF8
 26089                           tblptrh	equ	0xFF7
 26090                           tblptrl	equ	0xFF6
 26091                           tablat	equ	0xFF5
 26092                           prodh	equ	0xFF4
 26093                           prodl	equ	0xFF3
 26094                           intcon	equ	0xFF2
 26095                           postinc0	equ	0xFEE
 26096                           wreg	equ	0xFE8
 26097                           indf1	equ	0xFE7
 26098                           postdec1	equ	0xFE5
 26099                           fsr1h	equ	0xFE2
 26100                           fsr1l	equ	0xFE1
 26101                           indf2	equ	0xFDF
 26102                           postinc2	equ	0xFDE
 26103                           postdec2	equ	0xFDD
 26104                           plusw2	equ	0xFDB
 26105                           fsr2h	equ	0xFDA
 26106                           fsr2l	equ	0xFD9
 26107                           status	equ	0xFD8
 26108                           
 26109 ;; *************** function _Byte_GetPair *****************
 26110 ;; Defined at:
 26111 ;;		line 87 in file "Library/Types.c"
 26112 ;; Parameters:    Size  Location     Type
 26113 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 26114 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 26115 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 26116 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 26117 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 26118 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 26119 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 26120 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 26121 ;;		 -> NULL(0), 
 26122 ;;  pPair           1   11[BANK0 ] unsigned char 
 26123 ;; Auto vars:     Size  Location     Type
 26124 ;;		None
 26125 ;; Return value:  Size  Location     Type
 26126 ;;                  1    wreg      unsigned char 
 26127 ;; Registers used:
 26128 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26129 ;; Tracked objects:
 26130 ;;		On entry : 0/0
 26131 ;;		On exit  : 0/0
 26132 ;;		Unchanged: 0/0
 26133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26134 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26137 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26138 ;;Total ram usage:        3 bytes
 26139 ;; Hardware stack levels used:    1
 26140 ;; Hardware stack levels required when called:    8
 26141 ;; This function calls:
 26142 ;;		_Byte_GetZone
 26143 ;; This function is called by:
 26144 ;;		_Word_GetPair
 26145 ;; This function uses a non-reentrant model
 26146 ;;
 26147                           
 26148                           	psect	text130
 26149  016264                     __ptext130:
 26150                           	opt stack 0
 26151  016264                     _Byte_GetPair:
 26152                           	opt stack 17
 26153                           
 26154                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 26155                           
 26156                           ;incstack = 0
 26157  016264  C069  F060         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 26158  016268  C06A  F061         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 26159  01626C  0E04               	movlw	4
 26160  01626E  0100               	movlb	0	; () banked
 26161  016270  6F62               	movwf	Byte_GetZone@pMax& (0+255),b
 26162  016272  C06B  F063         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 26163  016276  0E02               	movlw	2
 26164  016278  0100               	movlb	0	; () banked
 26165  01627A  6F64               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 26166  01627C  ECF9  F0A4         	call	_Byte_GetZone	;wreg free
 26167  016280  0012               	return	
 26168  016282                     __end_of_Byte_GetPair:
 26169                           	opt stack 0
 26170                           tosu	equ	0xFFF
 26171                           tosh	equ	0xFFE
 26172                           tosl	equ	0xFFD
 26173                           pclath	equ	0xFFA
 26174                           tblptru	equ	0xFF8
 26175                           tblptrh	equ	0xFF7
 26176                           tblptrl	equ	0xFF6
 26177                           tablat	equ	0xFF5
 26178                           prodh	equ	0xFF4
 26179                           prodl	equ	0xFF3
 26180                           intcon	equ	0xFF2
 26181                           postinc0	equ	0xFEE
 26182                           wreg	equ	0xFE8
 26183                           indf1	equ	0xFE7
 26184                           postdec1	equ	0xFE5
 26185                           fsr1h	equ	0xFE2
 26186                           fsr1l	equ	0xFE1
 26187                           indf2	equ	0xFDF
 26188                           postinc2	equ	0xFDE
 26189                           postdec2	equ	0xFDD
 26190                           plusw2	equ	0xFDB
 26191                           fsr2h	equ	0xFDA
 26192                           fsr2l	equ	0xFD9
 26193                           status	equ	0xFD8
 26194                           
 26195 ;; *************** function _Byte_GetZone *****************
 26196 ;; Defined at:
 26197 ;;		line 64 in file "Library/Types.c"
 26198 ;; Parameters:    Size  Location     Type
 26199 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 26200 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 26201 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 26202 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 26203 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 26204 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 26205 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 26206 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 26207 ;;		 -> NULL(0), 
 26208 ;;  pMax            1    2[BANK0 ] unsigned char 
 26209 ;;  pChunk          1    3[BANK0 ] unsigned char 
 26210 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 26211 ;; Auto vars:     Size  Location     Type
 26212 ;;  Output          1    8[BANK0 ] unsigned char 
 26213 ;;  Offset          1    7[BANK0 ] unsigned char 
 26214 ;;  MASK            1    6[BANK0 ] unsigned char 
 26215 ;; Return value:  Size  Location     Type
 26216 ;;                  1    wreg      unsigned char 
 26217 ;; Registers used:
 26218 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 26219 ;; Tracked objects:
 26220 ;;		On entry : 0/0
 26221 ;;		On exit  : 0/0
 26222 ;;		Unchanged: 0/0
 26223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26224 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26225 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26226 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26227 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26228 ;;Total ram usage:        9 bytes
 26229 ;; Hardware stack levels used:    1
 26230 ;; Hardware stack levels required when called:    7
 26231 ;; This function calls:
 26232 ;;		Nothing
 26233 ;; This function is called by:
 26234 ;;		_Byte_GetPair
 26235 ;;		_Byte_GetTriple
 26236 ;;		_Byte_GetQuad
 26237 ;; This function uses a non-reentrant model
 26238 ;;
 26239                           
 26240                           	psect	text131
 26241  0149F2                     __ptext131:
 26242                           	opt stack 0
 26243  0149F2                     _Byte_GetZone:
 26244                           	opt stack 17
 26245                           
 26246                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 26247                           
 26248                           ;incstack = 0
 26249  0149F2  C060  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 26250  0149F6  C061  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 26251  0149FA  0E00               	movlw	low (__mediumconst shr (0+16))
 26252  0149FC  6EF8               	movwf	tblptru,c
 26253  0149FE  0E0F               	movlw	(high __ramtop+-1)
 26254  014A00  64F7               	cpfsgt	tblptrh,c
 26255  014A02  D003               	bra	u8587
 26256  014A04  0008               	tblrd		*
 26257  014A06  50F5               	movf	tablat,w,c
 26258  014A08  D005               	bra	u8580
 26259  014A0A                     u8587:
 26260  014A0A  CFF6 FFE9          	movff	tblptrl,fsr0l
 26261  014A0E  CFF7 FFEA          	movff	tblptrh,fsr0h
 26262  014A12  50EF               	movf	indf0,w,c
 26263  014A14                     u8580:
 26264  014A14  0100               	movlb	0	; () banked
 26265  014A16  6F68               	movwf	Byte_GetZone@Output& (0+255),b
 26266                           
 26267                           ; BSR set to: 0
 26268                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 26269  014A18  0100               	movlb	0	; () banked
 26270  014A1A  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 26271  014A1C  0D01               	mullw	1
 26272  014A1E  0E73               	movlw	low _MASKS
 26273  014A20  24F3               	addwf	prodl,w,c
 26274  014A22  6EF6               	movwf	tblptrl,c
 26275  014A24  0EFD               	movlw	high _MASKS
 26276  014A26  20F4               	addwfc	prodh,w,c
 26277  014A28  6EF7               	movwf	tblptrh,c
 26278  014A2A                     	if	1	;There are 3 active tblptr bytes
 26279  014A2A  6AF8               	clrf	tblptru,c
 26280  014A2C  0E00               	movlw	low (__mediumconst shr (0+16))
 26281  014A2E  22F8               	addwfc	tblptru,f,c
 26282  014A30                     	endif
 26283  014A30  0008               	tblrd		*
 26284  014A32  CFF5 F066          	movff	tablat,Byte_GetZone@MASK
 26285                           
 26286                           ; BSR set to: 0
 26287                           ;Types.c: 68: UINT8 Offset = 0;
 26288  014A36  0E00               	movlw	0
 26289  014A38  0100               	movlb	0	; () banked
 26290  014A3A  6F67               	movwf	Byte_GetZone@Offset& (0+255),b
 26291                           
 26292                           ;Types.c: 70: while (pChunk >= pMax)
 26293  014A3C  D006               	goto	l732
 26294  014A3E                     
 26295                           ; BSR set to: 0
 26296                           ;Types.c: 71: {
 26297                           ;Types.c: 72: pChunk -= pMax;
 26298                           
 26299                           ; BSR set to: 0
 26300  014A3E  0100               	movlb	0	; () banked
 26301  014A40  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 26302  014A42  0100               	movlb	0	; () banked
 26303  014A44  5F63               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 26304                           
 26305                           ; BSR set to: 0
 26306                           ;Types.c: 73: Offset += 1;
 26307  014A46  0100               	movlb	0	; () banked
 26308  014A48  2B67               	incf	Byte_GetZone@Offset& (0+255),f,b
 26309  014A4A                     l732:
 26310                           
 26311                           ; BSR set to: 0
 26312                           
 26313                           ; BSR set to: 0
 26314  014A4A  0100               	movlb	0	; () banked
 26315  014A4C  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 26316  014A4E  0100               	movlb	0	; () banked
 26317  014A50  5D63               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 26318  014A52  B0D8               	btfsc	status,0,c
 26319  014A54  D7F4               	goto	l733
 26320                           
 26321                           ; BSR set to: 0
 26322                           ;Types.c: 74: }
 26323                           ;Types.c: 75: pChunk *= pChunkSize;
 26324                           
 26325                           ; BSR set to: 0
 26326  014A56  0100               	movlb	0	; () banked
 26327  014A58  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 26328  014A5A  0100               	movlb	0	; () banked
 26329  014A5C  0363               	mulwf	Byte_GetZone@pChunk& (0+255),b
 26330  014A5E  50F3               	movf	prodl,w,c
 26331  014A60  6F63               	movwf	Byte_GetZone@pChunk& (0+255),b
 26332                           
 26333                           ; BSR set to: 0
 26334                           ;Types.c: 76: pChunk += Offset;
 26335  014A62  0100               	movlb	0	; () banked
 26336  014A64  5167               	movf	Byte_GetZone@Offset& (0+255),w,b
 26337  014A66  0100               	movlb	0	; () banked
 26338  014A68  2763               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 26339                           
 26340                           ; BSR set to: 0
 26341                           ;Types.c: 78: Output >>= pChunk;
 26342  014A6A  0100               	movlb	0	; () banked
 26343  014A6C  2963               	incf	Byte_GetZone@pChunk& (0+255),w,b
 26344  014A6E  0100               	movlb	0	; () banked
 26345  014A70  6F65               	movwf	??_Byte_GetZone& (0+255),b
 26346  014A72  D003               	goto	u8600
 26347  014A74                     u8605:
 26348  014A74  0100               	movlb	0	; () banked
 26349  014A76  90D8               	bcf	status,0,c
 26350  014A78  3368               	rrcf	Byte_GetZone@Output& (0+255),f,b
 26351  014A7A                     u8600:
 26352  014A7A  0100               	movlb	0	; () banked
 26353  014A7C  2F65               	decfsz	??_Byte_GetZone& (0+255),f,b
 26354  014A7E  D7FA               	goto	u8605
 26355                           
 26356                           ;Types.c: 79: Output &= MASK;
 26357  014A80  0100               	movlb	0	; () banked
 26358  014A82  5166               	movf	Byte_GetZone@MASK& (0+255),w,b
 26359  014A84  0100               	movlb	0	; () banked
 26360  014A86  1768               	andwf	Byte_GetZone@Output& (0+255),f,b
 26361                           
 26362                           ; BSR set to: 0
 26363                           ;Types.c: 80: return Output;
 26364  014A88  0100               	movlb	0	; () banked
 26365  014A8A  5168               	movf	Byte_GetZone@Output& (0+255),w,b
 26366  014A8C  0012               	return	
 26367  014A8E                     __end_of_Byte_GetZone:
 26368                           	opt stack 0
 26369                           tosu	equ	0xFFF
 26370                           tosh	equ	0xFFE
 26371                           tosl	equ	0xFFD
 26372                           pclath	equ	0xFFA
 26373                           tblptru	equ	0xFF8
 26374                           tblptrh	equ	0xFF7
 26375                           tblptrl	equ	0xFF6
 26376                           tablat	equ	0xFF5
 26377                           prodh	equ	0xFF4
 26378                           prodl	equ	0xFF3
 26379                           intcon	equ	0xFF2
 26380                           indf0	equ	0xFEF
 26381                           postinc0	equ	0xFEE
 26382                           fsr0h	equ	0xFEA
 26383                           fsr0l	equ	0xFE9
 26384                           wreg	equ	0xFE8
 26385                           indf1	equ	0xFE7
 26386                           postdec1	equ	0xFE5
 26387                           fsr1h	equ	0xFE2
 26388                           fsr1l	equ	0xFE1
 26389                           indf2	equ	0xFDF
 26390                           postinc2	equ	0xFDE
 26391                           postdec2	equ	0xFDD
 26392                           plusw2	equ	0xFDB
 26393                           fsr2h	equ	0xFDA
 26394                           fsr2l	equ	0xFD9
 26395                           status	equ	0xFD8
 26396                           
 26397 ;; *************** function _Byte_SetQuad *****************
 26398 ;; Defined at:
 26399 ;;		line 101 in file "Library/Types.c"
 26400 ;; Parameters:    Size  Location     Type
 26401 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 26402 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 26403 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 26404 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 26405 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 26406 ;;		 -> NULL(0), 
 26407 ;;  pQuad           1   13[BANK0 ] unsigned char 
 26408 ;;  pValue          1   14[BANK0 ] unsigned char 
 26409 ;; Auto vars:     Size  Location     Type
 26410 ;;		None
 26411 ;; Return value:  Size  Location     Type
 26412 ;;                  1    wreg      void 
 26413 ;; Registers used:
 26414 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26415 ;; Tracked objects:
 26416 ;;		On entry : 0/0
 26417 ;;		On exit  : 0/0
 26418 ;;		Unchanged: 0/0
 26419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26420 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26423 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26424 ;;Total ram usage:        4 bytes
 26425 ;; Hardware stack levels used:    1
 26426 ;; Hardware stack levels required when called:    8
 26427 ;; This function calls:
 26428 ;;		_Byte_SetZone
 26429 ;; This function is called by:
 26430 ;;		_Port_SetQuadType
 26431 ;;		_SPI_Init
 26432 ;;		_SPI_MinSpeed
 26433 ;;		_SPI_MaxSpeed
 26434 ;;		_Port_SetQuad
 26435 ;;		_Word_SetQuad
 26436 ;;		_I2C_Init
 26437 ;; This function uses a non-reentrant model
 26438 ;;
 26439                           
 26440                           	psect	text132
 26441  016150                     __ptext132:
 26442                           	opt stack 0
 26443  016150                     _Byte_SetQuad:
 26444                           	opt stack 19
 26445                           
 26446                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 26447                           
 26448                           ; BSR set to: 0
 26449                           ;incstack = 0
 26450  016150  C06B  F060         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 26451  016154  C06C  F061         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 26452  016158  0E02               	movlw	2
 26453  01615A  0100               	movlb	0	; () banked
 26454  01615C  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 26455  01615E  C06D  F063         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 26456  016162  0E04               	movlw	4
 26457  016164  0100               	movlb	0	; () banked
 26458  016166  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 26459  016168  C06E  F065         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 26460  01616C  EC56  F0A1         	call	_Byte_SetZone	;wreg free
 26461  016170  0012               	return		;funcret
 26462  016172                     __end_of_Byte_SetQuad:
 26463                           	opt stack 0
 26464                           tosu	equ	0xFFF
 26465                           tosh	equ	0xFFE
 26466                           tosl	equ	0xFFD
 26467                           pclath	equ	0xFFA
 26468                           tblptru	equ	0xFF8
 26469                           tblptrh	equ	0xFF7
 26470                           tblptrl	equ	0xFF6
 26471                           tablat	equ	0xFF5
 26472                           prodh	equ	0xFF4
 26473                           prodl	equ	0xFF3
 26474                           intcon	equ	0xFF2
 26475                           indf0	equ	0xFEF
 26476                           postinc0	equ	0xFEE
 26477                           fsr0h	equ	0xFEA
 26478                           fsr0l	equ	0xFE9
 26479                           wreg	equ	0xFE8
 26480                           indf1	equ	0xFE7
 26481                           postdec1	equ	0xFE5
 26482                           fsr1h	equ	0xFE2
 26483                           fsr1l	equ	0xFE1
 26484                           indf2	equ	0xFDF
 26485                           postinc2	equ	0xFDE
 26486                           postdec2	equ	0xFDD
 26487                           plusw2	equ	0xFDB
 26488                           fsr2h	equ	0xFDA
 26489                           fsr2l	equ	0xFD9
 26490                           status	equ	0xFD8
 26491                           
 26492 ;; *************** function _Byte_SetZone *****************
 26493 ;; Defined at:
 26494 ;;		line 47 in file "Library/Types.c"
 26495 ;; Parameters:    Size  Location     Type
 26496 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 26497 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 26498 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 26499 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 26500 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 26501 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 26502 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 26503 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 26504 ;;		 -> PortC(10), PortF(10), NULL(0), 
 26505 ;;  pMax            1    2[BANK0 ] unsigned char 
 26506 ;;  pChunk          1    3[BANK0 ] unsigned char 
 26507 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 26508 ;;  pValue          1    5[BANK0 ] unsigned char 
 26509 ;; Auto vars:     Size  Location     Type
 26510 ;;  MASK            1   10[BANK0 ] unsigned char 
 26511 ;;  Offset          1    9[BANK0 ] unsigned char 
 26512 ;; Return value:  Size  Location     Type
 26513 ;;                  1    wreg      void 
 26514 ;; Registers used:
 26515 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 26516 ;; Tracked objects:
 26517 ;;		On entry : 0/0
 26518 ;;		On exit  : 0/0
 26519 ;;		Unchanged: 0/0
 26520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26521 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26522 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26523 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26524 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26525 ;;Total ram usage:       11 bytes
 26526 ;; Hardware stack levels used:    1
 26527 ;; Hardware stack levels required when called:    7
 26528 ;; This function calls:
 26529 ;;		Nothing
 26530 ;; This function is called by:
 26531 ;;		_Byte_SetPair
 26532 ;;		_Byte_SetQuad
 26533 ;;		_Byte_SetTriple
 26534 ;; This function uses a non-reentrant model
 26535 ;;
 26536                           
 26537                           	psect	text133
 26538  0142AC                     __ptext133:
 26539                           	opt stack 0
 26540  0142AC                     _Byte_SetZone:
 26541                           	opt stack 18
 26542                           
 26543                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 26544                           
 26545                           ;incstack = 0
 26546  0142AC  0100               	movlb	0	; () banked
 26547  0142AE  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 26548  0142B0  0D01               	mullw	1
 26549  0142B2  0E73               	movlw	low _MASKS
 26550  0142B4  24F3               	addwf	prodl,w,c
 26551  0142B6  6EF6               	movwf	tblptrl,c
 26552  0142B8  0EFD               	movlw	high _MASKS
 26553  0142BA  20F4               	addwfc	prodh,w,c
 26554  0142BC  6EF7               	movwf	tblptrh,c
 26555  0142BE                     	if	1	;There are 3 active tblptr bytes
 26556  0142BE  6AF8               	clrf	tblptru,c
 26557  0142C0  0E00               	movlw	low (__mediumconst shr (0+16))
 26558  0142C2  22F8               	addwfc	tblptru,f,c
 26559  0142C4                     	endif
 26560  0142C4  0008               	tblrd		*
 26561  0142C6  CFF5 F06A          	movff	tablat,Byte_SetZone@MASK
 26562                           
 26563                           ; BSR set to: 0
 26564                           ;Types.c: 50: UINT8 Offset = 0;
 26565  0142CA  0E00               	movlw	0
 26566  0142CC  0100               	movlb	0	; () banked
 26567  0142CE  6F69               	movwf	Byte_SetZone@Offset& (0+255),b
 26568                           
 26569                           ;Types.c: 52: while (pChunk >= pMax)
 26570  0142D0  D006               	goto	l726
 26571  0142D2                     
 26572                           ; BSR set to: 0
 26573                           ;Types.c: 53: {
 26574                           ;Types.c: 54: pChunk -= pMax;
 26575                           
 26576                           ; BSR set to: 0
 26577  0142D2  0100               	movlb	0	; () banked
 26578  0142D4  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 26579  0142D6  0100               	movlb	0	; () banked
 26580  0142D8  5F63               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 26581                           
 26582                           ; BSR set to: 0
 26583                           ;Types.c: 55: Offset += 1;
 26584  0142DA  0100               	movlb	0	; () banked
 26585  0142DC  2B69               	incf	Byte_SetZone@Offset& (0+255),f,b
 26586  0142DE                     l726:
 26587                           
 26588                           ; BSR set to: 0
 26589                           
 26590                           ; BSR set to: 0
 26591  0142DE  0100               	movlb	0	; () banked
 26592  0142E0  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 26593  0142E2  0100               	movlb	0	; () banked
 26594  0142E4  5D63               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 26595  0142E6  B0D8               	btfsc	status,0,c
 26596  0142E8  D7F4               	goto	l727
 26597                           
 26598                           ; BSR set to: 0
 26599                           ;Types.c: 56: }
 26600                           ;Types.c: 57: pChunk *= pChunkSize;
 26601                           
 26602                           ; BSR set to: 0
 26603  0142EA  0100               	movlb	0	; () banked
 26604  0142EC  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 26605  0142EE  0100               	movlb	0	; () banked
 26606  0142F0  0363               	mulwf	Byte_SetZone@pChunk& (0+255),b
 26607  0142F2  50F3               	movf	prodl,w,c
 26608  0142F4  6F63               	movwf	Byte_SetZone@pChunk& (0+255),b
 26609                           
 26610                           ; BSR set to: 0
 26611                           ;Types.c: 58: pChunk += Offset;
 26612  0142F6  0100               	movlb	0	; () banked
 26613  0142F8  5169               	movf	Byte_SetZone@Offset& (0+255),w,b
 26614  0142FA  0100               	movlb	0	; () banked
 26615  0142FC  2763               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 26616                           
 26617                           ; BSR set to: 0
 26618                           ;Types.c: 60: pValue &= MASK;
 26619  0142FE  0100               	movlb	0	; () banked
 26620  014300  516A               	movf	Byte_SetZone@MASK& (0+255),w,b
 26621  014302  0100               	movlb	0	; () banked
 26622  014304  1765               	andwf	Byte_SetZone@pValue& (0+255),f,b
 26623                           
 26624                           ; BSR set to: 0
 26625                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 26626  014306  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 26627  01430A  C06A  F067         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 26628  01430E  0100               	movlb	0	; () banked
 26629  014310  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 26630  014312  D003               	goto	u8684
 26631  014314                     u8685:
 26632  014314  0100               	movlb	0	; () banked
 26633  014316  90D8               	bcf	status,0,c
 26634  014318  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 26635  01431A                     u8684:
 26636  01431A  0100               	movlb	0	; () banked
 26637  01431C  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 26638  01431E  D7FA               	goto	u8685
 26639  014320  0100               	movlb	0	; () banked
 26640  014322  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 26641  014324  0AFF               	xorlw	255
 26642  014326  0100               	movlb	0	; () banked
 26643  014328  6F68               	movwf	(??_Byte_SetZone+2)& (0+255),b
 26644  01432A  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 26645  01432E  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 26646  014332  0100               	movlb	0	; () banked
 26647  014334  5168               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 26648  014336  16DF               	andwf	indf2,f,c
 26649                           
 26650                           ; BSR set to: 0
 26651                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 26652  014338  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 26653  01433C  C065  F067         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 26654  014340  0100               	movlb	0	; () banked
 26655  014342  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 26656  014344  D003               	goto	u8694
 26657  014346                     u8695:
 26658  014346  0100               	movlb	0	; () banked
 26659  014348  90D8               	bcf	status,0,c
 26660  01434A  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 26661  01434C                     u8694:
 26662  01434C  0100               	movlb	0	; () banked
 26663  01434E  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 26664  014350  D7FA               	goto	u8695
 26665  014352  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 26666  014356  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 26667  01435A  0100               	movlb	0	; () banked
 26668  01435C  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 26669  01435E  12DF               	iorwf	indf2,f,c
 26670                           
 26671                           ; BSR set to: 0
 26672  014360  0012               	return		;funcret
 26673  014362                     __end_of_Byte_SetZone:
 26674                           	opt stack 0
 26675                           tosu	equ	0xFFF
 26676                           tosh	equ	0xFFE
 26677                           tosl	equ	0xFFD
 26678                           pclath	equ	0xFFA
 26679                           tblptru	equ	0xFF8
 26680                           tblptrh	equ	0xFF7
 26681                           tblptrl	equ	0xFF6
 26682                           tablat	equ	0xFF5
 26683                           prodh	equ	0xFF4
 26684                           prodl	equ	0xFF3
 26685                           intcon	equ	0xFF2
 26686                           indf0	equ	0xFEF
 26687                           postinc0	equ	0xFEE
 26688                           fsr0h	equ	0xFEA
 26689                           fsr0l	equ	0xFE9
 26690                           wreg	equ	0xFE8
 26691                           indf1	equ	0xFE7
 26692                           postdec1	equ	0xFE5
 26693                           fsr1h	equ	0xFE2
 26694                           fsr1l	equ	0xFE1
 26695                           indf2	equ	0xFDF
 26696                           postinc2	equ	0xFDE
 26697                           postdec2	equ	0xFDD
 26698                           plusw2	equ	0xFDB
 26699                           fsr2h	equ	0xFDA
 26700                           fsr2l	equ	0xFD9
 26701                           status	equ	0xFD8
 26702                           
 26703 ;; *************** function _Console_Init *****************
 26704 ;; Defined at:
 26705 ;;		line 157 in file "Library/Console.c"
 26706 ;; Parameters:    Size  Location     Type
 26707 ;;		None
 26708 ;; Auto vars:     Size  Location     Type
 26709 ;;  y               1    3[BANK0 ] unsigned char 
 26710 ;;  x               1    2[BANK0 ] unsigned char 
 26711 ;; Return value:  Size  Location     Type
 26712 ;;                  1    wreg      void 
 26713 ;; Registers used:
 26714 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 26715 ;; Tracked objects:
 26716 ;;		On entry : 0/0
 26717 ;;		On exit  : 0/0
 26718 ;;		Unchanged: 0/0
 26719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26721 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26722 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26723 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26724 ;;Total ram usage:        4 bytes
 26725 ;; Hardware stack levels used:    1
 26726 ;; Hardware stack levels required when called:    7
 26727 ;; This function calls:
 26728 ;;		Nothing
 26729 ;; This function is called by:
 26730 ;;		_init
 26731 ;; This function uses a non-reentrant model
 26732 ;;
 26733                           
 26734                           	psect	text134
 26735  014C44                     __ptext134:
 26736                           	opt stack 0
 26737  014C44                     _Console_Init:
 26738                           	opt stack 22
 26739                           
 26740                           ;Console.c: 160: lBufferX = 0;
 26741                           
 26742                           ; BSR set to: 0
 26743                           ;incstack = 0
 26744  014C44  0E00               	movlw	0
 26745  014C46  0100               	movlb	0	; () banked
 26746  014C48  6FE8               	movwf	_lBufferX& (0+255),b
 26747                           
 26748                           ;Console.c: 161: lBufferY = 0;
 26749  014C4A  0E00               	movlw	0
 26750  014C4C  0100               	movlb	0	; () banked
 26751  014C4E  6FE7               	movwf	_lBufferY& (0+255),b
 26752                           
 26753                           ;Console.c: 163: UINT8 x, y;
 26754                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 26755  014C50  0E00               	movlw	0
 26756  014C52  0100               	movlb	0	; () banked
 26757  014C54  6F62               	movwf	Console_Init@x& (0+255),b
 26758  014C56                     l13975:
 26759                           
 26760                           ; BSR set to: 0
 26761  014C56  0E13               	movlw	19
 26762  014C58  0100               	movlb	0	; () banked
 26763  014C5A  6562               	cpfsgt	Console_Init@x& (0+255),b
 26764  014C5C  D001               	goto	l976
 26765  014C5E  0012               	return	
 26766  014C60                     l976:
 26767                           
 26768                           ; BSR set to: 0
 26769                           ;Console.c: 165: {
 26770                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 26771                           
 26772                           ; BSR set to: 0
 26773  014C60  0E00               	movlw	0
 26774  014C62  0100               	movlb	0	; () banked
 26775  014C64  6F63               	movwf	Console_Init@y& (0+255),b
 26776  014C66                     l13981:
 26777                           
 26778                           ; BSR set to: 0
 26779  014C66  0E0E               	movlw	14
 26780  014C68  0100               	movlb	0	; () banked
 26781  014C6A  6563               	cpfsgt	Console_Init@y& (0+255),b
 26782  014C6C  D001               	goto	l978
 26783  014C6E  D02C               	goto	u10750
 26784  014C70                     l978:
 26785                           
 26786                           ; BSR set to: 0
 26787                           ;Console.c: 167: {
 26788                           ;Console.c: 168: lBuffer[y][x] = '\0';
 26789                           
 26790                           ; BSR set to: 0
 26791  014C70  0100               	movlb	0	; () banked
 26792  014C72  5163               	movf	Console_Init@y& (0+255),w,b
 26793  014C74  0D14               	mullw	20
 26794  014C76  0ECA               	movlw	low _lBuffer
 26795  014C78  0100               	movlb	0	; () banked
 26796  014C7A  6F60               	movwf	??_Console_Init& (0+255),b
 26797  014C7C  0E04               	movlw	high _lBuffer
 26798  014C7E  0100               	movlb	0	; () banked
 26799  014C80  6F61               	movwf	(??_Console_Init+1)& (0+255),b
 26800  014C82  50F3               	movf	prodl,w,c
 26801  014C84  0100               	movlb	0	; () banked
 26802  014C86  2760               	addwf	??_Console_Init& (0+255),f,b
 26803  014C88  50F4               	movf	prodh,w,c
 26804  014C8A  0100               	movlb	0	; () banked
 26805  014C8C  2361               	addwfc	(??_Console_Init+1)& (0+255),f,b
 26806  014C8E  0100               	movlb	0	; () banked
 26807  014C90  5162               	movf	Console_Init@x& (0+255),w,b
 26808  014C92  0D01               	mullw	1
 26809  014C94  50F3               	movf	prodl,w,c
 26810  014C96  0100               	movlb	0	; () banked
 26811  014C98  2560               	addwf	??_Console_Init& (0+255),w,b
 26812  014C9A  6ED9               	movwf	fsr2l,c
 26813  014C9C  50F4               	movf	prodh,w,c
 26814  014C9E  0100               	movlb	0	; () banked
 26815  014CA0  2161               	addwfc	(??_Console_Init+1)& (0+255),w,b
 26816  014CA2  6EDA               	movwf	fsr2h,c
 26817  014CA4  0E00               	movlw	0
 26818  014CA6  6EDF               	movwf	indf2,c
 26819                           
 26820                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 26821  014CA8  0100               	movlb	0	; () banked
 26822  014CAA  5163               	movf	Console_Init@y& (0+255),w,b
 26823  014CAC  0D02               	mullw	2
 26824  014CAE  0E00               	movlw	low _lCBuffer
 26825  014CB0  24F3               	addwf	prodl,w,c
 26826  014CB2  6ED9               	movwf	fsr2l,c
 26827  014CB4  0E04               	movlw	high _lCBuffer
 26828  014CB6  20F4               	addwfc	prodh,w,c
 26829  014CB8  6EDA               	movwf	fsr2h,c
 26830  014CBA  0EFF               	movlw	255
 26831  014CBC  6EDE               	movwf	postinc2,c
 26832  014CBE  0EFF               	movlw	255
 26833  014CC0  6EDD               	movwf	postdec2,c
 26834                           
 26835                           ; BSR set to: 0
 26836  014CC2  0100               	movlb	0	; () banked
 26837  014CC4  2B63               	incf	Console_Init@y& (0+255),f,b
 26838  014CC6  D7CF               	goto	l13981
 26839  014CC8                     u10750:
 26840                           
 26841                           ; BSR set to: 0
 26842                           
 26843                           ; BSR set to: 0
 26844  014CC8  0100               	movlb	0	; () banked
 26845  014CCA  2B62               	incf	Console_Init@x& (0+255),f,b
 26846  014CCC  D7C4               	goto	l13975
 26847  014CCE                     __end_of_Console_Init:
 26848                           	opt stack 0
 26849                           tosu	equ	0xFFF
 26850                           tosh	equ	0xFFE
 26851                           tosl	equ	0xFFD
 26852                           pclath	equ	0xFFA
 26853                           tblptru	equ	0xFF8
 26854                           tblptrh	equ	0xFF7
 26855                           tblptrl	equ	0xFF6
 26856                           tablat	equ	0xFF5
 26857                           prodh	equ	0xFF4
 26858                           prodl	equ	0xFF3
 26859                           intcon	equ	0xFF2
 26860                           indf0	equ	0xFEF
 26861                           postinc0	equ	0xFEE
 26862                           fsr0h	equ	0xFEA
 26863                           fsr0l	equ	0xFE9
 26864                           wreg	equ	0xFE8
 26865                           indf1	equ	0xFE7
 26866                           postdec1	equ	0xFE5
 26867                           fsr1h	equ	0xFE2
 26868                           fsr1l	equ	0xFE1
 26869                           indf2	equ	0xFDF
 26870                           postinc2	equ	0xFDE
 26871                           postdec2	equ	0xFDD
 26872                           plusw2	equ	0xFDB
 26873                           fsr2h	equ	0xFDA
 26874                           fsr2l	equ	0xFD9
 26875                           status	equ	0xFD8
 26876                           
 26877 ;; *************** function _ADC_Start *****************
 26878 ;; Defined at:
 26879 ;;		line 114 in file "Library/ADC.c"
 26880 ;; Parameters:    Size  Location     Type
 26881 ;;  pInput          2    2[BANK0 ] PTR struct ADC
 26882 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 26883 ;;		 -> NULL(0), 
 26884 ;; Auto vars:     Size  Location     Type
 26885 ;;		None
 26886 ;; Return value:  Size  Location     Type
 26887 ;;                  1    wreg      void 
 26888 ;; Registers used:
 26889 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 26890 ;; Tracked objects:
 26891 ;;		On entry : 0/0
 26892 ;;		On exit  : 0/0
 26893 ;;		Unchanged: 0/0
 26894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26895 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26896 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26897 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26898 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26899 ;;Total ram usage:        4 bytes
 26900 ;; Hardware stack levels used:    1
 26901 ;; Hardware stack levels required when called:    8
 26902 ;; This function calls:
 26903 ;;		_ADC_Off
 26904 ;;		_ADC_On
 26905 ;;		_ADC_SetChannel
 26906 ;; This function is called by:
 26907 ;;		_init
 26908 ;;		_mode1
 26909 ;;		_mode4
 26910 ;;		_FunctADC
 26911 ;; This function uses a non-reentrant model
 26912 ;;
 26913                           
 26914                           	psect	text135
 26915  014DE0                     __ptext135:
 26916                           	opt stack 0
 26917  014DE0                     _ADC_Start:
 26918                           	opt stack 21
 26919                           
 26920                           ;ADC.c: 117: if ((ADCON0bits.GODONE))
 26921                           
 26922                           ; BSR set to: 0
 26923                           ;incstack = 0
 26924  014DE0  B2C2               	btfsc	4034,1,c	;volatile
 26925  014DE2  0012               	return	
 26926  014DE4                     
 26927                           ;ADC.c: 128: {
 26928                           ;ADC.c: 129: ADC_Off();
 26929                           
 26930                           ;ADC.c: 127: for(;;)
 26931  014DE4  EC60  F0B2         	call	_ADC_Off	;wreg free
 26932                           
 26933                           ;ADC.c: 130: ADC_SetChannel(pInput->mChannel);
 26934  014DE8  C062  FFD9         	movff	ADC_Start@pInput,fsr2l
 26935  014DEC  C063  FFDA         	movff	ADC_Start@pInput+1,fsr2h
 26936  014DF0  50DF               	movf	indf2,w,c
 26937  014DF2  EC5D  F0B1         	call	_ADC_SetChannel
 26938                           
 26939                           ;ADC.c: 131: ADC_On();
 26940  014DF6  EC71  F0B2         	call	_ADC_On	;wreg free
 26941                           
 26942                           ;ADC.c: 134: (ADCON0bits.GO) = 1;
 26943  014DFA  82C2               	bsf	4034,1,c	;volatile
 26944  014DFC  B2C2               	btfsc	4034,1,c	;volatile
 26945  014DFE  D7FE               	goto	l1280
 26946                           
 26947                           ;ADC.c: 138: pInput->mValue = (ADRESH << 8) | ADRESL;
 26948  014E00  50C3               	movf	4035,w,c	;volatile
 26949  014E02  CFC4 F064          	movff	4036,??_ADC_Start	;volatile
 26950  014E06  0100               	movlb	0	; () banked
 26951  014E08  6B65               	clrf	(??_ADC_Start+1)& (0+255),b
 26952  014E0A  C064  F065         	movff	??_ADC_Start,??_ADC_Start+1
 26953  014E0E  0100               	movlb	0	; () banked
 26954  014E10  6B64               	clrf	??_ADC_Start& (0+255),b
 26955  014E12  0100               	movlb	0	; () banked
 26956  014E14  1364               	iorwf	??_ADC_Start& (0+255),f,b
 26957  014E16  0E00               	movlw	0
 26958  014E18  1365               	iorwf	(??_ADC_Start+1)& (0+255),f,b
 26959  014E1A  0100               	movlb	0	; () banked
 26960  014E1C  EE20 F001          	lfsr	2,1
 26961  014E20  5162               	movf	ADC_Start@pInput& (0+255),w,b
 26962  014E22  26D9               	addwf	fsr2l,f,c
 26963  014E24  5163               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 26964  014E26  22DA               	addwfc	fsr2h,f,c
 26965  014E28  C064  FFDE         	movff	??_ADC_Start,postinc2
 26966  014E2C  C065  FFDD         	movff	??_ADC_Start+1,postdec2
 26967                           
 26968                           ;ADC.c: 141: if (pInput->mNext == 0)
 26969  014E30  0100               	movlb	0	; () banked
 26970  014E32  EE20 F003          	lfsr	2,3
 26971  014E36  5162               	movf	ADC_Start@pInput& (0+255),w,b
 26972  014E38  26D9               	addwf	fsr2l,f,c
 26973  014E3A  5163               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 26974  014E3C  22DA               	addwfc	fsr2h,f,c
 26975  014E3E  50DE               	movf	postinc2,w,c
 26976  014E40  10DE               	iorwf	postinc2,w,c
 26977  014E42  B4D8               	btfsc	status,2,c
 26978  014E44  D00C               	goto	l1283
 26979                           
 26980                           ; BSR set to: 0
 26981                           ;ADC.c: 145: pInput = pInput->mNext;
 26982                           
 26983                           ; BSR set to: 0
 26984                           
 26985                           ; BSR set to: 0
 26986                           ;ADC.c: 142: break;
 26987  014E46  0100               	movlb	0	; () banked
 26988  014E48  EE20 F003          	lfsr	2,3
 26989  014E4C  5162               	movf	ADC_Start@pInput& (0+255),w,b
 26990  014E4E  26D9               	addwf	fsr2l,f,c
 26991  014E50  5163               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 26992  014E52  22DA               	addwfc	fsr2h,f,c
 26993  014E54  CFDE F062          	movff	postinc2,ADC_Start@pInput
 26994  014E58  CFDD F063          	movff	postdec2,ADC_Start@pInput+1
 26995                           
 26996                           ;ADC.c: 146: }
 26997  014E5C  D7C3               	goto	l1276
 26998  014E5E                     l1283:
 26999                           
 27000                           ; BSR set to: 0
 27001                           ;ADC.c: 147: ADC_Off();
 27002                           
 27003                           ; BSR set to: 0
 27004  014E5E  EC60  F0B2         	call	_ADC_Off	;wreg free
 27005  014E62  0012               	return		;funcret
 27006  014E64                     __end_of_ADC_Start:
 27007                           	opt stack 0
 27008                           tosu	equ	0xFFF
 27009                           tosh	equ	0xFFE
 27010                           tosl	equ	0xFFD
 27011                           pclath	equ	0xFFA
 27012                           tblptru	equ	0xFF8
 27013                           tblptrh	equ	0xFF7
 27014                           tblptrl	equ	0xFF6
 27015                           tablat	equ	0xFF5
 27016                           prodh	equ	0xFF4
 27017                           prodl	equ	0xFF3
 27018                           intcon	equ	0xFF2
 27019                           indf0	equ	0xFEF
 27020                           postinc0	equ	0xFEE
 27021                           fsr0h	equ	0xFEA
 27022                           fsr0l	equ	0xFE9
 27023                           wreg	equ	0xFE8
 27024                           indf1	equ	0xFE7
 27025                           postdec1	equ	0xFE5
 27026                           fsr1h	equ	0xFE2
 27027                           fsr1l	equ	0xFE1
 27028                           indf2	equ	0xFDF
 27029                           postinc2	equ	0xFDE
 27030                           postdec2	equ	0xFDD
 27031                           plusw2	equ	0xFDB
 27032                           fsr2h	equ	0xFDA
 27033                           fsr2l	equ	0xFD9
 27034                           status	equ	0xFD8
 27035                           
 27036 ;; *************** function _ADC_Init *****************
 27037 ;; Defined at:
 27038 ;;		line 19 in file "Library/ADC.c"
 27039 ;; Parameters:    Size  Location     Type
 27040 ;;  pInput          2    4[BANK0 ] PTR struct ADC
 27041 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 27042 ;;  pChannel        1    6[BANK0 ] enum E6742
 27043 ;; Auto vars:     Size  Location     Type
 27044 ;;		None
 27045 ;; Return value:  Size  Location     Type
 27046 ;;                  1    wreg      void 
 27047 ;; Registers used:
 27048 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 27049 ;; Tracked objects:
 27050 ;;		On entry : 0/0
 27051 ;;		On exit  : 0/0
 27052 ;;		Unchanged: 0/0
 27053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27054 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27057 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27058 ;;Total ram usage:        3 bytes
 27059 ;; Hardware stack levels used:    1
 27060 ;; Hardware stack levels required when called:    9
 27061 ;; This function calls:
 27062 ;;		_ADC_Calibrate
 27063 ;;		_ADC_ClockDivision
 27064 ;;		_ADC_ConversionTime
 27065 ;;		_ADC_SetChannel
 27066 ;;		_ADC_SetupIO
 27067 ;; This function is called by:
 27068 ;;		_init
 27069 ;;		_FunctInitADC
 27070 ;; This function uses a non-reentrant model
 27071 ;;
 27072                           
 27073                           	psect	text136
 27074  014F62                     __ptext136:
 27075                           	opt stack 0
 27076  014F62                     _ADC_Init:
 27077                           	opt stack 20
 27078                           
 27079                           ;ADC.c: 21: if(pInput==(void*)0)
 27080                           
 27081                           ;incstack = 0
 27082  014F62  0100               	movlb	0	; () banked
 27083  014F64  5164               	movf	ADC_Init@pInput& (0+255),w,b
 27084  014F66  0100               	movlb	0	; () banked
 27085  014F68  1165               	iorwf	(ADC_Init@pInput+1)& (0+255),w,b
 27086  014F6A  B4D8               	btfsc	status,2,c
 27087  014F6C  0012               	return	
 27088                           
 27089                           ; BSR set to: 0
 27090                           ;ADC.c: 25: lCurrent = pInput;
 27091                           
 27092                           ; BSR set to: 0
 27093                           
 27094                           ; BSR set to: 0
 27095                           ;ADC.c: 22: return;
 27096  014F6E  C064  F0DA         	movff	ADC_Init@pInput,_lCurrent
 27097  014F72  C065  F0DB         	movff	ADC_Init@pInput+1,_lCurrent+1
 27098                           
 27099                           ; BSR set to: 0
 27100                           ;ADC.c: 27: pInput->mChannel = pChannel;
 27101  014F76  C064  FFD9         	movff	ADC_Init@pInput,fsr2l
 27102  014F7A  C065  FFDA         	movff	ADC_Init@pInput+1,fsr2h
 27103  014F7E  C066  FFDF         	movff	ADC_Init@pChannel,indf2
 27104                           
 27105                           ;ADC.c: 28: pInput->mNext = (ADCPtr)0;
 27106  014F82  0100               	movlb	0	; () banked
 27107  014F84  EE20 F003          	lfsr	2,3
 27108  014F88  5164               	movf	ADC_Init@pInput& (0+255),w,b
 27109  014F8A  26D9               	addwf	fsr2l,f,c
 27110  014F8C  5165               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 27111  014F8E  22DA               	addwfc	fsr2h,f,c
 27112  014F90  0E00               	movlw	0
 27113  014F92  6EDE               	movwf	postinc2,c
 27114  014F94  0E00               	movlw	0
 27115  014F96  6EDD               	movwf	postdec2,c
 27116                           
 27117                           ;ADC.c: 29: pInput->mValue = 0;
 27118  014F98  0100               	movlb	0	; () banked
 27119  014F9A  EE20 F001          	lfsr	2,1
 27120  014F9E  5164               	movf	ADC_Init@pInput& (0+255),w,b
 27121  014FA0  26D9               	addwf	fsr2l,f,c
 27122  014FA2  5165               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 27123  014FA4  22DA               	addwfc	fsr2h,f,c
 27124  014FA6  0E00               	movlw	0
 27125  014FA8  6EDE               	movwf	postinc2,c
 27126  014FAA  0E00               	movlw	0
 27127  014FAC  6EDD               	movwf	postdec2,c
 27128                           
 27129                           ; BSR set to: 0
 27130                           ;ADC.c: 32: ADC_SetChannel(pChannel);
 27131  014FAE  0100               	movlb	0	; () banked
 27132  014FB0  5166               	movf	ADC_Init@pChannel& (0+255),w,b
 27133  014FB2  EC5D  F0B1         	call	_ADC_SetChannel
 27134                           
 27135                           ;ADC.c: 35: ADCON0bits.VCFG1 = 0;
 27136  014FB6  9EC2               	bcf	4034,7,c	;volatile
 27137                           
 27138                           ;ADC.c: 36: ADCON0bits.VCFG0 = 0;
 27139  014FB8  9CC2               	bcf	4034,6,c	;volatile
 27140                           
 27141                           ;ADC.c: 39: ADCON1bits.ADFM = 1;
 27142  014FBA  8EC1               	bsf	4033,7,c	;volatile
 27143                           
 27144                           ;ADC.c: 40: ADCON1bits.ADCAL = 1;
 27145  014FBC  8CC1               	bsf	4033,6,c	;volatile
 27146                           
 27147                           ;ADC.c: 43: ADC_ConversionTime(12);
 27148  014FBE  0E0C               	movlw	12
 27149  014FC0  EC72  F0AD         	call	_ADC_ConversionTime
 27150                           
 27151                           ;ADC.c: 47: ADC_ClockDivision(16);
 27152  014FC4  0E10               	movlw	16
 27153  014FC6  EC67  F0A6         	call	_ADC_ClockDivision
 27154                           
 27155                           ;ADC.c: 50: ADC_SetupIO(pChannel);
 27156  014FCA  0100               	movlb	0	; () banked
 27157  014FCC  5166               	movf	ADC_Init@pChannel& (0+255),w,b
 27158  014FCE  ECA6  F0AF         	call	_ADC_SetupIO
 27159                           
 27160                           ;ADC.c: 58: ADC_Initialised = 1;
 27161  014FD2  0E01               	movlw	1
 27162  014FD4  6E3C               	movwf	_ADC_Initialised,c
 27163                           
 27164                           ;ADC.c: 61: ADC_Calibrate();
 27165  014FD6  ECE2  F0B1         	call	_ADC_Calibrate	;wreg free
 27166  014FDA  0012               	return		;funcret
 27167  014FDC                     __end_of_ADC_Init:
 27168                           	opt stack 0
 27169                           tosu	equ	0xFFF
 27170                           tosh	equ	0xFFE
 27171                           tosl	equ	0xFFD
 27172                           pclath	equ	0xFFA
 27173                           tblptru	equ	0xFF8
 27174                           tblptrh	equ	0xFF7
 27175                           tblptrl	equ	0xFF6
 27176                           tablat	equ	0xFF5
 27177                           prodh	equ	0xFF4
 27178                           prodl	equ	0xFF3
 27179                           intcon	equ	0xFF2
 27180                           indf0	equ	0xFEF
 27181                           postinc0	equ	0xFEE
 27182                           fsr0h	equ	0xFEA
 27183                           fsr0l	equ	0xFE9
 27184                           wreg	equ	0xFE8
 27185                           indf1	equ	0xFE7
 27186                           postdec1	equ	0xFE5
 27187                           fsr1h	equ	0xFE2
 27188                           fsr1l	equ	0xFE1
 27189                           indf2	equ	0xFDF
 27190                           postinc2	equ	0xFDE
 27191                           postdec2	equ	0xFDD
 27192                           plusw2	equ	0xFDB
 27193                           fsr2h	equ	0xFDA
 27194                           fsr2l	equ	0xFD9
 27195                           status	equ	0xFD8
 27196                           
 27197 ;; *************** function _ADC_SetupIO *****************
 27198 ;; Defined at:
 27199 ;;		line 150 in file "Library/ADC.c"
 27200 ;; Parameters:    Size  Location     Type
 27201 ;;  pChannel        1    wreg     enum E6742
 27202 ;; Auto vars:     Size  Location     Type
 27203 ;;  pChannel        1    2[BANK0 ] enum E6742
 27204 ;;  MASK            1    3[BANK0 ] unsigned char 
 27205 ;; Return value:  Size  Location     Type
 27206 ;;                  1    wreg      void 
 27207 ;; Registers used:
 27208 ;;		wreg, status,2, status,0
 27209 ;; Tracked objects:
 27210 ;;		On entry : 0/0
 27211 ;;		On exit  : 0/0
 27212 ;;		Unchanged: 0/0
 27213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27215 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27216 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27217 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27218 ;;Total ram usage:        4 bytes
 27219 ;; Hardware stack levels used:    1
 27220 ;; Hardware stack levels required when called:    7
 27221 ;; This function calls:
 27222 ;;		Nothing
 27223 ;; This function is called by:
 27224 ;;		_ADC_Init
 27225 ;; This function uses a non-reentrant model
 27226 ;;
 27227                           
 27228                           	psect	text137
 27229  015F4C                     __ptext137:
 27230                           	opt stack 0
 27231  015F4C                     _ADC_SetupIO:
 27232                           	opt stack 21
 27233                           
 27234                           ;incstack = 0
 27235                           ;ADC_SetupIO@pChannel stored from wreg
 27236  015F4C  0100               	movlb	0	; () banked
 27237  015F4E  6F62               	movwf	ADC_SetupIO@pChannel& (0+255),b
 27238                           
 27239                           ;ADC.c: 152: UINT8 MASK = ~(1 << pChannel);
 27240  015F50  C062  F060         	movff	ADC_SetupIO@pChannel,??_ADC_SetupIO
 27241  015F54  0E01               	movlw	1
 27242  015F56  0100               	movlb	0	; () banked
 27243  015F58  6F61               	movwf	(??_ADC_SetupIO+1)& (0+255),b
 27244  015F5A  0100               	movlb	0	; () banked
 27245  015F5C  2B60               	incf	??_ADC_SetupIO& (0+255),f,b
 27246  015F5E  D003               	goto	u9994
 27247  015F60                     u9995:
 27248  015F60  0100               	movlb	0	; () banked
 27249  015F62  90D8               	bcf	status,0,c
 27250  015F64  3761               	rlcf	(??_ADC_SetupIO+1)& (0+255),f,b
 27251  015F66                     u9994:
 27252  015F66  0100               	movlb	0	; () banked
 27253  015F68  2F60               	decfsz	??_ADC_SetupIO& (0+255),f,b
 27254  015F6A  D7FA               	goto	u9995
 27255  015F6C  0100               	movlb	0	; () banked
 27256  015F6E  5161               	movf	(??_ADC_SetupIO+1)& (0+255),w,b
 27257  015F70  0AFF               	xorlw	255
 27258  015F72  0100               	movlb	0	; () banked
 27259  015F74  6F63               	movwf	ADC_SetupIO@MASK& (0+255),b
 27260                           
 27261                           ;ADC.c: 153: ANCON0 &= MASK;
 27262  015F76  0100               	movlb	0	; () banked
 27263  015F78  5163               	movf	ADC_SetupIO@MASK& (0+255),w,b
 27264  015F7A  16C1               	andwf	4033,f,c	;volatile
 27265                           
 27266                           ; BSR set to: 0
 27267  015F7C  0012               	return		;funcret
 27268  015F7E                     __end_of_ADC_SetupIO:
 27269                           	opt stack 0
 27270                           tosu	equ	0xFFF
 27271                           tosh	equ	0xFFE
 27272                           tosl	equ	0xFFD
 27273                           pclath	equ	0xFFA
 27274                           tblptru	equ	0xFF8
 27275                           tblptrh	equ	0xFF7
 27276                           tblptrl	equ	0xFF6
 27277                           tablat	equ	0xFF5
 27278                           prodh	equ	0xFF4
 27279                           prodl	equ	0xFF3
 27280                           intcon	equ	0xFF2
 27281                           indf0	equ	0xFEF
 27282                           postinc0	equ	0xFEE
 27283                           fsr0h	equ	0xFEA
 27284                           fsr0l	equ	0xFE9
 27285                           wreg	equ	0xFE8
 27286                           indf1	equ	0xFE7
 27287                           postdec1	equ	0xFE5
 27288                           fsr1h	equ	0xFE2
 27289                           fsr1l	equ	0xFE1
 27290                           indf2	equ	0xFDF
 27291                           postinc2	equ	0xFDE
 27292                           postdec2	equ	0xFDD
 27293                           plusw2	equ	0xFDB
 27294                           fsr2h	equ	0xFDA
 27295                           fsr2l	equ	0xFD9
 27296                           status	equ	0xFD8
 27297                           
 27298 ;; *************** function _ADC_SetChannel *****************
 27299 ;; Defined at:
 27300 ;;		line 155 in file "Library/ADC.c"
 27301 ;; Parameters:    Size  Location     Type
 27302 ;;  pChannel        1    wreg     enum E6742
 27303 ;; Auto vars:     Size  Location     Type
 27304 ;;  pChannel        1    1[BANK0 ] enum E6742
 27305 ;; Return value:  Size  Location     Type
 27306 ;;                  1    wreg      void 
 27307 ;; Registers used:
 27308 ;;		wreg, status,2, status,0
 27309 ;; Tracked objects:
 27310 ;;		On entry : 0/0
 27311 ;;		On exit  : 0/0
 27312 ;;		Unchanged: 0/0
 27313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27315 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27316 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27317 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27318 ;;Total ram usage:        2 bytes
 27319 ;; Hardware stack levels used:    1
 27320 ;; Hardware stack levels required when called:    7
 27321 ;; This function calls:
 27322 ;;		Nothing
 27323 ;; This function is called by:
 27324 ;;		_ADC_Init
 27325 ;;		_ADC_Start
 27326 ;;		_ADC_ISR
 27327 ;;		_ADC_Sample
 27328 ;; This function uses a non-reentrant model
 27329 ;;
 27330                           
 27331                           	psect	text138
 27332  0162BA                     __ptext138:
 27333                           	opt stack 0
 27334  0162BA                     _ADC_SetChannel:
 27335                           	opt stack 21
 27336                           
 27337                           ; BSR set to: 0
 27338                           ;incstack = 0
 27339                           ;ADC_SetChannel@pChannel stored from wreg
 27340  0162BA  0100               	movlb	0	; () banked
 27341  0162BC  6F61               	movwf	ADC_SetChannel@pChannel& (0+255),b
 27342                           
 27343                           ;ADC.c: 157: ADCON0bits.CHS = (UINT8)pChannel;
 27344  0162BE  C061  F060         	movff	ADC_SetChannel@pChannel,??_ADC_SetChannel
 27345  0162C2  0100               	movlb	0	; () banked
 27346  0162C4  4760               	rlncf	??_ADC_SetChannel& (0+255),f,b
 27347  0162C6  4760               	rlncf	??_ADC_SetChannel& (0+255),f,b
 27348  0162C8  50C2               	movf	4034,w,c	;volatile
 27349  0162CA  0100               	movlb	0	; () banked
 27350  0162CC  1960               	xorwf	??_ADC_SetChannel& (0+255),w,b
 27351  0162CE  0BC3               	andlw	-61
 27352  0162D0  1960               	xorwf	??_ADC_SetChannel& (0+255),w,b
 27353  0162D2  6EC2               	movwf	4034,c	;volatile
 27354                           
 27355                           ; BSR set to: 0
 27356  0162D4  0012               	return		;funcret
 27357  0162D6                     __end_of_ADC_SetChannel:
 27358                           	opt stack 0
 27359                           tosu	equ	0xFFF
 27360                           tosh	equ	0xFFE
 27361                           tosl	equ	0xFFD
 27362                           pclath	equ	0xFFA
 27363                           tblptru	equ	0xFF8
 27364                           tblptrh	equ	0xFF7
 27365                           tblptrl	equ	0xFF6
 27366                           tablat	equ	0xFF5
 27367                           prodh	equ	0xFF4
 27368                           prodl	equ	0xFF3
 27369                           intcon	equ	0xFF2
 27370                           indf0	equ	0xFEF
 27371                           postinc0	equ	0xFEE
 27372                           fsr0h	equ	0xFEA
 27373                           fsr0l	equ	0xFE9
 27374                           wreg	equ	0xFE8
 27375                           indf1	equ	0xFE7
 27376                           postdec1	equ	0xFE5
 27377                           fsr1h	equ	0xFE2
 27378                           fsr1l	equ	0xFE1
 27379                           indf2	equ	0xFDF
 27380                           postinc2	equ	0xFDE
 27381                           postdec2	equ	0xFDD
 27382                           plusw2	equ	0xFDB
 27383                           fsr2h	equ	0xFDA
 27384                           fsr2l	equ	0xFD9
 27385                           status	equ	0xFD8
 27386                           
 27387 ;; *************** function _ADC_ConversionTime *****************
 27388 ;; Defined at:
 27389 ;;		line 199 in file "Library/ADC.c"
 27390 ;; Parameters:    Size  Location     Type
 27391 ;;  pCount          1    wreg     unsigned char 
 27392 ;; Auto vars:     Size  Location     Type
 27393 ;;  pCount          1    1[BANK0 ] unsigned char 
 27394 ;; Return value:  Size  Location     Type
 27395 ;;                  1    wreg      void 
 27396 ;; Registers used:
 27397 ;;		wreg, status,2, status,0
 27398 ;; Tracked objects:
 27399 ;;		On entry : 0/0
 27400 ;;		On exit  : 0/0
 27401 ;;		Unchanged: 0/0
 27402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27404 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27405 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27406 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27407 ;;Total ram usage:        2 bytes
 27408 ;; Hardware stack levels used:    1
 27409 ;; Hardware stack levels required when called:    7
 27410 ;; This function calls:
 27411 ;;		Nothing
 27412 ;; This function is called by:
 27413 ;;		_ADC_Init
 27414 ;; This function uses a non-reentrant model
 27415 ;;
 27416                           
 27417                           	psect	text139
 27418  015AE4                     __ptext139:
 27419                           	opt stack 0
 27420  015AE4                     _ADC_ConversionTime:
 27421                           	opt stack 21
 27422                           
 27423                           ; BSR set to: 0
 27424                           ;incstack = 0
 27425                           ;ADC_ConversionTime@pCount stored from wreg
 27426  015AE4  0100               	movlb	0	; () banked
 27427  015AE6  6F61               	movwf	ADC_ConversionTime@pCount& (0+255),b
 27428                           
 27429                           ;ADC.c: 201: if (pCount == 10)
 27430  015AE8  0E0A               	movlw	10
 27431  015AEA  0100               	movlb	0	; () banked
 27432  015AEC  1961               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 27433  015AEE  B4D8               	btfsc	status,2,c
 27434  015AF0  D00A               	goto	u9960
 27435                           
 27436                           ; BSR set to: 0
 27437                           ;ADC.c: 203: else if (pCount == 14)
 27438                           
 27439                           ; BSR set to: 0
 27440                           
 27441                           ; BSR set to: 0
 27442                           ;ADC.c: 202: pCount -= 2;
 27443  015AF2  0E0E               	movlw	14
 27444  015AF4  0100               	movlb	0	; () banked
 27445  015AF6  1961               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 27446  015AF8  B4D8               	btfsc	status,2,c
 27447  015AFA  D005               	goto	u9960
 27448                           
 27449                           ; BSR set to: 0
 27450                           ;ADC.c: 205: else if (pCount == 18)
 27451                           
 27452                           ; BSR set to: 0
 27453                           
 27454                           ; BSR set to: 0
 27455                           ;ADC.c: 204: pCount -= 2;
 27456  015AFC  0E12               	movlw	18
 27457  015AFE  0100               	movlb	0	; () banked
 27458  015B00  1961               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 27459  015B02  A4D8               	btfss	status,2,c
 27460  015B04  D003               	goto	l1313
 27461  015B06                     u9960:
 27462                           
 27463                           ; BSR set to: 0
 27464                           ;ADC.c: 206: pCount -= 2;
 27465  015B06  0E02               	movlw	2
 27466  015B08  0100               	movlb	0	; () banked
 27467  015B0A  5F61               	subwf	ADC_ConversionTime@pCount& (0+255),f,b
 27468  015B0C                     l1313:
 27469                           
 27470                           ; BSR set to: 0
 27471                           ;ADC.c: 208: pCount <<= 1;
 27472                           
 27473                           ; BSR set to: 0
 27474                           
 27475                           ; BSR set to: 0
 27476  015B0C  0100               	movlb	0	; () banked
 27477  015B0E  90D8               	bcf	status,0,c
 27478  015B10  3761               	rlcf	ADC_ConversionTime@pCount& (0+255),f,b
 27479                           
 27480                           ;ADC.c: 209: ADCON1bits.ACQT = pCount;
 27481  015B12  C061  F060         	movff	ADC_ConversionTime@pCount,??_ADC_ConversionTime
 27482  015B16  0100               	movlb	0	; () banked
 27483  015B18  4760               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 27484  015B1A  4760               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 27485  015B1C  4760               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 27486  015B1E  50C1               	movf	4033,w,c	;volatile
 27487  015B20  0100               	movlb	0	; () banked
 27488  015B22  1960               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 27489  015B24  0BC7               	andlw	-57
 27490  015B26  1960               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 27491  015B28  6EC1               	movwf	4033,c	;volatile
 27492                           
 27493                           ; BSR set to: 0
 27494  015B2A  0012               	return		;funcret
 27495  015B2C                     __end_of_ADC_ConversionTime:
 27496                           	opt stack 0
 27497                           tosu	equ	0xFFF
 27498                           tosh	equ	0xFFE
 27499                           tosl	equ	0xFFD
 27500                           pclath	equ	0xFFA
 27501                           tblptru	equ	0xFF8
 27502                           tblptrh	equ	0xFF7
 27503                           tblptrl	equ	0xFF6
 27504                           tablat	equ	0xFF5
 27505                           prodh	equ	0xFF4
 27506                           prodl	equ	0xFF3
 27507                           intcon	equ	0xFF2
 27508                           indf0	equ	0xFEF
 27509                           postinc0	equ	0xFEE
 27510                           fsr0h	equ	0xFEA
 27511                           fsr0l	equ	0xFE9
 27512                           wreg	equ	0xFE8
 27513                           indf1	equ	0xFE7
 27514                           postdec1	equ	0xFE5
 27515                           fsr1h	equ	0xFE2
 27516                           fsr1l	equ	0xFE1
 27517                           indf2	equ	0xFDF
 27518                           postinc2	equ	0xFDE
 27519                           postdec2	equ	0xFDD
 27520                           plusw2	equ	0xFDB
 27521                           fsr2h	equ	0xFDA
 27522                           fsr2l	equ	0xFD9
 27523                           status	equ	0xFD8
 27524                           
 27525 ;; *************** function _ADC_ClockDivision *****************
 27526 ;; Defined at:
 27527 ;;		line 159 in file "Library/ADC.c"
 27528 ;; Parameters:    Size  Location     Type
 27529 ;;  pDivide         1    wreg     unsigned char 
 27530 ;; Auto vars:     Size  Location     Type
 27531 ;;  pDivide         1    0[BANK0 ] unsigned char 
 27532 ;;  unfound         1    2[BANK0 ] unsigned char 
 27533 ;;  reg             1    1[BANK0 ] unsigned char 
 27534 ;; Return value:  Size  Location     Type
 27535 ;;                  1    wreg      void 
 27536 ;; Registers used:
 27537 ;;		wreg, status,2, status,0
 27538 ;; Tracked objects:
 27539 ;;		On entry : 0/0
 27540 ;;		On exit  : 0/0
 27541 ;;		Unchanged: 0/0
 27542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27544 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27546 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27547 ;;Total ram usage:        3 bytes
 27548 ;; Hardware stack levels used:    1
 27549 ;; Hardware stack levels required when called:    7
 27550 ;; This function calls:
 27551 ;;		Nothing
 27552 ;; This function is called by:
 27553 ;;		_ADC_Init
 27554 ;; This function uses a non-reentrant model
 27555 ;;
 27556                           
 27557                           	psect	text140
 27558  014CCE                     __ptext140:
 27559                           	opt stack 0
 27560  014CCE                     _ADC_ClockDivision:
 27561                           	opt stack 21
 27562                           
 27563                           ; BSR set to: 0
 27564                           ;incstack = 0
 27565                           ;ADC_ClockDivision@pDivide stored from wreg
 27566  014CCE  0100               	movlb	0	; () banked
 27567  014CD0  6F60               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 27568                           
 27569                           ;ADC.c: 161: UINT8 reg = 0;
 27570  014CD2  0E00               	movlw	0
 27571  014CD4  0100               	movlb	0	; () banked
 27572  014CD6  6F61               	movwf	ADC_ClockDivision@reg& (0+255),b
 27573                           
 27574                           ;ADC.c: 162: bool unfound = 1;
 27575  014CD8  0E01               	movlw	1
 27576  014CDA  D002               	goto	L15
 27577  014CDC                     
 27578                           ; BSR set to: 0
 27579                           ;ADC.c: 167: reg = 0;
 27580                           
 27581                           ; BSR set to: 0
 27582  014CDC  0E00               	movlw	0
 27583  014CDE  D00C               	goto	L20
 27584  014CE0                     L15:
 27585  014CE0  0100               	movlb	0	; () banked
 27586  014CE2  6F62               	movwf	ADC_ClockDivision@unfound& (0+255),b
 27587                           
 27588                           ;ADC.c: 169: break;
 27589  014CE4  D02D               	goto	l1296
 27590  014CE6                     
 27591                           ; BSR set to: 0
 27592                           ;ADC.c: 171: reg = 0b100;
 27593                           
 27594                           ; BSR set to: 0
 27595  014CE6  0E04               	movlw	4
 27596  014CE8  D007               	goto	L20
 27597  014CEA                     
 27598                           ; BSR set to: 0
 27599                           ;ADC.c: 175: reg = 0b001;
 27600                           
 27601                           ; BSR set to: 0
 27602  014CEA  0E01               	movlw	1
 27603  014CEC  D005               	goto	L20
 27604  014CEE                     
 27605                           ; BSR set to: 0
 27606                           ;ADC.c: 179: reg = 0b101;
 27607                           
 27608                           ; BSR set to: 0
 27609  014CEE  0E05               	movlw	5
 27610  014CF0  D003               	goto	L20
 27611  014CF2                     
 27612                           ; BSR set to: 0
 27613                           ;ADC.c: 183: reg = 0b010;
 27614                           
 27615                           ; BSR set to: 0
 27616  014CF2  0E02               	movlw	2
 27617  014CF4  D001               	goto	L20
 27618  014CF6                     
 27619                           ; BSR set to: 0
 27620                           ;ADC.c: 187: reg = 0b110;
 27621                           
 27622                           ; BSR set to: 0
 27623  014CF6  0E06               	movlw	6
 27624  014CF8                     L20:
 27625  014CF8  0100               	movlb	0	; () banked
 27626  014CFA  6F61               	movwf	ADC_ClockDivision@reg& (0+255),b
 27627                           
 27628                           ;ADC.c: 188: unfound = 0;
 27629  014CFC  0E00               	movlw	0
 27630  014CFE  D7F0               	goto	L15
 27631  014D00                     
 27632                           ; BSR set to: 0
 27633                           ;ADC.c: 191: if (pDivide > 2)
 27634                           
 27635                           ; BSR set to: 0
 27636  014D00  0E02               	movlw	2
 27637  014D02  0100               	movlb	0	; () banked
 27638  014D04  6560               	cpfsgt	ADC_ClockDivision@pDivide& (0+255),b
 27639  014D06  D003               	goto	l1303
 27640                           
 27641                           ; BSR set to: 0
 27642                           ;ADC.c: 192: pDivide --;
 27643  014D08  0100               	movlb	0	; () banked
 27644  014D0A  0760               	decf	ADC_ClockDivision@pDivide& (0+255),f,b
 27645  014D0C  D019               	goto	l1296
 27646  014D0E                     l1303:
 27647                           
 27648                           ; BSR set to: 0
 27649                           ;ADC.c: 193: else
 27650                           ;ADC.c: 194: pDivide = 2;
 27651                           
 27652                           ; BSR set to: 0
 27653  014D0E  0E02               	movlw	2
 27654  014D10  0100               	movlb	0	; () banked
 27655  014D12  6F60               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 27656                           
 27657                           ; BSR set to: 0
 27658                           ;ADC.c: 195: };
 27659  014D14  D015               	goto	l1296
 27660  014D16                     
 27661                           ; BSR set to: 0
 27662                           
 27663                           ; BSR set to: 0
 27664  014D16  0100               	movlb	0	; () banked
 27665  014D18  5160               	movf	ADC_ClockDivision@pDivide& (0+255),w,b
 27666                           
 27667                           ; Switch size 1, requested type "space"
 27668                           ; Number of cases is 6, Range of values is 2 to 64
 27669                           ; switch strategies available:
 27670                           ; Name         Instructions Cycles
 27671                           ; simple_byte           19    10 (average)
 27672                           ;	Chosen strategy is simple_byte
 27673  014D1A  0A02               	xorlw	2	; case 2
 27674  014D1C  B4D8               	btfsc	status,2,c
 27675  014D1E  D7DE               	goto	l1295
 27676  014D20  0A06               	xorlw	6	; case 4
 27677  014D22  B4D8               	btfsc	status,2,c
 27678  014D24  D7E0               	goto	l1297
 27679  014D26  0A0C               	xorlw	12	; case 8
 27680  014D28  B4D8               	btfsc	status,2,c
 27681  014D2A  D7DF               	goto	l1298
 27682  014D2C  0A18               	xorlw	24	; case 16
 27683  014D2E  B4D8               	btfsc	status,2,c
 27684  014D30  D7DE               	goto	l1299
 27685  014D32  0A30               	xorlw	48	; case 32
 27686  014D34  B4D8               	btfsc	status,2,c
 27687  014D36  D7DD               	goto	l1300
 27688  014D38  0A60               	xorlw	96	; case 64
 27689  014D3A  B4D8               	btfsc	status,2,c
 27690  014D3C  D7DC               	goto	l1301
 27691  014D3E  D7E0               	goto	l1302
 27692  014D40                     l1296:
 27693                           
 27694                           ; BSR set to: 0
 27695                           
 27696                           ; BSR set to: 0
 27697                           
 27698                           ; BSR set to: 0
 27699  014D40  0100               	movlb	0	; () banked
 27700  014D42  5162               	movf	ADC_ClockDivision@unfound& (0+255),w,b
 27701  014D44  0100               	movlb	0	; () banked
 27702  014D46  A4D8               	btfss	status,2,c
 27703  014D48  D7E6               	goto	l1294
 27704                           
 27705                           ; BSR set to: 0
 27706                           ;ADC.c: 197: ADCON1bits.ADCS = reg;
 27707                           
 27708                           ; BSR set to: 0
 27709  014D4A  50C1               	movf	4033,w,c	;volatile
 27710  014D4C  0100               	movlb	0	; () banked
 27711  014D4E  1961               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 27712  014D50  0BF8               	andlw	-8
 27713  014D52  1961               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 27714  014D54  6EC1               	movwf	4033,c	;volatile
 27715                           
 27716                           ; BSR set to: 0
 27717  014D56  0012               	return		;funcret
 27718  014D58                     __end_of_ADC_ClockDivision:
 27719                           	opt stack 0
 27720                           tosu	equ	0xFFF
 27721                           tosh	equ	0xFFE
 27722                           tosl	equ	0xFFD
 27723                           pclath	equ	0xFFA
 27724                           tblptru	equ	0xFF8
 27725                           tblptrh	equ	0xFF7
 27726                           tblptrl	equ	0xFF6
 27727                           tablat	equ	0xFF5
 27728                           prodh	equ	0xFF4
 27729                           prodl	equ	0xFF3
 27730                           intcon	equ	0xFF2
 27731                           indf0	equ	0xFEF
 27732                           postinc0	equ	0xFEE
 27733                           fsr0h	equ	0xFEA
 27734                           fsr0l	equ	0xFE9
 27735                           wreg	equ	0xFE8
 27736                           indf1	equ	0xFE7
 27737                           postdec1	equ	0xFE5
 27738                           fsr1h	equ	0xFE2
 27739                           fsr1l	equ	0xFE1
 27740                           indf2	equ	0xFDF
 27741                           postinc2	equ	0xFDE
 27742                           postdec2	equ	0xFDD
 27743                           plusw2	equ	0xFDB
 27744                           fsr2h	equ	0xFDA
 27745                           fsr2l	equ	0xFD9
 27746                           status	equ	0xFD8
 27747                           
 27748 ;; *************** function _ADC_Calibrate *****************
 27749 ;; Defined at:
 27750 ;;		line 63 in file "Library/ADC.c"
 27751 ;; Parameters:    Size  Location     Type
 27752 ;;		None
 27753 ;; Auto vars:     Size  Location     Type
 27754 ;;		None
 27755 ;; Return value:  Size  Location     Type
 27756 ;;                  1    wreg      void 
 27757 ;; Registers used:
 27758 ;;		cstack
 27759 ;; Tracked objects:
 27760 ;;		On entry : 0/0
 27761 ;;		On exit  : 0/0
 27762 ;;		Unchanged: 0/0
 27763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27767 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27768 ;;Total ram usage:        0 bytes
 27769 ;; Hardware stack levels used:    1
 27770 ;; Hardware stack levels required when called:    8
 27771 ;; This function calls:
 27772 ;;		_ADC_Off
 27773 ;;		_ADC_On
 27774 ;; This function is called by:
 27775 ;;		_ADC_Init
 27776 ;; This function uses a non-reentrant model
 27777 ;;
 27778                           
 27779                           	psect	text141
 27780  0163C4                     __ptext141:
 27781                           	opt stack 0
 27782  0163C4                     _ADC_Calibrate:
 27783                           	opt stack 20
 27784                           
 27785                           ;ADC.c: 65: ADC_On();
 27786                           
 27787                           ; BSR set to: 0
 27788                           ;incstack = 0
 27789  0163C4  EC71  F0B2         	call	_ADC_On	;wreg free
 27790                           
 27791                           ;ADC.c: 67: ADCON1bits.ADCAL = 1;
 27792  0163C8  8CC1               	bsf	4033,6,c	;volatile
 27793                           
 27794                           ;ADC.c: 69: (ADCON0bits.GO) = 1;
 27795  0163CA  82C2               	bsf	4034,1,c	;volatile
 27796  0163CC  B2C2               	btfsc	4034,1,c	;volatile
 27797  0163CE  D7FE               	goto	l1254
 27798                           
 27799                           ;ADC.c: 71: ADCON1bits.ADCAL = 0;
 27800  0163D0  9CC1               	bcf	4033,6,c	;volatile
 27801                           
 27802                           ;ADC.c: 73: ADC_Off();
 27803  0163D2  EC60  F0B2         	call	_ADC_Off	;wreg free
 27804  0163D6  0012               	return		;funcret
 27805  0163D8                     __end_of_ADC_Calibrate:
 27806                           	opt stack 0
 27807                           tosu	equ	0xFFF
 27808                           tosh	equ	0xFFE
 27809                           tosl	equ	0xFFD
 27810                           pclath	equ	0xFFA
 27811                           tblptru	equ	0xFF8
 27812                           tblptrh	equ	0xFF7
 27813                           tblptrl	equ	0xFF6
 27814                           tablat	equ	0xFF5
 27815                           prodh	equ	0xFF4
 27816                           prodl	equ	0xFF3
 27817                           intcon	equ	0xFF2
 27818                           indf0	equ	0xFEF
 27819                           postinc0	equ	0xFEE
 27820                           fsr0h	equ	0xFEA
 27821                           fsr0l	equ	0xFE9
 27822                           wreg	equ	0xFE8
 27823                           indf1	equ	0xFE7
 27824                           postdec1	equ	0xFE5
 27825                           fsr1h	equ	0xFE2
 27826                           fsr1l	equ	0xFE1
 27827                           indf2	equ	0xFDF
 27828                           postinc2	equ	0xFDE
 27829                           postdec2	equ	0xFDD
 27830                           plusw2	equ	0xFDB
 27831                           fsr2h	equ	0xFDA
 27832                           fsr2l	equ	0xFD9
 27833                           status	equ	0xFD8
 27834                           
 27835 ;; *************** function _ADC_On *****************
 27836 ;; Defined at:
 27837 ;;		line 85 in file "Library/ADC.c"
 27838 ;; Parameters:    Size  Location     Type
 27839 ;;		None
 27840 ;; Auto vars:     Size  Location     Type
 27841 ;;		None
 27842 ;; Return value:  Size  Location     Type
 27843 ;;                  1    wreg      void 
 27844 ;; Registers used:
 27845 ;;		None
 27846 ;; Tracked objects:
 27847 ;;		On entry : 0/0
 27848 ;;		On exit  : 0/0
 27849 ;;		Unchanged: 0/0
 27850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27854 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27855 ;;Total ram usage:        0 bytes
 27856 ;; Hardware stack levels used:    1
 27857 ;; Hardware stack levels required when called:    7
 27858 ;; This function calls:
 27859 ;;		Nothing
 27860 ;; This function is called by:
 27861 ;;		_ADC_Calibrate
 27862 ;;		_ADC_Start
 27863 ;;		_ADC_ISR
 27864 ;;		_ADC_Sample
 27865 ;; This function uses a non-reentrant model
 27866 ;;
 27867                           
 27868                           	psect	text142
 27869  0164E2                     __ptext142:
 27870                           	opt stack 0
 27871  0164E2                     _ADC_On:
 27872                           	opt stack 21
 27873                           
 27874                           ;ADC.c: 87: ADCON0bits.ADON = 1;
 27875                           
 27876                           ;incstack = 0
 27877  0164E2  80C2               	bsf	4034,0,c	;volatile
 27878                           
 27879                           ;ADC.c: 88: PIR1bits.ADIF = 0;
 27880  0164E4  9C9E               	bcf	3998,6,c	;volatile
 27881  0164E6  0012               	return		;funcret
 27882  0164E8                     __end_of_ADC_On:
 27883                           	opt stack 0
 27884                           tosu	equ	0xFFF
 27885                           tosh	equ	0xFFE
 27886                           tosl	equ	0xFFD
 27887                           pclath	equ	0xFFA
 27888                           tblptru	equ	0xFF8
 27889                           tblptrh	equ	0xFF7
 27890                           tblptrl	equ	0xFF6
 27891                           tablat	equ	0xFF5
 27892                           prodh	equ	0xFF4
 27893                           prodl	equ	0xFF3
 27894                           intcon	equ	0xFF2
 27895                           indf0	equ	0xFEF
 27896                           postinc0	equ	0xFEE
 27897                           fsr0h	equ	0xFEA
 27898                           fsr0l	equ	0xFE9
 27899                           wreg	equ	0xFE8
 27900                           indf1	equ	0xFE7
 27901                           postdec1	equ	0xFE5
 27902                           fsr1h	equ	0xFE2
 27903                           fsr1l	equ	0xFE1
 27904                           indf2	equ	0xFDF
 27905                           postinc2	equ	0xFDE
 27906                           postdec2	equ	0xFDD
 27907                           plusw2	equ	0xFDB
 27908                           fsr2h	equ	0xFDA
 27909                           fsr2l	equ	0xFD9
 27910                           status	equ	0xFD8
 27911                           
 27912 ;; *************** function _ADC_Off *****************
 27913 ;; Defined at:
 27914 ;;		line 94 in file "Library/ADC.c"
 27915 ;; Parameters:    Size  Location     Type
 27916 ;;		None
 27917 ;; Auto vars:     Size  Location     Type
 27918 ;;		None
 27919 ;; Return value:  Size  Location     Type
 27920 ;;                  1    wreg      void 
 27921 ;; Registers used:
 27922 ;;		None
 27923 ;; Tracked objects:
 27924 ;;		On entry : 0/0
 27925 ;;		On exit  : 0/0
 27926 ;;		Unchanged: 0/0
 27927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27931 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27932 ;;Total ram usage:        0 bytes
 27933 ;; Hardware stack levels used:    1
 27934 ;; Hardware stack levels required when called:    7
 27935 ;; This function calls:
 27936 ;;		Nothing
 27937 ;; This function is called by:
 27938 ;;		_ADC_Calibrate
 27939 ;;		_ADC_Start
 27940 ;;		_ADC_ISR
 27941 ;;		_ADC_Sample
 27942 ;; This function uses a non-reentrant model
 27943 ;;
 27944                           
 27945                           	psect	text143
 27946  0164C0                     __ptext143:
 27947                           	opt stack 0
 27948  0164C0                     _ADC_Off:
 27949                           	opt stack 21
 27950                           
 27951                           ;ADC.c: 96: ADCON0bits.ADON = 0;
 27952                           
 27953                           ;incstack = 0
 27954  0164C0  90C2               	bcf	4034,0,c	;volatile
 27955                           
 27956                           ;ADC.c: 97: PIR1bits.ADIF = 0;
 27957  0164C2  9C9E               	bcf	3998,6,c	;volatile
 27958                           
 27959                           ;ADC.c: 98: PIE1bits.ADIE = 0;
 27960  0164C4  9C9D               	bcf	3997,6,c	;volatile
 27961  0164C6  0012               	return		;funcret
 27962  0164C8                     __end_of_ADC_Off:
 27963                           	opt stack 0
 27964                           tosu	equ	0xFFF
 27965                           tosh	equ	0xFFE
 27966                           tosl	equ	0xFFD
 27967                           pclath	equ	0xFFA
 27968                           tblptru	equ	0xFF8
 27969                           tblptrh	equ	0xFF7
 27970                           tblptrl	equ	0xFF6
 27971                           tablat	equ	0xFF5
 27972                           prodh	equ	0xFF4
 27973                           prodl	equ	0xFF3
 27974                           intcon	equ	0xFF2
 27975                           indf0	equ	0xFEF
 27976                           postinc0	equ	0xFEE
 27977                           fsr0h	equ	0xFEA
 27978                           fsr0l	equ	0xFE9
 27979                           wreg	equ	0xFE8
 27980                           indf1	equ	0xFE7
 27981                           postdec1	equ	0xFE5
 27982                           fsr1h	equ	0xFE2
 27983                           fsr1l	equ	0xFE1
 27984                           indf2	equ	0xFDF
 27985                           postinc2	equ	0xFDE
 27986                           postdec2	equ	0xFDD
 27987                           plusw2	equ	0xFDB
 27988                           fsr2h	equ	0xFDA
 27989                           fsr2l	equ	0xFD9
 27990                           status	equ	0xFD8
 27991                           
 27992 ;; *************** function _getMode *****************
 27993 ;; Defined at:
 27994 ;;		line 104 in file "main.c"
 27995 ;; Parameters:    Size  Location     Type
 27996 ;;		None
 27997 ;; Auto vars:     Size  Location     Type
 27998 ;;		None
 27999 ;; Return value:  Size  Location     Type
 28000 ;;                  1    wreg      void 
 28001 ;; Registers used:
 28002 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 28003 ;; Tracked objects:
 28004 ;;		On entry : 0/0
 28005 ;;		On exit  : 0/0
 28006 ;;		Unchanged: 0/0
 28007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28010 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28011 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28012 ;;Total ram usage:        2 bytes
 28013 ;; Hardware stack levels used:    1
 28014 ;; Hardware stack levels required when called:    9
 28015 ;; This function calls:
 28016 ;;		_HMI_DIPSwitch
 28017 ;;		_HMI_DownSwitch
 28018 ;;		_HMI_LeftSwitch
 28019 ;;		_HMI_RightSwitch
 28020 ;;		_HMI_UpSwitch
 28021 ;;		_MXK_DIPSwitch
 28022 ;;		_MXK_TestButton
 28023 ;; This function is called by:
 28024 ;;		_main
 28025 ;; This function uses a non-reentrant model
 28026 ;;
 28027                           
 28028                           	psect	text144
 28029  01354E                     __ptext144:
 28030                           	opt stack 0
 28031  01354E                     _getMode:
 28032                           	opt stack 21
 28033                           
 28034                           ;main.c: 106: selectedMode1 = HMIBoard.mUp.mGetState();
 28035                           
 28036                           ;incstack = 0
 28037  01354E  EE23  F04B         	lfsr	2,_HMIBoard+35
 28038  013552  D801               	call	u11458
 28039  013554  D00A               	goto	u11459
 28040  013556                     u11458:
 28041  013556  0005               	push	
 28042  013558  6EFA               	movwf	pclath,c
 28043  01355A  50DE               	movf	postinc2,w,c
 28044  01355C  6EFD               	movwf	tosl,c
 28045  01355E  50DE               	movf	postinc2,w,c
 28046  013560  6EFE               	movwf	tosh,c
 28047  013562  50DE               	movf	postinc2,w,c
 28048  013564  6EFF               	movwf	tosu,c
 28049  013566  50FA               	movf	pclath,w,c
 28050  013568  0012               	return		;indir
 28051  01356A                     u11459:
 28052  01356A  0100               	movlb	0	; () banked
 28053  01356C  6F66               	movwf	??_getMode& (0+255),b
 28054  01356E  0100               	movlb	0	; () banked
 28055  013570  5166               	movf	??_getMode& (0+255),w,b
 28056  013572  0100               	movlb	0	; () banked
 28057  013574  6FCE               	movwf	_selectedMode1& (0+255),b
 28058  013576  6BCF               	clrf	(_selectedMode1+1)& (0+255),b
 28059                           
 28060                           ;main.c: 107: selectedMode2 = HMIBoard.mRight.mGetState();
 28061  013578  EE23  F037         	lfsr	2,_HMIBoard+15
 28062  01357C  D801               	call	u11468
 28063  01357E  D00A               	goto	u11469
 28064  013580                     u11468:
 28065  013580  0005               	push	
 28066  013582  6EFA               	movwf	pclath,c
 28067  013584  50DE               	movf	postinc2,w,c
 28068  013586  6EFD               	movwf	tosl,c
 28069  013588  50DE               	movf	postinc2,w,c
 28070  01358A  6EFE               	movwf	tosh,c
 28071  01358C  50DE               	movf	postinc2,w,c
 28072  01358E  6EFF               	movwf	tosu,c
 28073  013590  50FA               	movf	pclath,w,c
 28074  013592  0012               	return		;indir
 28075  013594                     u11469:
 28076  013594  0100               	movlb	0	; () banked
 28077  013596  6F66               	movwf	??_getMode& (0+255),b
 28078  013598  0100               	movlb	0	; () banked
 28079  01359A  5166               	movf	??_getMode& (0+255),w,b
 28080  01359C  0100               	movlb	0	; () banked
 28081  01359E  6FCC               	movwf	_selectedMode2& (0+255),b
 28082  0135A0  6BCD               	clrf	(_selectedMode2+1)& (0+255),b
 28083                           
 28084                           ;main.c: 108: selectedMode3 = HMIBoard.mDown.mGetState();
 28085  0135A2  EE23  F055         	lfsr	2,_HMIBoard+45
 28086  0135A6  D801               	call	u11478
 28087  0135A8  D00A               	goto	u11479
 28088  0135AA                     u11478:
 28089  0135AA  0005               	push	
 28090  0135AC  6EFA               	movwf	pclath,c
 28091  0135AE  50DE               	movf	postinc2,w,c
 28092  0135B0  6EFD               	movwf	tosl,c
 28093  0135B2  50DE               	movf	postinc2,w,c
 28094  0135B4  6EFE               	movwf	tosh,c
 28095  0135B6  50DE               	movf	postinc2,w,c
 28096  0135B8  6EFF               	movwf	tosu,c
 28097  0135BA  50FA               	movf	pclath,w,c
 28098  0135BC  0012               	return		;indir
 28099  0135BE                     u11479:
 28100  0135BE  0100               	movlb	0	; () banked
 28101  0135C0  6F66               	movwf	??_getMode& (0+255),b
 28102  0135C2  0100               	movlb	0	; () banked
 28103  0135C4  5166               	movf	??_getMode& (0+255),w,b
 28104  0135C6  0100               	movlb	0	; () banked
 28105  0135C8  6FCA               	movwf	_selectedMode3& (0+255),b
 28106  0135CA  6BCB               	clrf	(_selectedMode3+1)& (0+255),b
 28107                           
 28108                           ;main.c: 109: selectedMode4 = HMIBoard.mLeft.mGetState();
 28109  0135CC  EE23  F041         	lfsr	2,_HMIBoard+25
 28110  0135D0  D801               	call	u11488
 28111  0135D2  D00A               	goto	u11489
 28112  0135D4                     u11488:
 28113  0135D4  0005               	push	
 28114  0135D6  6EFA               	movwf	pclath,c
 28115  0135D8  50DE               	movf	postinc2,w,c
 28116  0135DA  6EFD               	movwf	tosl,c
 28117  0135DC  50DE               	movf	postinc2,w,c
 28118  0135DE  6EFE               	movwf	tosh,c
 28119  0135E0  50DE               	movf	postinc2,w,c
 28120  0135E2  6EFF               	movwf	tosu,c
 28121  0135E4  50FA               	movf	pclath,w,c
 28122  0135E6  0012               	return		;indir
 28123  0135E8                     u11489:
 28124  0135E8  0100               	movlb	0	; () banked
 28125  0135EA  6F66               	movwf	??_getMode& (0+255),b
 28126  0135EC  0100               	movlb	0	; () banked
 28127  0135EE  5166               	movf	??_getMode& (0+255),w,b
 28128  0135F0  0100               	movlb	0	; () banked
 28129  0135F2  6FC8               	movwf	_selectedMode4& (0+255),b
 28130  0135F4  6BC9               	clrf	(_selectedMode4+1)& (0+255),b
 28131                           
 28132                           ; BSR set to: 0
 28133                           ;main.c: 111: if((selectedMode1 + selectedMode2 + selectedMode3 + selectedMode4) != 1) {
 28134  0135F6  0100               	movlb	0	; () banked
 28135  0135F8  51CC               	movf	_selectedMode2& (0+255),w,b
 28136  0135FA  0100               	movlb	0	; () banked
 28137  0135FC  25CE               	addwf	_selectedMode1& (0+255),w,b
 28138  0135FE  0100               	movlb	0	; () banked
 28139  013600  6F66               	movwf	??_getMode& (0+255),b
 28140  013602  0100               	movlb	0	; () banked
 28141  013604  51CD               	movf	(_selectedMode2+1)& (0+255),w,b
 28142  013606  0100               	movlb	0	; () banked
 28143  013608  21CF               	addwfc	(_selectedMode1+1)& (0+255),w,b
 28144  01360A  0100               	movlb	0	; () banked
 28145  01360C  6F67               	movwf	(??_getMode+1)& (0+255),b
 28146  01360E  0100               	movlb	0	; () banked
 28147  013610  51CA               	movf	_selectedMode3& (0+255),w,b
 28148  013612  0100               	movlb	0	; () banked
 28149  013614  2766               	addwf	??_getMode& (0+255),f,b
 28150  013616  0100               	movlb	0	; () banked
 28151  013618  51CB               	movf	(_selectedMode3+1)& (0+255),w,b
 28152  01361A  0100               	movlb	0	; () banked
 28153  01361C  2367               	addwfc	(??_getMode+1)& (0+255),f,b
 28154  01361E  0100               	movlb	0	; () banked
 28155  013620  51C8               	movf	_selectedMode4& (0+255),w,b
 28156  013622  0100               	movlb	0	; () banked
 28157  013624  2766               	addwf	??_getMode& (0+255),f,b
 28158  013626  0100               	movlb	0	; () banked
 28159  013628  51C9               	movf	(_selectedMode4+1)& (0+255),w,b
 28160  01362A  0100               	movlb	0	; () banked
 28161  01362C  2367               	addwfc	(??_getMode+1)& (0+255),f,b
 28162  01362E  0100               	movlb	0	; () banked
 28163  013630  0566               	decf	??_getMode& (0+255),w,b
 28164  013632  0100               	movlb	0	; () banked
 28165  013634  1167               	iorwf	(??_getMode+1)& (0+255),w,b
 28166  013636  B4D8               	btfsc	status,2,c
 28167  013638  D006               	goto	l2306
 28168                           
 28169                           ; BSR set to: 0
 28170                           ;main.c: 112: mode = 0;
 28171  01363A  0E00               	movlw	0
 28172  01363C  0103               	movlb	3	; () banked
 28173  01363E  6F21               	movwf	(_mode+1)& (0+255),b
 28174  013640  0E00               	movlw	0
 28175  013642  6F20               	movwf	_mode& (0+255),b
 28176                           
 28177                           ;main.c: 113: }
 28178  013644  0012               	return	
 28179  013646                     l2306:
 28180                           
 28181                           ;main.c: 115: else if (selectedMode1 == 1) {
 28182                           
 28183                           ; BSR set to: 3
 28184  013646  0100               	movlb	0	; () banked
 28185  013648  05CE               	decf	_selectedMode1& (0+255),w,b
 28186  01364A  0100               	movlb	0	; () banked
 28187  01364C  11CF               	iorwf	(_selectedMode1+1)& (0+255),w,b
 28188  01364E  A4D8               	btfss	status,2,c
 28189  013650  D006               	goto	l2308
 28190                           
 28191                           ; BSR set to: 0
 28192                           ;main.c: 116: mode = 1;
 28193  013652  0E00               	movlw	0
 28194  013654  0103               	movlb	3	; () banked
 28195  013656  6F21               	movwf	(_mode+1)& (0+255),b
 28196  013658  0E01               	movlw	1
 28197  01365A  6F20               	movwf	_mode& (0+255),b
 28198                           
 28199                           ;main.c: 117: }
 28200  01365C  0012               	return	
 28201  01365E                     l2308:
 28202                           
 28203                           ;main.c: 118: else if (selectedMode2 == 1) {
 28204                           
 28205                           ; BSR set to: 3
 28206  01365E  0100               	movlb	0	; () banked
 28207  013660  05CC               	decf	_selectedMode2& (0+255),w,b
 28208  013662  0100               	movlb	0	; () banked
 28209  013664  11CD               	iorwf	(_selectedMode2+1)& (0+255),w,b
 28210  013666  A4D8               	btfss	status,2,c
 28211  013668  D006               	goto	l2310
 28212                           
 28213                           ; BSR set to: 0
 28214                           ;main.c: 119: mode = 2;
 28215  01366A  0E00               	movlw	0
 28216  01366C  0103               	movlb	3	; () banked
 28217  01366E  6F21               	movwf	(_mode+1)& (0+255),b
 28218  013670  0E02               	movlw	2
 28219  013672  6F20               	movwf	_mode& (0+255),b
 28220                           
 28221                           ;main.c: 120: }
 28222  013674  0012               	return	
 28223  013676                     l2310:
 28224                           
 28225                           ;main.c: 121: else if (selectedMode3 == 1) {
 28226                           
 28227                           ; BSR set to: 3
 28228  013676  0100               	movlb	0	; () banked
 28229  013678  05CA               	decf	_selectedMode3& (0+255),w,b
 28230  01367A  0100               	movlb	0	; () banked
 28231  01367C  11CB               	iorwf	(_selectedMode3+1)& (0+255),w,b
 28232  01367E  A4D8               	btfss	status,2,c
 28233  013680  D006               	goto	l2312
 28234                           
 28235                           ; BSR set to: 0
 28236                           ;main.c: 122: mode = 3;
 28237  013682  0E00               	movlw	0
 28238  013684  0103               	movlb	3	; () banked
 28239  013686  6F21               	movwf	(_mode+1)& (0+255),b
 28240  013688  0E03               	movlw	3
 28241  01368A  6F20               	movwf	_mode& (0+255),b
 28242                           
 28243                           ;main.c: 123: }
 28244  01368C  0012               	return	
 28245  01368E                     l2312:
 28246                           
 28247                           ;main.c: 124: else if (selectedMode4 == 1) {
 28248                           
 28249                           ; BSR set to: 3
 28250  01368E  0100               	movlb	0	; () banked
 28251  013690  05C8               	decf	_selectedMode4& (0+255),w,b
 28252  013692  0100               	movlb	0	; () banked
 28253  013694  11C9               	iorwf	(_selectedMode4+1)& (0+255),w,b
 28254  013696  A4D8               	btfss	status,2,c
 28255  013698  0012               	return	
 28256                           
 28257                           ; BSR set to: 0
 28258                           ;main.c: 125: mode = 4;
 28259  01369A  0E00               	movlw	0
 28260  01369C  0103               	movlb	3	; () banked
 28261  01369E  6F21               	movwf	(_mode+1)& (0+255),b
 28262  0136A0  0E04               	movlw	4
 28263  0136A2  6F20               	movwf	_mode& (0+255),b
 28264                           
 28265                           ; BSR set to: 3
 28266                           
 28267                           ; BSR set to: 3
 28268                           
 28269                           ; BSR set to: 3
 28270                           
 28271                           ; BSR set to: 3
 28272  0136A4  0012               	return	
 28273  0136A6                     __end_of_getMode:
 28274                           	opt stack 0
 28275                           tosu	equ	0xFFF
 28276                           tosh	equ	0xFFE
 28277                           tosl	equ	0xFFD
 28278                           pclath	equ	0xFFA
 28279                           tblptru	equ	0xFF8
 28280                           tblptrh	equ	0xFF7
 28281                           tblptrl	equ	0xFF6
 28282                           tablat	equ	0xFF5
 28283                           prodh	equ	0xFF4
 28284                           prodl	equ	0xFF3
 28285                           intcon	equ	0xFF2
 28286                           indf0	equ	0xFEF
 28287                           postinc0	equ	0xFEE
 28288                           fsr0h	equ	0xFEA
 28289                           fsr0l	equ	0xFE9
 28290                           wreg	equ	0xFE8
 28291                           indf1	equ	0xFE7
 28292                           postdec1	equ	0xFE5
 28293                           fsr1h	equ	0xFE2
 28294                           fsr1l	equ	0xFE1
 28295                           indf2	equ	0xFDF
 28296                           postinc2	equ	0xFDE
 28297                           postdec2	equ	0xFDD
 28298                           plusw2	equ	0xFDB
 28299                           fsr2h	equ	0xFDA
 28300                           fsr2l	equ	0xFD9
 28301                           status	equ	0xFD8
 28302                           
 28303 ;; *************** function _MXK_DIPSwitch *****************
 28304 ;; Defined at:
 28305 ;;		line 24 in file "Library/MXK.c"
 28306 ;; Parameters:    Size  Location     Type
 28307 ;;		None
 28308 ;; Auto vars:     Size  Location     Type
 28309 ;;		None
 28310 ;; Return value:  Size  Location     Type
 28311 ;;                  1    wreg      unsigned char 
 28312 ;; Registers used:
 28313 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 28314 ;; Tracked objects:
 28315 ;;		On entry : 0/0
 28316 ;;		On exit  : 0/0
 28317 ;;		Unchanged: 0/0
 28318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28322 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28323 ;;Total ram usage:        0 bytes
 28324 ;; Hardware stack levels used:    1
 28325 ;; Hardware stack levels required when called:    8
 28326 ;; This function calls:
 28327 ;;		_Port_GetQuad
 28328 ;; This function is called by:
 28329 ;;		_FunctInitButton
 28330 ;;		_Button_Poll
 28331 ;;		_getMode
 28332 ;;		_mode2
 28333 ;; This function uses a non-reentrant model
 28334 ;;
 28335                           
 28336                           	psect	text145
 28337  016308                     __ptext145:
 28338                           	opt stack 0
 28339  016308                     _MXK_DIPSwitch:
 28340                           	opt stack 19
 28341                           
 28342                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
 28343                           
 28344                           ;incstack = 0
 28345  016308  0EA0               	movlw	low _PortD
 28346  01630A  0100               	movlb	0	; () banked
 28347  01630C  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
 28348  01630E  0E03               	movlw	high _PortD
 28349  016310  0100               	movlb	0	; () banked
 28350  016312  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 28351  016314  0E00               	movlw	0
 28352  016316  0100               	movlb	0	; () banked
 28353  016318  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
 28354  01631A  EC05  F0AD         	call	_Port_GetQuad	;wreg free
 28355  01631E  0012               	return	
 28356  016320                     __end_of_MXK_DIPSwitch:
 28357                           	opt stack 0
 28358                           tosu	equ	0xFFF
 28359                           tosh	equ	0xFFE
 28360                           tosl	equ	0xFFD
 28361                           pclath	equ	0xFFA
 28362                           tblptru	equ	0xFF8
 28363                           tblptrh	equ	0xFF7
 28364                           tblptrl	equ	0xFF6
 28365                           tablat	equ	0xFF5
 28366                           prodh	equ	0xFF4
 28367                           prodl	equ	0xFF3
 28368                           intcon	equ	0xFF2
 28369                           indf0	equ	0xFEF
 28370                           postinc0	equ	0xFEE
 28371                           fsr0h	equ	0xFEA
 28372                           fsr0l	equ	0xFE9
 28373                           wreg	equ	0xFE8
 28374                           indf1	equ	0xFE7
 28375                           postdec1	equ	0xFE5
 28376                           fsr1h	equ	0xFE2
 28377                           fsr1l	equ	0xFE1
 28378                           indf2	equ	0xFDF
 28379                           postinc2	equ	0xFDE
 28380                           postdec2	equ	0xFDD
 28381                           plusw2	equ	0xFDB
 28382                           fsr2h	equ	0xFDA
 28383                           fsr2l	equ	0xFD9
 28384                           status	equ	0xFD8
 28385                           
 28386 ;; *************** function _HMI_DIPSwitch *****************
 28387 ;; Defined at:
 28388 ;;		line 47 in file "HMI.c"
 28389 ;; Parameters:    Size  Location     Type
 28390 ;;		None
 28391 ;; Auto vars:     Size  Location     Type
 28392 ;;		None
 28393 ;; Return value:  Size  Location     Type
 28394 ;;                  1    wreg      unsigned char 
 28395 ;; Registers used:
 28396 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 28397 ;; Tracked objects:
 28398 ;;		On entry : 0/0
 28399 ;;		On exit  : 0/0
 28400 ;;		Unchanged: 0/0
 28401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28405 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28406 ;;Total ram usage:        0 bytes
 28407 ;; Hardware stack levels used:    1
 28408 ;; Hardware stack levels required when called:    8
 28409 ;; This function calls:
 28410 ;;		_Port_GetQuad
 28411 ;; This function is called by:
 28412 ;;		_HMI_Init
 28413 ;;		_Button_Poll
 28414 ;;		_getMode
 28415 ;;		_mode2
 28416 ;; This function uses a non-reentrant model
 28417 ;;
 28418                           
 28419                           	psect	text146
 28420  016320                     __ptext146:
 28421                           	opt stack 0
 28422  016320                     _HMI_DIPSwitch:
 28423                           	opt stack 19
 28424                           
 28425                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
 28426                           
 28427                           ;incstack = 0
 28428  016320  0E96               	movlw	low _PortE
 28429  016322  0100               	movlb	0	; () banked
 28430  016324  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
 28431  016326  0E03               	movlw	high _PortE
 28432  016328  0100               	movlb	0	; () banked
 28433  01632A  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 28434  01632C  0E00               	movlw	0
 28435  01632E  0100               	movlb	0	; () banked
 28436  016330  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
 28437  016332  EC05  F0AD         	call	_Port_GetQuad	;wreg free
 28438  016336  0012               	return	
 28439  016338                     __end_of_HMI_DIPSwitch:
 28440                           	opt stack 0
 28441                           tosu	equ	0xFFF
 28442                           tosh	equ	0xFFE
 28443                           tosl	equ	0xFFD
 28444                           pclath	equ	0xFFA
 28445                           tblptru	equ	0xFF8
 28446                           tblptrh	equ	0xFF7
 28447                           tblptrl	equ	0xFF6
 28448                           tablat	equ	0xFF5
 28449                           prodh	equ	0xFF4
 28450                           prodl	equ	0xFF3
 28451                           intcon	equ	0xFF2
 28452                           indf0	equ	0xFEF
 28453                           postinc0	equ	0xFEE
 28454                           fsr0h	equ	0xFEA
 28455                           fsr0l	equ	0xFE9
 28456                           wreg	equ	0xFE8
 28457                           indf1	equ	0xFE7
 28458                           postdec1	equ	0xFE5
 28459                           fsr1h	equ	0xFE2
 28460                           fsr1l	equ	0xFE1
 28461                           indf2	equ	0xFDF
 28462                           postinc2	equ	0xFDE
 28463                           postdec2	equ	0xFDD
 28464                           plusw2	equ	0xFDB
 28465                           fsr2h	equ	0xFDA
 28466                           fsr2l	equ	0xFD9
 28467                           status	equ	0xFD8
 28468                           
 28469 ;; *************** function _HMI_DownSwitch *****************
 28470 ;; Defined at:
 28471 ;;		line 42 in file "HMI.c"
 28472 ;; Parameters:    Size  Location     Type
 28473 ;;		None
 28474 ;; Auto vars:     Size  Location     Type
 28475 ;;		None
 28476 ;; Return value:  Size  Location     Type
 28477 ;;                  1    wreg      unsigned char 
 28478 ;; Registers used:
 28479 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 28480 ;; Tracked objects:
 28481 ;;		On entry : 0/0
 28482 ;;		On exit  : 0/0
 28483 ;;		Unchanged: 0/0
 28484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28486 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28488 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28489 ;;Total ram usage:        0 bytes
 28490 ;; Hardware stack levels used:    1
 28491 ;; Hardware stack levels required when called:    8
 28492 ;; This function calls:
 28493 ;;		_Port_GetPin
 28494 ;; This function is called by:
 28495 ;;		_HMI_Init
 28496 ;;		_Button_Poll
 28497 ;;		_getMode
 28498 ;;		_mode2
 28499 ;; This function uses a non-reentrant model
 28500 ;;
 28501                           
 28502                           	psect	text147
 28503  016338                     __ptext147:
 28504                           	opt stack 0
 28505  016338                     _HMI_DownSwitch:
 28506                           	opt stack 19
 28507                           
 28508                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
 28509                           
 28510                           ;incstack = 0
 28511  016338  0E96               	movlw	low _PortE
 28512  01633A  0100               	movlb	0	; () banked
 28513  01633C  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 28514  01633E  0E03               	movlw	high _PortE
 28515  016340  0100               	movlb	0	; () banked
 28516  016342  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 28517  016344  0E06               	movlw	6
 28518  016346  0100               	movlb	0	; () banked
 28519  016348  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 28520  01634A  ECDC  F0AD         	call	_Port_GetPin	;wreg free
 28521  01634E  0012               	return	
 28522  016350                     __end_of_HMI_DownSwitch:
 28523                           	opt stack 0
 28524                           tosu	equ	0xFFF
 28525                           tosh	equ	0xFFE
 28526                           tosl	equ	0xFFD
 28527                           pclath	equ	0xFFA
 28528                           tblptru	equ	0xFF8
 28529                           tblptrh	equ	0xFF7
 28530                           tblptrl	equ	0xFF6
 28531                           tablat	equ	0xFF5
 28532                           prodh	equ	0xFF4
 28533                           prodl	equ	0xFF3
 28534                           intcon	equ	0xFF2
 28535                           indf0	equ	0xFEF
 28536                           postinc0	equ	0xFEE
 28537                           fsr0h	equ	0xFEA
 28538                           fsr0l	equ	0xFE9
 28539                           wreg	equ	0xFE8
 28540                           indf1	equ	0xFE7
 28541                           postdec1	equ	0xFE5
 28542                           fsr1h	equ	0xFE2
 28543                           fsr1l	equ	0xFE1
 28544                           indf2	equ	0xFDF
 28545                           postinc2	equ	0xFDE
 28546                           postdec2	equ	0xFDD
 28547                           plusw2	equ	0xFDB
 28548                           fsr2h	equ	0xFDA
 28549                           fsr2l	equ	0xFD9
 28550                           status	equ	0xFD8
 28551                           
 28552 ;; *************** function _HMI_UpSwitch *****************
 28553 ;; Defined at:
 28554 ;;		line 37 in file "HMI.c"
 28555 ;; Parameters:    Size  Location     Type
 28556 ;;		None
 28557 ;; Auto vars:     Size  Location     Type
 28558 ;;		None
 28559 ;; Return value:  Size  Location     Type
 28560 ;;                  1    wreg      unsigned char 
 28561 ;; Registers used:
 28562 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 28563 ;; Tracked objects:
 28564 ;;		On entry : 0/0
 28565 ;;		On exit  : 0/0
 28566 ;;		Unchanged: 0/0
 28567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28571 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28572 ;;Total ram usage:        0 bytes
 28573 ;; Hardware stack levels used:    1
 28574 ;; Hardware stack levels required when called:    8
 28575 ;; This function calls:
 28576 ;;		_Port_GetPin
 28577 ;; This function is called by:
 28578 ;;		_HMI_Init
 28579 ;;		_Button_Poll
 28580 ;;		_getMode
 28581 ;;		_mode2
 28582 ;; This function uses a non-reentrant model
 28583 ;;
 28584                           
 28585                           	psect	text148
 28586  016350                     __ptext148:
 28587                           	opt stack 0
 28588  016350                     _HMI_UpSwitch:
 28589                           	opt stack 19
 28590                           
 28591                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
 28592                           
 28593                           ;incstack = 0
 28594  016350  0E96               	movlw	low _PortE
 28595  016352  0100               	movlb	0	; () banked
 28596  016354  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 28597  016356  0E03               	movlw	high _PortE
 28598  016358  0100               	movlb	0	; () banked
 28599  01635A  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 28600  01635C  0E07               	movlw	7
 28601  01635E  0100               	movlb	0	; () banked
 28602  016360  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 28603  016362  ECDC  F0AD         	call	_Port_GetPin	;wreg free
 28604  016366  0012               	return	
 28605  016368                     __end_of_HMI_UpSwitch:
 28606                           	opt stack 0
 28607                           tosu	equ	0xFFF
 28608                           tosh	equ	0xFFE
 28609                           tosl	equ	0xFFD
 28610                           pclath	equ	0xFFA
 28611                           tblptru	equ	0xFF8
 28612                           tblptrh	equ	0xFF7
 28613                           tblptrl	equ	0xFF6
 28614                           tablat	equ	0xFF5
 28615                           prodh	equ	0xFF4
 28616                           prodl	equ	0xFF3
 28617                           intcon	equ	0xFF2
 28618                           indf0	equ	0xFEF
 28619                           postinc0	equ	0xFEE
 28620                           fsr0h	equ	0xFEA
 28621                           fsr0l	equ	0xFE9
 28622                           wreg	equ	0xFE8
 28623                           indf1	equ	0xFE7
 28624                           postdec1	equ	0xFE5
 28625                           fsr1h	equ	0xFE2
 28626                           fsr1l	equ	0xFE1
 28627                           indf2	equ	0xFDF
 28628                           postinc2	equ	0xFDE
 28629                           postdec2	equ	0xFDD
 28630                           plusw2	equ	0xFDB
 28631                           fsr2h	equ	0xFDA
 28632                           fsr2l	equ	0xFD9
 28633                           status	equ	0xFD8
 28634                           
 28635 ;; *************** function _HMI_RightSwitch *****************
 28636 ;; Defined at:
 28637 ;;		line 32 in file "HMI.c"
 28638 ;; Parameters:    Size  Location     Type
 28639 ;;		None
 28640 ;; Auto vars:     Size  Location     Type
 28641 ;;		None
 28642 ;; Return value:  Size  Location     Type
 28643 ;;                  1    wreg      unsigned char 
 28644 ;; Registers used:
 28645 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 28646 ;; Tracked objects:
 28647 ;;		On entry : 0/0
 28648 ;;		On exit  : 0/0
 28649 ;;		Unchanged: 0/0
 28650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28654 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28655 ;;Total ram usage:        0 bytes
 28656 ;; Hardware stack levels used:    1
 28657 ;; Hardware stack levels required when called:    8
 28658 ;; This function calls:
 28659 ;;		_Port_GetPin
 28660 ;; This function is called by:
 28661 ;;		_HMI_Init
 28662 ;;		_Button_Poll
 28663 ;;		_getMode
 28664 ;;		_mode2
 28665 ;; This function uses a non-reentrant model
 28666 ;;
 28667                           
 28668                           	psect	text149
 28669  016368                     __ptext149:
 28670                           	opt stack 0
 28671  016368                     _HMI_RightSwitch:
 28672                           	opt stack 19
 28673                           
 28674                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
 28675                           
 28676                           ;incstack = 0
 28677  016368  0E96               	movlw	low _PortE
 28678  01636A  0100               	movlb	0	; () banked
 28679  01636C  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 28680  01636E  0E03               	movlw	high _PortE
 28681  016370  0100               	movlb	0	; () banked
 28682  016372  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 28683  016374  0E04               	movlw	4
 28684  016376  0100               	movlb	0	; () banked
 28685  016378  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 28686  01637A  ECDC  F0AD         	call	_Port_GetPin	;wreg free
 28687  01637E  0012               	return	
 28688  016380                     __end_of_HMI_RightSwitch:
 28689                           	opt stack 0
 28690                           tosu	equ	0xFFF
 28691                           tosh	equ	0xFFE
 28692                           tosl	equ	0xFFD
 28693                           pclath	equ	0xFFA
 28694                           tblptru	equ	0xFF8
 28695                           tblptrh	equ	0xFF7
 28696                           tblptrl	equ	0xFF6
 28697                           tablat	equ	0xFF5
 28698                           prodh	equ	0xFF4
 28699                           prodl	equ	0xFF3
 28700                           intcon	equ	0xFF2
 28701                           indf0	equ	0xFEF
 28702                           postinc0	equ	0xFEE
 28703                           fsr0h	equ	0xFEA
 28704                           fsr0l	equ	0xFE9
 28705                           wreg	equ	0xFE8
 28706                           indf1	equ	0xFE7
 28707                           postdec1	equ	0xFE5
 28708                           fsr1h	equ	0xFE2
 28709                           fsr1l	equ	0xFE1
 28710                           indf2	equ	0xFDF
 28711                           postinc2	equ	0xFDE
 28712                           postdec2	equ	0xFDD
 28713                           plusw2	equ	0xFDB
 28714                           fsr2h	equ	0xFDA
 28715                           fsr2l	equ	0xFD9
 28716                           status	equ	0xFD8
 28717                           
 28718 ;; *************** function _HMI_LeftSwitch *****************
 28719 ;; Defined at:
 28720 ;;		line 27 in file "HMI.c"
 28721 ;; Parameters:    Size  Location     Type
 28722 ;;		None
 28723 ;; Auto vars:     Size  Location     Type
 28724 ;;		None
 28725 ;; Return value:  Size  Location     Type
 28726 ;;                  1    wreg      unsigned char 
 28727 ;; Registers used:
 28728 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 28729 ;; Tracked objects:
 28730 ;;		On entry : 0/0
 28731 ;;		On exit  : 0/0
 28732 ;;		Unchanged: 0/0
 28733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28737 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28738 ;;Total ram usage:        0 bytes
 28739 ;; Hardware stack levels used:    1
 28740 ;; Hardware stack levels required when called:    8
 28741 ;; This function calls:
 28742 ;;		_Port_GetPin
 28743 ;; This function is called by:
 28744 ;;		_HMI_Init
 28745 ;;		_Button_Poll
 28746 ;;		_getMode
 28747 ;;		_mode2
 28748 ;; This function uses a non-reentrant model
 28749 ;;
 28750                           
 28751                           	psect	text150
 28752  016380                     __ptext150:
 28753                           	opt stack 0
 28754  016380                     _HMI_LeftSwitch:
 28755                           	opt stack 19
 28756                           
 28757                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
 28758                           
 28759                           ;incstack = 0
 28760  016380  0E96               	movlw	low _PortE
 28761  016382  0100               	movlb	0	; () banked
 28762  016384  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 28763  016386  0E03               	movlw	high _PortE
 28764  016388  0100               	movlb	0	; () banked
 28765  01638A  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 28766  01638C  0E05               	movlw	5
 28767  01638E  0100               	movlb	0	; () banked
 28768  016390  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 28769  016392  ECDC  F0AD         	call	_Port_GetPin	;wreg free
 28770  016396  0012               	return	
 28771  016398                     __end_of_HMI_LeftSwitch:
 28772                           	opt stack 0
 28773                           tosu	equ	0xFFF
 28774                           tosh	equ	0xFFE
 28775                           tosl	equ	0xFFD
 28776                           pclath	equ	0xFFA
 28777                           tblptru	equ	0xFF8
 28778                           tblptrh	equ	0xFF7
 28779                           tblptrl	equ	0xFF6
 28780                           tablat	equ	0xFF5
 28781                           prodh	equ	0xFF4
 28782                           prodl	equ	0xFF3
 28783                           intcon	equ	0xFF2
 28784                           indf0	equ	0xFEF
 28785                           postinc0	equ	0xFEE
 28786                           fsr0h	equ	0xFEA
 28787                           fsr0l	equ	0xFE9
 28788                           wreg	equ	0xFE8
 28789                           indf1	equ	0xFE7
 28790                           postdec1	equ	0xFE5
 28791                           fsr1h	equ	0xFE2
 28792                           fsr1l	equ	0xFE1
 28793                           indf2	equ	0xFDF
 28794                           postinc2	equ	0xFDE
 28795                           postdec2	equ	0xFDD
 28796                           plusw2	equ	0xFDB
 28797                           fsr2h	equ	0xFDA
 28798                           fsr2l	equ	0xFD9
 28799                           status	equ	0xFD8
 28800                           
 28801 ;; *************** function _MXK_TestButton *****************
 28802 ;; Defined at:
 28803 ;;		line 14 in file "Library/MXK.c"
 28804 ;; Parameters:    Size  Location     Type
 28805 ;;		None
 28806 ;; Auto vars:     Size  Location     Type
 28807 ;;		None
 28808 ;; Return value:  Size  Location     Type
 28809 ;;                  1    wreg      unsigned char 
 28810 ;; Registers used:
 28811 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 28812 ;; Tracked objects:
 28813 ;;		On entry : 0/0
 28814 ;;		On exit  : 0/0
 28815 ;;		Unchanged: 0/0
 28816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28820 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28821 ;;Total ram usage:        0 bytes
 28822 ;; Hardware stack levels used:    1
 28823 ;; Hardware stack levels required when called:    8
 28824 ;; This function calls:
 28825 ;;		_Port_GetPin
 28826 ;; This function is called by:
 28827 ;;		_FunctInitButton
 28828 ;;		_Button_Poll
 28829 ;;		_getMode
 28830 ;;		_mode2
 28831 ;; This function uses a non-reentrant model
 28832 ;;
 28833                           
 28834                           	psect	text151
 28835  016398                     __ptext151:
 28836                           	opt stack 0
 28837  016398                     _MXK_TestButton:
 28838                           	opt stack 19
 28839                           
 28840                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
 28841                           
 28842                           ;incstack = 0
 28843  016398  0EAA               	movlw	low _PortB
 28844  01639A  0100               	movlb	0	; () banked
 28845  01639C  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 28846  01639E  0E03               	movlw	high _PortB
 28847  0163A0  0100               	movlb	0	; () banked
 28848  0163A2  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 28849  0163A4  0E04               	movlw	4
 28850  0163A6  0100               	movlb	0	; () banked
 28851  0163A8  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 28852  0163AA  ECDC  F0AD         	call	_Port_GetPin	;wreg free
 28853  0163AE  0012               	return	
 28854  0163B0                     __end_of_MXK_TestButton:
 28855                           	opt stack 0
 28856                           tosu	equ	0xFFF
 28857                           tosh	equ	0xFFE
 28858                           tosl	equ	0xFFD
 28859                           pclath	equ	0xFFA
 28860                           tblptru	equ	0xFF8
 28861                           tblptrh	equ	0xFF7
 28862                           tblptrl	equ	0xFF6
 28863                           tablat	equ	0xFF5
 28864                           prodh	equ	0xFF4
 28865                           prodl	equ	0xFF3
 28866                           intcon	equ	0xFF2
 28867                           indf0	equ	0xFEF
 28868                           postinc0	equ	0xFEE
 28869                           fsr0h	equ	0xFEA
 28870                           fsr0l	equ	0xFE9
 28871                           wreg	equ	0xFE8
 28872                           indf1	equ	0xFE7
 28873                           postdec1	equ	0xFE5
 28874                           fsr1h	equ	0xFE2
 28875                           fsr1l	equ	0xFE1
 28876                           indf2	equ	0xFDF
 28877                           postinc2	equ	0xFDE
 28878                           postdec2	equ	0xFDD
 28879                           plusw2	equ	0xFDB
 28880                           fsr2h	equ	0xFDA
 28881                           fsr2l	equ	0xFD9
 28882                           status	equ	0xFD8
 28883                           
 28884 ;; *************** function _Port_GetPin *****************
 28885 ;; Defined at:
 28886 ;;		line 271 in file "Library/Port.c"
 28887 ;; Parameters:    Size  Location     Type
 28888 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 28889 ;;		 -> PortB(10), PortE(10), PortC(10), 
 28890 ;;  pPin            1    2[BANK0 ] enum E6750
 28891 ;; Auto vars:     Size  Location     Type
 28892 ;;  Output          1    5[BANK0 ] unsigned char 
 28893 ;; Return value:  Size  Location     Type
 28894 ;;                  1    wreg      unsigned char 
 28895 ;; Registers used:
 28896 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 28897 ;; Tracked objects:
 28898 ;;		On entry : 0/0
 28899 ;;		On exit  : 0/0
 28900 ;;		Unchanged: 0/0
 28901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28902 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28903 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28904 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28905 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28906 ;;Total ram usage:        6 bytes
 28907 ;; Hardware stack levels used:    1
 28908 ;; Hardware stack levels required when called:    7
 28909 ;; This function calls:
 28910 ;;		Nothing
 28911 ;; This function is called by:
 28912 ;;		_Port_TogglePin
 28913 ;;		_HMI_LeftSwitch
 28914 ;;		_HMI_RightSwitch
 28915 ;;		_HMI_UpSwitch
 28916 ;;		_HMI_DownSwitch
 28917 ;;		_MXK_TestButton
 28918 ;; This function uses a non-reentrant model
 28919 ;;
 28920                           
 28921                           	psect	text152
 28922  015BB8                     __ptext152:
 28923                           	opt stack 0
 28924  015BB8                     _Port_GetPin:
 28925                           	opt stack 19
 28926                           
 28927                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 28928                           
 28929                           ;incstack = 0
 28930  015BB8  0100               	movlb	0	; () banked
 28931  015BBA  EE20 F006          	lfsr	2,6
 28932  015BBE  5160               	movf	Port_GetPin@pInput& (0+255),w,b
 28933  015BC0  26D9               	addwf	fsr2l,f,c
 28934  015BC2  5161               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 28935  015BC4  22DA               	addwfc	fsr2h,f,c
 28936  015BC6  CFDE F063          	movff	postinc2,??_Port_GetPin
 28937  015BCA  CFDD F064          	movff	postdec2,??_Port_GetPin+1
 28938  015BCE  C063  FFD9         	movff	??_Port_GetPin,fsr2l
 28939  015BD2  C064  FFDA         	movff	??_Port_GetPin+1,fsr2h
 28940  015BD6  50DF               	movf	indf2,w,c
 28941  015BD8  0100               	movlb	0	; () banked
 28942  015BDA  6F65               	movwf	Port_GetPin@Output& (0+255),b
 28943                           
 28944                           ; BSR set to: 0
 28945                           ;Port.c: 274: Output >>= (UINT8)pPin;
 28946  015BDC  0100               	movlb	0	; () banked
 28947  015BDE  2962               	incf	Port_GetPin@pPin& (0+255),w,b
 28948  015BE0  0100               	movlb	0	; () banked
 28949  015BE2  6F63               	movwf	??_Port_GetPin& (0+255),b
 28950  015BE4  D003               	goto	u8710
 28951  015BE6                     u8715:
 28952  015BE6  0100               	movlb	0	; () banked
 28953  015BE8  90D8               	bcf	status,0,c
 28954  015BEA  3365               	rrcf	Port_GetPin@Output& (0+255),f,b
 28955  015BEC                     u8710:
 28956  015BEC  0100               	movlb	0	; () banked
 28957  015BEE  2F63               	decfsz	??_Port_GetPin& (0+255),f,b
 28958  015BF0  D7FA               	goto	u8715
 28959                           
 28960                           ;Port.c: 275: Output &= 1;
 28961  015BF2  0E01               	movlw	1
 28962  015BF4  0100               	movlb	0	; () banked
 28963  015BF6  1765               	andwf	Port_GetPin@Output& (0+255),f,b
 28964                           
 28965                           ; BSR set to: 0
 28966                           ;Port.c: 276: return Output;
 28967  015BF8  0100               	movlb	0	; () banked
 28968  015BFA  5165               	movf	Port_GetPin@Output& (0+255),w,b
 28969  015BFC  0012               	return	
 28970  015BFE                     __end_of_Port_GetPin:
 28971                           	opt stack 0
 28972                           tosu	equ	0xFFF
 28973                           tosh	equ	0xFFE
 28974                           tosl	equ	0xFFD
 28975                           pclath	equ	0xFFA
 28976                           tblptru	equ	0xFF8
 28977                           tblptrh	equ	0xFF7
 28978                           tblptrl	equ	0xFF6
 28979                           tablat	equ	0xFF5
 28980                           prodh	equ	0xFF4
 28981                           prodl	equ	0xFF3
 28982                           intcon	equ	0xFF2
 28983                           indf0	equ	0xFEF
 28984                           postinc0	equ	0xFEE
 28985                           fsr0h	equ	0xFEA
 28986                           fsr0l	equ	0xFE9
 28987                           wreg	equ	0xFE8
 28988                           indf1	equ	0xFE7
 28989                           postdec1	equ	0xFE5
 28990                           fsr1h	equ	0xFE2
 28991                           fsr1l	equ	0xFE1
 28992                           indf2	equ	0xFDF
 28993                           postinc2	equ	0xFDE
 28994                           postdec2	equ	0xFDD
 28995                           plusw2	equ	0xFDB
 28996                           fsr2h	equ	0xFDA
 28997                           fsr2l	equ	0xFD9
 28998                           status	equ	0xFD8
 28999                           
 29000 ;; *************** function _Port_GetQuad *****************
 29001 ;; Defined at:
 29002 ;;		line 498 in file "Library/Port.c"
 29003 ;; Parameters:    Size  Location     Type
 29004 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 29005 ;;		 -> PortE(10), PortD(10), 
 29006 ;;  pQuad           1    2[BANK0 ] enum E6776
 29007 ;; Auto vars:     Size  Location     Type
 29008 ;;  Output          1    5[BANK0 ] unsigned char 
 29009 ;; Return value:  Size  Location     Type
 29010 ;;                  1    wreg      unsigned char 
 29011 ;; Registers used:
 29012 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 29013 ;; Tracked objects:
 29014 ;;		On entry : 0/0
 29015 ;;		On exit  : 0/0
 29016 ;;		Unchanged: 0/0
 29017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29018 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29019 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29020 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29021 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29022 ;;Total ram usage:        6 bytes
 29023 ;; Hardware stack levels used:    1
 29024 ;; Hardware stack levels required when called:    7
 29025 ;; This function calls:
 29026 ;;		Nothing
 29027 ;; This function is called by:
 29028 ;;		_HMI_DIPSwitch
 29029 ;;		_MXK_DIPSwitch
 29030 ;;		_Port_ToggleQuad
 29031 ;; This function uses a non-reentrant model
 29032 ;;
 29033                           
 29034                           	psect	text153
 29035  015A0A                     __ptext153:
 29036                           	opt stack 0
 29037  015A0A                     _Port_GetQuad:
 29038                           	opt stack 19
 29039                           
 29040                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
 29041                           
 29042                           ; BSR set to: 0
 29043                           ;incstack = 0
 29044  015A0A  0100               	movlb	0	; () banked
 29045  015A0C  EE20 F006          	lfsr	2,6
 29046  015A10  5160               	movf	Port_GetQuad@pInput& (0+255),w,b
 29047  015A12  26D9               	addwf	fsr2l,f,c
 29048  015A14  5161               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
 29049  015A16  22DA               	addwfc	fsr2h,f,c
 29050  015A18  CFDE F063          	movff	postinc2,??_Port_GetQuad
 29051  015A1C  CFDD F064          	movff	postdec2,??_Port_GetQuad+1
 29052  015A20  C063  FFD9         	movff	??_Port_GetQuad,fsr2l
 29053  015A24  C064  FFDA         	movff	??_Port_GetQuad+1,fsr2h
 29054  015A28  50DF               	movf	indf2,w,c
 29055  015A2A  0100               	movlb	0	; () banked
 29056  015A2C  6F65               	movwf	Port_GetQuad@Output& (0+255),b
 29057                           
 29058                           ; BSR set to: 0
 29059                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
 29060  015A2E  0100               	movlb	0	; () banked
 29061  015A30  5162               	movf	Port_GetQuad@pQuad& (0+255),w,b
 29062  015A32  0D04               	mullw	4
 29063  015A34  28F3               	incf	prodl,w,c
 29064  015A36  0100               	movlb	0	; () banked
 29065  015A38  6F63               	movwf	??_Port_GetQuad& (0+255),b
 29066  015A3A  D003               	goto	u9180
 29067  015A3C                     u9185:
 29068  015A3C  0100               	movlb	0	; () banked
 29069  015A3E  90D8               	bcf	status,0,c
 29070  015A40  3365               	rrcf	Port_GetQuad@Output& (0+255),f,b
 29071  015A42                     u9180:
 29072  015A42  0100               	movlb	0	; () banked
 29073  015A44  2F63               	decfsz	??_Port_GetQuad& (0+255),f,b
 29074  015A46  D7FA               	goto	u9185
 29075                           
 29076                           ;Port.c: 502: Output &= 0xF;
 29077  015A48  0E0F               	movlw	15
 29078  015A4A  0100               	movlb	0	; () banked
 29079  015A4C  1765               	andwf	Port_GetQuad@Output& (0+255),f,b
 29080                           
 29081                           ; BSR set to: 0
 29082                           ;Port.c: 503: return Output;
 29083  015A4E  0100               	movlb	0	; () banked
 29084  015A50  5165               	movf	Port_GetQuad@Output& (0+255),w,b
 29085  015A52  0012               	return	
 29086  015A54                     __end_of_Port_GetQuad:
 29087                           	opt stack 0
 29088                           tosu	equ	0xFFF
 29089                           tosh	equ	0xFFE
 29090                           tosl	equ	0xFFD
 29091                           pclath	equ	0xFFA
 29092                           tblptru	equ	0xFF8
 29093                           tblptrh	equ	0xFF7
 29094                           tblptrl	equ	0xFF6
 29095                           tablat	equ	0xFF5
 29096                           prodh	equ	0xFF4
 29097                           prodl	equ	0xFF3
 29098                           intcon	equ	0xFF2
 29099                           indf0	equ	0xFEF
 29100                           postinc0	equ	0xFEE
 29101                           fsr0h	equ	0xFEA
 29102                           fsr0l	equ	0xFE9
 29103                           wreg	equ	0xFE8
 29104                           indf1	equ	0xFE7
 29105                           postdec1	equ	0xFE5
 29106                           fsr1h	equ	0xFE2
 29107                           fsr1l	equ	0xFE1
 29108                           indf2	equ	0xFDF
 29109                           postinc2	equ	0xFDE
 29110                           postdec2	equ	0xFDD
 29111                           plusw2	equ	0xFDB
 29112                           fsr2h	equ	0xFDA
 29113                           fsr2l	equ	0xFD9
 29114                           status	equ	0xFD8
 29115                           
 29116 ;; *************** function _ISR_Function *****************
 29117 ;; Defined at:
 29118 ;;		line 38 in file "Library/ISR.c"
 29119 ;; Parameters:    Size  Location     Type
 29120 ;;		None
 29121 ;; Auto vars:     Size  Location     Type
 29122 ;;		None
 29123 ;; Return value:  Size  Location     Type
 29124 ;;                  1    wreg      void 
 29125 ;; Registers used:
 29126 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29127 ;; Tracked objects:
 29128 ;;		On entry : 0/0
 29129 ;;		On exit  : 0/0
 29130 ;;		Unchanged: 0/0
 29131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29134 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29135 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29136 ;;Total ram usage:       18 bytes
 29137 ;; Hardware stack levels used:    1
 29138 ;; Hardware stack levels required when called:    6
 29139 ;; This function calls:
 29140 ;;		_Timer0_ISR
 29141 ;; This function is called by:
 29142 ;;		Interrupt level 2
 29143 ;; This function uses a non-reentrant model
 29144 ;;
 29145                           
 29146                           	psect	intcode
 29147  001408                     __pintcode:
 29148                           	opt stack 0
 29149  001408                     _ISR_Function:
 29150                           	opt stack 13
 29151                           
 29152                           ; BSR set to: 0
 29153                           ;incstack = 0
 29154  001408  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 29155  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 29156  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 29157  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 29158  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 29159  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 29160  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 29161  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 29162  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 29163  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 29164  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 29165  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 29166  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 29167  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 29168  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 29169  001442  C051  F025         	movff	btemp,??_ISR_Function+14
 29170  001446  C052  F026         	movff	btemp+1,??_ISR_Function+15
 29171  00144A  C053  F027         	movff	btemp+2,??_ISR_Function+16
 29172  00144E  C054  F028         	movff	btemp+3,??_ISR_Function+17
 29173                           
 29174                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 29175  001452  92F2               	bcf	intcon,1,c	;volatile
 29176                           
 29177                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 29178  001454  B4F2               	btfsc	intcon,2,c	;volatile
 29179  001456  AAF2               	btfss	intcon,5,c	;volatile
 29180  001458  D002               	goto	i2l1590
 29181                           
 29182                           ;ISR.c: 68: Timer0_ISR();
 29183  00145A  EC1E  F0B0         	call	_Timer0_ISR	;wreg free
 29184  00145E                     i2l1590:
 29185  00145E  C028  F054         	movff	??_ISR_Function+17,btemp+3
 29186  001462  C027  F053         	movff	??_ISR_Function+16,btemp+2
 29187  001466  C026  F052         	movff	??_ISR_Function+15,btemp+1
 29188  00146A  C025  F051         	movff	??_ISR_Function+14,btemp
 29189  00146E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 29190  001472  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 29191  001476  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 29192  00147A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 29193  00147E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 29194  001482  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 29195  001486  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 29196  00148A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 29197  00148E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 29198  001492  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 29199  001496  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 29200  00149A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 29201  00149E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 29202  0014A2  C017  FFFA         	movff	??_ISR_Function,pclath
 29203  0014A6  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 29204  0014A8  0011               	retfie		f
 29205  0014AA                     __end_of_ISR_Function:
 29206                           	opt stack 0
 29207                           tosu	equ	0xFFF
 29208                           tosh	equ	0xFFE
 29209                           tosl	equ	0xFFD
 29210                           pclatu	equ	0xFFB
 29211                           pclath	equ	0xFFA
 29212                           tblptru	equ	0xFF8
 29213                           tblptrh	equ	0xFF7
 29214                           tblptrl	equ	0xFF6
 29215                           tablat	equ	0xFF5
 29216                           prodh	equ	0xFF4
 29217                           prodl	equ	0xFF3
 29218                           intcon	equ	0xFF2
 29219                           indf0	equ	0xFEF
 29220                           postinc0	equ	0xFEE
 29221                           fsr0h	equ	0xFEA
 29222                           fsr0l	equ	0xFE9
 29223                           wreg	equ	0xFE8
 29224                           indf1	equ	0xFE7
 29225                           postdec1	equ	0xFE5
 29226                           fsr1h	equ	0xFE2
 29227                           fsr1l	equ	0xFE1
 29228                           indf2	equ	0xFDF
 29229                           postinc2	equ	0xFDE
 29230                           postdec2	equ	0xFDD
 29231                           plusw2	equ	0xFDB
 29232                           fsr2h	equ	0xFDA
 29233                           fsr2l	equ	0xFD9
 29234                           status	equ	0xFD8
 29235                           
 29236 ;; *************** function _Timer0_ISR *****************
 29237 ;; Defined at:
 29238 ;;		line 94 in file "Library/Timer0.c"
 29239 ;; Parameters:    Size  Location     Type
 29240 ;;		None
 29241 ;; Auto vars:     Size  Location     Type
 29242 ;;		None
 29243 ;; Return value:  Size  Location     Type
 29244 ;;                  1    wreg      void 
 29245 ;; Registers used:
 29246 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29247 ;; Tracked objects:
 29248 ;;		On entry : 0/0
 29249 ;;		On exit  : 0/0
 29250 ;;		Unchanged: 0/0
 29251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29255 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29256 ;;Total ram usage:        0 bytes
 29257 ;; Hardware stack levels used:    1
 29258 ;; Hardware stack levels required when called:    5
 29259 ;; This function calls:
 29260 ;;		Absolute function
 29261 ;;		i2_Motor_Step
 29262 ;;		i2_Timer0_Stop
 29263 ;; This function is called by:
 29264 ;;		_ISR_Function
 29265 ;; This function uses a non-reentrant model
 29266 ;;
 29267                           
 29268                           	psect	text155
 29269  01603C                     __ptext155:
 29270                           	opt stack 0
 29271  01603C                     _Timer0_ISR:
 29272                           	opt stack 13
 29273                           
 29274                           ;Timer0.c: 96: Timer0_Stop();
 29275                           
 29276                           ;incstack = 0
 29277  01603C  EC74  F0B2         	call	i2_Timer0_Stop	;wreg free
 29278                           
 29279                           ;Timer0.c: 99: if (gISR != 0)
 29280  016040  0100               	movlb	0	; () banked
 29281  016042  51B9               	movf	_gISR& (0+255),w,b
 29282  016044  0100               	movlb	0	; () banked
 29283  016046  11BA               	iorwf	(_gISR+1)& (0+255),w,b
 29284  016048  0100               	movlb	0	; () banked
 29285  01604A  11BB               	iorwf	(_gISR+2)& (0+255),w,b
 29286  01604C  B4D8               	btfsc	status,2,c
 29287  01604E  0012               	return	
 29288                           
 29289                           ; BSR set to: 0
 29290                           ;Timer0.c: 100: gISR();
 29291  016050  D801               	call	i2u1334_48
 29292  016052  0012               	return	
 29293  016054                     i2u1334_48:
 29294  016054  0005               	push	
 29295  016056  6EFA               	movwf	pclath,c
 29296  016058  0100               	movlb	0	; () banked
 29297  01605A  51B9               	movf	_gISR& (0+255),w,b
 29298  01605C  6EFD               	movwf	tosl,c
 29299  01605E  51BA               	movf	(_gISR+1)& (0+255),w,b
 29300  016060  6EFE               	movwf	tosh,c
 29301  016062  51BB               	movf	(_gISR+2)& (0+255),w,b
 29302  016064  6EFF               	movwf	tosu,c
 29303  016066  50FA               	movf	pclath,w,c
 29304  016068  0012               	return		;indir
 29305  01606A                     __end_of_Timer0_ISR:
 29306                           	opt stack 0
 29307                           tosu	equ	0xFFF
 29308                           tosh	equ	0xFFE
 29309                           tosl	equ	0xFFD
 29310                           pclatu	equ	0xFFB
 29311                           pclath	equ	0xFFA
 29312                           tblptru	equ	0xFF8
 29313                           tblptrh	equ	0xFF7
 29314                           tblptrl	equ	0xFF6
 29315                           tablat	equ	0xFF5
 29316                           prodh	equ	0xFF4
 29317                           prodl	equ	0xFF3
 29318                           intcon	equ	0xFF2
 29319                           indf0	equ	0xFEF
 29320                           postinc0	equ	0xFEE
 29321                           fsr0h	equ	0xFEA
 29322                           fsr0l	equ	0xFE9
 29323                           wreg	equ	0xFE8
 29324                           indf1	equ	0xFE7
 29325                           postdec1	equ	0xFE5
 29326                           fsr1h	equ	0xFE2
 29327                           fsr1l	equ	0xFE1
 29328                           indf2	equ	0xFDF
 29329                           postinc2	equ	0xFDE
 29330                           postdec2	equ	0xFDD
 29331                           plusw2	equ	0xFDB
 29332                           fsr2h	equ	0xFDA
 29333                           fsr2l	equ	0xFD9
 29334                           status	equ	0xFD8
 29335                           
 29336 ;; *************** function i2_Motor_Step *****************
 29337 ;; Defined at:
 29338 ;;		line 75 in file "Library/Motor.c"
 29339 ;; Parameters:    Size  Location     Type
 29340 ;;		None
 29341 ;; Auto vars:     Size  Location     Type
 29342 ;;		None
 29343 ;; Return value:  Size  Location     Type
 29344 ;;                  1    wreg      void 
 29345 ;; Registers used:
 29346 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29347 ;; Tracked objects:
 29348 ;;		On entry : 0/0
 29349 ;;		On exit  : 0/0
 29350 ;;		Unchanged: 0/0
 29351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29354 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29355 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29356 ;;Total ram usage:        2 bytes
 29357 ;; Hardware stack levels used:    1
 29358 ;; Hardware stack levels required when called:    4
 29359 ;; This function calls:
 29360 ;;		i2_MXK_Queue
 29361 ;;		i2_MXK_Release
 29362 ;;		i2_MXK_SwitchTo
 29363 ;;		i2_Port_SetPin
 29364 ;;		i2_Timer0_Restart
 29365 ;;		i2_Timer0_Stop
 29366 ;; This function is called by:
 29367 ;; This function uses a non-reentrant model
 29368 ;;
 29369                           
 29370                           	psect	text156
 29371  0138D8                     __ptext156:
 29372                           	opt stack 0
 29373  0138D8                     i2_Motor_Step:
 29374                           	opt stack 13
 29375                           
 29376                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 29377                           
 29378                           ;incstack = 0
 29379  0138D8  0100               	movlb	0	; () banked
 29380  0138DA  EE20 F004          	lfsr	2,4
 29381  0138DE  51D8               	movf	_lMotor& (0+255),w,b
 29382  0138E0  26D9               	addwf	fsr2l,f,c
 29383  0138E2  51D9               	movf	(_lMotor+1)& (0+255),w,b
 29384  0138E4  22DA               	addwfc	fsr2h,f,c
 29385  0138E6  50DF               	movf	indf2,w,c
 29386  0138E8  EC71  F0AF         	call	i2_MXK_SwitchTo
 29387  0138EC  0900               	iorlw	0
 29388  0138EE  B4D8               	btfsc	status,2,c
 29389  0138F0  D06A               	goto	i2l1627
 29390                           
 29391                           ;Motor.c: 78: {
 29392                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 29393  0138F2  C0D8  FFD9         	movff	_lMotor,fsr2l
 29394  0138F6  C0D9  FFDA         	movff	_lMotor+1,fsr2h
 29395  0138FA  50DE               	movf	postinc2,w,c
 29396  0138FC  10DE               	iorwf	postinc2,w,c
 29397  0138FE  B4D8               	btfsc	status,2,c
 29398  013900  D05D               	goto	i2l1628
 29399                           
 29400                           ;Motor.c: 80: {
 29401                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 29402  013902  C0D8  FFD9         	movff	_lMotor,fsr2l
 29403  013906  C0D9  FFDA         	movff	_lMotor+1,fsr2h
 29404  01390A  0E01               	movlw	1
 29405  01390C  BEDB               	btfsc	plusw2,7,c
 29406  01390E  D022               	goto	i2l1629
 29407  013910  0E01               	movlw	1
 29408  013912  50DB               	movf	plusw2,w,c
 29409  013914  E103               	bnz	i2u706_40
 29410  013916  04DE               	decf	postinc2,w,c
 29411  013918  A0D8               	btfss	status,0,c
 29412  01391A  D01C               	goto	i2l1629
 29413  01391C                     i2u706_40:
 29414                           
 29415                           ;Motor.c: 83: {
 29416                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 29417  01391C  C0D8  FFD9         	movff	_lMotor,fsr2l
 29418  013920  C0D9  FFDA         	movff	_lMotor+1,fsr2h
 29419  013924  28DE               	incf	postinc2,w,c
 29420  013926  E104               	bnz	i2u707_40
 29421  013928  0E7F               	movlw	127
 29422  01392A  18DE               	xorwf	postinc2,w,c
 29423  01392C  B4D8               	btfsc	status,2,c
 29424  01392E  D007               	goto	i2l1630
 29425  013930                     i2u707_40:
 29426                           
 29427                           ;Motor.c: 85: lMotor->mDelta --;
 29428  013930  C0D8  FFD9         	movff	_lMotor,fsr2l
 29429  013934  C0D9  FFDA         	movff	_lMotor+1,fsr2h
 29430  013938  06DE               	decf	postinc2,f,c
 29431  01393A  0E00               	movlw	0
 29432  01393C  5ADD               	subwfb	postdec2,f,c
 29433  01393E                     i2l1630:
 29434                           
 29435                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 29436  01393E  0E96               	movlw	low _PortE
 29437  013940  6E10               	movwf	i2Port_SetPin@pInput,c
 29438  013942  0E03               	movlw	high _PortE
 29439  013944  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29440  013946  0E00               	movlw	0
 29441  013948  6E12               	movwf	i2Port_SetPin@pPin,c
 29442  01394A  0E01               	movlw	1
 29443  01394C  6E13               	movwf	i2Port_SetPin@pValue,c
 29444  01394E  ECB5  F0A2         	call	i2_Port_SetPin	;wreg free
 29445                           
 29446                           ;Motor.c: 88: }
 29447  013952  D01B               	goto	i2l1631
 29448  013954                     i2l1629:
 29449                           
 29450                           ;Motor.c: 89: else
 29451                           ;Motor.c: 90: {
 29452                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 29453  013954  C0D8  FFD9         	movff	_lMotor,fsr2l
 29454  013958  C0D9  FFDA         	movff	_lMotor+1,fsr2h
 29455  01395C  04DE               	decf	postinc2,w,c
 29456  01395E  E104               	bnz	i2u708_40
 29457  013960  0E80               	movlw	128
 29458  013962  18DE               	xorwf	postinc2,w,c
 29459  013964  B4D8               	btfsc	status,2,c
 29460  013966  D007               	goto	i2l1632
 29461  013968                     i2u708_40:
 29462                           
 29463                           ;Motor.c: 92: lMotor->mDelta ++;
 29464  013968  C0D8  FFD9         	movff	_lMotor,fsr2l
 29465  01396C  C0D9  FFDA         	movff	_lMotor+1,fsr2h
 29466  013970  2ADE               	incf	postinc2,f,c
 29467  013972  0E00               	movlw	0
 29468  013974  22DD               	addwfc	postdec2,f,c
 29469  013976                     i2l1632:
 29470                           
 29471                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 29472  013976  0E96               	movlw	low _PortE
 29473  013978  6E10               	movwf	i2Port_SetPin@pInput,c
 29474  01397A  0E03               	movlw	high _PortE
 29475  01397C  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29476  01397E  0E00               	movlw	0
 29477  013980  6E12               	movwf	i2Port_SetPin@pPin,c
 29478  013982  0E00               	movlw	0
 29479  013984  6E13               	movwf	i2Port_SetPin@pValue,c
 29480  013986  ECB5  F0A2         	call	i2_Port_SetPin	;wreg free
 29481  01398A                     i2l1631:
 29482                           
 29483                           ;Motor.c: 95: }
 29484                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 29485  01398A  0E96               	movlw	low _PortE
 29486  01398C  6E10               	movwf	i2Port_SetPin@pInput,c
 29487  01398E  0E03               	movlw	high _PortE
 29488  013990  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29489  013992  0E01               	movlw	1
 29490  013994  6E12               	movwf	i2Port_SetPin@pPin,c
 29491  013996  0E01               	movlw	1
 29492  013998  6E13               	movwf	i2Port_SetPin@pValue,c
 29493  01399A  ECB5  F0A2         	call	i2_Port_SetPin	;wreg free
 29494                           
 29495                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 29496  01399E  0E96               	movlw	low _PortE
 29497  0139A0  6E10               	movwf	i2Port_SetPin@pInput,c
 29498  0139A2  0E03               	movlw	high _PortE
 29499  0139A4  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29500  0139A6  0E01               	movlw	1
 29501  0139A8  6E12               	movwf	i2Port_SetPin@pPin,c
 29502  0139AA  0E00               	movlw	0
 29503  0139AC  6E13               	movwf	i2Port_SetPin@pValue,c
 29504  0139AE  ECB5  F0A2         	call	i2_Port_SetPin	;wreg free
 29505                           
 29506                           ;Motor.c: 101: MXK_Release();
 29507  0139B2  EC77  F0B2         	call	i2_MXK_Release	;wreg free
 29508                           
 29509                           ;Motor.c: 102: Timer0_Restart();
 29510  0139B6  EC43  F0B2         	call	i2_Timer0_Restart	;wreg free
 29511                           
 29512                           ;Motor.c: 103: return;
 29513  0139BA  0012               	return	
 29514  0139BC                     i2l1628:
 29515                           
 29516                           ;Motor.c: 104: }
 29517                           ;Motor.c: 105: MXK_Release();
 29518  0139BC  EC77  F0B2         	call	i2_MXK_Release	;wreg free
 29519                           
 29520                           ;Motor.c: 106: Timer0_Stop();
 29521  0139C0  EC74  F0B2         	call	i2_Timer0_Stop	;wreg free
 29522                           
 29523                           ;Motor.c: 107: return;
 29524  0139C4  0012               	return	
 29525  0139C6                     i2l1627:
 29526                           
 29527                           ;Motor.c: 108: }
 29528                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 29529  0139C6  C0BF  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 29530  0139CA  C0C0  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 29531  0139CE  C0C1  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 29532  0139D2  EC2A  F0B2         	call	i2_MXK_Queue	;wreg free
 29533  0139D6  0012               	return		;funcret
 29534  0139D8                     __end_ofi2_Motor_Step:
 29535                           	opt stack 0
 29536                           tosu	equ	0xFFF
 29537                           tosh	equ	0xFFE
 29538                           tosl	equ	0xFFD
 29539                           pclatu	equ	0xFFB
 29540                           pclath	equ	0xFFA
 29541                           tblptru	equ	0xFF8
 29542                           tblptrh	equ	0xFF7
 29543                           tblptrl	equ	0xFF6
 29544                           tablat	equ	0xFF5
 29545                           prodh	equ	0xFF4
 29546                           prodl	equ	0xFF3
 29547                           intcon	equ	0xFF2
 29548                           indf0	equ	0xFEF
 29549                           postinc0	equ	0xFEE
 29550                           fsr0h	equ	0xFEA
 29551                           fsr0l	equ	0xFE9
 29552                           wreg	equ	0xFE8
 29553                           indf1	equ	0xFE7
 29554                           postdec1	equ	0xFE5
 29555                           fsr1h	equ	0xFE2
 29556                           fsr1l	equ	0xFE1
 29557                           indf2	equ	0xFDF
 29558                           postinc2	equ	0xFDE
 29559                           postdec2	equ	0xFDD
 29560                           plusw2	equ	0xFDB
 29561                           fsr2h	equ	0xFDA
 29562                           fsr2l	equ	0xFD9
 29563                           status	equ	0xFD8
 29564                           
 29565 ;; *************** function i2_Timer0_Stop *****************
 29566 ;; Defined at:
 29567 ;;		line 89 in file "Library/Timer0.c"
 29568 ;; Parameters:    Size  Location     Type
 29569 ;;		None
 29570 ;; Auto vars:     Size  Location     Type
 29571 ;;		None
 29572 ;; Return value:  Size  Location     Type
 29573 ;;                  1    wreg      void 
 29574 ;; Registers used:
 29575 ;;		None
 29576 ;; Tracked objects:
 29577 ;;		On entry : 0/0
 29578 ;;		On exit  : 0/0
 29579 ;;		Unchanged: 0/0
 29580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29584 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29585 ;;Total ram usage:        0 bytes
 29586 ;; Hardware stack levels used:    1
 29587 ;; This function calls:
 29588 ;;		Nothing
 29589 ;; This function is called by:
 29590 ;;		_Timer0_ISR
 29591 ;;		i2_Motor_Step
 29592 ;; This function uses a non-reentrant model
 29593 ;;
 29594                           
 29595                           	psect	text157
 29596  0164E8                     __ptext157:
 29597                           	opt stack 0
 29598  0164E8                     i2_Timer0_Stop:
 29599                           	opt stack 17
 29600                           
 29601                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 29602                           
 29603                           ;incstack = 0
 29604  0164E8  9AF2               	bcf	intcon,5,c	;volatile
 29605                           
 29606                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 29607  0164EA  94F2               	bcf	intcon,2,c	;volatile
 29608  0164EC  0012               	return		;funcret
 29609  0164EE                     __end_ofi2_Timer0_Stop:
 29610                           	opt stack 0
 29611                           tosu	equ	0xFFF
 29612                           tosh	equ	0xFFE
 29613                           tosl	equ	0xFFD
 29614                           pclatu	equ	0xFFB
 29615                           pclath	equ	0xFFA
 29616                           tblptru	equ	0xFF8
 29617                           tblptrh	equ	0xFF7
 29618                           tblptrl	equ	0xFF6
 29619                           tablat	equ	0xFF5
 29620                           prodh	equ	0xFF4
 29621                           prodl	equ	0xFF3
 29622                           intcon	equ	0xFF2
 29623                           indf0	equ	0xFEF
 29624                           postinc0	equ	0xFEE
 29625                           fsr0h	equ	0xFEA
 29626                           fsr0l	equ	0xFE9
 29627                           wreg	equ	0xFE8
 29628                           indf1	equ	0xFE7
 29629                           postdec1	equ	0xFE5
 29630                           fsr1h	equ	0xFE2
 29631                           fsr1l	equ	0xFE1
 29632                           indf2	equ	0xFDF
 29633                           postinc2	equ	0xFDE
 29634                           postdec2	equ	0xFDD
 29635                           plusw2	equ	0xFDB
 29636                           fsr2h	equ	0xFDA
 29637                           fsr2l	equ	0xFD9
 29638                           status	equ	0xFD8
 29639                           
 29640 ;; *************** function i2_Timer0_Restart *****************
 29641 ;; Defined at:
 29642 ;;		line 83 in file "Library/Timer0.c"
 29643 ;; Parameters:    Size  Location     Type
 29644 ;;		None
 29645 ;; Auto vars:     Size  Location     Type
 29646 ;;		None
 29647 ;; Return value:  Size  Location     Type
 29648 ;;                  1    wreg      void 
 29649 ;; Registers used:
 29650 ;;		None
 29651 ;; Tracked objects:
 29652 ;;		On entry : 0/0
 29653 ;;		On exit  : 0/0
 29654 ;;		Unchanged: 0/0
 29655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29659 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29660 ;;Total ram usage:        0 bytes
 29661 ;; Hardware stack levels used:    1
 29662 ;; This function calls:
 29663 ;;		Nothing
 29664 ;; This function is called by:
 29665 ;;		i2_Motor_Step
 29666 ;; This function uses a non-reentrant model
 29667 ;;
 29668                           
 29669                           	psect	text158
 29670  016486                     __ptext158:
 29671                           	opt stack 0
 29672  016486                     i2_Timer0_Restart:
 29673                           	opt stack 16
 29674                           
 29675                           ;Timer0.c: 85: TMR0 = COUNTER;
 29676                           
 29677                           ;incstack = 0
 29678  016486  C029  FFD6         	movff	_COUNTER,4054	;volatile
 29679  01648A  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 29680                           
 29681                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 29682  01648E  8AF2               	bsf	intcon,5,c	;volatile
 29683  016490  0012               	return		;funcret
 29684  016492                     __end_ofi2_Timer0_Restart:
 29685                           	opt stack 0
 29686                           tosu	equ	0xFFF
 29687                           tosh	equ	0xFFE
 29688                           tosl	equ	0xFFD
 29689                           pclatu	equ	0xFFB
 29690                           pclath	equ	0xFFA
 29691                           tblptru	equ	0xFF8
 29692                           tblptrh	equ	0xFF7
 29693                           tblptrl	equ	0xFF6
 29694                           tablat	equ	0xFF5
 29695                           prodh	equ	0xFF4
 29696                           prodl	equ	0xFF3
 29697                           intcon	equ	0xFF2
 29698                           indf0	equ	0xFEF
 29699                           postinc0	equ	0xFEE
 29700                           fsr0h	equ	0xFEA
 29701                           fsr0l	equ	0xFE9
 29702                           wreg	equ	0xFE8
 29703                           indf1	equ	0xFE7
 29704                           postdec1	equ	0xFE5
 29705                           fsr1h	equ	0xFE2
 29706                           fsr1l	equ	0xFE1
 29707                           indf2	equ	0xFDF
 29708                           postinc2	equ	0xFDE
 29709                           postdec2	equ	0xFDD
 29710                           plusw2	equ	0xFDB
 29711                           fsr2h	equ	0xFDA
 29712                           fsr2l	equ	0xFD9
 29713                           status	equ	0xFD8
 29714                           
 29715 ;; *************** function i2_Port_SetPin *****************
 29716 ;; Defined at:
 29717 ;;		line 247 in file "Library/Port.c"
 29718 ;; Parameters:    Size  Location     Type
 29719 ;;  pInput          2   15[COMRAM] const PTR struct Port
 29720 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 29721 ;;  pPin            1   17[COMRAM] enum E6750
 29722 ;;  pValue          1   18[COMRAM] unsigned char 
 29723 ;; Auto vars:     Size  Location     Type
 29724 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 29725 ;; Return value:  Size  Location     Type
 29726 ;;                  1    wreg      void 
 29727 ;; Registers used:
 29728 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29729 ;; Tracked objects:
 29730 ;;		On entry : 0/0
 29731 ;;		On exit  : 0/0
 29732 ;;		Unchanged: 0/0
 29733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29734 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29735 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29737 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29738 ;;Total ram usage:        5 bytes
 29739 ;; Hardware stack levels used:    1
 29740 ;; Hardware stack levels required when called:    3
 29741 ;; This function calls:
 29742 ;;		i2_Byte_SetBit
 29743 ;;		i2_Word_GetPair
 29744 ;; This function is called by:
 29745 ;;		i2_Motor_Step
 29746 ;; This function uses a non-reentrant model
 29747 ;;
 29748                           
 29749                           	psect	text159
 29750  01456A                     __ptext159:
 29751                           	opt stack 0
 29752  01456A                     i2_Port_SetPin:
 29753                           	opt stack 13
 29754                           
 29755                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 29756                           
 29757                           ;incstack = 0
 29758  01456A  0E08               	movlw	8
 29759  01456C  2410               	addwf	i2Port_SetPin@pInput,w,c
 29760  01456E  6E0D               	movwf	i2Word_GetPair@pInput,c
 29761  014570  0E00               	movlw	0
 29762  014572  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 29763  014574  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 29764  014576  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 29765  01457A  ECEF  F0AF         	call	i2_Word_GetPair	;wreg free
 29766  01457E  6E14               	movwf	i2Port_SetPin@Type,c
 29767                           
 29768                           ;Port.c: 250: switch (Type)
 29769  014580  D03B               	goto	i2l427
 29770  014582                     
 29771                           ;Port.c: 256: pValue &= 1;
 29772  014582  0E01               	movlw	1
 29773  014584  1613               	andwf	i2Port_SetPin@pValue,f,c
 29774                           
 29775                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 29776  014586  EE20 F002          	lfsr	2,2
 29777  01458A  5010               	movf	i2Port_SetPin@pInput,w,c
 29778  01458C  26D9               	addwf	fsr2l,f,c
 29779  01458E  5011               	movf	i2Port_SetPin@pInput+1,w,c
 29780  014590  22DA               	addwfc	fsr2h,f,c
 29781  014592  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 29782  014596  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 29783  01459A  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 29784  01459E  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 29785  0145A2  ECDF  F0AC         	call	i2_Byte_SetBit	;wreg free
 29786                           
 29787                           ;Port.c: 258: break;
 29788  0145A6  0012               	return	
 29789  0145A8                     
 29790                           ;Port.c: 261: pValue &= 1;
 29791  0145A8  0E01               	movlw	1
 29792  0145AA  1613               	andwf	i2Port_SetPin@pValue,f,c
 29793                           
 29794                           ;Port.c: 262: pValue ^= 1;
 29795  0145AC  0E01               	movlw	1
 29796  0145AE  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 29797                           
 29798                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 29799  0145B0  EE20 F002          	lfsr	2,2
 29800  0145B4  5010               	movf	i2Port_SetPin@pInput,w,c
 29801  0145B6  26D9               	addwf	fsr2l,f,c
 29802  0145B8  5011               	movf	i2Port_SetPin@pInput+1,w,c
 29803  0145BA  22DA               	addwfc	fsr2h,f,c
 29804  0145BC  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 29805  0145C0  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 29806  0145C4  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 29807  0145C8  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 29808  0145CC  ECDF  F0AC         	call	i2_Byte_SetBit	;wreg free
 29809                           
 29810                           ;Port.c: 264: break;
 29811  0145D0  0012               	return	
 29812  0145D2                     
 29813                           ;Port.c: 266: pValue &= 1;
 29814  0145D2  0E01               	movlw	1
 29815  0145D4  1613               	andwf	i2Port_SetPin@pValue,f,c
 29816                           
 29817                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 29818  0145D6  EE20 F004          	lfsr	2,4
 29819  0145DA  5010               	movf	i2Port_SetPin@pInput,w,c
 29820  0145DC  26D9               	addwf	fsr2l,f,c
 29821  0145DE  5011               	movf	i2Port_SetPin@pInput+1,w,c
 29822  0145E0  22DA               	addwfc	fsr2h,f,c
 29823  0145E2  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 29824  0145E6  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 29825  0145EA  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 29826  0145EE  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 29827  0145F2  ECDF  F0AC         	call	i2_Byte_SetBit	;wreg free
 29828                           
 29829                           ;Port.c: 269: }
 29830                           
 29831                           ;Port.c: 268: break;
 29832  0145F6  0012               	return	
 29833  0145F8                     i2l427:
 29834  0145F8  5014               	movf	i2Port_SetPin@Type,w,c
 29835                           
 29836                           ; Switch size 1, requested type "space"
 29837                           ; Number of cases is 4, Range of values is 0 to 3
 29838                           ; switch strategies available:
 29839                           ; Name         Instructions Cycles
 29840                           ; simple_byte           13     7 (average)
 29841                           ;	Chosen strategy is simple_byte
 29842  0145FA  0A00               	xorlw	0	; case 0
 29843  0145FC  B4D8               	btfsc	status,2,c
 29844  0145FE  0012               	return	
 29845  014600  0A01               	xorlw	1	; case 1
 29846  014602  B4D8               	btfsc	status,2,c
 29847  014604  D7BE               	goto	i2l430
 29848  014606  0A03               	xorlw	3	; case 2
 29849  014608  B4D8               	btfsc	status,2,c
 29850  01460A  D7CE               	goto	i2l432
 29851  01460C  0A01               	xorlw	1	; case 3
 29852  01460E  A4D8               	btfss	status,2,c
 29853  014610  0012               	return	
 29854  014612  D7DF               	goto	i2l433
 29855  014614                     __end_ofi2_Port_SetPin:
 29856                           	opt stack 0
 29857                           tosu	equ	0xFFF
 29858                           tosh	equ	0xFFE
 29859                           tosl	equ	0xFFD
 29860                           pclatu	equ	0xFFB
 29861                           pclath	equ	0xFFA
 29862                           tblptru	equ	0xFF8
 29863                           tblptrh	equ	0xFF7
 29864                           tblptrl	equ	0xFF6
 29865                           tablat	equ	0xFF5
 29866                           prodh	equ	0xFF4
 29867                           prodl	equ	0xFF3
 29868                           intcon	equ	0xFF2
 29869                           indf0	equ	0xFEF
 29870                           postinc0	equ	0xFEE
 29871                           fsr0h	equ	0xFEA
 29872                           fsr0l	equ	0xFE9
 29873                           wreg	equ	0xFE8
 29874                           indf1	equ	0xFE7
 29875                           postdec1	equ	0xFE5
 29876                           fsr1h	equ	0xFE2
 29877                           fsr1l	equ	0xFE1
 29878                           indf2	equ	0xFDF
 29879                           postinc2	equ	0xFDE
 29880                           postdec2	equ	0xFDD
 29881                           plusw2	equ	0xFDB
 29882                           fsr2h	equ	0xFDA
 29883                           fsr2l	equ	0xFD9
 29884                           status	equ	0xFD8
 29885                           
 29886 ;; *************** function i2_Word_GetPair *****************
 29887 ;; Defined at:
 29888 ;;		line 156 in file "Library/Types.c"
 29889 ;; Parameters:    Size  Location     Type
 29890 ;;  pInput          2   12[COMRAM] PTR struct Word
 29891 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 29892 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 29893 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 29894 ;;		 -> PortC(10), PortF(10), NULL(0), 
 29895 ;;  pPair           1   14[COMRAM] unsigned char 
 29896 ;; Auto vars:     Size  Location     Type
 29897 ;;		None
 29898 ;; Return value:  Size  Location     Type
 29899 ;;                  1    wreg      unsigned char 
 29900 ;; Registers used:
 29901 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29902 ;; Tracked objects:
 29903 ;;		On entry : 0/0
 29904 ;;		On exit  : 0/0
 29905 ;;		Unchanged: 0/0
 29906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29907 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29910 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29911 ;;Total ram usage:        3 bytes
 29912 ;; Hardware stack levels used:    1
 29913 ;; Hardware stack levels required when called:    2
 29914 ;; This function calls:
 29915 ;;		i2_Byte_GetPair
 29916 ;; This function is called by:
 29917 ;;		i2_Port_SetPin
 29918 ;; This function uses a non-reentrant model
 29919 ;;
 29920                           
 29921                           	psect	text160
 29922  015FDE                     __ptext160:
 29923                           	opt stack 0
 29924  015FDE                     i2_Word_GetPair:
 29925                           	opt stack 13
 29926                           
 29927                           ;Types.c: 158: if (pPair >= 4)
 29928                           
 29929                           ;incstack = 0
 29930  015FDE  0E03               	movlw	3
 29931  015FE0  640F               	cpfsgt	i2Word_GetPair@pPair,c
 29932  015FE2  D00C               	goto	i2l781
 29933                           
 29934                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 29935  015FE4  0E01               	movlw	1
 29936  015FE6  240D               	addwf	i2Word_GetPair@pInput,w,c
 29937  015FE8  6E0A               	movwf	i2Byte_GetPair@pInput,c
 29938  015FEA  0E00               	movlw	0
 29939  015FEC  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 29940  015FEE  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 29941  015FF0  500F               	movf	i2Word_GetPair@pPair,w,c
 29942  015FF2  0FFC               	addlw	252
 29943  015FF4  6E0C               	movwf	i2Byte_GetPair@pPair,c
 29944  015FF6  EC6B  F0B1         	call	i2_Byte_GetPair	;wreg free
 29945  015FFA  0012               	return	
 29946  015FFC                     i2l781:
 29947                           
 29948                           ;Types.c: 160: else
 29949                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 29950  015FFC  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 29951  016000  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 29952  016004  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 29953  016008  EC6B  F0B1         	call	i2_Byte_GetPair	;wreg free
 29954  01600C  0012               	return	
 29955  01600E                     __end_ofi2_Word_GetPair:
 29956                           	opt stack 0
 29957                           tosu	equ	0xFFF
 29958                           tosh	equ	0xFFE
 29959                           tosl	equ	0xFFD
 29960                           pclatu	equ	0xFFB
 29961                           pclath	equ	0xFFA
 29962                           tblptru	equ	0xFF8
 29963                           tblptrh	equ	0xFF7
 29964                           tblptrl	equ	0xFF6
 29965                           tablat	equ	0xFF5
 29966                           prodh	equ	0xFF4
 29967                           prodl	equ	0xFF3
 29968                           intcon	equ	0xFF2
 29969                           indf0	equ	0xFEF
 29970                           postinc0	equ	0xFEE
 29971                           fsr0h	equ	0xFEA
 29972                           fsr0l	equ	0xFE9
 29973                           wreg	equ	0xFE8
 29974                           indf1	equ	0xFE7
 29975                           postdec1	equ	0xFE5
 29976                           fsr1h	equ	0xFE2
 29977                           fsr1l	equ	0xFE1
 29978                           indf2	equ	0xFDF
 29979                           postinc2	equ	0xFDE
 29980                           postdec2	equ	0xFDD
 29981                           plusw2	equ	0xFDB
 29982                           fsr2h	equ	0xFDA
 29983                           fsr2l	equ	0xFD9
 29984                           status	equ	0xFD8
 29985                           
 29986 ;; *************** function i2_Byte_GetPair *****************
 29987 ;; Defined at:
 29988 ;;		line 87 in file "Library/Types.c"
 29989 ;; Parameters:    Size  Location     Type
 29990 ;;  pInput          2    9[COMRAM] PTR struct Byte
 29991 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 29992 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 29993 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 29994 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 29995 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 29996 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 29997 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 29998 ;;		 -> NULL(0), 
 29999 ;;  pPair           1   11[COMRAM] unsigned char 
 30000 ;; Auto vars:     Size  Location     Type
 30001 ;;		None
 30002 ;; Return value:  Size  Location     Type
 30003 ;;                  1    wreg      unsigned char 
 30004 ;; Registers used:
 30005 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30006 ;; Tracked objects:
 30007 ;;		On entry : 0/0
 30008 ;;		On exit  : 0/0
 30009 ;;		Unchanged: 0/0
 30010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30011 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30014 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30015 ;;Total ram usage:        3 bytes
 30016 ;; Hardware stack levels used:    1
 30017 ;; Hardware stack levels required when called:    1
 30018 ;; This function calls:
 30019 ;;		i2_Byte_GetZone
 30020 ;; This function is called by:
 30021 ;;		i2_Word_GetPair
 30022 ;; This function uses a non-reentrant model
 30023 ;;
 30024                           
 30025                           	psect	text161
 30026  0162D6                     __ptext161:
 30027                           	opt stack 0
 30028  0162D6                     i2_Byte_GetPair:
 30029                           	opt stack 13
 30030                           
 30031                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 30032                           
 30033                           ;incstack = 0
 30034  0162D6  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 30035  0162DA  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 30036  0162DE  0E04               	movlw	4
 30037  0162E0  6E03               	movwf	i2Byte_GetZone@pMax,c
 30038  0162E2  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 30039  0162E6  0E02               	movlw	2
 30040  0162E8  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 30041  0162EA  EC2A  F0A8         	call	i2_Byte_GetZone	;wreg free
 30042  0162EE  0012               	return	
 30043  0162F0                     __end_ofi2_Byte_GetPair:
 30044                           	opt stack 0
 30045                           tosu	equ	0xFFF
 30046                           tosh	equ	0xFFE
 30047                           tosl	equ	0xFFD
 30048                           pclatu	equ	0xFFB
 30049                           pclath	equ	0xFFA
 30050                           tblptru	equ	0xFF8
 30051                           tblptrh	equ	0xFF7
 30052                           tblptrl	equ	0xFF6
 30053                           tablat	equ	0xFF5
 30054                           prodh	equ	0xFF4
 30055                           prodl	equ	0xFF3
 30056                           intcon	equ	0xFF2
 30057                           indf0	equ	0xFEF
 30058                           postinc0	equ	0xFEE
 30059                           fsr0h	equ	0xFEA
 30060                           fsr0l	equ	0xFE9
 30061                           wreg	equ	0xFE8
 30062                           indf1	equ	0xFE7
 30063                           postdec1	equ	0xFE5
 30064                           fsr1h	equ	0xFE2
 30065                           fsr1l	equ	0xFE1
 30066                           indf2	equ	0xFDF
 30067                           postinc2	equ	0xFDE
 30068                           postdec2	equ	0xFDD
 30069                           plusw2	equ	0xFDB
 30070                           fsr2h	equ	0xFDA
 30071                           fsr2l	equ	0xFD9
 30072                           status	equ	0xFD8
 30073                           
 30074 ;; *************** function i2_Byte_GetZone *****************
 30075 ;; Defined at:
 30076 ;;		line 64 in file "Library/Types.c"
 30077 ;; Parameters:    Size  Location     Type
 30078 ;;  pInput          2    0[COMRAM] PTR struct Byte
 30079 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 30080 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 30081 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 30082 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 30083 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 30084 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 30085 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 30086 ;;		 -> NULL(0), 
 30087 ;;  pMax            1    2[COMRAM] unsigned char 
 30088 ;;  pChunk          1    3[COMRAM] unsigned char 
 30089 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 30090 ;; Auto vars:     Size  Location     Type
 30091 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 30092 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 30093 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 30094 ;; Return value:  Size  Location     Type
 30095 ;;                  1    wreg      unsigned char 
 30096 ;; Registers used:
 30097 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 30098 ;; Tracked objects:
 30099 ;;		On entry : 0/0
 30100 ;;		On exit  : 0/0
 30101 ;;		Unchanged: 0/0
 30102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30103 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30104 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30105 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30106 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30107 ;;Total ram usage:        9 bytes
 30108 ;; Hardware stack levels used:    1
 30109 ;; This function calls:
 30110 ;;		Nothing
 30111 ;; This function is called by:
 30112 ;;		i2_Byte_GetPair
 30113 ;; This function uses a non-reentrant model
 30114 ;;
 30115                           
 30116                           	psect	text162
 30117  015054                     __ptext162:
 30118                           	opt stack 0
 30119  015054                     i2_Byte_GetZone:
 30120                           	opt stack 13
 30121                           
 30122                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 30123                           
 30124                           ;incstack = 0
 30125  015054  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 30126  015058  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 30127  01505C  0E00               	movlw	low (__mediumconst shr (0+16))
 30128  01505E  6EF8               	movwf	tblptru,c
 30129  015060  0E0F               	movlw	(high __ramtop+-1)
 30130  015062  64F7               	cpfsgt	tblptrh,c
 30131  015064  D003               	bra	i2u483_47
 30132  015066  0008               	tblrd		*
 30133  015068  50F5               	movf	tablat,w,c
 30134  01506A  D005               	bra	i2u483_40
 30135  01506C                     i2u483_47:
 30136  01506C  CFF6 FFE9          	movff	tblptrl,fsr0l
 30137  015070  CFF7 FFEA          	movff	tblptrh,fsr0h
 30138  015074  50EF               	movf	indf0,w,c
 30139  015076                     i2u483_40:
 30140  015076  6E09               	movwf	i2Byte_GetZone@Output,c
 30141                           
 30142                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 30143  015078  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 30144  01507A  0D01               	mullw	1
 30145  01507C  0E73               	movlw	low _MASKS
 30146  01507E  24F3               	addwf	prodl,w,c
 30147  015080  6EF6               	movwf	tblptrl,c
 30148  015082  0EFD               	movlw	high _MASKS
 30149  015084  20F4               	addwfc	prodh,w,c
 30150  015086  6EF7               	movwf	tblptrh,c
 30151  015088                     	if	1	;There are 3 active tblptr bytes
 30152  015088  6AF8               	clrf	tblptru,c
 30153  01508A  0E00               	movlw	low (__mediumconst shr (0+16))
 30154  01508C  22F8               	addwfc	tblptru,f,c
 30155  01508E                     	endif
 30156  01508E  0008               	tblrd		*
 30157  015090  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 30158                           
 30159                           ;Types.c: 68: UINT8 Offset = 0;
 30160  015094  0E00               	movlw	0
 30161  015096  6E08               	movwf	i2Byte_GetZone@Offset,c
 30162                           
 30163                           ;Types.c: 70: while (pChunk >= pMax)
 30164  015098  D003               	goto	i2l732
 30165  01509A                     
 30166                           ;Types.c: 71: {
 30167                           ;Types.c: 72: pChunk -= pMax;
 30168  01509A  5003               	movf	i2Byte_GetZone@pMax,w,c
 30169  01509C  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 30170                           
 30171                           ;Types.c: 73: Offset += 1;
 30172  01509E  2A08               	incf	i2Byte_GetZone@Offset,f,c
 30173  0150A0                     i2l732:
 30174  0150A0  5003               	movf	i2Byte_GetZone@pMax,w,c
 30175  0150A2  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 30176  0150A4  B0D8               	btfsc	status,0,c
 30177  0150A6  D7F9               	goto	i2l733
 30178                           
 30179                           ;Types.c: 74: }
 30180                           ;Types.c: 75: pChunk *= pChunkSize;
 30181  0150A8  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 30182  0150AA  0204               	mulwf	i2Byte_GetZone@pChunk,c
 30183  0150AC  50F3               	movf	prodl,w,c
 30184  0150AE  6E04               	movwf	i2Byte_GetZone@pChunk,c
 30185                           
 30186                           ;Types.c: 76: pChunk += Offset;
 30187  0150B0  5008               	movf	i2Byte_GetZone@Offset,w,c
 30188  0150B2  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 30189                           
 30190                           ;Types.c: 78: Output >>= pChunk;
 30191  0150B4  2804               	incf	i2Byte_GetZone@pChunk,w,c
 30192  0150B6  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 30193  0150B8  D002               	goto	i2u485_40
 30194  0150BA                     i2u485_45:
 30195  0150BA  90D8               	bcf	status,0,c
 30196  0150BC  3209               	rrcf	i2Byte_GetZone@Output,f,c
 30197  0150BE                     i2u485_40:
 30198  0150BE  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 30199  0150C0  D7FC               	goto	i2u485_45
 30200                           
 30201                           ;Types.c: 79: Output &= MASK;
 30202  0150C2  5007               	movf	i2Byte_GetZone@MASK,w,c
 30203  0150C4  1609               	andwf	i2Byte_GetZone@Output,f,c
 30204                           
 30205                           ;Types.c: 80: return Output;
 30206  0150C6  5009               	movf	i2Byte_GetZone@Output,w,c
 30207  0150C8  0012               	return	
 30208  0150CA                     __end_ofi2_Byte_GetZone:
 30209                           	opt stack 0
 30210                           tosu	equ	0xFFF
 30211                           tosh	equ	0xFFE
 30212                           tosl	equ	0xFFD
 30213                           pclatu	equ	0xFFB
 30214                           pclath	equ	0xFFA
 30215                           tblptru	equ	0xFF8
 30216                           tblptrh	equ	0xFF7
 30217                           tblptrl	equ	0xFF6
 30218                           tablat	equ	0xFF5
 30219                           prodh	equ	0xFF4
 30220                           prodl	equ	0xFF3
 30221                           intcon	equ	0xFF2
 30222                           indf0	equ	0xFEF
 30223                           postinc0	equ	0xFEE
 30224                           fsr0h	equ	0xFEA
 30225                           fsr0l	equ	0xFE9
 30226                           wreg	equ	0xFE8
 30227                           indf1	equ	0xFE7
 30228                           postdec1	equ	0xFE5
 30229                           fsr1h	equ	0xFE2
 30230                           fsr1l	equ	0xFE1
 30231                           indf2	equ	0xFDF
 30232                           postinc2	equ	0xFDE
 30233                           postdec2	equ	0xFDD
 30234                           plusw2	equ	0xFDB
 30235                           fsr2h	equ	0xFDA
 30236                           fsr2l	equ	0xFD9
 30237                           status	equ	0xFD8
 30238                           
 30239 ;; *************** function i2_Byte_SetBit *****************
 30240 ;; Defined at:
 30241 ;;		line 32 in file "Library/Types.c"
 30242 ;; Parameters:    Size  Location     Type
 30243 ;;  pInput          2    0[COMRAM] PTR struct Byte
 30244 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 30245 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 30246 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 30247 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 30248 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 30249 ;;		 -> NULL(0), 
 30250 ;;  pBit            1    2[COMRAM] unsigned char 
 30251 ;;  pValue          1    3[COMRAM] unsigned char 
 30252 ;; Auto vars:     Size  Location     Type
 30253 ;;		None
 30254 ;; Return value:  Size  Location     Type
 30255 ;;                  1    wreg      void 
 30256 ;; Registers used:
 30257 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 30258 ;; Tracked objects:
 30259 ;;		On entry : 0/0
 30260 ;;		On exit  : 0/0
 30261 ;;		Unchanged: 0/0
 30262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30263 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30264 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30265 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30266 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30267 ;;Total ram usage:        7 bytes
 30268 ;; Hardware stack levels used:    1
 30269 ;; This function calls:
 30270 ;;		Nothing
 30271 ;; This function is called by:
 30272 ;;		i2_Port_SetPin
 30273 ;; This function uses a non-reentrant model
 30274 ;;
 30275                           
 30276                           	psect	text163
 30277  0159BE                     __ptext163:
 30278                           	opt stack 0
 30279  0159BE                     i2_Byte_SetBit:
 30280                           	opt stack 15
 30281                           
 30282                           ;Types.c: 34: pValue &= 1;
 30283                           
 30284                           ;incstack = 0
 30285  0159BE  0E01               	movlw	1
 30286  0159C0  1604               	andwf	i2Byte_SetBit@pValue,f,c
 30287                           
 30288                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 30289  0159C2  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 30290  0159C6  0E01               	movlw	1
 30291  0159C8  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 30292  0159CA  2A05               	incf	??i2_Byte_SetBit,f,c
 30293  0159CC  D002               	goto	i2u540_44
 30294  0159CE                     i2u540_45:
 30295  0159CE  90D8               	bcf	status,0,c
 30296  0159D0  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 30297  0159D2                     i2u540_44:
 30298  0159D2  2E05               	decfsz	??i2_Byte_SetBit,f,c
 30299  0159D4  D7FC               	goto	i2u540_45
 30300  0159D6  5006               	movf	??i2_Byte_SetBit+1,w,c
 30301  0159D8  0AFF               	xorlw	255
 30302  0159DA  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 30303  0159DC  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 30304  0159E0  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 30305  0159E4  5007               	movf	??i2_Byte_SetBit+2,w,c
 30306  0159E6  16DF               	andwf	indf2,f,c
 30307                           
 30308                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 30309  0159E8  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 30310  0159EC  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 30311  0159F0  2A05               	incf	??i2_Byte_SetBit,f,c
 30312  0159F2  D002               	goto	i2u541_44
 30313  0159F4                     i2u541_45:
 30314  0159F4  90D8               	bcf	status,0,c
 30315  0159F6  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 30316  0159F8                     i2u541_44:
 30317  0159F8  2E05               	decfsz	??i2_Byte_SetBit,f,c
 30318  0159FA  D7FC               	goto	i2u541_45
 30319  0159FC  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 30320  015A00  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 30321  015A04  5006               	movf	??i2_Byte_SetBit+1,w,c
 30322  015A06  12DF               	iorwf	indf2,f,c
 30323  015A08  0012               	return		;funcret
 30324  015A0A                     __end_ofi2_Byte_SetBit:
 30325                           	opt stack 0
 30326                           tosu	equ	0xFFF
 30327                           tosh	equ	0xFFE
 30328                           tosl	equ	0xFFD
 30329                           pclatu	equ	0xFFB
 30330                           pclath	equ	0xFFA
 30331                           tblptru	equ	0xFF8
 30332                           tblptrh	equ	0xFF7
 30333                           tblptrl	equ	0xFF6
 30334                           tablat	equ	0xFF5
 30335                           prodh	equ	0xFF4
 30336                           prodl	equ	0xFF3
 30337                           intcon	equ	0xFF2
 30338                           indf0	equ	0xFEF
 30339                           postinc0	equ	0xFEE
 30340                           fsr0h	equ	0xFEA
 30341                           fsr0l	equ	0xFE9
 30342                           wreg	equ	0xFE8
 30343                           indf1	equ	0xFE7
 30344                           postdec1	equ	0xFE5
 30345                           fsr1h	equ	0xFE2
 30346                           fsr1l	equ	0xFE1
 30347                           indf2	equ	0xFDF
 30348                           postinc2	equ	0xFDE
 30349                           postdec2	equ	0xFDD
 30350                           plusw2	equ	0xFDB
 30351                           fsr2h	equ	0xFDA
 30352                           fsr2l	equ	0xFD9
 30353                           status	equ	0xFD8
 30354                           
 30355 ;; *************** function i2_MXK_SwitchTo *****************
 30356 ;; Defined at:
 30357 ;;		line 105 in file "Library/MXK.c"
 30358 ;; Parameters:    Size  Location     Type
 30359 ;;  pModule         1    wreg     enum E6927
 30360 ;; Auto vars:     Size  Location     Type
 30361 ;;  pModule         1    7[COMRAM] enum E6927
 30362 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 30363 ;; Return value:  Size  Location     Type
 30364 ;;                  1    wreg      unsigned char 
 30365 ;; Registers used:
 30366 ;;		wreg, status,2, status,0, cstack
 30367 ;; Tracked objects:
 30368 ;;		On entry : 0/0
 30369 ;;		On exit  : 0/0
 30370 ;;		Unchanged: 0/0
 30371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30373 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30375 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30376 ;;Total ram usage:        2 bytes
 30377 ;; Hardware stack levels used:    1
 30378 ;; Hardware stack levels required when called:    1
 30379 ;; This function calls:
 30380 ;;		i2_delay_us
 30381 ;; This function is called by:
 30382 ;;		i2_Motor_Step
 30383 ;; This function uses a non-reentrant model
 30384 ;;
 30385                           
 30386                           	psect	text164
 30387  015EE2                     __ptext164:
 30388                           	opt stack 0
 30389  015EE2                     i2_MXK_SwitchTo:
 30390                           	opt stack 15
 30391                           
 30392                           ;incstack = 0
 30393                           ;i2MXK_SwitchTo@pModule stored from wreg
 30394  015EE2  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 30395                           
 30396                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 30397  015EE4  5086               	movf	3974,w,c	;volatile
 30398  015EE6  0B0F               	andlw	15
 30399  015EE8  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 30400                           
 30401                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 30402  015EEA  504B               	movf	_Bus_State,w,c
 30403  015EEC  A4D8               	btfss	status,2,c
 30404  015EEE  D002               	goto	i2l1730
 30405                           
 30406                           ;MXK.c: 110: return 0;
 30407  015EF0  0E00               	movlw	0
 30408  015EF2  0012               	return	
 30409  015EF4                     i2l1730:
 30410                           
 30411                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 30412  015EF4  0E00               	movlw	0
 30413  015EF6  6E4B               	movwf	_Bus_State,c
 30414                           
 30415                           ;MXK.c: 114: if (CUR != pModule)
 30416  015EF8  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 30417  015EFA  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 30418  015EFC  B4D8               	btfsc	status,2,c
 30419  015EFE  D00A               	goto	i2l1732
 30420                           
 30421                           ;MXK.c: 115: {
 30422                           ;MXK.c: 116: PORTG &= ~(0xF);
 30423  015F00  0EF0               	movlw	240
 30424  015F02  1686               	andwf	3974,f,c	;volatile
 30425                           
 30426                           ;MXK.c: 117: PORTG |= pModule;
 30427  015F04  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 30428  015F06  1286               	iorwf	3974,f,c	;volatile
 30429                           
 30430                           ;MXK.c: 120: delay_us(10);
 30431  015F08  0E00               	movlw	0
 30432  015F0A  6E02               	movwf	i2delay_us@us+1,c
 30433  015F0C  0E0A               	movlw	10
 30434  015F0E  6E01               	movwf	i2delay_us@us,c
 30435  015F10  EC62  F0AE         	call	i2_delay_us	;wreg free
 30436  015F14                     i2l1732:
 30437                           
 30438                           ;MXK.c: 121: }
 30439                           ;MXK.c: 122: return 1;
 30440  015F14  0E01               	movlw	1
 30441  015F16  0012               	return	
 30442  015F18                     __end_ofi2_MXK_SwitchTo:
 30443                           	opt stack 0
 30444                           tosu	equ	0xFFF
 30445                           tosh	equ	0xFFE
 30446                           tosl	equ	0xFFD
 30447                           pclatu	equ	0xFFB
 30448                           pclath	equ	0xFFA
 30449                           tblptru	equ	0xFF8
 30450                           tblptrh	equ	0xFF7
 30451                           tblptrl	equ	0xFF6
 30452                           tablat	equ	0xFF5
 30453                           prodh	equ	0xFF4
 30454                           prodl	equ	0xFF3
 30455                           intcon	equ	0xFF2
 30456                           indf0	equ	0xFEF
 30457                           postinc0	equ	0xFEE
 30458                           fsr0h	equ	0xFEA
 30459                           fsr0l	equ	0xFE9
 30460                           wreg	equ	0xFE8
 30461                           indf1	equ	0xFE7
 30462                           postdec1	equ	0xFE5
 30463                           fsr1h	equ	0xFE2
 30464                           fsr1l	equ	0xFE1
 30465                           indf2	equ	0xFDF
 30466                           postinc2	equ	0xFDE
 30467                           postdec2	equ	0xFDD
 30468                           plusw2	equ	0xFDB
 30469                           fsr2h	equ	0xFDA
 30470                           fsr2l	equ	0xFD9
 30471                           status	equ	0xFD8
 30472                           
 30473 ;; *************** function i2_delay_us *****************
 30474 ;; Defined at:
 30475 ;;		line 255 in file "Library/Types.c"
 30476 ;; Parameters:    Size  Location     Type
 30477 ;;  us              2    0[COMRAM] unsigned short 
 30478 ;; Auto vars:     Size  Location     Type
 30479 ;;  delay_us        4    2[COMRAM] unsigned long 
 30480 ;; Return value:  Size  Location     Type
 30481 ;;                  1    wreg      void 
 30482 ;; Registers used:
 30483 ;;		wreg, status,2, status,0
 30484 ;; Tracked objects:
 30485 ;;		On entry : 0/0
 30486 ;;		On exit  : 0/0
 30487 ;;		Unchanged: 0/0
 30488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30489 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30490 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30492 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30493 ;;Total ram usage:        6 bytes
 30494 ;; Hardware stack levels used:    1
 30495 ;; This function calls:
 30496 ;;		Nothing
 30497 ;; This function is called by:
 30498 ;;		i2_MXK_SwitchTo
 30499 ;; This function uses a non-reentrant model
 30500 ;;
 30501                           
 30502                           	psect	text165
 30503  015CC4                     __ptext165:
 30504                           	opt stack 0
 30505  015CC4                     i2_delay_us:
 30506                           	opt stack 15
 30507                           
 30508                           ;Types.c: 256: unsigned long u;
 30509                           ;Types.c: 257: while (us--) {
 30510                           
 30511                           ;incstack = 0
 30512  015CC4  D016               	goto	i2u544_40
 30513  015CC6                     i2l9001:
 30514                           
 30515                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 30516  015CC6  0E00               	movlw	0
 30517  015CC8  6E03               	movwf	i2delay_us@u,c
 30518  015CCA  0E00               	movlw	0
 30519  015CCC  6E04               	movwf	i2delay_us@u+1,c
 30520  015CCE  0E00               	movlw	0
 30521  015CD0  6E05               	movwf	i2delay_us@u+2,c
 30522  015CD2  0E00               	movlw	0
 30523  015CD4  6E06               	movwf	i2delay_us@u+3,c
 30524  015CD6                     i2l9003:
 30525  015CD6  5003               	movf	i2delay_us@u,w,c
 30526  015CD8  1004               	iorwf	i2delay_us@u+1,w,c
 30527  015CDA  1005               	iorwf	i2delay_us@u+2,w,c
 30528  015CDC  1006               	iorwf	i2delay_us@u+3,w,c
 30529  015CDE  A4D8               	btfss	status,2,c
 30530  015CE0  D008               	goto	i2u544_40
 30531  015CE2  F000               	nop		; ;# 
 30532  015CE4  0E01               	movlw	1
 30533  015CE6  2603               	addwf	i2delay_us@u,f,c
 30534  015CE8  0E00               	movlw	0
 30535  015CEA  2204               	addwfc	i2delay_us@u+1,f,c
 30536  015CEC  2205               	addwfc	i2delay_us@u+2,f,c
 30537  015CEE  2206               	addwfc	i2delay_us@u+3,f,c
 30538  015CF0  D7F2               	goto	i2l9003
 30539  015CF2                     i2u544_40:
 30540  015CF2  0601               	decf	i2delay_us@us,f,c
 30541  015CF4  A0D8               	btfss	status,0,c
 30542  015CF6  0602               	decf	i2delay_us@us+1,f,c
 30543  015CF8  2801               	incf	i2delay_us@us,w,c
 30544  015CFA  E1E5               	bnz	i2l9001
 30545  015CFC  2802               	incf	i2delay_us@us+1,w,c
 30546  015CFE  B4D8               	btfsc	status,2,c
 30547  015D00  0012               	return	
 30548  015D02  D7E1               	goto	i2l832
 30549  015D04                     __end_ofi2_delay_us:
 30550                           	opt stack 0
 30551                           tosu	equ	0xFFF
 30552                           tosh	equ	0xFFE
 30553                           tosl	equ	0xFFD
 30554                           pclatu	equ	0xFFB
 30555                           pclath	equ	0xFFA
 30556                           tblptru	equ	0xFF8
 30557                           tblptrh	equ	0xFF7
 30558                           tblptrl	equ	0xFF6
 30559                           tablat	equ	0xFF5
 30560                           prodh	equ	0xFF4
 30561                           prodl	equ	0xFF3
 30562                           intcon	equ	0xFF2
 30563                           indf0	equ	0xFEF
 30564                           postinc0	equ	0xFEE
 30565                           fsr0h	equ	0xFEA
 30566                           fsr0l	equ	0xFE9
 30567                           wreg	equ	0xFE8
 30568                           indf1	equ	0xFE7
 30569                           postdec1	equ	0xFE5
 30570                           fsr1h	equ	0xFE2
 30571                           fsr1l	equ	0xFE1
 30572                           indf2	equ	0xFDF
 30573                           postinc2	equ	0xFDE
 30574                           postdec2	equ	0xFDD
 30575                           plusw2	equ	0xFDB
 30576                           fsr2h	equ	0xFDA
 30577                           fsr2l	equ	0xFD9
 30578                           status	equ	0xFD8
 30579                           
 30580 ;; *************** function i2_MXK_Release *****************
 30581 ;; Defined at:
 30582 ;;		line 130 in file "Library/MXK.c"
 30583 ;; Parameters:    Size  Location     Type
 30584 ;;		None
 30585 ;; Auto vars:     Size  Location     Type
 30586 ;;		None
 30587 ;; Return value:  Size  Location     Type
 30588 ;;                  1    wreg      unsigned char 
 30589 ;; Registers used:
 30590 ;;		wreg, status,2, status,0
 30591 ;; Tracked objects:
 30592 ;;		On entry : 0/0
 30593 ;;		On exit  : 0/0
 30594 ;;		Unchanged: 0/0
 30595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30599 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30600 ;;Total ram usage:        0 bytes
 30601 ;; Hardware stack levels used:    1
 30602 ;; This function calls:
 30603 ;;		Nothing
 30604 ;; This function is called by:
 30605 ;;		i2_Motor_Step
 30606 ;; This function uses a non-reentrant model
 30607 ;;
 30608                           
 30609                           	psect	text166
 30610  0164EE                     __ptext166:
 30611                           	opt stack 0
 30612  0164EE                     i2_MXK_Release:
 30613                           	opt stack 16
 30614                           
 30615                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 30616                           
 30617                           ;incstack = 0
 30618  0164EE  0E01               	movlw	1
 30619  0164F0  6E4B               	movwf	_Bus_State,c
 30620                           
 30621                           ;MXK.c: 135: return 1;
 30622                           ;	Return value of i2_MXK_Release is never used
 30623  0164F2  0012               	return	
 30624  0164F4                     __end_ofi2_MXK_Release:
 30625                           	opt stack 0
 30626                           tosu	equ	0xFFF
 30627                           tosh	equ	0xFFE
 30628                           tosl	equ	0xFFD
 30629                           pclatu	equ	0xFFB
 30630                           pclath	equ	0xFFA
 30631                           tblptru	equ	0xFF8
 30632                           tblptrh	equ	0xFF7
 30633                           tblptrl	equ	0xFF6
 30634                           tablat	equ	0xFF5
 30635                           prodh	equ	0xFF4
 30636                           prodl	equ	0xFF3
 30637                           intcon	equ	0xFF2
 30638                           indf0	equ	0xFEF
 30639                           postinc0	equ	0xFEE
 30640                           fsr0h	equ	0xFEA
 30641                           fsr0l	equ	0xFE9
 30642                           wreg	equ	0xFE8
 30643                           indf1	equ	0xFE7
 30644                           postdec1	equ	0xFE5
 30645                           fsr1h	equ	0xFE2
 30646                           fsr1l	equ	0xFE1
 30647                           indf2	equ	0xFDF
 30648                           postinc2	equ	0xFDE
 30649                           postdec2	equ	0xFDD
 30650                           plusw2	equ	0xFDB
 30651                           fsr2h	equ	0xFDA
 30652                           fsr2l	equ	0xFD9
 30653                           status	equ	0xFD8
 30654                           
 30655 ;; *************** function i2_MXK_Queue *****************
 30656 ;; Defined at:
 30657 ;;		line 144 in file "Library/MXK.c"
 30658 ;; Parameters:    Size  Location     Type
 30659 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 30660 ;;		 -> Absolute function(1), Motor_Step(1), 
 30661 ;; Auto vars:     Size  Location     Type
 30662 ;;		None
 30663 ;; Return value:  Size  Location     Type
 30664 ;;                  1    wreg      void 
 30665 ;; Registers used:
 30666 ;;		wreg, status,2, status,0
 30667 ;; Tracked objects:
 30668 ;;		On entry : 0/0
 30669 ;;		On exit  : 0/0
 30670 ;;		Unchanged: 0/0
 30671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30672 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30675 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30676 ;;Total ram usage:        3 bytes
 30677 ;; Hardware stack levels used:    1
 30678 ;; This function calls:
 30679 ;;		Nothing
 30680 ;; This function is called by:
 30681 ;;		i2_Motor_Step
 30682 ;; This function uses a non-reentrant model
 30683 ;;
 30684                           
 30685                           	psect	text167
 30686  016454                     __ptext167:
 30687                           	opt stack 0
 30688  016454                     i2_MXK_Queue:
 30689                           	opt stack 16
 30690                           
 30691                           ;MXK.c: 146: lQueue = pCallback;
 30692                           
 30693                           ;incstack = 0
 30694  016454  C001  F0BC         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 30695  016458  C002  F0BD         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 30696  01645C  C003  F0BE         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 30697  016460  0012               	return		;funcret
 30698  016462                     __end_ofi2_MXK_Queue:
 30699                           	opt stack 0
 30700                           tosu	equ	0xFFF
 30701                           tosh	equ	0xFFE
 30702                           tosl	equ	0xFFD
 30703                           pclatu	equ	0xFFB
 30704                           pclath	equ	0xFFA
 30705                           tblptru	equ	0xFF8
 30706                           tblptrh	equ	0xFF7
 30707                           tblptrl	equ	0xFF6
 30708                           tablat	equ	0xFF5
 30709                           prodh	equ	0xFF4
 30710                           prodl	equ	0xFF3
 30711                           intcon	equ	0xFF2
 30712                           indf0	equ	0xFEF
 30713                           postinc0	equ	0xFEE
 30714                           fsr0h	equ	0xFEA
 30715                           fsr0l	equ	0xFE9
 30716                           wreg	equ	0xFE8
 30717                           indf1	equ	0xFE7
 30718                           postdec1	equ	0xFE5
 30719                           fsr1h	equ	0xFE2
 30720                           fsr1l	equ	0xFE1
 30721                           indf2	equ	0xFDF
 30722                           postinc2	equ	0xFDE
 30723                           postdec2	equ	0xFDD
 30724                           plusw2	equ	0xFDB
 30725                           fsr2h	equ	0xFDA
 30726                           fsr2l	equ	0xFD9
 30727                           status	equ	0xFD8
 30728                           tosu	equ	0xFFF
 30729                           tosh	equ	0xFFE
 30730                           tosl	equ	0xFFD
 30731                           pclatu	equ	0xFFB
 30732                           pclath	equ	0xFFA
 30733                           tblptru	equ	0xFF8
 30734                           tblptrh	equ	0xFF7
 30735                           tblptrl	equ	0xFF6
 30736                           tablat	equ	0xFF5
 30737                           prodh	equ	0xFF4
 30738                           prodl	equ	0xFF3
 30739                           intcon	equ	0xFF2
 30740                           indf0	equ	0xFEF
 30741                           postinc0	equ	0xFEE
 30742                           fsr0h	equ	0xFEA
 30743                           fsr0l	equ	0xFE9
 30744                           wreg	equ	0xFE8
 30745                           indf1	equ	0xFE7
 30746                           postdec1	equ	0xFE5
 30747                           fsr1h	equ	0xFE2
 30748                           fsr1l	equ	0xFE1
 30749                           indf2	equ	0xFDF
 30750                           postinc2	equ	0xFDE
 30751                           postdec2	equ	0xFDD
 30752                           plusw2	equ	0xFDB
 30753                           fsr2h	equ	0xFDA
 30754                           fsr2l	equ	0xFD9
 30755                           status	equ	0xFD8
 30756                           
 30757                           	psect	text168
 30758  000000                     __ptext168:
 30759                           	opt stack 0
 30760                           tosu	equ	0xFFF
 30761                           tosh	equ	0xFFE
 30762                           tosl	equ	0xFFD
 30763                           pclatu	equ	0xFFB
 30764                           pclath	equ	0xFFA
 30765                           tblptru	equ	0xFF8
 30766                           tblptrh	equ	0xFF7
 30767                           tblptrl	equ	0xFF6
 30768                           tablat	equ	0xFF5
 30769                           prodh	equ	0xFF4
 30770                           prodl	equ	0xFF3
 30771                           intcon	equ	0xFF2
 30772                           indf0	equ	0xFEF
 30773                           postinc0	equ	0xFEE
 30774                           fsr0h	equ	0xFEA
 30775                           fsr0l	equ	0xFE9
 30776                           wreg	equ	0xFE8
 30777                           indf1	equ	0xFE7
 30778                           postdec1	equ	0xFE5
 30779                           fsr1h	equ	0xFE2
 30780                           fsr1l	equ	0xFE1
 30781                           indf2	equ	0xFDF
 30782                           postinc2	equ	0xFDE
 30783                           postdec2	equ	0xFDD
 30784                           plusw2	equ	0xFDB
 30785                           fsr2h	equ	0xFDA
 30786                           fsr2l	equ	0xFD9
 30787                           status	equ	0xFD8
 30788                           
 30789                           	psect	rparam
 30790  0000                     tosu	equ	0xFFF
 30791                           tosh	equ	0xFFE
 30792                           tosl	equ	0xFFD
 30793                           pclatu	equ	0xFFB
 30794                           pclath	equ	0xFFA
 30795                           tblptru	equ	0xFF8
 30796                           tblptrh	equ	0xFF7
 30797                           tblptrl	equ	0xFF6
 30798                           tablat	equ	0xFF5
 30799                           prodh	equ	0xFF4
 30800                           prodl	equ	0xFF3
 30801                           intcon	equ	0xFF2
 30802                           indf0	equ	0xFEF
 30803                           postinc0	equ	0xFEE
 30804                           fsr0h	equ	0xFEA
 30805                           fsr0l	equ	0xFE9
 30806                           wreg	equ	0xFE8
 30807                           indf1	equ	0xFE7
 30808                           postdec1	equ	0xFE5
 30809                           fsr1h	equ	0xFE2
 30810                           fsr1l	equ	0xFE1
 30811                           indf2	equ	0xFDF
 30812                           postinc2	equ	0xFDE
 30813                           postdec2	equ	0xFDD
 30814                           plusw2	equ	0xFDB
 30815                           fsr2h	equ	0xFDA
 30816                           fsr2l	equ	0xFD9
 30817                           status	equ	0xFD8
 30818                           
 30819                           	psect	temp
 30820  000051                     btemp:
 30821                           	opt stack 0
 30822  000051                     	ds	1
 30823  0000                     int$flags	set	btemp
 30824  0000                     wtemp6	set	btemp+1
 30825                           tosu	equ	0xFFF
 30826                           tosh	equ	0xFFE
 30827                           tosl	equ	0xFFD
 30828                           pclatu	equ	0xFFB
 30829                           pclath	equ	0xFFA
 30830                           tblptru	equ	0xFF8
 30831                           tblptrh	equ	0xFF7
 30832                           tblptrl	equ	0xFF6
 30833                           tablat	equ	0xFF5
 30834                           prodh	equ	0xFF4
 30835                           prodl	equ	0xFF3
 30836                           intcon	equ	0xFF2
 30837                           indf0	equ	0xFEF
 30838                           postinc0	equ	0xFEE
 30839                           fsr0h	equ	0xFEA
 30840                           fsr0l	equ	0xFE9
 30841                           wreg	equ	0xFE8
 30842                           indf1	equ	0xFE7
 30843                           postdec1	equ	0xFE5
 30844                           fsr1h	equ	0xFE2
 30845                           fsr1l	equ	0xFE1
 30846                           indf2	equ	0xFDF
 30847                           postinc2	equ	0xFDE
 30848                           postdec2	equ	0xFDD
 30849                           plusw2	equ	0xFDB
 30850                           fsr2h	equ	0xFDA
 30851                           fsr2l	equ	0xFD9
 30852                           status	equ	0xFD8


Data Sizes:
    Strings     142
    Constant    730
    Data        29
    BSS         830
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      80
    BANK0           160     89     160
    BANK1           256    256     256
    BANK2           256    256     256
    BANK3           256      8     256
    BANK4           256      2     202
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[7]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 79
		 -> STR_8(CODE[79]), STR_7(CODE[3]), STR_6(CODE[14]), STR_5(CODE[3]), 
		 -> STR_4(CODE[46]), STR_3(CODE[3]), STR_2(CODE[46]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__memset	PTR void  size(2) Largest target is 100
		 -> iRScriptStack(BANK4[100]), 

    load_iRScriptStack@loadByte	PTR void [1] size(2) Largest target is 1
		 -> ?_load_iRScriptStack(BANK0[1]), 

    irobot_query_and_update@packetIDs	PTR void [1] size(2) Largest target is 1
		 -> ?_irobot_query_and_update(BANK0[1]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    Timer0_Start@pFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Motor_Speed@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK3[6]), 

    Motor_Move@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK3[6]), 

    lMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK3[6]), NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    Motor_Init@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK3[6]), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11800I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Voltage@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN0(BANK0[5]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Start@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 
		 -> NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    S11482ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 
		 -> NULL(NULL[0]), 

    ADC_Init@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK3[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK3[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK3[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK3[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK3[2]), PortE..(BANK3[2]), PortB..(BANK3[2]), 
		 -> PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), PortA(BANK3[10]), 
		 -> PortB(BANK3[10]), PortE(BANK3[10]), PortD(BANK3[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK3[2]), PortC..(BANK0[2]), PortD..(BANK3[2]), PortE..(BANK3[2]), 
		 -> PortB..(BANK3[2]), PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), 
		 -> PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), PortD(BANK3[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK3[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK3[2]), PortE..(BANK3[2]), PortB..(BANK3[2]), 
		 -> PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), PortA(BANK3[10]), 
		 -> PortB(BANK3[10]), PortE(BANK3[10]), PortD(BANK3[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK3[2]), PortC..(BANK0[2]), PortD..(BANK3[2]), PortE..(BANK3[2]), 
		 -> PortB..(BANK3[2]), PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), 
		 -> PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK3[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK3[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK3[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK3[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortE(BANK3[10]), PortD(BANK3[10]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK3[10]), PortD(BANK3[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK0[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK3[10]), PortE(BANK3[10]), PortC(BANK0[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortE(BANK3[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK3[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK3[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK3[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK3[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK3[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK3[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK3[10]), TestButton(BANK3[10]), HMIBoard(BANK3[58]), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK3[10]), TestButton(BANK3[10]), HMIBoard(BANK3[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _main->_mode4
    _mode4->___fltol
    _mode2->_Console_Render
    _irobot_move_straight->_irobot_move
    _mode1->___fltol
    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update
    _irobot_query_and_update->_rx_assign
    _rx_assign->_sort_iRBumpDrop
    _printf->_putch
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    _irobot_stop_motion->_irobot_move
    _irobot_move->_load_iRScriptStack
    _irobot_song_play->_eusart_putch
    ___fltol->_ADC_Voltage
    _Motor_Speed->_Timer0_Init
    _Motor_Move->_Timer0_Start
    _HMI_Render->_OutSeg
    _OutSeg->_SPI_Send
    _HMI_Poll->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _Event_TestButton->_LED_Toggle
    _HMI_SetNumber->_itos
    _itos->___lwmod
    ___lwmod->___lwdiv
    _HMI_SetSegments->_ToSegment
    _Event_DIPSwitch->_LED_Toggle
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Console_MakeField->_Byte_GetBit
    _ADC_Voltage->___flmul
    ___flmul->___fldiv
    ___fldiv->___xxtofl
    _init->_HMI_Init
    _irobot_led_power_on->_irobot_leds
    _irobot_leds->_load_iRScriptStack
    _irobot_init_song_0->_eusart_putch
    _irobot_init->_eusart_putch
    _Motor_Init->_Port_SetPinType
    _Timer0_Init->___lldiv
    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _HMI_Init->_Button_Init
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone
    _Byte_SetQuad->_Byte_SetZone
    _ADC_Start->_ADC_SetChannel
    _ADC_Init->_ADC_SetupIO
    _MXK_TestButton->_Port_GetPin
    _MXK_DIPSwitch->_Port_GetQuad
    _HMI_UpSwitch->_Port_GetPin
    _HMI_RightSwitch->_Port_GetPin
    _HMI_LeftSwitch->_Port_GetPin
    _HMI_DownSwitch->_Port_GetPin
    _HMI_DIPSwitch->_Port_GetQuad

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_mode1

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0 1579989
                                              0 BANK4      2     2      0
                            _getMode
                               _init
                              _mode1
                              _mode2
                              _mode3
                              _mode4
 ---------------------------------------------------------------------------------
 (1) _mode4                                                9     9      0  196675
                                             88 BANK0      1     1      0
                                              0 BANK3      4     4      0
                          _ADC_Start
                        _ADC_Voltage
                     _Console_Render
                           _HMI_Poll
                         _HMI_Render
                      _HMI_SetNumber
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                         _Motor_Move
                        _Motor_Speed
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl
                   _irobot_song_play
                 _irobot_stop_motion
                             _printf
                       _update_angle
              _update_bump_and_cliff
                    _update_distance
 ---------------------------------------------------------------------------------
 (1) _mode3                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _mode2                                                2     2      0  181048
                                             44 BANK0      2     2      0
                     _Console_Render
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                           _HMI_Poll
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                     _MXK_TestButton *
               _irobot_move_straight
                   _irobot_song_play
                 _irobot_stop_motion
                             _printf
                       _update_angle
              _update_bump_and_cliff
                    _update_distance
 ---------------------------------------------------------------------------------
 (2) _irobot_move_straight                                 2     0      2    3358
                                             25 BANK0      2     0      2
                        _irobot_move
 ---------------------------------------------------------------------------------
 (1) _mode1                                               16    16      0  193424
                                              0 BANK3      8     8      0
                          _ADC_Start
                        _ADC_Voltage
                     _Console_Render
                           _HMI_Poll
                         _HMI_Render
                      _HMI_SetNumber
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                         _Motor_Move
                        _Motor_Speed
                            ___fldiv
                            ___fltol
                   _irobot_song_play
                 _irobot_stop_motion
                             _printf
                       _update_angle
              _update_bump_and_cliff
                    _update_distance
 ---------------------------------------------------------------------------------
 (2) _update_distance                                      0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (2) _update_bump_and_cliff                                0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (2) _update_angle                                         0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (3) _irobot_query_and_update                            535   525     10    1737
                                              6 BANK0     23    13     10
                                              0 BANK1    256   256      0
                                              0 BANK2    256   256      0
                       _eusart_getch
                       _eusart_putch
                    _get_packet_size
                          _rx_assign
 ---------------------------------------------------------------------------------
 (4) _rx_assign                                            5     3      2     738
                                              1 BANK0      5     3      2
                    _sort_iRBumpDrop
 ---------------------------------------------------------------------------------
 (5) _sort_iRBumpDrop                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _get_packet_size                                      1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _eusart_getch                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _printf                                              31    17     14    5579
                                             21 BANK0     22     8     14
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0    1972
                                             20 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (4) _Console_PrintChar                                    4     4      0    1941
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (5) _Console_Tab                                          8     8      0    1390
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4    1053
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (6) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (7) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (5) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (6) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _irobot_stop_motion                                   1     1      0    3206
                                             25 BANK0      1     1      0
                        _irobot_move
 ---------------------------------------------------------------------------------
 (3) _irobot_move                                          9     5      4    3175
                                             16 BANK0      9     5      4
                       _eusart_putch
                 _load_iRScriptStack
                 _twos_complement_of
 ---------------------------------------------------------------------------------
 (4) _twos_complement_of                                   2     0      2     806
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _irobot_song_play                                     1     1      0      62
                                              1 BANK0      1     1      0
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4    1097
                                             82 BANK0      6     2      4
                                              0 BANK1      4     4      0
                        _ADC_Voltage (ARG)
                            ___fldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _Motor_Speed                                          4     0      4    4143
                                             27 BANK0      4     0      4
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (2) _Motor_Move                                           6     2      4    1219
                                              3 BANK0      6     2      4
                       _Timer0_Start
 ---------------------------------------------------------------------------------
 (3) _Timer0_Start                                         3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _HMI_Render                                           2     2      0    1593
                                              8 BANK0      2     2      0
                             _OutSeg
 ---------------------------------------------------------------------------------
 (3) _OutSeg                                               5     4      1    1463
                                              3 BANK0      5     4      1
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (2) _HMI_Poll                                             0     0      0   85165
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (3) _Button_Poll                                          9     6      3   85165
                                             27 BANK0      9     6      3
                    _Event_DIPSwitch *
                         _Event_NULL *
                   _Event_TestButton *
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (4) _Event_TestButton                                     1     1      0   37797
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (2) _HMI_SetNumber                                        2     0      2    4702
                                             22 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (3) _itos                                                10     6      4    3009
                                             12 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (4) _reverse                                              7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     840
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     849
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _HMI_SetSegments                                      5     3      2     446
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (4) _ToSegment                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _HMI_SetButton                                        8     8      0     207
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (4) _Event_NULL                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _Event_DIPSwitch                                      2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (5) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Console_Render                                      11    11      0   35327
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (3) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (3) _LCD_DrawField                                       17     7     10   16520
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     536
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (4) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (2) _ADC_Voltage                                         18    14      4    8729
                                             64 BANK0     18    14      4
                            ___fldiv
                            ___flmul
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4     696
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             25    17      8    3065
                                             39 BANK0     25    17      8
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             25    17      8    4007
                                             14 BANK0     25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0  997184
                           _ADC_Init
                          _ADC_Start
                       _Console_Init
                           _HMI_Init
                         _ISR_Enable
                           _LCD_Init
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                         _Motor_Init
                           _delay_ms
                        _eusart_init
                        _irobot_init
                 _irobot_init_song_0
                _irobot_led_power_on
 ---------------------------------------------------------------------------------
 (2) _irobot_led_power_on                                  1     1      0    1358
                                             20 BANK0      1     1      0
                        _irobot_leds
 ---------------------------------------------------------------------------------
 (3) _irobot_leds                                          4     1      3    1327
                                             16 BANK0      4     1      3
                       _eusart_putch
                 _load_iRScriptStack
 ---------------------------------------------------------------------------------
 (4) _load_iRScriptStack                                  16     6     10     167
                                              0 BANK0     16     6     10
 ---------------------------------------------------------------------------------
 (2) _irobot_init_song_0                                   0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (2) _irobot_init                                          0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (4) _eusart_putch                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _eusart_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Motor_Init                                           4     0      4   88478
                                             45 BANK0      4     0      4
                        _Port_SetPin
                    _Port_SetPinType
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (3) _Timer0_Init                                         14    10      4    3138
                                             13 BANK0     14    10      4
                       _Timer0_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) _Timer0_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_Init                                             0     0      0  362312
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Port_Init                                            6     3      3  111429
                                             64 BANK0      6     3      3
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (3) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      6     3      3
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (4) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (4) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (3) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (4) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (2) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             4     4      0  290820
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (4) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (4) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (5) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (4) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (6) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Configure_GPIOs                                      0     0      0  261813
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (4) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _LCD_Reset                                            0     0      0   94437
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             6     4      2    1318
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (5) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (5) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (5) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (6) _Port_TogglePin                                       4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (4) _Port_SetPin                                          5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (2) _ISR_Enable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _HMI_Init                                             2     2      0  217901
                                             72 BANK0      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _SPI_Init                                             8     2      6   86139
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (5) _Timer2_Init                                         17    13      4    2964
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8    2673
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (6) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _Button_Init                                         13     0     13  105207
                                             59 BANK0     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (4) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetBit                                          7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (6) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (4) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (5) _Word_GetPair                                         3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (6) _Byte_GetPair                                         3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (7) _Byte_GetZone                                         9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (4) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (6) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (4) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Start                                            4     2      2    1222
                                              2 BANK0      4     2      2
                            _ADC_Off
                             _ADC_On
                     _ADC_SetChannel
 ---------------------------------------------------------------------------------
 (2) _ADC_Init                                             3     0      3    2172
                                              4 BANK0      3     0      3
                      _ADC_Calibrate
                  _ADC_ClockDivision
                 _ADC_ConversionTime
                     _ADC_SetChannel
                        _ADC_SetupIO
 ---------------------------------------------------------------------------------
 (3) _ADC_SetupIO                                          4     4      0      65
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _ADC_SetChannel                                       2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ConversionTime                                   2     2      0     136
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ClockDivision                                    3     3      0     172
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _ADC_Calibrate                                        0     0      0       0
                            _ADC_Off
                             _ADC_On
 ---------------------------------------------------------------------------------
 (3) _ADC_On                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getMode                                              2     2      0   11658
                                              6 BANK0      2     2      0
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (4) _MXK_TestButton                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _MXK_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (4) _HMI_UpSwitch                                         0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_RightSwitch                                      0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_LeftSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_DownSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (4) _HMI_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (5) _Port_GetQuad                                         6     3      3    1014
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _ISR_Function                                       18    18      0    1778
                                             22 COMRAM    18    18      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (13) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (16) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (17) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (18) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (16) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (15) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (16) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _getMode
     _HMI_DIPSwitch *
       _Port_GetQuad
     _HMI_DownSwitch *
       _Port_GetPin
     _HMI_LeftSwitch *
       _Port_GetPin
     _HMI_RightSwitch *
       _Port_GetPin
     _HMI_UpSwitch *
       _Port_GetPin
     _MXK_DIPSwitch *
       _Port_GetQuad
     _MXK_TestButton *
       _Port_GetPin
   _init
     _ADC_Init
       _ADC_Calibrate
         _ADC_Off
         _ADC_On
       _ADC_ClockDivision
       _ADC_ConversionTime
       _ADC_SetChannel
       _ADC_SetupIO
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _Console_Init
     _HMI_Init
       _Button_Init
         _HMI_InitButtons *
         _MXK_InitDIPSwitch *
           _Port_SetQuadType
             _Byte_SetQuad
               _Byte_SetZone
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
         _MXK_InitTestButton *
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MinSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _ISR_Enable
     _LCD_Init
       _Configure_GPIOs
         _LCD_Reset
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Reset_High
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _Reset_Low
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _delay_ms
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_Init
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
           _SPI_DCS
           _SPI_DisableISR
           _Timer2_Init
             _Timer2_Clear
             ___lldiv
         _SPI_MaxSpeed
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
       _LCD_Fill
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
       _LCD_Write
         _Mode_Set
         _SPI_Send
       _Set_Rotation
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _delay_ms
     _MXK_BlockSwitchTo
       _delay_us
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Init
       _LED_Init
         _LED_Set
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _Port_Init
         _GetPortPORT
         _GetPortProperties
         _GetPortTRIS
         _Port_Set
           _Byte_SetByte
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Port_SetType
           _Port_CheckPortType
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetQuadType
         _Byte_SetQuad
           _Byte_SetZone
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _delay_ms
     _MXK_Release
     _Motor_Init
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     _delay_ms
     _eusart_init
     _irobot_init
       _eusart_putch
     _irobot_init_song_0
       _eusart_putch
     _irobot_led_power_on
       _irobot_leds
         _eusart_putch
         _load_iRScriptStack
   _mode1
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _ADC_Voltage
       ___fldiv
         ___xxtofl (ARG)
       ___flmul
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _HMI_Poll
       _Button_Poll
         _Event_DIPSwitch *
           _HMI_GetBar
           _HMI_SetBar
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Event_NULL *
         _Event_TestButton *
           _HMI_SetButton
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _reverse
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
     _HMI_Render
       _OutSeg
         _SPI_Send
     _HMI_SetNumber
       _HMI_SetSegments
         _ToSegment
       _itos
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _reverse
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _Motor_Move
       _Timer0_Start
     _Motor_Speed
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     ___fldiv
       ___xxtofl (ARG)
     ___fltol
       _ADC_Voltage (ARG)
         ___fldiv
           ___xxtofl (ARG)
         ___flmul
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl
       ___fldiv (ARG)
         ___xxtofl (ARG)
     _irobot_song_play
       _eusart_putch
     _irobot_stop_motion
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _update_angle
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_bump_and_cliff
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_distance
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
   _mode2
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _HMI_DIPSwitch *
       _Port_GetQuad
     _HMI_DownSwitch *
       _Port_GetPin
     _HMI_LeftSwitch *
       _Port_GetPin
     _HMI_Poll *
       _Button_Poll
         _Event_DIPSwitch *
           _HMI_GetBar
           _HMI_SetBar
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Event_NULL *
         _Event_TestButton *
           _HMI_SetButton
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _reverse
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
     _HMI_RightSwitch *
       _Port_GetPin
     _HMI_UpSwitch *
       _Port_GetPin
     _MXK_DIPSwitch *
       _Port_GetQuad
     _MXK_Dequeue *
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release *
     _MXK_SwitchTo *
       _delay_us
     _MXK_TestButton *
       _Port_GetPin
     _irobot_move_straight *
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _irobot_song_play *
       _eusart_putch
     _irobot_stop_motion *
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _printf *
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _update_angle *
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_bump_and_cliff *
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_distance *
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
   _mode3
   _mode4
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _ADC_Voltage
       ___fldiv
         ___xxtofl (ARG)
       ___flmul
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _HMI_Poll
       _Button_Poll
         _Event_DIPSwitch *
           _HMI_GetBar
           _HMI_SetBar
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Event_NULL *
         _Event_TestButton *
           _HMI_SetButton
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _reverse
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
     _HMI_Render
       _OutSeg
         _SPI_Send
     _HMI_SetNumber
       _HMI_SetSegments
         _ToSegment
       _itos
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _reverse
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _Motor_Move
       _Timer0_Start
     _Motor_Speed
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     ___fldiv
       ___xxtofl (ARG)
     ___flmul
       ___fldiv (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___fltol
       _ADC_Voltage (ARG)
         ___fldiv
           ___xxtofl (ARG)
         ___flmul
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl
       ___fldiv (ARG)
         ___xxtofl (ARG)
     ___xxtofl
     _irobot_song_play
       _eusart_putch
     _irobot_stop_motion
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _update_angle
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_bump_and_cliff
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_distance
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      2      CA      14       78.9%
BITBANK3           100      0       0      10        0.0%
BANK3              100      8     100      11      100.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100    100     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100    100     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     59      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      50       1       85.1%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     4BA      12        0.0%
DATA                 0      0     5E6       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Sun Sep 10 16:40:33 2017

                                 _update_angle 63EA                                  i2_Timer0_Stop 64E8  
                             SPI_Init@pChannel 0091                     __size_of_MXK_BlockSwitchTo 003E  
                                 i2_Motor_Step 38D8                                              _A 004C  
                                            l8 3DA0                                   ___fldiv@aexp 0086  
                                 ___fldiv@bexp 0085                                              _a 004D  
                                            _i 003A                                              _j 0039  
                                            _l 004F                                              _u 0038  
                                            _w 0050                            _irobot_led_power_on 6282  
                                 ___fldiv@sign 007A                                             l11 304A  
                                           l12 3034                                             l90 2F80  
                                           l85 2E7C                                             l87 2EEA  
                                           l89 2F56                                   ___awdiv@sign 0065  
                           __size_of_ADC_Start 0084                            ___wmul@multiplicand 0062  
                                _HMI_DIPSwitch 6320                             LCD_DrawField@pSize 0078  
                           LCD_DrawField@count 007E                     __end_of_irobot_stop_motion 5B72  
                            ?_Event_TestButton 0001                               i2_Timer0_Restart 6486  
                         ADC_ClockDivision@reg 0061                                            l120 4AC6  
                                          l121 4ADC                                            l122 4AF2  
                                          l220 56F4                                            l117 4B08  
                                          l221 56B8                                            l118 4AB0  
                                          l230 5940                                            l222 5704  
                                          l223 56D6                                    ?_LED_Toggle 0001  
                                          l234 5AD2                                            l235 5AA2  
                                          l227 595C                                            l403 2B0A  
                                          l412 27E6                                            l228 5924  
                                          l340 4774                                            l404 2AAA  
                                          l421 277A                                            l413 267C  
                                          l237 5ABA                                            l341 4782  
                                          l405 2B3A                                  ??_Console_Tab 0068  
                                          l414 2802                                            l430 3F14  
                                          l350 487C                                            l342 4790  
                                          l510 1CA8                                            l406 2AC2  
                                          l415 26A2                                            l351 480C  
                                          l343 479E                                            l511 1DB8  
                                          l407 2ADA                                            l183 4930  
                                          l600 04B2                                            l432 3F3E  
                                          l344 47AC                                            l512 1CCA  
                                          l408 2AF2                                            l184 490A  
                                          l417 270E                                            l601 0646  
                                          l433 3F6E                                            l353 481A  
                                          l337 47D6                                            l345 47BA  
                                          l610 06CE                                            l602 04E4  
                                          l354 4828                                            l346 47C8  
                                          l338 4766                                            l370 4706  
                                          l611 071C                                            l603 0658  
                                          l427 3F98                                            l355 4836  
                                          l363 4730                                            l371 4714  
                                          l531 13F2                                    ?_HMI_GetBar 0001  
                                          l612 076A                                            l604 0592  
                                          l356 4844                                            l372 4722  
                                          l364 46C0                                            l532 1416  
                                          l516 1D12                                            l357 4852  
                                          l509 1D9C                                            l614 084C  
                                          l358 4860                                            l366 46CE  
                                          l526 1436                                            l615 0844  
                                          l607 07B8                                            l359 486E  
                                          l367 46DC                                            l519 1D5A  
                                          l616 085E                                            l608 0680  
                                          l368 46EA                                            l528 1454  
                                          l393 57C4                                            l617 0848  
                                          l609 07D6                                            l369 46F8  
                                          l529 13D2                                            l483 1B08  
                                          l732 4A4A                                            l476 1BE0  
                                          l900 1880                                            l733 4A3E  
                                          l389 551A                                            l477 1A52  
                                          l397 5A96                                            l901 1884  
                                          l726 42DE                                            l478 1BFC  
                                          l486 1B74                                            l654 60C8  
                                          l910 18A8                                            l902 1888  
                                          l727 42D2                                            l479 1A9C  
                                          l655 60C0                                            l911 18AC  
                                          l903 188C                                            l824 544E  
                                          l832 58CE                                            l912 18B0  
                                          l904 1890                                            l673 5FD0  
                                          l657 60C4                                            l681 5388  
                                          l913 18B4                                            l905 1894  
                                          l921 5358                                            l914 18B8  
                                          l906 1898                                            l922 5324  
                                          l930 3B06                                            l819 4F5E  
                                          l915 18BC                                            l907 189C  
                                          l684 539E                                            l916 18C0  
                                          l908 18A0                                            l860 17E0  
                                          l781 5DEA                                            l597 04C0  
                                          l853 18C8                                            l917 18C4  
                                          l909 18A4                                            l861 17E4  
                                          l598 04A8                                            l678 53C4  
                                          l686 53AE                                            l870 1808  
                                          l862 17E8                                            l854 17CC  
                                          l599 04D0                                            l679 5378  
                                          l871 180C                                            l863 17EC  
                                          l776 5BA2                                            l880 1830  
                                          l872 1810                                            l864 17F0  
                                          l856 17D0                                            l928 3B86  
                                          l881 1834                                            l873 1814  
                                          l865 17F4                                            l857 17D4  
                                          l929 3B56                                            l890 1858  
                                          l882 1838                                            l874 1818  
                                          l866 17F8                                            l858 17D8  
                                          l891 185C                                            l883 183C  
                                          l875 181C                                            l867 17FC  
                                          l859 17DC                                            l892 1860  
                                          l884 1840                                            l876 1820  
                                          l868 1800                                            l893 1864  
                                          l885 1844                                            l877 1824  
                                          l869 1804                                            l894 1868  
                                          l886 1848                                            l878 1828  
                                          l990 4BD2                                            l895 186C  
                                          l887 184C                                            l879 182C  
                                          l983 49CE                                            l976 4C60  
                                          l896 1870                                            l888 1850  
                                          l992 4BE2                                            l984 4952  
                                          l897 1874                                            l889 1854  
                                          l985 49CA                                            l978 4C70  
                                          l898 1878                                            l899 187C  
                                          l997 572A                                            l999 574E  
                                          _PR2 000FCB                                            _dip 0322  
                                          _val 00D6                                __end_of_ADC_Off 64C8  
                                  ?_HMI_SetBar 0001                             ??_Event_TestButton 0079  
                                 _Word_GetPair 5DBE                                            prod 000FF3  
                                  ?_HMI_Render 0001                            MXK_SwitchTo@pModule 0067  
                   __end_of_ADC_ConversionTime 5B2C                                            tosl 000FFD  
                                          wreg 000FE8                             Console_MakeField@x 0070  
                           Console_MakeField@y 0071                                     _TXSTA1bits 000FAD  
                              _update_distance 63D8                                   Console_Tab@c 006F  
                                 Console_Tab@i 006E                            LCD_DrawField@pField 0072  
                                 Console_Tab@t 006D                     __size_of_ADC_ClockDivision 008A  
                                 ___flmul@aexp 0094                                   ___flmul@bexp 0099  
                                   i2_delay_us 5CC4                           Port_Set@TypeRequired 0082  
                                 ___flmul@sign 0093                                   ___flmul@temp 009E  
                                 ___flmul@prod 009A                              Console_FormFeed@x 0062  
                            Console_FormFeed@y 0063                            LCD_DrawField@pPoint 0074  
                               ?_LCD_DrawField 0072                          Port_SetPinType@Output 008A  
                              Port_SetPin@Type 0073                                Port_SetPin@pPin 0071  
                         ?_irobot_led_power_on 0001                                  ?_Byte_GetPair 0069  
                              __end_of_LED_Set 596E                        __size_ofi2_Word_GetPair 0030  
                                i2_Port_SetPin 456A                                   ___fltol@exp1 00B7  
                                 _Word_SetPair 5B72                                           l1000 576A  
                                         l1010 4008                                           l1004 55BA  
                                ?_Byte_GetZone 0060                                           l1005 55E8  
                                         l1200 41FE                                           l1040 2830  
                                         l1201 4252                                           l1009 4014  
                                         l1041 2836                                           l1202 426E  
                                         l1042 283C                                           l1043 2842  
                                         l1300 4CF2                                           l1204 4298  
                                         l1036 298C                                           l1044 2848  
                                         l2020 552A                                           l2100 2C16  
                                         l1301 4CF6                                           l1205 427E  
                                         l1045 284E                                           l1037 282A  
                                         l2021 552E                                           l1302 4D00  
                                         l1062 2064                                           l2110 5C2C  
                                         l2022 5532                                           l1303 4D0E  
                                         l1063 2092                                           l1207 42AA  
                                         l1047 28F4                                           l2023 5536  
                                         l2031 3A8C                                           l3000 243E  
                                         l1056 1EF4                                           l2024 553A  
                                         l2040 3A0C                                           l2032 39DE  
                                         l1313 5B0C                                           l1153 22D2  
                                         l3001 2490                                           l1057 20BA  
                                         l2017 554A                                           l2025 553E  
                                         l2114 5438                                           l1082 3E8E  
                                         l1058 1EFC                                           l1146 4E80  
                                         l2106 5C38                                           l2026 5542  
                                         l2018 5526                                           l2042 3A20  
                                         l2034 39E8                                           l2115 53FA  
                                         l1059 1F26                                           l2027 5546  
                                         l2035 39EE                                           l2140 5802  
                                         l2300 4672                                           l1084 3E96  
                                         l2108 5C24                                           l2036 39F4  
                                         l1077 3E5E                                           l2045 3A4C  
                                         l2037 39FA                                           l2310 3676  
                                         l1254 63CC                                           l1158 5D40  
                                         l2070 4DDA                                           l2062 4D9A  
                                         l2054 4D60                                           l2038 3A00  
                                         l1079 3E6E                                           l2135 43EA  
                                         l2047 3A60                                           l2039 3A06  
                                         l2312 368E                                           l1280 4DFC  
                                         l2321 0908                                           l2306 3646  
                                         l2410 24C4                                           l2066 4DBE  
                                         l2058 4D7A                                           l2330 0ABA  
                                         l1283 4E5E                                           l2163 5B56  
                                         l2411 24F4                                           l2091 2BCC  
                                         l2323 0966                                           l2308 365E  
                                         l1276 4DE4                                           l2420 2568  
                                         l2092 2B86                                           l2340 0CC6  
                                         l2332 0B7C                                           l2341 0C2C  
                                         l2333 0ADA                                           l2325 099E  
                                         l1294 4D16                                           l1630 3712  
                                         l2422 2582                                           l2094 2BFC  
                                         l2318 08EC                                           l1295 4CDC  
                                         l1631 376E                                           l2095 2BE0  
                                         l2343 0C64                                           l2335 0B12  
                                         l2327 0A3E                                           l2351 3446  
                                         l1296 4D40                                           l1632 3752  
                                         l2600 40AA                                           l2416 2530  
                                         l2328 0A6E                                           l1297 4CE6  
                                         l2417 24CC                                           l2409 24B0  
                                         l2097 2CCC                                           l2353 353E  
                                         l1298 4CEA                                           l1730 5C58  
                                         l2602 40D4                                           l2426 25D8  
                                         l2418 24E4                                           l2098 2C10  
                                         l2354 3522                                           l1299 4CEE  
                                         l1627 37BA                                           l2603 40C8  
                                         l2427 2636                                           l2419 24EE  
                                         l2099 2C58                                           l2355 34D8  
                                         l2371 15BE                                           l1724 5D8C  
                                         l1732 5C80                                           l1628 37B0  
                                         l2428 25DE                                           l2348 342A  
                                         l2364 147E                                           l1629 3730  
                                         l2381 1730                                           l2373 165E  
                                         l1726 5DBA                                           l2606 410A  
                                         l2374 168E                                           l2390 589C  
                                         l1735 62B6                                           l2607 4118  
                                         l2367 149A                                           l2391 5884  
                                         l2608 412C                                           l2376 16D8  
                                         l2369 1510                                           l2393 588A  
                                         l2298 4640                                           l2378 179A  
                                         l2394 5890                                           l1827 32FE  
                                         l2379 16F8                                           l2395 5896  
                                         l1828 331E                                           l2661 37F2  
                                         l2389 587E                                           l2670 3890  
                                         l2663 3874                                           l1784 3198  
                                         l2840 504A                                           l2672 38C6  
                                         l2664 3860                                           l1785 31A6  
                                         l1873 5E30                                           l2930 0DDA  
                                         l2922 0CFA                                           l2850 56A8  
                                         l1787 31B0                                           l2923 0D28  
                                         l2835 5006                                           l2940 0F56  
                                         l2932 0E08                                           l2924 0D1E  
                                         l2836 4FFA                                           l2941 0F2C  
                                         l2933 0F0A                                           l2845 5670  
                                         l2669 38A0                                           l2782 4174  
                                         l2950 102E                                           l2942 0F42  
                                         l2934 0E86                                           l2926 0D58  
                                         l2846 5664                                           l2783 4164  
                                         l2951 1064                                           l2935 0EBE  
                                         l2927 0D86                                           l2839 503C  
                                         l2599 4094                                           l2952 1074  
                                         l2936 0EB2                                           l2928 0D7C  
                                         l2960 0078                                           l2953 1078  
                                         l2937 0F06                                           l2961 00A2  
                                         l2849 569A                                           l2786 41CE  
                                         l2970 0350                                           l2962 009C  
                                         l2787 41E0                                           l2947 0FB0  
                                         l2963 00B4                                           l2980 0462  
                                         l2964 00DC                                           l2956 001E  
                                         l2949 1000                                           l2981 048C  
                                         l2957 0048                                           l2982 0482  
                                         l2958 0042                                           l2990 235E  
                                         l2975 03BE                                           l2959 005A  
                                         l2968 0364                                           l2992 23CA  
                                         l2977 040E                                           l2969 033A  
                                         l2993 23AC                                           l2985 231E  
                                         l2978 0434                                           l2986 232E  
                                         l2995 2418                                           l2987 2356  
                                         l2996 2408                                           l2989 236E  
                               ??_Console_Init 0060                          Port_SetPinType@pInput 0086  
                                         STR_1 FFFC                                           STR_2 FFC0  
                                         STR_3 FFFC                                           STR_4 FFC0  
                                         STR_5 FFFC                                           STR_6 FFEE  
                                         STR_7 FFFC                                           STR_8 FF71  
                                         _LATA 000F89                                           _LATB 000F8A  
                                         _LATC 000F8B                                           _LATD 000F8C  
                                         _LATE 000F8D                                           _LATF 000F8E  
                  __size_of_MXK_InitTestButton 001E                                           _LATG 000F8F  
                          __end_of_GetPortPORT 48AC                       __end_of_irobot_song_play 63C4  
                                         _PIR1 000F9E                                           _PIR2 000FA1  
                                         _PIR3 000FA4                                           u9020 40DA  
                                         u9120 548C                            __end_of_GetPortTRIS 4760  
                                         u9210 336A                                           u9060 417A  
                                         u8600 4A7A                                           u9240 5906  
                                         u9180 5A42                                           u8620 4EF8  
                                         u8605 4A74                                           u9405 10FA  
                                         u8710 5BEC                                           u9415 111C  
                                         u8800 500C                                           u9600 5C18  
                                         u9185 5A3C                                           u9425 129C  
                                         u8715 5BE6                                           u9195 32B6  
                                         u9435 131A                                           u8580 4A14  
                                         u9445 135C                                           u8654 5608  
                                         u9470 5F3A                                           u9294 4B82  
                                         u8830 5676                                           u8655 5602  
                                         u9455 139E                                           u9295 4B7C  
                                         u8664 563A                                           u9800 51AC  
                                         u8920 3B72                                           u8665 5634  
                                         u9385 10CA                                           u8770 4C26  
                                         u8930 55B6                                           u8587 4A0A  
                                         u9395 10E2                                           u9475 5F34  
                                         _SPI1 0362                                           u8684 431A  
                                         u8780 4C2C                                           u8940 55E0  
                                         _SPI2 036D                                           u8685 4314  
                                         u8694 434C                                           u8695 4346  
                                         u8855 640A                                           u8856 640C  
                                         u9760 5874                                           u9840 2B40  
                                         u9738 311A                                           u9930 4ECE  
                                         u9925 4E90                                           u9678 3E0C  
                                         u9960 5B06                                           u9880 3ED8  
                                         u9688 2FDE                                           _TMR0 000FD6  
                                         u9689 2FF2                                           u9890 3EE4  
                                         u9994 5F66                                           u9995 5F60  
               irobot_query_and_update@RXArray 0100                              rx_assign@packetID 0065  
                                         _gISR 00B9                             Event_DIPSwitch@Bar 007A  
               irobot_query_and_update@TXArray 0200                                  ??_Byte_GetBit 0063  
                                _iRVirtualWall 0030                           __size_of_ADC_SetupIO 0032  
                           SPI_MaxSpeed@pInput 006F                                  ?_Byte_SetByte 0060  
                                ?_Byte_SetPair 006B                                __end_of_SPI_DCS 5FDE  
                                         _main 587A                     irobot_leds@powerLuminosity 0072  
                                         _init 4614                                           _mode 0320  
                              ??i2_Byte_SetBit 0005                                  ?_Byte_SetQuad 006B  
                                         _itos 3AC8                                           fsr0h 000FEA  
                                         fsr1h 000FE2                                           indf0 000FEF  
                                         fsr2h 000FDA                                           fsr0l 000FE9  
                                         indf1 000FE7                                           indf2 000FDF  
                                         fsr1l 000FE1                                           fsr2l 000FD9  
                                ?_Byte_SetZone 0060                                           btemp 0051  
                                         _zero 004E                               __end_of_ADC_Init 4FDC  
                                ??_Byte_SetBit 0064                             __size_of_LCD_Reset 0050  
                         __size_of_ADC_Voltage 00D8                                           prodh 000FF4  
                                         prodl 000FF3                               Motor_Move@pDelta 0065  
                                         start 14AA                             __size_of_LCD_Write 0022  
                                __CFG_IESO$OFF 000000                                ___fldiv@new_exp 007F  
                            Timer0_Init@DIVIDE 0077                                ?_SPI_DisableISR 0060  
                             Motor_Move@pMotor 0063                            HMI_SetButton@pValue 0066  
                                Console_Init@x 0062                                  Console_Init@y 0063  
                               ?i2_Timer0_Stop 0001                              i2Byte_SetBit@pBit 0003  
                                 ___param_bank 000000                                __end_of_Font5x7 FF63  
                         Set_Rotation@rotation 0066                         __size_of_HMI_SetButton 0090  
                       __size_of_HMI_SetNumber 002A                                    ?_ISR_Enable 0001  
                           _irobot_init_song_0 6172                   __size_of_Console_ClearCursor 0040  
                             __end_of_LCD_Fill 587A                               __end_of_LCD_Init 2FCC  
                               ?_HMI_DIPSwitch 0001                                  __CFG_PLLDIV$3 000000  
                             __end_of_LED_Init 5714                                   _BAUDCON1bits 000F7E  
                                ??_Button_Init 00A8                        GetPortProperties@pInput 0062  
                                ??_Button_Poll 007E                               __end_of_HMI_Init 22D4  
                                        l12111 4BD8                                          l12105 4BC8  
                                        l12243 3B72                                          l12415 544E  
                                        l12423 548C                                          l13127 642E  
                                        l12417 5460                                          l12521 58E0  
                                        l14009 1F1C                                          l14051 22A6  
                                        l13421 4E78                                          l13271 5858  
                                        l12519 58CE                                          l12295 4298  
                                        l14063 5D0E                                          l12481 32FE  
                                        l13267 584A                                          l13291 5182  
                                        l13349 2AA0                                          l14341 2588  
                                        l13391 3E64                                          l13295 5190  
                                        l13385 3E54                                          l13495 3198  
                                        l13751 1064                                          l16207 0C2C  
                                        l16173 0ADA                               __end_of_HMI_Poll 513E  
                                        l16191 0B7C                                          l13953 2EEA  
                                        l16345 16F8                                          l13963 2F8E  
                                        l16363 179A                                          l13981 4C66  
                                        l13975 4C56                                          _I2C1T 0040  
                                        _I2C2T 03C8                                  ___fltol@sign1 00B6  
                                        ?_main 0001                                          ?_init 0001  
                              __end_of___fldiv 109C                                __end_of___awdiv 4136  
                                        ?_itos 006C                                __end_of___flmul 04A6  
                              __end_of___fltol 38D8                                _Event_DIPSwitch 600E  
                              __end_of___lldiv 41F2                                          u10040 3204  
                                        u11100 3812                                          u10070 36F0  
                                        u10080 3704                                          u11105 3806  
                                        u10090 3744                                          u10330 0FAA  
                                        u11050 25C4                                          u11140 38AA  
                                        u11070 2642                                          u10360 1014  
                                        u10520 03B8                                          u10370 1042  
                      __size_of_HMI_LeftSwitch 0018                                          u10460 00C8  
                              ___awdiv@divisor 0062                                          u10550 0422  
                                        u10470 02DC                                          u10720 2F8E  
                                        u10560 0448                                          u10640 2426  
                                        u10475 02D0                                          u10820 20A2  
                                        u10750 4CC8                                          u10680 2E7A  
                                        u13400 08E0                                          u11458 3556  
                                        u13410 0902                                          u11459 356A  
                                        u11468 3580                                          u11469 3594  
                                        u11478 35AA                                          u11479 35BE  
                                        u11488 35D4                                          u13328 5D56  
                                        u13520 0B90                                          u13600 341E  
                                        u11489 35E8                                          u13329 5D6C  
                                        u13610 3440                                          u13800 17AE  
                                        u13638 34A4                                          u13639 34B8  
                                        u13680 1472                                          u13690 1494  
                                        _INDEX 00E6                                __end_of___lwdiv 5054  
                                        _MASKS FD73                                __end_of___lwmod 56B2  
                                        i2l430 4582                                          i2l432 45A8  
                                        i2l433 45D2                                          i2l427 45F8  
                                        i2l732 50A0                                          i2l733 509A  
                                        i2l832 5CC6                                          i2l781 5FFC  
                              ___awdiv@counter 0064                            ?_irobot_init_song_0 0001  
                                        _PORTA 000F80                                          _PORTB 000F81  
                                        _PORTC 000F82                                          _PORTD 000F83  
                                        _PORTE 000F84                                          _PORTF 000F85  
                                        _PORTG 000F86                        __size_of_HMI_DownSwitch 0018  
                                        _TRISA 000F92                                          _TRISB 000F93  
                                        _TRISC 000F94                                          _TRISD 000F95  
                                        _TRISE 000F96                                          _TRISF 000F97  
                                        _TRISG 000F98                               ??i2_Byte_GetPair 000D  
                             ??i2_Byte_GetZone 0006                             Port_TogglePin@pPin 0076  
                              __end_of_getMode 36A6                                 __CFG_FCMEN$OFF 000000  
                                        _PortA 03B4                                          _PortB 03AA  
                                        _PortC 00EA                                          _PortD 03A0  
                                        _PortE 0396                                          _PortF 03BE  
                                        _PortG 038C                        __end_of_Port_SetPinType 2824  
                              _ADC_Initialised 003C                                 ??_Byte_GetPair 006C  
                        ??_irobot_led_power_on 0074                                 ?i2_Port_SetPin 0010  
                                  LED_Set@pLED 0075                                __end_of_dpowers FD73  
                               ??_Byte_GetZone 0065                      irobot_move@moveTurnRadius 0072  
                                        _mode1 08C4                                          _mode2 33F2  
                                        _mode3 1404                                          _mode4 1456  
                               Button_Poll@Pin 0083                       __size_of_Set_Addr_Window 00AA  
                          __end_of_Console_Tab 4078                               __end_of_MXK_Init 2E5A  
                     __size_of_sort_iRBumpDrop 0088                                   ?_eusart_init 0001  
                         i2Byte_GetPair@pInput 000A                                          _putch 640E  
                             __end_of_SPI_Init 08C4                               __end_of_SPI_Send 53E2  
                        __end_ofi2_MXK_Release 64F4                                          pclath 000FFA  
                                        tablat 000FF5                                __end_of_reverse 5376  
                           __size_of_MXK_Queue 000E                                 ??_Byte_SetByte 0063  
                            __end_of_ADC_Start 4E64                                 ??_Byte_SetPair 006F  
                               ??_Byte_SetQuad 006F                                          plusw2 000FDB  
                               ??_Byte_SetZone 0066                                          status 000FD8  
                                        wtemp6 0052                         __size_of_ADC_Calibrate 0014  
                              _Configure_GPIOs 529A                           i2MXK_Queue@pCallback 0001  
                                  i2delay_us@u 0003                           ??_irobot_init_song_0 0061  
                               _LCD_Word_Write 61CE                            __size_of_LED_Toggle 0048  
                          __size_of_HMI_GetBar 0006                                  ?_HMI_UpSwitch 0001  
                                   _Event_NULL 64F4                    __size_of_Port_CheckPairType 006A  
                                  mode1@moveto 03FA                            __size_of_HMI_SetBar 000A  
                                 ?_irobot_leds 0070                                   ?_irobot_init 0001  
                              __initialization 4412                            __size_of_HMI_Render 003E  
                                 ?_irobot_move 0070                            __end_of_Byte_GetBit 5F4C  
                       irobot_leds@powerColour 0071                                   __end_of_main 58CC  
                                 __end_of_init 46BA               irobot_query_and_update@packetIDs 0075  
                                 __end_of_itos 3BA0                           HMI_SetButton@reindex 0062  
                                 SPI_Send9@dat 00DE                            __end_of_Byte_SetBit 5650  
                             __end_of_InitList FD49                    __size_of_Port_CheckQuadType 005A  
                             __end_of_Mode_Set 640E                                      ??_ADC_Off 0060  
                      __end_of_update_distance 63EA                    __size_of_Port_CheckPortType 0048  
                                  HMI_Render@a 0068                                         ??_main 04C8  
                                       ??_init 00AA                                         ??_itos 0070  
                      _Console_MakeField$10974 006E                                  __activetblptr 000003  
                            Port_SetPin@pInput 006F                              __end_of_LCD_Reset 59BE  
                            Port_SetPin@pValue 0072                                      ??_LED_Set 0075  
                            _MXK_InitDIPSwitch 6228                              GetPortPORT@pInput 0062  
                       Port_CheckPairType@Pin1 008A                         Port_CheckPairType@Pin2 008B  
                            __end_of_LCD_Write 612E                                    _GetPortPORT 4806  
                                 ?i2_MXK_Queue 0001                                    _GetPortTRIS 46BA  
                              ??_LCD_DrawField 007C                     __end_of_PortProperty_Valid 4F62  
                             __end_of_Port_Set 1456                                    ?i2_delay_us 0001  
             __size_of_Console_IncrementCursor 0066                            __end_of_Button_Init 3E22  
                          __end_of_Button_Poll 3132                              Word_GetPair@pPair 006E  
                      LCD_FillRectangle@pPoint 006B                             ?_MXK_InitDIPSwitch 0001  
                                _HMI_SetButton 4B26                                      ??_SPI_DCS 0062  
                                       ?_mode1 0001                                         ?_mode2 0001  
                                       ?_mode3 0001                                         ?_mode4 0001  
                                       _ADRESH 000FC4                                         _ADRESL 000FC3  
                                       _ADC_On 64E2                                  _HMI_SetNumber 6094  
                       Port_SetQuadType@Output 009A                                         _ANCON0 000FC1  
                             ___awdiv@dividend 0060                                         ?_putch 0001  
                             ??_Console_Render 0083                                  ToSegment@pCHR 0060  
                             _Console_FormFeed 4BB6                         Port_SetQuadType@pInput 0096  
                                       i2l1630 393E                                         i2l1631 398A  
                                       i2l1632 3976                                         i2l1730 5EF4  
                                       i2l1627 39C6                                         i2l1732 5F14  
                                       i2l1628 39BC                                         i2l1629 3954  
                                       i2l1590 145E                                 __CFG_WDTEN$OFF 000000  
                          __size_of_ISR_Enable 000A                                         i2l9001 5CC6  
                                       i2l9003 5CD6                                         _RCREG1 000FAF  
                                       _RCSTA1 000FAC                         __end_of_LCD_Word_Write 61EC  
                               _Timer0_Restart 647A                                         _SPBRG1 000FB0  
                          ??_MXK_InitDIPSwitch 009B                                         _TXREG1 000FAE  
                             __end_of___xxtofl 24A2                                 i2_MXK_SwitchTo 5EE2  
                                       _TXSTA1 000FAD                                Byte_GetBit@pBit 0062  
                                   _Reset_High 620A                             Console_Render@temp 0085  
                               ??_HMI_UpSwitch 0066                                 OutSeg@pSegment 0063  
                              ??i2_Timer0_Stop 0001                            Port_TogglePin@Value 0077  
                       ADC_SetChannel@pChannel 0061                               __end_of_delay_ms 54B6  
                                 LED_Init@pLED 008D                               __end_of_delay_us 591E  
                                ??_Timer0_Init 0071                                  ??_Timer2_Init 0071  
                                ??_Timer0_Stop 0060                                     _Timer0_ISR 603C  
                     __size_of_Console_NewLine 00A2                              Timer2_Init@DIVIDE 007A  
                               __CFG_XINST$OFF 000000                                         _TimerX 00F9  
                                       _OutSeg 4E64                       __size_of_HMI_InitButtons 0006  
                                   _Motor_Init 3C78                     __end_of_load_iRScriptStack 544C  
                                   _Motor_Move 5E72                                         _iRWall 0035  
                                ??_Motor_Speed 007F                                     _Motor_Step 36A6  
                          rx_assign@byteNumber 0062                        __end_of_Event_DIPSwitch 603C  
                                       ___wmul 5EAC                                ??_HMI_DIPSwitch 0066  
                load_iRScriptStack@bytesToLoad 006E                                      ??___fldiv 0076  
                                    ??___awdiv 0064                                 __CFG_STVREN$ON 000000  
                                       _change 00FF                                      ??___flmul 008F  
                                       _lMotor 00D8                                      ??___fltol 0100  
                                    ??___lldiv 0068                                         _lQueue 00BC  
                                   _TestButton 0382                                      ??___lwdiv 0064  
                           __size_of_ToSegment 0284                                      ??___lwmod 006B  
                     __end_of_Port_SetQuadType 1CA0                       i2Byte_GetZone@pChunkSize 0005  
                                 HMI_GRender@a 002B                           __end_of_Console_Init 4CCE  
                            GetPortTRIS@pInput 0062                             __size_of_Reset_Low 001E  
                                       clear_0 447A                                         clear_1 448C  
                                       clear_2 4498                                         clear_3 44A4  
                                       clear_4 44B0                               ___awdiv@quotient 0066  
                   irobot_stop_motion@isScript 0079                                  ?_eusart_getch 0001  
                                   Port_Init@i 00A5                                     _iRDistance 0326  
                            __end_of_MXK_Queue 6454                     __end_ofHMI_SetButton@F7213 FD80  
                                    ??_getMode 0066                                     _iRBumpLeft 00E0  
                                       _printf 24A2                                     _iRBumpDrop 0036  
                    __end_of_MXK_InitDIPSwitch 6246                                  _ADC_Calibrate 63C4  
                                   _iRDropLeft 002E                                 HMI_SetButton@v 0067  
                                ?_eusart_putch 0001                         HMI_SetSegments@pString 0061  
                                  _Console_Tab 3FB6                            LCD_Word_Write@value 0065  
                                 __pdataCOMRAM 0047                             __size_of_Port_Init 0192  
                                ??_Port_GetPin 0063                       Port_CheckPortType@Output 0099  
                                    ?_ADC_Init 0064                             _twos_complement_of 5BFE  
                              ??i2_Port_SetPin 0014                                   __mediumconst FC96  
                  __end_ofTimer2_Init@PRESCALE FD83                       Port_CheckPortType@pDrive 0098  
                                       tblptrh 000FF7                                         tblptrl 000FF6  
                                       tblptru 000FF8                                   ?_MXK_Dequeue 0001  
                               ?_HMI_SetButton 0001                       Port_CheckPortType@pInput 0096  
                                ??_Port_SetPin 0073                                      ??_reverse 0064  
                                   _StepRotate 00C6                          Console_MakeField@Fill 0482  
                             ?_Port_SetPinType 0086                                         putch@c 0074  
                            Motor_Speed@pMotor 007B                                 ?_HMI_SetNumber 0076  
                               i2_Word_GetPair 5FDE                        __end_of_Configure_GPIOs 530A  
                          irobot_leds@isScript 0073                               ??_MXK_TestButton 0066  
                       __end_of_Timer0_Restart 6486                                  Set_Rotation@m 0065  
                                 ?_MXK_Release 0001                            ?_twos_complement_of 0060  
                __size_of_irobot_move_straight 0018                                __CFG_FOSC$HSPLL 000000  
                       __end_ofi2_MXK_SwitchTo 5F18                                   ___xxtofl@arg 006A  
                                 i2delay_us@us 0001                                   ___xxtofl@exp 0069  
                                 ___xxtofl@val 0060                          _update_bump_and_cliff 5E38  
                              ?_LCD_Word_Write 0065                                     __accesstop 0060  
                      __end_of__initialization 44B6                                      ?_LCD_Fill 0069  
        irobot_query_and_update@packetVariable 0079                                      ?_LCD_Init 0001  
                                SPI_Init@pMode 0092                                    _Byte_GetBit 5F18  
                                   _Stepstomin 00C4                                      ?_LED_Init 0001  
                     __end_ofi2_Timer0_Restart 6492                                      ?_HMI_Init 0001  
                            ??_Set_Addr_Window 0068                                      ?_HMI_Poll 0001  
             __size_of_irobot_query_and_update 0186                                  ___rparam_used 000001  
                            ??_sort_iRBumpDrop 0060                                     ___fltol@f1 00B2  
                                  _Byte_SetBit 55EC                                  __end_of_MASKS FD7C  
                               _PortA_Property FF6F                                    ?_Event_NULL 0001  
                                    LCD_Fill@i 006B                                      LCD_Fill@j 006C  
                          load_iRScriptStack@i 006F                                      LCD_Init@i 0097  
                               __pcstackCOMRAM 0001                                 _PortB_Property FF6D  
                          __size_ofi2_delay_us 0040                                   __pidataBANK0 64C8  
                                 __pidataBANK3 6462              irobot_move_straight@straightSpeed 0079  
                          i2Byte_SetBit@pInput 0001                           __end_of_Byte_GetPair 6282  
                              Console_Render@x 008A                                Console_Render@y 008B  
                          i2Byte_SetBit@pValue 0004                                  ?_Set_Rotation 0001  
                          Timer0_Init@PRESCALE FD49                           __end_of_Byte_GetZone 4A8E  
                                __end_of_mode1 0CDC                                  __end_of_mode2 354E  
                                __end_of_mode3 1406                                  __end_of_mode4 17C6  
                         ??_twos_complement_of 0062                              irobot_leds@LEDBit 0070  
                               _PortC_Property FF6B                            __end_of_Timer0_Init 3292  
                                __end_of_putch 641C                                 ??_eusart_getch 0060  
                                    ?_MXK_Init 0001                            __end_of_Timer2_Init 33F2  
                          __end_of_Timer0_Stop 64DC                                 ?_ADC_Calibrate 0001  
                                    ?_SPI_Init 008D                               ?_update_distance 0001  
                                    ?_SPI_Send 0060                                 ??_eusart_putch 0060  
                                  _Button_Init 3D4E                              Port_SetType@pType 009C  
                                  _Button_Poll 2FCC                           __end_of_Byte_SetByte 6446  
                         __end_of_Byte_SetPair 6150                                 _HMI_LeftSwitch 6380  
                               _PortD_Property FF69                           __end_of_Byte_SetQuad 6172  
                                 ??_LED_Toggle 0078                                   ??_HMI_GetBar 0060  
                   eusart_putch@eusartSendChar 0060                           __end_of_Byte_SetZone 4362  
                          __end_of_Motor_Speed 6094                                 _HMI_DownSwitch 6338  
                                SPI_Send@pData 0062                          __end_of_MXK_DIPSwitch 6320  
                                 ??_HMI_SetBar 0060                       __size_of_get_packet_size 0066  
                                 ??_HMI_Render 0068                                 _PortE_Property FF67  
                                   ??_ADC_Init 0067                       __size_of_HMI_SetSegments 00BA  
                       __end_ofi2_Word_GetPair 600E                                 _PortF_Property FF65  
                      Port_CheckQuadType@Pair1 0093                        Port_CheckQuadType@Pair2 0094  
                     MXK_BlockSwitchTo@pModule 0067                                        ??_mode1 03F8  
                                      ??_mode2 008C                                        ??_mode3 0060  
                                      ??_mode4 00B8                                        ?_ADC_On 0001  
                            _Console_Backspace 5714                                ?_Timer0_Restart 0001  
                                      ??_putch 0074                       __size_of_HMI_RightSwitch 0018  
                          _Console_ClearCursor 5C84                              __end_of_ToSegment 1A4A  
                               _PortG_Property FF63                                     __pbssBANK0 00B9  
                                   __pbssBANK3 0300                                     __pbssBANK4 0400  
                          __end_of_Port_GetPin 5BFE                             _irobot_stop_motion 5B2C  
                      Port_CheckQuadType@pQuad 0091                                reverse@iterator 0065  
                             ??_SPI_DisableISR 0062                                ?i2_MXK_SwitchTo 0001  
                            ?_irobot_song_play 0001                             ?_Console_Backspace 0001  
                            __end_of_Reset_Low 620A                      __size_of_Event_TestButton 003C  
                      __size_of_Port_TogglePin 0030                                     ??_LCD_Fill 006B  
                                   ??_LCD_Init 0095                           __size_of_eusart_init 001E  
                          __end_of_Port_SetPin 3FB6                         __end_of_PortA_Property FF71  
             irobot_led_power_on@powerOnColour 0074                                      ?_Mode_Set 0001  
                           Byte_SetByte@pInput 0060                                     ??_LED_Init 008D  
                     ADC_ClockDivision@pDivide 0060                             Byte_SetByte@pValue 0062  
                                ?_ISR_Function 0001                                    ?_Reset_High 0001  
                           _ADC_ConversionTime 5AE4                                  ?_Timer0_Clear 0001  
                                   ??_HMI_Init 00A8                             ??_irobot_song_play 0061  
                                   ??_HMI_Poll 0084                                  ?_Timer2_Clear 0001  
                      Port_CheckPairType@Props 008D                         __end_of_PortB_Property FF6F  
                                ?_Timer0_Start 0060                            ?_irobot_stop_motion 0001  
                            __end_of_Port_Init 2B54                                    ?_Timer0_ISR 0001  
                      Port_CheckPairType@pPair 0088                             __end_of_LED_Toggle 5AE4  
                           __end_of_HMI_GetBar 64D6                       LCD_FillRectangle@pColour 0069  
                                   _angleTotal 00D0                            ??_Console_Backspace 0062  
                            Set_Addr_Window@xe 0066                              Set_Addr_Window@ye 0067  
                            Set_Addr_Window@xs 0068                              Set_Addr_Window@ys 0065  
                                      ?_OutSeg 0063                                    ?_Motor_Init 008D  
                           Byte_SetPair@pInput 006B                                    ?_Motor_Move 0063  
                                  ?_Motor_Step 0001                             Byte_SetPair@pValue 006E  
                           __end_of_HMI_SetBar 64A6                         __end_of_PortC_Property FF6D  
                           Word_GetPair@pInput 006C                             __end_of_HMI_Render 5D42  
                               ??_Set_Rotation 0065                                      ?_Port_Set 006F  
                          ?_ADC_ConversionTime 0001                                        ?___wmul 0060  
                             ?_Event_DIPSwitch 0001                              Port_GetPin@Output 0065  
                                 ??_ISR_Enable 0060                   __size_of_Console_ResetCursor 001E  
                         __size_of_irobot_leds 0058                           __size_of_irobot_init 000E  
                         ?_Console_ClearCursor 0001                           __size_of_irobot_move 00B0  
                       __end_of_HMI_LeftSwitch 6398                         __end_of_PortD_Property FF6B  
                                      _ADC_AN0 00F4                                        _ADC_AN1 03DF  
                                      _ADC_AN2 03DA                                        _ADC_AN3 03D5  
                                   ??_MXK_Init 00A6                              Port_GetPin@pInput 0060  
                            _Console_MakeField 3E22                                        _ADC_Off 64C0  
                            ??_Console_NewLine 0060                       ADC_ClockDivision@unfound 0062  
                       __end_of_HMI_DownSwitch 6350                                     ??_SPI_Init 0093  
                       Event_TestButton@pState 0079                                     ??_SPI_Send 0063  
                                      ?_printf 0075                              ??_HMI_InitButtons 0060  
                   __size_of_MXK_InitDIPSwitch 001E                         __end_of_PortE_Property FF69  
                          Console_Render@F6956 03EC                             ?_Console_MakeField 0065  
                                      _COUNTER 0029                                ??_HMI_SetButton 0060  
                         __end_of_HMI_UpSwitch 6368                           ??_irobot_stop_motion 0079  
                                      _LED_Set 591E                        _Console_IncrementCursor 5586  
                                    ?___xxtofl 0060                         __end_of_PortF_Property FF67  
                                  _gBackcolour 00DC                                ??_HMI_SetNumber 0078  
                                    _I2C1_Done 031D                                ?i2_Word_GetPair 000D  
                                    _I2C2_Done 031A                                      _I2C1_More 0317  
                                    _I2C2_More 0314                                      ?_delay_ms 0060  
                    __end_of_Console_Backspace 5770                                      ?_delay_us 0060  
                          __size_of_Event_NULL 0002                     __end_of_MXK_InitTestButton 6264  
                                      _SSP1ADD 000FC8                                        _SSP1BUF 000FC9  
                                      _SSP2BUF 000F6F                             __size_of_rx_assign 00F0  
                         ??_ADC_ConversionTime 0060                         __end_of_PortG_Property FF65  
                          ??_Console_MakeField 0067                        __size_of_ADC_SetChannel 001C  
                                      _IRValue 00C2                                        _SPI_DCS 5FAE  
                         __size_ofi2_MXK_Queue 000E                                  ??_ADC_SetupIO 0060  
                             ?_Configure_GPIOs 0001                                __size_of_ADC_On 0006  
                       ?_update_bump_and_cliff 0001                               ADC_Init@pChannel 0066  
                         i2Byte_GetZone@Offset 0008                                  ??_ADC_Voltage 00A4  
                           __end_of_ISR_Enable 64B0                                 ??_ISR_Function 0017  
                         i2Byte_GetZone@Output 0009                                 ??_Timer0_Clear 0060  
                            Event_TestButton@j 00E2                                     ??_Mode_Set 0060  
                               ??_Timer2_Clear 0060                                        _Font5x7 FD83  
                         i2Byte_GetZone@pChunk 0004                       ADC_ConversionTime@pCount 0061  
                                      _MinDist 00FB                           i2Byte_GetZone@pInput 0001  
                               ??_Timer0_Start 0063                           SPI_DisableISR@pInput 0060  
                                ?_Port_GetQuad 0060                                Byte_SetBit@pBit 0062  
                         Port_TogglePin@pInput 0074                          __end_ofi2_Byte_SetBit 5A0A  
                                    _ADC_Start 4DE0                                        __Hparam 0000  
                            Port_GetQuad@pQuad 0062                                    _Timer0_Init 3132  
                                  _Timer2_Init 3292                                        __Lparam 0000  
                                  _Timer0_Stop 64D6                          __size_of_Console_Init 008A  
                                      OutSeg@a 003D                __end_ofPortProperty_Valid@F6830 FD69  
                                      _iRAngle 0324                                  LCD_Write@mode 0063  
                              __size_of_OutSeg 0082                                     ??_Port_Set 0072  
                    __end_of_Console_MakeField 3EF2                              _Console_PrintChar 2824  
                                  _Motor_Speed 606A                                        _Stepper 03CF  
                                ?_Port_SetType 009A                                        _gCursor 0047  
                                      ___fldiv 0CDC                                        ___awdiv 4078  
                        ??_Console_ClearCursor 0060                                        ___flmul 0000  
                                      ___fltol 37CC                                        _lBuffer 04CA  
                                      ___lldiv 4136                                __size_of___wmul 0036  
                              ??_ADC_Calibrate 0060                                        ___lwdiv 4FDC  
                                      ___lwmod 5650                                ?_HMI_LeftSwitch 0001  
                     __end_of_Console_FormFeed 4C44                             ?_Console_PrintChar 0001  
                                      __pcinit 4412                                ?_HMI_DownSwitch 0001  
                                      __ramtop 1000                                        _getMode 354E  
                                      __ptext0 587A                                        __ptext1 1456  
                                      __ptext2 1404                                        __ptext3 33F2  
                                      __ptext4 62F0                                        __ptext5 08C4  
                                      __ptext6 63D8                                        __ptext7 5E38  
                                      __ptext8 63EA                                        __ptext9 2B54  
                              __size_of_printf 01C2                                      _T0CONbits 000FD5  
                  __end_of_irobot_led_power_on 629E                              i2MXK_SwitchTo@CUR 0007  
                                      _dpowers FD69                                      _T2CONbits 000FCA  
                                LED_Set@pValue 0074                            __size_of_Reset_High 001E  
                        Event_DIPSwitch@pState 0079                                     ??___xxtofl 0064  
                                 ?_GetPortPORT 0060                                   ?_GetPortTRIS 0060  
                          ??_Console_PrintChar 0070                                    _Port_GetPin 5BB8  
                            __CFG_MSSPMSK$MSK5 000000                            LCD_DrawRectangle@p2 03E8  
                          LCD_DrawRectangle@p4 03E4                                   ??i2_delay_us 0003  
                                   ??_delay_ms 0062                                     ??_delay_us 0062  
                                      _reverse 530A                                      _DIPSwitch 0378  
                          __size_of_Timer0_ISR 002E                                    _Port_SetPin 3EF2  
                                  _iRBumpRight 00E1                                 LCD_DrawField@i 0082  
                                    _LCD_Reset 596E                            __size_of_Motor_Init 00D6  
                          __size_of_Motor_Move 003A                            __size_of_Motor_Step 0126  
                                    _LCD_Write 610C                                    _iRDropRight 002F  
                         __size_of_MXK_Dequeue 003E                                     delay_ms@ms 0060  
                         end_of_initialization 44B6                            ADC_SetupIO@pChannel 0062  
                            ??_get_packet_size 0060  irobot_query_and_update@numberOfPacketRequests 0078  
                                   delay_us@us 0060                              ??_HMI_SetSegments 0063  
                      Console_PrintChar@pInput 0073                                   _Console_Init 4C44  
                         __end_of_eusart_getch 64B8                        _irobot_query_and_update 2B54  
                         __size_of_MXK_Release 001C                     __end_of_Port_CheckPairType 5520  
                         __end_of_eusart_putch 6438                                        itos@Out 0074  
                               ??_Port_GetQuad 0063                             _PortProperty_Valid 4EE6  
                                    i2u1334_48 6054                             Byte_SetQuad@pInput 006B  
                           SPI_MinSpeed@pInput 006F                             Byte_SetQuad@pValue 006E  
                          __end_of_ADC_SetupIO 5F7E                          __size_of_Byte_GetPair 001E  
                  __size_of_irobot_init_song_0 0020                                ___lldiv@divisor 0064  
                        __size_of_Byte_GetZone 009C                                     ?_ADC_Start 0062  
                            ??_HMI_RightSwitch 0066                                ___lldiv@counter 006C  
                    __end_of_Console_PrintChar 29C2                            __end_of_ADC_Voltage 3C78  
                               ??_Port_SetType 009D                     __end_of_Port_CheckQuadType 57CA  
                                      printf@c 008A                                        printf@f 0075  
                               Port_Init@pPort 00A2                                        postdec1 000FE5  
                                      postdec2 000FDD                          __size_of_Byte_SetByte 000E  
                        __size_of_Byte_SetPair 0022                         Console_MakeField@Index 0069  
                            __end_of_rx_assign 3AC8                                        postinc0 000FEE  
                                      postinc2 000FDE                            ?_PortProperty_Valid 006F  
                        __size_of_Byte_SetQuad 0022                     __end_of_Port_CheckPortType 5A9C  
                        __size_of_Byte_SetZone 00B6                             __end_ofi2_delay_us 5D04  
                           Button_Init@pInitIO 009F                          Timer0_Init@pFrequency 006D  
                            ?_Port_SetQuadType 0096                                    _gForecolour 00FD  
                    ??_Console_IncrementCursor 0064                         __size_ofi2_MXK_Release 0006  
                                    _PORTFbits 000F85                             ??_Port_SetQuadType 009A  
                                 ?_Console_Tab 0001                               Byte_GetZone@MASK 0066  
                        Console_Render@lCursor 0086                             _load_iRScriptStack 53E2  
                                    _MXK_Queue 6446                               __CFG_CPUDIV$OSC1 000000  
                                ___xxtofl@sign 0068                               Byte_GetZone@pMax 0062  
                   __size_of_Console_Backspace 005C                                      _TRISCbits 000F94  
                   load_iRScriptStack@loadByte 006C                                _Set_Addr_Window 44C0  
                               SPI_Init@pClock 008D                               ??_LCD_Word_Write 0067  
                              _sort_iRBumpDrop 4D58                                    ___fldiv@grs 0081  
                                  ___fldiv@rem 007B                          __end_of_LCD_DrawField 4950  
                               Port_Set@pInput 006F                                 SPI_Init@pInput 0093  
                         ??_PortProperty_Valid 0073                              __size_of_ADC_Init 007A  
                               Port_Set@pValue 0071                                     ?_LCD_Reset 0001  
                         __end_of_Set_Rotation 4B26                                     ?_LCD_Write 0063  
                                 _Byte_GetPair 6264                             HMI_SetButton@F7213 FD7C  
                          ?_load_iRScriptStack 0060                                   _Byte_GetZone 49F2  
                                ?_MXK_SwitchTo 0001                              LCD_DrawField@xmax 0080  
                            LCD_DrawField@ymax 0081                                 __end_of_ADC_On 64E8  
                               _Port_TogglePin 5F7E                               _Event_TestButton 5DFC  
                                  ___flmul@grs 0095                           Port_SetPinType@Props 008B  
                                 ?_Byte_GetBit 0060                        __size_ofi2_Byte_GetPair 001A  
                                 _Byte_SetByte 6438                                   _Byte_SetPair 612E  
                              ADC_SetupIO@MASK 0063                                   _Byte_SetQuad 6150  
                      __size_ofi2_Byte_GetZone 0076                                   _Byte_SetZone 42AC  
                         Port_SetPinType@pType 0089                              ?i2_Timer0_Restart 0001  
                                 ?_Byte_SetBit 0060                                  ?_SPI_MaxSpeed 006F  
                            __size_of_LCD_Fill 0058                                   ??_Event_NULL 0060  
                            __size_of_LCD_Init 0172                              __size_of_LED_Init 0062  
                                ?_SPI_MinSpeed 006F                          __end_ofi2_Timer0_Stop 64EE  
                           ??i2_Timer0_Restart 0001                              __size_of_HMI_Init 01FA  
                            __size_of_HMI_Poll 0074                                  ?_update_angle 0001  
                                ?i2_Motor_Step 0001                     __size_of_Console_MakeField 00D0  
                               __end_of_OutSeg 4EE6                           ??_load_iRScriptStack 006A  
                 __end_of_irobot_move_straight 6308                          __size_of_HMI_UpSwitch 0018  
                               __end_of___wmul 5EE2                          __end_of_HMI_DIPSwitch 6338  
                                __pidataCOMRAM 6492                                   ?_Button_Init 009B  
                                 ?_Button_Poll 007B                                      _Bus_State 004B  
                          i2Byte_GetPair@pPair 000C                           __end_of_ISR_Function 14AA  
                         __end_of_Timer0_Clear 647A                              __size_of_MXK_Init 0180  
                         __end_of_Timer2_Clear 64C0                                 __end_of_printf 2664  
                            __size_of_SPI_Init 041E                        get_packet_size@packetID 0060  
                            __size_of_SPI_Send 006C                                  ?_Word_GetPair 006C  
                             ??_Timer0_Restart 0060                           __end_of_Timer0_Start 610C  
                           Port_SetType@Output 009F                            start_initialization 4412  
                                   ?_MXK_Queue 0060                       PortProperty_Valid@Errors 0075  
                             ??i2_MXK_SwitchTo 0007                              _LCD_FillRectangle 513E  
                           Port_SetType@pInput 009A                                 _ADC_SetChannel 62BA  
                                   HMI_Init@in 00A8                            HMI_SetNumber@pInput 0076  
                        __end_ofi2_Port_SetPin 4614                             __end_of_Event_NULL 64F6  
                       rx_assign@packetIDValue 0061                         __end_of_Port_TogglePin 5FAE  
                                ?_Word_SetPair 006F                              Byte_SetBit@pInput 0060  
                                     ??_ADC_On 0060                                 ??_MXK_SwitchTo 0066  
                            Byte_SetBit@pValue 0063                             ?_LCD_FillRectangle 0069  
                    ??_irobot_query_and_update 0070                            _Console_ResetCursor 6192  
                  PortProperty_Valid@pPinDrive 0071                                    _ADC_SetupIO 5F4C  
                         MXK_BlockSwitchTo@CUR 0066                       PortProperty_Valid@pInput 006F  
                                i2_MXK_Release 64EE                                    _ADC_Voltage 3BA0  
                       LCD_FillRectangle@pSize 006F                                 SPI_Send@pInput 0060  
                                 ??_Reset_High 0074                       __size_of_Port_SetPinType 01C0  
                               ??_SPI_MaxSpeed 0071                          Port_SetQuadType@pQuad 0098  
                                    _ToSegment 17C6                            ??_LCD_FillRectangle 0073  
                        Port_SetQuadType@pType 0099                                _Console_NewLine 4950  
                               ??_SPI_MinSpeed 0071                                    ??_ADC_Start 0064  
                                 _HMI_UpSwitch 6350                                      _Reset_Low 61EC  
                                 ??_Timer0_ISR 0017                                _HMI_InitButtons 64DC  
                            __size_of_Mode_Set 0012                     __size_of_Console_PrintChar 019E  
                               ??_update_angle 007D                                 ADC_Init@pInput 0064  
                                    _gCharSize 03F4                               Timer2_Init@INDEX 00E4  
                                    OutSeg@cur 003F                                 ??i2_Motor_Step 0015  
                                 ??_Motor_Init 0091                                       ??_OutSeg 0064  
                                    OutSeg@out 0067                        __size_of_Console_Render 0210  
                                 ??_Motor_Move 0067                                   ??_Motor_Step 0074  
                                    _iRAngleSS 0304                                      _iRCliffFL 0033  
                                    _iRCliffFR 0032                             Byte_SetZone@Offset 0069  
                                     ??___wmul 0064                           ?_Console_ResetCursor 0001  
                                    _Port_Init 29C2                                    __pdataBANK0 00F9  
                                  __pdataBANK3 03EC                      __size_of_irobot_song_play 0014  
                  __size_of_twos_complement_of 0044                              __size_of_Port_Set 03BA  
                           Byte_SetZone@pChunk 0063                                       ?_ADC_Off 0001  
                             ??i2_Word_GetPair 0010                             Byte_SetZone@pInput 0060  
                           Byte_SetZone@pValue 0065                                  Mode_Set@pMode 0060  
                                     ??_printf 0083                        __end_of_Set_Addr_Window 456A  
                     Port_CheckQuadType@Output 0095                        __end_of_sort_iRBumpDrop 4DE0  
                                    _gLineSize 03F0                       Port_CheckQuadType@pDrive 0092  
                               ??_Word_GetPair 006F                       Port_CheckQuadType@pInput 008F  
                         __end_of_Port_GetQuad 5A54                                      ___fldiv@a 0072  
                                _selectedMode1 00CE                                      ___fldiv@b 006E  
                                _selectedMode2 00CC                                  _selectedMode3 00CA  
                                _selectedMode4 00C8                      __end_of_LCD_FillRectangle 51B2  
                                  __pbssBIGRAM 04CA                         __end_of_ADC_SetChannel 62D6  
                                     ?_LED_Set 0074                                      ___flmul@a 008B  
                                    ___flmul@b 0087                                    __pbssCOMRAM 0029  
                              ADC_Start@pInput 0062                             __end_of_Reset_High 6228  
                                __pcstackBANK0 0060                                  __pcstackBANK1 0100  
                                __pcstackBANK2 0200                                  __pcstackBANK3 03F8  
                                __pcstackBANK4 04C8                        ??_update_bump_and_cliff 007D  
                                   itos@Length 0072                          __size_of_eusart_getch 0008  
                               ??_Word_SetPair 0073                       __size_of_update_distance 0012  
                            __size_of___xxtofl 01CE                             __end_of_Timer0_ISR 606A  
                         __size_of_GetPortPORT 00A6                                    ??_LCD_Reset 0079  
                         __size_of_GetPortTRIS 00A6                           __end_of_Port_SetType 1ECA  
                                     ?_SPI_DCS 0060                          __size_of_eusart_putch 000E  
                              ?_Port_TogglePin 0074                                  ??_eusart_init 0060  
                                  ??_LCD_Write 0064                              __size_of_delay_ms 006A  
                            __size_of_delay_us 0052                             __end_of_Motor_Init 3D4E  
                          __CFG_CCP2MX$DEFAULT 000000                             __end_of_Motor_Move 5EAC  
                           __end_of_Motor_Step 37CC                          Timer2_Init@pFrequency 006D  
                               ?i2_MXK_Release 0001                       Port_CheckPairType@Output 008C  
            twos_complement_of@complementValue 0060                                     ?_ToSegment 0001  
                     Port_CheckPairType@pDrive 0089                       Port_CheckPairType@pInput 0086  
                               reverse@tempVar 0064                             _MXK_InitTestButton 6246  
                                   ?_Reset_Low 0001                                   ?_Timer0_Init 006D  
                       __size_of_MXK_DIPSwitch 0018                                   ?_Timer2_Init 006D  
                             ??_HMI_LeftSwitch 0066                                   ?_Timer0_Stop 0001  
                             ___lwdiv@dividend 0060                                  ??_irobot_leds 0073  
                                ??_irobot_init 0061                                  ??_irobot_move 0074  
                                _lStepFunction 00BF                        __size_of_MXK_TestButton 0018  
                            Byte_SetPair@pPair 006D                               ??_HMI_DownSwitch 0066  
                                    __pintcode 1408                                  __pmediumconst FC96  
                                 ?_Motor_Speed 007B                          ??_Console_ResetCursor 0060  
                                     ?___fldiv 006E                                       ?___awdiv 0060  
                                    __ptext100 51B2                                      __ptext101 596E  
                                    __ptext110 5226                                      __ptext102 544C  
                                    __ptext111 04A6                                      __ptext103 61EC  
                                    __ptext120 6246                                      __ptext112 3292  
                                    __ptext104 620A                                      __ptext121 2664  
                                    __ptext113 4136                                      __ptext105 5A9C  
                                    __ptext130 6264                                      __ptext122 55EC  
                                    __ptext114 64B8                                      __ptext106 5F7E  
                                    __ptext131 49F2                                      __ptext123 1A4A  
                                    __ptext115 60BE                                      __ptext107 3EF2  
                                    __ptext140 4CCE                                      __ptext132 6150  
                                    __ptext124 5B72                                      __ptext116 5FAE  
                                    __ptext108 64A6                                      __ptext141 63C4  
                                    __ptext133 42AC                                      __ptext125 612E  
                                    __ptext117 3D4E                                      __ptext109 20DA  
                                    __ptext150 6380                                      __ptext142 64E2  
                                    __ptext134 4C44                                      __ptext126 5770  
                                    __ptext118 6228                                      __ptext151 6398  
                                    __ptext143 64C0                                      __ptext135 4DE0  
                                    __ptext127 54B6                                      __ptext119 64DC  
                                    __ptext160 5FDE                                      __ptext152 5BB8  
                                    __ptext144 354E                                      __ptext136 4F62  
                                    __ptext128 4EE6                                      __ptext161 62D6  
                                    __ptext153 5A0A                                      __ptext145 6308  
                                    __ptext137 5F4C                                      __ptext129 5DBE  
                                    __ptext162 5054                                      __ptext146 6320  
                                    __ptext138 62BA                                      __ptext163 59BE  
                                    __ptext155 603C                                      __ptext147 6338  
                                    __ptext139 5AE4                __end_of_irobot_query_and_update 2CDA  
                                    __ptext164 5EE2                                      __ptext156 38D8  
                                    __ptext148 6350                                      __ptext165 5CC4  
                                    __ptext157 64E8                                      __ptext149 6368  
                                    __ptext166 64EE                                      __ptext158 6486  
                                    _pShiftVal 00D4                                      __ptext167 6454  
                                    __ptext159 456A                                      __ptext168 0000  
                                     ?___flmul 0087                                       ?___fltol 00B2  
                                     ?___lldiv 0060                                     ?_Port_Init 00A0  
                         Timer0_Init@pCPUClock 0073                                       ?___lwdiv 0060  
                                     ?___lwmod 0067                            ?_MXK_InitTestButton 0001  
                            ?_Console_FormFeed 0001                              _GetPortProperties 4760  
                                     ?_getMode 0001                                   _eusart_getch 64B0  
                  __end_ofTimer0_Init@PRESCALE FD59                                _get_packet_size 5520  
                                 _eusart_putch 642A                             ??_Console_FormFeed 0060  
                              _HMI_SetSegments 41F2                             ?_GetPortProperties 0060  
                             Event_NULL@pState 0001                       __size_of_Event_DIPSwitch 002E  
                        __size_of_Set_Rotation 0098                                ?_ADC_SetChannel 0001  
                                ??i2_MXK_Queue 0004                                    ??_MXK_Queue 0063  
                  __size_of_irobot_stop_motion 0046                                   ?_Port_GetPin 0060  
                                     _ADC_Init 4F62                          __end_of_HMI_SetButton 4BB6  
                         __size_of_Console_Tab 00C2                                       ?_reverse 0060  
                         irobot_move@moveSpeed 0070                                   ?_Port_SetPin 006F  
                        __end_of_HMI_SetNumber 60BE                               ___lwdiv@quotient 0065  
                              _HMI_RightSwitch 6368                    __size_of_ADC_ConversionTime 0048  
                               __size_of_mode1 0418                                 __size_of_mode2 015C  
                               __size_of_mode3 0002                                 __size_of_mode4 0370  
                          ??_GetPortProperties 0062                        __end_of_Console_NewLine 49F2  
                         ??_MXK_InitTestButton 008D                             Byte_GetPair@pInput 0069  
                               __size_of_putch 000E                        __end_of_HMI_InitButtons 64E2  
                            i2Port_SetPin@Type 0014                           _irobot_move_straight 62F0  
                            i2Port_SetPin@pPin 0012                                 i2_Byte_GetPair 62D6  
                                     _LCD_Fill 5822                                       _LCD_Init 2E5A  
                               ___wmul@product 0064                                       _HMIBoard 0328  
                               i2_Byte_GetZone 5054                                       _LED_Init 56B2  
                                    delay_ms@u 0062                             Button_Poll@pButton 007B  
                                    delay_us@u 0062                                       _HMI_Init 20DA  
                                     _HMI_Poll 50CA                             MXK_Queue@pCallback 0060  
                                     _IPR1bits 000F9F                                       _IPR3bits 000FA5  
                                     _PIE1bits 000F9D                            __end_of_eusart_init 61CE  
                                     _PIE3bits 000FA3                    __end_of_Console_ClearCursor 5CC4  
                     __size_of_Configure_GPIOs 0070                           __size_of_Byte_GetBit 0034  
                            Byte_SetQuad@pQuad 006D                                       _PIR1bits 000F9E  
                                     i2u540_44 59D2                                       i2u540_45 59CE  
                                     _PIR3bits 000FA4                                       i2u541_44 59F8  
                                     i2u541_45 59F4                                       i2u544_40 5CF2  
                                     i2u706_40 391C                                       i2u483_40 5076  
                                     i2u707_40 3930                                       i2u483_47 506C  
                                     i2u708_40 3968                                       i2u485_40 50BE  
                                     i2u485_45 50BA                           __size_of_Byte_SetBit 0064  
                                     _RCONbits 000FD0                           i2Word_GetPair@pInput 000D  
                                  _mode1$15574 03FC                               __CFG_WDTPS$32768 000000  
                   irobot_song_play@songNumber 0061                               HMI_SetBar@pValue 0060  
                            Button_Init@pInput 009B                        __size_of_SPI_DisableISR 0028  
                                  _mode4$15575 03F8                                       _SSP1CON1 000FC6  
                            ??_Port_SetPinType 008A                                       _SSP1CON2 000FC5  
                                     _SSP2CON1 000F6C                                       _SSP2CON2 000F6B  
                        __size_of_ISR_Function 00A2                          __size_of_Timer0_Clear 000C  
                                     _SSP1STAT 000FC7                      __end_of_GetPortProperties 4806  
                                     _SSP2STAT 000F6D                                   _Set_Rotation 4A8E  
                        __size_of_Timer2_Clear 0008                           __end_of_MXK_SwitchTo 5C84  
                           _Port_CheckPairType 54B6                                       _MXK_Init 2CDA  
                        __size_of_Timer0_Start 0026                                MXK_SwitchTo@CUR 0066  
                        __end_of_ADC_Calibrate 63D8                            __end_of_irobot_leds 5822  
                                     _SPI_Init 04A6                            __end_of_irobot_init 642A  
                     __end_of_Event_TestButton 5E38                                       _SPI_Send 5376  
                          __end_of_irobot_move 4412                                      _rx_assign 39D8  
                                   _ADCON0bits 000FC2                               __size_of_ADC_Off 0008  
                                   _ADCON1bits 000FC1                               ?_Set_Addr_Window 0065  
                            ___wmul@multiplier 0060                               ?_sort_iRBumpDrop 0001  
                            Byte_GetBit@Output 0064                                     printf@flag 0085  
                         Timer2_Init@pCPUClock 0076                     __size_of_LCD_FillRectangle 0074  
                         __size_of_Button_Init 00D4                           __end_of_SPI_MaxSpeed 5226  
                                   printf@prec 0084                          Motor_Speed@pFrequency 007D  
                            Byte_GetBit@pInput 0060                            Port_SetPinType@pPin 0088  
                         __size_of_Button_Poll 0166                             _Port_CheckQuadType 5770  
                                _MXK_DIPSwitch 6308                            ?_Port_CheckPairType 0086  
                         __end_of_SPI_MinSpeed 529A                                  ??_MXK_Dequeue 0076  
                             __size_of_LED_Set 0050                         __size_ofi2_Byte_SetBit 004C  
                           _Port_CheckPortType 5A54                           __end_of_update_angle 63FC  
                        Button_Poll@pIncrement 007D                        PortProperty_Valid@F6830 FD59  
                         __end_ofi2_Motor_Step 39D8                                ??i2_MXK_Release 0001  
                 __size_of_irobot_led_power_on 001C                                      copy_data0 4426  
                                    copy_data1 4446                                      copy_data2 4466  
                                ??_MXK_Release 0060                         __end_ofi2_Byte_GetPair 62F0  
                    __size_of_Port_SetQuadType 0256                               __size_of_SPI_DCS 0030  
                          ?_Port_CheckQuadType 008F                          ?_irobot_move_straight 0079  
                       __end_ofi2_Byte_GetZone 50CA                            __end_ofi2_MXK_Queue 6462  
                                    mode2@dist 008C                            ?_Port_CheckPortType 0096  
                              itos@destination 006E                                       _InitList FC97  
                   __end_of_irobot_init_song_0 6192                           _Motor_Step$intlevel0 36AC  
                                     _Mode_Set 63FC                             Port_GetQuad@Output 0065  
                            ??_update_distance 007D                                    ??_ToSegment 0060  
                                 _ISR_Function 1408                                   _Timer0_Clear 646E  
                           Port_GetQuad@pInput 0060                                   _Timer2_Clear 64B8  
                         __end_of_Word_GetPair 5DFC                                       _lCBuffer 0400  
                         ??_Port_CheckPairType 008A                                    ??_Reset_Low 0074  
                                     __Hrparam 0000                                   _Timer0_Start 60E6  
                                 OutSeg@pInput 0066                                 _Console_Render 1ECA  
                                     __Lrparam 0000                                Timer2_Init@RDIV 0072  
                                     _iRCliffL 0034                                       _iRCliffR 0031  
                            _stepsToMinDegrees 0300                                 LCD_Write@value 0064  
                                     _Port_Set 109C                                   OutSeg@segset 003E  
                                    rand@screw 003B                           __end_of_Word_SetPair 5BB8  
                      __end_of_get_packet_size 5586                                    ??_Port_Init 00A3  
                      __end_of_HMI_SetSegments 42AC                           ??_Port_CheckQuadType 0093  
                             __size_of___fldiv 03C0                               _irobot_song_play 63B0  
                        __size_of_Port_GetQuad 004A                               __size_of___awdiv 00BE  
                             __size_of___flmul 04A6                               __size_of___fltol 010C  
                             __size_of___lldiv 00BC                              _MXK_BlockSwitchTo 5D80  
                             __size_of___lwdiv 0078                           ??_Port_CheckPortType 0099  
                             __size_of___lwmod 0062                                       _lBufferX 00E8  
                                     _lBufferY 00E7                            Timer2_Init@PRESCALE FD80  
                                   ?_rx_assign 0061                                LCD_Fill@pColour 0069  
                           ?_MXK_BlockSwitchTo 0001                      __size_ofi2_Timer0_Restart 000C  
                                     _lCurrent 00DA                               __size_of_getMode 0158  
                      __end_of_HMI_RightSwitch 6380                         Byte_GetZone@pChunkSize 0064  
                               ?_MXK_DIPSwitch 0001                         Byte_SetZone@pChunkSize 0064  
                        __size_of_Port_SetType 022A                                  reverse@length 0062  
                                    itos@input 006C                          i2MXK_SwitchTo@pModule 0008  
                                     ___xxtofl 22D4                            irobot_move@isScript 0078  
                           Motor_Init@pAddress 008F                                       _delay_ms 544C  
                                     _delay_us 58CC                                       _clearall 00E9  
                              ___lwdiv@divisor 0062                                ___lwdiv@counter 0064  
                              Port_GetPin@pPin 0062                                       __ptext10 39D8  
                                     __ptext11 4D58                                       __ptext20 4950  
                                     __ptext12 5520                                       __ptext21 4BB6  
                                     __ptext13 64B0                                       __ptext30 606A  
                                     __ptext22 6192                                       __ptext14 24A2  
                                     __ptext31 5E72                                       __ptext23 5714  
                                     __ptext15 640E                                       __ptext40 6094  
                                     __ptext32 60E6                                       __ptext24 5C84  
                                     __ptext16 2824                                       __ptext41 3AC8  
                                     __ptext33 5D04                                       __ptext25 5B2C  
                                     __ptext17 3FB6                                       __ptext50 1ECA  
                                     __ptext42 530A                                       __ptext34 4E64  
                                     __ptext26 4362                                       __ptext18 4078  
                                     __ptext51 513E                                       __ptext43 5650  
                                     __ptext35 50CA                                       __ptext27 5BFE  
                                     __ptext19 5586                                       __ptext60 4614  
                                     __ptext52 48AC                                       __ptext44 4FDC  
                                     __ptext36 2FCC                                       __ptext28 63B0  
                                     __ptext61 6282                                       __ptext53 5EAC  
                                     __ptext45 41F2                                       __ptext37 600E  
                                     __ptext29 37CC                                       __ptext70 646E  
                                     __ptext62 57CA                                       __ptext54 3E22  
                                     __ptext46 17C6                                       __ptext38 64F4  
                                     __ptext71 2CDA                                       __ptext63 53E2  
                                     __ptext55 5F18                                       __ptext47 4B26  
                                     __ptext39 5DFC                            ??_MXK_BlockSwitchTo 0066  
                                     __ptext80 56B2                                       __ptext72 29C2  
                                     __ptext64 6172                                       __ptext56 3BA0  
                                     __ptext48 649C                                       __ptext81 591E  
                                     __ptext73 1CA0                                       __ptext65 641C  
                                     __ptext57 22D4                                       __ptext49 64D0  
                                     __ptext90 58CC                                       __ptext82 5D42  
                                     __ptext74 5A54                                       __ptext66 642A  
                                     __ptext58 0000                                       __ptext91 2E5A  
                                     __ptext83 36A6                                       __ptext75 109C  
                                     __ptext67 61B0                                       __ptext59 0CDC  
                                     __ptext92 4A8E                                       __ptext84 64D6  
                                     __ptext76 6438                                       __ptext68 3C78  
                                     __ptext93 5822                                       __ptext85 647A  
                                     __ptext77 46BA                                       __ptext69 3132  
                                     __ptext94 44C0                                       __ptext86 5C42  
                                     __ptext78 4760                                       __ptext95 61CE  
                                     __ptext87 629E                                       __ptext79 4806  
                                     __ptext96 610C                                       __ptext88 6446  
                                     __ptext97 5376                                       __ptext89 5D80  
                                     __ptext98 63FC                                       __ptext99 529A  
                                 _SSP1CON1bits 000FC6                               __size_of_reverse 006C  
                                 _SSP1CON2bits 000FC5                    __size_of_PortProperty_Valid 007C  
                           i2Byte_GetZone@MASK 0007                              _ADC_ClockDivision 4CCE  
                                 ?_ADC_SetupIO 0001                                   _SSP2CON1bits 000F6C  
                                 _SSP2CON2bits 000F6B                                    _eusart_init 61B0  
                              ?i2_Byte_GetPair 000A                               ?_Console_NewLine 0001  
                            ??_Event_DIPSwitch 0079                                ?i2_Byte_GetZone 0001  
                           i2Byte_GetZone@pMax 0003                               ?_HMI_InitButtons 0001  
                           ?_ADC_ClockDivision 0001                                   ?_ADC_Voltage 00A0  
                          __end_of_MXK_Dequeue 5D80                              HMI_SetSegments@in 0064  
                        Button_Init@pThreshold 009D                                  __size_of_main 0052  
                                __size_of_init 00A6                                  __size_of_itos 00D8  
                            Byte_GetPair@pPair 006B                         __end_of_Console_Render 20DA  
                          i2Port_SetPin@pInput 0010                            i2Port_SetPin@pValue 0013  
                                 _Port_GetQuad 5A0A                            __end_of_MXK_Release 62BA  
                               _MXK_TestButton 6398                                  i2_Byte_SetBit 59BE  
                          ??_ADC_ClockDivision 0060                                   _iRDistanceSS 0308  
                                  _irobot_leds 57CA                                    _irobot_init 641C  
                          i2Word_GetPair@pPair 000F                                    _irobot_move 4362  
                               ADC_Voltage@max 00A6                                 ADC_Voltage@ref 00AA  
                    __end_of_MXK_BlockSwitchTo 5DBE                       ?_Console_IncrementCursor 0001  
                         __size_of_Timer0_Init 0160                           __size_of_Timer2_Init 0160  
                                     int$flags 0051                           __size_of_Timer0_Stop 0006  
                                 _Port_SetType 1CA0                                   Port_Set@Type 0086  
                   __size_of_GetPortProperties 00A6                         __size_of_LCD_DrawField 00A4  
                                 _iRDropCaster 002D                    __size_of_load_iRScriptStack 006A  
                            ??_Configure_GPIOs 0095                                      printf@val 0088  
                                 _SSP1STATbits 000FC7                           __size_of_Motor_Speed 002A  
                               Timer0_Init@DIV 0310                                 Timer0_Init@PRE 00E5  
                                 _SSP2STATbits 000F6D                                     _LED_Toggle 5A9C  
                                   _HMI_GetBar 64D0                           Button_Init@pGetState 00A2  
                       PortProperty_Valid@Pair 0085                               ??_Port_TogglePin 0077  
                                  _OSCTUNEbits 000F9B                                     _INTCONbits 000FF2  
                       PortProperty_Valid@pPin 0072                                     _HMI_SetBar 649C  
                                   _HMI_Render 5D04                               Byte_SetZone@MASK 006A  
                                  i2_MXK_Queue 6454                      __end_of_ADC_ClockDivision 4D58  
                               Timer2_Init@DIV 030C                                 Timer2_Init@PRE 00E3  
                             Byte_SetZone@pMax 0062                         __size_ofi2_Timer0_Stop 0006  
                         __size_of_Port_GetPin 0046                         ??_irobot_move_straight 007B  
               __size_of_update_bump_and_cliff 003A                           Button_Init@pFunction 00A5  
                                     itos@Data 0070                  __end_of_update_bump_and_cliff 5E72  
                           LCD_FillRectangle@i 0075                             LCD_FillRectangle@j 0076  
                         __size_of_Port_SetPin 00C4                                       intlevel2 0000  
                                 reverse@input 0060                         __size_of_HMI_DIPSwitch 0018  
                             ___lwmod@dividend 0067                               ___lldiv@dividend 0060  
                       __end_of_MXK_TestButton 63B0                                ?_Console_Render 0001  
                                _iRScriptIndex 0037                        __size_of_LCD_Word_Write 001E  
                               ?i2_Byte_SetBit 0001                                  _iRScriptStack 041E  
                        __size_of_MXK_SwitchTo 0042                       irobot_query_and_update@i 007C  
                     irobot_query_and_update@j 007A                                 _SPI_DisableISR 60BE  
                   __end_of_twos_complement_of 5C42                                Port_Init@pInput 00A0  
                                     printf@ap 0086                               ?_get_packet_size 0001  
                       __size_ofi2_Port_SetPin 00AA                                     _ISR_Enable 64A6  
                             ?_HMI_SetSegments 0061                        Console_MakeField@Column 006C  
                        __size_of_SPI_MaxSpeed 0074                               ??_ADC_SetChannel 0060  
                                SPI_DCS@pInput 0060                          __size_of_SPI_MinSpeed 0074  
                              ??_MXK_DIPSwitch 0066                                    ??_rx_assign 0063  
                        __size_of_update_angle 0012                          __size_ofi2_Motor_Step 0100  
                            ADC_Voltage@pInput 00A0                        Console_MakeField@pInput 006B  
                             ?_HMI_RightSwitch 0001                               ___lldiv@quotient 0068  
                                ??_GetPortPORT 0062                                ___lwmod@divisor 0069  
                                ??_GetPortTRIS 0062                          Timer0_Start@pFunction 0060  
                           Word_SetPair@pInput 006F                                ___lwmod@counter 006B  
                           Word_SetPair@pValue 0072                       ?_irobot_query_and_update 0066  
                             Motor_Init@pMotor 008D                                    _MXK_Dequeue 5D42  
                            ADC_Voltage@output 00AE                                  _distanceTotal 00D2  
                               LED_Toggle@pLED 0078                                  _LCD_DrawField 48AC  
                             _Port_SetQuadType 1A4A                                    _MXK_Release 629E  
                    __size_of_Console_FormFeed 008E                                   _MXK_SwitchTo 5C42  
                        __size_of_Word_GetPair 003E              irobot_query_and_update@startIndex 007B  
                           Byte_GetZone@Offset 0067                                  ?_Console_Init 0001  
                            Word_SetPair@pPair 0071                                _Port_SetPinType 2664  
                      __size_of_Timer0_Restart 000C                             Byte_GetZone@Output 0068  
                           Byte_GetZone@pChunk 0063                                ?_MXK_TestButton 0001  
                  __end_of_Console_ResetCursor 61B0                             Byte_GetZone@pInput 0060  
                      __size_ofi2_MXK_SwitchTo 0036                __end_of_Console_IncrementCursor 55EC  
                        __size_of_Word_SetPair 0046                         __end_of_SPI_DisableISR 60E6  
                                 _SPI_MaxSpeed 51B2              irobot_query_and_update@streamSize 0077  
                                 _SPI_MinSpeed 5226                             Port_Set@TypeActual 0084  
