

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Tue Sep 12 18:18:22 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK3,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    19                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    22                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	text0,global,reloc=2,class=CODE,delta=1
    24                           	psect	text1,global,reloc=2,class=CODE,delta=1
    25                           	psect	text2,global,reloc=2,class=CODE,delta=1
    26                           	psect	text3,global,reloc=2,class=CODE,delta=1
    27                           	psect	text4,global,reloc=2,class=CODE,delta=1
    28                           	psect	text5,global,reloc=2,class=CODE,delta=1
    29                           	psect	text6,global,reloc=2,class=CODE,delta=1
    30                           	psect	text7,global,reloc=2,class=CODE,delta=1
    31                           	psect	text8,global,reloc=2,class=CODE,delta=1
    32                           	psect	text9,global,reloc=2,class=CODE,delta=1
    33                           	psect	text10,global,reloc=2,class=CODE,delta=1
    34                           	psect	text11,global,reloc=2,class=CODE,delta=1
    35                           	psect	text12,global,reloc=2,class=CODE,delta=1
    36                           	psect	text13,global,reloc=2,class=CODE,delta=1
    37                           	psect	text14,global,reloc=2,class=CODE,delta=1
    38                           	psect	text15,global,reloc=2,class=CODE,delta=1
    39                           	psect	text16,global,reloc=2,class=CODE,delta=1
    40                           	psect	text17,global,reloc=2,class=CODE,delta=1
    41                           	psect	text18,global,reloc=2,class=CODE,delta=1
    42                           	psect	text19,global,reloc=2,class=CODE,delta=1,inline
    43                           	psect	text20,global,reloc=2,class=CODE,delta=1
    44                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text22,global,reloc=2,class=CODE,delta=1
    46                           	psect	text23,global,reloc=2,class=CODE,delta=1
    47                           	psect	text24,global,reloc=2,class=CODE,delta=1
    48                           	psect	text25,global,reloc=2,class=CODE,delta=1
    49                           	psect	text26,global,reloc=2,class=CODE,delta=1
    50                           	psect	text27,global,reloc=2,class=CODE,delta=1
    51                           	psect	text28,global,reloc=2,class=CODE,delta=1
    52                           	psect	text29,global,reloc=2,class=CODE,delta=1
    53                           	psect	text30,global,reloc=2,class=CODE,delta=1
    54                           	psect	text31,global,reloc=2,class=CODE,delta=1
    55                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text33,global,reloc=2,class=CODE,delta=1
    57                           	psect	text34,global,reloc=2,class=CODE,delta=1
    58                           	psect	text35,global,reloc=2,class=CODE,delta=1
    59                           	psect	text36,global,reloc=2,class=CODE,delta=1
    60                           	psect	text37,global,reloc=2,class=CODE,delta=1
    61                           	psect	text38,global,reloc=2,class=CODE,delta=1
    62                           	psect	text39,global,reloc=2,class=CODE,delta=1
    63                           	psect	text40,global,reloc=2,class=CODE,delta=1
    64                           	psect	text41,global,reloc=2,class=CODE,delta=1
    65                           	psect	text42,global,reloc=2,class=CODE,delta=1
    66                           	psect	text43,global,reloc=2,class=CODE,delta=1
    67                           	psect	text44,global,reloc=2,class=CODE,delta=1
    68                           	psect	text45,global,reloc=2,class=CODE,delta=1
    69                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text48,global,reloc=2,class=CODE,delta=1
    72                           	psect	text49,global,reloc=2,class=CODE,delta=1
    73                           	psect	text50,global,reloc=2,class=CODE,delta=1
    74                           	psect	text51,global,reloc=2,class=CODE,delta=1
    75                           	psect	text52,global,reloc=2,class=CODE,delta=1
    76                           	psect	text53,global,reloc=2,class=CODE,delta=1
    77                           	psect	text54,global,reloc=2,class=CODE,delta=1
    78                           	psect	text55,global,reloc=2,class=CODE,delta=1
    79                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    80                           	psect	text57,global,reloc=2,class=CODE,delta=1
    81                           	psect	text58,global,reloc=2,class=CODE,delta=1
    82                           	psect	text59,global,reloc=2,class=CODE,delta=1
    83                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=1
    84                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=1
    85                           	psect	text62,global,reloc=2,class=CODE,delta=1,group=1
    86                           	psect	text63,global,reloc=2,class=CODE,delta=1
    87                           	psect	text64,global,reloc=2,class=CODE,delta=1
    88                           	psect	text65,global,reloc=2,class=CODE,delta=1
    89                           	psect	text66,global,reloc=2,class=CODE,delta=1
    90                           	psect	text67,global,reloc=2,class=CODE,delta=1
    91                           	psect	text68,global,reloc=2,class=CODE,delta=1
    92                           	psect	text69,global,reloc=2,class=CODE,delta=1
    93                           	psect	text70,global,reloc=2,class=CODE,delta=1
    94                           	psect	text71,global,reloc=2,class=CODE,delta=1
    95                           	psect	text72,global,reloc=2,class=CODE,delta=1
    96                           	psect	text73,global,reloc=2,class=CODE,delta=1
    97                           	psect	text74,global,reloc=2,class=CODE,delta=1
    98                           	psect	text75,global,reloc=2,class=CODE,delta=1
    99                           	psect	text76,global,reloc=2,class=CODE,delta=1
   100                           	psect	text77,global,reloc=2,class=CODE,delta=1
   101                           	psect	text78,global,reloc=2,class=CODE,delta=1
   102                           	psect	text79,global,reloc=2,class=CODE,delta=1
   103                           	psect	text80,global,reloc=2,class=CODE,delta=1
   104                           	psect	text81,global,reloc=2,class=CODE,delta=1
   105                           	psect	text82,global,reloc=2,class=CODE,delta=1
   106                           	psect	text83,global,reloc=2,class=CODE,delta=1
   107                           	psect	text84,global,reloc=2,class=CODE,delta=1
   108                           	psect	text85,global,reloc=2,class=CODE,delta=1
   109                           	psect	text86,global,reloc=2,class=CODE,delta=1
   110                           	psect	text87,global,reloc=2,class=CODE,delta=1
   111                           	psect	text88,global,reloc=2,class=CODE,delta=1
   112                           	psect	text89,global,reloc=2,class=CODE,delta=1
   113                           	psect	text90,global,reloc=2,class=CODE,delta=1
   114                           	psect	text91,global,reloc=2,class=CODE,delta=1
   115                           	psect	text92,global,reloc=2,class=CODE,delta=1
   116                           	psect	text93,global,reloc=2,class=CODE,delta=1
   117                           	psect	text94,global,reloc=2,class=CODE,delta=1
   118                           	psect	text95,global,reloc=2,class=CODE,delta=1
   119                           	psect	text96,global,reloc=2,class=CODE,delta=1
   120                           	psect	text97,global,reloc=2,class=CODE,delta=1
   121                           	psect	text98,global,reloc=2,class=CODE,delta=1
   122                           	psect	text99,global,reloc=2,class=CODE,delta=1
   123                           	psect	text100,global,reloc=2,class=CODE,delta=1
   124                           	psect	text101,global,reloc=2,class=CODE,delta=1,inline
   125                           	psect	text102,global,reloc=2,class=CODE,delta=1
   126                           	psect	text103,global,reloc=2,class=CODE,delta=1
   127                           	psect	text104,global,reloc=2,class=CODE,delta=1
   128                           	psect	text105,global,reloc=2,class=CODE,delta=1
   129                           	psect	text106,global,reloc=2,class=CODE,delta=1,inline
   130                           	psect	text107,global,reloc=2,class=CODE,delta=1,inline
   131                           	psect	text108,global,reloc=2,class=CODE,delta=1
   132                           	psect	text109,global,reloc=2,class=CODE,delta=1
   133                           	psect	text110,global,reloc=2,class=CODE,delta=1
   134                           	psect	text111,global,reloc=2,class=CODE,delta=1
   135                           	psect	text112,global,reloc=2,class=CODE,delta=1
   136                           	psect	text113,global,reloc=2,class=CODE,delta=1
   137                           	psect	text114,global,reloc=2,class=CODE,delta=1
   138                           	psect	text115,global,reloc=2,class=CODE,delta=1
   139                           	psect	text116,global,reloc=2,class=CODE,delta=1,group=1
   140                           	psect	text117,global,reloc=2,class=CODE,delta=1
   141                           	psect	text118,global,reloc=2,class=CODE,delta=1
   142                           	psect	text119,global,reloc=2,class=CODE,delta=1
   143                           	psect	text120,global,reloc=2,class=CODE,delta=1
   144                           	psect	text121,global,reloc=2,class=CODE,delta=1
   145                           	psect	text122,global,reloc=2,class=CODE,delta=1
   146                           	psect	text123,global,reloc=2,class=CODE,delta=1
   147                           	psect	text124,global,reloc=2,class=CODE,delta=1
   148                           	psect	text125,global,reloc=2,class=CODE,delta=1
   149                           	psect	text126,global,reloc=2,class=CODE,delta=1
   150                           	psect	text127,global,reloc=2,class=CODE,delta=1
   151                           	psect	text128,global,reloc=2,class=CODE,delta=1
   152                           	psect	text129,global,reloc=2,class=CODE,delta=1
   153                           	psect	text130,global,reloc=2,class=CODE,delta=1
   154                           	psect	text131,global,reloc=2,class=CODE,delta=1
   155                           	psect	text132,global,reloc=2,class=CODE,delta=1
   156                           	psect	text133,global,reloc=2,class=CODE,delta=1
   157                           	psect	text134,global,reloc=2,class=CODE,delta=1,inline
   158                           	psect	text135,global,reloc=2,class=CODE,delta=1
   159                           	psect	text136,global,reloc=2,class=CODE,delta=1,inline
   160                           	psect	text137,global,reloc=2,class=CODE,delta=1
   161                           	psect	text138,global,reloc=2,class=CODE,delta=1
   162                           	psect	text139,global,reloc=2,class=CODE,delta=1
   163                           	psect	text140,global,reloc=2,class=CODE,delta=1
   164                           	psect	text141,global,reloc=2,class=CODE,delta=1
   165                           	psect	text142,global,reloc=2,class=CODE,delta=1
   166                           	psect	text143,global,reloc=2,class=CODE,delta=1
   167                           	psect	text144,global,reloc=2,class=CODE,delta=1
   168                           	psect	text145,global,reloc=2,class=CODE,delta=1
   169                           	psect	text146,global,reloc=2,class=CODE,delta=1
   170                           	psect	text147,global,reloc=2,class=CODE,delta=1
   171                           	psect	text148,global,reloc=2,class=CODE,delta=1
   172                           	psect	text149,global,reloc=2,class=CODE,delta=1
   173                           	psect	text150,global,reloc=2,class=CODE,delta=1
   174                           	psect	text151,global,reloc=2,class=CODE,delta=1
   175                           	psect	text152,global,reloc=2,class=CODE,delta=1
   176                           	psect	text153,global,reloc=2,class=CODE,delta=1
   177                           	psect	text154,global,reloc=2,class=CODE,delta=1
   178                           	psect	text155,global,reloc=2,class=CODE,delta=1
   179                           	psect	text156,global,reloc=2,class=CODE,delta=1
   180                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   181                           	psect	text158,global,reloc=2,class=CODE,delta=1
   182                           	psect	text159,global,reloc=2,class=CODE,delta=1
   183                           	psect	text160,global,reloc=2,class=CODE,delta=1
   184                           	psect	text161,global,reloc=2,class=CODE,delta=1
   185                           	psect	text162,global,reloc=2,class=CODE,delta=1
   186                           	psect	text163,global,reloc=2,class=CODE,delta=1
   187                           	psect	text164,global,reloc=2,class=CODE,delta=1
   188                           	psect	text165,global,reloc=2,class=CODE,delta=1,inline
   189                           	psect	text166,global,reloc=2,class=CODE,delta=1
   190                           	psect	text167,global,reloc=2,class=CODE,delta=1
   191                           	psect	text168,global,reloc=2,class=CODE,delta=1
   192                           	psect	text169,global,reloc=2,class=CODE,delta=1
   193                           	psect	text170,global,reloc=2,class=CODE,delta=1
   194                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   195                           	psect	text171,global,reloc=2,class=CODE,delta=1
   196                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   197                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   198  0000                     
   199                           ; Version 1.43
   200                           ; Generated 25/07/2017 GMT
   201                           ; 
   202                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   203                           ; All rights reserved.
   204                           ; 
   205                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   206                           ; 
   207                           ; Redistribution and use in source and binary forms, with or without modification, are
   208                           ; permitted provided that the following conditions are met:
   209                           ; 
   210                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   211                           ;        conditions and the following disclaimer.
   212                           ; 
   213                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   214                           ;        of conditions and the following disclaimer in the documentation and/or other
   215                           ;        materials provided with the distribution.
   216                           ; 
   217                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   218                           ;        software without specific prior written permission.
   219                           ; 
   220                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   221                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   222                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   223                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   224                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   225                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   226                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   227                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   228                           ; 
   229                           ; 
   230                           ; Code-generator required, PIC18F67J50 Definitions
   231                           ; 
   232                           ; SFR Addresses
   233  0000                     
   234                           	psect	idataCOMRAM
   235  016516                     __pidataCOMRAM:
   236                           	opt stack 0
   237                           
   238                           ;initializer for _gCursor
   239  016516  0006               	dw	6
   240  016518  0006               	dw	6
   241                           
   242                           ;initializer for _Bus_State
   243  01651A  01                 	db	1
   244                           
   245                           ;initializer for _A
   246  01651B  41                 	db	65
   247                           
   248                           ;initializer for _a
   249  01651C  61                 	db	97
   250                           
   251                           ;initializer for _zero
   252  01651D  30                 	db	48
   253                           
   254                           ;initializer for _l
   255  01651E  80                 	db	128
   256                           
   257                           ;initializer for _w
   258  01651F  80                 	db	128
   259                           
   260                           	psect	idataBANK0
   261  01654C                     __pidataBANK0:
   262                           	opt stack 0
   263                           
   264                           ;initializer for _TimerX
   265  01654C  0008               	dw	8
   266                           
   267                           ;initializer for _MinDist
   268  01654E  03E8               	dw	1000
   269                           
   270                           ;initializer for _gForecolour
   271  016550  FFFF               	dw	65535
   272                           
   273                           ;initializer for _change
   274  016552  01                 	db	1
   275                           
   276                           	psect	idataBANK3
   277  0164E6                     __pidataBANK3:
   278                           	opt stack 0
   279                           
   280                           ;initializer for Console_Render@F6956
   281  0164E6  0006               	dw	6
   282  0164E8  0006               	dw	6
   283                           
   284                           ;initializer for _gLineSize
   285  0164EA  0080               	dw	128
   286  0164EC  0007               	dw	7
   287                           
   288                           ;initializer for _gCharSize
   289  0164EE  0005               	dw	5
   290  0164F0  0007               	dw	7
   291                           
   292                           	psect	mediumconst
   293  00FCC2                     __pmediumconst:
   294                           	opt stack 0
   295  00FCC2  00                 	db	0
   296  00FCC3                     _InitList:
   297                           	opt stack 0
   298  00FCC3  1100               	dw	4352
   299  00FCC5  0080               	dw	128
   300  00FCC7  012C               	dw	300
   301  00FCC9  B100               	dw	45312
   302  00FCCB  0002               	dw	2
   303  00FCCD  0035               	dw	53
   304  00FCCF  0036               	dw	54
   305  00FCD1  B200               	dw	45568
   306  00FCD3  0002               	dw	2
   307  00FCD5  0035               	dw	53
   308  00FCD7  0036               	dw	54
   309  00FCD9  B300               	dw	45824
   310  00FCDB  0002               	dw	2
   311  00FCDD  0035               	dw	53
   312  00FCDF  0036               	dw	54
   313  00FCE1  0002               	dw	2
   314  00FCE3  0035               	dw	53
   315  00FCE5  0036               	dw	54
   316  00FCE7  B400               	dw	46080
   317  00FCE9  0000               	dw	0
   318  00FCEB  C000               	dw	49152
   319  00FCED  00A2               	dw	162
   320  00FCEF  0002               	dw	2
   321  00FCF1  0084               	dw	132
   322  00FCF3  C100               	dw	49408
   323  00FCF5  00C5               	dw	197
   324  00FCF7  C200               	dw	49664
   325  00FCF9  000D               	dw	13
   326  00FCFB  0000               	dw	0
   327  00FCFD  C300               	dw	49920
   328  00FCFF  008D               	dw	141
   329  00FD01  002A               	dw	42
   330  00FD03  C400               	dw	50176
   331  00FD05  008D               	dw	141
   332  00FD07  00EE               	dw	238
   333  00FD09  C500               	dw	50432
   334  00FD0B  000A               	dw	10
   335  00FD0D  3600               	dw	13824
   336  00FD0F  00C8               	dw	200
   337  00FD11  E000               	dw	57344
   338  00FD13  0012               	dw	18
   339  00FD15  001C               	dw	28
   340  00FD17  0010               	dw	16
   341  00FD19  0018               	dw	24
   342  00FD1B  0033               	dw	51
   343  00FD1D  002C               	dw	44
   344  00FD1F  0025               	dw	37
   345  00FD21  0028               	dw	40
   346  00FD23  0028               	dw	40
   347  00FD25  0027               	dw	39
   348  00FD27  002F               	dw	47
   349  00FD29  003C               	dw	60
   350  00FD2B  0000               	dw	0
   351  00FD2D  0003               	dw	3
   352  00FD2F  0003               	dw	3
   353  00FD31  0010               	dw	16
   354  00FD33  0080               	dw	128
   355  00FD35  0078               	dw	120
   356  00FD37  E100               	dw	57600
   357  00FD39  0012               	dw	18
   358  00FD3B  001C               	dw	28
   359  00FD3D  0010               	dw	16
   360  00FD3F  0018               	dw	24
   361  00FD41  002D               	dw	45
   362  00FD43  0028               	dw	40
   363  00FD45  0023               	dw	35
   364  00FD47  0028               	dw	40
   365  00FD49  0028               	dw	40
   366  00FD4B  0026               	dw	38
   367  00FD4D  002F               	dw	47
   368  00FD4F  003B               	dw	59
   369  00FD51  0000               	dw	0
   370  00FD53  0003               	dw	3
   371  00FD55  0003               	dw	3
   372  00FD57  0010               	dw	16
   373  00FD59  3A00               	dw	14848
   374  00FD5B  0005               	dw	5
   375  00FD5D  2A00               	dw	10752
   376  00FD5F  0000               	dw	0
   377  00FD61  0002               	dw	2
   378  00FD63  0000               	dw	0
   379  00FD65  0081               	dw	129
   380  00FD67  2B00               	dw	11008
   381  00FD69  0000               	dw	0
   382  00FD6B  0003               	dw	3
   383  00FD6D  0000               	dw	0
   384  00FD6F  00A2               	dw	162
   385  00FD71  2900               	dw	10496
   386  00FD73  2C00               	dw	11264
   387  00FD75                     __end_of_InitList:
   388                           	opt stack 0
   389  00FD75                     Timer0_Init@PRESCALE:
   390                           	opt stack 0
   391  00FD75  0002               	dw	2
   392  00FD77  0004               	dw	4
   393  00FD79  0008               	dw	8
   394  00FD7B  0010               	dw	16
   395  00FD7D  0020               	dw	32
   396  00FD7F  0040               	dw	64
   397  00FD81  0080               	dw	128
   398  00FD83  0100               	dw	256
   399  00FD85                     __end_ofTimer0_Init@PRESCALE:
   400                           	opt stack 0
   401  00FD85                     PortProperty_Valid@F6830:
   402                           	opt stack 0
   403  00FD85  00                 	db	0
   404  00FD86  01                 	db	1
   405  00FD87  02                 	db	2
   406  00FD88  00                 	db	0
   407  00FD89  01                 	db	1
   408  00FD8A  00                 	db	0
   409  00FD8B  01                 	db	1
   410  00FD8C  00                 	db	0
   411  00FD8D  02                 	db	2
   412  00FD8E  02                 	db	2
   413  00FD8F  00                 	db	0
   414  00FD90  00                 	db	0
   415  00FD91  03                 	db	3
   416  00FD92  03                 	db	3
   417  00FD93  03                 	db	3
   418  00FD94  00                 	db	0
   419  00FD95                     __end_ofPortProperty_Valid@F6830:
   420                           	opt stack 0
   421  00FD95                     _dpowers:
   422                           	opt stack 0
   423  00FD95  0001               	dw	1
   424  00FD97  000A               	dw	10
   425  00FD99  0064               	dw	100
   426  00FD9B  03E8               	dw	1000
   427  00FD9D  2710               	dw	10000
   428  00FD9F                     __end_of_dpowers:
   429                           	opt stack 0
   430  00FD9F                     _MASKS:
   431                           	opt stack 0
   432  00FD9F  00                 	db	0
   433  00FDA0  01                 	db	1
   434  00FDA1  03                 	db	3
   435  00FDA2  07                 	db	7
   436  00FDA3  0F                 	db	15
   437  00FDA4  1F                 	db	31
   438  00FDA5  3F                 	db	63
   439  00FDA6  7F                 	db	127
   440  00FDA7  FF                 	db	255
   441  00FDA8                     __end_of_MASKS:
   442                           	opt stack 0
   443  00FDA8                     HMI_SetButton@F7213:
   444                           	opt stack 0
   445  00FDA8  00                 	db	0
   446  00FDA9  02                 	db	2
   447  00FDAA  01                 	db	1
   448  00FDAB  03                 	db	3
   449  00FDAC                     __end_ofHMI_SetButton@F7213:
   450                           	opt stack 0
   451  00FDAC                     Timer2_Init@PRESCALE:
   452                           	opt stack 0
   453  00FDAC  01                 	db	1
   454  00FDAD  04                 	db	4
   455  00FDAE  10                 	db	16
   456  00FDAF                     __end_ofTimer2_Init@PRESCALE:
   457                           	opt stack 0
   458  00FDAF                     _Font5x7:
   459                           	opt stack 0
   460  00FDAF  00                 	db	0
   461  00FDB0  00                 	db	0
   462  00FDB1  00                 	db	0
   463  00FDB2  00                 	db	0
   464  00FDB3  00                 	db	0
   465  00FDB4  00                 	db	0
   466  00FDB5  00                 	db	0
   467  00FDB6  5F                 	db	95
   468  00FDB7  00                 	db	0
   469  00FDB8  00                 	db	0
   470  00FDB9  00                 	db	0
   471  00FDBA  07                 	db	7
   472  00FDBB  00                 	db	0
   473  00FDBC  07                 	db	7
   474  00FDBD  00                 	db	0
   475  00FDBE  14                 	db	20
   476  00FDBF  7F                 	db	127
   477  00FDC0  14                 	db	20
   478  00FDC1  7F                 	db	127
   479  00FDC2  14                 	db	20
   480  00FDC3  24                 	db	36
   481  00FDC4  2A                 	db	42
   482  00FDC5  7F                 	db	127
   483  00FDC6  2A                 	db	42
   484  00FDC7  12                 	db	18
   485  00FDC8  23                 	db	35
   486  00FDC9  13                 	db	19
   487  00FDCA  08                 	db	8
   488  00FDCB  64                 	db	100
   489  00FDCC  62                 	db	98
   490  00FDCD  36                 	db	54
   491  00FDCE  49                 	db	73
   492  00FDCF  55                 	db	85
   493  00FDD0  22                 	db	34
   494  00FDD1  50                 	db	80
   495  00FDD2  00                 	db	0
   496  00FDD3  05                 	db	5
   497  00FDD4  03                 	db	3
   498  00FDD5  00                 	db	0
   499  00FDD6  00                 	db	0
   500  00FDD7  00                 	db	0
   501  00FDD8  1C                 	db	28
   502  00FDD9  22                 	db	34
   503  00FDDA  41                 	db	65
   504  00FDDB  00                 	db	0
   505  00FDDC  00                 	db	0
   506  00FDDD  41                 	db	65
   507  00FDDE  22                 	db	34
   508  00FDDF  1C                 	db	28
   509  00FDE0  00                 	db	0
   510  00FDE1  08                 	db	8
   511  00FDE2  2A                 	db	42
   512  00FDE3  1C                 	db	28
   513  00FDE4  2A                 	db	42
   514  00FDE5  08                 	db	8
   515  00FDE6  08                 	db	8
   516  00FDE7  08                 	db	8
   517  00FDE8  3E                 	db	62
   518  00FDE9  08                 	db	8
   519  00FDEA  08                 	db	8
   520  00FDEB  00                 	db	0
   521  00FDEC  50                 	db	80
   522  00FDED  30                 	db	48
   523  00FDEE  00                 	db	0
   524  00FDEF  00                 	db	0
   525  00FDF0  08                 	db	8
   526  00FDF1  08                 	db	8
   527  00FDF2  08                 	db	8
   528  00FDF3  08                 	db	8
   529  00FDF4  08                 	db	8
   530  00FDF5  00                 	db	0
   531  00FDF6  60                 	db	96
   532  00FDF7  60                 	db	96
   533  00FDF8  00                 	db	0
   534  00FDF9  00                 	db	0
   535  00FDFA  20                 	db	32
   536  00FDFB  10                 	db	16
   537  00FDFC  08                 	db	8
   538  00FDFD  04                 	db	4
   539  00FDFE  02                 	db	2
   540  00FDFF  3E                 	db	62
   541  00FE00  51                 	db	81
   542  00FE01  49                 	db	73
   543  00FE02  45                 	db	69
   544  00FE03  3E                 	db	62
   545  00FE04  00                 	db	0
   546  00FE05  42                 	db	66
   547  00FE06  7F                 	db	127
   548  00FE07  40                 	db	64
   549  00FE08  00                 	db	0
   550  00FE09  42                 	db	66
   551  00FE0A  61                 	db	97
   552  00FE0B  51                 	db	81
   553  00FE0C  49                 	db	73
   554  00FE0D  46                 	db	70
   555  00FE0E  21                 	db	33
   556  00FE0F  41                 	db	65
   557  00FE10  45                 	db	69
   558  00FE11  4B                 	db	75
   559  00FE12  31                 	db	49
   560  00FE13  18                 	db	24
   561  00FE14  14                 	db	20
   562  00FE15  12                 	db	18
   563  00FE16  7F                 	db	127
   564  00FE17  10                 	db	16
   565  00FE18  27                 	db	39
   566  00FE19  45                 	db	69
   567  00FE1A  45                 	db	69
   568  00FE1B  45                 	db	69
   569  00FE1C  39                 	db	57
   570  00FE1D  3C                 	db	60
   571  00FE1E  4A                 	db	74
   572  00FE1F  49                 	db	73
   573  00FE20  49                 	db	73
   574  00FE21  30                 	db	48
   575  00FE22  01                 	db	1
   576  00FE23  71                 	db	113
   577  00FE24  09                 	db	9
   578  00FE25  05                 	db	5
   579  00FE26  03                 	db	3
   580  00FE27  36                 	db	54
   581  00FE28  49                 	db	73
   582  00FE29  49                 	db	73
   583  00FE2A  49                 	db	73
   584  00FE2B  36                 	db	54
   585  00FE2C  06                 	db	6
   586  00FE2D  49                 	db	73
   587  00FE2E  49                 	db	73
   588  00FE2F  29                 	db	41
   589  00FE30  1E                 	db	30
   590  00FE31  00                 	db	0
   591  00FE32  36                 	db	54
   592  00FE33  36                 	db	54
   593  00FE34  00                 	db	0
   594  00FE35  00                 	db	0
   595  00FE36  00                 	db	0
   596  00FE37  56                 	db	86
   597  00FE38  36                 	db	54
   598  00FE39  00                 	db	0
   599  00FE3A  00                 	db	0
   600  00FE3B  00                 	db	0
   601  00FE3C  08                 	db	8
   602  00FE3D  14                 	db	20
   603  00FE3E  22                 	db	34
   604  00FE3F  41                 	db	65
   605  00FE40  14                 	db	20
   606  00FE41  14                 	db	20
   607  00FE42  14                 	db	20
   608  00FE43  14                 	db	20
   609  00FE44  14                 	db	20
   610  00FE45  41                 	db	65
   611  00FE46  22                 	db	34
   612  00FE47  14                 	db	20
   613  00FE48  08                 	db	8
   614  00FE49  00                 	db	0
   615  00FE4A  02                 	db	2
   616  00FE4B  01                 	db	1
   617  00FE4C  51                 	db	81
   618  00FE4D  09                 	db	9
   619  00FE4E  06                 	db	6
   620  00FE4F  32                 	db	50
   621  00FE50  49                 	db	73
   622  00FE51  79                 	db	121
   623  00FE52  41                 	db	65
   624  00FE53  3E                 	db	62
   625  00FE54  7E                 	db	126
   626  00FE55  11                 	db	17
   627  00FE56  11                 	db	17
   628  00FE57  11                 	db	17
   629  00FE58  7E                 	db	126
   630  00FE59  7F                 	db	127
   631  00FE5A  49                 	db	73
   632  00FE5B  49                 	db	73
   633  00FE5C  49                 	db	73
   634  00FE5D  36                 	db	54
   635  00FE5E  3E                 	db	62
   636  00FE5F  41                 	db	65
   637  00FE60  41                 	db	65
   638  00FE61  41                 	db	65
   639  00FE62  22                 	db	34
   640  00FE63  7F                 	db	127
   641  00FE64  41                 	db	65
   642  00FE65  41                 	db	65
   643  00FE66  22                 	db	34
   644  00FE67  1C                 	db	28
   645  00FE68  7F                 	db	127
   646  00FE69  49                 	db	73
   647  00FE6A  49                 	db	73
   648  00FE6B  49                 	db	73
   649  00FE6C  41                 	db	65
   650  00FE6D  7F                 	db	127
   651  00FE6E  09                 	db	9
   652  00FE6F  09                 	db	9
   653  00FE70  01                 	db	1
   654  00FE71  01                 	db	1
   655  00FE72  3E                 	db	62
   656  00FE73  41                 	db	65
   657  00FE74  41                 	db	65
   658  00FE75  51                 	db	81
   659  00FE76  32                 	db	50
   660  00FE77  7F                 	db	127
   661  00FE78  08                 	db	8
   662  00FE79  08                 	db	8
   663  00FE7A  08                 	db	8
   664  00FE7B  7F                 	db	127
   665  00FE7C  00                 	db	0
   666  00FE7D  41                 	db	65
   667  00FE7E  7F                 	db	127
   668  00FE7F  41                 	db	65
   669  00FE80  00                 	db	0
   670  00FE81  20                 	db	32
   671  00FE82  40                 	db	64
   672  00FE83  41                 	db	65
   673  00FE84  3F                 	db	63
   674  00FE85  01                 	db	1
   675  00FE86  7F                 	db	127
   676  00FE87  08                 	db	8
   677  00FE88  14                 	db	20
   678  00FE89  22                 	db	34
   679  00FE8A  41                 	db	65
   680  00FE8B  7F                 	db	127
   681  00FE8C  40                 	db	64
   682  00FE8D  40                 	db	64
   683  00FE8E  40                 	db	64
   684  00FE8F  40                 	db	64
   685  00FE90  7F                 	db	127
   686  00FE91  02                 	db	2
   687  00FE92  04                 	db	4
   688  00FE93  02                 	db	2
   689  00FE94  7F                 	db	127
   690  00FE95  7F                 	db	127
   691  00FE96  04                 	db	4
   692  00FE97  08                 	db	8
   693  00FE98  10                 	db	16
   694  00FE99  7F                 	db	127
   695  00FE9A  3E                 	db	62
   696  00FE9B  41                 	db	65
   697  00FE9C  41                 	db	65
   698  00FE9D  41                 	db	65
   699  00FE9E  3E                 	db	62
   700  00FE9F  7F                 	db	127
   701  00FEA0  09                 	db	9
   702  00FEA1  09                 	db	9
   703  00FEA2  09                 	db	9
   704  00FEA3  06                 	db	6
   705  00FEA4  3E                 	db	62
   706  00FEA5  41                 	db	65
   707  00FEA6  51                 	db	81
   708  00FEA7  21                 	db	33
   709  00FEA8  5E                 	db	94
   710  00FEA9  7F                 	db	127
   711  00FEAA  09                 	db	9
   712  00FEAB  19                 	db	25
   713  00FEAC  29                 	db	41
   714  00FEAD  46                 	db	70
   715  00FEAE  46                 	db	70
   716  00FEAF  49                 	db	73
   717  00FEB0  49                 	db	73
   718  00FEB1  49                 	db	73
   719  00FEB2  31                 	db	49
   720  00FEB3  01                 	db	1
   721  00FEB4  01                 	db	1
   722  00FEB5  7F                 	db	127
   723  00FEB6  01                 	db	1
   724  00FEB7  01                 	db	1
   725  00FEB8  3F                 	db	63
   726  00FEB9  40                 	db	64
   727  00FEBA  40                 	db	64
   728  00FEBB  40                 	db	64
   729  00FEBC  3F                 	db	63
   730  00FEBD  1F                 	db	31
   731  00FEBE  20                 	db	32
   732  00FEBF  40                 	db	64
   733  00FEC0  20                 	db	32
   734  00FEC1  1F                 	db	31
   735  00FEC2  7F                 	db	127
   736  00FEC3  20                 	db	32
   737  00FEC4  18                 	db	24
   738  00FEC5  20                 	db	32
   739  00FEC6  7F                 	db	127
   740  00FEC7  63                 	db	99
   741  00FEC8  14                 	db	20
   742  00FEC9  08                 	db	8
   743  00FECA  14                 	db	20
   744  00FECB  63                 	db	99
   745  00FECC  03                 	db	3
   746  00FECD  04                 	db	4
   747  00FECE  78                 	db	120
   748  00FECF  04                 	db	4
   749  00FED0  03                 	db	3
   750  00FED1  61                 	db	97
   751  00FED2  51                 	db	81
   752  00FED3  49                 	db	73
   753  00FED4  45                 	db	69
   754  00FED5  43                 	db	67
   755  00FED6  00                 	db	0
   756  00FED7  00                 	db	0
   757  00FED8  7F                 	db	127
   758  00FED9  41                 	db	65
   759  00FEDA  41                 	db	65
   760  00FEDB  02                 	db	2
   761  00FEDC  04                 	db	4
   762  00FEDD  08                 	db	8
   763  00FEDE  10                 	db	16
   764  00FEDF  20                 	db	32
   765  00FEE0  41                 	db	65
   766  00FEE1  41                 	db	65
   767  00FEE2  7F                 	db	127
   768  00FEE3  00                 	db	0
   769  00FEE4  00                 	db	0
   770  00FEE5  04                 	db	4
   771  00FEE6  02                 	db	2
   772  00FEE7  01                 	db	1
   773  00FEE8  02                 	db	2
   774  00FEE9  04                 	db	4
   775  00FEEA  40                 	db	64
   776  00FEEB  40                 	db	64
   777  00FEEC  40                 	db	64
   778  00FEED  40                 	db	64
   779  00FEEE  40                 	db	64
   780  00FEEF  00                 	db	0
   781  00FEF0  01                 	db	1
   782  00FEF1  02                 	db	2
   783  00FEF2  04                 	db	4
   784  00FEF3  00                 	db	0
   785  00FEF4  20                 	db	32
   786  00FEF5  54                 	db	84
   787  00FEF6  54                 	db	84
   788  00FEF7  54                 	db	84
   789  00FEF8  78                 	db	120
   790  00FEF9  7F                 	db	127
   791  00FEFA  48                 	db	72
   792  00FEFB  44                 	db	68
   793  00FEFC  44                 	db	68
   794  00FEFD  38                 	db	56
   795  00FEFE  38                 	db	56
   796  00FEFF  44                 	db	68
   797  00FF00  44                 	db	68
   798  00FF01  44                 	db	68
   799  00FF02  20                 	db	32
   800  00FF03  38                 	db	56
   801  00FF04  44                 	db	68
   802  00FF05  44                 	db	68
   803  00FF06  48                 	db	72
   804  00FF07  7F                 	db	127
   805  00FF08  38                 	db	56
   806  00FF09  54                 	db	84
   807  00FF0A  54                 	db	84
   808  00FF0B  54                 	db	84
   809  00FF0C  18                 	db	24
   810  00FF0D  08                 	db	8
   811  00FF0E  7E                 	db	126
   812  00FF0F  09                 	db	9
   813  00FF10  01                 	db	1
   814  00FF11  02                 	db	2
   815  00FF12  08                 	db	8
   816  00FF13  14                 	db	20
   817  00FF14  54                 	db	84
   818  00FF15  54                 	db	84
   819  00FF16  3C                 	db	60
   820  00FF17  7F                 	db	127
   821  00FF18  08                 	db	8
   822  00FF19  04                 	db	4
   823  00FF1A  04                 	db	4
   824  00FF1B  78                 	db	120
   825  00FF1C  00                 	db	0
   826  00FF1D  44                 	db	68
   827  00FF1E  7D                 	db	125
   828  00FF1F  40                 	db	64
   829  00FF20  00                 	db	0
   830  00FF21  20                 	db	32
   831  00FF22  40                 	db	64
   832  00FF23  44                 	db	68
   833  00FF24  3D                 	db	61
   834  00FF25  00                 	db	0
   835  00FF26  00                 	db	0
   836  00FF27  7F                 	db	127
   837  00FF28  10                 	db	16
   838  00FF29  28                 	db	40
   839  00FF2A  44                 	db	68
   840  00FF2B  00                 	db	0
   841  00FF2C  41                 	db	65
   842  00FF2D  7F                 	db	127
   843  00FF2E  40                 	db	64
   844  00FF2F  00                 	db	0
   845  00FF30  7C                 	db	124
   846  00FF31  04                 	db	4
   847  00FF32  18                 	db	24
   848  00FF33  04                 	db	4
   849  00FF34  78                 	db	120
   850  00FF35  7C                 	db	124
   851  00FF36  08                 	db	8
   852  00FF37  04                 	db	4
   853  00FF38  04                 	db	4
   854  00FF39  78                 	db	120
   855  00FF3A  38                 	db	56
   856  00FF3B  44                 	db	68
   857  00FF3C  44                 	db	68
   858  00FF3D  44                 	db	68
   859  00FF3E  38                 	db	56
   860  00FF3F  7C                 	db	124
   861  00FF40  14                 	db	20
   862  00FF41  14                 	db	20
   863  00FF42  14                 	db	20
   864  00FF43  08                 	db	8
   865  00FF44  08                 	db	8
   866  00FF45  14                 	db	20
   867  00FF46  14                 	db	20
   868  00FF47  18                 	db	24
   869  00FF48  7C                 	db	124
   870  00FF49  7C                 	db	124
   871  00FF4A  08                 	db	8
   872  00FF4B  04                 	db	4
   873  00FF4C  04                 	db	4
   874  00FF4D  08                 	db	8
   875  00FF4E  48                 	db	72
   876  00FF4F  54                 	db	84
   877  00FF50  54                 	db	84
   878  00FF51  54                 	db	84
   879  00FF52  20                 	db	32
   880  00FF53  04                 	db	4
   881  00FF54  3F                 	db	63
   882  00FF55  44                 	db	68
   883  00FF56  40                 	db	64
   884  00FF57  20                 	db	32
   885  00FF58  3C                 	db	60
   886  00FF59  40                 	db	64
   887  00FF5A  40                 	db	64
   888  00FF5B  20                 	db	32
   889  00FF5C  7C                 	db	124
   890  00FF5D  1C                 	db	28
   891  00FF5E  20                 	db	32
   892  00FF5F  40                 	db	64
   893  00FF60  20                 	db	32
   894  00FF61  1C                 	db	28
   895  00FF62  3C                 	db	60
   896  00FF63  40                 	db	64
   897  00FF64  30                 	db	48
   898  00FF65  40                 	db	64
   899  00FF66  3C                 	db	60
   900  00FF67  44                 	db	68
   901  00FF68  28                 	db	40
   902  00FF69  10                 	db	16
   903  00FF6A  28                 	db	40
   904  00FF6B  44                 	db	68
   905  00FF6C  0C                 	db	12
   906  00FF6D  50                 	db	80
   907  00FF6E  50                 	db	80
   908  00FF6F  50                 	db	80
   909  00FF70  3C                 	db	60
   910  00FF71  44                 	db	68
   911  00FF72  64                 	db	100
   912  00FF73  54                 	db	84
   913  00FF74  4C                 	db	76
   914  00FF75  44                 	db	68
   915  00FF76  00                 	db	0
   916  00FF77  08                 	db	8
   917  00FF78  36                 	db	54
   918  00FF79  41                 	db	65
   919  00FF7A  00                 	db	0
   920  00FF7B  00                 	db	0
   921  00FF7C  00                 	db	0
   922  00FF7D  7F                 	db	127
   923  00FF7E  00                 	db	0
   924  00FF7F  00                 	db	0
   925  00FF80  00                 	db	0
   926  00FF81  41                 	db	65
   927  00FF82  36                 	db	54
   928  00FF83  08                 	db	8
   929  00FF84  00                 	db	0
   930  00FF85  08                 	db	8
   931  00FF86  08                 	db	8
   932  00FF87  2A                 	db	42
   933  00FF88  1C                 	db	28
   934  00FF89  08                 	db	8
   935  00FF8A  08                 	db	8
   936  00FF8B  1C                 	db	28
   937  00FF8C  2A                 	db	42
   938  00FF8D  08                 	db	8
   939  00FF8E  08                 	db	8
   940  00FF8F                     __end_of_Font5x7:
   941                           	opt stack 0
   942  00FF8F                     _PortG_Property:
   943                           	opt stack 0
   944  00FF8F  FC00               	dw	64512
   945  00FF91                     __end_of_PortG_Property:
   946                           	opt stack 0
   947  00FF91                     _PortF_Property:
   948                           	opt stack 0
   949  00FF91  0FFF               	dw	4095
   950  00FF93                     __end_of_PortF_Property:
   951                           	opt stack 0
   952  00FF93                     _PortE_Property:
   953                           	opt stack 0
   954  00FF93  0000               	dw	0
   955  00FF95                     __end_of_PortE_Property:
   956                           	opt stack 0
   957  00FF95                     _PortD_Property:
   958                           	opt stack 0
   959  00FF95  FFFF               	dw	65535
   960  00FF97                     __end_of_PortD_Property:
   961                           	opt stack 0
   962  00FF97                     _PortC_Property:
   963                           	opt stack 0
   964  00FF97  FFF0               	dw	65520
   965  00FF99                     __end_of_PortC_Property:
   966                           	opt stack 0
   967  00FF99                     _PortB_Property:
   968                           	opt stack 0
   969  00FF99  FF00               	dw	65280
   970  00FF9B                     __end_of_PortB_Property:
   971                           	opt stack 0
   972  00FF9B                     _PortA_Property:
   973                           	opt stack 0
   974  00FF9B  00FF               	dw	255
   975  00FF9D                     __end_of_PortA_Property:
   976                           	opt stack 0
   977  0000                     _TMR0	set	4054
   978  0000                     _RCREG1	set	4015
   979  0000                     _TXREG1	set	4014
   980  0000                     _SPBRG1	set	4016
   981  0000                     _TXSTA1bits	set	4013
   982  0000                     _BAUDCON1bits	set	3966
   983  0000                     _RCSTA1	set	4012
   984  0000                     _TXSTA1	set	4013
   985  0000                     _TRISCbits	set	3988
   986  0000                     _PR2	set	4043
   987  0000                     _T2CONbits	set	4042
   988  0000                     _T0CONbits	set	4053
   989  0000                     _RCONbits	set	4048
   990  0000                     _OSCTUNEbits	set	3995
   991  0000                     _PIR3	set	4004
   992  0000                     _PIR2	set	4001
   993  0000                     _PIR1	set	3998
   994  0000                     _INTCONbits	set	4082
   995  0000                     _SSP2CON2bits	set	3947
   996  0000                     _SSP1CON2bits	set	4037
   997  0000                     _SSP1ADD	set	4040
   998  0000                     _ANCON0	set	4033
   999  0000                     _ADRESL	set	4035
  1000  0000                     _ADRESH	set	4036
  1001  0000                     _ADCON1bits	set	4033
  1002  0000                     _ADCON0bits	set	4034
  1003  0000                     _SSP2CON1bits	set	3948
  1004  0000                     _SSP1CON1bits	set	4038
  1005  0000                     _SSP2STATbits	set	3949
  1006  0000                     _SSP1STATbits	set	4039
  1007  0000                     _PIE3bits	set	4003
  1008  0000                     _PIE1bits	set	3997
  1009  0000                     _PIR3bits	set	4004
  1010  0000                     _PIR1bits	set	3998
  1011  0000                     _IPR3bits	set	4005
  1012  0000                     _IPR1bits	set	3999
  1013  0000                     _PORTFbits	set	3973
  1014  0000                     _SSP2CON2	set	3947
  1015  0000                     _SSP1CON2	set	4037
  1016  0000                     _SSP2BUF	set	3951
  1017  0000                     _SSP2CON1	set	3948
  1018  0000                     _SSP2STAT	set	3949
  1019  0000                     _SSP1BUF	set	4041
  1020  0000                     _SSP1CON1	set	4038
  1021  0000                     _SSP1STAT	set	4039
  1022  0000                     _LATG	set	3983
  1023  0000                     _LATF	set	3982
  1024  0000                     _LATE	set	3981
  1025  0000                     _LATD	set	3980
  1026  0000                     _LATC	set	3979
  1027  0000                     _LATB	set	3978
  1028  0000                     _LATA	set	3977
  1029  0000                     _TRISG	set	3992
  1030  0000                     _TRISF	set	3991
  1031  0000                     _TRISE	set	3990
  1032  0000                     _TRISD	set	3989
  1033  0000                     _TRISC	set	3988
  1034  0000                     _TRISB	set	3987
  1035  0000                     _TRISA	set	3986
  1036  0000                     _PORTG	set	3974
  1037  0000                     _PORTF	set	3973
  1038  0000                     _PORTE	set	3972
  1039  0000                     _PORTD	set	3971
  1040  0000                     _PORTC	set	3970
  1041  0000                     _PORTB	set	3969
  1042  0000                     _PORTA	set	3968
  1043  00FF9D                     STR_2:
  1044  00FF9D  54                 	db	84	;'T'
  1045  00FF9E  6F                 	db	111	;'o'
  1046  00FF9F  74                 	db	116	;'t'
  1047  00FFA0  61                 	db	97	;'a'
  1048  00FFA1  6C                 	db	108	;'l'
  1049  00FFA2  20                 	db	32
  1050  00FFA3  44                 	db	68	;'D'
  1051  00FFA4  69                 	db	105	;'i'
  1052  00FFA5  73                 	db	115	;'s'
  1053  00FFA6  74                 	db	116	;'t'
  1054  00FFA7  61                 	db	97	;'a'
  1055  00FFA8  6E                 	db	110	;'n'
  1056  00FFA9  63                 	db	99	;'c'
  1057  00FFAA  65                 	db	101	;'e'
  1058  00FFAB  3A                 	db	58	;':'
  1059  00FFAC  25                 	db	37
  1060  00FFAD  75                 	db	117	;'u'
  1061  00FFAE  0A                 	db	10
  1062  00FFAF  4C                 	db	76	;'L'
  1063  00FFB0  65                 	db	101	;'e'
  1064  00FFB1  66                 	db	102	;'f'
  1065  00FFB2  74                 	db	116	;'t'
  1066  00FFB3  20                 	db	32
  1067  00FFB4  42                 	db	66	;'B'
  1068  00FFB5  75                 	db	117	;'u'
  1069  00FFB6  6D                 	db	109	;'m'
  1070  00FFB7  70                 	db	112	;'p'
  1071  00FFB8  3A                 	db	58	;':'
  1072  00FFB9  25                 	db	37
  1073  00FFBA  75                 	db	117	;'u'
  1074  00FFBB  0A                 	db	10
  1075  00FFBC  52                 	db	82	;'R'
  1076  00FFBD  69                 	db	105	;'i'
  1077  00FFBE  67                 	db	103	;'g'
  1078  00FFBF  68                 	db	104	;'h'
  1079  00FFC0  74                 	db	116	;'t'
  1080  00FFC1  20                 	db	32
  1081  00FFC2  42                 	db	66	;'B'
  1082  00FFC3  75                 	db	117	;'u'
  1083  00FFC4  6D                 	db	109	;'m'
  1084  00FFC5  70                 	db	112	;'p'
  1085  00FFC6  3A                 	db	58	;':'
  1086  00FFC7  25                 	db	37
  1087  00FFC8  75                 	db	117	;'u'
  1088  00FFC9  0A                 	db	10
  1089  00FFCA  00                 	db	0
  1090  00FFCB                     STR_8:
  1091  00FFCB  43                 	db	67	;'C'
  1092  00FFCC  6C                 	db	108	;'l'
  1093  00FFCD  6F                 	db	111	;'o'
  1094  00FFCE  73                 	db	115	;'s'
  1095  00FFCF  65                 	db	101	;'e'
  1096  00FFD0  73                 	db	115	;'s'
  1097  00FFD1  74                 	db	116	;'t'
  1098  00FFD2  20                 	db	32
  1099  00FFD3  57                 	db	87	;'W'
  1100  00FFD4  61                 	db	97	;'a'
  1101  00FFD5  6C                 	db	108	;'l'
  1102  00FFD6  6C                 	db	108	;'l'
  1103  00FFD7  3A                 	db	58	;':'
  1104  00FFD8  25                 	db	37
  1105  00FFD9  75                 	db	117	;'u'
  1106  00FFDA  0A                 	db	10
  1107  00FFDB  43                 	db	67	;'C'
  1108  00FFDC  6C                 	db	108	;'l'
  1109  00FFDD  6F                 	db	111	;'o'
  1110  00FFDE  73                 	db	115	;'s'
  1111  00FFDF  65                 	db	101	;'e'
  1112  00FFE0  73                 	db	115	;'s'
  1113  00FFE1  74                 	db	116	;'t'
  1114  00FFE2  20                 	db	32
  1115  00FFE3  41                 	db	65	;'A'
  1116  00FFE4  6E                 	db	110	;'n'
  1117  00FFE5  67                 	db	103	;'g'
  1118  00FFE6  6C                 	db	108	;'l'
  1119  00FFE7  65                 	db	101	;'e'
  1120  00FFE8  3A                 	db	58	;':'
  1121  00FFE9  25                 	db	37
  1122  00FFEA  75                 	db	117	;'u'
  1123  00FFEB  0A                 	db	10
  1124  00FFEC  00                 	db	0
  1125  00FFED                     STR_6:
  1126  00FFED  44                 	db	68	;'D'
  1127  00FFEE  69                 	db	105	;'i'
  1128  00FFEF  73                 	db	115	;'s'
  1129  00FFF0  74                 	db	116	;'t'
  1130  00FFF1  61                 	db	97	;'a'
  1131  00FFF2  6E                 	db	110	;'n'
  1132  00FFF3  63                 	db	99	;'c'
  1133  00FFF4  65                 	db	101	;'e'
  1134  00FFF5  3A                 	db	58	;':'
  1135  00FFF6  20                 	db	32
  1136  00FFF7  25                 	db	37
  1137  00FFF8  64                 	db	100	;'d'
  1138  00FFF9  0A                 	db	10
  1139  00FFFA  00                 	db	0
  1140  00FFFB                     STR_1:
  1141  00FFFB  25                 	db	37
  1142  00FFFC  63                 	db	99	;'c'
  1143  00FFFD  00                 	db	0
  1144  0000                     
  1145                           ; #config settings
  1146  00FFFE  00                 	db	0	; dummy byte at the end
  1147  0000                     
  1148                           	psect	cinit
  1149  0143AE                     __pcinit:
  1150                           	opt stack 0
  1151  0143AE                     start_initialization:
  1152                           	opt stack 0
  1153  0143AE                     __initialization:
  1154                           	opt stack 0
  1155                           
  1156                           ; Initialize objects allocated to BANK3 (12 bytes)
  1157                           ; load TBLPTR registers with __pidataBANK3
  1158  0143AE  0EE6               	movlw	low __pidataBANK3
  1159  0143B0  6EF6               	movwf	tblptrl,c
  1160  0143B2  0E64               	movlw	high __pidataBANK3
  1161  0143B4  6EF7               	movwf	tblptrh,c
  1162  0143B6  0E01               	movlw	low (__pidataBANK3 shr (0+16))
  1163  0143B8  6EF8               	movwf	tblptru,c
  1164  0143BA  EE03  F0E5         	lfsr	0,__pdataBANK3
  1165  0143BE  EE10 F00C          	lfsr	1,12
  1166  0143C2                     copy_data0:
  1167  0143C2  0009               	tblrd		*+
  1168  0143C4  CFF5 FFEE          	movff	tablat,postinc0
  1169  0143C8  50E5               	movf	postdec1,w,c
  1170  0143CA  50E1               	movf	fsr1l,w,c
  1171  0143CC  E1FA               	bnz	copy_data0
  1172                           
  1173                           ; Initialize objects allocated to BANK0 (7 bytes)
  1174                           ; load TBLPTR registers with __pidataBANK0
  1175  0143CE  0E4C               	movlw	low __pidataBANK0
  1176  0143D0  6EF6               	movwf	tblptrl,c
  1177  0143D2  0E65               	movlw	high __pidataBANK0
  1178  0143D4  6EF7               	movwf	tblptrh,c
  1179  0143D6  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  1180  0143D8  6EF8               	movwf	tblptru,c
  1181  0143DA  EE00  F0F9         	lfsr	0,__pdataBANK0
  1182  0143DE  EE10 F007          	lfsr	1,7
  1183  0143E2                     copy_data1:
  1184  0143E2  0009               	tblrd		*+
  1185  0143E4  CFF5 FFEE          	movff	tablat,postinc0
  1186  0143E8  50E5               	movf	postdec1,w,c
  1187  0143EA  50E1               	movf	fsr1l,w,c
  1188  0143EC  E1FA               	bnz	copy_data1
  1189                           
  1190                           ; Initialize objects allocated to COMRAM (10 bytes)
  1191                           ; load TBLPTR registers with __pidataCOMRAM
  1192  0143EE  0E16               	movlw	low __pidataCOMRAM
  1193  0143F0  6EF6               	movwf	tblptrl,c
  1194  0143F2  0E65               	movlw	high __pidataCOMRAM
  1195  0143F4  6EF7               	movwf	tblptrh,c
  1196  0143F6  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1197  0143F8  6EF8               	movwf	tblptru,c
  1198  0143FA  EE00  F047         	lfsr	0,__pdataCOMRAM
  1199  0143FE  EE10 F00A          	lfsr	1,10
  1200  014402                     copy_data2:
  1201  014402  0009               	tblrd		*+
  1202  014404  CFF5 FFEE          	movff	tablat,postinc0
  1203  014408  50E5               	movf	postdec1,w,c
  1204  01440A  50E1               	movf	fsr1l,w,c
  1205  01440C  E1FA               	bnz	copy_data2
  1206                           
  1207                           ; Clear objects allocated to BIGRAM (300 bytes)
  1208  01440E  EE04  F0C8         	lfsr	0,__pbssBIGRAM
  1209  014412  EE11 F02C          	lfsr	1,300
  1210  014416                     clear_0:
  1211  014416  6AEE               	clrf	postinc0,c
  1212  014418  50E5               	movf	postdec1,w,c
  1213  01441A  50E1               	movf	fsr1l,w,c
  1214  01441C  E1FC               	bnz	clear_0
  1215  01441E  50E2               	movf	fsr1h,w,c
  1216  014420  E1FA               	bnz	clear_0
  1217                           
  1218                           ; Clear objects allocated to BANK4 (200 bytes)
  1219  014422  EE04  F000         	lfsr	0,__pbssBANK4
  1220  014426  0EC8               	movlw	200
  1221  014428                     clear_1:
  1222  014428  6AEE               	clrf	postinc0,c
  1223  01442A  06E8               	decf	wreg,f,c
  1224  01442C  E1FD               	bnz	clear_1
  1225                           
  1226                           ; Clear objects allocated to BANK3 (229 bytes)
  1227  01442E  EE03  F000         	lfsr	0,__pbssBANK3
  1228  014432  0EE5               	movlw	229
  1229  014434                     clear_2:
  1230  014434  6AEE               	clrf	postinc0,c
  1231  014436  06E8               	decf	wreg,f,c
  1232  014438  E1FD               	bnz	clear_2
  1233                           
  1234                           ; Clear objects allocated to BANK0 (63 bytes)
  1235  01443A  EE00  F0BA         	lfsr	0,__pbssBANK0
  1236  01443E  0E3F               	movlw	63
  1237  014440                     clear_3:
  1238  014440  6AEE               	clrf	postinc0,c
  1239  014442  06E8               	decf	wreg,f,c
  1240  014444  E1FD               	bnz	clear_3
  1241                           
  1242                           ; Clear objects allocated to COMRAM (30 bytes)
  1243  014446  EE00  F029         	lfsr	0,__pbssCOMRAM
  1244  01444A  0E1E               	movlw	30
  1245  01444C                     clear_4:
  1246  01444C  6AEE               	clrf	postinc0,c
  1247  01444E  06E8               	decf	wreg,f,c
  1248  014450  E1FD               	bnz	clear_4
  1249  014452                     end_of_initialization:
  1250                           	opt stack 0
  1251  014452                     __end_of__initialization:
  1252                           	opt stack 0
  1253  014452  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1254  014454  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1255  014456  0100               	movlb	0
  1256  014458  EF2A  F0AB         	goto	_main	;jump to C main() function
  1257                           tblptru	equ	0xFF8
  1258                           tblptrh	equ	0xFF7
  1259                           tblptrl	equ	0xFF6
  1260                           tablat	equ	0xFF5
  1261                           postinc0	equ	0xFEE
  1262                           wreg	equ	0xFE8
  1263                           postdec1	equ	0xFE5
  1264                           fsr1h	equ	0xFE2
  1265                           fsr1l	equ	0xFE1
  1266                           
  1267                           	psect	bssCOMRAM
  1268  000029                     __pbssCOMRAM:
  1269                           	opt stack 0
  1270  000029                     _COUNTER:
  1271                           	opt stack 0
  1272  000029                     	ds	2
  1273  00002B                     HMI_GRender@a:
  1274                           	opt stack 0
  1275  00002B                     	ds	2
  1276  00002D                     SPI_Send9@dat:
  1277                           	opt stack 0
  1278  00002D                     	ds	2
  1279  00002F                     _iRDropCaster:
  1280                           	opt stack 0
  1281  00002F                     	ds	1
  1282  000030                     _iRVirtualWall:
  1283                           	opt stack 0
  1284  000030                     	ds	1
  1285  000031                     _iRCliffR:
  1286                           	opt stack 0
  1287  000031                     	ds	1
  1288  000032                     _iRCliffFR:
  1289                           	opt stack 0
  1290  000032                     	ds	1
  1291  000033                     _iRCliffFL:
  1292                           	opt stack 0
  1293  000033                     	ds	1
  1294  000034                     _iRCliffL:
  1295                           	opt stack 0
  1296  000034                     	ds	1
  1297  000035                     _iRWall:
  1298                           	opt stack 0
  1299  000035                     	ds	1
  1300  000036                     _iRBumpDrop:
  1301                           	opt stack 0
  1302  000036                     	ds	1
  1303  000037                     _iRScriptIndex:
  1304                           	opt stack 0
  1305  000037                     	ds	1
  1306  000038                     _u:
  1307                           	opt stack 0
  1308  000038                     	ds	1
  1309  000039                     _j:
  1310                           	opt stack 0
  1311  000039                     	ds	1
  1312  00003A                     _i:
  1313                           	opt stack 0
  1314  00003A                     	ds	1
  1315  00003B                     rand@screw:
  1316                           	opt stack 0
  1317  00003B                     	ds	1
  1318  00003C                     _ADC_Initialised:
  1319                           	opt stack 0
  1320  00003C                     	ds	1
  1321  00003D                     OutSeg@a:
  1322                           	opt stack 0
  1323  00003D                     	ds	1
  1324  00003E                     OutSeg@segset:
  1325                           	opt stack 0
  1326  00003E                     	ds	1
  1327  00003F                     OutSeg@cur:
  1328                           	opt stack 0
  1329  00003F                     	ds	1
  1330  000040                     _I2C1T:
  1331                           	opt stack 0
  1332  000040                     	ds	7
  1333                           tblptru	equ	0xFF8
  1334                           tblptrh	equ	0xFF7
  1335                           tblptrl	equ	0xFF6
  1336                           tablat	equ	0xFF5
  1337                           postinc0	equ	0xFEE
  1338                           wreg	equ	0xFE8
  1339                           postdec1	equ	0xFE5
  1340                           fsr1h	equ	0xFE2
  1341                           fsr1l	equ	0xFE1
  1342                           
  1343                           	psect	dataCOMRAM
  1344  000047                     __pdataCOMRAM:
  1345                           	opt stack 0
  1346  000047                     _gCursor:
  1347                           	opt stack 0
  1348  000047                     	ds	4
  1349  00004B                     _Bus_State:
  1350                           	opt stack 0
  1351  00004B                     	ds	1
  1352  00004C                     	ds	1
  1353  00004D                     	ds	1
  1354  00004E                     	ds	1
  1355  00004F                     _l:
  1356                           	opt stack 0
  1357  00004F                     	ds	1
  1358  000050                     _w:
  1359                           	opt stack 0
  1360  000050                     	ds	1
  1361                           tblptru	equ	0xFF8
  1362                           tblptrh	equ	0xFF7
  1363                           tblptrl	equ	0xFF6
  1364                           tablat	equ	0xFF5
  1365                           postinc0	equ	0xFEE
  1366                           wreg	equ	0xFE8
  1367                           postdec1	equ	0xFE5
  1368                           fsr1h	equ	0xFE2
  1369                           fsr1l	equ	0xFE1
  1370                           
  1371                           	psect	bssBANK0
  1372  0000BA                     __pbssBANK0:
  1373                           	opt stack 0
  1374  0000BA                     _lQueue:
  1375                           	opt stack 0
  1376  0000BA                     	ds	3
  1377  0000BD                     _lStepFunction:
  1378                           	opt stack 0
  1379  0000BD                     	ds	3
  1380  0000C0                     _IRValue:
  1381                           	opt stack 0
  1382  0000C0                     	ds	2
  1383  0000C2                     _Stepstomin:
  1384                           	opt stack 0
  1385  0000C2                     	ds	2
  1386  0000C4                     _StepRotate:
  1387                           	opt stack 0
  1388  0000C4                     	ds	2
  1389  0000C6                     _angleTotal:
  1390                           	opt stack 0
  1391  0000C6                     	ds	2
  1392  0000C8                     _distanceTotal:
  1393                           	opt stack 0
  1394  0000C8                     	ds	2
  1395  0000CA                     _pShiftVal:
  1396                           	opt stack 0
  1397  0000CA                     	ds	2
  1398  0000CC                     _val:
  1399                           	opt stack 0
  1400  0000CC                     	ds	2
  1401  0000CE                     _lMotor:
  1402                           	opt stack 0
  1403  0000CE                     	ds	2
  1404  0000D0                     _lCurrent:
  1405                           	opt stack 0
  1406  0000D0                     	ds	2
  1407  0000D2                     _gBackcolour:
  1408                           	opt stack 0
  1409  0000D2                     	ds	2
  1410  0000D4                     _iRDropLeft:
  1411                           	opt stack 0
  1412  0000D4                     	ds	1
  1413  0000D5                     _iRDropRight:
  1414                           	opt stack 0
  1415  0000D5                     	ds	1
  1416  0000D6                     _iRBumpLeft:
  1417                           	opt stack 0
  1418  0000D6                     	ds	1
  1419  0000D7                     _iRBumpRight:
  1420                           	opt stack 0
  1421  0000D7                     	ds	1
  1422  0000D8                     Event_TestButton@j:
  1423                           	opt stack 0
  1424  0000D8                     	ds	1
  1425  0000D9                     Timer2_Init@PRE:
  1426                           	opt stack 0
  1427  0000D9                     	ds	1
  1428  0000DA                     Timer2_Init@INDEX:
  1429                           	opt stack 0
  1430  0000DA                     	ds	1
  1431  0000DB                     Timer0_Init@PRE:
  1432                           	opt stack 0
  1433  0000DB                     	ds	1
  1434  0000DC                     _INDEX:
  1435                           	opt stack 0
  1436  0000DC                     	ds	1
  1437  0000DD                     _lBufferY:
  1438                           	opt stack 0
  1439  0000DD                     	ds	1
  1440  0000DE                     _lBufferX:
  1441                           	opt stack 0
  1442  0000DE                     	ds	1
  1443  0000DF                     _clearall:
  1444                           	opt stack 0
  1445  0000DF                     	ds	1
  1446  0000E0                     _PortD:
  1447                           	opt stack 0
  1448  0000E0                     	ds	10
  1449  0000EA                     _PortC:
  1450                           	opt stack 0
  1451  0000EA                     	ds	10
  1452  0000F4                     _ADC_AN0:
  1453                           	opt stack 0
  1454  0000F4                     	ds	5
  1455                           tblptru	equ	0xFF8
  1456                           tblptrh	equ	0xFF7
  1457                           tblptrl	equ	0xFF6
  1458                           tablat	equ	0xFF5
  1459                           postinc0	equ	0xFEE
  1460                           wreg	equ	0xFE8
  1461                           postdec1	equ	0xFE5
  1462                           fsr1h	equ	0xFE2
  1463                           fsr1l	equ	0xFE1
  1464                           
  1465                           	psect	dataBANK0
  1466  0000F9                     __pdataBANK0:
  1467                           	opt stack 0
  1468  0000F9                     _TimerX:
  1469                           	opt stack 0
  1470  0000F9                     	ds	2
  1471  0000FB                     _MinDist:
  1472                           	opt stack 0
  1473  0000FB                     	ds	2
  1474  0000FD                     _gForecolour:
  1475                           	opt stack 0
  1476  0000FD                     	ds	2
  1477  0000FF                     _change:
  1478                           	opt stack 0
  1479  0000FF                     	ds	1
  1480                           tblptru	equ	0xFF8
  1481                           tblptrh	equ	0xFF7
  1482                           tblptrl	equ	0xFF6
  1483                           tablat	equ	0xFF5
  1484                           postinc0	equ	0xFEE
  1485                           wreg	equ	0xFE8
  1486                           postdec1	equ	0xFE5
  1487                           fsr1h	equ	0xFE2
  1488                           fsr1l	equ	0xFE1
  1489                           
  1490                           	psect	bssBANK3
  1491  000300                     __pbssBANK3:
  1492                           	opt stack 0
  1493  000300                     _stepsToMinDegrees:
  1494                           	opt stack 0
  1495  000300                     	ds	4
  1496  000304                     _iRAngleSS:
  1497                           	opt stack 0
  1498  000304                     	ds	4
  1499  000308                     _iRDistanceSS:
  1500                           	opt stack 0
  1501  000308                     	ds	4
  1502  00030C                     Timer2_Init@DIV:
  1503                           	opt stack 0
  1504  00030C                     	ds	4
  1505  000310                     Timer0_Init@DIV:
  1506                           	opt stack 0
  1507  000310                     	ds	4
  1508  000314                     _gISR:
  1509                           	opt stack 0
  1510  000314                     	ds	3
  1511  000317                     _I2C2_More:
  1512                           	opt stack 0
  1513  000317                     	ds	3
  1514  00031A                     _I2C1_More:
  1515                           	opt stack 0
  1516  00031A                     	ds	3
  1517  00031D                     _I2C2_Done:
  1518                           	opt stack 0
  1519  00031D                     	ds	3
  1520  000320                     _I2C1_Done:
  1521                           	opt stack 0
  1522  000320                     	ds	3
  1523  000323                     _mode:
  1524                           	opt stack 0
  1525  000323                     	ds	2
  1526  000325                     _dip:
  1527                           	opt stack 0
  1528  000325                     	ds	2
  1529  000327                     _iRAngle:
  1530                           	opt stack 0
  1531  000327                     	ds	2
  1532  000329                     _iRDistance:
  1533                           	opt stack 0
  1534  000329                     	ds	2
  1535  00032B                     _HMIBoard:
  1536                           	opt stack 0
  1537  00032B                     	ds	58
  1538  000365                     _SPI1:
  1539                           	opt stack 0
  1540  000365                     	ds	11
  1541  000370                     _SPI2:
  1542                           	opt stack 0
  1543  000370                     	ds	11
  1544  00037B                     _DIPSwitch:
  1545                           	opt stack 0
  1546  00037B                     	ds	10
  1547  000385                     _TestButton:
  1548                           	opt stack 0
  1549  000385                     	ds	10
  1550  00038F                     _PortG:
  1551                           	opt stack 0
  1552  00038F                     	ds	10
  1553  000399                     _PortE:
  1554                           	opt stack 0
  1555  000399                     	ds	10
  1556  0003A3                     _PortB:
  1557                           	opt stack 0
  1558  0003A3                     	ds	10
  1559  0003AD                     _PortA:
  1560                           	opt stack 0
  1561  0003AD                     	ds	10
  1562  0003B7                     _PortF:
  1563                           	opt stack 0
  1564  0003B7                     	ds	10
  1565  0003C1                     _I2C2T:
  1566                           	opt stack 0
  1567  0003C1                     	ds	7
  1568  0003C8                     _Stepper:
  1569                           	opt stack 0
  1570  0003C8                     	ds	6
  1571  0003CE                     _ADC_AN3:
  1572                           	opt stack 0
  1573  0003CE                     	ds	5
  1574  0003D3                     _ADC_AN2:
  1575                           	opt stack 0
  1576  0003D3                     	ds	5
  1577  0003D8                     _ADC_AN1:
  1578                           	opt stack 0
  1579  0003D8                     	ds	5
  1580  0003DD                     LCD_DrawRectangle@p4:
  1581                           	opt stack 0
  1582  0003DD                     	ds	4
  1583  0003E1                     LCD_DrawRectangle@p2:
  1584                           	opt stack 0
  1585  0003E1                     	ds	4
  1586                           tblptru	equ	0xFF8
  1587                           tblptrh	equ	0xFF7
  1588                           tblptrl	equ	0xFF6
  1589                           tablat	equ	0xFF5
  1590                           postinc0	equ	0xFEE
  1591                           wreg	equ	0xFE8
  1592                           postdec1	equ	0xFE5
  1593                           fsr1h	equ	0xFE2
  1594                           fsr1l	equ	0xFE1
  1595                           
  1596                           	psect	dataBANK3
  1597  0003E5                     __pdataBANK3:
  1598                           	opt stack 0
  1599  0003E5                     Console_Render@F6956:
  1600                           	opt stack 0
  1601  0003E5                     	ds	4
  1602  0003E9                     _gLineSize:
  1603                           	opt stack 0
  1604  0003E9                     	ds	4
  1605  0003ED                     _gCharSize:
  1606                           	opt stack 0
  1607  0003ED                     	ds	4
  1608                           tblptru	equ	0xFF8
  1609                           tblptrh	equ	0xFF7
  1610                           tblptrl	equ	0xFF6
  1611                           tablat	equ	0xFF5
  1612                           postinc0	equ	0xFEE
  1613                           wreg	equ	0xFE8
  1614                           postdec1	equ	0xFE5
  1615                           fsr1h	equ	0xFE2
  1616                           fsr1l	equ	0xFE1
  1617                           
  1618                           	psect	bssBANK4
  1619  000400                     __pbssBANK4:
  1620                           	opt stack 0
  1621  000400                     _lCBuffer:
  1622                           	opt stack 0
  1623  000400                     	ds	30
  1624  00041E                     _iRScriptStack:
  1625                           	opt stack 0
  1626  00041E                     	ds	100
  1627  000482                     Console_MakeField@Fill:
  1628                           	opt stack 0
  1629  000482                     	ds	70
  1630                           tblptru	equ	0xFF8
  1631                           tblptrh	equ	0xFF7
  1632                           tblptrl	equ	0xFF6
  1633                           tablat	equ	0xFF5
  1634                           postinc0	equ	0xFEE
  1635                           wreg	equ	0xFE8
  1636                           postdec1	equ	0xFE5
  1637                           fsr1h	equ	0xFE2
  1638                           fsr1l	equ	0xFE1
  1639                           
  1640                           	psect	bssBIGRAM
  1641  0004C8                     __pbssBIGRAM:
  1642                           	opt stack 0
  1643  0004C8                     _lBuffer:
  1644                           	opt stack 0
  1645  0004C8                     	ds	300
  1646                           tblptru	equ	0xFF8
  1647                           tblptrh	equ	0xFF7
  1648                           tblptrl	equ	0xFF6
  1649                           tablat	equ	0xFF5
  1650                           postinc0	equ	0xFEE
  1651                           wreg	equ	0xFE8
  1652                           postdec1	equ	0xFE5
  1653                           fsr1h	equ	0xFE2
  1654                           fsr1l	equ	0xFE1
  1655                           
  1656                           	psect	cstackBANK3
  1657  0003F1                     __pcstackBANK3:
  1658                           	opt stack 0
  1659  0003F1                     ??_mode1:
  1660  0003F1                     ??_mode4:
  1661                           
  1662                           ; 1 bytes @ 0x0
  1663  0003F1                     	ds	1
  1664  0003F2                     _mode4$15574:
  1665                           	opt stack 0
  1666                           
  1667                           ; 4 bytes @ 0x1
  1668  0003F2                     	ds	1
  1669  0003F3                     mode1@moveto:
  1670                           	opt stack 0
  1671                           
  1672                           ; 2 bytes @ 0x2
  1673  0003F3                     	ds	2
  1674  0003F5                     _mode1$15573:
  1675                           	opt stack 0
  1676                           
  1677                           ; 4 bytes @ 0x4
  1678  0003F5                     	ds	4
  1679  0003F9                     ??_main:
  1680                           
  1681                           ; 1 bytes @ 0x8
  1682  0003F9                     	ds	2
  1683                           tblptru	equ	0xFF8
  1684                           tblptrh	equ	0xFF7
  1685                           tblptrl	equ	0xFF6
  1686                           tablat	equ	0xFF5
  1687                           postinc0	equ	0xFEE
  1688                           wreg	equ	0xFE8
  1689                           postdec1	equ	0xFE5
  1690                           fsr1h	equ	0xFE2
  1691                           fsr1l	equ	0xFE1
  1692                           
  1693                           	psect	cstackBANK2
  1694  000200                     __pcstackBANK2:
  1695                           	opt stack 0
  1696  000200                     irobot_query_and_update@TXArray:
  1697                           	opt stack 0
  1698                           
  1699                           ; 256 bytes @ 0x0
  1700  000200                     	ds	256
  1701                           tblptru	equ	0xFF8
  1702                           tblptrh	equ	0xFF7
  1703                           tblptrl	equ	0xFF6
  1704                           tablat	equ	0xFF5
  1705                           postinc0	equ	0xFEE
  1706                           wreg	equ	0xFE8
  1707                           postdec1	equ	0xFE5
  1708                           fsr1h	equ	0xFE2
  1709                           fsr1l	equ	0xFE1
  1710                           
  1711                           	psect	cstackBANK1
  1712  000100                     __pcstackBANK1:
  1713                           	opt stack 0
  1714  000100                     ___fltol@sign1:
  1715                           	opt stack 0
  1716  000100                     irobot_query_and_update@RXArray:
  1717                           	opt stack 0
  1718                           
  1719                           ; 256 bytes @ 0x0
  1720  000100                     	ds	1
  1721  000101                     ___fltol@exp1:
  1722                           	opt stack 0
  1723                           
  1724                           ; 1 bytes @ 0x1
  1725  000101                     	ds	1
  1726  000102                     irobot_rotate_to@rotateToAngle:
  1727                           	opt stack 0
  1728                           
  1729                           ; 2 bytes @ 0x2
  1730  000102                     	ds	2
  1731  000104                     irobot_rotate_to@rotateSpeed:
  1732                           	opt stack 0
  1733                           
  1734                           ; 2 bytes @ 0x4
  1735  000104                     	ds	252
  1736                           tblptru	equ	0xFF8
  1737                           tblptrh	equ	0xFF7
  1738                           tblptrl	equ	0xFF6
  1739                           tablat	equ	0xFF5
  1740                           postinc0	equ	0xFEE
  1741                           wreg	equ	0xFE8
  1742                           postdec1	equ	0xFE5
  1743                           fsr1h	equ	0xFE2
  1744                           fsr1l	equ	0xFE1
  1745                           
  1746                           	psect	cstackBANK0
  1747  000060                     __pcstackBANK0:
  1748                           	opt stack 0
  1749  000060                     ??_Console_ClearCursor:
  1750  000060                     ??_ADC_SetChannel:
  1751  000060                     ??_ADC_ConversionTime:
  1752  000060                     ??_ADC_SetupIO:
  1753  000060                     ??_sort_iRBumpDrop:
  1754  000060                     ?_load_iRScriptStack:
  1755                           	opt stack 0
  1756  000060                     ??_Console_Init:
  1757  000060                     ??_Console_NewLine:
  1758  000060                     ??_Console_FormFeed:
  1759  000060                     ??_HMI_SetButton:
  1760  000060                     ?_GetPortProperties:
  1761                           	opt stack 0
  1762  000060                     ?_GetPortPORT:
  1763                           	opt stack 0
  1764  000060                     ?_GetPortTRIS:
  1765                           	opt stack 0
  1766  000060                     ?_twos_complement_of:
  1767                           	opt stack 0
  1768  000060                     ?___wmul:
  1769                           	opt stack 0
  1770  000060                     ?___awdiv:
  1771                           	opt stack 0
  1772  000060                     ?___lwdiv:
  1773                           	opt stack 0
  1774  000060                     ?___lldiv:
  1775                           	opt stack 0
  1776  000060                     ?___xxtofl:
  1777                           	opt stack 0
  1778  000060                     Mode_Set@pMode:
  1779                           	opt stack 0
  1780  000060                     ToSegment@pCHR:
  1781                           	opt stack 0
  1782  000060                     HMI_SetBar@pValue:
  1783                           	opt stack 0
  1784  000060                     ADC_ClockDivision@pDivide:
  1785                           	opt stack 0
  1786  000060                     get_packet_size@packetID:
  1787                           	opt stack 0
  1788  000060                     eusart_putch@eusartSendChar:
  1789                           	opt stack 0
  1790  000060                     Port_GetPin@pInput:
  1791                           	opt stack 0
  1792  000060                     Port_GetQuad@pInput:
  1793                           	opt stack 0
  1794  000060                     SPI_DisableISR@pInput:
  1795                           	opt stack 0
  1796  000060                     SPI_DCS@pInput:
  1797                           	opt stack 0
  1798  000060                     SPI_Send@pInput:
  1799                           	opt stack 0
  1800  000060                     Byte_SetBit@pInput:
  1801                           	opt stack 0
  1802  000060                     Byte_GetBit@pInput:
  1803                           	opt stack 0
  1804  000060                     Byte_SetZone@pInput:
  1805                           	opt stack 0
  1806  000060                     Byte_GetZone@pInput:
  1807                           	opt stack 0
  1808  000060                     Byte_SetByte@pInput:
  1809                           	opt stack 0
  1810  000060                     delay_ms@ms:
  1811                           	opt stack 0
  1812  000060                     delay_us@us:
  1813                           	opt stack 0
  1814  000060                     reverse@input:
  1815                           	opt stack 0
  1816  000060                     twos_complement_of@complementValue:
  1817                           	opt stack 0
  1818  000060                     ___wmul@multiplier:
  1819                           	opt stack 0
  1820  000060                     ___awdiv@dividend:
  1821                           	opt stack 0
  1822  000060                     ___lwdiv@dividend:
  1823                           	opt stack 0
  1824  000060                     MXK_Queue@pCallback:
  1825                           	opt stack 0
  1826  000060                     Timer0_Start@pFunction:
  1827                           	opt stack 0
  1828  000060                     ___lldiv@dividend:
  1829                           	opt stack 0
  1830  000060                     ___xxtofl@val:
  1831                           	opt stack 0
  1832                           
  1833                           ; 4 bytes @ 0x0
  1834  000060                     	ds	1
  1835  000061                     ADC_SetChannel@pChannel:
  1836                           	opt stack 0
  1837  000061                     ADC_ClockDivision@reg:
  1838                           	opt stack 0
  1839  000061                     ADC_ConversionTime@pCount:
  1840                           	opt stack 0
  1841  000061                     rx_assign@packetIDValue:
  1842                           	opt stack 0
  1843  000061                     irobot_song_play@songNumber:
  1844                           	opt stack 0
  1845  000061                     HMI_SetSegments@pString:
  1846                           	opt stack 0
  1847                           
  1848                           ; 2 bytes @ 0x1
  1849  000061                     	ds	1
  1850  000062                     GetPortProperties@pInput:
  1851                           	opt stack 0
  1852  000062                     GetPortPORT@pInput:
  1853                           	opt stack 0
  1854  000062                     GetPortTRIS@pInput:
  1855                           	opt stack 0
  1856  000062                     Port_GetPin@pPin:
  1857                           	opt stack 0
  1858  000062                     Port_GetQuad@pQuad:
  1859                           	opt stack 0
  1860  000062                     SPI_Send@pData:
  1861                           	opt stack 0
  1862  000062                     Byte_SetBit@pBit:
  1863                           	opt stack 0
  1864  000062                     Byte_GetBit@pBit:
  1865                           	opt stack 0
  1866  000062                     Byte_SetZone@pMax:
  1867                           	opt stack 0
  1868  000062                     Byte_GetZone@pMax:
  1869                           	opt stack 0
  1870  000062                     Byte_SetByte@pValue:
  1871                           	opt stack 0
  1872  000062                     Console_Init@x:
  1873                           	opt stack 0
  1874  000062                     Console_FormFeed@x:
  1875                           	opt stack 0
  1876  000062                     ADC_SetupIO@pChannel:
  1877                           	opt stack 0
  1878  000062                     ADC_ClockDivision@unfound:
  1879                           	opt stack 0
  1880  000062                     rx_assign@byteNumber:
  1881                           	opt stack 0
  1882  000062                     reverse@length:
  1883                           	opt stack 0
  1884  000062                     ADC_Start@pInput:
  1885                           	opt stack 0
  1886  000062                     ___wmul@multiplicand:
  1887                           	opt stack 0
  1888  000062                     ___awdiv@divisor:
  1889                           	opt stack 0
  1890  000062                     ___lwdiv@divisor:
  1891                           	opt stack 0
  1892  000062                     delay_ms@u:
  1893                           	opt stack 0
  1894  000062                     delay_us@u:
  1895                           	opt stack 0
  1896  000062                     HMI_SetButton@reindex:
  1897                           	opt stack 0
  1898                           
  1899                           ; 4 bytes @ 0x2
  1900  000062                     	ds	1
  1901  000063                     ??_Port_GetPin:
  1902  000063                     ??_Port_GetQuad:
  1903  000063                     ??_Byte_GetBit:
  1904  000063                     ??_rx_assign:
  1905  000063                     LCD_Write@mode:
  1906                           	opt stack 0
  1907  000063                     Byte_SetBit@pValue:
  1908                           	opt stack 0
  1909  000063                     Byte_SetZone@pChunk:
  1910                           	opt stack 0
  1911  000063                     Byte_GetZone@pChunk:
  1912                           	opt stack 0
  1913  000063                     Console_Init@y:
  1914                           	opt stack 0
  1915  000063                     Console_FormFeed@y:
  1916                           	opt stack 0
  1917  000063                     OutSeg@pSegment:
  1918                           	opt stack 0
  1919  000063                     ADC_SetupIO@MASK:
  1920                           	opt stack 0
  1921  000063                     Motor_Move@pMotor:
  1922                           	opt stack 0
  1923                           
  1924                           ; 2 bytes @ 0x3
  1925  000063                     	ds	1
  1926  000064                     ??_Byte_SetBit:
  1927  000064                     ??_Console_IncrementCursor:
  1928  000064                     ??_OutSeg:
  1929  000064                     ??_ADC_Start:
  1930  000064                     ??___xxtofl:
  1931  000064                     LCD_Write@value:
  1932                           	opt stack 0
  1933  000064                     Byte_GetBit@Output:
  1934                           	opt stack 0
  1935  000064                     Byte_SetZone@pChunkSize:
  1936                           	opt stack 0
  1937  000064                     Byte_GetZone@pChunkSize:
  1938                           	opt stack 0
  1939  000064                     reverse@tempVar:
  1940                           	opt stack 0
  1941  000064                     ___awdiv@counter:
  1942                           	opt stack 0
  1943  000064                     ___lwdiv@counter:
  1944                           	opt stack 0
  1945  000064                     HMI_SetSegments@in:
  1946                           	opt stack 0
  1947  000064                     ADC_Init@pInput:
  1948                           	opt stack 0
  1949  000064                     ___wmul@product:
  1950                           	opt stack 0
  1951  000064                     ___lldiv@divisor:
  1952                           	opt stack 0
  1953                           
  1954                           ; 4 bytes @ 0x4
  1955  000064                     	ds	1
  1956  000065                     ??_Byte_GetZone:
  1957  000065                     ?_Console_MakeField:
  1958                           	opt stack 0
  1959  000065                     Set_Addr_Window@ys:
  1960                           	opt stack 0
  1961  000065                     Set_Rotation@m:
  1962                           	opt stack 0
  1963  000065                     Port_GetPin@Output:
  1964                           	opt stack 0
  1965  000065                     Port_GetQuad@Output:
  1966                           	opt stack 0
  1967  000065                     Byte_SetZone@pValue:
  1968                           	opt stack 0
  1969  000065                     rx_assign@packetID:
  1970                           	opt stack 0
  1971  000065                     ___awdiv@sign:
  1972                           	opt stack 0
  1973  000065                     LCD_Word_Write@value:
  1974                           	opt stack 0
  1975  000065                     reverse@iterator:
  1976                           	opt stack 0
  1977  000065                     Motor_Move@pDelta:
  1978                           	opt stack 0
  1979  000065                     ___lwdiv@quotient:
  1980                           	opt stack 0
  1981                           
  1982                           ; 2 bytes @ 0x5
  1983  000065                     	ds	1
  1984  000066                     ?_irobot_query_and_update:
  1985                           	opt stack 0
  1986  000066                     ??_Byte_SetZone:
  1987  000066                     Set_Addr_Window@xe:
  1988                           	opt stack 0
  1989  000066                     Set_Rotation@rotation:
  1990                           	opt stack 0
  1991  000066                     Byte_GetZone@MASK:
  1992                           	opt stack 0
  1993  000066                     OutSeg@pInput:
  1994                           	opt stack 0
  1995  000066                     HMI_SetButton@pValue:
  1996                           	opt stack 0
  1997  000066                     ADC_Init@pChannel:
  1998                           	opt stack 0
  1999  000066                     MXK_BlockSwitchTo@CUR:
  2000                           	opt stack 0
  2001  000066                     MXK_SwitchTo@CUR:
  2002                           	opt stack 0
  2003  000066                     ___awdiv@quotient:
  2004                           	opt stack 0
  2005                           
  2006                           ; 2 bytes @ 0x6
  2007  000066                     	ds	1
  2008  000067                     ??_Console_MakeField:
  2009  000067                     ?___lwmod:
  2010                           	opt stack 0
  2011  000067                     Set_Addr_Window@ye:
  2012                           	opt stack 0
  2013  000067                     Byte_GetZone@Offset:
  2014                           	opt stack 0
  2015  000067                     OutSeg@out:
  2016                           	opt stack 0
  2017  000067                     HMI_SetButton@v:
  2018                           	opt stack 0
  2019  000067                     MXK_BlockSwitchTo@pModule:
  2020                           	opt stack 0
  2021  000067                     MXK_SwitchTo@pModule:
  2022                           	opt stack 0
  2023  000067                     ___lwmod@dividend:
  2024                           	opt stack 0
  2025                           
  2026                           ; 2 bytes @ 0x7
  2027  000067                     	ds	1
  2028  000068                     ??_Console_Tab:
  2029  000068                     Set_Addr_Window@xs:
  2030                           	opt stack 0
  2031  000068                     Byte_GetZone@Output:
  2032                           	opt stack 0
  2033  000068                     ___xxtofl@sign:
  2034                           	opt stack 0
  2035  000068                     HMI_Render@a:
  2036                           	opt stack 0
  2037  000068                     ___lldiv@quotient:
  2038                           	opt stack 0
  2039                           
  2040                           ; 4 bytes @ 0x8
  2041  000068                     	ds	1
  2042  000069                     Byte_SetZone@Offset:
  2043                           	opt stack 0
  2044  000069                     ___xxtofl@exp:
  2045                           	opt stack 0
  2046  000069                     LCD_Fill@pColour:
  2047                           	opt stack 0
  2048  000069                     LCD_FillRectangle@pColour:
  2049                           	opt stack 0
  2050  000069                     Byte_GetPair@pInput:
  2051                           	opt stack 0
  2052  000069                     Console_MakeField@Index:
  2053                           	opt stack 0
  2054  000069                     ___lwmod@divisor:
  2055                           	opt stack 0
  2056                           
  2057                           ; 2 bytes @ 0x9
  2058  000069                     	ds	1
  2059  00006A                     ??_load_iRScriptStack:
  2060  00006A                     Byte_SetZone@MASK:
  2061                           	opt stack 0
  2062  00006A                     ___xxtofl@arg:
  2063                           	opt stack 0
  2064                           
  2065                           ; 4 bytes @ 0xA
  2066  00006A                     	ds	1
  2067  00006B                     LCD_Fill@i:
  2068                           	opt stack 0
  2069  00006B                     Byte_GetPair@pPair:
  2070                           	opt stack 0
  2071  00006B                     Console_MakeField@pInput:
  2072                           	opt stack 0
  2073  00006B                     ___lwmod@counter:
  2074                           	opt stack 0
  2075  00006B                     Byte_SetPair@pInput:
  2076                           	opt stack 0
  2077  00006B                     Byte_SetQuad@pInput:
  2078                           	opt stack 0
  2079  00006B                     LCD_FillRectangle@pPoint:
  2080                           	opt stack 0
  2081                           
  2082                           ; 4 bytes @ 0xB
  2083  00006B                     	ds	1
  2084  00006C                     LCD_Fill@j:
  2085                           	opt stack 0
  2086  00006C                     ___lldiv@counter:
  2087                           	opt stack 0
  2088  00006C                     Word_GetPair@pInput:
  2089                           	opt stack 0
  2090  00006C                     itos@input:
  2091                           	opt stack 0
  2092  00006C                     Console_MakeField@Column:
  2093                           	opt stack 0
  2094  00006C                     load_iRScriptStack@loadByte:
  2095                           	opt stack 0
  2096                           
  2097                           ; 2 bytes @ 0xC
  2098  00006C                     	ds	1
  2099  00006D                     Byte_SetPair@pPair:
  2100                           	opt stack 0
  2101  00006D                     Byte_SetQuad@pQuad:
  2102                           	opt stack 0
  2103  00006D                     Console_Tab@t:
  2104                           	opt stack 0
  2105  00006D                     Timer0_Init@pFrequency:
  2106                           	opt stack 0
  2107  00006D                     Timer2_Init@pFrequency:
  2108                           	opt stack 0
  2109                           
  2110                           ; 4 bytes @ 0xD
  2111  00006D                     	ds	1
  2112  00006E                     ?___fldiv:
  2113                           	opt stack 0
  2114  00006E                     Byte_SetPair@pValue:
  2115                           	opt stack 0
  2116  00006E                     Byte_SetQuad@pValue:
  2117                           	opt stack 0
  2118  00006E                     Word_GetPair@pPair:
  2119                           	opt stack 0
  2120  00006E                     Console_Tab@i:
  2121                           	opt stack 0
  2122  00006E                     load_iRScriptStack@bytesToLoad:
  2123                           	opt stack 0
  2124  00006E                     itos@destination:
  2125                           	opt stack 0
  2126  00006E                     _Console_MakeField$10974:
  2127                           	opt stack 0
  2128  00006E                     ___fldiv@b:
  2129                           	opt stack 0
  2130                           
  2131                           ; 4 bytes @ 0xE
  2132  00006E                     	ds	1
  2133  00006F                     Console_Tab@c:
  2134                           	opt stack 0
  2135  00006F                     load_iRScriptStack@i:
  2136                           	opt stack 0
  2137  00006F                     Port_SetPin@pInput:
  2138                           	opt stack 0
  2139  00006F                     Port_Set@pInput:
  2140                           	opt stack 0
  2141  00006F                     SPI_MinSpeed@pInput:
  2142                           	opt stack 0
  2143  00006F                     SPI_MaxSpeed@pInput:
  2144                           	opt stack 0
  2145  00006F                     Word_SetPair@pInput:
  2146                           	opt stack 0
  2147  00006F                     PortProperty_Valid@pInput:
  2148                           	opt stack 0
  2149  00006F                     LCD_FillRectangle@pSize:
  2150                           	opt stack 0
  2151                           
  2152                           ; 4 bytes @ 0xF
  2153  00006F                     	ds	1
  2154  000070                     ??_irobot_query_and_update:
  2155  000070                     ??_Console_PrintChar:
  2156  000070                     Console_MakeField@x:
  2157                           	opt stack 0
  2158  000070                     irobot_leds@LEDBit:
  2159                           	opt stack 0
  2160  000070                     itos@Data:
  2161                           	opt stack 0
  2162  000070                     irobot_angle_wait@angleWait:
  2163                           	opt stack 0
  2164  000070                     irobot_move@moveSpeed:
  2165                           	opt stack 0
  2166                           
  2167                           ; 2 bytes @ 0x10
  2168  000070                     	ds	1
  2169  000071                     ??_Timer2_Init:
  2170  000071                     ??_Timer0_Init:
  2171  000071                     Port_SetPin@pPin:
  2172                           	opt stack 0
  2173  000071                     Port_Set@pValue:
  2174                           	opt stack 0
  2175  000071                     Word_SetPair@pPair:
  2176                           	opt stack 0
  2177  000071                     PortProperty_Valid@pPinDrive:
  2178                           	opt stack 0
  2179  000071                     Console_MakeField@y:
  2180                           	opt stack 0
  2181  000071                     irobot_leds@powerColour:
  2182                           	opt stack 0
  2183                           
  2184                           ; 1 bytes @ 0x11
  2185  000071                     	ds	1
  2186  000072                     ??_Port_Set:
  2187  000072                     ??_irobot_angle_wait:
  2188  000072                     Port_SetPin@pValue:
  2189                           	opt stack 0
  2190  000072                     Word_SetPair@pValue:
  2191                           	opt stack 0
  2192  000072                     PortProperty_Valid@pPin:
  2193                           	opt stack 0
  2194  000072                     irobot_leds@powerLuminosity:
  2195                           	opt stack 0
  2196  000072                     LCD_DrawField@pField:
  2197                           	opt stack 0
  2198  000072                     itos@Length:
  2199                           	opt stack 0
  2200  000072                     irobot_move@moveTurnRadius:
  2201                           	opt stack 0
  2202  000072                     Timer2_Init@RDIV:
  2203                           	opt stack 0
  2204  000072                     ___fldiv@a:
  2205                           	opt stack 0
  2206                           
  2207                           ; 4 bytes @ 0x12
  2208  000072                     	ds	1
  2209  000073                     ??_PortProperty_Valid:
  2210  000073                     ??_LCD_FillRectangle:
  2211  000073                     Port_SetPin@Type:
  2212                           	opt stack 0
  2213  000073                     Console_PrintChar@pInput:
  2214                           	opt stack 0
  2215  000073                     irobot_leds@isScript:
  2216                           	opt stack 0
  2217  000073                     Timer0_Init@pCPUClock:
  2218                           	opt stack 0
  2219                           
  2220                           ; 4 bytes @ 0x13
  2221  000073                     	ds	1
  2222  000074                     ??_irobot_move:
  2223  000074                     LED_Set@pValue:
  2224                           	opt stack 0
  2225  000074                     putch@c:
  2226                           	opt stack 0
  2227  000074                     irobot_led_power_on@powerOnColour:
  2228                           	opt stack 0
  2229  000074                     Port_TogglePin@pInput:
  2230                           	opt stack 0
  2231  000074                     itos@Out:
  2232                           	opt stack 0
  2233  000074                     LCD_DrawField@pPoint:
  2234                           	opt stack 0
  2235                           
  2236                           ; 4 bytes @ 0x14
  2237  000074                     	ds	1
  2238  000075                     ?_printf:
  2239                           	opt stack 0
  2240  000075                     LCD_FillRectangle@i:
  2241                           	opt stack 0
  2242  000075                     LED_Set@pLED:
  2243                           	opt stack 0
  2244  000075                     irobot_query_and_update@packetIDs:
  2245                           	opt stack 0
  2246  000075                     printf@f:
  2247                           	opt stack 0
  2248  000075                     PortProperty_Valid@Errors:
  2249                           	opt stack 0
  2250                           
  2251                           ; 16 bytes @ 0x15
  2252  000075                     	ds	1
  2253  000076                     ??___fldiv:
  2254  000076                     LCD_FillRectangle@j:
  2255                           	opt stack 0
  2256  000076                     Port_TogglePin@pPin:
  2257                           	opt stack 0
  2258  000076                     HMI_SetNumber@pInput:
  2259                           	opt stack 0
  2260  000076                     Timer2_Init@pCPUClock:
  2261                           	opt stack 0
  2262                           
  2263                           ; 4 bytes @ 0x16
  2264  000076                     	ds	1
  2265  000077                     Port_TogglePin@Value:
  2266                           	opt stack 0
  2267  000077                     irobot_query_and_update@streamSize:
  2268                           	opt stack 0
  2269  000077                     Timer0_Init@DIVIDE:
  2270                           	opt stack 0
  2271                           
  2272                           ; 4 bytes @ 0x17
  2273  000077                     	ds	1
  2274  000078                     LED_Toggle@pLED:
  2275                           	opt stack 0
  2276  000078                     irobot_query_and_update@numberOfPacketRequests:
  2277                           	opt stack 0
  2278  000078                     irobot_move@isScript:
  2279                           	opt stack 0
  2280  000078                     LCD_DrawField@pSize:
  2281                           	opt stack 0
  2282                           
  2283                           ; 4 bytes @ 0x18
  2284  000078                     	ds	1
  2285  000079                     Event_DIPSwitch@pState:
  2286                           	opt stack 0
  2287  000079                     Event_TestButton@pState:
  2288                           	opt stack 0
  2289  000079                     irobot_query_and_update@packetVariable:
  2290                           	opt stack 0
  2291  000079                     irobot_stop_motion@isScript:
  2292                           	opt stack 0
  2293  000079                     irobot_rotate@rotateAngle:
  2294                           	opt stack 0
  2295  000079                     irobot_move_straight@straightSpeed:
  2296                           	opt stack 0
  2297                           
  2298                           ; 2 bytes @ 0x19
  2299  000079                     	ds	1
  2300  00007A                     Event_DIPSwitch@Bar:
  2301                           	opt stack 0
  2302  00007A                     irobot_query_and_update@j:
  2303                           	opt stack 0
  2304  00007A                     ___fldiv@sign:
  2305                           	opt stack 0
  2306  00007A                     Timer2_Init@DIVIDE:
  2307                           	opt stack 0
  2308                           
  2309                           ; 4 bytes @ 0x1A
  2310  00007A                     	ds	1
  2311  00007B                     irobot_query_and_update@startIndex:
  2312                           	opt stack 0
  2313  00007B                     Button_Poll@pButton:
  2314                           	opt stack 0
  2315  00007B                     Motor_Speed@pMotor:
  2316                           	opt stack 0
  2317  00007B                     irobot_rotate@rotateSpeed:
  2318                           	opt stack 0
  2319  00007B                     ___fldiv@rem:
  2320                           	opt stack 0
  2321                           
  2322                           ; 4 bytes @ 0x1B
  2323  00007B                     	ds	1
  2324  00007C                     ??_LCD_DrawField:
  2325  00007C                     irobot_query_and_update@i:
  2326                           	opt stack 0
  2327                           
  2328                           ; 1 bytes @ 0x1C
  2329  00007C                     	ds	1
  2330  00007D                     ??_printf:
  2331  00007D                     Button_Poll@pIncrement:
  2332                           	opt stack 0
  2333  00007D                     irobot_rotate@isScript:
  2334                           	opt stack 0
  2335  00007D                     Motor_Speed@pFrequency:
  2336                           	opt stack 0
  2337                           
  2338                           ; 2 bytes @ 0x1D
  2339  00007D                     	ds	1
  2340  00007E                     ??_Button_Poll:
  2341  00007E                     printf@prec:
  2342                           	opt stack 0
  2343  00007E                     LCD_DrawField@count:
  2344                           	opt stack 0
  2345                           
  2346                           ; 2 bytes @ 0x1E
  2347  00007E                     	ds	1
  2348  00007F                     printf@flag:
  2349                           	opt stack 0
  2350  00007F                     ___fldiv@new_exp:
  2351                           	opt stack 0
  2352                           
  2353                           ; 2 bytes @ 0x1F
  2354  00007F                     	ds	1
  2355  000080                     LCD_DrawField@xmax:
  2356                           	opt stack 0
  2357  000080                     printf@ap:
  2358                           	opt stack 0
  2359                           
  2360                           ; 2 bytes @ 0x20
  2361  000080                     	ds	1
  2362  000081                     LCD_DrawField@ymax:
  2363                           	opt stack 0
  2364  000081                     ___fldiv@grs:
  2365                           	opt stack 0
  2366                           
  2367                           ; 4 bytes @ 0x21
  2368  000081                     	ds	1
  2369  000082                     LCD_DrawField@i:
  2370                           	opt stack 0
  2371  000082                     Port_Set@TypeRequired:
  2372                           	opt stack 0
  2373  000082                     printf@val:
  2374                           	opt stack 0
  2375                           
  2376                           ; 2 bytes @ 0x22
  2377  000082                     	ds	1
  2378  000083                     ??_Console_Render:
  2379  000083                     Button_Poll@Pin:
  2380                           	opt stack 0
  2381                           
  2382                           ; 1 bytes @ 0x23
  2383  000083                     	ds	1
  2384  000084                     printf@c:
  2385                           	opt stack 0
  2386  000084                     Port_Set@TypeActual:
  2387                           	opt stack 0
  2388                           
  2389                           ; 2 bytes @ 0x24
  2390  000084                     	ds	1
  2391  000085                     PortProperty_Valid@Pair:
  2392                           	opt stack 0
  2393  000085                     Console_Render@temp:
  2394                           	opt stack 0
  2395  000085                     ___fldiv@bexp:
  2396                           	opt stack 0
  2397                           
  2398                           ; 1 bytes @ 0x25
  2399  000085                     	ds	1
  2400  000086                     Port_Set@Type:
  2401                           	opt stack 0
  2402  000086                     ___fldiv@aexp:
  2403                           	opt stack 0
  2404  000086                     Port_CheckPairType@pInput:
  2405                           	opt stack 0
  2406  000086                     Port_SetPinType@pInput:
  2407                           	opt stack 0
  2408  000086                     Console_Render@lCursor:
  2409                           	opt stack 0
  2410                           
  2411                           ; 4 bytes @ 0x26
  2412  000086                     	ds	1
  2413  000087                     ?___flmul:
  2414                           	opt stack 0
  2415  000087                     ___flmul@b:
  2416                           	opt stack 0
  2417                           
  2418                           ; 4 bytes @ 0x27
  2419  000087                     	ds	1
  2420  000088                     Port_CheckPairType@pPair:
  2421                           	opt stack 0
  2422  000088                     Port_SetPinType@pPin:
  2423                           	opt stack 0
  2424                           
  2425                           ; 1 bytes @ 0x28
  2426  000088                     	ds	1
  2427  000089                     Port_CheckPairType@pDrive:
  2428                           	opt stack 0
  2429  000089                     Port_SetPinType@pType:
  2430                           	opt stack 0
  2431                           
  2432                           ; 1 bytes @ 0x29
  2433  000089                     	ds	1
  2434  00008A                     Port_CheckPairType@Pin1:
  2435                           	opt stack 0
  2436  00008A                     Port_SetPinType@Output:
  2437                           	opt stack 0
  2438  00008A                     Console_Render@x:
  2439                           	opt stack 0
  2440                           
  2441                           ; 1 bytes @ 0x2A
  2442  00008A                     	ds	1
  2443  00008B                     Port_CheckPairType@Pin2:
  2444                           	opt stack 0
  2445  00008B                     Console_Render@y:
  2446                           	opt stack 0
  2447  00008B                     Port_SetPinType@Props:
  2448                           	opt stack 0
  2449  00008B                     ___flmul@a:
  2450                           	opt stack 0
  2451                           
  2452                           ; 4 bytes @ 0x2B
  2453  00008B                     	ds	1
  2454  00008C                     Port_CheckPairType@Output:
  2455                           	opt stack 0
  2456  00008C                     mode2@dist:
  2457                           	opt stack 0
  2458                           
  2459                           ; 2 bytes @ 0x2C
  2460  00008C                     	ds	1
  2461  00008D                     LED_Init@pLED:
  2462                           	opt stack 0
  2463  00008D                     Port_CheckPairType@Props:
  2464                           	opt stack 0
  2465  00008D                     Motor_Init@pMotor:
  2466                           	opt stack 0
  2467  00008D                     SPI_Init@pClock:
  2468                           	opt stack 0
  2469                           
  2470                           ; 4 bytes @ 0x2D
  2471  00008D                     	ds	2
  2472  00008F                     ??___flmul:
  2473  00008F                     Port_CheckQuadType@pInput:
  2474                           	opt stack 0
  2475  00008F                     Motor_Init@pAddress:
  2476                           	opt stack 0
  2477                           
  2478                           ; 2 bytes @ 0x2F
  2479  00008F                     	ds	2
  2480  000091                     Port_CheckQuadType@pQuad:
  2481                           	opt stack 0
  2482  000091                     SPI_Init@pChannel:
  2483                           	opt stack 0
  2484                           
  2485                           ; 1 bytes @ 0x31
  2486  000091                     	ds	1
  2487  000092                     Port_CheckQuadType@pDrive:
  2488                           	opt stack 0
  2489  000092                     SPI_Init@pMode:
  2490                           	opt stack 0
  2491                           
  2492                           ; 1 bytes @ 0x32
  2493  000092                     	ds	1
  2494  000093                     Port_CheckQuadType@Pair1:
  2495                           	opt stack 0
  2496  000093                     ___flmul@sign:
  2497                           	opt stack 0
  2498  000093                     SPI_Init@pInput:
  2499                           	opt stack 0
  2500                           
  2501                           ; 2 bytes @ 0x33
  2502  000093                     	ds	1
  2503  000094                     Port_CheckQuadType@Pair2:
  2504                           	opt stack 0
  2505  000094                     ___flmul@aexp:
  2506                           	opt stack 0
  2507                           
  2508                           ; 1 bytes @ 0x34
  2509  000094                     	ds	1
  2510  000095                     ??_LCD_Init:
  2511  000095                     Port_CheckQuadType@Output:
  2512                           	opt stack 0
  2513  000095                     ___flmul@grs:
  2514                           	opt stack 0
  2515                           
  2516                           ; 4 bytes @ 0x35
  2517  000095                     	ds	1
  2518  000096                     Port_CheckPortType@pInput:
  2519                           	opt stack 0
  2520  000096                     Port_SetQuadType@pInput:
  2521                           	opt stack 0
  2522                           
  2523                           ; 2 bytes @ 0x36
  2524  000096                     	ds	1
  2525  000097                     LCD_Init@i:
  2526                           	opt stack 0
  2527                           
  2528                           ; 2 bytes @ 0x37
  2529  000097                     	ds	1
  2530  000098                     Port_CheckPortType@pDrive:
  2531                           	opt stack 0
  2532  000098                     Port_SetQuadType@pQuad:
  2533                           	opt stack 0
  2534                           
  2535                           ; 1 bytes @ 0x38
  2536  000098                     	ds	1
  2537  000099                     Port_CheckPortType@Output:
  2538                           	opt stack 0
  2539  000099                     Port_SetQuadType@pType:
  2540                           	opt stack 0
  2541  000099                     ___flmul@bexp:
  2542                           	opt stack 0
  2543                           
  2544                           ; 1 bytes @ 0x39
  2545  000099                     	ds	1
  2546  00009A                     Port_SetQuadType@Output:
  2547                           	opt stack 0
  2548  00009A                     Port_SetType@pInput:
  2549                           	opt stack 0
  2550  00009A                     ___flmul@prod:
  2551                           	opt stack 0
  2552                           
  2553                           ; 4 bytes @ 0x3A
  2554  00009A                     	ds	1
  2555  00009B                     Button_Init@pInput:
  2556                           	opt stack 0
  2557                           
  2558                           ; 2 bytes @ 0x3B
  2559  00009B                     	ds	1
  2560  00009C                     Port_SetType@pType:
  2561                           	opt stack 0
  2562                           
  2563                           ; 1 bytes @ 0x3C
  2564  00009C                     	ds	1
  2565  00009D                     ??_Port_SetType:
  2566  00009D                     Button_Init@pThreshold:
  2567                           	opt stack 0
  2568                           
  2569                           ; 2 bytes @ 0x3D
  2570  00009D                     	ds	1
  2571  00009E                     ___flmul@temp:
  2572                           	opt stack 0
  2573                           
  2574                           ; 2 bytes @ 0x3E
  2575  00009E                     	ds	1
  2576  00009F                     Port_SetType@Output:
  2577                           	opt stack 0
  2578  00009F                     Button_Init@pInitIO:
  2579                           	opt stack 0
  2580                           
  2581                           ; 3 bytes @ 0x3F
  2582  00009F                     	ds	1
  2583  0000A0                     ?_ADC_Voltage:
  2584                           	opt stack 0
  2585  0000A0                     Port_Init@pInput:
  2586                           	opt stack 0
  2587  0000A0                     ADC_Voltage@pInput:
  2588                           	opt stack 0
  2589                           
  2590                           ; 2 bytes @ 0x40
  2591  0000A0                     	ds	2
  2592  0000A2                     Port_Init@pPort:
  2593                           	opt stack 0
  2594  0000A2                     Button_Init@pGetState:
  2595                           	opt stack 0
  2596                           
  2597                           ; 3 bytes @ 0x42
  2598  0000A2                     	ds	1
  2599  0000A3                     ??_Port_Init:
  2600                           
  2601                           ; 1 bytes @ 0x43
  2602  0000A3                     	ds	1
  2603  0000A4                     ??_ADC_Voltage:
  2604                           
  2605                           ; 1 bytes @ 0x44
  2606  0000A4                     	ds	1
  2607  0000A5                     Port_Init@i:
  2608                           	opt stack 0
  2609  0000A5                     Button_Init@pFunction:
  2610                           	opt stack 0
  2611                           
  2612                           ; 3 bytes @ 0x45
  2613  0000A5                     	ds	1
  2614  0000A6                     ADC_Voltage@max:
  2615                           	opt stack 0
  2616                           
  2617                           ; 4 bytes @ 0x46
  2618  0000A6                     	ds	2
  2619  0000A8                     HMI_Init@in:
  2620                           	opt stack 0
  2621                           
  2622                           ; 2 bytes @ 0x48
  2623  0000A8                     	ds	2
  2624  0000AA                     ADC_Voltage@ref:
  2625                           	opt stack 0
  2626                           
  2627                           ; 4 bytes @ 0x4A
  2628  0000AA                     	ds	4
  2629  0000AE                     ADC_Voltage@output:
  2630                           	opt stack 0
  2631                           
  2632                           ; 4 bytes @ 0x4E
  2633  0000AE                     	ds	4
  2634  0000B2                     ?___fltol:
  2635                           	opt stack 0
  2636  0000B2                     ___fltol@f1:
  2637                           	opt stack 0
  2638                           
  2639                           ; 4 bytes @ 0x52
  2640  0000B2                     	ds	4
  2641  0000B6                     ??___fltol:
  2642                           
  2643                           ; 1 bytes @ 0x56
  2644  0000B6                     	ds	4
  2645  0000BA                     tblptru	equ	0xFF8
  2646                           tblptrh	equ	0xFF7
  2647                           tblptrl	equ	0xFF6
  2648                           tablat	equ	0xFF5
  2649                           postinc0	equ	0xFEE
  2650                           wreg	equ	0xFE8
  2651                           postdec1	equ	0xFE5
  2652                           fsr1h	equ	0xFE2
  2653                           fsr1l	equ	0xFE1
  2654                           
  2655                           ; 1 bytes @ 0x5A
  2656                           
  2657                           	psect	cstackCOMRAM
  2658  000001                     __pcstackCOMRAM:
  2659                           	opt stack 0
  2660  000001                     i2Byte_SetBit@pInput:
  2661                           	opt stack 0
  2662  000001                     i2Byte_GetZone@pInput:
  2663                           	opt stack 0
  2664  000001                     i2delay_us@us:
  2665                           	opt stack 0
  2666  000001                     i2MXK_Queue@pCallback:
  2667                           	opt stack 0
  2668                           
  2669                           ; 3 bytes @ 0x0
  2670  000001                     	ds	2
  2671  000003                     i2Byte_SetBit@pBit:
  2672                           	opt stack 0
  2673  000003                     i2Byte_GetZone@pMax:
  2674                           	opt stack 0
  2675  000003                     i2delay_us@u:
  2676                           	opt stack 0
  2677                           
  2678                           ; 4 bytes @ 0x2
  2679  000003                     	ds	1
  2680  000004                     i2Byte_SetBit@pValue:
  2681                           	opt stack 0
  2682  000004                     i2Byte_GetZone@pChunk:
  2683                           	opt stack 0
  2684                           
  2685                           ; 1 bytes @ 0x3
  2686  000004                     	ds	1
  2687  000005                     ??i2_Byte_SetBit:
  2688  000005                     i2Byte_GetZone@pChunkSize:
  2689                           	opt stack 0
  2690                           
  2691                           ; 1 bytes @ 0x4
  2692  000005                     	ds	1
  2693  000006                     ??i2_Byte_GetZone:
  2694                           
  2695                           ; 1 bytes @ 0x5
  2696  000006                     	ds	1
  2697  000007                     i2Byte_GetZone@MASK:
  2698                           	opt stack 0
  2699  000007                     i2MXK_SwitchTo@CUR:
  2700                           	opt stack 0
  2701                           
  2702                           ; 1 bytes @ 0x6
  2703  000007                     	ds	1
  2704  000008                     i2Byte_GetZone@Offset:
  2705                           	opt stack 0
  2706  000008                     i2MXK_SwitchTo@pModule:
  2707                           	opt stack 0
  2708                           
  2709                           ; 1 bytes @ 0x7
  2710  000008                     	ds	1
  2711  000009                     i2Byte_GetZone@Output:
  2712                           	opt stack 0
  2713                           
  2714                           ; 1 bytes @ 0x8
  2715  000009                     	ds	1
  2716  00000A                     i2Byte_GetPair@pInput:
  2717                           	opt stack 0
  2718                           
  2719                           ; 2 bytes @ 0x9
  2720  00000A                     	ds	2
  2721  00000C                     i2Byte_GetPair@pPair:
  2722                           	opt stack 0
  2723                           
  2724                           ; 1 bytes @ 0xB
  2725  00000C                     	ds	1
  2726  00000D                     i2Word_GetPair@pInput:
  2727                           	opt stack 0
  2728                           
  2729                           ; 2 bytes @ 0xC
  2730  00000D                     	ds	2
  2731  00000F                     i2Word_GetPair@pPair:
  2732                           	opt stack 0
  2733                           
  2734                           ; 1 bytes @ 0xE
  2735  00000F                     	ds	1
  2736  000010                     i2Port_SetPin@pInput:
  2737                           	opt stack 0
  2738                           
  2739                           ; 2 bytes @ 0xF
  2740  000010                     	ds	2
  2741  000012                     i2Port_SetPin@pPin:
  2742                           	opt stack 0
  2743                           
  2744                           ; 1 bytes @ 0x11
  2745  000012                     	ds	1
  2746  000013                     i2Port_SetPin@pValue:
  2747                           	opt stack 0
  2748                           
  2749                           ; 1 bytes @ 0x12
  2750  000013                     	ds	1
  2751  000014                     i2Port_SetPin@Type:
  2752                           	opt stack 0
  2753                           
  2754                           ; 1 bytes @ 0x13
  2755  000014                     	ds	1
  2756  000015                     
  2757                           ; 1 bytes @ 0x14
  2758  000015                     	ds	2
  2759  000017                     ??_ISR_Function:
  2760                           
  2761                           ; 1 bytes @ 0x16
  2762  000017                     	ds	18
  2763                           tblptru	equ	0xFF8
  2764                           tblptrh	equ	0xFF7
  2765                           tblptrl	equ	0xFF6
  2766                           tablat	equ	0xFF5
  2767                           postinc0	equ	0xFEE
  2768                           wreg	equ	0xFE8
  2769                           postdec1	equ	0xFE5
  2770                           fsr1h	equ	0xFE2
  2771                           fsr1l	equ	0xFE1
  2772                           
  2773 ;;
  2774 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2775 ;;
  2776 ;; *************** function _main *****************
  2777 ;; Defined at:
  2778 ;;		line 323 in file "main.c"
  2779 ;; Parameters:    Size  Location     Type
  2780 ;;		None
  2781 ;; Auto vars:     Size  Location     Type
  2782 ;;		None
  2783 ;; Return value:  Size  Location     Type
  2784 ;;                  1    wreg      void 
  2785 ;; Registers used:
  2786 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2787 ;; Tracked objects:
  2788 ;;		On entry : 0/0
  2789 ;;		On exit  : 0/0
  2790 ;;		Unchanged: 0/0
  2791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2794 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2795 ;;      Totals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2796 ;;Total ram usage:        2 bytes
  2797 ;; Hardware stack levels required when called:   18
  2798 ;; This function calls:
  2799 ;;		_delay_ms
  2800 ;;		_getMode
  2801 ;;		_init
  2802 ;;		_mode1
  2803 ;;		_mode2
  2804 ;;		_mode3
  2805 ;;		_mode4
  2806 ;; This function is called by:
  2807 ;;		Startup code after reset
  2808 ;; This function uses a non-reentrant model
  2809 ;;
  2810                           
  2811                           	psect	text0
  2812  015654                     __ptext0:
  2813                           	opt stack 0
  2814  015654                     _main:
  2815                           	opt stack 13
  2816                           
  2817                           ;main.c: 324: init();
  2818                           
  2819                           ;incstack = 0
  2820  015654  ECD8  F0A2         	call	_init	;wreg free
  2821  015658                     
  2822                           ;main.c: 327: getMode();
  2823  015658  EC69  F0A0         	call	_getMode	;wreg free
  2824                           
  2825                           ;main.c: 328: switch (mode) {
  2826  01565C  D014               	goto	l2387
  2827  01565E                     
  2828                           ;main.c: 330: mode1();
  2829  01565E  EC62  F084         	call	_mode1	;wreg free
  2830                           
  2831                           ;main.c: 331: break;
  2832  015662  D7FA               	goto	l2386
  2833  015664                     
  2834                           ;main.c: 333: mode2();
  2835  015664  EC26  F09A         	call	_mode2	;wreg free
  2836                           
  2837                           ;main.c: 334: break;
  2838  015668  D7F7               	goto	l2386
  2839  01566A                     
  2840                           ;main.c: 336: mode3();
  2841  01566A  EC02  F00A         	call	_mode3	;wreg free
  2842                           
  2843                           ;main.c: 337: break;
  2844  01566E  D7F4               	goto	l2386
  2845  015670                     
  2846                           ;main.c: 339: mode4();
  2847  015670  EC6E  F086         	call	_mode4	;wreg free
  2848                           
  2849                           ;main.c: 340: break;
  2850  015674  D7F1               	goto	l2386
  2851  015676                     
  2852                           ;main.c: 342: delay_ms(20);
  2853  015676  0E00               	movlw	0
  2854  015678  0100               	movlb	0	; () banked
  2855  01567A  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  2856  01567C  0E14               	movlw	20
  2857  01567E  6F60               	movwf	delay_ms@ms& (0+255),b
  2858  015680  ECF6  F0A9         	call	_delay_ms	;wreg free
  2859                           
  2860                           ;main.c: 343: }
  2861  015684  D7E9               	goto	l2386
  2862  015686                     l2387:
  2863  015686  C323  F3F9         	movff	_mode,??_main
  2864  01568A  C324  F3FA         	movff	_mode+1,??_main+1
  2865                           
  2866                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2867                           ; Switch size 1, requested type "space"
  2868                           ; Number of cases is 1, Range of values is 0 to 0
  2869                           ; switch strategies available:
  2870                           ; Name         Instructions Cycles
  2871                           ; simple_byte            4     3 (average)
  2872                           ;	Chosen strategy is simple_byte
  2873  01568E  0103               	movlb	3	; () banked
  2874  015690  51FA               	movf	(??_main+1)& (0+255),w,b
  2875  015692  0A00               	xorlw	0	; case 0
  2876  015694  A4D8               	btfss	status,2,c
  2877  015696  D7EF               	goto	l2393
  2878                           
  2879                           ; BSR set to: 3
  2880                           ; Switch size 1, requested type "space"
  2881                           ; Number of cases is 4, Range of values is 1 to 4
  2882                           ; switch strategies available:
  2883                           ; Name         Instructions Cycles
  2884                           ; simple_byte           13     7 (average)
  2885                           ;	Chosen strategy is simple_byte
  2886  015698  0103               	movlb	3	; () banked
  2887  01569A  51F9               	movf	??_main& (0+255),w,b
  2888  01569C  0A01               	xorlw	1	; case 1
  2889  01569E  B4D8               	btfsc	status,2,c
  2890  0156A0  D7DE               	goto	l2388
  2891  0156A2  0A03               	xorlw	3	; case 2
  2892  0156A4  B4D8               	btfsc	status,2,c
  2893  0156A6  D7DE               	goto	l2390
  2894  0156A8  0A01               	xorlw	1	; case 3
  2895  0156AA  B4D8               	btfsc	status,2,c
  2896  0156AC  D7DE               	goto	l2391
  2897  0156AE  0A07               	xorlw	7	; case 4
  2898  0156B0  B4D8               	btfsc	status,2,c
  2899  0156B2  D7DE               	goto	l2392
  2900  0156B4  D7E0               	goto	l2393
  2901  0156B6                     __end_of_main:
  2902                           	opt stack 0
  2903                           tblptru	equ	0xFF8
  2904                           tblptrh	equ	0xFF7
  2905                           tblptrl	equ	0xFF6
  2906                           tablat	equ	0xFF5
  2907                           postinc0	equ	0xFEE
  2908                           wreg	equ	0xFE8
  2909                           postdec1	equ	0xFE5
  2910                           fsr1h	equ	0xFE2
  2911                           fsr1l	equ	0xFE1
  2912                           status	equ	0xFD8
  2913                           
  2914 ;; *************** function _mode4 *****************
  2915 ;; Defined at:
  2916 ;;		line 249 in file "main.c"
  2917 ;; Parameters:    Size  Location     Type
  2918 ;;		None
  2919 ;; Auto vars:     Size  Location     Type
  2920 ;;		None
  2921 ;; Return value:  Size  Location     Type
  2922 ;;                  1    wreg      void 
  2923 ;; Registers used:
  2924 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2925 ;; Tracked objects:
  2926 ;;		On entry : 0/0
  2927 ;;		On exit  : 0/0
  2928 ;;		Unchanged: 0/0
  2929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2931 ;;      Locals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2932 ;;      Temps:          0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2933 ;;      Totals:         0       0       0       0       5       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2934 ;;Total ram usage:        5 bytes
  2935 ;; Hardware stack levels used:    1
  2936 ;; Hardware stack levels required when called:   16
  2937 ;; This function calls:
  2938 ;;		_ADC_Start
  2939 ;;		_ADC_Voltage
  2940 ;;		_Console_Render
  2941 ;;		_HMI_Poll
  2942 ;;		_HMI_Render
  2943 ;;		_HMI_SetNumber
  2944 ;;		_MXK_Dequeue
  2945 ;;		_MXK_Release
  2946 ;;		_MXK_SwitchTo
  2947 ;;		_Motor_Move
  2948 ;;		_Motor_Speed
  2949 ;;		___fldiv
  2950 ;;		___flmul
  2951 ;;		___fltol
  2952 ;;		___xxtofl
  2953 ;;		_irobot_move_straight
  2954 ;;		_irobot_rotate_to
  2955 ;;		_irobot_song_play
  2956 ;;		_irobot_stop_motion
  2957 ;;		_printf
  2958 ;;		_update_angle
  2959 ;;		_update_bump_and_cliff
  2960 ;;		_update_distance
  2961 ;; This function is called by:
  2962 ;;		_main
  2963 ;; This function uses a non-reentrant model
  2964 ;;
  2965                           
  2966                           	psect	text1
  2967  010CDC                     __ptext1:
  2968                           	opt stack 0
  2969  010CDC                     _mode4:
  2970                           	opt stack 14
  2971                           
  2972                           ;main.c: 250: update_bump_and_cliff();
  2973                           
  2974                           ; BSR set to: 3
  2975                           ;incstack = 0
  2976  010CDC  EC49  F0AF         	call	_update_bump_and_cliff	;wreg free
  2977                           
  2978                           ;main.c: 251: update_distance();
  2979  010CE0  EC2E  F0B2         	call	_update_distance	;wreg free
  2980                           
  2981                           ;main.c: 252: update_angle();
  2982  010CE4  EC37  F0B2         	call	_update_angle	;wreg free
  2983                           
  2984                           ;main.c: 256: if (iRBumpLeft || iRBumpRight) {
  2985  010CE8  0100               	movlb	0	; () banked
  2986  010CEA  51D6               	movf	_iRBumpLeft& (0+255),w,b
  2987  010CEC  A4D8               	btfss	status,2,c
  2988  010CEE  D004               	goto	u13730
  2989                           
  2990                           ; BSR set to: 0
  2991  010CF0  0100               	movlb	0	; () banked
  2992  010CF2  51D7               	movf	_iRBumpRight& (0+255),w,b
  2993  010CF4  B4D8               	btfsc	status,2,c
  2994  010CF6  D006               	goto	l2356
  2995  010CF8                     u13730:
  2996                           
  2997                           ; BSR set to: 0
  2998                           ;main.c: 257: irobot_song_play(0);
  2999                           
  3000                           ; BSR set to: 0
  3001  010CF8  0E00               	movlw	0
  3002  010CFA  EC1A  F0B2         	call	_irobot_song_play
  3003                           
  3004                           ;main.c: 258: irobot_stop_motion(0);
  3005  010CFE  0E00               	movlw	0
  3006  010D00  ECC3  F0AD         	call	_irobot_stop_motion
  3007  010D04                     l2356:
  3008                           
  3009                           ;main.c: 259: }
  3010                           ;main.c: 260: if (angleTotal > 83) {
  3011  010D04  0100               	movlb	0	; () banked
  3012  010D06  BFC7               	btfsc	(_angleTotal+1)& (0+255),7,b
  3013  010D08  D00B               	goto	l2359
  3014  010D0A  0100               	movlb	0	; () banked
  3015  010D0C  51C7               	movf	(_angleTotal+1)& (0+255),w,b
  3016  010D0E  E105               	bnz	u13740
  3017  010D10  0E54               	movlw	84
  3018  010D12  0100               	movlb	0	; () banked
  3019  010D14  5DC6               	subwf	_angleTotal& (0+255),w,b
  3020  010D16  A0D8               	btfss	status,0,c
  3021  010D18  D003               	goto	l2359
  3022  010D1A                     u13740:
  3023                           
  3024                           ; BSR set to: 0
  3025                           ;main.c: 261: irobot_stop_motion(0);
  3026  010D1A  0E00               	movlw	0
  3027  010D1C  ECC3  F0AD         	call	_irobot_stop_motion
  3028  010D20                     l2359:
  3029                           
  3030                           ;main.c: 262: }
  3031                           ;main.c: 264: if (MXK_SwitchTo(eMXK_HMI)) {
  3032  010D20  0E01               	movlw	1
  3033  010D22  EC4E  F0AE         	call	_MXK_SwitchTo
  3034  010D26  0900               	iorlw	0
  3035  010D28  B4D8               	btfsc	status,2,c
  3036  010D2A  D029               	goto	l2361
  3037                           
  3038                           ;main.c: 265: printf("%c", (char)35);
  3039  010D2C  0EFB               	movlw	low STR_1
  3040  010D2E  0100               	movlb	0	; () banked
  3041  010D30  6F75               	movwf	printf@f& (0+255),b
  3042  010D32  0EFF               	movlw	high STR_1
  3043  010D34  0100               	movlb	0	; () banked
  3044  010D36  6F76               	movwf	(printf@f+1)& (0+255),b
  3045  010D38  0E00               	movlw	0
  3046  010D3A  0100               	movlb	0	; () banked
  3047  010D3C  6F78               	movwf	(?_printf+3)& (0+255),b
  3048  010D3E  0E23               	movlw	35
  3049  010D40  6F77               	movwf	(?_printf+2)& (0+255),b
  3050  010D42  EC7E  F092         	call	_printf	;wreg free
  3051                           
  3052                           ;main.c: 266: printf("Closest Wall:%u\nClosest Angle:%u\n", MinDist, stepsToMinDegrees);
  3053  010D46  0ECB               	movlw	low STR_8
  3054  010D48  0100               	movlb	0	; () banked
  3055  010D4A  6F75               	movwf	printf@f& (0+255),b
  3056  010D4C  0EFF               	movlw	high STR_8
  3057  010D4E  0100               	movlb	0	; () banked
  3058  010D50  6F76               	movwf	(printf@f+1)& (0+255),b
  3059  010D52  C0FB  F077         	movff	_MinDist,?_printf+2
  3060  010D56  C0FC  F078         	movff	_MinDist+1,?_printf+3
  3061  010D5A  C300  F079         	movff	_stepsToMinDegrees,?_printf+4
  3062  010D5E  C301  F07A         	movff	_stepsToMinDegrees+1,?_printf+5
  3063  010D62  C302  F07B         	movff	_stepsToMinDegrees+2,?_printf+6
  3064  010D66  C303  F07C         	movff	_stepsToMinDegrees+3,?_printf+7
  3065  010D6A  EC7E  F092         	call	_printf	;wreg free
  3066                           
  3067                           ;main.c: 267: Console_Render();
  3068  010D6E  EC92  F08F         	call	_Console_Render	;wreg free
  3069                           
  3070                           ;main.c: 268: if (MXK_Release())
  3071  010D72  EC91  F0B1         	call	_MXK_Release	;wreg free
  3072  010D76  0900               	iorlw	0
  3073  010D78  A4D8               	btfss	status,2,c
  3074                           
  3075                           ;main.c: 269: MXK_Dequeue();
  3076  010D7A  ECCE  F0AE         	call	_MXK_Dequeue	;wreg free
  3077  010D7E                     l2361:
  3078                           
  3079                           ;main.c: 270: }
  3080                           ;main.c: 271: HMI_Poll();
  3081  010D7E  EC35  F0A8         	call	_HMI_Poll	;wreg free
  3082                           
  3083                           ;main.c: 272: StepRotate = 0;
  3084  010D82  0E00               	movlw	0
  3085  010D84  0100               	movlb	0	; () banked
  3086  010D86  6FC5               	movwf	(_StepRotate+1)& (0+255),b
  3087  010D88  0E00               	movlw	0
  3088  010D8A  6FC4               	movwf	_StepRotate& (0+255),b
  3089                           
  3090                           ; BSR set to: 0
  3091                           ;main.c: 273: MinDist = 1000;
  3092  010D8C  0E03               	movlw	3
  3093  010D8E  0100               	movlb	0	; () banked
  3094  010D90  6FFC               	movwf	(_MinDist+1)& (0+255),b
  3095  010D92  0EE8               	movlw	232
  3096  010D94  6FFB               	movwf	_MinDist& (0+255),b
  3097                           
  3098                           ; BSR set to: 0
  3099                           ;main.c: 274: Stepstomin = 0;
  3100  010D96  0E00               	movlw	0
  3101  010D98  0100               	movlb	0	; () banked
  3102  010D9A  6FC3               	movwf	(_Stepstomin+1)& (0+255),b
  3103  010D9C  0E00               	movlw	0
  3104  010D9E  6FC2               	movwf	_Stepstomin& (0+255),b
  3105                           
  3106                           ; BSR set to: 0
  3107                           ;main.c: 275: stepsToMinDegrees = ((float) Stepstomin / 400) * 360;
  3108  010DA0  0E00               	movlw	0
  3109  010DA2  0100               	movlb	0	; () banked
  3110  010DA4  6F72               	movwf	___fldiv@a& (0+255),b
  3111  010DA6  0E00               	movlw	0
  3112  010DA8  6F73               	movwf	(___fldiv@a+1)& (0+255),b
  3113  010DAA  0EC8               	movlw	200
  3114  010DAC  6F74               	movwf	(___fldiv@a+2)& (0+255),b
  3115  010DAE  0E43               	movlw	67
  3116  010DB0  6F75               	movwf	(___fldiv@a+3)& (0+255),b
  3117  010DB2  C0C2  F060         	movff	_Stepstomin,___xxtofl@val
  3118  010DB6  C0C3  F061         	movff	_Stepstomin+1,___xxtofl@val+1
  3119  010DBA  0100               	movlb	0	; () banked
  3120  010DBC  0E00               	movlw	0
  3121  010DBE  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
  3122  010DC0  0EFF               	movlw	-1
  3123  010DC2  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
  3124  010DC4  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
  3125  010DC6  0E01               	movlw	1
  3126  010DC8  EC97  F091         	call	___xxtofl
  3127  010DCC  C060  F06E         	movff	?___xxtofl,___fldiv@b
  3128  010DD0  C061  F06F         	movff	?___xxtofl+1,___fldiv@b+1
  3129  010DD4  C062  F070         	movff	?___xxtofl+2,___fldiv@b+2
  3130  010DD8  C063  F071         	movff	?___xxtofl+3,___fldiv@b+3
  3131  010DDC  EC53  F088         	call	___fldiv	;wreg free
  3132  010DE0  C06E  F087         	movff	?___fldiv,___flmul@b
  3133  010DE4  C06F  F088         	movff	?___fldiv+1,___flmul@b+1
  3134  010DE8  C070  F089         	movff	?___fldiv+2,___flmul@b+2
  3135  010DEC  C071  F08A         	movff	?___fldiv+3,___flmul@b+3
  3136  010DF0  0E00               	movlw	0
  3137  010DF2  0100               	movlb	0	; () banked
  3138  010DF4  6F8B               	movwf	___flmul@a& (0+255),b
  3139  010DF6  0E00               	movlw	0
  3140  010DF8  6F8C               	movwf	(___flmul@a+1)& (0+255),b
  3141  010DFA  0EB4               	movlw	180
  3142  010DFC  6F8D               	movwf	(___flmul@a+2)& (0+255),b
  3143  010DFE  0E43               	movlw	67
  3144  010E00  6F8E               	movwf	(___flmul@a+3)& (0+255),b
  3145  010E02  EC00  F080         	call	___flmul	;wreg free
  3146  010E06  C087  F300         	movff	?___flmul,_stepsToMinDegrees
  3147  010E0A  C088  F301         	movff	?___flmul+1,_stepsToMinDegrees+1
  3148  010E0E  C089  F302         	movff	?___flmul+2,_stepsToMinDegrees+2
  3149  010E12  C08A  F303         	movff	?___flmul+3,_stepsToMinDegrees+3
  3150                           
  3151                           ;main.c: 276: IRValue = 0;
  3152  010E16  0E00               	movlw	0
  3153  010E18  0100               	movlb	0	; () banked
  3154  010E1A  6FC1               	movwf	(_IRValue+1)& (0+255),b
  3155  010E1C  0E00               	movlw	0
  3156  010E1E  6FC0               	movwf	_IRValue& (0+255),b
  3157                           
  3158                           ; BSR set to: 0
  3159                           ;main.c: 277: TimerX = 8;
  3160  010E20  0E00               	movlw	0
  3161  010E22  0100               	movlb	0	; () banked
  3162  010E24  6FFA               	movwf	(_TimerX+1)& (0+255),b
  3163  010E26  0E08               	movlw	8
  3164  010E28  6FF9               	movwf	_TimerX& (0+255),b
  3165                           
  3166                           ;main.c: 278: while (StepRotate < 400) {
  3167  010E2A  D0F8               	goto	u13850
  3168  010E2C                     
  3169                           ; BSR set to: 0
  3170                           ;main.c: 279: StepRotate++;
  3171                           
  3172                           ; BSR set to: 0
  3173  010E2C  0100               	movlb	0	; () banked
  3174  010E2E  4BC4               	infsnz	_StepRotate& (0+255),f,b
  3175  010E30  2BC5               	incf	(_StepRotate+1)& (0+255),f,b
  3176                           
  3177                           ; BSR set to: 0
  3178                           ;main.c: 280: ADC_Start(&ADC_AN0);
  3179  010E32  0EF4               	movlw	low _ADC_AN0
  3180  010E34  0100               	movlb	0	; () banked
  3181  010E36  6F62               	movwf	ADC_Start@pInput& (0+255),b
  3182  010E38  0E00               	movlw	high _ADC_AN0
  3183  010E3A  0100               	movlb	0	; () banked
  3184  010E3C  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
  3185  010E3E  ECC0  F0A6         	call	_ADC_Start	;wreg free
  3186                           
  3187                           ;main.c: 281: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3188  010E42  0EF4               	movlw	low _ADC_AN0
  3189  010E44  0100               	movlb	0	; () banked
  3190  010E46  6FA0               	movwf	ADC_Voltage@pInput& (0+255),b
  3191  010E48  0E00               	movlw	high _ADC_AN0
  3192  010E4A  0100               	movlb	0	; () banked
  3193  010E4C  6FA1               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  3194  010E4E  EC40  F09D         	call	_ADC_Voltage	;wreg free
  3195  010E52  C0A0  F3F2         	movff	?_ADC_Voltage,_mode4$15574
  3196  010E56  C0A1  F3F3         	movff	?_ADC_Voltage+1,_mode4$15574+1
  3197  010E5A  C0A2  F3F4         	movff	?_ADC_Voltage+2,_mode4$15574+2
  3198  010E5E  C0A3  F3F5         	movff	?_ADC_Voltage+3,_mode4$15574+3
  3199                           
  3200                           ;main.c: 281: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3201  010E62  C3F2  F072         	movff	_mode4$15574,___fldiv@a
  3202  010E66  C3F3  F073         	movff	_mode4$15574+1,___fldiv@a+1
  3203  010E6A  C3F4  F074         	movff	_mode4$15574+2,___fldiv@a+2
  3204  010E6E  C3F5  F075         	movff	_mode4$15574+3,___fldiv@a+3
  3205  010E72  0E00               	movlw	0
  3206  010E74  0100               	movlb	0	; () banked
  3207  010E76  6F6E               	movwf	___fldiv@b& (0+255),b
  3208  010E78  0E00               	movlw	0
  3209  010E7A  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
  3210  010E7C  0E6C               	movlw	108
  3211  010E7E  6F70               	movwf	(___fldiv@b+2)& (0+255),b
  3212  010E80  0E42               	movlw	66
  3213  010E82  6F71               	movwf	(___fldiv@b+3)& (0+255),b
  3214  010E84  EC53  F088         	call	___fldiv	;wreg free
  3215  010E88  C06E  F0B2         	movff	?___fldiv,___fltol@f1
  3216  010E8C  C06F  F0B3         	movff	?___fldiv+1,___fltol@f1+1
  3217  010E90  C070  F0B4         	movff	?___fldiv+2,___fltol@f1+2
  3218  010E94  C071  F0B5         	movff	?___fldiv+3,___fltol@f1+3
  3219  010E98  EC56  F09B         	call	___fltol	;wreg free
  3220  010E9C  C0B2  F0C0         	movff	?___fltol,_IRValue
  3221  010EA0  C0B3  F0C1         	movff	?___fltol+1,_IRValue+1
  3222                           
  3223                           ;main.c: 282: if (MXK_SwitchTo(eMXK_HMI)) {
  3224  010EA4  0E01               	movlw	1
  3225  010EA6  EC4E  F0AE         	call	_MXK_SwitchTo
  3226  010EAA  0900               	iorlw	0
  3227  010EAC  B4D8               	btfsc	status,2,c
  3228  010EAE  D00E               	goto	l2365
  3229                           
  3230                           ;main.c: 283: HMI_SetNumber(IRValue);
  3231  010EB0  C0C0  F076         	movff	_IRValue,HMI_SetNumber@pInput
  3232  010EB4  C0C1  F077         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  3233  010EB8  EC8C  F0B0         	call	_HMI_SetNumber	;wreg free
  3234                           
  3235                           ;main.c: 284: HMI_Render();
  3236  010EBC  ECAF  F0AE         	call	_HMI_Render	;wreg free
  3237                           
  3238                           ;main.c: 285: if (MXK_Release())
  3239  010EC0  EC91  F0B1         	call	_MXK_Release	;wreg free
  3240  010EC4  0900               	iorlw	0
  3241  010EC6  A4D8               	btfss	status,2,c
  3242                           
  3243                           ;main.c: 286: MXK_Dequeue();
  3244  010EC8  ECCE  F0AE         	call	_MXK_Dequeue	;wreg free
  3245  010ECC                     l2365:
  3246                           
  3247                           ;main.c: 287: }
  3248                           ;main.c: 288: if (IRValue < MinDist) {
  3249  010ECC  0100               	movlb	0	; () banked
  3250  010ECE  51FB               	movf	_MinDist& (0+255),w,b
  3251  010ED0  0100               	movlb	0	; () banked
  3252  010ED2  5DC0               	subwf	_IRValue& (0+255),w,b
  3253  010ED4  0100               	movlb	0	; () banked
  3254  010ED6  51C1               	movf	(_IRValue+1)& (0+255),w,b
  3255  010ED8  0A80               	xorlw	128
  3256  010EDA  0103               	movlb	3	; () banked
  3257  010EDC  6FF1               	movwf	??_mode4& (0+255),b
  3258  010EDE  0100               	movlb	0	; () banked
  3259  010EE0  51FC               	movf	(_MinDist+1)& (0+255),w,b
  3260  010EE2  0A80               	xorlw	128
  3261  010EE4  0103               	movlb	3	; () banked
  3262  010EE6  59F1               	subwfb	??_mode4& (0+255),w,b
  3263  010EE8  B0D8               	btfsc	status,0,c
  3264  010EEA  D008               	goto	l2366
  3265                           
  3266                           ; BSR set to: 3
  3267                           ;main.c: 289: MinDist = IRValue;
  3268  010EEC  C0C0  F0FB         	movff	_IRValue,_MinDist
  3269  010EF0  C0C1  F0FC         	movff	_IRValue+1,_MinDist+1
  3270                           
  3271                           ;main.c: 290: Stepstomin = StepRotate;
  3272  010EF4  C0C4  F0C2         	movff	_StepRotate,_Stepstomin
  3273  010EF8  C0C5  F0C3         	movff	_StepRotate+1,_Stepstomin+1
  3274  010EFC                     l2366:
  3275                           
  3276                           ; BSR set to: 3
  3277                           ;main.c: 291: }
  3278                           ;main.c: 292: if (MXK_SwitchTo(eMXK_Motor)) {
  3279                           
  3280                           ; BSR set to: 3
  3281  010EFC  0E08               	movlw	8
  3282  010EFE  EC4E  F0AE         	call	_MXK_SwitchTo
  3283  010F02  0900               	iorlw	0
  3284  010F04  B4D8               	btfsc	status,2,c
  3285  010F06  D01F               	goto	l2368
  3286                           
  3287                           ;main.c: 293: Motor_Speed(&Stepper, (50));
  3288  010F08  0EC8               	movlw	low _Stepper
  3289  010F0A  0100               	movlb	0	; () banked
  3290  010F0C  6F7B               	movwf	Motor_Speed@pMotor& (0+255),b
  3291  010F0E  0E03               	movlw	high _Stepper
  3292  010F10  0100               	movlb	0	; () banked
  3293  010F12  6F7C               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  3294  010F14  0E00               	movlw	0
  3295  010F16  0100               	movlb	0	; () banked
  3296  010F18  6F7E               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  3297  010F1A  0E32               	movlw	50
  3298  010F1C  6F7D               	movwf	Motor_Speed@pFrequency& (0+255),b
  3299  010F1E  EC77  F0B0         	call	_Motor_Speed	;wreg free
  3300                           
  3301                           ;main.c: 294: Motor_Move(&Stepper, -1);
  3302  010F22  0EC8               	movlw	low _Stepper
  3303  010F24  0100               	movlb	0	; () banked
  3304  010F26  6F63               	movwf	Motor_Move@pMotor& (0+255),b
  3305  010F28  0E03               	movlw	high _Stepper
  3306  010F2A  0100               	movlb	0	; () banked
  3307  010F2C  6F64               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  3308  010F2E  0EFF               	movlw	255
  3309  010F30  0100               	movlb	0	; () banked
  3310  010F32  6F66               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  3311  010F34  6965               	setf	Motor_Move@pDelta& (0+255),b
  3312  010F36  EC66  F0AF         	call	_Motor_Move	;wreg free
  3313                           
  3314                           ;main.c: 295: if (MXK_Release())
  3315  010F3A  EC91  F0B1         	call	_MXK_Release	;wreg free
  3316  010F3E  0900               	iorlw	0
  3317  010F40  A4D8               	btfss	status,2,c
  3318                           
  3319                           ;main.c: 296: MXK_Dequeue();
  3320  010F42  ECCE  F0AE         	call	_MXK_Dequeue	;wreg free
  3321  010F46                     l2368:
  3322                           
  3323                           ;main.c: 297: }
  3324                           ;main.c: 298: TimerX = 10;
  3325  010F46  0E00               	movlw	0
  3326  010F48  0100               	movlb	0	; () banked
  3327  010F4A  6FFA               	movwf	(_TimerX+1)& (0+255),b
  3328  010F4C  0E0A               	movlw	10
  3329  010F4E  6FF9               	movwf	_TimerX& (0+255),b
  3330                           
  3331                           ; BSR set to: 0
  3332                           ;main.c: 299: if (TimerX > 0) {
  3333  010F50  0100               	movlb	0	; () banked
  3334  010F52  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  3335  010F54  D063               	goto	u13850
  3336  010F56  0100               	movlb	0	; () banked
  3337  010F58  51FA               	movf	(_TimerX+1)& (0+255),w,b
  3338  010F5A  E156               	bnz	l16417
  3339  010F5C  0100               	movlb	0	; () banked
  3340  010F5E  05F9               	decf	_TimerX& (0+255),w,b
  3341  010F60  B0D8               	btfsc	status,0,c
  3342  010F62  D052               	goto	l2370
  3343  010F64  D05B               	goto	u13850
  3344  010F66                     l16399:
  3345                           
  3346                           ; BSR set to: 0
  3347                           ;main.c: 301: ADC_Start(&ADC_AN0);
  3348  010F66  0EF4               	movlw	low _ADC_AN0
  3349  010F68  0100               	movlb	0	; () banked
  3350  010F6A  6F62               	movwf	ADC_Start@pInput& (0+255),b
  3351  010F6C  0E00               	movlw	high _ADC_AN0
  3352  010F6E  0100               	movlb	0	; () banked
  3353  010F70  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
  3354  010F72  ECC0  F0A6         	call	_ADC_Start	;wreg free
  3355                           
  3356                           ;main.c: 302: if (MXK_SwitchTo(eMXK_HMI)) {
  3357  010F76  0E01               	movlw	1
  3358  010F78  EC4E  F0AE         	call	_MXK_SwitchTo
  3359  010F7C  0900               	iorlw	0
  3360  010F7E  B4D8               	btfsc	status,2,c
  3361  010F80  D00E               	goto	l2373
  3362                           
  3363                           ;main.c: 303: HMI_SetNumber(IRValue);
  3364  010F82  C0C0  F076         	movff	_IRValue,HMI_SetNumber@pInput
  3365  010F86  C0C1  F077         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  3366  010F8A  EC8C  F0B0         	call	_HMI_SetNumber	;wreg free
  3367                           
  3368                           ;main.c: 304: HMI_Render();
  3369  010F8E  ECAF  F0AE         	call	_HMI_Render	;wreg free
  3370                           
  3371                           ;main.c: 305: if (MXK_Release())
  3372  010F92  EC91  F0B1         	call	_MXK_Release	;wreg free
  3373  010F96  0900               	iorlw	0
  3374  010F98  A4D8               	btfss	status,2,c
  3375                           
  3376                           ;main.c: 306: MXK_Dequeue();
  3377  010F9A  ECCE  F0AE         	call	_MXK_Dequeue	;wreg free
  3378  010F9E                     l2373:
  3379                           
  3380                           ;main.c: 307: }
  3381                           ;main.c: 308: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3382  010F9E  0EF4               	movlw	low _ADC_AN0
  3383  010FA0  0100               	movlb	0	; () banked
  3384  010FA2  6FA0               	movwf	ADC_Voltage@pInput& (0+255),b
  3385  010FA4  0E00               	movlw	high _ADC_AN0
  3386  010FA6  0100               	movlb	0	; () banked
  3387  010FA8  6FA1               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  3388  010FAA  EC40  F09D         	call	_ADC_Voltage	;wreg free
  3389  010FAE  C0A0  F3F2         	movff	?_ADC_Voltage,_mode4$15574
  3390  010FB2  C0A1  F3F3         	movff	?_ADC_Voltage+1,_mode4$15574+1
  3391  010FB6  C0A2  F3F4         	movff	?_ADC_Voltage+2,_mode4$15574+2
  3392  010FBA  C0A3  F3F5         	movff	?_ADC_Voltage+3,_mode4$15574+3
  3393                           
  3394                           ;main.c: 307: }
  3395                           ;main.c: 308: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3396  010FBE  C3F2  F072         	movff	_mode4$15574,___fldiv@a
  3397  010FC2  C3F3  F073         	movff	_mode4$15574+1,___fldiv@a+1
  3398  010FC6  C3F4  F074         	movff	_mode4$15574+2,___fldiv@a+2
  3399  010FCA  C3F5  F075         	movff	_mode4$15574+3,___fldiv@a+3
  3400  010FCE  0E00               	movlw	0
  3401  010FD0  0100               	movlb	0	; () banked
  3402  010FD2  6F6E               	movwf	___fldiv@b& (0+255),b
  3403  010FD4  0E00               	movlw	0
  3404  010FD6  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
  3405  010FD8  0E6C               	movlw	108
  3406  010FDA  6F70               	movwf	(___fldiv@b+2)& (0+255),b
  3407  010FDC  0E42               	movlw	66
  3408  010FDE  6F71               	movwf	(___fldiv@b+3)& (0+255),b
  3409  010FE0  EC53  F088         	call	___fldiv	;wreg free
  3410  010FE4  C06E  F0B2         	movff	?___fldiv,___fltol@f1
  3411  010FE8  C06F  F0B3         	movff	?___fldiv+1,___fltol@f1+1
  3412  010FEC  C070  F0B4         	movff	?___fldiv+2,___fltol@f1+2
  3413  010FF0  C071  F0B5         	movff	?___fldiv+3,___fltol@f1+3
  3414  010FF4  EC56  F09B         	call	___fltol	;wreg free
  3415  010FF8  C0B2  F0C0         	movff	?___fltol,_IRValue
  3416  010FFC  C0B3  F0C1         	movff	?___fltol+1,_IRValue+1
  3417                           
  3418                           ;main.c: 309: TimerX--;
  3419  011000  0100               	movlb	0	; () banked
  3420  011002  07F9               	decf	_TimerX& (0+255),f,b
  3421  011004  A0D8               	btfss	status,0,c
  3422  011006  07FA               	decf	(_TimerX+1)& (0+255),f,b
  3423  011008                     l2370:
  3424  011008                     l16417:
  3425                           
  3426                           ; BSR set to: 0
  3427  011008  0100               	movlb	0	; () banked
  3428  01100A  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  3429  01100C  D007               	goto	u13850
  3430  01100E  0100               	movlb	0	; () banked
  3431  011010  51FA               	movf	(_TimerX+1)& (0+255),w,b
  3432  011012  E1A9               	bnz	l16399
  3433  011014  0100               	movlb	0	; () banked
  3434  011016  05F9               	decf	_TimerX& (0+255),w,b
  3435  011018  B0D8               	btfsc	status,0,c
  3436  01101A  D7A5               	goto	l2371
  3437  01101C                     u13850:
  3438                           
  3439                           ; BSR set to: 0
  3440                           
  3441                           ; BSR set to: 0
  3442                           
  3443                           ; BSR set to: 0
  3444                           
  3445                           ; BSR set to: 0
  3446  01101C  0100               	movlb	0	; () banked
  3447  01101E  BFC5               	btfsc	(_StepRotate+1)& (0+255),7,b
  3448  011020  D705               	goto	l2363
  3449  011022  0E90               	movlw	144
  3450  011024  0100               	movlb	0	; () banked
  3451  011026  5DC4               	subwf	_StepRotate& (0+255),w,b
  3452  011028  0E01               	movlw	1
  3453  01102A  0100               	movlb	0	; () banked
  3454  01102C  59C5               	subwfb	(_StepRotate+1)& (0+255),w,b
  3455  01102E  A0D8               	btfss	status,0,c
  3456  011030  D6FD               	goto	l2363
  3457                           
  3458                           ; BSR set to: 0
  3459                           ;main.c: 310: }
  3460                           ;main.c: 311: }
  3461                           ;main.c: 312: }
  3462                           ;main.c: 313: irobot_rotate_to((INT16) stepsToMinDegrees - 90, 200);
  3463                           
  3464                           ; BSR set to: 0
  3465  011032  C300  F0B2         	movff	_stepsToMinDegrees,___fltol@f1
  3466  011036  C301  F0B3         	movff	_stepsToMinDegrees+1,___fltol@f1+1
  3467  01103A  C302  F0B4         	movff	_stepsToMinDegrees+2,___fltol@f1+2
  3468  01103E  C303  F0B5         	movff	_stepsToMinDegrees+3,___fltol@f1+3
  3469  011042  EC56  F09B         	call	___fltol	;wreg free
  3470  011046  0EA6               	movlw	166
  3471  011048  0100               	movlb	0	; () banked
  3472  01104A  25B2               	addwf	?___fltol& (0+255),w,b
  3473  01104C  0101               	movlb	1	; () banked
  3474  01104E  6F02               	movwf	irobot_rotate_to@rotateToAngle& (0+255),b
  3475  011050  0EFF               	movlw	255
  3476  011052  0100               	movlb	0	; () banked
  3477  011054  21B3               	addwfc	(?___fltol+1)& (0+255),w,b
  3478  011056  0101               	movlb	1	; () banked
  3479  011058  6F03               	movwf	(irobot_rotate_to@rotateToAngle+1)& (0+255),b
  3480  01105A  0E00               	movlw	0
  3481  01105C  0101               	movlb	1	; () banked
  3482  01105E  6F05               	movwf	(irobot_rotate_to@rotateSpeed+1)& (0+255),b
  3483  011060  0EC8               	movlw	200
  3484  011062  6F04               	movwf	irobot_rotate_to@rotateSpeed& (0+255),b
  3485  011064  EC62  F0B0         	call	_irobot_rotate_to	;wreg free
  3486                           
  3487                           ;main.c: 314: while (!iRBumpLeft && !iRBumpRight && !iRDropRight && !iRDropLeft) {
  3488  011068  D007               	goto	l2376
  3489  01106A                     
  3490                           ;main.c: 315: irobot_move_straight(5);
  3491  01106A  0E00               	movlw	0
  3492  01106C  0100               	movlb	0	; () banked
  3493  01106E  6F7A               	movwf	(irobot_move_straight@straightSpeed+1)& (0+255),b
  3494  011070  0E05               	movlw	5
  3495  011072  6F79               	movwf	irobot_move_straight@straightSpeed& (0+255),b
  3496  011074  ECBA  F0B1         	call	_irobot_move_straight	;wreg free
  3497  011078                     l2376:
  3498  011078  0100               	movlb	0	; () banked
  3499  01107A  51D6               	movf	_iRBumpLeft& (0+255),w,b
  3500  01107C  A4D8               	btfss	status,2,c
  3501  01107E  D00C               	goto	u13900
  3502                           
  3503                           ; BSR set to: 0
  3504  011080  0100               	movlb	0	; () banked
  3505  011082  51D7               	movf	_iRBumpRight& (0+255),w,b
  3506  011084  A4D8               	btfss	status,2,c
  3507  011086  D008               	goto	u13900
  3508                           
  3509                           ; BSR set to: 0
  3510  011088  0100               	movlb	0	; () banked
  3511  01108A  51D5               	movf	_iRDropRight& (0+255),w,b
  3512  01108C  A4D8               	btfss	status,2,c
  3513  01108E  D004               	goto	u13900
  3514                           
  3515                           ; BSR set to: 0
  3516  011090  0100               	movlb	0	; () banked
  3517  011092  51D4               	movf	_iRDropLeft& (0+255),w,b
  3518  011094  B4D8               	btfsc	status,2,c
  3519  011096  D7E9               	goto	l2377
  3520  011098                     u13900:
  3521                           
  3522                           ; BSR set to: 0
  3523                           ;main.c: 316: }
  3524                           ;main.c: 317: irobot_song_play(0);
  3525                           
  3526                           ; BSR set to: 0
  3527                           
  3528                           ; BSR set to: 0
  3529  011098  0E00               	movlw	0
  3530  01109A  EC1A  F0B2         	call	_irobot_song_play
  3531                           
  3532                           ;main.c: 318: irobot_stop_motion(0);
  3533  01109E  0E00               	movlw	0
  3534  0110A0  ECC3  F0AD         	call	_irobot_stop_motion
  3535  0110A4  0012               	return		;funcret
  3536  0110A6                     __end_of_mode4:
  3537                           	opt stack 0
  3538                           tblptru	equ	0xFF8
  3539                           tblptrh	equ	0xFF7
  3540                           tblptrl	equ	0xFF6
  3541                           tablat	equ	0xFF5
  3542                           postinc0	equ	0xFEE
  3543                           wreg	equ	0xFE8
  3544                           postdec1	equ	0xFE5
  3545                           fsr1h	equ	0xFE2
  3546                           fsr1l	equ	0xFE1
  3547                           status	equ	0xFD8
  3548                           
  3549 ;; *************** function _irobot_rotate_to *****************
  3550 ;; Defined at:
  3551 ;;		line 335 in file "Library/iRobotSerial.c"
  3552 ;; Parameters:    Size  Location     Type
  3553 ;;  rotateToAngl    2    2[BANK1 ] short 
  3554 ;;  rotateSpeed     2    4[BANK1 ] short 
  3555 ;; Auto vars:     Size  Location     Type
  3556 ;;		None
  3557 ;; Return value:  Size  Location     Type
  3558 ;;                  1    wreg      void 
  3559 ;; Registers used:
  3560 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3561 ;; Tracked objects:
  3562 ;;		On entry : 0/0
  3563 ;;		On exit  : 0/0
  3564 ;;		Unchanged: 0/0
  3565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3566 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3567 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3569 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3570 ;;Total ram usage:        4 bytes
  3571 ;; Hardware stack levels used:    1
  3572 ;; Hardware stack levels required when called:   10
  3573 ;; This function calls:
  3574 ;;		_irobot_angle_wait
  3575 ;;		_irobot_rotate
  3576 ;;		_irobot_stop_motion
  3577 ;; This function is called by:
  3578 ;;		_mode4
  3579 ;; This function uses a non-reentrant model
  3580 ;;
  3581                           
  3582                           	psect	text2
  3583  0160C4                     __ptext2:
  3584                           	opt stack 0
  3585  0160C4                     _irobot_rotate_to:
  3586                           	opt stack 19
  3587                           
  3588                           ;iRobotSerial.c: 336: irobot_rotate(1, rotateToAngle, rotateSpeed);
  3589                           
  3590                           ;incstack = 0
  3591  0160C4  C102  F079         	movff	irobot_rotate_to@rotateToAngle,irobot_rotate@rotateAngle
  3592  0160C8  C103  F07A         	movff	irobot_rotate_to@rotateToAngle+1,irobot_rotate@rotateAngle+1
  3593  0160CC  C104  F07B         	movff	irobot_rotate_to@rotateSpeed,irobot_rotate@rotateSpeed
  3594  0160D0  C105  F07C         	movff	irobot_rotate_to@rotateSpeed+1,irobot_rotate@rotateSpeed+1
  3595  0160D4  0E01               	movlw	1
  3596  0160D6  ECC6  F0AA         	call	_irobot_rotate
  3597                           
  3598                           ;iRobotSerial.c: 337: irobot_angle_wait(rotateToAngle);
  3599  0160DA  C102  F070         	movff	irobot_rotate_to@rotateToAngle,irobot_angle_wait@angleWait
  3600  0160DE  C103  F071         	movff	irobot_rotate_to@rotateToAngle+1,irobot_angle_wait@angleWait+1
  3601  0160E2  ECA0  F0AD         	call	_irobot_angle_wait	;wreg free
  3602                           
  3603                           ;iRobotSerial.c: 338: irobot_stop_motion(1);
  3604  0160E6  0E01               	movlw	1
  3605  0160E8  ECC3  F0AD         	call	_irobot_stop_motion
  3606  0160EC  0012               	return		;funcret
  3607  0160EE                     __end_of_irobot_rotate_to:
  3608                           	opt stack 0
  3609                           tblptru	equ	0xFF8
  3610                           tblptrh	equ	0xFF7
  3611                           tblptrl	equ	0xFF6
  3612                           tablat	equ	0xFF5
  3613                           postinc0	equ	0xFEE
  3614                           wreg	equ	0xFE8
  3615                           postdec1	equ	0xFE5
  3616                           fsr1h	equ	0xFE2
  3617                           fsr1l	equ	0xFE1
  3618                           status	equ	0xFD8
  3619                           
  3620 ;; *************** function _irobot_rotate *****************
  3621 ;; Defined at:
  3622 ;;		line 280 in file "Library/iRobotSerial.c"
  3623 ;; Parameters:    Size  Location     Type
  3624 ;;  isScript        1    wreg     unsigned char 
  3625 ;;  rotateAngle     2   25[BANK0 ] short 
  3626 ;;  rotateSpeed     2   27[BANK0 ] short 
  3627 ;; Auto vars:     Size  Location     Type
  3628 ;;  isScript        1   29[BANK0 ] unsigned char 
  3629 ;; Return value:  Size  Location     Type
  3630 ;;                  1    wreg      void 
  3631 ;; Registers used:
  3632 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3633 ;; Tracked objects:
  3634 ;;		On entry : 0/0
  3635 ;;		On exit  : 0/0
  3636 ;;		Unchanged: 0/0
  3637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3638 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3639 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3641 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3642 ;;Total ram usage:        5 bytes
  3643 ;; Hardware stack levels used:    1
  3644 ;; Hardware stack levels required when called:    9
  3645 ;; This function calls:
  3646 ;;		_irobot_move
  3647 ;; This function is called by:
  3648 ;;		_irobot_rotate_to
  3649 ;; This function uses a non-reentrant model
  3650 ;;
  3651                           
  3652                           	psect	text3
  3653  01558C                     __ptext3:
  3654                           	opt stack 0
  3655  01558C                     _irobot_rotate:
  3656                           	opt stack 19
  3657                           
  3658                           ;incstack = 0
  3659                           ;irobot_rotate@isScript stored from wreg
  3660  01558C  0100               	movlb	0	; () banked
  3661  01558E  6F7D               	movwf	irobot_rotate@isScript& (0+255),b
  3662                           
  3663                           ;iRobotSerial.c: 281: (rotateAngle > 0) ? (rotateAngle = iR_CONST_CCW) : (rotateAngle = 
      +                          iR_CONST_CW);
  3664  015590  0100               	movlb	0	; () banked
  3665  015592  BF7A               	btfsc	(irobot_rotate@rotateAngle+1)& (0+255),7,b
  3666  015594  D00D               	goto	l2152
  3667  015596  0100               	movlb	0	; () banked
  3668  015598  517A               	movf	(irobot_rotate@rotateAngle+1)& (0+255),w,b
  3669  01559A  E104               	bnz	u10180
  3670  01559C  0100               	movlb	0	; () banked
  3671  01559E  0579               	decf	irobot_rotate@rotateAngle& (0+255),w,b
  3672  0155A0  A0D8               	btfss	status,0,c
  3673  0155A2  D006               	goto	l2152
  3674  0155A4                     u10180:
  3675                           
  3676                           ; BSR set to: 0
  3677  0155A4  0E00               	movlw	0
  3678  0155A6  0100               	movlb	0	; () banked
  3679  0155A8  6F7A               	movwf	(irobot_rotate@rotateAngle+1)& (0+255),b
  3680  0155AA  0E01               	movlw	1
  3681  0155AC  6F79               	movwf	irobot_rotate@rotateAngle& (0+255),b
  3682  0155AE  D003               	goto	l2154
  3683  0155B0                     l2152:
  3684                           
  3685                           ; BSR set to: 0
  3686  0155B0  0100               	movlb	0	; () banked
  3687  0155B2  6979               	setf	irobot_rotate@rotateAngle& (0+255),b
  3688  0155B4  697A               	setf	(irobot_rotate@rotateAngle+1)& (0+255),b
  3689  0155B6                     l2154:
  3690                           
  3691                           ; BSR set to: 0
  3692                           ;iRobotSerial.c: 282: (isScript) ?
  3693                           ;iRobotSerial.c: 283: irobot_move(1, rotateSpeed, rotateAngle) :
  3694                           ;iRobotSerial.c: 284: irobot_move(0, rotateSpeed, rotateAngle);
  3695                           
  3696                           ; BSR set to: 0
  3697  0155B6  0100               	movlb	0	; () banked
  3698  0155B8  517D               	movf	irobot_rotate@isScript& (0+255),w,b
  3699  0155BA  0100               	movlb	0	; () banked
  3700  0155BC  B4D8               	btfsc	status,2,c
  3701  0155BE  D00C               	goto	l2156
  3702                           
  3703                           ; BSR set to: 0
  3704  0155C0  C07B  F070         	movff	irobot_rotate@rotateSpeed,irobot_move@moveSpeed
  3705  0155C4  C07C  F071         	movff	irobot_rotate@rotateSpeed+1,irobot_move@moveSpeed+1
  3706  0155C8  C079  F072         	movff	irobot_rotate@rotateAngle,irobot_move@moveTurnRadius
  3707  0155CC  C07A  F073         	movff	irobot_rotate@rotateAngle+1,irobot_move@moveTurnRadius+1
  3708  0155D0  0E01               	movlw	1
  3709  0155D2  EC7F  F0A1         	call	_irobot_move
  3710  0155D6  0012               	return	
  3711  0155D8                     l2156:
  3712  0155D8  C07B  F070         	movff	irobot_rotate@rotateSpeed,irobot_move@moveSpeed
  3713  0155DC  C07C  F071         	movff	irobot_rotate@rotateSpeed+1,irobot_move@moveSpeed+1
  3714  0155E0  C079  F072         	movff	irobot_rotate@rotateAngle,irobot_move@moveTurnRadius
  3715  0155E4  C07A  F073         	movff	irobot_rotate@rotateAngle+1,irobot_move@moveTurnRadius+1
  3716  0155E8  0E00               	movlw	0
  3717  0155EA  EC7F  F0A1         	call	_irobot_move
  3718  0155EE  0012               	return	
  3719  0155F0                     __end_of_irobot_rotate:
  3720                           	opt stack 0
  3721                           tblptru	equ	0xFF8
  3722                           tblptrh	equ	0xFF7
  3723                           tblptrl	equ	0xFF6
  3724                           tablat	equ	0xFF5
  3725                           postinc0	equ	0xFEE
  3726                           wreg	equ	0xFE8
  3727                           postdec1	equ	0xFE5
  3728                           fsr1h	equ	0xFE2
  3729                           fsr1l	equ	0xFE1
  3730                           status	equ	0xFD8
  3731                           
  3732 ;; *************** function _irobot_angle_wait *****************
  3733 ;; Defined at:
  3734 ;;		line 204 in file "Library/iRobotSerial.c"
  3735 ;; Parameters:    Size  Location     Type
  3736 ;;  angleWait       2   16[BANK0 ] short 
  3737 ;; Auto vars:     Size  Location     Type
  3738 ;;		None
  3739 ;; Return value:  Size  Location     Type
  3740 ;;                  1    wreg      void 
  3741 ;; Registers used:
  3742 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3743 ;; Tracked objects:
  3744 ;;		On entry : 0/0
  3745 ;;		On exit  : 0/0
  3746 ;;		Unchanged: 0/0
  3747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3748 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3750 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3751 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3752 ;;Total ram usage:        4 bytes
  3753 ;; Hardware stack levels used:    1
  3754 ;; Hardware stack levels required when called:    8
  3755 ;; This function calls:
  3756 ;;		_load_iRScriptStack
  3757 ;;		_twos_complement_of
  3758 ;; This function is called by:
  3759 ;;		_irobot_rotate_to
  3760 ;; This function uses a non-reentrant model
  3761 ;;
  3762                           
  3763                           	psect	text4
  3764  015B40                     __ptext4:
  3765                           	opt stack 0
  3766  015B40                     _irobot_angle_wait:
  3767                           	opt stack 20
  3768                           
  3769                           ;iRobotSerial.c: 205: angleWait = twos_complement_of(angleWait);
  3770                           
  3771                           ;incstack = 0
  3772  015B40  C070  F060         	movff	irobot_angle_wait@angleWait,twos_complement_of@complementValue
  3773  015B44  C071  F061         	movff	irobot_angle_wait@angleWait+1,twos_complement_of@complementValue+1
  3774  015B48  EC2C  F0AE         	call	_twos_complement_of	;wreg free
  3775  015B4C  C060  F070         	movff	?_twos_complement_of,irobot_angle_wait@angleWait
  3776  015B50  C061  F071         	movff	?_twos_complement_of+1,irobot_angle_wait@angleWait+1
  3777                           
  3778                           ;iRobotSerial.c: 207: load_iRScriptStack(3, iR_WAIT_ANGLE,
  3779                           ;iRobotSerial.c: 208: (((angleWait)>>8) & 0xFF), ((angleWait) & 0xFF));
  3780  015B54  0E00               	movlw	0
  3781  015B56  0100               	movlb	0	; () banked
  3782  015B58  6F61               	movwf	(?_load_iRScriptStack+1)& (0+255),b
  3783  015B5A  0E9D               	movlw	157
  3784  015B5C  6F60               	movwf	?_load_iRScriptStack& (0+255),b
  3785  015B5E  C071  F072         	movff	irobot_angle_wait@angleWait+1,??_irobot_angle_wait
  3786  015B62  0100               	movlb	0	; () banked
  3787  015B64  6B73               	clrf	(??_irobot_angle_wait+1)& (0+255),b
  3788  015B66  BF72               	btfsc	??_irobot_angle_wait& (0+255),7,b
  3789  015B68  6973               	setf	(??_irobot_angle_wait+1)& (0+255),b
  3790  015B6A  0100               	movlb	0	; () banked
  3791  015B6C  5172               	movf	??_irobot_angle_wait& (0+255),w,b
  3792  015B6E  0100               	movlb	0	; () banked
  3793  015B70  6F62               	movwf	(?_load_iRScriptStack+2)& (0+255),b
  3794  015B72  6B63               	clrf	(?_load_iRScriptStack+3)& (0+255),b
  3795  015B74  0100               	movlb	0	; () banked
  3796  015B76  5170               	movf	irobot_angle_wait@angleWait& (0+255),w,b
  3797  015B78  0100               	movlb	0	; () banked
  3798  015B7A  6F64               	movwf	(?_load_iRScriptStack+4)& (0+255),b
  3799  015B7C  6B65               	clrf	(?_load_iRScriptStack+5)& (0+255),b
  3800  015B7E  0E03               	movlw	3
  3801  015B80  ECC1  F0A9         	call	_load_iRScriptStack
  3802  015B84  0012               	return		;funcret
  3803  015B86                     __end_of_irobot_angle_wait:
  3804                           	opt stack 0
  3805                           tblptru	equ	0xFF8
  3806                           tblptrh	equ	0xFF7
  3807                           tblptrl	equ	0xFF6
  3808                           tablat	equ	0xFF5
  3809                           postinc0	equ	0xFEE
  3810                           wreg	equ	0xFE8
  3811                           postdec1	equ	0xFE5
  3812                           fsr1h	equ	0xFE2
  3813                           fsr1l	equ	0xFE1
  3814                           status	equ	0xFD8
  3815                           
  3816 ;; *************** function _mode3 *****************
  3817 ;; Defined at:
  3818 ;;		line 243 in file "main.c"
  3819 ;; Parameters:    Size  Location     Type
  3820 ;;		None
  3821 ;; Auto vars:     Size  Location     Type
  3822 ;;		None
  3823 ;; Return value:  Size  Location     Type
  3824 ;;                  1    wreg      void 
  3825 ;; Registers used:
  3826 ;;		None
  3827 ;; Tracked objects:
  3828 ;;		On entry : 0/0
  3829 ;;		On exit  : 0/0
  3830 ;;		Unchanged: 0/0
  3831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3835 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3836 ;;Total ram usage:        0 bytes
  3837 ;; Hardware stack levels used:    1
  3838 ;; Hardware stack levels required when called:    7
  3839 ;; This function calls:
  3840 ;;		Nothing
  3841 ;; This function is called by:
  3842 ;;		_main
  3843 ;; This function uses a non-reentrant model
  3844 ;;
  3845                           
  3846                           	psect	text5
  3847  001404                     __ptext5:
  3848                           	opt stack 0
  3849  001404                     _mode3:
  3850                           	opt stack 23
  3851                           
  3852                           ;incstack = 0
  3853  001404  0012               	return		;funcret
  3854  001406                     __end_of_mode3:
  3855                           	opt stack 0
  3856                           tblptru	equ	0xFF8
  3857                           tblptrh	equ	0xFF7
  3858                           tblptrl	equ	0xFF6
  3859                           tablat	equ	0xFF5
  3860                           postinc0	equ	0xFEE
  3861                           wreg	equ	0xFE8
  3862                           postdec1	equ	0xFE5
  3863                           fsr1h	equ	0xFE2
  3864                           fsr1l	equ	0xFE1
  3865                           status	equ	0xFD8
  3866                           
  3867 ;; *************** function _mode2 *****************
  3868 ;; Defined at:
  3869 ;;		line 205 in file "main.c"
  3870 ;; Parameters:    Size  Location     Type
  3871 ;;		None
  3872 ;; Auto vars:     Size  Location     Type
  3873 ;;  dist            2   44[BANK0 ] int 
  3874 ;; Return value:  Size  Location     Type
  3875 ;;                  1    wreg      void 
  3876 ;; Registers used:
  3877 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3878 ;; Tracked objects:
  3879 ;;		On entry : 0/0
  3880 ;;		On exit  : 0/0
  3881 ;;		Unchanged: 0/0
  3882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3884 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3886 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3887 ;;Total ram usage:        2 bytes
  3888 ;; Hardware stack levels used:    1
  3889 ;; Hardware stack levels required when called:   16
  3890 ;; This function calls:
  3891 ;;		_Console_Render
  3892 ;;		_HMI_Poll
  3893 ;;		_MXK_Dequeue
  3894 ;;		_MXK_Release
  3895 ;;		_MXK_SwitchTo
  3896 ;;		_irobot_move_straight
  3897 ;;		_irobot_song_play
  3898 ;;		_irobot_stop_motion
  3899 ;;		_printf
  3900 ;;		_update_angle
  3901 ;;		_update_bump_and_cliff
  3902 ;;		_update_distance
  3903 ;; This function is called by:
  3904 ;;		_main
  3905 ;; This function uses a non-reentrant model
  3906 ;;
  3907                           
  3908                           	psect	text6
  3909  01344C                     __ptext6:
  3910                           	opt stack 0
  3911  01344C                     _mode2:
  3912                           	opt stack 14
  3913                           
  3914                           ;main.c: 206: update_bump_and_cliff();
  3915                           
  3916                           ;incstack = 0
  3917  01344C  EC49  F0AF         	call	_update_bump_and_cliff	;wreg free
  3918                           
  3919                           ;main.c: 207: update_distance();
  3920  013450  EC2E  F0B2         	call	_update_distance	;wreg free
  3921                           
  3922                           ;main.c: 208: update_angle();
  3923  013454  EC37  F0B2         	call	_update_angle	;wreg free
  3924                           
  3925                           ;main.c: 210: angleTotal += iRAngle;
  3926  013458  0103               	movlb	3	; () banked
  3927  01345A  5127               	movf	_iRAngle& (0+255),w,b
  3928  01345C  0100               	movlb	0	; () banked
  3929  01345E  27C6               	addwf	_angleTotal& (0+255),f,b
  3930  013460  0103               	movlb	3	; () banked
  3931  013462  5128               	movf	(_iRAngle+1)& (0+255),w,b
  3932  013464  0100               	movlb	0	; () banked
  3933  013466  23C7               	addwfc	(_angleTotal+1)& (0+255),f,b
  3934                           
  3935                           ; BSR set to: 0
  3936                           ;main.c: 212: if (iRBumpLeft || iRBumpRight) {
  3937  013468  0100               	movlb	0	; () banked
  3938  01346A  51D6               	movf	_iRBumpLeft& (0+255),w,b
  3939  01346C  A4D8               	btfss	status,2,c
  3940  01346E  D004               	goto	u13670
  3941                           
  3942                           ; BSR set to: 0
  3943  013470  0100               	movlb	0	; () banked
  3944  013472  51D7               	movf	_iRBumpRight& (0+255),w,b
  3945  013474  B4D8               	btfsc	status,2,c
  3946  013476  D006               	goto	l2341
  3947  013478                     u13670:
  3948                           
  3949                           ; BSR set to: 0
  3950                           ;main.c: 213: irobot_song_play(0);
  3951                           
  3952                           ; BSR set to: 0
  3953  013478  0E00               	movlw	0
  3954  01347A  EC1A  F0B2         	call	_irobot_song_play
  3955                           
  3956                           ;main.c: 214: irobot_stop_motion(0);
  3957  01347E  0E00               	movlw	0
  3958  013480  ECC3  F0AD         	call	_irobot_stop_motion
  3959  013484                     l2341:
  3960                           
  3961                           ;main.c: 215: }
  3962                           ;main.c: 216: if (angleTotal > 90) {
  3963  013484  0100               	movlb	0	; () banked
  3964  013486  BFC7               	btfsc	(_angleTotal+1)& (0+255),7,b
  3965  013488  D00B               	goto	l2344
  3966  01348A  0100               	movlb	0	; () banked
  3967  01348C  51C7               	movf	(_angleTotal+1)& (0+255),w,b
  3968  01348E  E105               	bnz	u13680
  3969  013490  0E5B               	movlw	91
  3970  013492  0100               	movlb	0	; () banked
  3971  013494  5DC6               	subwf	_angleTotal& (0+255),w,b
  3972  013496  A0D8               	btfss	status,0,c
  3973  013498  D003               	goto	l2344
  3974  01349A                     u13680:
  3975                           
  3976                           ; BSR set to: 0
  3977                           ;main.c: 217: irobot_stop_motion(0);
  3978  01349A  0E00               	movlw	0
  3979  01349C  ECC3  F0AD         	call	_irobot_stop_motion
  3980  0134A0                     l2344:
  3981                           
  3982                           ;main.c: 218: }
  3983                           ;main.c: 219: HMI_Poll();
  3984  0134A0  EC35  F0A8         	call	_HMI_Poll	;wreg free
  3985                           
  3986                           ;main.c: 220: if (MXK_SwitchTo(eMXK_HMI)) {
  3987  0134A4  0E01               	movlw	1
  3988  0134A6  EC4E  F0AE         	call	_MXK_SwitchTo
  3989  0134AA  0900               	iorlw	0
  3990  0134AC  B4D8               	btfsc	status,2,c
  3991  0134AE  0012               	return	
  3992                           
  3993                           ;main.c: 221: printf("%c", (char)35);
  3994  0134B0  0EFB               	movlw	low STR_1
  3995  0134B2  0100               	movlb	0	; () banked
  3996  0134B4  6F75               	movwf	printf@f& (0+255),b
  3997  0134B6  0EFF               	movlw	high STR_1
  3998  0134B8  0100               	movlb	0	; () banked
  3999  0134BA  6F76               	movwf	(printf@f+1)& (0+255),b
  4000  0134BC  0E00               	movlw	0
  4001  0134BE  0100               	movlb	0	; () banked
  4002  0134C0  6F78               	movwf	(?_printf+3)& (0+255),b
  4003  0134C2  0E23               	movlw	35
  4004  0134C4  6F77               	movwf	(?_printf+2)& (0+255),b
  4005  0134C6  EC7E  F092         	call	_printf	;wreg free
  4006                           
  4007                           ;main.c: 222: printf("Total Distance:%u\nLeft Bump:%u\nRight Bump:%u\n", distanceTotal, 
      +                          iRBumpLeft, iRBumpRight);
  4008  0134CA  0E9D               	movlw	low STR_2
  4009  0134CC  0100               	movlb	0	; () banked
  4010  0134CE  6F75               	movwf	printf@f& (0+255),b
  4011  0134D0  0EFF               	movlw	high STR_2
  4012  0134D2  0100               	movlb	0	; () banked
  4013  0134D4  6F76               	movwf	(printf@f+1)& (0+255),b
  4014  0134D6  C0C8  F077         	movff	_distanceTotal,?_printf+2
  4015  0134DA  C0C9  F078         	movff	_distanceTotal+1,?_printf+3
  4016  0134DE  C0D6  F079         	movff	_iRBumpLeft,?_printf+4
  4017  0134E2  0100               	movlb	0	; () banked
  4018  0134E4  6B7A               	clrf	(?_printf+5)& (0+255),b
  4019  0134E6  C0D7  F07B         	movff	_iRBumpRight,?_printf+6
  4020  0134EA  0100               	movlb	0	; () banked
  4021  0134EC  6B7C               	clrf	(?_printf+7)& (0+255),b
  4022  0134EE  EC7E  F092         	call	_printf	;wreg free
  4023                           
  4024                           ;main.c: 223: Console_Render();
  4025  0134F2  EC92  F08F         	call	_Console_Render	;wreg free
  4026                           
  4027                           ;main.c: 225: int dist = 0;
  4028  0134F6  0E00               	movlw	0
  4029  0134F8  0100               	movlb	0	; () banked
  4030  0134FA  6F8D               	movwf	(mode2@dist+1)& (0+255),b
  4031  0134FC  0E00               	movlw	0
  4032  0134FE  6F8C               	movwf	mode2@dist& (0+255),b
  4033                           
  4034                           ; BSR set to: 0
  4035                           ;main.c: 226: irobot_move_straight(200);
  4036  013500  0E00               	movlw	0
  4037  013502  0100               	movlb	0	; () banked
  4038  013504  6F7A               	movwf	(irobot_move_straight@straightSpeed+1)& (0+255),b
  4039  013506  0EC8               	movlw	200
  4040  013508  6F79               	movwf	irobot_move_straight@straightSpeed& (0+255),b
  4041  01350A  ECBA  F0B1         	call	_irobot_move_straight	;wreg free
  4042                           
  4043                           ;main.c: 227: while (dist < 5000) {
  4044  01350E  D025               	goto	l2346
  4045  013510                     
  4046                           ;main.c: 228: update_distance();
  4047  013510  EC2E  F0B2         	call	_update_distance	;wreg free
  4048                           
  4049                           ;main.c: 229: dist += iRDistance;
  4050  013514  0103               	movlb	3	; () banked
  4051  013516  5129               	movf	_iRDistance& (0+255),w,b
  4052  013518  0100               	movlb	0	; () banked
  4053  01351A  278C               	addwf	mode2@dist& (0+255),f,b
  4054  01351C  0103               	movlb	3	; () banked
  4055  01351E  512A               	movf	(_iRDistance+1)& (0+255),w,b
  4056  013520  0100               	movlb	0	; () banked
  4057  013522  238D               	addwfc	(mode2@dist+1)& (0+255),f,b
  4058                           
  4059                           ; BSR set to: 0
  4060                           ;main.c: 230: printf("%c", (char)35);
  4061  013524  0EFB               	movlw	low STR_1
  4062  013526  0100               	movlb	0	; () banked
  4063  013528  6F75               	movwf	printf@f& (0+255),b
  4064  01352A  0EFF               	movlw	high STR_1
  4065  01352C  0100               	movlb	0	; () banked
  4066  01352E  6F76               	movwf	(printf@f+1)& (0+255),b
  4067  013530  0E00               	movlw	0
  4068  013532  0100               	movlb	0	; () banked
  4069  013534  6F78               	movwf	(?_printf+3)& (0+255),b
  4070  013536  0E23               	movlw	35
  4071  013538  6F77               	movwf	(?_printf+2)& (0+255),b
  4072  01353A  EC7E  F092         	call	_printf	;wreg free
  4073                           
  4074                           ;main.c: 231: printf("Distance: %d\n", dist);
  4075  01353E  0EED               	movlw	low STR_6
  4076  013540  0100               	movlb	0	; () banked
  4077  013542  6F75               	movwf	printf@f& (0+255),b
  4078  013544  0EFF               	movlw	high STR_6
  4079  013546  0100               	movlb	0	; () banked
  4080  013548  6F76               	movwf	(printf@f+1)& (0+255),b
  4081  01354A  C08C  F077         	movff	mode2@dist,?_printf+2
  4082  01354E  C08D  F078         	movff	mode2@dist+1,?_printf+3
  4083  013552  EC7E  F092         	call	_printf	;wreg free
  4084                           
  4085                           ;main.c: 232: Console_Render();
  4086  013556  EC92  F08F         	call	_Console_Render	;wreg free
  4087  01355A                     l2346:
  4088  01355A  0100               	movlb	0	; () banked
  4089  01355C  BF8D               	btfsc	(mode2@dist+1)& (0+255),7,b
  4090  01355E  D7D8               	goto	l2347
  4091  013560  0E88               	movlw	136
  4092  013562  0100               	movlb	0	; () banked
  4093  013564  5D8C               	subwf	mode2@dist& (0+255),w,b
  4094  013566  0E13               	movlw	19
  4095  013568  0100               	movlb	0	; () banked
  4096  01356A  598D               	subwfb	(mode2@dist+1)& (0+255),w,b
  4097  01356C  A0D8               	btfss	status,0,c
  4098  01356E  D7D0               	goto	l2347
  4099                           
  4100                           ; BSR set to: 0
  4101                           ;main.c: 233: }
  4102                           ;main.c: 234: irobot_stop_motion(0);
  4103                           
  4104                           ; BSR set to: 0
  4105  013570  0E00               	movlw	0
  4106  013572  ECC3  F0AD         	call	_irobot_stop_motion
  4107                           
  4108                           ;main.c: 236: if (MXK_Release())
  4109  013576  EC91  F0B1         	call	_MXK_Release	;wreg free
  4110  01357A  0900               	iorlw	0
  4111  01357C  B4D8               	btfsc	status,2,c
  4112  01357E  0012               	return	
  4113                           
  4114                           ;main.c: 237: MXK_Dequeue();
  4115  013580  ECCE  F0AE         	call	_MXK_Dequeue	;wreg free
  4116  013584  0012               	return	
  4117  013586                     __end_of_mode2:
  4118                           	opt stack 0
  4119                           tblptru	equ	0xFF8
  4120                           tblptrh	equ	0xFF7
  4121                           tblptrl	equ	0xFF6
  4122                           tablat	equ	0xFF5
  4123                           postinc0	equ	0xFEE
  4124                           wreg	equ	0xFE8
  4125                           postdec1	equ	0xFE5
  4126                           fsr1h	equ	0xFE2
  4127                           fsr1l	equ	0xFE1
  4128                           status	equ	0xFD8
  4129                           
  4130 ;; *************** function _irobot_move_straight *****************
  4131 ;; Defined at:
  4132 ;;		line 303 in file "Library/iRobotSerial.c"
  4133 ;; Parameters:    Size  Location     Type
  4134 ;;  straightSpee    2   25[BANK0 ] short 
  4135 ;; Auto vars:     Size  Location     Type
  4136 ;;		None
  4137 ;; Return value:  Size  Location     Type
  4138 ;;                  1    wreg      void 
  4139 ;; Registers used:
  4140 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4141 ;; Tracked objects:
  4142 ;;		On entry : 0/0
  4143 ;;		On exit  : 0/0
  4144 ;;		Unchanged: 0/0
  4145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4146 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4149 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4150 ;;Total ram usage:        2 bytes
  4151 ;; Hardware stack levels used:    1
  4152 ;; Hardware stack levels required when called:    9
  4153 ;; This function calls:
  4154 ;;		_irobot_move
  4155 ;; This function is called by:
  4156 ;;		_mode2
  4157 ;;		_mode4
  4158 ;; This function uses a non-reentrant model
  4159 ;;
  4160                           
  4161                           	psect	text7
  4162  016374                     __ptext7:
  4163                           	opt stack 0
  4164  016374                     _irobot_move_straight:
  4165                           	opt stack 20
  4166                           
  4167                           ;iRobotSerial.c: 304: irobot_move(0, straightSpeed, iR_CONST_STRAIGHT_2);
  4168                           
  4169                           ;incstack = 0
  4170  016374  C079  F070         	movff	irobot_move_straight@straightSpeed,irobot_move@moveSpeed
  4171  016378  C07A  F071         	movff	irobot_move_straight@straightSpeed+1,irobot_move@moveSpeed+1
  4172  01637C  0E7F               	movlw	127
  4173  01637E  0100               	movlb	0	; () banked
  4174  016380  6F73               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  4175  016382  6972               	setf	irobot_move@moveTurnRadius& (0+255),b
  4176  016384  0E00               	movlw	0
  4177  016386  EC7F  F0A1         	call	_irobot_move
  4178  01638A  0012               	return		;funcret
  4179  01638C                     __end_of_irobot_move_straight:
  4180                           	opt stack 0
  4181                           tblptru	equ	0xFF8
  4182                           tblptrh	equ	0xFF7
  4183                           tblptrl	equ	0xFF6
  4184                           tablat	equ	0xFF5
  4185                           postinc0	equ	0xFEE
  4186                           wreg	equ	0xFE8
  4187                           postdec1	equ	0xFE5
  4188                           fsr1h	equ	0xFE2
  4189                           fsr1l	equ	0xFE1
  4190                           status	equ	0xFD8
  4191                           
  4192 ;; *************** function _mode1 *****************
  4193 ;; Defined at:
  4194 ;;		line 120 in file "main.c"
  4195 ;; Parameters:    Size  Location     Type
  4196 ;;		None
  4197 ;; Auto vars:     Size  Location     Type
  4198 ;;  moveto          2    2[BANK3 ] int 
  4199 ;; Return value:  Size  Location     Type
  4200 ;;                  1    wreg      void 
  4201 ;; Registers used:
  4202 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  4203 ;; Tracked objects:
  4204 ;;		On entry : 0/0
  4205 ;;		On exit  : 0/0
  4206 ;;		Unchanged: 0/0
  4207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4209 ;;      Locals:         0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4210 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4211 ;;      Totals:         0       0       0       0       8       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4212 ;;Total ram usage:        8 bytes
  4213 ;; Hardware stack levels used:    1
  4214 ;; Hardware stack levels required when called:   16
  4215 ;; This function calls:
  4216 ;;		_ADC_Start
  4217 ;;		_ADC_Voltage
  4218 ;;		_Console_Render
  4219 ;;		_HMI_Poll
  4220 ;;		_HMI_Render
  4221 ;;		_HMI_SetNumber
  4222 ;;		_MXK_Dequeue
  4223 ;;		_MXK_Release
  4224 ;;		_MXK_SwitchTo
  4225 ;;		_Motor_Move
  4226 ;;		_Motor_Speed
  4227 ;;		___fldiv
  4228 ;;		___fltol
  4229 ;;		_irobot_song_play
  4230 ;;		_irobot_stop_motion
  4231 ;;		_printf
  4232 ;;		_update_angle
  4233 ;;		_update_bump_and_cliff
  4234 ;;		_update_distance
  4235 ;; This function is called by:
  4236 ;;		_main
  4237 ;; This function uses a non-reentrant model
  4238 ;;
  4239                           
  4240                           	psect	text8
  4241  0108C4                     __ptext8:
  4242                           	opt stack 0
  4243  0108C4                     _mode1:
  4244                           	opt stack 14
  4245                           
  4246                           ;main.c: 121: update_bump_and_cliff();
  4247                           
  4248                           ;incstack = 0
  4249  0108C4  EC49  F0AF         	call	_update_bump_and_cliff	;wreg free
  4250                           
  4251                           ;main.c: 122: update_distance();
  4252  0108C8  EC2E  F0B2         	call	_update_distance	;wreg free
  4253                           
  4254                           ;main.c: 123: update_angle();
  4255  0108CC  EC37  F0B2         	call	_update_angle	;wreg free
  4256                           
  4257                           ;main.c: 127: if (iRBumpLeft || iRBumpRight) {
  4258  0108D0  0100               	movlb	0	; () banked
  4259  0108D2  51D6               	movf	_iRBumpLeft& (0+255),w,b
  4260  0108D4  A4D8               	btfss	status,2,c
  4261  0108D6  D004               	goto	u13470
  4262                           
  4263                           ; BSR set to: 0
  4264  0108D8  0100               	movlb	0	; () banked
  4265  0108DA  51D7               	movf	_iRBumpRight& (0+255),w,b
  4266  0108DC  B4D8               	btfsc	status,2,c
  4267  0108DE  D006               	goto	l2311
  4268  0108E0                     u13470:
  4269                           
  4270                           ; BSR set to: 0
  4271                           ;main.c: 128: irobot_song_play(0);
  4272                           
  4273                           ; BSR set to: 0
  4274  0108E0  0E00               	movlw	0
  4275  0108E2  EC1A  F0B2         	call	_irobot_song_play
  4276                           
  4277                           ;main.c: 129: irobot_stop_motion(0);
  4278  0108E6  0E00               	movlw	0
  4279  0108E8  ECC3  F0AD         	call	_irobot_stop_motion
  4280  0108EC                     l2311:
  4281                           
  4282                           ;main.c: 130: }
  4283                           ;main.c: 131: if (angleTotal > 83) {
  4284  0108EC  0100               	movlb	0	; () banked
  4285  0108EE  BFC7               	btfsc	(_angleTotal+1)& (0+255),7,b
  4286  0108F0  D00B               	goto	l2314
  4287  0108F2  0100               	movlb	0	; () banked
  4288  0108F4  51C7               	movf	(_angleTotal+1)& (0+255),w,b
  4289  0108F6  E105               	bnz	u13480
  4290  0108F8  0E54               	movlw	84
  4291  0108FA  0100               	movlb	0	; () banked
  4292  0108FC  5DC6               	subwf	_angleTotal& (0+255),w,b
  4293  0108FE  A0D8               	btfss	status,0,c
  4294  010900  D003               	goto	l2314
  4295  010902                     u13480:
  4296                           
  4297                           ; BSR set to: 0
  4298                           ;main.c: 132: irobot_stop_motion(0);
  4299  010902  0E00               	movlw	0
  4300  010904  ECC3  F0AD         	call	_irobot_stop_motion
  4301  010908                     l2314:
  4302                           
  4303                           ;main.c: 133: }
  4304                           ;main.c: 135: if (MXK_SwitchTo(eMXK_HMI)) {
  4305  010908  0E01               	movlw	1
  4306  01090A  EC4E  F0AE         	call	_MXK_SwitchTo
  4307  01090E  0900               	iorlw	0
  4308  010910  B4D8               	btfsc	status,2,c
  4309  010912  D029               	goto	l2316
  4310                           
  4311                           ;main.c: 136: printf("%c", (char)35);
  4312  010914  0EFB               	movlw	low STR_1
  4313  010916  0100               	movlb	0	; () banked
  4314  010918  6F75               	movwf	printf@f& (0+255),b
  4315  01091A  0EFF               	movlw	high STR_1
  4316  01091C  0100               	movlb	0	; () banked
  4317  01091E  6F76               	movwf	(printf@f+1)& (0+255),b
  4318  010920  0E00               	movlw	0
  4319  010922  0100               	movlb	0	; () banked
  4320  010924  6F78               	movwf	(?_printf+3)& (0+255),b
  4321  010926  0E23               	movlw	35
  4322  010928  6F77               	movwf	(?_printf+2)& (0+255),b
  4323  01092A  EC7E  F092         	call	_printf	;wreg free
  4324                           
  4325                           ;main.c: 137: printf("Total Distance:%u\nLeft Bump:%u\nRight Bump:%u\n", distanceTotal, 
      +                          iRBumpLeft, iRBumpRight);
  4326  01092E  0E9D               	movlw	low STR_2
  4327  010930  0100               	movlb	0	; () banked
  4328  010932  6F75               	movwf	printf@f& (0+255),b
  4329  010934  0EFF               	movlw	high STR_2
  4330  010936  0100               	movlb	0	; () banked
  4331  010938  6F76               	movwf	(printf@f+1)& (0+255),b
  4332  01093A  C0C8  F077         	movff	_distanceTotal,?_printf+2
  4333  01093E  C0C9  F078         	movff	_distanceTotal+1,?_printf+3
  4334  010942  C0D6  F079         	movff	_iRBumpLeft,?_printf+4
  4335  010946  0100               	movlb	0	; () banked
  4336  010948  6B7A               	clrf	(?_printf+5)& (0+255),b
  4337  01094A  C0D7  F07B         	movff	_iRBumpRight,?_printf+6
  4338  01094E  0100               	movlb	0	; () banked
  4339  010950  6B7C               	clrf	(?_printf+7)& (0+255),b
  4340  010952  EC7E  F092         	call	_printf	;wreg free
  4341                           
  4342                           ;main.c: 138: Console_Render();
  4343  010956  EC92  F08F         	call	_Console_Render	;wreg free
  4344                           
  4345                           ;main.c: 139: if (MXK_Release())
  4346  01095A  EC91  F0B1         	call	_MXK_Release	;wreg free
  4347  01095E  0900               	iorlw	0
  4348  010960  A4D8               	btfss	status,2,c
  4349                           
  4350                           ;main.c: 140: MXK_Dequeue();
  4351  010962  ECCE  F0AE         	call	_MXK_Dequeue	;wreg free
  4352  010966                     l2316:
  4353                           
  4354                           ;main.c: 141: }
  4355                           ;main.c: 142: HMI_Poll();
  4356  010966  EC35  F0A8         	call	_HMI_Poll	;wreg free
  4357                           
  4358                           ;main.c: 143: StepRotate = 0;
  4359  01096A  0E00               	movlw	0
  4360  01096C  0100               	movlb	0	; () banked
  4361  01096E  6FC5               	movwf	(_StepRotate+1)& (0+255),b
  4362  010970  0E00               	movlw	0
  4363  010972  6FC4               	movwf	_StepRotate& (0+255),b
  4364                           
  4365                           ; BSR set to: 0
  4366                           ;main.c: 144: MinDist = 1000;
  4367  010974  0E03               	movlw	3
  4368  010976  0100               	movlb	0	; () banked
  4369  010978  6FFC               	movwf	(_MinDist+1)& (0+255),b
  4370  01097A  0EE8               	movlw	232
  4371  01097C  6FFB               	movwf	_MinDist& (0+255),b
  4372                           
  4373                           ; BSR set to: 0
  4374                           ;main.c: 145: Stepstomin = 0;
  4375  01097E  0E00               	movlw	0
  4376  010980  0100               	movlb	0	; () banked
  4377  010982  6FC3               	movwf	(_Stepstomin+1)& (0+255),b
  4378  010984  0E00               	movlw	0
  4379  010986  6FC2               	movwf	_Stepstomin& (0+255),b
  4380                           
  4381                           ; BSR set to: 0
  4382                           ;main.c: 146: IRValue = 0;
  4383  010988  0E00               	movlw	0
  4384  01098A  0100               	movlb	0	; () banked
  4385  01098C  6FC1               	movwf	(_IRValue+1)& (0+255),b
  4386  01098E  0E00               	movlw	0
  4387  010990  6FC0               	movwf	_IRValue& (0+255),b
  4388                           
  4389                           ; BSR set to: 0
  4390                           ;main.c: 147: TimerX = 8;
  4391  010992  0E00               	movlw	0
  4392  010994  0100               	movlb	0	; () banked
  4393  010996  6FFA               	movwf	(_TimerX+1)& (0+255),b
  4394  010998  0E08               	movlw	8
  4395  01099A  6FF9               	movwf	_TimerX& (0+255),b
  4396                           
  4397                           ;main.c: 148: while (StepRotate < 400) {
  4398  01099C  D0F9               	goto	u13590
  4399  01099E                     
  4400                           ; BSR set to: 0
  4401                           ;main.c: 149: StepRotate++;
  4402                           
  4403                           ; BSR set to: 0
  4404  01099E  0100               	movlb	0	; () banked
  4405  0109A0  4BC4               	infsnz	_StepRotate& (0+255),f,b
  4406  0109A2  2BC5               	incf	(_StepRotate+1)& (0+255),f,b
  4407                           
  4408                           ; BSR set to: 0
  4409                           ;main.c: 150: ADC_Start(&ADC_AN0);
  4410  0109A4  0EF4               	movlw	low _ADC_AN0
  4411  0109A6  0100               	movlb	0	; () banked
  4412  0109A8  6F62               	movwf	ADC_Start@pInput& (0+255),b
  4413  0109AA  0E00               	movlw	high _ADC_AN0
  4414  0109AC  0100               	movlb	0	; () banked
  4415  0109AE  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
  4416  0109B0  ECC0  F0A6         	call	_ADC_Start	;wreg free
  4417                           
  4418                           ;main.c: 151: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4419  0109B4  0EF4               	movlw	low _ADC_AN0
  4420  0109B6  0100               	movlb	0	; () banked
  4421  0109B8  6FA0               	movwf	ADC_Voltage@pInput& (0+255),b
  4422  0109BA  0E00               	movlw	high _ADC_AN0
  4423  0109BC  0100               	movlb	0	; () banked
  4424  0109BE  6FA1               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  4425  0109C0  EC40  F09D         	call	_ADC_Voltage	;wreg free
  4426  0109C4  C0A0  F3F5         	movff	?_ADC_Voltage,_mode1$15573
  4427  0109C8  C0A1  F3F6         	movff	?_ADC_Voltage+1,_mode1$15573+1
  4428  0109CC  C0A2  F3F7         	movff	?_ADC_Voltage+2,_mode1$15573+2
  4429  0109D0  C0A3  F3F8         	movff	?_ADC_Voltage+3,_mode1$15573+3
  4430                           
  4431                           ;main.c: 151: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4432  0109D4  C3F5  F072         	movff	_mode1$15573,___fldiv@a
  4433  0109D8  C3F6  F073         	movff	_mode1$15573+1,___fldiv@a+1
  4434  0109DC  C3F7  F074         	movff	_mode1$15573+2,___fldiv@a+2
  4435  0109E0  C3F8  F075         	movff	_mode1$15573+3,___fldiv@a+3
  4436  0109E4  0E00               	movlw	0
  4437  0109E6  0100               	movlb	0	; () banked
  4438  0109E8  6F6E               	movwf	___fldiv@b& (0+255),b
  4439  0109EA  0E00               	movlw	0
  4440  0109EC  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
  4441  0109EE  0E6C               	movlw	108
  4442  0109F0  6F70               	movwf	(___fldiv@b+2)& (0+255),b
  4443  0109F2  0E42               	movlw	66
  4444  0109F4  6F71               	movwf	(___fldiv@b+3)& (0+255),b
  4445  0109F6  EC53  F088         	call	___fldiv	;wreg free
  4446  0109FA  C06E  F0B2         	movff	?___fldiv,___fltol@f1
  4447  0109FE  C06F  F0B3         	movff	?___fldiv+1,___fltol@f1+1
  4448  010A02  C070  F0B4         	movff	?___fldiv+2,___fltol@f1+2
  4449  010A06  C071  F0B5         	movff	?___fldiv+3,___fltol@f1+3
  4450  010A0A  EC56  F09B         	call	___fltol	;wreg free
  4451  010A0E  C0B2  F0C0         	movff	?___fltol,_IRValue
  4452  010A12  C0B3  F0C1         	movff	?___fltol+1,_IRValue+1
  4453                           
  4454                           ;main.c: 152: if (MXK_SwitchTo(eMXK_HMI)) {
  4455  010A16  0E01               	movlw	1
  4456  010A18  EC4E  F0AE         	call	_MXK_SwitchTo
  4457  010A1C  0900               	iorlw	0
  4458  010A1E  B4D8               	btfsc	status,2,c
  4459  010A20  D00E               	goto	l2320
  4460                           
  4461                           ;main.c: 153: HMI_SetNumber(IRValue);
  4462  010A22  C0C0  F076         	movff	_IRValue,HMI_SetNumber@pInput
  4463  010A26  C0C1  F077         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  4464  010A2A  EC8C  F0B0         	call	_HMI_SetNumber	;wreg free
  4465                           
  4466                           ;main.c: 154: HMI_Render();
  4467  010A2E  ECAF  F0AE         	call	_HMI_Render	;wreg free
  4468                           
  4469                           ;main.c: 155: if (MXK_Release())
  4470  010A32  EC91  F0B1         	call	_MXK_Release	;wreg free
  4471  010A36  0900               	iorlw	0
  4472  010A38  A4D8               	btfss	status,2,c
  4473                           
  4474                           ;main.c: 156: MXK_Dequeue();
  4475  010A3A  ECCE  F0AE         	call	_MXK_Dequeue	;wreg free
  4476  010A3E                     l2320:
  4477                           
  4478                           ;main.c: 157: }
  4479                           ;main.c: 158: if (IRValue < MinDist) {
  4480  010A3E  0100               	movlb	0	; () banked
  4481  010A40  51FB               	movf	_MinDist& (0+255),w,b
  4482  010A42  0100               	movlb	0	; () banked
  4483  010A44  5DC0               	subwf	_IRValue& (0+255),w,b
  4484  010A46  0100               	movlb	0	; () banked
  4485  010A48  51C1               	movf	(_IRValue+1)& (0+255),w,b
  4486  010A4A  0A80               	xorlw	128
  4487  010A4C  0103               	movlb	3	; () banked
  4488  010A4E  6FF1               	movwf	??_mode1& (0+255),b
  4489  010A50  0100               	movlb	0	; () banked
  4490  010A52  51FC               	movf	(_MinDist+1)& (0+255),w,b
  4491  010A54  0A80               	xorlw	128
  4492  010A56  0103               	movlb	3	; () banked
  4493  010A58  59F1               	subwfb	??_mode1& (0+255),w,b
  4494  010A5A  B0D8               	btfsc	status,0,c
  4495  010A5C  D008               	goto	l2321
  4496                           
  4497                           ; BSR set to: 3
  4498                           ;main.c: 159: MinDist = IRValue;
  4499  010A5E  C0C0  F0FB         	movff	_IRValue,_MinDist
  4500  010A62  C0C1  F0FC         	movff	_IRValue+1,_MinDist+1
  4501                           
  4502                           ;main.c: 160: Stepstomin = StepRotate;
  4503  010A66  C0C4  F0C2         	movff	_StepRotate,_Stepstomin
  4504  010A6A  C0C5  F0C3         	movff	_StepRotate+1,_Stepstomin+1
  4505  010A6E                     l2321:
  4506                           
  4507                           ; BSR set to: 3
  4508                           ;main.c: 161: }
  4509                           ;main.c: 162: if (MXK_SwitchTo(eMXK_Motor)) {
  4510                           
  4511                           ; BSR set to: 3
  4512  010A6E  0E08               	movlw	8
  4513  010A70  EC4E  F0AE         	call	_MXK_SwitchTo
  4514  010A74  0900               	iorlw	0
  4515  010A76  B4D8               	btfsc	status,2,c
  4516  010A78  D020               	goto	l2323
  4517                           
  4518                           ;main.c: 163: Motor_Speed(&Stepper, (50));
  4519  010A7A  0EC8               	movlw	low _Stepper
  4520  010A7C  0100               	movlb	0	; () banked
  4521  010A7E  6F7B               	movwf	Motor_Speed@pMotor& (0+255),b
  4522  010A80  0E03               	movlw	high _Stepper
  4523  010A82  0100               	movlb	0	; () banked
  4524  010A84  6F7C               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  4525  010A86  0E00               	movlw	0
  4526  010A88  0100               	movlb	0	; () banked
  4527  010A8A  6F7E               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  4528  010A8C  0E32               	movlw	50
  4529  010A8E  6F7D               	movwf	Motor_Speed@pFrequency& (0+255),b
  4530  010A90  EC77  F0B0         	call	_Motor_Speed	;wreg free
  4531                           
  4532                           ;main.c: 164: Motor_Move(&Stepper, 1);
  4533  010A94  0EC8               	movlw	low _Stepper
  4534  010A96  0100               	movlb	0	; () banked
  4535  010A98  6F63               	movwf	Motor_Move@pMotor& (0+255),b
  4536  010A9A  0E03               	movlw	high _Stepper
  4537  010A9C  0100               	movlb	0	; () banked
  4538  010A9E  6F64               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  4539  010AA0  0E00               	movlw	0
  4540  010AA2  0100               	movlb	0	; () banked
  4541  010AA4  6F66               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  4542  010AA6  0E01               	movlw	1
  4543  010AA8  6F65               	movwf	Motor_Move@pDelta& (0+255),b
  4544  010AAA  EC66  F0AF         	call	_Motor_Move	;wreg free
  4545                           
  4546                           ;main.c: 165: if (MXK_Release())
  4547  010AAE  EC91  F0B1         	call	_MXK_Release	;wreg free
  4548  010AB2  0900               	iorlw	0
  4549  010AB4  A4D8               	btfss	status,2,c
  4550                           
  4551                           ;main.c: 166: MXK_Dequeue();
  4552  010AB6  ECCE  F0AE         	call	_MXK_Dequeue	;wreg free
  4553  010ABA                     l2323:
  4554                           
  4555                           ;main.c: 167: }
  4556                           ;main.c: 168: TimerX = 10;
  4557  010ABA  0E00               	movlw	0
  4558  010ABC  0100               	movlb	0	; () banked
  4559  010ABE  6FFA               	movwf	(_TimerX+1)& (0+255),b
  4560  010AC0  0E0A               	movlw	10
  4561  010AC2  6FF9               	movwf	_TimerX& (0+255),b
  4562                           
  4563                           ; BSR set to: 0
  4564                           ;main.c: 169: if (TimerX > 0) {
  4565  010AC4  0100               	movlb	0	; () banked
  4566  010AC6  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  4567  010AC8  D063               	goto	u13590
  4568  010ACA  0100               	movlb	0	; () banked
  4569  010ACC  51FA               	movf	(_TimerX+1)& (0+255),w,b
  4570  010ACE  E156               	bnz	l16247
  4571  010AD0  0100               	movlb	0	; () banked
  4572  010AD2  05F9               	decf	_TimerX& (0+255),w,b
  4573  010AD4  B0D8               	btfsc	status,0,c
  4574  010AD6  D052               	goto	l2325
  4575  010AD8  D05B               	goto	u13590
  4576  010ADA                     l16229:
  4577                           
  4578                           ; BSR set to: 0
  4579                           ;main.c: 171: ADC_Start(&ADC_AN0);
  4580  010ADA  0EF4               	movlw	low _ADC_AN0
  4581  010ADC  0100               	movlb	0	; () banked
  4582  010ADE  6F62               	movwf	ADC_Start@pInput& (0+255),b
  4583  010AE0  0E00               	movlw	high _ADC_AN0
  4584  010AE2  0100               	movlb	0	; () banked
  4585  010AE4  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
  4586  010AE6  ECC0  F0A6         	call	_ADC_Start	;wreg free
  4587                           
  4588                           ;main.c: 172: if (MXK_SwitchTo(eMXK_HMI)) {
  4589  010AEA  0E01               	movlw	1
  4590  010AEC  EC4E  F0AE         	call	_MXK_SwitchTo
  4591  010AF0  0900               	iorlw	0
  4592  010AF2  B4D8               	btfsc	status,2,c
  4593  010AF4  D00E               	goto	l2328
  4594                           
  4595                           ;main.c: 173: HMI_SetNumber(IRValue);
  4596  010AF6  C0C0  F076         	movff	_IRValue,HMI_SetNumber@pInput
  4597  010AFA  C0C1  F077         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  4598  010AFE  EC8C  F0B0         	call	_HMI_SetNumber	;wreg free
  4599                           
  4600                           ;main.c: 174: HMI_Render();
  4601  010B02  ECAF  F0AE         	call	_HMI_Render	;wreg free
  4602                           
  4603                           ;main.c: 175: if (MXK_Release())
  4604  010B06  EC91  F0B1         	call	_MXK_Release	;wreg free
  4605  010B0A  0900               	iorlw	0
  4606  010B0C  A4D8               	btfss	status,2,c
  4607                           
  4608                           ;main.c: 176: MXK_Dequeue();
  4609  010B0E  ECCE  F0AE         	call	_MXK_Dequeue	;wreg free
  4610  010B12                     l2328:
  4611                           
  4612                           ;main.c: 177: }
  4613                           ;main.c: 178: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4614  010B12  0EF4               	movlw	low _ADC_AN0
  4615  010B14  0100               	movlb	0	; () banked
  4616  010B16  6FA0               	movwf	ADC_Voltage@pInput& (0+255),b
  4617  010B18  0E00               	movlw	high _ADC_AN0
  4618  010B1A  0100               	movlb	0	; () banked
  4619  010B1C  6FA1               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  4620  010B1E  EC40  F09D         	call	_ADC_Voltage	;wreg free
  4621  010B22  C0A0  F3F5         	movff	?_ADC_Voltage,_mode1$15573
  4622  010B26  C0A1  F3F6         	movff	?_ADC_Voltage+1,_mode1$15573+1
  4623  010B2A  C0A2  F3F7         	movff	?_ADC_Voltage+2,_mode1$15573+2
  4624  010B2E  C0A3  F3F8         	movff	?_ADC_Voltage+3,_mode1$15573+3
  4625                           
  4626                           ;main.c: 177: }
  4627                           ;main.c: 178: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4628  010B32  C3F5  F072         	movff	_mode1$15573,___fldiv@a
  4629  010B36  C3F6  F073         	movff	_mode1$15573+1,___fldiv@a+1
  4630  010B3A  C3F7  F074         	movff	_mode1$15573+2,___fldiv@a+2
  4631  010B3E  C3F8  F075         	movff	_mode1$15573+3,___fldiv@a+3
  4632  010B42  0E00               	movlw	0
  4633  010B44  0100               	movlb	0	; () banked
  4634  010B46  6F6E               	movwf	___fldiv@b& (0+255),b
  4635  010B48  0E00               	movlw	0
  4636  010B4A  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
  4637  010B4C  0E6C               	movlw	108
  4638  010B4E  6F70               	movwf	(___fldiv@b+2)& (0+255),b
  4639  010B50  0E42               	movlw	66
  4640  010B52  6F71               	movwf	(___fldiv@b+3)& (0+255),b
  4641  010B54  EC53  F088         	call	___fldiv	;wreg free
  4642  010B58  C06E  F0B2         	movff	?___fldiv,___fltol@f1
  4643  010B5C  C06F  F0B3         	movff	?___fldiv+1,___fltol@f1+1
  4644  010B60  C070  F0B4         	movff	?___fldiv+2,___fltol@f1+2
  4645  010B64  C071  F0B5         	movff	?___fldiv+3,___fltol@f1+3
  4646  010B68  EC56  F09B         	call	___fltol	;wreg free
  4647  010B6C  C0B2  F0C0         	movff	?___fltol,_IRValue
  4648  010B70  C0B3  F0C1         	movff	?___fltol+1,_IRValue+1
  4649                           
  4650                           ;main.c: 179: TimerX--;
  4651  010B74  0100               	movlb	0	; () banked
  4652  010B76  07F9               	decf	_TimerX& (0+255),f,b
  4653  010B78  A0D8               	btfss	status,0,c
  4654  010B7A  07FA               	decf	(_TimerX+1)& (0+255),f,b
  4655  010B7C                     l2325:
  4656  010B7C                     l16247:
  4657                           
  4658                           ; BSR set to: 0
  4659  010B7C  0100               	movlb	0	; () banked
  4660  010B7E  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  4661  010B80  D007               	goto	u13590
  4662  010B82  0100               	movlb	0	; () banked
  4663  010B84  51FA               	movf	(_TimerX+1)& (0+255),w,b
  4664  010B86  E1A9               	bnz	l16229
  4665  010B88  0100               	movlb	0	; () banked
  4666  010B8A  05F9               	decf	_TimerX& (0+255),w,b
  4667  010B8C  B0D8               	btfsc	status,0,c
  4668  010B8E  D7A5               	goto	l2326
  4669  010B90                     u13590:
  4670                           
  4671                           ; BSR set to: 0
  4672                           
  4673                           ; BSR set to: 0
  4674                           
  4675                           ; BSR set to: 0
  4676                           
  4677                           ; BSR set to: 0
  4678  010B90  0100               	movlb	0	; () banked
  4679  010B92  BFC5               	btfsc	(_StepRotate+1)& (0+255),7,b
  4680  010B94  D704               	goto	l2318
  4681  010B96  0E90               	movlw	144
  4682  010B98  0100               	movlb	0	; () banked
  4683  010B9A  5DC4               	subwf	_StepRotate& (0+255),w,b
  4684  010B9C  0E01               	movlw	1
  4685  010B9E  0100               	movlb	0	; () banked
  4686  010BA0  59C5               	subwfb	(_StepRotate+1)& (0+255),w,b
  4687  010BA2  A0D8               	btfss	status,0,c
  4688  010BA4  D6FC               	goto	l2318
  4689                           
  4690                           ; BSR set to: 0
  4691                           ;main.c: 180: }
  4692                           ;main.c: 181: }
  4693                           ;main.c: 182: }
  4694                           ;main.c: 183: if (MXK_SwitchTo(eMXK_Motor)) {
  4695                           
  4696                           ; BSR set to: 0
  4697  010BA6  0E08               	movlw	8
  4698  010BA8  EC4E  F0AE         	call	_MXK_SwitchTo
  4699  010BAC  0900               	iorlw	0
  4700  010BAE  B4D8               	btfsc	status,2,c
  4701  010BB0  D08A               	goto	l2333
  4702                           
  4703                           ;main.c: 184: Motor_Speed(&Stepper, (50));
  4704  010BB2  0EC8               	movlw	low _Stepper
  4705  010BB4  0100               	movlb	0	; () banked
  4706  010BB6  6F7B               	movwf	Motor_Speed@pMotor& (0+255),b
  4707  010BB8  0E03               	movlw	high _Stepper
  4708  010BBA  0100               	movlb	0	; () banked
  4709  010BBC  6F7C               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  4710  010BBE  0E00               	movlw	0
  4711  010BC0  0100               	movlb	0	; () banked
  4712  010BC2  6F7E               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  4713  010BC4  0E32               	movlw	50
  4714  010BC6  6F7D               	movwf	Motor_Speed@pFrequency& (0+255),b
  4715  010BC8  EC77  F0B0         	call	_Motor_Speed	;wreg free
  4716                           
  4717                           ;main.c: 185: int moveto = 400 - Stepstomin;
  4718  010BCC  C0C2  F3F1         	movff	_Stepstomin,??_mode1
  4719  010BD0  C0C3  F3F2         	movff	_Stepstomin+1,??_mode1+1
  4720  010BD4  0103               	movlb	3	; () banked
  4721  010BD6  1FF1               	comf	??_mode1& (0+255),f,b
  4722  010BD8  1FF2               	comf	(??_mode1+1)& (0+255),f,b
  4723  010BDA  4BF1               	infsnz	??_mode1& (0+255),f,b
  4724  010BDC  2BF2               	incf	(??_mode1+1)& (0+255),f,b
  4725  010BDE  0E90               	movlw	144
  4726  010BE0  0103               	movlb	3	; () banked
  4727  010BE2  25F1               	addwf	??_mode1& (0+255),w,b
  4728  010BE4  0103               	movlb	3	; () banked
  4729  010BE6  6FF3               	movwf	mode1@moveto& (0+255),b
  4730  010BE8  0E01               	movlw	1
  4731  010BEA  0103               	movlb	3	; () banked
  4732  010BEC  21F2               	addwfc	(??_mode1+1)& (0+255),w,b
  4733  010BEE  0103               	movlb	3	; () banked
  4734  010BF0  6FF4               	movwf	(mode1@moveto+1)& (0+255),b
  4735                           
  4736                           ; BSR set to: 3
  4737                           ;main.c: 187: Motor_Move(&Stepper, (-moveto));
  4738  010BF2  0EC8               	movlw	low _Stepper
  4739  010BF4  0100               	movlb	0	; () banked
  4740  010BF6  6F63               	movwf	Motor_Move@pMotor& (0+255),b
  4741  010BF8  0E03               	movlw	high _Stepper
  4742  010BFA  0100               	movlb	0	; () banked
  4743  010BFC  6F64               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  4744  010BFE  C3F3  F3F1         	movff	mode1@moveto,??_mode1
  4745  010C02  C3F4  F3F2         	movff	mode1@moveto+1,??_mode1+1
  4746  010C06  0103               	movlb	3	; () banked
  4747  010C08  1FF1               	comf	??_mode1& (0+255),f,b
  4748  010C0A  1FF2               	comf	(??_mode1+1)& (0+255),f,b
  4749  010C0C  4BF1               	infsnz	??_mode1& (0+255),f,b
  4750  010C0E  2BF2               	incf	(??_mode1+1)& (0+255),f,b
  4751  010C10  C3F1  F065         	movff	??_mode1,Motor_Move@pDelta
  4752  010C14  C3F2  F066         	movff	??_mode1+1,Motor_Move@pDelta+1
  4753  010C18  EC66  F0AF         	call	_Motor_Move	;wreg free
  4754                           
  4755                           ;main.c: 188: if (MXK_Release())
  4756  010C1C  EC91  F0B1         	call	_MXK_Release	;wreg free
  4757  010C20  0900               	iorlw	0
  4758  010C22  B4D8               	btfsc	status,2,c
  4759  010C24  D050               	goto	l2333
  4760                           
  4761                           ;main.c: 189: MXK_Dequeue();
  4762  010C26  ECCE  F0AE         	call	_MXK_Dequeue	;wreg free
  4763                           
  4764                           ;main.c: 190: }
  4765                           ;main.c: 191: while (Stepper.mDelta > 0) {
  4766  010C2A  D04D               	goto	l2333
  4767  010C2C                     l16263:
  4768                           
  4769                           ;main.c: 192: ADC_Start(&ADC_AN0);
  4770  010C2C  0EF4               	movlw	low _ADC_AN0
  4771  010C2E  0100               	movlb	0	; () banked
  4772  010C30  6F62               	movwf	ADC_Start@pInput& (0+255),b
  4773  010C32  0E00               	movlw	high _ADC_AN0
  4774  010C34  0100               	movlb	0	; () banked
  4775  010C36  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
  4776  010C38  ECC0  F0A6         	call	_ADC_Start	;wreg free
  4777                           
  4778                           ;main.c: 193: if (MXK_SwitchTo(eMXK_HMI)) {
  4779  010C3C  0E01               	movlw	1
  4780  010C3E  EC4E  F0AE         	call	_MXK_SwitchTo
  4781  010C42  0900               	iorlw	0
  4782  010C44  B4D8               	btfsc	status,2,c
  4783  010C46  D00E               	goto	l2336
  4784                           
  4785                           ;main.c: 194: HMI_SetNumber(IRValue);
  4786  010C48  C0C0  F076         	movff	_IRValue,HMI_SetNumber@pInput
  4787  010C4C  C0C1  F077         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  4788  010C50  EC8C  F0B0         	call	_HMI_SetNumber	;wreg free
  4789                           
  4790                           ;main.c: 195: HMI_Render();
  4791  010C54  ECAF  F0AE         	call	_HMI_Render	;wreg free
  4792                           
  4793                           ;main.c: 196: if (MXK_Release())
  4794  010C58  EC91  F0B1         	call	_MXK_Release	;wreg free
  4795  010C5C  0900               	iorlw	0
  4796  010C5E  A4D8               	btfss	status,2,c
  4797                           
  4798                           ;main.c: 197: MXK_Dequeue();
  4799  010C60  ECCE  F0AE         	call	_MXK_Dequeue	;wreg free
  4800  010C64                     l2336:
  4801                           
  4802                           ;main.c: 198: }
  4803                           ;main.c: 199: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4804  010C64  0EF4               	movlw	low _ADC_AN0
  4805  010C66  0100               	movlb	0	; () banked
  4806  010C68  6FA0               	movwf	ADC_Voltage@pInput& (0+255),b
  4807  010C6A  0E00               	movlw	high _ADC_AN0
  4808  010C6C  0100               	movlb	0	; () banked
  4809  010C6E  6FA1               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  4810  010C70  EC40  F09D         	call	_ADC_Voltage	;wreg free
  4811  010C74  C0A0  F3F5         	movff	?_ADC_Voltage,_mode1$15573
  4812  010C78  C0A1  F3F6         	movff	?_ADC_Voltage+1,_mode1$15573+1
  4813  010C7C  C0A2  F3F7         	movff	?_ADC_Voltage+2,_mode1$15573+2
  4814  010C80  C0A3  F3F8         	movff	?_ADC_Voltage+3,_mode1$15573+3
  4815                           
  4816                           ;main.c: 198: }
  4817                           ;main.c: 199: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4818  010C84  C3F5  F072         	movff	_mode1$15573,___fldiv@a
  4819  010C88  C3F6  F073         	movff	_mode1$15573+1,___fldiv@a+1
  4820  010C8C  C3F7  F074         	movff	_mode1$15573+2,___fldiv@a+2
  4821  010C90  C3F8  F075         	movff	_mode1$15573+3,___fldiv@a+3
  4822  010C94  0E00               	movlw	0
  4823  010C96  0100               	movlb	0	; () banked
  4824  010C98  6F6E               	movwf	___fldiv@b& (0+255),b
  4825  010C9A  0E00               	movlw	0
  4826  010C9C  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
  4827  010C9E  0E6C               	movlw	108
  4828  010CA0  6F70               	movwf	(___fldiv@b+2)& (0+255),b
  4829  010CA2  0E42               	movlw	66
  4830  010CA4  6F71               	movwf	(___fldiv@b+3)& (0+255),b
  4831  010CA6  EC53  F088         	call	___fldiv	;wreg free
  4832  010CAA  C06E  F0B2         	movff	?___fldiv,___fltol@f1
  4833  010CAE  C06F  F0B3         	movff	?___fldiv+1,___fltol@f1+1
  4834  010CB2  C070  F0B4         	movff	?___fldiv+2,___fltol@f1+2
  4835  010CB6  C071  F0B5         	movff	?___fldiv+3,___fltol@f1+3
  4836  010CBA  EC56  F09B         	call	___fltol	;wreg free
  4837  010CBE  C0B2  F0C0         	movff	?___fltol,_IRValue
  4838  010CC2  C0B3  F0C1         	movff	?___fltol+1,_IRValue+1
  4839  010CC6                     l2333:
  4840  010CC6  0103               	movlb	3	; () banked
  4841  010CC8  BFC9               	btfsc	(_Stepper+1)& (0+255),7,b
  4842  010CCA  0012               	return	
  4843  010CCC  0103               	movlb	3	; () banked
  4844  010CCE  51C9               	movf	(_Stepper+1)& (0+255),w,b
  4845  010CD0  E1AD               	bnz	l16263
  4846  010CD2  0103               	movlb	3	; () banked
  4847  010CD4  05C8               	decf	_Stepper& (0+255),w,b
  4848  010CD6  A0D8               	btfss	status,0,c
  4849  010CD8  0012               	return	
  4850  010CDA  D7A8               	goto	l2334
  4851  010CDC                     __end_of_mode1:
  4852                           	opt stack 0
  4853                           tblptru	equ	0xFF8
  4854                           tblptrh	equ	0xFF7
  4855                           tblptrl	equ	0xFF6
  4856                           tablat	equ	0xFF5
  4857                           postinc0	equ	0xFEE
  4858                           wreg	equ	0xFE8
  4859                           postdec1	equ	0xFE5
  4860                           fsr1h	equ	0xFE2
  4861                           fsr1l	equ	0xFE1
  4862                           status	equ	0xFD8
  4863                           
  4864 ;; *************** function _update_distance *****************
  4865 ;; Defined at:
  4866 ;;		line 315 in file "Library/iRobotSerial.c"
  4867 ;; Parameters:    Size  Location     Type
  4868 ;;		None
  4869 ;; Auto vars:     Size  Location     Type
  4870 ;;		None
  4871 ;; Return value:  Size  Location     Type
  4872 ;;                  1    wreg      void 
  4873 ;; Registers used:
  4874 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4875 ;; Tracked objects:
  4876 ;;		On entry : 0/0
  4877 ;;		On exit  : 0/0
  4878 ;;		Unchanged: 0/0
  4879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4883 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4884 ;;Total ram usage:        0 bytes
  4885 ;; Hardware stack levels used:    1
  4886 ;; Hardware stack levels required when called:   10
  4887 ;; This function calls:
  4888 ;;		_irobot_query_and_update
  4889 ;; This function is called by:
  4890 ;;		_mode1
  4891 ;;		_mode2
  4892 ;;		_mode4
  4893 ;; This function uses a non-reentrant model
  4894 ;;
  4895                           
  4896                           	psect	text9
  4897  01645C                     __ptext9:
  4898                           	opt stack 0
  4899  01645C                     _update_distance:
  4900                           	opt stack 19
  4901                           
  4902                           ;iRobotSerial.c: 316: irobot_query_and_update(1, iR_PKT_DISTANCE);
  4903                           
  4904                           ; BSR set to: 3
  4905                           ;incstack = 0
  4906  01645C  0E00               	movlw	0
  4907  01645E  0100               	movlb	0	; () banked
  4908  016460  6F67               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  4909  016462  0E13               	movlw	19
  4910  016464  6F66               	movwf	?_irobot_query_and_update& (0+255),b
  4911  016466  0E01               	movlw	1
  4912  016468  ECD7  F095         	call	_irobot_query_and_update
  4913  01646C  0012               	return		;funcret
  4914  01646E                     __end_of_update_distance:
  4915                           	opt stack 0
  4916                           tblptru	equ	0xFF8
  4917                           tblptrh	equ	0xFF7
  4918                           tblptrl	equ	0xFF6
  4919                           tablat	equ	0xFF5
  4920                           postinc0	equ	0xFEE
  4921                           wreg	equ	0xFE8
  4922                           postdec1	equ	0xFE5
  4923                           fsr1h	equ	0xFE2
  4924                           fsr1l	equ	0xFE1
  4925                           status	equ	0xFD8
  4926                           
  4927 ;; *************** function _update_bump_and_cliff *****************
  4928 ;; Defined at:
  4929 ;;		line 308 in file "Library/iRobotSerial.c"
  4930 ;; Parameters:    Size  Location     Type
  4931 ;;		None
  4932 ;; Auto vars:     Size  Location     Type
  4933 ;;		None
  4934 ;; Return value:  Size  Location     Type
  4935 ;;                  1    wreg      void 
  4936 ;; Registers used:
  4937 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4938 ;; Tracked objects:
  4939 ;;		On entry : 0/0
  4940 ;;		On exit  : 0/0
  4941 ;;		Unchanged: 0/0
  4942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4946 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4947 ;;Total ram usage:        0 bytes
  4948 ;; Hardware stack levels used:    1
  4949 ;; Hardware stack levels required when called:   10
  4950 ;; This function calls:
  4951 ;;		_irobot_query_and_update
  4952 ;; This function is called by:
  4953 ;;		_mode1
  4954 ;;		_mode2
  4955 ;;		_mode4
  4956 ;; This function uses a non-reentrant model
  4957 ;;
  4958                           
  4959                           	psect	text10
  4960  015E92                     __ptext10:
  4961                           	opt stack 0
  4962  015E92                     _update_bump_and_cliff:
  4963                           	opt stack 19
  4964                           
  4965                           ;iRobotSerial.c: 309: irobot_query_and_update(5, iR_PKT_BUMP_DROP,
  4966                           ;iRobotSerial.c: 310: iR_PKT_CLIFF_L, iR_PKT_CLIFF_FL,
  4967                           ;iRobotSerial.c: 311: iR_PKT_CLIFF_FR, iR_PKT_CLIFF_R);
  4968                           
  4969                           ;incstack = 0
  4970  015E92  0E00               	movlw	0
  4971  015E94  0100               	movlb	0	; () banked
  4972  015E96  6F67               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  4973  015E98  0E07               	movlw	7
  4974  015E9A  6F66               	movwf	?_irobot_query_and_update& (0+255),b
  4975  015E9C  0E00               	movlw	0
  4976  015E9E  0100               	movlb	0	; () banked
  4977  015EA0  6F69               	movwf	(?_irobot_query_and_update+3)& (0+255),b
  4978  015EA2  0E09               	movlw	9
  4979  015EA4  6F68               	movwf	(?_irobot_query_and_update+2)& (0+255),b
  4980  015EA6  0E00               	movlw	0
  4981  015EA8  0100               	movlb	0	; () banked
  4982  015EAA  6F6B               	movwf	(?_irobot_query_and_update+5)& (0+255),b
  4983  015EAC  0E0A               	movlw	10
  4984  015EAE  6F6A               	movwf	(?_irobot_query_and_update+4)& (0+255),b
  4985  015EB0  0E00               	movlw	0
  4986  015EB2  0100               	movlb	0	; () banked
  4987  015EB4  6F6D               	movwf	(?_irobot_query_and_update+7)& (0+255),b
  4988  015EB6  0E0B               	movlw	11
  4989  015EB8  6F6C               	movwf	(?_irobot_query_and_update+6)& (0+255),b
  4990  015EBA  0E00               	movlw	0
  4991  015EBC  0100               	movlb	0	; () banked
  4992  015EBE  6F6F               	movwf	(?_irobot_query_and_update+9)& (0+255),b
  4993  015EC0  0E0C               	movlw	12
  4994  015EC2  6F6E               	movwf	(?_irobot_query_and_update+8)& (0+255),b
  4995  015EC4  0E05               	movlw	5
  4996  015EC6  ECD7  F095         	call	_irobot_query_and_update
  4997  015ECA  0012               	return		;funcret
  4998  015ECC                     __end_of_update_bump_and_cliff:
  4999                           	opt stack 0
  5000                           tblptru	equ	0xFF8
  5001                           tblptrh	equ	0xFF7
  5002                           tblptrl	equ	0xFF6
  5003                           tablat	equ	0xFF5
  5004                           postinc0	equ	0xFEE
  5005                           wreg	equ	0xFE8
  5006                           postdec1	equ	0xFE5
  5007                           fsr1h	equ	0xFE2
  5008                           fsr1l	equ	0xFE1
  5009                           status	equ	0xFD8
  5010                           
  5011 ;; *************** function _update_angle *****************
  5012 ;; Defined at:
  5013 ;;		line 320 in file "Library/iRobotSerial.c"
  5014 ;; Parameters:    Size  Location     Type
  5015 ;;		None
  5016 ;; Auto vars:     Size  Location     Type
  5017 ;;		None
  5018 ;; Return value:  Size  Location     Type
  5019 ;;                  1    wreg      void 
  5020 ;; Registers used:
  5021 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5022 ;; Tracked objects:
  5023 ;;		On entry : 0/0
  5024 ;;		On exit  : 0/0
  5025 ;;		Unchanged: 0/0
  5026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5030 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5031 ;;Total ram usage:        0 bytes
  5032 ;; Hardware stack levels used:    1
  5033 ;; Hardware stack levels required when called:   10
  5034 ;; This function calls:
  5035 ;;		_irobot_query_and_update
  5036 ;; This function is called by:
  5037 ;;		_mode1
  5038 ;;		_mode2
  5039 ;;		_mode4
  5040 ;; This function uses a non-reentrant model
  5041 ;;
  5042                           
  5043                           	psect	text11
  5044  01646E                     __ptext11:
  5045                           	opt stack 0
  5046  01646E                     _update_angle:
  5047                           	opt stack 19
  5048                           
  5049                           ;iRobotSerial.c: 321: irobot_query_and_update(1, iR_PKT_ANGLE);
  5050                           
  5051                           ;incstack = 0
  5052  01646E  0E00               	movlw	0
  5053  016470  0100               	movlb	0	; () banked
  5054  016472  6F67               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  5055  016474  0E14               	movlw	20
  5056  016476  6F66               	movwf	?_irobot_query_and_update& (0+255),b
  5057  016478  0E01               	movlw	1
  5058  01647A  ECD7  F095         	call	_irobot_query_and_update
  5059  01647E  0012               	return		;funcret
  5060  016480                     __end_of_update_angle:
  5061                           	opt stack 0
  5062                           tblptru	equ	0xFF8
  5063                           tblptrh	equ	0xFF7
  5064                           tblptrl	equ	0xFF6
  5065                           tablat	equ	0xFF5
  5066                           postinc0	equ	0xFEE
  5067                           wreg	equ	0xFE8
  5068                           postdec1	equ	0xFE5
  5069                           fsr1h	equ	0xFE2
  5070                           fsr1l	equ	0xFE1
  5071                           status	equ	0xFD8
  5072                           
  5073 ;; *************** function _irobot_query_and_update *****************
  5074 ;; Defined at:
  5075 ;;		line 130 in file "Library/iRobotSerial.c"
  5076 ;; Parameters:    Size  Location     Type
  5077 ;;  numberOfPack    1    wreg     unsigned char 
  5078 ;; Auto vars:     Size  Location     Type
  5079 ;;  numberOfPack    1   24[BANK0 ] unsigned char 
  5080 ;;  TXArray       256    0[BANK2 ] unsigned char [256]
  5081 ;;  RXArray       256    0[BANK1 ] unsigned char [256]
  5082 ;;  packetIDs       2   21[BANK0 ] PTR void [1]
  5083 ;;		 -> ?_irobot_query_and_update(1), 
  5084 ;;  i               1   28[BANK0 ] unsigned char 
  5085 ;;  startIndex      1   27[BANK0 ] unsigned char 
  5086 ;;  j               1   26[BANK0 ] unsigned char 
  5087 ;;  packetVariab    1   25[BANK0 ] unsigned char 
  5088 ;;  streamSize      1   23[BANK0 ] unsigned char 
  5089 ;; Return value:  Size  Location     Type
  5090 ;;                  1    wreg      void 
  5091 ;; Registers used:
  5092 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5093 ;; Tracked objects:
  5094 ;;		On entry : 0/0
  5095 ;;		On exit  : 0/0
  5096 ;;		Unchanged: 0/0
  5097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5098 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5099 ;;      Locals:         0       8     256     256       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5100 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5101 ;;      Totals:         0      23     256     256       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5102 ;;Total ram usage:      535 bytes
  5103 ;; Hardware stack levels used:    1
  5104 ;; Hardware stack levels required when called:    9
  5105 ;; This function calls:
  5106 ;;		_eusart_getch
  5107 ;;		_eusart_putch
  5108 ;;		_get_packet_size
  5109 ;;		_rx_assign
  5110 ;; This function is called by:
  5111 ;;		_update_bump_and_cliff
  5112 ;;		_update_distance
  5113 ;;		_update_angle
  5114 ;; This function uses a non-reentrant model
  5115 ;;
  5116                           
  5117                           	psect	text12
  5118  012BAE                     __ptext12:
  5119                           	opt stack 0
  5120  012BAE                     _irobot_query_and_update:
  5121                           	opt stack 19
  5122                           
  5123                           ;incstack = 0
  5124                           ;irobot_query_and_update@numberOfPacketRequests stored from wreg
  5125  012BAE  0100               	movlb	0	; () banked
  5126  012BB0  6F78               	movwf	irobot_query_and_update@numberOfPacketRequests& (0+255),b
  5127                           
  5128                           ;iRobotSerial.c: 131: UINT8 i, j, packetVariable, streamSize = 0, startIndex = 0, RXArra
      +                          y[256], TXArray[256];
  5129  012BB2  0E00               	movlw	0
  5130  012BB4  0100               	movlb	0	; () banked
  5131  012BB6  6F77               	movwf	irobot_query_and_update@streamSize& (0+255),b
  5132  012BB8  0E00               	movlw	0
  5133  012BBA  0100               	movlb	0	; () banked
  5134  012BBC  6F7B               	movwf	irobot_query_and_update@startIndex& (0+255),b
  5135                           
  5136                           ;iRobotSerial.c: 133: va_list packetIDs;
  5137                           ;iRobotSerial.c: 134: *packetIDs = __va_start();
  5138  012BBE  0E66               	movlw	low ?_irobot_query_and_update
  5139  012BC0  0100               	movlb	0	; () banked
  5140  012BC2  6F75               	movwf	irobot_query_and_update@packetIDs& (0+255),b
  5141  012BC4  0E00               	movlw	high ?_irobot_query_and_update
  5142  012BC6  0100               	movlb	0	; () banked
  5143  012BC8  6F76               	movwf	(irobot_query_and_update@packetIDs+1)& (0+255),b
  5144                           
  5145                           ; BSR set to: 0
  5146                           ;iRobotSerial.c: 135: eusart_putch(iR_QUERY_LIST);
  5147  012BCA  0E95               	movlw	149
  5148  012BCC  EC57  F0B2         	call	_eusart_putch
  5149                           
  5150                           ;iRobotSerial.c: 136: eusart_putch(numberOfPacketRequests);
  5151  012BD0  0100               	movlb	0	; () banked
  5152  012BD2  5178               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  5153  012BD4  EC57  F0B2         	call	_eusart_putch
  5154                           
  5155                           ;iRobotSerial.c: 137: for (i = 0; i < numberOfPacketRequests; i++) {
  5156  012BD8  0E00               	movlw	0
  5157  012BDA  0100               	movlb	0	; () banked
  5158  012BDC  6F7C               	movwf	irobot_query_and_update@i& (0+255),b
  5159  012BDE  D023               	goto	l2091
  5160  012BE0                     
  5161                           ; BSR set to: 0
  5162                           ;iRobotSerial.c: 138: packetVariable = (*(int *)__va_arg((*(int **)packetIDs), (int)0));
  5163                           
  5164                           ; BSR set to: 0
  5165  012BE0  C075  FFD9         	movff	irobot_query_and_update@packetIDs,fsr2l
  5166  012BE4  C076  FFDA         	movff	irobot_query_and_update@packetIDs+1,fsr2h
  5167  012BE8  50DF               	movf	indf2,w,c
  5168  012BEA  0100               	movlb	0	; () banked
  5169  012BEC  6F79               	movwf	irobot_query_and_update@packetVariable& (0+255),b
  5170                           
  5171                           ; BSR set to: 0
  5172  012BEE  0E02               	movlw	2
  5173  012BF0  0100               	movlb	0	; () banked
  5174  012BF2  2775               	addwf	irobot_query_and_update@packetIDs& (0+255),f,b
  5175  012BF4  0E00               	movlw	0
  5176  012BF6  2376               	addwfc	(irobot_query_and_update@packetIDs+1)& (0+255),f,b
  5177                           
  5178                           ; BSR set to: 0
  5179                           ;iRobotSerial.c: 139: streamSize += get_packet_size(packetVariable);
  5180  012BF8  0100               	movlb	0	; () banked
  5181  012BFA  5179               	movf	irobot_query_and_update@packetVariable& (0+255),w,b
  5182  012BFC  EC60  F0AA         	call	_get_packet_size
  5183  012C00  0100               	movlb	0	; () banked
  5184  012C02  2777               	addwf	irobot_query_and_update@streamSize& (0+255),f,b
  5185                           
  5186                           ; BSR set to: 0
  5187                           ;iRobotSerial.c: 140: TXArray[i] = packetVariable;
  5188  012C04  0100               	movlb	0	; () banked
  5189  012C06  517C               	movf	irobot_query_and_update@i& (0+255),w,b
  5190  012C08  0D01               	mullw	1
  5191  012C0A  0E00               	movlw	low irobot_query_and_update@TXArray
  5192  012C0C  24F3               	addwf	prodl,w,c
  5193  012C0E  6ED9               	movwf	fsr2l,c
  5194  012C10  0E02               	movlw	high irobot_query_and_update@TXArray
  5195  012C12  20F4               	addwfc	prodh,w,c
  5196  012C14  6EDA               	movwf	fsr2h,c
  5197  012C16  C079  FFDF         	movff	irobot_query_and_update@packetVariable,indf2
  5198                           
  5199                           ; BSR set to: 0
  5200                           ;iRobotSerial.c: 141: eusart_putch(packetVariable);
  5201  012C1A  0100               	movlb	0	; () banked
  5202  012C1C  5179               	movf	irobot_query_and_update@packetVariable& (0+255),w,b
  5203  012C1E  EC57  F0B2         	call	_eusart_putch
  5204  012C22  0100               	movlb	0	; () banked
  5205  012C24  2B7C               	incf	irobot_query_and_update@i& (0+255),f,b
  5206  012C26                     l2091:
  5207                           
  5208                           ; BSR set to: 0
  5209                           
  5210                           ; BSR set to: 0
  5211  012C26  0100               	movlb	0	; () banked
  5212  012C28  5178               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  5213  012C2A  0100               	movlb	0	; () banked
  5214  012C2C  5D7C               	subwf	irobot_query_and_update@i& (0+255),w,b
  5215  012C2E  A0D8               	btfss	status,0,c
  5216  012C30  D7D7               	goto	l2092
  5217                           
  5218                           ; BSR set to: 0
  5219                           ;iRobotSerial.c: 142: }
  5220                           ;iRobotSerial.c: 143: ;
  5221                           ;iRobotSerial.c: 145: for (i = 0; i < streamSize; i++) {RXArray[i] = eusart_getch();}
  5222                           
  5223                           ; BSR set to: 0
  5224  012C32  0E00               	movlw	0
  5225  012C34  0100               	movlb	0	; () banked
  5226  012C36  6F7C               	movwf	irobot_query_and_update@i& (0+255),b
  5227  012C38  D00E               	goto	l2094
  5228  012C3A                     
  5229                           ; BSR set to: 0
  5230                           
  5231                           ; BSR set to: 0
  5232  012C3A  0100               	movlb	0	; () banked
  5233  012C3C  517C               	movf	irobot_query_and_update@i& (0+255),w,b
  5234  012C3E  0D01               	mullw	1
  5235  012C40  0E00               	movlw	low irobot_query_and_update@RXArray
  5236  012C42  24F3               	addwf	prodl,w,c
  5237  012C44  6ED9               	movwf	fsr2l,c
  5238  012C46  0E01               	movlw	high irobot_query_and_update@RXArray
  5239  012C48  20F4               	addwfc	prodh,w,c
  5240  012C4A  6EDA               	movwf	fsr2h,c
  5241  012C4C  EC9A  F0B2         	call	_eusart_getch	;wreg free
  5242  012C50  6EDF               	movwf	indf2,c
  5243  012C52  0100               	movlb	0	; () banked
  5244  012C54  2B7C               	incf	irobot_query_and_update@i& (0+255),f,b
  5245  012C56                     l2094:
  5246                           
  5247                           ; BSR set to: 0
  5248                           
  5249                           ; BSR set to: 0
  5250  012C56  0100               	movlb	0	; () banked
  5251  012C58  5177               	movf	irobot_query_and_update@streamSize& (0+255),w,b
  5252  012C5A  0100               	movlb	0	; () banked
  5253  012C5C  5D7C               	subwf	irobot_query_and_update@i& (0+255),w,b
  5254  012C5E  A0D8               	btfss	status,0,c
  5255  012C60  D7EC               	goto	l2095
  5256                           
  5257                           ; BSR set to: 0
  5258                           ;iRobotSerial.c: 147: for (i = 0; i < numberOfPacketRequests; i++) {
  5259                           
  5260                           ; BSR set to: 0
  5261  012C62  0E00               	movlw	0
  5262  012C64  0100               	movlb	0	; () banked
  5263  012C66  6F7C               	movwf	irobot_query_and_update@i& (0+255),b
  5264  012C68  D05E               	goto	l2097
  5265  012C6A                     l2098:
  5266                           
  5267                           ; BSR set to: 0
  5268                           ;iRobotSerial.c: 148: for (j = startIndex; j < get_packet_size(TXArray[i]) + startIndex;
      +                           j++) {
  5269  012C6A  C07B  F07A         	movff	irobot_query_and_update@startIndex,irobot_query_and_update@j
  5270  012C6E  D021               	goto	l2099
  5271  012C70                     
  5272                           ; BSR set to: 0
  5273                           ;iRobotSerial.c: 149: rx_assign(TXArray[i], RXArray[j], j - startIndex);
  5274                           
  5275                           ; BSR set to: 0
  5276  012C70  0100               	movlb	0	; () banked
  5277  012C72  517A               	movf	irobot_query_and_update@j& (0+255),w,b
  5278  012C74  0D01               	mullw	1
  5279  012C76  0E00               	movlw	low irobot_query_and_update@RXArray
  5280  012C78  24F3               	addwf	prodl,w,c
  5281  012C7A  6ED9               	movwf	fsr2l,c
  5282  012C7C  0E01               	movlw	high irobot_query_and_update@RXArray
  5283  012C7E  20F4               	addwfc	prodh,w,c
  5284  012C80  6EDA               	movwf	fsr2h,c
  5285  012C82  50DF               	movf	indf2,w,c
  5286  012C84  0100               	movlb	0	; () banked
  5287  012C86  6F61               	movwf	rx_assign@packetIDValue& (0+255),b
  5288  012C88  0100               	movlb	0	; () banked
  5289  012C8A  517B               	movf	irobot_query_and_update@startIndex& (0+255),w,b
  5290  012C8C  0800               	sublw	0
  5291  012C8E  0100               	movlb	0	; () banked
  5292  012C90  257A               	addwf	irobot_query_and_update@j& (0+255),w,b
  5293  012C92  0100               	movlb	0	; () banked
  5294  012C94  6F62               	movwf	rx_assign@byteNumber& (0+255),b
  5295  012C96  0100               	movlb	0	; () banked
  5296  012C98  517C               	movf	irobot_query_and_update@i& (0+255),w,b
  5297  012C9A  0D01               	mullw	1
  5298  012C9C  0E00               	movlw	low irobot_query_and_update@TXArray
  5299  012C9E  24F3               	addwf	prodl,w,c
  5300  012CA0  6ED9               	movwf	fsr2l,c
  5301  012CA2  0E02               	movlw	high irobot_query_and_update@TXArray
  5302  012CA4  20F4               	addwfc	prodh,w,c
  5303  012CA6  6EDA               	movwf	fsr2h,c
  5304  012CA8  50DF               	movf	indf2,w,c
  5305  012CAA  EC5C  F09C         	call	_rx_assign
  5306  012CAE  0100               	movlb	0	; () banked
  5307  012CB0  2B7A               	incf	irobot_query_and_update@j& (0+255),f,b
  5308  012CB2                     l2099:
  5309                           
  5310                           ; BSR set to: 0
  5311                           
  5312                           ; BSR set to: 0
  5313  012CB2  0100               	movlb	0	; () banked
  5314  012CB4  517C               	movf	irobot_query_and_update@i& (0+255),w,b
  5315  012CB6  0D01               	mullw	1
  5316  012CB8  0E00               	movlw	low irobot_query_and_update@TXArray
  5317  012CBA  24F3               	addwf	prodl,w,c
  5318  012CBC  6ED9               	movwf	fsr2l,c
  5319  012CBE  0E02               	movlw	high irobot_query_and_update@TXArray
  5320  012CC0  20F4               	addwfc	prodh,w,c
  5321  012CC2  6EDA               	movwf	fsr2h,c
  5322  012CC4  50DF               	movf	indf2,w,c
  5323  012CC6  EC60  F0AA         	call	_get_packet_size
  5324  012CCA  0100               	movlb	0	; () banked
  5325  012CCC  6F70               	movwf	??_irobot_query_and_update& (0+255),b
  5326  012CCE  6B71               	clrf	(??_irobot_query_and_update+1)& (0+255),b
  5327  012CD0  0100               	movlb	0	; () banked
  5328  012CD2  517B               	movf	irobot_query_and_update@startIndex& (0+255),w,b
  5329  012CD4  0100               	movlb	0	; () banked
  5330  012CD6  2770               	addwf	??_irobot_query_and_update& (0+255),f,b
  5331  012CD8  0E00               	movlw	0
  5332  012CDA  2371               	addwfc	(??_irobot_query_and_update+1)& (0+255),f,b
  5333  012CDC  0100               	movlb	0	; () banked
  5334  012CDE  517A               	movf	irobot_query_and_update@j& (0+255),w,b
  5335  012CE0  0100               	movlb	0	; () banked
  5336  012CE2  6F72               	movwf	(??_irobot_query_and_update+2)& (0+255),b
  5337  012CE4  6B73               	clrf	(??_irobot_query_and_update+3)& (0+255),b
  5338  012CE6  0100               	movlb	0	; () banked
  5339  012CE8  5170               	movf	??_irobot_query_and_update& (0+255),w,b
  5340  012CEA  0100               	movlb	0	; () banked
  5341  012CEC  5D72               	subwf	(??_irobot_query_and_update+2)& (0+255),w,b
  5342  012CEE  0100               	movlb	0	; () banked
  5343  012CF0  5173               	movf	(??_irobot_query_and_update+3)& (0+255),w,b
  5344  012CF2  0A80               	xorlw	128
  5345  012CF4  0100               	movlb	0	; () banked
  5346  012CF6  6F74               	movwf	(??_irobot_query_and_update+4)& (0+255),b
  5347  012CF8  0100               	movlb	0	; () banked
  5348  012CFA  5171               	movf	(??_irobot_query_and_update+1)& (0+255),w,b
  5349  012CFC  0A80               	xorlw	128
  5350  012CFE  0100               	movlb	0	; () banked
  5351  012D00  5974               	subwfb	(??_irobot_query_and_update+4)& (0+255),w,b
  5352  012D02  A0D8               	btfss	status,0,c
  5353  012D04  D7B5               	goto	l2100
  5354                           
  5355                           ; BSR set to: 0
  5356                           ;iRobotSerial.c: 150: }
  5357                           ;iRobotSerial.c: 151: startIndex += get_packet_size(TXArray[i]);
  5358                           
  5359                           ; BSR set to: 0
  5360  012D06  0100               	movlb	0	; () banked
  5361  012D08  517C               	movf	irobot_query_and_update@i& (0+255),w,b
  5362  012D0A  0D01               	mullw	1
  5363  012D0C  0E00               	movlw	low irobot_query_and_update@TXArray
  5364  012D0E  24F3               	addwf	prodl,w,c
  5365  012D10  6ED9               	movwf	fsr2l,c
  5366  012D12  0E02               	movlw	high irobot_query_and_update@TXArray
  5367  012D14  20F4               	addwfc	prodh,w,c
  5368  012D16  6EDA               	movwf	fsr2h,c
  5369  012D18  50DF               	movf	indf2,w,c
  5370  012D1A  EC60  F0AA         	call	_get_packet_size
  5371  012D1E  0100               	movlb	0	; () banked
  5372  012D20  277B               	addwf	irobot_query_and_update@startIndex& (0+255),f,b
  5373                           
  5374                           ; BSR set to: 0
  5375  012D22  0100               	movlb	0	; () banked
  5376  012D24  2B7C               	incf	irobot_query_and_update@i& (0+255),f,b
  5377  012D26                     l2097:
  5378                           
  5379                           ; BSR set to: 0
  5380                           
  5381                           ; BSR set to: 0
  5382  012D26  0100               	movlb	0	; () banked
  5383  012D28  5178               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  5384  012D2A  0100               	movlb	0	; () banked
  5385  012D2C  5D7C               	subwf	irobot_query_and_update@i& (0+255),w,b
  5386  012D2E  B0D8               	btfsc	status,0,c
  5387  012D30  0012               	return	
  5388  012D32  D79B               	goto	l2098
  5389  012D34                     __end_of_irobot_query_and_update:
  5390                           	opt stack 0
  5391                           tblptru	equ	0xFF8
  5392                           tblptrh	equ	0xFF7
  5393                           tblptrl	equ	0xFF6
  5394                           tablat	equ	0xFF5
  5395                           prodh	equ	0xFF4
  5396                           prodl	equ	0xFF3
  5397                           postinc0	equ	0xFEE
  5398                           wreg	equ	0xFE8
  5399                           postdec1	equ	0xFE5
  5400                           fsr1h	equ	0xFE2
  5401                           fsr1l	equ	0xFE1
  5402                           indf2	equ	0xFDF
  5403                           fsr2h	equ	0xFDA
  5404                           fsr2l	equ	0xFD9
  5405                           status	equ	0xFD8
  5406                           
  5407 ;; *************** function _rx_assign *****************
  5408 ;; Defined at:
  5409 ;;		line 74 in file "Library/iRobotSerial.c"
  5410 ;; Parameters:    Size  Location     Type
  5411 ;;  packetID        1    wreg     unsigned char 
  5412 ;;  packetIDValu    1    1[BANK0 ] unsigned char 
  5413 ;;  byteNumber      1    2[BANK0 ] unsigned char 
  5414 ;; Auto vars:     Size  Location     Type
  5415 ;;  packetID        1    5[BANK0 ] unsigned char 
  5416 ;; Return value:  Size  Location     Type
  5417 ;;                  1    wreg      void 
  5418 ;; Registers used:
  5419 ;;		wreg, status,2, status,0, cstack
  5420 ;; Tracked objects:
  5421 ;;		On entry : 0/0
  5422 ;;		On exit  : 0/0
  5423 ;;		Unchanged: 0/0
  5424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5425 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5426 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5427 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5428 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5429 ;;Total ram usage:        5 bytes
  5430 ;; Hardware stack levels used:    1
  5431 ;; Hardware stack levels required when called:    8
  5432 ;; This function calls:
  5433 ;;		_sort_iRBumpDrop
  5434 ;; This function is called by:
  5435 ;;		_irobot_query_and_update
  5436 ;; This function uses a non-reentrant model
  5437 ;;
  5438                           
  5439                           	psect	text13
  5440  0138B8                     __ptext13:
  5441                           	opt stack 0
  5442  0138B8                     _rx_assign:
  5443                           	opt stack 19
  5444                           
  5445                           ; BSR set to: 0
  5446                           ;incstack = 0
  5447                           ;rx_assign@packetID stored from wreg
  5448  0138B8  0100               	movlb	0	; () banked
  5449  0138BA  6F65               	movwf	rx_assign@packetID& (0+255),b
  5450                           
  5451                           ;iRobotSerial.c: 75: switch (packetID) {
  5452  0138BC  D057               	goto	l2031
  5453  0138BE                     l2032:
  5454                           
  5455                           ; BSR set to: 0
  5456  0138BE  C061  F036         	movff	rx_assign@packetIDValue,_iRBumpDrop
  5457                           
  5458                           ; BSR set to: 0
  5459  0138C2  ECF0  F0A5         	call	_sort_iRBumpDrop	;wreg free
  5460  0138C6  0012               	return	
  5461  0138C8                     l2034:
  5462                           
  5463                           ; BSR set to: 0
  5464  0138C8  C061  F035         	movff	rx_assign@packetIDValue,_iRWall
  5465  0138CC  0012               	return	
  5466  0138CE                     l2035:
  5467                           
  5468                           ; BSR set to: 0
  5469  0138CE  C061  F034         	movff	rx_assign@packetIDValue,_iRCliffL
  5470  0138D2  0012               	return	
  5471  0138D4                     l2036:
  5472                           
  5473                           ; BSR set to: 0
  5474  0138D4  C061  F033         	movff	rx_assign@packetIDValue,_iRCliffFL
  5475  0138D8  0012               	return	
  5476  0138DA                     l2037:
  5477                           
  5478                           ; BSR set to: 0
  5479  0138DA  C061  F032         	movff	rx_assign@packetIDValue,_iRCliffFR
  5480  0138DE  0012               	return	
  5481  0138E0                     l2038:
  5482                           
  5483                           ; BSR set to: 0
  5484  0138E0  C061  F031         	movff	rx_assign@packetIDValue,_iRCliffR
  5485  0138E4  0012               	return	
  5486  0138E6                     l2039:
  5487                           
  5488                           ; BSR set to: 0
  5489  0138E6  C061  F030         	movff	rx_assign@packetIDValue,_iRVirtualWall
  5490  0138EA  0012               	return	
  5491  0138EC                     
  5492                           ; BSR set to: 0
  5493                           ;iRobotSerial.c: 84: (byteNumber == 0) ? (iRDistanceSS.HB = packetIDValue) : (iRDistance
      +                          SS.LB = packetIDValue,
  5494                           ;iRobotSerial.c: 85: iRDistance = ((iRDistanceSS.HB)<<8) + iRDistanceSS.LB); break;
  5495                           
  5496                           ; BSR set to: 0
  5497  0138EC  0100               	movlb	0	; () banked
  5498  0138EE  5162               	movf	rx_assign@byteNumber& (0+255),w,b
  5499  0138F0  0100               	movlb	0	; () banked
  5500  0138F2  A4D8               	btfss	status,2,c
  5501  0138F4  D005               	goto	l2042
  5502                           
  5503                           ; BSR set to: 0
  5504  0138F6  C061  F308         	movff	rx_assign@packetIDValue,_iRDistanceSS
  5505  0138FA  0103               	movlb	3	; () banked
  5506  0138FC  6B09               	clrf	(_iRDistanceSS+1)& (0+255),b
  5507  0138FE  0012               	return	
  5508  013900                     l2042:
  5509                           
  5510                           ; BSR set to: 0
  5511  013900  C061  F30A         	movff	rx_assign@packetIDValue,_iRDistanceSS+2
  5512  013904  0103               	movlb	3	; () banked
  5513  013906  6B0B               	clrf	(_iRDistanceSS+3)& (0+255),b
  5514                           
  5515                           ; BSR set to: 3
  5516  013908  0103               	movlb	3	; () banked
  5517  01390A  5108               	movf	_iRDistanceSS& (0+255),w,b
  5518  01390C  0100               	movlb	0	; () banked
  5519  01390E  6F64               	movwf	(??_rx_assign+1)& (0+255),b
  5520  013910  6B63               	clrf	??_rx_assign& (0+255),b
  5521  013912  0103               	movlb	3	; () banked
  5522  013914  510A               	movf	(_iRDistanceSS+2)& (0+255),w,b
  5523  013916  0100               	movlb	0	; () banked
  5524  013918  2563               	addwf	??_rx_assign& (0+255),w,b
  5525  01391A  0103               	movlb	3	; () banked
  5526  01391C  6F29               	movwf	_iRDistance& (0+255),b
  5527  01391E  0103               	movlb	3	; () banked
  5528  013920  510B               	movf	(_iRDistanceSS+3)& (0+255),w,b
  5529  013922  0100               	movlb	0	; () banked
  5530  013924  2164               	addwfc	(??_rx_assign+1)& (0+255),w,b
  5531  013926  0103               	movlb	3	; () banked
  5532  013928  6F2A               	movwf	(_iRDistance+1)& (0+255),b
  5533                           
  5534                           ; BSR set to: 3
  5535  01392A  0012               	return	
  5536  01392C                     
  5537                           ;iRobotSerial.c: 87: (byteNumber == 0) ? (iRAngleSS.HB = packetIDValue) : (iRAngleSS.LB 
      +                          = packetIDValue,
  5538                           ;iRobotSerial.c: 88: iRAngle = ((iRAngleSS.HB)<<8) + iRAngleSS.LB); break;
  5539                           
  5540                           ; BSR set to: 3
  5541  01392C  0100               	movlb	0	; () banked
  5542  01392E  5162               	movf	rx_assign@byteNumber& (0+255),w,b
  5543  013930  0100               	movlb	0	; () banked
  5544  013932  A4D8               	btfss	status,2,c
  5545  013934  D005               	goto	l2047
  5546                           
  5547                           ; BSR set to: 0
  5548  013936  C061  F304         	movff	rx_assign@packetIDValue,_iRAngleSS
  5549  01393A  0103               	movlb	3	; () banked
  5550  01393C  6B05               	clrf	(_iRAngleSS+1)& (0+255),b
  5551  01393E  0012               	return	
  5552  013940                     l2047:
  5553                           
  5554                           ; BSR set to: 0
  5555  013940  C061  F306         	movff	rx_assign@packetIDValue,_iRAngleSS+2
  5556  013944  0103               	movlb	3	; () banked
  5557  013946  6B07               	clrf	(_iRAngleSS+3)& (0+255),b
  5558                           
  5559                           ; BSR set to: 3
  5560  013948  0103               	movlb	3	; () banked
  5561  01394A  5104               	movf	_iRAngleSS& (0+255),w,b
  5562  01394C  0100               	movlb	0	; () banked
  5563  01394E  6F64               	movwf	(??_rx_assign+1)& (0+255),b
  5564  013950  6B63               	clrf	??_rx_assign& (0+255),b
  5565  013952  0103               	movlb	3	; () banked
  5566  013954  5106               	movf	(_iRAngleSS+2)& (0+255),w,b
  5567  013956  0100               	movlb	0	; () banked
  5568  013958  2563               	addwf	??_rx_assign& (0+255),w,b
  5569  01395A  0103               	movlb	3	; () banked
  5570  01395C  6F27               	movwf	_iRAngle& (0+255),b
  5571  01395E  0103               	movlb	3	; () banked
  5572  013960  5107               	movf	(_iRAngleSS+3)& (0+255),w,b
  5573  013962  0100               	movlb	0	; () banked
  5574  013964  2164               	addwfc	(??_rx_assign+1)& (0+255),w,b
  5575  013966  0103               	movlb	3	; () banked
  5576  013968  6F28               	movwf	(_iRAngle+1)& (0+255),b
  5577                           
  5578                           ; BSR set to: 3
  5579                           ;iRobotSerial.c: 89: }
  5580                           
  5581                           ; BSR set to: 3
  5582  01396A  0012               	return	
  5583  01396C                     l2031:
  5584                           
  5585                           ; BSR set to: 3
  5586  01396C  0100               	movlb	0	; () banked
  5587  01396E  5165               	movf	rx_assign@packetID& (0+255),w,b
  5588                           
  5589                           ; Switch size 1, requested type "space"
  5590                           ; Number of cases is 9, Range of values is 7 to 20
  5591                           ; switch strategies available:
  5592                           ; Name         Instructions Cycles
  5593                           ; simple_byte           28    15 (average)
  5594                           ;	Chosen strategy is simple_byte
  5595  013970  0A07               	xorlw	7	; case 7
  5596  013972  B4D8               	btfsc	status,2,c
  5597  013974  D7A4               	goto	l2032
  5598  013976  0A0F               	xorlw	15	; case 8
  5599  013978  B4D8               	btfsc	status,2,c
  5600  01397A  D7A6               	goto	l2034
  5601  01397C  0A01               	xorlw	1	; case 9
  5602  01397E  B4D8               	btfsc	status,2,c
  5603  013980  D7A6               	goto	l2035
  5604  013982  0A03               	xorlw	3	; case 10
  5605  013984  B4D8               	btfsc	status,2,c
  5606  013986  D7A6               	goto	l2036
  5607  013988  0A01               	xorlw	1	; case 11
  5608  01398A  B4D8               	btfsc	status,2,c
  5609  01398C  D7A6               	goto	l2037
  5610  01398E  0A07               	xorlw	7	; case 12
  5611  013990  B4D8               	btfsc	status,2,c
  5612  013992  D7A6               	goto	l2038
  5613  013994  0A01               	xorlw	1	; case 13
  5614  013996  B4D8               	btfsc	status,2,c
  5615  013998  D7A6               	goto	l2039
  5616  01399A  0A1E               	xorlw	30	; case 19
  5617  01399C  B4D8               	btfsc	status,2,c
  5618  01399E  D7A6               	goto	l2040
  5619  0139A0  0A07               	xorlw	7	; case 20
  5620  0139A2  A4D8               	btfss	status,2,c
  5621  0139A4  0012               	return	
  5622  0139A6  D7C2               	goto	l2045
  5623  0139A8                     __end_of_rx_assign:
  5624                           	opt stack 0
  5625                           tblptru	equ	0xFF8
  5626                           tblptrh	equ	0xFF7
  5627                           tblptrl	equ	0xFF6
  5628                           tablat	equ	0xFF5
  5629                           prodh	equ	0xFF4
  5630                           prodl	equ	0xFF3
  5631                           postinc0	equ	0xFEE
  5632                           wreg	equ	0xFE8
  5633                           postdec1	equ	0xFE5
  5634                           fsr1h	equ	0xFE2
  5635                           fsr1l	equ	0xFE1
  5636                           indf2	equ	0xFDF
  5637                           fsr2h	equ	0xFDA
  5638                           fsr2l	equ	0xFD9
  5639                           status	equ	0xFD8
  5640                           
  5641 ;; *************** function _sort_iRBumpDrop *****************
  5642 ;; Defined at:
  5643 ;;		line 92 in file "Library/iRobotSerial.c"
  5644 ;; Parameters:    Size  Location     Type
  5645 ;;		None
  5646 ;; Auto vars:     Size  Location     Type
  5647 ;;		None
  5648 ;; Return value:  Size  Location     Type
  5649 ;;                  1    wreg      void 
  5650 ;; Registers used:
  5651 ;;		wreg, status,2, status,0
  5652 ;; Tracked objects:
  5653 ;;		On entry : 0/0
  5654 ;;		On exit  : 0/0
  5655 ;;		Unchanged: 0/0
  5656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5659 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5660 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5661 ;;Total ram usage:        1 bytes
  5662 ;; Hardware stack levels used:    1
  5663 ;; Hardware stack levels required when called:    7
  5664 ;; This function calls:
  5665 ;;		Nothing
  5666 ;; This function is called by:
  5667 ;;		_rx_assign
  5668 ;; This function uses a non-reentrant model
  5669 ;;
  5670                           
  5671                           	psect	text14
  5672  014BE0                     __ptext14:
  5673                           	opt stack 0
  5674  014BE0                     _sort_iRBumpDrop:
  5675                           	opt stack 19
  5676                           
  5677                           ;iRobotSerial.c: 93: (iRBumpDrop & 0x1) ? (iRBumpRight = 1) : (iRBumpRight = 0);
  5678                           
  5679                           ;incstack = 0
  5680  014BE0  A036               	btfss	_iRBumpDrop,0,c
  5681  014BE2  D002               	goto	l2054
  5682  014BE4  0E01               	movlw	1
  5683  014BE6  D001               	goto	L1
  5684  014BE8                     l2054:
  5685                           
  5686                           ; BSR set to: 0
  5687  014BE8  0E00               	movlw	0
  5688  014BEA                     L1:
  5689  014BEA  0100               	movlb	0	; () banked
  5690  014BEC  6FD7               	movwf	_iRBumpRight& (0+255),b
  5691                           
  5692                           ; BSR set to: 0
  5693                           ;iRobotSerial.c: 94: ((iRBumpDrop >> 0x1) & (0x1)) ? (iRBumpLeft = 1) : (iRBumpLeft = 0)
      +                          ;
  5694                           
  5695                           ; BSR set to: 0
  5696  014BEE  C036  F060         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  5697  014BF2  0100               	movlb	0	; () banked
  5698  014BF4  90D8               	bcf	status,0,c
  5699  014BF6  3360               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  5700  014BF8  0100               	movlb	0	; () banked
  5701  014BFA  A160               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  5702  014BFC  D002               	goto	l2058
  5703                           
  5704                           ; BSR set to: 0
  5705  014BFE  0E01               	movlw	1
  5706  014C00  D001               	goto	L2
  5707  014C02                     l2058:
  5708                           
  5709                           ; BSR set to: 0
  5710                           
  5711                           ; BSR set to: 0
  5712  014C02  0E00               	movlw	0
  5713  014C04                     L2:
  5714  014C04  0100               	movlb	0	; () banked
  5715  014C06  6FD6               	movwf	_iRBumpLeft& (0+255),b
  5716                           
  5717                           ; BSR set to: 0
  5718                           ;iRobotSerial.c: 95: ((iRBumpDrop >> 0x2) & (0x1)) ? (iRDropRight = 1) : (iRDropRight = 
      +                          0);
  5719                           
  5720                           ; BSR set to: 0
  5721  014C08  C036  F060         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  5722  014C0C  0100               	movlb	0	; () banked
  5723  014C0E  90D8               	bcf	status,0,c
  5724  014C10  3360               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  5725  014C12  0100               	movlb	0	; () banked
  5726  014C14  90D8               	bcf	status,0,c
  5727  014C16  3360               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  5728  014C18  0100               	movlb	0	; () banked
  5729  014C1A  A160               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  5730  014C1C  D002               	goto	l2062
  5731                           
  5732                           ; BSR set to: 0
  5733  014C1E  0E01               	movlw	1
  5734  014C20  D001               	goto	L3
  5735  014C22                     l2062:
  5736                           
  5737                           ; BSR set to: 0
  5738                           
  5739                           ; BSR set to: 0
  5740  014C22  0E00               	movlw	0
  5741  014C24                     L3:
  5742  014C24  0100               	movlb	0	; () banked
  5743  014C26  6FD5               	movwf	_iRDropRight& (0+255),b
  5744                           
  5745                           ; BSR set to: 0
  5746                           ;iRobotSerial.c: 96: ((iRBumpDrop >> 0x3) & (0x1)) ? (iRDropLeft = 1) : (iRDropLeft = 0)
      +                          ;
  5747                           
  5748                           ; BSR set to: 0
  5749  014C28  C036  F060         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  5750  014C2C  0100               	movlb	0	; () banked
  5751  014C2E  90D8               	bcf	status,0,c
  5752  014C30  3360               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  5753  014C32  0100               	movlb	0	; () banked
  5754  014C34  90D8               	bcf	status,0,c
  5755  014C36  3360               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  5756  014C38  0100               	movlb	0	; () banked
  5757  014C3A  90D8               	bcf	status,0,c
  5758  014C3C  3360               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  5759  014C3E  0100               	movlb	0	; () banked
  5760  014C40  A160               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  5761  014C42  D002               	goto	l2066
  5762                           
  5763                           ; BSR set to: 0
  5764  014C44  0E01               	movlw	1
  5765  014C46  D001               	goto	L4
  5766  014C48                     l2066:
  5767                           
  5768                           ; BSR set to: 0
  5769                           
  5770                           ; BSR set to: 0
  5771  014C48  0E00               	movlw	0
  5772  014C4A                     L4:
  5773  014C4A  0100               	movlb	0	; () banked
  5774  014C4C  6FD4               	movwf	_iRDropLeft& (0+255),b
  5775                           
  5776                           ; BSR set to: 0
  5777                           ;iRobotSerial.c: 97: ((iRBumpDrop >> 0x4) & (0x1)) ? (iRDropCaster = 1) : (iRDropCaster 
      +                          = 0);
  5778                           
  5779                           ; BSR set to: 0
  5780  014C4E  C036  F060         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  5781  014C52  0100               	movlb	0	; () banked
  5782  014C54  3B60               	swapf	??_sort_iRBumpDrop& (0+255),f,b
  5783  014C56  0E0F               	movlw	15
  5784  014C58  1760               	andwf	??_sort_iRBumpDrop& (0+255),f,b
  5785  014C5A  0100               	movlb	0	; () banked
  5786  014C5C  A160               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  5787  014C5E  D003               	goto	l2070
  5788                           
  5789                           ; BSR set to: 0
  5790  014C60  0E01               	movlw	1
  5791  014C62  6E2F               	movwf	_iRDropCaster,c
  5792  014C64  0012               	return	
  5793  014C66                     l2070:
  5794                           
  5795                           ; BSR set to: 0
  5796                           
  5797                           ; BSR set to: 0
  5798  014C66  0E00               	movlw	0
  5799  014C68  6E2F               	movwf	_iRDropCaster,c
  5800  014C6A  0012               	return	
  5801  014C6C                     __end_of_sort_iRBumpDrop:
  5802                           	opt stack 0
  5803                           tblptru	equ	0xFF8
  5804                           tblptrh	equ	0xFF7
  5805                           tblptrl	equ	0xFF6
  5806                           tablat	equ	0xFF5
  5807                           prodh	equ	0xFF4
  5808                           prodl	equ	0xFF3
  5809                           postinc0	equ	0xFEE
  5810                           wreg	equ	0xFE8
  5811                           postdec1	equ	0xFE5
  5812                           fsr1h	equ	0xFE2
  5813                           fsr1l	equ	0xFE1
  5814                           indf2	equ	0xFDF
  5815                           fsr2h	equ	0xFDA
  5816                           fsr2l	equ	0xFD9
  5817                           status	equ	0xFD8
  5818                           
  5819 ;; *************** function _get_packet_size *****************
  5820 ;; Defined at:
  5821 ;;		line 60 in file "Library/iRobotSerial.c"
  5822 ;; Parameters:    Size  Location     Type
  5823 ;;  packetID        1    wreg     unsigned char 
  5824 ;; Auto vars:     Size  Location     Type
  5825 ;;  packetID        1    0[BANK0 ] unsigned char 
  5826 ;; Return value:  Size  Location     Type
  5827 ;;                  1    wreg      unsigned char 
  5828 ;; Registers used:
  5829 ;;		wreg, status,2, status,0
  5830 ;; Tracked objects:
  5831 ;;		On entry : 0/0
  5832 ;;		On exit  : 0/0
  5833 ;;		Unchanged: 0/0
  5834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5836 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5838 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5839 ;;Total ram usage:        1 bytes
  5840 ;; Hardware stack levels used:    1
  5841 ;; Hardware stack levels required when called:    7
  5842 ;; This function calls:
  5843 ;;		Nothing
  5844 ;; This function is called by:
  5845 ;;		_irobot_query_and_update
  5846 ;; This function uses a non-reentrant model
  5847 ;;
  5848                           
  5849                           	psect	text15
  5850  0154C0                     __ptext15:
  5851                           	opt stack 0
  5852  0154C0                     _get_packet_size:
  5853                           	opt stack 20
  5854                           
  5855                           ; BSR set to: 0
  5856                           ;incstack = 0
  5857                           ;get_packet_size@packetID stored from wreg
  5858  0154C0  0100               	movlb	0	; () banked
  5859  0154C2  6F60               	movwf	get_packet_size@packetID& (0+255),b
  5860                           
  5861                           ;iRobotSerial.c: 61: switch (packetID) {
  5862  0154C4  D012               	goto	l2017
  5863  0154C6  0E01               	movlw	1
  5864  0154C8  0012               	return	
  5865  0154CA  0E01               	movlw	1
  5866  0154CC  0012               	return	
  5867  0154CE  0E01               	movlw	1
  5868  0154D0  0012               	return	
  5869  0154D2  0E01               	movlw	1
  5870  0154D4  0012               	return	
  5871  0154D6  0E01               	movlw	1
  5872  0154D8  0012               	return	
  5873  0154DA  0E01               	movlw	1
  5874  0154DC  0012               	return	
  5875  0154DE  0E01               	movlw	1
  5876  0154E0  0012               	return	
  5877  0154E2  0E02               	movlw	2
  5878  0154E4  0012               	return	
  5879  0154E6  0E02               	movlw	2
  5880                           
  5881                           ;iRobotSerial.c: 71: }
  5882  0154E8  0012               	return	
  5883  0154EA                     l2017:
  5884  0154EA  0100               	movlb	0	; () banked
  5885  0154EC  5160               	movf	get_packet_size@packetID& (0+255),w,b
  5886                           
  5887                           ; Switch size 1, requested type "space"
  5888                           ; Number of cases is 9, Range of values is 7 to 20
  5889                           ; switch strategies available:
  5890                           ; Name         Instructions Cycles
  5891                           ; simple_byte           28    15 (average)
  5892                           ;	Chosen strategy is simple_byte
  5893  0154EE  0A07               	xorlw	7	; case 7
  5894  0154F0  B4D8               	btfsc	status,2,c
  5895  0154F2  D7E9               	goto	l2018
  5896  0154F4  0A0F               	xorlw	15	; case 8
  5897  0154F6  B4D8               	btfsc	status,2,c
  5898  0154F8  D7E8               	goto	l2020
  5899  0154FA  0A01               	xorlw	1	; case 9
  5900  0154FC  B4D8               	btfsc	status,2,c
  5901  0154FE  D7E7               	goto	l2021
  5902  015500  0A03               	xorlw	3	; case 10
  5903  015502  B4D8               	btfsc	status,2,c
  5904  015504  D7E6               	goto	l2022
  5905  015506  0A01               	xorlw	1	; case 11
  5906  015508  B4D8               	btfsc	status,2,c
  5907  01550A  D7E5               	goto	l2023
  5908  01550C  0A07               	xorlw	7	; case 12
  5909  01550E  B4D8               	btfsc	status,2,c
  5910  015510  D7E4               	goto	l2024
  5911  015512  0A01               	xorlw	1	; case 13
  5912  015514  B4D8               	btfsc	status,2,c
  5913  015516  D7E3               	goto	l2025
  5914  015518  0A1E               	xorlw	30	; case 19
  5915  01551A  B4D8               	btfsc	status,2,c
  5916  01551C  D7E2               	goto	l2026
  5917  01551E  0A07               	xorlw	7	; case 20
  5918  015520  A4D8               	btfss	status,2,c
  5919  015522  0012               	return	
  5920  015524  D7E0               	goto	l2027
  5921  015526                     __end_of_get_packet_size:
  5922                           	opt stack 0
  5923                           tblptru	equ	0xFF8
  5924                           tblptrh	equ	0xFF7
  5925                           tblptrl	equ	0xFF6
  5926                           tablat	equ	0xFF5
  5927                           prodh	equ	0xFF4
  5928                           prodl	equ	0xFF3
  5929                           postinc0	equ	0xFEE
  5930                           wreg	equ	0xFE8
  5931                           postdec1	equ	0xFE5
  5932                           fsr1h	equ	0xFE2
  5933                           fsr1l	equ	0xFE1
  5934                           indf2	equ	0xFDF
  5935                           fsr2h	equ	0xFDA
  5936                           fsr2l	equ	0xFD9
  5937                           status	equ	0xFD8
  5938                           
  5939 ;; *************** function _eusart_getch *****************
  5940 ;; Defined at:
  5941 ;;		line 125 in file "Library/iRobotSerial.c"
  5942 ;; Parameters:    Size  Location     Type
  5943 ;;		None
  5944 ;; Auto vars:     Size  Location     Type
  5945 ;;		None
  5946 ;; Return value:  Size  Location     Type
  5947 ;;                  1    wreg      unsigned char 
  5948 ;; Registers used:
  5949 ;;		wreg, status,2
  5950 ;; Tracked objects:
  5951 ;;		On entry : 0/0
  5952 ;;		On exit  : 0/0
  5953 ;;		Unchanged: 0/0
  5954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5956 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5958 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5959 ;;Total ram usage:        0 bytes
  5960 ;; Hardware stack levels used:    1
  5961 ;; Hardware stack levels required when called:    7
  5962 ;; This function calls:
  5963 ;;		Nothing
  5964 ;; This function is called by:
  5965 ;;		_irobot_query_and_update
  5966 ;; This function uses a non-reentrant model
  5967 ;;
  5968                           
  5969                           	psect	text16
  5970  016534                     __ptext16:
  5971                           	opt stack 0
  5972  016534                     _eusart_getch:
  5973                           	opt stack 20
  5974                           
  5975                           ;iRobotSerial.c: 126: while (!PIR1bits.RC1IF) {};
  5976                           
  5977                           ;incstack = 0
  5978  016534  AA9E               	btfss	3998,5,c	;volatile
  5979  016536  D7FE               	goto	_eusart_getch
  5980                           
  5981                           ;iRobotSerial.c: 127: return RCREG1;
  5982  016538  50AF               	movf	4015,w,c	;volatile
  5983  01653A  0012               	return	
  5984  01653C                     __end_of_eusart_getch:
  5985                           	opt stack 0
  5986                           tblptru	equ	0xFF8
  5987                           tblptrh	equ	0xFF7
  5988                           tblptrl	equ	0xFF6
  5989                           tablat	equ	0xFF5
  5990                           prodh	equ	0xFF4
  5991                           prodl	equ	0xFF3
  5992                           postinc0	equ	0xFEE
  5993                           wreg	equ	0xFE8
  5994                           postdec1	equ	0xFE5
  5995                           fsr1h	equ	0xFE2
  5996                           fsr1l	equ	0xFE1
  5997                           indf2	equ	0xFDF
  5998                           fsr2h	equ	0xFDA
  5999                           fsr2l	equ	0xFD9
  6000                           status	equ	0xFD8
  6001                           
  6002 ;; *************** function _printf *****************
  6003 ;; Defined at:
  6004 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  6005 ;; Parameters:    Size  Location     Type
  6006 ;;  f               2   21[BANK0 ] PTR const unsigned char 
  6007 ;;		 -> STR_8(34), STR_7(3), STR_6(14), STR_5(3), 
  6008 ;;		 -> STR_4(46), STR_3(3), STR_2(46), STR_1(3), 
  6009 ;; Auto vars:     Size  Location     Type
  6010 ;;  tmpval          4    0        struct .
  6011 ;;  cp              3    0        PTR const unsigned char 
  6012 ;;  val             2   34[BANK0 ] unsigned int 
  6013 ;;  ap              2   32[BANK0 ] PTR void [1]
  6014 ;;		 -> ?_printf(2), 
  6015 ;;  len             2    0        unsigned int 
  6016 ;;  c               1   36[BANK0 ] char 
  6017 ;;  flag            1   31[BANK0 ] unsigned char 
  6018 ;;  prec            1   30[BANK0 ] char 
  6019 ;; Return value:  Size  Location     Type
  6020 ;;                  2   21[BANK0 ] int 
  6021 ;; Registers used:
  6022 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6023 ;; Tracked objects:
  6024 ;;		On entry : 0/0
  6025 ;;		On exit  : 0/0
  6026 ;;		Unchanged: 0/0
  6027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6028 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6029 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6030 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6031 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6032 ;;Total ram usage:       16 bytes
  6033 ;; Hardware stack levels used:    1
  6034 ;; Hardware stack levels required when called:   12
  6035 ;; This function calls:
  6036 ;;		___lwdiv
  6037 ;;		___lwmod
  6038 ;;		_putch
  6039 ;; This function is called by:
  6040 ;;		_mode1
  6041 ;;		_mode2
  6042 ;;		_mode4
  6043 ;; This function uses a non-reentrant model
  6044 ;;
  6045                           
  6046                           	psect	text17
  6047  0124FC                     __ptext17:
  6048                           	opt stack 0
  6049  0124FC                     _printf:
  6050                           	opt stack 17
  6051                           
  6052                           ;doprnt.c: 466: va_list ap;
  6053                           ;doprnt.c: 499: signed char c;
  6054                           ;doprnt.c: 506: signed char prec;
  6055                           ;doprnt.c: 508: unsigned char flag;
  6056                           ;doprnt.c: 523: union {
  6057                           ;doprnt.c: 524: unsigned long vd;
  6058                           ;doprnt.c: 525: double integ;
  6059                           ;doprnt.c: 526: } tmpval;
  6060                           ;doprnt.c: 528: unsigned int val;
  6061                           ;doprnt.c: 529: unsigned len;
  6062                           ;doprnt.c: 530: const char * cp;
  6063                           ;doprnt.c: 533: *ap = __va_start();
  6064                           
  6065                           ;incstack = 0
  6066  0124FC  0E77               	movlw	low (?_printf+2)
  6067  0124FE  0100               	movlb	0	; () banked
  6068  012500  6F80               	movwf	printf@ap& (0+255),b
  6069  012502  0E00               	movlw	high (?_printf+2)
  6070  012504  0100               	movlb	0	; () banked
  6071  012506  6F81               	movwf	(printf@ap+1)& (0+255),b
  6072                           
  6073                           ;doprnt.c: 536: while(c = *f++) {
  6074  012508  D0C9               	goto	u11110
  6075  01250A                     
  6076                           ; BSR set to: 0
  6077                           ;doprnt.c: 538: if(c != '%')
  6078                           
  6079                           ; BSR set to: 0
  6080  01250A  0E25               	movlw	37
  6081  01250C  0100               	movlb	0	; () banked
  6082  01250E  1984               	xorwf	printf@c& (0+255),w,b
  6083  012510  B4D8               	btfsc	status,2,c
  6084  012512  D005               	goto	l2408
  6085                           
  6086                           ; BSR set to: 0
  6087                           ;doprnt.c: 540: {
  6088                           ;doprnt.c: 541: (putch(c) );
  6089  012514  0100               	movlb	0	; () banked
  6090  012516  5184               	movf	printf@c& (0+255),w,b
  6091  012518  EC49  F0B2         	call	_putch
  6092                           
  6093                           ;doprnt.c: 542: continue;
  6094  01251C  D0BF               	goto	u11110
  6095  01251E                     l2408:
  6096                           
  6097                           ;doprnt.c: 543: }
  6098                           ;doprnt.c: 548: flag = 0;
  6099  01251E  0E00               	movlw	0
  6100  012520  0100               	movlb	0	; () banked
  6101  012522  6F7F               	movwf	printf@flag& (0+255),b
  6102                           
  6103                           ;doprnt.c: 635: switch(c = *f++) {
  6104  012524  D014               	goto	l2409
  6105  012526                     
  6106                           ; BSR set to: 0
  6107                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  6108                           
  6109                           ; BSR set to: 0
  6110  012526  C080  FFD9         	movff	printf@ap,fsr2l
  6111  01252A  C081  FFDA         	movff	printf@ap+1,fsr2h
  6112  01252E  50DF               	movf	indf2,w,c
  6113  012530  0100               	movlb	0	; () banked
  6114  012532  6F84               	movwf	printf@c& (0+255),b
  6115                           
  6116                           ; BSR set to: 0
  6117  012534  0E02               	movlw	2
  6118  012536  0100               	movlb	0	; () banked
  6119  012538  2780               	addwf	printf@ap& (0+255),f,b
  6120  01253A  0E00               	movlw	0
  6121  01253C  2381               	addwfc	(printf@ap+1)& (0+255),f,b
  6122  01253E                     
  6123                           ; BSR set to: 0
  6124                           ;doprnt.c: 809: (putch(c) );
  6125                           
  6126                           ; BSR set to: 0
  6127  01253E  0100               	movlb	0	; () banked
  6128  012540  5184               	movf	printf@c& (0+255),w,b
  6129  012542  EC49  F0B2         	call	_putch
  6130                           
  6131                           ;doprnt.c: 810: continue;
  6132  012546  D0AA               	goto	u11110
  6133  012548                     
  6134                           ;doprnt.c: 818: flag |= 0x40;
  6135  012548  0100               	movlb	0	; () banked
  6136  01254A  8D7F               	bsf	printf@flag& (0+255),6,b
  6137                           
  6138                           ; BSR set to: 0
  6139                           ;doprnt.c: 822: }
  6140                           
  6141                           ;doprnt.c: 819: break;
  6142  01254C  D01E               	goto	l2414
  6143  01254E                     l2409:
  6144                           
  6145                           ; BSR set to: 0
  6146                           
  6147                           ; BSR set to: 0
  6148  01254E  C075  FFF6         	movff	printf@f,tblptrl
  6149  012552  C076  FFF7         	movff	printf@f+1,tblptrh
  6150  012556  0100               	movlb	0	; () banked
  6151  012558  4B75               	infsnz	printf@f& (0+255),f,b
  6152  01255A  2B76               	incf	(printf@f+1)& (0+255),f,b
  6153  01255C                     	if	0	;tblptru may be non-zero
  6154  01255C                     	endif
  6155  01255C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  6156  01255C  0E00               	movlw	low (__mediumconst shr (0+16))
  6157  01255E  6EF8               	movwf	tblptru,c
  6158  012560                     	endif
  6159  012560  0008               	tblrd		*
  6160  012562  CFF5 F084          	movff	tablat,printf@c
  6161  012566  0100               	movlb	0	; () banked
  6162  012568  5184               	movf	printf@c& (0+255),w,b
  6163                           
  6164                           ; Switch size 1, requested type "space"
  6165                           ; Number of cases is 5, Range of values is 0 to 117
  6166                           ; switch strategies available:
  6167                           ; Name         Instructions Cycles
  6168                           ; simple_byte           16     9 (average)
  6169                           ;	Chosen strategy is simple_byte
  6170  01256A  0A00               	xorlw	0	; case 0
  6171  01256C  B4D8               	btfsc	status,2,c
  6172  01256E  0012               	return	
  6173  012570  0A63               	xorlw	99	; case 99
  6174  012572  B4D8               	btfsc	status,2,c
  6175  012574  D7D8               	goto	l2415
  6176  012576  0A07               	xorlw	7	; case 100
  6177  012578  B4D8               	btfsc	status,2,c
  6178  01257A  D007               	goto	l2414
  6179  01257C  0A0D               	xorlw	13	; case 105
  6180  01257E  B4D8               	btfsc	status,2,c
  6181  012580  D004               	goto	l2414
  6182  012582  0A1C               	xorlw	28	; case 117
  6183  012584  B4D8               	btfsc	status,2,c
  6184  012586  D7E0               	goto	l2417
  6185  012588  D7DA               	goto	l2416
  6186  01258A                     l2414:
  6187                           
  6188                           ; BSR set to: 0
  6189                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  6190  01258A  0100               	movlb	0	; () banked
  6191  01258C  BD7F               	btfsc	printf@flag& (0+255),6,b
  6192  01258E  D019               	goto	l2418
  6193                           
  6194                           ; BSR set to: 0
  6195                           ;doprnt.c: 1253: {
  6196                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6197  012590  C080  FFD9         	movff	printf@ap,fsr2l
  6198  012594  C081  FFDA         	movff	printf@ap+1,fsr2h
  6199  012598  CFDE F082          	movff	postinc2,printf@val
  6200  01259C  CFDD F083          	movff	postdec2,printf@val+1
  6201                           
  6202                           ; BSR set to: 0
  6203  0125A0  0E02               	movlw	2
  6204  0125A2  0100               	movlb	0	; () banked
  6205  0125A4  2780               	addwf	printf@ap& (0+255),f,b
  6206  0125A6  0E00               	movlw	0
  6207  0125A8  2381               	addwfc	(printf@ap+1)& (0+255),f,b
  6208                           
  6209                           ; BSR set to: 0
  6210                           ;doprnt.c: 1261: if((int)val < 0) {
  6211  0125AA  0100               	movlb	0	; () banked
  6212  0125AC  AF83               	btfss	(printf@val+1)& (0+255),7,b
  6213  0125AE  D016               	goto	l2420
  6214                           
  6215                           ; BSR set to: 0
  6216                           ;doprnt.c: 1262: flag |= 0x03;
  6217  0125B0  0E03               	movlw	3
  6218  0125B2  0100               	movlb	0	; () banked
  6219  0125B4  137F               	iorwf	printf@flag& (0+255),f,b
  6220                           
  6221                           ; BSR set to: 0
  6222                           ;doprnt.c: 1263: val = -val;
  6223  0125B6  0100               	movlb	0	; () banked
  6224  0125B8  6D82               	negf	printf@val& (0+255),b
  6225  0125BA  1F83               	comf	(printf@val+1)& (0+255),f,b
  6226  0125BC  B0D8               	btfsc	status,0,c
  6227  0125BE  2B83               	incf	(printf@val+1)& (0+255),f,b
  6228                           
  6229                           ; BSR set to: 0
  6230                           ;doprnt.c: 1264: }
  6231                           ;doprnt.c: 1266: }
  6232  0125C0  D00D               	goto	l2420
  6233  0125C2                     l2418:
  6234                           
  6235                           ; BSR set to: 0
  6236                           ;doprnt.c: 1268: else
  6237                           ;doprnt.c: 1273: {
  6238                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6239                           
  6240                           ; BSR set to: 0
  6241  0125C2  C080  FFD9         	movff	printf@ap,fsr2l
  6242  0125C6  C081  FFDA         	movff	printf@ap+1,fsr2h
  6243  0125CA  CFDE F082          	movff	postinc2,printf@val
  6244  0125CE  CFDD F083          	movff	postdec2,printf@val+1
  6245                           
  6246                           ; BSR set to: 0
  6247  0125D2  0E02               	movlw	2
  6248  0125D4  0100               	movlb	0	; () banked
  6249  0125D6  2780               	addwf	printf@ap& (0+255),f,b
  6250  0125D8  0E00               	movlw	0
  6251  0125DA  2381               	addwfc	(printf@ap+1)& (0+255),f,b
  6252  0125DC                     l2420:
  6253                           
  6254                           ; BSR set to: 0
  6255                           ;doprnt.c: 1287: }
  6256                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6257                           
  6258                           ; BSR set to: 0
  6259  0125DC  0E01               	movlw	1
  6260  0125DE  0100               	movlb	0	; () banked
  6261  0125E0  6F84               	movwf	printf@c& (0+255),b
  6262  0125E2                     l14375:
  6263                           
  6264                           ; BSR set to: 0
  6265  0125E2  0E05               	movlw	5
  6266  0125E4  0100               	movlb	0	; () banked
  6267  0125E6  1984               	xorwf	printf@c& (0+255),w,b
  6268  0125E8  B4D8               	btfsc	status,2,c
  6269  0125EA  D019               	goto	u11090
  6270                           
  6271                           ; BSR set to: 0
  6272                           ;doprnt.c: 1306: if(val < dpowers[c])
  6273                           
  6274                           ; BSR set to: 0
  6275                           
  6276                           ; BSR set to: 0
  6277  0125EC  0100               	movlb	0	; () banked
  6278  0125EE  5184               	movf	printf@c& (0+255),w,b
  6279  0125F0  0D02               	mullw	2
  6280  0125F2  0E95               	movlw	low _dpowers
  6281  0125F4  24F3               	addwf	prodl,w,c
  6282  0125F6  6EF6               	movwf	tblptrl,c
  6283  0125F8  0EFD               	movlw	high _dpowers
  6284  0125FA  20F4               	addwfc	prodh,w,c
  6285  0125FC  6EF7               	movwf	tblptrh,c
  6286  0125FE                     	if	1	;There are 3 active tblptr bytes
  6287  0125FE  6AF8               	clrf	tblptru,c
  6288  012600  0E00               	movlw	low (__mediumconst shr (0+16))
  6289  012602  22F8               	addwfc	tblptru,f,c
  6290  012604                     	endif
  6291  012604  0009               	tblrd		*+
  6292  012606  50F5               	movf	tablat,w,c
  6293  012608  0100               	movlb	0	; () banked
  6294  01260A  5D82               	subwf	printf@val& (0+255),w,b
  6295  01260C  0009               	tblrd		*+
  6296  01260E  50F5               	movf	tablat,w,c
  6297  012610  0100               	movlb	0	; () banked
  6298  012612  5983               	subwfb	(printf@val+1)& (0+255),w,b
  6299  012614  A0D8               	btfss	status,0,c
  6300  012616  D003               	goto	u11090
  6301                           
  6302                           ; BSR set to: 0
  6303                           
  6304                           ; BSR set to: 0
  6305                           
  6306                           ; BSR set to: 0
  6307                           ;doprnt.c: 1307: break;
  6308  012618  0100               	movlb	0	; () banked
  6309  01261A  2B84               	incf	printf@c& (0+255),f,b
  6310  01261C  D7E2               	goto	l14375
  6311  01261E                     u11090:
  6312                           
  6313                           ; BSR set to: 0
  6314                           ;doprnt.c: 1422: {
  6315                           ;doprnt.c: 1438: if(flag & 0x03)
  6316                           
  6317                           ; BSR set to: 0
  6318  01261E  C07F  F07D         	movff	printf@flag,??_printf
  6319  012622  0E03               	movlw	3
  6320  012624  0100               	movlb	0	; () banked
  6321  012626  177D               	andwf	??_printf& (0+255),f,b
  6322  012628  B4D8               	btfsc	status,2,c
  6323  01262A  D003               	goto	l2424
  6324                           
  6325                           ; BSR set to: 0
  6326                           ;doprnt.c: 1439: (putch('-') );
  6327  01262C  0E2D               	movlw	45
  6328  01262E  EC49  F0B2         	call	_putch
  6329  012632                     l2424:
  6330                           
  6331                           ;doprnt.c: 1469: }
  6332                           ;doprnt.c: 1472: prec = c;
  6333  012632  C084  F07E         	movff	printf@c,printf@prec
  6334                           
  6335                           ;doprnt.c: 1474: while(prec--) {
  6336  012636  D02C               	goto	l2425
  6337  012638                     
  6338                           ;doprnt.c: 1478: {
  6339                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6340  012638  0100               	movlb	0	; () banked
  6341  01263A  517E               	movf	printf@prec& (0+255),w,b
  6342  01263C  0D02               	mullw	2
  6343  01263E  0E95               	movlw	low _dpowers
  6344  012640  24F3               	addwf	prodl,w,c
  6345  012642  6EF6               	movwf	tblptrl,c
  6346  012644  0EFD               	movlw	high _dpowers
  6347  012646  20F4               	addwfc	prodh,w,c
  6348  012648  6EF7               	movwf	tblptrh,c
  6349  01264A                     	if	1	;There are 3 active tblptr bytes
  6350  01264A  6AF8               	clrf	tblptru,c
  6351  01264C  0E00               	movlw	low (__mediumconst shr (0+16))
  6352  01264E  22F8               	addwfc	tblptru,f,c
  6353  012650                     	endif
  6354  012650  0009               	tblrd		*+
  6355  012652  CFF5 F062          	movff	tablat,___lwdiv@divisor
  6356  012656  000A               	tblrd		*-
  6357  012658  CFF5 F063          	movff	tablat,___lwdiv@divisor+1
  6358  01265C  C082  F060         	movff	printf@val,___lwdiv@dividend
  6359  012660  C083  F061         	movff	printf@val+1,___lwdiv@dividend+1
  6360  012664  ECBE  F0A7         	call	___lwdiv	;wreg free
  6361  012668  C060  F067         	movff	?___lwdiv,___lwmod@dividend
  6362  01266C  C061  F068         	movff	?___lwdiv+1,___lwmod@dividend+1
  6363  012670  0E00               	movlw	0
  6364  012672  0100               	movlb	0	; () banked
  6365  012674  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
  6366  012676  0E0A               	movlw	10
  6367  012678  6F69               	movwf	___lwmod@divisor& (0+255),b
  6368  01267A  EC5B  F0AB         	call	___lwmod	;wreg free
  6369  01267E  0100               	movlb	0	; () banked
  6370  012680  5167               	movf	?___lwmod& (0+255),w,b
  6371  012682  0F30               	addlw	48
  6372  012684  0100               	movlb	0	; () banked
  6373  012686  6F84               	movwf	printf@c& (0+255),b
  6374                           
  6375                           ; BSR set to: 0
  6376                           ;doprnt.c: 1523: }
  6377                           ;doprnt.c: 1524: (putch(c) );
  6378  012688  0100               	movlb	0	; () banked
  6379  01268A  5184               	movf	printf@c& (0+255),w,b
  6380  01268C  EC49  F0B2         	call	_putch
  6381  012690                     l2425:
  6382  012690  0100               	movlb	0	; () banked
  6383  012692  077E               	decf	printf@prec& (0+255),f,b
  6384  012694  0100               	movlb	0	; () banked
  6385  012696  297E               	incf	printf@prec& (0+255),w,b
  6386  012698  A4D8               	btfss	status,2,c
  6387  01269A  D7CE               	goto	l2426
  6388  01269C                     u11110:
  6389                           
  6390                           ; BSR set to: 0
  6391                           
  6392                           ; BSR set to: 0
  6393  01269C  C075  FFF6         	movff	printf@f,tblptrl
  6394  0126A0  C076  FFF7         	movff	printf@f+1,tblptrh
  6395  0126A4  0100               	movlb	0	; () banked
  6396  0126A6  4B75               	infsnz	printf@f& (0+255),f,b
  6397  0126A8  2B76               	incf	(printf@f+1)& (0+255),f,b
  6398  0126AA                     	if	0	;tblptru may be non-zero
  6399  0126AA                     	endif
  6400  0126AA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  6401  0126AA  0E00               	movlw	low (__mediumconst shr (0+16))
  6402  0126AC  6EF8               	movwf	tblptru,c
  6403  0126AE                     	endif
  6404  0126AE  0008               	tblrd		*
  6405  0126B0  CFF5 F084          	movff	tablat,printf@c
  6406  0126B4  0100               	movlb	0	; () banked
  6407  0126B6  5184               	movf	printf@c& (0+255),w,b
  6408  0126B8  B4D8               	btfsc	status,2,c
  6409  0126BA  0012               	return	
  6410  0126BC  D726               	goto	l2407
  6411  0126BE                     __end_of_printf:
  6412                           	opt stack 0
  6413                           tblptru	equ	0xFF8
  6414                           tblptrh	equ	0xFF7
  6415                           tblptrl	equ	0xFF6
  6416                           tablat	equ	0xFF5
  6417                           prodh	equ	0xFF4
  6418                           prodl	equ	0xFF3
  6419                           postinc0	equ	0xFEE
  6420                           wreg	equ	0xFE8
  6421                           postdec1	equ	0xFE5
  6422                           fsr1h	equ	0xFE2
  6423                           fsr1l	equ	0xFE1
  6424                           indf2	equ	0xFDF
  6425                           postinc2	equ	0xFDE
  6426                           postdec2	equ	0xFDD
  6427                           fsr2h	equ	0xFDA
  6428                           fsr2l	equ	0xFD9
  6429                           status	equ	0xFD8
  6430                           
  6431 ;; *************** function _putch *****************
  6432 ;; Defined at:
  6433 ;;		line 454 in file "Library/Console.c"
  6434 ;; Parameters:    Size  Location     Type
  6435 ;;  c               1    wreg     unsigned char 
  6436 ;; Auto vars:     Size  Location     Type
  6437 ;;  c               1   20[BANK0 ] unsigned char 
  6438 ;; Return value:  Size  Location     Type
  6439 ;;                  1    wreg      void 
  6440 ;; Registers used:
  6441 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6442 ;; Tracked objects:
  6443 ;;		On entry : 0/0
  6444 ;;		On exit  : 0/0
  6445 ;;		Unchanged: 0/0
  6446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6448 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6450 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6451 ;;Total ram usage:        1 bytes
  6452 ;; Hardware stack levels used:    1
  6453 ;; Hardware stack levels required when called:   11
  6454 ;; This function calls:
  6455 ;;		_Console_PrintChar
  6456 ;; This function is called by:
  6457 ;;		_printf
  6458 ;; This function uses a non-reentrant model
  6459 ;;
  6460                           
  6461                           	psect	text18
  6462  016492                     __ptext18:
  6463                           	opt stack 0
  6464  016492                     _putch:
  6465                           	opt stack 17
  6466                           
  6467                           ; BSR set to: 0
  6468                           ;incstack = 0
  6469                           ;putch@c stored from wreg
  6470  016492  0100               	movlb	0	; () banked
  6471  016494  6F74               	movwf	putch@c& (0+255),b
  6472                           
  6473                           ;Console.c: 456: Console_PrintChar(c);
  6474  016496  0100               	movlb	0	; () banked
  6475  016498  5174               	movf	putch@c& (0+255),w,b
  6476  01649A  EC3F  F094         	call	_Console_PrintChar
  6477  01649E  0012               	return		;funcret
  6478  0164A0                     __end_of_putch:
  6479                           	opt stack 0
  6480                           tblptru	equ	0xFF8
  6481                           tblptrh	equ	0xFF7
  6482                           tblptrl	equ	0xFF6
  6483                           tablat	equ	0xFF5
  6484                           prodh	equ	0xFF4
  6485                           prodl	equ	0xFF3
  6486                           postinc0	equ	0xFEE
  6487                           wreg	equ	0xFE8
  6488                           postdec1	equ	0xFE5
  6489                           fsr1h	equ	0xFE2
  6490                           fsr1l	equ	0xFE1
  6491                           indf2	equ	0xFDF
  6492                           postinc2	equ	0xFDE
  6493                           postdec2	equ	0xFDD
  6494                           fsr2h	equ	0xFDA
  6495                           fsr2l	equ	0xFD9
  6496                           status	equ	0xFD8
  6497                           
  6498 ;; *************** function _Console_PrintChar *****************
  6499 ;; Defined at:
  6500 ;;		line 322 in file "Library/Console.c"
  6501 ;; Parameters:    Size  Location     Type
  6502 ;;  pInput          1    wreg     unsigned char 
  6503 ;; Auto vars:     Size  Location     Type
  6504 ;;  pInput          1   19[BANK0 ] unsigned char 
  6505 ;; Return value:  Size  Location     Type
  6506 ;;                  1    wreg      void 
  6507 ;; Registers used:
  6508 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6509 ;; Tracked objects:
  6510 ;;		On entry : 0/0
  6511 ;;		On exit  : 0/0
  6512 ;;		Unchanged: 0/0
  6513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6515 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6516 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6517 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6518 ;;Total ram usage:        4 bytes
  6519 ;; Hardware stack levels used:    1
  6520 ;; Hardware stack levels required when called:   10
  6521 ;; This function calls:
  6522 ;;		_Console_Backspace
  6523 ;;		_Console_FormFeed
  6524 ;;		_Console_IncrementCursor
  6525 ;;		_Console_NewLine
  6526 ;;		_Console_ResetCursor
  6527 ;;		_Console_Tab
  6528 ;; This function is called by:
  6529 ;;		_putch
  6530 ;;		_Console_PrintString
  6531 ;; This function uses a non-reentrant model
  6532 ;;
  6533                           
  6534                           	psect	text19
  6535  01287E                     __ptext19:
  6536                           	opt stack 0
  6537  01287E                     _Console_PrintChar:
  6538                           	opt stack 17
  6539                           
  6540                           ;incstack = 0
  6541                           ;Console_PrintChar@pInput stored from wreg
  6542  01287E  0100               	movlb	0	; () banked
  6543  012880  6F73               	movwf	Console_PrintChar@pInput& (0+255),b
  6544                           
  6545                           ;Console.c: 324: switch(pInput)
  6546  012882  D0B1               	goto	l1036
  6547  012884                     
  6548                           ;Console.c: 327: case '\n':
  6549                           ;Console.c: 328: Console_NewLine();
  6550  012884  EC76  F0A4         	call	_Console_NewLine	;wreg free
  6551                           
  6552                           ;Console.c: 329: return;
  6553  012888  0012               	return	
  6554  01288A                     
  6555                           ;Console.c: 331: Console_Backspace();
  6556  01288A  ECBD  F0AB         	call	_Console_Backspace	;wreg free
  6557                           
  6558                           ;Console.c: 332: return;
  6559  01288E  0012               	return	
  6560  012890                     
  6561                           ;Console.c: 334: Console_FormFeed();
  6562  012890  ECA9  F0A5         	call	_Console_FormFeed	;wreg free
  6563                           
  6564                           ;Console.c: 335: return;
  6565  012894  0012               	return	
  6566  012896                     
  6567                           ;Console.c: 337: Console_Tab();
  6568  012896  EC4B  F09F         	call	_Console_Tab	;wreg free
  6569                           
  6570                           ;Console.c: 338: return;
  6571  01289A  0012               	return	
  6572  01289C                     
  6573                           ;Console.c: 340: Console_IncrementCursor();
  6574  01289C  EC93  F0AA         	call	_Console_IncrementCursor	;wreg free
  6575                           
  6576                           ;Console.c: 341: return;
  6577  0128A0  0012               	return	
  6578  0128A2                     
  6579                           ;Console.c: 343: Console_ResetCursor();
  6580  0128A2  EC0B  F0B1         	call	_Console_ResetCursor	;wreg free
  6581                           
  6582                           ;Console.c: 344: return;
  6583  0128A6  0012               	return	
  6584  0128A8                     
  6585                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  6586                           
  6587                           ;Console.c: 349: default:
  6588  0128A8  C073  F070         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  6589  0128AC  0E7F               	movlw	127
  6590  0128AE  0100               	movlb	0	; () banked
  6591  0128B0  1770               	andwf	??_Console_PrintChar& (0+255),f,b
  6592  0128B2  0100               	movlb	0	; () banked
  6593  0128B4  51DD               	movf	_lBufferY& (0+255),w,b
  6594  0128B6  0D14               	mullw	20
  6595  0128B8  0EC8               	movlw	low _lBuffer
  6596  0128BA  0100               	movlb	0	; () banked
  6597  0128BC  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  6598  0128BE  0E04               	movlw	high _lBuffer
  6599  0128C0  0100               	movlb	0	; () banked
  6600  0128C2  6F72               	movwf	(??_Console_PrintChar+2)& (0+255),b
  6601  0128C4  50F3               	movf	prodl,w,c
  6602  0128C6  0100               	movlb	0	; () banked
  6603  0128C8  2771               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  6604  0128CA  50F4               	movf	prodh,w,c
  6605  0128CC  0100               	movlb	0	; () banked
  6606  0128CE  2372               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  6607  0128D0  0100               	movlb	0	; () banked
  6608  0128D2  51DE               	movf	_lBufferX& (0+255),w,b
  6609  0128D4  0D01               	mullw	1
  6610  0128D6  50F3               	movf	prodl,w,c
  6611  0128D8  0100               	movlb	0	; () banked
  6612  0128DA  2571               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  6613  0128DC  6ED9               	movwf	fsr2l,c
  6614  0128DE  50F4               	movf	prodh,w,c
  6615  0128E0  0100               	movlb	0	; () banked
  6616  0128E2  2172               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  6617  0128E4  6EDA               	movwf	fsr2h,c
  6618  0128E6  50DF               	movf	indf2,w,c
  6619  0128E8  0B7F               	andlw	127
  6620  0128EA  0100               	movlb	0	; () banked
  6621  0128EC  1970               	xorwf	??_Console_PrintChar& (0+255),w,b
  6622  0128EE  B4D8               	btfsc	status,2,c
  6623  0128F0  D02E               	goto	l1047
  6624                           
  6625                           ; BSR set to: 0
  6626                           ;Console.c: 351: {
  6627                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  6628  0128F2  0E01               	movlw	1
  6629  0128F4  0100               	movlb	0	; () banked
  6630  0128F6  6FFF               	movwf	_change& (0+255),b
  6631                           
  6632                           ; BSR set to: 0
  6633  0128F8  0100               	movlb	0	; () banked
  6634  0128FA  51DD               	movf	_lBufferY& (0+255),w,b
  6635  0128FC  0D14               	mullw	20
  6636  0128FE  0EC8               	movlw	low _lBuffer
  6637  012900  0100               	movlb	0	; () banked
  6638  012902  6F70               	movwf	??_Console_PrintChar& (0+255),b
  6639  012904  0E04               	movlw	high _lBuffer
  6640  012906  0100               	movlb	0	; () banked
  6641  012908  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  6642  01290A  50F3               	movf	prodl,w,c
  6643  01290C  0100               	movlb	0	; () banked
  6644  01290E  2770               	addwf	??_Console_PrintChar& (0+255),f,b
  6645  012910  50F4               	movf	prodh,w,c
  6646  012912  0100               	movlb	0	; () banked
  6647  012914  2371               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  6648  012916  0100               	movlb	0	; () banked
  6649  012918  51DE               	movf	_lBufferX& (0+255),w,b
  6650  01291A  0D01               	mullw	1
  6651  01291C  50F3               	movf	prodl,w,c
  6652  01291E  0100               	movlb	0	; () banked
  6653  012920  2570               	addwf	??_Console_PrintChar& (0+255),w,b
  6654  012922  6ED9               	movwf	fsr2l,c
  6655  012924  50F4               	movf	prodh,w,c
  6656  012926  0100               	movlb	0	; () banked
  6657  012928  2171               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  6658  01292A  6EDA               	movwf	fsr2h,c
  6659  01292C  0100               	movlb	0	; () banked
  6660  01292E  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
  6661  012930  0980               	iorlw	128
  6662  012932  6EDF               	movwf	indf2,c
  6663                           
  6664                           ; BSR set to: 0
  6665                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
  6666  012934  0100               	movlb	0	; () banked
  6667  012936  51DD               	movf	_lBufferY& (0+255),w,b
  6668  012938  0D02               	mullw	2
  6669  01293A  0E00               	movlw	low _lCBuffer
  6670  01293C  24F3               	addwf	prodl,w,c
  6671  01293E  6ED9               	movwf	fsr2l,c
  6672  012940  0E04               	movlw	high _lCBuffer
  6673  012942  20F4               	addwfc	prodh,w,c
  6674  012944  6EDA               	movwf	fsr2h,c
  6675  012946  C0FD  FFDE         	movff	_gForecolour,postinc2
  6676  01294A  C0FE  FFDD         	movff	_gForecolour+1,postdec2
  6677  01294E                     l1047:
  6678                           
  6679                           ; BSR set to: 0
  6680                           ;Console.c: 354: }
  6681                           ;Console.c: 368: if(Console_IncrementCursor())
  6682                           
  6683                           ; BSR set to: 0
  6684  01294E  EC93  F0AA         	call	_Console_IncrementCursor	;wreg free
  6685  012952  0900               	iorlw	0
  6686  012954  B4D8               	btfsc	status,2,c
  6687  012956  0012               	return	
  6688                           
  6689                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  6690  012958  C073  F070         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  6691  01295C  0E7F               	movlw	127
  6692  01295E  0100               	movlb	0	; () banked
  6693  012960  1770               	andwf	??_Console_PrintChar& (0+255),f,b
  6694  012962  0100               	movlb	0	; () banked
  6695  012964  51DD               	movf	_lBufferY& (0+255),w,b
  6696  012966  0D14               	mullw	20
  6697  012968  0EC8               	movlw	low _lBuffer
  6698  01296A  0100               	movlb	0	; () banked
  6699  01296C  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  6700  01296E  0E04               	movlw	high _lBuffer
  6701  012970  0100               	movlb	0	; () banked
  6702  012972  6F72               	movwf	(??_Console_PrintChar+2)& (0+255),b
  6703  012974  50F3               	movf	prodl,w,c
  6704  012976  0100               	movlb	0	; () banked
  6705  012978  2771               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  6706  01297A  50F4               	movf	prodh,w,c
  6707  01297C  0100               	movlb	0	; () banked
  6708  01297E  2372               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  6709  012980  0100               	movlb	0	; () banked
  6710  012982  51DE               	movf	_lBufferX& (0+255),w,b
  6711  012984  0D01               	mullw	1
  6712  012986  50F3               	movf	prodl,w,c
  6713  012988  0100               	movlb	0	; () banked
  6714  01298A  2571               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  6715  01298C  6ED9               	movwf	fsr2l,c
  6716  01298E  50F4               	movf	prodh,w,c
  6717  012990  0100               	movlb	0	; () banked
  6718  012992  2172               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  6719  012994  6EDA               	movwf	fsr2h,c
  6720  012996  50DF               	movf	indf2,w,c
  6721  012998  0B7F               	andlw	127
  6722  01299A  0100               	movlb	0	; () banked
  6723  01299C  1970               	xorwf	??_Console_PrintChar& (0+255),w,b
  6724  01299E  B4D8               	btfsc	status,2,c
  6725  0129A0  0012               	return	
  6726                           
  6727                           ; BSR set to: 0
  6728                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  6729  0129A2  0E01               	movlw	1
  6730  0129A4  0100               	movlb	0	; () banked
  6731  0129A6  6FFF               	movwf	_change& (0+255),b
  6732                           
  6733                           ; BSR set to: 0
  6734  0129A8  0100               	movlb	0	; () banked
  6735  0129AA  51DD               	movf	_lBufferY& (0+255),w,b
  6736  0129AC  0D14               	mullw	20
  6737  0129AE  0EC8               	movlw	low _lBuffer
  6738  0129B0  0100               	movlb	0	; () banked
  6739  0129B2  6F70               	movwf	??_Console_PrintChar& (0+255),b
  6740  0129B4  0E04               	movlw	high _lBuffer
  6741  0129B6  0100               	movlb	0	; () banked
  6742  0129B8  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  6743  0129BA  50F3               	movf	prodl,w,c
  6744  0129BC  0100               	movlb	0	; () banked
  6745  0129BE  2770               	addwf	??_Console_PrintChar& (0+255),f,b
  6746  0129C0  50F4               	movf	prodh,w,c
  6747  0129C2  0100               	movlb	0	; () banked
  6748  0129C4  2371               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  6749  0129C6  0100               	movlb	0	; () banked
  6750  0129C8  51DE               	movf	_lBufferX& (0+255),w,b
  6751  0129CA  0D01               	mullw	1
  6752  0129CC  50F3               	movf	prodl,w,c
  6753  0129CE  0100               	movlb	0	; () banked
  6754  0129D0  2570               	addwf	??_Console_PrintChar& (0+255),w,b
  6755  0129D2  6ED9               	movwf	fsr2l,c
  6756  0129D4  50F4               	movf	prodh,w,c
  6757  0129D6  0100               	movlb	0	; () banked
  6758  0129D8  2171               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  6759  0129DA  6EDA               	movwf	fsr2h,c
  6760  0129DC  0100               	movlb	0	; () banked
  6761  0129DE  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
  6762  0129E0  0980               	iorlw	128
  6763  0129E2  6EDF               	movwf	indf2,c
  6764                           
  6765                           ; BSR set to: 0
  6766                           ;Console.c: 372: };
  6767                           
  6768                           ; BSR set to: 0
  6769                           ;Console.c: 371: return;
  6770                           
  6771                           ; BSR set to: 0
  6772                           
  6773                           ; BSR set to: 0
  6774  0129E4  0012               	return	
  6775  0129E6                     l1036:
  6776                           
  6777                           ; BSR set to: 0
  6778  0129E6  0100               	movlb	0	; () banked
  6779  0129E8  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
  6780                           
  6781                           ; Switch size 1, requested type "space"
  6782                           ; Number of cases is 8, Range of values is 7 to 35
  6783                           ; switch strategies available:
  6784                           ; Name         Instructions Cycles
  6785                           ; simple_byte           25    13 (average)
  6786                           ;	Chosen strategy is simple_byte
  6787  0129EA  0A07               	xorlw	7	; case 7
  6788  0129EC  B4D8               	btfsc	status,2,c
  6789  0129EE  D756               	goto	l1043
  6790  0129F0  0A0F               	xorlw	15	; case 8
  6791  0129F2  B4D8               	btfsc	status,2,c
  6792  0129F4  D74A               	goto	l1040
  6793  0129F6  0A01               	xorlw	1	; case 9
  6794  0129F8  B4D8               	btfsc	status,2,c
  6795  0129FA  D74D               	goto	l1042
  6796  0129FC  0A03               	xorlw	3	; case 10
  6797  0129FE  B4D8               	btfsc	status,2,c
  6798  012A00  D741               	goto	l1037
  6799  012A02  0A06               	xorlw	6	; case 12
  6800  012A04  B4D8               	btfsc	status,2,c
  6801  012A06  D744               	goto	l1041
  6802  012A08  0A01               	xorlw	1	; case 13
  6803  012A0A  B4D8               	btfsc	status,2,c
  6804  012A0C  D73B               	goto	l1037
  6805  012A0E  0A2D               	xorlw	45	; case 32
  6806  012A10  B4D8               	btfsc	status,2,c
  6807  012A12  D74A               	goto	l1045
  6808  012A14  0A03               	xorlw	3	; case 35
  6809  012A16  B4D8               	btfsc	status,2,c
  6810  012A18  D744               	goto	l1044
  6811  012A1A  D746               	goto	l1045
  6812  012A1C                     __end_of_Console_PrintChar:
  6813                           	opt stack 0
  6814                           tblptru	equ	0xFF8
  6815                           tblptrh	equ	0xFF7
  6816                           tblptrl	equ	0xFF6
  6817                           tablat	equ	0xFF5
  6818                           prodh	equ	0xFF4
  6819                           prodl	equ	0xFF3
  6820                           postinc0	equ	0xFEE
  6821                           wreg	equ	0xFE8
  6822                           postdec1	equ	0xFE5
  6823                           fsr1h	equ	0xFE2
  6824                           fsr1l	equ	0xFE1
  6825                           indf2	equ	0xFDF
  6826                           postinc2	equ	0xFDE
  6827                           postdec2	equ	0xFDD
  6828                           fsr2h	equ	0xFDA
  6829                           fsr2l	equ	0xFD9
  6830                           status	equ	0xFD8
  6831                           
  6832 ;; *************** function _Console_Tab *****************
  6833 ;; Defined at:
  6834 ;;		line 260 in file "Library/Console.c"
  6835 ;; Parameters:    Size  Location     Type
  6836 ;;		None
  6837 ;; Auto vars:     Size  Location     Type
  6838 ;;  c               1   15[BANK0 ] unsigned char 
  6839 ;;  i               1   14[BANK0 ] unsigned char 
  6840 ;;  t               1   13[BANK0 ] unsigned char 
  6841 ;; Return value:  Size  Location     Type
  6842 ;;                  1    wreg      void 
  6843 ;; Registers used:
  6844 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6845 ;; Tracked objects:
  6846 ;;		On entry : 0/0
  6847 ;;		On exit  : 0/0
  6848 ;;		Unchanged: 0/0
  6849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6851 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6852 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6853 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6854 ;;Total ram usage:        8 bytes
  6855 ;; Hardware stack levels used:    1
  6856 ;; Hardware stack levels required when called:    9
  6857 ;; This function calls:
  6858 ;;		_Console_ClearCursor
  6859 ;;		_Console_IncrementCursor
  6860 ;;		___awdiv
  6861 ;; This function is called by:
  6862 ;;		_Console_PrintChar
  6863 ;; This function uses a non-reentrant model
  6864 ;;
  6865                           
  6866                           	psect	text20
  6867  013E96                     __ptext20:
  6868                           	opt stack 0
  6869  013E96                     _Console_Tab:
  6870                           	opt stack 17
  6871                           
  6872                           ;Console.c: 262: UINT8 i = 0;
  6873                           
  6874                           ;incstack = 0
  6875  013E96  0E00               	movlw	0
  6876  013E98  0100               	movlb	0	; () banked
  6877  013E9A  6F6E               	movwf	Console_Tab@i& (0+255),b
  6878                           
  6879                           ; BSR set to: 0
  6880                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
  6881  013E9C  0EFA               	movlw	250
  6882  013E9E  2447               	addwf	_gCursor,w,c
  6883  013EA0  0100               	movlb	0	; () banked
  6884  013EA2  6F60               	movwf	___awdiv@dividend& (0+255),b
  6885  013EA4  0EFF               	movlw	255
  6886  013EA6  2048               	addwfc	_gCursor+1,w,c
  6887  013EA8  0100               	movlb	0	; () banked
  6888  013EAA  6F61               	movwf	(___awdiv@dividend+1)& (0+255),b
  6889  013EAC  0E00               	movlw	0
  6890  013EAE  0100               	movlb	0	; () banked
  6891  013EB0  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  6892  013EB2  0E06               	movlw	6
  6893  013EB4  6F62               	movwf	___awdiv@divisor& (0+255),b
  6894  013EB6  ECAC  F09F         	call	___awdiv	;wreg free
  6895  013EBA  0100               	movlb	0	; () banked
  6896  013EBC  5160               	movf	?___awdiv& (0+255),w,b
  6897  013EBE  0100               	movlb	0	; () banked
  6898  013EC0  6F6F               	movwf	Console_Tab@c& (0+255),b
  6899                           
  6900                           ; BSR set to: 0
  6901                           ;Console.c: 264: UINT8 t = c/4;
  6902  013EC2  C06F  F060         	movff	Console_Tab@c,___awdiv@dividend
  6903  013EC6  0100               	movlb	0	; () banked
  6904  013EC8  6B61               	clrf	(___awdiv@dividend+1)& (0+255),b
  6905  013ECA  0E00               	movlw	0
  6906  013ECC  0100               	movlb	0	; () banked
  6907  013ECE  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  6908  013ED0  0E04               	movlw	4
  6909  013ED2  6F62               	movwf	___awdiv@divisor& (0+255),b
  6910  013ED4  ECAC  F09F         	call	___awdiv	;wreg free
  6911  013ED8  0100               	movlb	0	; () banked
  6912  013EDA  5160               	movf	?___awdiv& (0+255),w,b
  6913  013EDC  0100               	movlb	0	; () banked
  6914  013EDE  6F6D               	movwf	Console_Tab@t& (0+255),b
  6915                           
  6916                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
  6917  013EE0  0E00               	movlw	0
  6918  013EE2  0100               	movlb	0	; () banked
  6919  013EE4  6F6E               	movwf	Console_Tab@i& (0+255),b
  6920  013EE6  D006               	goto	l1009
  6921  013EE8                     
  6922                           ; BSR set to: 0
  6923                           ;Console.c: 266: {
  6924                           ;Console.c: 267: Console_ClearCursor();
  6925                           
  6926                           ; BSR set to: 0
  6927  013EE8  EC6F  F0AE         	call	_Console_ClearCursor	;wreg free
  6928                           
  6929                           ;Console.c: 268: Console_IncrementCursor();
  6930  013EEC  EC93  F0AA         	call	_Console_IncrementCursor	;wreg free
  6931  013EF0  0100               	movlb	0	; () banked
  6932  013EF2  2B6E               	incf	Console_Tab@i& (0+255),f,b
  6933  013EF4                     l1009:
  6934                           
  6935                           ; BSR set to: 0
  6936                           
  6937                           ; BSR set to: 0
  6938  013EF4  0100               	movlb	0	; () banked
  6939  013EF6  516D               	movf	Console_Tab@t& (0+255),w,b
  6940  013EF8  0D04               	mullw	4
  6941  013EFA  1EF3               	comf	prodl,f,c
  6942  013EFC  1EF4               	comf	prodh,f,c
  6943  013EFE  4AF3               	infsnz	prodl,f,c
  6944  013F00  2AF4               	incf	prodh,f,c
  6945  013F02  0100               	movlb	0	; () banked
  6946  013F04  516F               	movf	Console_Tab@c& (0+255),w,b
  6947  013F06  0100               	movlb	0	; () banked
  6948  013F08  6F68               	movwf	??_Console_Tab& (0+255),b
  6949  013F0A  6B69               	clrf	(??_Console_Tab+1)& (0+255),b
  6950  013F0C  50F3               	movf	prodl,w,c
  6951  013F0E  0100               	movlb	0	; () banked
  6952  013F10  2768               	addwf	??_Console_Tab& (0+255),f,b
  6953  013F12  50F4               	movf	prodh,w,c
  6954  013F14  0100               	movlb	0	; () banked
  6955  013F16  2369               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  6956  013F18  0100               	movlb	0	; () banked
  6957  013F1A  1F68               	comf	??_Console_Tab& (0+255),f,b
  6958  013F1C  1F69               	comf	(??_Console_Tab+1)& (0+255),f,b
  6959  013F1E  4B68               	infsnz	??_Console_Tab& (0+255),f,b
  6960  013F20  2B69               	incf	(??_Console_Tab+1)& (0+255),f,b
  6961  013F22  0E04               	movlw	4
  6962  013F24  0100               	movlb	0	; () banked
  6963  013F26  2768               	addwf	??_Console_Tab& (0+255),f,b
  6964  013F28  0E00               	movlw	0
  6965  013F2A  2369               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  6966  013F2C  0100               	movlb	0	; () banked
  6967  013F2E  516E               	movf	Console_Tab@i& (0+255),w,b
  6968  013F30  0100               	movlb	0	; () banked
  6969  013F32  6F6A               	movwf	(??_Console_Tab+2)& (0+255),b
  6970  013F34  6B6B               	clrf	(??_Console_Tab+3)& (0+255),b
  6971  013F36  0100               	movlb	0	; () banked
  6972  013F38  5168               	movf	??_Console_Tab& (0+255),w,b
  6973  013F3A  0100               	movlb	0	; () banked
  6974  013F3C  5D6A               	subwf	(??_Console_Tab+2)& (0+255),w,b
  6975  013F3E  0100               	movlb	0	; () banked
  6976  013F40  516B               	movf	(??_Console_Tab+3)& (0+255),w,b
  6977  013F42  0A80               	xorlw	128
  6978  013F44  0100               	movlb	0	; () banked
  6979  013F46  6F6C               	movwf	(??_Console_Tab+4)& (0+255),b
  6980  013F48  0100               	movlb	0	; () banked
  6981  013F4A  5169               	movf	(??_Console_Tab+1)& (0+255),w,b
  6982  013F4C  0A80               	xorlw	128
  6983  013F4E  0100               	movlb	0	; () banked
  6984  013F50  596C               	subwfb	(??_Console_Tab+4)& (0+255),w,b
  6985  013F52  B0D8               	btfsc	status,0,c
  6986  013F54  0012               	return	
  6987  013F56  D7C8               	goto	l1010
  6988  013F58                     __end_of_Console_Tab:
  6989                           	opt stack 0
  6990                           tblptru	equ	0xFF8
  6991                           tblptrh	equ	0xFF7
  6992                           tblptrl	equ	0xFF6
  6993                           tablat	equ	0xFF5
  6994                           prodh	equ	0xFF4
  6995                           prodl	equ	0xFF3
  6996                           postinc0	equ	0xFEE
  6997                           wreg	equ	0xFE8
  6998                           postdec1	equ	0xFE5
  6999                           fsr1h	equ	0xFE2
  7000                           fsr1l	equ	0xFE1
  7001                           indf2	equ	0xFDF
  7002                           postinc2	equ	0xFDE
  7003                           postdec2	equ	0xFDD
  7004                           fsr2h	equ	0xFDA
  7005                           fsr2l	equ	0xFD9
  7006                           status	equ	0xFD8
  7007                           
  7008 ;; *************** function ___awdiv *****************
  7009 ;; Defined at:
  7010 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
  7011 ;; Parameters:    Size  Location     Type
  7012 ;;  dividend        2    0[BANK0 ] int 
  7013 ;;  divisor         2    2[BANK0 ] int 
  7014 ;; Auto vars:     Size  Location     Type
  7015 ;;  quotient        2    6[BANK0 ] int 
  7016 ;;  sign            1    5[BANK0 ] unsigned char 
  7017 ;;  counter         1    4[BANK0 ] unsigned char 
  7018 ;; Return value:  Size  Location     Type
  7019 ;;                  2    0[BANK0 ] int 
  7020 ;; Registers used:
  7021 ;;		wreg, status,2, status,0
  7022 ;; Tracked objects:
  7023 ;;		On entry : 0/0
  7024 ;;		On exit  : 0/0
  7025 ;;		Unchanged: 0/0
  7026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7027 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7028 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7030 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7031 ;;Total ram usage:        8 bytes
  7032 ;; Hardware stack levels used:    1
  7033 ;; Hardware stack levels required when called:    7
  7034 ;; This function calls:
  7035 ;;		Nothing
  7036 ;; This function is called by:
  7037 ;;		_Console_Tab
  7038 ;; This function uses a non-reentrant model
  7039 ;;
  7040                           
  7041                           	psect	text21
  7042  013F58                     __ptext21:
  7043                           	opt stack 0
  7044  013F58                     ___awdiv:
  7045                           	opt stack 18
  7046                           
  7047                           ; BSR set to: 0
  7048                           ;incstack = 0
  7049  013F58  0E00               	movlw	0
  7050  013F5A  0100               	movlb	0	; () banked
  7051  013F5C  6F65               	movwf	___awdiv@sign& (0+255),b
  7052                           
  7053                           ; BSR set to: 0
  7054  013F5E  0100               	movlb	0	; () banked
  7055  013F60  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  7056  013F62  D008               	goto	l2597
  7057                           
  7058                           ; BSR set to: 0
  7059  013F64  0100               	movlb	0	; () banked
  7060  013F66  6D62               	negf	___awdiv@divisor& (0+255),b
  7061  013F68  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
  7062  013F6A  B0D8               	btfsc	status,0,c
  7063  013F6C  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
  7064                           
  7065                           ; BSR set to: 0
  7066  013F6E  0E01               	movlw	1
  7067  013F70  0100               	movlb	0	; () banked
  7068  013F72  6F65               	movwf	___awdiv@sign& (0+255),b
  7069  013F74                     l2597:
  7070                           
  7071                           ; BSR set to: 0
  7072                           
  7073                           ; BSR set to: 0
  7074  013F74  0100               	movlb	0	; () banked
  7075  013F76  AF61               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  7076  013F78  D008               	goto	l2598
  7077                           
  7078                           ; BSR set to: 0
  7079  013F7A  0100               	movlb	0	; () banked
  7080  013F7C  6D60               	negf	___awdiv@dividend& (0+255),b
  7081  013F7E  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
  7082  013F80  B0D8               	btfsc	status,0,c
  7083  013F82  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
  7084                           
  7085                           ; BSR set to: 0
  7086  013F84  0E01               	movlw	1
  7087  013F86  0100               	movlb	0	; () banked
  7088  013F88  1B65               	xorwf	___awdiv@sign& (0+255),f,b
  7089  013F8A                     l2598:
  7090                           
  7091                           ; BSR set to: 0
  7092                           
  7093                           ; BSR set to: 0
  7094  013F8A  0E00               	movlw	0
  7095  013F8C  0100               	movlb	0	; () banked
  7096  013F8E  6F67               	movwf	(___awdiv@quotient+1)& (0+255),b
  7097  013F90  0E00               	movlw	0
  7098  013F92  6F66               	movwf	___awdiv@quotient& (0+255),b
  7099                           
  7100                           ; BSR set to: 0
  7101  013F94  0100               	movlb	0	; () banked
  7102  013F96  5162               	movf	___awdiv@divisor& (0+255),w,b
  7103  013F98  0100               	movlb	0	; () banked
  7104  013F9A  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  7105  013F9C  B4D8               	btfsc	status,2,c
  7106  013F9E  D02C               	goto	l2605
  7107                           
  7108                           ; BSR set to: 0
  7109  013FA0  0E01               	movlw	1
  7110  013FA2  0100               	movlb	0	; () banked
  7111  013FA4  6F64               	movwf	___awdiv@counter& (0+255),b
  7112  013FA6  D006               	goto	l2600
  7113  013FA8                     
  7114                           ; BSR set to: 0
  7115                           
  7116                           ; BSR set to: 0
  7117  013FA8  0100               	movlb	0	; () banked
  7118  013FAA  90D8               	bcf	status,0,c
  7119  013FAC  3762               	rlcf	___awdiv@divisor& (0+255),f,b
  7120  013FAE  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  7121  013FB0  0100               	movlb	0	; () banked
  7122  013FB2  2B64               	incf	___awdiv@counter& (0+255),f,b
  7123  013FB4                     l2600:
  7124                           
  7125                           ; BSR set to: 0
  7126                           
  7127                           ; BSR set to: 0
  7128  013FB4  0100               	movlb	0	; () banked
  7129  013FB6  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  7130  013FB8  D7F7               	goto	l2601
  7131  013FBA                     u9040:
  7132                           
  7133                           ; BSR set to: 0
  7134                           
  7135                           ; BSR set to: 0
  7136                           
  7137                           ; BSR set to: 0
  7138  013FBA  0100               	movlb	0	; () banked
  7139  013FBC  90D8               	bcf	status,0,c
  7140  013FBE  3766               	rlcf	___awdiv@quotient& (0+255),f,b
  7141  013FC0  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  7142                           
  7143                           ; BSR set to: 0
  7144  013FC2  0100               	movlb	0	; () banked
  7145  013FC4  5162               	movf	___awdiv@divisor& (0+255),w,b
  7146  013FC6  0100               	movlb	0	; () banked
  7147  013FC8  5D60               	subwf	___awdiv@dividend& (0+255),w,b
  7148  013FCA  0100               	movlb	0	; () banked
  7149  013FCC  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  7150  013FCE  0100               	movlb	0	; () banked
  7151  013FD0  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  7152  013FD2  A0D8               	btfss	status,0,c
  7153  013FD4  D00A               	goto	l2604
  7154                           
  7155                           ; BSR set to: 0
  7156  013FD6  0100               	movlb	0	; () banked
  7157  013FD8  5162               	movf	___awdiv@divisor& (0+255),w,b
  7158  013FDA  0100               	movlb	0	; () banked
  7159  013FDC  5F60               	subwf	___awdiv@dividend& (0+255),f,b
  7160  013FDE  0100               	movlb	0	; () banked
  7161  013FE0  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  7162  013FE2  0100               	movlb	0	; () banked
  7163  013FE4  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  7164                           
  7165                           ; BSR set to: 0
  7166  013FE6  0100               	movlb	0	; () banked
  7167  013FE8  8166               	bsf	___awdiv@quotient& (0+255),0,b
  7168  013FEA                     l2604:
  7169                           
  7170                           ; BSR set to: 0
  7171                           
  7172                           ; BSR set to: 0
  7173  013FEA  0100               	movlb	0	; () banked
  7174  013FEC  90D8               	bcf	status,0,c
  7175  013FEE  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  7176  013FF0  3362               	rrcf	___awdiv@divisor& (0+255),f,b
  7177                           
  7178                           ; BSR set to: 0
  7179  013FF2  0100               	movlb	0	; () banked
  7180  013FF4  2F64               	decfsz	___awdiv@counter& (0+255),f,b
  7181  013FF6  D7E1               	goto	u9040
  7182  013FF8                     l2605:
  7183                           
  7184                           ; BSR set to: 0
  7185                           
  7186                           ; BSR set to: 0
  7187                           
  7188                           ; BSR set to: 0
  7189  013FF8  0100               	movlb	0	; () banked
  7190  013FFA  5165               	movf	___awdiv@sign& (0+255),w,b
  7191  013FFC  0100               	movlb	0	; () banked
  7192  013FFE  B4D8               	btfsc	status,2,c
  7193  014000  D005               	goto	l2606
  7194                           
  7195                           ; BSR set to: 0
  7196  014002  0100               	movlb	0	; () banked
  7197  014004  6D66               	negf	___awdiv@quotient& (0+255),b
  7198  014006  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
  7199  014008  B0D8               	btfsc	status,0,c
  7200  01400A  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
  7201  01400C                     l2606:
  7202                           
  7203                           ; BSR set to: 0
  7204                           
  7205                           ; BSR set to: 0
  7206  01400C  C066  F060         	movff	___awdiv@quotient,?___awdiv
  7207  014010  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
  7208  014014  0012               	return	
  7209  014016                     __end_of___awdiv:
  7210                           	opt stack 0
  7211                           tblptru	equ	0xFF8
  7212                           tblptrh	equ	0xFF7
  7213                           tblptrl	equ	0xFF6
  7214                           tablat	equ	0xFF5
  7215                           prodh	equ	0xFF4
  7216                           prodl	equ	0xFF3
  7217                           postinc0	equ	0xFEE
  7218                           wreg	equ	0xFE8
  7219                           postdec1	equ	0xFE5
  7220                           fsr1h	equ	0xFE2
  7221                           fsr1l	equ	0xFE1
  7222                           indf2	equ	0xFDF
  7223                           postinc2	equ	0xFDE
  7224                           postdec2	equ	0xFDD
  7225                           fsr2h	equ	0xFDA
  7226                           fsr2l	equ	0xFD9
  7227                           status	equ	0xFD8
  7228                           
  7229 ;; *************** function _Console_IncrementCursor *****************
  7230 ;; Defined at:
  7231 ;;		line 243 in file "Library/Console.c"
  7232 ;; Parameters:    Size  Location     Type
  7233 ;;		None
  7234 ;; Auto vars:     Size  Location     Type
  7235 ;;		None
  7236 ;; Return value:  Size  Location     Type
  7237 ;;                  1    wreg      unsigned char 
  7238 ;; Registers used:
  7239 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7240 ;; Tracked objects:
  7241 ;;		On entry : 0/0
  7242 ;;		On exit  : 0/0
  7243 ;;		Unchanged: 0/0
  7244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7247 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7248 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7249 ;;Total ram usage:        2 bytes
  7250 ;; Hardware stack levels used:    1
  7251 ;; Hardware stack levels required when called:    8
  7252 ;; This function calls:
  7253 ;;		_Console_FormFeed
  7254 ;;		_Console_NewLine
  7255 ;; This function is called by:
  7256 ;;		_Console_Tab
  7257 ;;		_Console_PrintChar
  7258 ;; This function uses a non-reentrant model
  7259 ;;
  7260                           
  7261                           	psect	text22
  7262  015526                     __ptext22:
  7263                           	opt stack 0
  7264  015526                     _Console_IncrementCursor:
  7265                           	opt stack 17
  7266                           
  7267                           ;Console.c: 246: lBufferX += 1;
  7268                           
  7269                           ; BSR set to: 0
  7270                           ;incstack = 0
  7271  015526  0100               	movlb	0	; () banked
  7272  015528  2BDE               	incf	_lBufferX& (0+255),f,b
  7273                           
  7274                           ; BSR set to: 0
  7275                           ;Console.c: 248: gCursor.x += 6;
  7276  01552A  0E06               	movlw	6
  7277  01552C  2647               	addwf	_gCursor,f,c
  7278  01552E  0E00               	movlw	0
  7279  015530  2248               	addwfc	_gCursor+1,f,c
  7280                           
  7281                           ; BSR set to: 0
  7282                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
  7283  015532  0E06               	movlw	6
  7284  015534  2447               	addwf	_gCursor,w,c
  7285  015536  0100               	movlb	0	; () banked
  7286  015538  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
  7287  01553A  0E00               	movlw	0
  7288  01553C  2048               	addwfc	_gCursor+1,w,c
  7289  01553E  0100               	movlb	0	; () banked
  7290  015540  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  7291  015542  0100               	movlb	0	; () banked
  7292  015544  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  7293  015546  D009               	goto	l1004
  7294  015548  0100               	movlb	0	; () banked
  7295  01554A  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  7296  01554C  E104               	bnz	u8950
  7297  01554E  0E80               	movlw	128
  7298  015550  0100               	movlb	0	; () banked
  7299  015552  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
  7300  015554  B0D8               	btfsc	status,0,c
  7301  015556                     u8950:
  7302                           
  7303                           ; BSR set to: 0
  7304                           ;Console.c: 250: Console_NewLine();
  7305  015556  EC76  F0A4         	call	_Console_NewLine	;wreg free
  7306  01555A                     l1004:
  7307                           
  7308                           ;Console.c: 251: if (gCursor.y + 8>= 128)
  7309  01555A  0E08               	movlw	8
  7310  01555C  2449               	addwf	_gCursor+2,w,c
  7311  01555E  0100               	movlb	0	; () banked
  7312  015560  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
  7313  015562  0E00               	movlw	0
  7314  015564  204A               	addwfc	_gCursor+3,w,c
  7315  015566  0100               	movlb	0	; () banked
  7316  015568  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  7317  01556A  0100               	movlb	0	; () banked
  7318  01556C  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  7319  01556E  D00C               	goto	l1005
  7320  015570  0100               	movlb	0	; () banked
  7321  015572  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  7322  015574  E105               	bnz	u8960
  7323  015576  0E80               	movlw	128
  7324  015578  0100               	movlb	0	; () banked
  7325  01557A  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
  7326  01557C  A0D8               	btfss	status,0,c
  7327  01557E  D004               	goto	l1005
  7328  015580                     u8960:
  7329                           
  7330                           ; BSR set to: 0
  7331                           ;Console.c: 252: {
  7332                           ;Console.c: 253: Console_FormFeed();
  7333  015580  ECA9  F0A5         	call	_Console_FormFeed	;wreg free
  7334                           
  7335                           ;Console.c: 254: return 1;
  7336  015584  0E01               	movlw	1
  7337  015586  0012               	return	
  7338  015588                     l1005:
  7339                           
  7340                           ;Console.c: 255: }
  7341                           ;Console.c: 257: return 0;
  7342  015588  0E00               	movlw	0
  7343  01558A  0012               	return	
  7344  01558C                     __end_of_Console_IncrementCursor:
  7345                           	opt stack 0
  7346                           tblptru	equ	0xFF8
  7347                           tblptrh	equ	0xFF7
  7348                           tblptrl	equ	0xFF6
  7349                           tablat	equ	0xFF5
  7350                           prodh	equ	0xFF4
  7351                           prodl	equ	0xFF3
  7352                           postinc0	equ	0xFEE
  7353                           wreg	equ	0xFE8
  7354                           postdec1	equ	0xFE5
  7355                           fsr1h	equ	0xFE2
  7356                           fsr1l	equ	0xFE1
  7357                           indf2	equ	0xFDF
  7358                           postinc2	equ	0xFDE
  7359                           postdec2	equ	0xFDD
  7360                           fsr2h	equ	0xFDA
  7361                           fsr2l	equ	0xFD9
  7362                           status	equ	0xFD8
  7363                           
  7364 ;; *************** function _Console_NewLine *****************
  7365 ;; Defined at:
  7366 ;;		line 175 in file "Library/Console.c"
  7367 ;; Parameters:    Size  Location     Type
  7368 ;;		None
  7369 ;; Auto vars:     Size  Location     Type
  7370 ;;		None
  7371 ;; Return value:  Size  Location     Type
  7372 ;;                  1    wreg      void 
  7373 ;; Registers used:
  7374 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7375 ;; Tracked objects:
  7376 ;;		On entry : 0/0
  7377 ;;		On exit  : 0/0
  7378 ;;		Unchanged: 0/0
  7379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7382 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7383 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7384 ;;Total ram usage:        2 bytes
  7385 ;; Hardware stack levels used:    1
  7386 ;; Hardware stack levels required when called:    7
  7387 ;; This function calls:
  7388 ;;		Nothing
  7389 ;; This function is called by:
  7390 ;;		_Console_IncrementCursor
  7391 ;;		_Console_PrintChar
  7392 ;; This function uses a non-reentrant model
  7393 ;;
  7394                           
  7395                           	psect	text23
  7396  0148EC                     __ptext23:
  7397                           	opt stack 0
  7398  0148EC                     _Console_NewLine:
  7399                           	opt stack 17
  7400                           
  7401                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
  7402                           
  7403                           ;incstack = 0
  7404  0148EC  D03E               	goto	l983
  7405  0148EE                     
  7406                           ;Console.c: 179: {
  7407                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
  7408  0148EE  0100               	movlb	0	; () banked
  7409  0148F0  51DD               	movf	_lBufferY& (0+255),w,b
  7410  0148F2  0D14               	mullw	20
  7411  0148F4  0EC8               	movlw	low _lBuffer
  7412  0148F6  0100               	movlb	0	; () banked
  7413  0148F8  6F60               	movwf	??_Console_NewLine& (0+255),b
  7414  0148FA  0E04               	movlw	high _lBuffer
  7415  0148FC  0100               	movlb	0	; () banked
  7416  0148FE  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
  7417  014900  50F3               	movf	prodl,w,c
  7418  014902  0100               	movlb	0	; () banked
  7419  014904  2760               	addwf	??_Console_NewLine& (0+255),f,b
  7420  014906  50F4               	movf	prodh,w,c
  7421  014908  0100               	movlb	0	; () banked
  7422  01490A  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  7423  01490C  0100               	movlb	0	; () banked
  7424  01490E  51DE               	movf	_lBufferX& (0+255),w,b
  7425  014910  0D01               	mullw	1
  7426  014912  50F3               	movf	prodl,w,c
  7427  014914  0100               	movlb	0	; () banked
  7428  014916  2560               	addwf	??_Console_NewLine& (0+255),w,b
  7429  014918  6ED9               	movwf	fsr2l,c
  7430  01491A  50F4               	movf	prodh,w,c
  7431  01491C  0100               	movlb	0	; () banked
  7432  01491E  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  7433  014920  6EDA               	movwf	fsr2h,c
  7434  014922  50DF               	movf	indf2,w,c
  7435  014924  B4D8               	btfsc	status,2,c
  7436  014926  D01F               	goto	l985
  7437                           
  7438                           ; BSR set to: 0
  7439                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
  7440  014928  0E01               	movlw	1
  7441  01492A  0100               	movlb	0	; () banked
  7442  01492C  6FFF               	movwf	_change& (0+255),b
  7443                           
  7444                           ; BSR set to: 0
  7445  01492E  0100               	movlb	0	; () banked
  7446  014930  51DD               	movf	_lBufferY& (0+255),w,b
  7447  014932  0D14               	mullw	20
  7448  014934  0EC8               	movlw	low _lBuffer
  7449  014936  0100               	movlb	0	; () banked
  7450  014938  6F60               	movwf	??_Console_NewLine& (0+255),b
  7451  01493A  0E04               	movlw	high _lBuffer
  7452  01493C  0100               	movlb	0	; () banked
  7453  01493E  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
  7454  014940  50F3               	movf	prodl,w,c
  7455  014942  0100               	movlb	0	; () banked
  7456  014944  2760               	addwf	??_Console_NewLine& (0+255),f,b
  7457  014946  50F4               	movf	prodh,w,c
  7458  014948  0100               	movlb	0	; () banked
  7459  01494A  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  7460  01494C  0100               	movlb	0	; () banked
  7461  01494E  51DE               	movf	_lBufferX& (0+255),w,b
  7462  014950  0D01               	mullw	1
  7463  014952  50F3               	movf	prodl,w,c
  7464  014954  0100               	movlb	0	; () banked
  7465  014956  2560               	addwf	??_Console_NewLine& (0+255),w,b
  7466  014958  6ED9               	movwf	fsr2l,c
  7467  01495A  50F4               	movf	prodh,w,c
  7468  01495C  0100               	movlb	0	; () banked
  7469  01495E  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  7470  014960  6EDA               	movwf	fsr2h,c
  7471  014962  0E80               	movlw	128
  7472  014964  6EDF               	movwf	indf2,c
  7473  014966                     l985:
  7474                           
  7475                           ; BSR set to: 0
  7476                           ;Console.c: 182: lBufferX ++;
  7477                           
  7478                           ; BSR set to: 0
  7479  014966  0100               	movlb	0	; () banked
  7480  014968  2BDE               	incf	_lBufferX& (0+255),f,b
  7481  01496A                     l983:
  7482                           
  7483                           ; BSR set to: 0
  7484  01496A  0E13               	movlw	19
  7485  01496C  0100               	movlb	0	; () banked
  7486  01496E  65DE               	cpfsgt	_lBufferX& (0+255),b
  7487  014970  D7BE               	goto	l984
  7488                           
  7489                           ; BSR set to: 0
  7490                           ;Console.c: 183: }
  7491                           ;Console.c: 185: lBufferX = 0;
  7492                           
  7493                           ; BSR set to: 0
  7494  014972  0E00               	movlw	0
  7495  014974  0100               	movlb	0	; () banked
  7496  014976  6FDE               	movwf	_lBufferX& (0+255),b
  7497                           
  7498                           ; BSR set to: 0
  7499                           ;Console.c: 186: lBufferY ++;
  7500  014978  0100               	movlb	0	; () banked
  7501  01497A  2BDD               	incf	_lBufferY& (0+255),f,b
  7502                           
  7503                           ; BSR set to: 0
  7504                           ;Console.c: 188: gCursor.y += 8;
  7505  01497C  0E08               	movlw	8
  7506  01497E  2649               	addwf	_gCursor+2,f,c
  7507  014980  0E00               	movlw	0
  7508  014982  224A               	addwfc	_gCursor+3,f,c
  7509                           
  7510                           ; BSR set to: 0
  7511                           ;Console.c: 189: gCursor.x = 6;
  7512  014984  0E00               	movlw	0
  7513  014986  6E48               	movwf	_gCursor+1,c
  7514  014988  0E06               	movlw	6
  7515  01498A  6E47               	movwf	_gCursor,c
  7516                           
  7517                           ; BSR set to: 0
  7518  01498C  0012               	return		;funcret
  7519  01498E                     __end_of_Console_NewLine:
  7520                           	opt stack 0
  7521                           tblptru	equ	0xFF8
  7522                           tblptrh	equ	0xFF7
  7523                           tblptrl	equ	0xFF6
  7524                           tablat	equ	0xFF5
  7525                           prodh	equ	0xFF4
  7526                           prodl	equ	0xFF3
  7527                           postinc0	equ	0xFEE
  7528                           wreg	equ	0xFE8
  7529                           postdec1	equ	0xFE5
  7530                           fsr1h	equ	0xFE2
  7531                           fsr1l	equ	0xFE1
  7532                           indf2	equ	0xFDF
  7533                           postinc2	equ	0xFDE
  7534                           postdec2	equ	0xFDD
  7535                           fsr2h	equ	0xFDA
  7536                           fsr2l	equ	0xFD9
  7537                           status	equ	0xFD8
  7538                           
  7539 ;; *************** function _Console_FormFeed *****************
  7540 ;; Defined at:
  7541 ;;		line 192 in file "Library/Console.c"
  7542 ;; Parameters:    Size  Location     Type
  7543 ;;		None
  7544 ;; Auto vars:     Size  Location     Type
  7545 ;;  y               1    3[BANK0 ] unsigned char 
  7546 ;;  x               1    2[BANK0 ] unsigned char 
  7547 ;; Return value:  Size  Location     Type
  7548 ;;                  1    wreg      void 
  7549 ;; Registers used:
  7550 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7551 ;; Tracked objects:
  7552 ;;		On entry : 0/0
  7553 ;;		On exit  : 0/0
  7554 ;;		Unchanged: 0/0
  7555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7557 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7558 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7559 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7560 ;;Total ram usage:        4 bytes
  7561 ;; Hardware stack levels used:    1
  7562 ;; Hardware stack levels required when called:    7
  7563 ;; This function calls:
  7564 ;;		Nothing
  7565 ;; This function is called by:
  7566 ;;		_Console_IncrementCursor
  7567 ;;		_Console_PrintChar
  7568 ;; This function uses a non-reentrant model
  7569 ;;
  7570                           
  7571                           	psect	text24
  7572  014B52                     __ptext24:
  7573                           	opt stack 0
  7574  014B52                     _Console_FormFeed:
  7575                           	opt stack 17
  7576                           
  7577                           ;Console.c: 195: lBufferX = 0;
  7578                           
  7579                           ; BSR set to: 0
  7580                           ;incstack = 0
  7581  014B52  0E00               	movlw	0
  7582  014B54  0100               	movlb	0	; () banked
  7583  014B56  6FDE               	movwf	_lBufferX& (0+255),b
  7584                           
  7585                           ;Console.c: 196: lBufferY = 0;
  7586  014B58  0E00               	movlw	0
  7587  014B5A  0100               	movlb	0	; () banked
  7588  014B5C  6FDD               	movwf	_lBufferY& (0+255),b
  7589                           
  7590                           ;Console.c: 197: UINT8 x, y;
  7591                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
  7592  014B5E  0E00               	movlw	0
  7593  014B60  0100               	movlb	0	; () banked
  7594  014B62  6F63               	movwf	Console_FormFeed@y& (0+255),b
  7595  014B64                     l12123:
  7596                           
  7597                           ; BSR set to: 0
  7598  014B64  0E0E               	movlw	14
  7599  014B66  0100               	movlb	0	; () banked
  7600  014B68  6563               	cpfsgt	Console_FormFeed@y& (0+255),b
  7601  014B6A  D001               	goto	l990
  7602  014B6C  D02D               	goto	u8800
  7603  014B6E                     l990:
  7604                           
  7605                           ; BSR set to: 0
  7606                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
  7607                           
  7608                           ; BSR set to: 0
  7609  014B6E  0E00               	movlw	0
  7610  014B70  0100               	movlb	0	; () banked
  7611  014B72  6F62               	movwf	Console_FormFeed@x& (0+255),b
  7612  014B74                     l12129:
  7613                           
  7614                           ; BSR set to: 0
  7615  014B74  0E13               	movlw	19
  7616  014B76  0100               	movlb	0	; () banked
  7617  014B78  6562               	cpfsgt	Console_FormFeed@x& (0+255),b
  7618  014B7A  D001               	goto	l992
  7619  014B7C  D022               	goto	u8790
  7620  014B7E                     l992:
  7621                           
  7622                           ; BSR set to: 0
  7623                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
  7624                           
  7625                           ; BSR set to: 0
  7626  014B7E  0E01               	movlw	1
  7627  014B80  0100               	movlb	0	; () banked
  7628  014B82  6FFF               	movwf	_change& (0+255),b
  7629                           
  7630                           ; BSR set to: 0
  7631  014B84  0100               	movlb	0	; () banked
  7632  014B86  5163               	movf	Console_FormFeed@y& (0+255),w,b
  7633  014B88  0D14               	mullw	20
  7634  014B8A  0EC8               	movlw	low _lBuffer
  7635  014B8C  0100               	movlb	0	; () banked
  7636  014B8E  6F60               	movwf	??_Console_FormFeed& (0+255),b
  7637  014B90  0E04               	movlw	high _lBuffer
  7638  014B92  0100               	movlb	0	; () banked
  7639  014B94  6F61               	movwf	(??_Console_FormFeed+1)& (0+255),b
  7640  014B96  50F3               	movf	prodl,w,c
  7641  014B98  0100               	movlb	0	; () banked
  7642  014B9A  2760               	addwf	??_Console_FormFeed& (0+255),f,b
  7643  014B9C  50F4               	movf	prodh,w,c
  7644  014B9E  0100               	movlb	0	; () banked
  7645  014BA0  2361               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
  7646  014BA2  0100               	movlb	0	; () banked
  7647  014BA4  5162               	movf	Console_FormFeed@x& (0+255),w,b
  7648  014BA6  0D01               	mullw	1
  7649  014BA8  50F3               	movf	prodl,w,c
  7650  014BAA  0100               	movlb	0	; () banked
  7651  014BAC  2560               	addwf	??_Console_FormFeed& (0+255),w,b
  7652  014BAE  6ED9               	movwf	fsr2l,c
  7653  014BB0  50F4               	movf	prodh,w,c
  7654  014BB2  0100               	movlb	0	; () banked
  7655  014BB4  2161               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
  7656  014BB6  6EDA               	movwf	fsr2h,c
  7657  014BB8  0E80               	movlw	128
  7658  014BBA  6EDF               	movwf	indf2,c
  7659                           
  7660                           ; BSR set to: 0
  7661  014BBC  0100               	movlb	0	; () banked
  7662  014BBE  2B62               	incf	Console_FormFeed@x& (0+255),f,b
  7663  014BC0  D7D9               	goto	l12129
  7664  014BC2                     u8790:
  7665                           
  7666                           ; BSR set to: 0
  7667                           
  7668                           ; BSR set to: 0
  7669  014BC2  0100               	movlb	0	; () banked
  7670  014BC4  2B63               	incf	Console_FormFeed@y& (0+255),f,b
  7671  014BC6  D7CE               	goto	l12123
  7672  014BC8                     u8800:
  7673                           
  7674                           ; BSR set to: 0
  7675                           ;Console.c: 204: clearall = 1;
  7676                           
  7677                           ; BSR set to: 0
  7678  014BC8  0E01               	movlw	1
  7679  014BCA  0100               	movlb	0	; () banked
  7680  014BCC  6FDF               	movwf	_clearall& (0+255),b
  7681                           
  7682                           ;Console.c: 205: gCursor.x = 6;
  7683  014BCE  0E00               	movlw	0
  7684  014BD0  6E48               	movwf	_gCursor+1,c
  7685  014BD2  0E06               	movlw	6
  7686  014BD4  6E47               	movwf	_gCursor,c
  7687                           
  7688                           ;Console.c: 206: gCursor.y = 6;
  7689  014BD6  0E00               	movlw	0
  7690  014BD8  6E4A               	movwf	_gCursor+3,c
  7691  014BDA  0E06               	movlw	6
  7692  014BDC  6E49               	movwf	_gCursor+2,c
  7693                           
  7694                           ; BSR set to: 0
  7695  014BDE  0012               	return		;funcret
  7696  014BE0                     __end_of_Console_FormFeed:
  7697                           	opt stack 0
  7698                           tblptru	equ	0xFF8
  7699                           tblptrh	equ	0xFF7
  7700                           tblptrl	equ	0xFF6
  7701                           tablat	equ	0xFF5
  7702                           prodh	equ	0xFF4
  7703                           prodl	equ	0xFF3
  7704                           postinc0	equ	0xFEE
  7705                           wreg	equ	0xFE8
  7706                           postdec1	equ	0xFE5
  7707                           fsr1h	equ	0xFE2
  7708                           fsr1l	equ	0xFE1
  7709                           indf2	equ	0xFDF
  7710                           postinc2	equ	0xFDE
  7711                           postdec2	equ	0xFDD
  7712                           fsr2h	equ	0xFDA
  7713                           fsr2l	equ	0xFD9
  7714                           status	equ	0xFD8
  7715                           
  7716 ;; *************** function _Console_ResetCursor *****************
  7717 ;; Defined at:
  7718 ;;		line 297 in file "Library/Console.c"
  7719 ;; Parameters:    Size  Location     Type
  7720 ;;		None
  7721 ;; Auto vars:     Size  Location     Type
  7722 ;;		None
  7723 ;; Return value:  Size  Location     Type
  7724 ;;                  1    wreg      void 
  7725 ;; Registers used:
  7726 ;;		wreg, status,2
  7727 ;; Tracked objects:
  7728 ;;		On entry : 0/0
  7729 ;;		On exit  : 0/0
  7730 ;;		Unchanged: 0/0
  7731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7735 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7736 ;;Total ram usage:        0 bytes
  7737 ;; Hardware stack levels used:    1
  7738 ;; Hardware stack levels required when called:    7
  7739 ;; This function calls:
  7740 ;;		Nothing
  7741 ;; This function is called by:
  7742 ;;		_Console_PrintChar
  7743 ;; This function uses a non-reentrant model
  7744 ;;
  7745                           
  7746                           	psect	text25
  7747  016216                     __ptext25:
  7748                           	opt stack 0
  7749  016216                     _Console_ResetCursor:
  7750                           	opt stack 19
  7751                           
  7752                           ;Console.c: 299: gCursor.x = 6;
  7753                           
  7754                           ; BSR set to: 0
  7755                           ;incstack = 0
  7756  016216  0E00               	movlw	0
  7757  016218  6E48               	movwf	_gCursor+1,c
  7758  01621A  0E06               	movlw	6
  7759  01621C  6E47               	movwf	_gCursor,c
  7760                           
  7761                           ;Console.c: 300: gCursor.y = 6;
  7762  01621E  0E00               	movlw	0
  7763  016220  6E4A               	movwf	_gCursor+3,c
  7764  016222  0E06               	movlw	6
  7765  016224  6E49               	movwf	_gCursor+2,c
  7766                           
  7767                           ;Console.c: 303: lBufferX = 0;
  7768  016226  0E00               	movlw	0
  7769  016228  0100               	movlb	0	; () banked
  7770  01622A  6FDE               	movwf	_lBufferX& (0+255),b
  7771                           
  7772                           ;Console.c: 304: lBufferY = 0;
  7773  01622C  0E00               	movlw	0
  7774  01622E  0100               	movlb	0	; () banked
  7775  016230  6FDD               	movwf	_lBufferY& (0+255),b
  7776                           
  7777                           ; BSR set to: 0
  7778  016232  0012               	return		;funcret
  7779  016234                     __end_of_Console_ResetCursor:
  7780                           	opt stack 0
  7781                           tblptru	equ	0xFF8
  7782                           tblptrh	equ	0xFF7
  7783                           tblptrl	equ	0xFF6
  7784                           tablat	equ	0xFF5
  7785                           prodh	equ	0xFF4
  7786                           prodl	equ	0xFF3
  7787                           postinc0	equ	0xFEE
  7788                           wreg	equ	0xFE8
  7789                           postdec1	equ	0xFE5
  7790                           fsr1h	equ	0xFE2
  7791                           fsr1l	equ	0xFE1
  7792                           indf2	equ	0xFDF
  7793                           postinc2	equ	0xFDE
  7794                           postdec2	equ	0xFDD
  7795                           fsr2h	equ	0xFDA
  7796                           fsr2l	equ	0xFD9
  7797                           status	equ	0xFD8
  7798                           
  7799 ;; *************** function _Console_Backspace *****************
  7800 ;; Defined at:
  7801 ;;		line 209 in file "Library/Console.c"
  7802 ;; Parameters:    Size  Location     Type
  7803 ;;		None
  7804 ;; Auto vars:     Size  Location     Type
  7805 ;;		None
  7806 ;; Return value:  Size  Location     Type
  7807 ;;                  1    wreg      void 
  7808 ;; Registers used:
  7809 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7810 ;; Tracked objects:
  7811 ;;		On entry : 0/0
  7812 ;;		On exit  : 0/0
  7813 ;;		Unchanged: 0/0
  7814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7818 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7819 ;;Total ram usage:        0 bytes
  7820 ;; Hardware stack levels used:    1
  7821 ;; Hardware stack levels required when called:    8
  7822 ;; This function calls:
  7823 ;;		_Console_ClearCursor
  7824 ;; This function is called by:
  7825 ;;		_Console_PrintChar
  7826 ;; This function uses a non-reentrant model
  7827 ;;
  7828                           
  7829                           	psect	text26
  7830  01577A                     __ptext26:
  7831                           	opt stack 0
  7832  01577A                     _Console_Backspace:
  7833                           	opt stack 18
  7834                           
  7835                           ;Console.c: 211: if (lBufferX > 0)
  7836                           
  7837                           ; BSR set to: 0
  7838                           ;incstack = 0
  7839  01577A  0100               	movlb	0	; () banked
  7840  01577C  51DE               	movf	_lBufferX& (0+255),w,b
  7841  01577E  B4D8               	btfsc	status,2,c
  7842  015780  D007               	goto	l997
  7843                           
  7844                           ; BSR set to: 0
  7845                           ;Console.c: 212: {
  7846                           ;Console.c: 213: gCursor.x -= 6;
  7847  015782  0EFA               	movlw	250
  7848  015784  2647               	addwf	_gCursor,f,c
  7849  015786  0EFF               	movlw	255
  7850  015788  2248               	addwfc	_gCursor+1,f,c
  7851                           
  7852                           ; BSR set to: 0
  7853                           ;Console.c: 216: lBufferX --;
  7854  01578A  0100               	movlb	0	; () banked
  7855  01578C  07DE               	decf	_lBufferX& (0+255),f,b
  7856                           
  7857                           ;Console.c: 218: }
  7858  01578E  D020               	goto	l1000
  7859  015790                     l997:
  7860                           
  7861                           ; BSR set to: 0
  7862                           ;Console.c: 219: else if (lBufferY > 0)
  7863                           
  7864                           ; BSR set to: 0
  7865  015790  0100               	movlb	0	; () banked
  7866  015792  51DD               	movf	_lBufferY& (0+255),w,b
  7867  015794  B4D8               	btfsc	status,2,c
  7868  015796  D00E               	goto	l999
  7869                           
  7870                           ; BSR set to: 0
  7871                           ;Console.c: 220: {
  7872                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
  7873  015798  0E00               	movlw	0
  7874  01579A  6E48               	movwf	_gCursor+1,c
  7875  01579C  0E72               	movlw	114
  7876  01579E  6E47               	movwf	_gCursor,c
  7877                           
  7878                           ; BSR set to: 0
  7879                           ;Console.c: 222: gCursor.y -= 8;
  7880  0157A0  0EF8               	movlw	248
  7881  0157A2  2649               	addwf	_gCursor+2,f,c
  7882  0157A4  0EFF               	movlw	255
  7883  0157A6  224A               	addwfc	_gCursor+3,f,c
  7884                           
  7885                           ; BSR set to: 0
  7886                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
  7887  0157A8  0E13               	movlw	19
  7888  0157AA  0100               	movlb	0	; () banked
  7889  0157AC  6FDE               	movwf	_lBufferX& (0+255),b
  7890                           
  7891                           ; BSR set to: 0
  7892                           ;Console.c: 226: lBufferY --;
  7893  0157AE  0100               	movlb	0	; () banked
  7894  0157B0  07DD               	decf	_lBufferY& (0+255),f,b
  7895                           
  7896                           ;Console.c: 228: }
  7897  0157B2  D00E               	goto	l1000
  7898  0157B4                     l999:
  7899                           
  7900                           ; BSR set to: 0
  7901                           ;Console.c: 229: else
  7902                           ;Console.c: 230: {
  7903                           ;Console.c: 231: gCursor.x = 6;
  7904                           
  7905                           ; BSR set to: 0
  7906  0157B4  0E00               	movlw	0
  7907  0157B6  6E48               	movwf	_gCursor+1,c
  7908  0157B8  0E06               	movlw	6
  7909  0157BA  6E47               	movwf	_gCursor,c
  7910                           
  7911                           ;Console.c: 232: gCursor.y = 6;
  7912  0157BC  0E00               	movlw	0
  7913  0157BE  6E4A               	movwf	_gCursor+3,c
  7914  0157C0  0E06               	movlw	6
  7915  0157C2  6E49               	movwf	_gCursor+2,c
  7916                           
  7917                           ;Console.c: 235: lBufferX = 0;
  7918  0157C4  0E00               	movlw	0
  7919  0157C6  0100               	movlb	0	; () banked
  7920  0157C8  6FDE               	movwf	_lBufferX& (0+255),b
  7921                           
  7922                           ;Console.c: 236: lBufferY = 0;
  7923  0157CA  0E00               	movlw	0
  7924  0157CC  0100               	movlb	0	; () banked
  7925  0157CE  6FDD               	movwf	_lBufferY& (0+255),b
  7926  0157D0                     l1000:
  7927                           
  7928                           ; BSR set to: 0
  7929                           ;Console.c: 238: }
  7930                           ;Console.c: 240: Console_ClearCursor();
  7931                           
  7932                           ; BSR set to: 0
  7933                           
  7934                           ; BSR set to: 0
  7935  0157D0  EC6F  F0AE         	call	_Console_ClearCursor	;wreg free
  7936  0157D4  0012               	return		;funcret
  7937  0157D6                     __end_of_Console_Backspace:
  7938                           	opt stack 0
  7939                           tblptru	equ	0xFF8
  7940                           tblptrh	equ	0xFF7
  7941                           tblptrl	equ	0xFF6
  7942                           tablat	equ	0xFF5
  7943                           prodh	equ	0xFF4
  7944                           prodl	equ	0xFF3
  7945                           postinc0	equ	0xFEE
  7946                           wreg	equ	0xFE8
  7947                           postdec1	equ	0xFE5
  7948                           fsr1h	equ	0xFE2
  7949                           fsr1l	equ	0xFE1
  7950                           indf2	equ	0xFDF
  7951                           postinc2	equ	0xFDE
  7952                           postdec2	equ	0xFDD
  7953                           fsr2h	equ	0xFDA
  7954                           fsr2l	equ	0xFD9
  7955                           status	equ	0xFD8
  7956                           
  7957 ;; *************** function _Console_ClearCursor *****************
  7958 ;; Defined at:
  7959 ;;		line 308 in file "Library/Console.c"
  7960 ;; Parameters:    Size  Location     Type
  7961 ;;		None
  7962 ;; Auto vars:     Size  Location     Type
  7963 ;;		None
  7964 ;; Return value:  Size  Location     Type
  7965 ;;                  1    wreg      void 
  7966 ;; Registers used:
  7967 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7968 ;; Tracked objects:
  7969 ;;		On entry : 0/0
  7970 ;;		On exit  : 0/0
  7971 ;;		Unchanged: 0/0
  7972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7975 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7976 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7977 ;;Total ram usage:        2 bytes
  7978 ;; Hardware stack levels used:    1
  7979 ;; Hardware stack levels required when called:    7
  7980 ;; This function calls:
  7981 ;;		Nothing
  7982 ;; This function is called by:
  7983 ;;		_Console_Backspace
  7984 ;;		_Console_Tab
  7985 ;; This function uses a non-reentrant model
  7986 ;;
  7987                           
  7988                           	psect	text27
  7989  015CDE                     __ptext27:
  7990                           	opt stack 0
  7991  015CDE                     _Console_ClearCursor:
  7992                           	opt stack 18
  7993                           
  7994                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
  7995                           
  7996                           ;incstack = 0
  7997  015CDE  0E01               	movlw	1
  7998  015CE0  0100               	movlb	0	; () banked
  7999  015CE2  6FFF               	movwf	_change& (0+255),b
  8000                           
  8001                           ; BSR set to: 0
  8002  015CE4  0100               	movlb	0	; () banked
  8003  015CE6  51DD               	movf	_lBufferY& (0+255),w,b
  8004  015CE8  0D14               	mullw	20
  8005  015CEA  0EC8               	movlw	low _lBuffer
  8006  015CEC  0100               	movlb	0	; () banked
  8007  015CEE  6F60               	movwf	??_Console_ClearCursor& (0+255),b
  8008  015CF0  0E04               	movlw	high _lBuffer
  8009  015CF2  0100               	movlb	0	; () banked
  8010  015CF4  6F61               	movwf	(??_Console_ClearCursor+1)& (0+255),b
  8011  015CF6  50F3               	movf	prodl,w,c
  8012  015CF8  0100               	movlb	0	; () banked
  8013  015CFA  2760               	addwf	??_Console_ClearCursor& (0+255),f,b
  8014  015CFC  50F4               	movf	prodh,w,c
  8015  015CFE  0100               	movlb	0	; () banked
  8016  015D00  2361               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
  8017  015D02  0100               	movlb	0	; () banked
  8018  015D04  51DE               	movf	_lBufferX& (0+255),w,b
  8019  015D06  0D01               	mullw	1
  8020  015D08  50F3               	movf	prodl,w,c
  8021  015D0A  0100               	movlb	0	; () banked
  8022  015D0C  2560               	addwf	??_Console_ClearCursor& (0+255),w,b
  8023  015D0E  6ED9               	movwf	fsr2l,c
  8024  015D10  50F4               	movf	prodh,w,c
  8025  015D12  0100               	movlb	0	; () banked
  8026  015D14  2161               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
  8027  015D16  6EDA               	movwf	fsr2h,c
  8028  015D18  0E80               	movlw	128
  8029  015D1A  6EDF               	movwf	indf2,c
  8030                           
  8031                           ; BSR set to: 0
  8032  015D1C  0012               	return		;funcret
  8033  015D1E                     __end_of_Console_ClearCursor:
  8034                           	opt stack 0
  8035                           tblptru	equ	0xFF8
  8036                           tblptrh	equ	0xFF7
  8037                           tblptrl	equ	0xFF6
  8038                           tablat	equ	0xFF5
  8039                           prodh	equ	0xFF4
  8040                           prodl	equ	0xFF3
  8041                           postinc0	equ	0xFEE
  8042                           wreg	equ	0xFE8
  8043                           postdec1	equ	0xFE5
  8044                           fsr1h	equ	0xFE2
  8045                           fsr1l	equ	0xFE1
  8046                           indf2	equ	0xFDF
  8047                           postinc2	equ	0xFDE
  8048                           postdec2	equ	0xFDD
  8049                           fsr2h	equ	0xFDA
  8050                           fsr2l	equ	0xFD9
  8051                           status	equ	0xFD8
  8052                           
  8053 ;; *************** function _irobot_stop_motion *****************
  8054 ;; Defined at:
  8055 ;;		line 288 in file "Library/iRobotSerial.c"
  8056 ;; Parameters:    Size  Location     Type
  8057 ;;  isScript        1    wreg     unsigned char 
  8058 ;; Auto vars:     Size  Location     Type
  8059 ;;  isScript        1   25[BANK0 ] unsigned char 
  8060 ;; Return value:  Size  Location     Type
  8061 ;;                  1    wreg      void 
  8062 ;; Registers used:
  8063 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8064 ;; Tracked objects:
  8065 ;;		On entry : 0/0
  8066 ;;		On exit  : 0/0
  8067 ;;		Unchanged: 0/0
  8068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8070 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8072 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8073 ;;Total ram usage:        1 bytes
  8074 ;; Hardware stack levels used:    1
  8075 ;; Hardware stack levels required when called:    9
  8076 ;; This function calls:
  8077 ;;		_irobot_move
  8078 ;; This function is called by:
  8079 ;;		_irobot_rotate_to
  8080 ;;		_mode1
  8081 ;;		_mode2
  8082 ;;		_mode4
  8083 ;;		_irobot_move_to_simple
  8084 ;; This function uses a non-reentrant model
  8085 ;;
  8086                           
  8087                           	psect	text28
  8088  015B86                     __ptext28:
  8089                           	opt stack 0
  8090  015B86                     _irobot_stop_motion:
  8091                           	opt stack 20
  8092                           
  8093                           ; BSR set to: 0
  8094                           ;incstack = 0
  8095                           ;irobot_stop_motion@isScript stored from wreg
  8096  015B86  0100               	movlb	0	; () banked
  8097  015B88  6F79               	movwf	irobot_stop_motion@isScript& (0+255),b
  8098                           
  8099                           ;iRobotSerial.c: 289: (isScript) ? irobot_move(1,0,0) : irobot_move(0,0,0);
  8100  015B8A  0100               	movlb	0	; () banked
  8101  015B8C  5179               	movf	irobot_stop_motion@isScript& (0+255),w,b
  8102  015B8E  0100               	movlb	0	; () banked
  8103  015B90  B4D8               	btfsc	status,2,c
  8104  015B92  D00E               	goto	l2163
  8105                           
  8106                           ; BSR set to: 0
  8107  015B94  0E00               	movlw	0
  8108  015B96  0100               	movlb	0	; () banked
  8109  015B98  6F71               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  8110  015B9A  0E00               	movlw	0
  8111  015B9C  6F70               	movwf	irobot_move@moveSpeed& (0+255),b
  8112  015B9E  0E00               	movlw	0
  8113  015BA0  0100               	movlb	0	; () banked
  8114  015BA2  6F73               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  8115  015BA4  0E00               	movlw	0
  8116  015BA6  6F72               	movwf	irobot_move@moveTurnRadius& (0+255),b
  8117  015BA8  0E01               	movlw	1
  8118  015BAA  EC7F  F0A1         	call	_irobot_move
  8119  015BAE  0012               	return	
  8120  015BB0                     l2163:
  8121  015BB0  0E00               	movlw	0
  8122  015BB2  0100               	movlb	0	; () banked
  8123  015BB4  6F71               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  8124  015BB6  0E00               	movlw	0
  8125  015BB8  6F70               	movwf	irobot_move@moveSpeed& (0+255),b
  8126  015BBA  0E00               	movlw	0
  8127  015BBC  0100               	movlb	0	; () banked
  8128  015BBE  6F73               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  8129  015BC0  0E00               	movlw	0
  8130  015BC2  6F72               	movwf	irobot_move@moveTurnRadius& (0+255),b
  8131  015BC4  0E00               	movlw	0
  8132  015BC6  EC7F  F0A1         	call	_irobot_move
  8133  015BCA  0012               	return	
  8134  015BCC                     __end_of_irobot_stop_motion:
  8135                           	opt stack 0
  8136                           tblptru	equ	0xFF8
  8137                           tblptrh	equ	0xFF7
  8138                           tblptrl	equ	0xFF6
  8139                           tablat	equ	0xFF5
  8140                           prodh	equ	0xFF4
  8141                           prodl	equ	0xFF3
  8142                           postinc0	equ	0xFEE
  8143                           wreg	equ	0xFE8
  8144                           postdec1	equ	0xFE5
  8145                           fsr1h	equ	0xFE2
  8146                           fsr1l	equ	0xFE1
  8147                           indf2	equ	0xFDF
  8148                           postinc2	equ	0xFDE
  8149                           postdec2	equ	0xFDD
  8150                           fsr2h	equ	0xFDA
  8151                           fsr2l	equ	0xFD9
  8152                           status	equ	0xFD8
  8153                           
  8154 ;; *************** function _irobot_move *****************
  8155 ;; Defined at:
  8156 ;;		line 220 in file "Library/iRobotSerial.c"
  8157 ;; Parameters:    Size  Location     Type
  8158 ;;  isScript        1    wreg     unsigned char 
  8159 ;;  moveSpeed       2   16[BANK0 ] short 
  8160 ;;  moveTurnRadi    2   18[BANK0 ] short 
  8161 ;; Auto vars:     Size  Location     Type
  8162 ;;  isScript        1   24[BANK0 ] unsigned char 
  8163 ;; Return value:  Size  Location     Type
  8164 ;;                  1    wreg      void 
  8165 ;; Registers used:
  8166 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8167 ;; Tracked objects:
  8168 ;;		On entry : 0/0
  8169 ;;		On exit  : 0/0
  8170 ;;		Unchanged: 0/0
  8171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8172 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8173 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8174 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8175 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8176 ;;Total ram usage:        9 bytes
  8177 ;; Hardware stack levels used:    1
  8178 ;; Hardware stack levels required when called:    8
  8179 ;; This function calls:
  8180 ;;		_eusart_putch
  8181 ;;		_load_iRScriptStack
  8182 ;;		_twos_complement_of
  8183 ;; This function is called by:
  8184 ;;		_irobot_rotate
  8185 ;;		_irobot_stop_motion
  8186 ;;		_irobot_move_straight
  8187 ;;		_irobot_move_to_simple
  8188 ;; This function uses a non-reentrant model
  8189 ;;
  8190                           
  8191                           	psect	text29
  8192  0142FE                     __ptext29:
  8193                           	opt stack 0
  8194  0142FE                     _irobot_move:
  8195                           	opt stack 20
  8196                           
  8197                           ;incstack = 0
  8198                           ;irobot_move@isScript stored from wreg
  8199  0142FE  0100               	movlb	0	; () banked
  8200  014300  6F78               	movwf	irobot_move@isScript& (0+255),b
  8201                           
  8202                           ;iRobotSerial.c: 221: moveSpeed = twos_complement_of(moveSpeed);
  8203  014302  C070  F060         	movff	irobot_move@moveSpeed,twos_complement_of@complementValue
  8204  014306  C071  F061         	movff	irobot_move@moveSpeed+1,twos_complement_of@complementValue+1
  8205  01430A  EC2C  F0AE         	call	_twos_complement_of	;wreg free
  8206  01430E  C060  F070         	movff	?_twos_complement_of,irobot_move@moveSpeed
  8207  014312  C061  F071         	movff	?_twos_complement_of+1,irobot_move@moveSpeed+1
  8208                           
  8209                           ;iRobotSerial.c: 222: moveTurnRadius = twos_complement_of(moveTurnRadius);
  8210  014316  C072  F060         	movff	irobot_move@moveTurnRadius,twos_complement_of@complementValue
  8211  01431A  C073  F061         	movff	irobot_move@moveTurnRadius+1,twos_complement_of@complementValue+1
  8212  01431E  EC2C  F0AE         	call	_twos_complement_of	;wreg free
  8213  014322  C060  F072         	movff	?_twos_complement_of,irobot_move@moveTurnRadius
  8214  014326  C061  F073         	movff	?_twos_complement_of+1,irobot_move@moveTurnRadius+1
  8215                           
  8216                           ;iRobotSerial.c: 224: if (isScript) {
  8217  01432A  0100               	movlb	0	; () banked
  8218  01432C  5178               	movf	irobot_move@isScript& (0+255),w,b
  8219  01432E  0100               	movlb	0	; () banked
  8220  014330  B4D8               	btfsc	status,2,c
  8221  014332  D029               	goto	l2135
  8222                           
  8223                           ; BSR set to: 0
  8224                           ;iRobotSerial.c: 225: load_iRScriptStack(5, iR_DRIVE,
  8225                           ;iRobotSerial.c: 226: (((moveSpeed)>>8) & 0xFF), ((moveSpeed) & 0xFF),
  8226                           ;iRobotSerial.c: 227: (((moveTurnRadius)>>8) & 0xFF), ((moveTurnRadius) & 0xFF));
  8227  014334  0E00               	movlw	0
  8228  014336  0100               	movlb	0	; () banked
  8229  014338  6F61               	movwf	(?_load_iRScriptStack+1)& (0+255),b
  8230  01433A  0E89               	movlw	137
  8231  01433C  6F60               	movwf	?_load_iRScriptStack& (0+255),b
  8232  01433E  C071  F074         	movff	irobot_move@moveSpeed+1,??_irobot_move
  8233  014342  0100               	movlb	0	; () banked
  8234  014344  6B75               	clrf	(??_irobot_move+1)& (0+255),b
  8235  014346  BF74               	btfsc	??_irobot_move& (0+255),7,b
  8236  014348  6975               	setf	(??_irobot_move+1)& (0+255),b
  8237  01434A  0100               	movlb	0	; () banked
  8238  01434C  5174               	movf	??_irobot_move& (0+255),w,b
  8239  01434E  0100               	movlb	0	; () banked
  8240  014350  6F62               	movwf	(?_load_iRScriptStack+2)& (0+255),b
  8241  014352  6B63               	clrf	(?_load_iRScriptStack+3)& (0+255),b
  8242  014354  0100               	movlb	0	; () banked
  8243  014356  5170               	movf	irobot_move@moveSpeed& (0+255),w,b
  8244  014358  0100               	movlb	0	; () banked
  8245  01435A  6F64               	movwf	(?_load_iRScriptStack+4)& (0+255),b
  8246  01435C  6B65               	clrf	(?_load_iRScriptStack+5)& (0+255),b
  8247  01435E  C073  F076         	movff	irobot_move@moveTurnRadius+1,??_irobot_move+2
  8248  014362  0100               	movlb	0	; () banked
  8249  014364  6B77               	clrf	(??_irobot_move+3)& (0+255),b
  8250  014366  BF76               	btfsc	(??_irobot_move+2)& (0+255),7,b
  8251  014368  6977               	setf	(??_irobot_move+3)& (0+255),b
  8252  01436A  0100               	movlb	0	; () banked
  8253  01436C  5176               	movf	(??_irobot_move+2)& (0+255),w,b
  8254  01436E  0100               	movlb	0	; () banked
  8255  014370  6F66               	movwf	(?_load_iRScriptStack+6)& (0+255),b
  8256  014372  6B67               	clrf	(?_load_iRScriptStack+7)& (0+255),b
  8257  014374  0100               	movlb	0	; () banked
  8258  014376  5172               	movf	irobot_move@moveTurnRadius& (0+255),w,b
  8259  014378  0100               	movlb	0	; () banked
  8260  01437A  6F68               	movwf	(?_load_iRScriptStack+8)& (0+255),b
  8261  01437C  6B69               	clrf	(?_load_iRScriptStack+9)& (0+255),b
  8262  01437E  0E05               	movlw	5
  8263  014380  ECC1  F0A9         	call	_load_iRScriptStack
  8264                           
  8265                           ;iRobotSerial.c: 228: }
  8266  014384  0012               	return	
  8267  014386                     l2135:
  8268                           
  8269                           ;iRobotSerial.c: 229: else{
  8270                           ;iRobotSerial.c: 230: eusart_putch(iR_DRIVE);
  8271  014386  0E89               	movlw	137
  8272  014388  EC57  F0B2         	call	_eusart_putch
  8273                           
  8274                           ;iRobotSerial.c: 231: eusart_putch((((moveSpeed)>>8) & 0xFF));
  8275  01438C  0100               	movlb	0	; () banked
  8276  01438E  5171               	movf	(irobot_move@moveSpeed+1)& (0+255),w,b
  8277  014390  EC57  F0B2         	call	_eusart_putch
  8278                           
  8279                           ;iRobotSerial.c: 232: eusart_putch(((moveSpeed) & 0xFF));
  8280  014394  0100               	movlb	0	; () banked
  8281  014396  5170               	movf	irobot_move@moveSpeed& (0+255),w,b
  8282  014398  EC57  F0B2         	call	_eusart_putch
  8283                           
  8284                           ;iRobotSerial.c: 233: eusart_putch((((moveTurnRadius)>>8) & 0xFF));
  8285  01439C  0100               	movlb	0	; () banked
  8286  01439E  5173               	movf	(irobot_move@moveTurnRadius+1)& (0+255),w,b
  8287  0143A0  EC57  F0B2         	call	_eusart_putch
  8288                           
  8289                           ;iRobotSerial.c: 234: eusart_putch(((moveTurnRadius) & 0xFF));
  8290  0143A4  0100               	movlb	0	; () banked
  8291  0143A6  5172               	movf	irobot_move@moveTurnRadius& (0+255),w,b
  8292  0143A8  EC57  F0B2         	call	_eusart_putch
  8293  0143AC  0012               	return	
  8294  0143AE                     __end_of_irobot_move:
  8295                           	opt stack 0
  8296                           tblptru	equ	0xFF8
  8297                           tblptrh	equ	0xFF7
  8298                           tblptrl	equ	0xFF6
  8299                           tablat	equ	0xFF5
  8300                           prodh	equ	0xFF4
  8301                           prodl	equ	0xFF3
  8302                           postinc0	equ	0xFEE
  8303                           wreg	equ	0xFE8
  8304                           postdec1	equ	0xFE5
  8305                           fsr1h	equ	0xFE2
  8306                           fsr1l	equ	0xFE1
  8307                           indf2	equ	0xFDF
  8308                           postinc2	equ	0xFDE
  8309                           postdec2	equ	0xFDD
  8310                           fsr2h	equ	0xFDA
  8311                           fsr2l	equ	0xFD9
  8312                           status	equ	0xFD8
  8313                           
  8314 ;; *************** function _twos_complement_of *****************
  8315 ;; Defined at:
  8316 ;;		line 167 in file "Library/iRobotSerial.c"
  8317 ;; Parameters:    Size  Location     Type
  8318 ;;  complementVa    2    0[BANK0 ] short 
  8319 ;; Auto vars:     Size  Location     Type
  8320 ;;		None
  8321 ;; Return value:  Size  Location     Type
  8322 ;;                  2    0[BANK0 ] unsigned short 
  8323 ;; Registers used:
  8324 ;;		wreg, status,2, status,0
  8325 ;; Tracked objects:
  8326 ;;		On entry : 0/0
  8327 ;;		On exit  : 0/0
  8328 ;;		Unchanged: 0/0
  8329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8330 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8331 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8333 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8334 ;;Total ram usage:        2 bytes
  8335 ;; Hardware stack levels used:    1
  8336 ;; Hardware stack levels required when called:    7
  8337 ;; This function calls:
  8338 ;;		Nothing
  8339 ;; This function is called by:
  8340 ;;		_irobot_angle_wait
  8341 ;;		_irobot_move
  8342 ;;		_irobot_distance_wait
  8343 ;; This function uses a non-reentrant model
  8344 ;;
  8345                           
  8346                           	psect	text30
  8347  015C58                     __ptext30:
  8348                           	opt stack 0
  8349  015C58                     _twos_complement_of:
  8350                           	opt stack 20
  8351                           
  8352                           ;iRobotSerial.c: 168: if (complementValue < 0) {
  8353                           
  8354                           ;incstack = 0
  8355  015C58  0100               	movlb	0	; () banked
  8356  015C5A  AF61               	btfss	(twos_complement_of@complementValue+1)& (0+255),7,b
  8357  015C5C  D01A               	goto	l2106
  8358                           
  8359                           ; BSR set to: 0
  8360                           ;iRobotSerial.c: 169: complementValue = ((complementValue) > 0 ? (complementValue) : -(c
      +                          omplementValue));
  8361  015C5E  0100               	movlb	0	; () banked
  8362  015C60  BF61               	btfsc	(twos_complement_of@complementValue+1)& (0+255),7,b
  8363  015C62  D007               	goto	u9390
  8364  015C64  0100               	movlb	0	; () banked
  8365  015C66  5161               	movf	(twos_complement_of@complementValue+1)& (0+255),w,b
  8366  015C68  E10A               	bnz	l2108
  8367  015C6A  0100               	movlb	0	; () banked
  8368  015C6C  0560               	decf	twos_complement_of@complementValue& (0+255),w,b
  8369  015C6E  B0D8               	btfsc	status,0,c
  8370  015C70  D006               	goto	l2108
  8371  015C72                     u9390:
  8372                           
  8373                           ; BSR set to: 0
  8374  015C72  0100               	movlb	0	; () banked
  8375  015C74  6D60               	negf	twos_complement_of@complementValue& (0+255),b
  8376  015C76  1F61               	comf	(twos_complement_of@complementValue+1)& (0+255),f,b
  8377  015C78  B0D8               	btfsc	status,0,c
  8378  015C7A  2B61               	incf	(twos_complement_of@complementValue+1)& (0+255),f,b
  8379  015C7C  D004               	goto	l2110
  8380  015C7E                     l2108:
  8381                           
  8382                           ; BSR set to: 0
  8383  015C7E  C060  F060         	movff	twos_complement_of@complementValue,twos_complement_of@complementValue
  8384  015C82  C061  F061         	movff	twos_complement_of@complementValue+1,twos_complement_of@complementValue+1
  8385  015C86                     l2110:
  8386                           
  8387                           ; BSR set to: 0
  8388                           ;iRobotSerial.c: 170: complementValue = ~complementValue;
  8389                           
  8390                           ; BSR set to: 0
  8391  015C86  0100               	movlb	0	; () banked
  8392  015C88  1F60               	comf	twos_complement_of@complementValue& (0+255),f,b
  8393  015C8A  1F61               	comf	(twos_complement_of@complementValue+1)& (0+255),f,b
  8394                           
  8395                           ;iRobotSerial.c: 171: complementValue += 1;
  8396  015C8C  0100               	movlb	0	; () banked
  8397  015C8E  4B60               	infsnz	twos_complement_of@complementValue& (0+255),f,b
  8398  015C90  2B61               	incf	(twos_complement_of@complementValue+1)& (0+255),f,b
  8399  015C92                     l2106:
  8400                           
  8401                           ; BSR set to: 0
  8402                           ;iRobotSerial.c: 172: }
  8403                           ;iRobotSerial.c: 173: return complementValue;
  8404                           
  8405                           ; BSR set to: 0
  8406  015C92  C060  F060         	movff	twos_complement_of@complementValue,?_twos_complement_of
  8407  015C96  C061  F061         	movff	twos_complement_of@complementValue+1,?_twos_complement_of+1
  8408  015C9A  0012               	return	
  8409  015C9C                     __end_of_twos_complement_of:
  8410                           	opt stack 0
  8411                           tblptru	equ	0xFF8
  8412                           tblptrh	equ	0xFF7
  8413                           tblptrl	equ	0xFF6
  8414                           tablat	equ	0xFF5
  8415                           prodh	equ	0xFF4
  8416                           prodl	equ	0xFF3
  8417                           postinc0	equ	0xFEE
  8418                           wreg	equ	0xFE8
  8419                           postdec1	equ	0xFE5
  8420                           fsr1h	equ	0xFE2
  8421                           fsr1l	equ	0xFE1
  8422                           indf2	equ	0xFDF
  8423                           postinc2	equ	0xFDE
  8424                           postdec2	equ	0xFDD
  8425                           fsr2h	equ	0xFDA
  8426                           fsr2l	equ	0xFD9
  8427                           status	equ	0xFD8
  8428                           
  8429 ;; *************** function _irobot_song_play *****************
  8430 ;; Defined at:
  8431 ;;		line 274 in file "Library/iRobotSerial.c"
  8432 ;; Parameters:    Size  Location     Type
  8433 ;;  songNumber      1    wreg     unsigned char 
  8434 ;; Auto vars:     Size  Location     Type
  8435 ;;  songNumber      1    1[BANK0 ] unsigned char 
  8436 ;; Return value:  Size  Location     Type
  8437 ;;                  1    wreg      void 
  8438 ;; Registers used:
  8439 ;;		wreg, status,2, cstack
  8440 ;; Tracked objects:
  8441 ;;		On entry : 0/0
  8442 ;;		On exit  : 0/0
  8443 ;;		Unchanged: 0/0
  8444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8446 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8448 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8449 ;;Total ram usage:        1 bytes
  8450 ;; Hardware stack levels used:    1
  8451 ;; Hardware stack levels required when called:    8
  8452 ;; This function calls:
  8453 ;;		_eusart_putch
  8454 ;; This function is called by:
  8455 ;;		_mode1
  8456 ;;		_mode2
  8457 ;;		_mode4
  8458 ;; This function uses a non-reentrant model
  8459 ;;
  8460                           
  8461                           	psect	text31
  8462  016434                     __ptext31:
  8463                           	opt stack 0
  8464  016434                     _irobot_song_play:
  8465                           	opt stack 21
  8466                           
  8467                           ; BSR set to: 0
  8468                           ;incstack = 0
  8469                           ;irobot_song_play@songNumber stored from wreg
  8470  016434  0100               	movlb	0	; () banked
  8471  016436  6F61               	movwf	irobot_song_play@songNumber& (0+255),b
  8472                           
  8473                           ;iRobotSerial.c: 275: eusart_putch(iR_SONG_PLAY);
  8474  016438  0E8D               	movlw	141
  8475  01643A  EC57  F0B2         	call	_eusart_putch
  8476                           
  8477                           ;iRobotSerial.c: 276: eusart_putch(songNumber);
  8478  01643E  0100               	movlb	0	; () banked
  8479  016440  5161               	movf	irobot_song_play@songNumber& (0+255),w,b
  8480  016442  EC57  F0B2         	call	_eusart_putch
  8481  016446  0012               	return		;funcret
  8482  016448                     __end_of_irobot_song_play:
  8483                           	opt stack 0
  8484                           tblptru	equ	0xFF8
  8485                           tblptrh	equ	0xFF7
  8486                           tblptrl	equ	0xFF6
  8487                           tablat	equ	0xFF5
  8488                           prodh	equ	0xFF4
  8489                           prodl	equ	0xFF3
  8490                           postinc0	equ	0xFEE
  8491                           wreg	equ	0xFE8
  8492                           postdec1	equ	0xFE5
  8493                           fsr1h	equ	0xFE2
  8494                           fsr1l	equ	0xFE1
  8495                           indf2	equ	0xFDF
  8496                           postinc2	equ	0xFDE
  8497                           postdec2	equ	0xFDD
  8498                           fsr2h	equ	0xFDA
  8499                           fsr2l	equ	0xFD9
  8500                           status	equ	0xFD8
  8501                           
  8502 ;; *************** function ___fltol *****************
  8503 ;; Defined at:
  8504 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fltol.c"
  8505 ;; Parameters:    Size  Location     Type
  8506 ;;  f1              4   82[BANK0 ] void 
  8507 ;; Auto vars:     Size  Location     Type
  8508 ;;  exp1            1    1[BANK1 ] unsigned char 
  8509 ;;  sign1           1    0[BANK1 ] unsigned char 
  8510 ;; Return value:  Size  Location     Type
  8511 ;;                  4   82[BANK0 ] long 
  8512 ;; Registers used:
  8513 ;;		wreg, status,2, status,0
  8514 ;; Tracked objects:
  8515 ;;		On entry : 0/0
  8516 ;;		On exit  : 0/0
  8517 ;;		Unchanged: 0/0
  8518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8519 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8520 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8521 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8522 ;;      Totals:         0       8       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8523 ;;Total ram usage:       10 bytes
  8524 ;; Hardware stack levels used:    1
  8525 ;; Hardware stack levels required when called:    7
  8526 ;; This function calls:
  8527 ;;		Nothing
  8528 ;; This function is called by:
  8529 ;;		_mode1
  8530 ;;		_mode4
  8531 ;; This function uses a non-reentrant model
  8532 ;;
  8533                           
  8534                           	psect	text32
  8535  0136AC                     __ptext32:
  8536                           	opt stack 0
  8537  0136AC                     ___fltol:
  8538                           	opt stack 22
  8539                           
  8540                           ;incstack = 0
  8541  0136AC  0100               	movlb	0	; () banked
  8542  0136AE  35B4               	rlcf	(___fltol@f1+2)& (0+255),w,b
  8543  0136B0  35B5               	rlcf	(___fltol@f1+3)& (0+255),w,b
  8544  0136B2  0101               	movlb	1	; () banked
  8545  0136B4  6F01               	movwf	___fltol@exp1& (0+255),b
  8546  0136B6  0101               	movlb	1	; () banked
  8547  0136B8  5101               	movf	___fltol@exp1& (0+255),w,b
  8548  0136BA  A4D8               	btfss	status,2,c
  8549  0136BC  D00A               	goto	l2659
  8550                           
  8551                           ; BSR set to: 1
  8552  0136BE  0E00               	movlw	0
  8553  0136C0  0100               	movlb	0	; () banked
  8554  0136C2  6FB2               	movwf	?___fltol& (0+255),b
  8555  0136C4  0E00               	movlw	0
  8556  0136C6  6FB3               	movwf	(?___fltol+1)& (0+255),b
  8557  0136C8  0E00               	movlw	0
  8558  0136CA  6FB4               	movwf	(?___fltol+2)& (0+255),b
  8559  0136CC  0E00               	movlw	0
  8560  0136CE  6FB5               	movwf	(?___fltol+3)& (0+255),b
  8561                           
  8562                           ; BSR set to: 0
  8563  0136D0  0012               	return	
  8564  0136D2                     l2659:
  8565                           
  8566                           ; BSR set to: 0
  8567  0136D2  C0B2  F0B6         	movff	___fltol@f1,??___fltol
  8568  0136D6  C0B3  F0B7         	movff	___fltol@f1+1,??___fltol+1
  8569  0136DA  C0B4  F0B8         	movff	___fltol@f1+2,??___fltol+2
  8570  0136DE  C0B5  F0B9         	movff	___fltol@f1+3,??___fltol+3
  8571  0136E2  0E20               	movlw	32
  8572  0136E4  D006               	goto	u11140
  8573  0136E6                     u11145:
  8574  0136E6  0100               	movlb	0	; () banked
  8575  0136E8  90D8               	bcf	status,0,c
  8576  0136EA  33B9               	rrcf	(??___fltol+3)& (0+255),f,b
  8577  0136EC  33B8               	rrcf	(??___fltol+2)& (0+255),f,b
  8578  0136EE  33B7               	rrcf	(??___fltol+1)& (0+255),f,b
  8579  0136F0  33B6               	rrcf	??___fltol& (0+255),f,b
  8580  0136F2                     u11140:
  8581  0136F2  2EE8               	decfsz	wreg,f,c
  8582  0136F4  D7F8               	goto	u11145
  8583  0136F6  0100               	movlb	0	; () banked
  8584  0136F8  51B6               	movf	??___fltol& (0+255),w,b
  8585  0136FA  0101               	movlb	1	; () banked
  8586  0136FC  6F00               	movwf	___fltol@sign1& (0+255),b
  8587                           
  8588                           ; BSR set to: 1
  8589  0136FE  0100               	movlb	0	; () banked
  8590  013700  8FB4               	bsf	(___fltol@f1+2)& (0+255),7,b
  8591                           
  8592                           ; BSR set to: 0
  8593  013702  0EFF               	movlw	255
  8594  013704  0100               	movlb	0	; () banked
  8595  013706  17B2               	andwf	___fltol@f1& (0+255),f,b
  8596  013708  0EFF               	movlw	255
  8597  01370A  17B3               	andwf	(___fltol@f1+1)& (0+255),f,b
  8598  01370C  0EFF               	movlw	255
  8599  01370E  17B4               	andwf	(___fltol@f1+2)& (0+255),f,b
  8600  013710  0E00               	movlw	0
  8601  013712  17B5               	andwf	(___fltol@f1+3)& (0+255),f,b
  8602                           
  8603                           ; BSR set to: 0
  8604  013714  0E96               	movlw	150
  8605  013716  0101               	movlb	1	; () banked
  8606  013718  5F01               	subwf	___fltol@exp1& (0+255),f,b
  8607                           
  8608                           ; BSR set to: 1
  8609  01371A  0101               	movlb	1	; () banked
  8610  01371C  AF01               	btfss	___fltol@exp1& (0+255),7,b
  8611  01371E  D01A               	goto	l2661
  8612                           
  8613                           ; BSR set to: 1
  8614  013720  0101               	movlb	1	; () banked
  8615  013722  5101               	movf	___fltol@exp1& (0+255),w,b
  8616  013724  0A80               	xorlw	128
  8617  013726  0F97               	addlw	151
  8618  013728  B0D8               	btfsc	status,0,c
  8619  01372A  D00A               	goto	l2662
  8620                           
  8621                           ; BSR set to: 1
  8622  01372C  0E00               	movlw	0
  8623  01372E  0100               	movlb	0	; () banked
  8624  013730  6FB2               	movwf	?___fltol& (0+255),b
  8625  013732  0E00               	movlw	0
  8626  013734  6FB3               	movwf	(?___fltol+1)& (0+255),b
  8627  013736  0E00               	movlw	0
  8628  013738  6FB4               	movwf	(?___fltol+2)& (0+255),b
  8629  01373A  0E00               	movlw	0
  8630  01373C  6FB5               	movwf	(?___fltol+3)& (0+255),b
  8631                           
  8632                           ; BSR set to: 0
  8633  01373E  0012               	return	
  8634  013740                     l2662:
  8635                           
  8636                           ; BSR set to: 0
  8637                           
  8638                           ; BSR set to: 0
  8639  013740  0100               	movlb	0	; () banked
  8640  013742  90D8               	bcf	status,0,c
  8641  013744  33B5               	rrcf	(___fltol@f1+3)& (0+255),f,b
  8642  013746  33B4               	rrcf	(___fltol@f1+2)& (0+255),f,b
  8643  013748  33B3               	rrcf	(___fltol@f1+1)& (0+255),f,b
  8644  01374A  33B2               	rrcf	___fltol@f1& (0+255),f,b
  8645                           
  8646                           ; BSR set to: 0
  8647  01374C  0101               	movlb	1	; () banked
  8648  01374E  3F01               	incfsz	___fltol@exp1& (0+255),f,b
  8649  013750  D7F7               	goto	l2662
  8650                           
  8651                           ; BSR set to: 1
  8652  013752  D01B               	goto	u11180
  8653  013754                     l2661:
  8654                           
  8655                           ; BSR set to: 1
  8656                           
  8657                           ; BSR set to: 1
  8658  013754  0E1F               	movlw	31
  8659  013756  0101               	movlb	1	; () banked
  8660  013758  6501               	cpfsgt	___fltol@exp1& (0+255),b
  8661  01375A  D012               	goto	l2667
  8662                           
  8663                           ; BSR set to: 1
  8664  01375C  0E00               	movlw	0
  8665  01375E  0100               	movlb	0	; () banked
  8666  013760  6FB2               	movwf	?___fltol& (0+255),b
  8667  013762  0E00               	movlw	0
  8668  013764  6FB3               	movwf	(?___fltol+1)& (0+255),b
  8669  013766  0E00               	movlw	0
  8670  013768  6FB4               	movwf	(?___fltol+2)& (0+255),b
  8671  01376A  0E00               	movlw	0
  8672  01376C  6FB5               	movwf	(?___fltol+3)& (0+255),b
  8673                           
  8674                           ; BSR set to: 0
  8675  01376E  0012               	return	
  8676  013770                     
  8677                           ; BSR set to: 0
  8678  013770  0100               	movlb	0	; () banked
  8679  013772  90D8               	bcf	status,0,c
  8680  013774  37B2               	rlcf	___fltol@f1& (0+255),f,b
  8681  013776  37B3               	rlcf	(___fltol@f1+1)& (0+255),f,b
  8682  013778  37B4               	rlcf	(___fltol@f1+2)& (0+255),f,b
  8683  01377A  37B5               	rlcf	(___fltol@f1+3)& (0+255),f,b
  8684  01377C  0101               	movlb	1	; () banked
  8685  01377E  0701               	decf	___fltol@exp1& (0+255),f,b
  8686  013780                     l2667:
  8687                           
  8688                           ; BSR set to: 1
  8689  013780  0101               	movlb	1	; () banked
  8690  013782  5101               	movf	___fltol@exp1& (0+255),w,b
  8691  013784  0101               	movlb	1	; () banked
  8692  013786  A4D8               	btfss	status,2,c
  8693  013788  D7F3               	goto	l2668
  8694  01378A                     u11180:
  8695                           
  8696                           ; BSR set to: 1
  8697                           
  8698                           ; BSR set to: 1
  8699                           
  8700                           ; BSR set to: 1
  8701  01378A  0101               	movlb	1	; () banked
  8702  01378C  5100               	movf	___fltol@sign1& (0+255),w,b
  8703  01378E  0101               	movlb	1	; () banked
  8704  013790  B4D8               	btfsc	status,2,c
  8705  013792  D009               	goto	l2670
  8706                           
  8707                           ; BSR set to: 1
  8708  013794  0100               	movlb	0	; () banked
  8709  013796  1FB5               	comf	(___fltol@f1+3)& (0+255),f,b
  8710  013798  1FB4               	comf	(___fltol@f1+2)& (0+255),f,b
  8711  01379A  1FB3               	comf	(___fltol@f1+1)& (0+255),f,b
  8712  01379C  6DB2               	negf	___fltol@f1& (0+255),b
  8713  01379E  0E00               	movlw	0
  8714  0137A0  23B3               	addwfc	(___fltol@f1+1)& (0+255),f,b
  8715  0137A2  23B4               	addwfc	(___fltol@f1+2)& (0+255),f,b
  8716  0137A4  23B5               	addwfc	(___fltol@f1+3)& (0+255),f,b
  8717  0137A6                     l2670:
  8718                           
  8719                           ; BSR set to: 0
  8720  0137A6  C0B2  F0B2         	movff	___fltol@f1,?___fltol
  8721  0137AA  C0B3  F0B3         	movff	___fltol@f1+1,?___fltol+1
  8722  0137AE  C0B4  F0B4         	movff	___fltol@f1+2,?___fltol+2
  8723  0137B2  C0B5  F0B5         	movff	___fltol@f1+3,?___fltol+3
  8724  0137B6  0012               	return	
  8725  0137B8                     __end_of___fltol:
  8726                           	opt stack 0
  8727                           tblptru	equ	0xFF8
  8728                           tblptrh	equ	0xFF7
  8729                           tblptrl	equ	0xFF6
  8730                           tablat	equ	0xFF5
  8731                           prodh	equ	0xFF4
  8732                           prodl	equ	0xFF3
  8733                           postinc0	equ	0xFEE
  8734                           wreg	equ	0xFE8
  8735                           postdec1	equ	0xFE5
  8736                           fsr1h	equ	0xFE2
  8737                           fsr1l	equ	0xFE1
  8738                           indf2	equ	0xFDF
  8739                           postinc2	equ	0xFDE
  8740                           postdec2	equ	0xFDD
  8741                           fsr2h	equ	0xFDA
  8742                           fsr2l	equ	0xFD9
  8743                           status	equ	0xFD8
  8744                           
  8745 ;; *************** function _Motor_Speed *****************
  8746 ;; Defined at:
  8747 ;;		line 117 in file "Library/Motor.c"
  8748 ;; Parameters:    Size  Location     Type
  8749 ;;  pMotor          2   27[BANK0 ] PTR struct Motor
  8750 ;;		 -> Stepper(6), 
  8751 ;;  pFrequency      2   29[BANK0 ] unsigned short 
  8752 ;; Auto vars:     Size  Location     Type
  8753 ;;		None
  8754 ;; Return value:  Size  Location     Type
  8755 ;;                  1    wreg      unsigned char 
  8756 ;; Registers used:
  8757 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8758 ;; Tracked objects:
  8759 ;;		On entry : 0/0
  8760 ;;		On exit  : 0/0
  8761 ;;		Unchanged: 0/0
  8762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8763 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8766 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8767 ;;Total ram usage:        4 bytes
  8768 ;; Hardware stack levels used:    1
  8769 ;; Hardware stack levels required when called:    9
  8770 ;; This function calls:
  8771 ;;		_Timer0_Init
  8772 ;; This function is called by:
  8773 ;;		_mode1
  8774 ;;		_mode4
  8775 ;; This function uses a non-reentrant model
  8776 ;;
  8777                           
  8778                           	psect	text33
  8779  0160EE                     __ptext33:
  8780                           	opt stack 0
  8781  0160EE                     _Motor_Speed:
  8782                           	opt stack 20
  8783                           
  8784                           ;Motor.c: 119: pMotor->mFrequency = pFrequency;
  8785                           
  8786                           ;incstack = 0
  8787  0160EE  0100               	movlb	0	; () banked
  8788  0160F0  EE20 F002          	lfsr	2,2
  8789  0160F4  517B               	movf	Motor_Speed@pMotor& (0+255),w,b
  8790  0160F6  26D9               	addwf	fsr2l,f,c
  8791  0160F8  517C               	movf	(Motor_Speed@pMotor+1)& (0+255),w,b
  8792  0160FA  22DA               	addwfc	fsr2h,f,c
  8793  0160FC  C07D  FFDE         	movff	Motor_Speed@pFrequency,postinc2
  8794  016100  C07E  FFDD         	movff	Motor_Speed@pFrequency+1,postdec2
  8795                           
  8796                           ; BSR set to: 0
  8797                           ;Motor.c: 120: Timer0_Init(pFrequency);
  8798  016104  C07D  F06D         	movff	Motor_Speed@pFrequency,Timer0_Init@pFrequency
  8799  016108  C07E  F06E         	movff	Motor_Speed@pFrequency+1,Timer0_Init@pFrequency+1
  8800  01610C  0100               	movlb	0	; () banked
  8801  01610E  6B6F               	clrf	(Timer0_Init@pFrequency+2)& (0+255),b
  8802  016110  6B70               	clrf	(Timer0_Init@pFrequency+3)& (0+255),b
  8803  016112  ECC6  F098         	call	_Timer0_Init	;wreg free
  8804  016116  0012               	return	
  8805  016118                     __end_of_Motor_Speed:
  8806                           	opt stack 0
  8807                           tblptru	equ	0xFF8
  8808                           tblptrh	equ	0xFF7
  8809                           tblptrl	equ	0xFF6
  8810                           tablat	equ	0xFF5
  8811                           prodh	equ	0xFF4
  8812                           prodl	equ	0xFF3
  8813                           postinc0	equ	0xFEE
  8814                           wreg	equ	0xFE8
  8815                           postdec1	equ	0xFE5
  8816                           fsr1h	equ	0xFE2
  8817                           fsr1l	equ	0xFE1
  8818                           indf2	equ	0xFDF
  8819                           postinc2	equ	0xFDE
  8820                           postdec2	equ	0xFDD
  8821                           fsr2h	equ	0xFDA
  8822                           fsr2l	equ	0xFD9
  8823                           status	equ	0xFD8
  8824                           
  8825 ;; *************** function _Motor_Move *****************
  8826 ;; Defined at:
  8827 ;;		line 51 in file "Library/Motor.c"
  8828 ;; Parameters:    Size  Location     Type
  8829 ;;  pMotor          2    3[BANK0 ] PTR struct Motor
  8830 ;;		 -> Stepper(6), 
  8831 ;;  pDelta          2    5[BANK0 ] short 
  8832 ;; Auto vars:     Size  Location     Type
  8833 ;;		None
  8834 ;; Return value:  Size  Location     Type
  8835 ;;                  1    wreg      unsigned char 
  8836 ;; Registers used:
  8837 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8838 ;; Tracked objects:
  8839 ;;		On entry : 0/0
  8840 ;;		On exit  : 0/0
  8841 ;;		Unchanged: 0/0
  8842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8843 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8845 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8846 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8847 ;;Total ram usage:        6 bytes
  8848 ;; Hardware stack levels used:    1
  8849 ;; Hardware stack levels required when called:    8
  8850 ;; This function calls:
  8851 ;;		_Timer0_Start
  8852 ;; This function is called by:
  8853 ;;		_mode1
  8854 ;;		_mode4
  8855 ;; This function uses a non-reentrant model
  8856 ;;
  8857                           
  8858                           	psect	text34
  8859  015ECC                     __ptext34:
  8860                           	opt stack 0
  8861  015ECC                     _Motor_Move:
  8862                           	opt stack 21
  8863                           
  8864                           ;Motor.c: 54: lMotor = pMotor;
  8865                           
  8866                           ;incstack = 0
  8867  015ECC  C063  F0CE         	movff	Motor_Move@pMotor,_lMotor
  8868  015ED0  C064  F0CF         	movff	Motor_Move@pMotor+1,_lMotor+1
  8869                           
  8870                           ;Motor.c: 58: if (pMotor->mDelta != 0)
  8871  015ED4  C063  FFD9         	movff	Motor_Move@pMotor,fsr2l
  8872  015ED8  C064  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
  8873  015EDC  50DE               	movf	postinc2,w,c
  8874  015EDE  10DE               	iorwf	postinc2,w,c
  8875  015EE0  A4D8               	btfss	status,2,c
  8876  015EE2  0012               	return	
  8877                           
  8878                           ;Motor.c: 63: pMotor->mDelta = pDelta;
  8879                           
  8880                           ;Motor.c: 59: return 0;
  8881                           ;	Return value of _Motor_Move is never used
  8882  015EE4  C063  FFD9         	movff	Motor_Move@pMotor,fsr2l
  8883  015EE8  C064  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
  8884  015EEC  C065  FFDE         	movff	Motor_Move@pDelta,postinc2
  8885  015EF0  C066  FFDD         	movff	Motor_Move@pDelta+1,postdec2
  8886                           
  8887                           ;Motor.c: 67: Timer0_Start(lStepFunction);
  8888  015EF4  C0BD  F060         	movff	_lStepFunction,Timer0_Start@pFunction
  8889  015EF8  C0BE  F061         	movff	_lStepFunction+1,Timer0_Start@pFunction+1
  8890  015EFC  C0BF  F062         	movff	_lStepFunction+2,Timer0_Start@pFunction+2
  8891  015F00  ECB5  F0B0         	call	_Timer0_Start	;wreg free
  8892  015F04  0012               	return	
  8893  015F06                     __end_of_Motor_Move:
  8894                           	opt stack 0
  8895                           tblptru	equ	0xFF8
  8896                           tblptrh	equ	0xFF7
  8897                           tblptrl	equ	0xFF6
  8898                           tablat	equ	0xFF5
  8899                           prodh	equ	0xFF4
  8900                           prodl	equ	0xFF3
  8901                           postinc0	equ	0xFEE
  8902                           wreg	equ	0xFE8
  8903                           postdec1	equ	0xFE5
  8904                           fsr1h	equ	0xFE2
  8905                           fsr1l	equ	0xFE1
  8906                           indf2	equ	0xFDF
  8907                           postinc2	equ	0xFDE
  8908                           postdec2	equ	0xFDD
  8909                           fsr2h	equ	0xFDA
  8910                           fsr2l	equ	0xFD9
  8911                           status	equ	0xFD8
  8912                           
  8913 ;; *************** function _Timer0_Start *****************
  8914 ;; Defined at:
  8915 ;;		line 75 in file "Library/Timer0.c"
  8916 ;; Parameters:    Size  Location     Type
  8917 ;;  pFunction       3    0[BANK0 ] PTR FTN()void 
  8918 ;;		 -> Absolute function(1), Motor_Step(1), 
  8919 ;; Auto vars:     Size  Location     Type
  8920 ;;		None
  8921 ;; Return value:  Size  Location     Type
  8922 ;;                  1    wreg      void 
  8923 ;; Registers used:
  8924 ;;		wreg, status,2, status,0
  8925 ;; Tracked objects:
  8926 ;;		On entry : 0/0
  8927 ;;		On exit  : 0/0
  8928 ;;		Unchanged: 0/0
  8929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8930 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8933 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8934 ;;Total ram usage:        3 bytes
  8935 ;; Hardware stack levels used:    1
  8936 ;; Hardware stack levels required when called:    7
  8937 ;; This function calls:
  8938 ;;		Nothing
  8939 ;; This function is called by:
  8940 ;;		_Motor_Move
  8941 ;; This function uses a non-reentrant model
  8942 ;;
  8943                           
  8944                           	psect	text35
  8945  01616A                     __ptext35:
  8946                           	opt stack 0
  8947  01616A                     _Timer0_Start:
  8948                           	opt stack 21
  8949                           
  8950                           ;Timer0.c: 77: gISR = pFunction;
  8951                           
  8952                           ;incstack = 0
  8953  01616A  C060  F314         	movff	Timer0_Start@pFunction,_gISR
  8954  01616E  C061  F315         	movff	Timer0_Start@pFunction+1,_gISR+1
  8955  016172  C062  F316         	movff	Timer0_Start@pFunction+2,_gISR+2
  8956                           
  8957                           ;Timer0.c: 78: TMR0 = COUNTER;
  8958  016176  C029  FFD6         	movff	_COUNTER,4054	;volatile
  8959  01617A  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
  8960                           
  8961                           ;Timer0.c: 79: T0CONbits.T0PS = INDEX;
  8962  01617E  50D5               	movf	4053,w,c	;volatile
  8963  016180  0100               	movlb	0	; () banked
  8964  016182  19DC               	xorwf	_INDEX& (0+255),w,b
  8965  016184  0BF8               	andlw	-8
  8966  016186  19DC               	xorwf	_INDEX& (0+255),w,b
  8967  016188  6ED5               	movwf	4053,c	;volatile
  8968                           
  8969                           ; BSR set to: 0
  8970                           ;Timer0.c: 80: INTCONbits.TMR0IF = 0;
  8971  01618A  94F2               	bcf	intcon,2,c	;volatile
  8972                           
  8973                           ; BSR set to: 0
  8974                           ;Timer0.c: 81: INTCONbits.TMR0IE = 1;
  8975  01618C  8AF2               	bsf	intcon,5,c	;volatile
  8976                           
  8977                           ; BSR set to: 0
  8978  01618E  0012               	return		;funcret
  8979  016190                     __end_of_Timer0_Start:
  8980                           	opt stack 0
  8981                           tblptru	equ	0xFF8
  8982                           tblptrh	equ	0xFF7
  8983                           tblptrl	equ	0xFF6
  8984                           tablat	equ	0xFF5
  8985                           prodh	equ	0xFF4
  8986                           prodl	equ	0xFF3
  8987                           intcon	equ	0xFF2
  8988                           postinc0	equ	0xFEE
  8989                           wreg	equ	0xFE8
  8990                           postdec1	equ	0xFE5
  8991                           fsr1h	equ	0xFE2
  8992                           fsr1l	equ	0xFE1
  8993                           indf2	equ	0xFDF
  8994                           postinc2	equ	0xFDE
  8995                           postdec2	equ	0xFDD
  8996                           fsr2h	equ	0xFDA
  8997                           fsr2l	equ	0xFD9
  8998                           status	equ	0xFD8
  8999                           
  9000 ;; *************** function _HMI_Render *****************
  9001 ;; Defined at:
  9002 ;;		line 138 in file "HMI.c"
  9003 ;; Parameters:    Size  Location     Type
  9004 ;;		None
  9005 ;; Auto vars:     Size  Location     Type
  9006 ;;  a               2    8[BANK0 ] unsigned short 
  9007 ;; Return value:  Size  Location     Type
  9008 ;;                  1    wreg      void 
  9009 ;; Registers used:
  9010 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9011 ;; Tracked objects:
  9012 ;;		On entry : 0/0
  9013 ;;		On exit  : 0/0
  9014 ;;		Unchanged: 0/0
  9015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9017 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9019 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9020 ;;Total ram usage:        2 bytes
  9021 ;; Hardware stack levels used:    1
  9022 ;; Hardware stack levels required when called:    9
  9023 ;; This function calls:
  9024 ;;		_OutSeg
  9025 ;; This function is called by:
  9026 ;;		_mode1
  9027 ;;		_mode4
  9028 ;; This function uses a non-reentrant model
  9029 ;;
  9030                           
  9031                           	psect	text36
  9032  015D5E                     __ptext36:
  9033                           	opt stack 0
  9034  015D5E                     _HMI_Render:
  9035                           	opt stack 20
  9036                           
  9037                           ;HMI.c: 141: for (UINT16 a = 0; a < sizeof(HMIBoard.Bytes); a++)
  9038                           
  9039                           ; BSR set to: 0
  9040                           ;incstack = 0
  9041  015D5E  0E00               	movlw	0
  9042  015D60  0100               	movlb	0	; () banked
  9043  015D62  6F69               	movwf	(HMI_Render@a+1)& (0+255),b
  9044  015D64  0E00               	movlw	0
  9045  015D66  6F68               	movwf	HMI_Render@a& (0+255),b
  9046  015D68                     l14101:
  9047                           
  9048                           ; BSR set to: 0
  9049  015D68  0100               	movlb	0	; () banked
  9050  015D6A  5169               	movf	(HMI_Render@a+1)& (0+255),w,b
  9051  015D6C  E116               	bnz	l1158
  9052  015D6E  0E08               	movlw	8
  9053  015D70  0100               	movlb	0	; () banked
  9054  015D72  5D68               	subwf	HMI_Render@a& (0+255),w,b
  9055  015D74  B0D8               	btfsc	status,0,c
  9056  015D76  0012               	return	
  9057                           
  9058                           ; BSR set to: 0
  9059                           ;HMI.c: 142: OutSeg(HMIBoard.Bytes[a], a);
  9060                           
  9061                           ; BSR set to: 0
  9062                           
  9063                           ; BSR set to: 0
  9064  015D78  C068  F063         	movff	HMI_Render@a,OutSeg@pSegment
  9065  015D7C  0E2B               	movlw	low _HMIBoard
  9066  015D7E  0100               	movlb	0	; () banked
  9067  015D80  2568               	addwf	HMI_Render@a& (0+255),w,b
  9068  015D82  6ED9               	movwf	fsr2l,c
  9069  015D84  0E03               	movlw	high _HMIBoard
  9070  015D86  0100               	movlb	0	; () banked
  9071  015D88  2169               	addwfc	(HMI_Render@a+1)& (0+255),w,b
  9072  015D8A  6EDA               	movwf	fsr2h,c
  9073  015D8C  50DF               	movf	indf2,w,c
  9074  015D8E  EC02  F0A7         	call	_OutSeg
  9075  015D92  0100               	movlb	0	; () banked
  9076  015D94  4B68               	infsnz	HMI_Render@a& (0+255),f,b
  9077  015D96  2B69               	incf	(HMI_Render@a+1)& (0+255),f,b
  9078  015D98  D7E7               	goto	l14101
  9079  015D9A                     l1158:
  9080                           
  9081                           ; BSR set to: 0
  9082  015D9A  0012               	return		;funcret
  9083  015D9C                     __end_of_HMI_Render:
  9084                           	opt stack 0
  9085                           tblptru	equ	0xFF8
  9086                           tblptrh	equ	0xFF7
  9087                           tblptrl	equ	0xFF6
  9088                           tablat	equ	0xFF5
  9089                           prodh	equ	0xFF4
  9090                           prodl	equ	0xFF3
  9091                           intcon	equ	0xFF2
  9092                           postinc0	equ	0xFEE
  9093                           wreg	equ	0xFE8
  9094                           postdec1	equ	0xFE5
  9095                           fsr1h	equ	0xFE2
  9096                           fsr1l	equ	0xFE1
  9097                           indf2	equ	0xFDF
  9098                           postinc2	equ	0xFDE
  9099                           postdec2	equ	0xFDD
  9100                           fsr2h	equ	0xFDA
  9101                           fsr2l	equ	0xFD9
  9102                           status	equ	0xFD8
  9103                           
  9104 ;; *************** function _OutSeg *****************
  9105 ;; Defined at:
  9106 ;;		line 54 in file "HMI.c"
  9107 ;; Parameters:    Size  Location     Type
  9108 ;;  pInput          1    wreg     unsigned char 
  9109 ;;  pSegment        1    3[BANK0 ] unsigned char 
  9110 ;; Auto vars:     Size  Location     Type
  9111 ;;  pInput          1    6[BANK0 ] unsigned char 
  9112 ;;  out             1    7[BANK0 ] volatile unsigned char 
  9113 ;; Return value:  Size  Location     Type
  9114 ;;                  1    wreg      void 
  9115 ;; Registers used:
  9116 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9117 ;; Tracked objects:
  9118 ;;		On entry : 0/0
  9119 ;;		On exit  : 0/0
  9120 ;;		Unchanged: 0/0
  9121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9122 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9123 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9124 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9125 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9126 ;;Total ram usage:        5 bytes
  9127 ;; Hardware stack levels used:    1
  9128 ;; Hardware stack levels required when called:    8
  9129 ;; This function calls:
  9130 ;;		_SPI_Send
  9131 ;; This function is called by:
  9132 ;;		_HMI_Render
  9133 ;;		_HMI_GRender
  9134 ;; This function uses a non-reentrant model
  9135 ;;
  9136                           
  9137                           	psect	text37
  9138  014E04                     __ptext37:
  9139                           	opt stack 0
  9140  014E04                     _OutSeg:
  9141                           	opt stack 20
  9142                           
  9143                           ; BSR set to: 0
  9144                           ;incstack = 0
  9145                           ;OutSeg@pInput stored from wreg
  9146  014E04  0100               	movlb	0	; () banked
  9147  014E06  6F66               	movwf	OutSeg@pInput& (0+255),b
  9148                           
  9149                           ;HMI.c: 58: static UINT8 cur;
  9150                           ;HMI.c: 59: volatile UINT8 out;
  9151                           ;HMI.c: 60: static UINT8 segset;
  9152                           ;HMI.c: 61: static UINT8 a;
  9153                           ;HMI.c: 83: if (pSegment <= 8)
  9154  014E08  0E09               	movlw	9
  9155  014E0A  0100               	movlb	0	; () banked
  9156  014E0C  6163               	cpfslt	OutSeg@pSegment& (0+255),b
  9157  014E0E  0012               	return	
  9158                           
  9159                           ; BSR set to: 0
  9160                           ;HMI.c: 84: {
  9161                           ;HMI.c: 85: cur = pInput;
  9162  014E10  C066  F03F         	movff	OutSeg@pInput,OutSeg@cur
  9163                           
  9164                           ; BSR set to: 0
  9165                           ;HMI.c: 86: for (a = 0u; a<8u; a++)
  9166  014E14  0E00               	movlw	0
  9167  014E16  6E3D               	movwf	OutSeg@a,c
  9168  014E18                     l13455:
  9169                           
  9170                           ; BSR set to: 0
  9171  014E18  0E07               	movlw	7
  9172  014E1A  643D               	cpfsgt	OutSeg@a,c
  9173  014E1C  D001               	goto	l1146
  9174  014E1E  D027               	goto	u9960
  9175  014E20                     l1146:
  9176                           
  9177                           ;HMI.c: 87: {
  9178                           ;HMI.c: 88: segset = (cur & 1u)<<6u;
  9179                           
  9180                           ; BSR set to: 0
  9181  014E20  C03F  F064         	movff	OutSeg@cur,??_OutSeg
  9182  014E24  0E01               	movlw	1
  9183  014E26  0100               	movlb	0	; () banked
  9184  014E28  1764               	andwf	??_OutSeg& (0+255),f,b
  9185  014E2A  0E06               	movlw	6
  9186  014E2C  0100               	movlb	0	; () banked
  9187  014E2E  6F65               	movwf	(??_OutSeg+1)& (0+255),b
  9188  014E30                     u9955:
  9189  014E30  0100               	movlb	0	; () banked
  9190  014E32  90D8               	bcf	status,0,c
  9191  014E34  3764               	rlcf	??_OutSeg& (0+255),f,b
  9192  014E36  0100               	movlb	0	; () banked
  9193  014E38  2F65               	decfsz	(??_OutSeg+1)& (0+255),f,b
  9194  014E3A  D7FA               	goto	u9955
  9195  014E3C  0100               	movlb	0	; () banked
  9196  014E3E  5164               	movf	??_OutSeg& (0+255),w,b
  9197  014E40  6E3E               	movwf	OutSeg@segset,c
  9198                           
  9199                           ;HMI.c: 89: out = (pSegment<<3u) | a | segset;
  9200  014E42  0100               	movlb	0	; () banked
  9201  014E44  3963               	swapf	OutSeg@pSegment& (0+255),w,b
  9202  014E46  42E8               	rrncf	wreg,f,c
  9203  014E48  0BF8               	andlw	248
  9204  014E4A  103D               	iorwf	OutSeg@a,w,c
  9205  014E4C  103E               	iorwf	OutSeg@segset,w,c
  9206  014E4E  0100               	movlb	0	; () banked
  9207  014E50  6F67               	movwf	OutSeg@out& (0+255),b	;volatile
  9208                           
  9209                           ;HMI.c: 90: cur >>= 1;
  9210  014E52  90D8               	bcf	status,0,c
  9211  014E54  323F               	rrcf	OutSeg@cur,f,c
  9212                           
  9213                           ; BSR set to: 0
  9214                           ;HMI.c: 91: SPI_Send(&SPI1, out);
  9215  014E56  0E65               	movlw	low _SPI1
  9216  014E58  0100               	movlb	0	; () banked
  9217  014E5A  6F60               	movwf	SPI_Send@pInput& (0+255),b
  9218  014E5C  0E03               	movlw	high _SPI1
  9219  014E5E  0100               	movlb	0	; () banked
  9220  014E60  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
  9221  014E62  C067  F062         	movff	OutSeg@out,SPI_Send@pData	;volatile
  9222  014E66  EC8B  F0A9         	call	_SPI_Send	;wreg free
  9223  014E6A  2A3D               	incf	OutSeg@a,f,c
  9224  014E6C  D7D5               	goto	l13455
  9225  014E6E                     u9960:
  9226                           
  9227                           ;HMI.c: 96: }
  9228                           ;HMI.c: 97: SPI_Send(&SPI1, 0);
  9229  014E6E  0E65               	movlw	low _SPI1
  9230  014E70  0100               	movlb	0	; () banked
  9231  014E72  6F60               	movwf	SPI_Send@pInput& (0+255),b
  9232  014E74  0E03               	movlw	high _SPI1
  9233  014E76  0100               	movlb	0	; () banked
  9234  014E78  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
  9235  014E7A  0E00               	movlw	0
  9236  014E7C  0100               	movlb	0	; () banked
  9237  014E7E  6F62               	movwf	SPI_Send@pData& (0+255),b
  9238  014E80  EC8B  F0A9         	call	_SPI_Send	;wreg free
  9239  014E84  0012               	return	
  9240  014E86                     __end_of_OutSeg:
  9241                           	opt stack 0
  9242                           tblptru	equ	0xFF8
  9243                           tblptrh	equ	0xFF7
  9244                           tblptrl	equ	0xFF6
  9245                           tablat	equ	0xFF5
  9246                           prodh	equ	0xFF4
  9247                           prodl	equ	0xFF3
  9248                           intcon	equ	0xFF2
  9249                           postinc0	equ	0xFEE
  9250                           wreg	equ	0xFE8
  9251                           postdec1	equ	0xFE5
  9252                           fsr1h	equ	0xFE2
  9253                           fsr1l	equ	0xFE1
  9254                           indf2	equ	0xFDF
  9255                           postinc2	equ	0xFDE
  9256                           postdec2	equ	0xFDD
  9257                           fsr2h	equ	0xFDA
  9258                           fsr2l	equ	0xFD9
  9259                           status	equ	0xFD8
  9260                           
  9261 ;; *************** function _HMI_Poll *****************
  9262 ;; Defined at:
  9263 ;;		line 252 in file "HMI.c"
  9264 ;; Parameters:    Size  Location     Type
  9265 ;;		None
  9266 ;; Auto vars:     Size  Location     Type
  9267 ;;		None
  9268 ;; Return value:  Size  Location     Type
  9269 ;;                  1    wreg      void 
  9270 ;; Registers used:
  9271 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  9272 ;; Tracked objects:
  9273 ;;		On entry : 0/0
  9274 ;;		On exit  : 0/0
  9275 ;;		Unchanged: 0/0
  9276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9278 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9280 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9281 ;;Total ram usage:        0 bytes
  9282 ;; Hardware stack levels used:    1
  9283 ;; Hardware stack levels required when called:   15
  9284 ;; This function calls:
  9285 ;;		_Button_Poll
  9286 ;; This function is called by:
  9287 ;;		_mode1
  9288 ;;		_mode2
  9289 ;;		_mode4
  9290 ;; This function uses a non-reentrant model
  9291 ;;
  9292                           
  9293                           	psect	text38
  9294  01506A                     __ptext38:
  9295                           	opt stack 0
  9296  01506A                     _HMI_Poll:
  9297                           	opt stack 14
  9298                           
  9299                           ;HMI.c: 254: TRISE = 0xFC;
  9300                           
  9301                           ;incstack = 0
  9302  01506A  0EFC               	movlw	252
  9303  01506C  6E96               	movwf	3990,c	;volatile
  9304                           
  9305                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
  9306  01506E  0E5B               	movlw	low (_HMIBoard+48)
  9307  015070  0100               	movlb	0	; () banked
  9308  015072  6F7B               	movwf	Button_Poll@pButton& (0+255),b
  9309  015074  0E03               	movlw	high (_HMIBoard+48)
  9310  015076  0100               	movlb	0	; () banked
  9311  015078  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
  9312  01507A  0E01               	movlw	1
  9313  01507C  0100               	movlb	0	; () banked
  9314  01507E  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
  9315  015080  EC13  F098         	call	_Button_Poll	;wreg free
  9316                           
  9317                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
  9318  015084  0E3D               	movlw	low (_HMIBoard+18)
  9319  015086  0100               	movlb	0	; () banked
  9320  015088  6F7B               	movwf	Button_Poll@pButton& (0+255),b
  9321  01508A  0E03               	movlw	high (_HMIBoard+18)
  9322  01508C  0100               	movlb	0	; () banked
  9323  01508E  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
  9324  015090  0E01               	movlw	1
  9325  015092  0100               	movlb	0	; () banked
  9326  015094  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
  9327  015096  EC13  F098         	call	_Button_Poll	;wreg free
  9328                           
  9329                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
  9330  01509A  0E33               	movlw	low (_HMIBoard+8)
  9331  01509C  0100               	movlb	0	; () banked
  9332  01509E  6F7B               	movwf	Button_Poll@pButton& (0+255),b
  9333  0150A0  0E03               	movlw	high (_HMIBoard+8)
  9334  0150A2  0100               	movlb	0	; () banked
  9335  0150A4  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
  9336  0150A6  0E01               	movlw	1
  9337  0150A8  0100               	movlb	0	; () banked
  9338  0150AA  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
  9339  0150AC  EC13  F098         	call	_Button_Poll	;wreg free
  9340                           
  9341                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
  9342  0150B0  0E47               	movlw	low (_HMIBoard+28)
  9343  0150B2  0100               	movlb	0	; () banked
  9344  0150B4  6F7B               	movwf	Button_Poll@pButton& (0+255),b
  9345  0150B6  0E03               	movlw	high (_HMIBoard+28)
  9346  0150B8  0100               	movlb	0	; () banked
  9347  0150BA  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
  9348  0150BC  0E01               	movlw	1
  9349  0150BE  0100               	movlb	0	; () banked
  9350  0150C0  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
  9351  0150C2  EC13  F098         	call	_Button_Poll	;wreg free
  9352                           
  9353                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
  9354  0150C6  0E51               	movlw	low (_HMIBoard+38)
  9355  0150C8  0100               	movlb	0	; () banked
  9356  0150CA  6F7B               	movwf	Button_Poll@pButton& (0+255),b
  9357  0150CC  0E03               	movlw	high (_HMIBoard+38)
  9358  0150CE  0100               	movlb	0	; () banked
  9359  0150D0  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
  9360  0150D2  0E01               	movlw	1
  9361  0150D4  0100               	movlb	0	; () banked
  9362  0150D6  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
  9363  0150D8  EC13  F098         	call	_Button_Poll	;wreg free
  9364  0150DC  0012               	return		;funcret
  9365  0150DE                     __end_of_HMI_Poll:
  9366                           	opt stack 0
  9367                           tblptru	equ	0xFF8
  9368                           tblptrh	equ	0xFF7
  9369                           tblptrl	equ	0xFF6
  9370                           tablat	equ	0xFF5
  9371                           prodh	equ	0xFF4
  9372                           prodl	equ	0xFF3
  9373                           intcon	equ	0xFF2
  9374                           postinc0	equ	0xFEE
  9375                           wreg	equ	0xFE8
  9376                           postdec1	equ	0xFE5
  9377                           fsr1h	equ	0xFE2
  9378                           fsr1l	equ	0xFE1
  9379                           indf2	equ	0xFDF
  9380                           postinc2	equ	0xFDE
  9381                           postdec2	equ	0xFDD
  9382                           fsr2h	equ	0xFDA
  9383                           fsr2l	equ	0xFD9
  9384                           status	equ	0xFD8
  9385                           
  9386 ;; *************** function _Button_Poll *****************
  9387 ;; Defined at:
  9388 ;;		line 57 in file "Library/Button.c"
  9389 ;; Parameters:    Size  Location     Type
  9390 ;;  pButton         2   27[BANK0 ] const PTR struct Button
  9391 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
  9392 ;;  pIncrement      1   29[BANK0 ] unsigned char 
  9393 ;; Auto vars:     Size  Location     Type
  9394 ;;  Pin             1   35[BANK0 ] unsigned char 
  9395 ;; Return value:  Size  Location     Type
  9396 ;;                  1    wreg      unsigned char 
  9397 ;; Registers used:
  9398 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  9399 ;; Tracked objects:
  9400 ;;		On entry : 0/0
  9401 ;;		On exit  : 0/0
  9402 ;;		Unchanged: 0/0
  9403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9404 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9405 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9406 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9407 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9408 ;;Total ram usage:        9 bytes
  9409 ;; Hardware stack levels used:    1
  9410 ;; Hardware stack levels required when called:   14
  9411 ;; This function calls:
  9412 ;;		_Event_DIPSwitch
  9413 ;;		_Event_NULL
  9414 ;;		_Event_TestButton
  9415 ;;		_HMI_DIPSwitch
  9416 ;;		_HMI_DownSwitch
  9417 ;;		_HMI_LeftSwitch
  9418 ;;		_HMI_RightSwitch
  9419 ;;		_HMI_UpSwitch
  9420 ;;		_MXK_DIPSwitch
  9421 ;;		_MXK_TestButton
  9422 ;; This function is called by:
  9423 ;;		_HMI_Poll
  9424 ;;		_MXK_Poll
  9425 ;; This function uses a non-reentrant model
  9426 ;;
  9427                           
  9428                           	psect	text39
  9429  013026                     __ptext39:
  9430                           	opt stack 0
  9431  013026                     _Button_Poll:
  9432                           	opt stack 14
  9433                           
  9434                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
  9435                           
  9436                           ;incstack = 0
  9437  013026  0100               	movlb	0	; () banked
  9438  013028  EE20 F007          	lfsr	2,7
  9439  01302C  517B               	movf	Button_Poll@pButton& (0+255),w,b
  9440  01302E  26D9               	addwf	fsr2l,f,c
  9441  013030  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  9442  013032  22DA               	addwfc	fsr2h,f,c
  9443  013034  D801               	call	u9718
  9444  013036  D00A               	goto	u9719
  9445  013038                     u9718:
  9446  013038  0005               	push	
  9447  01303A  6EFA               	movwf	pclath,c
  9448  01303C  50DE               	movf	postinc2,w,c
  9449  01303E  6EFD               	movwf	tosl,c
  9450  013040  50DE               	movf	postinc2,w,c
  9451  013042  6EFE               	movwf	tosh,c
  9452  013044  50DE               	movf	postinc2,w,c
  9453  013046  6EFF               	movwf	tosu,c
  9454  013048  50FA               	movf	pclath,w,c
  9455  01304A  0012               	return		;indir
  9456  01304C                     u9719:
  9457  01304C  0100               	movlb	0	; () banked
  9458  01304E  6F83               	movwf	Button_Poll@Pin& (0+255),b
  9459                           
  9460                           ; BSR set to: 0
  9461                           ;Button.c: 61: if (pButton->mState == Pin)
  9462  013050  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
  9463  013054  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
  9464  013058  0100               	movlb	0	; () banked
  9465  01305A  5183               	movf	Button_Poll@Pin& (0+255),w,b
  9466  01305C  18DE               	xorwf	postinc2,w,c
  9467  01305E  A4D8               	btfss	status,2,c
  9468  013060  D021               	goto	l11
  9469                           
  9470                           ; BSR set to: 0
  9471                           ;Button.c: 62: {
  9472                           ;Button.c: 65: if(pIncrement > pButton->mCount)
  9473  013062  0100               	movlb	0	; () banked
  9474  013064  EE20 F001          	lfsr	2,1
  9475  013068  517B               	movf	Button_Poll@pButton& (0+255),w,b
  9476  01306A  26D9               	addwf	fsr2l,f,c
  9477  01306C  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  9478  01306E  22DA               	addwfc	fsr2h,f,c
  9479  013070  0100               	movlb	0	; () banked
  9480  013072  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
  9481  013074  5CDE               	subwf	postinc2,w,c
  9482  013076  B0D8               	btfsc	status,0,c
  9483  013078  D00A               	goto	l12
  9484                           
  9485                           ; BSR set to: 0
  9486                           ;Button.c: 66: pButton->mCount = 0;
  9487  01307A  0100               	movlb	0	; () banked
  9488  01307C  EE20 F001          	lfsr	2,1
  9489  013080  517B               	movf	Button_Poll@pButton& (0+255),w,b
  9490  013082  26D9               	addwf	fsr2l,f,c
  9491  013084  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  9492  013086  22DA               	addwfc	fsr2h,f,c
  9493  013088  0E00               	movlw	0
  9494  01308A  6EDF               	movwf	indf2,c
  9495  01308C  0012               	return	
  9496  01308E                     l12:
  9497                           
  9498                           ; BSR set to: 0
  9499                           ;Button.c: 67: else
  9500                           ;Button.c: 68: pButton->mCount -= pIncrement;
  9501                           
  9502                           ; BSR set to: 0
  9503  01308E  0100               	movlb	0	; () banked
  9504  013090  EE20 F001          	lfsr	2,1
  9505  013094  517B               	movf	Button_Poll@pButton& (0+255),w,b
  9506  013096  26D9               	addwf	fsr2l,f,c
  9507  013098  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  9508  01309A  22DA               	addwfc	fsr2h,f,c
  9509  01309C  0100               	movlb	0	; () banked
  9510  01309E  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
  9511  0130A0  5EDF               	subwf	indf2,f,c
  9512                           
  9513                           ; BSR set to: 0
  9514                           ;Button.c: 69: }
  9515  0130A2  0012               	return	
  9516  0130A4                     l11:
  9517                           
  9518                           ; BSR set to: 0
  9519                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
  9520                           
  9521                           ; BSR set to: 0
  9522  0130A4  0100               	movlb	0	; () banked
  9523  0130A6  EE20 F001          	lfsr	2,1
  9524  0130AA  517B               	movf	Button_Poll@pButton& (0+255),w,b
  9525  0130AC  26D9               	addwf	fsr2l,f,c
  9526  0130AE  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  9527  0130B0  22DA               	addwfc	fsr2h,f,c
  9528  0130B2  50DF               	movf	indf2,w,c
  9529  0130B4  0100               	movlb	0	; () banked
  9530  0130B6  6F7E               	movwf	??_Button_Poll& (0+255),b
  9531  0130B8  6B7F               	clrf	(??_Button_Poll+1)& (0+255),b
  9532  0130BA  0100               	movlb	0	; () banked
  9533  0130BC  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
  9534  0130BE  0100               	movlb	0	; () banked
  9535  0130C0  277E               	addwf	??_Button_Poll& (0+255),f,b
  9536  0130C2  0E00               	movlw	0
  9537  0130C4  237F               	addwfc	(??_Button_Poll+1)& (0+255),f,b
  9538  0130C6  0100               	movlb	0	; () banked
  9539  0130C8  EE20 F001          	lfsr	2,1
  9540  0130CC  517B               	movf	Button_Poll@pButton& (0+255),w,b
  9541  0130CE  26D9               	addwf	fsr2l,f,c
  9542  0130D0  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  9543  0130D2  22DA               	addwfc	fsr2h,f,c
  9544  0130D4  50DF               	movf	indf2,w,c
  9545  0130D6  0100               	movlb	0	; () banked
  9546  0130D8  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
  9547  0130DA  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
  9548  0130DC  0100               	movlb	0	; () banked
  9549  0130DE  517E               	movf	??_Button_Poll& (0+255),w,b
  9550  0130E0  0100               	movlb	0	; () banked
  9551  0130E2  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
  9552  0130E4  0100               	movlb	0	; () banked
  9553  0130E6  5181               	movf	(??_Button_Poll+3)& (0+255),w,b
  9554  0130E8  0A80               	xorlw	128
  9555  0130EA  0100               	movlb	0	; () banked
  9556  0130EC  6F82               	movwf	(??_Button_Poll+4)& (0+255),b
  9557  0130EE  0100               	movlb	0	; () banked
  9558  0130F0  517F               	movf	(??_Button_Poll+1)& (0+255),w,b
  9559  0130F2  0A80               	xorlw	128
  9560  0130F4  0100               	movlb	0	; () banked
  9561  0130F6  5982               	subwfb	(??_Button_Poll+4)& (0+255),w,b
  9562  0130F8  B0D8               	btfsc	status,0,c
  9563  0130FA  0012               	return	
  9564                           
  9565                           ; BSR set to: 0
  9566                           ;Button.c: 73: {
  9567                           ;Button.c: 75: pButton->mCount += pIncrement;
  9568  0130FC  0100               	movlb	0	; () banked
  9569  0130FE  EE20 F001          	lfsr	2,1
  9570  013102  517B               	movf	Button_Poll@pButton& (0+255),w,b
  9571  013104  26D9               	addwf	fsr2l,f,c
  9572  013106  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  9573  013108  22DA               	addwfc	fsr2h,f,c
  9574  01310A  0100               	movlb	0	; () banked
  9575  01310C  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
  9576  01310E  26DF               	addwf	indf2,f,c
  9577                           
  9578                           ; BSR set to: 0
  9579                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
  9580  013110  0100               	movlb	0	; () banked
  9581  013112  EE20 F002          	lfsr	2,2
  9582  013116  517B               	movf	Button_Poll@pButton& (0+255),w,b
  9583  013118  26D9               	addwf	fsr2l,f,c
  9584  01311A  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  9585  01311C  22DA               	addwfc	fsr2h,f,c
  9586  01311E  0100               	movlb	0	; () banked
  9587  013120  EE10 F001          	lfsr	1,1
  9588  013124  517B               	movf	Button_Poll@pButton& (0+255),w,b
  9589  013126  26E1               	addwf	fsr1l,f,c
  9590  013128  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  9591  01312A  22E2               	addwfc	fsr1h,f,c
  9592  01312C  50E7               	movf	indf1,w,c
  9593  01312E  0100               	movlb	0	; () banked
  9594  013130  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
  9595  013132  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
  9596  013134  50DE               	movf	postinc2,w,c
  9597  013136  0100               	movlb	0	; () banked
  9598  013138  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
  9599  01313A  50DE               	movf	postinc2,w,c
  9600  01313C  0100               	movlb	0	; () banked
  9601  01313E  5981               	subwfb	(??_Button_Poll+3)& (0+255),w,b
  9602  013140  A0D8               	btfss	status,0,c
  9603  013142  0012               	return	
  9604                           
  9605                           ; BSR set to: 0
  9606                           ;Button.c: 77: {
  9607                           ;Button.c: 79: pButton->mState = Pin;
  9608  013144  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
  9609  013148  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
  9610  01314C  C083  FFDF         	movff	Button_Poll@Pin,indf2
  9611                           
  9612                           ; BSR set to: 0
  9613                           ;Button.c: 80: pButton->mCount = 0;
  9614  013150  0100               	movlb	0	; () banked
  9615  013152  EE20 F001          	lfsr	2,1
  9616  013156  517B               	movf	Button_Poll@pButton& (0+255),w,b
  9617  013158  26D9               	addwf	fsr2l,f,c
  9618  01315A  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  9619  01315C  22DA               	addwfc	fsr2h,f,c
  9620  01315E  0E00               	movlw	0
  9621  013160  6EDF               	movwf	indf2,c
  9622                           
  9623                           ; BSR set to: 0
  9624                           ;Button.c: 83: pButton->mFunction(Pin);
  9625  013162  0100               	movlb	0	; () banked
  9626  013164  EE20 F004          	lfsr	2,4
  9627  013168  517B               	movf	Button_Poll@pButton& (0+255),w,b
  9628  01316A  26D9               	addwf	fsr2l,f,c
  9629  01316C  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  9630  01316E  22DA               	addwfc	fsr2h,f,c
  9631  013170  D801               	call	u9768
  9632  013172  0012               	return	
  9633  013174                     u9768:
  9634  013174  0005               	push	
  9635  013176  6EFA               	movwf	pclath,c
  9636  013178  50DE               	movf	postinc2,w,c
  9637  01317A  6EFD               	movwf	tosl,c
  9638  01317C  50DE               	movf	postinc2,w,c
  9639  01317E  6EFE               	movwf	tosh,c
  9640  013180  50DE               	movf	postinc2,w,c
  9641  013182  6EFF               	movwf	tosu,c
  9642  013184  50FA               	movf	pclath,w,c
  9643  013186  0100               	movlb	0	; () banked
  9644  013188  5183               	movf	Button_Poll@Pin& (0+255),w,b
  9645  01318A  0012               	return		;indir
  9646  01318C                     __end_of_Button_Poll:
  9647                           	opt stack 0
  9648                           tosu	equ	0xFFF
  9649                           tosh	equ	0xFFE
  9650                           tosl	equ	0xFFD
  9651                           pclath	equ	0xFFA
  9652                           tblptru	equ	0xFF8
  9653                           tblptrh	equ	0xFF7
  9654                           tblptrl	equ	0xFF6
  9655                           tablat	equ	0xFF5
  9656                           prodh	equ	0xFF4
  9657                           prodl	equ	0xFF3
  9658                           intcon	equ	0xFF2
  9659                           postinc0	equ	0xFEE
  9660                           wreg	equ	0xFE8
  9661                           indf1	equ	0xFE7
  9662                           postdec1	equ	0xFE5
  9663                           fsr1h	equ	0xFE2
  9664                           fsr1l	equ	0xFE1
  9665                           indf2	equ	0xFDF
  9666                           postinc2	equ	0xFDE
  9667                           postdec2	equ	0xFDD
  9668                           fsr2h	equ	0xFDA
  9669                           fsr2l	equ	0xFD9
  9670                           status	equ	0xFD8
  9671                           
  9672 ;; *************** function _Event_DIPSwitch *****************
  9673 ;; Defined at:
  9674 ;;		line 22 in file "Events.c"
  9675 ;; Parameters:    Size  Location     Type
  9676 ;;  pState          1    wreg     unsigned char 
  9677 ;; Auto vars:     Size  Location     Type
  9678 ;;  pState          1   25[BANK0 ] unsigned char 
  9679 ;;  Bar             1   26[BANK0 ] unsigned char 
  9680 ;; Return value:  Size  Location     Type
  9681 ;;                  1    wreg      void 
  9682 ;; Registers used:
  9683 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9684 ;; Tracked objects:
  9685 ;;		On entry : 0/0
  9686 ;;		On exit  : 0/0
  9687 ;;		Unchanged: 0/0
  9688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9690 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9692 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9693 ;;Total ram usage:        2 bytes
  9694 ;; Hardware stack levels used:    1
  9695 ;; Hardware stack levels required when called:   13
  9696 ;; This function calls:
  9697 ;;		_HMI_GetBar
  9698 ;;		_HMI_SetBar
  9699 ;;		_LED_Toggle
  9700 ;; This function is called by:
  9701 ;;		_FunctInitButton
  9702 ;;		_Button_Poll
  9703 ;; This function uses a non-reentrant model
  9704 ;;
  9705                           
  9706                           	psect	text40
  9707  016068                     __ptext40:
  9708                           	opt stack 0
  9709  016068                     _Event_DIPSwitch:
  9710                           	opt stack 14
  9711                           
  9712                           ;incstack = 0
  9713                           ;Event_DIPSwitch@pState stored from wreg
  9714  016068  0100               	movlb	0	; () banked
  9715  01606A  6F79               	movwf	Event_DIPSwitch@pState& (0+255),b
  9716                           
  9717                           ;Events.c: 24: UINT8 Bar = HMI_GetBar();
  9718  01606C  ECAA  F0B2         	call	_HMI_GetBar
  9719  016070  0100               	movlb	0	; () banked
  9720  016072  6F7A               	movwf	Event_DIPSwitch@Bar& (0+255),b
  9721                           
  9722                           ; BSR set to: 0
  9723                           ;Events.c: 25: Bar &= 0x0F;
  9724  016074  0E0F               	movlw	15
  9725  016076  0100               	movlb	0	; () banked
  9726  016078  177A               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
  9727                           
  9728                           ; BSR set to: 0
  9729                           ;Events.c: 26: pState <<= 4;
  9730  01607A  0100               	movlb	0	; () banked
  9731  01607C  3B79               	swapf	Event_DIPSwitch@pState& (0+255),f,b
  9732  01607E  0EF0               	movlw	240
  9733  016080  1779               	andwf	Event_DIPSwitch@pState& (0+255),f,b
  9734                           
  9735                           ; BSR set to: 0
  9736                           ;Events.c: 29: HMI_SetBar(pState | Bar);
  9737  016082  0100               	movlb	0	; () banked
  9738  016084  5179               	movf	Event_DIPSwitch@pState& (0+255),w,b
  9739  016086  0100               	movlb	0	; () banked
  9740  016088  117A               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
  9741  01608A  EC90  F0B2         	call	_HMI_SetBar
  9742                           
  9743                           ;Events.c: 32: LED_Toggle(eLED1);
  9744  01608E  0E00               	movlw	0
  9745  016090  EC58  F0AD         	call	_LED_Toggle
  9746  016094  0012               	return		;funcret
  9747  016096                     __end_of_Event_DIPSwitch:
  9748                           	opt stack 0
  9749                           tosu	equ	0xFFF
  9750                           tosh	equ	0xFFE
  9751                           tosl	equ	0xFFD
  9752                           pclath	equ	0xFFA
  9753                           tblptru	equ	0xFF8
  9754                           tblptrh	equ	0xFF7
  9755                           tblptrl	equ	0xFF6
  9756                           tablat	equ	0xFF5
  9757                           prodh	equ	0xFF4
  9758                           prodl	equ	0xFF3
  9759                           intcon	equ	0xFF2
  9760                           postinc0	equ	0xFEE
  9761                           wreg	equ	0xFE8
  9762                           indf1	equ	0xFE7
  9763                           postdec1	equ	0xFE5
  9764                           fsr1h	equ	0xFE2
  9765                           fsr1l	equ	0xFE1
  9766                           indf2	equ	0xFDF
  9767                           postinc2	equ	0xFDE
  9768                           postdec2	equ	0xFDD
  9769                           fsr2h	equ	0xFDA
  9770                           fsr2l	equ	0xFD9
  9771                           status	equ	0xFD8
  9772                           
  9773 ;; *************** function _Event_NULL *****************
  9774 ;; Defined at:
  9775 ;;		line 9 in file "Events.c"
  9776 ;; Parameters:    Size  Location     Type
  9777 ;;  pState          1    wreg     unsigned char 
  9778 ;; Auto vars:     Size  Location     Type
  9779 ;;  pState          1    0[COMRAM] unsigned char 
  9780 ;; Return value:  Size  Location     Type
  9781 ;;                  1    wreg      void 
  9782 ;; Registers used:
  9783 ;;		wreg
  9784 ;; Tracked objects:
  9785 ;;		On entry : 0/0
  9786 ;;		On exit  : 0/0
  9787 ;;		Unchanged: 0/0
  9788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9792 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9793 ;;Total ram usage:        0 bytes
  9794 ;; Hardware stack levels used:    1
  9795 ;; Hardware stack levels required when called:    7
  9796 ;; This function calls:
  9797 ;;		Nothing
  9798 ;; This function is called by:
  9799 ;;		_HMI_Init
  9800 ;;		_Button_Poll
  9801 ;; This function uses a non-reentrant model
  9802 ;;
  9803                           
  9804                           	psect	text41
  9805  016578                     __ptext41:
  9806                           	opt stack 0
  9807  016578                     _Event_NULL:
  9808                           	opt stack 20
  9809                           
  9810                           ;incstack = 0
  9811  016578  0012               	return		;funcret
  9812  01657A                     __end_of_Event_NULL:
  9813                           	opt stack 0
  9814                           tosu	equ	0xFFF
  9815                           tosh	equ	0xFFE
  9816                           tosl	equ	0xFFD
  9817                           pclath	equ	0xFFA
  9818                           tblptru	equ	0xFF8
  9819                           tblptrh	equ	0xFF7
  9820                           tblptrl	equ	0xFF6
  9821                           tablat	equ	0xFF5
  9822                           prodh	equ	0xFF4
  9823                           prodl	equ	0xFF3
  9824                           intcon	equ	0xFF2
  9825                           postinc0	equ	0xFEE
  9826                           wreg	equ	0xFE8
  9827                           indf1	equ	0xFE7
  9828                           postdec1	equ	0xFE5
  9829                           fsr1h	equ	0xFE2
  9830                           fsr1l	equ	0xFE1
  9831                           indf2	equ	0xFDF
  9832                           postinc2	equ	0xFDE
  9833                           postdec2	equ	0xFDD
  9834                           fsr2h	equ	0xFDA
  9835                           fsr2l	equ	0xFD9
  9836                           status	equ	0xFD8
  9837                           
  9838 ;; *************** function _Event_TestButton *****************
  9839 ;; Defined at:
  9840 ;;		line 52 in file "Events.c"
  9841 ;; Parameters:    Size  Location     Type
  9842 ;;  pState          1    wreg     unsigned char 
  9843 ;; Auto vars:     Size  Location     Type
  9844 ;;  pState          1   25[BANK0 ] unsigned char 
  9845 ;; Return value:  Size  Location     Type
  9846 ;;                  1    wreg      void 
  9847 ;; Registers used:
  9848 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9849 ;; Tracked objects:
  9850 ;;		On entry : 0/0
  9851 ;;		On exit  : 0/0
  9852 ;;		Unchanged: 0/0
  9853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9855 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9857 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9858 ;;Total ram usage:        1 bytes
  9859 ;; Hardware stack levels used:    1
  9860 ;; Hardware stack levels required when called:   13
  9861 ;; This function calls:
  9862 ;;		_HMI_SetButton
  9863 ;;		_HMI_SetNumber
  9864 ;;		_LED_Toggle
  9865 ;; This function is called by:
  9866 ;;		_FunctInitButton
  9867 ;;		_Button_Poll
  9868 ;; This function uses a non-reentrant model
  9869 ;;
  9870                           
  9871                           	psect	text42
  9872  015E56                     __ptext42:
  9873                           	opt stack 0
  9874  015E56                     _Event_TestButton:
  9875                           	opt stack 14
  9876                           
  9877                           ;incstack = 0
  9878                           ;Event_TestButton@pState stored from wreg
  9879  015E56  0100               	movlb	0	; () banked
  9880  015E58  6F79               	movwf	Event_TestButton@pState& (0+255),b
  9881                           
  9882                           ;Events.c: 56: static UINT8 j = 0;
  9883                           ;Events.c: 60: if (pState == 0)
  9884  015E5A  0100               	movlb	0	; () banked
  9885  015E5C  5179               	movf	Event_TestButton@pState& (0+255),w,b
  9886  015E5E  0100               	movlb	0	; () banked
  9887  015E60  A4D8               	btfss	status,2,c
  9888  015E62  D013               	goto	l1873
  9889                           
  9890                           ; BSR set to: 0
  9891                           ;Events.c: 61: {
  9892                           ;Events.c: 62: j++;
  9893  015E64  0100               	movlb	0	; () banked
  9894  015E66  2BD8               	incf	Event_TestButton@j& (0+255),f,b
  9895                           
  9896                           ; BSR set to: 0
  9897                           ;Events.c: 63: val += j;
  9898  015E68  0100               	movlb	0	; () banked
  9899  015E6A  51D8               	movf	Event_TestButton@j& (0+255),w,b
  9900  015E6C  0100               	movlb	0	; () banked
  9901  015E6E  27CC               	addwf	_val& (0+255),f,b
  9902  015E70  0E00               	movlw	0
  9903  015E72  23CD               	addwfc	(_val+1)& (0+255),f,b
  9904                           
  9905                           ; BSR set to: 0
  9906                           ;Events.c: 64: HMI_SetNumber( val );
  9907  015E74  C0CC  F076         	movff	_val,HMI_SetNumber@pInput
  9908  015E78  C0CD  F077         	movff	_val+1,HMI_SetNumber@pInput+1
  9909  015E7C  EC8C  F0B0         	call	_HMI_SetNumber	;wreg free
  9910                           
  9911                           ;Events.c: 67: HMI_SetButton( j & 3 );
  9912  015E80  0100               	movlb	0	; () banked
  9913  015E82  51D8               	movf	Event_TestButton@j& (0+255),w,b
  9914  015E84  0B03               	andlw	3
  9915  015E86  EC61  F0A5         	call	_HMI_SetButton
  9916  015E8A                     l1873:
  9917                           
  9918                           ;Events.c: 68: }
  9919                           ;Events.c: 72: LED_Toggle(eLED1);
  9920  015E8A  0E00               	movlw	0
  9921  015E8C  EC58  F0AD         	call	_LED_Toggle
  9922  015E90  0012               	return		;funcret
  9923  015E92                     __end_of_Event_TestButton:
  9924                           	opt stack 0
  9925                           tosu	equ	0xFFF
  9926                           tosh	equ	0xFFE
  9927                           tosl	equ	0xFFD
  9928                           pclath	equ	0xFFA
  9929                           tblptru	equ	0xFF8
  9930                           tblptrh	equ	0xFF7
  9931                           tblptrl	equ	0xFF6
  9932                           tablat	equ	0xFF5
  9933                           prodh	equ	0xFF4
  9934                           prodl	equ	0xFF3
  9935                           intcon	equ	0xFF2
  9936                           postinc0	equ	0xFEE
  9937                           wreg	equ	0xFE8
  9938                           indf1	equ	0xFE7
  9939                           postdec1	equ	0xFE5
  9940                           fsr1h	equ	0xFE2
  9941                           fsr1l	equ	0xFE1
  9942                           indf2	equ	0xFDF
  9943                           postinc2	equ	0xFDE
  9944                           postdec2	equ	0xFDD
  9945                           fsr2h	equ	0xFDA
  9946                           fsr2l	equ	0xFD9
  9947                           status	equ	0xFD8
  9948                           
  9949 ;; *************** function _HMI_SetNumber *****************
  9950 ;; Defined at:
  9951 ;;		line 221 in file "HMI.c"
  9952 ;; Parameters:    Size  Location     Type
  9953 ;;  pInput          2   22[BANK0 ] int 
  9954 ;; Auto vars:     Size  Location     Type
  9955 ;;		None
  9956 ;; Return value:  Size  Location     Type
  9957 ;;                  1    wreg      void 
  9958 ;; Registers used:
  9959 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9960 ;; Tracked objects:
  9961 ;;		On entry : 0/0
  9962 ;;		On exit  : 0/0
  9963 ;;		Unchanged: 0/0
  9964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9965 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9968 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9969 ;;Total ram usage:        2 bytes
  9970 ;; Hardware stack levels used:    1
  9971 ;; Hardware stack levels required when called:    9
  9972 ;; This function calls:
  9973 ;;		_HMI_SetSegments
  9974 ;;		_itos
  9975 ;; This function is called by:
  9976 ;;		_Event_TestButton
  9977 ;;		_mode1
  9978 ;;		_mode4
  9979 ;;		_Event_HMI_UpButton
  9980 ;;		_Event_HMI_DownButton
  9981 ;; This function uses a non-reentrant model
  9982 ;;
  9983                           
  9984                           	psect	text43
  9985  016118                     __ptext43:
  9986                           	opt stack 0
  9987  016118                     _HMI_SetNumber:
  9988                           	opt stack 20
  9989                           
  9990                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
  9991                           
  9992                           ;incstack = 0
  9993  016118  C076  F06C         	movff	HMI_SetNumber@pInput,itos@input
  9994  01611C  C077  F06D         	movff	HMI_SetNumber@pInput+1,itos@input+1
  9995  016120  0E2B               	movlw	low _HMIBoard
  9996  016122  0100               	movlb	0	; () banked
  9997  016124  6F6E               	movwf	itos@destination& (0+255),b
  9998  016126  0E03               	movlw	high _HMIBoard
  9999  016128  0100               	movlb	0	; () banked
 10000  01612A  6F6F               	movwf	(itos@destination+1)& (0+255),b
 10001  01612C  ECD4  F09C         	call	_itos	;wreg free
 10002                           
 10003                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
 10004  016130  0E2B               	movlw	low _HMIBoard
 10005  016132  0100               	movlb	0	; () banked
 10006  016134  6F61               	movwf	HMI_SetSegments@pString& (0+255),b
 10007  016136  0E03               	movlw	high _HMIBoard
 10008  016138  0100               	movlb	0	; () banked
 10009  01613A  6F62               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
 10010  01613C  ECC7  F0A0         	call	_HMI_SetSegments	;wreg free
 10011  016140  0012               	return		;funcret
 10012  016142                     __end_of_HMI_SetNumber:
 10013                           	opt stack 0
 10014                           tosu	equ	0xFFF
 10015                           tosh	equ	0xFFE
 10016                           tosl	equ	0xFFD
 10017                           pclath	equ	0xFFA
 10018                           tblptru	equ	0xFF8
 10019                           tblptrh	equ	0xFF7
 10020                           tblptrl	equ	0xFF6
 10021                           tablat	equ	0xFF5
 10022                           prodh	equ	0xFF4
 10023                           prodl	equ	0xFF3
 10024                           intcon	equ	0xFF2
 10025                           postinc0	equ	0xFEE
 10026                           wreg	equ	0xFE8
 10027                           indf1	equ	0xFE7
 10028                           postdec1	equ	0xFE5
 10029                           fsr1h	equ	0xFE2
 10030                           fsr1l	equ	0xFE1
 10031                           indf2	equ	0xFDF
 10032                           postinc2	equ	0xFDE
 10033                           postdec2	equ	0xFDD
 10034                           fsr2h	equ	0xFDA
 10035                           fsr2l	equ	0xFD9
 10036                           status	equ	0xFD8
 10037                           
 10038 ;; *************** function _itos *****************
 10039 ;; Defined at:
 10040 ;;		line 369 in file "Library/Types.c"
 10041 ;; Parameters:    Size  Location     Type
 10042 ;;  input           2   12[BANK0 ] unsigned short 
 10043 ;;  destination     2   14[BANK0 ] PTR unsigned char 
 10044 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 10045 ;; Auto vars:     Size  Location     Type
 10046 ;;  Out             2   20[BANK0 ] unsigned short 
 10047 ;;  Length          2   18[BANK0 ] unsigned short 
 10048 ;;  Data            2   16[BANK0 ] PTR unsigned char 
 10049 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 10050 ;; Return value:  Size  Location     Type
 10051 ;;                  1    wreg      void 
 10052 ;; Registers used:
 10053 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10054 ;; Tracked objects:
 10055 ;;		On entry : 0/0
 10056 ;;		On exit  : 0/0
 10057 ;;		Unchanged: 0/0
 10058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10059 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10060 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10062 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10063 ;;Total ram usage:       10 bytes
 10064 ;; Hardware stack levels used:    1
 10065 ;; Hardware stack levels required when called:    8
 10066 ;; This function calls:
 10067 ;;		___lwdiv
 10068 ;;		___lwmod
 10069 ;;		_reverse
 10070 ;; This function is called by:
 10071 ;;		_HMI_SetNumber
 10072 ;; This function uses a non-reentrant model
 10073 ;;
 10074                           
 10075                           	psect	text44
 10076  0139A8                     __ptext44:
 10077                           	opt stack 0
 10078  0139A8                     _itos:
 10079                           	opt stack 20
 10080                           
 10081                           ;Types.c: 371: UINT16 Out = input;
 10082                           
 10083                           ;incstack = 0
 10084  0139A8  C06C  F074         	movff	itos@input,itos@Out
 10085  0139AC  C06D  F075         	movff	itos@input+1,itos@Out+1
 10086                           
 10087                           ;Types.c: 372: UINT16 Length = 0;
 10088  0139B0  0E00               	movlw	0
 10089  0139B2  0100               	movlb	0	; () banked
 10090  0139B4  6F73               	movwf	(itos@Length+1)& (0+255),b
 10091  0139B6  0E00               	movlw	0
 10092  0139B8  6F72               	movwf	itos@Length& (0+255),b
 10093                           
 10094                           ; BSR set to: 0
 10095                           ;Types.c: 373: char *Data = destination;
 10096  0139BA  C06E  F070         	movff	itos@destination,itos@Data
 10097  0139BE  C06F  F071         	movff	itos@destination+1,itos@Data+1
 10098                           
 10099                           ; BSR set to: 0
 10100                           ;Types.c: 374: if(Out == 0)
 10101  0139C2  0100               	movlb	0	; () banked
 10102  0139C4  5174               	movf	itos@Out& (0+255),w,b
 10103  0139C6  0100               	movlb	0	; () banked
 10104  0139C8  1175               	iorwf	(itos@Out+1)& (0+255),w,b
 10105  0139CA  A4D8               	btfss	status,2,c
 10106  0139CC  D034               	goto	l929
 10107                           
 10108                           ; BSR set to: 0
 10109                           ;Types.c: 375: {
 10110                           ;Types.c: 376: Data[0] = (UINT16)'0';
 10111  0139CE  C070  FFD9         	movff	itos@Data,fsr2l
 10112  0139D2  C071  FFDA         	movff	itos@Data+1,fsr2h
 10113  0139D6  0E30               	movlw	48
 10114  0139D8  6EDF               	movwf	indf2,c
 10115                           
 10116                           ; BSR set to: 0
 10117                           ;Types.c: 377: Length = 1;
 10118  0139DA  0E00               	movlw	0
 10119  0139DC  0100               	movlb	0	; () banked
 10120  0139DE  6F73               	movwf	(itos@Length+1)& (0+255),b
 10121  0139E0  0E01               	movlw	1
 10122  0139E2  6F72               	movwf	itos@Length& (0+255),b
 10123                           
 10124                           ;Types.c: 378: }
 10125  0139E4  D040               	goto	l928
 10126  0139E6                     
 10127                           ; BSR set to: 0
 10128                           ;Types.c: 382: {
 10129                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
 10130                           
 10131                           ; BSR set to: 0
 10132  0139E6  C074  F067         	movff	itos@Out,___lwmod@dividend
 10133  0139EA  C075  F068         	movff	itos@Out+1,___lwmod@dividend+1
 10134  0139EE  0E00               	movlw	0
 10135  0139F0  0100               	movlb	0	; () banked
 10136  0139F2  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
 10137  0139F4  0E0A               	movlw	10
 10138  0139F6  6F69               	movwf	___lwmod@divisor& (0+255),b
 10139  0139F8  EC5B  F0AB         	call	___lwmod	;wreg free
 10140  0139FC  0100               	movlb	0	; () banked
 10141  0139FE  5167               	movf	?___lwmod& (0+255),w,b
 10142  013A00  0F30               	addlw	48
 10143  013A02  C070  FFD9         	movff	itos@Data,fsr2l
 10144  013A06  C071  FFDA         	movff	itos@Data+1,fsr2h
 10145  013A0A  6EDF               	movwf	indf2,c
 10146                           
 10147                           ; BSR set to: 0
 10148                           ;Types.c: 384: Out /= 10;
 10149  013A0C  C074  F060         	movff	itos@Out,___lwdiv@dividend
 10150  013A10  C075  F061         	movff	itos@Out+1,___lwdiv@dividend+1
 10151  013A14  0E00               	movlw	0
 10152  013A16  0100               	movlb	0	; () banked
 10153  013A18  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
 10154  013A1A  0E0A               	movlw	10
 10155  013A1C  6F62               	movwf	___lwdiv@divisor& (0+255),b
 10156  013A1E  ECBE  F0A7         	call	___lwdiv	;wreg free
 10157  013A22  C060  F074         	movff	?___lwdiv,itos@Out
 10158  013A26  C061  F075         	movff	?___lwdiv+1,itos@Out+1
 10159                           
 10160                           ;Types.c: 385: Length ++;
 10161  013A2A  0100               	movlb	0	; () banked
 10162  013A2C  4B72               	infsnz	itos@Length& (0+255),f,b
 10163  013A2E  2B73               	incf	(itos@Length+1)& (0+255),f,b
 10164                           
 10165                           ; BSR set to: 0
 10166                           ;Types.c: 386: Data++;
 10167  013A30  0100               	movlb	0	; () banked
 10168  013A32  4B70               	infsnz	itos@Data& (0+255),f,b
 10169  013A34  2B71               	incf	(itos@Data+1)& (0+255),f,b
 10170  013A36                     l929:
 10171                           
 10172                           ; BSR set to: 0
 10173                           
 10174                           ; BSR set to: 0
 10175  013A36  0100               	movlb	0	; () banked
 10176  013A38  5174               	movf	itos@Out& (0+255),w,b
 10177  013A3A  0100               	movlb	0	; () banked
 10178  013A3C  1175               	iorwf	(itos@Out+1)& (0+255),w,b
 10179  013A3E  B4D8               	btfsc	status,2,c
 10180  013A40  D008               	goto	u8940
 10181                           
 10182                           ; BSR set to: 0
 10183  013A42  0100               	movlb	0	; () banked
 10184  013A44  5173               	movf	(itos@Length+1)& (0+255),w,b
 10185  013A46  E105               	bnz	l12261
 10186  013A48  0E06               	movlw	6
 10187  013A4A  0100               	movlb	0	; () banked
 10188  013A4C  5D72               	subwf	itos@Length& (0+255),w,b
 10189  013A4E  A0D8               	btfss	status,0,c
 10190  013A50  D7CA               	goto	l930
 10191  013A52                     u8940:
 10192  013A52                     l12261:
 10193                           
 10194                           ; BSR set to: 0
 10195                           ;Types.c: 387: }
 10196                           ;Types.c: 388: reverse(destination, Length);
 10197  013A52  C06E  F060         	movff	itos@destination,reverse@input
 10198  013A56  C06F  F061         	movff	itos@destination+1,reverse@input+1
 10199  013A5A  C072  F062         	movff	itos@Length,reverse@length
 10200  013A5E  C073  F063         	movff	itos@Length+1,reverse@length+1
 10201  013A62  EC55  F0A9         	call	_reverse	;wreg free
 10202  013A66                     l928:
 10203                           
 10204                           ;Types.c: 389: }
 10205                           ;Types.c: 390: destination[Length] = '\0';
 10206  013A66  0100               	movlb	0	; () banked
 10207  013A68  5172               	movf	itos@Length& (0+255),w,b
 10208  013A6A  0100               	movlb	0	; () banked
 10209  013A6C  256E               	addwf	itos@destination& (0+255),w,b
 10210  013A6E  6ED9               	movwf	fsr2l,c
 10211  013A70  0100               	movlb	0	; () banked
 10212  013A72  5173               	movf	(itos@Length+1)& (0+255),w,b
 10213  013A74  0100               	movlb	0	; () banked
 10214  013A76  216F               	addwfc	(itos@destination+1)& (0+255),w,b
 10215  013A78  6EDA               	movwf	fsr2h,c
 10216  013A7A  0E00               	movlw	0
 10217  013A7C  6EDF               	movwf	indf2,c
 10218                           
 10219                           ; BSR set to: 0
 10220  013A7E  0012               	return		;funcret
 10221  013A80                     __end_of_itos:
 10222                           	opt stack 0
 10223                           tosu	equ	0xFFF
 10224                           tosh	equ	0xFFE
 10225                           tosl	equ	0xFFD
 10226                           pclath	equ	0xFFA
 10227                           tblptru	equ	0xFF8
 10228                           tblptrh	equ	0xFF7
 10229                           tblptrl	equ	0xFF6
 10230                           tablat	equ	0xFF5
 10231                           prodh	equ	0xFF4
 10232                           prodl	equ	0xFF3
 10233                           intcon	equ	0xFF2
 10234                           postinc0	equ	0xFEE
 10235                           wreg	equ	0xFE8
 10236                           indf1	equ	0xFE7
 10237                           postdec1	equ	0xFE5
 10238                           fsr1h	equ	0xFE2
 10239                           fsr1l	equ	0xFE1
 10240                           indf2	equ	0xFDF
 10241                           postinc2	equ	0xFDE
 10242                           postdec2	equ	0xFDD
 10243                           fsr2h	equ	0xFDA
 10244                           fsr2l	equ	0xFD9
 10245                           status	equ	0xFD8
 10246                           
 10247 ;; *************** function _reverse *****************
 10248 ;; Defined at:
 10249 ;;		line 357 in file "Library/Types.c"
 10250 ;; Parameters:    Size  Location     Type
 10251 ;;  input           2    0[BANK0 ] PTR unsigned char 
 10252 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 10253 ;;  length          2    2[BANK0 ] unsigned short 
 10254 ;; Auto vars:     Size  Location     Type
 10255 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
 10256 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 10257 ;;  tempVar         1    4[BANK0 ] unsigned char 
 10258 ;; Return value:  Size  Location     Type
 10259 ;;                  1    wreg      void 
 10260 ;; Registers used:
 10261 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 10262 ;; Tracked objects:
 10263 ;;		On entry : 0/0
 10264 ;;		On exit  : 0/0
 10265 ;;		Unchanged: 0/0
 10266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10267 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10268 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10270 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10271 ;;Total ram usage:        7 bytes
 10272 ;; Hardware stack levels used:    1
 10273 ;; Hardware stack levels required when called:    7
 10274 ;; This function calls:
 10275 ;;		Nothing
 10276 ;; This function is called by:
 10277 ;;		_itos
 10278 ;; This function uses a non-reentrant model
 10279 ;;
 10280                           
 10281                           	psect	text45
 10282  0152AA                     __ptext45:
 10283                           	opt stack 0
 10284  0152AA                     _reverse:
 10285                           	opt stack 20
 10286                           
 10287                           ;Types.c: 359: char tempVar,
 10288                           ;Types.c: 360: *iterator = input + length;
 10289                           
 10290                           ; BSR set to: 0
 10291                           ;incstack = 0
 10292  0152AA  0100               	movlb	0	; () banked
 10293  0152AC  5162               	movf	reverse@length& (0+255),w,b
 10294  0152AE  0100               	movlb	0	; () banked
 10295  0152B0  2560               	addwf	reverse@input& (0+255),w,b
 10296  0152B2  0100               	movlb	0	; () banked
 10297  0152B4  6F65               	movwf	reverse@iterator& (0+255),b
 10298  0152B6  0100               	movlb	0	; () banked
 10299  0152B8  5163               	movf	(reverse@length+1)& (0+255),w,b
 10300  0152BA  0100               	movlb	0	; () banked
 10301  0152BC  2161               	addwfc	(reverse@input+1)& (0+255),w,b
 10302  0152BE  0100               	movlb	0	; () banked
 10303  0152C0  6F66               	movwf	(reverse@iterator+1)& (0+255),b
 10304                           
 10305                           ;Types.c: 362: while ( --iterator > input )
 10306  0152C2  D01A               	goto	l921
 10307  0152C4                     
 10308                           ; BSR set to: 0
 10309                           ;Types.c: 363: {
 10310                           ;Types.c: 364: tempVar = *input;
 10311                           
 10312                           ; BSR set to: 0
 10313  0152C4  C060  FFD9         	movff	reverse@input,fsr2l
 10314  0152C8  C061  FFDA         	movff	reverse@input+1,fsr2h
 10315  0152CC  50DF               	movf	indf2,w,c
 10316  0152CE  0100               	movlb	0	; () banked
 10317  0152D0  6F64               	movwf	reverse@tempVar& (0+255),b
 10318                           
 10319                           ; BSR set to: 0
 10320                           ;Types.c: 365: *input++=*iterator;
 10321  0152D2  C065  FFD9         	movff	reverse@iterator,fsr2l
 10322  0152D6  C066  FFDA         	movff	reverse@iterator+1,fsr2h
 10323  0152DA  C060  FFE1         	movff	reverse@input,fsr1l
 10324  0152DE  C061  FFE2         	movff	reverse@input+1,fsr1h
 10325  0152E2  CFDF FFE7          	movff	indf2,indf1
 10326                           
 10327                           ; BSR set to: 0
 10328  0152E6  0100               	movlb	0	; () banked
 10329  0152E8  4B60               	infsnz	reverse@input& (0+255),f,b
 10330  0152EA  2B61               	incf	(reverse@input+1)& (0+255),f,b
 10331                           
 10332                           ; BSR set to: 0
 10333                           ;Types.c: 366: *iterator=tempVar;
 10334  0152EC  C065  FFD9         	movff	reverse@iterator,fsr2l
 10335  0152F0  C066  FFDA         	movff	reverse@iterator+1,fsr2h
 10336  0152F4  C064  FFDF         	movff	reverse@tempVar,indf2
 10337  0152F8                     l921:
 10338                           
 10339                           ; BSR set to: 0
 10340                           
 10341                           ; BSR set to: 0
 10342  0152F8  0100               	movlb	0	; () banked
 10343  0152FA  0765               	decf	reverse@iterator& (0+255),f,b
 10344  0152FC  A0D8               	btfss	status,0,c
 10345  0152FE  0766               	decf	(reverse@iterator+1)& (0+255),f,b
 10346  015300  0100               	movlb	0	; () banked
 10347  015302  5165               	movf	reverse@iterator& (0+255),w,b
 10348  015304  0100               	movlb	0	; () banked
 10349  015306  5D60               	subwf	reverse@input& (0+255),w,b
 10350  015308  0100               	movlb	0	; () banked
 10351  01530A  5166               	movf	(reverse@iterator+1)& (0+255),w,b
 10352  01530C  0100               	movlb	0	; () banked
 10353  01530E  5961               	subwfb	(reverse@input+1)& (0+255),w,b
 10354  015310  B0D8               	btfsc	status,0,c
 10355  015312  0012               	return	
 10356  015314  D7D7               	goto	l922
 10357  015316                     __end_of_reverse:
 10358                           	opt stack 0
 10359                           tosu	equ	0xFFF
 10360                           tosh	equ	0xFFE
 10361                           tosl	equ	0xFFD
 10362                           pclath	equ	0xFFA
 10363                           tblptru	equ	0xFF8
 10364                           tblptrh	equ	0xFF7
 10365                           tblptrl	equ	0xFF6
 10366                           tablat	equ	0xFF5
 10367                           prodh	equ	0xFF4
 10368                           prodl	equ	0xFF3
 10369                           intcon	equ	0xFF2
 10370                           postinc0	equ	0xFEE
 10371                           wreg	equ	0xFE8
 10372                           indf1	equ	0xFE7
 10373                           postdec1	equ	0xFE5
 10374                           fsr1h	equ	0xFE2
 10375                           fsr1l	equ	0xFE1
 10376                           indf2	equ	0xFDF
 10377                           postinc2	equ	0xFDE
 10378                           postdec2	equ	0xFDD
 10379                           fsr2h	equ	0xFDA
 10380                           fsr2l	equ	0xFD9
 10381                           status	equ	0xFD8
 10382                           
 10383 ;; *************** function ___lwmod *****************
 10384 ;; Defined at:
 10385 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
 10386 ;; Parameters:    Size  Location     Type
 10387 ;;  dividend        2    7[BANK0 ] unsigned int 
 10388 ;;  divisor         2    9[BANK0 ] unsigned int 
 10389 ;; Auto vars:     Size  Location     Type
 10390 ;;  counter         1   11[BANK0 ] unsigned char 
 10391 ;; Return value:  Size  Location     Type
 10392 ;;                  2    7[BANK0 ] unsigned int 
 10393 ;; Registers used:
 10394 ;;		wreg, status,2, status,0
 10395 ;; Tracked objects:
 10396 ;;		On entry : 0/0
 10397 ;;		On exit  : 0/0
 10398 ;;		Unchanged: 0/0
 10399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10400 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10401 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10403 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10404 ;;Total ram usage:        5 bytes
 10405 ;; Hardware stack levels used:    1
 10406 ;; Hardware stack levels required when called:    7
 10407 ;; This function calls:
 10408 ;;		Nothing
 10409 ;; This function is called by:
 10410 ;;		_itos
 10411 ;;		_printf
 10412 ;; This function uses a non-reentrant model
 10413 ;;
 10414                           
 10415                           	psect	text46
 10416  0156B6                     __ptext46:
 10417                           	opt stack 0
 10418  0156B6                     ___lwmod:
 10419                           	opt stack 21
 10420                           
 10421                           ; BSR set to: 0
 10422                           ;incstack = 0
 10423  0156B6  0100               	movlb	0	; () banked
 10424  0156B8  5169               	movf	___lwmod@divisor& (0+255),w,b
 10425  0156BA  0100               	movlb	0	; () banked
 10426  0156BC  116A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 10427  0156BE  B4D8               	btfsc	status,2,c
 10428  0156C0  D026               	goto	l2848
 10429                           
 10430                           ; BSR set to: 0
 10431  0156C2  0E01               	movlw	1
 10432  0156C4  0100               	movlb	0	; () banked
 10433  0156C6  6F6B               	movwf	___lwmod@counter& (0+255),b
 10434  0156C8  D006               	goto	l2843
 10435  0156CA                     
 10436                           ; BSR set to: 0
 10437                           
 10438                           ; BSR set to: 0
 10439  0156CA  0100               	movlb	0	; () banked
 10440  0156CC  90D8               	bcf	status,0,c
 10441  0156CE  3769               	rlcf	___lwmod@divisor& (0+255),f,b
 10442  0156D0  376A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 10443  0156D2  0100               	movlb	0	; () banked
 10444  0156D4  2B6B               	incf	___lwmod@counter& (0+255),f,b
 10445  0156D6                     l2843:
 10446                           
 10447                           ; BSR set to: 0
 10448                           
 10449                           ; BSR set to: 0
 10450  0156D6  0100               	movlb	0	; () banked
 10451  0156D8  AF6A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 10452  0156DA  D7F7               	goto	l2844
 10453  0156DC                     u8850:
 10454                           
 10455                           ; BSR set to: 0
 10456                           
 10457                           ; BSR set to: 0
 10458                           
 10459                           ; BSR set to: 0
 10460  0156DC  0100               	movlb	0	; () banked
 10461  0156DE  5169               	movf	___lwmod@divisor& (0+255),w,b
 10462  0156E0  0100               	movlb	0	; () banked
 10463  0156E2  5D67               	subwf	___lwmod@dividend& (0+255),w,b
 10464  0156E4  0100               	movlb	0	; () banked
 10465  0156E6  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 10466  0156E8  0100               	movlb	0	; () banked
 10467  0156EA  5968               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 10468  0156EC  A0D8               	btfss	status,0,c
 10469  0156EE  D008               	goto	l2847
 10470                           
 10471                           ; BSR set to: 0
 10472  0156F0  0100               	movlb	0	; () banked
 10473  0156F2  5169               	movf	___lwmod@divisor& (0+255),w,b
 10474  0156F4  0100               	movlb	0	; () banked
 10475  0156F6  5F67               	subwf	___lwmod@dividend& (0+255),f,b
 10476  0156F8  0100               	movlb	0	; () banked
 10477  0156FA  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 10478  0156FC  0100               	movlb	0	; () banked
 10479  0156FE  5B68               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 10480  015700                     l2847:
 10481                           
 10482                           ; BSR set to: 0
 10483                           
 10484                           ; BSR set to: 0
 10485  015700  0100               	movlb	0	; () banked
 10486  015702  90D8               	bcf	status,0,c
 10487  015704  336A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 10488  015706  3369               	rrcf	___lwmod@divisor& (0+255),f,b
 10489                           
 10490                           ; BSR set to: 0
 10491  015708  0100               	movlb	0	; () banked
 10492  01570A  2F6B               	decfsz	___lwmod@counter& (0+255),f,b
 10493  01570C  D7E7               	goto	u8850
 10494  01570E                     l2848:
 10495                           
 10496                           ; BSR set to: 0
 10497                           
 10498                           ; BSR set to: 0
 10499  01570E  C067  F067         	movff	___lwmod@dividend,?___lwmod
 10500  015712  C068  F068         	movff	___lwmod@dividend+1,?___lwmod+1
 10501                           
 10502                           ; BSR set to: 0
 10503  015716  0012               	return		;funcret
 10504  015718                     __end_of___lwmod:
 10505                           	opt stack 0
 10506                           tosu	equ	0xFFF
 10507                           tosh	equ	0xFFE
 10508                           tosl	equ	0xFFD
 10509                           pclath	equ	0xFFA
 10510                           tblptru	equ	0xFF8
 10511                           tblptrh	equ	0xFF7
 10512                           tblptrl	equ	0xFF6
 10513                           tablat	equ	0xFF5
 10514                           prodh	equ	0xFF4
 10515                           prodl	equ	0xFF3
 10516                           intcon	equ	0xFF2
 10517                           postinc0	equ	0xFEE
 10518                           wreg	equ	0xFE8
 10519                           indf1	equ	0xFE7
 10520                           postdec1	equ	0xFE5
 10521                           fsr1h	equ	0xFE2
 10522                           fsr1l	equ	0xFE1
 10523                           indf2	equ	0xFDF
 10524                           postinc2	equ	0xFDE
 10525                           postdec2	equ	0xFDD
 10526                           fsr2h	equ	0xFDA
 10527                           fsr2l	equ	0xFD9
 10528                           status	equ	0xFD8
 10529                           
 10530 ;; *************** function ___lwdiv *****************
 10531 ;; Defined at:
 10532 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
 10533 ;; Parameters:    Size  Location     Type
 10534 ;;  dividend        2    0[BANK0 ] unsigned int 
 10535 ;;  divisor         2    2[BANK0 ] unsigned int 
 10536 ;; Auto vars:     Size  Location     Type
 10537 ;;  quotient        2    5[BANK0 ] unsigned int 
 10538 ;;  counter         1    4[BANK0 ] unsigned char 
 10539 ;; Return value:  Size  Location     Type
 10540 ;;                  2    0[BANK0 ] unsigned int 
 10541 ;; Registers used:
 10542 ;;		wreg, status,2, status,0
 10543 ;; Tracked objects:
 10544 ;;		On entry : 0/0
 10545 ;;		On exit  : 0/0
 10546 ;;		Unchanged: 0/0
 10547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10548 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10549 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10551 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10552 ;;Total ram usage:        7 bytes
 10553 ;; Hardware stack levels used:    1
 10554 ;; Hardware stack levels required when called:    7
 10555 ;; This function calls:
 10556 ;;		Nothing
 10557 ;; This function is called by:
 10558 ;;		_itos
 10559 ;;		_printf
 10560 ;; This function uses a non-reentrant model
 10561 ;;
 10562                           
 10563                           	psect	text47
 10564  014F7C                     __ptext47:
 10565                           	opt stack 0
 10566  014F7C                     ___lwdiv:
 10567                           	opt stack 21
 10568                           
 10569                           ; BSR set to: 0
 10570                           ;incstack = 0
 10571  014F7C  0E00               	movlw	0
 10572  014F7E  0100               	movlb	0	; () banked
 10573  014F80  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 10574  014F82  0E00               	movlw	0
 10575  014F84  6F65               	movwf	___lwdiv@quotient& (0+255),b
 10576                           
 10577                           ; BSR set to: 0
 10578  014F86  0100               	movlb	0	; () banked
 10579  014F88  5162               	movf	___lwdiv@divisor& (0+255),w,b
 10580  014F8A  0100               	movlb	0	; () banked
 10581  014F8C  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 10582  014F8E  B4D8               	btfsc	status,2,c
 10583  014F90  D02C               	goto	l2838
 10584                           
 10585                           ; BSR set to: 0
 10586  014F92  0E01               	movlw	1
 10587  014F94  0100               	movlb	0	; () banked
 10588  014F96  6F64               	movwf	___lwdiv@counter& (0+255),b
 10589  014F98  D006               	goto	l2833
 10590  014F9A                     
 10591                           ; BSR set to: 0
 10592                           
 10593                           ; BSR set to: 0
 10594  014F9A  0100               	movlb	0	; () banked
 10595  014F9C  90D8               	bcf	status,0,c
 10596  014F9E  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 10597  014FA0  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 10598  014FA2  0100               	movlb	0	; () banked
 10599  014FA4  2B64               	incf	___lwdiv@counter& (0+255),f,b
 10600  014FA6                     l2833:
 10601                           
 10602                           ; BSR set to: 0
 10603                           
 10604                           ; BSR set to: 0
 10605  014FA6  0100               	movlb	0	; () banked
 10606  014FA8  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 10607  014FAA  D7F7               	goto	l2834
 10608  014FAC                     u8820:
 10609                           
 10610                           ; BSR set to: 0
 10611                           
 10612                           ; BSR set to: 0
 10613                           
 10614                           ; BSR set to: 0
 10615  014FAC  0100               	movlb	0	; () banked
 10616  014FAE  90D8               	bcf	status,0,c
 10617  014FB0  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 10618  014FB2  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 10619                           
 10620                           ; BSR set to: 0
 10621  014FB4  0100               	movlb	0	; () banked
 10622  014FB6  5162               	movf	___lwdiv@divisor& (0+255),w,b
 10623  014FB8  0100               	movlb	0	; () banked
 10624  014FBA  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 10625  014FBC  0100               	movlb	0	; () banked
 10626  014FBE  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 10627  014FC0  0100               	movlb	0	; () banked
 10628  014FC2  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 10629  014FC4  A0D8               	btfss	status,0,c
 10630  014FC6  D00A               	goto	l2837
 10631                           
 10632                           ; BSR set to: 0
 10633  014FC8  0100               	movlb	0	; () banked
 10634  014FCA  5162               	movf	___lwdiv@divisor& (0+255),w,b
 10635  014FCC  0100               	movlb	0	; () banked
 10636  014FCE  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 10637  014FD0  0100               	movlb	0	; () banked
 10638  014FD2  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 10639  014FD4  0100               	movlb	0	; () banked
 10640  014FD6  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 10641                           
 10642                           ; BSR set to: 0
 10643  014FD8  0100               	movlb	0	; () banked
 10644  014FDA  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 10645  014FDC                     l2837:
 10646                           
 10647                           ; BSR set to: 0
 10648                           
 10649                           ; BSR set to: 0
 10650  014FDC  0100               	movlb	0	; () banked
 10651  014FDE  90D8               	bcf	status,0,c
 10652  014FE0  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 10653  014FE2  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 10654                           
 10655                           ; BSR set to: 0
 10656  014FE4  0100               	movlb	0	; () banked
 10657  014FE6  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 10658  014FE8  D7E1               	goto	u8820
 10659  014FEA                     l2838:
 10660                           
 10661                           ; BSR set to: 0
 10662                           
 10663                           ; BSR set to: 0
 10664  014FEA  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 10665  014FEE  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 10666                           
 10667                           ; BSR set to: 0
 10668  014FF2  0012               	return		;funcret
 10669  014FF4                     __end_of___lwdiv:
 10670                           	opt stack 0
 10671                           tosu	equ	0xFFF
 10672                           tosh	equ	0xFFE
 10673                           tosl	equ	0xFFD
 10674                           pclath	equ	0xFFA
 10675                           tblptru	equ	0xFF8
 10676                           tblptrh	equ	0xFF7
 10677                           tblptrl	equ	0xFF6
 10678                           tablat	equ	0xFF5
 10679                           prodh	equ	0xFF4
 10680                           prodl	equ	0xFF3
 10681                           intcon	equ	0xFF2
 10682                           postinc0	equ	0xFEE
 10683                           wreg	equ	0xFE8
 10684                           indf1	equ	0xFE7
 10685                           postdec1	equ	0xFE5
 10686                           fsr1h	equ	0xFE2
 10687                           fsr1l	equ	0xFE1
 10688                           indf2	equ	0xFDF
 10689                           postinc2	equ	0xFDE
 10690                           postdec2	equ	0xFDD
 10691                           fsr2h	equ	0xFDA
 10692                           fsr2l	equ	0xFD9
 10693                           status	equ	0xFD8
 10694                           
 10695 ;; *************** function _HMI_SetSegments *****************
 10696 ;; Defined at:
 10697 ;;		line 226 in file "HMI.c"
 10698 ;; Parameters:    Size  Location     Type
 10699 ;;  pString         2    1[BANK0 ] PTR unsigned char 
 10700 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 10701 ;; Auto vars:     Size  Location     Type
 10702 ;;  in              2    4[BANK0 ] unsigned short 
 10703 ;; Return value:  Size  Location     Type
 10704 ;;                  1    wreg      void 
 10705 ;; Registers used:
 10706 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10707 ;; Tracked objects:
 10708 ;;		On entry : 0/0
 10709 ;;		On exit  : 0/0
 10710 ;;		Unchanged: 0/0
 10711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10712 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10713 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10714 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10715 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10716 ;;Total ram usage:        5 bytes
 10717 ;; Hardware stack levels used:    1
 10718 ;; Hardware stack levels required when called:    8
 10719 ;; This function calls:
 10720 ;;		_ToSegment
 10721 ;; This function is called by:
 10722 ;;		_HMI_SetNumber
 10723 ;; This function uses a non-reentrant model
 10724 ;;
 10725                           
 10726                           	psect	text48
 10727  01418E                     __ptext48:
 10728                           	opt stack 0
 10729  01418E                     _HMI_SetSegments:
 10730                           	opt stack 20
 10731                           
 10732                           ;HMI.c: 228: UINT16 in=0;
 10733                           
 10734                           ; BSR set to: 0
 10735                           ;incstack = 0
 10736  01418E  0E00               	movlw	0
 10737  014190  0100               	movlb	0	; () banked
 10738  014192  6F65               	movwf	(HMI_SetSegments@in+1)& (0+255),b
 10739  014194  0E00               	movlw	0
 10740  014196  6F64               	movwf	HMI_SetSegments@in& (0+255),b
 10741                           
 10742                           ;HMI.c: 229: while(*pString)
 10743  014198  D038               	goto	l1202
 10744  01419A                     
 10745                           ; BSR set to: 0
 10746                           ;HMI.c: 230: {
 10747                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
 10748                           
 10749                           ; BSR set to: 0
 10750  01419A  0E2B               	movlw	low _HMIBoard
 10751  01419C  0100               	movlb	0	; () banked
 10752  01419E  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 10753  0141A0  6ED9               	movwf	fsr2l,c
 10754  0141A2  0E03               	movlw	high _HMIBoard
 10755  0141A4  0100               	movlb	0	; () banked
 10756  0141A6  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 10757  0141A8  6EDA               	movwf	fsr2h,c
 10758  0141AA  C061  FFE1         	movff	HMI_SetSegments@pString,fsr1l
 10759  0141AE  C062  FFE2         	movff	HMI_SetSegments@pString+1,fsr1h
 10760  0141B2  50E7               	movf	indf1,w,c
 10761  0141B4  EC10  F08C         	call	_ToSegment
 10762  0141B8  6EDF               	movwf	indf2,c
 10763                           
 10764                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
 10765  0141BA  0E2B               	movlw	low _HMIBoard
 10766  0141BC  0100               	movlb	0	; () banked
 10767  0141BE  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 10768  0141C0  6ED9               	movwf	fsr2l,c
 10769  0141C2  0E03               	movlw	high _HMIBoard
 10770  0141C4  0100               	movlb	0	; () banked
 10771  0141C6  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 10772  0141C8  6EDA               	movwf	fsr2h,c
 10773  0141CA  0E80               	movlw	128
 10774  0141CC  18DE               	xorwf	postinc2,w,c
 10775  0141CE  A4D8               	btfss	status,2,c
 10776  0141D0  D00E               	goto	l1201
 10777                           
 10778                           ; BSR set to: 0
 10779                           ;HMI.c: 234: {
 10780                           ;HMI.c: 235: in--;
 10781  0141D2  0100               	movlb	0	; () banked
 10782  0141D4  0764               	decf	HMI_SetSegments@in& (0+255),f,b
 10783  0141D6  A0D8               	btfss	status,0,c
 10784  0141D8  0765               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
 10785                           
 10786                           ; BSR set to: 0
 10787                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
 10788  0141DA  0E2B               	movlw	low _HMIBoard
 10789  0141DC  0100               	movlb	0	; () banked
 10790  0141DE  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 10791  0141E0  6ED9               	movwf	fsr2l,c
 10792  0141E2  0E03               	movlw	high _HMIBoard
 10793  0141E4  0100               	movlb	0	; () banked
 10794  0141E6  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 10795  0141E8  6EDA               	movwf	fsr2h,c
 10796  0141EA  0E00               	movlw	0
 10797  0141EC  8EDB               	bsf	plusw2,7,c
 10798  0141EE                     l1201:
 10799                           
 10800                           ; BSR set to: 0
 10801                           ;HMI.c: 237: }
 10802                           ;HMI.c: 239: pString++;
 10803                           
 10804                           ; BSR set to: 0
 10805  0141EE  0100               	movlb	0	; () banked
 10806  0141F0  4B61               	infsnz	HMI_SetSegments@pString& (0+255),f,b
 10807  0141F2  2B62               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
 10808                           
 10809                           ; BSR set to: 0
 10810                           ;HMI.c: 240: in++;
 10811  0141F4  0100               	movlb	0	; () banked
 10812  0141F6  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
 10813  0141F8  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 10814                           
 10815                           ; BSR set to: 0
 10816                           ;HMI.c: 241: if (in>=6)
 10817  0141FA  0100               	movlb	0	; () banked
 10818  0141FC  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 10819  0141FE  E11A               	bnz	l12313
 10820  014200  0E06               	movlw	6
 10821  014202  0100               	movlb	0	; () banked
 10822  014204  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
 10823  014206  B0D8               	btfsc	status,0,c
 10824  014208  D015               	goto	l1204
 10825  01420A                     l1202:
 10826                           
 10827                           ; BSR set to: 0
 10828                           
 10829                           ; BSR set to: 0
 10830                           
 10831                           ; BSR set to: 0
 10832  01420A  C061  FFD9         	movff	HMI_SetSegments@pString,fsr2l
 10833  01420E  C062  FFDA         	movff	HMI_SetSegments@pString+1,fsr2h
 10834  014212  50DF               	movf	indf2,w,c
 10835  014214  B4D8               	btfsc	status,2,c
 10836  014216  D00E               	goto	l1204
 10837  014218  D7C0               	goto	l1200
 10838  01421A                     
 10839                           ; BSR set to: 0
 10840                           ;HMI.c: 245: {
 10841                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
 10842                           
 10843                           ; BSR set to: 0
 10844  01421A  0E2B               	movlw	low _HMIBoard
 10845  01421C  0100               	movlb	0	; () banked
 10846  01421E  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 10847  014220  6ED9               	movwf	fsr2l,c
 10848  014222  0E03               	movlw	high _HMIBoard
 10849  014224  0100               	movlb	0	; () banked
 10850  014226  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 10851  014228  6EDA               	movwf	fsr2h,c
 10852  01422A  0E00               	movlw	0
 10853  01422C  6EDF               	movwf	indf2,c
 10854                           
 10855                           ; BSR set to: 0
 10856                           ;HMI.c: 247: in++;
 10857  01422E  0100               	movlb	0	; () banked
 10858  014230  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
 10859  014232  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 10860  014234                     l1204:
 10861  014234                     l12313:
 10862                           
 10863                           ; BSR set to: 0
 10864  014234  0100               	movlb	0	; () banked
 10865  014236  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 10866  014238  E106               	bnz	l1207
 10867  01423A  0E06               	movlw	6
 10868  01423C  0100               	movlb	0	; () banked
 10869  01423E  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
 10870  014240  B0D8               	btfsc	status,0,c
 10871  014242  0012               	return	
 10872  014244  D7EA               	goto	l1205
 10873  014246                     l1207:
 10874                           
 10875                           ; BSR set to: 0
 10876  014246  0012               	return		;funcret
 10877  014248                     __end_of_HMI_SetSegments:
 10878                           	opt stack 0
 10879                           tosu	equ	0xFFF
 10880                           tosh	equ	0xFFE
 10881                           tosl	equ	0xFFD
 10882                           pclath	equ	0xFFA
 10883                           tblptru	equ	0xFF8
 10884                           tblptrh	equ	0xFF7
 10885                           tblptrl	equ	0xFF6
 10886                           tablat	equ	0xFF5
 10887                           prodh	equ	0xFF4
 10888                           prodl	equ	0xFF3
 10889                           intcon	equ	0xFF2
 10890                           postinc0	equ	0xFEE
 10891                           wreg	equ	0xFE8
 10892                           indf1	equ	0xFE7
 10893                           postdec1	equ	0xFE5
 10894                           fsr1h	equ	0xFE2
 10895                           fsr1l	equ	0xFE1
 10896                           indf2	equ	0xFDF
 10897                           postinc2	equ	0xFDE
 10898                           postdec2	equ	0xFDD
 10899                           plusw2	equ	0xFDB
 10900                           fsr2h	equ	0xFDA
 10901                           fsr2l	equ	0xFD9
 10902                           status	equ	0xFD8
 10903                           
 10904 ;; *************** function _ToSegment *****************
 10905 ;; Defined at:
 10906 ;;		line 284 in file "Library/Types.c"
 10907 ;; Parameters:    Size  Location     Type
 10908 ;;  pCHR            1    wreg     unsigned char 
 10909 ;; Auto vars:     Size  Location     Type
 10910 ;;  pCHR            1    0[BANK0 ] unsigned char 
 10911 ;; Return value:  Size  Location     Type
 10912 ;;                  1    wreg      unsigned char 
 10913 ;; Registers used:
 10914 ;;		wreg, status,2, status,0
 10915 ;; Tracked objects:
 10916 ;;		On entry : 0/0
 10917 ;;		On exit  : 0/0
 10918 ;;		Unchanged: 0/0
 10919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10921 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10923 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10924 ;;Total ram usage:        1 bytes
 10925 ;; Hardware stack levels used:    1
 10926 ;; Hardware stack levels required when called:    7
 10927 ;; This function calls:
 10928 ;;		Nothing
 10929 ;; This function is called by:
 10930 ;;		_HMI_SetSegments
 10931 ;; This function uses a non-reentrant model
 10932 ;;
 10933                           
 10934                           	psect	text49
 10935  011820                     __ptext49:
 10936                           	opt stack 0
 10937  011820                     _ToSegment:
 10938                           	opt stack 20
 10939                           
 10940                           ; BSR set to: 0
 10941                           ;incstack = 0
 10942                           ;ToSegment@pCHR stored from wreg
 10943  011820  0100               	movlb	0	; () banked
 10944  011822  6F60               	movwf	ToSegment@pCHR& (0+255),b
 10945                           
 10946                           ;Types.c: 286: switch(pCHR)
 10947  011824  D07E               	goto	l853
 10948  011826  0E3F               	movlw	63
 10949  011828  0012               	return	
 10950  01182A  0E06               	movlw	6
 10951  01182C  0012               	return	
 10952  01182E  0E5B               	movlw	91
 10953  011830  0012               	return	
 10954  011832  0E4F               	movlw	79
 10955  011834  0012               	return	
 10956  011836  0E66               	movlw	102
 10957  011838  0012               	return	
 10958  01183A  0E6D               	movlw	109
 10959  01183C  0012               	return	
 10960  01183E  0E7D               	movlw	125
 10961  011840  0012               	return	
 10962  011842  0E07               	movlw	7
 10963  011844  0012               	return	
 10964  011846  0E7F               	movlw	127
 10965  011848  0012               	return	
 10966  01184A  0E6F               	movlw	111
 10967  01184C  0012               	return	
 10968  01184E  0E5F               	movlw	95
 10969  011850  0012               	return	
 10970  011852  0E7C               	movlw	124
 10971  011854  0012               	return	
 10972  011856  0E58               	movlw	88
 10973  011858  0012               	return	
 10974  01185A  0E5E               	movlw	94
 10975  01185C  0012               	return	
 10976  01185E  0E7B               	movlw	123
 10977  011860  0012               	return	
 10978  011862  0E71               	movlw	113
 10979  011864  0012               	return	
 10980  011866  0E6F               	movlw	111
 10981  011868  0012               	return	
 10982  01186A  0E74               	movlw	116
 10983  01186C  0012               	return	
 10984  01186E  0E04               	movlw	4
 10985  011870  0012               	return	
 10986  011872  0E0E               	movlw	14
 10987  011874  0012               	return	
 10988  011876  0E7A               	movlw	122
 10989  011878  0012               	return	
 10990  01187A  0E06               	movlw	6
 10991  01187C  0012               	return	
 10992  01187E  0E14               	movlw	20
 10993  011880  0012               	return	
 10994  011882  0E54               	movlw	84
 10995  011884  0012               	return	
 10996  011886  0E5C               	movlw	92
 10997  011888  0012               	return	
 10998  01188A  0E73               	movlw	115
 10999  01188C  0012               	return	
 11000  01188E  0E67               	movlw	103
 11001  011890  0012               	return	
 11002  011892  0E50               	movlw	80
 11003  011894  0012               	return	
 11004  011896  0E6D               	movlw	109
 11005  011898  0012               	return	
 11006  01189A  0E78               	movlw	120
 11007  01189C  0012               	return	
 11008  01189E  0E1C               	movlw	28
 11009  0118A0  0012               	return	
 11010  0118A2  0E62               	movlw	98
 11011  0118A4  0012               	return	
 11012  0118A6  0E2A               	movlw	42
 11013  0118A8  0012               	return	
 11014  0118AA  0E64               	movlw	100
 11015  0118AC  0012               	return	
 11016  0118AE  0E6E               	movlw	110
 11017  0118B0  0012               	return	
 11018  0118B2  0E5B               	movlw	91
 11019  0118B4  0012               	return	
 11020  0118B6  0E77               	movlw	119
 11021  0118B8  0012               	return	
 11022  0118BA  0E7F               	movlw	127
 11023  0118BC  0012               	return	
 11024  0118BE  0E39               	movlw	57
 11025  0118C0  0012               	return	
 11026  0118C2  0E3F               	movlw	63
 11027  0118C4  0012               	return	
 11028  0118C6  0E79               	movlw	121
 11029  0118C8  0012               	return	
 11030  0118CA  0E71               	movlw	113
 11031  0118CC  0012               	return	
 11032  0118CE  0E3D               	movlw	61
 11033  0118D0  0012               	return	
 11034  0118D2  0E76               	movlw	118
 11035  0118D4  0012               	return	
 11036  0118D6  0E06               	movlw	6
 11037  0118D8  0012               	return	
 11038  0118DA  0E1E               	movlw	30
 11039  0118DC  0012               	return	
 11040  0118DE  0E57               	movlw	87
 11041  0118E0  0012               	return	
 11042  0118E2  0E38               	movlw	56
 11043  0118E4  0012               	return	
 11044  0118E6  0E76               	movlw	118
 11045  0118E8  0012               	return	
 11046  0118EA  0E76               	movlw	118
 11047  0118EC  0012               	return	
 11048  0118EE  0E3F               	movlw	63
 11049  0118F0  0012               	return	
 11050  0118F2  0E73               	movlw	115
 11051  0118F4  0012               	return	
 11052  0118F6  0E3F               	movlw	63
 11053  0118F8  0012               	return	
 11054  0118FA  0E77               	movlw	119
 11055  0118FC  0012               	return	
 11056  0118FE  0E6D               	movlw	109
 11057  011900  0012               	return	
 11058  011902  0E31               	movlw	49
 11059  011904  0012               	return	
 11060  011906  0E3E               	movlw	62
 11061  011908  0012               	return	
 11062  01190A  0E3E               	movlw	62
 11063  01190C  0012               	return	
 11064  01190E  0E7E               	movlw	126
 11065  011910  0012               	return	
 11066  011912  0E76               	movlw	118
 11067  011914  0012               	return	
 11068  011916  0E66               	movlw	102
 11069  011918  0012               	return	
 11070  01191A  0E5B               	movlw	91
 11071  01191C  0012               	return	
 11072  01191E  0E80               	movlw	128
 11073  011920  0012               	return	
 11074  011922                     l853:
 11075  011922  0100               	movlb	0	; () banked
 11076  011924  5160               	movf	ToSegment@pCHR& (0+255),w,b
 11077                           
 11078                           ; Switch size 1, requested type "space"
 11079                           ; Number of cases is 63, Range of values is 46 to 122
 11080                           ; switch strategies available:
 11081                           ; Name         Instructions Cycles
 11082                           ; simple_byte          190    96 (average)
 11083                           ;	Chosen strategy is simple_byte
 11084  011926  0A2E               	xorlw	46	; case 46
 11085  011928  B4D8               	btfsc	status,2,c
 11086  01192A  D7F9               	goto	l917
 11087  01192C  0A1E               	xorlw	30	; case 48
 11088  01192E  B4D8               	btfsc	status,2,c
 11089  011930  D77A               	goto	l854
 11090  011932  0A01               	xorlw	1	; case 49
 11091  011934  B4D8               	btfsc	status,2,c
 11092  011936  D779               	goto	l856
 11093  011938  0A03               	xorlw	3	; case 50
 11094  01193A  B4D8               	btfsc	status,2,c
 11095  01193C  D778               	goto	l857
 11096  01193E  0A01               	xorlw	1	; case 51
 11097  011940  B4D8               	btfsc	status,2,c
 11098  011942  D777               	goto	l858
 11099  011944  0A07               	xorlw	7	; case 52
 11100  011946  B4D8               	btfsc	status,2,c
 11101  011948  D776               	goto	l859
 11102  01194A  0A01               	xorlw	1	; case 53
 11103  01194C  B4D8               	btfsc	status,2,c
 11104  01194E  D775               	goto	l860
 11105  011950  0A03               	xorlw	3	; case 54
 11106  011952  B4D8               	btfsc	status,2,c
 11107  011954  D774               	goto	l861
 11108  011956  0A01               	xorlw	1	; case 55
 11109  011958  B4D8               	btfsc	status,2,c
 11110  01195A  D773               	goto	l862
 11111  01195C  0A0F               	xorlw	15	; case 56
 11112  01195E  B4D8               	btfsc	status,2,c
 11113  011960  D772               	goto	l863
 11114  011962  0A01               	xorlw	1	; case 57
 11115  011964  B4D8               	btfsc	status,2,c
 11116  011966  D771               	goto	l864
 11117  011968  0A78               	xorlw	120	; case 65
 11118  01196A  B4D8               	btfsc	status,2,c
 11119  01196C  D7A4               	goto	l891
 11120  01196E  0A03               	xorlw	3	; case 66
 11121  011970  B4D8               	btfsc	status,2,c
 11122  011972  D7A3               	goto	l892
 11123  011974  0A01               	xorlw	1	; case 67
 11124  011976  B4D8               	btfsc	status,2,c
 11125  011978  D7A2               	goto	l893
 11126  01197A  0A07               	xorlw	7	; case 68
 11127  01197C  B4D8               	btfsc	status,2,c
 11128  01197E  D7A1               	goto	l894
 11129  011980  0A01               	xorlw	1	; case 69
 11130  011982  B4D8               	btfsc	status,2,c
 11131  011984  D7A0               	goto	l895
 11132  011986  0A03               	xorlw	3	; case 70
 11133  011988  B4D8               	btfsc	status,2,c
 11134  01198A  D79F               	goto	l896
 11135  01198C  0A01               	xorlw	1	; case 71
 11136  01198E  B4D8               	btfsc	status,2,c
 11137  011990  D79E               	goto	l897
 11138  011992  0A0F               	xorlw	15	; case 72
 11139  011994  B4D8               	btfsc	status,2,c
 11140  011996  D79D               	goto	l898
 11141  011998  0A01               	xorlw	1	; case 73
 11142  01199A  B4D8               	btfsc	status,2,c
 11143  01199C  D79C               	goto	l899
 11144  01199E  0A03               	xorlw	3	; case 74
 11145  0119A0  B4D8               	btfsc	status,2,c
 11146  0119A2  D79B               	goto	l900
 11147  0119A4  0A01               	xorlw	1	; case 75
 11148  0119A6  B4D8               	btfsc	status,2,c
 11149  0119A8  D79A               	goto	l901
 11150  0119AA  0A07               	xorlw	7	; case 76
 11151  0119AC  B4D8               	btfsc	status,2,c
 11152  0119AE  D799               	goto	l902
 11153  0119B0  0A01               	xorlw	1	; case 77
 11154  0119B2  B4D8               	btfsc	status,2,c
 11155  0119B4  D798               	goto	l903
 11156  0119B6  0A03               	xorlw	3	; case 78
 11157  0119B8  B4D8               	btfsc	status,2,c
 11158  0119BA  D797               	goto	l904
 11159  0119BC  0A01               	xorlw	1	; case 79
 11160  0119BE  B4D8               	btfsc	status,2,c
 11161  0119C0  D796               	goto	l905
 11162  0119C2  0A1F               	xorlw	31	; case 80
 11163  0119C4  B4D8               	btfsc	status,2,c
 11164  0119C6  D795               	goto	l906
 11165  0119C8  0A01               	xorlw	1	; case 81
 11166  0119CA  B4D8               	btfsc	status,2,c
 11167  0119CC  D794               	goto	l907
 11168  0119CE  0A03               	xorlw	3	; case 82
 11169  0119D0  B4D8               	btfsc	status,2,c
 11170  0119D2  D793               	goto	l908
 11171  0119D4  0A01               	xorlw	1	; case 83
 11172  0119D6  B4D8               	btfsc	status,2,c
 11173  0119D8  D792               	goto	l909
 11174  0119DA  0A07               	xorlw	7	; case 84
 11175  0119DC  B4D8               	btfsc	status,2,c
 11176  0119DE  D791               	goto	l910
 11177  0119E0  0A01               	xorlw	1	; case 85
 11178  0119E2  B4D8               	btfsc	status,2,c
 11179  0119E4  D790               	goto	l911
 11180  0119E6  0A03               	xorlw	3	; case 86
 11181  0119E8  B4D8               	btfsc	status,2,c
 11182  0119EA  D78F               	goto	l912
 11183  0119EC  0A01               	xorlw	1	; case 87
 11184  0119EE  B4D8               	btfsc	status,2,c
 11185  0119F0  D78E               	goto	l913
 11186  0119F2  0A0F               	xorlw	15	; case 88
 11187  0119F4  B4D8               	btfsc	status,2,c
 11188  0119F6  D78D               	goto	l914
 11189  0119F8  0A01               	xorlw	1	; case 89
 11190  0119FA  B4D8               	btfsc	status,2,c
 11191  0119FC  D78C               	goto	l915
 11192  0119FE  0A03               	xorlw	3	; case 90
 11193  011A00  B4D8               	btfsc	status,2,c
 11194  011A02  D78B               	goto	l916
 11195  011A04  0A3B               	xorlw	59	; case 97
 11196  011A06  B4D8               	btfsc	status,2,c
 11197  011A08  D722               	goto	l865
 11198  011A0A  0A03               	xorlw	3	; case 98
 11199  011A0C  B4D8               	btfsc	status,2,c
 11200  011A0E  D721               	goto	l866
 11201  011A10  0A01               	xorlw	1	; case 99
 11202  011A12  B4D8               	btfsc	status,2,c
 11203  011A14  D720               	goto	l867
 11204  011A16  0A07               	xorlw	7	; case 100
 11205  011A18  B4D8               	btfsc	status,2,c
 11206  011A1A  D71F               	goto	l868
 11207  011A1C  0A01               	xorlw	1	; case 101
 11208  011A1E  B4D8               	btfsc	status,2,c
 11209  011A20  D71E               	goto	l869
 11210  011A22  0A03               	xorlw	3	; case 102
 11211  011A24  B4D8               	btfsc	status,2,c
 11212  011A26  D71D               	goto	l870
 11213  011A28  0A01               	xorlw	1	; case 103
 11214  011A2A  B4D8               	btfsc	status,2,c
 11215  011A2C  D71C               	goto	l871
 11216  011A2E  0A0F               	xorlw	15	; case 104
 11217  011A30  B4D8               	btfsc	status,2,c
 11218  011A32  D71B               	goto	l872
 11219  011A34  0A01               	xorlw	1	; case 105
 11220  011A36  B4D8               	btfsc	status,2,c
 11221  011A38  D71A               	goto	l873
 11222  011A3A  0A03               	xorlw	3	; case 106
 11223  011A3C  B4D8               	btfsc	status,2,c
 11224  011A3E  D719               	goto	l874
 11225  011A40  0A01               	xorlw	1	; case 107
 11226  011A42  B4D8               	btfsc	status,2,c
 11227  011A44  D718               	goto	l875
 11228  011A46  0A07               	xorlw	7	; case 108
 11229  011A48  B4D8               	btfsc	status,2,c
 11230  011A4A  D717               	goto	l876
 11231  011A4C  0A01               	xorlw	1	; case 109
 11232  011A4E  B4D8               	btfsc	status,2,c
 11233  011A50  D716               	goto	l877
 11234  011A52  0A03               	xorlw	3	; case 110
 11235  011A54  B4D8               	btfsc	status,2,c
 11236  011A56  D715               	goto	l878
 11237  011A58  0A01               	xorlw	1	; case 111
 11238  011A5A  B4D8               	btfsc	status,2,c
 11239  011A5C  D714               	goto	l879
 11240  011A5E  0A1F               	xorlw	31	; case 112
 11241  011A60  B4D8               	btfsc	status,2,c
 11242  011A62  D713               	goto	l880
 11243  011A64  0A01               	xorlw	1	; case 113
 11244  011A66  B4D8               	btfsc	status,2,c
 11245  011A68  D712               	goto	l881
 11246  011A6A  0A03               	xorlw	3	; case 114
 11247  011A6C  B4D8               	btfsc	status,2,c
 11248  011A6E  D711               	goto	l882
 11249  011A70  0A01               	xorlw	1	; case 115
 11250  011A72  B4D8               	btfsc	status,2,c
 11251  011A74  D710               	goto	l883
 11252  011A76  0A07               	xorlw	7	; case 116
 11253  011A78  B4D8               	btfsc	status,2,c
 11254  011A7A  D70F               	goto	l884
 11255  011A7C  0A01               	xorlw	1	; case 117
 11256  011A7E  B4D8               	btfsc	status,2,c
 11257  011A80  D70E               	goto	l885
 11258  011A82  0A03               	xorlw	3	; case 118
 11259  011A84  B4D8               	btfsc	status,2,c
 11260  011A86  D70D               	goto	l886
 11261  011A88  0A01               	xorlw	1	; case 119
 11262  011A8A  B4D8               	btfsc	status,2,c
 11263  011A8C  D70C               	goto	l887
 11264  011A8E  0A0F               	xorlw	15	; case 120
 11265  011A90  B4D8               	btfsc	status,2,c
 11266  011A92  D70B               	goto	l888
 11267  011A94  0A01               	xorlw	1	; case 121
 11268  011A96  B4D8               	btfsc	status,2,c
 11269  011A98  D70A               	goto	l889
 11270  011A9A  0A03               	xorlw	3	; case 122
 11271  011A9C  B4D8               	btfsc	status,2,c
 11272  011A9E  D709               	goto	l890
 11273                           
 11274                           ;Types.c: 354: return 0;
 11275                           
 11276                           ; BSR set to: 0
 11277  011AA0  0E00               	movlw	0
 11278  011AA2  0012               	return	
 11279  011AA4                     __end_of_ToSegment:
 11280                           	opt stack 0
 11281                           tosu	equ	0xFFF
 11282                           tosh	equ	0xFFE
 11283                           tosl	equ	0xFFD
 11284                           pclath	equ	0xFFA
 11285                           tblptru	equ	0xFF8
 11286                           tblptrh	equ	0xFF7
 11287                           tblptrl	equ	0xFF6
 11288                           tablat	equ	0xFF5
 11289                           prodh	equ	0xFF4
 11290                           prodl	equ	0xFF3
 11291                           intcon	equ	0xFF2
 11292                           postinc0	equ	0xFEE
 11293                           wreg	equ	0xFE8
 11294                           indf1	equ	0xFE7
 11295                           postdec1	equ	0xFE5
 11296                           fsr1h	equ	0xFE2
 11297                           fsr1l	equ	0xFE1
 11298                           indf2	equ	0xFDF
 11299                           postinc2	equ	0xFDE
 11300                           postdec2	equ	0xFDD
 11301                           plusw2	equ	0xFDB
 11302                           fsr2h	equ	0xFDA
 11303                           fsr2l	equ	0xFD9
 11304                           status	equ	0xFD8
 11305                           
 11306 ;; *************** function _HMI_SetButton *****************
 11307 ;; Defined at:
 11308 ;;		line 186 in file "HMI.c"
 11309 ;; Parameters:    Size  Location     Type
 11310 ;;  pValue          1    wreg     unsigned char 
 11311 ;; Auto vars:     Size  Location     Type
 11312 ;;  pValue          1    6[BANK0 ] unsigned char 
 11313 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
 11314 ;;  v               1    7[BANK0 ] unsigned char 
 11315 ;; Return value:  Size  Location     Type
 11316 ;;                  1    wreg      void 
 11317 ;; Registers used:
 11318 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 11319 ;; Tracked objects:
 11320 ;;		On entry : 0/0
 11321 ;;		On exit  : 0/0
 11322 ;;		Unchanged: 0/0
 11323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11325 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11326 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11327 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11328 ;;Total ram usage:        8 bytes
 11329 ;; Hardware stack levels used:    1
 11330 ;; Hardware stack levels required when called:    7
 11331 ;; This function calls:
 11332 ;;		Nothing
 11333 ;; This function is called by:
 11334 ;;		_Event_TestButton
 11335 ;; This function uses a non-reentrant model
 11336 ;;
 11337                           
 11338                           	psect	text50
 11339  014AC2                     __ptext50:
 11340                           	opt stack 0
 11341  014AC2                     _HMI_SetButton:
 11342                           	opt stack 19
 11343                           
 11344                           ;incstack = 0
 11345                           ;HMI_SetButton@pValue stored from wreg
 11346  014AC2  0100               	movlb	0	; () banked
 11347  014AC4  6F66               	movwf	HMI_SetButton@pValue& (0+255),b
 11348                           
 11349                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
 11350  014AC6  0EA8               	movlw	low HMI_SetButton@F7213
 11351  014AC8  6EF6               	movwf	tblptrl,c
 11352  014ACA                     	if	1	;There is more than 1 active tblptr byte
 11353  014ACA  0EFD               	movlw	high HMI_SetButton@F7213
 11354  014ACC  6EF7               	movwf	tblptrh,c
 11355  014ACE                     	endif
 11356  014ACE                     	if	1	;There are 3 active tblptr bytes
 11357  014ACE  0E00               	movlw	low (HMI_SetButton@F7213 shr (0+16))
 11358  014AD0  6EF8               	movwf	tblptru,c
 11359  014AD2                     	endif
 11360  014AD2  0009               	tblrd		*+
 11361  014AD4  CFF5 F062          	movff	tablat,HMI_SetButton@reindex
 11362  014AD8  0009               	tblrd		*+
 11363  014ADA  CFF5 F063          	movff	tablat,HMI_SetButton@reindex+1
 11364  014ADE  0009               	tblrd		*+
 11365  014AE0  CFF5 F064          	movff	tablat,HMI_SetButton@reindex+2
 11366  014AE4  000A               	tblrd		*-
 11367  014AE6  CFF5 F065          	movff	tablat,HMI_SetButton@reindex+3
 11368                           
 11369                           ;HMI.c: 189: UINT8 v = 0b00010001;
 11370  014AEA  0E11               	movlw	17
 11371  014AEC  0100               	movlb	0	; () banked
 11372  014AEE  6F67               	movwf	HMI_SetButton@v& (0+255),b
 11373                           
 11374                           ; BSR set to: 0
 11375                           ;HMI.c: 190: pValue &= 3;
 11376  014AF0  0E03               	movlw	3
 11377  014AF2  0100               	movlb	0	; () banked
 11378  014AF4  1766               	andwf	HMI_SetButton@pValue& (0+255),f,b
 11379                           
 11380                           ; BSR set to: 0
 11381                           ;HMI.c: 191: v = v << reindex[pValue];
 11382  014AF6  0100               	movlb	0	; () banked
 11383  014AF8  5166               	movf	HMI_SetButton@pValue& (0+255),w,b
 11384  014AFA  0D01               	mullw	1
 11385  014AFC  0E62               	movlw	low HMI_SetButton@reindex
 11386  014AFE  24F3               	addwf	prodl,w,c
 11387  014B00  6ED9               	movwf	fsr2l,c
 11388  014B02  0E00               	movlw	high HMI_SetButton@reindex
 11389  014B04  20F4               	addwfc	prodh,w,c
 11390  014B06  6EDA               	movwf	fsr2h,c
 11391  014B08  50DF               	movf	indf2,w,c
 11392  014B0A  0100               	movlb	0	; () banked
 11393  014B0C  6F60               	movwf	??_HMI_SetButton& (0+255),b
 11394  014B0E  C067  F061         	movff	HMI_SetButton@v,??_HMI_SetButton+1
 11395  014B12  0100               	movlb	0	; () banked
 11396  014B14  2B60               	incf	??_HMI_SetButton& (0+255),f,b
 11397  014B16  D003               	goto	u9314
 11398  014B18                     u9315:
 11399  014B18  0100               	movlb	0	; () banked
 11400  014B1A  90D8               	bcf	status,0,c
 11401  014B1C  3761               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
 11402  014B1E                     u9314:
 11403  014B1E  0100               	movlb	0	; () banked
 11404  014B20  2F60               	decfsz	??_HMI_SetButton& (0+255),f,b
 11405  014B22  D7FA               	goto	u9315
 11406  014B24  0100               	movlb	0	; () banked
 11407  014B26  5161               	movf	(??_HMI_SetButton+1)& (0+255),w,b
 11408  014B28  0100               	movlb	0	; () banked
 11409  014B2A  6F67               	movwf	HMI_SetButton@v& (0+255),b
 11410                           
 11411                           ; BSR set to: 0
 11412                           ;HMI.c: 192: v = v >> 4;
 11413  014B2C  0100               	movlb	0	; () banked
 11414  014B2E  3967               	swapf	HMI_SetButton@v& (0+255),w,b
 11415  014B30  0B0F               	andlw	15
 11416  014B32  0100               	movlb	0	; () banked
 11417  014B34  6F67               	movwf	HMI_SetButton@v& (0+255),b
 11418                           
 11419                           ; BSR set to: 0
 11420                           ;HMI.c: 193: v = v & 0x0F;
 11421  014B36  0100               	movlb	0	; () banked
 11422  014B38  5167               	movf	HMI_SetButton@v& (0+255),w,b
 11423  014B3A  0B0F               	andlw	15
 11424  014B3C  0100               	movlb	0	; () banked
 11425  014B3E  6F67               	movwf	HMI_SetButton@v& (0+255),b
 11426                           
 11427                           ; BSR set to: 0
 11428                           ;HMI.c: 194: HMIBoard.pButton = v;
 11429  014B40  0103               	movlb	3	; () banked
 11430  014B42  5131               	movf	(_HMIBoard+6)& (0+255),w,b
 11431  014B44  0100               	movlb	0	; () banked
 11432  014B46  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
 11433  014B48  0BF0               	andlw	-16
 11434  014B4A  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
 11435  014B4C  0103               	movlb	3	; () banked
 11436  014B4E  6F31               	movwf	(_HMIBoard+6)& (0+255),b
 11437                           
 11438                           ; BSR set to: 3
 11439  014B50  0012               	return		;funcret
 11440  014B52                     __end_of_HMI_SetButton:
 11441                           	opt stack 0
 11442                           tosu	equ	0xFFF
 11443                           tosh	equ	0xFFE
 11444                           tosl	equ	0xFFD
 11445                           pclath	equ	0xFFA
 11446                           tblptru	equ	0xFF8
 11447                           tblptrh	equ	0xFF7
 11448                           tblptrl	equ	0xFF6
 11449                           tablat	equ	0xFF5
 11450                           prodh	equ	0xFF4
 11451                           prodl	equ	0xFF3
 11452                           intcon	equ	0xFF2
 11453                           postinc0	equ	0xFEE
 11454                           wreg	equ	0xFE8
 11455                           indf1	equ	0xFE7
 11456                           postdec1	equ	0xFE5
 11457                           fsr1h	equ	0xFE2
 11458                           fsr1l	equ	0xFE1
 11459                           indf2	equ	0xFDF
 11460                           postinc2	equ	0xFDE
 11461                           postdec2	equ	0xFDD
 11462                           plusw2	equ	0xFDB
 11463                           fsr2h	equ	0xFDA
 11464                           fsr2l	equ	0xFD9
 11465                           status	equ	0xFD8
 11466                           
 11467 ;; *************** function _HMI_SetBar *****************
 11468 ;; Defined at:
 11469 ;;		line 205 in file "HMI.c"
 11470 ;; Parameters:    Size  Location     Type
 11471 ;;  pValue          1    wreg     unsigned char 
 11472 ;; Auto vars:     Size  Location     Type
 11473 ;;  pValue          1    0[BANK0 ] unsigned char 
 11474 ;; Return value:  Size  Location     Type
 11475 ;;                  1    wreg      void 
 11476 ;; Registers used:
 11477 ;;		wreg
 11478 ;; Tracked objects:
 11479 ;;		On entry : 0/0
 11480 ;;		On exit  : 0/0
 11481 ;;		Unchanged: 0/0
 11482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11484 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11486 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11487 ;;Total ram usage:        1 bytes
 11488 ;; Hardware stack levels used:    1
 11489 ;; Hardware stack levels required when called:    7
 11490 ;; This function calls:
 11491 ;;		Nothing
 11492 ;; This function is called by:
 11493 ;;		_Event_DIPSwitch
 11494 ;;		_Event_HMI_DIPSwitch
 11495 ;;		_Event_HMI_LeftButton
 11496 ;;		_Event_HMI_RightButton
 11497 ;; This function uses a non-reentrant model
 11498 ;;
 11499                           
 11500                           	psect	text51
 11501  016520                     __ptext51:
 11502                           	opt stack 0
 11503  016520                     _HMI_SetBar:
 11504                           	opt stack 19
 11505                           
 11506                           ; BSR set to: 3
 11507                           ;incstack = 0
 11508                           ;HMI_SetBar@pValue stored from wreg
 11509  016520  0100               	movlb	0	; () banked
 11510  016522  6F60               	movwf	HMI_SetBar@pValue& (0+255),b
 11511                           
 11512                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
 11513  016524  C060  F332         	movff	HMI_SetBar@pValue,_HMIBoard+7
 11514  016528  0012               	return		;funcret
 11515  01652A                     __end_of_HMI_SetBar:
 11516                           	opt stack 0
 11517                           tosu	equ	0xFFF
 11518                           tosh	equ	0xFFE
 11519                           tosl	equ	0xFFD
 11520                           pclath	equ	0xFFA
 11521                           tblptru	equ	0xFF8
 11522                           tblptrh	equ	0xFF7
 11523                           tblptrl	equ	0xFF6
 11524                           tablat	equ	0xFF5
 11525                           prodh	equ	0xFF4
 11526                           prodl	equ	0xFF3
 11527                           intcon	equ	0xFF2
 11528                           postinc0	equ	0xFEE
 11529                           wreg	equ	0xFE8
 11530                           indf1	equ	0xFE7
 11531                           postdec1	equ	0xFE5
 11532                           fsr1h	equ	0xFE2
 11533                           fsr1l	equ	0xFE1
 11534                           indf2	equ	0xFDF
 11535                           postinc2	equ	0xFDE
 11536                           postdec2	equ	0xFDD
 11537                           plusw2	equ	0xFDB
 11538                           fsr2h	equ	0xFDA
 11539                           fsr2l	equ	0xFD9
 11540                           status	equ	0xFD8
 11541                           
 11542 ;; *************** function _HMI_GetBar *****************
 11543 ;; Defined at:
 11544 ;;		line 209 in file "HMI.c"
 11545 ;; Parameters:    Size  Location     Type
 11546 ;;		None
 11547 ;; Auto vars:     Size  Location     Type
 11548 ;;		None
 11549 ;; Return value:  Size  Location     Type
 11550 ;;                  1    wreg      unsigned char 
 11551 ;; Registers used:
 11552 ;;		wreg, status,2
 11553 ;; Tracked objects:
 11554 ;;		On entry : 0/0
 11555 ;;		On exit  : 0/0
 11556 ;;		Unchanged: 0/0
 11557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11561 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11562 ;;Total ram usage:        0 bytes
 11563 ;; Hardware stack levels used:    1
 11564 ;; Hardware stack levels required when called:    7
 11565 ;; This function calls:
 11566 ;;		Nothing
 11567 ;; This function is called by:
 11568 ;;		_Event_DIPSwitch
 11569 ;;		_Event_HMI_DIPSwitch
 11570 ;; This function uses a non-reentrant model
 11571 ;;
 11572                           
 11573                           	psect	text52
 11574  016554                     __ptext52:
 11575                           	opt stack 0
 11576  016554                     _HMI_GetBar:
 11577                           	opt stack 19
 11578                           
 11579                           ;HMI.c: 211: return HMIBoard.pBarGraph;
 11580                           
 11581                           ;incstack = 0
 11582  016554  0103               	movlb	3	; () banked
 11583  016556  5132               	movf	(_HMIBoard+7)& (0+255),w,b
 11584  016558  0012               	return	
 11585  01655A                     __end_of_HMI_GetBar:
 11586                           	opt stack 0
 11587                           tosu	equ	0xFFF
 11588                           tosh	equ	0xFFE
 11589                           tosl	equ	0xFFD
 11590                           pclath	equ	0xFFA
 11591                           tblptru	equ	0xFF8
 11592                           tblptrh	equ	0xFF7
 11593                           tblptrl	equ	0xFF6
 11594                           tablat	equ	0xFF5
 11595                           prodh	equ	0xFF4
 11596                           prodl	equ	0xFF3
 11597                           intcon	equ	0xFF2
 11598                           postinc0	equ	0xFEE
 11599                           wreg	equ	0xFE8
 11600                           indf1	equ	0xFE7
 11601                           postdec1	equ	0xFE5
 11602                           fsr1h	equ	0xFE2
 11603                           fsr1l	equ	0xFE1
 11604                           indf2	equ	0xFDF
 11605                           postinc2	equ	0xFDE
 11606                           postdec2	equ	0xFDD
 11607                           plusw2	equ	0xFDB
 11608                           fsr2h	equ	0xFDA
 11609                           fsr2l	equ	0xFD9
 11610                           status	equ	0xFD8
 11611                           
 11612 ;; *************** function _Console_Render *****************
 11613 ;; Defined at:
 11614 ;;		line 377 in file "Library/Console.c"
 11615 ;; Parameters:    Size  Location     Type
 11616 ;;		None
 11617 ;; Auto vars:     Size  Location     Type
 11618 ;;  lCursor         4   38[BANK0 ] struct Point
 11619 ;;  y               1   43[BANK0 ] unsigned char 
 11620 ;;  x               1   42[BANK0 ] unsigned char 
 11621 ;;  temp            1   37[BANK0 ] unsigned char 
 11622 ;;  Temp            2    0        unsigned short 
 11623 ;; Return value:  Size  Location     Type
 11624 ;;                  1    wreg      void 
 11625 ;; Registers used:
 11626 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11627 ;; Tracked objects:
 11628 ;;		On entry : 0/0
 11629 ;;		On exit  : 0/0
 11630 ;;		Unchanged: 0/0
 11631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11633 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11634 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11635 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11636 ;;Total ram usage:        9 bytes
 11637 ;; Hardware stack levels used:    1
 11638 ;; Hardware stack levels required when called:   11
 11639 ;; This function calls:
 11640 ;;		_Console_MakeField
 11641 ;;		_LCD_DrawField
 11642 ;;		_LCD_FillRectangle
 11643 ;; This function is called by:
 11644 ;;		_mode1
 11645 ;;		_mode2
 11646 ;;		_mode4
 11647 ;; This function uses a non-reentrant model
 11648 ;;
 11649                           
 11650                           	psect	text53
 11651  011F24                     __ptext53:
 11652                           	opt stack 0
 11653  011F24                     _Console_Render:
 11654                           	opt stack 18
 11655                           
 11656                           ;Console.c: 379: Colour Temp;
 11657                           ;Console.c: 380: if (change)
 11658                           
 11659                           ; BSR set to: 3
 11660                           ;incstack = 0
 11661  011F24  0100               	movlb	0	; () banked
 11662  011F26  51FF               	movf	_change& (0+255),w,b
 11663  011F28  B4D8               	btfsc	status,2,c
 11664  011F2A  0012               	return	
 11665                           
 11666                           ; BSR set to: 0
 11667                           ;Console.c: 381: {
 11668                           ;Console.c: 382: UINT8 x, y, temp;
 11669                           ;Console.c: 383: Point lCursor = {6,6};
 11670  011F2C  C3E5  F086         	movff	Console_Render@F6956,Console_Render@lCursor
 11671  011F30  C3E6  F087         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
 11672  011F34  C3E7  F088         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
 11673  011F38  C3E8  F089         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
 11674                           
 11675                           ; BSR set to: 0
 11676                           ;Console.c: 385: if (clearall)
 11677  011F3C  0100               	movlb	0	; () banked
 11678  011F3E  51DF               	movf	_clearall& (0+255),w,b
 11679  011F40  B4D8               	btfsc	status,2,c
 11680  011F42  D005               	goto	l1056
 11681                           
 11682                           ; BSR set to: 0
 11683                           ;Console.c: 386: {
 11684                           ;Console.c: 389: temp = lBufferY;
 11685  011F44  C0DD  F085         	movff	_lBufferY,Console_Render@temp
 11686                           
 11687                           ; BSR set to: 0
 11688                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
 11689  011F48  0E0F               	movlw	15
 11690  011F4A  0100               	movlb	0	; () banked
 11691  011F4C  6FDD               	movwf	_lBufferY& (0+255),b
 11692  011F4E                     l1056:
 11693                           
 11694                           ; BSR set to: 0
 11695                           ;Console.c: 391: }
 11696                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
 11697  011F4E  0E00               	movlw	0
 11698  011F50  0100               	movlb	0	; () banked
 11699  011F52  6F8B               	movwf	Console_Render@y& (0+255),b
 11700  011F54  D0DF               	goto	l1057
 11701  011F56                     
 11702                           ; BSR set to: 0
 11703                           ;Console.c: 394: {
 11704                           ;Console.c: 395: gForecolour = lCBuffer[y];
 11705                           
 11706                           ; BSR set to: 0
 11707  011F56  0100               	movlb	0	; () banked
 11708  011F58  518B               	movf	Console_Render@y& (0+255),w,b
 11709  011F5A  0D02               	mullw	2
 11710  011F5C  0E00               	movlw	low _lCBuffer
 11711  011F5E  24F3               	addwf	prodl,w,c
 11712  011F60  6ED9               	movwf	fsr2l,c
 11713  011F62  0E04               	movlw	high _lCBuffer
 11714  011F64  20F4               	addwfc	prodh,w,c
 11715  011F66  6EDA               	movwf	fsr2h,c
 11716  011F68  CFDE F0FD          	movff	postinc2,_gForecolour
 11717  011F6C  CFDD F0FE          	movff	postdec2,_gForecolour+1
 11718                           
 11719                           ; BSR set to: 0
 11720                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
 11721  011F70  0E00               	movlw	0
 11722  011F72  0100               	movlb	0	; () banked
 11723  011F74  6F8A               	movwf	Console_Render@x& (0+255),b
 11724  011F76                     l14047:
 11725                           
 11726                           ; BSR set to: 0
 11727  011F76  0E13               	movlw	19
 11728  011F78  0100               	movlb	0	; () banked
 11729  011F7A  658A               	cpfsgt	Console_Render@x& (0+255),b
 11730  011F7C  D001               	goto	l1059
 11731  011F7E  D0BE               	goto	u10870
 11732  011F80                     l1059:
 11733                           
 11734                           ; BSR set to: 0
 11735                           ;Console.c: 397: {
 11736                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
 11737                           
 11738                           ; BSR set to: 0
 11739  011F80  0100               	movlb	0	; () banked
 11740  011F82  518B               	movf	Console_Render@y& (0+255),w,b
 11741  011F84  0D14               	mullw	20
 11742  011F86  0EC8               	movlw	low _lBuffer
 11743  011F88  0100               	movlb	0	; () banked
 11744  011F8A  6F83               	movwf	??_Console_Render& (0+255),b
 11745  011F8C  0E04               	movlw	high _lBuffer
 11746  011F8E  0100               	movlb	0	; () banked
 11747  011F90  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 11748  011F92  50F3               	movf	prodl,w,c
 11749  011F94  0100               	movlb	0	; () banked
 11750  011F96  2783               	addwf	??_Console_Render& (0+255),f,b
 11751  011F98  50F4               	movf	prodh,w,c
 11752  011F9A  0100               	movlb	0	; () banked
 11753  011F9C  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 11754  011F9E  0100               	movlb	0	; () banked
 11755  011FA0  518A               	movf	Console_Render@x& (0+255),w,b
 11756  011FA2  0D01               	mullw	1
 11757  011FA4  50F3               	movf	prodl,w,c
 11758  011FA6  0100               	movlb	0	; () banked
 11759  011FA8  2583               	addwf	??_Console_Render& (0+255),w,b
 11760  011FAA  6ED9               	movwf	fsr2l,c
 11761  011FAC  50F4               	movf	prodh,w,c
 11762  011FAE  0100               	movlb	0	; () banked
 11763  011FB0  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 11764  011FB2  6EDA               	movwf	fsr2h,c
 11765  011FB4  AEDF               	btfss	indf2,7,c
 11766  011FB6  D09A               	goto	l1063
 11767                           
 11768                           ; BSR set to: 0
 11769                           ;Console.c: 399: {
 11770                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
 11771  011FB8  0100               	movlb	0	; () banked
 11772  011FBA  518B               	movf	Console_Render@y& (0+255),w,b
 11773  011FBC  0D14               	mullw	20
 11774  011FBE  0EC8               	movlw	low _lBuffer
 11775  011FC0  0100               	movlb	0	; () banked
 11776  011FC2  6F83               	movwf	??_Console_Render& (0+255),b
 11777  011FC4  0E04               	movlw	high _lBuffer
 11778  011FC6  0100               	movlb	0	; () banked
 11779  011FC8  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 11780  011FCA  50F3               	movf	prodl,w,c
 11781  011FCC  0100               	movlb	0	; () banked
 11782  011FCE  2783               	addwf	??_Console_Render& (0+255),f,b
 11783  011FD0  50F4               	movf	prodh,w,c
 11784  011FD2  0100               	movlb	0	; () banked
 11785  011FD4  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 11786  011FD6  0100               	movlb	0	; () banked
 11787  011FD8  518A               	movf	Console_Render@x& (0+255),w,b
 11788  011FDA  0D01               	mullw	1
 11789  011FDC  50F3               	movf	prodl,w,c
 11790  011FDE  0100               	movlb	0	; () banked
 11791  011FE0  2583               	addwf	??_Console_Render& (0+255),w,b
 11792  011FE2  6ED9               	movwf	fsr2l,c
 11793  011FE4  50F4               	movf	prodh,w,c
 11794  011FE6  0100               	movlb	0	; () banked
 11795  011FE8  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 11796  011FEA  6EDA               	movwf	fsr2h,c
 11797  011FEC  0E7F               	movlw	127
 11798  011FEE  16DF               	andwf	indf2,f,c
 11799                           
 11800                           ;Console.c: 401: if (lBuffer[y][x])
 11801  011FF0  0100               	movlb	0	; () banked
 11802  011FF2  518B               	movf	Console_Render@y& (0+255),w,b
 11803  011FF4  0D14               	mullw	20
 11804  011FF6  0EC8               	movlw	low _lBuffer
 11805  011FF8  0100               	movlb	0	; () banked
 11806  011FFA  6F83               	movwf	??_Console_Render& (0+255),b
 11807  011FFC  0E04               	movlw	high _lBuffer
 11808  011FFE  0100               	movlb	0	; () banked
 11809  012000  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 11810  012002  50F3               	movf	prodl,w,c
 11811  012004  0100               	movlb	0	; () banked
 11812  012006  2783               	addwf	??_Console_Render& (0+255),f,b
 11813  012008  50F4               	movf	prodh,w,c
 11814  01200A  0100               	movlb	0	; () banked
 11815  01200C  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 11816  01200E  0100               	movlb	0	; () banked
 11817  012010  518A               	movf	Console_Render@x& (0+255),w,b
 11818  012012  0D01               	mullw	1
 11819  012014  50F3               	movf	prodl,w,c
 11820  012016  0100               	movlb	0	; () banked
 11821  012018  2583               	addwf	??_Console_Render& (0+255),w,b
 11822  01201A  6ED9               	movwf	fsr2l,c
 11823  01201C  50F4               	movf	prodh,w,c
 11824  01201E  0100               	movlb	0	; () banked
 11825  012020  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 11826  012022  6EDA               	movwf	fsr2h,c
 11827  012024  50DF               	movf	indf2,w,c
 11828  012026  B4D8               	btfsc	status,2,c
 11829  012028  D04A               	goto	l1062
 11830                           
 11831                           ; BSR set to: 0
 11832                           ;Console.c: 402: {
 11833                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
 11834  01202A  C0D2  F069         	movff	_gBackcolour,LCD_FillRectangle@pColour
 11835  01202E  C0D3  F06A         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
 11836  012032  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 11837  012036  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 11838  01203A  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 11839  01203E  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 11840  012042  C3ED  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
 11841  012046  C3EE  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 11842  01204A  C3EF  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 11843  01204E  C3F0  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 11844  012052  EC6F  F0A8         	call	_LCD_FillRectangle	;wreg free
 11845                           
 11846                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
 11847  012056  0100               	movlb	0	; () banked
 11848  012058  518B               	movf	Console_Render@y& (0+255),w,b
 11849  01205A  0D14               	mullw	20
 11850  01205C  0EC8               	movlw	low _lBuffer
 11851  01205E  0100               	movlb	0	; () banked
 11852  012060  6F83               	movwf	??_Console_Render& (0+255),b
 11853  012062  0E04               	movlw	high _lBuffer
 11854  012064  0100               	movlb	0	; () banked
 11855  012066  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 11856  012068  50F3               	movf	prodl,w,c
 11857  01206A  0100               	movlb	0	; () banked
 11858  01206C  2783               	addwf	??_Console_Render& (0+255),f,b
 11859  01206E  50F4               	movf	prodh,w,c
 11860  012070  0100               	movlb	0	; () banked
 11861  012072  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 11862  012074  0100               	movlb	0	; () banked
 11863  012076  518A               	movf	Console_Render@x& (0+255),w,b
 11864  012078  0D01               	mullw	1
 11865  01207A  50F3               	movf	prodl,w,c
 11866  01207C  0100               	movlb	0	; () banked
 11867  01207E  2583               	addwf	??_Console_Render& (0+255),w,b
 11868  012080  6ED9               	movwf	fsr2l,c
 11869  012082  50F4               	movf	prodh,w,c
 11870  012084  0100               	movlb	0	; () banked
 11871  012086  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 11872  012088  6EDA               	movwf	fsr2h,c
 11873  01208A  50DF               	movf	indf2,w,c
 11874  01208C  EC81  F09E         	call	_Console_MakeField
 11875  012090  C065  F072         	movff	?_Console_MakeField,LCD_DrawField@pField
 11876  012094  C066  F073         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
 11877  012098  C086  F074         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
 11878  01209C  C087  F075         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
 11879  0120A0  C088  F076         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
 11880  0120A4  C089  F077         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
 11881  0120A8  C3ED  F078         	movff	_gCharSize,LCD_DrawField@pSize
 11882  0120AC  C3EE  F079         	movff	_gCharSize+1,LCD_DrawField@pSize+1
 11883  0120B0  C3EF  F07A         	movff	_gCharSize+2,LCD_DrawField@pSize+2
 11884  0120B4  C3F0  F07B         	movff	_gCharSize+3,LCD_DrawField@pSize+3
 11885  0120B8  EC24  F0A4         	call	_LCD_DrawField	;wreg free
 11886                           
 11887                           ;Console.c: 405: }
 11888  0120BC  D017               	goto	l1063
 11889  0120BE                     l1062:
 11890                           
 11891                           ;Console.c: 406: else
 11892                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
 11893  0120BE  0E00               	movlw	0
 11894  0120C0  0100               	movlb	0	; () banked
 11895  0120C2  6F6A               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
 11896  0120C4  0E00               	movlw	0
 11897  0120C6  6F69               	movwf	LCD_FillRectangle@pColour& (0+255),b
 11898  0120C8  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 11899  0120CC  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 11900  0120D0  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 11901  0120D4  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 11902  0120D8  C3ED  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
 11903  0120DC  C3EE  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 11904  0120E0  C3EF  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 11905  0120E4  C3F0  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 11906  0120E8  EC6F  F0A8         	call	_LCD_FillRectangle	;wreg free
 11907  0120EC                     l1063:
 11908                           
 11909                           ;Console.c: 408: }
 11910                           ;Console.c: 409: lCursor.x += (5 + 1);
 11911  0120EC  0E06               	movlw	6
 11912  0120EE  0100               	movlb	0	; () banked
 11913  0120F0  2786               	addwf	Console_Render@lCursor& (0+255),f,b
 11914  0120F2  0E00               	movlw	0
 11915  0120F4  2387               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
 11916                           
 11917                           ; BSR set to: 0
 11918  0120F6  0100               	movlb	0	; () banked
 11919  0120F8  2B8A               	incf	Console_Render@x& (0+255),f,b
 11920  0120FA  D73D               	goto	l14047
 11921  0120FC                     u10870:
 11922                           
 11923                           ; BSR set to: 0
 11924                           ;Console.c: 410: }
 11925                           ;Console.c: 411: lCursor.y += (7 + 1);
 11926                           
 11927                           ; BSR set to: 0
 11928  0120FC  0E08               	movlw	8
 11929  0120FE  0100               	movlb	0	; () banked
 11930  012100  2788               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
 11931  012102  0E00               	movlw	0
 11932  012104  2389               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
 11933                           
 11934                           ; BSR set to: 0
 11935                           ;Console.c: 412: lCursor.x = 6;
 11936  012106  0E00               	movlw	0
 11937  012108  0100               	movlb	0	; () banked
 11938  01210A  6F87               	movwf	(Console_Render@lCursor+1)& (0+255),b
 11939  01210C  0E06               	movlw	6
 11940  01210E  6F86               	movwf	Console_Render@lCursor& (0+255),b
 11941                           
 11942                           ; BSR set to: 0
 11943  012110  0100               	movlb	0	; () banked
 11944  012112  2B8B               	incf	Console_Render@y& (0+255),f,b
 11945  012114                     l1057:
 11946                           
 11947                           ; BSR set to: 0
 11948                           
 11949                           ; BSR set to: 0
 11950  012114  0100               	movlb	0	; () banked
 11951  012116  518B               	movf	Console_Render@y& (0+255),w,b
 11952  012118  0100               	movlb	0	; () banked
 11953  01211A  5DDD               	subwf	_lBufferY& (0+255),w,b
 11954  01211C  B0D8               	btfsc	status,0,c
 11955  01211E  D71B               	goto	l1058
 11956                           
 11957                           ; BSR set to: 0
 11958                           ;Console.c: 413: }
 11959                           ;Console.c: 415: if (clearall)
 11960                           
 11961                           ; BSR set to: 0
 11962  012120  0100               	movlb	0	; () banked
 11963  012122  51DF               	movf	_clearall& (0+255),w,b
 11964  012124  B4D8               	btfsc	status,2,c
 11965  012126  0012               	return	
 11966                           
 11967                           ; BSR set to: 0
 11968                           ;Console.c: 416: {
 11969                           ;Console.c: 417: clearall = 0;
 11970  012128  0E00               	movlw	0
 11971  01212A  0100               	movlb	0	; () banked
 11972  01212C  6FDF               	movwf	_clearall& (0+255),b
 11973                           
 11974                           ; BSR set to: 0
 11975                           ;Console.c: 418: lBufferY = temp;
 11976  01212E  C085  F0DD         	movff	Console_Render@temp,_lBufferY
 11977                           
 11978                           ; BSR set to: 0
 11979  012132  0012               	return	
 11980  012134                     __end_of_Console_Render:
 11981                           	opt stack 0
 11982                           tosu	equ	0xFFF
 11983                           tosh	equ	0xFFE
 11984                           tosl	equ	0xFFD
 11985                           pclath	equ	0xFFA
 11986                           tblptru	equ	0xFF8
 11987                           tblptrh	equ	0xFF7
 11988                           tblptrl	equ	0xFF6
 11989                           tablat	equ	0xFF5
 11990                           prodh	equ	0xFF4
 11991                           prodl	equ	0xFF3
 11992                           intcon	equ	0xFF2
 11993                           postinc0	equ	0xFEE
 11994                           wreg	equ	0xFE8
 11995                           indf1	equ	0xFE7
 11996                           postdec1	equ	0xFE5
 11997                           fsr1h	equ	0xFE2
 11998                           fsr1l	equ	0xFE1
 11999                           indf2	equ	0xFDF
 12000                           postinc2	equ	0xFDE
 12001                           postdec2	equ	0xFDD
 12002                           plusw2	equ	0xFDB
 12003                           fsr2h	equ	0xFDA
 12004                           fsr2l	equ	0xFD9
 12005                           status	equ	0xFD8
 12006                           
 12007 ;; *************** function _LCD_FillRectangle *****************
 12008 ;; Defined at:
 12009 ;;		line 318 in file "Library/LCD.c"
 12010 ;; Parameters:    Size  Location     Type
 12011 ;;  pColour         2    9[BANK0 ] unsigned short 
 12012 ;;  pPoint          4   11[BANK0 ] struct Point
 12013 ;;  pSize           4   15[BANK0 ] struct Point
 12014 ;; Auto vars:     Size  Location     Type
 12015 ;;  j               1   22[BANK0 ] unsigned char 
 12016 ;;  i               1   21[BANK0 ] unsigned char 
 12017 ;; Return value:  Size  Location     Type
 12018 ;;                  1    wreg      void 
 12019 ;; Registers used:
 12020 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12021 ;; Tracked objects:
 12022 ;;		On entry : 0/0
 12023 ;;		On exit  : 0/0
 12024 ;;		Unchanged: 0/0
 12025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12026 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12027 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12028 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12029 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12030 ;;Total ram usage:       14 bytes
 12031 ;; Hardware stack levels used:    1
 12032 ;; Hardware stack levels required when called:   10
 12033 ;; This function calls:
 12034 ;;		_LCD_Word_Write
 12035 ;;		_Set_Addr_Window
 12036 ;; This function is called by:
 12037 ;;		_Console_Render
 12038 ;;		_Console_ClearLine
 12039 ;; This function uses a non-reentrant model
 12040 ;;
 12041                           
 12042                           	psect	text54
 12043  0150DE                     __ptext54:
 12044                           	opt stack 0
 12045  0150DE                     _LCD_FillRectangle:
 12046                           	opt stack 18
 12047                           
 12048                           ;LCD.c: 320: UINT8 i = 0x00;
 12049                           
 12050                           ; BSR set to: 0
 12051                           ;incstack = 0
 12052  0150DE  0E00               	movlw	0
 12053  0150E0  0100               	movlb	0	; () banked
 12054  0150E2  6F75               	movwf	LCD_FillRectangle@i& (0+255),b
 12055                           
 12056                           ;LCD.c: 321: UINT8 j = 0x00;
 12057  0150E4  0E00               	movlw	0
 12058  0150E6  0100               	movlb	0	; () banked
 12059  0150E8  6F76               	movwf	LCD_FillRectangle@j& (0+255),b
 12060                           
 12061                           ; BSR set to: 0
 12062                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
 12063  0150EA  C06D  F065         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
 12064  0150EE  0100               	movlb	0	; () banked
 12065  0150F0  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 12066  0150F2  0100               	movlb	0	; () banked
 12067  0150F4  256F               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
 12068  0150F6  0100               	movlb	0	; () banked
 12069  0150F8  6F73               	movwf	??_LCD_FillRectangle& (0+255),b
 12070  0150FA  0100               	movlb	0	; () banked
 12071  0150FC  0573               	decf	??_LCD_FillRectangle& (0+255),w,b
 12072  0150FE  0100               	movlb	0	; () banked
 12073  015100  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 12074  015102  0100               	movlb	0	; () banked
 12075  015104  516D               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
 12076  015106  0100               	movlb	0	; () banked
 12077  015108  2571               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
 12078  01510A  0100               	movlb	0	; () banked
 12079  01510C  6F74               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
 12080  01510E  0100               	movlb	0	; () banked
 12081  015110  0574               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
 12082  015112  0100               	movlb	0	; () banked
 12083  015114  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 12084  015116  0100               	movlb	0	; () banked
 12085  015118  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 12086  01511A  EC2E  F0A2         	call	_Set_Addr_Window
 12087                           
 12088                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
 12089  01511E  C071  F076         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
 12090  015122                     l13325:
 12091  015122  0100               	movlb	0	; () banked
 12092  015124  5176               	movf	LCD_FillRectangle@j& (0+255),w,b
 12093  015126  0100               	movlb	0	; () banked
 12094  015128  B4D8               	btfsc	status,2,c
 12095  01512A  0012               	return	
 12096                           
 12097                           ; BSR set to: 0
 12098                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
 12099                           
 12100                           ; BSR set to: 0
 12101  01512C  C06F  F075         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
 12102  015130                     l13329:
 12103                           
 12104                           ; BSR set to: 0
 12105  015130  0100               	movlb	0	; () banked
 12106  015132  5175               	movf	LCD_FillRectangle@i& (0+255),w,b
 12107  015134  0100               	movlb	0	; () banked
 12108  015136  B4D8               	btfsc	status,2,c
 12109  015138  D009               	goto	u9830
 12110                           
 12111                           ; BSR set to: 0
 12112                           ;LCD.c: 333: LCD_Word_Write(pColour);
 12113                           
 12114                           ; BSR set to: 0
 12115                           
 12116                           ; BSR set to: 0
 12117  01513A  C069  F065         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
 12118  01513E  C06A  F066         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
 12119  015142  EC29  F0B1         	call	_LCD_Word_Write	;wreg free
 12120  015146  0100               	movlb	0	; () banked
 12121  015148  0775               	decf	LCD_FillRectangle@i& (0+255),f,b
 12122  01514A  D7F2               	goto	l13329
 12123  01514C                     u9830:
 12124                           
 12125                           ; BSR set to: 0
 12126                           
 12127                           ; BSR set to: 0
 12128  01514C  0100               	movlb	0	; () banked
 12129  01514E  0776               	decf	LCD_FillRectangle@j& (0+255),f,b
 12130  015150  D7E8               	goto	l13325
 12131  015152                     __end_of_LCD_FillRectangle:
 12132                           	opt stack 0
 12133                           tosu	equ	0xFFF
 12134                           tosh	equ	0xFFE
 12135                           tosl	equ	0xFFD
 12136                           pclath	equ	0xFFA
 12137                           tblptru	equ	0xFF8
 12138                           tblptrh	equ	0xFF7
 12139                           tblptrl	equ	0xFF6
 12140                           tablat	equ	0xFF5
 12141                           prodh	equ	0xFF4
 12142                           prodl	equ	0xFF3
 12143                           intcon	equ	0xFF2
 12144                           postinc0	equ	0xFEE
 12145                           wreg	equ	0xFE8
 12146                           indf1	equ	0xFE7
 12147                           postdec1	equ	0xFE5
 12148                           fsr1h	equ	0xFE2
 12149                           fsr1l	equ	0xFE1
 12150                           indf2	equ	0xFDF
 12151                           postinc2	equ	0xFDE
 12152                           postdec2	equ	0xFDD
 12153                           plusw2	equ	0xFDB
 12154                           fsr2h	equ	0xFDA
 12155                           fsr2l	equ	0xFD9
 12156                           status	equ	0xFD8
 12157                           
 12158 ;; *************** function _LCD_DrawField *****************
 12159 ;; Defined at:
 12160 ;;		line 393 in file "Library/LCD.c"
 12161 ;; Parameters:    Size  Location     Type
 12162 ;;  pField          2   18[BANK0 ] PTR unsigned short 
 12163 ;;		 -> Console_MakeField@Fill(70), 
 12164 ;;  pPoint          4   20[BANK0 ] struct Point
 12165 ;;  pSize           4   24[BANK0 ] struct Point
 12166 ;; Auto vars:     Size  Location     Type
 12167 ;;  count           2   30[BANK0 ] unsigned short 
 12168 ;;  i               1   34[BANK0 ] unsigned char 
 12169 ;;  ymax            1   33[BANK0 ] unsigned char 
 12170 ;;  xmax            1   32[BANK0 ] unsigned char 
 12171 ;; Return value:  Size  Location     Type
 12172 ;;                  1    wreg      void 
 12173 ;; Registers used:
 12174 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12175 ;; Tracked objects:
 12176 ;;		On entry : 0/0
 12177 ;;		On exit  : 0/0
 12178 ;;		Unchanged: 0/0
 12179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12180 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12181 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12182 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12183 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12184 ;;Total ram usage:       17 bytes
 12185 ;; Hardware stack levels used:    1
 12186 ;; Hardware stack levels required when called:   10
 12187 ;; This function calls:
 12188 ;;		_LCD_Word_Write
 12189 ;;		_Set_Addr_Window
 12190 ;;		___wmul
 12191 ;; This function is called by:
 12192 ;;		_Console_Render
 12193 ;; This function uses a non-reentrant model
 12194 ;;
 12195                           
 12196                           	psect	text55
 12197  014848                     __ptext55:
 12198                           	opt stack 0
 12199  014848                     _LCD_DrawField:
 12200                           	opt stack 18
 12201                           
 12202                           ;LCD.c: 396: UINT8 i = 0x00;
 12203                           
 12204                           ; BSR set to: 0
 12205                           ;incstack = 0
 12206  014848  0E00               	movlw	0
 12207  01484A  0100               	movlb	0	; () banked
 12208  01484C  6F82               	movwf	LCD_DrawField@i& (0+255),b
 12209                           
 12210                           ; BSR set to: 0
 12211                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
 12212  01484E  0100               	movlb	0	; () banked
 12213  014850  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
 12214  014852  0100               	movlb	0	; () banked
 12215  014854  2578               	addwf	LCD_DrawField@pSize& (0+255),w,b
 12216  014856  0100               	movlb	0	; () banked
 12217  014858  6F80               	movwf	LCD_DrawField@xmax& (0+255),b
 12218                           
 12219                           ; BSR set to: 0
 12220                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
 12221  01485A  0100               	movlb	0	; () banked
 12222  01485C  5176               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
 12223  01485E  0100               	movlb	0	; () banked
 12224  014860  257A               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
 12225  014862  0100               	movlb	0	; () banked
 12226  014864  6F81               	movwf	LCD_DrawField@ymax& (0+255),b
 12227                           
 12228                           ; BSR set to: 0
 12229                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
 12230  014866  C07A  F060         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
 12231  01486A  C07B  F061         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
 12232  01486E  C078  F062         	movff	LCD_DrawField@pSize,___wmul@multiplicand
 12233  014872  C079  F063         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
 12234  014876  EC83  F0AF         	call	___wmul	;wreg free
 12235  01487A  C060  F07E         	movff	?___wmul,LCD_DrawField@count
 12236  01487E  C061  F07F         	movff	?___wmul+1,LCD_DrawField@count+1
 12237                           
 12238                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
 12239  014882  C076  F065         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
 12240  014886  0100               	movlb	0	; () banked
 12241  014888  0580               	decf	LCD_DrawField@xmax& (0+255),w,b
 12242  01488A  0100               	movlb	0	; () banked
 12243  01488C  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 12244  01488E  0100               	movlb	0	; () banked
 12245  014890  0581               	decf	LCD_DrawField@ymax& (0+255),w,b
 12246  014892  0100               	movlb	0	; () banked
 12247  014894  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 12248  014896  0100               	movlb	0	; () banked
 12249  014898  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
 12250  01489A  EC2E  F0A2         	call	_Set_Addr_Window
 12251                           
 12252                           ;LCD.c: 403: for(i = 0; i < count; i++)
 12253  01489E  0E00               	movlw	0
 12254  0148A0  0100               	movlb	0	; () banked
 12255  0148A2  6F82               	movwf	LCD_DrawField@i& (0+255),b
 12256  0148A4  D013               	goto	l183
 12257  0148A6                     
 12258                           ; BSR set to: 0
 12259                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
 12260                           
 12261                           ; BSR set to: 0
 12262  0148A6  0100               	movlb	0	; () banked
 12263  0148A8  5182               	movf	LCD_DrawField@i& (0+255),w,b
 12264  0148AA  0D02               	mullw	2
 12265  0148AC  50F3               	movf	prodl,w,c
 12266  0148AE  0100               	movlb	0	; () banked
 12267  0148B0  2572               	addwf	LCD_DrawField@pField& (0+255),w,b
 12268  0148B2  6ED9               	movwf	fsr2l,c
 12269  0148B4  50F4               	movf	prodh,w,c
 12270  0148B6  0100               	movlb	0	; () banked
 12271  0148B8  2173               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
 12272  0148BA  6EDA               	movwf	fsr2h,c
 12273  0148BC  CFDE F065          	movff	postinc2,LCD_Word_Write@value
 12274  0148C0  CFDD F066          	movff	postdec2,LCD_Word_Write@value+1
 12275  0148C4  EC29  F0B1         	call	_LCD_Word_Write	;wreg free
 12276  0148C8  0100               	movlb	0	; () banked
 12277  0148CA  2B82               	incf	LCD_DrawField@i& (0+255),f,b
 12278  0148CC                     l183:
 12279                           
 12280                           ; BSR set to: 0
 12281                           
 12282                           ; BSR set to: 0
 12283  0148CC  0100               	movlb	0	; () banked
 12284  0148CE  5182               	movf	LCD_DrawField@i& (0+255),w,b
 12285  0148D0  0100               	movlb	0	; () banked
 12286  0148D2  6F7C               	movwf	??_LCD_DrawField& (0+255),b
 12287  0148D4  6B7D               	clrf	(??_LCD_DrawField+1)& (0+255),b
 12288  0148D6  0100               	movlb	0	; () banked
 12289  0148D8  517E               	movf	LCD_DrawField@count& (0+255),w,b
 12290  0148DA  0100               	movlb	0	; () banked
 12291  0148DC  5D7C               	subwf	??_LCD_DrawField& (0+255),w,b
 12292  0148DE  0100               	movlb	0	; () banked
 12293  0148E0  517F               	movf	(LCD_DrawField@count+1)& (0+255),w,b
 12294  0148E2  0100               	movlb	0	; () banked
 12295  0148E4  597D               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
 12296  0148E6  B0D8               	btfsc	status,0,c
 12297  0148E8  0012               	return	
 12298  0148EA  D7DD               	goto	l184
 12299  0148EC                     __end_of_LCD_DrawField:
 12300                           	opt stack 0
 12301                           tosu	equ	0xFFF
 12302                           tosh	equ	0xFFE
 12303                           tosl	equ	0xFFD
 12304                           pclath	equ	0xFFA
 12305                           tblptru	equ	0xFF8
 12306                           tblptrh	equ	0xFF7
 12307                           tblptrl	equ	0xFF6
 12308                           tablat	equ	0xFF5
 12309                           prodh	equ	0xFF4
 12310                           prodl	equ	0xFF3
 12311                           intcon	equ	0xFF2
 12312                           postinc0	equ	0xFEE
 12313                           wreg	equ	0xFE8
 12314                           indf1	equ	0xFE7
 12315                           postdec1	equ	0xFE5
 12316                           fsr1h	equ	0xFE2
 12317                           fsr1l	equ	0xFE1
 12318                           indf2	equ	0xFDF
 12319                           postinc2	equ	0xFDE
 12320                           postdec2	equ	0xFDD
 12321                           plusw2	equ	0xFDB
 12322                           fsr2h	equ	0xFDA
 12323                           fsr2l	equ	0xFD9
 12324                           status	equ	0xFD8
 12325                           
 12326 ;; *************** function ___wmul *****************
 12327 ;; Defined at:
 12328 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
 12329 ;; Parameters:    Size  Location     Type
 12330 ;;  multiplier      2    0[BANK0 ] unsigned int 
 12331 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 12332 ;; Auto vars:     Size  Location     Type
 12333 ;;  product         2    4[BANK0 ] unsigned int 
 12334 ;; Return value:  Size  Location     Type
 12335 ;;                  2    0[BANK0 ] unsigned int 
 12336 ;; Registers used:
 12337 ;;		wreg, status,2, status,0, prodl, prodh
 12338 ;; Tracked objects:
 12339 ;;		On entry : 0/0
 12340 ;;		On exit  : 0/0
 12341 ;;		Unchanged: 0/0
 12342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12343 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12344 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12346 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12347 ;;Total ram usage:        6 bytes
 12348 ;; Hardware stack levels used:    1
 12349 ;; Hardware stack levels required when called:    7
 12350 ;; This function calls:
 12351 ;;		Nothing
 12352 ;; This function is called by:
 12353 ;;		_LCD_DrawField
 12354 ;; This function uses a non-reentrant model
 12355 ;;
 12356                           
 12357                           	psect	text56
 12358  015F06                     __ptext56:
 12359                           	opt stack 0
 12360  015F06                     ___wmul:
 12361                           	opt stack 20
 12362                           
 12363                           ; BSR set to: 0
 12364                           ;incstack = 0
 12365  015F06  0100               	movlb	0	; () banked
 12366  015F08  5160               	movf	___wmul@multiplier& (0+255),w,b
 12367  015F0A  0100               	movlb	0	; () banked
 12368  015F0C  0362               	mulwf	___wmul@multiplicand& (0+255),b
 12369  015F0E  CFF3 F064          	movff	prodl,___wmul@product
 12370  015F12  CFF4 F065          	movff	prodh,___wmul@product+1
 12371  015F16  0100               	movlb	0	; () banked
 12372  015F18  5160               	movf	___wmul@multiplier& (0+255),w,b
 12373  015F1A  0100               	movlb	0	; () banked
 12374  015F1C  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 12375  015F1E  50F3               	movf	prodl,w,c
 12376  015F20  0100               	movlb	0	; () banked
 12377  015F22  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 12378  015F24  0100               	movlb	0	; () banked
 12379  015F26  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 12380  015F28  0100               	movlb	0	; () banked
 12381  015F2A  0362               	mulwf	___wmul@multiplicand& (0+255),b
 12382  015F2C  50F3               	movf	prodl,w,c
 12383  015F2E  0100               	movlb	0	; () banked
 12384  015F30  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 12385                           
 12386                           ; BSR set to: 0
 12387  015F32  C064  F060         	movff	___wmul@product,?___wmul
 12388  015F36  C065  F061         	movff	___wmul@product+1,?___wmul+1
 12389  015F3A  0012               	return	
 12390  015F3C                     __end_of___wmul:
 12391                           	opt stack 0
 12392                           tosu	equ	0xFFF
 12393                           tosh	equ	0xFFE
 12394                           tosl	equ	0xFFD
 12395                           pclath	equ	0xFFA
 12396                           tblptru	equ	0xFF8
 12397                           tblptrh	equ	0xFF7
 12398                           tblptrl	equ	0xFF6
 12399                           tablat	equ	0xFF5
 12400                           prodh	equ	0xFF4
 12401                           prodl	equ	0xFF3
 12402                           intcon	equ	0xFF2
 12403                           postinc0	equ	0xFEE
 12404                           wreg	equ	0xFE8
 12405                           indf1	equ	0xFE7
 12406                           postdec1	equ	0xFE5
 12407                           fsr1h	equ	0xFE2
 12408                           fsr1l	equ	0xFE1
 12409                           indf2	equ	0xFDF
 12410                           postinc2	equ	0xFDE
 12411                           postdec2	equ	0xFDD
 12412                           plusw2	equ	0xFDB
 12413                           fsr2h	equ	0xFDA
 12414                           fsr2l	equ	0xFD9
 12415                           status	equ	0xFD8
 12416                           
 12417 ;; *************** function _Console_MakeField *****************
 12418 ;; Defined at:
 12419 ;;		line 435 in file "Library/Console.c"
 12420 ;; Parameters:    Size  Location     Type
 12421 ;;  pInput          1    wreg     unsigned char 
 12422 ;; Auto vars:     Size  Location     Type
 12423 ;;  pInput          1   11[BANK0 ] unsigned char 
 12424 ;;  y               1   17[BANK0 ] unsigned char 
 12425 ;;  x               1   16[BANK0 ] unsigned char 
 12426 ;;  Column          2   12[BANK0 ] PTR struct Byte
 12427 ;;		 -> Font5x7(480), 
 12428 ;;  Index           2    9[BANK0 ] unsigned short 
 12429 ;; Return value:  Size  Location     Type
 12430 ;;                  2    5[BANK0 ] PTR unsigned short 
 12431 ;; Registers used:
 12432 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12433 ;; Tracked objects:
 12434 ;;		On entry : 0/0
 12435 ;;		On exit  : 0/0
 12436 ;;		Unchanged: 0/0
 12437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12438 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12439 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12440 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12441 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12442 ;;Total ram usage:       13 bytes
 12443 ;; Hardware stack levels used:    1
 12444 ;; Hardware stack levels required when called:    8
 12445 ;; This function calls:
 12446 ;;		_Byte_GetBit
 12447 ;; This function is called by:
 12448 ;;		_Console_Render
 12449 ;; This function uses a non-reentrant model
 12450 ;;
 12451                           
 12452                           	psect	text57
 12453  013D02                     __ptext57:
 12454                           	opt stack 0
 12455  013D02                     _Console_MakeField:
 12456                           	opt stack 20
 12457                           
 12458                           ; BSR set to: 0
 12459                           ;incstack = 0
 12460                           ;Console_MakeField@pInput stored from wreg
 12461  013D02  0100               	movlb	0	; () banked
 12462  013D04  6F6B               	movwf	Console_MakeField@pInput& (0+255),b
 12463                           
 12464                           ;Console.c: 437: static Colour Fill[7][5];
 12465                           ;Console.c: 438: pInput -= 32;
 12466  013D06  0E20               	movlw	32
 12467  013D08  0100               	movlb	0	; () banked
 12468  013D0A  5F6B               	subwf	Console_MakeField@pInput& (0+255),f,b
 12469                           
 12470                           ; BSR set to: 0
 12471                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
 12472  013D0C  0100               	movlb	0	; () banked
 12473  013D0E  516B               	movf	Console_MakeField@pInput& (0+255),w,b
 12474  013D10  0D05               	mullw	5
 12475  013D12  CFF3 F069          	movff	prodl,Console_MakeField@Index
 12476  013D16  CFF4 F06A          	movff	prodh,Console_MakeField@Index+1
 12477                           
 12478                           ; BSR set to: 0
 12479                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 12480  013D1A  0EAF               	movlw	low _Font5x7
 12481  013D1C  0100               	movlb	0	; () banked
 12482  013D1E  2569               	addwf	Console_MakeField@Index& (0+255),w,b
 12483  013D20  0100               	movlb	0	; () banked
 12484  013D22  6F6C               	movwf	Console_MakeField@Column& (0+255),b
 12485  013D24  0EFD               	movlw	high _Font5x7
 12486  013D26  0100               	movlb	0	; () banked
 12487  013D28  216A               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 12488  013D2A  0100               	movlb	0	; () banked
 12489  013D2C  6F6D               	movwf	(Console_MakeField@Column+1)& (0+255),b
 12490                           
 12491                           ; BSR set to: 0
 12492                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
 12493  013D2E  0E00               	movlw	0
 12494  013D30  0100               	movlb	0	; () banked
 12495  013D32  6F70               	movwf	Console_MakeField@x& (0+255),b
 12496  013D34                     l13419:
 12497                           
 12498                           ; BSR set to: 0
 12499  013D34  0E04               	movlw	4
 12500  013D36  0100               	movlb	0	; () banked
 12501  013D38  6570               	cpfsgt	Console_MakeField@x& (0+255),b
 12502  013D3A  D001               	goto	l1077
 12503  013D3C  D043               	goto	u9920
 12504  013D3E                     l1077:
 12505                           
 12506                           ; BSR set to: 0
 12507                           ;Console.c: 444: {
 12508                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
 12509                           
 12510                           ; BSR set to: 0
 12511  013D3E  0E00               	movlw	0
 12512  013D40  0100               	movlb	0	; () banked
 12513  013D42  6F71               	movwf	Console_MakeField@y& (0+255),b
 12514  013D44                     l13425:
 12515                           
 12516                           ; BSR set to: 0
 12517  013D44  0E06               	movlw	6
 12518  013D46  0100               	movlb	0	; () banked
 12519  013D48  6571               	cpfsgt	Console_MakeField@y& (0+255),b
 12520  013D4A  D001               	goto	l1079
 12521  013D4C  D035               	goto	u9910
 12522  013D4E                     l1079:
 12523                           
 12524                           ; BSR set to: 0
 12525                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 12526                           
 12527                           ; BSR set to: 0
 12528  013D4E  C06C  F060         	movff	Console_MakeField@Column,Byte_GetBit@pInput
 12529  013D52  C06D  F061         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 12530  013D56  C071  F062         	movff	Console_MakeField@y,Byte_GetBit@pBit
 12531  013D5A  ECB9  F0AF         	call	_Byte_GetBit	;wreg free
 12532  013D5E  0900               	iorlw	0
 12533  013D60  A4D8               	btfss	status,2,c
 12534  013D62  D005               	goto	l1082
 12535  013D64  C0D2  F06E         	movff	_gBackcolour,_Console_MakeField$10974
 12536  013D68  C0D3  F06F         	movff	_gBackcolour+1,_Console_MakeField$10974+1
 12537  013D6C  D004               	goto	l1084
 12538  013D6E                     l1082:
 12539  013D6E  C0FD  F06E         	movff	_gForecolour,_Console_MakeField$10974
 12540  013D72  C0FE  F06F         	movff	_gForecolour+1,_Console_MakeField$10974+1
 12541  013D76                     l1084:
 12542  013D76  0100               	movlb	0	; () banked
 12543  013D78  5171               	movf	Console_MakeField@y& (0+255),w,b
 12544  013D7A  0D0A               	mullw	10
 12545  013D7C  0E82               	movlw	low Console_MakeField@Fill
 12546  013D7E  0100               	movlb	0	; () banked
 12547  013D80  6F67               	movwf	??_Console_MakeField& (0+255),b
 12548  013D82  0E04               	movlw	high Console_MakeField@Fill
 12549  013D84  0100               	movlb	0	; () banked
 12550  013D86  6F68               	movwf	(??_Console_MakeField+1)& (0+255),b
 12551  013D88  50F3               	movf	prodl,w,c
 12552  013D8A  0100               	movlb	0	; () banked
 12553  013D8C  2767               	addwf	??_Console_MakeField& (0+255),f,b
 12554  013D8E  50F4               	movf	prodh,w,c
 12555  013D90  0100               	movlb	0	; () banked
 12556  013D92  2368               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 12557  013D94  0100               	movlb	0	; () banked
 12558  013D96  5170               	movf	Console_MakeField@x& (0+255),w,b
 12559  013D98  0D02               	mullw	2
 12560  013D9A  50F3               	movf	prodl,w,c
 12561  013D9C  0100               	movlb	0	; () banked
 12562  013D9E  2567               	addwf	??_Console_MakeField& (0+255),w,b
 12563  013DA0  6ED9               	movwf	fsr2l,c
 12564  013DA2  50F4               	movf	prodh,w,c
 12565  013DA4  0100               	movlb	0	; () banked
 12566  013DA6  2168               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 12567  013DA8  6EDA               	movwf	fsr2h,c
 12568  013DAA  C06E  FFDE         	movff	_Console_MakeField$10974,postinc2
 12569  013DAE  C06F  FFDD         	movff	_Console_MakeField$10974+1,postdec2
 12570                           
 12571                           ; BSR set to: 0
 12572  013DB2  0100               	movlb	0	; () banked
 12573  013DB4  2B71               	incf	Console_MakeField@y& (0+255),f,b
 12574  013DB6  D7C6               	goto	l13425
 12575  013DB8                     u9910:
 12576                           
 12577                           ; BSR set to: 0
 12578                           ;Console.c: 447: Column += 1;
 12579                           
 12580                           ; BSR set to: 0
 12581  013DB8  0100               	movlb	0	; () banked
 12582  013DBA  4B6C               	infsnz	Console_MakeField@Column& (0+255),f,b
 12583  013DBC  2B6D               	incf	(Console_MakeField@Column+1)& (0+255),f,b
 12584  013DBE  0100               	movlb	0	; () banked
 12585  013DC0  2B70               	incf	Console_MakeField@x& (0+255),f,b
 12586  013DC2  D7B8               	goto	l13419
 12587  013DC4                     u9920:
 12588                           
 12589                           ; BSR set to: 0
 12590                           ;Console.c: 448: }
 12591                           ;Console.c: 449: return (ColourPtr)Fill;
 12592                           
 12593                           ; BSR set to: 0
 12594  013DC4  0E82               	movlw	low Console_MakeField@Fill
 12595  013DC6  0100               	movlb	0	; () banked
 12596  013DC8  6F65               	movwf	?_Console_MakeField& (0+255),b
 12597  013DCA  0E04               	movlw	high Console_MakeField@Fill
 12598  013DCC  0100               	movlb	0	; () banked
 12599  013DCE  6F66               	movwf	(?_Console_MakeField+1)& (0+255),b
 12600  013DD0  0012               	return	
 12601  013DD2                     __end_of_Console_MakeField:
 12602                           	opt stack 0
 12603                           tosu	equ	0xFFF
 12604                           tosh	equ	0xFFE
 12605                           tosl	equ	0xFFD
 12606                           pclath	equ	0xFFA
 12607                           tblptru	equ	0xFF8
 12608                           tblptrh	equ	0xFF7
 12609                           tblptrl	equ	0xFF6
 12610                           tablat	equ	0xFF5
 12611                           prodh	equ	0xFF4
 12612                           prodl	equ	0xFF3
 12613                           intcon	equ	0xFF2
 12614                           postinc0	equ	0xFEE
 12615                           wreg	equ	0xFE8
 12616                           indf1	equ	0xFE7
 12617                           postdec1	equ	0xFE5
 12618                           fsr1h	equ	0xFE2
 12619                           fsr1l	equ	0xFE1
 12620                           indf2	equ	0xFDF
 12621                           postinc2	equ	0xFDE
 12622                           postdec2	equ	0xFDD
 12623                           plusw2	equ	0xFDB
 12624                           fsr2h	equ	0xFDA
 12625                           fsr2l	equ	0xFD9
 12626                           status	equ	0xFD8
 12627                           
 12628 ;; *************** function _Byte_GetBit *****************
 12629 ;; Defined at:
 12630 ;;		line 38 in file "Library/Types.c"
 12631 ;; Parameters:    Size  Location     Type
 12632 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 12633 ;;		 -> Font5x7(480), 
 12634 ;;  pBit            1    2[BANK0 ] unsigned char 
 12635 ;; Auto vars:     Size  Location     Type
 12636 ;;  Output          1    4[BANK0 ] unsigned char 
 12637 ;; Return value:  Size  Location     Type
 12638 ;;                  1    wreg      unsigned char 
 12639 ;; Registers used:
 12640 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 12641 ;; Tracked objects:
 12642 ;;		On entry : 0/0
 12643 ;;		On exit  : 0/0
 12644 ;;		Unchanged: 0/0
 12645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12646 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12647 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12648 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12649 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12650 ;;Total ram usage:        5 bytes
 12651 ;; Hardware stack levels used:    1
 12652 ;; Hardware stack levels required when called:    7
 12653 ;; This function calls:
 12654 ;;		Nothing
 12655 ;; This function is called by:
 12656 ;;		_Console_MakeField
 12657 ;;		_Word_GetBit
 12658 ;; This function uses a non-reentrant model
 12659 ;;
 12660                           
 12661                           	psect	text58
 12662  015F72                     __ptext58:
 12663                           	opt stack 0
 12664  015F72                     _Byte_GetBit:
 12665                           	opt stack 20
 12666                           
 12667                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 12668                           
 12669                           ; BSR set to: 0
 12670                           ;incstack = 0
 12671  015F72  C060  FFF6         	movff	Byte_GetBit@pInput,tblptrl
 12672  015F76  C061  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 12673  015F7A                     	if	0	;tblptru may be non-zero
 12674  015F7A                     	endif
 12675  015F7A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 12676  015F7A  0E00               	movlw	low (__mediumconst shr (0+16))
 12677  015F7C  6EF8               	movwf	tblptru,c
 12678  015F7E                     	endif
 12679  015F7E  0008               	tblrd		*
 12680  015F80  CFF5 F064          	movff	tablat,Byte_GetBit@Output
 12681                           
 12682                           ;Types.c: 42: Output >>= pBit;
 12683  015F84  0100               	movlb	0	; () banked
 12684  015F86  2962               	incf	Byte_GetBit@pBit& (0+255),w,b
 12685  015F88  0100               	movlb	0	; () banked
 12686  015F8A  6F63               	movwf	??_Byte_GetBit& (0+255),b
 12687  015F8C  D003               	goto	u9530
 12688  015F8E                     u9535:
 12689  015F8E  0100               	movlb	0	; () banked
 12690  015F90  90D8               	bcf	status,0,c
 12691  015F92  3364               	rrcf	Byte_GetBit@Output& (0+255),f,b
 12692  015F94                     u9530:
 12693  015F94  0100               	movlb	0	; () banked
 12694  015F96  2F63               	decfsz	??_Byte_GetBit& (0+255),f,b
 12695  015F98  D7FA               	goto	u9535
 12696                           
 12697                           ;Types.c: 43: Output &= 1;
 12698  015F9A  0E01               	movlw	1
 12699  015F9C  0100               	movlb	0	; () banked
 12700  015F9E  1764               	andwf	Byte_GetBit@Output& (0+255),f,b
 12701                           
 12702                           ; BSR set to: 0
 12703                           ;Types.c: 44: return Output;
 12704  015FA0  0100               	movlb	0	; () banked
 12705  015FA2  5164               	movf	Byte_GetBit@Output& (0+255),w,b
 12706  015FA4  0012               	return	
 12707  015FA6                     __end_of_Byte_GetBit:
 12708                           	opt stack 0
 12709                           tosu	equ	0xFFF
 12710                           tosh	equ	0xFFE
 12711                           tosl	equ	0xFFD
 12712                           pclath	equ	0xFFA
 12713                           tblptru	equ	0xFF8
 12714                           tblptrh	equ	0xFF7
 12715                           tblptrl	equ	0xFF6
 12716                           tablat	equ	0xFF5
 12717                           prodh	equ	0xFF4
 12718                           prodl	equ	0xFF3
 12719                           intcon	equ	0xFF2
 12720                           postinc0	equ	0xFEE
 12721                           wreg	equ	0xFE8
 12722                           indf1	equ	0xFE7
 12723                           postdec1	equ	0xFE5
 12724                           fsr1h	equ	0xFE2
 12725                           fsr1l	equ	0xFE1
 12726                           indf2	equ	0xFDF
 12727                           postinc2	equ	0xFDE
 12728                           postdec2	equ	0xFDD
 12729                           plusw2	equ	0xFDB
 12730                           fsr2h	equ	0xFDA
 12731                           fsr2l	equ	0xFD9
 12732                           status	equ	0xFD8
 12733                           
 12734 ;; *************** function _ADC_Voltage *****************
 12735 ;; Defined at:
 12736 ;;		line 259 in file "Library/ADC.c"
 12737 ;; Parameters:    Size  Location     Type
 12738 ;;  pInput          2   64[BANK0 ] PTR struct ADC
 12739 ;;		 -> ADC_AN0(5), 
 12740 ;; Auto vars:     Size  Location     Type
 12741 ;;  output          4   78[BANK0 ] float 
 12742 ;;  ref             4   74[BANK0 ] const float 
 12743 ;;  max             4   70[BANK0 ] const float 
 12744 ;; Return value:  Size  Location     Type
 12745 ;;                  4   64[BANK0 ] float 
 12746 ;; Registers used:
 12747 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12748 ;; Tracked objects:
 12749 ;;		On entry : 0/0
 12750 ;;		On exit  : 0/0
 12751 ;;		Unchanged: 0/0
 12752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12753 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12754 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12755 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12756 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12757 ;;Total ram usage:       18 bytes
 12758 ;; Hardware stack levels used:    1
 12759 ;; Hardware stack levels required when called:    8
 12760 ;; This function calls:
 12761 ;;		___fldiv
 12762 ;;		___flmul
 12763 ;;		___xxtofl
 12764 ;; This function is called by:
 12765 ;;		_mode1
 12766 ;;		_mode4
 12767 ;; This function uses a non-reentrant model
 12768 ;;
 12769                           
 12770                           	psect	text59
 12771  013A80                     __ptext59:
 12772                           	opt stack 0
 12773  013A80                     _ADC_Voltage:
 12774                           	opt stack 21
 12775                           
 12776                           ;ADC.c: 261: const float max = 1024;
 12777                           
 12778                           ; BSR set to: 0
 12779                           ;incstack = 0
 12780  013A80  0E00               	movlw	0
 12781  013A82  0100               	movlb	0	; () banked
 12782  013A84  6FA6               	movwf	ADC_Voltage@max& (0+255),b
 12783  013A86  0E00               	movlw	0
 12784  013A88  6FA7               	movwf	(ADC_Voltage@max+1)& (0+255),b
 12785  013A8A  0E80               	movlw	128
 12786  013A8C  6FA8               	movwf	(ADC_Voltage@max+2)& (0+255),b
 12787  013A8E  0E44               	movlw	68
 12788  013A90  6FA9               	movwf	(ADC_Voltage@max+3)& (0+255),b
 12789                           
 12790                           ;ADC.c: 262: const float ref = ((float)3.3-(float)0.000);
 12791  013A92  0E33               	movlw	51
 12792  013A94  0100               	movlb	0	; () banked
 12793  013A96  6FAA               	movwf	ADC_Voltage@ref& (0+255),b
 12794  013A98  0E33               	movlw	51
 12795  013A9A  6FAB               	movwf	(ADC_Voltage@ref+1)& (0+255),b
 12796  013A9C  0E53               	movlw	83
 12797  013A9E  6FAC               	movwf	(ADC_Voltage@ref+2)& (0+255),b
 12798  013AA0  0E40               	movlw	64
 12799  013AA2  6FAD               	movwf	(ADC_Voltage@ref+3)& (0+255),b
 12800                           
 12801                           ; BSR set to: 0
 12802                           ;ADC.c: 263: float output = pInput->mValue;
 12803  013AA4  0100               	movlb	0	; () banked
 12804  013AA6  EE20 F001          	lfsr	2,1
 12805  013AAA  51A0               	movf	ADC_Voltage@pInput& (0+255),w,b
 12806  013AAC  26D9               	addwf	fsr2l,f,c
 12807  013AAE  51A1               	movf	(ADC_Voltage@pInput+1)& (0+255),w,b
 12808  013AB0  22DA               	addwfc	fsr2h,f,c
 12809  013AB2  CFDE F0A4          	movff	postinc2,??_ADC_Voltage
 12810  013AB6  CFDD F0A5          	movff	postdec2,??_ADC_Voltage+1
 12811  013ABA  C0A4  F060         	movff	??_ADC_Voltage,___xxtofl@val
 12812  013ABE  C0A5  F061         	movff	??_ADC_Voltage+1,___xxtofl@val+1
 12813  013AC2  0100               	movlb	0	; () banked
 12814  013AC4  6B62               	clrf	(___xxtofl@val+2)& (0+255),b
 12815  013AC6  6B63               	clrf	(___xxtofl@val+3)& (0+255),b
 12816  013AC8  0E00               	movlw	0
 12817  013ACA  EC97  F091         	call	___xxtofl
 12818  013ACE  C060  F0AE         	movff	?___xxtofl,ADC_Voltage@output
 12819  013AD2  C061  F0AF         	movff	?___xxtofl+1,ADC_Voltage@output+1
 12820  013AD6  C062  F0B0         	movff	?___xxtofl+2,ADC_Voltage@output+2
 12821  013ADA  C063  F0B1         	movff	?___xxtofl+3,ADC_Voltage@output+3
 12822                           
 12823                           ;ADC.c: 265: output /= max;
 12824  013ADE  C0AE  F06E         	movff	ADC_Voltage@output,___fldiv@b
 12825  013AE2  C0AF  F06F         	movff	ADC_Voltage@output+1,___fldiv@b+1
 12826  013AE6  C0B0  F070         	movff	ADC_Voltage@output+2,___fldiv@b+2
 12827  013AEA  C0B1  F071         	movff	ADC_Voltage@output+3,___fldiv@b+3
 12828  013AEE  C0A6  F072         	movff	ADC_Voltage@max,___fldiv@a
 12829  013AF2  C0A7  F073         	movff	ADC_Voltage@max+1,___fldiv@a+1
 12830  013AF6  C0A8  F074         	movff	ADC_Voltage@max+2,___fldiv@a+2
 12831  013AFA  C0A9  F075         	movff	ADC_Voltage@max+3,___fldiv@a+3
 12832  013AFE  EC53  F088         	call	___fldiv	;wreg free
 12833  013B02  C06E  F0AE         	movff	?___fldiv,ADC_Voltage@output
 12834  013B06  C06F  F0AF         	movff	?___fldiv+1,ADC_Voltage@output+1
 12835  013B0A  C070  F0B0         	movff	?___fldiv+2,ADC_Voltage@output+2
 12836  013B0E  C071  F0B1         	movff	?___fldiv+3,ADC_Voltage@output+3
 12837                           
 12838                           ;ADC.c: 266: output *= ref;
 12839  013B12  C0AE  F087         	movff	ADC_Voltage@output,___flmul@b
 12840  013B16  C0AF  F088         	movff	ADC_Voltage@output+1,___flmul@b+1
 12841  013B1A  C0B0  F089         	movff	ADC_Voltage@output+2,___flmul@b+2
 12842  013B1E  C0B1  F08A         	movff	ADC_Voltage@output+3,___flmul@b+3
 12843  013B22  C0AA  F08B         	movff	ADC_Voltage@ref,___flmul@a
 12844  013B26  C0AB  F08C         	movff	ADC_Voltage@ref+1,___flmul@a+1
 12845  013B2A  C0AC  F08D         	movff	ADC_Voltage@ref+2,___flmul@a+2
 12846  013B2E  C0AD  F08E         	movff	ADC_Voltage@ref+3,___flmul@a+3
 12847  013B32  EC00  F080         	call	___flmul	;wreg free
 12848  013B36  C087  F0AE         	movff	?___flmul,ADC_Voltage@output
 12849  013B3A  C088  F0AF         	movff	?___flmul+1,ADC_Voltage@output+1
 12850  013B3E  C089  F0B0         	movff	?___flmul+2,ADC_Voltage@output+2
 12851  013B42  C08A  F0B1         	movff	?___flmul+3,ADC_Voltage@output+3
 12852                           
 12853                           ;ADC.c: 268: return output + (float)0.000;
 12854  013B46  C0AE  F0A0         	movff	ADC_Voltage@output,?_ADC_Voltage
 12855  013B4A  C0AF  F0A1         	movff	ADC_Voltage@output+1,?_ADC_Voltage+1
 12856  013B4E  C0B0  F0A2         	movff	ADC_Voltage@output+2,?_ADC_Voltage+2
 12857  013B52  C0B1  F0A3         	movff	ADC_Voltage@output+3,?_ADC_Voltage+3
 12858  013B56  0012               	return	
 12859  013B58                     __end_of_ADC_Voltage:
 12860                           	opt stack 0
 12861                           tosu	equ	0xFFF
 12862                           tosh	equ	0xFFE
 12863                           tosl	equ	0xFFD
 12864                           pclath	equ	0xFFA
 12865                           tblptru	equ	0xFF8
 12866                           tblptrh	equ	0xFF7
 12867                           tblptrl	equ	0xFF6
 12868                           tablat	equ	0xFF5
 12869                           prodh	equ	0xFF4
 12870                           prodl	equ	0xFF3
 12871                           intcon	equ	0xFF2
 12872                           postinc0	equ	0xFEE
 12873                           wreg	equ	0xFE8
 12874                           indf1	equ	0xFE7
 12875                           postdec1	equ	0xFE5
 12876                           fsr1h	equ	0xFE2
 12877                           fsr1l	equ	0xFE1
 12878                           indf2	equ	0xFDF
 12879                           postinc2	equ	0xFDE
 12880                           postdec2	equ	0xFDD
 12881                           plusw2	equ	0xFDB
 12882                           fsr2h	equ	0xFDA
 12883                           fsr2l	equ	0xFD9
 12884                           status	equ	0xFD8
 12885                           
 12886 ;; *************** function ___xxtofl *****************
 12887 ;; Defined at:
 12888 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\xxtofl.c"
 12889 ;; Parameters:    Size  Location     Type
 12890 ;;  sign            1    wreg     unsigned char 
 12891 ;;  val             4    0[BANK0 ] long 
 12892 ;; Auto vars:     Size  Location     Type
 12893 ;;  sign            1    8[BANK0 ] unsigned char 
 12894 ;;  arg             4   10[BANK0 ] unsigned long 
 12895 ;;  exp             1    9[BANK0 ] unsigned char 
 12896 ;; Return value:  Size  Location     Type
 12897 ;;                  4    0[BANK0 ] unsigned char 
 12898 ;; Registers used:
 12899 ;;		wreg, status,2, status,0
 12900 ;; Tracked objects:
 12901 ;;		On entry : 0/0
 12902 ;;		On exit  : 0/0
 12903 ;;		Unchanged: 0/0
 12904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12905 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12906 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12907 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12908 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12909 ;;Total ram usage:       14 bytes
 12910 ;; Hardware stack levels used:    1
 12911 ;; Hardware stack levels required when called:    7
 12912 ;; This function calls:
 12913 ;;		Nothing
 12914 ;; This function is called by:
 12915 ;;		_ADC_Voltage
 12916 ;;		_mode4
 12917 ;; This function uses a non-reentrant model
 12918 ;;
 12919                           
 12920                           	psect	text60
 12921  01232E                     __ptext60:
 12922                           	opt stack 0
 12923  01232E                     ___xxtofl:
 12924                           	opt stack 22
 12925                           
 12926                           ;incstack = 0
 12927                           ;___xxtofl@sign stored from wreg
 12928  01232E  0100               	movlb	0	; () banked
 12929  012330  6F68               	movwf	___xxtofl@sign& (0+255),b
 12930  012332  0100               	movlb	0	; () banked
 12931  012334  5168               	movf	___xxtofl@sign& (0+255),w,b
 12932  012336  0100               	movlb	0	; () banked
 12933  012338  B4D8               	btfsc	status,2,c
 12934  01233A  D01E               	goto	l2983
 12935                           
 12936                           ; BSR set to: 0
 12937  01233C  0100               	movlb	0	; () banked
 12938  01233E  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 12939  012340  D01B               	goto	l2983
 12940                           
 12941                           ; BSR set to: 0
 12942  012342  C060  F064         	movff	___xxtofl@val,??___xxtofl
 12943  012346  C061  F065         	movff	___xxtofl@val+1,??___xxtofl+1
 12944  01234A  C062  F066         	movff	___xxtofl@val+2,??___xxtofl+2
 12945  01234E  C063  F067         	movff	___xxtofl@val+3,??___xxtofl+3
 12946  012352  0100               	movlb	0	; () banked
 12947  012354  1F64               	comf	??___xxtofl& (0+255),f,b
 12948  012356  1F65               	comf	(??___xxtofl+1)& (0+255),f,b
 12949  012358  1F66               	comf	(??___xxtofl+2)& (0+255),f,b
 12950  01235A  1F67               	comf	(??___xxtofl+3)& (0+255),f,b
 12951  01235C  2B64               	incf	??___xxtofl& (0+255),f,b
 12952  01235E  0E00               	movlw	0
 12953  012360  2365               	addwfc	(??___xxtofl+1)& (0+255),f,b
 12954  012362  2366               	addwfc	(??___xxtofl+2)& (0+255),f,b
 12955  012364  2367               	addwfc	(??___xxtofl+3)& (0+255),f,b
 12956  012366  C064  F06A         	movff	??___xxtofl,___xxtofl@arg
 12957  01236A  C065  F06B         	movff	??___xxtofl+1,___xxtofl@arg+1
 12958  01236E  C066  F06C         	movff	??___xxtofl+2,___xxtofl@arg+2
 12959  012372  C067  F06D         	movff	??___xxtofl+3,___xxtofl@arg+3
 12960  012376  D008               	goto	l2984
 12961  012378                     l2983:
 12962                           
 12963                           ; BSR set to: 0
 12964  012378  C060  F06A         	movff	___xxtofl@val,___xxtofl@arg
 12965  01237C  C061  F06B         	movff	___xxtofl@val+1,___xxtofl@arg+1
 12966  012380  C062  F06C         	movff	___xxtofl@val+2,___xxtofl@arg+2
 12967  012384  C063  F06D         	movff	___xxtofl@val+3,___xxtofl@arg+3
 12968  012388                     l2984:
 12969                           
 12970                           ; BSR set to: 0
 12971                           
 12972                           ; BSR set to: 0
 12973  012388  0100               	movlb	0	; () banked
 12974  01238A  5160               	movf	___xxtofl@val& (0+255),w,b
 12975  01238C  0100               	movlb	0	; () banked
 12976  01238E  1161               	iorwf	(___xxtofl@val+1)& (0+255),w,b
 12977  012390  0100               	movlb	0	; () banked
 12978  012392  1162               	iorwf	(___xxtofl@val+2)& (0+255),w,b
 12979  012394  0100               	movlb	0	; () banked
 12980  012396  1163               	iorwf	(___xxtofl@val+3)& (0+255),w,b
 12981  012398  A4D8               	btfss	status,2,c
 12982  01239A  D00A               	goto	l2985
 12983                           
 12984                           ; BSR set to: 0
 12985  01239C  0E00               	movlw	0
 12986  01239E  0100               	movlb	0	; () banked
 12987  0123A0  6F60               	movwf	?___xxtofl& (0+255),b
 12988  0123A2  0E00               	movlw	0
 12989  0123A4  6F61               	movwf	(?___xxtofl+1)& (0+255),b
 12990  0123A6  0E00               	movlw	0
 12991  0123A8  6F62               	movwf	(?___xxtofl+2)& (0+255),b
 12992  0123AA  0E00               	movlw	0
 12993  0123AC  6F63               	movwf	(?___xxtofl+3)& (0+255),b
 12994                           
 12995                           ; BSR set to: 0
 12996  0123AE  0012               	return	
 12997  0123B0                     l2985:
 12998                           
 12999                           ; BSR set to: 0
 13000                           
 13001                           ; BSR set to: 0
 13002  0123B0  0E96               	movlw	150
 13003  0123B2  0100               	movlb	0	; () banked
 13004  0123B4  6F69               	movwf	___xxtofl@exp& (0+255),b
 13005  0123B6  D008               	goto	l2987
 13006  0123B8                     
 13007                           ; BSR set to: 0
 13008                           
 13009                           ; BSR set to: 0
 13010  0123B8  0100               	movlb	0	; () banked
 13011  0123BA  2B69               	incf	___xxtofl@exp& (0+255),f,b
 13012  0123BC  0100               	movlb	0	; () banked
 13013  0123BE  90D8               	bcf	status,0,c
 13014  0123C0  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 13015  0123C2  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 13016  0123C4  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 13017  0123C6  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 13018  0123C8                     l2987:
 13019                           
 13020                           ; BSR set to: 0
 13021                           
 13022                           ; BSR set to: 0
 13023  0123C8  0E00               	movlw	0
 13024  0123CA  0100               	movlb	0	; () banked
 13025  0123CC  156A               	andwf	___xxtofl@arg& (0+255),w,b
 13026  0123CE  0100               	movlb	0	; () banked
 13027  0123D0  6F64               	movwf	??___xxtofl& (0+255),b
 13028  0123D2  0E00               	movlw	0
 13029  0123D4  0100               	movlb	0	; () banked
 13030  0123D6  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 13031  0123D8  0100               	movlb	0	; () banked
 13032  0123DA  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 13033  0123DC  0E00               	movlw	0
 13034  0123DE  0100               	movlb	0	; () banked
 13035  0123E0  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 13036  0123E2  0100               	movlb	0	; () banked
 13037  0123E4  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 13038  0123E6  0EFE               	movlw	254
 13039  0123E8  0100               	movlb	0	; () banked
 13040  0123EA  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 13041  0123EC  0100               	movlb	0	; () banked
 13042  0123EE  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 13043  0123F0  0100               	movlb	0	; () banked
 13044  0123F2  5164               	movf	??___xxtofl& (0+255),w,b
 13045  0123F4  0100               	movlb	0	; () banked
 13046  0123F6  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 13047  0123F8  0100               	movlb	0	; () banked
 13048  0123FA  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 13049  0123FC  0100               	movlb	0	; () banked
 13050  0123FE  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 13051  012400  B4D8               	btfsc	status,2,c
 13052  012402  D010               	goto	l2990
 13053  012404  D7D9               	goto	l2988
 13054  012406                     
 13055                           ; BSR set to: 0
 13056                           
 13057                           ; BSR set to: 0
 13058  012406  0100               	movlb	0	; () banked
 13059  012408  2B69               	incf	___xxtofl@exp& (0+255),f,b
 13060                           
 13061                           ; BSR set to: 0
 13062  01240A  0E01               	movlw	1
 13063  01240C  0100               	movlb	0	; () banked
 13064  01240E  276A               	addwf	___xxtofl@arg& (0+255),f,b
 13065  012410  0E00               	movlw	0
 13066  012412  236B               	addwfc	(___xxtofl@arg+1)& (0+255),f,b
 13067  012414  236C               	addwfc	(___xxtofl@arg+2)& (0+255),f,b
 13068  012416  236D               	addwfc	(___xxtofl@arg+3)& (0+255),f,b
 13069                           
 13070                           ; BSR set to: 0
 13071  012418  0100               	movlb	0	; () banked
 13072  01241A  90D8               	bcf	status,0,c
 13073  01241C  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 13074  01241E  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 13075  012420  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 13076  012422  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 13077  012424                     l2990:
 13078                           
 13079                           ; BSR set to: 0
 13080  012424  0E00               	movlw	0
 13081  012426  0100               	movlb	0	; () banked
 13082  012428  156A               	andwf	___xxtofl@arg& (0+255),w,b
 13083  01242A  0100               	movlb	0	; () banked
 13084  01242C  6F64               	movwf	??___xxtofl& (0+255),b
 13085  01242E  0E00               	movlw	0
 13086  012430  0100               	movlb	0	; () banked
 13087  012432  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 13088  012434  0100               	movlb	0	; () banked
 13089  012436  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 13090  012438  0E00               	movlw	0
 13091  01243A  0100               	movlb	0	; () banked
 13092  01243C  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 13093  01243E  0100               	movlb	0	; () banked
 13094  012440  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 13095  012442  0EFF               	movlw	255
 13096  012444  0100               	movlb	0	; () banked
 13097  012446  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 13098  012448  0100               	movlb	0	; () banked
 13099  01244A  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 13100  01244C  0100               	movlb	0	; () banked
 13101  01244E  5164               	movf	??___xxtofl& (0+255),w,b
 13102  012450  0100               	movlb	0	; () banked
 13103  012452  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 13104  012454  0100               	movlb	0	; () banked
 13105  012456  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 13106  012458  0100               	movlb	0	; () banked
 13107  01245A  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 13108  01245C  B4D8               	btfsc	status,2,c
 13109  01245E  D009               	goto	l2993
 13110  012460  D7D2               	goto	l2991
 13111  012462                     
 13112                           ; BSR set to: 0
 13113                           
 13114                           ; BSR set to: 0
 13115  012462  0100               	movlb	0	; () banked
 13116  012464  0769               	decf	___xxtofl@exp& (0+255),f,b
 13117  012466  0100               	movlb	0	; () banked
 13118  012468  90D8               	bcf	status,0,c
 13119  01246A  376A               	rlcf	___xxtofl@arg& (0+255),f,b
 13120  01246C  376B               	rlcf	(___xxtofl@arg+1)& (0+255),f,b
 13121  01246E  376C               	rlcf	(___xxtofl@arg+2)& (0+255),f,b
 13122  012470  376D               	rlcf	(___xxtofl@arg+3)& (0+255),f,b
 13123  012472                     l2993:
 13124                           
 13125                           ; BSR set to: 0
 13126                           
 13127                           ; BSR set to: 0
 13128  012472  0100               	movlb	0	; () banked
 13129  012474  BF6C               	btfsc	(___xxtofl@arg+2)& (0+255),7,b
 13130  012476  D004               	goto	u10690
 13131                           
 13132                           ; BSR set to: 0
 13133  012478  0E02               	movlw	2
 13134  01247A  0100               	movlb	0	; () banked
 13135  01247C  6169               	cpfslt	___xxtofl@exp& (0+255),b
 13136  01247E  D7F1               	goto	l2994
 13137  012480                     u10690:
 13138                           
 13139                           ; BSR set to: 0
 13140                           
 13141                           ; BSR set to: 0
 13142  012480  0100               	movlb	0	; () banked
 13143  012482  B169               	btfsc	___xxtofl@exp& (0+255),0,b
 13144  012484  D009               	goto	l2998
 13145                           
 13146                           ; BSR set to: 0
 13147  012486  0EFF               	movlw	255
 13148  012488  0100               	movlb	0	; () banked
 13149  01248A  176A               	andwf	___xxtofl@arg& (0+255),f,b
 13150  01248C  0EFF               	movlw	255
 13151  01248E  176B               	andwf	(___xxtofl@arg+1)& (0+255),f,b
 13152  012490  0E7F               	movlw	127
 13153  012492  176C               	andwf	(___xxtofl@arg+2)& (0+255),f,b
 13154  012494  0EFF               	movlw	255
 13155  012496  176D               	andwf	(___xxtofl@arg+3)& (0+255),f,b
 13156  012498                     l2998:
 13157                           
 13158                           ; BSR set to: 0
 13159  012498  0100               	movlb	0	; () banked
 13160  01249A  90D8               	bcf	status,0,c
 13161  01249C  3369               	rrcf	___xxtofl@exp& (0+255),f,b
 13162  01249E  C069  F064         	movff	___xxtofl@exp,??___xxtofl
 13163  0124A2  0100               	movlb	0	; () banked
 13164  0124A4  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 13165  0124A6  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 13166  0124A8  6B67               	clrf	(??___xxtofl+3)& (0+255),b
 13167  0124AA  C064  F067         	movff	??___xxtofl,??___xxtofl+3
 13168  0124AE  0100               	movlb	0	; () banked
 13169  0124B0  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 13170  0124B2  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 13171  0124B4  6B64               	clrf	??___xxtofl& (0+255),b
 13172  0124B6  0100               	movlb	0	; () banked
 13173  0124B8  5164               	movf	??___xxtofl& (0+255),w,b
 13174  0124BA  0100               	movlb	0	; () banked
 13175  0124BC  136A               	iorwf	___xxtofl@arg& (0+255),f,b
 13176  0124BE  0100               	movlb	0	; () banked
 13177  0124C0  5165               	movf	(??___xxtofl+1)& (0+255),w,b
 13178  0124C2  0100               	movlb	0	; () banked
 13179  0124C4  136B               	iorwf	(___xxtofl@arg+1)& (0+255),f,b
 13180  0124C6  0100               	movlb	0	; () banked
 13181  0124C8  5166               	movf	(??___xxtofl+2)& (0+255),w,b
 13182  0124CA  0100               	movlb	0	; () banked
 13183  0124CC  136C               	iorwf	(___xxtofl@arg+2)& (0+255),f,b
 13184  0124CE  0100               	movlb	0	; () banked
 13185  0124D0  5167               	movf	(??___xxtofl+3)& (0+255),w,b
 13186  0124D2  0100               	movlb	0	; () banked
 13187  0124D4  136D               	iorwf	(___xxtofl@arg+3)& (0+255),f,b
 13188                           
 13189                           ; BSR set to: 0
 13190  0124D6  0100               	movlb	0	; () banked
 13191  0124D8  5168               	movf	___xxtofl@sign& (0+255),w,b
 13192  0124DA  0100               	movlb	0	; () banked
 13193  0124DC  B4D8               	btfsc	status,2,c
 13194  0124DE  D005               	goto	l2999
 13195                           
 13196                           ; BSR set to: 0
 13197  0124E0  0100               	movlb	0	; () banked
 13198  0124E2  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 13199  0124E4  D002               	goto	l2999
 13200                           
 13201                           ; BSR set to: 0
 13202  0124E6  0100               	movlb	0	; () banked
 13203  0124E8  8F6D               	bsf	(___xxtofl@arg+3)& (0+255),7,b
 13204  0124EA                     l2999:
 13205                           
 13206                           ; BSR set to: 0
 13207                           
 13208                           ; BSR set to: 0
 13209  0124EA  C06A  F060         	movff	___xxtofl@arg,?___xxtofl
 13210  0124EE  C06B  F061         	movff	___xxtofl@arg+1,?___xxtofl+1
 13211  0124F2  C06C  F062         	movff	___xxtofl@arg+2,?___xxtofl+2
 13212  0124F6  C06D  F063         	movff	___xxtofl@arg+3,?___xxtofl+3
 13213  0124FA  0012               	return	
 13214  0124FC                     __end_of___xxtofl:
 13215                           	opt stack 0
 13216                           tosu	equ	0xFFF
 13217                           tosh	equ	0xFFE
 13218                           tosl	equ	0xFFD
 13219                           pclath	equ	0xFFA
 13220                           tblptru	equ	0xFF8
 13221                           tblptrh	equ	0xFF7
 13222                           tblptrl	equ	0xFF6
 13223                           tablat	equ	0xFF5
 13224                           prodh	equ	0xFF4
 13225                           prodl	equ	0xFF3
 13226                           intcon	equ	0xFF2
 13227                           postinc0	equ	0xFEE
 13228                           wreg	equ	0xFE8
 13229                           indf1	equ	0xFE7
 13230                           postdec1	equ	0xFE5
 13231                           fsr1h	equ	0xFE2
 13232                           fsr1l	equ	0xFE1
 13233                           indf2	equ	0xFDF
 13234                           postinc2	equ	0xFDE
 13235                           postdec2	equ	0xFDD
 13236                           plusw2	equ	0xFDB
 13237                           fsr2h	equ	0xFDA
 13238                           fsr2l	equ	0xFD9
 13239                           status	equ	0xFD8
 13240                           
 13241 ;; *************** function ___flmul *****************
 13242 ;; Defined at:
 13243 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcmul.c"
 13244 ;; Parameters:    Size  Location     Type
 13245 ;;  b               4   39[BANK0 ] unsigned char 
 13246 ;;  a               4   43[BANK0 ] unsigned char 
 13247 ;; Auto vars:     Size  Location     Type
 13248 ;;  prod            4   58[BANK0 ] struct .
 13249 ;;  grs             4   53[BANK0 ] unsigned long 
 13250 ;;  temp            2   62[BANK0 ] struct .
 13251 ;;  bexp            1   57[BANK0 ] unsigned char 
 13252 ;;  aexp            1   52[BANK0 ] unsigned char 
 13253 ;;  sign            1   51[BANK0 ] unsigned char 
 13254 ;; Return value:  Size  Location     Type
 13255 ;;                  4   39[BANK0 ] unsigned char 
 13256 ;; Registers used:
 13257 ;;		wreg, status,2, status,0, prodl, prodh
 13258 ;; Tracked objects:
 13259 ;;		On entry : 0/0
 13260 ;;		On exit  : 0/0
 13261 ;;		Unchanged: 0/0
 13262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13263 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13264 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13265 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13266 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13267 ;;Total ram usage:       25 bytes
 13268 ;; Hardware stack levels used:    1
 13269 ;; Hardware stack levels required when called:    7
 13270 ;; This function calls:
 13271 ;;		Nothing
 13272 ;; This function is called by:
 13273 ;;		_ADC_Voltage
 13274 ;;		_mode4
 13275 ;; This function uses a non-reentrant model
 13276 ;;
 13277                           
 13278                           	psect	text61
 13279  010000                     __ptext61:
 13280                           	opt stack 0
 13281  010000                     ___flmul:
 13282                           	opt stack 22
 13283                           
 13284                           ; BSR set to: 0
 13285                           ;incstack = 0
 13286  010000  0100               	movlb	0	; () banked
 13287  010002  518A               	movf	(___flmul@b+3)& (0+255),w,b
 13288  010004  0B80               	andlw	128
 13289  010006  0100               	movlb	0	; () banked
 13290  010008  6F93               	movwf	___flmul@sign& (0+255),b
 13291  01000A  0100               	movlb	0	; () banked
 13292  01000C  518A               	movf	(___flmul@b+3)& (0+255),w,b
 13293  01000E  258A               	addwf	(___flmul@b+3)& (0+255),w,b
 13294  010010  0100               	movlb	0	; () banked
 13295  010012  6F99               	movwf	___flmul@bexp& (0+255),b
 13296                           
 13297                           ; BSR set to: 0
 13298  010014  0100               	movlb	0	; () banked
 13299  010016  AF89               	btfss	(___flmul@b+2)& (0+255),7,b
 13300  010018  D002               	goto	l2954
 13301                           
 13302                           ; BSR set to: 0
 13303  01001A  0100               	movlb	0	; () banked
 13304  01001C  8199               	bsf	___flmul@bexp& (0+255),0,b
 13305  01001E                     l2954:
 13306                           
 13307                           ; BSR set to: 0
 13308                           
 13309                           ; BSR set to: 0
 13310  01001E  0100               	movlb	0	; () banked
 13311  010020  5199               	movf	___flmul@bexp& (0+255),w,b
 13312  010022  0100               	movlb	0	; () banked
 13313  010024  B4D8               	btfsc	status,2,c
 13314  010026  D010               	goto	l2955
 13315                           
 13316                           ; BSR set to: 0
 13317  010028  0100               	movlb	0	; () banked
 13318  01002A  2999               	incf	___flmul@bexp& (0+255),w,b
 13319  01002C  A4D8               	btfss	status,2,c
 13320  01002E  D009               	goto	l2956
 13321                           
 13322                           ; BSR set to: 0
 13323  010030  0E00               	movlw	0
 13324  010032  0100               	movlb	0	; () banked
 13325  010034  6F87               	movwf	___flmul@b& (0+255),b
 13326  010036  0E00               	movlw	0
 13327  010038  6F88               	movwf	(___flmul@b+1)& (0+255),b
 13328  01003A  0E00               	movlw	0
 13329  01003C  6F89               	movwf	(___flmul@b+2)& (0+255),b
 13330  01003E  0E00               	movlw	0
 13331  010040  6F8A               	movwf	(___flmul@b+3)& (0+255),b
 13332  010042                     l2956:
 13333                           
 13334                           ; BSR set to: 0
 13335                           
 13336                           ; BSR set to: 0
 13337  010042  0100               	movlb	0	; () banked
 13338  010044  8F89               	bsf	(___flmul@b+2)& (0+255),7,b
 13339  010046  D009               	goto	l2957
 13340  010048                     l2955:
 13341                           
 13342                           ; BSR set to: 0
 13343                           
 13344                           ; BSR set to: 0
 13345  010048  0E00               	movlw	0
 13346  01004A  0100               	movlb	0	; () banked
 13347  01004C  6F87               	movwf	___flmul@b& (0+255),b
 13348  01004E  0E00               	movlw	0
 13349  010050  6F88               	movwf	(___flmul@b+1)& (0+255),b
 13350  010052  0E00               	movlw	0
 13351  010054  6F89               	movwf	(___flmul@b+2)& (0+255),b
 13352  010056  0E00               	movlw	0
 13353  010058  6F8A               	movwf	(___flmul@b+3)& (0+255),b
 13354  01005A                     l2957:
 13355                           
 13356                           ; BSR set to: 0
 13357                           
 13358                           ; BSR set to: 0
 13359  01005A  0100               	movlb	0	; () banked
 13360  01005C  518E               	movf	(___flmul@a+3)& (0+255),w,b
 13361  01005E  0B80               	andlw	128
 13362  010060  0100               	movlb	0	; () banked
 13363  010062  1B93               	xorwf	___flmul@sign& (0+255),f,b
 13364                           
 13365                           ; BSR set to: 0
 13366  010064  0100               	movlb	0	; () banked
 13367  010066  518E               	movf	(___flmul@a+3)& (0+255),w,b
 13368  010068  258E               	addwf	(___flmul@a+3)& (0+255),w,b
 13369  01006A  0100               	movlb	0	; () banked
 13370  01006C  6F94               	movwf	___flmul@aexp& (0+255),b
 13371                           
 13372                           ; BSR set to: 0
 13373  01006E  0100               	movlb	0	; () banked
 13374  010070  AF8D               	btfss	(___flmul@a+2)& (0+255),7,b
 13375  010072  D002               	goto	l2958
 13376                           
 13377                           ; BSR set to: 0
 13378  010074  0100               	movlb	0	; () banked
 13379  010076  8194               	bsf	___flmul@aexp& (0+255),0,b
 13380  010078                     l2958:
 13381                           
 13382                           ; BSR set to: 0
 13383                           
 13384                           ; BSR set to: 0
 13385  010078  0100               	movlb	0	; () banked
 13386  01007A  5194               	movf	___flmul@aexp& (0+255),w,b
 13387  01007C  0100               	movlb	0	; () banked
 13388  01007E  B4D8               	btfsc	status,2,c
 13389  010080  D010               	goto	l2959
 13390                           
 13391                           ; BSR set to: 0
 13392  010082  0100               	movlb	0	; () banked
 13393  010084  2994               	incf	___flmul@aexp& (0+255),w,b
 13394  010086  A4D8               	btfss	status,2,c
 13395  010088  D009               	goto	l2960
 13396                           
 13397                           ; BSR set to: 0
 13398  01008A  0E00               	movlw	0
 13399  01008C  0100               	movlb	0	; () banked
 13400  01008E  6F8B               	movwf	___flmul@a& (0+255),b
 13401  010090  0E00               	movlw	0
 13402  010092  6F8C               	movwf	(___flmul@a+1)& (0+255),b
 13403  010094  0E00               	movlw	0
 13404  010096  6F8D               	movwf	(___flmul@a+2)& (0+255),b
 13405  010098  0E00               	movlw	0
 13406  01009A  6F8E               	movwf	(___flmul@a+3)& (0+255),b
 13407  01009C                     l2960:
 13408                           
 13409                           ; BSR set to: 0
 13410                           
 13411                           ; BSR set to: 0
 13412  01009C  0100               	movlb	0	; () banked
 13413  01009E  8F8D               	bsf	(___flmul@a+2)& (0+255),7,b
 13414  0100A0  D009               	goto	l2961
 13415  0100A2                     l2959:
 13416                           
 13417                           ; BSR set to: 0
 13418                           
 13419                           ; BSR set to: 0
 13420  0100A2  0E00               	movlw	0
 13421  0100A4  0100               	movlb	0	; () banked
 13422  0100A6  6F8B               	movwf	___flmul@a& (0+255),b
 13423  0100A8  0E00               	movlw	0
 13424  0100AA  6F8C               	movwf	(___flmul@a+1)& (0+255),b
 13425  0100AC  0E00               	movlw	0
 13426  0100AE  6F8D               	movwf	(___flmul@a+2)& (0+255),b
 13427  0100B0  0E00               	movlw	0
 13428  0100B2  6F8E               	movwf	(___flmul@a+3)& (0+255),b
 13429  0100B4                     l2961:
 13430                           
 13431                           ; BSR set to: 0
 13432  0100B4  0100               	movlb	0	; () banked
 13433  0100B6  5194               	movf	___flmul@aexp& (0+255),w,b
 13434  0100B8  0100               	movlb	0	; () banked
 13435  0100BA  B4D8               	btfsc	status,2,c
 13436  0100BC  D005               	goto	u10510
 13437                           
 13438                           ; BSR set to: 0
 13439  0100BE  0100               	movlb	0	; () banked
 13440  0100C0  5199               	movf	___flmul@bexp& (0+255),w,b
 13441  0100C2  0100               	movlb	0	; () banked
 13442  0100C4  A4D8               	btfss	status,2,c
 13443  0100C6  D00A               	goto	l2962
 13444  0100C8                     u10510:
 13445                           
 13446                           ; BSR set to: 0
 13447                           
 13448                           ; BSR set to: 0
 13449  0100C8  0E00               	movlw	0
 13450  0100CA  0100               	movlb	0	; () banked
 13451  0100CC  6F87               	movwf	?___flmul& (0+255),b
 13452  0100CE  0E00               	movlw	0
 13453  0100D0  6F88               	movwf	(?___flmul+1)& (0+255),b
 13454  0100D2  0E00               	movlw	0
 13455  0100D4  6F89               	movwf	(?___flmul+2)& (0+255),b
 13456  0100D6  0E00               	movlw	0
 13457  0100D8  6F8A               	movwf	(?___flmul+3)& (0+255),b
 13458                           
 13459                           ; BSR set to: 0
 13460  0100DA  0012               	return	
 13461  0100DC                     l2962:
 13462                           
 13463                           ; BSR set to: 0
 13464                           
 13465                           ; BSR set to: 0
 13466  0100DC  0100               	movlb	0	; () banked
 13467  0100DE  518D               	movf	(___flmul@a+2)& (0+255),w,b
 13468  0100E0  0100               	movlb	0	; () banked
 13469  0100E2  0387               	mulwf	___flmul@b& (0+255),b
 13470  0100E4  CFF3 F09E          	movff	prodl,___flmul@temp
 13471  0100E8  CFF4 F09F          	movff	prodh,___flmul@temp+1
 13472                           
 13473                           ; BSR set to: 0
 13474  0100EC  0100               	movlb	0	; () banked
 13475  0100EE  519E               	movf	___flmul@temp& (0+255),w,b
 13476  0100F0  0100               	movlb	0	; () banked
 13477  0100F2  6F95               	movwf	___flmul@grs& (0+255),b
 13478  0100F4  6B96               	clrf	(___flmul@grs+1)& (0+255),b
 13479  0100F6  6B97               	clrf	(___flmul@grs+2)& (0+255),b
 13480  0100F8  6B98               	clrf	(___flmul@grs+3)& (0+255),b
 13481                           
 13482                           ; BSR set to: 0
 13483  0100FA  0100               	movlb	0	; () banked
 13484  0100FC  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 13485  0100FE  0100               	movlb	0	; () banked
 13486  010100  6F9A               	movwf	___flmul@prod& (0+255),b
 13487  010102  6B9B               	clrf	(___flmul@prod+1)& (0+255),b
 13488  010104  6B9C               	clrf	(___flmul@prod+2)& (0+255),b
 13489  010106  6B9D               	clrf	(___flmul@prod+3)& (0+255),b
 13490  010108  0100               	movlb	0	; () banked
 13491  01010A  518C               	movf	(___flmul@a+1)& (0+255),w,b
 13492  01010C  0100               	movlb	0	; () banked
 13493  01010E  0388               	mulwf	(___flmul@b+1)& (0+255),b
 13494  010110  CFF3 F09E          	movff	prodl,___flmul@temp
 13495  010114  CFF4 F09F          	movff	prodh,___flmul@temp+1
 13496                           
 13497                           ; BSR set to: 0
 13498  010118  0100               	movlb	0	; () banked
 13499  01011A  519E               	movf	___flmul@temp& (0+255),w,b
 13500  01011C  0100               	movlb	0	; () banked
 13501  01011E  2795               	addwf	___flmul@grs& (0+255),f,b
 13502  010120  0E00               	movlw	0
 13503  010122  2396               	addwfc	(___flmul@grs+1)& (0+255),f,b
 13504  010124  2397               	addwfc	(___flmul@grs+2)& (0+255),f,b
 13505  010126  2398               	addwfc	(___flmul@grs+3)& (0+255),f,b
 13506                           
 13507                           ; BSR set to: 0
 13508  010128  0100               	movlb	0	; () banked
 13509  01012A  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 13510  01012C  0100               	movlb	0	; () banked
 13511  01012E  279A               	addwf	___flmul@prod& (0+255),f,b
 13512  010130  0E00               	movlw	0
 13513  010132  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 13514  010134  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 13515  010136  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 13516  010138  0100               	movlb	0	; () banked
 13517  01013A  518B               	movf	___flmul@a& (0+255),w,b
 13518  01013C  0100               	movlb	0	; () banked
 13519  01013E  0389               	mulwf	(___flmul@b+2)& (0+255),b
 13520  010140  CFF3 F09E          	movff	prodl,___flmul@temp
 13521  010144  CFF4 F09F          	movff	prodh,___flmul@temp+1
 13522                           
 13523                           ; BSR set to: 0
 13524  010148  0100               	movlb	0	; () banked
 13525  01014A  519E               	movf	___flmul@temp& (0+255),w,b
 13526  01014C  0100               	movlb	0	; () banked
 13527  01014E  2795               	addwf	___flmul@grs& (0+255),f,b
 13528  010150  0E00               	movlw	0
 13529  010152  2396               	addwfc	(___flmul@grs+1)& (0+255),f,b
 13530  010154  2397               	addwfc	(___flmul@grs+2)& (0+255),f,b
 13531  010156  2398               	addwfc	(___flmul@grs+3)& (0+255),f,b
 13532                           
 13533                           ; BSR set to: 0
 13534  010158  0100               	movlb	0	; () banked
 13535  01015A  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 13536  01015C  0100               	movlb	0	; () banked
 13537  01015E  279A               	addwf	___flmul@prod& (0+255),f,b
 13538  010160  0E00               	movlw	0
 13539  010162  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 13540  010164  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 13541  010166  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 13542                           
 13543                           ; BSR set to: 0
 13544  010168  C097  F098         	movff	___flmul@grs+2,___flmul@grs+3
 13545  01016C  C096  F097         	movff	___flmul@grs+1,___flmul@grs+2
 13546  010170  C095  F096         	movff	___flmul@grs,___flmul@grs+1
 13547  010174  0100               	movlb	0	; () banked
 13548  010176  6B95               	clrf	___flmul@grs& (0+255),b
 13549                           
 13550                           ; BSR set to: 0
 13551  010178  0100               	movlb	0	; () banked
 13552  01017A  518B               	movf	___flmul@a& (0+255),w,b
 13553  01017C  0100               	movlb	0	; () banked
 13554  01017E  0388               	mulwf	(___flmul@b+1)& (0+255),b
 13555  010180  CFF3 F09E          	movff	prodl,___flmul@temp
 13556  010184  CFF4 F09F          	movff	prodh,___flmul@temp+1
 13557                           
 13558                           ; BSR set to: 0
 13559  010188  0100               	movlb	0	; () banked
 13560  01018A  519E               	movf	___flmul@temp& (0+255),w,b
 13561  01018C  0100               	movlb	0	; () banked
 13562  01018E  2795               	addwf	___flmul@grs& (0+255),f,b
 13563  010190  0100               	movlb	0	; () banked
 13564  010192  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 13565  010194  0100               	movlb	0	; () banked
 13566  010196  2396               	addwfc	(___flmul@grs+1)& (0+255),f,b
 13567  010198  0E00               	movlw	0
 13568  01019A  0100               	movlb	0	; () banked
 13569  01019C  2397               	addwfc	(___flmul@grs+2)& (0+255),f,b
 13570  01019E  0E00               	movlw	0
 13571  0101A0  0100               	movlb	0	; () banked
 13572  0101A2  2398               	addwfc	(___flmul@grs+3)& (0+255),f,b
 13573                           
 13574                           ; BSR set to: 0
 13575  0101A4  0100               	movlb	0	; () banked
 13576  0101A6  518C               	movf	(___flmul@a+1)& (0+255),w,b
 13577  0101A8  0100               	movlb	0	; () banked
 13578  0101AA  0387               	mulwf	___flmul@b& (0+255),b
 13579  0101AC  CFF3 F09E          	movff	prodl,___flmul@temp
 13580  0101B0  CFF4 F09F          	movff	prodh,___flmul@temp+1
 13581                           
 13582                           ; BSR set to: 0
 13583  0101B4  0100               	movlb	0	; () banked
 13584  0101B6  519E               	movf	___flmul@temp& (0+255),w,b
 13585  0101B8  0100               	movlb	0	; () banked
 13586  0101BA  2795               	addwf	___flmul@grs& (0+255),f,b
 13587  0101BC  0100               	movlb	0	; () banked
 13588  0101BE  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 13589  0101C0  0100               	movlb	0	; () banked
 13590  0101C2  2396               	addwfc	(___flmul@grs+1)& (0+255),f,b
 13591  0101C4  0E00               	movlw	0
 13592  0101C6  0100               	movlb	0	; () banked
 13593  0101C8  2397               	addwfc	(___flmul@grs+2)& (0+255),f,b
 13594  0101CA  0E00               	movlw	0
 13595  0101CC  0100               	movlb	0	; () banked
 13596  0101CE  2398               	addwfc	(___flmul@grs+3)& (0+255),f,b
 13597                           
 13598                           ; BSR set to: 0
 13599  0101D0  C097  F098         	movff	___flmul@grs+2,___flmul@grs+3
 13600  0101D4  C096  F097         	movff	___flmul@grs+1,___flmul@grs+2
 13601  0101D8  C095  F096         	movff	___flmul@grs,___flmul@grs+1
 13602  0101DC  0100               	movlb	0	; () banked
 13603  0101DE  6B95               	clrf	___flmul@grs& (0+255),b
 13604  0101E0  0100               	movlb	0	; () banked
 13605  0101E2  518B               	movf	___flmul@a& (0+255),w,b
 13606  0101E4  0100               	movlb	0	; () banked
 13607  0101E6  0387               	mulwf	___flmul@b& (0+255),b
 13608  0101E8  CFF3 F09E          	movff	prodl,___flmul@temp
 13609  0101EC  CFF4 F09F          	movff	prodh,___flmul@temp+1
 13610                           
 13611                           ; BSR set to: 0
 13612  0101F0  0100               	movlb	0	; () banked
 13613  0101F2  519E               	movf	___flmul@temp& (0+255),w,b
 13614  0101F4  0100               	movlb	0	; () banked
 13615  0101F6  2795               	addwf	___flmul@grs& (0+255),f,b
 13616  0101F8  0100               	movlb	0	; () banked
 13617  0101FA  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 13618  0101FC  0100               	movlb	0	; () banked
 13619  0101FE  2396               	addwfc	(___flmul@grs+1)& (0+255),f,b
 13620  010200  0E00               	movlw	0
 13621  010202  0100               	movlb	0	; () banked
 13622  010204  2397               	addwfc	(___flmul@grs+2)& (0+255),f,b
 13623  010206  0E00               	movlw	0
 13624  010208  0100               	movlb	0	; () banked
 13625  01020A  2398               	addwfc	(___flmul@grs+3)& (0+255),f,b
 13626                           
 13627                           ; BSR set to: 0
 13628  01020C  0100               	movlb	0	; () banked
 13629  01020E  518D               	movf	(___flmul@a+2)& (0+255),w,b
 13630  010210  0100               	movlb	0	; () banked
 13631  010212  0388               	mulwf	(___flmul@b+1)& (0+255),b
 13632  010214  CFF3 F09E          	movff	prodl,___flmul@temp
 13633  010218  CFF4 F09F          	movff	prodh,___flmul@temp+1
 13634  01021C  0100               	movlb	0	; () banked
 13635  01021E  519E               	movf	___flmul@temp& (0+255),w,b
 13636  010220  0100               	movlb	0	; () banked
 13637  010222  279A               	addwf	___flmul@prod& (0+255),f,b
 13638  010224  0100               	movlb	0	; () banked
 13639  010226  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 13640  010228  0100               	movlb	0	; () banked
 13641  01022A  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 13642  01022C  0E00               	movlw	0
 13643  01022E  0100               	movlb	0	; () banked
 13644  010230  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 13645  010232  0E00               	movlw	0
 13646  010234  0100               	movlb	0	; () banked
 13647  010236  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 13648                           
 13649                           ; BSR set to: 0
 13650  010238  0100               	movlb	0	; () banked
 13651  01023A  518C               	movf	(___flmul@a+1)& (0+255),w,b
 13652  01023C  0100               	movlb	0	; () banked
 13653  01023E  0389               	mulwf	(___flmul@b+2)& (0+255),b
 13654  010240  CFF3 F09E          	movff	prodl,___flmul@temp
 13655  010244  CFF4 F09F          	movff	prodh,___flmul@temp+1
 13656                           
 13657                           ; BSR set to: 0
 13658  010248  0100               	movlb	0	; () banked
 13659  01024A  519E               	movf	___flmul@temp& (0+255),w,b
 13660  01024C  0100               	movlb	0	; () banked
 13661  01024E  279A               	addwf	___flmul@prod& (0+255),f,b
 13662  010250  0100               	movlb	0	; () banked
 13663  010252  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 13664  010254  0100               	movlb	0	; () banked
 13665  010256  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 13666  010258  0E00               	movlw	0
 13667  01025A  0100               	movlb	0	; () banked
 13668  01025C  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 13669  01025E  0E00               	movlw	0
 13670  010260  0100               	movlb	0	; () banked
 13671  010262  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 13672  010264  0100               	movlb	0	; () banked
 13673  010266  518D               	movf	(___flmul@a+2)& (0+255),w,b
 13674  010268  0100               	movlb	0	; () banked
 13675  01026A  0389               	mulwf	(___flmul@b+2)& (0+255),b
 13676  01026C  CFF3 F09E          	movff	prodl,___flmul@temp
 13677  010270  CFF4 F09F          	movff	prodh,___flmul@temp+1
 13678                           
 13679                           ; BSR set to: 0
 13680  010274  0100               	movlb	0	; () banked
 13681  010276  519E               	movf	___flmul@temp& (0+255),w,b
 13682  010278  0100               	movlb	0	; () banked
 13683  01027A  6F8F               	movwf	??___flmul& (0+255),b
 13684  01027C  0100               	movlb	0	; () banked
 13685  01027E  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 13686  010280  0100               	movlb	0	; () banked
 13687  010282  6F90               	movwf	(??___flmul+1)& (0+255),b
 13688  010284  0100               	movlb	0	; () banked
 13689  010286  6B91               	clrf	(??___flmul+2)& (0+255),b
 13690  010288  0100               	movlb	0	; () banked
 13691  01028A  6B92               	clrf	(??___flmul+3)& (0+255),b
 13692  01028C  C091  F092         	movff	??___flmul+2,??___flmul+3
 13693  010290  C090  F091         	movff	??___flmul+1,??___flmul+2
 13694  010294  C08F  F090         	movff	??___flmul,??___flmul+1
 13695  010298  0100               	movlb	0	; () banked
 13696  01029A  6B8F               	clrf	??___flmul& (0+255),b
 13697  01029C  0100               	movlb	0	; () banked
 13698  01029E  518F               	movf	??___flmul& (0+255),w,b
 13699  0102A0  0100               	movlb	0	; () banked
 13700  0102A2  279A               	addwf	___flmul@prod& (0+255),f,b
 13701  0102A4  0100               	movlb	0	; () banked
 13702  0102A6  5190               	movf	(??___flmul+1)& (0+255),w,b
 13703  0102A8  0100               	movlb	0	; () banked
 13704  0102AA  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 13705  0102AC  0100               	movlb	0	; () banked
 13706  0102AE  5191               	movf	(??___flmul+2)& (0+255),w,b
 13707  0102B0  0100               	movlb	0	; () banked
 13708  0102B2  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 13709  0102B4  0100               	movlb	0	; () banked
 13710  0102B6  5192               	movf	(??___flmul+3)& (0+255),w,b
 13711  0102B8  0100               	movlb	0	; () banked
 13712  0102BA  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 13713                           
 13714                           ; BSR set to: 0
 13715  0102BC  C095  F08F         	movff	___flmul@grs,??___flmul
 13716  0102C0  C096  F090         	movff	___flmul@grs+1,??___flmul+1
 13717  0102C4  C097  F091         	movff	___flmul@grs+2,??___flmul+2
 13718  0102C8  C098  F092         	movff	___flmul@grs+3,??___flmul+3
 13719  0102CC  0E19               	movlw	25
 13720  0102CE  D006               	goto	u10520
 13721  0102D0                     u10525:
 13722  0102D0  0100               	movlb	0	; () banked
 13723  0102D2  90D8               	bcf	status,0,c
 13724  0102D4  3392               	rrcf	(??___flmul+3)& (0+255),f,b
 13725  0102D6  3391               	rrcf	(??___flmul+2)& (0+255),f,b
 13726  0102D8  3390               	rrcf	(??___flmul+1)& (0+255),f,b
 13727  0102DA  338F               	rrcf	??___flmul& (0+255),f,b
 13728  0102DC                     u10520:
 13729  0102DC  2EE8               	decfsz	wreg,f,c
 13730  0102DE  D7F8               	goto	u10525
 13731  0102E0  0100               	movlb	0	; () banked
 13732  0102E2  518F               	movf	??___flmul& (0+255),w,b
 13733  0102E4  0100               	movlb	0	; () banked
 13734  0102E6  279A               	addwf	___flmul@prod& (0+255),f,b
 13735  0102E8  0100               	movlb	0	; () banked
 13736  0102EA  5190               	movf	(??___flmul+1)& (0+255),w,b
 13737  0102EC  0100               	movlb	0	; () banked
 13738  0102EE  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 13739  0102F0  0100               	movlb	0	; () banked
 13740  0102F2  5191               	movf	(??___flmul+2)& (0+255),w,b
 13741  0102F4  0100               	movlb	0	; () banked
 13742  0102F6  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 13743  0102F8  0100               	movlb	0	; () banked
 13744  0102FA  5192               	movf	(??___flmul+3)& (0+255),w,b
 13745  0102FC  0100               	movlb	0	; () banked
 13746  0102FE  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 13747                           
 13748                           ; BSR set to: 0
 13749  010300  C097  F098         	movff	___flmul@grs+2,___flmul@grs+3
 13750  010304  C096  F097         	movff	___flmul@grs+1,___flmul@grs+2
 13751  010308  C095  F096         	movff	___flmul@grs,___flmul@grs+1
 13752  01030C  0100               	movlb	0	; () banked
 13753  01030E  6B95               	clrf	___flmul@grs& (0+255),b
 13754                           
 13755                           ; BSR set to: 0
 13756  010310  0100               	movlb	0	; () banked
 13757  010312  5194               	movf	___flmul@aexp& (0+255),w,b
 13758  010314  C099  F08F         	movff	___flmul@bexp,??___flmul
 13759  010318  0100               	movlb	0	; () banked
 13760  01031A  6B90               	clrf	(??___flmul+1)& (0+255),b
 13761  01031C  0100               	movlb	0	; () banked
 13762  01031E  278F               	addwf	??___flmul& (0+255),f,b
 13763  010320  0E00               	movlw	0
 13764  010322  2390               	addwfc	(??___flmul+1)& (0+255),f,b
 13765  010324  0E82               	movlw	130
 13766  010326  0100               	movlb	0	; () banked
 13767  010328  258F               	addwf	??___flmul& (0+255),w,b
 13768  01032A  0100               	movlb	0	; () banked
 13769  01032C  6F9E               	movwf	___flmul@temp& (0+255),b
 13770  01032E  0EFF               	movlw	255
 13771  010330  0100               	movlb	0	; () banked
 13772  010332  2190               	addwfc	(??___flmul+1)& (0+255),w,b
 13773  010334  0100               	movlb	0	; () banked
 13774  010336  6F9F               	movwf	(___flmul@temp+1)& (0+255),b
 13775  010338  D015               	goto	l2966
 13776  01033A                     
 13777                           ; BSR set to: 0
 13778                           
 13779                           ; BSR set to: 0
 13780  01033A  0100               	movlb	0	; () banked
 13781  01033C  90D8               	bcf	status,0,c
 13782  01033E  379A               	rlcf	___flmul@prod& (0+255),f,b
 13783  010340  379B               	rlcf	(___flmul@prod+1)& (0+255),f,b
 13784  010342  379C               	rlcf	(___flmul@prod+2)& (0+255),f,b
 13785  010344  379D               	rlcf	(___flmul@prod+3)& (0+255),f,b
 13786                           
 13787                           ; BSR set to: 0
 13788  010346  0100               	movlb	0	; () banked
 13789  010348  AF98               	btfss	(___flmul@grs+3)& (0+255),7,b
 13790  01034A  D002               	goto	l2968
 13791                           
 13792                           ; BSR set to: 0
 13793  01034C  0100               	movlb	0	; () banked
 13794  01034E  819A               	bsf	___flmul@prod& (0+255),0,b
 13795  010350                     l2968:
 13796                           
 13797                           ; BSR set to: 0
 13798  010350  0100               	movlb	0	; () banked
 13799  010352  90D8               	bcf	status,0,c
 13800  010354  3795               	rlcf	___flmul@grs& (0+255),f,b
 13801  010356  3796               	rlcf	(___flmul@grs+1)& (0+255),f,b
 13802  010358  3797               	rlcf	(___flmul@grs+2)& (0+255),f,b
 13803  01035A  3798               	rlcf	(___flmul@grs+3)& (0+255),f,b
 13804  01035C  0100               	movlb	0	; () banked
 13805  01035E  079E               	decf	___flmul@temp& (0+255),f,b
 13806  010360  A0D8               	btfss	status,0,c
 13807  010362  079F               	decf	(___flmul@temp+1)& (0+255),f,b
 13808  010364                     l2966:
 13809                           
 13810                           ; BSR set to: 0
 13811                           
 13812                           ; BSR set to: 0
 13813  010364  0100               	movlb	0	; () banked
 13814  010366  AF9C               	btfss	(___flmul@prod+2)& (0+255),7,b
 13815  010368  D7E8               	goto	l2967
 13816                           
 13817                           ; BSR set to: 0
 13818                           
 13819                           ; BSR set to: 0
 13820  01036A  0E00               	movlw	0
 13821  01036C  0100               	movlb	0	; () banked
 13822  01036E  6F94               	movwf	___flmul@aexp& (0+255),b
 13823                           
 13824                           ; BSR set to: 0
 13825  010370  0100               	movlb	0	; () banked
 13826  010372  AF98               	btfss	(___flmul@grs+3)& (0+255),7,b
 13827  010374  D024               	goto	l2973
 13828                           
 13829                           ; BSR set to: 0
 13830  010376  0EFF               	movlw	255
 13831  010378  0100               	movlb	0	; () banked
 13832  01037A  1595               	andwf	___flmul@grs& (0+255),w,b
 13833  01037C  0100               	movlb	0	; () banked
 13834  01037E  6F8F               	movwf	??___flmul& (0+255),b
 13835  010380  0EFF               	movlw	255
 13836  010382  0100               	movlb	0	; () banked
 13837  010384  1596               	andwf	(___flmul@grs+1)& (0+255),w,b
 13838  010386  0100               	movlb	0	; () banked
 13839  010388  6F90               	movwf	(??___flmul+1)& (0+255),b
 13840  01038A  0EFF               	movlw	255
 13841  01038C  0100               	movlb	0	; () banked
 13842  01038E  1597               	andwf	(___flmul@grs+2)& (0+255),w,b
 13843  010390  0100               	movlb	0	; () banked
 13844  010392  6F91               	movwf	(??___flmul+2)& (0+255),b
 13845  010394  0E7F               	movlw	127
 13846  010396  0100               	movlb	0	; () banked
 13847  010398  1598               	andwf	(___flmul@grs+3)& (0+255),w,b
 13848  01039A  0100               	movlb	0	; () banked
 13849  01039C  6F92               	movwf	(??___flmul+3)& (0+255),b
 13850  01039E  0100               	movlb	0	; () banked
 13851  0103A0  518F               	movf	??___flmul& (0+255),w,b
 13852  0103A2  0100               	movlb	0	; () banked
 13853  0103A4  1190               	iorwf	(??___flmul+1)& (0+255),w,b
 13854  0103A6  0100               	movlb	0	; () banked
 13855  0103A8  1191               	iorwf	(??___flmul+2)& (0+255),w,b
 13856  0103AA  0100               	movlb	0	; () banked
 13857  0103AC  1192               	iorwf	(??___flmul+3)& (0+255),w,b
 13858  0103AE  A4D8               	btfss	status,2,c
 13859  0103B0  D003               	goto	u10570
 13860                           
 13861                           ; BSR set to: 0
 13862                           
 13863                           ; BSR set to: 0
 13864  0103B2  0100               	movlb	0	; () banked
 13865  0103B4  A19A               	btfss	___flmul@prod& (0+255),0,b
 13866  0103B6  D003               	goto	l2973
 13867  0103B8                     u10570:
 13868                           
 13869                           ; BSR set to: 0
 13870  0103B8  0E01               	movlw	1
 13871  0103BA  0100               	movlb	0	; () banked
 13872  0103BC  6F94               	movwf	___flmul@aexp& (0+255),b
 13873  0103BE                     l2973:
 13874                           
 13875                           ; BSR set to: 0
 13876                           
 13877                           ; BSR set to: 0
 13878                           
 13879                           ; BSR set to: 0
 13880  0103BE  0100               	movlb	0	; () banked
 13881  0103C0  5194               	movf	___flmul@aexp& (0+255),w,b
 13882  0103C2  0100               	movlb	0	; () banked
 13883  0103C4  B4D8               	btfsc	status,2,c
 13884  0103C6  D023               	goto	l2975
 13885                           
 13886                           ; BSR set to: 0
 13887  0103C8  0E01               	movlw	1
 13888  0103CA  0100               	movlb	0	; () banked
 13889  0103CC  279A               	addwf	___flmul@prod& (0+255),f,b
 13890  0103CE  0E00               	movlw	0
 13891  0103D0  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 13892  0103D2  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 13893  0103D4  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 13894                           
 13895                           ; BSR set to: 0
 13896  0103D6  0100               	movlb	0	; () banked
 13897  0103D8  A19D               	btfss	(___flmul@prod+3)& (0+255),0,b
 13898  0103DA  D019               	goto	l2975
 13899                           
 13900                           ; BSR set to: 0
 13901  0103DC  C09A  F08F         	movff	___flmul@prod,??___flmul
 13902  0103E0  C09B  F090         	movff	___flmul@prod+1,??___flmul+1
 13903  0103E4  C09C  F091         	movff	___flmul@prod+2,??___flmul+2
 13904  0103E8  C09D  F092         	movff	___flmul@prod+3,??___flmul+3
 13905  0103EC  0100               	movlb	0	; () banked
 13906  0103EE  3592               	rlcf	(??___flmul+3)& (0+255),w,b
 13907  0103F0  3392               	rrcf	(??___flmul+3)& (0+255),f,b
 13908  0103F2  3391               	rrcf	(??___flmul+2)& (0+255),f,b
 13909  0103F4  3390               	rrcf	(??___flmul+1)& (0+255),f,b
 13910  0103F6  338F               	rrcf	??___flmul& (0+255),f,b
 13911  0103F8  C08F  F09A         	movff	??___flmul,___flmul@prod
 13912  0103FC  C090  F09B         	movff	??___flmul+1,___flmul@prod+1
 13913  010400  C091  F09C         	movff	??___flmul+2,___flmul@prod+2
 13914  010404  C092  F09D         	movff	??___flmul+3,___flmul@prod+3
 13915                           
 13916                           ; BSR set to: 0
 13917  010408  0100               	movlb	0	; () banked
 13918  01040A  4B9E               	infsnz	___flmul@temp& (0+255),f,b
 13919  01040C  2B9F               	incf	(___flmul@temp+1)& (0+255),f,b
 13920  01040E                     l2975:
 13921                           
 13922                           ; BSR set to: 0
 13923                           
 13924                           ; BSR set to: 0
 13925                           
 13926                           ; BSR set to: 0
 13927  01040E  0100               	movlb	0	; () banked
 13928  010410  BF9F               	btfsc	(___flmul@temp+1)& (0+255),7,b
 13929  010412  D010               	goto	l2976
 13930  010414  0100               	movlb	0	; () banked
 13931  010416  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 13932  010418  E104               	bnz	u10600
 13933  01041A  0100               	movlb	0	; () banked
 13934  01041C  299E               	incf	___flmul@temp& (0+255),w,b
 13935  01041E  A0D8               	btfss	status,0,c
 13936  010420  D009               	goto	l2976
 13937  010422                     u10600:
 13938                           
 13939                           ; BSR set to: 0
 13940  010422  0E00               	movlw	0
 13941  010424  0100               	movlb	0	; () banked
 13942  010426  6F9A               	movwf	___flmul@prod& (0+255),b
 13943  010428  0E00               	movlw	0
 13944  01042A  6F9B               	movwf	(___flmul@prod+1)& (0+255),b
 13945  01042C  0E80               	movlw	128
 13946  01042E  6F9C               	movwf	(___flmul@prod+2)& (0+255),b
 13947  010430  0E7F               	movlw	127
 13948  010432  D02B               	goto	L5
 13949  010434                     l2976:
 13950                           
 13951                           ; BSR set to: 0
 13952                           
 13953                           ; BSR set to: 0
 13954  010434  0100               	movlb	0	; () banked
 13955  010436  BF9F               	btfsc	(___flmul@temp+1)& (0+255),7,b
 13956  010438  D007               	goto	u10610
 13957  01043A  0100               	movlb	0	; () banked
 13958  01043C  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 13959  01043E  E111               	bnz	l2978
 13960  010440  0100               	movlb	0	; () banked
 13961  010442  059E               	decf	___flmul@temp& (0+255),w,b
 13962  010444  B0D8               	btfsc	status,0,c
 13963  010446  D00D               	goto	l2978
 13964  010448                     u10610:
 13965                           
 13966                           ; BSR set to: 0
 13967  010448  0E00               	movlw	0
 13968  01044A  0100               	movlb	0	; () banked
 13969  01044C  6F9A               	movwf	___flmul@prod& (0+255),b
 13970  01044E  0E00               	movlw	0
 13971  010450  6F9B               	movwf	(___flmul@prod+1)& (0+255),b
 13972  010452  0E00               	movlw	0
 13973  010454  6F9C               	movwf	(___flmul@prod+2)& (0+255),b
 13974  010456  0E00               	movlw	0
 13975  010458  6F9D               	movwf	(___flmul@prod+3)& (0+255),b
 13976  01045A  0E00               	movlw	0
 13977  01045C  0100               	movlb	0	; () banked
 13978  01045E  6F93               	movwf	___flmul@sign& (0+255),b
 13979  010460  D015               	goto	l2979
 13980  010462                     l2978:
 13981                           
 13982                           ; BSR set to: 0
 13983  010462  C09E  F099         	movff	___flmul@temp,___flmul@bexp
 13984                           
 13985                           ; BSR set to: 0
 13986  010466  0EFF               	movlw	255
 13987  010468  0100               	movlb	0	; () banked
 13988  01046A  179A               	andwf	___flmul@prod& (0+255),f,b
 13989  01046C  0EFF               	movlw	255
 13990  01046E  179B               	andwf	(___flmul@prod+1)& (0+255),f,b
 13991  010470  0E7F               	movlw	127
 13992  010472  179C               	andwf	(___flmul@prod+2)& (0+255),f,b
 13993  010474  0E00               	movlw	0
 13994  010476  179D               	andwf	(___flmul@prod+3)& (0+255),f,b
 13995                           
 13996                           ; BSR set to: 0
 13997  010478  0100               	movlb	0	; () banked
 13998  01047A  A199               	btfss	___flmul@bexp& (0+255),0,b
 13999  01047C  D002               	goto	l2980
 14000                           
 14001                           ; BSR set to: 0
 14002  01047E  0100               	movlb	0	; () banked
 14003  010480  8F9C               	bsf	(___flmul@prod+2)& (0+255),7,b
 14004  010482                     l2980:
 14005                           
 14006                           ; BSR set to: 0
 14007                           
 14008                           ; BSR set to: 0
 14009  010482  0100               	movlb	0	; () banked
 14010  010484  90D8               	bcf	status,0,c
 14011  010486  3199               	rrcf	___flmul@bexp& (0+255),w,b
 14012  010488  0100               	movlb	0	; () banked
 14013  01048A                     L5:
 14014  01048A  6F9D               	movwf	(___flmul@prod+3)& (0+255),b
 14015  01048C                     l2979:
 14016                           
 14017                           ; BSR set to: 0
 14018                           
 14019                           ; BSR set to: 0
 14020                           
 14021                           ; BSR set to: 0
 14022  01048C  0100               	movlb	0	; () banked
 14023  01048E  5193               	movf	___flmul@sign& (0+255),w,b
 14024  010490  0100               	movlb	0	; () banked
 14025  010492  139D               	iorwf	(___flmul@prod+3)& (0+255),f,b
 14026                           
 14027                           ; BSR set to: 0
 14028  010494  C09A  F087         	movff	___flmul@prod,?___flmul
 14029  010498  C09B  F088         	movff	___flmul@prod+1,?___flmul+1
 14030  01049C  C09C  F089         	movff	___flmul@prod+2,?___flmul+2
 14031  0104A0  C09D  F08A         	movff	___flmul@prod+3,?___flmul+3
 14032  0104A4  0012               	return	
 14033  0104A6                     __end_of___flmul:
 14034                           	opt stack 0
 14035                           tosu	equ	0xFFF
 14036                           tosh	equ	0xFFE
 14037                           tosl	equ	0xFFD
 14038                           pclath	equ	0xFFA
 14039                           tblptru	equ	0xFF8
 14040                           tblptrh	equ	0xFF7
 14041                           tblptrl	equ	0xFF6
 14042                           tablat	equ	0xFF5
 14043                           prodh	equ	0xFF4
 14044                           prodl	equ	0xFF3
 14045                           intcon	equ	0xFF2
 14046                           postinc0	equ	0xFEE
 14047                           wreg	equ	0xFE8
 14048                           indf1	equ	0xFE7
 14049                           postdec1	equ	0xFE5
 14050                           fsr1h	equ	0xFE2
 14051                           fsr1l	equ	0xFE1
 14052                           indf2	equ	0xFDF
 14053                           postinc2	equ	0xFDE
 14054                           postdec2	equ	0xFDD
 14055                           plusw2	equ	0xFDB
 14056                           fsr2h	equ	0xFDA
 14057                           fsr2l	equ	0xFD9
 14058                           status	equ	0xFD8
 14059                           
 14060 ;; *************** function ___fldiv *****************
 14061 ;; Defined at:
 14062 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcdiv.c"
 14063 ;; Parameters:    Size  Location     Type
 14064 ;;  b               4   14[BANK0 ] unsigned char 
 14065 ;;  a               4   18[BANK0 ] unsigned char 
 14066 ;; Auto vars:     Size  Location     Type
 14067 ;;  grs             4   33[BANK0 ] unsigned long 
 14068 ;;  rem             4   27[BANK0 ] unsigned long 
 14069 ;;  new_exp         2   31[BANK0 ] int 
 14070 ;;  aexp            1   38[BANK0 ] unsigned char 
 14071 ;;  bexp            1   37[BANK0 ] unsigned char 
 14072 ;;  sign            1   26[BANK0 ] unsigned char 
 14073 ;; Return value:  Size  Location     Type
 14074 ;;                  4   14[BANK0 ] unsigned char 
 14075 ;; Registers used:
 14076 ;;		wreg, status,2, status,0
 14077 ;; Tracked objects:
 14078 ;;		On entry : 0/0
 14079 ;;		On exit  : 0/0
 14080 ;;		Unchanged: 0/0
 14081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14082 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14083 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14084 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14085 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14086 ;;Total ram usage:       25 bytes
 14087 ;; Hardware stack levels used:    1
 14088 ;; Hardware stack levels required when called:    7
 14089 ;; This function calls:
 14090 ;;		Nothing
 14091 ;; This function is called by:
 14092 ;;		_ADC_Voltage
 14093 ;;		_mode1
 14094 ;;		_mode4
 14095 ;; This function uses a non-reentrant model
 14096 ;;
 14097                           
 14098                           	psect	text62
 14099  0110A6                     __ptext62:
 14100                           	opt stack 0
 14101  0110A6                     ___fldiv:
 14102                           	opt stack 22
 14103                           
 14104                           ; BSR set to: 0
 14105                           ;incstack = 0
 14106  0110A6  0100               	movlb	0	; () banked
 14107  0110A8  5171               	movf	(___fldiv@b+3)& (0+255),w,b
 14108  0110AA  0B80               	andlw	128
 14109  0110AC  0100               	movlb	0	; () banked
 14110  0110AE  6F7A               	movwf	___fldiv@sign& (0+255),b
 14111  0110B0  0100               	movlb	0	; () banked
 14112  0110B2  5171               	movf	(___fldiv@b+3)& (0+255),w,b
 14113  0110B4  2571               	addwf	(___fldiv@b+3)& (0+255),w,b
 14114  0110B6  0100               	movlb	0	; () banked
 14115  0110B8  6F85               	movwf	___fldiv@bexp& (0+255),b
 14116                           
 14117                           ; BSR set to: 0
 14118  0110BA  0100               	movlb	0	; () banked
 14119  0110BC  AF70               	btfss	(___fldiv@b+2)& (0+255),7,b
 14120  0110BE  D002               	goto	l2920
 14121                           
 14122                           ; BSR set to: 0
 14123  0110C0  0100               	movlb	0	; () banked
 14124  0110C2  8185               	bsf	___fldiv@bexp& (0+255),0,b
 14125  0110C4                     l2920:
 14126                           
 14127                           ; BSR set to: 0
 14128                           
 14129                           ; BSR set to: 0
 14130  0110C4  0100               	movlb	0	; () banked
 14131  0110C6  5185               	movf	___fldiv@bexp& (0+255),w,b
 14132  0110C8  0100               	movlb	0	; () banked
 14133  0110CA  B4D8               	btfsc	status,2,c
 14134  0110CC  D012               	goto	l2921
 14135                           
 14136                           ; BSR set to: 0
 14137  0110CE  0100               	movlb	0	; () banked
 14138  0110D0  2985               	incf	___fldiv@bexp& (0+255),w,b
 14139  0110D2  A4D8               	btfss	status,2,c
 14140  0110D4  D009               	goto	l2922
 14141                           
 14142                           ; BSR set to: 0
 14143  0110D6  0E00               	movlw	0
 14144  0110D8  0100               	movlb	0	; () banked
 14145  0110DA  6F6E               	movwf	___fldiv@b& (0+255),b
 14146  0110DC  0E00               	movlw	0
 14147  0110DE  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 14148  0110E0  0E00               	movlw	0
 14149  0110E2  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 14150  0110E4  0E00               	movlw	0
 14151  0110E6  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 14152  0110E8                     l2922:
 14153                           
 14154                           ; BSR set to: 0
 14155                           
 14156                           ; BSR set to: 0
 14157  0110E8  0100               	movlb	0	; () banked
 14158  0110EA  8F70               	bsf	(___fldiv@b+2)& (0+255),7,b
 14159                           
 14160                           ; BSR set to: 0
 14161  0110EC  0E00               	movlw	0
 14162  0110EE  0100               	movlb	0	; () banked
 14163  0110F0  D008               	goto	L6
 14164  0110F2                     l2921:
 14165                           
 14166                           ; BSR set to: 0
 14167                           
 14168                           ; BSR set to: 0
 14169  0110F2  0E00               	movlw	0
 14170  0110F4  0100               	movlb	0	; () banked
 14171  0110F6  6F6E               	movwf	___fldiv@b& (0+255),b
 14172  0110F8  0E00               	movlw	0
 14173  0110FA  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 14174  0110FC  0E00               	movlw	0
 14175  0110FE  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 14176  011100  0E00               	movlw	0
 14177  011102                     L6:
 14178  011102  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 14179                           
 14180                           ; BSR set to: 0
 14181                           
 14182                           ; BSR set to: 0
 14183  011104  0100               	movlb	0	; () banked
 14184  011106  5175               	movf	(___fldiv@a+3)& (0+255),w,b
 14185  011108  0B80               	andlw	128
 14186  01110A  0100               	movlb	0	; () banked
 14187  01110C  1B7A               	xorwf	___fldiv@sign& (0+255),f,b
 14188                           
 14189                           ; BSR set to: 0
 14190  01110E  0100               	movlb	0	; () banked
 14191  011110  5175               	movf	(___fldiv@a+3)& (0+255),w,b
 14192  011112  2575               	addwf	(___fldiv@a+3)& (0+255),w,b
 14193  011114  0100               	movlb	0	; () banked
 14194  011116  6F86               	movwf	___fldiv@aexp& (0+255),b
 14195                           
 14196                           ; BSR set to: 0
 14197  011118  0100               	movlb	0	; () banked
 14198  01111A  AF74               	btfss	(___fldiv@a+2)& (0+255),7,b
 14199  01111C  D002               	goto	l2924
 14200                           
 14201                           ; BSR set to: 0
 14202  01111E  0100               	movlb	0	; () banked
 14203  011120  8186               	bsf	___fldiv@aexp& (0+255),0,b
 14204  011122                     l2924:
 14205                           
 14206                           ; BSR set to: 0
 14207                           
 14208                           ; BSR set to: 0
 14209  011122  0100               	movlb	0	; () banked
 14210  011124  5186               	movf	___fldiv@aexp& (0+255),w,b
 14211  011126  0100               	movlb	0	; () banked
 14212  011128  B4D8               	btfsc	status,2,c
 14213  01112A  D012               	goto	l2925
 14214                           
 14215                           ; BSR set to: 0
 14216  01112C  0100               	movlb	0	; () banked
 14217  01112E  2986               	incf	___fldiv@aexp& (0+255),w,b
 14218  011130  A4D8               	btfss	status,2,c
 14219  011132  D009               	goto	l2926
 14220                           
 14221                           ; BSR set to: 0
 14222  011134  0E00               	movlw	0
 14223  011136  0100               	movlb	0	; () banked
 14224  011138  6F72               	movwf	___fldiv@a& (0+255),b
 14225  01113A  0E00               	movlw	0
 14226  01113C  6F73               	movwf	(___fldiv@a+1)& (0+255),b
 14227  01113E  0E00               	movlw	0
 14228  011140  6F74               	movwf	(___fldiv@a+2)& (0+255),b
 14229  011142  0E00               	movlw	0
 14230  011144  6F75               	movwf	(___fldiv@a+3)& (0+255),b
 14231  011146                     l2926:
 14232                           
 14233                           ; BSR set to: 0
 14234                           
 14235                           ; BSR set to: 0
 14236  011146  0100               	movlb	0	; () banked
 14237  011148  8F74               	bsf	(___fldiv@a+2)& (0+255),7,b
 14238                           
 14239                           ; BSR set to: 0
 14240  01114A  0E00               	movlw	0
 14241  01114C  0100               	movlb	0	; () banked
 14242  01114E  D008               	goto	L7
 14243  011150                     l2925:
 14244                           
 14245                           ; BSR set to: 0
 14246                           
 14247                           ; BSR set to: 0
 14248  011150  0E00               	movlw	0
 14249  011152  0100               	movlb	0	; () banked
 14250  011154  6F72               	movwf	___fldiv@a& (0+255),b
 14251  011156  0E00               	movlw	0
 14252  011158  6F73               	movwf	(___fldiv@a+1)& (0+255),b
 14253  01115A  0E00               	movlw	0
 14254  01115C  6F74               	movwf	(___fldiv@a+2)& (0+255),b
 14255  01115E  0E00               	movlw	0
 14256  011160                     L7:
 14257  011160  6F75               	movwf	(___fldiv@a+3)& (0+255),b
 14258                           
 14259                           ; BSR set to: 0
 14260                           
 14261                           ; BSR set to: 0
 14262  011162  0100               	movlb	0	; () banked
 14263  011164  5172               	movf	___fldiv@a& (0+255),w,b
 14264  011166  0100               	movlb	0	; () banked
 14265  011168  1173               	iorwf	(___fldiv@a+1)& (0+255),w,b
 14266  01116A  0100               	movlb	0	; () banked
 14267  01116C  1174               	iorwf	(___fldiv@a+2)& (0+255),w,b
 14268  01116E  0100               	movlb	0	; () banked
 14269  011170  1175               	iorwf	(___fldiv@a+3)& (0+255),w,b
 14270  011172  A4D8               	btfss	status,2,c
 14271  011174  D017               	goto	l2928
 14272                           
 14273                           ; BSR set to: 0
 14274  011176  0E00               	movlw	0
 14275  011178  0100               	movlb	0	; () banked
 14276  01117A  6F6E               	movwf	___fldiv@b& (0+255),b
 14277  01117C  0E00               	movlw	0
 14278  01117E  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 14279  011180  0E00               	movlw	0
 14280  011182  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 14281  011184  0E00               	movlw	0
 14282  011186  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 14283                           
 14284                           ; BSR set to: 0
 14285  011188  0100               	movlb	0	; () banked
 14286  01118A  0E80               	movlw	128
 14287  01118C  1370               	iorwf	(___fldiv@b+2)& (0+255),f,b
 14288  01118E  0E7F               	movlw	127
 14289  011190  1371               	iorwf	(___fldiv@b+3)& (0+255),f,b
 14290                           
 14291                           ; BSR set to: 0
 14292  011192  C06E  F06E         	movff	___fldiv@b,?___fldiv
 14293  011196  C06F  F06F         	movff	___fldiv@b+1,?___fldiv+1
 14294  01119A  C070  F070         	movff	___fldiv@b+2,?___fldiv+2
 14295  01119E  C071  F071         	movff	___fldiv@b+3,?___fldiv+3
 14296                           
 14297                           ; BSR set to: 0
 14298  0111A2  0012               	return	
 14299  0111A4                     l2928:
 14300                           
 14301                           ; BSR set to: 0
 14302                           
 14303                           ; BSR set to: 0
 14304  0111A4  0100               	movlb	0	; () banked
 14305  0111A6  5185               	movf	___fldiv@bexp& (0+255),w,b
 14306  0111A8  0100               	movlb	0	; () banked
 14307  0111AA  A4D8               	btfss	status,2,c
 14308  0111AC  D012               	goto	l2930
 14309                           
 14310                           ; BSR set to: 0
 14311  0111AE  0E00               	movlw	0
 14312  0111B0  0100               	movlb	0	; () banked
 14313  0111B2  6F6E               	movwf	___fldiv@b& (0+255),b
 14314  0111B4  0E00               	movlw	0
 14315  0111B6  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 14316  0111B8  0E00               	movlw	0
 14317  0111BA  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 14318  0111BC  0E00               	movlw	0
 14319  0111BE  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 14320                           
 14321                           ; BSR set to: 0
 14322  0111C0  C06E  F06E         	movff	___fldiv@b,?___fldiv
 14323  0111C4  C06F  F06F         	movff	___fldiv@b+1,?___fldiv+1
 14324  0111C8  C070  F070         	movff	___fldiv@b+2,?___fldiv+2
 14325  0111CC  C071  F071         	movff	___fldiv@b+3,?___fldiv+3
 14326                           
 14327                           ; BSR set to: 0
 14328  0111D0  0012               	return	
 14329  0111D2                     l2930:
 14330                           
 14331                           ; BSR set to: 0
 14332                           
 14333                           ; BSR set to: 0
 14334  0111D2  0100               	movlb	0	; () banked
 14335  0111D4  5186               	movf	___fldiv@aexp& (0+255),w,b
 14336  0111D6  0100               	movlb	0	; () banked
 14337  0111D8  6F76               	movwf	??___fldiv& (0+255),b
 14338  0111DA  6B77               	clrf	(??___fldiv+1)& (0+255),b
 14339  0111DC  0100               	movlb	0	; () banked
 14340  0111DE  1F76               	comf	??___fldiv& (0+255),f,b
 14341  0111E0  1F77               	comf	(??___fldiv+1)& (0+255),f,b
 14342  0111E2  4B76               	infsnz	??___fldiv& (0+255),f,b
 14343  0111E4  2B77               	incf	(??___fldiv+1)& (0+255),f,b
 14344  0111E6  0100               	movlb	0	; () banked
 14345  0111E8  5185               	movf	___fldiv@bexp& (0+255),w,b
 14346  0111EA  0100               	movlb	0	; () banked
 14347  0111EC  6F78               	movwf	(??___fldiv+2)& (0+255),b
 14348  0111EE  6B79               	clrf	(??___fldiv+3)& (0+255),b
 14349  0111F0  0100               	movlb	0	; () banked
 14350  0111F2  5176               	movf	??___fldiv& (0+255),w,b
 14351  0111F4  0100               	movlb	0	; () banked
 14352  0111F6  2778               	addwf	(??___fldiv+2)& (0+255),f,b
 14353  0111F8  0100               	movlb	0	; () banked
 14354  0111FA  5177               	movf	(??___fldiv+1)& (0+255),w,b
 14355  0111FC  0100               	movlb	0	; () banked
 14356  0111FE  2379               	addwfc	(??___fldiv+3)& (0+255),f,b
 14357  011200  0E7F               	movlw	127
 14358  011202  0100               	movlb	0	; () banked
 14359  011204  2578               	addwf	(??___fldiv+2)& (0+255),w,b
 14360  011206  0100               	movlb	0	; () banked
 14361  011208  6F7F               	movwf	___fldiv@new_exp& (0+255),b
 14362  01120A  0E00               	movlw	0
 14363  01120C  0100               	movlb	0	; () banked
 14364  01120E  2179               	addwfc	(??___fldiv+3)& (0+255),w,b
 14365  011210  0100               	movlb	0	; () banked
 14366  011212  6F80               	movwf	(___fldiv@new_exp+1)& (0+255),b
 14367                           
 14368                           ; BSR set to: 0
 14369  011214  C06E  F07B         	movff	___fldiv@b,___fldiv@rem
 14370  011218  C06F  F07C         	movff	___fldiv@b+1,___fldiv@rem+1
 14371  01121C  C070  F07D         	movff	___fldiv@b+2,___fldiv@rem+2
 14372  011220  C071  F07E         	movff	___fldiv@b+3,___fldiv@rem+3
 14373                           
 14374                           ; BSR set to: 0
 14375  011224  0E00               	movlw	0
 14376  011226  0100               	movlb	0	; () banked
 14377  011228  6F6E               	movwf	___fldiv@b& (0+255),b
 14378  01122A  0E00               	movlw	0
 14379  01122C  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 14380  01122E  0E00               	movlw	0
 14381  011230  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 14382  011232  0E00               	movlw	0
 14383  011234  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 14384                           
 14385                           ; BSR set to: 0
 14386  011236  0E00               	movlw	0
 14387  011238  0100               	movlb	0	; () banked
 14388  01123A  6F81               	movwf	___fldiv@grs& (0+255),b
 14389  01123C  0E00               	movlw	0
 14390  01123E  6F82               	movwf	(___fldiv@grs+1)& (0+255),b
 14391  011240  0E00               	movlw	0
 14392  011242  6F83               	movwf	(___fldiv@grs+2)& (0+255),b
 14393  011244  0E00               	movlw	0
 14394  011246  6F84               	movwf	(___fldiv@grs+3)& (0+255),b
 14395                           
 14396                           ; BSR set to: 0
 14397  011248  0E00               	movlw	0
 14398  01124A  0100               	movlb	0	; () banked
 14399  01124C  6F86               	movwf	___fldiv@aexp& (0+255),b
 14400  01124E  D042               	goto	l2931
 14401  011250                     
 14402                           ; BSR set to: 0
 14403                           
 14404                           ; BSR set to: 0
 14405  011250  0100               	movlb	0	; () banked
 14406  011252  5186               	movf	___fldiv@aexp& (0+255),w,b
 14407  011254  0100               	movlb	0	; () banked
 14408  011256  B4D8               	btfsc	status,2,c
 14409  011258  D017               	goto	l2933
 14410                           
 14411                           ; BSR set to: 0
 14412  01125A  0100               	movlb	0	; () banked
 14413  01125C  90D8               	bcf	status,0,c
 14414  01125E  377B               	rlcf	___fldiv@rem& (0+255),f,b
 14415  011260  377C               	rlcf	(___fldiv@rem+1)& (0+255),f,b
 14416  011262  377D               	rlcf	(___fldiv@rem+2)& (0+255),f,b
 14417  011264  377E               	rlcf	(___fldiv@rem+3)& (0+255),f,b
 14418  011266  0100               	movlb	0	; () banked
 14419  011268  90D8               	bcf	status,0,c
 14420  01126A  376E               	rlcf	___fldiv@b& (0+255),f,b
 14421  01126C  376F               	rlcf	(___fldiv@b+1)& (0+255),f,b
 14422  01126E  3770               	rlcf	(___fldiv@b+2)& (0+255),f,b
 14423  011270  3771               	rlcf	(___fldiv@b+3)& (0+255),f,b
 14424                           
 14425                           ; BSR set to: 0
 14426  011272  0100               	movlb	0	; () banked
 14427  011274  AF84               	btfss	(___fldiv@grs+3)& (0+255),7,b
 14428  011276  D002               	goto	l2934
 14429                           
 14430                           ; BSR set to: 0
 14431  011278  0100               	movlb	0	; () banked
 14432  01127A  816E               	bsf	___fldiv@b& (0+255),0,b
 14433  01127C                     l2934:
 14434                           
 14435                           ; BSR set to: 0
 14436  01127C  0100               	movlb	0	; () banked
 14437  01127E  90D8               	bcf	status,0,c
 14438  011280  3781               	rlcf	___fldiv@grs& (0+255),f,b
 14439  011282  3782               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 14440  011284  3783               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 14441  011286  3784               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 14442  011288                     l2933:
 14443                           
 14444                           ; BSR set to: 0
 14445                           
 14446                           ; BSR set to: 0
 14447  011288  0100               	movlb	0	; () banked
 14448  01128A  5172               	movf	___fldiv@a& (0+255),w,b
 14449  01128C  0100               	movlb	0	; () banked
 14450  01128E  5D7B               	subwf	___fldiv@rem& (0+255),w,b
 14451  011290  0100               	movlb	0	; () banked
 14452  011292  5173               	movf	(___fldiv@a+1)& (0+255),w,b
 14453  011294  0100               	movlb	0	; () banked
 14454  011296  597C               	subwfb	(___fldiv@rem+1)& (0+255),w,b
 14455  011298  0100               	movlb	0	; () banked
 14456  01129A  5174               	movf	(___fldiv@a+2)& (0+255),w,b
 14457  01129C  0100               	movlb	0	; () banked
 14458  01129E  597D               	subwfb	(___fldiv@rem+2)& (0+255),w,b
 14459  0112A0  0100               	movlb	0	; () banked
 14460  0112A2  5175               	movf	(___fldiv@a+3)& (0+255),w,b
 14461  0112A4  0100               	movlb	0	; () banked
 14462  0112A6  597E               	subwfb	(___fldiv@rem+3)& (0+255),w,b
 14463  0112A8  A0D8               	btfss	status,0,c
 14464  0112AA  D012               	goto	l2935
 14465                           
 14466                           ; BSR set to: 0
 14467  0112AC  0100               	movlb	0	; () banked
 14468  0112AE  8D84               	bsf	(___fldiv@grs+3)& (0+255),6,b
 14469                           
 14470                           ; BSR set to: 0
 14471  0112B0  0100               	movlb	0	; () banked
 14472  0112B2  5172               	movf	___fldiv@a& (0+255),w,b
 14473  0112B4  0100               	movlb	0	; () banked
 14474  0112B6  5F7B               	subwf	___fldiv@rem& (0+255),f,b
 14475  0112B8  0100               	movlb	0	; () banked
 14476  0112BA  5173               	movf	(___fldiv@a+1)& (0+255),w,b
 14477  0112BC  0100               	movlb	0	; () banked
 14478  0112BE  5B7C               	subwfb	(___fldiv@rem+1)& (0+255),f,b
 14479  0112C0  0100               	movlb	0	; () banked
 14480  0112C2  5174               	movf	(___fldiv@a+2)& (0+255),w,b
 14481  0112C4  0100               	movlb	0	; () banked
 14482  0112C6  5B7D               	subwfb	(___fldiv@rem+2)& (0+255),f,b
 14483  0112C8  0100               	movlb	0	; () banked
 14484  0112CA  5175               	movf	(___fldiv@a+3)& (0+255),w,b
 14485  0112CC  0100               	movlb	0	; () banked
 14486  0112CE  5B7E               	subwfb	(___fldiv@rem+3)& (0+255),f,b
 14487  0112D0                     l2935:
 14488                           
 14489                           ; BSR set to: 0
 14490                           
 14491                           ; BSR set to: 0
 14492  0112D0  0100               	movlb	0	; () banked
 14493  0112D2  2B86               	incf	___fldiv@aexp& (0+255),f,b
 14494  0112D4                     l2931:
 14495                           
 14496                           ; BSR set to: 0
 14497  0112D4  0E19               	movlw	25
 14498  0112D6  0100               	movlb	0	; () banked
 14499  0112D8  6586               	cpfsgt	___fldiv@aexp& (0+255),b
 14500  0112DA  D7BA               	goto	l2932
 14501                           
 14502                           ; BSR set to: 0
 14503                           
 14504                           ; BSR set to: 0
 14505  0112DC  0100               	movlb	0	; () banked
 14506  0112DE  517B               	movf	___fldiv@rem& (0+255),w,b
 14507  0112E0  0100               	movlb	0	; () banked
 14508  0112E2  117C               	iorwf	(___fldiv@rem+1)& (0+255),w,b
 14509  0112E4  0100               	movlb	0	; () banked
 14510  0112E6  117D               	iorwf	(___fldiv@rem+2)& (0+255),w,b
 14511  0112E8  0100               	movlb	0	; () banked
 14512  0112EA  117E               	iorwf	(___fldiv@rem+3)& (0+255),w,b
 14513  0112EC  B4D8               	btfsc	status,2,c
 14514  0112EE  D018               	goto	l2938
 14515                           
 14516                           ; BSR set to: 0
 14517  0112F0  0100               	movlb	0	; () banked
 14518  0112F2  8181               	bsf	___fldiv@grs& (0+255),0,b
 14519                           
 14520                           ; BSR set to: 0
 14521  0112F4  D015               	goto	l2938
 14522  0112F6                     
 14523                           ; BSR set to: 0
 14524                           
 14525                           ; BSR set to: 0
 14526  0112F6  0100               	movlb	0	; () banked
 14527  0112F8  90D8               	bcf	status,0,c
 14528  0112FA  376E               	rlcf	___fldiv@b& (0+255),f,b
 14529  0112FC  376F               	rlcf	(___fldiv@b+1)& (0+255),f,b
 14530  0112FE  3770               	rlcf	(___fldiv@b+2)& (0+255),f,b
 14531  011300  3771               	rlcf	(___fldiv@b+3)& (0+255),f,b
 14532                           
 14533                           ; BSR set to: 0
 14534  011302  0100               	movlb	0	; () banked
 14535  011304  AF84               	btfss	(___fldiv@grs+3)& (0+255),7,b
 14536  011306  D002               	goto	l2940
 14537                           
 14538                           ; BSR set to: 0
 14539  011308  0100               	movlb	0	; () banked
 14540  01130A  816E               	bsf	___fldiv@b& (0+255),0,b
 14541  01130C                     l2940:
 14542                           
 14543                           ; BSR set to: 0
 14544  01130C  0100               	movlb	0	; () banked
 14545  01130E  90D8               	bcf	status,0,c
 14546  011310  3781               	rlcf	___fldiv@grs& (0+255),f,b
 14547  011312  3782               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 14548  011314  3783               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 14549  011316  3784               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 14550  011318  0100               	movlb	0	; () banked
 14551  01131A  077F               	decf	___fldiv@new_exp& (0+255),f,b
 14552  01131C  A0D8               	btfss	status,0,c
 14553  01131E  0780               	decf	(___fldiv@new_exp+1)& (0+255),f,b
 14554  011320                     l2938:
 14555                           
 14556                           ; BSR set to: 0
 14557                           
 14558                           ; BSR set to: 0
 14559  011320  0100               	movlb	0	; () banked
 14560  011322  AF70               	btfss	(___fldiv@b+2)& (0+255),7,b
 14561  011324  D7E8               	goto	l2939
 14562                           
 14563                           ; BSR set to: 0
 14564                           
 14565                           ; BSR set to: 0
 14566  011326  0E00               	movlw	0
 14567  011328  0100               	movlb	0	; () banked
 14568  01132A  6F86               	movwf	___fldiv@aexp& (0+255),b
 14569                           
 14570                           ; BSR set to: 0
 14571  01132C  0100               	movlb	0	; () banked
 14572  01132E  AF84               	btfss	(___fldiv@grs+3)& (0+255),7,b
 14573  011330  D024               	goto	l2945
 14574                           
 14575                           ; BSR set to: 0
 14576  011332  0EFF               	movlw	255
 14577  011334  0100               	movlb	0	; () banked
 14578  011336  1581               	andwf	___fldiv@grs& (0+255),w,b
 14579  011338  0100               	movlb	0	; () banked
 14580  01133A  6F76               	movwf	??___fldiv& (0+255),b
 14581  01133C  0EFF               	movlw	255
 14582  01133E  0100               	movlb	0	; () banked
 14583  011340  1582               	andwf	(___fldiv@grs+1)& (0+255),w,b
 14584  011342  0100               	movlb	0	; () banked
 14585  011344  6F77               	movwf	(??___fldiv+1)& (0+255),b
 14586  011346  0EFF               	movlw	255
 14587  011348  0100               	movlb	0	; () banked
 14588  01134A  1583               	andwf	(___fldiv@grs+2)& (0+255),w,b
 14589  01134C  0100               	movlb	0	; () banked
 14590  01134E  6F78               	movwf	(??___fldiv+2)& (0+255),b
 14591  011350  0E7F               	movlw	127
 14592  011352  0100               	movlb	0	; () banked
 14593  011354  1584               	andwf	(___fldiv@grs+3)& (0+255),w,b
 14594  011356  0100               	movlb	0	; () banked
 14595  011358  6F79               	movwf	(??___fldiv+3)& (0+255),b
 14596  01135A  0100               	movlb	0	; () banked
 14597  01135C  5176               	movf	??___fldiv& (0+255),w,b
 14598  01135E  0100               	movlb	0	; () banked
 14599  011360  1177               	iorwf	(??___fldiv+1)& (0+255),w,b
 14600  011362  0100               	movlb	0	; () banked
 14601  011364  1178               	iorwf	(??___fldiv+2)& (0+255),w,b
 14602  011366  0100               	movlb	0	; () banked
 14603  011368  1179               	iorwf	(??___fldiv+3)& (0+255),w,b
 14604  01136A  A4D8               	btfss	status,2,c
 14605  01136C  D003               	goto	u10380
 14606                           
 14607                           ; BSR set to: 0
 14608                           
 14609                           ; BSR set to: 0
 14610  01136E  0100               	movlb	0	; () banked
 14611  011370  A16E               	btfss	___fldiv@b& (0+255),0,b
 14612  011372  D003               	goto	l2945
 14613  011374                     u10380:
 14614                           
 14615                           ; BSR set to: 0
 14616  011374  0E01               	movlw	1
 14617  011376  0100               	movlb	0	; () banked
 14618  011378  6F86               	movwf	___fldiv@aexp& (0+255),b
 14619  01137A                     l2945:
 14620                           
 14621                           ; BSR set to: 0
 14622                           
 14623                           ; BSR set to: 0
 14624                           
 14625                           ; BSR set to: 0
 14626  01137A  0100               	movlb	0	; () banked
 14627  01137C  5186               	movf	___fldiv@aexp& (0+255),w,b
 14628  01137E  0100               	movlb	0	; () banked
 14629  011380  B4D8               	btfsc	status,2,c
 14630  011382  D023               	goto	l2947
 14631                           
 14632                           ; BSR set to: 0
 14633  011384  0E01               	movlw	1
 14634  011386  0100               	movlb	0	; () banked
 14635  011388  276E               	addwf	___fldiv@b& (0+255),f,b
 14636  01138A  0E00               	movlw	0
 14637  01138C  236F               	addwfc	(___fldiv@b+1)& (0+255),f,b
 14638  01138E  2370               	addwfc	(___fldiv@b+2)& (0+255),f,b
 14639  011390  2371               	addwfc	(___fldiv@b+3)& (0+255),f,b
 14640                           
 14641                           ; BSR set to: 0
 14642  011392  0100               	movlb	0	; () banked
 14643  011394  A171               	btfss	(___fldiv@b+3)& (0+255),0,b
 14644  011396  D019               	goto	l2947
 14645                           
 14646                           ; BSR set to: 0
 14647  011398  C06E  F076         	movff	___fldiv@b,??___fldiv
 14648  01139C  C06F  F077         	movff	___fldiv@b+1,??___fldiv+1
 14649  0113A0  C070  F078         	movff	___fldiv@b+2,??___fldiv+2
 14650  0113A4  C071  F079         	movff	___fldiv@b+3,??___fldiv+3
 14651  0113A8  0100               	movlb	0	; () banked
 14652  0113AA  3579               	rlcf	(??___fldiv+3)& (0+255),w,b
 14653  0113AC  3379               	rrcf	(??___fldiv+3)& (0+255),f,b
 14654  0113AE  3378               	rrcf	(??___fldiv+2)& (0+255),f,b
 14655  0113B0  3377               	rrcf	(??___fldiv+1)& (0+255),f,b
 14656  0113B2  3376               	rrcf	??___fldiv& (0+255),f,b
 14657  0113B4  C076  F06E         	movff	??___fldiv,___fldiv@b
 14658  0113B8  C077  F06F         	movff	??___fldiv+1,___fldiv@b+1
 14659  0113BC  C078  F070         	movff	??___fldiv+2,___fldiv@b+2
 14660  0113C0  C079  F071         	movff	??___fldiv+3,___fldiv@b+3
 14661                           
 14662                           ; BSR set to: 0
 14663  0113C4  0100               	movlb	0	; () banked
 14664  0113C6  4B7F               	infsnz	___fldiv@new_exp& (0+255),f,b
 14665  0113C8  2B80               	incf	(___fldiv@new_exp+1)& (0+255),f,b
 14666  0113CA                     l2947:
 14667                           
 14668                           ; BSR set to: 0
 14669                           
 14670                           ; BSR set to: 0
 14671                           
 14672                           ; BSR set to: 0
 14673  0113CA  0100               	movlb	0	; () banked
 14674  0113CC  BF80               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 14675  0113CE  D014               	goto	l2948
 14676  0113D0  0100               	movlb	0	; () banked
 14677  0113D2  5180               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 14678  0113D4  E104               	bnz	u10410
 14679  0113D6  0100               	movlb	0	; () banked
 14680  0113D8  297F               	incf	___fldiv@new_exp& (0+255),w,b
 14681  0113DA  A0D8               	btfss	status,0,c
 14682  0113DC  D00D               	goto	l2948
 14683  0113DE                     u10410:
 14684                           
 14685                           ; BSR set to: 0
 14686  0113DE  0E00               	movlw	0
 14687  0113E0  0100               	movlb	0	; () banked
 14688  0113E2  6F80               	movwf	(___fldiv@new_exp+1)& (0+255),b
 14689  0113E4  697F               	setf	___fldiv@new_exp& (0+255),b
 14690  0113E6  0E00               	movlw	0
 14691  0113E8  0100               	movlb	0	; () banked
 14692  0113EA  6F6E               	movwf	___fldiv@b& (0+255),b
 14693  0113EC  0E00               	movlw	0
 14694  0113EE  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 14695  0113F0  0E00               	movlw	0
 14696  0113F2  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 14697  0113F4  0E00               	movlw	0
 14698  0113F6  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 14699  0113F8                     l2948:
 14700                           
 14701                           ; BSR set to: 0
 14702                           
 14703                           ; BSR set to: 0
 14704  0113F8  0100               	movlb	0	; () banked
 14705  0113FA  BF80               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 14706  0113FC  D007               	goto	u10420
 14707  0113FE  0100               	movlb	0	; () banked
 14708  011400  5180               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 14709  011402  E115               	bnz	l13789
 14710  011404  0100               	movlb	0	; () banked
 14711  011406  057F               	decf	___fldiv@new_exp& (0+255),w,b
 14712  011408  B0D8               	btfsc	status,0,c
 14713  01140A  D011               	goto	l2949
 14714  01140C                     u10420:
 14715                           
 14716                           ; BSR set to: 0
 14717  01140C  0E00               	movlw	0
 14718  01140E  0100               	movlb	0	; () banked
 14719  011410  6F80               	movwf	(___fldiv@new_exp+1)& (0+255),b
 14720  011412  0E00               	movlw	0
 14721  011414  6F7F               	movwf	___fldiv@new_exp& (0+255),b
 14722  011416  0E00               	movlw	0
 14723  011418  0100               	movlb	0	; () banked
 14724  01141A  6F6E               	movwf	___fldiv@b& (0+255),b
 14725  01141C  0E00               	movlw	0
 14726  01141E  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 14727  011420  0E00               	movlw	0
 14728  011422  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 14729  011424  0E00               	movlw	0
 14730  011426  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 14731  011428  0E00               	movlw	0
 14732  01142A  0100               	movlb	0	; () banked
 14733  01142C  6F7A               	movwf	___fldiv@sign& (0+255),b
 14734  01142E                     l2949:
 14735  01142E                     l13789:
 14736                           
 14737                           ; BSR set to: 0
 14738  01142E  C07F  F085         	movff	___fldiv@new_exp,___fldiv@bexp
 14739                           
 14740                           ; BSR set to: 0
 14741  011432  0100               	movlb	0	; () banked
 14742  011434  A185               	btfss	___fldiv@bexp& (0+255),0,b
 14743  011436  D003               	goto	l2950
 14744                           
 14745                           ; BSR set to: 0
 14746  011438  0100               	movlb	0	; () banked
 14747  01143A  8F70               	bsf	(___fldiv@b+2)& (0+255),7,b
 14748  01143C  D002               	goto	l2951
 14749  01143E                     l2950:
 14750                           
 14751                           ; BSR set to: 0
 14752                           
 14753                           ; BSR set to: 0
 14754  01143E  0100               	movlb	0	; () banked
 14755  011440  9F70               	bcf	(___fldiv@b+2)& (0+255),7,b
 14756  011442                     l2951:
 14757                           
 14758                           ; BSR set to: 0
 14759                           
 14760                           ; BSR set to: 0
 14761  011442  0100               	movlb	0	; () banked
 14762  011444  90D8               	bcf	status,0,c
 14763  011446  3185               	rrcf	___fldiv@bexp& (0+255),w,b
 14764  011448  0100               	movlb	0	; () banked
 14765  01144A  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 14766                           
 14767                           ; BSR set to: 0
 14768  01144C  0100               	movlb	0	; () banked
 14769  01144E  517A               	movf	___fldiv@sign& (0+255),w,b
 14770  011450  0100               	movlb	0	; () banked
 14771  011452  1371               	iorwf	(___fldiv@b+3)& (0+255),f,b
 14772                           
 14773                           ; BSR set to: 0
 14774  011454  C06E  F06E         	movff	___fldiv@b,?___fldiv
 14775  011458  C06F  F06F         	movff	___fldiv@b+1,?___fldiv+1
 14776  01145C  C070  F070         	movff	___fldiv@b+2,?___fldiv+2
 14777  011460  C071  F071         	movff	___fldiv@b+3,?___fldiv+3
 14778  011464  0012               	return	
 14779  011466                     __end_of___fldiv:
 14780                           	opt stack 0
 14781                           tosu	equ	0xFFF
 14782                           tosh	equ	0xFFE
 14783                           tosl	equ	0xFFD
 14784                           pclath	equ	0xFFA
 14785                           tblptru	equ	0xFF8
 14786                           tblptrh	equ	0xFF7
 14787                           tblptrl	equ	0xFF6
 14788                           tablat	equ	0xFF5
 14789                           prodh	equ	0xFF4
 14790                           prodl	equ	0xFF3
 14791                           intcon	equ	0xFF2
 14792                           postinc0	equ	0xFEE
 14793                           wreg	equ	0xFE8
 14794                           indf1	equ	0xFE7
 14795                           postdec1	equ	0xFE5
 14796                           fsr1h	equ	0xFE2
 14797                           fsr1l	equ	0xFE1
 14798                           indf2	equ	0xFDF
 14799                           postinc2	equ	0xFDE
 14800                           postdec2	equ	0xFDD
 14801                           plusw2	equ	0xFDB
 14802                           fsr2h	equ	0xFDA
 14803                           fsr2l	equ	0xFD9
 14804                           status	equ	0xFD8
 14805                           
 14806 ;; *************** function _init *****************
 14807 ;; Defined at:
 14808 ;;		line 61 in file "main.c"
 14809 ;; Parameters:    Size  Location     Type
 14810 ;;		None
 14811 ;; Auto vars:     Size  Location     Type
 14812 ;;		None
 14813 ;; Return value:  Size  Location     Type
 14814 ;;                  1    wreg      void 
 14815 ;; Registers used:
 14816 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 14817 ;; Tracked objects:
 14818 ;;		On entry : 0/0
 14819 ;;		On exit  : 0/0
 14820 ;;		Unchanged: 0/0
 14821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14825 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14826 ;;Total ram usage:        0 bytes
 14827 ;; Hardware stack levels used:    1
 14828 ;; Hardware stack levels required when called:   17
 14829 ;; This function calls:
 14830 ;;		_ADC_Init
 14831 ;;		_ADC_Start
 14832 ;;		_Console_Init
 14833 ;;		_HMI_Init
 14834 ;;		_ISR_Enable
 14835 ;;		_LCD_Init
 14836 ;;		_MXK_BlockSwitchTo
 14837 ;;		_MXK_Dequeue
 14838 ;;		_MXK_Init
 14839 ;;		_MXK_Release
 14840 ;;		_Motor_Init
 14841 ;;		_delay_ms
 14842 ;;		_eusart_init
 14843 ;;		_irobot_init
 14844 ;;		_irobot_init_song_0
 14845 ;;		_irobot_led_power_on
 14846 ;; This function is called by:
 14847 ;;		_main
 14848 ;; This function uses a non-reentrant model
 14849 ;;
 14850                           
 14851                           	psect	text63
 14852  0145B0                     __ptext63:
 14853                           	opt stack 0
 14854  0145B0                     _init:
 14855                           	opt stack 13
 14856                           
 14857                           ;main.c: 63: MXK_Init();
 14858                           
 14859                           ; BSR set to: 0
 14860                           ;incstack = 0
 14861  0145B0  EC9A  F096         	call	_MXK_Init	;wreg free
 14862                           
 14863                           ;main.c: 66: ISR_Enable();
 14864  0145B4  EC95  F0B2         	call	_ISR_Enable	;wreg free
 14865                           
 14866                           ;main.c: 69: if (MXK_BlockSwitchTo(eMXK_HMI)) {
 14867  0145B8  0E01               	movlw	1
 14868  0145BA  ECED  F0AE         	call	_MXK_BlockSwitchTo
 14869  0145BE  0900               	iorlw	0
 14870  0145C0  B4D8               	btfsc	status,2,c
 14871  0145C2  D00C               	goto	l2296
 14872                           
 14873                           ;main.c: 70: Console_Init();
 14874  0145C4  EC36  F0A6         	call	_Console_Init	;wreg free
 14875                           
 14876                           ;main.c: 71: HMI_Init();
 14877  0145C8  EC9A  F090         	call	_HMI_Init	;wreg free
 14878                           
 14879                           ;main.c: 72: LCD_Init();
 14880  0145CC  EC5A  F097         	call	_LCD_Init	;wreg free
 14881                           
 14882                           ;main.c: 73: if (MXK_Release())
 14883  0145D0  EC91  F0B1         	call	_MXK_Release	;wreg free
 14884  0145D4  0900               	iorlw	0
 14885  0145D6  A4D8               	btfss	status,2,c
 14886                           
 14887                           ;main.c: 74: MXK_Dequeue();
 14888  0145D8  ECCE  F0AE         	call	_MXK_Dequeue	;wreg free
 14889  0145DC                     l2296:
 14890                           
 14891                           ;main.c: 75: }
 14892                           ;main.c: 78: if (MXK_BlockSwitchTo(eMXK_Motor)) {
 14893  0145DC  0E08               	movlw	8
 14894  0145DE  ECED  F0AE         	call	_MXK_BlockSwitchTo
 14895  0145E2  0900               	iorlw	0
 14896  0145E4  B4D8               	btfsc	status,2,c
 14897  0145E6  D013               	goto	l2298
 14898                           
 14899                           ;main.c: 79: Motor_Init(&Stepper, 0b1000);
 14900  0145E8  0EC8               	movlw	low _Stepper
 14901  0145EA  0100               	movlb	0	; () banked
 14902  0145EC  6F8D               	movwf	Motor_Init@pMotor& (0+255),b
 14903  0145EE  0E03               	movlw	high _Stepper
 14904  0145F0  0100               	movlb	0	; () banked
 14905  0145F2  6F8E               	movwf	(Motor_Init@pMotor+1)& (0+255),b
 14906  0145F4  0E00               	movlw	0
 14907  0145F6  0100               	movlb	0	; () banked
 14908  0145F8  6F90               	movwf	(Motor_Init@pAddress+1)& (0+255),b
 14909  0145FA  0E08               	movlw	8
 14910  0145FC  6F8F               	movwf	Motor_Init@pAddress& (0+255),b
 14911  0145FE  ECAC  F09D         	call	_Motor_Init	;wreg free
 14912                           
 14913                           ;main.c: 80: if (MXK_Release())
 14914  014602  EC91  F0B1         	call	_MXK_Release	;wreg free
 14915  014606  0900               	iorlw	0
 14916  014608  A4D8               	btfss	status,2,c
 14917                           
 14918                           ;main.c: 81: MXK_Dequeue();
 14919  01460A  ECCE  F0AE         	call	_MXK_Dequeue	;wreg free
 14920  01460E                     l2298:
 14921                           
 14922                           ;main.c: 82: }
 14923                           ;main.c: 85: ADC_Init(&ADC_AN0, eADC_Ch0);
 14924  01460E  0EF4               	movlw	low _ADC_AN0
 14925  014610  0100               	movlb	0	; () banked
 14926  014612  6F64               	movwf	ADC_Init@pInput& (0+255),b
 14927  014614  0E00               	movlw	high _ADC_AN0
 14928  014616  0100               	movlb	0	; () banked
 14929  014618  6F65               	movwf	(ADC_Init@pInput+1)& (0+255),b
 14930  01461A  0E00               	movlw	0
 14931  01461C  0100               	movlb	0	; () banked
 14932  01461E  6F66               	movwf	ADC_Init@pChannel& (0+255),b
 14933  014620  EC81  F0A7         	call	_ADC_Init	;wreg free
 14934                           
 14935                           ;main.c: 86: float ADC_Voltage(ADCPtr plnput);
 14936                           ;main.c: 87: ADC_Start(&ADC_AN0);
 14937  014624  0EF4               	movlw	low _ADC_AN0
 14938  014626  0100               	movlb	0	; () banked
 14939  014628  6F62               	movwf	ADC_Start@pInput& (0+255),b
 14940  01462A  0E00               	movlw	high _ADC_AN0
 14941  01462C  0100               	movlb	0	; () banked
 14942  01462E  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
 14943  014630  ECC0  F0A6         	call	_ADC_Start	;wreg free
 14944                           
 14945                           ;main.c: 89: eusart_init();
 14946  014634  EC1A  F0B1         	call	_eusart_init	;wreg free
 14947                           
 14948                           ;main.c: 90: irobot_init();
 14949  014638  EC50  F0B2         	call	_irobot_init	;wreg free
 14950                           
 14951                           ;main.c: 92: irobot_led_power_on(0xA);
 14952  01463C  0E0A               	movlw	10
 14953  01463E  EC83  F0B1         	call	_irobot_led_power_on
 14954                           
 14955                           ;main.c: 93: irobot_init_song_0();
 14956  014642  ECFB  F0B0         	call	_irobot_init_song_0	;wreg free
 14957                           
 14958                           ;main.c: 94: delay_ms(20);
 14959  014646  0E00               	movlw	0
 14960  014648  0100               	movlb	0	; () banked
 14961  01464A  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 14962  01464C  0E14               	movlw	20
 14963  01464E  6F60               	movwf	delay_ms@ms& (0+255),b
 14964  014650  ECF6  F0A9         	call	_delay_ms	;wreg free
 14965  014654  0012               	return		;funcret
 14966  014656                     __end_of_init:
 14967                           	opt stack 0
 14968                           tosu	equ	0xFFF
 14969                           tosh	equ	0xFFE
 14970                           tosl	equ	0xFFD
 14971                           pclath	equ	0xFFA
 14972                           tblptru	equ	0xFF8
 14973                           tblptrh	equ	0xFF7
 14974                           tblptrl	equ	0xFF6
 14975                           tablat	equ	0xFF5
 14976                           prodh	equ	0xFF4
 14977                           prodl	equ	0xFF3
 14978                           intcon	equ	0xFF2
 14979                           postinc0	equ	0xFEE
 14980                           wreg	equ	0xFE8
 14981                           indf1	equ	0xFE7
 14982                           postdec1	equ	0xFE5
 14983                           fsr1h	equ	0xFE2
 14984                           fsr1l	equ	0xFE1
 14985                           indf2	equ	0xFDF
 14986                           postinc2	equ	0xFDE
 14987                           postdec2	equ	0xFDD
 14988                           plusw2	equ	0xFDB
 14989                           fsr2h	equ	0xFDA
 14990                           fsr2l	equ	0xFD9
 14991                           status	equ	0xFD8
 14992                           
 14993 ;; *************** function _irobot_led_power_on *****************
 14994 ;; Defined at:
 14995 ;;		line 293 in file "Library/iRobotSerial.c"
 14996 ;; Parameters:    Size  Location     Type
 14997 ;;  powerOnColou    1    wreg     unsigned char 
 14998 ;; Auto vars:     Size  Location     Type
 14999 ;;  powerOnColou    1   20[BANK0 ] unsigned char 
 15000 ;; Return value:  Size  Location     Type
 15001 ;;                  1    wreg      void 
 15002 ;; Registers used:
 15003 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 15004 ;; Tracked objects:
 15005 ;;		On entry : 0/0
 15006 ;;		On exit  : 0/0
 15007 ;;		Unchanged: 0/0
 15008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15010 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15012 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15013 ;;Total ram usage:        1 bytes
 15014 ;; Hardware stack levels used:    1
 15015 ;; Hardware stack levels required when called:    9
 15016 ;; This function calls:
 15017 ;;		_irobot_leds
 15018 ;; This function is called by:
 15019 ;;		_init
 15020 ;; This function uses a non-reentrant model
 15021 ;;
 15022                           
 15023                           	psect	text64
 15024  016306                     __ptext64:
 15025                           	opt stack 0
 15026  016306                     _irobot_led_power_on:
 15027                           	opt stack 20
 15028                           
 15029                           ;incstack = 0
 15030                           ;irobot_led_power_on@powerOnColour stored from wreg
 15031  016306  0100               	movlb	0	; () banked
 15032  016308  6F74               	movwf	irobot_led_power_on@powerOnColour& (0+255),b
 15033                           
 15034                           ;iRobotSerial.c: 294: irobot_leds(0, 0, powerOnColour, iR_CONST_LED_ON);
 15035  01630A  0E00               	movlw	0
 15036  01630C  0100               	movlb	0	; () banked
 15037  01630E  6F70               	movwf	irobot_leds@LEDBit& (0+255),b
 15038  016310  C074  F071         	movff	irobot_led_power_on@powerOnColour,irobot_leds@powerColour
 15039  016314  0EFF               	movlw	255
 15040  016316  0100               	movlb	0	; () banked
 15041  016318  6F72               	movwf	irobot_leds@powerLuminosity& (0+255),b
 15042  01631A  0E00               	movlw	0
 15043  01631C  EC18  F0AC         	call	_irobot_leds
 15044  016320  0012               	return		;funcret
 15045  016322                     __end_of_irobot_led_power_on:
 15046                           	opt stack 0
 15047                           tosu	equ	0xFFF
 15048                           tosh	equ	0xFFE
 15049                           tosl	equ	0xFFD
 15050                           pclath	equ	0xFFA
 15051                           tblptru	equ	0xFF8
 15052                           tblptrh	equ	0xFF7
 15053                           tblptrl	equ	0xFF6
 15054                           tablat	equ	0xFF5
 15055                           prodh	equ	0xFF4
 15056                           prodl	equ	0xFF3
 15057                           intcon	equ	0xFF2
 15058                           postinc0	equ	0xFEE
 15059                           wreg	equ	0xFE8
 15060                           indf1	equ	0xFE7
 15061                           postdec1	equ	0xFE5
 15062                           fsr1h	equ	0xFE2
 15063                           fsr1l	equ	0xFE1
 15064                           indf2	equ	0xFDF
 15065                           postinc2	equ	0xFDE
 15066                           postdec2	equ	0xFDD
 15067                           plusw2	equ	0xFDB
 15068                           fsr2h	equ	0xFDA
 15069                           fsr2l	equ	0xFD9
 15070                           status	equ	0xFD8
 15071                           
 15072 ;; *************** function _irobot_leds *****************
 15073 ;; Defined at:
 15074 ;;		line 239 in file "Library/iRobotSerial.c"
 15075 ;; Parameters:    Size  Location     Type
 15076 ;;  isScript        1    wreg     unsigned char 
 15077 ;;  LEDBit          1   16[BANK0 ] unsigned char 
 15078 ;;  powerColour     1   17[BANK0 ] unsigned char 
 15079 ;;  powerLuminos    1   18[BANK0 ] unsigned char 
 15080 ;; Auto vars:     Size  Location     Type
 15081 ;;  isScript        1   19[BANK0 ] unsigned char 
 15082 ;; Return value:  Size  Location     Type
 15083 ;;                  1    wreg      void 
 15084 ;; Registers used:
 15085 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 15086 ;; Tracked objects:
 15087 ;;		On entry : 0/0
 15088 ;;		On exit  : 0/0
 15089 ;;		Unchanged: 0/0
 15090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15091 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15092 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15094 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15095 ;;Total ram usage:        4 bytes
 15096 ;; Hardware stack levels used:    1
 15097 ;; Hardware stack levels required when called:    8
 15098 ;; This function calls:
 15099 ;;		_eusart_putch
 15100 ;;		_load_iRScriptStack
 15101 ;; This function is called by:
 15102 ;;		_irobot_led_power_on
 15103 ;;		_irobot_led_power_off
 15104 ;; This function uses a non-reentrant model
 15105 ;;
 15106                           
 15107                           	psect	text65
 15108  015830                     __ptext65:
 15109                           	opt stack 0
 15110  015830                     _irobot_leds:
 15111                           	opt stack 20
 15112                           
 15113                           ;incstack = 0
 15114                           ;irobot_leds@isScript stored from wreg
 15115  015830  0100               	movlb	0	; () banked
 15116  015832  6F73               	movwf	irobot_leds@isScript& (0+255),b
 15117                           
 15118                           ;iRobotSerial.c: 240: if (isScript) {
 15119  015834  0100               	movlb	0	; () banked
 15120  015836  5173               	movf	irobot_leds@isScript& (0+255),w,b
 15121  015838  0100               	movlb	0	; () banked
 15122  01583A  B4D8               	btfsc	status,2,c
 15123  01583C  D015               	goto	l2140
 15124                           
 15125                           ; BSR set to: 0
 15126                           ;iRobotSerial.c: 241: load_iRScriptStack(4, iR_LEDS,
 15127                           ;iRobotSerial.c: 242: LEDBit, powerColour, powerLuminosity);
 15128  01583E  0E00               	movlw	0
 15129  015840  0100               	movlb	0	; () banked
 15130  015842  6F61               	movwf	(?_load_iRScriptStack+1)& (0+255),b
 15131  015844  0E8B               	movlw	139
 15132  015846  6F60               	movwf	?_load_iRScriptStack& (0+255),b
 15133  015848  C070  F062         	movff	irobot_leds@LEDBit,?_load_iRScriptStack+2
 15134  01584C  0100               	movlb	0	; () banked
 15135  01584E  6B63               	clrf	(?_load_iRScriptStack+3)& (0+255),b
 15136  015850  C071  F064         	movff	irobot_leds@powerColour,?_load_iRScriptStack+4
 15137  015854  0100               	movlb	0	; () banked
 15138  015856  6B65               	clrf	(?_load_iRScriptStack+5)& (0+255),b
 15139  015858  C072  F066         	movff	irobot_leds@powerLuminosity,?_load_iRScriptStack+6
 15140  01585C  0100               	movlb	0	; () banked
 15141  01585E  6B67               	clrf	(?_load_iRScriptStack+7)& (0+255),b
 15142  015860  0E04               	movlw	4
 15143  015862  ECC1  F0A9         	call	_load_iRScriptStack
 15144                           
 15145                           ;iRobotSerial.c: 243: }
 15146  015866  0012               	return	
 15147  015868                     l2140:
 15148                           
 15149                           ;iRobotSerial.c: 244: else{
 15150                           ;iRobotSerial.c: 245: eusart_putch(iR_LEDS);
 15151  015868  0E8B               	movlw	139
 15152  01586A  EC57  F0B2         	call	_eusart_putch
 15153                           
 15154                           ;iRobotSerial.c: 246: eusart_putch(LEDBit);
 15155  01586E  0100               	movlb	0	; () banked
 15156  015870  5170               	movf	irobot_leds@LEDBit& (0+255),w,b
 15157  015872  EC57  F0B2         	call	_eusart_putch
 15158                           
 15159                           ;iRobotSerial.c: 247: eusart_putch(powerColour);
 15160  015876  0100               	movlb	0	; () banked
 15161  015878  5171               	movf	irobot_leds@powerColour& (0+255),w,b
 15162  01587A  EC57  F0B2         	call	_eusart_putch
 15163                           
 15164                           ;iRobotSerial.c: 248: eusart_putch(powerLuminosity);
 15165  01587E  0100               	movlb	0	; () banked
 15166  015880  5172               	movf	irobot_leds@powerLuminosity& (0+255),w,b
 15167  015882  EC57  F0B2         	call	_eusart_putch
 15168  015886  0012               	return	
 15169  015888                     __end_of_irobot_leds:
 15170                           	opt stack 0
 15171                           tosu	equ	0xFFF
 15172                           tosh	equ	0xFFE
 15173                           tosl	equ	0xFFD
 15174                           pclath	equ	0xFFA
 15175                           tblptru	equ	0xFF8
 15176                           tblptrh	equ	0xFF7
 15177                           tblptrl	equ	0xFF6
 15178                           tablat	equ	0xFF5
 15179                           prodh	equ	0xFF4
 15180                           prodl	equ	0xFF3
 15181                           intcon	equ	0xFF2
 15182                           postinc0	equ	0xFEE
 15183                           wreg	equ	0xFE8
 15184                           indf1	equ	0xFE7
 15185                           postdec1	equ	0xFE5
 15186                           fsr1h	equ	0xFE2
 15187                           fsr1l	equ	0xFE1
 15188                           indf2	equ	0xFDF
 15189                           postinc2	equ	0xFDE
 15190                           postdec2	equ	0xFDD
 15191                           plusw2	equ	0xFDB
 15192                           fsr2h	equ	0xFDA
 15193                           fsr2l	equ	0xFD9
 15194                           status	equ	0xFD8
 15195                           
 15196 ;; *************** function _load_iRScriptStack *****************
 15197 ;; Defined at:
 15198 ;;		line 176 in file "Library/iRobotSerial.c"
 15199 ;; Parameters:    Size  Location     Type
 15200 ;;  bytesToLoad     1    wreg     unsigned char 
 15201 ;; Auto vars:     Size  Location     Type
 15202 ;;  bytesToLoad     1   14[BANK0 ] unsigned char 
 15203 ;;  i               1   15[BANK0 ] unsigned char 
 15204 ;;  loadByte        2   12[BANK0 ] PTR void [1]
 15205 ;;		 -> ?_load_iRScriptStack(1), 
 15206 ;; Return value:  Size  Location     Type
 15207 ;;                  1    wreg      void 
 15208 ;; Registers used:
 15209 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 15210 ;; Tracked objects:
 15211 ;;		On entry : 0/0
 15212 ;;		On exit  : 0/0
 15213 ;;		Unchanged: 0/0
 15214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15215 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15216 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15217 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15218 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15219 ;;Total ram usage:       16 bytes
 15220 ;; Hardware stack levels used:    1
 15221 ;; Hardware stack levels required when called:    7
 15222 ;; This function calls:
 15223 ;;		Nothing
 15224 ;; This function is called by:
 15225 ;;		_irobot_angle_wait
 15226 ;;		_irobot_move
 15227 ;;		_irobot_leds
 15228 ;;		_irobot_distance_wait
 15229 ;; This function uses a non-reentrant model
 15230 ;;
 15231                           
 15232                           	psect	text66
 15233  015382                     __ptext66:
 15234                           	opt stack 0
 15235  015382                     _load_iRScriptStack:
 15236                           	opt stack 20
 15237                           
 15238                           ;incstack = 0
 15239                           ;load_iRScriptStack@bytesToLoad stored from wreg
 15240  015382  0100               	movlb	0	; () banked
 15241  015384  6F6E               	movwf	load_iRScriptStack@bytesToLoad& (0+255),b
 15242                           
 15243                           ;iRobotSerial.c: 177: va_list loadByte;
 15244                           ;iRobotSerial.c: 178: *loadByte = __va_start();
 15245  015386  0E60               	movlw	low ?_load_iRScriptStack
 15246  015388  0100               	movlb	0	; () banked
 15247  01538A  6F6C               	movwf	load_iRScriptStack@loadByte& (0+255),b
 15248  01538C  0E00               	movlw	high ?_load_iRScriptStack
 15249  01538E  0100               	movlb	0	; () banked
 15250  015390  6F6D               	movwf	(load_iRScriptStack@loadByte+1)& (0+255),b
 15251                           
 15252                           ;iRobotSerial.c: 179: for (UINT8 i = 0; i < bytesToLoad; i++) {
 15253  015392  0E00               	movlw	0
 15254  015394  0100               	movlb	0	; () banked
 15255  015396  6F6F               	movwf	load_iRScriptStack@i& (0+255),b
 15256  015398  D01F               	goto	l2114
 15257  01539A                     
 15258                           ; BSR set to: 0
 15259                           ;iRobotSerial.c: 180: iRScriptStack[iRScriptIndex + i] = (*(int *)__va_arg((*(int **)loa
      +                          dByte), (int)0));
 15260                           
 15261                           ; BSR set to: 0
 15262  01539A  C06C  FFD9         	movff	load_iRScriptStack@loadByte,fsr2l
 15263  01539E  C06D  FFDA         	movff	load_iRScriptStack@loadByte+1,fsr2h
 15264  0153A2  0100               	movlb	0	; () banked
 15265  0153A4  516F               	movf	load_iRScriptStack@i& (0+255),w,b
 15266  0153A6  C037  F06A         	movff	_iRScriptIndex,??_load_iRScriptStack
 15267  0153AA  0100               	movlb	0	; () banked
 15268  0153AC  6B6B               	clrf	(??_load_iRScriptStack+1)& (0+255),b
 15269  0153AE  0100               	movlb	0	; () banked
 15270  0153B0  276A               	addwf	??_load_iRScriptStack& (0+255),f,b
 15271  0153B2  0E00               	movlw	0
 15272  0153B4  236B               	addwfc	(??_load_iRScriptStack+1)& (0+255),f,b
 15273  0153B6  0E1E               	movlw	low _iRScriptStack
 15274  0153B8  0100               	movlb	0	; () banked
 15275  0153BA  256A               	addwf	??_load_iRScriptStack& (0+255),w,b
 15276  0153BC  6EE1               	movwf	fsr1l,c
 15277  0153BE  0E04               	movlw	high _iRScriptStack
 15278  0153C0  0100               	movlb	0	; () banked
 15279  0153C2  216B               	addwfc	(??_load_iRScriptStack+1)& (0+255),w,b
 15280  0153C4  6EE2               	movwf	fsr1h,c
 15281  0153C6  CFDF FFE7          	movff	indf2,indf1
 15282                           
 15283                           ; BSR set to: 0
 15284  0153CA  0E02               	movlw	2
 15285  0153CC  0100               	movlb	0	; () banked
 15286  0153CE  276C               	addwf	load_iRScriptStack@loadByte& (0+255),f,b
 15287  0153D0  0E00               	movlw	0
 15288  0153D2  236D               	addwfc	(load_iRScriptStack@loadByte+1)& (0+255),f,b
 15289                           
 15290                           ; BSR set to: 0
 15291  0153D4  0100               	movlb	0	; () banked
 15292  0153D6  2B6F               	incf	load_iRScriptStack@i& (0+255),f,b
 15293  0153D8                     l2114:
 15294                           
 15295                           ; BSR set to: 0
 15296                           
 15297                           ; BSR set to: 0
 15298  0153D8  0100               	movlb	0	; () banked
 15299  0153DA  516E               	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
 15300  0153DC  0100               	movlb	0	; () banked
 15301  0153DE  5D6F               	subwf	load_iRScriptStack@i& (0+255),w,b
 15302  0153E0  A0D8               	btfss	status,0,c
 15303  0153E2  D7DB               	goto	l2115
 15304                           
 15305                           ; BSR set to: 0
 15306                           ;iRobotSerial.c: 181: }
 15307                           ;iRobotSerial.c: 182: ;
 15308                           ;iRobotSerial.c: 183: iRScriptIndex += bytesToLoad;
 15309                           
 15310                           ; BSR set to: 0
 15311  0153E4  0100               	movlb	0	; () banked
 15312  0153E6  516E               	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
 15313  0153E8  2637               	addwf	_iRScriptIndex,f,c
 15314                           
 15315                           ; BSR set to: 0
 15316  0153EA  0012               	return		;funcret
 15317  0153EC                     __end_of_load_iRScriptStack:
 15318                           	opt stack 0
 15319                           tosu	equ	0xFFF
 15320                           tosh	equ	0xFFE
 15321                           tosl	equ	0xFFD
 15322                           pclath	equ	0xFFA
 15323                           tblptru	equ	0xFF8
 15324                           tblptrh	equ	0xFF7
 15325                           tblptrl	equ	0xFF6
 15326                           tablat	equ	0xFF5
 15327                           prodh	equ	0xFF4
 15328                           prodl	equ	0xFF3
 15329                           intcon	equ	0xFF2
 15330                           postinc0	equ	0xFEE
 15331                           wreg	equ	0xFE8
 15332                           indf1	equ	0xFE7
 15333                           postdec1	equ	0xFE5
 15334                           fsr1h	equ	0xFE2
 15335                           fsr1l	equ	0xFE1
 15336                           indf2	equ	0xFDF
 15337                           postinc2	equ	0xFDE
 15338                           postdec2	equ	0xFDD
 15339                           plusw2	equ	0xFDB
 15340                           fsr2h	equ	0xFDA
 15341                           fsr2l	equ	0xFD9
 15342                           status	equ	0xFD8
 15343                           
 15344 ;; *************** function _irobot_init_song_0 *****************
 15345 ;; Defined at:
 15346 ;;		line 252 in file "Library/iRobotSerial.c"
 15347 ;; Parameters:    Size  Location     Type
 15348 ;;		None
 15349 ;; Auto vars:     Size  Location     Type
 15350 ;;		None
 15351 ;; Return value:  Size  Location     Type
 15352 ;;                  1    wreg      void 
 15353 ;; Registers used:
 15354 ;;		wreg, cstack
 15355 ;; Tracked objects:
 15356 ;;		On entry : 0/0
 15357 ;;		On exit  : 0/0
 15358 ;;		Unchanged: 0/0
 15359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15363 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15364 ;;Total ram usage:        0 bytes
 15365 ;; Hardware stack levels used:    1
 15366 ;; Hardware stack levels required when called:    8
 15367 ;; This function calls:
 15368 ;;		_eusart_putch
 15369 ;; This function is called by:
 15370 ;;		_init
 15371 ;; This function uses a non-reentrant model
 15372 ;;
 15373                           
 15374                           	psect	text67
 15375  0161F6                     __ptext67:
 15376                           	opt stack 0
 15377  0161F6                     _irobot_init_song_0:
 15378                           	opt stack 21
 15379                           
 15380                           ;iRobotSerial.c: 253: eusart_putch(iR_SONG_INIT);
 15381                           
 15382                           ; BSR set to: 0
 15383                           ;incstack = 0
 15384  0161F6  0E8C               	movlw	140
 15385  0161F8  EC57  F0B2         	call	_eusart_putch
 15386                           
 15387                           ;iRobotSerial.c: 254: eusart_putch(0);
 15388  0161FC  0E00               	movlw	0
 15389  0161FE  EC57  F0B2         	call	_eusart_putch
 15390                           
 15391                           ;iRobotSerial.c: 255: eusart_putch(1);
 15392  016202  0E01               	movlw	1
 15393  016204  EC57  F0B2         	call	_eusart_putch
 15394                           
 15395                           ;iRobotSerial.c: 256: eusart_putch(60);
 15396  016208  0E3C               	movlw	60
 15397  01620A  EC57  F0B2         	call	_eusart_putch
 15398                           
 15399                           ;iRobotSerial.c: 257: eusart_putch(4);
 15400  01620E  0E04               	movlw	4
 15401  016210  EC57  F0B2         	call	_eusart_putch
 15402  016214  0012               	return		;funcret
 15403  016216                     __end_of_irobot_init_song_0:
 15404                           	opt stack 0
 15405                           tosu	equ	0xFFF
 15406                           tosh	equ	0xFFE
 15407                           tosl	equ	0xFFD
 15408                           pclath	equ	0xFFA
 15409                           tblptru	equ	0xFF8
 15410                           tblptrh	equ	0xFF7
 15411                           tblptrl	equ	0xFF6
 15412                           tablat	equ	0xFF5
 15413                           prodh	equ	0xFF4
 15414                           prodl	equ	0xFF3
 15415                           intcon	equ	0xFF2
 15416                           postinc0	equ	0xFEE
 15417                           wreg	equ	0xFE8
 15418                           indf1	equ	0xFE7
 15419                           postdec1	equ	0xFE5
 15420                           fsr1h	equ	0xFE2
 15421                           fsr1l	equ	0xFE1
 15422                           indf2	equ	0xFDF
 15423                           postinc2	equ	0xFDE
 15424                           postdec2	equ	0xFDD
 15425                           plusw2	equ	0xFDB
 15426                           fsr2h	equ	0xFDA
 15427                           fsr2l	equ	0xFD9
 15428                           status	equ	0xFD8
 15429                           
 15430 ;; *************** function _irobot_init *****************
 15431 ;; Defined at:
 15432 ;;		line 198 in file "Library/iRobotSerial.c"
 15433 ;; Parameters:    Size  Location     Type
 15434 ;;		None
 15435 ;; Auto vars:     Size  Location     Type
 15436 ;;		None
 15437 ;; Return value:  Size  Location     Type
 15438 ;;                  1    wreg      void 
 15439 ;; Registers used:
 15440 ;;		wreg, cstack
 15441 ;; Tracked objects:
 15442 ;;		On entry : 0/0
 15443 ;;		On exit  : 0/0
 15444 ;;		Unchanged: 0/0
 15445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15449 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15450 ;;Total ram usage:        0 bytes
 15451 ;; Hardware stack levels used:    1
 15452 ;; Hardware stack levels required when called:    8
 15453 ;; This function calls:
 15454 ;;		_eusart_putch
 15455 ;; This function is called by:
 15456 ;;		_init
 15457 ;; This function uses a non-reentrant model
 15458 ;;
 15459                           
 15460                           	psect	text68
 15461  0164A0                     __ptext68:
 15462                           	opt stack 0
 15463  0164A0                     _irobot_init:
 15464                           	opt stack 21
 15465                           
 15466                           ;iRobotSerial.c: 199: eusart_putch(iR_START);
 15467                           
 15468                           ;incstack = 0
 15469  0164A0  0E80               	movlw	128
 15470  0164A2  EC57  F0B2         	call	_eusart_putch
 15471                           
 15472                           ;iRobotSerial.c: 200: eusart_putch(iR_FULL_MODE);
 15473  0164A6  0E84               	movlw	132
 15474  0164A8  EC57  F0B2         	call	_eusart_putch
 15475  0164AC  0012               	return		;funcret
 15476  0164AE                     __end_of_irobot_init:
 15477                           	opt stack 0
 15478                           tosu	equ	0xFFF
 15479                           tosh	equ	0xFFE
 15480                           tosl	equ	0xFFD
 15481                           pclath	equ	0xFFA
 15482                           tblptru	equ	0xFF8
 15483                           tblptrh	equ	0xFF7
 15484                           tblptrl	equ	0xFF6
 15485                           tablat	equ	0xFF5
 15486                           prodh	equ	0xFF4
 15487                           prodl	equ	0xFF3
 15488                           intcon	equ	0xFF2
 15489                           postinc0	equ	0xFEE
 15490                           wreg	equ	0xFE8
 15491                           indf1	equ	0xFE7
 15492                           postdec1	equ	0xFE5
 15493                           fsr1h	equ	0xFE2
 15494                           fsr1l	equ	0xFE1
 15495                           indf2	equ	0xFDF
 15496                           postinc2	equ	0xFDE
 15497                           postdec2	equ	0xFDD
 15498                           plusw2	equ	0xFDB
 15499                           fsr2h	equ	0xFDA
 15500                           fsr2l	equ	0xFD9
 15501                           status	equ	0xFD8
 15502                           
 15503 ;; *************** function _eusart_putch *****************
 15504 ;; Defined at:
 15505 ;;		line 120 in file "Library/iRobotSerial.c"
 15506 ;; Parameters:    Size  Location     Type
 15507 ;;  eusartSendCh    1    wreg     unsigned char 
 15508 ;; Auto vars:     Size  Location     Type
 15509 ;;  eusartSendCh    1    0[BANK0 ] unsigned char 
 15510 ;; Return value:  Size  Location     Type
 15511 ;;                  1    wreg      void 
 15512 ;; Registers used:
 15513 ;;		wreg
 15514 ;; Tracked objects:
 15515 ;;		On entry : 0/0
 15516 ;;		On exit  : 0/0
 15517 ;;		Unchanged: 0/0
 15518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15520 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15522 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15523 ;;Total ram usage:        1 bytes
 15524 ;; Hardware stack levels used:    1
 15525 ;; Hardware stack levels required when called:    7
 15526 ;; This function calls:
 15527 ;;		Nothing
 15528 ;; This function is called by:
 15529 ;;		_irobot_query_and_update
 15530 ;;		_irobot_init
 15531 ;;		_irobot_move
 15532 ;;		_irobot_leds
 15533 ;;		_irobot_init_song_0
 15534 ;;		_irobot_song_play
 15535 ;;		_irobot_script_play
 15536 ;; This function uses a non-reentrant model
 15537 ;;
 15538                           
 15539                           	psect	text69
 15540  0164AE                     __ptext69:
 15541                           	opt stack 0
 15542  0164AE                     _eusart_putch:
 15543                           	opt stack 20
 15544                           
 15545                           ;incstack = 0
 15546                           ;eusart_putch@eusartSendChar stored from wreg
 15547  0164AE  0100               	movlb	0	; () banked
 15548  0164B0  6F60               	movwf	eusart_putch@eusartSendChar& (0+255),b
 15549  0164B2                     
 15550                           ;iRobotSerial.c: 121: while (!TXSTA1bits.TRMT) {};
 15551  0164B2  A2AD               	btfss	4013,1,c	;volatile
 15552  0164B4  D7FE               	goto	l12633
 15553                           
 15554                           ;iRobotSerial.c: 122: TXREG1 = eusartSendChar;
 15555  0164B6  C060  FFAE         	movff	eusart_putch@eusartSendChar,4014	;volatile
 15556  0164BA  0012               	return		;funcret
 15557  0164BC                     __end_of_eusart_putch:
 15558                           	opt stack 0
 15559                           tosu	equ	0xFFF
 15560                           tosh	equ	0xFFE
 15561                           tosl	equ	0xFFD
 15562                           pclath	equ	0xFFA
 15563                           tblptru	equ	0xFF8
 15564                           tblptrh	equ	0xFF7
 15565                           tblptrl	equ	0xFF6
 15566                           tablat	equ	0xFF5
 15567                           prodh	equ	0xFF4
 15568                           prodl	equ	0xFF3
 15569                           intcon	equ	0xFF2
 15570                           postinc0	equ	0xFEE
 15571                           wreg	equ	0xFE8
 15572                           indf1	equ	0xFE7
 15573                           postdec1	equ	0xFE5
 15574                           fsr1h	equ	0xFE2
 15575                           fsr1l	equ	0xFE1
 15576                           indf2	equ	0xFDF
 15577                           postinc2	equ	0xFDE
 15578                           postdec2	equ	0xFDD
 15579                           plusw2	equ	0xFDB
 15580                           fsr2h	equ	0xFDA
 15581                           fsr2l	equ	0xFD9
 15582                           status	equ	0xFD8
 15583                           
 15584 ;; *************** function _eusart_init *****************
 15585 ;; Defined at:
 15586 ;;		line 103 in file "Library/iRobotSerial.c"
 15587 ;; Parameters:    Size  Location     Type
 15588 ;;		None
 15589 ;; Auto vars:     Size  Location     Type
 15590 ;;		None
 15591 ;; Return value:  Size  Location     Type
 15592 ;;                  1    wreg      void 
 15593 ;; Registers used:
 15594 ;;		wreg, status,2
 15595 ;; Tracked objects:
 15596 ;;		On entry : 0/0
 15597 ;;		On exit  : 0/0
 15598 ;;		Unchanged: 0/0
 15599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15603 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15604 ;;Total ram usage:        0 bytes
 15605 ;; Hardware stack levels used:    1
 15606 ;; Hardware stack levels required when called:    7
 15607 ;; This function calls:
 15608 ;;		Nothing
 15609 ;; This function is called by:
 15610 ;;		_init
 15611 ;; This function uses a non-reentrant model
 15612 ;;
 15613                           
 15614                           	psect	text70
 15615  016234                     __ptext70:
 15616                           	opt stack 0
 15617  016234                     _eusart_init:
 15618                           	opt stack 22
 15619                           
 15620                           ;iRobotSerial.c: 104: TRISCbits.TRISC6 = 0;
 15621                           
 15622                           ;incstack = 0
 15623  016234  9C94               	bcf	3988,6,c	;volatile
 15624                           
 15625                           ;iRobotSerial.c: 105: TRISCbits.TRISC7 = 1;
 15626  016236  8E94               	bsf	3988,7,c	;volatile
 15627                           
 15628                           ;iRobotSerial.c: 107: TXSTA1 = 0b00100100;
 15629  016238  0E24               	movlw	36
 15630  01623A  6EAD               	movwf	4013,c	;volatile
 15631                           
 15632                           ;iRobotSerial.c: 108: RCSTA1 = 0b10011000;
 15633  01623C  0E98               	movlw	152
 15634  01623E  6EAC               	movwf	4012,c	;volatile
 15635                           
 15636                           ;iRobotSerial.c: 110: BAUDCON1bits.DTRXP = 0;
 15637  016240  9A7E               	bcf	3966,5,c	;volatile
 15638                           
 15639                           ;iRobotSerial.c: 111: BAUDCON1bits.SCKP = 0;
 15640  016242  987E               	bcf	3966,4,c	;volatile
 15641                           
 15642                           ;iRobotSerial.c: 112: BAUDCON1bits.WUE = 0;
 15643  016244  927E               	bcf	3966,1,c	;volatile
 15644                           
 15645                           ;iRobotSerial.c: 113: BAUDCON1bits.ABDEN = 0;
 15646  016246  907E               	bcf	3966,0,c	;volatile
 15647                           
 15648                           ;iRobotSerial.c: 115: TXSTA1bits.BRGH = 1;
 15649  016248  84AD               	bsf	4013,2,c	;volatile
 15650                           
 15651                           ;iRobotSerial.c: 116: BAUDCON1bits.BRG16 = 0;
 15652  01624A  967E               	bcf	3966,3,c	;volatile
 15653                           
 15654                           ;iRobotSerial.c: 117: SPBRG1 = 51;
 15655  01624C  0E33               	movlw	51
 15656  01624E  6EB0               	movwf	4016,c	;volatile
 15657  016250  0012               	return		;funcret
 15658  016252                     __end_of_eusart_init:
 15659                           	opt stack 0
 15660                           tosu	equ	0xFFF
 15661                           tosh	equ	0xFFE
 15662                           tosl	equ	0xFFD
 15663                           pclath	equ	0xFFA
 15664                           tblptru	equ	0xFF8
 15665                           tblptrh	equ	0xFF7
 15666                           tblptrl	equ	0xFF6
 15667                           tablat	equ	0xFF5
 15668                           prodh	equ	0xFF4
 15669                           prodl	equ	0xFF3
 15670                           intcon	equ	0xFF2
 15671                           postinc0	equ	0xFEE
 15672                           wreg	equ	0xFE8
 15673                           indf1	equ	0xFE7
 15674                           postdec1	equ	0xFE5
 15675                           fsr1h	equ	0xFE2
 15676                           fsr1l	equ	0xFE1
 15677                           indf2	equ	0xFDF
 15678                           postinc2	equ	0xFDE
 15679                           postdec2	equ	0xFDD
 15680                           plusw2	equ	0xFDB
 15681                           fsr2h	equ	0xFDA
 15682                           fsr2l	equ	0xFD9
 15683                           status	equ	0xFD8
 15684                           
 15685 ;; *************** function _Motor_Init *****************
 15686 ;; Defined at:
 15687 ;;		line 26 in file "Library/Motor.c"
 15688 ;; Parameters:    Size  Location     Type
 15689 ;;  pMotor          2   45[BANK0 ] PTR struct Motor
 15690 ;;		 -> Stepper(6), 
 15691 ;;  pAddress        2   47[BANK0 ] unsigned short 
 15692 ;; Auto vars:     Size  Location     Type
 15693 ;;		None
 15694 ;; Return value:  Size  Location     Type
 15695 ;;                  1    wreg      void 
 15696 ;; Registers used:
 15697 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15698 ;; Tracked objects:
 15699 ;;		On entry : 0/0
 15700 ;;		On exit  : 0/0
 15701 ;;		Unchanged: 0/0
 15702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15703 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15706 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15707 ;;Total ram usage:        4 bytes
 15708 ;; Hardware stack levels used:    1
 15709 ;; Hardware stack levels required when called:   12
 15710 ;; This function calls:
 15711 ;;		_Port_SetPin
 15712 ;;		_Port_SetPinType
 15713 ;;		_Timer0_Init
 15714 ;; This function is called by:
 15715 ;;		_init
 15716 ;; This function uses a non-reentrant model
 15717 ;;
 15718                           
 15719                           	psect	text71
 15720  013B58                     __ptext71:
 15721                           	opt stack 0
 15722  013B58                     _Motor_Init:
 15723                           	opt stack 17
 15724                           
 15725                           ;Motor.c: 28: pMotor->mDelta = 0;
 15726                           
 15727                           ;incstack = 0
 15728  013B58  C08D  FFD9         	movff	Motor_Init@pMotor,fsr2l
 15729  013B5C  C08E  FFDA         	movff	Motor_Init@pMotor+1,fsr2h
 15730  013B60  0E00               	movlw	0
 15731  013B62  6EDE               	movwf	postinc2,c
 15732  013B64  0E00               	movlw	0
 15733  013B66  6EDD               	movwf	postdec2,c
 15734                           
 15735                           ;Motor.c: 29: pMotor->mFrequency = 0;
 15736  013B68  0100               	movlb	0	; () banked
 15737  013B6A  EE20 F002          	lfsr	2,2
 15738  013B6E  518D               	movf	Motor_Init@pMotor& (0+255),w,b
 15739  013B70  26D9               	addwf	fsr2l,f,c
 15740  013B72  518E               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 15741  013B74  22DA               	addwfc	fsr2h,f,c
 15742  013B76  0E00               	movlw	0
 15743  013B78  6EDE               	movwf	postinc2,c
 15744  013B7A  0E00               	movlw	0
 15745  013B7C  6EDD               	movwf	postdec2,c
 15746                           
 15747                           ; BSR set to: 0
 15748                           ;Motor.c: 30: pMotor->mAddress = pAddress;
 15749  013B7E  0100               	movlb	0	; () banked
 15750  013B80  EE20 F004          	lfsr	2,4
 15751  013B84  518D               	movf	Motor_Init@pMotor& (0+255),w,b
 15752  013B86  26D9               	addwf	fsr2l,f,c
 15753  013B88  518E               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 15754  013B8A  22DA               	addwfc	fsr2h,f,c
 15755  013B8C  C08F  FFDE         	movff	Motor_Init@pAddress,postinc2
 15756  013B90  C090  FFDD         	movff	Motor_Init@pAddress+1,postdec2
 15757                           
 15758                           ; BSR set to: 0
 15759                           ;Motor.c: 33: Port_SetPinType (&PortE, eP0, eTypeOutputPushPull);
 15760  013B94  0E99               	movlw	low _PortE
 15761  013B96  0100               	movlb	0	; () banked
 15762  013B98  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 15763  013B9A  0E03               	movlw	high _PortE
 15764  013B9C  0100               	movlb	0	; () banked
 15765  013B9E  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15766  013BA0  0E00               	movlw	0
 15767  013BA2  0100               	movlb	0	; () banked
 15768  013BA4  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 15769  013BA6  0E03               	movlw	3
 15770  013BA8  0100               	movlb	0	; () banked
 15771  013BAA  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 15772  013BAC  EC5F  F093         	call	_Port_SetPinType	;wreg free
 15773                           
 15774                           ;Motor.c: 34: Port_SetPinType (&PortE, eP1, eTypeOutputPushPull);
 15775  013BB0  0E99               	movlw	low _PortE
 15776  013BB2  0100               	movlb	0	; () banked
 15777  013BB4  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 15778  013BB6  0E03               	movlw	high _PortE
 15779  013BB8  0100               	movlb	0	; () banked
 15780  013BBA  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15781  013BBC  0E01               	movlw	1
 15782  013BBE  0100               	movlb	0	; () banked
 15783  013BC0  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 15784  013BC2  0E03               	movlw	3
 15785  013BC4  0100               	movlb	0	; () banked
 15786  013BC6  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 15787  013BC8  EC5F  F093         	call	_Port_SetPinType	;wreg free
 15788                           
 15789                           ;Motor.c: 35: Port_SetPin (&PortE, eP0, 0);
 15790  013BCC  0E99               	movlw	low _PortE
 15791  013BCE  0100               	movlb	0	; () banked
 15792  013BD0  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 15793  013BD2  0E03               	movlw	high _PortE
 15794  013BD4  0100               	movlb	0	; () banked
 15795  013BD6  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 15796  013BD8  0E00               	movlw	0
 15797  013BDA  0100               	movlb	0	; () banked
 15798  013BDC  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 15799  013BDE  0E00               	movlw	0
 15800  013BE0  0100               	movlb	0	; () banked
 15801  013BE2  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 15802  013BE4  ECE9  F09E         	call	_Port_SetPin	;wreg free
 15803                           
 15804                           ;Motor.c: 36: Port_SetPin (&PortE, eP1, 0);
 15805  013BE8  0E99               	movlw	low _PortE
 15806  013BEA  0100               	movlb	0	; () banked
 15807  013BEC  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 15808  013BEE  0E03               	movlw	high _PortE
 15809  013BF0  0100               	movlb	0	; () banked
 15810  013BF2  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 15811  013BF4  0E01               	movlw	1
 15812  013BF6  0100               	movlb	0	; () banked
 15813  013BF8  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 15814  013BFA  0E00               	movlw	0
 15815  013BFC  0100               	movlb	0	; () banked
 15816  013BFE  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 15817  013C00  ECE9  F09E         	call	_Port_SetPin	;wreg free
 15818                           
 15819                           ;Motor.c: 38: lStepFunction = Motor_Step;
 15820  013C04  0E86               	movlw	low _Motor_Step
 15821  013C06  0100               	movlb	0	; () banked
 15822  013C08  6FBD               	movwf	_lStepFunction& (0+255),b
 15823  013C0A  0E35               	movlw	high _Motor_Step
 15824  013C0C  0100               	movlb	0	; () banked
 15825  013C0E  6FBE               	movwf	(_lStepFunction+1)& (0+255),b
 15826  013C10  0E01               	movlw	low (_Motor_Step shr (0+16))
 15827  013C12  0100               	movlb	0	; () banked
 15828  013C14  6FBF               	movwf	(_lStepFunction+2)& (0+255),b
 15829                           
 15830                           ; BSR set to: 0
 15831                           ;Motor.c: 39: Timer0_Init(1000);
 15832  013C16  0EE8               	movlw	232
 15833  013C18  0100               	movlb	0	; () banked
 15834  013C1A  6F6D               	movwf	Timer0_Init@pFrequency& (0+255),b
 15835  013C1C  0E03               	movlw	3
 15836  013C1E  6F6E               	movwf	(Timer0_Init@pFrequency+1)& (0+255),b
 15837  013C20  0E00               	movlw	0
 15838  013C22  6F6F               	movwf	(Timer0_Init@pFrequency+2)& (0+255),b
 15839  013C24  0E00               	movlw	0
 15840  013C26  6F70               	movwf	(Timer0_Init@pFrequency+3)& (0+255),b
 15841  013C28  ECC6  F098         	call	_Timer0_Init	;wreg free
 15842  013C2C  0012               	return		;funcret
 15843  013C2E                     __end_of_Motor_Init:
 15844                           	opt stack 0
 15845                           tosu	equ	0xFFF
 15846                           tosh	equ	0xFFE
 15847                           tosl	equ	0xFFD
 15848                           pclath	equ	0xFFA
 15849                           tblptru	equ	0xFF8
 15850                           tblptrh	equ	0xFF7
 15851                           tblptrl	equ	0xFF6
 15852                           tablat	equ	0xFF5
 15853                           prodh	equ	0xFF4
 15854                           prodl	equ	0xFF3
 15855                           intcon	equ	0xFF2
 15856                           postinc0	equ	0xFEE
 15857                           wreg	equ	0xFE8
 15858                           indf1	equ	0xFE7
 15859                           postdec1	equ	0xFE5
 15860                           fsr1h	equ	0xFE2
 15861                           fsr1l	equ	0xFE1
 15862                           indf2	equ	0xFDF
 15863                           postinc2	equ	0xFDE
 15864                           postdec2	equ	0xFDD
 15865                           plusw2	equ	0xFDB
 15866                           fsr2h	equ	0xFDA
 15867                           fsr2l	equ	0xFD9
 15868                           status	equ	0xFD8
 15869                           
 15870 ;; *************** function _Timer0_Init *****************
 15871 ;; Defined at:
 15872 ;;		line 25 in file "Library/Timer0.c"
 15873 ;; Parameters:    Size  Location     Type
 15874 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 15875 ;; Auto vars:     Size  Location     Type
 15876 ;;  DIVIDE          4   23[BANK0 ] unsigned long 
 15877 ;;  pCPUClock       4   19[BANK0 ] unsigned long 
 15878 ;; Return value:  Size  Location     Type
 15879 ;;                  1    wreg      void 
 15880 ;; Registers used:
 15881 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15882 ;; Tracked objects:
 15883 ;;		On entry : 0/0
 15884 ;;		On exit  : 0/0
 15885 ;;		Unchanged: 0/0
 15886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15887 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15888 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15889 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15890 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15891 ;;Total ram usage:       14 bytes
 15892 ;; Hardware stack levels used:    1
 15893 ;; Hardware stack levels required when called:    8
 15894 ;; This function calls:
 15895 ;;		_Timer0_Clear
 15896 ;;		___lldiv
 15897 ;; This function is called by:
 15898 ;;		_Motor_Init
 15899 ;;		_Motor_Speed
 15900 ;; This function uses a non-reentrant model
 15901 ;;
 15902                           
 15903                           	psect	text72
 15904  01318C                     __ptext72:
 15905                           	opt stack 0
 15906  01318C                     _Timer0_Init:
 15907                           	opt stack 20
 15908                           
 15909                           ;Timer0.c: 27: UINT32 pCPUClock = (48*1000000L)/8;
 15910                           
 15911                           ;incstack = 0
 15912  01318C  0E80               	movlw	128
 15913  01318E  0100               	movlb	0	; () banked
 15914  013190  6F73               	movwf	Timer0_Init@pCPUClock& (0+255),b
 15915  013192  0E8D               	movlw	141
 15916  013194  6F74               	movwf	(Timer0_Init@pCPUClock+1)& (0+255),b
 15917  013196  0E5B               	movlw	91
 15918  013198  6F75               	movwf	(Timer0_Init@pCPUClock+2)& (0+255),b
 15919  01319A  0E00               	movlw	0
 15920  01319C  6F76               	movwf	(Timer0_Init@pCPUClock+3)& (0+255),b
 15921                           
 15922                           ; BSR set to: 0
 15923                           ;Timer0.c: 29: static const UINT16 PRESCALE[] = {2, 4, 8, 16, 32, 64 ,128, 256};
 15924                           ;Timer0.c: 31: static UINT8 PRE = 0;
 15925                           ;Timer0.c: 32: static UINT32 DIV = 0;
 15926                           ;Timer0.c: 34: UINT32 DIVIDE;
 15927                           ;Timer0.c: 37: T0CONbits.TMR0ON = 0;
 15928  01319E  9ED5               	bcf	4053,7,c	;volatile
 15929                           
 15930                           ; BSR set to: 0
 15931                           ;Timer0.c: 38: if (pFrequency == 0)
 15932  0131A0  0100               	movlb	0	; () banked
 15933  0131A2  516D               	movf	Timer0_Init@pFrequency& (0+255),w,b
 15934  0131A4  0100               	movlb	0	; () banked
 15935  0131A6  116E               	iorwf	(Timer0_Init@pFrequency+1)& (0+255),w,b
 15936  0131A8  0100               	movlb	0	; () banked
 15937  0131AA  116F               	iorwf	(Timer0_Init@pFrequency+2)& (0+255),w,b
 15938  0131AC  0100               	movlb	0	; () banked
 15939  0131AE  1170               	iorwf	(Timer0_Init@pFrequency+3)& (0+255),w,b
 15940  0131B0  B4D8               	btfsc	status,2,c
 15941  0131B2  0012               	return	
 15942                           
 15943                           ; BSR set to: 0
 15944                           ;Timer0.c: 41: T0CONbits.PSA = 0;
 15945                           
 15946                           ; BSR set to: 0
 15947                           ;Timer0.c: 39: return;
 15948  0131B4  96D5               	bcf	4053,3,c	;volatile
 15949                           
 15950                           ;Timer0.c: 42: T0CONbits.T08BIT = 0;
 15951  0131B6  9CD5               	bcf	4053,6,c	;volatile
 15952                           
 15953                           ;Timer0.c: 43: T0CONbits.T0CS = 0;
 15954  0131B8  9AD5               	bcf	4053,5,c	;volatile
 15955                           
 15956                           ;Timer0.c: 44: T0CONbits.T0SE = 0;
 15957  0131BA  98D5               	bcf	4053,4,c	;volatile
 15958                           
 15959                           ; BSR set to: 0
 15960                           ;Timer0.c: 46: DIVIDE = pCPUClock / pFrequency;
 15961  0131BC  C073  F060         	movff	Timer0_Init@pCPUClock,___lldiv@dividend
 15962  0131C0  C074  F061         	movff	Timer0_Init@pCPUClock+1,___lldiv@dividend+1
 15963  0131C4  C075  F062         	movff	Timer0_Init@pCPUClock+2,___lldiv@dividend+2
 15964  0131C8  C076  F063         	movff	Timer0_Init@pCPUClock+3,___lldiv@dividend+3
 15965  0131CC  C06D  F064         	movff	Timer0_Init@pFrequency,___lldiv@divisor
 15966  0131D0  C06E  F065         	movff	Timer0_Init@pFrequency+1,___lldiv@divisor+1
 15967  0131D4  C06F  F066         	movff	Timer0_Init@pFrequency+2,___lldiv@divisor+2
 15968  0131D8  C070  F067         	movff	Timer0_Init@pFrequency+3,___lldiv@divisor+3
 15969  0131DC  EC0B  F0A0         	call	___lldiv	;wreg free
 15970  0131E0  C060  F077         	movff	?___lldiv,Timer0_Init@DIVIDE
 15971  0131E4  C061  F078         	movff	?___lldiv+1,Timer0_Init@DIVIDE+1
 15972  0131E8  C062  F079         	movff	?___lldiv+2,Timer0_Init@DIVIDE+2
 15973  0131EC  C063  F07A         	movff	?___lldiv+3,Timer0_Init@DIVIDE+3
 15974                           
 15975                           ;Timer0.c: 49: while ((DIVIDE/PRESCALE[INDEX]) > 0xFFFF)
 15976  0131F0  D00C               	goto	l1787
 15977  0131F2                     l13529:
 15978                           
 15979                           ;Timer0.c: 50: {
 15980                           ;Timer0.c: 51: INDEX ++;
 15981  0131F2  0100               	movlb	0	; () banked
 15982  0131F4  2BDC               	incf	_INDEX& (0+255),f,b
 15983                           
 15984                           ; BSR set to: 0
 15985                           ;Timer0.c: 52: if (INDEX >= 3)
 15986  0131F6  0E02               	movlw	2
 15987  0131F8  0100               	movlb	0	; () banked
 15988  0131FA  65DC               	cpfsgt	_INDEX& (0+255),b
 15989  0131FC  D001               	goto	l1785
 15990  0131FE  D02F               	goto	u10070
 15991  013200                     l1785:
 15992                           
 15993                           ; BSR set to: 0
 15994                           ;Timer0.c: 56: if (INDEX >= 8)
 15995                           
 15996                           ; BSR set to: 0
 15997  013200  0E07               	movlw	7
 15998  013202  0100               	movlb	0	; () banked
 15999  013204  65DC               	cpfsgt	_INDEX& (0+255),b
 16000  013206  D001               	goto	l1787
 16001  013208  0012               	return	
 16002  01320A                     l1787:
 16003                           
 16004                           ; BSR set to: 0
 16005                           
 16006                           ; BSR set to: 0
 16007  01320A  C077  F060         	movff	Timer0_Init@DIVIDE,___lldiv@dividend
 16008  01320E  C078  F061         	movff	Timer0_Init@DIVIDE+1,___lldiv@dividend+1
 16009  013212  C079  F062         	movff	Timer0_Init@DIVIDE+2,___lldiv@dividend+2
 16010  013216  C07A  F063         	movff	Timer0_Init@DIVIDE+3,___lldiv@dividend+3
 16011  01321A  0100               	movlb	0	; () banked
 16012  01321C  51DC               	movf	_INDEX& (0+255),w,b
 16013  01321E  0D02               	mullw	2
 16014  013220  0E75               	movlw	low Timer0_Init@PRESCALE
 16015  013222  24F3               	addwf	prodl,w,c
 16016  013224  6EF6               	movwf	tblptrl,c
 16017  013226  0EFD               	movlw	high Timer0_Init@PRESCALE
 16018  013228  20F4               	addwfc	prodh,w,c
 16019  01322A  6EF7               	movwf	tblptrh,c
 16020  01322C                     	if	1	;There are 3 active tblptr bytes
 16021  01322C  6AF8               	clrf	tblptru,c
 16022  01322E  0E00               	movlw	low (__mediumconst shr (0+16))
 16023  013230  22F8               	addwfc	tblptru,f,c
 16024  013232                     	endif
 16025  013232  0009               	tblrd		*+
 16026  013234  CFF5 F071          	movff	tablat,??_Timer0_Init
 16027  013238  0009               	tblrd		*+
 16028  01323A  CFF5 F072          	movff	tablat,??_Timer0_Init+1
 16029  01323E  C071  F064         	movff	??_Timer0_Init,___lldiv@divisor
 16030  013242  C072  F065         	movff	??_Timer0_Init+1,___lldiv@divisor+1
 16031  013246  0100               	movlb	0	; () banked
 16032  013248  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 16033  01324A  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 16034  01324C  EC0B  F0A0         	call	___lldiv	;wreg free
 16035  013250  0100               	movlb	0	; () banked
 16036  013252  5163               	movf	(?___lldiv+3)& (0+255),w,b
 16037  013254  E1CE               	bnz	l13529
 16038  013256  0100               	movlb	0	; () banked
 16039  013258  0562               	decf	(?___lldiv+2)& (0+255),w,b
 16040  01325A  B0D8               	btfsc	status,0,c
 16041  01325C  D7CA               	goto	l1784
 16042  01325E                     u10070:
 16043                           
 16044                           ; BSR set to: 0
 16045                           ;Timer0.c: 58: }
 16046                           ;Timer0.c: 62: PRE = PRESCALE[INDEX];
 16047                           
 16048                           ; BSR set to: 0
 16049  01325E  0100               	movlb	0	; () banked
 16050  013260  51DC               	movf	_INDEX& (0+255),w,b
 16051  013262  0D02               	mullw	2
 16052  013264  0E75               	movlw	low Timer0_Init@PRESCALE
 16053  013266  24F3               	addwf	prodl,w,c
 16054  013268  6EF6               	movwf	tblptrl,c
 16055  01326A  0EFD               	movlw	high Timer0_Init@PRESCALE
 16056  01326C  20F4               	addwfc	prodh,w,c
 16057  01326E  6EF7               	movwf	tblptrh,c
 16058  013270                     	if	1	;There are 3 active tblptr bytes
 16059  013270  6AF8               	clrf	tblptru,c
 16060  013272  0E00               	movlw	low (__mediumconst shr (0+16))
 16061  013274  22F8               	addwfc	tblptru,f,c
 16062  013276                     	endif
 16063  013276  0008               	tblrd		*
 16064  013278  CFF5 F0DB          	movff	tablat,Timer0_Init@PRE
 16065                           
 16066                           ; BSR set to: 0
 16067                           ;Timer0.c: 63: DIV = (DIVIDE-1);
 16068  01327C  0EFF               	movlw	255
 16069  01327E  0100               	movlb	0	; () banked
 16070  013280  2577               	addwf	Timer0_Init@DIVIDE& (0+255),w,b
 16071  013282  0103               	movlb	3	; () banked
 16072  013284  6F10               	movwf	Timer0_Init@DIV& (0+255),b
 16073  013286  0EFF               	movlw	255
 16074  013288  0100               	movlb	0	; () banked
 16075  01328A  2178               	addwfc	(Timer0_Init@DIVIDE+1)& (0+255),w,b
 16076  01328C  0103               	movlb	3	; () banked
 16077  01328E  6F11               	movwf	(Timer0_Init@DIV+1)& (0+255),b
 16078  013290  0EFF               	movlw	255
 16079  013292  0100               	movlb	0	; () banked
 16080  013294  2179               	addwfc	(Timer0_Init@DIVIDE+2)& (0+255),w,b
 16081  013296  0103               	movlb	3	; () banked
 16082  013298  6F12               	movwf	(Timer0_Init@DIV+2)& (0+255),b
 16083  01329A  0EFF               	movlw	255
 16084  01329C  0100               	movlb	0	; () banked
 16085  01329E  217A               	addwfc	(Timer0_Init@DIVIDE+3)& (0+255),w,b
 16086  0132A0  0103               	movlb	3	; () banked
 16087  0132A2  6F13               	movwf	(Timer0_Init@DIV+3)& (0+255),b
 16088                           
 16089                           ; BSR set to: 3
 16090                           ;Timer0.c: 65: COUNTER = 0xFFFF-DIV/PRE;
 16091  0132A4  C310  F060         	movff	Timer0_Init@DIV,___lldiv@dividend
 16092  0132A8  C311  F061         	movff	Timer0_Init@DIV+1,___lldiv@dividend+1
 16093  0132AC  C312  F062         	movff	Timer0_Init@DIV+2,___lldiv@dividend+2
 16094  0132B0  C313  F063         	movff	Timer0_Init@DIV+3,___lldiv@dividend+3
 16095  0132B4  0100               	movlb	0	; () banked
 16096  0132B6  51DB               	movf	Timer0_Init@PRE& (0+255),w,b
 16097  0132B8  0100               	movlb	0	; () banked
 16098  0132BA  6F64               	movwf	___lldiv@divisor& (0+255),b
 16099  0132BC  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 16100  0132BE  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 16101  0132C0  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 16102  0132C2  EC0B  F0A0         	call	___lldiv	;wreg free
 16103  0132C6  0100               	movlb	0	; () banked
 16104  0132C8  1F60               	comf	?___lldiv& (0+255),f,b
 16105  0132CA  0100               	movlb	0	; () banked
 16106  0132CC  1F61               	comf	(?___lldiv+1)& (0+255),f,b
 16107  0132CE  0100               	movlb	0	; () banked
 16108  0132D0  4B60               	infsnz	?___lldiv& (0+255),f,b
 16109  0132D2  2B61               	incf	(?___lldiv+1)& (0+255),f,b
 16110  0132D4  0EFF               	movlw	255
 16111  0132D6  0100               	movlb	0	; () banked
 16112  0132D8  2560               	addwf	?___lldiv& (0+255),w,b
 16113  0132DA  6E29               	movwf	_COUNTER,c
 16114  0132DC  0EFF               	movlw	255
 16115  0132DE  0100               	movlb	0	; () banked
 16116  0132E0  2161               	addwfc	(?___lldiv+1)& (0+255),w,b
 16117  0132E2  6E2A               	movwf	_COUNTER+1,c
 16118                           
 16119                           ; BSR set to: 0
 16120                           ;Timer0.c: 68: Timer0_Clear();
 16121  0132E4  EC79  F0B2         	call	_Timer0_Clear	;wreg free
 16122                           
 16123                           ;Timer0.c: 71: T0CONbits.TMR0ON = 1;
 16124  0132E8  8ED5               	bsf	4053,7,c	;volatile
 16125  0132EA  0012               	return		;funcret
 16126  0132EC                     __end_of_Timer0_Init:
 16127                           	opt stack 0
 16128                           tosu	equ	0xFFF
 16129                           tosh	equ	0xFFE
 16130                           tosl	equ	0xFFD
 16131                           pclath	equ	0xFFA
 16132                           tblptru	equ	0xFF8
 16133                           tblptrh	equ	0xFF7
 16134                           tblptrl	equ	0xFF6
 16135                           tablat	equ	0xFF5
 16136                           prodh	equ	0xFF4
 16137                           prodl	equ	0xFF3
 16138                           intcon	equ	0xFF2
 16139                           postinc0	equ	0xFEE
 16140                           wreg	equ	0xFE8
 16141                           indf1	equ	0xFE7
 16142                           postdec1	equ	0xFE5
 16143                           fsr1h	equ	0xFE2
 16144                           fsr1l	equ	0xFE1
 16145                           indf2	equ	0xFDF
 16146                           postinc2	equ	0xFDE
 16147                           postdec2	equ	0xFDD
 16148                           plusw2	equ	0xFDB
 16149                           fsr2h	equ	0xFDA
 16150                           fsr2l	equ	0xFD9
 16151                           status	equ	0xFD8
 16152                           
 16153 ;; *************** function _Timer0_Clear *****************
 16154 ;; Defined at:
 16155 ;;		line 20 in file "Library/Timer0.c"
 16156 ;; Parameters:    Size  Location     Type
 16157 ;;		None
 16158 ;; Auto vars:     Size  Location     Type
 16159 ;;		None
 16160 ;; Return value:  Size  Location     Type
 16161 ;;                  1    wreg      void 
 16162 ;; Registers used:
 16163 ;;		None
 16164 ;; Tracked objects:
 16165 ;;		On entry : 0/0
 16166 ;;		On exit  : 0/0
 16167 ;;		Unchanged: 0/0
 16168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16172 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16173 ;;Total ram usage:        0 bytes
 16174 ;; Hardware stack levels used:    1
 16175 ;; Hardware stack levels required when called:    7
 16176 ;; This function calls:
 16177 ;;		Nothing
 16178 ;; This function is called by:
 16179 ;;		_Timer0_Init
 16180 ;; This function uses a non-reentrant model
 16181 ;;
 16182                           
 16183                           	psect	text73
 16184  0164F2                     __ptext73:
 16185                           	opt stack 0
 16186  0164F2                     _Timer0_Clear:
 16187                           	opt stack 20
 16188                           
 16189                           ;Timer0.c: 22: TMR0 = COUNTER;
 16190                           
 16191                           ;incstack = 0
 16192  0164F2  C029  FFD6         	movff	_COUNTER,4054	;volatile
 16193  0164F6  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 16194                           
 16195                           ;Timer0.c: 23: INTCONbits.TMR0IF = 0;
 16196  0164FA  94F2               	bcf	intcon,2,c	;volatile
 16197  0164FC  0012               	return		;funcret
 16198  0164FE                     __end_of_Timer0_Clear:
 16199                           	opt stack 0
 16200                           tosu	equ	0xFFF
 16201                           tosh	equ	0xFFE
 16202                           tosl	equ	0xFFD
 16203                           pclath	equ	0xFFA
 16204                           tblptru	equ	0xFF8
 16205                           tblptrh	equ	0xFF7
 16206                           tblptrl	equ	0xFF6
 16207                           tablat	equ	0xFF5
 16208                           prodh	equ	0xFF4
 16209                           prodl	equ	0xFF3
 16210                           intcon	equ	0xFF2
 16211                           postinc0	equ	0xFEE
 16212                           wreg	equ	0xFE8
 16213                           indf1	equ	0xFE7
 16214                           postdec1	equ	0xFE5
 16215                           fsr1h	equ	0xFE2
 16216                           fsr1l	equ	0xFE1
 16217                           indf2	equ	0xFDF
 16218                           postinc2	equ	0xFDE
 16219                           postdec2	equ	0xFDD
 16220                           plusw2	equ	0xFDB
 16221                           fsr2h	equ	0xFDA
 16222                           fsr2l	equ	0xFD9
 16223                           status	equ	0xFD8
 16224                           
 16225 ;; *************** function _MXK_Init *****************
 16226 ;; Defined at:
 16227 ;;		line 33 in file "Library/MXK.c"
 16228 ;; Parameters:    Size  Location     Type
 16229 ;;		None
 16230 ;; Auto vars:     Size  Location     Type
 16231 ;;		None
 16232 ;; Return value:  Size  Location     Type
 16233 ;;                  1    wreg      void 
 16234 ;; Registers used:
 16235 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16236 ;; Tracked objects:
 16237 ;;		On entry : 0/0
 16238 ;;		On exit  : 0/0
 16239 ;;		Unchanged: 0/0
 16240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16244 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16245 ;;Total ram usage:        0 bytes
 16246 ;; Hardware stack levels used:    1
 16247 ;; Hardware stack levels required when called:   16
 16248 ;; This function calls:
 16249 ;;		_LED_Init
 16250 ;;		_Port_Init
 16251 ;;		_Port_SetPin
 16252 ;;		_Port_SetPinType
 16253 ;;		_Port_SetQuadType
 16254 ;;		_Port_SetType
 16255 ;;		_delay_ms
 16256 ;; This function is called by:
 16257 ;;		_init
 16258 ;; This function uses a non-reentrant model
 16259 ;;
 16260                           
 16261                           	psect	text74
 16262  012D34                     __ptext74:
 16263                           	opt stack 0
 16264  012D34                     _MXK_Init:
 16265                           	opt stack 13
 16266                           
 16267                           ;MXK.c: 35: Bus_State = eMXK_Idle;
 16268                           
 16269                           ;incstack = 0
 16270  012D34  0E01               	movlw	1
 16271  012D36  6E4B               	movwf	_Bus_State,c
 16272                           
 16273                           ;MXK.c: 36: lQueue = (Function)0;
 16274  012D38  0E00               	movlw	0
 16275  012D3A  0100               	movlb	0	; () banked
 16276  012D3C  6FBA               	movwf	_lQueue& (0+255),b	;volatile
 16277  012D3E  0E00               	movlw	0
 16278  012D40  0100               	movlb	0	; () banked
 16279  012D42  6FBB               	movwf	(_lQueue+1)& (0+255),b	;volatile
 16280  012D44  0E00               	movlw	0
 16281  012D46  0100               	movlb	0	; () banked
 16282  012D48  6FBC               	movwf	(_lQueue+2)& (0+255),b	;volatile
 16283                           
 16284                           ; BSR set to: 0
 16285                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
 16286  012D4A  0EAD               	movlw	low _PortA
 16287  012D4C  0100               	movlb	0	; () banked
 16288  012D4E  6FA0               	movwf	Port_Init@pInput& (0+255),b
 16289  012D50  0E03               	movlw	high _PortA
 16290  012D52  0100               	movlb	0	; () banked
 16291  012D54  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 16292  012D56  0E00               	movlw	0
 16293  012D58  0100               	movlb	0	; () banked
 16294  012D5A  6FA2               	movwf	Port_Init@pPort& (0+255),b
 16295  012D5C  EC0E  F095         	call	_Port_Init	;wreg free
 16296                           
 16297                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
 16298  012D60  0EA3               	movlw	low _PortB
 16299  012D62  0100               	movlb	0	; () banked
 16300  012D64  6FA0               	movwf	Port_Init@pInput& (0+255),b
 16301  012D66  0E03               	movlw	high _PortB
 16302  012D68  0100               	movlb	0	; () banked
 16303  012D6A  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 16304  012D6C  0E01               	movlw	1
 16305  012D6E  0100               	movlb	0	; () banked
 16306  012D70  6FA2               	movwf	Port_Init@pPort& (0+255),b
 16307  012D72  EC0E  F095         	call	_Port_Init	;wreg free
 16308                           
 16309                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
 16310  012D76  0EEA               	movlw	low _PortC
 16311  012D78  0100               	movlb	0	; () banked
 16312  012D7A  6FA0               	movwf	Port_Init@pInput& (0+255),b
 16313  012D7C  0E00               	movlw	high _PortC
 16314  012D7E  0100               	movlb	0	; () banked
 16315  012D80  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 16316  012D82  0E02               	movlw	2
 16317  012D84  0100               	movlb	0	; () banked
 16318  012D86  6FA2               	movwf	Port_Init@pPort& (0+255),b
 16319  012D88  EC0E  F095         	call	_Port_Init	;wreg free
 16320                           
 16321                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
 16322  012D8C  0EE0               	movlw	low _PortD
 16323  012D8E  0100               	movlb	0	; () banked
 16324  012D90  6FA0               	movwf	Port_Init@pInput& (0+255),b
 16325  012D92  0E00               	movlw	high _PortD
 16326  012D94  0100               	movlb	0	; () banked
 16327  012D96  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 16328  012D98  0E03               	movlw	3
 16329  012D9A  0100               	movlb	0	; () banked
 16330  012D9C  6FA2               	movwf	Port_Init@pPort& (0+255),b
 16331  012D9E  EC0E  F095         	call	_Port_Init	;wreg free
 16332                           
 16333                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
 16334  012DA2  0E99               	movlw	low _PortE
 16335  012DA4  0100               	movlb	0	; () banked
 16336  012DA6  6FA0               	movwf	Port_Init@pInput& (0+255),b
 16337  012DA8  0E03               	movlw	high _PortE
 16338  012DAA  0100               	movlb	0	; () banked
 16339  012DAC  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 16340  012DAE  0E04               	movlw	4
 16341  012DB0  0100               	movlb	0	; () banked
 16342  012DB2  6FA2               	movwf	Port_Init@pPort& (0+255),b
 16343  012DB4  EC0E  F095         	call	_Port_Init	;wreg free
 16344                           
 16345                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
 16346  012DB8  0EB7               	movlw	low _PortF
 16347  012DBA  0100               	movlb	0	; () banked
 16348  012DBC  6FA0               	movwf	Port_Init@pInput& (0+255),b
 16349  012DBE  0E03               	movlw	high _PortF
 16350  012DC0  0100               	movlb	0	; () banked
 16351  012DC2  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 16352  012DC4  0E05               	movlw	5
 16353  012DC6  0100               	movlb	0	; () banked
 16354  012DC8  6FA2               	movwf	Port_Init@pPort& (0+255),b
 16355  012DCA  EC0E  F095         	call	_Port_Init	;wreg free
 16356                           
 16357                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
 16358  012DCE  0E8F               	movlw	low _PortG
 16359  012DD0  0100               	movlb	0	; () banked
 16360  012DD2  6FA0               	movwf	Port_Init@pInput& (0+255),b
 16361  012DD4  0E03               	movlw	high _PortG
 16362  012DD6  0100               	movlb	0	; () banked
 16363  012DD8  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 16364  012DDA  0E06               	movlw	6
 16365  012DDC  0100               	movlb	0	; () banked
 16366  012DDE  6FA2               	movwf	Port_Init@pPort& (0+255),b
 16367  012DE0  EC0E  F095         	call	_Port_Init	;wreg free
 16368                           
 16369                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
 16370  012DE4  0EB7               	movlw	low _PortF
 16371  012DE6  0100               	movlb	0	; () banked
 16372  012DE8  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 16373  012DEA  0E03               	movlw	high _PortF
 16374  012DEC  0100               	movlb	0	; () banked
 16375  012DEE  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16376  012DF0  0E05               	movlw	5
 16377  012DF2  0100               	movlb	0	; () banked
 16378  012DF4  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 16379  012DF6  0E00               	movlw	0
 16380  012DF8  0100               	movlb	0	; () banked
 16381  012DFA  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 16382  012DFC  EC5F  F093         	call	_Port_SetPinType	;wreg free
 16383                           
 16384                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
 16385  012E00  0EA3               	movlw	low _PortB
 16386  012E02  0100               	movlb	0	; () banked
 16387  012E04  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
 16388  012E06  0E03               	movlw	high _PortB
 16389  012E08  0100               	movlb	0	; () banked
 16390  012E0A  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 16391  012E0C  0E00               	movlw	0
 16392  012E0E  0100               	movlb	0	; () banked
 16393  012E10  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
 16394  012E12  0E00               	movlw	0
 16395  012E14  0100               	movlb	0	; () banked
 16396  012E16  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
 16397  012E18  EC52  F08D         	call	_Port_SetQuadType	;wreg free
 16398                           
 16399                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
 16400  012E1C  0EB7               	movlw	low _PortF
 16401  012E1E  0100               	movlb	0	; () banked
 16402  012E20  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 16403  012E22  0E03               	movlw	high _PortF
 16404  012E24  0100               	movlb	0	; () banked
 16405  012E26  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16406  012E28  0E06               	movlw	6
 16407  012E2A  0100               	movlb	0	; () banked
 16408  012E2C  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 16409  012E2E  0E03               	movlw	3
 16410  012E30  0100               	movlb	0	; () banked
 16411  012E32  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 16412  012E34  EC5F  F093         	call	_Port_SetPinType	;wreg free
 16413                           
 16414                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
 16415  012E38  0E8F               	movlw	low _PortG
 16416  012E3A  0100               	movlb	0	; () banked
 16417  012E3C  6F9A               	movwf	Port_SetType@pInput& (0+255),b
 16418  012E3E  0E03               	movlw	high _PortG
 16419  012E40  0100               	movlb	0	; () banked
 16420  012E42  6F9B               	movwf	(Port_SetType@pInput+1)& (0+255),b
 16421  012E44  0E03               	movlw	3
 16422  012E46  0100               	movlb	0	; () banked
 16423  012E48  6F9C               	movwf	Port_SetType@pType& (0+255),b
 16424  012E4A  EC7D  F08E         	call	_Port_SetType	;wreg free
 16425                           
 16426                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
 16427  012E4E  0E8F               	movlw	low _PortG
 16428  012E50  0100               	movlb	0	; () banked
 16429  012E52  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 16430  012E54  0E03               	movlw	high _PortG
 16431  012E56  0100               	movlb	0	; () banked
 16432  012E58  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16433  012E5A  0E04               	movlw	4
 16434  012E5C  0100               	movlb	0	; () banked
 16435  012E5E  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 16436  012E60  0E00               	movlw	0
 16437  012E62  0100               	movlb	0	; () banked
 16438  012E64  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 16439  012E66  ECE9  F09E         	call	_Port_SetPin	;wreg free
 16440                           
 16441                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
 16442  012E6A  0EB7               	movlw	low _PortF
 16443  012E6C  0100               	movlb	0	; () banked
 16444  012E6E  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 16445  012E70  0E03               	movlw	high _PortF
 16446  012E72  0100               	movlb	0	; () banked
 16447  012E74  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16448  012E76  0E06               	movlw	6
 16449  012E78  0100               	movlb	0	; () banked
 16450  012E7A  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 16451  012E7C  0E01               	movlw	1
 16452  012E7E  0100               	movlb	0	; () banked
 16453  012E80  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 16454  012E82  ECE9  F09E         	call	_Port_SetPin	;wreg free
 16455                           
 16456                           ;MXK.c: 55: LED_Init(eLED1);
 16457  012E86  0E00               	movlw	0
 16458  012E88  EC8C  F0AB         	call	_LED_Init
 16459                           
 16460                           ;MXK.c: 56: LED_Init(eLED2);
 16461  012E8C  0E01               	movlw	1
 16462  012E8E  EC8C  F0AB         	call	_LED_Init
 16463                           
 16464                           ;MXK.c: 58: PIR1 = 0;
 16465  012E92  0E00               	movlw	0
 16466  012E94  6E9E               	movwf	3998,c	;volatile
 16467                           
 16468                           ;MXK.c: 59: PIR2 = 0;
 16469  012E96  0E00               	movlw	0
 16470  012E98  6EA1               	movwf	4001,c	;volatile
 16471                           
 16472                           ;MXK.c: 60: PIR3 = 0;
 16473  012E9A  0E00               	movlw	0
 16474  012E9C  6EA4               	movwf	4004,c	;volatile
 16475                           
 16476                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
 16477  012E9E  8E9B               	bsf	3995,7,c	;volatile
 16478                           
 16479                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
 16480  012EA0  8C9B               	bsf	3995,6,c	;volatile
 16481                           
 16482                           ;MXK.c: 66: delay_ms(100);
 16483  012EA2  0E00               	movlw	0
 16484  012EA4  0100               	movlb	0	; () banked
 16485  012EA6  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 16486  012EA8  0E64               	movlw	100
 16487  012EAA  6F60               	movwf	delay_ms@ms& (0+255),b
 16488  012EAC  ECF6  F0A9         	call	_delay_ms	;wreg free
 16489                           
 16490                           ;MXK.c: 68: RCONbits.IPEN = 1;
 16491  012EB0  8ED0               	bsf	4048,7,c	;volatile
 16492  012EB2  0012               	return		;funcret
 16493  012EB4                     __end_of_MXK_Init:
 16494                           	opt stack 0
 16495                           tosu	equ	0xFFF
 16496                           tosh	equ	0xFFE
 16497                           tosl	equ	0xFFD
 16498                           pclath	equ	0xFFA
 16499                           tblptru	equ	0xFF8
 16500                           tblptrh	equ	0xFF7
 16501                           tblptrl	equ	0xFF6
 16502                           tablat	equ	0xFF5
 16503                           prodh	equ	0xFF4
 16504                           prodl	equ	0xFF3
 16505                           intcon	equ	0xFF2
 16506                           postinc0	equ	0xFEE
 16507                           wreg	equ	0xFE8
 16508                           indf1	equ	0xFE7
 16509                           postdec1	equ	0xFE5
 16510                           fsr1h	equ	0xFE2
 16511                           fsr1l	equ	0xFE1
 16512                           indf2	equ	0xFDF
 16513                           postinc2	equ	0xFDE
 16514                           postdec2	equ	0xFDD
 16515                           plusw2	equ	0xFDB
 16516                           fsr2h	equ	0xFDA
 16517                           fsr2l	equ	0xFD9
 16518                           status	equ	0xFD8
 16519                           
 16520 ;; *************** function _Port_Init *****************
 16521 ;; Defined at:
 16522 ;;		line 150 in file "Library/Port.c"
 16523 ;; Parameters:    Size  Location     Type
 16524 ;;  pInput          2   64[BANK0 ] const PTR struct Port
 16525 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16526 ;;		 -> PortD(10), PortC(10), PortF(10), 
 16527 ;;  pPort           1   66[BANK0 ] enum E6786
 16528 ;; Auto vars:     Size  Location     Type
 16529 ;;  i               1   69[BANK0 ] unsigned char 
 16530 ;; Return value:  Size  Location     Type
 16531 ;;                  1    wreg      void 
 16532 ;; Registers used:
 16533 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16534 ;; Tracked objects:
 16535 ;;		On entry : 0/0
 16536 ;;		On exit  : 0/0
 16537 ;;		Unchanged: 0/0
 16538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16539 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16540 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16541 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16542 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16543 ;;Total ram usage:        6 bytes
 16544 ;; Hardware stack levels used:    1
 16545 ;; Hardware stack levels required when called:   15
 16546 ;; This function calls:
 16547 ;;		_GetPortPORT
 16548 ;;		_GetPortProperties
 16549 ;;		_GetPortTRIS
 16550 ;;		_Port_Set
 16551 ;;		_Port_SetPinType
 16552 ;;		_Port_SetType
 16553 ;;		_Word_GetPair
 16554 ;; This function is called by:
 16555 ;;		_MXK_Init
 16556 ;; This function uses a non-reentrant model
 16557 ;;
 16558                           
 16559                           	psect	text75
 16560  012A1C                     __ptext75:
 16561                           	opt stack 0
 16562  012A1C                     _Port_Init:
 16563                           	opt stack 13
 16564                           
 16565                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
 16566                           
 16567                           ;incstack = 0
 16568  012A1C  0100               	movlb	0	; () banked
 16569  012A1E  51A2               	movf	Port_Init@pPort& (0+255),w,b
 16570  012A20  EC7E  F0A3         	call	_GetPortProperties
 16571  012A24  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
 16572  012A28  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
 16573  012A2C  0100               	movlb	0	; () banked
 16574  012A2E  C060  FFDE         	movff	?_GetPortProperties,postinc2
 16575  012A32  0100               	movlb	0	; () banked
 16576  012A34  C061  FFDD         	movff	?_GetPortProperties+1,postdec2
 16577                           
 16578                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
 16579  012A38  0100               	movlb	0	; () banked
 16580  012A3A  51A2               	movf	Port_Init@pPort& (0+255),w,b
 16581  012A3C  ECD1  F0A3         	call	_GetPortPORT
 16582  012A40  0100               	movlb	0	; () banked
 16583  012A42  EE20 F006          	lfsr	2,6
 16584  012A46  51A0               	movf	Port_Init@pInput& (0+255),w,b
 16585  012A48  26D9               	addwf	fsr2l,f,c
 16586  012A4A  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 16587  012A4C  22DA               	addwfc	fsr2h,f,c
 16588  012A4E  0100               	movlb	0	; () banked
 16589  012A50  C060  FFDE         	movff	?_GetPortPORT,postinc2
 16590  012A54  0100               	movlb	0	; () banked
 16591  012A56  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
 16592                           
 16593                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
 16594  012A5A  0100               	movlb	0	; () banked
 16595  012A5C  51A2               	movf	Port_Init@pPort& (0+255),w,b
 16596  012A5E  ECD1  F0A3         	call	_GetPortPORT
 16597  012A62  0100               	movlb	0	; () banked
 16598  012A64  EE20 F004          	lfsr	2,4
 16599  012A68  51A0               	movf	Port_Init@pInput& (0+255),w,b
 16600  012A6A  26D9               	addwf	fsr2l,f,c
 16601  012A6C  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 16602  012A6E  22DA               	addwfc	fsr2h,f,c
 16603  012A70  0100               	movlb	0	; () banked
 16604  012A72  C060  FFDE         	movff	?_GetPortPORT,postinc2
 16605  012A76  0100               	movlb	0	; () banked
 16606  012A78  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
 16607                           
 16608                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
 16609  012A7C  0100               	movlb	0	; () banked
 16610  012A7E  51A2               	movf	Port_Init@pPort& (0+255),w,b
 16611  012A80  EC2B  F0A3         	call	_GetPortTRIS
 16612  012A84  0100               	movlb	0	; () banked
 16613  012A86  EE20 F002          	lfsr	2,2
 16614  012A8A  51A0               	movf	Port_Init@pInput& (0+255),w,b
 16615  012A8C  26D9               	addwf	fsr2l,f,c
 16616  012A8E  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 16617  012A90  22DA               	addwfc	fsr2h,f,c
 16618  012A92  0100               	movlb	0	; () banked
 16619  012A94  C060  FFDE         	movff	?_GetPortTRIS,postinc2
 16620  012A98  0100               	movlb	0	; () banked
 16621  012A9A  C061  FFDD         	movff	?_GetPortTRIS+1,postdec2
 16622                           
 16623                           ; BSR set to: 0
 16624                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
 16625  012A9E  0100               	movlb	0	; () banked
 16626  012AA0  EE20 F004          	lfsr	2,4
 16627  012AA4  51A0               	movf	Port_Init@pInput& (0+255),w,b
 16628  012AA6  26D9               	addwf	fsr2l,f,c
 16629  012AA8  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 16630  012AAA  22DA               	addwfc	fsr2h,f,c
 16631  012AAC  CFDE F0A3          	movff	postinc2,??_Port_Init
 16632  012AB0  CFDD F0A4          	movff	postdec2,??_Port_Init+1
 16633  012AB4  C0A3  FFD9         	movff	??_Port_Init,fsr2l
 16634  012AB8  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
 16635  012ABC  0E00               	movlw	0
 16636  012ABE  6EDF               	movwf	indf2,c
 16637                           
 16638                           ; BSR set to: 0
 16639                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
 16640  012AC0  0100               	movlb	0	; () banked
 16641  012AC2  EE20 F002          	lfsr	2,2
 16642  012AC6  51A0               	movf	Port_Init@pInput& (0+255),w,b
 16643  012AC8  26D9               	addwf	fsr2l,f,c
 16644  012ACA  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 16645  012ACC  22DA               	addwfc	fsr2h,f,c
 16646  012ACE  CFDE F0A3          	movff	postinc2,??_Port_Init
 16647  012AD2  CFDD F0A4          	movff	postdec2,??_Port_Init+1
 16648  012AD6  C0A3  FFD9         	movff	??_Port_Init,fsr2l
 16649  012ADA  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
 16650  012ADE  0EFF               	movlw	255
 16651  012AE0  6EDF               	movwf	indf2,c
 16652                           
 16653                           ; BSR set to: 0
 16654                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
 16655  012AE2  C0A0  F09A         	movff	Port_Init@pInput,Port_SetType@pInput
 16656  012AE6  C0A1  F09B         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
 16657  012AEA  0E00               	movlw	0
 16658  012AEC  0100               	movlb	0	; () banked
 16659  012AEE  6F9C               	movwf	Port_SetType@pType& (0+255),b
 16660  012AF0  EC7D  F08E         	call	_Port_SetType	;wreg free
 16661                           
 16662                           ;Port.c: 166: UINT8 i;
 16663                           ;Port.c: 167: for (i=0; i<8; i++)
 16664  012AF4  0E00               	movlw	0
 16665  012AF6  0100               	movlb	0	; () banked
 16666  012AF8  6FA5               	movwf	Port_Init@i& (0+255),b
 16667  012AFA                     l13383:
 16668                           
 16669                           ; BSR set to: 0
 16670  012AFA  0E07               	movlw	7
 16671  012AFC  0100               	movlb	0	; () banked
 16672  012AFE  65A5               	cpfsgt	Port_Init@i& (0+255),b
 16673  012B00  D031               	goto	l403
 16674  012B02  D04B               	goto	u9870
 16675  012B04                     
 16676                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
 16677                           
 16678                           ; BSR set to: 0
 16679  012B04  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 16680  012B08  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 16681  012B0C  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 16682  012B10  0E03               	movlw	3
 16683  012B12  0100               	movlb	0	; () banked
 16684  012B14  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 16685  012B16  EC5F  F093         	call	_Port_SetPinType	;wreg free
 16686                           
 16687                           ;Port.c: 173: break;
 16688  012B1A  D03C               	goto	l405
 16689  012B1C                     
 16690                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
 16691  012B1C  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 16692  012B20  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 16693  012B24  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 16694  012B28  0E02               	movlw	2
 16695  012B2A  0100               	movlb	0	; () banked
 16696  012B2C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 16697  012B2E  EC5F  F093         	call	_Port_SetPinType	;wreg free
 16698                           
 16699                           ;Port.c: 176: break;
 16700  012B32  D030               	goto	l405
 16701  012B34                     
 16702                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
 16703  012B34  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 16704  012B38  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 16705  012B3C  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 16706  012B40  0E01               	movlw	1
 16707  012B42  0100               	movlb	0	; () banked
 16708  012B44  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 16709  012B46  EC5F  F093         	call	_Port_SetPinType	;wreg free
 16710                           
 16711                           ;Port.c: 179: break;
 16712  012B4A  D024               	goto	l405
 16713  012B4C                     
 16714                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
 16715  012B4C  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 16716  012B50  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 16717  012B54  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 16718  012B58  0E00               	movlw	0
 16719  012B5A  0100               	movlb	0	; () banked
 16720  012B5C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 16721  012B5E  EC5F  F093         	call	_Port_SetPinType	;wreg free
 16722                           
 16723                           ;Port.c: 183: }
 16724                           
 16725                           ;Port.c: 182: break;
 16726  012B62  D018               	goto	l405
 16727  012B64                     l403:
 16728  012B64  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
 16729  012B68  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
 16730  012B6C  CFDE F06C          	movff	postinc2,Word_GetPair@pInput
 16731  012B70  CFDD F06D          	movff	postdec2,Word_GetPair@pInput+1
 16732  012B74  C0A5  F06E         	movff	Port_Init@i,Word_GetPair@pPair
 16733  012B78  EC0C  F0AF         	call	_Word_GetPair	;wreg free
 16734                           
 16735                           ; Switch size 1, requested type "space"
 16736                           ; Number of cases is 4, Range of values is 0 to 3
 16737                           ; switch strategies available:
 16738                           ; Name         Instructions Cycles
 16739                           ; simple_byte           13     7 (average)
 16740                           ;	Chosen strategy is simple_byte
 16741  012B7C  0A00               	xorlw	0	; case 0
 16742  012B7E  B4D8               	btfsc	status,2,c
 16743  012B80  D7C1               	goto	l404
 16744  012B82  0A01               	xorlw	1	; case 1
 16745  012B84  B4D8               	btfsc	status,2,c
 16746  012B86  D7D6               	goto	l407
 16747  012B88  0A03               	xorlw	3	; case 2
 16748  012B8A  B4D8               	btfsc	status,2,c
 16749  012B8C  D7C7               	goto	l406
 16750  012B8E  0A01               	xorlw	1	; case 3
 16751  012B90  B4D8               	btfsc	status,2,c
 16752  012B92  D7DC               	goto	l408
 16753  012B94                     l405:
 16754  012B94  0100               	movlb	0	; () banked
 16755  012B96  2BA5               	incf	Port_Init@i& (0+255),f,b
 16756  012B98  D7B0               	goto	l13383
 16757  012B9A                     u9870:
 16758                           
 16759                           ; BSR set to: 0
 16760                           ;Port.c: 184: }
 16761                           ;Port.c: 185: Port_Set(pInput, 0x00);
 16762                           
 16763                           ; BSR set to: 0
 16764  012B9A  C0A0  F06F         	movff	Port_Init@pInput,Port_Set@pInput
 16765  012B9E  C0A1  F070         	movff	Port_Init@pInput+1,Port_Set@pInput+1
 16766  012BA2  0E00               	movlw	0
 16767  012BA4  0100               	movlb	0	; () banked
 16768  012BA6  6F71               	movwf	Port_Set@pValue& (0+255),b
 16769  012BA8  EC33  F08A         	call	_Port_Set	;wreg free
 16770  012BAC  0012               	return		;funcret
 16771  012BAE                     __end_of_Port_Init:
 16772                           	opt stack 0
 16773                           tosu	equ	0xFFF
 16774                           tosh	equ	0xFFE
 16775                           tosl	equ	0xFFD
 16776                           pclath	equ	0xFFA
 16777                           tblptru	equ	0xFF8
 16778                           tblptrh	equ	0xFF7
 16779                           tblptrl	equ	0xFF6
 16780                           tablat	equ	0xFF5
 16781                           prodh	equ	0xFF4
 16782                           prodl	equ	0xFF3
 16783                           intcon	equ	0xFF2
 16784                           postinc0	equ	0xFEE
 16785                           wreg	equ	0xFE8
 16786                           indf1	equ	0xFE7
 16787                           postdec1	equ	0xFE5
 16788                           fsr1h	equ	0xFE2
 16789                           fsr1l	equ	0xFE1
 16790                           indf2	equ	0xFDF
 16791                           postinc2	equ	0xFDE
 16792                           postdec2	equ	0xFDD
 16793                           plusw2	equ	0xFDB
 16794                           fsr2h	equ	0xFDA
 16795                           fsr2l	equ	0xFD9
 16796                           status	equ	0xFD8
 16797                           
 16798 ;; *************** function _Port_SetType *****************
 16799 ;; Defined at:
 16800 ;;		line 513 in file "Library/Port.c"
 16801 ;; Parameters:    Size  Location     Type
 16802 ;;  pInput          2   58[BANK0 ] const PTR struct Port
 16803 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16804 ;;		 -> PortD(10), PortC(10), PortF(10), 
 16805 ;;  pType           1   60[BANK0 ] enum E6795
 16806 ;; Auto vars:     Size  Location     Type
 16807 ;;  Output          1   63[BANK0 ] enum E6475
 16808 ;; Return value:  Size  Location     Type
 16809 ;;                  1    wreg      enum E6475
 16810 ;; Registers used:
 16811 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16812 ;; Tracked objects:
 16813 ;;		On entry : 0/0
 16814 ;;		On exit  : 0/0
 16815 ;;		Unchanged: 0/0
 16816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16817 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16818 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16819 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16820 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16821 ;;Total ram usage:        6 bytes
 16822 ;; Hardware stack levels used:    1
 16823 ;; Hardware stack levels required when called:   14
 16824 ;; This function calls:
 16825 ;;		_Port_CheckPortType
 16826 ;;		_Word_SetPair
 16827 ;; This function is called by:
 16828 ;;		_Port_Init
 16829 ;;		_MXK_Init
 16830 ;; This function uses a non-reentrant model
 16831 ;;
 16832                           
 16833                           	psect	text76
 16834  011CFA                     __ptext76:
 16835                           	opt stack 0
 16836  011CFA                     _Port_SetType:
 16837                           	opt stack 14
 16838                           
 16839                           ;Port.c: 515: ePinError Output = ePinErrorState;
 16840                           
 16841                           ;incstack = 0
 16842  011CFA  0E05               	movlw	5
 16843  011CFC  0100               	movlb	0	; () banked
 16844  011CFE  6F9F               	movwf	Port_SetType@Output& (0+255),b
 16845                           
 16846                           ;Port.c: 517: switch (pType)
 16847  011D00  D07A               	goto	l509
 16848  011D02                     
 16849                           ; BSR set to: 0
 16850                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
 16851                           
 16852                           ; BSR set to: 0
 16853  011D02  0100               	movlb	0	; () banked
 16854  011D04  EE20 F002          	lfsr	2,2
 16855  011D08  519A               	movf	Port_SetType@pInput& (0+255),w,b
 16856  011D0A  26D9               	addwf	fsr2l,f,c
 16857  011D0C  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 16858  011D0E  22DA               	addwfc	fsr2h,f,c
 16859  011D10  CFDE F09D          	movff	postinc2,??_Port_SetType
 16860  011D14  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 16861  011D18  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 16862  011D1C  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 16863  011D20  0EFF               	movlw	255
 16864  011D22  D067               	goto	L10
 16865  011D24                     
 16866                           ; BSR set to: 0
 16867                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
 16868                           
 16869                           ; BSR set to: 0
 16870  011D24  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 16871  011D28  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 16872  011D2C  0E01               	movlw	1
 16873  011D2E  0100               	movlb	0	; () banked
 16874  011D30  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
 16875  011D32  EC34  F0AD         	call	_Port_CheckPortType	;wreg free
 16876  011D36  0100               	movlb	0	; () banked
 16877  011D38  6F9F               	movwf	Port_SetType@Output& (0+255),b
 16878  011D3A  0100               	movlb	0	; () banked
 16879  011D3C  519F               	movf	Port_SetType@Output& (0+255),w,b
 16880  011D3E  A4D8               	btfss	status,2,c
 16881  011D40  0012               	return	
 16882                           
 16883                           ; BSR set to: 0
 16884                           ;Port.c: 527: {
 16885                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
 16886  011D42  0100               	movlb	0	; () banked
 16887  011D44  EE20 F002          	lfsr	2,2
 16888  011D48  519A               	movf	Port_SetType@pInput& (0+255),w,b
 16889  011D4A  26D9               	addwf	fsr2l,f,c
 16890  011D4C  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 16891  011D4E  22DA               	addwfc	fsr2h,f,c
 16892  011D50  CFDE F09D          	movff	postinc2,??_Port_SetType
 16893  011D54  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 16894  011D58  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 16895  011D5C  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 16896  011D60  0E00               	movlw	0
 16897  011D62  6EDF               	movwf	indf2,c
 16898                           
 16899                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
 16900  011D64  0100               	movlb	0	; () banked
 16901  011D66  EE20 F004          	lfsr	2,4
 16902  011D6A  D036               	goto	L21
 16903  011D6C                     
 16904                           ; BSR set to: 0
 16905                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
 16906                           
 16907                           ; BSR set to: 0
 16908  011D6C  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 16909  011D70  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 16910  011D74  0E02               	movlw	2
 16911  011D76  0100               	movlb	0	; () banked
 16912  011D78  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
 16913  011D7A  EC34  F0AD         	call	_Port_CheckPortType	;wreg free
 16914  011D7E  0100               	movlb	0	; () banked
 16915  011D80  6F9F               	movwf	Port_SetType@Output& (0+255),b
 16916  011D82  0100               	movlb	0	; () banked
 16917  011D84  519F               	movf	Port_SetType@Output& (0+255),w,b
 16918  011D86  A4D8               	btfss	status,2,c
 16919  011D88  0012               	return	
 16920                           
 16921                           ; BSR set to: 0
 16922                           ;Port.c: 538: {
 16923                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
 16924  011D8A  0100               	movlb	0	; () banked
 16925  011D8C  EE20 F002          	lfsr	2,2
 16926  011D90  519A               	movf	Port_SetType@pInput& (0+255),w,b
 16927  011D92  26D9               	addwf	fsr2l,f,c
 16928  011D94  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 16929  011D96  22DA               	addwfc	fsr2h,f,c
 16930  011D98  CFDE F09D          	movff	postinc2,??_Port_SetType
 16931  011D9C  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 16932  011DA0  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 16933  011DA4  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 16934  011DA8  0EFF               	movlw	255
 16935  011DAA  6EDF               	movwf	indf2,c
 16936                           
 16937                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
 16938  011DAC  0100               	movlb	0	; () banked
 16939  011DAE  EE20 F004          	lfsr	2,4
 16940  011DB2  D7AA               	goto	L11
 16941  011DB4                     
 16942                           ; BSR set to: 0
 16943                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
 16944                           
 16945                           ; BSR set to: 0
 16946  011DB4  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 16947  011DB8  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 16948  011DBC  0E00               	movlw	0
 16949  011DBE  0100               	movlb	0	; () banked
 16950  011DC0  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
 16951  011DC2  EC34  F0AD         	call	_Port_CheckPortType	;wreg free
 16952  011DC6  0100               	movlb	0	; () banked
 16953  011DC8  6F9F               	movwf	Port_SetType@Output& (0+255),b
 16954  011DCA  0100               	movlb	0	; () banked
 16955  011DCC  519F               	movf	Port_SetType@Output& (0+255),w,b
 16956  011DCE  A4D8               	btfss	status,2,c
 16957  011DD0  0012               	return	
 16958                           
 16959                           ; BSR set to: 0
 16960                           ;Port.c: 549: {
 16961                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
 16962  011DD2  0100               	movlb	0	; () banked
 16963  011DD4  EE20 F002          	lfsr	2,2
 16964  011DD8                     L21:
 16965  011DD8  519A               	movf	Port_SetType@pInput& (0+255),w,b
 16966  011DDA  26D9               	addwf	fsr2l,f,c
 16967  011DDC  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 16968  011DDE  22DA               	addwfc	fsr2h,f,c
 16969  011DE0  CFDE F09D          	movff	postinc2,??_Port_SetType
 16970  011DE4  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 16971  011DE8  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 16972  011DEC  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 16973  011DF0  0E00               	movlw	0
 16974  011DF2                     L10:
 16975  011DF2  6EDF               	movwf	indf2,c
 16976                           
 16977                           ;Port.c: 552: }
 16978  011DF4  D00E               	goto	l511
 16979  011DF6                     l509:
 16980                           
 16981                           ; BSR set to: 0
 16982                           
 16983                           ; BSR set to: 0
 16984  011DF6  0100               	movlb	0	; () banked
 16985  011DF8  519C               	movf	Port_SetType@pType& (0+255),w,b
 16986                           
 16987                           ; Switch size 1, requested type "space"
 16988                           ; Number of cases is 4, Range of values is 0 to 3
 16989                           ; switch strategies available:
 16990                           ; Name         Instructions Cycles
 16991                           ; simple_byte           13     7 (average)
 16992                           ;	Chosen strategy is simple_byte
 16993  011DFA  0A00               	xorlw	0	; case 0
 16994  011DFC  B4D8               	btfsc	status,2,c
 16995  011DFE  D781               	goto	l510
 16996  011E00  0A01               	xorlw	1	; case 1
 16997  011E02  B4D8               	btfsc	status,2,c
 16998  011E04  D78F               	goto	l512
 16999  011E06  0A03               	xorlw	3	; case 2
 17000  011E08  B4D8               	btfsc	status,2,c
 17001  011E0A  D7B0               	goto	l516
 17002  011E0C  0A01               	xorlw	1	; case 3
 17003  011E0E  B4D8               	btfsc	status,2,c
 17004  011E10  D7D1               	goto	l519
 17005  011E12                     l511:
 17006                           
 17007                           ; BSR set to: 0
 17008                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
 17009                           
 17010                           ; BSR set to: 0
 17011  011E12  0E08               	movlw	8
 17012  011E14  0100               	movlb	0	; () banked
 17013  011E16  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 17014  011E18  0100               	movlb	0	; () banked
 17015  011E1A  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 17016  011E1C  0E00               	movlw	0
 17017  011E1E  0100               	movlb	0	; () banked
 17018  011E20  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 17019  011E22  0100               	movlb	0	; () banked
 17020  011E24  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 17021  011E26  0E00               	movlw	0
 17022  011E28  0100               	movlb	0	; () banked
 17023  011E2A  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 17024  011E2C  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 17025  011E30  ECE6  F0AD         	call	_Word_SetPair	;wreg free
 17026                           
 17027                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
 17028  011E34  0E08               	movlw	8
 17029  011E36  0100               	movlb	0	; () banked
 17030  011E38  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 17031  011E3A  0100               	movlb	0	; () banked
 17032  011E3C  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 17033  011E3E  0E00               	movlw	0
 17034  011E40  0100               	movlb	0	; () banked
 17035  011E42  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 17036  011E44  0100               	movlb	0	; () banked
 17037  011E46  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 17038  011E48  0E01               	movlw	1
 17039  011E4A  0100               	movlb	0	; () banked
 17040  011E4C  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 17041  011E4E  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 17042  011E52  ECE6  F0AD         	call	_Word_SetPair	;wreg free
 17043                           
 17044                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
 17045  011E56  0E08               	movlw	8
 17046  011E58  0100               	movlb	0	; () banked
 17047  011E5A  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 17048  011E5C  0100               	movlb	0	; () banked
 17049  011E5E  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 17050  011E60  0E00               	movlw	0
 17051  011E62  0100               	movlb	0	; () banked
 17052  011E64  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 17053  011E66  0100               	movlb	0	; () banked
 17054  011E68  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 17055  011E6A  0E02               	movlw	2
 17056  011E6C  0100               	movlb	0	; () banked
 17057  011E6E  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 17058  011E70  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 17059  011E74  ECE6  F0AD         	call	_Word_SetPair	;wreg free
 17060                           
 17061                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
 17062  011E78  0E08               	movlw	8
 17063  011E7A  0100               	movlb	0	; () banked
 17064  011E7C  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 17065  011E7E  0100               	movlb	0	; () banked
 17066  011E80  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 17067  011E82  0E00               	movlw	0
 17068  011E84  0100               	movlb	0	; () banked
 17069  011E86  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 17070  011E88  0100               	movlb	0	; () banked
 17071  011E8A  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 17072  011E8C  0E03               	movlw	3
 17073  011E8E  0100               	movlb	0	; () banked
 17074  011E90  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 17075  011E92  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 17076  011E96  ECE6  F0AD         	call	_Word_SetPair	;wreg free
 17077                           
 17078                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
 17079  011E9A  0E08               	movlw	8
 17080  011E9C  0100               	movlb	0	; () banked
 17081  011E9E  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 17082  011EA0  0100               	movlb	0	; () banked
 17083  011EA2  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 17084  011EA4  0E00               	movlw	0
 17085  011EA6  0100               	movlb	0	; () banked
 17086  011EA8  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 17087  011EAA  0100               	movlb	0	; () banked
 17088  011EAC  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 17089  011EAE  0E04               	movlw	4
 17090  011EB0  0100               	movlb	0	; () banked
 17091  011EB2  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 17092  011EB4  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 17093  011EB8  ECE6  F0AD         	call	_Word_SetPair	;wreg free
 17094                           
 17095                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
 17096  011EBC  0E08               	movlw	8
 17097  011EBE  0100               	movlb	0	; () banked
 17098  011EC0  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 17099  011EC2  0100               	movlb	0	; () banked
 17100  011EC4  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 17101  011EC6  0E00               	movlw	0
 17102  011EC8  0100               	movlb	0	; () banked
 17103  011ECA  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 17104  011ECC  0100               	movlb	0	; () banked
 17105  011ECE  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 17106  011ED0  0E05               	movlw	5
 17107  011ED2  0100               	movlb	0	; () banked
 17108  011ED4  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 17109  011ED6  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 17110  011EDA  ECE6  F0AD         	call	_Word_SetPair	;wreg free
 17111                           
 17112                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
 17113  011EDE  0E08               	movlw	8
 17114  011EE0  0100               	movlb	0	; () banked
 17115  011EE2  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 17116  011EE4  0100               	movlb	0	; () banked
 17117  011EE6  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 17118  011EE8  0E00               	movlw	0
 17119  011EEA  0100               	movlb	0	; () banked
 17120  011EEC  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 17121  011EEE  0100               	movlb	0	; () banked
 17122  011EF0  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 17123  011EF2  0E06               	movlw	6
 17124  011EF4  0100               	movlb	0	; () banked
 17125  011EF6  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 17126  011EF8  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 17127  011EFC  ECE6  F0AD         	call	_Word_SetPair	;wreg free
 17128                           
 17129                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
 17130  011F00  0E08               	movlw	8
 17131  011F02  0100               	movlb	0	; () banked
 17132  011F04  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 17133  011F06  0100               	movlb	0	; () banked
 17134  011F08  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 17135  011F0A  0E00               	movlw	0
 17136  011F0C  0100               	movlb	0	; () banked
 17137  011F0E  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 17138  011F10  0100               	movlb	0	; () banked
 17139  011F12  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 17140  011F14  0E07               	movlw	7
 17141  011F16  0100               	movlb	0	; () banked
 17142  011F18  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 17143  011F1A  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 17144  011F1E  ECE6  F0AD         	call	_Word_SetPair	;wreg free
 17145  011F22  0012               	return	
 17146  011F24                     __end_of_Port_SetType:
 17147                           	opt stack 0
 17148                           tosu	equ	0xFFF
 17149                           tosh	equ	0xFFE
 17150                           tosl	equ	0xFFD
 17151                           pclath	equ	0xFFA
 17152                           tblptru	equ	0xFF8
 17153                           tblptrh	equ	0xFF7
 17154                           tblptrl	equ	0xFF6
 17155                           tablat	equ	0xFF5
 17156                           prodh	equ	0xFF4
 17157                           prodl	equ	0xFF3
 17158                           intcon	equ	0xFF2
 17159                           postinc0	equ	0xFEE
 17160                           wreg	equ	0xFE8
 17161                           indf1	equ	0xFE7
 17162                           postdec1	equ	0xFE5
 17163                           fsr1h	equ	0xFE2
 17164                           fsr1l	equ	0xFE1
 17165                           indf2	equ	0xFDF
 17166                           postinc2	equ	0xFDE
 17167                           postdec2	equ	0xFDD
 17168                           plusw2	equ	0xFDB
 17169                           fsr2h	equ	0xFDA
 17170                           fsr2l	equ	0xFD9
 17171                           status	equ	0xFD8
 17172                           
 17173 ;; *************** function _Port_CheckPortType *****************
 17174 ;; Defined at:
 17175 ;;		line 138 in file "Library/Port.c"
 17176 ;; Parameters:    Size  Location     Type
 17177 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 17178 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 17179 ;;		 -> PortD(10), PortC(10), PortF(10), 
 17180 ;;  pDrive          1   56[BANK0 ] enum E6469
 17181 ;; Auto vars:     Size  Location     Type
 17182 ;;  Output          1   57[BANK0 ] enum E6475
 17183 ;; Return value:  Size  Location     Type
 17184 ;;                  1    wreg      enum E6475
 17185 ;; Registers used:
 17186 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17187 ;; Tracked objects:
 17188 ;;		On entry : 0/0
 17189 ;;		On exit  : 0/0
 17190 ;;		Unchanged: 0/0
 17191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17192 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17193 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17195 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17196 ;;Total ram usage:        4 bytes
 17197 ;; Hardware stack levels used:    1
 17198 ;; Hardware stack levels required when called:   13
 17199 ;; This function calls:
 17200 ;;		_Port_CheckQuadType
 17201 ;; This function is called by:
 17202 ;;		_Port_SetType
 17203 ;; This function uses a non-reentrant model
 17204 ;;
 17205                           
 17206                           	psect	text77
 17207  015A68                     __ptext77:
 17208                           	opt stack 0
 17209  015A68                     _Port_CheckPortType:
 17210                           	opt stack 14
 17211                           
 17212                           ;Port.c: 140: ePinError Output = ePinErrorState;
 17213                           
 17214                           ;incstack = 0
 17215  015A68  0E05               	movlw	5
 17216  015A6A  0100               	movlb	0	; () banked
 17217  015A6C  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
 17218                           
 17219                           ; BSR set to: 0
 17220                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
 17221  015A6E  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 17222  015A72  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 17223  015A76  0E00               	movlw	0
 17224  015A78  0100               	movlb	0	; () banked
 17225  015A7A  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 17226  015A7C  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 17227  015A80  ECEB  F0AB         	call	_Port_CheckQuadType	;wreg free
 17228  015A84  0100               	movlb	0	; () banked
 17229  015A86  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
 17230  015A88  0100               	movlb	0	; () banked
 17231  015A8A  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
 17232  015A8C  A4D8               	btfss	status,2,c
 17233  015A8E  D00D               	goto	l397
 17234                           
 17235                           ; BSR set to: 0
 17236                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
 17237  015A90  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 17238  015A94  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 17239  015A98  0E01               	movlw	1
 17240  015A9A  0100               	movlb	0	; () banked
 17241  015A9C  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 17242  015A9E  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 17243  015AA2  ECEB  F0AB         	call	_Port_CheckQuadType	;wreg free
 17244  015AA6  0100               	movlb	0	; () banked
 17245  015AA8  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
 17246  015AAA                     l397:
 17247                           
 17248                           ; BSR set to: 0
 17249                           ;Port.c: 146: return Output;
 17250                           
 17251                           ; BSR set to: 0
 17252  015AAA  0100               	movlb	0	; () banked
 17253  015AAC  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
 17254  015AAE  0012               	return	
 17255  015AB0                     __end_of_Port_CheckPortType:
 17256                           	opt stack 0
 17257                           tosu	equ	0xFFF
 17258                           tosh	equ	0xFFE
 17259                           tosl	equ	0xFFD
 17260                           pclath	equ	0xFFA
 17261                           tblptru	equ	0xFF8
 17262                           tblptrh	equ	0xFF7
 17263                           tblptrl	equ	0xFF6
 17264                           tablat	equ	0xFF5
 17265                           prodh	equ	0xFF4
 17266                           prodl	equ	0xFF3
 17267                           intcon	equ	0xFF2
 17268                           postinc0	equ	0xFEE
 17269                           wreg	equ	0xFE8
 17270                           indf1	equ	0xFE7
 17271                           postdec1	equ	0xFE5
 17272                           fsr1h	equ	0xFE2
 17273                           fsr1l	equ	0xFE1
 17274                           indf2	equ	0xFDF
 17275                           postinc2	equ	0xFDE
 17276                           postdec2	equ	0xFDD
 17277                           plusw2	equ	0xFDB
 17278                           fsr2h	equ	0xFDA
 17279                           fsr2l	equ	0xFD9
 17280                           status	equ	0xFD8
 17281                           
 17282 ;; *************** function _Port_Set *****************
 17283 ;; Defined at:
 17284 ;;		line 570 in file "Library/Port.c"
 17285 ;; Parameters:    Size  Location     Type
 17286 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 17287 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 17288 ;;		 -> PortD(10), PortC(10), PortF(10), 
 17289 ;;  pValue          1   17[BANK0 ] unsigned char 
 17290 ;; Auto vars:     Size  Location     Type
 17291 ;;  TypeActual      2   36[BANK0 ] unsigned short 
 17292 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
 17293 ;;  Type            1   38[BANK0 ] enum E6795
 17294 ;; Return value:  Size  Location     Type
 17295 ;;                  1    wreg      void 
 17296 ;; Registers used:
 17297 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17298 ;; Tracked objects:
 17299 ;;		On entry : 0/0
 17300 ;;		On exit  : 0/0
 17301 ;;		Unchanged: 0/0
 17302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17303 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17304 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17305 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17306 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17307 ;;Total ram usage:       24 bytes
 17308 ;; Hardware stack levels used:    1
 17309 ;; Hardware stack levels required when called:   10
 17310 ;; This function calls:
 17311 ;;		_Byte_SetByte
 17312 ;;		_Word_GetPair
 17313 ;; This function is called by:
 17314 ;;		_Port_Init
 17315 ;;		_Port_Toggle
 17316 ;; This function uses a non-reentrant model
 17317 ;;
 17318                           
 17319                           	psect	text78
 17320  011466                     __ptext78:
 17321                           	opt stack 0
 17322  011466                     _Port_Set:
 17323                           	opt stack 17
 17324                           
 17325                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
 17326                           
 17327                           ; BSR set to: 0
 17328                           ;incstack = 0
 17329  011466  0E08               	movlw	8
 17330  011468  0100               	movlb	0	; () banked
 17331  01146A  256F               	addwf	Port_Set@pInput& (0+255),w,b
 17332  01146C  0100               	movlb	0	; () banked
 17333  01146E  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 17334  011470  0E00               	movlw	0
 17335  011472  0100               	movlb	0	; () banked
 17336  011474  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 17337  011476  0100               	movlb	0	; () banked
 17338  011478  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 17339  01147A  0E00               	movlw	0
 17340  01147C  0100               	movlb	0	; () banked
 17341  01147E  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 17342  011480  EC0C  F0AF         	call	_Word_GetPair	;wreg free
 17343  011484  0100               	movlb	0	; () banked
 17344  011486  6F86               	movwf	Port_Set@Type& (0+255),b
 17345                           
 17346                           ; BSR set to: 0
 17347                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
 17348  011488  0100               	movlb	0	; () banked
 17349  01148A  5186               	movf	Port_Set@Type& (0+255),w,b
 17350  01148C  0100               	movlb	0	; () banked
 17351  01148E  6F72               	movwf	??_Port_Set& (0+255),b
 17352  011490  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 17353  011492  0E0E               	movlw	14
 17354  011494                     u9445:
 17355  011494  90D8               	bcf	status,0,c
 17356  011496  0100               	movlb	0	; () banked
 17357  011498  3772               	rlcf	??_Port_Set& (0+255),f,b
 17358  01149A  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 17359  01149C  2EE8               	decfsz	wreg,f,c
 17360  01149E  D7FA               	goto	u9445
 17361  0114A0  0100               	movlb	0	; () banked
 17362  0114A2  5186               	movf	Port_Set@Type& (0+255),w,b
 17363  0114A4  0100               	movlb	0	; () banked
 17364  0114A6  6F74               	movwf	(??_Port_Set+2)& (0+255),b
 17365  0114A8  6B75               	clrf	(??_Port_Set+3)& (0+255),b
 17366  0114AA  0E0C               	movlw	12
 17367  0114AC                     u9455:
 17368  0114AC  90D8               	bcf	status,0,c
 17369  0114AE  0100               	movlb	0	; () banked
 17370  0114B0  3774               	rlcf	(??_Port_Set+2)& (0+255),f,b
 17371  0114B2  3775               	rlcf	(??_Port_Set+3)& (0+255),f,b
 17372  0114B4  2EE8               	decfsz	wreg,f,c
 17373  0114B6  D7FA               	goto	u9455
 17374  0114B8  0100               	movlb	0	; () banked
 17375  0114BA  5186               	movf	Port_Set@Type& (0+255),w,b
 17376  0114BC  0100               	movlb	0	; () banked
 17377  0114BE  6F76               	movwf	(??_Port_Set+4)& (0+255),b
 17378  0114C0  6B77               	clrf	(??_Port_Set+5)& (0+255),b
 17379  0114C2  0E0A               	movlw	10
 17380  0114C4                     u9465:
 17381  0114C4  90D8               	bcf	status,0,c
 17382  0114C6  0100               	movlb	0	; () banked
 17383  0114C8  3776               	rlcf	(??_Port_Set+4)& (0+255),f,b
 17384  0114CA  3777               	rlcf	(??_Port_Set+5)& (0+255),f,b
 17385  0114CC  2EE8               	decfsz	wreg,f,c
 17386  0114CE  D7FA               	goto	u9465
 17387  0114D0  0100               	movlb	0	; () banked
 17388  0114D2  5186               	movf	Port_Set@Type& (0+255),w,b
 17389  0114D4  0100               	movlb	0	; () banked
 17390  0114D6  6F79               	movwf	(??_Port_Set+7)& (0+255),b
 17391  0114D8  6B78               	clrf	(??_Port_Set+6)& (0+255),b
 17392  0114DA  0100               	movlb	0	; () banked
 17393  0114DC  5186               	movf	Port_Set@Type& (0+255),w,b
 17394  0114DE  0100               	movlb	0	; () banked
 17395  0114E0  6F7A               	movwf	(??_Port_Set+8)& (0+255),b
 17396  0114E2  6B7B               	clrf	(??_Port_Set+9)& (0+255),b
 17397  0114E4  0E06               	movlw	6
 17398  0114E6                     u9475:
 17399  0114E6  90D8               	bcf	status,0,c
 17400  0114E8  0100               	movlb	0	; () banked
 17401  0114EA  377A               	rlcf	(??_Port_Set+8)& (0+255),f,b
 17402  0114EC  377B               	rlcf	(??_Port_Set+9)& (0+255),f,b
 17403  0114EE  2EE8               	decfsz	wreg,f,c
 17404  0114F0  D7FA               	goto	u9475
 17405  0114F2  0100               	movlb	0	; () banked
 17406  0114F4  5186               	movf	Port_Set@Type& (0+255),w,b
 17407  0114F6  0100               	movlb	0	; () banked
 17408  0114F8  6F7C               	movwf	(??_Port_Set+10)& (0+255),b
 17409  0114FA  6B7D               	clrf	(??_Port_Set+11)& (0+255),b
 17410  0114FC  0100               	movlb	0	; () banked
 17411  0114FE  3B7C               	swapf	(??_Port_Set+10)& (0+255),f,b
 17412  011500  3B7D               	swapf	(??_Port_Set+11)& (0+255),f,b
 17413  011502  0EF0               	movlw	240
 17414  011504  177D               	andwf	(??_Port_Set+11)& (0+255),f,b
 17415  011506  517C               	movf	(??_Port_Set+10)& (0+255),w,b
 17416  011508  0B0F               	andlw	15
 17417  01150A  137D               	iorwf	(??_Port_Set+11)& (0+255),f,b
 17418  01150C  0EF0               	movlw	240
 17419  01150E  177C               	andwf	(??_Port_Set+10)& (0+255),f,b
 17420  011510  0100               	movlb	0	; () banked
 17421  011512  5186               	movf	Port_Set@Type& (0+255),w,b
 17422  011514  0100               	movlb	0	; () banked
 17423  011516  6F7E               	movwf	(??_Port_Set+12)& (0+255),b
 17424  011518  6B7F               	clrf	(??_Port_Set+13)& (0+255),b
 17425  01151A  0100               	movlb	0	; () banked
 17426  01151C  90D8               	bcf	status,0,c
 17427  01151E  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
 17428  011520  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
 17429  011522  0100               	movlb	0	; () banked
 17430  011524  90D8               	bcf	status,0,c
 17431  011526  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
 17432  011528  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
 17433  01152A  0100               	movlb	0	; () banked
 17434  01152C  5186               	movf	Port_Set@Type& (0+255),w,b
 17435  01152E  0100               	movlb	0	; () banked
 17436  011530  6F80               	movwf	(??_Port_Set+14)& (0+255),b
 17437  011532  6B81               	clrf	(??_Port_Set+15)& (0+255),b
 17438  011534  0100               	movlb	0	; () banked
 17439  011536  517E               	movf	(??_Port_Set+12)& (0+255),w,b
 17440  011538  0100               	movlb	0	; () banked
 17441  01153A  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 17442  01153C  0100               	movlb	0	; () banked
 17443  01153E  517F               	movf	(??_Port_Set+13)& (0+255),w,b
 17444  011540  0100               	movlb	0	; () banked
 17445  011542  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 17446  011544  0100               	movlb	0	; () banked
 17447  011546  517C               	movf	(??_Port_Set+10)& (0+255),w,b
 17448  011548  0100               	movlb	0	; () banked
 17449  01154A  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 17450  01154C  0100               	movlb	0	; () banked
 17451  01154E  517D               	movf	(??_Port_Set+11)& (0+255),w,b
 17452  011550  0100               	movlb	0	; () banked
 17453  011552  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 17454  011554  0100               	movlb	0	; () banked
 17455  011556  517A               	movf	(??_Port_Set+8)& (0+255),w,b
 17456  011558  0100               	movlb	0	; () banked
 17457  01155A  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 17458  01155C  0100               	movlb	0	; () banked
 17459  01155E  517B               	movf	(??_Port_Set+9)& (0+255),w,b
 17460  011560  0100               	movlb	0	; () banked
 17461  011562  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 17462  011564  0100               	movlb	0	; () banked
 17463  011566  5178               	movf	(??_Port_Set+6)& (0+255),w,b
 17464  011568  0100               	movlb	0	; () banked
 17465  01156A  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 17466  01156C  0100               	movlb	0	; () banked
 17467  01156E  5179               	movf	(??_Port_Set+7)& (0+255),w,b
 17468  011570  0100               	movlb	0	; () banked
 17469  011572  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 17470  011574  0100               	movlb	0	; () banked
 17471  011576  5176               	movf	(??_Port_Set+4)& (0+255),w,b
 17472  011578  0100               	movlb	0	; () banked
 17473  01157A  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 17474  01157C  0100               	movlb	0	; () banked
 17475  01157E  5177               	movf	(??_Port_Set+5)& (0+255),w,b
 17476  011580  0100               	movlb	0	; () banked
 17477  011582  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 17478  011584  0100               	movlb	0	; () banked
 17479  011586  5174               	movf	(??_Port_Set+2)& (0+255),w,b
 17480  011588  0100               	movlb	0	; () banked
 17481  01158A  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 17482  01158C  0100               	movlb	0	; () banked
 17483  01158E  5175               	movf	(??_Port_Set+3)& (0+255),w,b
 17484  011590  0100               	movlb	0	; () banked
 17485  011592  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 17486  011594  0100               	movlb	0	; () banked
 17487  011596  5172               	movf	??_Port_Set& (0+255),w,b
 17488  011598  0100               	movlb	0	; () banked
 17489  01159A  1180               	iorwf	(??_Port_Set+14)& (0+255),w,b
 17490  01159C  0100               	movlb	0	; () banked
 17491  01159E  6F82               	movwf	Port_Set@TypeRequired& (0+255),b
 17492  0115A0  0100               	movlb	0	; () banked
 17493  0115A2  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 17494  0115A4  0100               	movlb	0	; () banked
 17495  0115A6  1181               	iorwf	(??_Port_Set+15)& (0+255),w,b
 17496  0115A8  0100               	movlb	0	; () banked
 17497  0115AA  6F83               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
 17498                           
 17499                           ; BSR set to: 0
 17500                           ;Port.c: 574: UINT16 TypeActual = Type;
 17501  0115AC  C086  F084         	movff	Port_Set@Type,Port_Set@TypeActual
 17502  0115B0  0100               	movlb	0	; () banked
 17503  0115B2  6B85               	clrf	(Port_Set@TypeActual+1)& (0+255),b
 17504                           
 17505                           ; BSR set to: 0
 17506                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
 17507  0115B4  0E08               	movlw	8
 17508  0115B6  0100               	movlb	0	; () banked
 17509  0115B8  256F               	addwf	Port_Set@pInput& (0+255),w,b
 17510  0115BA  0100               	movlb	0	; () banked
 17511  0115BC  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 17512  0115BE  0E00               	movlw	0
 17513  0115C0  0100               	movlb	0	; () banked
 17514  0115C2  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 17515  0115C4  0100               	movlb	0	; () banked
 17516  0115C6  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 17517  0115C8  0E01               	movlw	1
 17518  0115CA  0100               	movlb	0	; () banked
 17519  0115CC  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 17520  0115CE  EC0C  F0AF         	call	_Word_GetPair	;wreg free
 17521  0115D2  0100               	movlb	0	; () banked
 17522  0115D4  6F72               	movwf	??_Port_Set& (0+255),b
 17523  0115D6  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 17524  0115D8  0100               	movlb	0	; () banked
 17525  0115DA  90D8               	bcf	status,0,c
 17526  0115DC  3772               	rlcf	??_Port_Set& (0+255),f,b
 17527  0115DE  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 17528  0115E0  0100               	movlb	0	; () banked
 17529  0115E2  90D8               	bcf	status,0,c
 17530  0115E4  3772               	rlcf	??_Port_Set& (0+255),f,b
 17531  0115E6  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 17532  0115E8  0100               	movlb	0	; () banked
 17533  0115EA  5172               	movf	??_Port_Set& (0+255),w,b
 17534  0115EC  0100               	movlb	0	; () banked
 17535  0115EE  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 17536  0115F0  0100               	movlb	0	; () banked
 17537  0115F2  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 17538  0115F4  0100               	movlb	0	; () banked
 17539  0115F6  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 17540                           
 17541                           ; BSR set to: 0
 17542                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
 17543  0115F8  0E08               	movlw	8
 17544  0115FA  0100               	movlb	0	; () banked
 17545  0115FC  256F               	addwf	Port_Set@pInput& (0+255),w,b
 17546  0115FE  0100               	movlb	0	; () banked
 17547  011600  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 17548  011602  0E00               	movlw	0
 17549  011604  0100               	movlb	0	; () banked
 17550  011606  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 17551  011608  0100               	movlb	0	; () banked
 17552  01160A  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 17553  01160C  0E02               	movlw	2
 17554  01160E  0100               	movlb	0	; () banked
 17555  011610  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 17556  011612  EC0C  F0AF         	call	_Word_GetPair	;wreg free
 17557  011616  0100               	movlb	0	; () banked
 17558  011618  6F72               	movwf	??_Port_Set& (0+255),b
 17559  01161A  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 17560  01161C  0100               	movlb	0	; () banked
 17561  01161E  3B72               	swapf	??_Port_Set& (0+255),f,b
 17562  011620  3B73               	swapf	(??_Port_Set+1)& (0+255),f,b
 17563  011622  0EF0               	movlw	240
 17564  011624  1773               	andwf	(??_Port_Set+1)& (0+255),f,b
 17565  011626  5172               	movf	??_Port_Set& (0+255),w,b
 17566  011628  0B0F               	andlw	15
 17567  01162A  1373               	iorwf	(??_Port_Set+1)& (0+255),f,b
 17568  01162C  0EF0               	movlw	240
 17569  01162E  1772               	andwf	??_Port_Set& (0+255),f,b
 17570  011630  0100               	movlb	0	; () banked
 17571  011632  5172               	movf	??_Port_Set& (0+255),w,b
 17572  011634  0100               	movlb	0	; () banked
 17573  011636  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 17574  011638  0100               	movlb	0	; () banked
 17575  01163A  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 17576  01163C  0100               	movlb	0	; () banked
 17577  01163E  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 17578                           
 17579                           ; BSR set to: 0
 17580                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
 17581  011640  0E08               	movlw	8
 17582  011642  0100               	movlb	0	; () banked
 17583  011644  256F               	addwf	Port_Set@pInput& (0+255),w,b
 17584  011646  0100               	movlb	0	; () banked
 17585  011648  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 17586  01164A  0E00               	movlw	0
 17587  01164C  0100               	movlb	0	; () banked
 17588  01164E  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 17589  011650  0100               	movlb	0	; () banked
 17590  011652  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 17591  011654  0E03               	movlw	3
 17592  011656  0100               	movlb	0	; () banked
 17593  011658  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 17594  01165A  EC0C  F0AF         	call	_Word_GetPair	;wreg free
 17595  01165E  0100               	movlb	0	; () banked
 17596  011660  6F72               	movwf	??_Port_Set& (0+255),b
 17597  011662  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 17598  011664  0E06               	movlw	6
 17599  011666                     u9485:
 17600  011666  90D8               	bcf	status,0,c
 17601  011668  0100               	movlb	0	; () banked
 17602  01166A  3772               	rlcf	??_Port_Set& (0+255),f,b
 17603  01166C  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 17604  01166E  2EE8               	decfsz	wreg,f,c
 17605  011670  D7FA               	goto	u9485
 17606  011672  0100               	movlb	0	; () banked
 17607  011674  5172               	movf	??_Port_Set& (0+255),w,b
 17608  011676  0100               	movlb	0	; () banked
 17609  011678  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 17610  01167A  0100               	movlb	0	; () banked
 17611  01167C  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 17612  01167E  0100               	movlb	0	; () banked
 17613  011680  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 17614                           
 17615                           ; BSR set to: 0
 17616                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
 17617  011682  0E08               	movlw	8
 17618  011684  0100               	movlb	0	; () banked
 17619  011686  256F               	addwf	Port_Set@pInput& (0+255),w,b
 17620  011688  0100               	movlb	0	; () banked
 17621  01168A  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 17622  01168C  0E00               	movlw	0
 17623  01168E  0100               	movlb	0	; () banked
 17624  011690  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 17625  011692  0100               	movlb	0	; () banked
 17626  011694  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 17627  011696  0E04               	movlw	4
 17628  011698  0100               	movlb	0	; () banked
 17629  01169A  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 17630  01169C  EC0C  F0AF         	call	_Word_GetPair	;wreg free
 17631  0116A0  0100               	movlb	0	; () banked
 17632  0116A2  6F72               	movwf	??_Port_Set& (0+255),b
 17633  0116A4  0100               	movlb	0	; () banked
 17634  0116A6  5172               	movf	??_Port_Set& (0+255),w,b
 17635  0116A8  0100               	movlb	0	; () banked
 17636  0116AA  6F74               	movwf	(??_Port_Set+2)& (0+255),b
 17637  0116AC  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 17638  0116AE  0100               	movlb	0	; () banked
 17639  0116B0  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 17640  0116B2  0100               	movlb	0	; () banked
 17641  0116B4  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 17642  0116B6  0100               	movlb	0	; () banked
 17643  0116B8  5174               	movf	(??_Port_Set+2)& (0+255),w,b
 17644  0116BA  0100               	movlb	0	; () banked
 17645  0116BC  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 17646                           
 17647                           ; BSR set to: 0
 17648                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
 17649  0116BE  0E08               	movlw	8
 17650  0116C0  0100               	movlb	0	; () banked
 17651  0116C2  256F               	addwf	Port_Set@pInput& (0+255),w,b
 17652  0116C4  0100               	movlb	0	; () banked
 17653  0116C6  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 17654  0116C8  0E00               	movlw	0
 17655  0116CA  0100               	movlb	0	; () banked
 17656  0116CC  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 17657  0116CE  0100               	movlb	0	; () banked
 17658  0116D0  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 17659  0116D2  0E05               	movlw	5
 17660  0116D4  0100               	movlb	0	; () banked
 17661  0116D6  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 17662  0116D8  EC0C  F0AF         	call	_Word_GetPair	;wreg free
 17663  0116DC  0100               	movlb	0	; () banked
 17664  0116DE  6F72               	movwf	??_Port_Set& (0+255),b
 17665  0116E0  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 17666  0116E2  0E0A               	movlw	10
 17667  0116E4                     u9495:
 17668  0116E4  90D8               	bcf	status,0,c
 17669  0116E6  0100               	movlb	0	; () banked
 17670  0116E8  3772               	rlcf	??_Port_Set& (0+255),f,b
 17671  0116EA  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 17672  0116EC  2EE8               	decfsz	wreg,f,c
 17673  0116EE  D7FA               	goto	u9495
 17674  0116F0  0100               	movlb	0	; () banked
 17675  0116F2  5172               	movf	??_Port_Set& (0+255),w,b
 17676  0116F4  0100               	movlb	0	; () banked
 17677  0116F6  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 17678  0116F8  0100               	movlb	0	; () banked
 17679  0116FA  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 17680  0116FC  0100               	movlb	0	; () banked
 17681  0116FE  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 17682                           
 17683                           ; BSR set to: 0
 17684                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
 17685  011700  0E08               	movlw	8
 17686  011702  0100               	movlb	0	; () banked
 17687  011704  256F               	addwf	Port_Set@pInput& (0+255),w,b
 17688  011706  0100               	movlb	0	; () banked
 17689  011708  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 17690  01170A  0E00               	movlw	0
 17691  01170C  0100               	movlb	0	; () banked
 17692  01170E  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 17693  011710  0100               	movlb	0	; () banked
 17694  011712  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 17695  011714  0E06               	movlw	6
 17696  011716  0100               	movlb	0	; () banked
 17697  011718  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 17698  01171A  EC0C  F0AF         	call	_Word_GetPair	;wreg free
 17699  01171E  0100               	movlb	0	; () banked
 17700  011720  6F72               	movwf	??_Port_Set& (0+255),b
 17701  011722  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 17702  011724  0E0C               	movlw	12
 17703  011726                     u9505:
 17704  011726  90D8               	bcf	status,0,c
 17705  011728  0100               	movlb	0	; () banked
 17706  01172A  3772               	rlcf	??_Port_Set& (0+255),f,b
 17707  01172C  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 17708  01172E  2EE8               	decfsz	wreg,f,c
 17709  011730  D7FA               	goto	u9505
 17710  011732  0100               	movlb	0	; () banked
 17711  011734  5172               	movf	??_Port_Set& (0+255),w,b
 17712  011736  0100               	movlb	0	; () banked
 17713  011738  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 17714  01173A  0100               	movlb	0	; () banked
 17715  01173C  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 17716  01173E  0100               	movlb	0	; () banked
 17717  011740  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 17718                           
 17719                           ; BSR set to: 0
 17720                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
 17721  011742  0E08               	movlw	8
 17722  011744  0100               	movlb	0	; () banked
 17723  011746  256F               	addwf	Port_Set@pInput& (0+255),w,b
 17724  011748  0100               	movlb	0	; () banked
 17725  01174A  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 17726  01174C  0E00               	movlw	0
 17727  01174E  0100               	movlb	0	; () banked
 17728  011750  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 17729  011752  0100               	movlb	0	; () banked
 17730  011754  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 17731  011756  0E07               	movlw	7
 17732  011758  0100               	movlb	0	; () banked
 17733  01175A  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 17734  01175C  EC0C  F0AF         	call	_Word_GetPair	;wreg free
 17735  011760  0100               	movlb	0	; () banked
 17736  011762  6F72               	movwf	??_Port_Set& (0+255),b
 17737  011764  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 17738  011766  0E0E               	movlw	14
 17739  011768                     u9515:
 17740  011768  90D8               	bcf	status,0,c
 17741  01176A  0100               	movlb	0	; () banked
 17742  01176C  3772               	rlcf	??_Port_Set& (0+255),f,b
 17743  01176E  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 17744  011770  2EE8               	decfsz	wreg,f,c
 17745  011772  D7FA               	goto	u9515
 17746  011774  0100               	movlb	0	; () banked
 17747  011776  5172               	movf	??_Port_Set& (0+255),w,b
 17748  011778  0100               	movlb	0	; () banked
 17749  01177A  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 17750  01177C  0100               	movlb	0	; () banked
 17751  01177E  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 17752  011780  0100               	movlb	0	; () banked
 17753  011782  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 17754                           
 17755                           ;Port.c: 584: if (TypeRequired == TypeActual)
 17756  011784  0100               	movlb	0	; () banked
 17757  011786  5184               	movf	Port_Set@TypeActual& (0+255),w,b
 17758  011788  0100               	movlb	0	; () banked
 17759  01178A  1982               	xorwf	Port_Set@TypeRequired& (0+255),w,b
 17760  01178C  E148               	bnz	l528
 17761  01178E  0100               	movlb	0	; () banked
 17762  011790  5185               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
 17763  011792  0100               	movlb	0	; () banked
 17764  011794  1983               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
 17765  011796  A4D8               	btfss	status,2,c
 17766  011798  0012               	return	
 17767  01179A  D032               	goto	l526
 17768  01179C                     
 17769                           ; BSR set to: 0
 17770                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
 17771                           
 17772                           ; BSR set to: 0
 17773  01179C  0100               	movlb	0	; () banked
 17774  01179E  EE20 F002          	lfsr	2,2
 17775  0117A2  516F               	movf	Port_Set@pInput& (0+255),w,b
 17776  0117A4  26D9               	addwf	fsr2l,f,c
 17777  0117A6  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
 17778  0117A8  22DA               	addwfc	fsr2h,f,c
 17779  0117AA  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
 17780  0117AE  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
 17781  0117B2  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
 17782  0117B6  EC5E  F0B2         	call	_Byte_SetByte	;wreg free
 17783                           
 17784                           ;Port.c: 594: break;
 17785  0117BA  0012               	return	
 17786  0117BC                     
 17787                           ;Port.c: 597: pValue = ~pValue;
 17788  0117BC  0100               	movlb	0	; () banked
 17789  0117BE  1F71               	comf	Port_Set@pValue& (0+255),f,b
 17790                           
 17791                           ; BSR set to: 0
 17792                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
 17793  0117C0  0100               	movlb	0	; () banked
 17794  0117C2  EE20 F002          	lfsr	2,2
 17795  0117C6  516F               	movf	Port_Set@pInput& (0+255),w,b
 17796  0117C8  26D9               	addwf	fsr2l,f,c
 17797  0117CA  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
 17798  0117CC  22DA               	addwfc	fsr2h,f,c
 17799  0117CE  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
 17800  0117D2  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
 17801  0117D6  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
 17802  0117DA  EC5E  F0B2         	call	_Byte_SetByte	;wreg free
 17803                           
 17804                           ;Port.c: 599: break;
 17805  0117DE  0012               	return	
 17806  0117E0                     
 17807                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
 17808  0117E0  0100               	movlb	0	; () banked
 17809  0117E2  EE20 F004          	lfsr	2,4
 17810  0117E6  516F               	movf	Port_Set@pInput& (0+255),w,b
 17811  0117E8  26D9               	addwf	fsr2l,f,c
 17812  0117EA  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
 17813  0117EC  22DA               	addwfc	fsr2h,f,c
 17814  0117EE  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
 17815  0117F2  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
 17816  0117F6  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
 17817  0117FA  EC5E  F0B2         	call	_Byte_SetByte	;wreg free
 17818                           
 17819                           ;Port.c: 606: }
 17820                           
 17821                           ;Port.c: 605: break;
 17822                           
 17823                           ;Port.c: 604: default:
 17824                           
 17825                           ;Port.c: 603: break;
 17826  0117FE  0012               	return	
 17827  011800                     l526:
 17828  011800  0100               	movlb	0	; () banked
 17829  011802  5186               	movf	Port_Set@Type& (0+255),w,b
 17830                           
 17831                           ; Switch size 1, requested type "space"
 17832                           ; Number of cases is 4, Range of values is 0 to 3
 17833                           ; switch strategies available:
 17834                           ; Name         Instructions Cycles
 17835                           ; simple_byte           13     7 (average)
 17836                           ;	Chosen strategy is simple_byte
 17837  011804  0A00               	xorlw	0	; case 0
 17838  011806  B4D8               	btfsc	status,2,c
 17839  011808  0012               	return	
 17840  01180A  0A01               	xorlw	1	; case 1
 17841  01180C  B4D8               	btfsc	status,2,c
 17842  01180E  D7C6               	goto	l529
 17843  011810  0A03               	xorlw	3	; case 2
 17844  011812  B4D8               	btfsc	status,2,c
 17845  011814  D7D3               	goto	l531
 17846  011816  0A01               	xorlw	1	; case 3
 17847  011818  A4D8               	btfss	status,2,c
 17848                           
 17849                           ; BSR set to: 0
 17850                           
 17851                           ; BSR set to: 0
 17852                           ;Port.c: 607: }
 17853  01181A  0012               	return	
 17854  01181C  D7E1               	goto	l532
 17855  01181E                     l528:
 17856  01181E  0012               	return		;funcret
 17857  011820                     __end_of_Port_Set:
 17858                           	opt stack 0
 17859                           tosu	equ	0xFFF
 17860                           tosh	equ	0xFFE
 17861                           tosl	equ	0xFFD
 17862                           pclath	equ	0xFFA
 17863                           tblptru	equ	0xFF8
 17864                           tblptrh	equ	0xFF7
 17865                           tblptrl	equ	0xFF6
 17866                           tablat	equ	0xFF5
 17867                           prodh	equ	0xFF4
 17868                           prodl	equ	0xFF3
 17869                           intcon	equ	0xFF2
 17870                           postinc0	equ	0xFEE
 17871                           wreg	equ	0xFE8
 17872                           indf1	equ	0xFE7
 17873                           postdec1	equ	0xFE5
 17874                           fsr1h	equ	0xFE2
 17875                           fsr1l	equ	0xFE1
 17876                           indf2	equ	0xFDF
 17877                           postinc2	equ	0xFDE
 17878                           postdec2	equ	0xFDD
 17879                           plusw2	equ	0xFDB
 17880                           fsr2h	equ	0xFDA
 17881                           fsr2l	equ	0xFD9
 17882                           status	equ	0xFD8
 17883                           
 17884 ;; *************** function _Byte_SetByte *****************
 17885 ;; Defined at:
 17886 ;;		line 110 in file "Library/Types.c"
 17887 ;; Parameters:    Size  Location     Type
 17888 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 17889 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
 17890 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 17891 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 17892 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 17893 ;;		 -> NULL(0), 
 17894 ;;  pValue          1    2[BANK0 ] unsigned char 
 17895 ;; Auto vars:     Size  Location     Type
 17896 ;;		None
 17897 ;; Return value:  Size  Location     Type
 17898 ;;                  1    wreg      void 
 17899 ;; Registers used:
 17900 ;;		fsr2l, fsr2h
 17901 ;; Tracked objects:
 17902 ;;		On entry : 0/0
 17903 ;;		On exit  : 0/0
 17904 ;;		Unchanged: 0/0
 17905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17906 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17909 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17910 ;;Total ram usage:        3 bytes
 17911 ;; Hardware stack levels used:    1
 17912 ;; Hardware stack levels required when called:    7
 17913 ;; This function calls:
 17914 ;;		Nothing
 17915 ;; This function is called by:
 17916 ;;		_Port_Set
 17917 ;;		_I2C_Init
 17918 ;; This function uses a non-reentrant model
 17919 ;;
 17920                           
 17921                           	psect	text79
 17922  0164BC                     __ptext79:
 17923                           	opt stack 0
 17924  0164BC                     _Byte_SetByte:
 17925                           	opt stack 19
 17926                           
 17927                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
 17928                           
 17929                           ;incstack = 0
 17930  0164BC  C060  FFD9         	movff	Byte_SetByte@pInput,fsr2l
 17931  0164C0  C061  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
 17932  0164C4  C062  FFDF         	movff	Byte_SetByte@pValue,indf2
 17933  0164C8  0012               	return		;funcret
 17934  0164CA                     __end_of_Byte_SetByte:
 17935                           	opt stack 0
 17936                           tosu	equ	0xFFF
 17937                           tosh	equ	0xFFE
 17938                           tosl	equ	0xFFD
 17939                           pclath	equ	0xFFA
 17940                           tblptru	equ	0xFF8
 17941                           tblptrh	equ	0xFF7
 17942                           tblptrl	equ	0xFF6
 17943                           tablat	equ	0xFF5
 17944                           prodh	equ	0xFF4
 17945                           prodl	equ	0xFF3
 17946                           intcon	equ	0xFF2
 17947                           postinc0	equ	0xFEE
 17948                           wreg	equ	0xFE8
 17949                           indf1	equ	0xFE7
 17950                           postdec1	equ	0xFE5
 17951                           fsr1h	equ	0xFE2
 17952                           fsr1l	equ	0xFE1
 17953                           indf2	equ	0xFDF
 17954                           postinc2	equ	0xFDE
 17955                           postdec2	equ	0xFDD
 17956                           plusw2	equ	0xFDB
 17957                           fsr2h	equ	0xFDA
 17958                           fsr2l	equ	0xFD9
 17959                           status	equ	0xFD8
 17960                           
 17961 ;; *************** function _GetPortTRIS *****************
 17962 ;; Defined at:
 17963 ;;		line 67 in file "Library/Port.c"
 17964 ;; Parameters:    Size  Location     Type
 17965 ;;  pInput          1    wreg     enum E6786
 17966 ;; Auto vars:     Size  Location     Type
 17967 ;;  pInput          1    2[BANK0 ] enum E6786
 17968 ;; Return value:  Size  Location     Type
 17969 ;;                  2    0[BANK0 ] PTR struct Byte
 17970 ;; Registers used:
 17971 ;;		wreg, status,2, status,0
 17972 ;; Tracked objects:
 17973 ;;		On entry : 0/0
 17974 ;;		On exit  : 0/0
 17975 ;;		Unchanged: 0/0
 17976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17977 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17978 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17980 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17981 ;;Total ram usage:        3 bytes
 17982 ;; Hardware stack levels used:    1
 17983 ;; Hardware stack levels required when called:    7
 17984 ;; This function calls:
 17985 ;;		Nothing
 17986 ;; This function is called by:
 17987 ;;		_Port_Init
 17988 ;; This function uses a non-reentrant model
 17989 ;;
 17990                           
 17991                           	psect	text80
 17992  014656                     __ptext80:
 17993                           	opt stack 0
 17994  014656                     _GetPortTRIS:
 17995                           	opt stack 20
 17996                           
 17997                           ;incstack = 0
 17998                           ;GetPortTRIS@pInput stored from wreg
 17999  014656  0100               	movlb	0	; () banked
 18000  014658  6F62               	movwf	GetPortTRIS@pInput& (0+255),b
 18001                           
 18002                           ;Port.c: 69: switch (pInput)
 18003  01465A  D038               	goto	l363
 18004  01465C                     
 18005                           ;Port.c: 72: return (BytePtr)&TRISA;
 18006  01465C  0E92               	movlw	146
 18007  01465E  0100               	movlb	0	; () banked
 18008  014660  6F60               	movwf	?_GetPortTRIS& (0+255),b
 18009  014662  0E0F               	movlw	15
 18010  014664  0100               	movlb	0	; () banked
 18011  014666  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 18012                           
 18013                           ; BSR set to: 0
 18014  014668  0012               	return	
 18015  01466A                     
 18016                           ; BSR set to: 0
 18017                           ;Port.c: 74: return (BytePtr)&TRISB;
 18018                           
 18019                           ; BSR set to: 0
 18020  01466A  0E93               	movlw	147
 18021  01466C  0100               	movlb	0	; () banked
 18022  01466E  6F60               	movwf	?_GetPortTRIS& (0+255),b
 18023  014670  0E0F               	movlw	15
 18024  014672  0100               	movlb	0	; () banked
 18025  014674  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 18026                           
 18027                           ; BSR set to: 0
 18028  014676  0012               	return	
 18029  014678                     
 18030                           ; BSR set to: 0
 18031                           ;Port.c: 76: return (BytePtr)&TRISC;
 18032                           
 18033                           ; BSR set to: 0
 18034  014678  0E94               	movlw	148
 18035  01467A  0100               	movlb	0	; () banked
 18036  01467C  6F60               	movwf	?_GetPortTRIS& (0+255),b
 18037  01467E  0E0F               	movlw	15
 18038  014680  0100               	movlb	0	; () banked
 18039  014682  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 18040                           
 18041                           ; BSR set to: 0
 18042  014684  0012               	return	
 18043  014686                     
 18044                           ; BSR set to: 0
 18045                           ;Port.c: 78: return (BytePtr)&TRISD;
 18046                           
 18047                           ; BSR set to: 0
 18048  014686  0E95               	movlw	149
 18049  014688  0100               	movlb	0	; () banked
 18050  01468A  6F60               	movwf	?_GetPortTRIS& (0+255),b
 18051  01468C  0E0F               	movlw	15
 18052  01468E  0100               	movlb	0	; () banked
 18053  014690  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 18054                           
 18055                           ; BSR set to: 0
 18056  014692  0012               	return	
 18057  014694                     
 18058                           ; BSR set to: 0
 18059                           ;Port.c: 80: return (BytePtr)&TRISE;
 18060                           
 18061                           ; BSR set to: 0
 18062  014694  0E96               	movlw	150
 18063  014696  0100               	movlb	0	; () banked
 18064  014698  6F60               	movwf	?_GetPortTRIS& (0+255),b
 18065  01469A  0E0F               	movlw	15
 18066  01469C  0100               	movlb	0	; () banked
 18067  01469E  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 18068                           
 18069                           ; BSR set to: 0
 18070  0146A0  0012               	return	
 18071  0146A2                     
 18072                           ; BSR set to: 0
 18073                           ;Port.c: 82: return (BytePtr)&TRISF;
 18074                           
 18075                           ; BSR set to: 0
 18076  0146A2  0E97               	movlw	151
 18077  0146A4  0100               	movlb	0	; () banked
 18078  0146A6  6F60               	movwf	?_GetPortTRIS& (0+255),b
 18079  0146A8  0E0F               	movlw	15
 18080  0146AA  0100               	movlb	0	; () banked
 18081  0146AC  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 18082                           
 18083                           ; BSR set to: 0
 18084  0146AE  0012               	return	
 18085  0146B0                     
 18086                           ; BSR set to: 0
 18087                           ;Port.c: 84: return (BytePtr)&TRISG;
 18088                           
 18089                           ; BSR set to: 0
 18090  0146B0  0E98               	movlw	152
 18091  0146B2  0100               	movlb	0	; () banked
 18092  0146B4  6F60               	movwf	?_GetPortTRIS& (0+255),b
 18093  0146B6  0E0F               	movlw	15
 18094  0146B8  0100               	movlb	0	; () banked
 18095  0146BA  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 18096                           
 18097                           ; BSR set to: 0
 18098  0146BC  0012               	return	
 18099  0146BE                     
 18100                           ; BSR set to: 0
 18101                           ;Port.c: 86: return (void*)0;
 18102                           
 18103                           ; BSR set to: 0
 18104  0146BE  0E00               	movlw	0
 18105  0146C0  0100               	movlb	0	; () banked
 18106  0146C2  6F60               	movwf	?_GetPortTRIS& (0+255),b
 18107  0146C4  0E00               	movlw	0
 18108  0146C6  0100               	movlb	0	; () banked
 18109  0146C8  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 18110                           
 18111                           ; BSR set to: 0
 18112                           ;Port.c: 87: }
 18113                           
 18114                           ; BSR set to: 0
 18115  0146CA  0012               	return	
 18116  0146CC                     l363:
 18117                           
 18118                           ; BSR set to: 0
 18119  0146CC  0100               	movlb	0	; () banked
 18120  0146CE  5162               	movf	GetPortTRIS@pInput& (0+255),w,b
 18121                           
 18122                           ; Switch size 1, requested type "space"
 18123                           ; Number of cases is 7, Range of values is 0 to 6
 18124                           ; switch strategies available:
 18125                           ; Name         Instructions Cycles
 18126                           ; simple_byte           22    12 (average)
 18127                           ;	Chosen strategy is simple_byte
 18128  0146D0  0A00               	xorlw	0	; case 0
 18129  0146D2  B4D8               	btfsc	status,2,c
 18130  0146D4  D7C3               	goto	l364
 18131  0146D6  0A01               	xorlw	1	; case 1
 18132  0146D8  B4D8               	btfsc	status,2,c
 18133  0146DA  D7C7               	goto	l366
 18134  0146DC  0A03               	xorlw	3	; case 2
 18135  0146DE  B4D8               	btfsc	status,2,c
 18136  0146E0  D7CB               	goto	l367
 18137  0146E2  0A01               	xorlw	1	; case 3
 18138  0146E4  B4D8               	btfsc	status,2,c
 18139  0146E6  D7CF               	goto	l368
 18140  0146E8  0A07               	xorlw	7	; case 4
 18141  0146EA  B4D8               	btfsc	status,2,c
 18142  0146EC  D7D3               	goto	l369
 18143  0146EE  0A01               	xorlw	1	; case 5
 18144  0146F0  B4D8               	btfsc	status,2,c
 18145  0146F2  D7D7               	goto	l370
 18146  0146F4  0A03               	xorlw	3	; case 6
 18147  0146F6  B4D8               	btfsc	status,2,c
 18148  0146F8  D7DB               	goto	l371
 18149  0146FA  D7E1               	goto	l372
 18150  0146FC                     __end_of_GetPortTRIS:
 18151                           	opt stack 0
 18152                           tosu	equ	0xFFF
 18153                           tosh	equ	0xFFE
 18154                           tosl	equ	0xFFD
 18155                           pclath	equ	0xFFA
 18156                           tblptru	equ	0xFF8
 18157                           tblptrh	equ	0xFF7
 18158                           tblptrl	equ	0xFF6
 18159                           tablat	equ	0xFF5
 18160                           prodh	equ	0xFF4
 18161                           prodl	equ	0xFF3
 18162                           intcon	equ	0xFF2
 18163                           postinc0	equ	0xFEE
 18164                           wreg	equ	0xFE8
 18165                           indf1	equ	0xFE7
 18166                           postdec1	equ	0xFE5
 18167                           fsr1h	equ	0xFE2
 18168                           fsr1l	equ	0xFE1
 18169                           indf2	equ	0xFDF
 18170                           postinc2	equ	0xFDE
 18171                           postdec2	equ	0xFDD
 18172                           plusw2	equ	0xFDB
 18173                           fsr2h	equ	0xFDA
 18174                           fsr2l	equ	0xFD9
 18175                           status	equ	0xFD8
 18176                           
 18177 ;; *************** function _GetPortProperties *****************
 18178 ;; Defined at:
 18179 ;;		line 21 in file "Library/Port.c"
 18180 ;; Parameters:    Size  Location     Type
 18181 ;;  pInput          1    wreg     enum E6786
 18182 ;; Auto vars:     Size  Location     Type
 18183 ;;  pInput          1    2[BANK0 ] enum E6786
 18184 ;; Return value:  Size  Location     Type
 18185 ;;                  2    0[BANK0 ] PTR struct PortProperty
 18186 ;; Registers used:
 18187 ;;		wreg, status,2, status,0
 18188 ;; Tracked objects:
 18189 ;;		On entry : 0/0
 18190 ;;		On exit  : 0/0
 18191 ;;		Unchanged: 0/0
 18192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18193 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18194 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18196 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18197 ;;Total ram usage:        3 bytes
 18198 ;; Hardware stack levels used:    1
 18199 ;; Hardware stack levels required when called:    7
 18200 ;; This function calls:
 18201 ;;		Nothing
 18202 ;; This function is called by:
 18203 ;;		_Port_Init
 18204 ;; This function uses a non-reentrant model
 18205 ;;
 18206                           
 18207                           	psect	text81
 18208  0146FC                     __ptext81:
 18209                           	opt stack 0
 18210  0146FC                     _GetPortProperties:
 18211                           	opt stack 20
 18212                           
 18213                           ; BSR set to: 0
 18214                           ;incstack = 0
 18215                           ;GetPortProperties@pInput stored from wreg
 18216  0146FC  0100               	movlb	0	; () banked
 18217  0146FE  6F62               	movwf	GetPortProperties@pInput& (0+255),b
 18218                           
 18219                           ;Port.c: 23: switch (pInput)
 18220  014700  D038               	goto	l337
 18221  014702                     
 18222                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
 18223  014702  0E9B               	movlw	low _PortA_Property
 18224  014704  0100               	movlb	0	; () banked
 18225  014706  6F60               	movwf	?_GetPortProperties& (0+255),b
 18226  014708  0EFF               	movlw	high _PortA_Property
 18227  01470A  0100               	movlb	0	; () banked
 18228  01470C  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 18229                           
 18230                           ; BSR set to: 0
 18231  01470E  0012               	return	
 18232  014710                     
 18233                           ; BSR set to: 0
 18234                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
 18235                           
 18236                           ; BSR set to: 0
 18237  014710  0E99               	movlw	low _PortB_Property
 18238  014712  0100               	movlb	0	; () banked
 18239  014714  6F60               	movwf	?_GetPortProperties& (0+255),b
 18240  014716  0EFF               	movlw	high _PortB_Property
 18241  014718  0100               	movlb	0	; () banked
 18242  01471A  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 18243                           
 18244                           ; BSR set to: 0
 18245  01471C  0012               	return	
 18246  01471E                     
 18247                           ; BSR set to: 0
 18248                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
 18249                           
 18250                           ; BSR set to: 0
 18251  01471E  0E97               	movlw	low _PortC_Property
 18252  014720  0100               	movlb	0	; () banked
 18253  014722  6F60               	movwf	?_GetPortProperties& (0+255),b
 18254  014724  0EFF               	movlw	high _PortC_Property
 18255  014726  0100               	movlb	0	; () banked
 18256  014728  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 18257                           
 18258                           ; BSR set to: 0
 18259  01472A  0012               	return	
 18260  01472C                     
 18261                           ; BSR set to: 0
 18262                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
 18263                           
 18264                           ; BSR set to: 0
 18265  01472C  0E95               	movlw	low _PortD_Property
 18266  01472E  0100               	movlb	0	; () banked
 18267  014730  6F60               	movwf	?_GetPortProperties& (0+255),b
 18268  014732  0EFF               	movlw	high _PortD_Property
 18269  014734  0100               	movlb	0	; () banked
 18270  014736  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 18271                           
 18272                           ; BSR set to: 0
 18273  014738  0012               	return	
 18274  01473A                     
 18275                           ; BSR set to: 0
 18276                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
 18277                           
 18278                           ; BSR set to: 0
 18279  01473A  0E93               	movlw	low _PortE_Property
 18280  01473C  0100               	movlb	0	; () banked
 18281  01473E  6F60               	movwf	?_GetPortProperties& (0+255),b
 18282  014740  0EFF               	movlw	high _PortE_Property
 18283  014742  0100               	movlb	0	; () banked
 18284  014744  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 18285                           
 18286                           ; BSR set to: 0
 18287  014746  0012               	return	
 18288  014748                     
 18289                           ; BSR set to: 0
 18290                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
 18291                           
 18292                           ; BSR set to: 0
 18293  014748  0E91               	movlw	low _PortF_Property
 18294  01474A  0100               	movlb	0	; () banked
 18295  01474C  6F60               	movwf	?_GetPortProperties& (0+255),b
 18296  01474E  0EFF               	movlw	high _PortF_Property
 18297  014750  0100               	movlb	0	; () banked
 18298  014752  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 18299                           
 18300                           ; BSR set to: 0
 18301  014754  0012               	return	
 18302  014756                     
 18303                           ; BSR set to: 0
 18304                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
 18305                           
 18306                           ; BSR set to: 0
 18307  014756  0E8F               	movlw	low _PortG_Property
 18308  014758  0100               	movlb	0	; () banked
 18309  01475A  6F60               	movwf	?_GetPortProperties& (0+255),b
 18310  01475C  0EFF               	movlw	high _PortG_Property
 18311  01475E  0100               	movlb	0	; () banked
 18312  014760  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 18313                           
 18314                           ; BSR set to: 0
 18315  014762  0012               	return	
 18316  014764                     
 18317                           ; BSR set to: 0
 18318                           ;Port.c: 40: return (void*)0;
 18319                           
 18320                           ; BSR set to: 0
 18321  014764  0E00               	movlw	0
 18322  014766  0100               	movlb	0	; () banked
 18323  014768  6F60               	movwf	?_GetPortProperties& (0+255),b
 18324  01476A  0E00               	movlw	0
 18325  01476C  0100               	movlb	0	; () banked
 18326  01476E  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 18327                           
 18328                           ; BSR set to: 0
 18329                           ;Port.c: 41: }
 18330                           
 18331                           ; BSR set to: 0
 18332  014770  0012               	return	
 18333  014772                     l337:
 18334                           
 18335                           ; BSR set to: 0
 18336  014772  0100               	movlb	0	; () banked
 18337  014774  5162               	movf	GetPortProperties@pInput& (0+255),w,b
 18338                           
 18339                           ; Switch size 1, requested type "space"
 18340                           ; Number of cases is 7, Range of values is 0 to 6
 18341                           ; switch strategies available:
 18342                           ; Name         Instructions Cycles
 18343                           ; simple_byte           22    12 (average)
 18344                           ;	Chosen strategy is simple_byte
 18345  014776  0A00               	xorlw	0	; case 0
 18346  014778  B4D8               	btfsc	status,2,c
 18347  01477A  D7C3               	goto	l338
 18348  01477C  0A01               	xorlw	1	; case 1
 18349  01477E  B4D8               	btfsc	status,2,c
 18350  014780  D7C7               	goto	l340
 18351  014782  0A03               	xorlw	3	; case 2
 18352  014784  B4D8               	btfsc	status,2,c
 18353  014786  D7CB               	goto	l341
 18354  014788  0A01               	xorlw	1	; case 3
 18355  01478A  B4D8               	btfsc	status,2,c
 18356  01478C  D7CF               	goto	l342
 18357  01478E  0A07               	xorlw	7	; case 4
 18358  014790  B4D8               	btfsc	status,2,c
 18359  014792  D7D3               	goto	l343
 18360  014794  0A01               	xorlw	1	; case 5
 18361  014796  B4D8               	btfsc	status,2,c
 18362  014798  D7D7               	goto	l344
 18363  01479A  0A03               	xorlw	3	; case 6
 18364  01479C  B4D8               	btfsc	status,2,c
 18365  01479E  D7DB               	goto	l345
 18366  0147A0  D7E1               	goto	l346
 18367  0147A2                     __end_of_GetPortProperties:
 18368                           	opt stack 0
 18369                           tosu	equ	0xFFF
 18370                           tosh	equ	0xFFE
 18371                           tosl	equ	0xFFD
 18372                           pclath	equ	0xFFA
 18373                           tblptru	equ	0xFF8
 18374                           tblptrh	equ	0xFF7
 18375                           tblptrl	equ	0xFF6
 18376                           tablat	equ	0xFF5
 18377                           prodh	equ	0xFF4
 18378                           prodl	equ	0xFF3
 18379                           intcon	equ	0xFF2
 18380                           postinc0	equ	0xFEE
 18381                           wreg	equ	0xFE8
 18382                           indf1	equ	0xFE7
 18383                           postdec1	equ	0xFE5
 18384                           fsr1h	equ	0xFE2
 18385                           fsr1l	equ	0xFE1
 18386                           indf2	equ	0xFDF
 18387                           postinc2	equ	0xFDE
 18388                           postdec2	equ	0xFDD
 18389                           plusw2	equ	0xFDB
 18390                           fsr2h	equ	0xFDA
 18391                           fsr2l	equ	0xFD9
 18392                           status	equ	0xFD8
 18393                           
 18394 ;; *************** function _GetPortPORT *****************
 18395 ;; Defined at:
 18396 ;;		line 44 in file "Library/Port.c"
 18397 ;; Parameters:    Size  Location     Type
 18398 ;;  pInput          1    wreg     enum E6786
 18399 ;; Auto vars:     Size  Location     Type
 18400 ;;  pInput          1    2[BANK0 ] enum E6786
 18401 ;; Return value:  Size  Location     Type
 18402 ;;                  2    0[BANK0 ] PTR struct Byte
 18403 ;; Registers used:
 18404 ;;		wreg, status,2, status,0
 18405 ;; Tracked objects:
 18406 ;;		On entry : 0/0
 18407 ;;		On exit  : 0/0
 18408 ;;		Unchanged: 0/0
 18409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18410 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18411 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18413 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18414 ;;Total ram usage:        3 bytes
 18415 ;; Hardware stack levels used:    1
 18416 ;; Hardware stack levels required when called:    7
 18417 ;; This function calls:
 18418 ;;		Nothing
 18419 ;; This function is called by:
 18420 ;;		_Port_Init
 18421 ;; This function uses a non-reentrant model
 18422 ;;
 18423                           
 18424                           	psect	text82
 18425  0147A2                     __ptext82:
 18426                           	opt stack 0
 18427  0147A2                     _GetPortPORT:
 18428                           	opt stack 20
 18429                           
 18430                           ; BSR set to: 0
 18431                           ;incstack = 0
 18432                           ;GetPortPORT@pInput stored from wreg
 18433  0147A2  0100               	movlb	0	; () banked
 18434  0147A4  6F62               	movwf	GetPortPORT@pInput& (0+255),b
 18435                           
 18436                           ;Port.c: 46: switch (pInput)
 18437  0147A6  D038               	goto	l350
 18438  0147A8                     
 18439                           ;Port.c: 49: return (BytePtr)&PORTA;
 18440  0147A8  0E80               	movlw	128
 18441  0147AA  0100               	movlb	0	; () banked
 18442  0147AC  6F60               	movwf	?_GetPortPORT& (0+255),b
 18443  0147AE  0E0F               	movlw	15
 18444  0147B0  0100               	movlb	0	; () banked
 18445  0147B2  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 18446                           
 18447                           ; BSR set to: 0
 18448  0147B4  0012               	return	
 18449  0147B6                     
 18450                           ; BSR set to: 0
 18451                           ;Port.c: 51: return (BytePtr)&PORTB;
 18452                           
 18453                           ; BSR set to: 0
 18454  0147B6  0E81               	movlw	129
 18455  0147B8  0100               	movlb	0	; () banked
 18456  0147BA  6F60               	movwf	?_GetPortPORT& (0+255),b
 18457  0147BC  0E0F               	movlw	15
 18458  0147BE  0100               	movlb	0	; () banked
 18459  0147C0  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 18460                           
 18461                           ; BSR set to: 0
 18462  0147C2  0012               	return	
 18463  0147C4                     
 18464                           ; BSR set to: 0
 18465                           ;Port.c: 53: return (BytePtr)&PORTC;
 18466                           
 18467                           ; BSR set to: 0
 18468  0147C4  0E82               	movlw	130
 18469  0147C6  0100               	movlb	0	; () banked
 18470  0147C8  6F60               	movwf	?_GetPortPORT& (0+255),b
 18471  0147CA  0E0F               	movlw	15
 18472  0147CC  0100               	movlb	0	; () banked
 18473  0147CE  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 18474                           
 18475                           ; BSR set to: 0
 18476  0147D0  0012               	return	
 18477  0147D2                     
 18478                           ; BSR set to: 0
 18479                           ;Port.c: 55: return (BytePtr)&PORTD;
 18480                           
 18481                           ; BSR set to: 0
 18482  0147D2  0E83               	movlw	131
 18483  0147D4  0100               	movlb	0	; () banked
 18484  0147D6  6F60               	movwf	?_GetPortPORT& (0+255),b
 18485  0147D8  0E0F               	movlw	15
 18486  0147DA  0100               	movlb	0	; () banked
 18487  0147DC  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 18488                           
 18489                           ; BSR set to: 0
 18490  0147DE  0012               	return	
 18491  0147E0                     
 18492                           ; BSR set to: 0
 18493                           ;Port.c: 57: return (BytePtr)&PORTE;
 18494                           
 18495                           ; BSR set to: 0
 18496  0147E0  0E84               	movlw	132
 18497  0147E2  0100               	movlb	0	; () banked
 18498  0147E4  6F60               	movwf	?_GetPortPORT& (0+255),b
 18499  0147E6  0E0F               	movlw	15
 18500  0147E8  0100               	movlb	0	; () banked
 18501  0147EA  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 18502                           
 18503                           ; BSR set to: 0
 18504  0147EC  0012               	return	
 18505  0147EE                     
 18506                           ; BSR set to: 0
 18507                           ;Port.c: 59: return (BytePtr)&PORTF;
 18508                           
 18509                           ; BSR set to: 0
 18510  0147EE  0E85               	movlw	133
 18511  0147F0  0100               	movlb	0	; () banked
 18512  0147F2  6F60               	movwf	?_GetPortPORT& (0+255),b
 18513  0147F4  0E0F               	movlw	15
 18514  0147F6  0100               	movlb	0	; () banked
 18515  0147F8  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 18516                           
 18517                           ; BSR set to: 0
 18518  0147FA  0012               	return	
 18519  0147FC                     
 18520                           ; BSR set to: 0
 18521                           ;Port.c: 61: return (BytePtr)&PORTG;
 18522                           
 18523                           ; BSR set to: 0
 18524  0147FC  0E86               	movlw	134
 18525  0147FE  0100               	movlb	0	; () banked
 18526  014800  6F60               	movwf	?_GetPortPORT& (0+255),b
 18527  014802  0E0F               	movlw	15
 18528  014804  0100               	movlb	0	; () banked
 18529  014806  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 18530                           
 18531                           ; BSR set to: 0
 18532  014808  0012               	return	
 18533  01480A                     
 18534                           ; BSR set to: 0
 18535                           ;Port.c: 63: return (void*)0;
 18536                           
 18537                           ; BSR set to: 0
 18538  01480A  0E00               	movlw	0
 18539  01480C  0100               	movlb	0	; () banked
 18540  01480E  6F60               	movwf	?_GetPortPORT& (0+255),b
 18541  014810  0E00               	movlw	0
 18542  014812  0100               	movlb	0	; () banked
 18543  014814  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 18544                           
 18545                           ; BSR set to: 0
 18546                           ;Port.c: 64: }
 18547                           
 18548                           ; BSR set to: 0
 18549  014816  0012               	return	
 18550  014818                     l350:
 18551                           
 18552                           ; BSR set to: 0
 18553  014818  0100               	movlb	0	; () banked
 18554  01481A  5162               	movf	GetPortPORT@pInput& (0+255),w,b
 18555                           
 18556                           ; Switch size 1, requested type "space"
 18557                           ; Number of cases is 7, Range of values is 0 to 6
 18558                           ; switch strategies available:
 18559                           ; Name         Instructions Cycles
 18560                           ; simple_byte           22    12 (average)
 18561                           ;	Chosen strategy is simple_byte
 18562  01481C  0A00               	xorlw	0	; case 0
 18563  01481E  B4D8               	btfsc	status,2,c
 18564  014820  D7C3               	goto	l351
 18565  014822  0A01               	xorlw	1	; case 1
 18566  014824  B4D8               	btfsc	status,2,c
 18567  014826  D7C7               	goto	l353
 18568  014828  0A03               	xorlw	3	; case 2
 18569  01482A  B4D8               	btfsc	status,2,c
 18570  01482C  D7CB               	goto	l354
 18571  01482E  0A01               	xorlw	1	; case 3
 18572  014830  B4D8               	btfsc	status,2,c
 18573  014832  D7CF               	goto	l355
 18574  014834  0A07               	xorlw	7	; case 4
 18575  014836  B4D8               	btfsc	status,2,c
 18576  014838  D7D3               	goto	l356
 18577  01483A  0A01               	xorlw	1	; case 5
 18578  01483C  B4D8               	btfsc	status,2,c
 18579  01483E  D7D7               	goto	l357
 18580  014840  0A03               	xorlw	3	; case 6
 18581  014842  B4D8               	btfsc	status,2,c
 18582  014844  D7DB               	goto	l358
 18583  014846  D7E1               	goto	l359
 18584  014848                     __end_of_GetPortPORT:
 18585                           	opt stack 0
 18586                           tosu	equ	0xFFF
 18587                           tosh	equ	0xFFE
 18588                           tosl	equ	0xFFD
 18589                           pclath	equ	0xFFA
 18590                           tblptru	equ	0xFF8
 18591                           tblptrh	equ	0xFF7
 18592                           tblptrl	equ	0xFF6
 18593                           tablat	equ	0xFF5
 18594                           prodh	equ	0xFF4
 18595                           prodl	equ	0xFF3
 18596                           intcon	equ	0xFF2
 18597                           postinc0	equ	0xFEE
 18598                           wreg	equ	0xFE8
 18599                           indf1	equ	0xFE7
 18600                           postdec1	equ	0xFE5
 18601                           fsr1h	equ	0xFE2
 18602                           fsr1l	equ	0xFE1
 18603                           indf2	equ	0xFDF
 18604                           postinc2	equ	0xFDE
 18605                           postdec2	equ	0xFDD
 18606                           plusw2	equ	0xFDB
 18607                           fsr2h	equ	0xFDA
 18608                           fsr2l	equ	0xFD9
 18609                           status	equ	0xFD8
 18610                           
 18611 ;; *************** function _LED_Init *****************
 18612 ;; Defined at:
 18613 ;;		line 15 in file "Library/LED.c"
 18614 ;; Parameters:    Size  Location     Type
 18615 ;;  pLED            1    wreg     enum E6739
 18616 ;; Auto vars:     Size  Location     Type
 18617 ;;  pLED            1   45[BANK0 ] enum E6739
 18618 ;; Return value:  Size  Location     Type
 18619 ;;                  1    wreg      void 
 18620 ;; Registers used:
 18621 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18622 ;; Tracked objects:
 18623 ;;		On entry : 0/0
 18624 ;;		On exit  : 0/0
 18625 ;;		Unchanged: 0/0
 18626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18628 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18630 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18631 ;;Total ram usage:        1 bytes
 18632 ;; Hardware stack levels used:    1
 18633 ;; Hardware stack levels required when called:   12
 18634 ;; This function calls:
 18635 ;;		_LED_Set
 18636 ;;		_Port_SetPinType
 18637 ;; This function is called by:
 18638 ;;		_MXK_Init
 18639 ;; This function uses a non-reentrant model
 18640 ;;
 18641                           
 18642                           	psect	text83
 18643  015718                     __ptext83:
 18644                           	opt stack 0
 18645  015718                     _LED_Init:
 18646                           	opt stack 16
 18647                           
 18648                           ; BSR set to: 0
 18649                           ;incstack = 0
 18650                           ;LED_Init@pLED stored from wreg
 18651  015718  0100               	movlb	0	; () banked
 18652  01571A  6F8D               	movwf	LED_Init@pLED& (0+255),b
 18653                           
 18654                           ;LED.c: 17: switch (pLED)
 18655  01571C  D01E               	goto	l220
 18656  01571E                     
 18657                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
 18658  01571E  0EEA               	movlw	low _PortC
 18659  015720  0100               	movlb	0	; () banked
 18660  015722  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 18661  015724  0E00               	movlw	high _PortC
 18662  015726  0100               	movlb	0	; () banked
 18663  015728  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18664  01572A  0E00               	movlw	0
 18665  01572C  0100               	movlb	0	; () banked
 18666  01572E  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 18667  015730  0E03               	movlw	3
 18668  015732  0100               	movlb	0	; () banked
 18669  015734  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 18670  015736  EC5F  F093         	call	_Port_SetPinType	;wreg free
 18671                           
 18672                           ;LED.c: 21: break;
 18673  01573A  D017               	goto	l222
 18674  01573C                     
 18675                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
 18676  01573C  0EEA               	movlw	low _PortC
 18677  01573E  0100               	movlb	0	; () banked
 18678  015740  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 18679  015742  0E00               	movlw	high _PortC
 18680  015744  0100               	movlb	0	; () banked
 18681  015746  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18682  015748  0E01               	movlw	1
 18683  01574A  0100               	movlb	0	; () banked
 18684  01574C  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 18685  01574E  0E03               	movlw	3
 18686  015750  0100               	movlb	0	; () banked
 18687  015752  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 18688  015754  EC5F  F093         	call	_Port_SetPinType	;wreg free
 18689                           
 18690                           ;LED.c: 25: }
 18691                           
 18692                           ;LED.c: 24: break;
 18693  015758  D008               	goto	l222
 18694  01575A                     l220:
 18695  01575A  0100               	movlb	0	; () banked
 18696  01575C  518D               	movf	LED_Init@pLED& (0+255),w,b
 18697                           
 18698                           ; Switch size 1, requested type "space"
 18699                           ; Number of cases is 2, Range of values is 0 to 1
 18700                           ; switch strategies available:
 18701                           ; Name         Instructions Cycles
 18702                           ; simple_byte            7     4 (average)
 18703                           ;	Chosen strategy is simple_byte
 18704  01575E  0A00               	xorlw	0	; case 0
 18705  015760  B4D8               	btfsc	status,2,c
 18706  015762  D7DD               	goto	l221
 18707  015764  0A01               	xorlw	1	; case 1
 18708  015766  B4D8               	btfsc	status,2,c
 18709  015768  D7E9               	goto	l223
 18710  01576A                     l222:
 18711                           
 18712                           ;LED.c: 26: LED_Set(pLED, 0);
 18713                           
 18714                           ; BSR set to: 0
 18715  01576A  0E00               	movlw	0
 18716  01576C  0100               	movlb	0	; () banked
 18717  01576E  6F74               	movwf	LED_Set@pValue& (0+255),b
 18718  015770  0100               	movlb	0	; () banked
 18719  015772  518D               	movf	LED_Init@pLED& (0+255),w,b
 18720  015774  EC99  F0AC         	call	_LED_Set
 18721  015778  0012               	return		;funcret
 18722  01577A                     __end_of_LED_Init:
 18723                           	opt stack 0
 18724                           tosu	equ	0xFFF
 18725                           tosh	equ	0xFFE
 18726                           tosl	equ	0xFFD
 18727                           pclath	equ	0xFFA
 18728                           tblptru	equ	0xFF8
 18729                           tblptrh	equ	0xFF7
 18730                           tblptrl	equ	0xFF6
 18731                           tablat	equ	0xFF5
 18732                           prodh	equ	0xFF4
 18733                           prodl	equ	0xFF3
 18734                           intcon	equ	0xFF2
 18735                           postinc0	equ	0xFEE
 18736                           wreg	equ	0xFE8
 18737                           indf1	equ	0xFE7
 18738                           postdec1	equ	0xFE5
 18739                           fsr1h	equ	0xFE2
 18740                           fsr1l	equ	0xFE1
 18741                           indf2	equ	0xFDF
 18742                           postinc2	equ	0xFDE
 18743                           postdec2	equ	0xFDD
 18744                           plusw2	equ	0xFDB
 18745                           fsr2h	equ	0xFDA
 18746                           fsr2l	equ	0xFD9
 18747                           status	equ	0xFD8
 18748                           
 18749 ;; *************** function _LED_Set *****************
 18750 ;; Defined at:
 18751 ;;		line 33 in file "Library/LED.c"
 18752 ;; Parameters:    Size  Location     Type
 18753 ;;  pLED            1    wreg     enum E6739
 18754 ;;  pValue          1   20[BANK0 ] unsigned char 
 18755 ;; Auto vars:     Size  Location     Type
 18756 ;;  pLED            1   21[BANK0 ] enum E6739
 18757 ;; Return value:  Size  Location     Type
 18758 ;;                  1    wreg      void 
 18759 ;; Registers used:
 18760 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18761 ;; Tracked objects:
 18762 ;;		On entry : 0/0
 18763 ;;		On exit  : 0/0
 18764 ;;		Unchanged: 0/0
 18765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18766 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18767 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18769 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18770 ;;Total ram usage:        2 bytes
 18771 ;; Hardware stack levels used:    1
 18772 ;; Hardware stack levels required when called:   11
 18773 ;; This function calls:
 18774 ;;		_Port_SetPin
 18775 ;; This function is called by:
 18776 ;;		_LED_Init
 18777 ;;		_SYSTEM_Initialize
 18778 ;; This function uses a non-reentrant model
 18779 ;;
 18780                           
 18781                           	psect	text84
 18782  015932                     __ptext84:
 18783                           	opt stack 0
 18784  015932                     _LED_Set:
 18785                           	opt stack 16
 18786                           
 18787                           ;incstack = 0
 18788                           ;LED_Set@pLED stored from wreg
 18789  015932  0100               	movlb	0	; () banked
 18790  015934  6F75               	movwf	LED_Set@pLED& (0+255),b
 18791                           
 18792                           ;LED.c: 35: switch (pLED)
 18793  015936  D01C               	goto	l227
 18794  015938                     
 18795                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
 18796  015938  0EEA               	movlw	low _PortC
 18797  01593A  0100               	movlb	0	; () banked
 18798  01593C  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 18799  01593E  0E00               	movlw	high _PortC
 18800  015940  0100               	movlb	0	; () banked
 18801  015942  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 18802  015944  0E00               	movlw	0
 18803  015946  0100               	movlb	0	; () banked
 18804  015948  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 18805  01594A  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
 18806  01594E  ECE9  F09E         	call	_Port_SetPin	;wreg free
 18807                           
 18808                           ;LED.c: 39: break;
 18809  015952  0012               	return	
 18810  015954                     
 18811                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
 18812  015954  0EEA               	movlw	low _PortC
 18813  015956  0100               	movlb	0	; () banked
 18814  015958  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 18815  01595A  0E00               	movlw	high _PortC
 18816  01595C  0100               	movlb	0	; () banked
 18817  01595E  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 18818  015960  0E01               	movlw	1
 18819  015962  0100               	movlb	0	; () banked
 18820  015964  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 18821  015966  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
 18822  01596A  ECE9  F09E         	call	_Port_SetPin	;wreg free
 18823                           
 18824                           ;LED.c: 43: }
 18825                           
 18826                           ;LED.c: 42: break;
 18827  01596E  0012               	return	
 18828  015970                     l227:
 18829  015970  0100               	movlb	0	; () banked
 18830  015972  5175               	movf	LED_Set@pLED& (0+255),w,b
 18831                           
 18832                           ; Switch size 1, requested type "space"
 18833                           ; Number of cases is 2, Range of values is 0 to 1
 18834                           ; switch strategies available:
 18835                           ; Name         Instructions Cycles
 18836                           ; simple_byte            7     4 (average)
 18837                           ;	Chosen strategy is simple_byte
 18838  015974  0A00               	xorlw	0	; case 0
 18839  015976  B4D8               	btfsc	status,2,c
 18840  015978  D7DF               	goto	l228
 18841  01597A  0A01               	xorlw	1	; case 1
 18842  01597C  A4D8               	btfss	status,2,c
 18843  01597E  0012               	return	
 18844  015980  D7E9               	goto	l230
 18845  015982                     __end_of_LED_Set:
 18846                           	opt stack 0
 18847                           tosu	equ	0xFFF
 18848                           tosh	equ	0xFFE
 18849                           tosl	equ	0xFFD
 18850                           pclath	equ	0xFFA
 18851                           tblptru	equ	0xFF8
 18852                           tblptrh	equ	0xFF7
 18853                           tblptrl	equ	0xFF6
 18854                           tablat	equ	0xFF5
 18855                           prodh	equ	0xFF4
 18856                           prodl	equ	0xFF3
 18857                           intcon	equ	0xFF2
 18858                           postinc0	equ	0xFEE
 18859                           wreg	equ	0xFE8
 18860                           indf1	equ	0xFE7
 18861                           postdec1	equ	0xFE5
 18862                           fsr1h	equ	0xFE2
 18863                           fsr1l	equ	0xFE1
 18864                           indf2	equ	0xFDF
 18865                           postinc2	equ	0xFDE
 18866                           postdec2	equ	0xFDD
 18867                           plusw2	equ	0xFDB
 18868                           fsr2h	equ	0xFDA
 18869                           fsr2l	equ	0xFD9
 18870                           status	equ	0xFD8
 18871                           
 18872 ;; *************** function _MXK_Dequeue *****************
 18873 ;; Defined at:
 18874 ;;		line 153 in file "Library/MXK.c"
 18875 ;; Parameters:    Size  Location     Type
 18876 ;;		None
 18877 ;; Auto vars:     Size  Location     Type
 18878 ;;		None
 18879 ;; Return value:  Size  Location     Type
 18880 ;;                  1    wreg      void 
 18881 ;; Registers used:
 18882 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18883 ;; Tracked objects:
 18884 ;;		On entry : 0/0
 18885 ;;		On exit  : 0/0
 18886 ;;		Unchanged: 0/0
 18887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18891 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18892 ;;Total ram usage:        0 bytes
 18893 ;; Hardware stack levels used:    1
 18894 ;; Hardware stack levels required when called:   12
 18895 ;; This function calls:
 18896 ;;		Absolute function
 18897 ;;		_Motor_Step
 18898 ;; This function is called by:
 18899 ;;		_init
 18900 ;;		_mode1
 18901 ;;		_mode2
 18902 ;;		_mode4
 18903 ;; This function uses a non-reentrant model
 18904 ;;
 18905                           
 18906                           	psect	text85
 18907  015D9C                     __ptext85:
 18908                           	opt stack 0
 18909  015D9C                     _MXK_Dequeue:
 18910                           	opt stack 17
 18911                           
 18912                           ;MXK.c: 155: if (lQueue)
 18913                           
 18914                           ;incstack = 0
 18915  015D9C  0100               	movlb	0	; () banked
 18916  015D9E  51BA               	movf	_lQueue& (0+255),w,b	;volatile
 18917  015DA0  0100               	movlb	0	; () banked
 18918  015DA2  11BB               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 18919  015DA4  0100               	movlb	0	; () banked
 18920  015DA6  11BC               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 18921  015DA8  B4D8               	btfsc	status,2,c
 18922  015DAA  D00D               	goto	u13399
 18923                           
 18924                           ; BSR set to: 0
 18925                           ;MXK.c: 156: lQueue();
 18926  015DAC  D801               	call	u13398
 18927  015DAE  D00B               	goto	u13399
 18928  015DB0                     u13398:
 18929  015DB0  0005               	push	
 18930  015DB2  6EFA               	movwf	pclath,c
 18931  015DB4  0100               	movlb	0	; () banked
 18932  015DB6  51BA               	movf	_lQueue& (0+255),w,b	;volatile
 18933  015DB8  6EFD               	movwf	tosl,c
 18934  015DBA  51BB               	movf	(_lQueue+1)& (0+255),w,b	;volatile
 18935  015DBC  6EFE               	movwf	tosh,c
 18936  015DBE  51BC               	movf	(_lQueue+2)& (0+255),w,b	;volatile
 18937  015DC0  6EFF               	movwf	tosu,c
 18938  015DC2  50FA               	movf	pclath,w,c
 18939  015DC4  0012               	return		;indir
 18940  015DC6                     u13399:
 18941                           
 18942                           ;MXK.c: 157: lQueue = 0;
 18943  015DC6  0E00               	movlw	0
 18944  015DC8  0100               	movlb	0	; () banked
 18945  015DCA  6FBA               	movwf	_lQueue& (0+255),b	;volatile
 18946  015DCC  0E00               	movlw	0
 18947  015DCE  0100               	movlb	0	; () banked
 18948  015DD0  6FBB               	movwf	(_lQueue+1)& (0+255),b	;volatile
 18949  015DD2  0E00               	movlw	0
 18950  015DD4  0100               	movlb	0	; () banked
 18951  015DD6  6FBC               	movwf	(_lQueue+2)& (0+255),b	;volatile
 18952                           
 18953                           ; BSR set to: 0
 18954  015DD8  0012               	return		;funcret
 18955  015DDA                     __end_of_MXK_Dequeue:
 18956                           	opt stack 0
 18957                           tosu	equ	0xFFF
 18958                           tosh	equ	0xFFE
 18959                           tosl	equ	0xFFD
 18960                           pclath	equ	0xFFA
 18961                           tblptru	equ	0xFF8
 18962                           tblptrh	equ	0xFF7
 18963                           tblptrl	equ	0xFF6
 18964                           tablat	equ	0xFF5
 18965                           prodh	equ	0xFF4
 18966                           prodl	equ	0xFF3
 18967                           intcon	equ	0xFF2
 18968                           postinc0	equ	0xFEE
 18969                           wreg	equ	0xFE8
 18970                           indf1	equ	0xFE7
 18971                           postdec1	equ	0xFE5
 18972                           fsr1h	equ	0xFE2
 18973                           fsr1l	equ	0xFE1
 18974                           indf2	equ	0xFDF
 18975                           postinc2	equ	0xFDE
 18976                           postdec2	equ	0xFDD
 18977                           plusw2	equ	0xFDB
 18978                           fsr2h	equ	0xFDA
 18979                           fsr2l	equ	0xFD9
 18980                           status	equ	0xFD8
 18981                           
 18982 ;; *************** function _Motor_Step *****************
 18983 ;; Defined at:
 18984 ;;		line 75 in file "Library/Motor.c"
 18985 ;; Parameters:    Size  Location     Type
 18986 ;;		None
 18987 ;; Auto vars:     Size  Location     Type
 18988 ;;		None
 18989 ;; Return value:  Size  Location     Type
 18990 ;;                  1    wreg      void 
 18991 ;; Registers used:
 18992 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18993 ;; Tracked objects:
 18994 ;;		On entry : 0/0
 18995 ;;		On exit  : 0/0
 18996 ;;		Unchanged: 0/0
 18997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19000 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19001 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19002 ;;Total ram usage:        2 bytes
 19003 ;; Hardware stack levels used:    1
 19004 ;; Hardware stack levels required when called:   11
 19005 ;; This function calls:
 19006 ;;		_MXK_Queue
 19007 ;;		_MXK_Release
 19008 ;;		_MXK_SwitchTo
 19009 ;;		_Port_SetPin
 19010 ;;		_Timer0_Restart
 19011 ;;		_Timer0_Stop
 19012 ;; This function is called by:
 19013 ;;		_Motor_Init
 19014 ;;		_MXK_Dequeue
 19015 ;;		_Timer0_ISR
 19016 ;; This function uses a non-reentrant model
 19017 ;;
 19018                           
 19019                           	psect	text86
 19020  013586                     __ptext86:
 19021                           	opt stack 0
 19022  013586                     _Motor_Step:
 19023                           	opt stack 0
 19024                           
 19025                           ; BSR set to: 0
 19026                           ;Skip over the trampoline to the duplicate function for level 2
 19027  013586  B251               	btfsc	btemp,1,c
 19028  013588  EFDC  F09B         	goto	i2_Motor_Step
 19029  01358C                     _Motor_Step$intlevel0:
 19030                           	opt stack 17
 19031                           
 19032                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 19033                           
 19034                           ;incstack = 0
 19035  01358C  0100               	movlb	0	; () banked
 19036  01358E  EE20 F004          	lfsr	2,4
 19037  013592  51CE               	movf	_lMotor& (0+255),w,b
 19038  013594  26D9               	addwf	fsr2l,f,c
 19039  013596  51CF               	movf	(_lMotor+1)& (0+255),w,b
 19040  013598  22DA               	addwfc	fsr2h,f,c
 19041  01359A  50DF               	movf	indf2,w,c
 19042  01359C  EC4E  F0AE         	call	_MXK_SwitchTo
 19043  0135A0  0900               	iorlw	0
 19044  0135A2  B4D8               	btfsc	status,2,c
 19045  0135A4  D07A               	goto	l1627
 19046                           
 19047                           ;Motor.c: 78: {
 19048                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 19049  0135A6  C0CE  FFD9         	movff	_lMotor,fsr2l
 19050  0135AA  C0CF  FFDA         	movff	_lMotor+1,fsr2h
 19051  0135AE  50DE               	movf	postinc2,w,c
 19052  0135B0  10DE               	iorwf	postinc2,w,c
 19053  0135B2  B4D8               	btfsc	status,2,c
 19054  0135B4  D06D               	goto	l1628
 19055                           
 19056                           ;Motor.c: 80: {
 19057                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 19058  0135B6  C0CE  FFD9         	movff	_lMotor,fsr2l
 19059  0135BA  C0CF  FFDA         	movff	_lMotor+1,fsr2h
 19060  0135BE  0E01               	movlw	1
 19061  0135C0  BEDB               	btfsc	plusw2,7,c
 19062  0135C2  D026               	goto	l1629
 19063  0135C4  0E01               	movlw	1
 19064  0135C6  50DB               	movf	plusw2,w,c
 19065  0135C8  E103               	bnz	u10100
 19066  0135CA  04DE               	decf	postinc2,w,c
 19067  0135CC  A0D8               	btfss	status,0,c
 19068  0135CE  D020               	goto	l1629
 19069  0135D0                     u10100:
 19070                           
 19071                           ;Motor.c: 83: {
 19072                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 19073  0135D0  C0CE  FFD9         	movff	_lMotor,fsr2l
 19074  0135D4  C0CF  FFDA         	movff	_lMotor+1,fsr2h
 19075  0135D8  28DE               	incf	postinc2,w,c
 19076  0135DA  E104               	bnz	u10110
 19077  0135DC  0E7F               	movlw	127
 19078  0135DE  18DE               	xorwf	postinc2,w,c
 19079  0135E0  B4D8               	btfsc	status,2,c
 19080  0135E2  D007               	goto	l1630
 19081  0135E4                     u10110:
 19082                           
 19083                           ;Motor.c: 85: lMotor->mDelta --;
 19084  0135E4  C0CE  FFD9         	movff	_lMotor,fsr2l
 19085  0135E8  C0CF  FFDA         	movff	_lMotor+1,fsr2h
 19086  0135EC  06DE               	decf	postinc2,f,c
 19087  0135EE  0E00               	movlw	0
 19088  0135F0  5ADD               	subwfb	postdec2,f,c
 19089  0135F2                     l1630:
 19090                           
 19091                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 19092  0135F2  0E99               	movlw	low _PortE
 19093  0135F4  0100               	movlb	0	; () banked
 19094  0135F6  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 19095  0135F8  0E03               	movlw	high _PortE
 19096  0135FA  0100               	movlb	0	; () banked
 19097  0135FC  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 19098  0135FE  0E00               	movlw	0
 19099  013600  0100               	movlb	0	; () banked
 19100  013602  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 19101  013604  0E01               	movlw	1
 19102  013606  0100               	movlb	0	; () banked
 19103  013608  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 19104  01360A  ECE9  F09E         	call	_Port_SetPin	;wreg free
 19105                           
 19106                           ;Motor.c: 88: }
 19107  01360E  D01F               	goto	l1631
 19108  013610                     l1629:
 19109                           
 19110                           ;Motor.c: 89: else
 19111                           ;Motor.c: 90: {
 19112                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 19113  013610  C0CE  FFD9         	movff	_lMotor,fsr2l
 19114  013614  C0CF  FFDA         	movff	_lMotor+1,fsr2h
 19115  013618  04DE               	decf	postinc2,w,c
 19116  01361A  E104               	bnz	u10120
 19117  01361C  0E80               	movlw	128
 19118  01361E  18DE               	xorwf	postinc2,w,c
 19119  013620  B4D8               	btfsc	status,2,c
 19120  013622  D007               	goto	l1632
 19121  013624                     u10120:
 19122                           
 19123                           ;Motor.c: 92: lMotor->mDelta ++;
 19124  013624  C0CE  FFD9         	movff	_lMotor,fsr2l
 19125  013628  C0CF  FFDA         	movff	_lMotor+1,fsr2h
 19126  01362C  2ADE               	incf	postinc2,f,c
 19127  01362E  0E00               	movlw	0
 19128  013630  22DD               	addwfc	postdec2,f,c
 19129  013632                     l1632:
 19130                           
 19131                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 19132  013632  0E99               	movlw	low _PortE
 19133  013634  0100               	movlb	0	; () banked
 19134  013636  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 19135  013638  0E03               	movlw	high _PortE
 19136  01363A  0100               	movlb	0	; () banked
 19137  01363C  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 19138  01363E  0E00               	movlw	0
 19139  013640  0100               	movlb	0	; () banked
 19140  013642  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 19141  013644  0E00               	movlw	0
 19142  013646  0100               	movlb	0	; () banked
 19143  013648  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 19144  01364A  ECE9  F09E         	call	_Port_SetPin	;wreg free
 19145  01364E                     l1631:
 19146                           
 19147                           ;Motor.c: 95: }
 19148                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 19149  01364E  0E99               	movlw	low _PortE
 19150  013650  0100               	movlb	0	; () banked
 19151  013652  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 19152  013654  0E03               	movlw	high _PortE
 19153  013656  0100               	movlb	0	; () banked
 19154  013658  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 19155  01365A  0E01               	movlw	1
 19156  01365C  0100               	movlb	0	; () banked
 19157  01365E  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 19158  013660  0E01               	movlw	1
 19159  013662  0100               	movlb	0	; () banked
 19160  013664  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 19161  013666  ECE9  F09E         	call	_Port_SetPin	;wreg free
 19162                           
 19163                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 19164  01366A  0E99               	movlw	low _PortE
 19165  01366C  0100               	movlb	0	; () banked
 19166  01366E  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 19167  013670  0E03               	movlw	high _PortE
 19168  013672  0100               	movlb	0	; () banked
 19169  013674  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 19170  013676  0E01               	movlw	1
 19171  013678  0100               	movlb	0	; () banked
 19172  01367A  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 19173  01367C  0E00               	movlw	0
 19174  01367E  0100               	movlb	0	; () banked
 19175  013680  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 19176  013682  ECE9  F09E         	call	_Port_SetPin	;wreg free
 19177                           
 19178                           ;Motor.c: 101: MXK_Release();
 19179  013686  EC91  F0B1         	call	_MXK_Release	;wreg free
 19180                           
 19181                           ;Motor.c: 102: Timer0_Restart();
 19182  01368A  EC7F  F0B2         	call	_Timer0_Restart	;wreg free
 19183                           
 19184                           ;Motor.c: 103: return;
 19185  01368E  0012               	return	
 19186  013690                     l1628:
 19187                           
 19188                           ;Motor.c: 104: }
 19189                           ;Motor.c: 105: MXK_Release();
 19190  013690  EC91  F0B1         	call	_MXK_Release	;wreg free
 19191                           
 19192                           ;Motor.c: 106: Timer0_Stop();
 19193  013694  ECAD  F0B2         	call	_Timer0_Stop	;wreg free
 19194                           
 19195                           ;Motor.c: 107: return;
 19196  013698  0012               	return	
 19197  01369A                     l1627:
 19198                           
 19199                           ;Motor.c: 108: }
 19200                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 19201  01369A  C0BD  F060         	movff	_lStepFunction,MXK_Queue@pCallback
 19202  01369E  C0BE  F061         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
 19203  0136A2  C0BF  F062         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
 19204  0136A6  EC65  F0B2         	call	_MXK_Queue	;wreg free
 19205  0136AA  0012               	return		;funcret
 19206  0136AC                     __end_of_Motor_Step:
 19207                           	opt stack 0
 19208                           tosu	equ	0xFFF
 19209                           tosh	equ	0xFFE
 19210                           tosl	equ	0xFFD
 19211                           pclath	equ	0xFFA
 19212                           tblptru	equ	0xFF8
 19213                           tblptrh	equ	0xFF7
 19214                           tblptrl	equ	0xFF6
 19215                           tablat	equ	0xFF5
 19216                           prodh	equ	0xFF4
 19217                           prodl	equ	0xFF3
 19218                           intcon	equ	0xFF2
 19219                           postinc0	equ	0xFEE
 19220                           wreg	equ	0xFE8
 19221                           indf1	equ	0xFE7
 19222                           postdec1	equ	0xFE5
 19223                           fsr1h	equ	0xFE2
 19224                           fsr1l	equ	0xFE1
 19225                           indf2	equ	0xFDF
 19226                           postinc2	equ	0xFDE
 19227                           postdec2	equ	0xFDD
 19228                           plusw2	equ	0xFDB
 19229                           fsr2h	equ	0xFDA
 19230                           fsr2l	equ	0xFD9
 19231                           status	equ	0xFD8
 19232                           
 19233 ;; *************** function _Timer0_Stop *****************
 19234 ;; Defined at:
 19235 ;;		line 89 in file "Library/Timer0.c"
 19236 ;; Parameters:    Size  Location     Type
 19237 ;;		None
 19238 ;; Auto vars:     Size  Location     Type
 19239 ;;		None
 19240 ;; Return value:  Size  Location     Type
 19241 ;;                  1    wreg      void 
 19242 ;; Registers used:
 19243 ;;		None
 19244 ;; Tracked objects:
 19245 ;;		On entry : 0/0
 19246 ;;		On exit  : 0/0
 19247 ;;		Unchanged: 0/0
 19248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19252 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19253 ;;Total ram usage:        0 bytes
 19254 ;; Hardware stack levels used:    1
 19255 ;; Hardware stack levels required when called:    7
 19256 ;; This function calls:
 19257 ;;		Nothing
 19258 ;; This function is called by:
 19259 ;;		_Motor_Step
 19260 ;; This function uses a non-reentrant model
 19261 ;;
 19262                           
 19263                           	psect	text87
 19264  01655A                     __ptext87:
 19265                           	opt stack 0
 19266  01655A                     _Timer0_Stop:
 19267                           	opt stack 20
 19268                           
 19269                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 19270                           
 19271                           ;incstack = 0
 19272  01655A  9AF2               	bcf	intcon,5,c	;volatile
 19273                           
 19274                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 19275  01655C  94F2               	bcf	intcon,2,c	;volatile
 19276  01655E  0012               	return		;funcret
 19277  016560                     __end_of_Timer0_Stop:
 19278                           	opt stack 0
 19279                           tosu	equ	0xFFF
 19280                           tosh	equ	0xFFE
 19281                           tosl	equ	0xFFD
 19282                           pclath	equ	0xFFA
 19283                           tblptru	equ	0xFF8
 19284                           tblptrh	equ	0xFF7
 19285                           tblptrl	equ	0xFF6
 19286                           tablat	equ	0xFF5
 19287                           prodh	equ	0xFF4
 19288                           prodl	equ	0xFF3
 19289                           intcon	equ	0xFF2
 19290                           postinc0	equ	0xFEE
 19291                           wreg	equ	0xFE8
 19292                           indf1	equ	0xFE7
 19293                           postdec1	equ	0xFE5
 19294                           fsr1h	equ	0xFE2
 19295                           fsr1l	equ	0xFE1
 19296                           indf2	equ	0xFDF
 19297                           postinc2	equ	0xFDE
 19298                           postdec2	equ	0xFDD
 19299                           plusw2	equ	0xFDB
 19300                           fsr2h	equ	0xFDA
 19301                           fsr2l	equ	0xFD9
 19302                           status	equ	0xFD8
 19303                           
 19304 ;; *************** function _Timer0_Restart *****************
 19305 ;; Defined at:
 19306 ;;		line 83 in file "Library/Timer0.c"
 19307 ;; Parameters:    Size  Location     Type
 19308 ;;		None
 19309 ;; Auto vars:     Size  Location     Type
 19310 ;;		None
 19311 ;; Return value:  Size  Location     Type
 19312 ;;                  1    wreg      void 
 19313 ;; Registers used:
 19314 ;;		None
 19315 ;; Tracked objects:
 19316 ;;		On entry : 0/0
 19317 ;;		On exit  : 0/0
 19318 ;;		Unchanged: 0/0
 19319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19323 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19324 ;;Total ram usage:        0 bytes
 19325 ;; Hardware stack levels used:    1
 19326 ;; Hardware stack levels required when called:    7
 19327 ;; This function calls:
 19328 ;;		Nothing
 19329 ;; This function is called by:
 19330 ;;		_Motor_Step
 19331 ;; This function uses a non-reentrant model
 19332 ;;
 19333                           
 19334                           	psect	text88
 19335  0164FE                     __ptext88:
 19336                           	opt stack 0
 19337  0164FE                     _Timer0_Restart:
 19338                           	opt stack 20
 19339                           
 19340                           ;Timer0.c: 85: TMR0 = COUNTER;
 19341                           
 19342                           ;incstack = 0
 19343  0164FE  C029  FFD6         	movff	_COUNTER,4054	;volatile
 19344  016502  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 19345                           
 19346                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 19347  016506  8AF2               	bsf	intcon,5,c	;volatile
 19348  016508  0012               	return		;funcret
 19349  01650A                     __end_of_Timer0_Restart:
 19350                           	opt stack 0
 19351                           tosu	equ	0xFFF
 19352                           tosh	equ	0xFFE
 19353                           tosl	equ	0xFFD
 19354                           pclath	equ	0xFFA
 19355                           tblptru	equ	0xFF8
 19356                           tblptrh	equ	0xFF7
 19357                           tblptrl	equ	0xFF6
 19358                           tablat	equ	0xFF5
 19359                           prodh	equ	0xFF4
 19360                           prodl	equ	0xFF3
 19361                           intcon	equ	0xFF2
 19362                           postinc0	equ	0xFEE
 19363                           wreg	equ	0xFE8
 19364                           indf1	equ	0xFE7
 19365                           postdec1	equ	0xFE5
 19366                           fsr1h	equ	0xFE2
 19367                           fsr1l	equ	0xFE1
 19368                           indf2	equ	0xFDF
 19369                           postinc2	equ	0xFDE
 19370                           postdec2	equ	0xFDD
 19371                           plusw2	equ	0xFDB
 19372                           fsr2h	equ	0xFDA
 19373                           fsr2l	equ	0xFD9
 19374                           status	equ	0xFD8
 19375                           
 19376 ;; *************** function _MXK_SwitchTo *****************
 19377 ;; Defined at:
 19378 ;;		line 105 in file "Library/MXK.c"
 19379 ;; Parameters:    Size  Location     Type
 19380 ;;  pModule         1    wreg     enum E6927
 19381 ;; Auto vars:     Size  Location     Type
 19382 ;;  pModule         1    7[BANK0 ] enum E6927
 19383 ;;  CUR             1    6[BANK0 ] unsigned char 
 19384 ;; Return value:  Size  Location     Type
 19385 ;;                  1    wreg      unsigned char 
 19386 ;; Registers used:
 19387 ;;		wreg, status,2, status,0, cstack
 19388 ;; Tracked objects:
 19389 ;;		On entry : 0/0
 19390 ;;		On exit  : 0/0
 19391 ;;		Unchanged: 0/0
 19392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19394 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19396 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19397 ;;Total ram usage:        2 bytes
 19398 ;; Hardware stack levels used:    1
 19399 ;; Hardware stack levels required when called:    8
 19400 ;; This function calls:
 19401 ;;		_delay_us
 19402 ;; This function is called by:
 19403 ;;		_Motor_Step
 19404 ;;		_mode1
 19405 ;;		_mode2
 19406 ;;		_mode4
 19407 ;; This function uses a non-reentrant model
 19408 ;;
 19409                           
 19410                           	psect	text89
 19411  015C9C                     __ptext89:
 19412                           	opt stack 0
 19413  015C9C                     _MXK_SwitchTo:
 19414                           	opt stack 21
 19415                           
 19416                           ;incstack = 0
 19417                           ;MXK_SwitchTo@pModule stored from wreg
 19418  015C9C  0100               	movlb	0	; () banked
 19419  015C9E  6F67               	movwf	MXK_SwitchTo@pModule& (0+255),b
 19420                           
 19421                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 19422  015CA0  5086               	movf	3974,w,c	;volatile
 19423  015CA2  0B0F               	andlw	15
 19424  015CA4  0100               	movlb	0	; () banked
 19425  015CA6  6F66               	movwf	MXK_SwitchTo@CUR& (0+255),b
 19426                           
 19427                           ; BSR set to: 0
 19428                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 19429  015CA8  504B               	movf	_Bus_State,w,c
 19430  015CAA  A4D8               	btfss	status,2,c
 19431  015CAC  D002               	goto	l1730
 19432                           
 19433                           ; BSR set to: 0
 19434                           ;MXK.c: 110: return 0;
 19435  015CAE  0E00               	movlw	0
 19436                           
 19437                           ; BSR set to: 0
 19438  015CB0  0012               	return	
 19439  015CB2                     l1730:
 19440                           
 19441                           ; BSR set to: 0
 19442                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 19443                           
 19444                           ; BSR set to: 0
 19445  015CB2  0E00               	movlw	0
 19446  015CB4  6E4B               	movwf	_Bus_State,c
 19447                           
 19448                           ; BSR set to: 0
 19449                           ;MXK.c: 114: if (CUR != pModule)
 19450  015CB6  0100               	movlb	0	; () banked
 19451  015CB8  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 19452  015CBA  0100               	movlb	0	; () banked
 19453  015CBC  1966               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
 19454  015CBE  B4D8               	btfsc	status,2,c
 19455  015CC0  D00C               	goto	l1732
 19456                           
 19457                           ; BSR set to: 0
 19458                           ;MXK.c: 115: {
 19459                           ;MXK.c: 116: PORTG &= ~(0xF);
 19460  015CC2  0EF0               	movlw	240
 19461  015CC4  1686               	andwf	3974,f,c	;volatile
 19462                           
 19463                           ;MXK.c: 117: PORTG |= pModule;
 19464  015CC6  0100               	movlb	0	; () banked
 19465  015CC8  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 19466  015CCA  1286               	iorwf	3974,f,c	;volatile
 19467                           
 19468                           ; BSR set to: 0
 19469                           ;MXK.c: 120: delay_us(10);
 19470  015CCC  0E00               	movlw	0
 19471  015CCE  0100               	movlb	0	; () banked
 19472  015CD0  6F61               	movwf	(delay_us@us+1)& (0+255),b
 19473  015CD2  0E0A               	movlw	10
 19474  015CD4  6F60               	movwf	delay_us@us& (0+255),b
 19475  015CD6  EC70  F0AC         	call	_delay_us	;wreg free
 19476  015CDA                     l1732:
 19477                           
 19478                           ;MXK.c: 121: }
 19479                           ;MXK.c: 122: return 1;
 19480  015CDA  0E01               	movlw	1
 19481  015CDC  0012               	return	
 19482  015CDE                     __end_of_MXK_SwitchTo:
 19483                           	opt stack 0
 19484                           tosu	equ	0xFFF
 19485                           tosh	equ	0xFFE
 19486                           tosl	equ	0xFFD
 19487                           pclath	equ	0xFFA
 19488                           tblptru	equ	0xFF8
 19489                           tblptrh	equ	0xFF7
 19490                           tblptrl	equ	0xFF6
 19491                           tablat	equ	0xFF5
 19492                           prodh	equ	0xFF4
 19493                           prodl	equ	0xFF3
 19494                           intcon	equ	0xFF2
 19495                           postinc0	equ	0xFEE
 19496                           wreg	equ	0xFE8
 19497                           indf1	equ	0xFE7
 19498                           postdec1	equ	0xFE5
 19499                           fsr1h	equ	0xFE2
 19500                           fsr1l	equ	0xFE1
 19501                           indf2	equ	0xFDF
 19502                           postinc2	equ	0xFDE
 19503                           postdec2	equ	0xFDD
 19504                           plusw2	equ	0xFDB
 19505                           fsr2h	equ	0xFDA
 19506                           fsr2l	equ	0xFD9
 19507                           status	equ	0xFD8
 19508                           
 19509 ;; *************** function _MXK_Release *****************
 19510 ;; Defined at:
 19511 ;;		line 130 in file "Library/MXK.c"
 19512 ;; Parameters:    Size  Location     Type
 19513 ;;		None
 19514 ;; Auto vars:     Size  Location     Type
 19515 ;;		None
 19516 ;; Return value:  Size  Location     Type
 19517 ;;                  1    wreg      unsigned char 
 19518 ;; Registers used:
 19519 ;;		wreg, status,2, status,0
 19520 ;; Tracked objects:
 19521 ;;		On entry : 0/0
 19522 ;;		On exit  : 0/0
 19523 ;;		Unchanged: 0/0
 19524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19528 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19529 ;;Total ram usage:        0 bytes
 19530 ;; Hardware stack levels used:    1
 19531 ;; Hardware stack levels required when called:    7
 19532 ;; This function calls:
 19533 ;;		Nothing
 19534 ;; This function is called by:
 19535 ;;		_Motor_Step
 19536 ;;		_init
 19537 ;;		_mode1
 19538 ;;		_mode2
 19539 ;;		_mode4
 19540 ;; This function uses a non-reentrant model
 19541 ;;
 19542                           
 19543                           	psect	text90
 19544  016322                     __ptext90:
 19545                           	opt stack 0
 19546  016322                     _MXK_Release:
 19547                           	opt stack 22
 19548                           
 19549                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 19550                           
 19551                           ;incstack = 0
 19552  016322  0E01               	movlw	1
 19553  016324  6E4B               	movwf	_Bus_State,c
 19554                           
 19555                           ;MXK.c: 134: if (lQueue != 0)
 19556  016326  0100               	movlb	0	; () banked
 19557  016328  51BA               	movf	_lQueue& (0+255),w,b	;volatile
 19558  01632A  0100               	movlb	0	; () banked
 19559  01632C  11BB               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 19560  01632E  0100               	movlb	0	; () banked
 19561  016330  11BC               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 19562  016332  B4D8               	btfsc	status,2,c
 19563  016334  D002               	goto	l1735
 19564                           
 19565                           ; BSR set to: 0
 19566                           ;MXK.c: 135: return 1;
 19567  016336  0E01               	movlw	1
 19568                           
 19569                           ; BSR set to: 0
 19570  016338  0012               	return	
 19571  01633A                     l1735:
 19572                           
 19573                           ; BSR set to: 0
 19574                           ;MXK.c: 137: return 0;
 19575                           
 19576                           ; BSR set to: 0
 19577  01633A  0E00               	movlw	0
 19578  01633C  0012               	return	
 19579  01633E                     __end_of_MXK_Release:
 19580                           	opt stack 0
 19581                           tosu	equ	0xFFF
 19582                           tosh	equ	0xFFE
 19583                           tosl	equ	0xFFD
 19584                           pclath	equ	0xFFA
 19585                           tblptru	equ	0xFF8
 19586                           tblptrh	equ	0xFF7
 19587                           tblptrl	equ	0xFF6
 19588                           tablat	equ	0xFF5
 19589                           prodh	equ	0xFF4
 19590                           prodl	equ	0xFF3
 19591                           intcon	equ	0xFF2
 19592                           postinc0	equ	0xFEE
 19593                           wreg	equ	0xFE8
 19594                           indf1	equ	0xFE7
 19595                           postdec1	equ	0xFE5
 19596                           fsr1h	equ	0xFE2
 19597                           fsr1l	equ	0xFE1
 19598                           indf2	equ	0xFDF
 19599                           postinc2	equ	0xFDE
 19600                           postdec2	equ	0xFDD
 19601                           plusw2	equ	0xFDB
 19602                           fsr2h	equ	0xFDA
 19603                           fsr2l	equ	0xFD9
 19604                           status	equ	0xFD8
 19605                           
 19606 ;; *************** function _MXK_Queue *****************
 19607 ;; Defined at:
 19608 ;;		line 144 in file "Library/MXK.c"
 19609 ;; Parameters:    Size  Location     Type
 19610 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
 19611 ;;		 -> Absolute function(1), Motor_Step(1), 
 19612 ;; Auto vars:     Size  Location     Type
 19613 ;;		None
 19614 ;; Return value:  Size  Location     Type
 19615 ;;                  1    wreg      void 
 19616 ;; Registers used:
 19617 ;;		wreg, status,2, status,0
 19618 ;; Tracked objects:
 19619 ;;		On entry : 0/0
 19620 ;;		On exit  : 0/0
 19621 ;;		Unchanged: 0/0
 19622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19623 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19626 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19627 ;;Total ram usage:        3 bytes
 19628 ;; Hardware stack levels used:    1
 19629 ;; Hardware stack levels required when called:    7
 19630 ;; This function calls:
 19631 ;;		Nothing
 19632 ;; This function is called by:
 19633 ;;		_Motor_Step
 19634 ;; This function uses a non-reentrant model
 19635 ;;
 19636                           
 19637                           	psect	text91
 19638  0164CA                     __ptext91:
 19639                           	opt stack 0
 19640  0164CA                     _MXK_Queue:
 19641                           	opt stack 20
 19642                           
 19643                           ;MXK.c: 146: lQueue = pCallback;
 19644                           
 19645                           ; BSR set to: 0
 19646                           ;incstack = 0
 19647  0164CA  C060  F0BA         	movff	MXK_Queue@pCallback,_lQueue	;volatile
 19648  0164CE  C061  F0BB         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
 19649  0164D2  C062  F0BC         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
 19650  0164D6  0012               	return		;funcret
 19651  0164D8                     __end_of_MXK_Queue:
 19652                           	opt stack 0
 19653                           tosu	equ	0xFFF
 19654                           tosh	equ	0xFFE
 19655                           tosl	equ	0xFFD
 19656                           pclath	equ	0xFFA
 19657                           tblptru	equ	0xFF8
 19658                           tblptrh	equ	0xFF7
 19659                           tblptrl	equ	0xFF6
 19660                           tablat	equ	0xFF5
 19661                           prodh	equ	0xFF4
 19662                           prodl	equ	0xFF3
 19663                           intcon	equ	0xFF2
 19664                           postinc0	equ	0xFEE
 19665                           wreg	equ	0xFE8
 19666                           indf1	equ	0xFE7
 19667                           postdec1	equ	0xFE5
 19668                           fsr1h	equ	0xFE2
 19669                           fsr1l	equ	0xFE1
 19670                           indf2	equ	0xFDF
 19671                           postinc2	equ	0xFDE
 19672                           postdec2	equ	0xFDD
 19673                           plusw2	equ	0xFDB
 19674                           fsr2h	equ	0xFDA
 19675                           fsr2l	equ	0xFD9
 19676                           status	equ	0xFD8
 19677                           
 19678 ;; *************** function _MXK_BlockSwitchTo *****************
 19679 ;; Defined at:
 19680 ;;		line 82 in file "Library/MXK.c"
 19681 ;; Parameters:    Size  Location     Type
 19682 ;;  pModule         1    wreg     enum E6927
 19683 ;; Auto vars:     Size  Location     Type
 19684 ;;  pModule         1    7[BANK0 ] enum E6927
 19685 ;;  CUR             1    6[BANK0 ] unsigned char 
 19686 ;; Return value:  Size  Location     Type
 19687 ;;                  1    wreg      unsigned char 
 19688 ;; Registers used:
 19689 ;;		wreg, status,2, status,0, cstack
 19690 ;; Tracked objects:
 19691 ;;		On entry : 0/0
 19692 ;;		On exit  : 0/0
 19693 ;;		Unchanged: 0/0
 19694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19696 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19698 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19699 ;;Total ram usage:        2 bytes
 19700 ;; Hardware stack levels used:    1
 19701 ;; Hardware stack levels required when called:    8
 19702 ;; This function calls:
 19703 ;;		_delay_us
 19704 ;; This function is called by:
 19705 ;;		_init
 19706 ;; This function uses a non-reentrant model
 19707 ;;
 19708                           
 19709                           	psect	text92
 19710  015DDA                     __ptext92:
 19711                           	opt stack 0
 19712  015DDA                     _MXK_BlockSwitchTo:
 19713                           	opt stack 21
 19714                           
 19715                           ;incstack = 0
 19716                           ;MXK_BlockSwitchTo@pModule stored from wreg
 19717  015DDA  0100               	movlb	0	; () banked
 19718  015DDC  6F67               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
 19719                           
 19720                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
 19721  015DDE  5086               	movf	3974,w,c	;volatile
 19722  015DE0  0B0F               	andlw	15
 19723  015DE2  0100               	movlb	0	; () banked
 19724  015DE4  6F66               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
 19725  015DE6                     
 19726                           ; BSR set to: 0
 19727                           
 19728                           ; BSR set to: 0
 19729  015DE6  504B               	movf	_Bus_State,w,c
 19730  015DE8  B4D8               	btfsc	status,2,c
 19731  015DEA  D7FD               	goto	l1724
 19732                           
 19733                           ;MXK.c: 88: Bus_State = eMXK_Busy;
 19734  015DEC  0E00               	movlw	0
 19735  015DEE  6E4B               	movwf	_Bus_State,c
 19736                           
 19737                           ;MXK.c: 90: if (CUR != pModule)
 19738  015DF0  0100               	movlb	0	; () banked
 19739  015DF2  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 19740  015DF4  0100               	movlb	0	; () banked
 19741  015DF6  1966               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
 19742  015DF8  B4D8               	btfsc	status,2,c
 19743  015DFA  D00C               	goto	l1726
 19744                           
 19745                           ; BSR set to: 0
 19746                           ;MXK.c: 91: {
 19747                           ;MXK.c: 92: PORTG &= ~(0xF);
 19748  015DFC  0EF0               	movlw	240
 19749  015DFE  1686               	andwf	3974,f,c	;volatile
 19750                           
 19751                           ;MXK.c: 93: PORTG |= pModule;
 19752  015E00  0100               	movlb	0	; () banked
 19753  015E02  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 19754  015E04  1286               	iorwf	3974,f,c	;volatile
 19755                           
 19756                           ; BSR set to: 0
 19757                           ;MXK.c: 96: delay_us(10);
 19758  015E06  0E00               	movlw	0
 19759  015E08  0100               	movlb	0	; () banked
 19760  015E0A  6F61               	movwf	(delay_us@us+1)& (0+255),b
 19761  015E0C  0E0A               	movlw	10
 19762  015E0E  6F60               	movwf	delay_us@us& (0+255),b
 19763  015E10  EC70  F0AC         	call	_delay_us	;wreg free
 19764  015E14                     l1726:
 19765                           
 19766                           ;MXK.c: 97: }
 19767                           ;MXK.c: 98: return 1;
 19768  015E14  0E01               	movlw	1
 19769  015E16  0012               	return	
 19770  015E18                     __end_of_MXK_BlockSwitchTo:
 19771                           	opt stack 0
 19772                           tosu	equ	0xFFF
 19773                           tosh	equ	0xFFE
 19774                           tosl	equ	0xFFD
 19775                           pclath	equ	0xFFA
 19776                           tblptru	equ	0xFF8
 19777                           tblptrh	equ	0xFF7
 19778                           tblptrl	equ	0xFF6
 19779                           tablat	equ	0xFF5
 19780                           prodh	equ	0xFF4
 19781                           prodl	equ	0xFF3
 19782                           intcon	equ	0xFF2
 19783                           postinc0	equ	0xFEE
 19784                           wreg	equ	0xFE8
 19785                           indf1	equ	0xFE7
 19786                           postdec1	equ	0xFE5
 19787                           fsr1h	equ	0xFE2
 19788                           fsr1l	equ	0xFE1
 19789                           indf2	equ	0xFDF
 19790                           postinc2	equ	0xFDE
 19791                           postdec2	equ	0xFDD
 19792                           plusw2	equ	0xFDB
 19793                           fsr2h	equ	0xFDA
 19794                           fsr2l	equ	0xFD9
 19795                           status	equ	0xFD8
 19796                           
 19797 ;; *************** function _delay_us *****************
 19798 ;; Defined at:
 19799 ;;		line 255 in file "Library/Types.c"
 19800 ;; Parameters:    Size  Location     Type
 19801 ;;  us              2    0[BANK0 ] unsigned short 
 19802 ;; Auto vars:     Size  Location     Type
 19803 ;;  u               4    2[BANK0 ] unsigned long 
 19804 ;; Return value:  Size  Location     Type
 19805 ;;                  1    wreg      void 
 19806 ;; Registers used:
 19807 ;;		wreg, status,2, status,0
 19808 ;; Tracked objects:
 19809 ;;		On entry : 0/0
 19810 ;;		On exit  : 0/0
 19811 ;;		Unchanged: 0/0
 19812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19813 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19814 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19816 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19817 ;;Total ram usage:        6 bytes
 19818 ;; Hardware stack levels used:    1
 19819 ;; Hardware stack levels required when called:    7
 19820 ;; This function calls:
 19821 ;;		Nothing
 19822 ;; This function is called by:
 19823 ;;		_MXK_BlockSwitchTo
 19824 ;;		_MXK_SwitchTo
 19825 ;; This function uses a non-reentrant model
 19826 ;;
 19827                           
 19828                           	psect	text93
 19829  0158E0                     __ptext93:
 19830                           	opt stack 0
 19831  0158E0                     _delay_us:
 19832                           	opt stack 21
 19833                           
 19834                           ;Types.c: 256: unsigned long u;
 19835                           ;Types.c: 257: while (us--) {
 19836                           
 19837                           ;incstack = 0
 19838  0158E0  D01C               	goto	u9260
 19839  0158E2                     l12537:
 19840                           
 19841                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 19842  0158E2  0E00               	movlw	0
 19843  0158E4  0100               	movlb	0	; () banked
 19844  0158E6  6F62               	movwf	delay_us@u& (0+255),b
 19845  0158E8  0E00               	movlw	0
 19846  0158EA  6F63               	movwf	(delay_us@u+1)& (0+255),b
 19847  0158EC  0E00               	movlw	0
 19848  0158EE  6F64               	movwf	(delay_us@u+2)& (0+255),b
 19849  0158F0  0E00               	movlw	0
 19850  0158F2  6F65               	movwf	(delay_us@u+3)& (0+255),b
 19851  0158F4                     l12539:
 19852                           
 19853                           ; BSR set to: 0
 19854  0158F4  0100               	movlb	0	; () banked
 19855  0158F6  5162               	movf	delay_us@u& (0+255),w,b
 19856  0158F8  0100               	movlb	0	; () banked
 19857  0158FA  1163               	iorwf	(delay_us@u+1)& (0+255),w,b
 19858  0158FC  0100               	movlb	0	; () banked
 19859  0158FE  1164               	iorwf	(delay_us@u+2)& (0+255),w,b
 19860  015900  0100               	movlb	0	; () banked
 19861  015902  1165               	iorwf	(delay_us@u+3)& (0+255),w,b
 19862  015904  A4D8               	btfss	status,2,c
 19863  015906  D009               	goto	u9260
 19864                           
 19865                           ; BSR set to: 0
 19866                           
 19867                           ; BSR set to: 0
 19868  015908  F000               	nop		; ;# 
 19869  01590A  0E01               	movlw	1
 19870  01590C  0100               	movlb	0	; () banked
 19871  01590E  2762               	addwf	delay_us@u& (0+255),f,b
 19872  015910  0E00               	movlw	0
 19873  015912  2363               	addwfc	(delay_us@u+1)& (0+255),f,b
 19874  015914  2364               	addwfc	(delay_us@u+2)& (0+255),f,b
 19875  015916  2365               	addwfc	(delay_us@u+3)& (0+255),f,b
 19876  015918  D7ED               	goto	l12539
 19877  01591A                     u9260:
 19878                           
 19879                           ; BSR set to: 0
 19880                           
 19881                           ; BSR set to: 0
 19882  01591A  0100               	movlb	0	; () banked
 19883  01591C  0760               	decf	delay_us@us& (0+255),f,b
 19884  01591E  A0D8               	btfss	status,0,c
 19885  015920  0761               	decf	(delay_us@us+1)& (0+255),f,b
 19886  015922  0100               	movlb	0	; () banked
 19887  015924  2960               	incf	delay_us@us& (0+255),w,b
 19888  015926  E1DD               	bnz	l12537
 19889  015928  0100               	movlb	0	; () banked
 19890  01592A  2961               	incf	(delay_us@us+1)& (0+255),w,b
 19891  01592C  B4D8               	btfsc	status,2,c
 19892  01592E  0012               	return	
 19893  015930  D7D8               	goto	l832
 19894  015932                     __end_of_delay_us:
 19895                           	opt stack 0
 19896                           tosu	equ	0xFFF
 19897                           tosh	equ	0xFFE
 19898                           tosl	equ	0xFFD
 19899                           pclath	equ	0xFFA
 19900                           tblptru	equ	0xFF8
 19901                           tblptrh	equ	0xFF7
 19902                           tblptrl	equ	0xFF6
 19903                           tablat	equ	0xFF5
 19904                           prodh	equ	0xFF4
 19905                           prodl	equ	0xFF3
 19906                           intcon	equ	0xFF2
 19907                           postinc0	equ	0xFEE
 19908                           wreg	equ	0xFE8
 19909                           indf1	equ	0xFE7
 19910                           postdec1	equ	0xFE5
 19911                           fsr1h	equ	0xFE2
 19912                           fsr1l	equ	0xFE1
 19913                           indf2	equ	0xFDF
 19914                           postinc2	equ	0xFDE
 19915                           postdec2	equ	0xFDD
 19916                           plusw2	equ	0xFDB
 19917                           fsr2h	equ	0xFDA
 19918                           fsr2l	equ	0xFD9
 19919                           status	equ	0xFD8
 19920                           
 19921 ;; *************** function _LCD_Init *****************
 19922 ;; Defined at:
 19923 ;;		line 172 in file "Library/LCD.c"
 19924 ;; Parameters:    Size  Location     Type
 19925 ;;		None
 19926 ;; Auto vars:     Size  Location     Type
 19927 ;;  i               2   55[BANK0 ] unsigned short 
 19928 ;; Return value:  Size  Location     Type
 19929 ;;                  1    wreg      void 
 19930 ;; Registers used:
 19931 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19932 ;; Tracked objects:
 19933 ;;		On entry : 0/0
 19934 ;;		On exit  : 0/0
 19935 ;;		Unchanged: 0/0
 19936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19938 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19939 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19940 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19941 ;;Total ram usage:        4 bytes
 19942 ;; Hardware stack levels used:    1
 19943 ;; Hardware stack levels required when called:   15
 19944 ;; This function calls:
 19945 ;;		_Configure_GPIOs
 19946 ;;		_LCD_Fill
 19947 ;;		_LCD_Write
 19948 ;;		_Set_Rotation
 19949 ;;		_delay_ms
 19950 ;; This function is called by:
 19951 ;;		_init
 19952 ;; This function uses a non-reentrant model
 19953 ;;
 19954                           
 19955                           	psect	text94
 19956  012EB4                     __ptext94:
 19957                           	opt stack 0
 19958  012EB4                     _LCD_Init:
 19959                           	opt stack 14
 19960                           
 19961                           ;LCD.c: 174: UINT16 i;
 19962                           ;LCD.c: 175: Configure_GPIOs();
 19963                           
 19964                           ; BSR set to: 0
 19965                           ;incstack = 0
 19966  012EB4  EC1D  F0A9         	call	_Configure_GPIOs	;wreg free
 19967                           
 19968                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
 19969  012EB8  0E00               	movlw	0
 19970  012EBA  0100               	movlb	0	; () banked
 19971  012EBC  6F98               	movwf	(LCD_Init@i+1)& (0+255),b
 19972  012EBE  0E00               	movlw	0
 19973  012EC0  6F97               	movwf	LCD_Init@i& (0+255),b
 19974                           
 19975                           ; BSR set to: 0
 19976  012EC2  0100               	movlb	0	; () banked
 19977  012EC4  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 19978  012EC6  E106               	bnz	u10730
 19979  012EC8  0E59               	movlw	89
 19980  012ECA  0100               	movlb	0	; () banked
 19981  012ECC  5D97               	subwf	LCD_Init@i& (0+255),w,b
 19982  012ECE  B0D8               	btfsc	status,0,c
 19983  012ED0  D08B               	goto	u10770
 19984  012ED2  D001               	goto	l85
 19985  012ED4                     u10730:
 19986                           
 19987                           ; BSR set to: 0
 19988  012ED4  D089               	goto	u10770
 19989  012ED6                     l85:
 19990                           
 19991                           ; BSR set to: 0
 19992                           ;LCD.c: 178: {
 19993                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
 19994                           
 19995                           ; BSR set to: 0
 19996  012ED6  90D8               	bcf	status,0,c
 19997  012ED8  0100               	movlb	0	; () banked
 19998  012EDA  3597               	rlcf	LCD_Init@i& (0+255),w,b
 19999  012EDC  6EF6               	movwf	tblptrl,c
 20000  012EDE  0100               	movlb	0	; () banked
 20001  012EE0  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 20002  012EE2  6EF7               	movwf	tblptrh,c
 20003  012EE4  0EC3               	movlw	low _InitList
 20004  012EE6  26F6               	addwf	tblptrl,f,c
 20005  012EE8  0EFC               	movlw	high _InitList
 20006  012EEA  22F7               	addwfc	tblptrh,f,c
 20007  012EEC                     	if	1	;There are 3 active tblptr bytes
 20008  012EEC  6AF8               	clrf	tblptru,c
 20009  012EEE  0E00               	movlw	low (__mediumconst shr (0+16))
 20010  012EF0  22F8               	addwfc	tblptru,f,c
 20011  012EF2                     	endif
 20012  012EF2  0009               	tblrd		*+
 20013  012EF4  0E80               	movlw	128
 20014  012EF6  18F5               	xorwf	tablat,w,c
 20015  012EF8  0009               	tblrd		*+
 20016  012EFA  10F5               	iorwf	tablat,w,c
 20017  012EFC  A4D8               	btfss	status,2,c
 20018  012EFE  D022               	goto	l87
 20019                           
 20020                           ; BSR set to: 0
 20021  012F00  0100               	movlb	0	; () banked
 20022  012F02  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 20023  012F04  E11F               	bnz	l13991
 20024  012F06  0E58               	movlw	88
 20025  012F08  0100               	movlb	0	; () banked
 20026  012F0A  5D97               	subwf	LCD_Init@i& (0+255),w,b
 20027  012F0C  B0D8               	btfsc	status,0,c
 20028  012F0E  D01A               	goto	l87
 20029                           
 20030                           ; BSR set to: 0
 20031                           ;LCD.c: 180: delay_ms(InitList[++i]);
 20032  012F10  0100               	movlb	0	; () banked
 20033  012F12  4B97               	infsnz	LCD_Init@i& (0+255),f,b
 20034  012F14  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
 20035  012F16  90D8               	bcf	status,0,c
 20036  012F18  0100               	movlb	0	; () banked
 20037  012F1A  3597               	rlcf	LCD_Init@i& (0+255),w,b
 20038  012F1C  6EF6               	movwf	tblptrl,c
 20039  012F1E  0100               	movlb	0	; () banked
 20040  012F20  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 20041  012F22  6EF7               	movwf	tblptrh,c
 20042  012F24  0EC3               	movlw	low _InitList
 20043  012F26  26F6               	addwf	tblptrl,f,c
 20044  012F28  0EFC               	movlw	high _InitList
 20045  012F2A  22F7               	addwfc	tblptrh,f,c
 20046  012F2C                     	if	1	;There are 3 active tblptr bytes
 20047  012F2C  6AF8               	clrf	tblptru,c
 20048  012F2E  0E00               	movlw	low (__mediumconst shr (0+16))
 20049  012F30  22F8               	addwfc	tblptru,f,c
 20050  012F32                     	endif
 20051  012F32  0009               	tblrd		*+
 20052  012F34  CFF5 F060          	movff	tablat,delay_ms@ms
 20053  012F38  000A               	tblrd		*-
 20054  012F3A  CFF5 F061          	movff	tablat,delay_ms@ms+1
 20055  012F3E  ECF6  F0A9         	call	_delay_ms	;wreg free
 20056  012F42  D04B               	goto	l90
 20057  012F44                     l87:
 20058  012F44                     l13991:
 20059                           
 20060                           ;LCD.c: 181: else
 20061                           ;LCD.c: 182: {
 20062                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
 20063  012F44  90D8               	bcf	status,0,c
 20064  012F46  0100               	movlb	0	; () banked
 20065  012F48  3597               	rlcf	LCD_Init@i& (0+255),w,b
 20066  012F4A  6EF6               	movwf	tblptrl,c
 20067  012F4C  0100               	movlb	0	; () banked
 20068  012F4E  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 20069  012F50  6EF7               	movwf	tblptrh,c
 20070  012F52  0EC3               	movlw	low _InitList
 20071  012F54  26F6               	addwf	tblptrl,f,c
 20072  012F56  0EFC               	movlw	high _InitList
 20073  012F58  22F7               	addwfc	tblptrh,f,c
 20074  012F5A                     	if	1	;There are 3 active tblptr bytes
 20075  012F5A  6AF8               	clrf	tblptru,c
 20076  012F5C  0E00               	movlw	low (__mediumconst shr (0+16))
 20077  012F5E  22F8               	addwfc	tblptru,f,c
 20078  012F60                     	endif
 20079  012F60  0009               	tblrd		*+
 20080  012F62  0E00               	movlw	0
 20081  012F64  5EF5               	subwf	tablat,f,c
 20082  012F66  0009               	tblrd		*+
 20083  012F68  0E01               	movlw	1
 20084  012F6A  5AF5               	subwfb	tablat,f,c
 20085  012F6C  A0D8               	btfss	status,0,c
 20086  012F6E  D020               	goto	l89
 20087                           
 20088                           ; BSR set to: 0
 20089  012F70  0E00               	movlw	0
 20090  012F72  0100               	movlb	0	; () banked
 20091  012F74  6F63               	movwf	LCD_Write@mode& (0+255),b
 20092  012F76  90D8               	bcf	status,0,c
 20093  012F78  0100               	movlb	0	; () banked
 20094  012F7A  3597               	rlcf	LCD_Init@i& (0+255),w,b
 20095  012F7C  6EF6               	movwf	tblptrl,c
 20096  012F7E  0100               	movlb	0	; () banked
 20097  012F80  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 20098  012F82  6EF7               	movwf	tblptrh,c
 20099  012F84  0EC3               	movlw	low _InitList
 20100  012F86  26F6               	addwf	tblptrl,f,c
 20101  012F88  0EFC               	movlw	high _InitList
 20102  012F8A  22F7               	addwfc	tblptrh,f,c
 20103  012F8C                     	if	1	;There are 3 active tblptr bytes
 20104  012F8C  6AF8               	clrf	tblptru,c
 20105  012F8E  0E00               	movlw	low (__mediumconst shr (0+16))
 20106  012F90  22F8               	addwfc	tblptru,f,c
 20107  012F92                     	endif
 20108  012F92  0009               	tblrd		*+
 20109  012F94  CFF5 F095          	movff	tablat,??_LCD_Init
 20110  012F98  0009               	tblrd		*+
 20111  012F9A  CFF5 F096          	movff	tablat,??_LCD_Init+1
 20112  012F9E  C096  F095         	movff	??_LCD_Init+1,??_LCD_Init
 20113  012FA2  0100               	movlb	0	; () banked
 20114  012FA4  6B96               	clrf	(??_LCD_Init+1)& (0+255),b
 20115  012FA6  0100               	movlb	0	; () banked
 20116  012FA8  5195               	movf	??_LCD_Init& (0+255),w,b
 20117  012FAA  ECC8  F0B0         	call	_LCD_Write
 20118  012FAE  D015               	goto	l90
 20119  012FB0                     l89:
 20120                           
 20121                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
 20122  012FB0  0E01               	movlw	1
 20123  012FB2  0100               	movlb	0	; () banked
 20124  012FB4  6F63               	movwf	LCD_Write@mode& (0+255),b
 20125  012FB6  90D8               	bcf	status,0,c
 20126  012FB8  0100               	movlb	0	; () banked
 20127  012FBA  3597               	rlcf	LCD_Init@i& (0+255),w,b
 20128  012FBC  6EF6               	movwf	tblptrl,c
 20129  012FBE  0100               	movlb	0	; () banked
 20130  012FC0  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 20131  012FC2  6EF7               	movwf	tblptrh,c
 20132  012FC4  0EC3               	movlw	low _InitList
 20133  012FC6  26F6               	addwf	tblptrl,f,c
 20134  012FC8  0EFC               	movlw	high _InitList
 20135  012FCA  22F7               	addwfc	tblptrh,f,c
 20136  012FCC                     	if	1	;There are 3 active tblptr bytes
 20137  012FCC  6AF8               	clrf	tblptru,c
 20138  012FCE  0E00               	movlw	low (__mediumconst shr (0+16))
 20139  012FD0  22F8               	addwfc	tblptru,f,c
 20140  012FD2                     	endif
 20141  012FD2  0008               	tblrd		*
 20142  012FD4  50F5               	movf	tablat,w,c
 20143  012FD6  ECC8  F0B0         	call	_LCD_Write
 20144  012FDA                     l90:
 20145  012FDA  0100               	movlb	0	; () banked
 20146  012FDC  4B97               	infsnz	LCD_Init@i& (0+255),f,b
 20147  012FDE  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
 20148                           
 20149                           ; BSR set to: 0
 20150  012FE0  0100               	movlb	0	; () banked
 20151  012FE2  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 20152  012FE4  E101               	bnz	l14001
 20153  012FE6  D770               	goto	L12
 20154  012FE8                     u10770:
 20155  012FE8                     l14001:
 20156                           
 20157                           ; BSR set to: 0
 20158                           ;LCD.c: 185: }
 20159                           ;LCD.c: 186: }
 20160                           ;LCD.c: 187: delay_ms(100);
 20161  012FE8  0E00               	movlw	0
 20162  012FEA  0100               	movlb	0	; () banked
 20163  012FEC  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 20164  012FEE  0E64               	movlw	100
 20165  012FF0  6F60               	movwf	delay_ms@ms& (0+255),b
 20166  012FF2  ECF6  F0A9         	call	_delay_ms	;wreg free
 20167                           
 20168                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
 20169  012FF6  0E00               	movlw	0
 20170  012FF8  0100               	movlb	0	; () banked
 20171  012FFA  6F63               	movwf	LCD_Write@mode& (0+255),b
 20172  012FFC  0E29               	movlw	41
 20173  012FFE  ECC8  F0B0         	call	_LCD_Write
 20174                           
 20175                           ;LCD.c: 189: Set_Rotation(1);
 20176  013002  0E01               	movlw	1
 20177  013004  EC15  F0A5         	call	_Set_Rotation
 20178                           
 20179                           ;LCD.c: 191: delay_ms(100);
 20180  013008  0E00               	movlw	0
 20181  01300A  0100               	movlb	0	; () banked
 20182  01300C  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 20183  01300E  0E64               	movlw	100
 20184  013010  6F60               	movwf	delay_ms@ms& (0+255),b
 20185  013012  ECF6  F0A9         	call	_delay_ms	;wreg free
 20186                           
 20187                           ;LCD.c: 192: LCD_Fill(0x0000);
 20188  013016  0E00               	movlw	0
 20189  013018  0100               	movlb	0	; () banked
 20190  01301A  6F6A               	movwf	(LCD_Fill@pColour+1)& (0+255),b
 20191  01301C  0E00               	movlw	0
 20192  01301E  6F69               	movwf	LCD_Fill@pColour& (0+255),b
 20193  013020  EC44  F0AC         	call	_LCD_Fill	;wreg free
 20194  013024  0012               	return		;funcret
 20195  013026                     __end_of_LCD_Init:
 20196                           	opt stack 0
 20197                           tosu	equ	0xFFF
 20198                           tosh	equ	0xFFE
 20199                           tosl	equ	0xFFD
 20200                           pclath	equ	0xFFA
 20201                           tblptru	equ	0xFF8
 20202                           tblptrh	equ	0xFF7
 20203                           tblptrl	equ	0xFF6
 20204                           tablat	equ	0xFF5
 20205                           prodh	equ	0xFF4
 20206                           prodl	equ	0xFF3
 20207                           intcon	equ	0xFF2
 20208                           postinc0	equ	0xFEE
 20209                           wreg	equ	0xFE8
 20210                           indf1	equ	0xFE7
 20211                           postdec1	equ	0xFE5
 20212                           fsr1h	equ	0xFE2
 20213                           fsr1l	equ	0xFE1
 20214                           indf2	equ	0xFDF
 20215                           postinc2	equ	0xFDE
 20216                           postdec2	equ	0xFDD
 20217                           plusw2	equ	0xFDB
 20218                           fsr2h	equ	0xFDA
 20219                           fsr2l	equ	0xFD9
 20220                           status	equ	0xFD8
 20221                           
 20222 ;; *************** function _Set_Rotation *****************
 20223 ;; Defined at:
 20224 ;;		line 248 in file "Library/LCD.c"
 20225 ;; Parameters:    Size  Location     Type
 20226 ;;  m               1    wreg     unsigned char 
 20227 ;; Auto vars:     Size  Location     Type
 20228 ;;  m               1    5[BANK0 ] unsigned char 
 20229 ;;  rotation        1    6[BANK0 ] unsigned char 
 20230 ;; Return value:  Size  Location     Type
 20231 ;;                  1    wreg      void 
 20232 ;; Registers used:
 20233 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20234 ;; Tracked objects:
 20235 ;;		On entry : 0/0
 20236 ;;		On exit  : 0/0
 20237 ;;		Unchanged: 0/0
 20238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20240 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20242 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20243 ;;Total ram usage:        2 bytes
 20244 ;; Hardware stack levels used:    1
 20245 ;; Hardware stack levels required when called:    9
 20246 ;; This function calls:
 20247 ;;		_LCD_Write
 20248 ;; This function is called by:
 20249 ;;		_LCD_Init
 20250 ;; This function uses a non-reentrant model
 20251 ;;
 20252                           
 20253                           	psect	text95
 20254  014A2A                     __ptext95:
 20255                           	opt stack 0
 20256  014A2A                     _Set_Rotation:
 20257                           	opt stack 19
 20258                           
 20259                           ;incstack = 0
 20260                           ;Set_Rotation@m stored from wreg
 20261  014A2A  0100               	movlb	0	; () banked
 20262  014A2C  6F65               	movwf	Set_Rotation@m& (0+255),b
 20263                           
 20264                           ;LCD.c: 250: UINT8 rotation = 0x00;
 20265  014A2E  0E00               	movlw	0
 20266  014A30  0100               	movlb	0	; () banked
 20267  014A32  6F66               	movwf	Set_Rotation@rotation& (0+255),b
 20268                           
 20269                           ; BSR set to: 0
 20270                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
 20271  014A34  0E00               	movlw	0
 20272  014A36  0100               	movlb	0	; () banked
 20273  014A38  6F63               	movwf	LCD_Write@mode& (0+255),b
 20274  014A3A  0E36               	movlw	54
 20275  014A3C  ECC8  F0B0         	call	_LCD_Write
 20276                           
 20277                           ;LCD.c: 253: rotation = (m % 4);
 20278  014A40  0100               	movlb	0	; () banked
 20279  014A42  5165               	movf	Set_Rotation@m& (0+255),w,b
 20280  014A44  0B03               	andlw	3
 20281  014A46  0100               	movlb	0	; () banked
 20282  014A48  6F66               	movwf	Set_Rotation@rotation& (0+255),b
 20283                           
 20284                           ;LCD.c: 255: switch(rotation)
 20285  014A4A  D02C               	goto	l117
 20286  014A4C                     
 20287                           ; BSR set to: 0
 20288                           ;LCD.c: 258: {
 20289                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
 20290                           
 20291                           ; BSR set to: 0
 20292  014A4C  0E01               	movlw	1
 20293  014A4E  0100               	movlb	0	; () banked
 20294  014A50  6F63               	movwf	LCD_Write@mode& (0+255),b
 20295  014A52  0EC8               	movlw	200
 20296  014A54  ECC8  F0B0         	call	_LCD_Write
 20297                           
 20298                           ;LCD.c: 260: w = 128;
 20299  014A58  0E80               	movlw	128
 20300  014A5A  6E50               	movwf	_w,c
 20301                           
 20302                           ;LCD.c: 261: l = 128;
 20303  014A5C  0E80               	movlw	128
 20304  014A5E  6E4F               	movwf	_l,c
 20305                           
 20306                           ;LCD.c: 262: break;
 20307  014A60  0012               	return	
 20308  014A62                     
 20309                           ;LCD.c: 265: {
 20310                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
 20311  014A62  0E01               	movlw	1
 20312  014A64  0100               	movlb	0	; () banked
 20313  014A66  6F63               	movwf	LCD_Write@mode& (0+255),b
 20314  014A68  0EA8               	movlw	168
 20315  014A6A  ECC8  F0B0         	call	_LCD_Write
 20316                           
 20317                           ;LCD.c: 267: w = 128;
 20318  014A6E  0E80               	movlw	128
 20319  014A70  6E50               	movwf	_w,c
 20320                           
 20321                           ;LCD.c: 268: l = 128;
 20322  014A72  0E80               	movlw	128
 20323  014A74  6E4F               	movwf	_l,c
 20324                           
 20325                           ;LCD.c: 269: break;
 20326  014A76  0012               	return	
 20327  014A78                     
 20328                           ;LCD.c: 272: {
 20329                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
 20330  014A78  0E01               	movlw	1
 20331  014A7A  0100               	movlb	0	; () banked
 20332  014A7C  6F63               	movwf	LCD_Write@mode& (0+255),b
 20333  014A7E  0E08               	movlw	8
 20334  014A80  ECC8  F0B0         	call	_LCD_Write
 20335                           
 20336                           ;LCD.c: 274: w = 128;
 20337  014A84  0E80               	movlw	128
 20338  014A86  6E50               	movwf	_w,c
 20339                           
 20340                           ;LCD.c: 275: l = 128;
 20341  014A88  0E80               	movlw	128
 20342  014A8A  6E4F               	movwf	_l,c
 20343                           
 20344                           ;LCD.c: 276: break;
 20345  014A8C  0012               	return	
 20346  014A8E                     
 20347                           ;LCD.c: 279: {
 20348                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
 20349  014A8E  0E01               	movlw	1
 20350  014A90  0100               	movlb	0	; () banked
 20351  014A92  6F63               	movwf	LCD_Write@mode& (0+255),b
 20352  014A94  0E68               	movlw	104
 20353  014A96  ECC8  F0B0         	call	_LCD_Write
 20354                           
 20355                           ;LCD.c: 281: w = 128;
 20356  014A9A  0E80               	movlw	128
 20357  014A9C  6E50               	movwf	_w,c
 20358                           
 20359                           ;LCD.c: 282: l = 128;
 20360  014A9E  0E80               	movlw	128
 20361  014AA0  6E4F               	movwf	_l,c
 20362                           
 20363                           ;LCD.c: 284: }
 20364                           ;LCD.c: 285: }
 20365                           
 20366                           ;LCD.c: 283: break;
 20367  014AA2  0012               	return	
 20368  014AA4                     l117:
 20369  014AA4  0100               	movlb	0	; () banked
 20370  014AA6  5166               	movf	Set_Rotation@rotation& (0+255),w,b
 20371                           
 20372                           ; Switch size 1, requested type "space"
 20373                           ; Number of cases is 4, Range of values is 0 to 3
 20374                           ; switch strategies available:
 20375                           ; Name         Instructions Cycles
 20376                           ; simple_byte           13     7 (average)
 20377                           ;	Chosen strategy is simple_byte
 20378  014AA8  0A00               	xorlw	0	; case 0
 20379  014AAA  B4D8               	btfsc	status,2,c
 20380  014AAC  D7CF               	goto	l118
 20381  014AAE  0A01               	xorlw	1	; case 1
 20382  014AB0  B4D8               	btfsc	status,2,c
 20383  014AB2  D7D7               	goto	l120
 20384  014AB4  0A03               	xorlw	3	; case 2
 20385  014AB6  B4D8               	btfsc	status,2,c
 20386  014AB8  D7DF               	goto	l121
 20387  014ABA  0A01               	xorlw	1	; case 3
 20388  014ABC  A4D8               	btfss	status,2,c
 20389  014ABE  0012               	return	
 20390  014AC0  D7E6               	goto	l122
 20391  014AC2                     __end_of_Set_Rotation:
 20392                           	opt stack 0
 20393                           tosu	equ	0xFFF
 20394                           tosh	equ	0xFFE
 20395                           tosl	equ	0xFFD
 20396                           pclath	equ	0xFFA
 20397                           tblptru	equ	0xFF8
 20398                           tblptrh	equ	0xFF7
 20399                           tblptrl	equ	0xFF6
 20400                           tablat	equ	0xFF5
 20401                           prodh	equ	0xFF4
 20402                           prodl	equ	0xFF3
 20403                           intcon	equ	0xFF2
 20404                           postinc0	equ	0xFEE
 20405                           wreg	equ	0xFE8
 20406                           indf1	equ	0xFE7
 20407                           postdec1	equ	0xFE5
 20408                           fsr1h	equ	0xFE2
 20409                           fsr1l	equ	0xFE1
 20410                           indf2	equ	0xFDF
 20411                           postinc2	equ	0xFDE
 20412                           postdec2	equ	0xFDD
 20413                           plusw2	equ	0xFDB
 20414                           fsr2h	equ	0xFDA
 20415                           fsr2l	equ	0xFD9
 20416                           status	equ	0xFD8
 20417                           
 20418 ;; *************** function _LCD_Fill *****************
 20419 ;; Defined at:
 20420 ;;		line 287 in file "Library/LCD.c"
 20421 ;; Parameters:    Size  Location     Type
 20422 ;;  pColour         2    9[BANK0 ] unsigned short 
 20423 ;; Auto vars:     Size  Location     Type
 20424 ;;  j               1   12[BANK0 ] unsigned char 
 20425 ;;  i               1   11[BANK0 ] unsigned char 
 20426 ;; Return value:  Size  Location     Type
 20427 ;;                  1    wreg      void 
 20428 ;; Registers used:
 20429 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20430 ;; Tracked objects:
 20431 ;;		On entry : 0/0
 20432 ;;		On exit  : 0/0
 20433 ;;		Unchanged: 0/0
 20434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20435 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20436 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20438 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20439 ;;Total ram usage:        4 bytes
 20440 ;; Hardware stack levels used:    1
 20441 ;; Hardware stack levels required when called:   10
 20442 ;; This function calls:
 20443 ;;		_LCD_Word_Write
 20444 ;;		_Set_Addr_Window
 20445 ;; This function is called by:
 20446 ;;		_LCD_Init
 20447 ;; This function uses a non-reentrant model
 20448 ;;
 20449                           
 20450                           	psect	text96
 20451  015888                     __ptext96:
 20452                           	opt stack 0
 20453  015888                     _LCD_Fill:
 20454                           	opt stack 18
 20455                           
 20456                           ;LCD.c: 296: UINT8 i = 0x00;
 20457                           
 20458                           ;incstack = 0
 20459  015888  0E00               	movlw	0
 20460  01588A  0100               	movlb	0	; () banked
 20461  01588C  6F6B               	movwf	LCD_Fill@i& (0+255),b
 20462                           
 20463                           ;LCD.c: 297: UINT8 j = 0x00;
 20464  01588E  0E00               	movlw	0
 20465  015890  0100               	movlb	0	; () banked
 20466  015892  6F6C               	movwf	LCD_Fill@j& (0+255),b
 20467                           
 20468                           ; BSR set to: 0
 20469                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
 20470  015894  0E00               	movlw	0
 20471  015896  0100               	movlb	0	; () banked
 20472  015898  6F65               	movwf	Set_Addr_Window@ys& (0+255),b
 20473  01589A  0450               	decf	_w,w,c
 20474  01589C  0100               	movlb	0	; () banked
 20475  01589E  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 20476  0158A0  044F               	decf	_l,w,c
 20477  0158A2  0100               	movlb	0	; () banked
 20478  0158A4  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 20479  0158A6  0E00               	movlw	0
 20480  0158A8  EC2E  F0A2         	call	_Set_Addr_Window
 20481                           
 20482                           ;LCD.c: 299: for (j = l; j > 0; j--)
 20483  0158AC  C04F  F06C         	movff	_l,LCD_Fill@j
 20484  0158B0                     l13301:
 20485  0158B0  0100               	movlb	0	; () banked
 20486  0158B2  516C               	movf	LCD_Fill@j& (0+255),w,b
 20487  0158B4  0100               	movlb	0	; () banked
 20488  0158B6  B4D8               	btfsc	status,2,c
 20489  0158B8  0012               	return	
 20490                           
 20491                           ; BSR set to: 0
 20492                           ;LCD.c: 300: for (i = w; i > 0; i--)
 20493                           
 20494                           ; BSR set to: 0
 20495  0158BA  C050  F06B         	movff	_w,LCD_Fill@i
 20496  0158BE                     l13305:
 20497                           
 20498                           ; BSR set to: 0
 20499  0158BE  0100               	movlb	0	; () banked
 20500  0158C0  516B               	movf	LCD_Fill@i& (0+255),w,b
 20501  0158C2  0100               	movlb	0	; () banked
 20502  0158C4  B4D8               	btfsc	status,2,c
 20503  0158C6  D009               	goto	u9790
 20504                           
 20505                           ; BSR set to: 0
 20506                           ;LCD.c: 301: LCD_Word_Write(pColour);
 20507                           
 20508                           ; BSR set to: 0
 20509                           
 20510                           ; BSR set to: 0
 20511  0158C8  C069  F065         	movff	LCD_Fill@pColour,LCD_Word_Write@value
 20512  0158CC  C06A  F066         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
 20513  0158D0  EC29  F0B1         	call	_LCD_Word_Write	;wreg free
 20514  0158D4  0100               	movlb	0	; () banked
 20515  0158D6  076B               	decf	LCD_Fill@i& (0+255),f,b
 20516  0158D8  D7F2               	goto	l13305
 20517  0158DA                     u9790:
 20518                           
 20519                           ; BSR set to: 0
 20520                           
 20521                           ; BSR set to: 0
 20522  0158DA  0100               	movlb	0	; () banked
 20523  0158DC  076C               	decf	LCD_Fill@j& (0+255),f,b
 20524  0158DE  D7E8               	goto	l13301
 20525  0158E0                     __end_of_LCD_Fill:
 20526                           	opt stack 0
 20527                           tosu	equ	0xFFF
 20528                           tosh	equ	0xFFE
 20529                           tosl	equ	0xFFD
 20530                           pclath	equ	0xFFA
 20531                           tblptru	equ	0xFF8
 20532                           tblptrh	equ	0xFF7
 20533                           tblptrl	equ	0xFF6
 20534                           tablat	equ	0xFF5
 20535                           prodh	equ	0xFF4
 20536                           prodl	equ	0xFF3
 20537                           intcon	equ	0xFF2
 20538                           postinc0	equ	0xFEE
 20539                           wreg	equ	0xFE8
 20540                           indf1	equ	0xFE7
 20541                           postdec1	equ	0xFE5
 20542                           fsr1h	equ	0xFE2
 20543                           fsr1l	equ	0xFE1
 20544                           indf2	equ	0xFDF
 20545                           postinc2	equ	0xFDE
 20546                           postdec2	equ	0xFDD
 20547                           plusw2	equ	0xFDB
 20548                           fsr2h	equ	0xFDA
 20549                           fsr2l	equ	0xFD9
 20550                           status	equ	0xFD8
 20551                           
 20552 ;; *************** function _Set_Addr_Window *****************
 20553 ;; Defined at:
 20554 ;;		line 214 in file "Library/LCD.c"
 20555 ;; Parameters:    Size  Location     Type
 20556 ;;  xs              1    wreg     unsigned char 
 20557 ;;  ys              1    5[BANK0 ] unsigned char 
 20558 ;;  xe              1    6[BANK0 ] unsigned char 
 20559 ;;  ye              1    7[BANK0 ] unsigned char 
 20560 ;; Auto vars:     Size  Location     Type
 20561 ;;  xs              1    8[BANK0 ] unsigned char 
 20562 ;; Return value:  Size  Location     Type
 20563 ;;                  1    wreg      void 
 20564 ;; Registers used:
 20565 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20566 ;; Tracked objects:
 20567 ;;		On entry : 0/0
 20568 ;;		On exit  : 0/0
 20569 ;;		Unchanged: 0/0
 20570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20571 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20572 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20574 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20575 ;;Total ram usage:        4 bytes
 20576 ;; Hardware stack levels used:    1
 20577 ;; Hardware stack levels required when called:    9
 20578 ;; This function calls:
 20579 ;;		_LCD_Write
 20580 ;; This function is called by:
 20581 ;;		_LCD_Fill
 20582 ;;		_LCD_FillRectangle
 20583 ;;		_LCD_DrawField
 20584 ;;		_RAM_Address_Set
 20585 ;;		_LCD_DrawPixel
 20586 ;; This function uses a non-reentrant model
 20587 ;;
 20588                           
 20589                           	psect	text97
 20590  01445C                     __ptext97:
 20591                           	opt stack 0
 20592  01445C                     _Set_Addr_Window:
 20593                           	opt stack 18
 20594                           
 20595                           ; BSR set to: 0
 20596                           ;incstack = 0
 20597                           ;Set_Addr_Window@xs stored from wreg
 20598  01445C  0100               	movlb	0	; () banked
 20599  01445E  6F68               	movwf	Set_Addr_Window@xs& (0+255),b
 20600                           
 20601                           ;LCD.c: 216: ys+=2;
 20602  014460  0E02               	movlw	2
 20603  014462  0100               	movlb	0	; () banked
 20604  014464  2765               	addwf	Set_Addr_Window@ys& (0+255),f,b
 20605                           
 20606                           ;LCD.c: 217: ye+=2;
 20607  014466  0E02               	movlw	2
 20608  014468  0100               	movlb	0	; () banked
 20609  01446A  2767               	addwf	Set_Addr_Window@ye& (0+255),f,b
 20610                           
 20611                           ;LCD.c: 218: xs+=3;
 20612  01446C  0E03               	movlw	3
 20613  01446E  0100               	movlb	0	; () banked
 20614  014470  2768               	addwf	Set_Addr_Window@xs& (0+255),f,b
 20615                           
 20616                           ;LCD.c: 219: xe+=3;
 20617  014472  0E03               	movlw	3
 20618  014474  0100               	movlb	0	; () banked
 20619  014476  2766               	addwf	Set_Addr_Window@xe& (0+255),f,b
 20620                           
 20621                           ; BSR set to: 0
 20622                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 20623  014478  0E00               	movlw	0
 20624  01447A  0100               	movlb	0	; () banked
 20625  01447C  6F63               	movwf	LCD_Write@mode& (0+255),b
 20626  01447E  0E2A               	movlw	42
 20627  014480  ECC8  F0B0         	call	_LCD_Write
 20628                           
 20629                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 20630  014484  0E01               	movlw	1
 20631  014486  0100               	movlb	0	; () banked
 20632  014488  6F63               	movwf	LCD_Write@mode& (0+255),b
 20633  01448A  0E00               	movlw	0
 20634  01448C  ECC8  F0B0         	call	_LCD_Write
 20635                           
 20636                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 20637  014490  0E01               	movlw	1
 20638  014492  0100               	movlb	0	; () banked
 20639  014494  6F63               	movwf	LCD_Write@mode& (0+255),b
 20640  014496  0100               	movlb	0	; () banked
 20641  014498  5168               	movf	Set_Addr_Window@xs& (0+255),w,b
 20642  01449A  ECC8  F0B0         	call	_LCD_Write
 20643                           
 20644                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 20645  01449E  0E01               	movlw	1
 20646  0144A0  0100               	movlb	0	; () banked
 20647  0144A2  6F63               	movwf	LCD_Write@mode& (0+255),b
 20648  0144A4  0E00               	movlw	0
 20649  0144A6  ECC8  F0B0         	call	_LCD_Write
 20650                           
 20651                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 20652  0144AA  0E01               	movlw	1
 20653  0144AC  0100               	movlb	0	; () banked
 20654  0144AE  6F63               	movwf	LCD_Write@mode& (0+255),b
 20655  0144B0  0100               	movlb	0	; () banked
 20656  0144B2  5166               	movf	Set_Addr_Window@xe& (0+255),w,b
 20657  0144B4  ECC8  F0B0         	call	_LCD_Write
 20658                           
 20659                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 20660  0144B8  0E00               	movlw	0
 20661  0144BA  0100               	movlb	0	; () banked
 20662  0144BC  6F63               	movwf	LCD_Write@mode& (0+255),b
 20663  0144BE  0E2B               	movlw	43
 20664  0144C0  ECC8  F0B0         	call	_LCD_Write
 20665                           
 20666                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 20667  0144C4  0E01               	movlw	1
 20668  0144C6  0100               	movlb	0	; () banked
 20669  0144C8  6F63               	movwf	LCD_Write@mode& (0+255),b
 20670  0144CA  0E00               	movlw	0
 20671  0144CC  ECC8  F0B0         	call	_LCD_Write
 20672                           
 20673                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 20674  0144D0  0E01               	movlw	1
 20675  0144D2  0100               	movlb	0	; () banked
 20676  0144D4  6F63               	movwf	LCD_Write@mode& (0+255),b
 20677  0144D6  0100               	movlb	0	; () banked
 20678  0144D8  5165               	movf	Set_Addr_Window@ys& (0+255),w,b
 20679  0144DA  ECC8  F0B0         	call	_LCD_Write
 20680                           
 20681                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 20682  0144DE  0E01               	movlw	1
 20683  0144E0  0100               	movlb	0	; () banked
 20684  0144E2  6F63               	movwf	LCD_Write@mode& (0+255),b
 20685  0144E4  0E00               	movlw	0
 20686  0144E6  ECC8  F0B0         	call	_LCD_Write
 20687                           
 20688                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 20689  0144EA  0E01               	movlw	1
 20690  0144EC  0100               	movlb	0	; () banked
 20691  0144EE  6F63               	movwf	LCD_Write@mode& (0+255),b
 20692  0144F0  0100               	movlb	0	; () banked
 20693  0144F2  5167               	movf	Set_Addr_Window@ye& (0+255),w,b
 20694  0144F4  ECC8  F0B0         	call	_LCD_Write
 20695                           
 20696                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 20697  0144F8  0E00               	movlw	0
 20698  0144FA  0100               	movlb	0	; () banked
 20699  0144FC  6F63               	movwf	LCD_Write@mode& (0+255),b
 20700  0144FE  0E2C               	movlw	44
 20701  014500  ECC8  F0B0         	call	_LCD_Write
 20702  014504  0012               	return		;funcret
 20703  014506                     __end_of_Set_Addr_Window:
 20704                           	opt stack 0
 20705                           tosu	equ	0xFFF
 20706                           tosh	equ	0xFFE
 20707                           tosl	equ	0xFFD
 20708                           pclath	equ	0xFFA
 20709                           tblptru	equ	0xFF8
 20710                           tblptrh	equ	0xFF7
 20711                           tblptrl	equ	0xFF6
 20712                           tablat	equ	0xFF5
 20713                           prodh	equ	0xFF4
 20714                           prodl	equ	0xFF3
 20715                           intcon	equ	0xFF2
 20716                           postinc0	equ	0xFEE
 20717                           wreg	equ	0xFE8
 20718                           indf1	equ	0xFE7
 20719                           postdec1	equ	0xFE5
 20720                           fsr1h	equ	0xFE2
 20721                           fsr1l	equ	0xFE1
 20722                           indf2	equ	0xFDF
 20723                           postinc2	equ	0xFDE
 20724                           postdec2	equ	0xFDD
 20725                           plusw2	equ	0xFDB
 20726                           fsr2h	equ	0xFDA
 20727                           fsr2l	equ	0xFD9
 20728                           status	equ	0xFD8
 20729                           
 20730 ;; *************** function _LCD_Word_Write *****************
 20731 ;; Defined at:
 20732 ;;		line 198 in file "Library/LCD.c"
 20733 ;; Parameters:    Size  Location     Type
 20734 ;;  value           2    5[BANK0 ] unsigned short 
 20735 ;; Auto vars:     Size  Location     Type
 20736 ;;		None
 20737 ;; Return value:  Size  Location     Type
 20738 ;;                  1    wreg      void 
 20739 ;; Registers used:
 20740 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20741 ;; Tracked objects:
 20742 ;;		On entry : 0/0
 20743 ;;		On exit  : 0/0
 20744 ;;		Unchanged: 0/0
 20745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20746 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20749 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20750 ;;Total ram usage:        2 bytes
 20751 ;; Hardware stack levels used:    1
 20752 ;; Hardware stack levels required when called:    9
 20753 ;; This function calls:
 20754 ;;		_LCD_Write
 20755 ;; This function is called by:
 20756 ;;		_LCD_Fill
 20757 ;;		_LCD_FillRectangle
 20758 ;;		_LCD_DrawField
 20759 ;;		_LCD_DrawPixel
 20760 ;; This function uses a non-reentrant model
 20761 ;;
 20762                           
 20763                           	psect	text98
 20764  016252                     __ptext98:
 20765                           	opt stack 0
 20766  016252                     _LCD_Word_Write:
 20767                           	opt stack 18
 20768                           
 20769                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 20770                           
 20771                           ;incstack = 0
 20772  016252  0E01               	movlw	1
 20773  016254  0100               	movlb	0	; () banked
 20774  016256  6F63               	movwf	LCD_Write@mode& (0+255),b
 20775  016258  0100               	movlb	0	; () banked
 20776  01625A  5166               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 20777  01625C  ECC8  F0B0         	call	_LCD_Write
 20778                           
 20779                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 20780  016260  0E01               	movlw	1
 20781  016262  0100               	movlb	0	; () banked
 20782  016264  6F63               	movwf	LCD_Write@mode& (0+255),b
 20783  016266  0100               	movlb	0	; () banked
 20784  016268  5165               	movf	LCD_Word_Write@value& (0+255),w,b
 20785  01626A  ECC8  F0B0         	call	_LCD_Write
 20786  01626E  0012               	return		;funcret
 20787  016270                     __end_of_LCD_Word_Write:
 20788                           	opt stack 0
 20789                           tosu	equ	0xFFF
 20790                           tosh	equ	0xFFE
 20791                           tosl	equ	0xFFD
 20792                           pclath	equ	0xFFA
 20793                           tblptru	equ	0xFF8
 20794                           tblptrh	equ	0xFF7
 20795                           tblptrl	equ	0xFF6
 20796                           tablat	equ	0xFF5
 20797                           prodh	equ	0xFF4
 20798                           prodl	equ	0xFF3
 20799                           intcon	equ	0xFF2
 20800                           postinc0	equ	0xFEE
 20801                           wreg	equ	0xFE8
 20802                           indf1	equ	0xFE7
 20803                           postdec1	equ	0xFE5
 20804                           fsr1h	equ	0xFE2
 20805                           fsr1l	equ	0xFE1
 20806                           indf2	equ	0xFDF
 20807                           postinc2	equ	0xFDE
 20808                           postdec2	equ	0xFDD
 20809                           plusw2	equ	0xFDB
 20810                           fsr2h	equ	0xFDA
 20811                           fsr2l	equ	0xFD9
 20812                           status	equ	0xFD8
 20813                           
 20814 ;; *************** function _LCD_Write *****************
 20815 ;; Defined at:
 20816 ;;		line 67 in file "Library/LCD.c"
 20817 ;; Parameters:    Size  Location     Type
 20818 ;;  value           1    wreg     unsigned char 
 20819 ;;  mode            1    3[BANK0 ] enum E6761
 20820 ;; Auto vars:     Size  Location     Type
 20821 ;;  value           1    4[BANK0 ] unsigned char 
 20822 ;; Return value:  Size  Location     Type
 20823 ;;                  1    wreg      void 
 20824 ;; Registers used:
 20825 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20826 ;; Tracked objects:
 20827 ;;		On entry : 0/0
 20828 ;;		On exit  : 0/0
 20829 ;;		Unchanged: 0/0
 20830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20831 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20832 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20834 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20835 ;;Total ram usage:        2 bytes
 20836 ;; Hardware stack levels used:    1
 20837 ;; Hardware stack levels required when called:    8
 20838 ;; This function calls:
 20839 ;;		_Mode_Set
 20840 ;;		_SPI_Send
 20841 ;; This function is called by:
 20842 ;;		_LCD_Init
 20843 ;;		_LCD_Word_Write
 20844 ;;		_Set_Addr_Window
 20845 ;;		_Set_Rotation
 20846 ;;		_LCD_WriteCMD
 20847 ;;		_LCD_WriteData
 20848 ;;		_LCD_Data_Write
 20849 ;;		_LCD_Data_Write_4k
 20850 ;;		_Invert_Display
 20851 ;; This function uses a non-reentrant model
 20852 ;;
 20853                           
 20854                           	psect	text99
 20855  016190                     __ptext99:
 20856                           	opt stack 0
 20857  016190                     _LCD_Write:
 20858                           	opt stack 18
 20859                           
 20860                           ;incstack = 0
 20861                           ;LCD_Write@value stored from wreg
 20862  016190  0100               	movlb	0	; () banked
 20863  016192  6F64               	movwf	LCD_Write@value& (0+255),b
 20864                           
 20865                           ;LCD.c: 89: Mode_Set(mode);
 20866  016194  0100               	movlb	0	; () banked
 20867  016196  5163               	movf	LCD_Write@mode& (0+255),w,b
 20868  016198  EC40  F0B2         	call	_Mode_Set
 20869                           
 20870                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 20871  01619C  0E70               	movlw	low _SPI2
 20872  01619E  0100               	movlb	0	; () banked
 20873  0161A0  6F60               	movwf	SPI_Send@pInput& (0+255),b
 20874  0161A2  0E03               	movlw	high _SPI2
 20875  0161A4  0100               	movlb	0	; () banked
 20876  0161A6  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 20877  0161A8  C064  F062         	movff	LCD_Write@value,SPI_Send@pData
 20878  0161AC  EC8B  F0A9         	call	_SPI_Send	;wreg free
 20879  0161B0  0012               	return		;funcret
 20880  0161B2                     __end_of_LCD_Write:
 20881                           	opt stack 0
 20882                           tosu	equ	0xFFF
 20883                           tosh	equ	0xFFE
 20884                           tosl	equ	0xFFD
 20885                           pclath	equ	0xFFA
 20886                           tblptru	equ	0xFF8
 20887                           tblptrh	equ	0xFF7
 20888                           tblptrl	equ	0xFF6
 20889                           tablat	equ	0xFF5
 20890                           prodh	equ	0xFF4
 20891                           prodl	equ	0xFF3
 20892                           intcon	equ	0xFF2
 20893                           postinc0	equ	0xFEE
 20894                           wreg	equ	0xFE8
 20895                           indf1	equ	0xFE7
 20896                           postdec1	equ	0xFE5
 20897                           fsr1h	equ	0xFE2
 20898                           fsr1l	equ	0xFE1
 20899                           indf2	equ	0xFDF
 20900                           postinc2	equ	0xFDE
 20901                           postdec2	equ	0xFDD
 20902                           plusw2	equ	0xFDB
 20903                           fsr2h	equ	0xFDA
 20904                           fsr2l	equ	0xFD9
 20905                           status	equ	0xFD8
 20906                           
 20907 ;; *************** function _SPI_Send *****************
 20908 ;; Defined at:
 20909 ;;		line 226 in file "Library/SPI.c"
 20910 ;; Parameters:    Size  Location     Type
 20911 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 20912 ;;		 -> SPI1(11), SPI2(11), 
 20913 ;;  pData           1    2[BANK0 ] unsigned char 
 20914 ;; Auto vars:     Size  Location     Type
 20915 ;;		None
 20916 ;; Return value:  Size  Location     Type
 20917 ;;                  1    wreg      unsigned char 
 20918 ;; Registers used:
 20919 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 20920 ;; Tracked objects:
 20921 ;;		On entry : 0/0
 20922 ;;		On exit  : 0/0
 20923 ;;		Unchanged: 0/0
 20924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20925 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20928 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20929 ;;Total ram usage:        3 bytes
 20930 ;; Hardware stack levels used:    1
 20931 ;; Hardware stack levels required when called:    7
 20932 ;; This function calls:
 20933 ;;		Nothing
 20934 ;; This function is called by:
 20935 ;;		_LCD_Write
 20936 ;;		_OutSeg
 20937 ;; This function uses a non-reentrant model
 20938 ;;
 20939                           
 20940                           	psect	text100
 20941  015316                     __ptext100:
 20942                           	opt stack 0
 20943  015316                     _SPI_Send:
 20944                           	opt stack 20
 20945                           
 20946                           ;SPI.c: 253: switch (pInput->mChannel)
 20947                           
 20948                           ;incstack = 0
 20949  015316  D026               	goto	l678
 20950  015318                     
 20951                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 20952  015318  C0EE  FFD9         	movff	_PortC+4,fsr2l
 20953  01531C  C0EF  FFDA         	movff	_PortC+5,fsr2h
 20954  015320  0100               	movlb	0	; () banked
 20955  015322  94DF               	bcf	indf2,2,c
 20956                           
 20957                           ; BSR set to: 0
 20958                           ;SPI.c: 257: SSP1BUF = pData;
 20959  015324  C062  FFC9         	movff	SPI_Send@pData,4041	;volatile
 20960  015328                     
 20961                           ; BSR set to: 0
 20962  015328  A0C7               	btfss	4039,0,c	;volatile
 20963  01532A  D7FE               	goto	l681
 20964                           
 20965                           ;SPI.c: 259: pData = SSP1BUF;
 20966  01532C  CFC9 F062          	movff	4041,SPI_Send@pData	;volatile
 20967                           
 20968                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 20969  015330  C0EE  FFD9         	movff	_PortC+4,fsr2l
 20970  015334  C0EF  FFDA         	movff	_PortC+5,fsr2h
 20971  015338  0100               	movlb	0	; () banked
 20972  01533A  84DF               	bsf	indf2,2,c
 20973                           
 20974                           ; BSR set to: 0
 20975                           ;SPI.c: 261: return pData;
 20976                           ;	Return value of _SPI_Send is never used
 20977  01533C  0012               	return	
 20978  01533E                     
 20979                           ; BSR set to: 0
 20980                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 20981                           
 20982                           ; BSR set to: 0
 20983  01533E  C0E4  FFD9         	movff	_PortD+4,fsr2l
 20984  015342  C0E5  FFDA         	movff	_PortD+5,fsr2h
 20985  015346  0100               	movlb	0	; () banked
 20986  015348  9EDF               	bcf	indf2,7,c
 20987                           
 20988                           ; BSR set to: 0
 20989                           ;SPI.c: 264: SSP2BUF = pData;
 20990  01534A  C062  FF6F         	movff	SPI_Send@pData,3951	;volatile
 20991  01534E                     
 20992                           ; BSR set to: 0
 20993  01534E  A06D               	btfss	3949,0,c	;volatile
 20994  015350  D7FE               	goto	l686
 20995                           
 20996                           ;SPI.c: 266: pData = SSP2BUF;
 20997  015352  CF6F F062          	movff	3951,SPI_Send@pData	;volatile
 20998                           
 20999                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 21000  015356  C0E4  FFD9         	movff	_PortD+4,fsr2l
 21001  01535A  C0E5  FFDA         	movff	_PortD+5,fsr2h
 21002  01535E  0100               	movlb	0	; () banked
 21003  015360  8EDF               	bsf	indf2,7,c
 21004                           
 21005                           ; BSR set to: 0
 21006                           ;SPI.c: 269: };
 21007                           
 21008                           ; BSR set to: 0
 21009                           ;SPI.c: 268: return pData;
 21010                           ;	Return value of _SPI_Send is never used
 21011  015362  0012               	return	
 21012  015364                     l678:
 21013                           
 21014                           ; BSR set to: 0
 21015  015364  0100               	movlb	0	; () banked
 21016  015366  EE20 F002          	lfsr	2,2
 21017  01536A  5160               	movf	SPI_Send@pInput& (0+255),w,b
 21018  01536C  26D9               	addwf	fsr2l,f,c
 21019  01536E  5161               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 21020  015370  22DA               	addwfc	fsr2h,f,c
 21021  015372  50DF               	movf	indf2,w,c
 21022                           
 21023                           ; Switch size 1, requested type "space"
 21024                           ; Number of cases is 2, Range of values is 0 to 1
 21025                           ; switch strategies available:
 21026                           ; Name         Instructions Cycles
 21027                           ; simple_byte            7     4 (average)
 21028                           ;	Chosen strategy is simple_byte
 21029  015374  0A00               	xorlw	0	; case 0
 21030  015376  B4D8               	btfsc	status,2,c
 21031  015378  D7CF               	goto	l679
 21032  01537A  0A01               	xorlw	1	; case 1
 21033  01537C  A4D8               	btfss	status,2,c
 21034  01537E  0012               	return	
 21035  015380  D7DE               	goto	l684
 21036  015382                     __end_of_SPI_Send:
 21037                           	opt stack 0
 21038                           tosu	equ	0xFFF
 21039                           tosh	equ	0xFFE
 21040                           tosl	equ	0xFFD
 21041                           pclath	equ	0xFFA
 21042                           tblptru	equ	0xFF8
 21043                           tblptrh	equ	0xFF7
 21044                           tblptrl	equ	0xFF6
 21045                           tablat	equ	0xFF5
 21046                           prodh	equ	0xFF4
 21047                           prodl	equ	0xFF3
 21048                           intcon	equ	0xFF2
 21049                           postinc0	equ	0xFEE
 21050                           wreg	equ	0xFE8
 21051                           indf1	equ	0xFE7
 21052                           postdec1	equ	0xFE5
 21053                           fsr1h	equ	0xFE2
 21054                           fsr1l	equ	0xFE1
 21055                           indf2	equ	0xFDF
 21056                           postinc2	equ	0xFDE
 21057                           postdec2	equ	0xFDD
 21058                           plusw2	equ	0xFDB
 21059                           fsr2h	equ	0xFDA
 21060                           fsr2l	equ	0xFD9
 21061                           status	equ	0xFD8
 21062                           
 21063 ;; *************** function _Mode_Set *****************
 21064 ;; Defined at:
 21065 ;;		line 40 in file "Library/LCD.c"
 21066 ;; Parameters:    Size  Location     Type
 21067 ;;  pMode           1    wreg     enum E6761
 21068 ;; Auto vars:     Size  Location     Type
 21069 ;;  pMode           1    0[BANK0 ] enum E6761
 21070 ;; Return value:  Size  Location     Type
 21071 ;;                  1    wreg      void 
 21072 ;; Registers used:
 21073 ;;		wreg
 21074 ;; Tracked objects:
 21075 ;;		On entry : 0/0
 21076 ;;		On exit  : 0/0
 21077 ;;		Unchanged: 0/0
 21078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21080 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21082 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21083 ;;Total ram usage:        1 bytes
 21084 ;; Hardware stack levels used:    1
 21085 ;; Hardware stack levels required when called:    7
 21086 ;; This function calls:
 21087 ;;		Nothing
 21088 ;; This function is called by:
 21089 ;;		_LCD_Write
 21090 ;; This function uses a non-reentrant model
 21091 ;;
 21092                           
 21093                           	psect	text101
 21094  016480                     __ptext101:
 21095                           	opt stack 0
 21096  016480                     _Mode_Set:
 21097                           	opt stack 18
 21098                           
 21099                           ; BSR set to: 0
 21100                           ;incstack = 0
 21101                           ;Mode_Set@pMode stored from wreg
 21102  016480  0100               	movlb	0	; () banked
 21103  016482  6F60               	movwf	Mode_Set@pMode& (0+255),b
 21104                           
 21105                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 21106  016484  0100               	movlb	0	; () banked
 21107  016486  B160               	btfsc	Mode_Set@pMode& (0+255),0,b
 21108  016488  D002               	bra	u8875
 21109  01648A  9E85               	bcf	3973,7,c	;volatile
 21110  01648C  D001               	bra	u8876
 21111  01648E                     u8875:
 21112  01648E  8E85               	bsf	3973,7,c	;volatile
 21113  016490                     u8876:
 21114  016490  0012               	return		;funcret
 21115  016492                     __end_of_Mode_Set:
 21116                           	opt stack 0
 21117                           tosu	equ	0xFFF
 21118                           tosh	equ	0xFFE
 21119                           tosl	equ	0xFFD
 21120                           pclath	equ	0xFFA
 21121                           tblptru	equ	0xFF8
 21122                           tblptrh	equ	0xFF7
 21123                           tblptrl	equ	0xFF6
 21124                           tablat	equ	0xFF5
 21125                           prodh	equ	0xFF4
 21126                           prodl	equ	0xFF3
 21127                           intcon	equ	0xFF2
 21128                           postinc0	equ	0xFEE
 21129                           wreg	equ	0xFE8
 21130                           indf1	equ	0xFE7
 21131                           postdec1	equ	0xFE5
 21132                           fsr1h	equ	0xFE2
 21133                           fsr1l	equ	0xFE1
 21134                           indf2	equ	0xFDF
 21135                           postinc2	equ	0xFDE
 21136                           postdec2	equ	0xFDD
 21137                           plusw2	equ	0xFDB
 21138                           fsr2h	equ	0xFDA
 21139                           fsr2l	equ	0xFD9
 21140                           status	equ	0xFD8
 21141                           
 21142 ;; *************** function _Configure_GPIOs *****************
 21143 ;; Defined at:
 21144 ;;		line 46 in file "Library/LCD.c"
 21145 ;; Parameters:    Size  Location     Type
 21146 ;;		None
 21147 ;; Auto vars:     Size  Location     Type
 21148 ;;		None
 21149 ;; Return value:  Size  Location     Type
 21150 ;;                  1    wreg      void 
 21151 ;; Registers used:
 21152 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21153 ;; Tracked objects:
 21154 ;;		On entry : 0/0
 21155 ;;		On exit  : 0/0
 21156 ;;		Unchanged: 0/0
 21157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21161 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21162 ;;Total ram usage:        0 bytes
 21163 ;; Hardware stack levels used:    1
 21164 ;; Hardware stack levels required when called:   14
 21165 ;; This function calls:
 21166 ;;		_LCD_Reset
 21167 ;;		_Port_SetPinType
 21168 ;;		_SPI_Init
 21169 ;;		_SPI_MaxSpeed
 21170 ;; This function is called by:
 21171 ;;		_LCD_Init
 21172 ;; This function uses a non-reentrant model
 21173 ;;
 21174                           
 21175                           	psect	text102
 21176  01523A                     __ptext102:
 21177                           	opt stack 0
 21178  01523A                     _Configure_GPIOs:
 21179                           	opt stack 14
 21180                           
 21181                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
 21182                           
 21183                           ;incstack = 0
 21184  01523A  0EB7               	movlw	low _PortF
 21185  01523C  0100               	movlb	0	; () banked
 21186  01523E  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 21187  015240  0E03               	movlw	high _PortF
 21188  015242  0100               	movlb	0	; () banked
 21189  015244  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 21190  015246  0E07               	movlw	7
 21191  015248  0100               	movlb	0	; () banked
 21192  01524A  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 21193  01524C  0E03               	movlw	3
 21194  01524E  0100               	movlb	0	; () banked
 21195  015250  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 21196  015252  EC5F  F093         	call	_Port_SetPinType	;wreg free
 21197                           
 21198                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
 21199  015256  0EB7               	movlw	low _PortF
 21200  015258  0100               	movlb	0	; () banked
 21201  01525A  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 21202  01525C  0E03               	movlw	high _PortF
 21203  01525E  0100               	movlb	0	; () banked
 21204  015260  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 21205  015262  0E06               	movlw	6
 21206  015264  0100               	movlb	0	; () banked
 21207  015266  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 21208  015268  0E03               	movlw	3
 21209  01526A  0100               	movlb	0	; () banked
 21210  01526C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 21211  01526E  EC5F  F093         	call	_Port_SetPinType	;wreg free
 21212                           
 21213                           ;LCD.c: 55: LCD_Reset();
 21214  015272  ECC1  F0AC         	call	_LCD_Reset	;wreg free
 21215                           
 21216                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
 21217  015276  0EC0               	movlw	192
 21218  015278  0100               	movlb	0	; () banked
 21219  01527A  6F8D               	movwf	SPI_Init@pClock& (0+255),b
 21220  01527C  0EC6               	movlw	198
 21221  01527E  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
 21222  015280  0E2D               	movlw	45
 21223  015282  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
 21224  015284  0E00               	movlw	0
 21225  015286  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
 21226  015288  0E01               	movlw	1
 21227  01528A  0100               	movlb	0	; () banked
 21228  01528C  6F91               	movwf	SPI_Init@pChannel& (0+255),b
 21229  01528E  0E01               	movlw	1
 21230  015290  0100               	movlb	0	; () banked
 21231  015292  6F92               	movwf	SPI_Init@pMode& (0+255),b
 21232  015294  EC53  F082         	call	_SPI_Init	;wreg free
 21233                           
 21234                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
 21235  015298  0E70               	movlw	low _SPI2
 21236  01529A  0100               	movlb	0	; () banked
 21237  01529C  6F6F               	movwf	SPI_MaxSpeed@pInput& (0+255),b
 21238  01529E  0E03               	movlw	high _SPI2
 21239  0152A0  0100               	movlb	0	; () banked
 21240  0152A2  6F70               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
 21241  0152A4  ECA9  F0A8         	call	_SPI_MaxSpeed	;wreg free
 21242  0152A8  0012               	return		;funcret
 21243  0152AA                     __end_of_Configure_GPIOs:
 21244                           	opt stack 0
 21245                           tosu	equ	0xFFF
 21246                           tosh	equ	0xFFE
 21247                           tosl	equ	0xFFD
 21248                           pclath	equ	0xFFA
 21249                           tblptru	equ	0xFF8
 21250                           tblptrh	equ	0xFF7
 21251                           tblptrl	equ	0xFF6
 21252                           tablat	equ	0xFF5
 21253                           prodh	equ	0xFF4
 21254                           prodl	equ	0xFF3
 21255                           intcon	equ	0xFF2
 21256                           postinc0	equ	0xFEE
 21257                           wreg	equ	0xFE8
 21258                           indf1	equ	0xFE7
 21259                           postdec1	equ	0xFE5
 21260                           fsr1h	equ	0xFE2
 21261                           fsr1l	equ	0xFE1
 21262                           indf2	equ	0xFDF
 21263                           postinc2	equ	0xFDE
 21264                           postdec2	equ	0xFDD
 21265                           plusw2	equ	0xFDB
 21266                           fsr2h	equ	0xFDA
 21267                           fsr2l	equ	0xFD9
 21268                           status	equ	0xFD8
 21269                           
 21270 ;; *************** function _SPI_MaxSpeed *****************
 21271 ;; Defined at:
 21272 ;;		line 201 in file "Library/SPI.c"
 21273 ;; Parameters:    Size  Location     Type
 21274 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 21275 ;;		 -> SPI2(11), 
 21276 ;; Auto vars:     Size  Location     Type
 21277 ;;		None
 21278 ;; Return value:  Size  Location     Type
 21279 ;;                  1    wreg      void 
 21280 ;; Registers used:
 21281 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21282 ;; Tracked objects:
 21283 ;;		On entry : 0/0
 21284 ;;		On exit  : 0/0
 21285 ;;		Unchanged: 0/0
 21286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21287 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21288 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21290 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21291 ;;Total ram usage:        2 bytes
 21292 ;; Hardware stack levels used:    1
 21293 ;; Hardware stack levels required when called:    9
 21294 ;; This function calls:
 21295 ;;		_Byte_SetBit
 21296 ;;		_Byte_SetQuad
 21297 ;; This function is called by:
 21298 ;;		_Configure_GPIOs
 21299 ;; This function uses a non-reentrant model
 21300 ;;
 21301                           
 21302                           	psect	text103
 21303  015152                     __ptext103:
 21304                           	opt stack 0
 21305  015152                     _SPI_MaxSpeed:
 21306                           	opt stack 18
 21307                           
 21308                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 21309                           
 21310                           ;incstack = 0
 21311  015152  0100               	movlb	0	; () banked
 21312  015154  EE20 F006          	lfsr	2,6
 21313  015158  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 21314  01515A  26D9               	addwf	fsr2l,f,c
 21315  01515C  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 21316  01515E  22DA               	addwfc	fsr2h,f,c
 21317  015160  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 21318  015164  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 21319  015168  0E05               	movlw	5
 21320  01516A  0100               	movlb	0	; () banked
 21321  01516C  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 21322  01516E  0E00               	movlw	0
 21323  015170  0100               	movlb	0	; () banked
 21324  015172  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 21325  015174  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 21326                           
 21327                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
 21328  015178  0100               	movlb	0	; () banked
 21329  01517A  EE20 F006          	lfsr	2,6
 21330  01517E  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 21331  015180  26D9               	addwf	fsr2l,f,c
 21332  015182  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 21333  015184  22DA               	addwfc	fsr2h,f,c
 21334  015186  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 21335  01518A  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 21336  01518E  0E00               	movlw	0
 21337  015190  0100               	movlb	0	; () banked
 21338  015192  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 21339  015194  0E00               	movlw	0
 21340  015196  0100               	movlb	0	; () banked
 21341  015198  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 21342  01519A  ECEA  F0B0         	call	_Byte_SetQuad	;wreg free
 21343                           
 21344                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 21345  01519E  0100               	movlb	0	; () banked
 21346  0151A0  EE20 F006          	lfsr	2,6
 21347  0151A4  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 21348  0151A6  26D9               	addwf	fsr2l,f,c
 21349  0151A8  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 21350  0151AA  22DA               	addwfc	fsr2h,f,c
 21351  0151AC  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 21352  0151B0  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 21353  0151B4  0E05               	movlw	5
 21354  0151B6  0100               	movlb	0	; () banked
 21355  0151B8  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 21356  0151BA  0E01               	movlw	1
 21357  0151BC  0100               	movlb	0	; () banked
 21358  0151BE  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 21359  0151C0  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 21360  0151C4  0012               	return		;funcret
 21361  0151C6                     __end_of_SPI_MaxSpeed:
 21362                           	opt stack 0
 21363                           tosu	equ	0xFFF
 21364                           tosh	equ	0xFFE
 21365                           tosl	equ	0xFFD
 21366                           pclath	equ	0xFFA
 21367                           tblptru	equ	0xFF8
 21368                           tblptrh	equ	0xFF7
 21369                           tblptrl	equ	0xFF6
 21370                           tablat	equ	0xFF5
 21371                           prodh	equ	0xFF4
 21372                           prodl	equ	0xFF3
 21373                           intcon	equ	0xFF2
 21374                           postinc0	equ	0xFEE
 21375                           wreg	equ	0xFE8
 21376                           indf1	equ	0xFE7
 21377                           postdec1	equ	0xFE5
 21378                           fsr1h	equ	0xFE2
 21379                           fsr1l	equ	0xFE1
 21380                           indf2	equ	0xFDF
 21381                           postinc2	equ	0xFDE
 21382                           postdec2	equ	0xFDD
 21383                           plusw2	equ	0xFDB
 21384                           fsr2h	equ	0xFDA
 21385                           fsr2l	equ	0xFD9
 21386                           status	equ	0xFD8
 21387                           
 21388 ;; *************** function _LCD_Reset *****************
 21389 ;; Defined at:
 21390 ;;		line 95 in file "Library/LCD.c"
 21391 ;; Parameters:    Size  Location     Type
 21392 ;;		None
 21393 ;; Auto vars:     Size  Location     Type
 21394 ;;		None
 21395 ;; Return value:  Size  Location     Type
 21396 ;;                  1    wreg      void 
 21397 ;; Registers used:
 21398 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21399 ;; Tracked objects:
 21400 ;;		On entry : 0/0
 21401 ;;		On exit  : 0/0
 21402 ;;		Unchanged: 0/0
 21403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21407 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21408 ;;Total ram usage:        0 bytes
 21409 ;; Hardware stack levels used:    1
 21410 ;; Hardware stack levels required when called:   13
 21411 ;; This function calls:
 21412 ;;		_LED_Toggle
 21413 ;;		_Reset_High
 21414 ;;		_Reset_Low
 21415 ;;		_delay_ms
 21416 ;; This function is called by:
 21417 ;;		_Configure_GPIOs
 21418 ;; This function uses a non-reentrant model
 21419 ;;
 21420                           
 21421                           	psect	text104
 21422  015982                     __ptext104:
 21423                           	opt stack 0
 21424  015982                     _LCD_Reset:
 21425                           	opt stack 14
 21426                           
 21427                           ;LCD.c: 97: Reset_High();
 21428                           
 21429                           ;incstack = 0
 21430  015982  EC47  F0B1         	call	_Reset_High	;wreg free
 21431                           
 21432                           ;LCD.c: 98: LED_Toggle(eLED2);
 21433  015986  0E01               	movlw	1
 21434  015988  EC58  F0AD         	call	_LED_Toggle
 21435                           
 21436                           ;LCD.c: 99: delay_ms(0x80);
 21437  01598C  0E00               	movlw	0
 21438  01598E  0100               	movlb	0	; () banked
 21439  015990  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 21440  015992  0E80               	movlw	128
 21441  015994  6F60               	movwf	delay_ms@ms& (0+255),b
 21442  015996  ECF6  F0A9         	call	_delay_ms	;wreg free
 21443                           
 21444                           ;LCD.c: 100: LED_Toggle(eLED2);
 21445  01599A  0E01               	movlw	1
 21446  01599C  EC58  F0AD         	call	_LED_Toggle
 21447                           
 21448                           ;LCD.c: 101: Reset_Low();
 21449  0159A0  EC38  F0B1         	call	_Reset_Low	;wreg free
 21450                           
 21451                           ;LCD.c: 102: delay_ms(0x80);
 21452  0159A4  0E00               	movlw	0
 21453  0159A6  0100               	movlb	0	; () banked
 21454  0159A8  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 21455  0159AA  0E80               	movlw	128
 21456  0159AC  6F60               	movwf	delay_ms@ms& (0+255),b
 21457  0159AE  ECF6  F0A9         	call	_delay_ms	;wreg free
 21458                           
 21459                           ;LCD.c: 103: LED_Toggle(eLED2);
 21460  0159B2  0E01               	movlw	1
 21461  0159B4  EC58  F0AD         	call	_LED_Toggle
 21462                           
 21463                           ;LCD.c: 104: Reset_High();
 21464  0159B8  EC47  F0B1         	call	_Reset_High	;wreg free
 21465                           
 21466                           ;LCD.c: 105: delay_ms(0x80);
 21467  0159BC  0E00               	movlw	0
 21468  0159BE  0100               	movlb	0	; () banked
 21469  0159C0  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 21470  0159C2  0E80               	movlw	128
 21471  0159C4  6F60               	movwf	delay_ms@ms& (0+255),b
 21472  0159C6  ECF6  F0A9         	call	_delay_ms	;wreg free
 21473                           
 21474                           ;LCD.c: 106: LED_Toggle(eLED2);
 21475  0159CA  0E01               	movlw	1
 21476  0159CC  EC58  F0AD         	call	_LED_Toggle
 21477  0159D0  0012               	return		;funcret
 21478  0159D2                     __end_of_LCD_Reset:
 21479                           	opt stack 0
 21480                           tosu	equ	0xFFF
 21481                           tosh	equ	0xFFE
 21482                           tosl	equ	0xFFD
 21483                           pclath	equ	0xFFA
 21484                           tblptru	equ	0xFF8
 21485                           tblptrh	equ	0xFF7
 21486                           tblptrl	equ	0xFF6
 21487                           tablat	equ	0xFF5
 21488                           prodh	equ	0xFF4
 21489                           prodl	equ	0xFF3
 21490                           intcon	equ	0xFF2
 21491                           postinc0	equ	0xFEE
 21492                           wreg	equ	0xFE8
 21493                           indf1	equ	0xFE7
 21494                           postdec1	equ	0xFE5
 21495                           fsr1h	equ	0xFE2
 21496                           fsr1l	equ	0xFE1
 21497                           indf2	equ	0xFDF
 21498                           postinc2	equ	0xFDE
 21499                           postdec2	equ	0xFDD
 21500                           plusw2	equ	0xFDB
 21501                           fsr2h	equ	0xFDA
 21502                           fsr2l	equ	0xFD9
 21503                           status	equ	0xFD8
 21504                           
 21505 ;; *************** function _delay_ms *****************
 21506 ;; Defined at:
 21507 ;;		line 240 in file "Library/Types.c"
 21508 ;; Parameters:    Size  Location     Type
 21509 ;;  ms              2    0[BANK0 ] unsigned short 
 21510 ;; Auto vars:     Size  Location     Type
 21511 ;;  u               4    2[BANK0 ] volatile unsigned long 
 21512 ;; Return value:  Size  Location     Type
 21513 ;;                  1    wreg      void 
 21514 ;; Registers used:
 21515 ;;		wreg, status,2, status,0
 21516 ;; Tracked objects:
 21517 ;;		On entry : 0/0
 21518 ;;		On exit  : 0/0
 21519 ;;		Unchanged: 0/0
 21520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21521 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21522 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21524 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21525 ;;Total ram usage:        6 bytes
 21526 ;; Hardware stack levels used:    1
 21527 ;; Hardware stack levels required when called:    7
 21528 ;; This function calls:
 21529 ;;		Nothing
 21530 ;; This function is called by:
 21531 ;;		_LCD_Reset
 21532 ;;		_LCD_Init
 21533 ;;		_MXK_Init
 21534 ;;		_init
 21535 ;;		_main
 21536 ;; This function uses a non-reentrant model
 21537 ;;
 21538                           
 21539                           	psect	text105
 21540  0153EC                     __ptext105:
 21541                           	opt stack 0
 21542  0153EC                     _delay_ms:
 21543                           	opt stack 22
 21544                           
 21545                           ;Types.c: 242: volatile unsigned long u;
 21546                           ;Types.c: 243: while (ms--)
 21547                           
 21548                           ;incstack = 0
 21549  0153EC  D01F               	goto	u9140
 21550  0153EE                     l12433:
 21551                           
 21552                           ;Types.c: 244: {
 21553                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 21554  0153EE  0E00               	movlw	0
 21555  0153F0  0100               	movlb	0	; () banked
 21556  0153F2  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
 21557  0153F4  0E00               	movlw	0
 21558  0153F6  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 21559  0153F8  0E00               	movlw	0
 21560  0153FA  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 21561  0153FC  0E00               	movlw	0
 21562  0153FE  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 21563  015400                     l12435:
 21564                           
 21565                           ; BSR set to: 0
 21566  015400  0100               	movlb	0	; () banked
 21567  015402  5165               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 21568  015404  0100               	movlb	0	; () banked
 21569  015406  1164               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 21570  015408  E111               	bnz	l12441
 21571  01540A  0EB0               	movlw	176
 21572  01540C  0100               	movlb	0	; () banked
 21573  01540E  5D62               	subwf	delay_ms@u& (0+255),w,b	;volatile
 21574  015410  0E04               	movlw	4
 21575  015412  0100               	movlb	0	; () banked
 21576  015414  5963               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 21577  015416  B0D8               	btfsc	status,0,c
 21578  015418  D009               	goto	u9140
 21579                           
 21580                           ; BSR set to: 0
 21581                           
 21582                           ; BSR set to: 0
 21583  01541A  F000               	nop		; ;# 
 21584  01541C  0E01               	movlw	1
 21585  01541E  0100               	movlb	0	; () banked
 21586  015420  2762               	addwf	delay_ms@u& (0+255),f,b	;volatile
 21587  015422  0E00               	movlw	0
 21588  015424  2363               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 21589  015426  2364               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 21590  015428  2365               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 21591  01542A  D7EA               	goto	l12435
 21592  01542C                     u9140:
 21593  01542C                     l12441:
 21594  01542C  0100               	movlb	0	; () banked
 21595  01542E  0760               	decf	delay_ms@ms& (0+255),f,b
 21596  015430  A0D8               	btfss	status,0,c
 21597  015432  0761               	decf	(delay_ms@ms+1)& (0+255),f,b
 21598  015434  0100               	movlb	0	; () banked
 21599  015436  2960               	incf	delay_ms@ms& (0+255),w,b
 21600  015438  E1DA               	bnz	l12433
 21601  01543A  0100               	movlb	0	; () banked
 21602  01543C  2961               	incf	(delay_ms@ms+1)& (0+255),w,b
 21603  01543E  A4D8               	btfss	status,2,c
 21604  015440  D7D6               	goto	l824
 21605                           
 21606                           ; BSR set to: 0
 21607                           ;Types.c: 251: }
 21608                           ;Types.c: 252: }
 21609                           ;Types.c: 253: u = 0x8008;
 21610                           
 21611                           ; BSR set to: 0
 21612  015442  0E08               	movlw	8
 21613  015444  0100               	movlb	0	; () banked
 21614  015446  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
 21615  015448  0E80               	movlw	128
 21616  01544A  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 21617  01544C  0E00               	movlw	0
 21618  01544E  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 21619  015450  0E00               	movlw	0
 21620  015452  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 21621                           
 21622                           ; BSR set to: 0
 21623  015454  0012               	return		;funcret
 21624  015456                     __end_of_delay_ms:
 21625                           	opt stack 0
 21626                           tosu	equ	0xFFF
 21627                           tosh	equ	0xFFE
 21628                           tosl	equ	0xFFD
 21629                           pclath	equ	0xFFA
 21630                           tblptru	equ	0xFF8
 21631                           tblptrh	equ	0xFF7
 21632                           tblptrl	equ	0xFF6
 21633                           tablat	equ	0xFF5
 21634                           prodh	equ	0xFF4
 21635                           prodl	equ	0xFF3
 21636                           intcon	equ	0xFF2
 21637                           postinc0	equ	0xFEE
 21638                           wreg	equ	0xFE8
 21639                           indf1	equ	0xFE7
 21640                           postdec1	equ	0xFE5
 21641                           fsr1h	equ	0xFE2
 21642                           fsr1l	equ	0xFE1
 21643                           indf2	equ	0xFDF
 21644                           postinc2	equ	0xFDE
 21645                           postdec2	equ	0xFDD
 21646                           plusw2	equ	0xFDB
 21647                           fsr2h	equ	0xFDA
 21648                           fsr2l	equ	0xFD9
 21649                           status	equ	0xFD8
 21650                           
 21651 ;; *************** function _Reset_Low *****************
 21652 ;; Defined at:
 21653 ;;		line 32 in file "Library/LCD.c"
 21654 ;; Parameters:    Size  Location     Type
 21655 ;;		None
 21656 ;; Auto vars:     Size  Location     Type
 21657 ;;		None
 21658 ;; Return value:  Size  Location     Type
 21659 ;;                  1    wreg      void 
 21660 ;; Registers used:
 21661 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21662 ;; Tracked objects:
 21663 ;;		On entry : 0/0
 21664 ;;		On exit  : 0/0
 21665 ;;		Unchanged: 0/0
 21666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21670 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21671 ;;Total ram usage:        0 bytes
 21672 ;; Hardware stack levels used:    1
 21673 ;; Hardware stack levels required when called:   11
 21674 ;; This function calls:
 21675 ;;		_Port_SetPin
 21676 ;; This function is called by:
 21677 ;;		_LCD_Reset
 21678 ;; This function uses a non-reentrant model
 21679 ;;
 21680                           
 21681                           	psect	text106
 21682  016270                     __ptext106:
 21683                           	opt stack 0
 21684  016270                     _Reset_Low:
 21685                           	opt stack 15
 21686                           
 21687                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
 21688                           
 21689                           ; BSR set to: 0
 21690                           ;incstack = 0
 21691  016270  0EB7               	movlw	low _PortF
 21692  016272  0100               	movlb	0	; () banked
 21693  016274  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 21694  016276  0E03               	movlw	high _PortF
 21695  016278  0100               	movlb	0	; () banked
 21696  01627A  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 21697  01627C  0E06               	movlw	6
 21698  01627E  0100               	movlb	0	; () banked
 21699  016280  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 21700  016282  0E01               	movlw	1
 21701  016284  0100               	movlb	0	; () banked
 21702  016286  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 21703  016288  ECE9  F09E         	call	_Port_SetPin	;wreg free
 21704  01628C  0012               	return		;funcret
 21705  01628E                     __end_of_Reset_Low:
 21706                           	opt stack 0
 21707                           tosu	equ	0xFFF
 21708                           tosh	equ	0xFFE
 21709                           tosl	equ	0xFFD
 21710                           pclath	equ	0xFFA
 21711                           tblptru	equ	0xFF8
 21712                           tblptrh	equ	0xFF7
 21713                           tblptrl	equ	0xFF6
 21714                           tablat	equ	0xFF5
 21715                           prodh	equ	0xFF4
 21716                           prodl	equ	0xFF3
 21717                           intcon	equ	0xFF2
 21718                           postinc0	equ	0xFEE
 21719                           wreg	equ	0xFE8
 21720                           indf1	equ	0xFE7
 21721                           postdec1	equ	0xFE5
 21722                           fsr1h	equ	0xFE2
 21723                           fsr1l	equ	0xFE1
 21724                           indf2	equ	0xFDF
 21725                           postinc2	equ	0xFDE
 21726                           postdec2	equ	0xFDD
 21727                           plusw2	equ	0xFDB
 21728                           fsr2h	equ	0xFDA
 21729                           fsr2l	equ	0xFD9
 21730                           status	equ	0xFD8
 21731                           
 21732 ;; *************** function _Reset_High *****************
 21733 ;; Defined at:
 21734 ;;		line 36 in file "Library/LCD.c"
 21735 ;; Parameters:    Size  Location     Type
 21736 ;;		None
 21737 ;; Auto vars:     Size  Location     Type
 21738 ;;		None
 21739 ;; Return value:  Size  Location     Type
 21740 ;;                  1    wreg      void 
 21741 ;; Registers used:
 21742 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21743 ;; Tracked objects:
 21744 ;;		On entry : 0/0
 21745 ;;		On exit  : 0/0
 21746 ;;		Unchanged: 0/0
 21747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21751 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21752 ;;Total ram usage:        0 bytes
 21753 ;; Hardware stack levels used:    1
 21754 ;; Hardware stack levels required when called:   11
 21755 ;; This function calls:
 21756 ;;		_Port_SetPin
 21757 ;; This function is called by:
 21758 ;;		_LCD_Reset
 21759 ;; This function uses a non-reentrant model
 21760 ;;
 21761                           
 21762                           	psect	text107
 21763  01628E                     __ptext107:
 21764                           	opt stack 0
 21765  01628E                     _Reset_High:
 21766                           	opt stack 15
 21767                           
 21768                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
 21769                           
 21770                           ;incstack = 0
 21771  01628E  0EB7               	movlw	low _PortF
 21772  016290  0100               	movlb	0	; () banked
 21773  016292  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 21774  016294  0E03               	movlw	high _PortF
 21775  016296  0100               	movlb	0	; () banked
 21776  016298  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 21777  01629A  0E06               	movlw	6
 21778  01629C  0100               	movlb	0	; () banked
 21779  01629E  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 21780  0162A0  0E00               	movlw	0
 21781  0162A2  0100               	movlb	0	; () banked
 21782  0162A4  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 21783  0162A6  ECE9  F09E         	call	_Port_SetPin	;wreg free
 21784  0162AA  0012               	return		;funcret
 21785  0162AC                     __end_of_Reset_High:
 21786                           	opt stack 0
 21787                           tosu	equ	0xFFF
 21788                           tosh	equ	0xFFE
 21789                           tosl	equ	0xFFD
 21790                           pclath	equ	0xFFA
 21791                           tblptru	equ	0xFF8
 21792                           tblptrh	equ	0xFF7
 21793                           tblptrl	equ	0xFF6
 21794                           tablat	equ	0xFF5
 21795                           prodh	equ	0xFF4
 21796                           prodl	equ	0xFF3
 21797                           intcon	equ	0xFF2
 21798                           postinc0	equ	0xFEE
 21799                           wreg	equ	0xFE8
 21800                           indf1	equ	0xFE7
 21801                           postdec1	equ	0xFE5
 21802                           fsr1h	equ	0xFE2
 21803                           fsr1l	equ	0xFE1
 21804                           indf2	equ	0xFDF
 21805                           postinc2	equ	0xFDE
 21806                           postdec2	equ	0xFDD
 21807                           plusw2	equ	0xFDB
 21808                           fsr2h	equ	0xFDA
 21809                           fsr2l	equ	0xFD9
 21810                           status	equ	0xFD8
 21811                           
 21812 ;; *************** function _LED_Toggle *****************
 21813 ;; Defined at:
 21814 ;;		line 50 in file "Library/LED.c"
 21815 ;; Parameters:    Size  Location     Type
 21816 ;;  pLED            1    wreg     enum E6739
 21817 ;; Auto vars:     Size  Location     Type
 21818 ;;  pLED            1   24[BANK0 ] enum E6739
 21819 ;; Return value:  Size  Location     Type
 21820 ;;                  1    wreg      void 
 21821 ;; Registers used:
 21822 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21823 ;; Tracked objects:
 21824 ;;		On entry : 0/0
 21825 ;;		On exit  : 0/0
 21826 ;;		Unchanged: 0/0
 21827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21829 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21831 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21832 ;;Total ram usage:        1 bytes
 21833 ;; Hardware stack levels used:    1
 21834 ;; Hardware stack levels required when called:   12
 21835 ;; This function calls:
 21836 ;;		_Port_TogglePin
 21837 ;; This function is called by:
 21838 ;;		_LCD_Reset
 21839 ;;		_Event_DIPSwitch
 21840 ;;		_Event_TestButton
 21841 ;;		_Event_ADCSequenceComplete
 21842 ;;		_Event_HMI_DIPSwitch
 21843 ;;		_Event_HMI_LeftButton
 21844 ;;		_Event_HMI_RightButton
 21845 ;;		_Event_HMI_UpButton
 21846 ;;		_Event_HMI_DownButton
 21847 ;; This function uses a non-reentrant model
 21848 ;;
 21849                           
 21850                           	psect	text108
 21851  015AB0                     __ptext108:
 21852                           	opt stack 0
 21853  015AB0                     _LED_Toggle:
 21854                           	opt stack 14
 21855                           
 21856                           ;incstack = 0
 21857                           ;LED_Toggle@pLED stored from wreg
 21858  015AB0  0100               	movlb	0	; () banked
 21859  015AB2  6F78               	movwf	LED_Toggle@pLED& (0+255),b
 21860                           
 21861                           ;LED.c: 52: switch (pLED)
 21862  015AB4  D018               	goto	l234
 21863  015AB6                     
 21864                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 21865  015AB6  0EEA               	movlw	low _PortC
 21866  015AB8  0100               	movlb	0	; () banked
 21867  015ABA  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 21868  015ABC  0E00               	movlw	high _PortC
 21869  015ABE  0100               	movlb	0	; () banked
 21870  015AC0  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 21871  015AC2  0E00               	movlw	0
 21872  015AC4  0100               	movlb	0	; () banked
 21873  015AC6  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 21874  015AC8  ECEC  F0AF         	call	_Port_TogglePin	;wreg free
 21875                           
 21876                           ;LED.c: 56: break;
 21877  015ACC  0012               	return	
 21878  015ACE                     
 21879                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 21880  015ACE  0EEA               	movlw	low _PortC
 21881  015AD0  0100               	movlb	0	; () banked
 21882  015AD2  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 21883  015AD4  0E00               	movlw	high _PortC
 21884  015AD6  0100               	movlb	0	; () banked
 21885  015AD8  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 21886  015ADA  0E01               	movlw	1
 21887  015ADC  0100               	movlb	0	; () banked
 21888  015ADE  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 21889  015AE0  ECEC  F0AF         	call	_Port_TogglePin	;wreg free
 21890                           
 21891                           ;LED.c: 60: }
 21892                           
 21893                           ;LED.c: 59: break;
 21894  015AE4  0012               	return	
 21895  015AE6                     l234:
 21896  015AE6  0100               	movlb	0	; () banked
 21897  015AE8  5178               	movf	LED_Toggle@pLED& (0+255),w,b
 21898                           
 21899                           ; Switch size 1, requested type "space"
 21900                           ; Number of cases is 2, Range of values is 0 to 1
 21901                           ; switch strategies available:
 21902                           ; Name         Instructions Cycles
 21903                           ; simple_byte            7     4 (average)
 21904                           ;	Chosen strategy is simple_byte
 21905  015AEA  0A00               	xorlw	0	; case 0
 21906  015AEC  B4D8               	btfsc	status,2,c
 21907  015AEE  D7E3               	goto	l235
 21908  015AF0  0A01               	xorlw	1	; case 1
 21909  015AF2  A4D8               	btfss	status,2,c
 21910  015AF4  0012               	return	
 21911  015AF6  D7EB               	goto	l237
 21912  015AF8                     __end_of_LED_Toggle:
 21913                           	opt stack 0
 21914                           tosu	equ	0xFFF
 21915                           tosh	equ	0xFFE
 21916                           tosl	equ	0xFFD
 21917                           pclath	equ	0xFFA
 21918                           tblptru	equ	0xFF8
 21919                           tblptrh	equ	0xFF7
 21920                           tblptrl	equ	0xFF6
 21921                           tablat	equ	0xFF5
 21922                           prodh	equ	0xFF4
 21923                           prodl	equ	0xFF3
 21924                           intcon	equ	0xFF2
 21925                           postinc0	equ	0xFEE
 21926                           wreg	equ	0xFE8
 21927                           indf1	equ	0xFE7
 21928                           postdec1	equ	0xFE5
 21929                           fsr1h	equ	0xFE2
 21930                           fsr1l	equ	0xFE1
 21931                           indf2	equ	0xFDF
 21932                           postinc2	equ	0xFDE
 21933                           postdec2	equ	0xFDD
 21934                           plusw2	equ	0xFDB
 21935                           fsr2h	equ	0xFDA
 21936                           fsr2l	equ	0xFD9
 21937                           status	equ	0xFD8
 21938                           
 21939 ;; *************** function _Port_TogglePin *****************
 21940 ;; Defined at:
 21941 ;;		line 278 in file "Library/Port.c"
 21942 ;; Parameters:    Size  Location     Type
 21943 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 21944 ;;		 -> PortC(10), 
 21945 ;;  pPin            1   22[BANK0 ] enum E6750
 21946 ;; Auto vars:     Size  Location     Type
 21947 ;;  Value           1   23[BANK0 ] unsigned char 
 21948 ;; Return value:  Size  Location     Type
 21949 ;;                  1    wreg      void 
 21950 ;; Registers used:
 21951 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21952 ;; Tracked objects:
 21953 ;;		On entry : 0/0
 21954 ;;		On exit  : 0/0
 21955 ;;		Unchanged: 0/0
 21956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21957 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21958 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21960 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21961 ;;Total ram usage:        4 bytes
 21962 ;; Hardware stack levels used:    1
 21963 ;; Hardware stack levels required when called:   11
 21964 ;; This function calls:
 21965 ;;		_Port_GetPin
 21966 ;;		_Port_SetPin
 21967 ;; This function is called by:
 21968 ;;		_LED_Toggle
 21969 ;; This function uses a non-reentrant model
 21970 ;;
 21971                           
 21972                           	psect	text109
 21973  015FD8                     __ptext109:
 21974                           	opt stack 0
 21975  015FD8                     _Port_TogglePin:
 21976                           	opt stack 14
 21977                           
 21978                           ;Port.c: 280: UINT8 Value;
 21979                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 21980                           
 21981                           ;incstack = 0
 21982  015FD8  C074  F060         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 21983  015FDC  C075  F061         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 21984  015FE0  C076  F062         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 21985  015FE4  EC09  F0AE         	call	_Port_GetPin	;wreg free
 21986  015FE8  0100               	movlb	0	; () banked
 21987  015FEA  6F77               	movwf	Port_TogglePin@Value& (0+255),b
 21988                           
 21989                           ; BSR set to: 0
 21990                           ;Port.c: 282: Value ^= 0x01;
 21991  015FEC  0E01               	movlw	1
 21992  015FEE  0100               	movlb	0	; () banked
 21993  015FF0  1B77               	xorwf	Port_TogglePin@Value& (0+255),f,b
 21994                           
 21995                           ; BSR set to: 0
 21996                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 21997  015FF2  C074  F06F         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 21998  015FF6  C075  F070         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 21999  015FFA  C076  F071         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 22000  015FFE  C077  F072         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 22001  016002  ECE9  F09E         	call	_Port_SetPin	;wreg free
 22002  016006  0012               	return		;funcret
 22003  016008                     __end_of_Port_TogglePin:
 22004                           	opt stack 0
 22005                           tosu	equ	0xFFF
 22006                           tosh	equ	0xFFE
 22007                           tosl	equ	0xFFD
 22008                           pclath	equ	0xFFA
 22009                           tblptru	equ	0xFF8
 22010                           tblptrh	equ	0xFF7
 22011                           tblptrl	equ	0xFF6
 22012                           tablat	equ	0xFF5
 22013                           prodh	equ	0xFF4
 22014                           prodl	equ	0xFF3
 22015                           intcon	equ	0xFF2
 22016                           postinc0	equ	0xFEE
 22017                           wreg	equ	0xFE8
 22018                           indf1	equ	0xFE7
 22019                           postdec1	equ	0xFE5
 22020                           fsr1h	equ	0xFE2
 22021                           fsr1l	equ	0xFE1
 22022                           indf2	equ	0xFDF
 22023                           postinc2	equ	0xFDE
 22024                           postdec2	equ	0xFDD
 22025                           plusw2	equ	0xFDB
 22026                           fsr2h	equ	0xFDA
 22027                           fsr2l	equ	0xFD9
 22028                           status	equ	0xFD8
 22029                           
 22030 ;; *************** function _Port_SetPin *****************
 22031 ;; Defined at:
 22032 ;;		line 247 in file "Library/Port.c"
 22033 ;; Parameters:    Size  Location     Type
 22034 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 22035 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 22036 ;;  pPin            1   17[BANK0 ] enum E6750
 22037 ;;  pValue          1   18[BANK0 ] unsigned char 
 22038 ;; Auto vars:     Size  Location     Type
 22039 ;;  Type            1   19[BANK0 ] enum E6795
 22040 ;; Return value:  Size  Location     Type
 22041 ;;                  1    wreg      void 
 22042 ;; Registers used:
 22043 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22044 ;; Tracked objects:
 22045 ;;		On entry : 0/0
 22046 ;;		On exit  : 0/0
 22047 ;;		Unchanged: 0/0
 22048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22049 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22050 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22052 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22053 ;;Total ram usage:        5 bytes
 22054 ;; Hardware stack levels used:    1
 22055 ;; Hardware stack levels required when called:   10
 22056 ;; This function calls:
 22057 ;;		_Byte_SetBit
 22058 ;;		_Word_GetPair
 22059 ;; This function is called by:
 22060 ;;		_Reset_Low
 22061 ;;		_Reset_High
 22062 ;;		_LED_Set
 22063 ;;		_Port_TogglePin
 22064 ;;		_Motor_Init
 22065 ;;		_Motor_Step
 22066 ;;		_MXK_Init
 22067 ;; This function uses a non-reentrant model
 22068 ;;
 22069                           
 22070                           	psect	text110
 22071  013DD2                     __ptext110:
 22072                           	opt stack 0
 22073  013DD2                     _Port_SetPin:
 22074                           	opt stack 17
 22075                           
 22076                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 22077                           
 22078                           ;incstack = 0
 22079  013DD2  0E08               	movlw	8
 22080  013DD4  0100               	movlb	0	; () banked
 22081  013DD6  256F               	addwf	Port_SetPin@pInput& (0+255),w,b
 22082  013DD8  0100               	movlb	0	; () banked
 22083  013DDA  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 22084  013DDC  0E00               	movlw	0
 22085  013DDE  0100               	movlb	0	; () banked
 22086  013DE0  2170               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 22087  013DE2  0100               	movlb	0	; () banked
 22088  013DE4  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 22089  013DE6  C071  F06E         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 22090  013DEA  EC0C  F0AF         	call	_Word_GetPair	;wreg free
 22091  013DEE  0100               	movlb	0	; () banked
 22092  013DF0  6F73               	movwf	Port_SetPin@Type& (0+255),b
 22093                           
 22094                           ;Port.c: 250: switch (Type)
 22095  013DF2  D042               	goto	l427
 22096  013DF4                     
 22097                           ; BSR set to: 0
 22098                           ;Port.c: 256: pValue &= 1;
 22099                           
 22100                           ; BSR set to: 0
 22101  013DF4  0E01               	movlw	1
 22102  013DF6  0100               	movlb	0	; () banked
 22103  013DF8  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 22104                           
 22105                           ; BSR set to: 0
 22106                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 22107  013DFA  0100               	movlb	0	; () banked
 22108  013DFC  EE20 F002          	lfsr	2,2
 22109  013E00  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 22110  013E02  26D9               	addwf	fsr2l,f,c
 22111  013E04  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 22112  013E06  22DA               	addwfc	fsr2h,f,c
 22113  013E08  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22114  013E0C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22115  013E10  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 22116  013E14  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 22117  013E18  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 22118                           
 22119                           ;Port.c: 258: break;
 22120  013E1C  0012               	return	
 22121  013E1E                     
 22122                           ;Port.c: 261: pValue &= 1;
 22123  013E1E  0E01               	movlw	1
 22124  013E20  0100               	movlb	0	; () banked
 22125  013E22  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 22126                           
 22127                           ;Port.c: 262: pValue ^= 1;
 22128  013E24  0E01               	movlw	1
 22129  013E26  0100               	movlb	0	; () banked
 22130  013E28  1B72               	xorwf	Port_SetPin@pValue& (0+255),f,b
 22131                           
 22132                           ; BSR set to: 0
 22133                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 22134  013E2A  0100               	movlb	0	; () banked
 22135  013E2C  EE20 F002          	lfsr	2,2
 22136  013E30  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 22137  013E32  26D9               	addwf	fsr2l,f,c
 22138  013E34  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 22139  013E36  22DA               	addwfc	fsr2h,f,c
 22140  013E38  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22141  013E3C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22142  013E40  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 22143  013E44  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 22144  013E48  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 22145                           
 22146                           ;Port.c: 264: break;
 22147  013E4C  0012               	return	
 22148  013E4E                     
 22149                           ;Port.c: 266: pValue &= 1;
 22150  013E4E  0E01               	movlw	1
 22151  013E50  0100               	movlb	0	; () banked
 22152  013E52  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 22153                           
 22154                           ; BSR set to: 0
 22155                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 22156  013E54  0100               	movlb	0	; () banked
 22157  013E56  EE20 F004          	lfsr	2,4
 22158  013E5A  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 22159  013E5C  26D9               	addwf	fsr2l,f,c
 22160  013E5E  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 22161  013E60  22DA               	addwfc	fsr2h,f,c
 22162  013E62  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22163  013E66  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22164  013E6A  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 22165  013E6E  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 22166  013E72  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 22167                           
 22168                           ;Port.c: 269: }
 22169                           
 22170                           ;Port.c: 268: break;
 22171  013E76  0012               	return	
 22172  013E78                     l427:
 22173  013E78  0100               	movlb	0	; () banked
 22174  013E7A  5173               	movf	Port_SetPin@Type& (0+255),w,b
 22175                           
 22176                           ; Switch size 1, requested type "space"
 22177                           ; Number of cases is 4, Range of values is 0 to 3
 22178                           ; switch strategies available:
 22179                           ; Name         Instructions Cycles
 22180                           ; simple_byte           13     7 (average)
 22181                           ;	Chosen strategy is simple_byte
 22182  013E7C  0A00               	xorlw	0	; case 0
 22183  013E7E  B4D8               	btfsc	status,2,c
 22184  013E80  0012               	return	
 22185  013E82  0A01               	xorlw	1	; case 1
 22186  013E84  B4D8               	btfsc	status,2,c
 22187  013E86  D7B6               	goto	l430
 22188  013E88  0A03               	xorlw	3	; case 2
 22189  013E8A  B4D8               	btfsc	status,2,c
 22190  013E8C  D7C8               	goto	l432
 22191  013E8E  0A01               	xorlw	1	; case 3
 22192  013E90  A4D8               	btfss	status,2,c
 22193  013E92  0012               	return	
 22194  013E94  D7DC               	goto	l433
 22195  013E96                     __end_of_Port_SetPin:
 22196                           	opt stack 0
 22197                           tosu	equ	0xFFF
 22198                           tosh	equ	0xFFE
 22199                           tosl	equ	0xFFD
 22200                           pclath	equ	0xFFA
 22201                           tblptru	equ	0xFF8
 22202                           tblptrh	equ	0xFF7
 22203                           tblptrl	equ	0xFF6
 22204                           tablat	equ	0xFF5
 22205                           prodh	equ	0xFF4
 22206                           prodl	equ	0xFF3
 22207                           intcon	equ	0xFF2
 22208                           postinc0	equ	0xFEE
 22209                           wreg	equ	0xFE8
 22210                           indf1	equ	0xFE7
 22211                           postdec1	equ	0xFE5
 22212                           fsr1h	equ	0xFE2
 22213                           fsr1l	equ	0xFE1
 22214                           indf2	equ	0xFDF
 22215                           postinc2	equ	0xFDE
 22216                           postdec2	equ	0xFDD
 22217                           plusw2	equ	0xFDB
 22218                           fsr2h	equ	0xFDA
 22219                           fsr2l	equ	0xFD9
 22220                           status	equ	0xFD8
 22221                           
 22222 ;; *************** function _ISR_Enable *****************
 22223 ;; Defined at:
 22224 ;;		line 27 in file "Library/ISR.c"
 22225 ;; Parameters:    Size  Location     Type
 22226 ;;		None
 22227 ;; Auto vars:     Size  Location     Type
 22228 ;;		None
 22229 ;; Return value:  Size  Location     Type
 22230 ;;                  1    wreg      void 
 22231 ;; Registers used:
 22232 ;;		None
 22233 ;; Tracked objects:
 22234 ;;		On entry : 0/0
 22235 ;;		On exit  : 0/0
 22236 ;;		Unchanged: 0/0
 22237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22241 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22242 ;;Total ram usage:        0 bytes
 22243 ;; Hardware stack levels used:    1
 22244 ;; Hardware stack levels required when called:    7
 22245 ;; This function calls:
 22246 ;;		Nothing
 22247 ;; This function is called by:
 22248 ;;		_init
 22249 ;; This function uses a non-reentrant model
 22250 ;;
 22251                           
 22252                           	psect	text111
 22253  01652A                     __ptext111:
 22254                           	opt stack 0
 22255  01652A                     _ISR_Enable:
 22256                           	opt stack 22
 22257                           
 22258                           ;ISR.c: 29: INTCONbits.PEIE = 1;
 22259                           
 22260                           ;incstack = 0
 22261  01652A  8CF2               	bsf	intcon,6,c	;volatile
 22262                           
 22263                           ;ISR.c: 30: INTCONbits.GIE = 1;
 22264  01652C  8EF2               	bsf	intcon,7,c	;volatile
 22265                           
 22266                           ;ISR.c: 31: INTCONbits.INT0IE = 1;
 22267  01652E  88F2               	bsf	intcon,4,c	;volatile
 22268                           
 22269                           ;ISR.c: 32: INTCONbits.INT0IF = 0;
 22270  016530  92F2               	bcf	intcon,1,c	;volatile
 22271  016532  0012               	return		;funcret
 22272  016534                     __end_of_ISR_Enable:
 22273                           	opt stack 0
 22274                           tosu	equ	0xFFF
 22275                           tosh	equ	0xFFE
 22276                           tosl	equ	0xFFD
 22277                           pclath	equ	0xFFA
 22278                           tblptru	equ	0xFF8
 22279                           tblptrh	equ	0xFF7
 22280                           tblptrl	equ	0xFF6
 22281                           tablat	equ	0xFF5
 22282                           prodh	equ	0xFF4
 22283                           prodl	equ	0xFF3
 22284                           intcon	equ	0xFF2
 22285                           postinc0	equ	0xFEE
 22286                           wreg	equ	0xFE8
 22287                           indf1	equ	0xFE7
 22288                           postdec1	equ	0xFE5
 22289                           fsr1h	equ	0xFE2
 22290                           fsr1l	equ	0xFE1
 22291                           indf2	equ	0xFDF
 22292                           postinc2	equ	0xFDE
 22293                           postdec2	equ	0xFDD
 22294                           plusw2	equ	0xFDB
 22295                           fsr2h	equ	0xFDA
 22296                           fsr2l	equ	0xFD9
 22297                           status	equ	0xFD8
 22298                           
 22299 ;; *************** function _HMI_Init *****************
 22300 ;; Defined at:
 22301 ;;		line 104 in file "HMI.c"
 22302 ;; Parameters:    Size  Location     Type
 22303 ;;		None
 22304 ;; Auto vars:     Size  Location     Type
 22305 ;;  in              2   72[BANK0 ] unsigned short 
 22306 ;; Return value:  Size  Location     Type
 22307 ;;                  1    wreg      void 
 22308 ;; Registers used:
 22309 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22310 ;; Tracked objects:
 22311 ;;		On entry : 0/0
 22312 ;;		On exit  : 0/0
 22313 ;;		Unchanged: 0/0
 22314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22316 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22318 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22319 ;;Total ram usage:        2 bytes
 22320 ;; Hardware stack levels used:    1
 22321 ;; Hardware stack levels required when called:   16
 22322 ;; This function calls:
 22323 ;;		_Button_Init
 22324 ;;		_SPI_Init
 22325 ;;		_SPI_MinSpeed
 22326 ;; This function is called by:
 22327 ;;		_init
 22328 ;; This function uses a non-reentrant model
 22329 ;;
 22330                           
 22331                           	psect	text112
 22332  012134                     __ptext112:
 22333                           	opt stack 0
 22334  012134                     _HMI_Init:
 22335                           	opt stack 13
 22336                           
 22337                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 22338                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_NULL);
 22339                           
 22340                           ;incstack = 0
 22341  012134  0E5B               	movlw	low (_HMIBoard+48)
 22342  012136  0100               	movlb	0	; () banked
 22343  012138  6F9B               	movwf	Button_Init@pInput& (0+255),b
 22344  01213A  0E03               	movlw	high (_HMIBoard+48)
 22345  01213C  0100               	movlb	0	; () banked
 22346  01213E  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 22347  012140  0E00               	movlw	0
 22348  012142  0100               	movlb	0	; () banked
 22349  012144  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 22350  012146  0E02               	movlw	2
 22351  012148  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 22352  01214A  0E60               	movlw	low _HMI_InitButtons
 22353  01214C  0100               	movlb	0	; () banked
 22354  01214E  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 22355  012150  0E65               	movlw	high _HMI_InitButtons
 22356  012152  0100               	movlb	0	; () banked
 22357  012154  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 22358  012156  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 22359  012158  0100               	movlb	0	; () banked
 22360  01215A  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 22361  01215C  0EA4               	movlw	low _HMI_DIPSwitch
 22362  01215E  0100               	movlb	0	; () banked
 22363  012160  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 22364  012162  0E63               	movlw	high _HMI_DIPSwitch
 22365  012164  0100               	movlb	0	; () banked
 22366  012166  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 22367  012168  0E01               	movlw	low (_HMI_DIPSwitch shr (0+16))
 22368  01216A  0100               	movlb	0	; () banked
 22369  01216C  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 22370  01216E  0E78               	movlw	low _Event_NULL
 22371  012170  0100               	movlb	0	; () banked
 22372  012172  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 22373  012174  0E65               	movlw	high _Event_NULL
 22374  012176  0100               	movlb	0	; () banked
 22375  012178  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 22376  01217A  0E01               	movlw	low (_Event_NULL shr (0+16))
 22377  01217C  0100               	movlb	0	; () banked
 22378  01217E  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 22379  012180  EC17  F09E         	call	_Button_Init	;wreg free
 22380                           
 22381                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 22382                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_NULL);
 22383  012184  0E3D               	movlw	low (_HMIBoard+18)
 22384  012186  0100               	movlb	0	; () banked
 22385  012188  6F9B               	movwf	Button_Init@pInput& (0+255),b
 22386  01218A  0E03               	movlw	high (_HMIBoard+18)
 22387  01218C  0100               	movlb	0	; () banked
 22388  01218E  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 22389  012190  0E00               	movlw	0
 22390  012192  0100               	movlb	0	; () banked
 22391  012194  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 22392  012196  0E02               	movlw	2
 22393  012198  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 22394  01219A  0E60               	movlw	low _HMI_InitButtons
 22395  01219C  0100               	movlb	0	; () banked
 22396  01219E  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 22397  0121A0  0E65               	movlw	high _HMI_InitButtons
 22398  0121A2  0100               	movlb	0	; () banked
 22399  0121A4  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 22400  0121A6  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 22401  0121A8  0100               	movlb	0	; () banked
 22402  0121AA  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 22403  0121AC  0E04               	movlw	low _HMI_LeftSwitch
 22404  0121AE  0100               	movlb	0	; () banked
 22405  0121B0  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 22406  0121B2  0E64               	movlw	high _HMI_LeftSwitch
 22407  0121B4  0100               	movlb	0	; () banked
 22408  0121B6  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 22409  0121B8  0E01               	movlw	low (_HMI_LeftSwitch shr (0+16))
 22410  0121BA  0100               	movlb	0	; () banked
 22411  0121BC  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 22412  0121BE  0E78               	movlw	low _Event_NULL
 22413  0121C0  0100               	movlb	0	; () banked
 22414  0121C2  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 22415  0121C4  0E65               	movlw	high _Event_NULL
 22416  0121C6  0100               	movlb	0	; () banked
 22417  0121C8  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 22418  0121CA  0E01               	movlw	low (_Event_NULL shr (0+16))
 22419  0121CC  0100               	movlb	0	; () banked
 22420  0121CE  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 22421  0121D0  EC17  F09E         	call	_Button_Init	;wreg free
 22422                           
 22423                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 22424                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_NULL);
 22425  0121D4  0E33               	movlw	low (_HMIBoard+8)
 22426  0121D6  0100               	movlb	0	; () banked
 22427  0121D8  6F9B               	movwf	Button_Init@pInput& (0+255),b
 22428  0121DA  0E03               	movlw	high (_HMIBoard+8)
 22429  0121DC  0100               	movlb	0	; () banked
 22430  0121DE  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 22431  0121E0  0E00               	movlw	0
 22432  0121E2  0100               	movlb	0	; () banked
 22433  0121E4  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 22434  0121E6  0E02               	movlw	2
 22435  0121E8  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 22436  0121EA  0E60               	movlw	low _HMI_InitButtons
 22437  0121EC  0100               	movlb	0	; () banked
 22438  0121EE  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 22439  0121F0  0E65               	movlw	high _HMI_InitButtons
 22440  0121F2  0100               	movlb	0	; () banked
 22441  0121F4  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 22442  0121F6  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 22443  0121F8  0100               	movlb	0	; () banked
 22444  0121FA  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 22445  0121FC  0EEC               	movlw	low _HMI_RightSwitch
 22446  0121FE  0100               	movlb	0	; () banked
 22447  012200  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 22448  012202  0E63               	movlw	high _HMI_RightSwitch
 22449  012204  0100               	movlb	0	; () banked
 22450  012206  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 22451  012208  0E01               	movlw	low (_HMI_RightSwitch shr (0+16))
 22452  01220A  0100               	movlb	0	; () banked
 22453  01220C  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 22454  01220E  0E78               	movlw	low _Event_NULL
 22455  012210  0100               	movlb	0	; () banked
 22456  012212  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 22457  012214  0E65               	movlw	high _Event_NULL
 22458  012216  0100               	movlb	0	; () banked
 22459  012218  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 22460  01221A  0E01               	movlw	low (_Event_NULL shr (0+16))
 22461  01221C  0100               	movlb	0	; () banked
 22462  01221E  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 22463  012220  EC17  F09E         	call	_Button_Init	;wreg free
 22464                           
 22465                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 22466                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_NULL);
 22467  012224  0E47               	movlw	low (_HMIBoard+28)
 22468  012226  0100               	movlb	0	; () banked
 22469  012228  6F9B               	movwf	Button_Init@pInput& (0+255),b
 22470  01222A  0E03               	movlw	high (_HMIBoard+28)
 22471  01222C  0100               	movlb	0	; () banked
 22472  01222E  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 22473  012230  0E00               	movlw	0
 22474  012232  0100               	movlb	0	; () banked
 22475  012234  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 22476  012236  0E02               	movlw	2
 22477  012238  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 22478  01223A  0E60               	movlw	low _HMI_InitButtons
 22479  01223C  0100               	movlb	0	; () banked
 22480  01223E  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 22481  012240  0E65               	movlw	high _HMI_InitButtons
 22482  012242  0100               	movlb	0	; () banked
 22483  012244  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 22484  012246  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 22485  012248  0100               	movlb	0	; () banked
 22486  01224A  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 22487  01224C  0ED4               	movlw	low _HMI_UpSwitch
 22488  01224E  0100               	movlb	0	; () banked
 22489  012250  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 22490  012252  0E63               	movlw	high _HMI_UpSwitch
 22491  012254  0100               	movlb	0	; () banked
 22492  012256  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 22493  012258  0E01               	movlw	low (_HMI_UpSwitch shr (0+16))
 22494  01225A  0100               	movlb	0	; () banked
 22495  01225C  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 22496  01225E  0E78               	movlw	low _Event_NULL
 22497  012260  0100               	movlb	0	; () banked
 22498  012262  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 22499  012264  0E65               	movlw	high _Event_NULL
 22500  012266  0100               	movlb	0	; () banked
 22501  012268  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 22502  01226A  0E01               	movlw	low (_Event_NULL shr (0+16))
 22503  01226C  0100               	movlb	0	; () banked
 22504  01226E  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 22505  012270  EC17  F09E         	call	_Button_Init	;wreg free
 22506                           
 22507                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 22508                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_NULL);
 22509  012274  0E51               	movlw	low (_HMIBoard+38)
 22510  012276  0100               	movlb	0	; () banked
 22511  012278  6F9B               	movwf	Button_Init@pInput& (0+255),b
 22512  01227A  0E03               	movlw	high (_HMIBoard+38)
 22513  01227C  0100               	movlb	0	; () banked
 22514  01227E  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 22515  012280  0E00               	movlw	0
 22516  012282  0100               	movlb	0	; () banked
 22517  012284  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 22518  012286  0E02               	movlw	2
 22519  012288  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 22520  01228A  0E60               	movlw	low _HMI_InitButtons
 22521  01228C  0100               	movlb	0	; () banked
 22522  01228E  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 22523  012290  0E65               	movlw	high _HMI_InitButtons
 22524  012292  0100               	movlb	0	; () banked
 22525  012294  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 22526  012296  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 22527  012298  0100               	movlb	0	; () banked
 22528  01229A  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 22529  01229C  0EBC               	movlw	low _HMI_DownSwitch
 22530  01229E  0100               	movlb	0	; () banked
 22531  0122A0  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 22532  0122A2  0E63               	movlw	high _HMI_DownSwitch
 22533  0122A4  0100               	movlb	0	; () banked
 22534  0122A6  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 22535  0122A8  0E01               	movlw	low (_HMI_DownSwitch shr (0+16))
 22536  0122AA  0100               	movlb	0	; () banked
 22537  0122AC  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 22538  0122AE  0E78               	movlw	low _Event_NULL
 22539  0122B0  0100               	movlb	0	; () banked
 22540  0122B2  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 22541  0122B4  0E65               	movlw	high _Event_NULL
 22542  0122B6  0100               	movlb	0	; () banked
 22543  0122B8  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 22544  0122BA  0E01               	movlw	low (_Event_NULL shr (0+16))
 22545  0122BC  0100               	movlb	0	; () banked
 22546  0122BE  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 22547  0122C0  EC17  F09E         	call	_Button_Init	;wreg free
 22548                           
 22549                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 22550  0122C4  0EA0               	movlw	160
 22551  0122C6  0100               	movlb	0	; () banked
 22552  0122C8  6F8D               	movwf	SPI_Init@pClock& (0+255),b
 22553  0122CA  0E86               	movlw	134
 22554  0122CC  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
 22555  0122CE  0E01               	movlw	1
 22556  0122D0  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
 22557  0122D2  0E00               	movlw	0
 22558  0122D4  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
 22559  0122D6  0E00               	movlw	0
 22560  0122D8  0100               	movlb	0	; () banked
 22561  0122DA  6F91               	movwf	SPI_Init@pChannel& (0+255),b
 22562  0122DC  0E02               	movlw	2
 22563  0122DE  0100               	movlb	0	; () banked
 22564  0122E0  6F92               	movwf	SPI_Init@pMode& (0+255),b
 22565  0122E2  EC53  F082         	call	_SPI_Init	;wreg free
 22566                           
 22567                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 22568  0122E6  0E65               	movlw	low _SPI1
 22569  0122E8  0100               	movlb	0	; () banked
 22570  0122EA  6F6F               	movwf	SPI_MinSpeed@pInput& (0+255),b
 22571  0122EC  0E03               	movlw	high _SPI1
 22572  0122EE  0100               	movlb	0	; () banked
 22573  0122F0  6F70               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 22574  0122F2  ECE3  F0A8         	call	_SPI_MinSpeed	;wreg free
 22575                           
 22576                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 22577  0122F6  0E00               	movlw	0
 22578  0122F8  0100               	movlb	0	; () banked
 22579  0122FA  6FA9               	movwf	(HMI_Init@in+1)& (0+255),b
 22580  0122FC  0E00               	movlw	0
 22581  0122FE  6FA8               	movwf	HMI_Init@in& (0+255),b
 22582  012300                     l14089:
 22583                           
 22584                           ; BSR set to: 0
 22585  012300  0100               	movlb	0	; () banked
 22586  012302  51A9               	movf	(HMI_Init@in+1)& (0+255),w,b
 22587  012304  E113               	bnz	l1153
 22588  012306  0E08               	movlw	8
 22589  012308  0100               	movlb	0	; () banked
 22590  01230A  5DA8               	subwf	HMI_Init@in& (0+255),w,b
 22591  01230C  B0D8               	btfsc	status,0,c
 22592  01230E  0012               	return	
 22593                           
 22594                           ; BSR set to: 0
 22595                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 22596                           
 22597                           ; BSR set to: 0
 22598                           
 22599                           ; BSR set to: 0
 22600  012310  0E2B               	movlw	low _HMIBoard
 22601  012312  0100               	movlb	0	; () banked
 22602  012314  25A8               	addwf	HMI_Init@in& (0+255),w,b
 22603  012316  6ED9               	movwf	fsr2l,c
 22604  012318  0E03               	movlw	high _HMIBoard
 22605  01231A  0100               	movlb	0	; () banked
 22606  01231C  21A9               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 22607  01231E  6EDA               	movwf	fsr2h,c
 22608  012320  0E00               	movlw	0
 22609  012322  6EDF               	movwf	indf2,c
 22610                           
 22611                           ; BSR set to: 0
 22612  012324  0100               	movlb	0	; () banked
 22613  012326  4BA8               	infsnz	HMI_Init@in& (0+255),f,b
 22614  012328  2BA9               	incf	(HMI_Init@in+1)& (0+255),f,b
 22615  01232A  D7EA               	goto	l14089
 22616  01232C                     l1153:
 22617                           
 22618                           ; BSR set to: 0
 22619  01232C  0012               	return		;funcret
 22620  01232E                     __end_of_HMI_Init:
 22621                           	opt stack 0
 22622                           tosu	equ	0xFFF
 22623                           tosh	equ	0xFFE
 22624                           tosl	equ	0xFFD
 22625                           pclath	equ	0xFFA
 22626                           tblptru	equ	0xFF8
 22627                           tblptrh	equ	0xFF7
 22628                           tblptrl	equ	0xFF6
 22629                           tablat	equ	0xFF5
 22630                           prodh	equ	0xFF4
 22631                           prodl	equ	0xFF3
 22632                           intcon	equ	0xFF2
 22633                           postinc0	equ	0xFEE
 22634                           wreg	equ	0xFE8
 22635                           indf1	equ	0xFE7
 22636                           postdec1	equ	0xFE5
 22637                           fsr1h	equ	0xFE2
 22638                           fsr1l	equ	0xFE1
 22639                           indf2	equ	0xFDF
 22640                           postinc2	equ	0xFDE
 22641                           postdec2	equ	0xFDD
 22642                           plusw2	equ	0xFDB
 22643                           fsr2h	equ	0xFDA
 22644                           fsr2l	equ	0xFD9
 22645                           status	equ	0xFD8
 22646                           
 22647 ;; *************** function _SPI_MinSpeed *****************
 22648 ;; Defined at:
 22649 ;;		line 190 in file "Library/SPI.c"
 22650 ;; Parameters:    Size  Location     Type
 22651 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 22652 ;;		 -> SPI1(11), 
 22653 ;; Auto vars:     Size  Location     Type
 22654 ;;		None
 22655 ;; Return value:  Size  Location     Type
 22656 ;;                  1    wreg      void 
 22657 ;; Registers used:
 22658 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22659 ;; Tracked objects:
 22660 ;;		On entry : 0/0
 22661 ;;		On exit  : 0/0
 22662 ;;		Unchanged: 0/0
 22663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22664 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22667 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22668 ;;Total ram usage:        2 bytes
 22669 ;; Hardware stack levels used:    1
 22670 ;; Hardware stack levels required when called:    9
 22671 ;; This function calls:
 22672 ;;		_Byte_SetBit
 22673 ;;		_Byte_SetQuad
 22674 ;; This function is called by:
 22675 ;;		_HMI_Init
 22676 ;; This function uses a non-reentrant model
 22677 ;;
 22678                           
 22679                           	psect	text113
 22680  0151C6                     __ptext113:
 22681                           	opt stack 0
 22682  0151C6                     _SPI_MinSpeed:
 22683                           	opt stack 19
 22684                           
 22685                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 22686                           
 22687                           ; BSR set to: 0
 22688                           ;incstack = 0
 22689  0151C6  0100               	movlb	0	; () banked
 22690  0151C8  EE20 F006          	lfsr	2,6
 22691  0151CC  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 22692  0151CE  26D9               	addwf	fsr2l,f,c
 22693  0151D0  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 22694  0151D2  22DA               	addwfc	fsr2h,f,c
 22695  0151D4  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22696  0151D8  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22697  0151DC  0E05               	movlw	5
 22698  0151DE  0100               	movlb	0	; () banked
 22699  0151E0  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 22700  0151E2  0E00               	movlw	0
 22701  0151E4  0100               	movlb	0	; () banked
 22702  0151E6  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 22703  0151E8  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 22704                           
 22705                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 22706  0151EC  0100               	movlb	0	; () banked
 22707  0151EE  EE20 F006          	lfsr	2,6
 22708  0151F2  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 22709  0151F4  26D9               	addwf	fsr2l,f,c
 22710  0151F6  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 22711  0151F8  22DA               	addwfc	fsr2h,f,c
 22712  0151FA  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 22713  0151FE  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 22714  015202  0E00               	movlw	0
 22715  015204  0100               	movlb	0	; () banked
 22716  015206  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 22717  015208  0E02               	movlw	2
 22718  01520A  0100               	movlb	0	; () banked
 22719  01520C  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 22720  01520E  ECEA  F0B0         	call	_Byte_SetQuad	;wreg free
 22721                           
 22722                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 22723  015212  0100               	movlb	0	; () banked
 22724  015214  EE20 F006          	lfsr	2,6
 22725  015218  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 22726  01521A  26D9               	addwf	fsr2l,f,c
 22727  01521C  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 22728  01521E  22DA               	addwfc	fsr2h,f,c
 22729  015220  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22730  015224  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22731  015228  0E05               	movlw	5
 22732  01522A  0100               	movlb	0	; () banked
 22733  01522C  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 22734  01522E  0E01               	movlw	1
 22735  015230  0100               	movlb	0	; () banked
 22736  015232  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 22737  015234  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 22738  015238  0012               	return		;funcret
 22739  01523A                     __end_of_SPI_MinSpeed:
 22740                           	opt stack 0
 22741                           tosu	equ	0xFFF
 22742                           tosh	equ	0xFFE
 22743                           tosl	equ	0xFFD
 22744                           pclath	equ	0xFFA
 22745                           tblptru	equ	0xFF8
 22746                           tblptrh	equ	0xFF7
 22747                           tblptrl	equ	0xFF6
 22748                           tablat	equ	0xFF5
 22749                           prodh	equ	0xFF4
 22750                           prodl	equ	0xFF3
 22751                           intcon	equ	0xFF2
 22752                           postinc0	equ	0xFEE
 22753                           wreg	equ	0xFE8
 22754                           indf1	equ	0xFE7
 22755                           postdec1	equ	0xFE5
 22756                           fsr1h	equ	0xFE2
 22757                           fsr1l	equ	0xFE1
 22758                           indf2	equ	0xFDF
 22759                           postinc2	equ	0xFDE
 22760                           postdec2	equ	0xFDD
 22761                           plusw2	equ	0xFDB
 22762                           fsr2h	equ	0xFDA
 22763                           fsr2l	equ	0xFD9
 22764                           status	equ	0xFD8
 22765                           
 22766 ;; *************** function _SPI_Init *****************
 22767 ;; Defined at:
 22768 ;;		line 12 in file "Library/SPI.c"
 22769 ;; Parameters:    Size  Location     Type
 22770 ;;  pClock          4   45[BANK0 ] unsigned long 
 22771 ;;  pChannel        1   49[BANK0 ] enum E6744
 22772 ;;  pMode           1   50[BANK0 ] enum E6748
 22773 ;; Auto vars:     Size  Location     Type
 22774 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 22775 ;;		 -> SPI1(11), SPI2(11), 
 22776 ;; Return value:  Size  Location     Type
 22777 ;;                  1    wreg      void 
 22778 ;; Registers used:
 22779 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22780 ;; Tracked objects:
 22781 ;;		On entry : 0/0
 22782 ;;		On exit  : 0/0
 22783 ;;		Unchanged: 0/0
 22784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22785 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22786 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22788 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22789 ;;Total ram usage:        8 bytes
 22790 ;; Hardware stack levels used:    1
 22791 ;; Hardware stack levels required when called:   12
 22792 ;; This function calls:
 22793 ;;		_Byte_SetBit
 22794 ;;		_Byte_SetQuad
 22795 ;;		_Port_SetPinType
 22796 ;;		_SPI_DCS
 22797 ;;		_SPI_DisableISR
 22798 ;;		_Timer2_Init
 22799 ;; This function is called by:
 22800 ;;		_Configure_GPIOs
 22801 ;;		_HMI_Init
 22802 ;; This function uses a non-reentrant model
 22803 ;;
 22804                           
 22805                           	psect	text114
 22806  0104A6                     __ptext114:
 22807                           	opt stack 0
 22808  0104A6                     _SPI_Init:
 22809                           	opt stack 15
 22810                           
 22811                           ;SPI.c: 14: SPIPtr pInput;
 22812                           ;SPI.c: 16: switch (pChannel)
 22813                           
 22814                           ;incstack = 0
 22815  0104A6  D00C               	goto	l597
 22816  0104A8                     
 22817                           ;SPI.c: 19: pInput = &SPI1;
 22818  0104A8  0E65               	movlw	low _SPI1
 22819  0104AA  0100               	movlb	0	; () banked
 22820  0104AC  6F93               	movwf	SPI_Init@pInput& (0+255),b
 22821  0104AE  0E03               	movlw	high _SPI1
 22822  0104B0  D004               	goto	L13
 22823  0104B2                     
 22824                           ; BSR set to: 0
 22825                           ;SPI.c: 22: pInput = &SPI2;
 22826                           
 22827                           ; BSR set to: 0
 22828  0104B2  0E70               	movlw	low _SPI2
 22829  0104B4  0100               	movlb	0	; () banked
 22830  0104B6  6F93               	movwf	SPI_Init@pInput& (0+255),b
 22831  0104B8  0E03               	movlw	high _SPI2
 22832  0104BA                     L13:
 22833  0104BA  0100               	movlb	0	; () banked
 22834  0104BC  6F94               	movwf	(SPI_Init@pInput+1)& (0+255),b
 22835                           
 22836                           ; BSR set to: 0
 22837                           ;SPI.c: 24: };
 22838                           
 22839                           ;SPI.c: 23: break;
 22840  0104BE  D008               	goto	l599
 22841  0104C0                     l597:
 22842                           
 22843                           ; BSR set to: 0
 22844  0104C0  0100               	movlb	0	; () banked
 22845  0104C2  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 22846                           
 22847                           ; Switch size 1, requested type "space"
 22848                           ; Number of cases is 2, Range of values is 0 to 1
 22849                           ; switch strategies available:
 22850                           ; Name         Instructions Cycles
 22851                           ; simple_byte            7     4 (average)
 22852                           ;	Chosen strategy is simple_byte
 22853  0104C4  0A00               	xorlw	0	; case 0
 22854  0104C6  B4D8               	btfsc	status,2,c
 22855  0104C8  D7EF               	goto	l598
 22856  0104CA  0A01               	xorlw	1	; case 1
 22857  0104CC  B4D8               	btfsc	status,2,c
 22858  0104CE  D7F1               	goto	l600
 22859  0104D0                     l599:
 22860                           
 22861                           ; BSR set to: 0
 22862                           ;SPI.c: 26: pInput->mChannel = pChannel;
 22863                           
 22864                           ; BSR set to: 0
 22865  0104D0  0100               	movlb	0	; () banked
 22866  0104D2  EE20 F002          	lfsr	2,2
 22867  0104D6  5193               	movf	SPI_Init@pInput& (0+255),w,b
 22868  0104D8  26D9               	addwf	fsr2l,f,c
 22869  0104DA  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22870  0104DC  22DA               	addwfc	fsr2h,f,c
 22871  0104DE  C091  FFDF         	movff	SPI_Init@pChannel,indf2
 22872                           
 22873                           ;SPI.c: 35: switch (pChannel)
 22874  0104E2  D0B1               	goto	l601
 22875  0104E4                     
 22876                           ; BSR set to: 0
 22877                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 22878                           
 22879                           ; BSR set to: 0
 22880  0104E4  0EEA               	movlw	low _PortC
 22881  0104E6  0100               	movlb	0	; () banked
 22882  0104E8  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 22883  0104EA  0E00               	movlw	high _PortC
 22884  0104EC  0100               	movlb	0	; () banked
 22885  0104EE  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 22886  0104F0  0E02               	movlw	2
 22887  0104F2  0100               	movlb	0	; () banked
 22888  0104F4  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 22889  0104F6  0E03               	movlw	3
 22890  0104F8  0100               	movlb	0	; () banked
 22891  0104FA  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 22892  0104FC  EC5F  F093         	call	_Port_SetPinType	;wreg free
 22893                           
 22894                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 22895  010500  0EEA               	movlw	low _PortC
 22896  010502  0100               	movlb	0	; () banked
 22897  010504  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 22898  010506  0E00               	movlw	high _PortC
 22899  010508  0100               	movlb	0	; () banked
 22900  01050A  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 22901  01050C  0E03               	movlw	3
 22902  01050E  0100               	movlb	0	; () banked
 22903  010510  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 22904  010512  0E03               	movlw	3
 22905  010514  0100               	movlb	0	; () banked
 22906  010516  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 22907  010518  EC5F  F093         	call	_Port_SetPinType	;wreg free
 22908                           
 22909                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 22910  01051C  0EEA               	movlw	low _PortC
 22911  01051E  0100               	movlb	0	; () banked
 22912  010520  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 22913  010522  0E00               	movlw	high _PortC
 22914  010524  0100               	movlb	0	; () banked
 22915  010526  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 22916  010528  0E05               	movlw	5
 22917  01052A  0100               	movlb	0	; () banked
 22918  01052C  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 22919  01052E  0E03               	movlw	3
 22920  010530  0100               	movlb	0	; () banked
 22921  010532  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 22922  010534  EC5F  F093         	call	_Port_SetPinType	;wreg free
 22923                           
 22924                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 22925  010538  0EEA               	movlw	low _PortC
 22926  01053A  0100               	movlb	0	; () banked
 22927  01053C  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 22928  01053E  0E00               	movlw	high _PortC
 22929  010540  0100               	movlb	0	; () banked
 22930  010542  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 22931  010544  0E04               	movlw	4
 22932  010546  0100               	movlb	0	; () banked
 22933  010548  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 22934  01054A  0E00               	movlw	0
 22935  01054C  0100               	movlb	0	; () banked
 22936  01054E  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 22937  010550  EC5F  F093         	call	_Port_SetPinType	;wreg free
 22938                           
 22939                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 22940  010554  0100               	movlb	0	; () banked
 22941  010556  EE20 F003          	lfsr	2,3
 22942  01055A  5193               	movf	SPI_Init@pInput& (0+255),w,b
 22943  01055C  26D9               	addwf	fsr2l,f,c
 22944  01055E  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22945  010560  22DA               	addwfc	fsr2h,f,c
 22946  010562  0EC7               	movlw	199
 22947  010564  6EDE               	movwf	postinc2,c
 22948  010566  0E0F               	movlw	15
 22949  010568  6EDD               	movwf	postdec2,c
 22950                           
 22951                           ; BSR set to: 0
 22952                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 22953  01056A  0100               	movlb	0	; () banked
 22954  01056C  EE20 F006          	lfsr	2,6
 22955  010570  5193               	movf	SPI_Init@pInput& (0+255),w,b
 22956  010572  26D9               	addwf	fsr2l,f,c
 22957  010574  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22958  010576  22DA               	addwfc	fsr2h,f,c
 22959  010578  0EC6               	movlw	198
 22960  01057A  6EDE               	movwf	postinc2,c
 22961  01057C  0E0F               	movlw	15
 22962  01057E  6EDD               	movwf	postdec2,c
 22963                           
 22964                           ; BSR set to: 0
 22965                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 22966  010580  0100               	movlb	0	; () banked
 22967  010582  EE20 F009          	lfsr	2,9
 22968  010586  5193               	movf	SPI_Init@pInput& (0+255),w,b
 22969  010588  26D9               	addwf	fsr2l,f,c
 22970  01058A  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22971  01058C  22DA               	addwfc	fsr2h,f,c
 22972  01058E  0EC9               	movlw	201
 22973  010590  D056               	goto	L14
 22974  010592                     
 22975                           ; BSR set to: 0
 22976                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 22977                           
 22978                           ; BSR set to: 0
 22979  010592  0EE0               	movlw	low _PortD
 22980  010594  0100               	movlb	0	; () banked
 22981  010596  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 22982  010598  0E00               	movlw	high _PortD
 22983  01059A  0100               	movlb	0	; () banked
 22984  01059C  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 22985  01059E  0E07               	movlw	7
 22986  0105A0  0100               	movlb	0	; () banked
 22987  0105A2  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 22988  0105A4  0E03               	movlw	3
 22989  0105A6  0100               	movlb	0	; () banked
 22990  0105A8  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 22991  0105AA  EC5F  F093         	call	_Port_SetPinType	;wreg free
 22992                           
 22993                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 22994  0105AE  0EE0               	movlw	low _PortD
 22995  0105B0  0100               	movlb	0	; () banked
 22996  0105B2  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 22997  0105B4  0E00               	movlw	high _PortD
 22998  0105B6  0100               	movlb	0	; () banked
 22999  0105B8  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 23000  0105BA  0E06               	movlw	6
 23001  0105BC  0100               	movlb	0	; () banked
 23002  0105BE  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 23003  0105C0  0E03               	movlw	3
 23004  0105C2  0100               	movlb	0	; () banked
 23005  0105C4  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 23006  0105C6  EC5F  F093         	call	_Port_SetPinType	;wreg free
 23007                           
 23008                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 23009  0105CA  0EE0               	movlw	low _PortD
 23010  0105CC  0100               	movlb	0	; () banked
 23011  0105CE  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 23012  0105D0  0E00               	movlw	high _PortD
 23013  0105D2  0100               	movlb	0	; () banked
 23014  0105D4  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 23015  0105D6  0E04               	movlw	4
 23016  0105D8  0100               	movlb	0	; () banked
 23017  0105DA  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 23018  0105DC  0E03               	movlw	3
 23019  0105DE  0100               	movlb	0	; () banked
 23020  0105E0  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 23021  0105E2  EC5F  F093         	call	_Port_SetPinType	;wreg free
 23022                           
 23023                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 23024  0105E6  0EE0               	movlw	low _PortD
 23025  0105E8  0100               	movlb	0	; () banked
 23026  0105EA  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 23027  0105EC  0E00               	movlw	high _PortD
 23028  0105EE  0100               	movlb	0	; () banked
 23029  0105F0  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 23030  0105F2  0E05               	movlw	5
 23031  0105F4  0100               	movlb	0	; () banked
 23032  0105F6  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 23033  0105F8  0E00               	movlw	0
 23034  0105FA  0100               	movlb	0	; () banked
 23035  0105FC  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 23036  0105FE  EC5F  F093         	call	_Port_SetPinType	;wreg free
 23037                           
 23038                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 23039  010602  0100               	movlb	0	; () banked
 23040  010604  EE20 F003          	lfsr	2,3
 23041  010608  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23042  01060A  26D9               	addwf	fsr2l,f,c
 23043  01060C  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23044  01060E  22DA               	addwfc	fsr2h,f,c
 23045  010610  0E6D               	movlw	109
 23046  010612  6EDE               	movwf	postinc2,c
 23047  010614  0E0F               	movlw	15
 23048  010616  6EDD               	movwf	postdec2,c
 23049                           
 23050                           ; BSR set to: 0
 23051                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 23052  010618  0100               	movlb	0	; () banked
 23053  01061A  EE20 F006          	lfsr	2,6
 23054  01061E  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23055  010620  26D9               	addwf	fsr2l,f,c
 23056  010622  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23057  010624  22DA               	addwfc	fsr2h,f,c
 23058  010626  0E6C               	movlw	108
 23059  010628  6EDE               	movwf	postinc2,c
 23060  01062A  0E0F               	movlw	15
 23061  01062C  6EDD               	movwf	postdec2,c
 23062                           
 23063                           ; BSR set to: 0
 23064                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 23065  01062E  0100               	movlb	0	; () banked
 23066  010630  EE20 F009          	lfsr	2,9
 23067  010634  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23068  010636  26D9               	addwf	fsr2l,f,c
 23069  010638  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23070  01063A  22DA               	addwfc	fsr2h,f,c
 23071  01063C  0E6F               	movlw	111
 23072  01063E                     L14:
 23073  01063E  6EDE               	movwf	postinc2,c
 23074  010640  0E0F               	movlw	15
 23075  010642  6EDD               	movwf	postdec2,c
 23076                           
 23077                           ;SPI.c: 68: break;
 23078  010644  D009               	goto	l603
 23079  010646                     l601:
 23080                           
 23081                           ; BSR set to: 0
 23082                           
 23083                           ; BSR set to: 0
 23084  010646  0100               	movlb	0	; () banked
 23085  010648  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 23086                           
 23087                           ; Switch size 1, requested type "space"
 23088                           ; Number of cases is 2, Range of values is 0 to 1
 23089                           ; switch strategies available:
 23090                           ; Name         Instructions Cycles
 23091                           ; simple_byte            7     4 (average)
 23092                           ;	Chosen strategy is simple_byte
 23093  01064A  0A00               	xorlw	0	; case 0
 23094  01064C  B4D8               	btfsc	status,2,c
 23095  01064E  D74A               	goto	l602
 23096  010650  0A01               	xorlw	1	; case 1
 23097  010652  A4D8               	btfss	status,2,c
 23098  010654  0012               	return	
 23099  010656  D79D               	goto	l604
 23100  010658                     l603:
 23101                           
 23102                           ; BSR set to: 0
 23103                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 23104                           
 23105                           ; BSR set to: 0
 23106  010658  0100               	movlb	0	; () banked
 23107  01065A  EE20 F006          	lfsr	2,6
 23108  01065E  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23109  010660  26D9               	addwf	fsr2l,f,c
 23110  010662  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23111  010664  22DA               	addwfc	fsr2h,f,c
 23112  010666  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23113  01066A  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23114  01066E  0E05               	movlw	5
 23115  010670  0100               	movlb	0	; () banked
 23116  010672  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23117  010674  0E00               	movlw	0
 23118  010676  0100               	movlb	0	; () banked
 23119  010678  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23120  01067A  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 23121                           
 23122                           ;SPI.c: 77: switch(pMode)
 23123  01067E  D09C               	goto	l607
 23124  010680                     
 23125                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 23126  010680  0100               	movlb	0	; () banked
 23127  010682  EE20 F006          	lfsr	2,6
 23128  010686  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23129  010688  26D9               	addwf	fsr2l,f,c
 23130  01068A  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23131  01068C  22DA               	addwfc	fsr2h,f,c
 23132  01068E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23133  010692  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23134  010696  0E04               	movlw	4
 23135  010698  0100               	movlb	0	; () banked
 23136  01069A  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23137  01069C  0E00               	movlw	0
 23138  01069E  0100               	movlb	0	; () banked
 23139  0106A0  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23140  0106A2  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 23141                           
 23142                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 23143  0106A6  0100               	movlb	0	; () banked
 23144  0106A8  EE20 F003          	lfsr	2,3
 23145  0106AC  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23146  0106AE  26D9               	addwf	fsr2l,f,c
 23147  0106B0  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23148  0106B2  22DA               	addwfc	fsr2h,f,c
 23149  0106B4  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23150  0106B8  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23151  0106BC  0E06               	movlw	6
 23152  0106BE  0100               	movlb	0	; () banked
 23153  0106C0  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23154  0106C2  0E00               	movlw	0
 23155  0106C4  0100               	movlb	0	; () banked
 23156  0106C6  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23157  0106C8  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 23158                           
 23159                           ;SPI.c: 82: break;
 23160  0106CC  D084               	goto	l609
 23161  0106CE                     
 23162                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 23163  0106CE  0100               	movlb	0	; () banked
 23164  0106D0  EE20 F006          	lfsr	2,6
 23165  0106D4  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23166  0106D6  26D9               	addwf	fsr2l,f,c
 23167  0106D8  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23168  0106DA  22DA               	addwfc	fsr2h,f,c
 23169  0106DC  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23170  0106E0  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23171  0106E4  0E04               	movlw	4
 23172  0106E6  0100               	movlb	0	; () banked
 23173  0106E8  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23174  0106EA  0E00               	movlw	0
 23175  0106EC  0100               	movlb	0	; () banked
 23176  0106EE  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23177  0106F0  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 23178                           
 23179                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 23180  0106F4  0100               	movlb	0	; () banked
 23181  0106F6  EE20 F003          	lfsr	2,3
 23182  0106FA  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23183  0106FC  26D9               	addwf	fsr2l,f,c
 23184  0106FE  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23185  010700  22DA               	addwfc	fsr2h,f,c
 23186  010702  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23187  010706  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23188  01070A  0E06               	movlw	6
 23189  01070C  0100               	movlb	0	; () banked
 23190  01070E  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23191  010710  0E01               	movlw	1
 23192  010712  0100               	movlb	0	; () banked
 23193  010714  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23194  010716  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 23195                           
 23196                           ;SPI.c: 86: break;
 23197  01071A  D05D               	goto	l609
 23198  01071C                     
 23199                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 23200  01071C  0100               	movlb	0	; () banked
 23201  01071E  EE20 F006          	lfsr	2,6
 23202  010722  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23203  010724  26D9               	addwf	fsr2l,f,c
 23204  010726  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23205  010728  22DA               	addwfc	fsr2h,f,c
 23206  01072A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23207  01072E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23208  010732  0E04               	movlw	4
 23209  010734  0100               	movlb	0	; () banked
 23210  010736  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23211  010738  0E01               	movlw	1
 23212  01073A  0100               	movlb	0	; () banked
 23213  01073C  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23214  01073E  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 23215                           
 23216                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 23217  010742  0100               	movlb	0	; () banked
 23218  010744  EE20 F003          	lfsr	2,3
 23219  010748  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23220  01074A  26D9               	addwf	fsr2l,f,c
 23221  01074C  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23222  01074E  22DA               	addwfc	fsr2h,f,c
 23223  010750  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23224  010754  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23225  010758  0E06               	movlw	6
 23226  01075A  0100               	movlb	0	; () banked
 23227  01075C  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23228  01075E  0E00               	movlw	0
 23229  010760  0100               	movlb	0	; () banked
 23230  010762  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23231  010764  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 23232                           
 23233                           ;SPI.c: 90: break;
 23234  010768  D036               	goto	l609
 23235  01076A                     
 23236                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 23237  01076A  0100               	movlb	0	; () banked
 23238  01076C  EE20 F006          	lfsr	2,6
 23239  010770  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23240  010772  26D9               	addwf	fsr2l,f,c
 23241  010774  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23242  010776  22DA               	addwfc	fsr2h,f,c
 23243  010778  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23244  01077C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23245  010780  0E04               	movlw	4
 23246  010782  0100               	movlb	0	; () banked
 23247  010784  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23248  010786  0E01               	movlw	1
 23249  010788  0100               	movlb	0	; () banked
 23250  01078A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23251  01078C  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 23252                           
 23253                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 23254  010790  0100               	movlb	0	; () banked
 23255  010792  EE20 F003          	lfsr	2,3
 23256  010796  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23257  010798  26D9               	addwf	fsr2l,f,c
 23258  01079A  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23259  01079C  22DA               	addwfc	fsr2h,f,c
 23260  01079E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23261  0107A2  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23262  0107A6  0E06               	movlw	6
 23263  0107A8  0100               	movlb	0	; () banked
 23264  0107AA  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23265  0107AC  0E01               	movlw	1
 23266  0107AE  0100               	movlb	0	; () banked
 23267  0107B0  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23268  0107B2  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 23269                           
 23270                           ;SPI.c: 94: break;
 23271  0107B6  D00F               	goto	l609
 23272  0107B8                     l607:
 23273  0107B8  0100               	movlb	0	; () banked
 23274  0107BA  5192               	movf	SPI_Init@pMode& (0+255),w,b
 23275                           
 23276                           ; Switch size 1, requested type "space"
 23277                           ; Number of cases is 4, Range of values is 0 to 3
 23278                           ; switch strategies available:
 23279                           ; Name         Instructions Cycles
 23280                           ; simple_byte           13     7 (average)
 23281                           ;	Chosen strategy is simple_byte
 23282  0107BC  0A00               	xorlw	0	; case 0
 23283  0107BE  B4D8               	btfsc	status,2,c
 23284  0107C0  D75F               	goto	l608
 23285  0107C2  0A01               	xorlw	1	; case 1
 23286  0107C4  B4D8               	btfsc	status,2,c
 23287  0107C6  D783               	goto	l610
 23288  0107C8  0A03               	xorlw	3	; case 2
 23289  0107CA  B4D8               	btfsc	status,2,c
 23290  0107CC  D7A7               	goto	l611
 23291  0107CE  0A01               	xorlw	1	; case 3
 23292  0107D0  A4D8               	btfss	status,2,c
 23293  0107D2  0012               	return	
 23294  0107D4  D7CA               	goto	l612
 23295  0107D6                     l609:
 23296                           
 23297                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 23298                           
 23299                           ; BSR set to: 0
 23300  0107D6  0100               	movlb	0	; () banked
 23301  0107D8  EE20 F006          	lfsr	2,6
 23302  0107DC  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23303  0107DE  26D9               	addwf	fsr2l,f,c
 23304  0107E0  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23305  0107E2  22DA               	addwfc	fsr2h,f,c
 23306  0107E4  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23307  0107E8  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23308  0107EC  0E07               	movlw	7
 23309  0107EE  0100               	movlb	0	; () banked
 23310  0107F0  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23311  0107F2  0E00               	movlw	0
 23312  0107F4  0100               	movlb	0	; () banked
 23313  0107F6  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23314  0107F8  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 23315                           
 23316                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 23317  0107FC  0100               	movlb	0	; () banked
 23318  0107FE  EE20 F006          	lfsr	2,6
 23319  010802  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23320  010804  26D9               	addwf	fsr2l,f,c
 23321  010806  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23322  010808  22DA               	addwfc	fsr2h,f,c
 23323  01080A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23324  01080E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23325  010812  0E06               	movlw	6
 23326  010814  0100               	movlb	0	; () banked
 23327  010816  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23328  010818  0E00               	movlw	0
 23329  01081A  0100               	movlb	0	; () banked
 23330  01081C  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23331  01081E  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 23332                           
 23333                           ;SPI.c: 106: Timer2_Init(pClock);
 23334  010822  C08D  F06D         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 23335  010826  C08E  F06E         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 23336  01082A  C08F  F06F         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 23337  01082E  C090  F070         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 23338  010832  EC76  F099         	call	_Timer2_Init	;wreg free
 23339                           
 23340                           ;SPI.c: 112: SPI_DisableISR(pInput);
 23341  010836  C093  F060         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 23342  01083A  C094  F061         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 23343  01083E  ECA1  F0B0         	call	_SPI_DisableISR	;wreg free
 23344                           
 23345                           ;SPI.c: 116: switch (pChannel)
 23346  010842  D004               	goto	l614
 23347  010844                     l615:
 23348                           
 23349                           ; BSR set to: 0
 23350  010844  869F               	bsf	3999,3,c	;volatile
 23351  010846  D00B               	goto	l616
 23352  010848                     l617:
 23353                           
 23354                           ; BSR set to: 0
 23355  010848  8EA5               	bsf	4005,7,c	;volatile
 23356  01084A  D009               	goto	l616
 23357  01084C                     l614:
 23358                           
 23359                           ; BSR set to: 0
 23360  01084C  0100               	movlb	0	; () banked
 23361  01084E  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 23362                           
 23363                           ; Switch size 1, requested type "space"
 23364                           ; Number of cases is 2, Range of values is 0 to 1
 23365                           ; switch strategies available:
 23366                           ; Name         Instructions Cycles
 23367                           ; simple_byte            7     4 (average)
 23368                           ;	Chosen strategy is simple_byte
 23369  010850  0A00               	xorlw	0	; case 0
 23370  010852  B4D8               	btfsc	status,2,c
 23371  010854  D7F7               	goto	l615
 23372  010856  0A01               	xorlw	1	; case 1
 23373  010858  A4D8               	btfss	status,2,c
 23374  01085A  0012               	return	
 23375  01085C  D7F5               	goto	l617
 23376  01085E                     l616:
 23377                           
 23378                           ; BSR set to: 0
 23379                           ;SPI.c: 124: SPI_DCS(pInput);
 23380                           
 23381                           ; BSR set to: 0
 23382  01085E  C093  F060         	movff	SPI_Init@pInput,SPI_DCS@pInput
 23383  010862  C094  F061         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 23384  010866  EC04  F0B0         	call	_SPI_DCS	;wreg free
 23385                           
 23386                           ;SPI.c: 126: pInput->mBusy = 0;
 23387  01086A  C093  FFD9         	movff	SPI_Init@pInput,fsr2l
 23388  01086E  C094  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 23389  010872  0E00               	movlw	0
 23390  010874  6EDF               	movwf	indf2,c
 23391                           
 23392                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 23393  010876  0100               	movlb	0	; () banked
 23394  010878  EE20 F006          	lfsr	2,6
 23395  01087C  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23396  01087E  26D9               	addwf	fsr2l,f,c
 23397  010880  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23398  010882  22DA               	addwfc	fsr2h,f,c
 23399  010884  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 23400  010888  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 23401  01088C  0E00               	movlw	0
 23402  01088E  0100               	movlb	0	; () banked
 23403  010890  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 23404  010892  0E03               	movlw	3
 23405  010894  0100               	movlb	0	; () banked
 23406  010896  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 23407  010898  ECEA  F0B0         	call	_Byte_SetQuad	;wreg free
 23408                           
 23409                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 23410  01089C  0100               	movlb	0	; () banked
 23411  01089E  EE20 F006          	lfsr	2,6
 23412  0108A2  5193               	movf	SPI_Init@pInput& (0+255),w,b
 23413  0108A4  26D9               	addwf	fsr2l,f,c
 23414  0108A6  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 23415  0108A8  22DA               	addwfc	fsr2h,f,c
 23416  0108AA  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 23417  0108AE  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 23418  0108B2  0E05               	movlw	5
 23419  0108B4  0100               	movlb	0	; () banked
 23420  0108B6  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 23421  0108B8  0E01               	movlw	1
 23422  0108BA  0100               	movlb	0	; () banked
 23423  0108BC  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 23424  0108BE  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 23425  0108C2  0012               	return		;funcret
 23426  0108C4                     __end_of_SPI_Init:
 23427                           	opt stack 0
 23428                           tosu	equ	0xFFF
 23429                           tosh	equ	0xFFE
 23430                           tosl	equ	0xFFD
 23431                           pclath	equ	0xFFA
 23432                           tblptru	equ	0xFF8
 23433                           tblptrh	equ	0xFF7
 23434                           tblptrl	equ	0xFF6
 23435                           tablat	equ	0xFF5
 23436                           prodh	equ	0xFF4
 23437                           prodl	equ	0xFF3
 23438                           intcon	equ	0xFF2
 23439                           postinc0	equ	0xFEE
 23440                           wreg	equ	0xFE8
 23441                           indf1	equ	0xFE7
 23442                           postdec1	equ	0xFE5
 23443                           fsr1h	equ	0xFE2
 23444                           fsr1l	equ	0xFE1
 23445                           indf2	equ	0xFDF
 23446                           postinc2	equ	0xFDE
 23447                           postdec2	equ	0xFDD
 23448                           plusw2	equ	0xFDB
 23449                           fsr2h	equ	0xFDA
 23450                           fsr2l	equ	0xFD9
 23451                           status	equ	0xFD8
 23452                           
 23453 ;; *************** function _Timer2_Init *****************
 23454 ;; Defined at:
 23455 ;;		line 10 in file "Library/Timer2.c"
 23456 ;; Parameters:    Size  Location     Type
 23457 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 23458 ;; Auto vars:     Size  Location     Type
 23459 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 23460 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 23461 ;;  RDIV            4   18[BANK0 ] unsigned long 
 23462 ;; Return value:  Size  Location     Type
 23463 ;;                  1    wreg      void 
 23464 ;; Registers used:
 23465 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23466 ;; Tracked objects:
 23467 ;;		On entry : 0/0
 23468 ;;		On exit  : 0/0
 23469 ;;		Unchanged: 0/0
 23470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23471 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23472 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23473 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23474 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23475 ;;Total ram usage:       17 bytes
 23476 ;; Hardware stack levels used:    1
 23477 ;; Hardware stack levels required when called:    8
 23478 ;; This function calls:
 23479 ;;		_Timer2_Clear
 23480 ;;		___lldiv
 23481 ;; This function is called by:
 23482 ;;		_SPI_Init
 23483 ;; This function uses a non-reentrant model
 23484 ;;
 23485                           
 23486                           	psect	text115
 23487  0132EC                     __ptext115:
 23488                           	opt stack 0
 23489  0132EC                     _Timer2_Init:
 23490                           	opt stack 18
 23491                           
 23492                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 23493                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 23494                           ;Timer2.c: 14: static UINT8 PRE = 0;
 23495                           ;Timer2.c: 15: static UINT32 DIV = 0;
 23496                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 23497                           
 23498                           ;incstack = 0
 23499  0132EC  0E00               	movlw	0
 23500  0132EE  0100               	movlb	0	; () banked
 23501  0132F0  6F76               	movwf	Timer2_Init@pCPUClock& (0+255),b
 23502  0132F2  0E6C               	movlw	108
 23503  0132F4  6F77               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 23504  0132F6  0EDC               	movlw	220
 23505  0132F8  6F78               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 23506  0132FA  0E02               	movlw	2
 23507  0132FC  6F79               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 23508                           
 23509                           ; BSR set to: 0
 23510                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 23511                           ;Timer2.c: 20: pFrequency *= 2;
 23512  0132FE  0100               	movlb	0	; () banked
 23513  013300  90D8               	bcf	status,0,c
 23514  013302  376D               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 23515  013304  376E               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 23516  013306  376F               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 23517  013308  3770               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 23518                           
 23519                           ; BSR set to: 0
 23520                           ;Timer2.c: 23: pCPUClock /= 4;
 23521  01330A  0E02               	movlw	2
 23522  01330C  0100               	movlb	0	; () banked
 23523  01330E  6F71               	movwf	??_Timer2_Init& (0+255),b
 23524  013310                     u9215:
 23525  013310  90D8               	bcf	status,0,c
 23526  013312  0100               	movlb	0	; () banked
 23527  013314  3379               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 23528  013316  3378               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 23529  013318  3377               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 23530  01331A  3376               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 23531  01331C  0100               	movlb	0	; () banked
 23532  01331E  2F71               	decfsz	??_Timer2_Init& (0+255),f,b
 23533  013320  D7F7               	goto	u9215
 23534                           
 23535                           ; BSR set to: 0
 23536                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 23537  013322  C076  F060         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 23538  013326  C077  F061         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 23539  01332A  C078  F062         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 23540  01332E  C079  F063         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 23541  013332  C06D  F064         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 23542  013336  C06E  F065         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 23543  01333A  C06F  F066         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 23544  01333E  C070  F067         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 23545  013342  EC0B  F0A0         	call	___lldiv	;wreg free
 23546  013346  C060  F07A         	movff	?___lldiv,Timer2_Init@DIVIDE
 23547  01334A  C061  F07B         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 23548  01334E  C062  F07C         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 23549  013352  C063  F07D         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 23550                           
 23551                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 23552  013356  D010               	goto	l1828
 23553  013358                     l12499:
 23554                           
 23555                           ;Timer2.c: 28: {
 23556                           ;Timer2.c: 29: RDIV = 0;
 23557  013358  0E00               	movlw	0
 23558  01335A  0100               	movlb	0	; () banked
 23559  01335C  6F72               	movwf	Timer2_Init@RDIV& (0+255),b
 23560  01335E  0E00               	movlw	0
 23561  013360  6F73               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 23562  013362  0E00               	movlw	0
 23563  013364  6F74               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 23564  013366  0E00               	movlw	0
 23565  013368  6F75               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 23566                           
 23567                           ; BSR set to: 0
 23568                           ;Timer2.c: 30: INDEX ++;
 23569  01336A  0100               	movlb	0	; () banked
 23570  01336C  2BDA               	incf	Timer2_Init@INDEX& (0+255),f,b
 23571                           
 23572                           ; BSR set to: 0
 23573                           ;Timer2.c: 31: if (INDEX >= 3)
 23574  01336E  0E02               	movlw	2
 23575  013370  0100               	movlb	0	; () banked
 23576  013372  65DA               	cpfsgt	Timer2_Init@INDEX& (0+255),b
 23577  013374  D001               	goto	l1828
 23578  013376  D026               	goto	u9230
 23579  013378                     l1828:
 23580                           
 23581                           ; BSR set to: 0
 23582                           
 23583                           ; BSR set to: 0
 23584  013378  C07A  F060         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 23585  01337C  C07B  F061         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 23586  013380  C07C  F062         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 23587  013384  C07D  F063         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 23588  013388  0100               	movlb	0	; () banked
 23589  01338A  51DA               	movf	Timer2_Init@INDEX& (0+255),w,b
 23590  01338C  0D01               	mullw	1
 23591  01338E  0EAC               	movlw	low Timer2_Init@PRESCALE
 23592  013390  24F3               	addwf	prodl,w,c
 23593  013392  6EF6               	movwf	tblptrl,c
 23594  013394  0EFD               	movlw	high Timer2_Init@PRESCALE
 23595  013396  20F4               	addwfc	prodh,w,c
 23596  013398  6EF7               	movwf	tblptrh,c
 23597  01339A                     	if	1	;There are 3 active tblptr bytes
 23598  01339A  6AF8               	clrf	tblptru,c
 23599  01339C  0E00               	movlw	low (__mediumconst shr (0+16))
 23600  01339E  22F8               	addwfc	tblptru,f,c
 23601  0133A0                     	endif
 23602  0133A0  0008               	tblrd		*
 23603  0133A2  50F5               	movf	tablat,w,c
 23604  0133A4  0100               	movlb	0	; () banked
 23605  0133A6  6F64               	movwf	___lldiv@divisor& (0+255),b
 23606  0133A8  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 23607  0133AA  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 23608  0133AC  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 23609  0133AE  EC0B  F0A0         	call	___lldiv	;wreg free
 23610  0133B2  0100               	movlb	0	; () banked
 23611  0133B4  5163               	movf	(?___lldiv+3)& (0+255),w,b
 23612  0133B6  0100               	movlb	0	; () banked
 23613  0133B8  1162               	iorwf	(?___lldiv+2)& (0+255),w,b
 23614  0133BA  E1CE               	bnz	l12499
 23615  0133BC  0100               	movlb	0	; () banked
 23616  0133BE  0561               	decf	(?___lldiv+1)& (0+255),w,b
 23617  0133C0  B0D8               	btfsc	status,0,c
 23618  0133C2  D7CA               	goto	l1827
 23619  0133C4                     u9230:
 23620                           
 23621                           ; BSR set to: 0
 23622                           ;Timer2.c: 33: }
 23623                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 23624                           
 23625                           ; BSR set to: 0
 23626  0133C4  50CA               	movf	4042,w,c	;volatile
 23627  0133C6  0100               	movlb	0	; () banked
 23628  0133C8  19DA               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 23629  0133CA  0BFC               	andlw	-4
 23630  0133CC  19DA               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 23631  0133CE  6ECA               	movwf	4042,c	;volatile
 23632                           
 23633                           ; BSR set to: 0
 23634                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 23635  0133D0  84CA               	bsf	4042,2,c	;volatile
 23636                           
 23637                           ; BSR set to: 0
 23638                           ;Timer2.c: 44: Timer2_Clear();
 23639  0133D2  EC9E  F0B2         	call	_Timer2_Clear	;wreg free
 23640                           
 23641                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 23642  0133D6  0100               	movlb	0	; () banked
 23643  0133D8  51DA               	movf	Timer2_Init@INDEX& (0+255),w,b
 23644  0133DA  0D01               	mullw	1
 23645  0133DC  0EAC               	movlw	low Timer2_Init@PRESCALE
 23646  0133DE  24F3               	addwf	prodl,w,c
 23647  0133E0  6EF6               	movwf	tblptrl,c
 23648  0133E2  0EFD               	movlw	high Timer2_Init@PRESCALE
 23649  0133E4  20F4               	addwfc	prodh,w,c
 23650  0133E6  6EF7               	movwf	tblptrh,c
 23651  0133E8                     	if	1	;There are 3 active tblptr bytes
 23652  0133E8  6AF8               	clrf	tblptru,c
 23653  0133EA  0E00               	movlw	low (__mediumconst shr (0+16))
 23654  0133EC  22F8               	addwfc	tblptru,f,c
 23655  0133EE                     	endif
 23656  0133EE  0008               	tblrd		*
 23657  0133F0  CFF5 F0D9          	movff	tablat,Timer2_Init@PRE
 23658                           
 23659                           ; BSR set to: 0
 23660                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 23661  0133F4  0EFF               	movlw	255
 23662  0133F6  0100               	movlb	0	; () banked
 23663  0133F8  257A               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 23664  0133FA  0103               	movlb	3	; () banked
 23665  0133FC  6F0C               	movwf	Timer2_Init@DIV& (0+255),b
 23666  0133FE  0EFF               	movlw	255
 23667  013400  0100               	movlb	0	; () banked
 23668  013402  217B               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 23669  013404  0103               	movlb	3	; () banked
 23670  013406  6F0D               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 23671  013408  0EFF               	movlw	255
 23672  01340A  0100               	movlb	0	; () banked
 23673  01340C  217C               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 23674  01340E  0103               	movlb	3	; () banked
 23675  013410  6F0E               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 23676  013412  0EFF               	movlw	255
 23677  013414  0100               	movlb	0	; () banked
 23678  013416  217D               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 23679  013418  0103               	movlb	3	; () banked
 23680  01341A  6F0F               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 23681                           
 23682                           ; BSR set to: 3
 23683                           ;Timer2.c: 48: INDEX = DIV/PRE;
 23684  01341C  C30C  F060         	movff	Timer2_Init@DIV,___lldiv@dividend
 23685  013420  C30D  F061         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 23686  013424  C30E  F062         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 23687  013428  C30F  F063         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 23688  01342C  0100               	movlb	0	; () banked
 23689  01342E  51D9               	movf	Timer2_Init@PRE& (0+255),w,b
 23690  013430  0100               	movlb	0	; () banked
 23691  013432  6F64               	movwf	___lldiv@divisor& (0+255),b
 23692  013434  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 23693  013436  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 23694  013438  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 23695  01343A  EC0B  F0A0         	call	___lldiv	;wreg free
 23696  01343E  0100               	movlb	0	; () banked
 23697  013440  5160               	movf	?___lldiv& (0+255),w,b
 23698  013442  0100               	movlb	0	; () banked
 23699  013444  6FDA               	movwf	Timer2_Init@INDEX& (0+255),b
 23700                           
 23701                           ; BSR set to: 0
 23702                           ;Timer2.c: 49: PR2 = INDEX;
 23703  013446  C0DA  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 23704                           
 23705                           ; BSR set to: 0
 23706  01344A  0012               	return		;funcret
 23707  01344C                     __end_of_Timer2_Init:
 23708                           	opt stack 0
 23709                           tosu	equ	0xFFF
 23710                           tosh	equ	0xFFE
 23711                           tosl	equ	0xFFD
 23712                           pclath	equ	0xFFA
 23713                           tblptru	equ	0xFF8
 23714                           tblptrh	equ	0xFF7
 23715                           tblptrl	equ	0xFF6
 23716                           tablat	equ	0xFF5
 23717                           prodh	equ	0xFF4
 23718                           prodl	equ	0xFF3
 23719                           intcon	equ	0xFF2
 23720                           postinc0	equ	0xFEE
 23721                           wreg	equ	0xFE8
 23722                           indf1	equ	0xFE7
 23723                           postdec1	equ	0xFE5
 23724                           fsr1h	equ	0xFE2
 23725                           fsr1l	equ	0xFE1
 23726                           indf2	equ	0xFDF
 23727                           postinc2	equ	0xFDE
 23728                           postdec2	equ	0xFDD
 23729                           plusw2	equ	0xFDB
 23730                           fsr2h	equ	0xFDA
 23731                           fsr2l	equ	0xFD9
 23732                           status	equ	0xFD8
 23733                           
 23734 ;; *************** function ___lldiv *****************
 23735 ;; Defined at:
 23736 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
 23737 ;; Parameters:    Size  Location     Type
 23738 ;;  dividend        4    0[BANK0 ] unsigned long 
 23739 ;;  divisor         4    4[BANK0 ] unsigned long 
 23740 ;; Auto vars:     Size  Location     Type
 23741 ;;  quotient        4    8[BANK0 ] unsigned long 
 23742 ;;  counter         1   12[BANK0 ] unsigned char 
 23743 ;; Return value:  Size  Location     Type
 23744 ;;                  4    0[BANK0 ] unsigned long 
 23745 ;; Registers used:
 23746 ;;		wreg, status,2, status,0
 23747 ;; Tracked objects:
 23748 ;;		On entry : 0/0
 23749 ;;		On exit  : 0/0
 23750 ;;		Unchanged: 0/0
 23751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23752 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23753 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23755 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23756 ;;Total ram usage:       13 bytes
 23757 ;; Hardware stack levels used:    1
 23758 ;; Hardware stack levels required when called:    7
 23759 ;; This function calls:
 23760 ;;		Nothing
 23761 ;; This function is called by:
 23762 ;;		_Timer0_Init
 23763 ;;		_Timer2_Init
 23764 ;;		_rand_between
 23765 ;;		_I2C_Init
 23766 ;; This function uses a non-reentrant model
 23767 ;;
 23768                           
 23769                           	psect	text116
 23770  014016                     __ptext116:
 23771                           	opt stack 0
 23772  014016                     ___lldiv:
 23773                           	opt stack 20
 23774                           
 23775                           ; BSR set to: 0
 23776                           ;incstack = 0
 23777  014016  0E00               	movlw	0
 23778  014018  0100               	movlb	0	; () banked
 23779  01401A  6F68               	movwf	___lldiv@quotient& (0+255),b
 23780  01401C  0E00               	movlw	0
 23781  01401E  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
 23782  014020  0E00               	movlw	0
 23783  014022  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
 23784  014024  0E00               	movlw	0
 23785  014026  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
 23786                           
 23787                           ; BSR set to: 0
 23788  014028  0100               	movlb	0	; () banked
 23789  01402A  5164               	movf	___lldiv@divisor& (0+255),w,b
 23790  01402C  0100               	movlb	0	; () banked
 23791  01402E  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 23792  014030  0100               	movlb	0	; () banked
 23793  014032  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 23794  014034  0100               	movlb	0	; () banked
 23795  014036  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 23796  014038  B4D8               	btfsc	status,2,c
 23797  01403A  D042               	goto	l2785
 23798                           
 23799                           ; BSR set to: 0
 23800  01403C  0E01               	movlw	1
 23801  01403E  0100               	movlb	0	; () banked
 23802  014040  6F6C               	movwf	___lldiv@counter& (0+255),b
 23803  014042  D008               	goto	l2780
 23804  014044                     
 23805                           ; BSR set to: 0
 23806                           
 23807                           ; BSR set to: 0
 23808  014044  0100               	movlb	0	; () banked
 23809  014046  90D8               	bcf	status,0,c
 23810  014048  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 23811  01404A  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 23812  01404C  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 23813  01404E  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 23814  014050  0100               	movlb	0	; () banked
 23815  014052  2B6C               	incf	___lldiv@counter& (0+255),f,b
 23816  014054                     l2780:
 23817                           
 23818                           ; BSR set to: 0
 23819                           
 23820                           ; BSR set to: 0
 23821  014054  0100               	movlb	0	; () banked
 23822  014056  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 23823  014058  D7F5               	goto	l2781
 23824  01405A                     u9080:
 23825                           
 23826                           ; BSR set to: 0
 23827                           
 23828                           ; BSR set to: 0
 23829                           
 23830                           ; BSR set to: 0
 23831  01405A  0100               	movlb	0	; () banked
 23832  01405C  90D8               	bcf	status,0,c
 23833  01405E  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 23834  014060  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 23835  014062  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 23836  014064  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 23837                           
 23838                           ; BSR set to: 0
 23839  014066  0100               	movlb	0	; () banked
 23840  014068  5164               	movf	___lldiv@divisor& (0+255),w,b
 23841  01406A  0100               	movlb	0	; () banked
 23842  01406C  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 23843  01406E  0100               	movlb	0	; () banked
 23844  014070  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 23845  014072  0100               	movlb	0	; () banked
 23846  014074  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 23847  014076  0100               	movlb	0	; () banked
 23848  014078  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 23849  01407A  0100               	movlb	0	; () banked
 23850  01407C  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 23851  01407E  0100               	movlb	0	; () banked
 23852  014080  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 23853  014082  0100               	movlb	0	; () banked
 23854  014084  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 23855  014086  A0D8               	btfss	status,0,c
 23856  014088  D012               	goto	l2784
 23857                           
 23858                           ; BSR set to: 0
 23859  01408A  0100               	movlb	0	; () banked
 23860  01408C  5164               	movf	___lldiv@divisor& (0+255),w,b
 23861  01408E  0100               	movlb	0	; () banked
 23862  014090  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 23863  014092  0100               	movlb	0	; () banked
 23864  014094  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 23865  014096  0100               	movlb	0	; () banked
 23866  014098  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 23867  01409A  0100               	movlb	0	; () banked
 23868  01409C  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 23869  01409E  0100               	movlb	0	; () banked
 23870  0140A0  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 23871  0140A2  0100               	movlb	0	; () banked
 23872  0140A4  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 23873  0140A6  0100               	movlb	0	; () banked
 23874  0140A8  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 23875                           
 23876                           ; BSR set to: 0
 23877  0140AA  0100               	movlb	0	; () banked
 23878  0140AC  8168               	bsf	___lldiv@quotient& (0+255),0,b
 23879  0140AE                     l2784:
 23880                           
 23881                           ; BSR set to: 0
 23882                           
 23883                           ; BSR set to: 0
 23884  0140AE  0100               	movlb	0	; () banked
 23885  0140B0  90D8               	bcf	status,0,c
 23886  0140B2  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 23887  0140B4  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 23888  0140B6  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 23889  0140B8  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 23890                           
 23891                           ; BSR set to: 0
 23892  0140BA  0100               	movlb	0	; () banked
 23893  0140BC  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 23894  0140BE  D7CD               	goto	u9080
 23895  0140C0                     l2785:
 23896                           
 23897                           ; BSR set to: 0
 23898                           
 23899                           ; BSR set to: 0
 23900  0140C0  C068  F060         	movff	___lldiv@quotient,?___lldiv
 23901  0140C4  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 23902  0140C8  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 23903  0140CC  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 23904                           
 23905                           ; BSR set to: 0
 23906  0140D0  0012               	return		;funcret
 23907  0140D2                     __end_of___lldiv:
 23908                           	opt stack 0
 23909                           tosu	equ	0xFFF
 23910                           tosh	equ	0xFFE
 23911                           tosl	equ	0xFFD
 23912                           pclath	equ	0xFFA
 23913                           tblptru	equ	0xFF8
 23914                           tblptrh	equ	0xFF7
 23915                           tblptrl	equ	0xFF6
 23916                           tablat	equ	0xFF5
 23917                           prodh	equ	0xFF4
 23918                           prodl	equ	0xFF3
 23919                           intcon	equ	0xFF2
 23920                           postinc0	equ	0xFEE
 23921                           wreg	equ	0xFE8
 23922                           indf1	equ	0xFE7
 23923                           postdec1	equ	0xFE5
 23924                           fsr1h	equ	0xFE2
 23925                           fsr1l	equ	0xFE1
 23926                           indf2	equ	0xFDF
 23927                           postinc2	equ	0xFDE
 23928                           postdec2	equ	0xFDD
 23929                           plusw2	equ	0xFDB
 23930                           fsr2h	equ	0xFDA
 23931                           fsr2l	equ	0xFD9
 23932                           status	equ	0xFD8
 23933                           
 23934 ;; *************** function _Timer2_Clear *****************
 23935 ;; Defined at:
 23936 ;;		line 3 in file "Library/Timer2.c"
 23937 ;; Parameters:    Size  Location     Type
 23938 ;;		None
 23939 ;; Auto vars:     Size  Location     Type
 23940 ;;		None
 23941 ;; Return value:  Size  Location     Type
 23942 ;;                  1    wreg      void 
 23943 ;; Registers used:
 23944 ;;		None
 23945 ;; Tracked objects:
 23946 ;;		On entry : 0/0
 23947 ;;		On exit  : 0/0
 23948 ;;		Unchanged: 0/0
 23949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23953 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23954 ;;Total ram usage:        0 bytes
 23955 ;; Hardware stack levels used:    1
 23956 ;; Hardware stack levels required when called:    7
 23957 ;; This function calls:
 23958 ;;		Nothing
 23959 ;; This function is called by:
 23960 ;;		_Timer2_Init
 23961 ;; This function uses a non-reentrant model
 23962 ;;
 23963                           
 23964                           	psect	text117
 23965  01653C                     __ptext117:
 23966                           	opt stack 0
 23967  01653C                     _Timer2_Clear:
 23968                           	opt stack 18
 23969                           
 23970                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 23971                           
 23972                           ; BSR set to: 0
 23973                           ;incstack = 0
 23974  01653C  929E               	bcf	3998,1,c	;volatile
 23975                           
 23976                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 23977  01653E  929D               	bcf	3997,1,c	;volatile
 23978                           
 23979                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 23980  016540  929F               	bcf	3999,1,c	;volatile
 23981  016542  0012               	return		;funcret
 23982  016544                     __end_of_Timer2_Clear:
 23983                           	opt stack 0
 23984                           tosu	equ	0xFFF
 23985                           tosh	equ	0xFFE
 23986                           tosl	equ	0xFFD
 23987                           pclath	equ	0xFFA
 23988                           tblptru	equ	0xFF8
 23989                           tblptrh	equ	0xFF7
 23990                           tblptrl	equ	0xFF6
 23991                           tablat	equ	0xFF5
 23992                           prodh	equ	0xFF4
 23993                           prodl	equ	0xFF3
 23994                           intcon	equ	0xFF2
 23995                           postinc0	equ	0xFEE
 23996                           wreg	equ	0xFE8
 23997                           indf1	equ	0xFE7
 23998                           postdec1	equ	0xFE5
 23999                           fsr1h	equ	0xFE2
 24000                           fsr1l	equ	0xFE1
 24001                           indf2	equ	0xFDF
 24002                           postinc2	equ	0xFDE
 24003                           postdec2	equ	0xFDD
 24004                           plusw2	equ	0xFDB
 24005                           fsr2h	equ	0xFDA
 24006                           fsr2l	equ	0xFD9
 24007                           status	equ	0xFD8
 24008                           
 24009 ;; *************** function _SPI_DisableISR *****************
 24010 ;; Defined at:
 24011 ;;		line 181 in file "Library/SPI.c"
 24012 ;; Parameters:    Size  Location     Type
 24013 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 24014 ;;		 -> SPI1(11), SPI2(11), 
 24015 ;; Auto vars:     Size  Location     Type
 24016 ;;		None
 24017 ;; Return value:  Size  Location     Type
 24018 ;;                  1    wreg      void 
 24019 ;; Registers used:
 24020 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 24021 ;; Tracked objects:
 24022 ;;		On entry : 0/0
 24023 ;;		On exit  : 0/0
 24024 ;;		Unchanged: 0/0
 24025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24026 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24029 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24030 ;;Total ram usage:        2 bytes
 24031 ;; Hardware stack levels used:    1
 24032 ;; Hardware stack levels required when called:    7
 24033 ;; This function calls:
 24034 ;;		Nothing
 24035 ;; This function is called by:
 24036 ;;		_SPI_Init
 24037 ;; This function uses a non-reentrant model
 24038 ;;
 24039                           
 24040                           	psect	text118
 24041  016142                     __ptext118:
 24042                           	opt stack 0
 24043  016142                     _SPI_DisableISR:
 24044                           	opt stack 19
 24045                           
 24046                           ;SPI.c: 183: switch (pInput->mChannel)
 24047                           
 24048                           ;incstack = 0
 24049  016142  D004               	goto	l654
 24050  016144                     l655:
 24051                           
 24052                           ; BSR set to: 0
 24053  016144  969D               	bcf	3997,3,c	;volatile
 24054  016146  0012               	return	
 24055  016148                     l657:
 24056                           
 24057                           ; BSR set to: 0
 24058  016148  9EA3               	bcf	4003,7,c	;volatile
 24059                           
 24060                           ; BSR set to: 0
 24061                           ;SPI.c: 188: };
 24062                           
 24063                           ; BSR set to: 0
 24064                           
 24065                           ;SPI.c: 187: default: return;
 24066  01614A  0012               	return	
 24067  01614C                     l654:
 24068                           
 24069                           ; BSR set to: 0
 24070  01614C  0100               	movlb	0	; () banked
 24071  01614E  EE20 F002          	lfsr	2,2
 24072  016152  5160               	movf	SPI_DisableISR@pInput& (0+255),w,b
 24073  016154  26D9               	addwf	fsr2l,f,c
 24074  016156  5161               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 24075  016158  22DA               	addwfc	fsr2h,f,c
 24076  01615A  50DF               	movf	indf2,w,c
 24077                           
 24078                           ; Switch size 1, requested type "space"
 24079                           ; Number of cases is 2, Range of values is 0 to 1
 24080                           ; switch strategies available:
 24081                           ; Name         Instructions Cycles
 24082                           ; simple_byte            7     4 (average)
 24083                           ;	Chosen strategy is simple_byte
 24084  01615C  0A00               	xorlw	0	; case 0
 24085  01615E  B4D8               	btfsc	status,2,c
 24086  016160  D7F1               	goto	l655
 24087  016162  0A01               	xorlw	1	; case 1
 24088  016164  A4D8               	btfss	status,2,c
 24089  016166  0012               	return	
 24090  016168  D7EF               	goto	l657
 24091  01616A                     __end_of_SPI_DisableISR:
 24092                           	opt stack 0
 24093                           tosu	equ	0xFFF
 24094                           tosh	equ	0xFFE
 24095                           tosl	equ	0xFFD
 24096                           pclath	equ	0xFFA
 24097                           tblptru	equ	0xFF8
 24098                           tblptrh	equ	0xFF7
 24099                           tblptrl	equ	0xFF6
 24100                           tablat	equ	0xFF5
 24101                           prodh	equ	0xFF4
 24102                           prodl	equ	0xFF3
 24103                           intcon	equ	0xFF2
 24104                           postinc0	equ	0xFEE
 24105                           wreg	equ	0xFE8
 24106                           indf1	equ	0xFE7
 24107                           postdec1	equ	0xFE5
 24108                           fsr1h	equ	0xFE2
 24109                           fsr1l	equ	0xFE1
 24110                           indf2	equ	0xFDF
 24111                           postinc2	equ	0xFDE
 24112                           postdec2	equ	0xFDD
 24113                           plusw2	equ	0xFDB
 24114                           fsr2h	equ	0xFDA
 24115                           fsr2l	equ	0xFD9
 24116                           status	equ	0xFD8
 24117                           
 24118 ;; *************** function _SPI_DCS *****************
 24119 ;; Defined at:
 24120 ;;		line 219 in file "Library/SPI.c"
 24121 ;; Parameters:    Size  Location     Type
 24122 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 24123 ;;		 -> SPI1(11), SPI2(11), 
 24124 ;; Auto vars:     Size  Location     Type
 24125 ;;		None
 24126 ;; Return value:  Size  Location     Type
 24127 ;;                  1    wreg      void 
 24128 ;; Registers used:
 24129 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 24130 ;; Tracked objects:
 24131 ;;		On entry : 0/0
 24132 ;;		On exit  : 0/0
 24133 ;;		Unchanged: 0/0
 24134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24135 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24138 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24139 ;;Total ram usage:        2 bytes
 24140 ;; Hardware stack levels used:    1
 24141 ;; Hardware stack levels required when called:    7
 24142 ;; This function calls:
 24143 ;;		Nothing
 24144 ;; This function is called by:
 24145 ;;		_SPI_Init
 24146 ;; This function uses a non-reentrant model
 24147 ;;
 24148                           
 24149                           	psect	text119
 24150  016008                     __ptext119:
 24151                           	opt stack 0
 24152  016008                     _SPI_DCS:
 24153                           	opt stack 19
 24154                           
 24155                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 24156                           
 24157                           ; BSR set to: 0
 24158                           ;incstack = 0
 24159  016008  0100               	movlb	0	; () banked
 24160  01600A  EE20 F002          	lfsr	2,2
 24161  01600E  5160               	movf	SPI_DCS@pInput& (0+255),w,b
 24162  016010  26D9               	addwf	fsr2l,f,c
 24163  016012  5161               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 24164  016014  22DA               	addwfc	fsr2h,f,c
 24165  016016  50DF               	movf	indf2,w,c
 24166  016018  A4D8               	btfss	status,2,c
 24167  01601A  D007               	goto	l673
 24168                           
 24169                           ; BSR set to: 0
 24170                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 24171  01601C  C0EE  FFD9         	movff	_PortC+4,fsr2l
 24172  016020  C0EF  FFDA         	movff	_PortC+5,fsr2h
 24173  016024  0100               	movlb	0	; () banked
 24174  016026  84DF               	bsf	indf2,2,c
 24175  016028  0012               	return	
 24176  01602A                     l673:
 24177                           
 24178                           ; BSR set to: 0
 24179                           ;SPI.c: 223: else
 24180                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 24181                           
 24182                           ; BSR set to: 0
 24183  01602A  C0E4  FFD9         	movff	_PortD+4,fsr2l
 24184  01602E  C0E5  FFDA         	movff	_PortD+5,fsr2h
 24185  016032  0100               	movlb	0	; () banked
 24186  016034  8EDF               	bsf	indf2,7,c
 24187  016036  0012               	return	
 24188  016038                     __end_of_SPI_DCS:
 24189                           	opt stack 0
 24190                           tosu	equ	0xFFF
 24191                           tosh	equ	0xFFE
 24192                           tosl	equ	0xFFD
 24193                           pclath	equ	0xFFA
 24194                           tblptru	equ	0xFF8
 24195                           tblptrh	equ	0xFF7
 24196                           tblptrl	equ	0xFF6
 24197                           tablat	equ	0xFF5
 24198                           prodh	equ	0xFF4
 24199                           prodl	equ	0xFF3
 24200                           intcon	equ	0xFF2
 24201                           postinc0	equ	0xFEE
 24202                           wreg	equ	0xFE8
 24203                           indf1	equ	0xFE7
 24204                           postdec1	equ	0xFE5
 24205                           fsr1h	equ	0xFE2
 24206                           fsr1l	equ	0xFE1
 24207                           indf2	equ	0xFDF
 24208                           postinc2	equ	0xFDE
 24209                           postdec2	equ	0xFDD
 24210                           plusw2	equ	0xFDB
 24211                           fsr2h	equ	0xFDA
 24212                           fsr2l	equ	0xFD9
 24213                           status	equ	0xFD8
 24214                           
 24215 ;; *************** function _Button_Init *****************
 24216 ;; Defined at:
 24217 ;;		line 18 in file "Library/Button.c"
 24218 ;; Parameters:    Size  Location     Type
 24219 ;;  pInput          2   59[BANK0 ] const PTR struct Button
 24220 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 24221 ;;  pThreshold      2   61[BANK0 ] unsigned short 
 24222 ;;  pInitIO         3   63[BANK0 ] PTR FTN()void 
 24223 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 24224 ;;  pGetState       3   66[BANK0 ] PTR FTN()unsigned char 
 24225 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 24226 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 24227 ;;  pFunction       3   69[BANK0 ] PTR FTN(unsigned char ,)
 24228 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_NULL(1), 
 24229 ;; Auto vars:     Size  Location     Type
 24230 ;;		None
 24231 ;; Return value:  Size  Location     Type
 24232 ;;                  1    wreg      void 
 24233 ;; Registers used:
 24234 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24235 ;; Tracked objects:
 24236 ;;		On entry : 0/0
 24237 ;;		On exit  : 0/0
 24238 ;;		Unchanged: 0/0
 24239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24240 ;;      Params:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24243 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24244 ;;Total ram usage:       13 bytes
 24245 ;; Hardware stack levels used:    1
 24246 ;; Hardware stack levels required when called:   15
 24247 ;; This function calls:
 24248 ;;		_HMI_InitButtons
 24249 ;;		_MXK_InitDIPSwitch
 24250 ;;		_MXK_InitTestButton
 24251 ;; This function is called by:
 24252 ;;		_HMI_Init
 24253 ;;		_FunctInitButton
 24254 ;; This function uses a non-reentrant model
 24255 ;;
 24256                           
 24257                           	psect	text120
 24258  013C2E                     __ptext120:
 24259                           	opt stack 0
 24260  013C2E                     _Button_Init:
 24261                           	opt stack 13
 24262                           
 24263                           ;Button.c: 21: if(pInput==(void*)0)
 24264                           
 24265                           ; BSR set to: 0
 24266                           ;incstack = 0
 24267  013C2E  0100               	movlb	0	; () banked
 24268  013C30  519B               	movf	Button_Init@pInput& (0+255),w,b
 24269  013C32  0100               	movlb	0	; () banked
 24270  013C34  119C               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 24271  013C36  B4D8               	btfsc	status,2,c
 24272  013C38  0012               	return	
 24273                           
 24274                           ; BSR set to: 0
 24275                           ;Button.c: 23: if(pInitIO==(void*)0)
 24276                           
 24277                           ; BSR set to: 0
 24278                           
 24279                           ; BSR set to: 0
 24280                           ;Button.c: 22: return;
 24281  013C3A  0100               	movlb	0	; () banked
 24282  013C3C  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 24283  013C3E  0100               	movlb	0	; () banked
 24284  013C40  11A0               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 24285  013C42  0100               	movlb	0	; () banked
 24286  013C44  11A1               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 24287  013C46  B4D8               	btfsc	status,2,c
 24288  013C48  0012               	return	
 24289                           
 24290                           ; BSR set to: 0
 24291                           ;Button.c: 25: if(pGetState==(void*)0)
 24292                           
 24293                           ; BSR set to: 0
 24294                           
 24295                           ; BSR set to: 0
 24296                           ;Button.c: 24: return;
 24297  013C4A  0100               	movlb	0	; () banked
 24298  013C4C  51A2               	movf	Button_Init@pGetState& (0+255),w,b
 24299  013C4E  0100               	movlb	0	; () banked
 24300  013C50  11A3               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 24301  013C52  0100               	movlb	0	; () banked
 24302  013C54  11A4               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 24303  013C56  B4D8               	btfsc	status,2,c
 24304  013C58  0012               	return	
 24305                           
 24306                           ; BSR set to: 0
 24307                           ;Button.c: 27: if(pFunction==(void*)0)
 24308                           
 24309                           ; BSR set to: 0
 24310                           
 24311                           ; BSR set to: 0
 24312                           ;Button.c: 26: return;
 24313  013C5A  0100               	movlb	0	; () banked
 24314  013C5C  51A5               	movf	Button_Init@pFunction& (0+255),w,b
 24315  013C5E  0100               	movlb	0	; () banked
 24316  013C60  11A6               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 24317  013C62  0100               	movlb	0	; () banked
 24318  013C64  11A7               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 24319  013C66  B4D8               	btfsc	status,2,c
 24320  013C68  0012               	return	
 24321                           
 24322                           ; BSR set to: 0
 24323                           ;Button.c: 30: if(pThreshold == 0)
 24324                           
 24325                           ; BSR set to: 0
 24326                           
 24327                           ; BSR set to: 0
 24328                           ;Button.c: 28: return;
 24329  013C6A  0100               	movlb	0	; () banked
 24330  013C6C  519D               	movf	Button_Init@pThreshold& (0+255),w,b
 24331  013C6E  0100               	movlb	0	; () banked
 24332  013C70  119E               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 24333  013C72  A4D8               	btfss	status,2,c
 24334  013C74  D005               	goto	l8
 24335                           
 24336                           ; BSR set to: 0
 24337                           ;Button.c: 31: pThreshold = 1;
 24338  013C76  0E00               	movlw	0
 24339  013C78  0100               	movlb	0	; () banked
 24340  013C7A  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 24341  013C7C  0E01               	movlw	1
 24342  013C7E  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 24343  013C80                     l8:
 24344                           
 24345                           ; BSR set to: 0
 24346                           ;Button.c: 34: pInput->mState = 0;
 24347                           
 24348                           ; BSR set to: 0
 24349  013C80  C09B  FFD9         	movff	Button_Init@pInput,fsr2l
 24350  013C84  C09C  FFDA         	movff	Button_Init@pInput+1,fsr2h
 24351  013C88  0E00               	movlw	0
 24352  013C8A  6EDF               	movwf	indf2,c
 24353                           
 24354                           ; BSR set to: 0
 24355                           ;Button.c: 35: pInput->mCount = 0;
 24356  013C8C  0100               	movlb	0	; () banked
 24357  013C8E  EE20 F001          	lfsr	2,1
 24358  013C92  519B               	movf	Button_Init@pInput& (0+255),w,b
 24359  013C94  26D9               	addwf	fsr2l,f,c
 24360  013C96  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 24361  013C98  22DA               	addwfc	fsr2h,f,c
 24362  013C9A  0E00               	movlw	0
 24363  013C9C  6EDF               	movwf	indf2,c
 24364                           
 24365                           ; BSR set to: 0
 24366                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 24367  013C9E  0100               	movlb	0	; () banked
 24368  013CA0  EE20 F002          	lfsr	2,2
 24369  013CA4  519B               	movf	Button_Init@pInput& (0+255),w,b
 24370  013CA6  26D9               	addwf	fsr2l,f,c
 24371  013CA8  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 24372  013CAA  22DA               	addwfc	fsr2h,f,c
 24373  013CAC  C09D  FFDE         	movff	Button_Init@pThreshold,postinc2
 24374  013CB0  C09E  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 24375                           
 24376                           ; BSR set to: 0
 24377                           ;Button.c: 37: pInput->mFunction = pFunction;
 24378  013CB4  0100               	movlb	0	; () banked
 24379  013CB6  EE20 F004          	lfsr	2,4
 24380  013CBA  519B               	movf	Button_Init@pInput& (0+255),w,b
 24381  013CBC  26D9               	addwf	fsr2l,f,c
 24382  013CBE  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 24383  013CC0  22DA               	addwfc	fsr2h,f,c
 24384  013CC2  C0A5  FFDE         	movff	Button_Init@pFunction,postinc2
 24385  013CC6  C0A6  FFDE         	movff	Button_Init@pFunction+1,postinc2
 24386  013CCA  C0A7  FFDE         	movff	Button_Init@pFunction+2,postinc2
 24387                           
 24388                           ; BSR set to: 0
 24389                           ;Button.c: 38: pInput->mGetState = pGetState;
 24390  013CCE  0100               	movlb	0	; () banked
 24391  013CD0  EE20 F007          	lfsr	2,7
 24392  013CD4  519B               	movf	Button_Init@pInput& (0+255),w,b
 24393  013CD6  26D9               	addwf	fsr2l,f,c
 24394  013CD8  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 24395  013CDA  22DA               	addwfc	fsr2h,f,c
 24396  013CDC  C0A2  FFDE         	movff	Button_Init@pGetState,postinc2
 24397  013CE0  C0A3  FFDE         	movff	Button_Init@pGetState+1,postinc2
 24398  013CE4  C0A4  FFDE         	movff	Button_Init@pGetState+2,postinc2
 24399                           
 24400                           ; BSR set to: 0
 24401                           ;Button.c: 41: pInitIO();
 24402  013CE8  D801               	call	u9708
 24403  013CEA  0012               	return	
 24404  013CEC                     u9708:
 24405  013CEC  0005               	push	
 24406  013CEE  6EFA               	movwf	pclath,c
 24407  013CF0  0100               	movlb	0	; () banked
 24408  013CF2  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 24409  013CF4  6EFD               	movwf	tosl,c
 24410  013CF6  51A0               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 24411  013CF8  6EFE               	movwf	tosh,c
 24412  013CFA  51A1               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 24413  013CFC  6EFF               	movwf	tosu,c
 24414  013CFE  50FA               	movf	pclath,w,c
 24415  013D00  0012               	return		;indir
 24416  013D02                     __end_of_Button_Init:
 24417                           	opt stack 0
 24418                           tosu	equ	0xFFF
 24419                           tosh	equ	0xFFE
 24420                           tosl	equ	0xFFD
 24421                           pclath	equ	0xFFA
 24422                           tblptru	equ	0xFF8
 24423                           tblptrh	equ	0xFF7
 24424                           tblptrl	equ	0xFF6
 24425                           tablat	equ	0xFF5
 24426                           prodh	equ	0xFF4
 24427                           prodl	equ	0xFF3
 24428                           intcon	equ	0xFF2
 24429                           postinc0	equ	0xFEE
 24430                           wreg	equ	0xFE8
 24431                           indf1	equ	0xFE7
 24432                           postdec1	equ	0xFE5
 24433                           fsr1h	equ	0xFE2
 24434                           fsr1l	equ	0xFE1
 24435                           indf2	equ	0xFDF
 24436                           postinc2	equ	0xFDE
 24437                           postdec2	equ	0xFDD
 24438                           plusw2	equ	0xFDB
 24439                           fsr2h	equ	0xFDA
 24440                           fsr2l	equ	0xFD9
 24441                           status	equ	0xFD8
 24442                           
 24443 ;; *************** function _MXK_InitDIPSwitch *****************
 24444 ;; Defined at:
 24445 ;;		line 20 in file "Library/MXK.c"
 24446 ;; Parameters:    Size  Location     Type
 24447 ;;		None
 24448 ;; Auto vars:     Size  Location     Type
 24449 ;;		None
 24450 ;; Return value:  Size  Location     Type
 24451 ;;                  1    wreg      void 
 24452 ;; Registers used:
 24453 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24454 ;; Tracked objects:
 24455 ;;		On entry : 0/0
 24456 ;;		On exit  : 0/0
 24457 ;;		Unchanged: 0/0
 24458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24462 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24463 ;;Total ram usage:        0 bytes
 24464 ;; Hardware stack levels used:    1
 24465 ;; Hardware stack levels required when called:   14
 24466 ;; This function calls:
 24467 ;;		_Port_SetQuadType
 24468 ;; This function is called by:
 24469 ;;		_FunctInitButton
 24470 ;;		_Button_Init
 24471 ;; This function uses a non-reentrant model
 24472 ;;
 24473                           
 24474                           	psect	text121
 24475  0162AC                     __ptext121:
 24476                           	opt stack 0
 24477  0162AC                     _MXK_InitDIPSwitch:
 24478                           	opt stack 13
 24479                           
 24480                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 24481                           
 24482                           ;incstack = 0
 24483  0162AC  0EE0               	movlw	low _PortD
 24484  0162AE  0100               	movlb	0	; () banked
 24485  0162B0  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
 24486  0162B2  0E00               	movlw	high _PortD
 24487  0162B4  0100               	movlb	0	; () banked
 24488  0162B6  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 24489  0162B8  0E00               	movlw	0
 24490  0162BA  0100               	movlb	0	; () banked
 24491  0162BC  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
 24492  0162BE  0E00               	movlw	0
 24493  0162C0  0100               	movlb	0	; () banked
 24494  0162C2  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
 24495  0162C4  EC52  F08D         	call	_Port_SetQuadType	;wreg free
 24496  0162C8  0012               	return		;funcret
 24497  0162CA                     __end_of_MXK_InitDIPSwitch:
 24498                           	opt stack 0
 24499                           tosu	equ	0xFFF
 24500                           tosh	equ	0xFFE
 24501                           tosl	equ	0xFFD
 24502                           pclath	equ	0xFFA
 24503                           tblptru	equ	0xFF8
 24504                           tblptrh	equ	0xFF7
 24505                           tblptrl	equ	0xFF6
 24506                           tablat	equ	0xFF5
 24507                           prodh	equ	0xFF4
 24508                           prodl	equ	0xFF3
 24509                           intcon	equ	0xFF2
 24510                           postinc0	equ	0xFEE
 24511                           wreg	equ	0xFE8
 24512                           indf1	equ	0xFE7
 24513                           postdec1	equ	0xFE5
 24514                           fsr1h	equ	0xFE2
 24515                           fsr1l	equ	0xFE1
 24516                           indf2	equ	0xFDF
 24517                           postinc2	equ	0xFDE
 24518                           postdec2	equ	0xFDD
 24519                           plusw2	equ	0xFDB
 24520                           fsr2h	equ	0xFDA
 24521                           fsr2l	equ	0xFD9
 24522                           status	equ	0xFD8
 24523                           
 24524 ;; *************** function _HMI_InitButtons *****************
 24525 ;; Defined at:
 24526 ;;		line 21 in file "HMI.c"
 24527 ;; Parameters:    Size  Location     Type
 24528 ;;		None
 24529 ;; Auto vars:     Size  Location     Type
 24530 ;;		None
 24531 ;; Return value:  Size  Location     Type
 24532 ;;                  1    wreg      void 
 24533 ;; Registers used:
 24534 ;;		wreg, status,2
 24535 ;; Tracked objects:
 24536 ;;		On entry : 0/0
 24537 ;;		On exit  : 0/0
 24538 ;;		Unchanged: 0/0
 24539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24543 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24544 ;;Total ram usage:        0 bytes
 24545 ;; Hardware stack levels used:    1
 24546 ;; Hardware stack levels required when called:    7
 24547 ;; This function calls:
 24548 ;;		Nothing
 24549 ;; This function is called by:
 24550 ;;		_HMI_Init
 24551 ;;		_Button_Init
 24552 ;; This function uses a non-reentrant model
 24553 ;;
 24554                           
 24555                           	psect	text122
 24556  016560                     __ptext122:
 24557                           	opt stack 0
 24558  016560                     _HMI_InitButtons:
 24559                           	opt stack 20
 24560                           
 24561                           ;HMI.c: 23: TRISE = 0xFC;
 24562                           
 24563                           ;incstack = 0
 24564  016560  0EFC               	movlw	252
 24565  016562  6E96               	movwf	3990,c	;volatile
 24566  016564  0012               	return		;funcret
 24567  016566                     __end_of_HMI_InitButtons:
 24568                           	opt stack 0
 24569                           tosu	equ	0xFFF
 24570                           tosh	equ	0xFFE
 24571                           tosl	equ	0xFFD
 24572                           pclath	equ	0xFFA
 24573                           tblptru	equ	0xFF8
 24574                           tblptrh	equ	0xFF7
 24575                           tblptrl	equ	0xFF6
 24576                           tablat	equ	0xFF5
 24577                           prodh	equ	0xFF4
 24578                           prodl	equ	0xFF3
 24579                           intcon	equ	0xFF2
 24580                           postinc0	equ	0xFEE
 24581                           wreg	equ	0xFE8
 24582                           indf1	equ	0xFE7
 24583                           postdec1	equ	0xFE5
 24584                           fsr1h	equ	0xFE2
 24585                           fsr1l	equ	0xFE1
 24586                           indf2	equ	0xFDF
 24587                           postinc2	equ	0xFDE
 24588                           postdec2	equ	0xFDD
 24589                           plusw2	equ	0xFDB
 24590                           fsr2h	equ	0xFDA
 24591                           fsr2l	equ	0xFD9
 24592                           status	equ	0xFD8
 24593                           
 24594 ;; *************** function _MXK_InitTestButton *****************
 24595 ;; Defined at:
 24596 ;;		line 10 in file "Library/MXK.c"
 24597 ;; Parameters:    Size  Location     Type
 24598 ;;		None
 24599 ;; Auto vars:     Size  Location     Type
 24600 ;;		None
 24601 ;; Return value:  Size  Location     Type
 24602 ;;                  1    wreg      void 
 24603 ;; Registers used:
 24604 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24605 ;; Tracked objects:
 24606 ;;		On entry : 0/0
 24607 ;;		On exit  : 0/0
 24608 ;;		Unchanged: 0/0
 24609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24613 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24614 ;;Total ram usage:        0 bytes
 24615 ;; Hardware stack levels used:    1
 24616 ;; Hardware stack levels required when called:   12
 24617 ;; This function calls:
 24618 ;;		_Port_SetPinType
 24619 ;; This function is called by:
 24620 ;;		_FunctInitButton
 24621 ;;		_Button_Init
 24622 ;; This function uses a non-reentrant model
 24623 ;;
 24624                           
 24625                           	psect	text123
 24626  0162CA                     __ptext123:
 24627                           	opt stack 0
 24628  0162CA                     _MXK_InitTestButton:
 24629                           	opt stack 15
 24630                           
 24631                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 24632                           
 24633                           ;incstack = 0
 24634  0162CA  0EA3               	movlw	low _PortB
 24635  0162CC  0100               	movlb	0	; () banked
 24636  0162CE  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 24637  0162D0  0E03               	movlw	high _PortB
 24638  0162D2  0100               	movlb	0	; () banked
 24639  0162D4  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 24640  0162D6  0E04               	movlw	4
 24641  0162D8  0100               	movlb	0	; () banked
 24642  0162DA  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 24643  0162DC  0E00               	movlw	0
 24644  0162DE  0100               	movlb	0	; () banked
 24645  0162E0  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 24646  0162E2  EC5F  F093         	call	_Port_SetPinType	;wreg free
 24647  0162E6  0012               	return		;funcret
 24648  0162E8                     __end_of_MXK_InitTestButton:
 24649                           	opt stack 0
 24650                           tosu	equ	0xFFF
 24651                           tosh	equ	0xFFE
 24652                           tosl	equ	0xFFD
 24653                           pclath	equ	0xFFA
 24654                           tblptru	equ	0xFF8
 24655                           tblptrh	equ	0xFF7
 24656                           tblptrl	equ	0xFF6
 24657                           tablat	equ	0xFF5
 24658                           prodh	equ	0xFF4
 24659                           prodl	equ	0xFF3
 24660                           intcon	equ	0xFF2
 24661                           postinc0	equ	0xFEE
 24662                           wreg	equ	0xFE8
 24663                           indf1	equ	0xFE7
 24664                           postdec1	equ	0xFE5
 24665                           fsr1h	equ	0xFE2
 24666                           fsr1l	equ	0xFE1
 24667                           indf2	equ	0xFDF
 24668                           postinc2	equ	0xFDE
 24669                           postdec2	equ	0xFDD
 24670                           plusw2	equ	0xFDB
 24671                           fsr2h	equ	0xFDA
 24672                           fsr2l	equ	0xFD9
 24673                           status	equ	0xFD8
 24674                           
 24675 ;; *************** function _Port_SetPinType *****************
 24676 ;; Defined at:
 24677 ;;		line 189 in file "Library/Port.c"
 24678 ;; Parameters:    Size  Location     Type
 24679 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 24680 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 24681 ;;		 -> PortD(10), PortC(10), PortF(10), 
 24682 ;;  pPin            1   40[BANK0 ] enum E6750
 24683 ;;  pType           1   41[BANK0 ] enum E6795
 24684 ;; Auto vars:     Size  Location     Type
 24685 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 24686 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 24687 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 24688 ;;  Output          1   42[BANK0 ] enum E6475
 24689 ;; Return value:  Size  Location     Type
 24690 ;;                  1    wreg      enum E6475
 24691 ;; Registers used:
 24692 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24693 ;; Tracked objects:
 24694 ;;		On entry : 0/0
 24695 ;;		On exit  : 0/0
 24696 ;;		Unchanged: 0/0
 24697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24698 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24699 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24701 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24702 ;;Total ram usage:        7 bytes
 24703 ;; Hardware stack levels used:    1
 24704 ;; Hardware stack levels required when called:   11
 24705 ;; This function calls:
 24706 ;;		_Byte_SetBit
 24707 ;;		_PortProperty_Valid
 24708 ;;		_Word_SetPair
 24709 ;; This function is called by:
 24710 ;;		_Configure_GPIOs
 24711 ;;		_LED_Init
 24712 ;;		_Port_Init
 24713 ;;		_SPI_Init
 24714 ;;		_Motor_Init
 24715 ;;		_MXK_InitTestButton
 24716 ;;		_MXK_Init
 24717 ;;		_I2C_Init
 24718 ;; This function uses a non-reentrant model
 24719 ;;
 24720                           
 24721                           	psect	text124
 24722  0126BE                     __ptext124:
 24723                           	opt stack 0
 24724  0126BE                     _Port_SetPinType:
 24725                           	opt stack 17
 24726                           
 24727                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 24728                           
 24729                           ;incstack = 0
 24730  0126BE  C086  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 24731  0126C2  C087  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 24732  0126C6  CFDE F08B          	movff	postinc2,Port_SetPinType@Props
 24733  0126CA  CFDD F08C          	movff	postdec2,Port_SetPinType@Props+1
 24734                           
 24735                           ;Port.c: 192: ePinError Output = ePinErrorState;
 24736  0126CE  0E05               	movlw	5
 24737  0126D0  0100               	movlb	0	; () banked
 24738  0126D2  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 24739                           
 24740                           ;Port.c: 193: switch (pType)
 24741  0126D4  D0B5               	goto	l412
 24742  0126D6                     
 24743                           ; BSR set to: 0
 24744                           ;Port.c: 197: {
 24745                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 24746                           
 24747                           ; BSR set to: 0
 24748  0126D6  0100               	movlb	0	; () banked
 24749  0126D8  EE20 F002          	lfsr	2,2
 24750  0126DC  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 24751  0126DE  26D9               	addwf	fsr2l,f,c
 24752  0126E0  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 24753  0126E2  22DA               	addwfc	fsr2h,f,c
 24754  0126E4  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 24755  0126E8  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 24756  0126EC  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 24757  0126F0  0E01               	movlw	1
 24758  0126F2  0100               	movlb	0	; () banked
 24759  0126F4  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 24760  0126F6  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 24761                           
 24762                           ;Port.c: 203: break;
 24763  0126FA  D0B0               	goto	l414
 24764  0126FC                     
 24765                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 24766  0126FC  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 24767  012700  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 24768  012704  0E01               	movlw	1
 24769  012706  0100               	movlb	0	; () banked
 24770  012708  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 24771  01270A  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 24772  01270E  EC43  F0A7         	call	_PortProperty_Valid	;wreg free
 24773  012712  0100               	movlb	0	; () banked
 24774  012714  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 24775  012716  0100               	movlb	0	; () banked
 24776  012718  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 24777  01271A  A4D8               	btfss	status,2,c
 24778  01271C  0012               	return	
 24779                           
 24780                           ; BSR set to: 0
 24781                           ;Port.c: 208: {
 24782                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 24783  01271E  0100               	movlb	0	; () banked
 24784  012720  EE20 F002          	lfsr	2,2
 24785  012724  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 24786  012726  26D9               	addwf	fsr2l,f,c
 24787  012728  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 24788  01272A  22DA               	addwfc	fsr2h,f,c
 24789  01272C  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 24790  012730  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 24791  012734  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 24792  012738  0E00               	movlw	0
 24793  01273A  0100               	movlb	0	; () banked
 24794  01273C  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 24795  01273E  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 24796                           
 24797                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 24798  012742  0100               	movlb	0	; () banked
 24799  012744  EE20 F004          	lfsr	2,4
 24800  012748  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 24801  01274A  26D9               	addwf	fsr2l,f,c
 24802  01274C  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 24803  01274E  22DA               	addwfc	fsr2h,f,c
 24804  012750  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 24805  012754  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 24806  012758  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 24807  01275C  0E00               	movlw	0
 24808  01275E  0100               	movlb	0	; () banked
 24809  012760  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 24810  012762  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 24811                           
 24812                           ;Port.c: 214: break;
 24813  012766  D07A               	goto	l414
 24814  012768                     
 24815                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 24816                           
 24817                           ;Port.c: 218: case eTypeOutputOpenSource:
 24818  012768  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 24819  01276C  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 24820  012770  0E02               	movlw	2
 24821  012772  0100               	movlb	0	; () banked
 24822  012774  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 24823  012776  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 24824  01277A  EC43  F0A7         	call	_PortProperty_Valid	;wreg free
 24825  01277E  0100               	movlb	0	; () banked
 24826  012780  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 24827  012782  0100               	movlb	0	; () banked
 24828  012784  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 24829  012786  A4D8               	btfss	status,2,c
 24830  012788  0012               	return	
 24831                           
 24832                           ; BSR set to: 0
 24833                           ;Port.c: 220: {
 24834                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 24835  01278A  0100               	movlb	0	; () banked
 24836  01278C  EE20 F002          	lfsr	2,2
 24837  012790  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 24838  012792  26D9               	addwf	fsr2l,f,c
 24839  012794  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 24840  012796  22DA               	addwfc	fsr2h,f,c
 24841  012798  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 24842  01279C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 24843  0127A0  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 24844  0127A4  0E01               	movlw	1
 24845  0127A6  0100               	movlb	0	; () banked
 24846  0127A8  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 24847  0127AA  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 24848                           
 24849                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 24850  0127AE  0100               	movlb	0	; () banked
 24851  0127B0  EE20 F004          	lfsr	2,4
 24852  0127B4  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 24853  0127B6  26D9               	addwf	fsr2l,f,c
 24854  0127B8  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 24855  0127BA  22DA               	addwfc	fsr2h,f,c
 24856  0127BC  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 24857  0127C0  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 24858  0127C4  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 24859  0127C8  0E01               	movlw	1
 24860  0127CA  0100               	movlb	0	; () banked
 24861  0127CC  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 24862  0127CE  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 24863                           
 24864                           ;Port.c: 226: break;
 24865  0127D2  D044               	goto	l414
 24866  0127D4                     
 24867                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 24868                           
 24869                           ;Port.c: 230: case eTypeOutputPushPull:
 24870  0127D4  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 24871  0127D8  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 24872  0127DC  0E00               	movlw	0
 24873  0127DE  0100               	movlb	0	; () banked
 24874  0127E0  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 24875  0127E2  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 24876  0127E6  EC43  F0A7         	call	_PortProperty_Valid	;wreg free
 24877  0127EA  0100               	movlb	0	; () banked
 24878  0127EC  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 24879  0127EE  0100               	movlb	0	; () banked
 24880  0127F0  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 24881  0127F2  A4D8               	btfss	status,2,c
 24882  0127F4  0012               	return	
 24883                           
 24884                           ; BSR set to: 0
 24885                           ;Port.c: 232: {
 24886                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 24887  0127F6  0100               	movlb	0	; () banked
 24888  0127F8  EE20 F002          	lfsr	2,2
 24889  0127FC  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 24890  0127FE  26D9               	addwf	fsr2l,f,c
 24891  012800  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 24892  012802  22DA               	addwfc	fsr2h,f,c
 24893  012804  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 24894  012808  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 24895  01280C  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 24896  012810  0E00               	movlw	0
 24897  012812  0100               	movlb	0	; () banked
 24898  012814  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 24899  012816  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 24900                           
 24901                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 24902  01281A  0100               	movlb	0	; () banked
 24903  01281C  EE20 F004          	lfsr	2,4
 24904  012820  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 24905  012822  26D9               	addwf	fsr2l,f,c
 24906  012824  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 24907  012826  22DA               	addwfc	fsr2h,f,c
 24908  012828  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 24909  01282C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 24910  012830  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 24911  012834  0E00               	movlw	0
 24912  012836  0100               	movlb	0	; () banked
 24913  012838  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 24914  01283A  ECF8  F0AA         	call	_Byte_SetBit	;wreg free
 24915                           
 24916                           ;Port.c: 239: }
 24917                           
 24918                           ;Port.c: 238: break;
 24919  01283E  D00E               	goto	l414
 24920  012840                     l412:
 24921  012840  0100               	movlb	0	; () banked
 24922  012842  5189               	movf	Port_SetPinType@pType& (0+255),w,b
 24923                           
 24924                           ; Switch size 1, requested type "space"
 24925                           ; Number of cases is 4, Range of values is 0 to 3
 24926                           ; switch strategies available:
 24927                           ; Name         Instructions Cycles
 24928                           ; simple_byte           13     7 (average)
 24929                           ;	Chosen strategy is simple_byte
 24930  012844  0A00               	xorlw	0	; case 0
 24931  012846  B4D8               	btfsc	status,2,c
 24932  012848  D746               	goto	l413
 24933  01284A  0A01               	xorlw	1	; case 1
 24934  01284C  B4D8               	btfsc	status,2,c
 24935  01284E  D756               	goto	l415
 24936  012850  0A03               	xorlw	3	; case 2
 24937  012852  B4D8               	btfsc	status,2,c
 24938  012854  D789               	goto	l417
 24939  012856  0A01               	xorlw	1	; case 3
 24940  012858  B4D8               	btfsc	status,2,c
 24941  01285A  D7BC               	goto	l421
 24942  01285C                     l414:
 24943                           
 24944                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 24945                           
 24946                           ; BSR set to: 0
 24947  01285C  0E08               	movlw	8
 24948  01285E  0100               	movlb	0	; () banked
 24949  012860  2586               	addwf	Port_SetPinType@pInput& (0+255),w,b
 24950  012862  0100               	movlb	0	; () banked
 24951  012864  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 24952  012866  0E00               	movlw	0
 24953  012868  0100               	movlb	0	; () banked
 24954  01286A  2187               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 24955  01286C  0100               	movlb	0	; () banked
 24956  01286E  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 24957  012870  C088  F071         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 24958  012874  C089  F072         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 24959  012878  ECE6  F0AD         	call	_Word_SetPair	;wreg free
 24960  01287C  0012               	return	
 24961  01287E                     __end_of_Port_SetPinType:
 24962                           	opt stack 0
 24963                           tosu	equ	0xFFF
 24964                           tosh	equ	0xFFE
 24965                           tosl	equ	0xFFD
 24966                           pclath	equ	0xFFA
 24967                           tblptru	equ	0xFF8
 24968                           tblptrh	equ	0xFF7
 24969                           tblptrl	equ	0xFF6
 24970                           tablat	equ	0xFF5
 24971                           prodh	equ	0xFF4
 24972                           prodl	equ	0xFF3
 24973                           intcon	equ	0xFF2
 24974                           postinc0	equ	0xFEE
 24975                           wreg	equ	0xFE8
 24976                           indf1	equ	0xFE7
 24977                           postdec1	equ	0xFE5
 24978                           fsr1h	equ	0xFE2
 24979                           fsr1l	equ	0xFE1
 24980                           indf2	equ	0xFDF
 24981                           postinc2	equ	0xFDE
 24982                           postdec2	equ	0xFDD
 24983                           plusw2	equ	0xFDB
 24984                           fsr2h	equ	0xFDA
 24985                           fsr2l	equ	0xFD9
 24986                           status	equ	0xFD8
 24987                           
 24988 ;; *************** function _Byte_SetBit *****************
 24989 ;; Defined at:
 24990 ;;		line 32 in file "Library/Types.c"
 24991 ;; Parameters:    Size  Location     Type
 24992 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 24993 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 24994 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 24995 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 24996 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 24997 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 24998 ;;		 -> NULL(0), 
 24999 ;;  pBit            1    2[BANK0 ] unsigned char 
 25000 ;;  pValue          1    3[BANK0 ] unsigned char 
 25001 ;; Auto vars:     Size  Location     Type
 25002 ;;		None
 25003 ;; Return value:  Size  Location     Type
 25004 ;;                  1    wreg      void 
 25005 ;; Registers used:
 25006 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 25007 ;; Tracked objects:
 25008 ;;		On entry : 0/0
 25009 ;;		On exit  : 0/0
 25010 ;;		Unchanged: 0/0
 25011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25012 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25014 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25015 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25016 ;;Total ram usage:        7 bytes
 25017 ;; Hardware stack levels used:    1
 25018 ;; Hardware stack levels required when called:    7
 25019 ;; This function calls:
 25020 ;;		Nothing
 25021 ;; This function is called by:
 25022 ;;		_Port_SetPinType
 25023 ;;		_Port_SetPin
 25024 ;;		_SPI_Init
 25025 ;;		_SPI_MinSpeed
 25026 ;;		_SPI_MaxSpeed
 25027 ;;		_Word_SetBit
 25028 ;;		_I2C_Init
 25029 ;; This function uses a non-reentrant model
 25030 ;;
 25031                           
 25032                           	psect	text125
 25033  0155F0                     __ptext125:
 25034                           	opt stack 0
 25035  0155F0                     _Byte_SetBit:
 25036                           	opt stack 19
 25037                           
 25038                           ;Types.c: 34: pValue &= 1;
 25039                           
 25040                           ;incstack = 0
 25041  0155F0  0E01               	movlw	1
 25042  0155F2  0100               	movlb	0	; () banked
 25043  0155F4  1763               	andwf	Byte_SetBit@pValue& (0+255),f,b
 25044                           
 25045                           ; BSR set to: 0
 25046                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 25047  0155F6  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 25048  0155FA  0E01               	movlw	1
 25049  0155FC  0100               	movlb	0	; () banked
 25050  0155FE  6F65               	movwf	(??_Byte_SetBit+1)& (0+255),b
 25051  015600  0100               	movlb	0	; () banked
 25052  015602  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 25053  015604  D003               	goto	u8674
 25054  015606                     u8675:
 25055  015606  0100               	movlb	0	; () banked
 25056  015608  90D8               	bcf	status,0,c
 25057  01560A  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 25058  01560C                     u8674:
 25059  01560C  0100               	movlb	0	; () banked
 25060  01560E  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 25061  015610  D7FA               	goto	u8675
 25062  015612  0100               	movlb	0	; () banked
 25063  015614  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 25064  015616  0AFF               	xorlw	255
 25065  015618  0100               	movlb	0	; () banked
 25066  01561A  6F66               	movwf	(??_Byte_SetBit+2)& (0+255),b
 25067  01561C  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 25068  015620  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 25069  015624  0100               	movlb	0	; () banked
 25070  015626  5166               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 25071  015628  16DF               	andwf	indf2,f,c
 25072                           
 25073                           ; BSR set to: 0
 25074                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 25075  01562A  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 25076  01562E  C063  F065         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 25077  015632  0100               	movlb	0	; () banked
 25078  015634  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 25079  015636  D003               	goto	u8684
 25080  015638                     u8685:
 25081  015638  0100               	movlb	0	; () banked
 25082  01563A  90D8               	bcf	status,0,c
 25083  01563C  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 25084  01563E                     u8684:
 25085  01563E  0100               	movlb	0	; () banked
 25086  015640  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 25087  015642  D7FA               	goto	u8685
 25088  015644  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 25089  015648  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 25090  01564C  0100               	movlb	0	; () banked
 25091  01564E  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 25092  015650  12DF               	iorwf	indf2,f,c
 25093                           
 25094                           ; BSR set to: 0
 25095  015652  0012               	return		;funcret
 25096  015654                     __end_of_Byte_SetBit:
 25097                           	opt stack 0
 25098                           tosu	equ	0xFFF
 25099                           tosh	equ	0xFFE
 25100                           tosl	equ	0xFFD
 25101                           pclath	equ	0xFFA
 25102                           tblptru	equ	0xFF8
 25103                           tblptrh	equ	0xFF7
 25104                           tblptrl	equ	0xFF6
 25105                           tablat	equ	0xFF5
 25106                           prodh	equ	0xFF4
 25107                           prodl	equ	0xFF3
 25108                           intcon	equ	0xFF2
 25109                           postinc0	equ	0xFEE
 25110                           wreg	equ	0xFE8
 25111                           indf1	equ	0xFE7
 25112                           postdec1	equ	0xFE5
 25113                           fsr1h	equ	0xFE2
 25114                           fsr1l	equ	0xFE1
 25115                           indf2	equ	0xFDF
 25116                           postinc2	equ	0xFDE
 25117                           postdec2	equ	0xFDD
 25118                           plusw2	equ	0xFDB
 25119                           fsr2h	equ	0xFDA
 25120                           fsr2l	equ	0xFD9
 25121                           status	equ	0xFD8
 25122                           
 25123 ;; *************** function _Port_SetQuadType *****************
 25124 ;; Defined at:
 25125 ;;		line 399 in file "Library/Port.c"
 25126 ;; Parameters:    Size  Location     Type
 25127 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 25128 ;;		 -> PortB(10), PortD(10), 
 25129 ;;  pQuad           1   56[BANK0 ] enum E6776
 25130 ;;  pType           1   57[BANK0 ] enum E6795
 25131 ;; Auto vars:     Size  Location     Type
 25132 ;;  Output          1   58[BANK0 ] enum E6475
 25133 ;; Return value:  Size  Location     Type
 25134 ;;                  1    wreg      enum E6475
 25135 ;; Registers used:
 25136 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25137 ;; Tracked objects:
 25138 ;;		On entry : 0/0
 25139 ;;		On exit  : 0/0
 25140 ;;		Unchanged: 0/0
 25141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25142 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25143 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25145 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25146 ;;Total ram usage:        5 bytes
 25147 ;; Hardware stack levels used:    1
 25148 ;; Hardware stack levels required when called:   13
 25149 ;; This function calls:
 25150 ;;		_Byte_SetQuad
 25151 ;;		_Port_CheckQuadType
 25152 ;;		_Word_SetPair
 25153 ;; This function is called by:
 25154 ;;		_MXK_InitDIPSwitch
 25155 ;;		_MXK_Init
 25156 ;; This function uses a non-reentrant model
 25157 ;;
 25158                           
 25159                           	psect	text126
 25160  011AA4                     __ptext126:
 25161                           	opt stack 0
 25162  011AA4                     _Port_SetQuadType:
 25163                           	opt stack 15
 25164                           
 25165                           ;Port.c: 401: ePinError Output = ePinErrorState;
 25166                           
 25167                           ; BSR set to: 0
 25168                           ;incstack = 0
 25169  011AA4  0E05               	movlw	5
 25170  011AA6  0100               	movlb	0	; () banked
 25171  011AA8  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 25172                           
 25173                           ;Port.c: 403: switch (pType)
 25174  011AAA  D0C7               	goto	l476
 25175  011AAC                     
 25176                           ; BSR set to: 0
 25177                           ;Port.c: 407: {
 25178                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 25179                           
 25180                           ; BSR set to: 0
 25181  011AAC  0100               	movlb	0	; () banked
 25182  011AAE  EE20 F002          	lfsr	2,2
 25183  011AB2  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 25184  011AB4  26D9               	addwf	fsr2l,f,c
 25185  011AB6  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25186  011AB8  22DA               	addwfc	fsr2h,f,c
 25187  011ABA  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 25188  011ABE  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 25189  011AC2  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 25190  011AC6  0E0F               	movlw	15
 25191  011AC8  0100               	movlb	0	; () banked
 25192  011ACA  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 25193  011ACC  ECEA  F0B0         	call	_Byte_SetQuad	;wreg free
 25194                           
 25195                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 25196  011AD0  0100               	movlb	0	; () banked
 25197  011AD2  EE20 F004          	lfsr	2,4
 25198  011AD6  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 25199  011AD8  26D9               	addwf	fsr2l,f,c
 25200  011ADA  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25201  011ADC  22DA               	addwfc	fsr2h,f,c
 25202  011ADE  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 25203  011AE2  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 25204  011AE6  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 25205  011AEA  0E00               	movlw	0
 25206  011AEC  0100               	movlb	0	; () banked
 25207  011AEE  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 25208  011AF0  ECEA  F0B0         	call	_Byte_SetQuad	;wreg free
 25209                           
 25210                           ;Port.c: 413: }
 25211                           ;Port.c: 415: break;
 25212  011AF4  D0B0               	goto	l478
 25213  011AF6                     
 25214                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 25215  011AF6  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 25216  011AFA  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 25217  011AFE  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 25218  011B02  0E03               	movlw	3
 25219  011B04  0100               	movlb	0	; () banked
 25220  011B06  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 25221  011B08  ECEB  F0AB         	call	_Port_CheckQuadType	;wreg free
 25222  011B0C  0100               	movlb	0	; () banked
 25223  011B0E  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 25224  011B10  0100               	movlb	0	; () banked
 25225  011B12  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 25226  011B14  A4D8               	btfss	status,2,c
 25227  011B16  0012               	return	
 25228                           
 25229                           ; BSR set to: 0
 25230                           ;Port.c: 418: {
 25231                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 25232  011B18  0100               	movlb	0	; () banked
 25233  011B1A  EE20 F002          	lfsr	2,2
 25234  011B1E  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 25235  011B20  26D9               	addwf	fsr2l,f,c
 25236  011B22  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25237  011B24  22DA               	addwfc	fsr2h,f,c
 25238  011B26  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 25239  011B2A  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 25240  011B2E  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 25241  011B32  0E00               	movlw	0
 25242  011B34  0100               	movlb	0	; () banked
 25243  011B36  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 25244  011B38  ECEA  F0B0         	call	_Byte_SetQuad	;wreg free
 25245                           
 25246                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 25247  011B3C  0100               	movlb	0	; () banked
 25248  011B3E  EE20 F004          	lfsr	2,4
 25249  011B42  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 25250  011B44  26D9               	addwf	fsr2l,f,c
 25251  011B46  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25252  011B48  22DA               	addwfc	fsr2h,f,c
 25253  011B4A  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 25254  011B4E  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 25255  011B52  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 25256  011B56  0E00               	movlw	0
 25257  011B58  0100               	movlb	0	; () banked
 25258  011B5A  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 25259  011B5C  ECEA  F0B0         	call	_Byte_SetQuad	;wreg free
 25260                           
 25261                           ;Port.c: 424: }
 25262  011B60  D07A               	goto	l478
 25263  011B62                     
 25264                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 25265  011B62  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 25266  011B66  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 25267  011B6A  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 25268  011B6E  0E03               	movlw	3
 25269  011B70  0100               	movlb	0	; () banked
 25270  011B72  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 25271  011B74  ECEB  F0AB         	call	_Port_CheckQuadType	;wreg free
 25272  011B78  0100               	movlb	0	; () banked
 25273  011B7A  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 25274  011B7C  0100               	movlb	0	; () banked
 25275  011B7E  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 25276  011B80  A4D8               	btfss	status,2,c
 25277  011B82  0012               	return	
 25278                           
 25279                           ; BSR set to: 0
 25280                           ;Port.c: 429: {
 25281                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 25282  011B84  0100               	movlb	0	; () banked
 25283  011B86  EE20 F002          	lfsr	2,2
 25284  011B8A  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 25285  011B8C  26D9               	addwf	fsr2l,f,c
 25286  011B8E  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25287  011B90  22DA               	addwfc	fsr2h,f,c
 25288  011B92  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 25289  011B96  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 25290  011B9A  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 25291  011B9E  0E0F               	movlw	15
 25292  011BA0  0100               	movlb	0	; () banked
 25293  011BA2  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 25294  011BA4  ECEA  F0B0         	call	_Byte_SetQuad	;wreg free
 25295                           
 25296                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 25297  011BA8  0100               	movlb	0	; () banked
 25298  011BAA  EE20 F004          	lfsr	2,4
 25299  011BAE  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 25300  011BB0  26D9               	addwf	fsr2l,f,c
 25301  011BB2  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25302  011BB4  22DA               	addwfc	fsr2h,f,c
 25303  011BB6  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 25304  011BBA  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 25305  011BBE  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 25306  011BC2  0E0F               	movlw	15
 25307  011BC4  0100               	movlb	0	; () banked
 25308  011BC6  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 25309  011BC8  ECEA  F0B0         	call	_Byte_SetQuad	;wreg free
 25310                           
 25311                           ;Port.c: 435: }
 25312  011BCC  D044               	goto	l478
 25313  011BCE                     
 25314                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 25315  011BCE  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 25316  011BD2  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 25317  011BD6  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 25318  011BDA  0E03               	movlw	3
 25319  011BDC  0100               	movlb	0	; () banked
 25320  011BDE  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 25321  011BE0  ECEB  F0AB         	call	_Port_CheckQuadType	;wreg free
 25322  011BE4  0100               	movlb	0	; () banked
 25323  011BE6  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 25324  011BE8  0100               	movlb	0	; () banked
 25325  011BEA  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 25326  011BEC  A4D8               	btfss	status,2,c
 25327  011BEE  0012               	return	
 25328                           
 25329                           ; BSR set to: 0
 25330                           ;Port.c: 440: {
 25331                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 25332  011BF0  0100               	movlb	0	; () banked
 25333  011BF2  EE20 F002          	lfsr	2,2
 25334  011BF6  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 25335  011BF8  26D9               	addwf	fsr2l,f,c
 25336  011BFA  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25337  011BFC  22DA               	addwfc	fsr2h,f,c
 25338  011BFE  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 25339  011C02  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 25340  011C06  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 25341  011C0A  0E00               	movlw	0
 25342  011C0C  0100               	movlb	0	; () banked
 25343  011C0E  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 25344  011C10  ECEA  F0B0         	call	_Byte_SetQuad	;wreg free
 25345                           
 25346                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 25347  011C14  0100               	movlb	0	; () banked
 25348  011C16  EE20 F004          	lfsr	2,4
 25349  011C1A  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 25350  011C1C  26D9               	addwf	fsr2l,f,c
 25351  011C1E  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25352  011C20  22DA               	addwfc	fsr2h,f,c
 25353  011C22  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 25354  011C26  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 25355  011C2A  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 25356  011C2E  0E00               	movlw	0
 25357  011C30  0100               	movlb	0	; () banked
 25358  011C32  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 25359  011C34  ECEA  F0B0         	call	_Byte_SetQuad	;wreg free
 25360                           
 25361                           ;Port.c: 446: }
 25362  011C38  D00E               	goto	l478
 25363  011C3A                     l476:
 25364  011C3A  0100               	movlb	0	; () banked
 25365  011C3C  5199               	movf	Port_SetQuadType@pType& (0+255),w,b
 25366                           
 25367                           ; Switch size 1, requested type "space"
 25368                           ; Number of cases is 4, Range of values is 0 to 3
 25369                           ; switch strategies available:
 25370                           ; Name         Instructions Cycles
 25371                           ; simple_byte           13     7 (average)
 25372                           ;	Chosen strategy is simple_byte
 25373  011C3E  0A00               	xorlw	0	; case 0
 25374  011C40  B4D8               	btfsc	status,2,c
 25375  011C42  D734               	goto	l477
 25376  011C44  0A01               	xorlw	1	; case 1
 25377  011C46  B4D8               	btfsc	status,2,c
 25378  011C48  D756               	goto	l479
 25379  011C4A  0A03               	xorlw	3	; case 2
 25380  011C4C  B4D8               	btfsc	status,2,c
 25381  011C4E  D789               	goto	l483
 25382  011C50  0A01               	xorlw	1	; case 3
 25383  011C52  B4D8               	btfsc	status,2,c
 25384  011C54  D7BC               	goto	l486
 25385  011C56                     l478:
 25386                           
 25387                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 25388                           
 25389                           ; BSR set to: 0
 25390  011C56  0E08               	movlw	8
 25391  011C58  0100               	movlb	0	; () banked
 25392  011C5A  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 25393  011C5C  0100               	movlb	0	; () banked
 25394  011C5E  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 25395  011C60  0E00               	movlw	0
 25396  011C62  0100               	movlb	0	; () banked
 25397  011C64  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25398  011C66  0100               	movlb	0	; () banked
 25399  011C68  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 25400  011C6A  0100               	movlb	0	; () banked
 25401  011C6C  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 25402  011C6E  0D04               	mullw	4
 25403  011C70  CFF3 F071          	movff	prodl,Word_SetPair@pPair
 25404  011C74  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 25405  011C78  ECE6  F0AD         	call	_Word_SetPair	;wreg free
 25406                           
 25407                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 25408  011C7C  0E08               	movlw	8
 25409  011C7E  0100               	movlb	0	; () banked
 25410  011C80  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 25411  011C82  0100               	movlb	0	; () banked
 25412  011C84  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 25413  011C86  0E00               	movlw	0
 25414  011C88  0100               	movlb	0	; () banked
 25415  011C8A  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25416  011C8C  0100               	movlb	0	; () banked
 25417  011C8E  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 25418  011C90  0100               	movlb	0	; () banked
 25419  011C92  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 25420  011C94  0D04               	mullw	4
 25421  011C96  28F3               	incf	prodl,w,c
 25422  011C98  0100               	movlb	0	; () banked
 25423  011C9A  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 25424  011C9C  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 25425  011CA0  ECE6  F0AD         	call	_Word_SetPair	;wreg free
 25426                           
 25427                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 25428  011CA4  0E08               	movlw	8
 25429  011CA6  0100               	movlb	0	; () banked
 25430  011CA8  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 25431  011CAA  0100               	movlb	0	; () banked
 25432  011CAC  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 25433  011CAE  0E00               	movlw	0
 25434  011CB0  0100               	movlb	0	; () banked
 25435  011CB2  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25436  011CB4  0100               	movlb	0	; () banked
 25437  011CB6  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 25438  011CB8  0100               	movlb	0	; () banked
 25439  011CBA  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 25440  011CBC  0D04               	mullw	4
 25441  011CBE  50F3               	movf	prodl,w,c
 25442  011CC0  0F02               	addlw	2
 25443  011CC2  0100               	movlb	0	; () banked
 25444  011CC4  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 25445  011CC6  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 25446  011CCA  ECE6  F0AD         	call	_Word_SetPair	;wreg free
 25447                           
 25448                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 25449  011CCE  0E08               	movlw	8
 25450  011CD0  0100               	movlb	0	; () banked
 25451  011CD2  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 25452  011CD4  0100               	movlb	0	; () banked
 25453  011CD6  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 25454  011CD8  0E00               	movlw	0
 25455  011CDA  0100               	movlb	0	; () banked
 25456  011CDC  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 25457  011CDE  0100               	movlb	0	; () banked
 25458  011CE0  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 25459  011CE2  0100               	movlb	0	; () banked
 25460  011CE4  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 25461  011CE6  0D04               	mullw	4
 25462  011CE8  50F3               	movf	prodl,w,c
 25463  011CEA  0F03               	addlw	3
 25464  011CEC  0100               	movlb	0	; () banked
 25465  011CEE  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 25466  011CF0  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 25467  011CF4  ECE6  F0AD         	call	_Word_SetPair	;wreg free
 25468  011CF8  0012               	return	
 25469  011CFA                     __end_of_Port_SetQuadType:
 25470                           	opt stack 0
 25471                           tosu	equ	0xFFF
 25472                           tosh	equ	0xFFE
 25473                           tosl	equ	0xFFD
 25474                           pclath	equ	0xFFA
 25475                           tblptru	equ	0xFF8
 25476                           tblptrh	equ	0xFF7
 25477                           tblptrl	equ	0xFF6
 25478                           tablat	equ	0xFF5
 25479                           prodh	equ	0xFF4
 25480                           prodl	equ	0xFF3
 25481                           intcon	equ	0xFF2
 25482                           postinc0	equ	0xFEE
 25483                           wreg	equ	0xFE8
 25484                           indf1	equ	0xFE7
 25485                           postdec1	equ	0xFE5
 25486                           fsr1h	equ	0xFE2
 25487                           fsr1l	equ	0xFE1
 25488                           indf2	equ	0xFDF
 25489                           postinc2	equ	0xFDE
 25490                           postdec2	equ	0xFDD
 25491                           plusw2	equ	0xFDB
 25492                           fsr2h	equ	0xFDA
 25493                           fsr2l	equ	0xFD9
 25494                           status	equ	0xFD8
 25495                           
 25496 ;; *************** function _Word_SetPair *****************
 25497 ;; Defined at:
 25498 ;;		line 149 in file "Library/Types.c"
 25499 ;; Parameters:    Size  Location     Type
 25500 ;;  pInput          2   15[BANK0 ] PTR struct Word
 25501 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 25502 ;;		 -> PortD(10), PortC(10), PortF(10), 
 25503 ;;  pPair           1   17[BANK0 ] unsigned char 
 25504 ;;  pValue          1   18[BANK0 ] unsigned char 
 25505 ;; Auto vars:     Size  Location     Type
 25506 ;;		None
 25507 ;; Return value:  Size  Location     Type
 25508 ;;                  1    wreg      void 
 25509 ;; Registers used:
 25510 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25511 ;; Tracked objects:
 25512 ;;		On entry : 0/0
 25513 ;;		On exit  : 0/0
 25514 ;;		Unchanged: 0/0
 25515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25516 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25519 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25520 ;;Total ram usage:        4 bytes
 25521 ;; Hardware stack levels used:    1
 25522 ;; Hardware stack levels required when called:    9
 25523 ;; This function calls:
 25524 ;;		_Byte_SetPair
 25525 ;; This function is called by:
 25526 ;;		_Port_SetPinType
 25527 ;;		_Port_SetQuadType
 25528 ;;		_Port_SetType
 25529 ;;		_Port_SetPairType
 25530 ;;		_PortProperty_Init
 25531 ;; This function uses a non-reentrant model
 25532 ;;
 25533                           
 25534                           	psect	text127
 25535  015BCC                     __ptext127:
 25536                           	opt stack 0
 25537  015BCC                     _Word_SetPair:
 25538                           	opt stack 18
 25539                           
 25540                           ;Types.c: 151: if (pPair >= 4)
 25541                           
 25542                           ;incstack = 0
 25543  015BCC  0E03               	movlw	3
 25544  015BCE  0100               	movlb	0	; () banked
 25545  015BD0  6571               	cpfsgt	Word_SetPair@pPair& (0+255),b
 25546  015BD2  D014               	goto	l776
 25547                           
 25548                           ; BSR set to: 0
 25549                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 25550  015BD4  0E01               	movlw	1
 25551  015BD6  0100               	movlb	0	; () banked
 25552  015BD8  256F               	addwf	Word_SetPair@pInput& (0+255),w,b
 25553  015BDA  0100               	movlb	0	; () banked
 25554  015BDC  6F6B               	movwf	Byte_SetPair@pInput& (0+255),b
 25555  015BDE  0E00               	movlw	0
 25556  015BE0  0100               	movlb	0	; () banked
 25557  015BE2  2170               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 25558  015BE4  0100               	movlb	0	; () banked
 25559  015BE6  6F6C               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 25560  015BE8  0100               	movlb	0	; () banked
 25561  015BEA  5171               	movf	Word_SetPair@pPair& (0+255),w,b
 25562  015BEC  0FFC               	addlw	252
 25563  015BEE  0100               	movlb	0	; () banked
 25564  015BF0  6F6D               	movwf	Byte_SetPair@pPair& (0+255),b
 25565  015BF2  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 25566  015BF6  ECD9  F0B0         	call	_Byte_SetPair	;wreg free
 25567  015BFA  0012               	return	
 25568  015BFC                     l776:
 25569                           
 25570                           ;Types.c: 153: else
 25571                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 25572  015BFC  C06F  F06B         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 25573  015C00  C070  F06C         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 25574  015C04  C071  F06D         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 25575  015C08  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 25576  015C0C  ECD9  F0B0         	call	_Byte_SetPair	;wreg free
 25577  015C10  0012               	return	
 25578  015C12                     __end_of_Word_SetPair:
 25579                           	opt stack 0
 25580                           tosu	equ	0xFFF
 25581                           tosh	equ	0xFFE
 25582                           tosl	equ	0xFFD
 25583                           pclath	equ	0xFFA
 25584                           tblptru	equ	0xFF8
 25585                           tblptrh	equ	0xFF7
 25586                           tblptrl	equ	0xFF6
 25587                           tablat	equ	0xFF5
 25588                           prodh	equ	0xFF4
 25589                           prodl	equ	0xFF3
 25590                           intcon	equ	0xFF2
 25591                           postinc0	equ	0xFEE
 25592                           wreg	equ	0xFE8
 25593                           indf1	equ	0xFE7
 25594                           postdec1	equ	0xFE5
 25595                           fsr1h	equ	0xFE2
 25596                           fsr1l	equ	0xFE1
 25597                           indf2	equ	0xFDF
 25598                           postinc2	equ	0xFDE
 25599                           postdec2	equ	0xFDD
 25600                           plusw2	equ	0xFDB
 25601                           fsr2h	equ	0xFDA
 25602                           fsr2l	equ	0xFD9
 25603                           status	equ	0xFD8
 25604                           
 25605 ;; *************** function _Byte_SetPair *****************
 25606 ;; Defined at:
 25607 ;;		line 83 in file "Library/Types.c"
 25608 ;; Parameters:    Size  Location     Type
 25609 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 25610 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 25611 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 25612 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 25613 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 25614 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 25615 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 25616 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 25617 ;;		 -> NULL(0), 
 25618 ;;  pPair           1   13[BANK0 ] unsigned char 
 25619 ;;  pValue          1   14[BANK0 ] unsigned char 
 25620 ;; Auto vars:     Size  Location     Type
 25621 ;;		None
 25622 ;; Return value:  Size  Location     Type
 25623 ;;                  1    wreg      void 
 25624 ;; Registers used:
 25625 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25626 ;; Tracked objects:
 25627 ;;		On entry : 0/0
 25628 ;;		On exit  : 0/0
 25629 ;;		Unchanged: 0/0
 25630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25631 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25634 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25635 ;;Total ram usage:        4 bytes
 25636 ;; Hardware stack levels used:    1
 25637 ;; Hardware stack levels required when called:    8
 25638 ;; This function calls:
 25639 ;;		_Byte_SetZone
 25640 ;; This function is called by:
 25641 ;;		_Word_SetPair
 25642 ;;		_Port_SetPairType
 25643 ;;		_Port_SetPair
 25644 ;; This function uses a non-reentrant model
 25645 ;;
 25646                           
 25647                           	psect	text128
 25648  0161B2                     __ptext128:
 25649                           	opt stack 0
 25650  0161B2                     _Byte_SetPair:
 25651                           	opt stack 18
 25652                           
 25653                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 25654                           
 25655                           ;incstack = 0
 25656  0161B2  C06B  F060         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 25657  0161B6  C06C  F061         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 25658  0161BA  0E04               	movlw	4
 25659  0161BC  0100               	movlb	0	; () banked
 25660  0161BE  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 25661  0161C0  C06D  F063         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 25662  0161C4  0E02               	movlw	2
 25663  0161C6  0100               	movlb	0	; () banked
 25664  0161C8  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 25665  0161CA  C06E  F065         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 25666  0161CE  EC24  F0A1         	call	_Byte_SetZone	;wreg free
 25667  0161D2  0012               	return		;funcret
 25668  0161D4                     __end_of_Byte_SetPair:
 25669                           	opt stack 0
 25670                           tosu	equ	0xFFF
 25671                           tosh	equ	0xFFE
 25672                           tosl	equ	0xFFD
 25673                           pclath	equ	0xFFA
 25674                           tblptru	equ	0xFF8
 25675                           tblptrh	equ	0xFF7
 25676                           tblptrl	equ	0xFF6
 25677                           tablat	equ	0xFF5
 25678                           prodh	equ	0xFF4
 25679                           prodl	equ	0xFF3
 25680                           intcon	equ	0xFF2
 25681                           postinc0	equ	0xFEE
 25682                           wreg	equ	0xFE8
 25683                           indf1	equ	0xFE7
 25684                           postdec1	equ	0xFE5
 25685                           fsr1h	equ	0xFE2
 25686                           fsr1l	equ	0xFE1
 25687                           indf2	equ	0xFDF
 25688                           postinc2	equ	0xFDE
 25689                           postdec2	equ	0xFDD
 25690                           plusw2	equ	0xFDB
 25691                           fsr2h	equ	0xFDA
 25692                           fsr2l	equ	0xFD9
 25693                           status	equ	0xFD8
 25694                           
 25695 ;; *************** function _Port_CheckQuadType *****************
 25696 ;; Defined at:
 25697 ;;		line 126 in file "Library/Port.c"
 25698 ;; Parameters:    Size  Location     Type
 25699 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 25700 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 25701 ;;		 -> PortD(10), PortC(10), PortF(10), 
 25702 ;;  pQuad           1   49[BANK0 ] enum E6776
 25703 ;;  pDrive          1   50[BANK0 ] enum E6469
 25704 ;; Auto vars:     Size  Location     Type
 25705 ;;  Output          1   53[BANK0 ] enum E6475
 25706 ;;  Pair2           1   52[BANK0 ] enum E6760
 25707 ;;  Pair1           1   51[BANK0 ] enum E6760
 25708 ;; Return value:  Size  Location     Type
 25709 ;;                  1    wreg      enum E6475
 25710 ;; Registers used:
 25711 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25712 ;; Tracked objects:
 25713 ;;		On entry : 0/0
 25714 ;;		On exit  : 0/0
 25715 ;;		Unchanged: 0/0
 25716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25717 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25718 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25720 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25721 ;;Total ram usage:        7 bytes
 25722 ;; Hardware stack levels used:    1
 25723 ;; Hardware stack levels required when called:   12
 25724 ;; This function calls:
 25725 ;;		_Port_CheckPairType
 25726 ;; This function is called by:
 25727 ;;		_Port_CheckPortType
 25728 ;;		_Port_SetQuadType
 25729 ;; This function uses a non-reentrant model
 25730 ;;
 25731                           
 25732                           	psect	text129
 25733  0157D6                     __ptext129:
 25734                           	opt stack 0
 25735  0157D6                     _Port_CheckQuadType:
 25736                           	opt stack 14
 25737                           
 25738                           ;Port.c: 128: ePinError Output = ePinErrorState;
 25739                           
 25740                           ;incstack = 0
 25741  0157D6  0E05               	movlw	5
 25742  0157D8  0100               	movlb	0	; () banked
 25743  0157DA  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 25744                           
 25745                           ; BSR set to: 0
 25746                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 25747  0157DC  0100               	movlb	0	; () banked
 25748  0157DE  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 25749  0157E0  0D02               	mullw	2
 25750  0157E2  CFF3 F093          	movff	prodl,Port_CheckQuadType@Pair1
 25751                           
 25752                           ; BSR set to: 0
 25753                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 25754  0157E6  0100               	movlb	0	; () banked
 25755  0157E8  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 25756  0157EA  0D02               	mullw	2
 25757  0157EC  28F3               	incf	prodl,w,c
 25758  0157EE  0100               	movlb	0	; () banked
 25759  0157F0  6F94               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 25760                           
 25761                           ; BSR set to: 0
 25762                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 25763  0157F2  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 25764  0157F6  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 25765  0157FA  C093  F088         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 25766  0157FE  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 25767  015802  EC2B  F0AA         	call	_Port_CheckPairType	;wreg free
 25768  015806  0100               	movlb	0	; () banked
 25769  015808  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 25770  01580A  0100               	movlb	0	; () banked
 25771  01580C  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 25772  01580E  A4D8               	btfss	status,2,c
 25773  015810  D00C               	goto	l393
 25774                           
 25775                           ; BSR set to: 0
 25776                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 25777  015812  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 25778  015816  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 25779  01581A  C094  F088         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 25780  01581E  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 25781  015822  EC2B  F0AA         	call	_Port_CheckPairType	;wreg free
 25782  015826  0100               	movlb	0	; () banked
 25783  015828  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 25784  01582A                     l393:
 25785                           
 25786                           ; BSR set to: 0
 25787                           ;Port.c: 136: return Output;
 25788                           
 25789                           ; BSR set to: 0
 25790  01582A  0100               	movlb	0	; () banked
 25791  01582C  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 25792  01582E  0012               	return	
 25793  015830                     __end_of_Port_CheckQuadType:
 25794                           	opt stack 0
 25795                           tosu	equ	0xFFF
 25796                           tosh	equ	0xFFE
 25797                           tosl	equ	0xFFD
 25798                           pclath	equ	0xFFA
 25799                           tblptru	equ	0xFF8
 25800                           tblptrh	equ	0xFF7
 25801                           tblptrl	equ	0xFF6
 25802                           tablat	equ	0xFF5
 25803                           prodh	equ	0xFF4
 25804                           prodl	equ	0xFF3
 25805                           intcon	equ	0xFF2
 25806                           postinc0	equ	0xFEE
 25807                           wreg	equ	0xFE8
 25808                           indf1	equ	0xFE7
 25809                           postdec1	equ	0xFE5
 25810                           fsr1h	equ	0xFE2
 25811                           fsr1l	equ	0xFE1
 25812                           indf2	equ	0xFDF
 25813                           postinc2	equ	0xFDE
 25814                           postdec2	equ	0xFDD
 25815                           plusw2	equ	0xFDB
 25816                           fsr2h	equ	0xFDA
 25817                           fsr2l	equ	0xFD9
 25818                           status	equ	0xFD8
 25819                           
 25820 ;; *************** function _Port_CheckPairType *****************
 25821 ;; Defined at:
 25822 ;;		line 112 in file "Library/Port.c"
 25823 ;; Parameters:    Size  Location     Type
 25824 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 25825 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 25826 ;;		 -> PortD(10), PortC(10), PortF(10), 
 25827 ;;  pPair           1   40[BANK0 ] enum E6760
 25828 ;;  pDrive          1   41[BANK0 ] enum E6469
 25829 ;; Auto vars:     Size  Location     Type
 25830 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 25831 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 25832 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 25833 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 25834 ;;		 -> PortC(10), PortF(10), NULL(0), 
 25835 ;;  Output          1   44[BANK0 ] enum E6475
 25836 ;;  Pin2            1   43[BANK0 ] enum E6750
 25837 ;;  Pin1            1   42[BANK0 ] enum E6750
 25838 ;; Return value:  Size  Location     Type
 25839 ;;                  1    wreg      enum E6475
 25840 ;; Registers used:
 25841 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25842 ;; Tracked objects:
 25843 ;;		On entry : 0/0
 25844 ;;		On exit  : 0/0
 25845 ;;		Unchanged: 0/0
 25846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25847 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25848 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25850 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25851 ;;Total ram usage:        9 bytes
 25852 ;; Hardware stack levels used:    1
 25853 ;; Hardware stack levels required when called:   11
 25854 ;; This function calls:
 25855 ;;		_PortProperty_Valid
 25856 ;; This function is called by:
 25857 ;;		_Port_CheckQuadType
 25858 ;;		_Port_SetPairType
 25859 ;; This function uses a non-reentrant model
 25860 ;;
 25861                           
 25862                           	psect	text130
 25863  015456                     __ptext130:
 25864                           	opt stack 0
 25865  015456                     _Port_CheckPairType:
 25866                           	opt stack 14
 25867                           
 25868                           ;Port.c: 114: ePinError Output = ePinErrorState;
 25869                           
 25870                           ; BSR set to: 0
 25871                           ;incstack = 0
 25872  015456  0E05               	movlw	5
 25873  015458  0100               	movlb	0	; () banked
 25874  01545A  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 25875                           
 25876                           ; BSR set to: 0
 25877                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 25878  01545C  C086  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 25879  015460  C087  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 25880  015464  CFDE F08D          	movff	postinc2,Port_CheckPairType@Props
 25881  015468  CFDD F08E          	movff	postdec2,Port_CheckPairType@Props+1
 25882                           
 25883                           ; BSR set to: 0
 25884                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 25885  01546C  0100               	movlb	0	; () banked
 25886  01546E  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 25887  015470  0D02               	mullw	2
 25888  015472  CFF3 F08A          	movff	prodl,Port_CheckPairType@Pin1
 25889                           
 25890                           ; BSR set to: 0
 25891                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 25892  015476  0100               	movlb	0	; () banked
 25893  015478  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 25894  01547A  0D02               	mullw	2
 25895  01547C  28F3               	incf	prodl,w,c
 25896  01547E  0100               	movlb	0	; () banked
 25897  015480  6F8B               	movwf	Port_CheckPairType@Pin2& (0+255),b
 25898                           
 25899                           ; BSR set to: 0
 25900                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 25901  015482  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 25902  015486  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 25903  01548A  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 25904  01548E  C08A  F072         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 25905  015492  EC43  F0A7         	call	_PortProperty_Valid	;wreg free
 25906  015496  0100               	movlb	0	; () banked
 25907  015498  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 25908  01549A  0100               	movlb	0	; () banked
 25909  01549C  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 25910  01549E  A4D8               	btfss	status,2,c
 25911  0154A0  D00C               	goto	l389
 25912                           
 25913                           ; BSR set to: 0
 25914                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 25915  0154A2  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 25916  0154A6  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 25917  0154AA  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 25918  0154AE  C08B  F072         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 25919  0154B2  EC43  F0A7         	call	_PortProperty_Valid	;wreg free
 25920  0154B6  0100               	movlb	0	; () banked
 25921  0154B8  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 25922  0154BA                     l389:
 25923                           
 25924                           ; BSR set to: 0
 25925                           ;Port.c: 124: return Output;
 25926                           
 25927                           ; BSR set to: 0
 25928  0154BA  0100               	movlb	0	; () banked
 25929  0154BC  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 25930  0154BE  0012               	return	
 25931  0154C0                     __end_of_Port_CheckPairType:
 25932                           	opt stack 0
 25933                           tosu	equ	0xFFF
 25934                           tosh	equ	0xFFE
 25935                           tosl	equ	0xFFD
 25936                           pclath	equ	0xFFA
 25937                           tblptru	equ	0xFF8
 25938                           tblptrh	equ	0xFF7
 25939                           tblptrl	equ	0xFF6
 25940                           tablat	equ	0xFF5
 25941                           prodh	equ	0xFF4
 25942                           prodl	equ	0xFF3
 25943                           intcon	equ	0xFF2
 25944                           postinc0	equ	0xFEE
 25945                           wreg	equ	0xFE8
 25946                           indf1	equ	0xFE7
 25947                           postdec1	equ	0xFE5
 25948                           fsr1h	equ	0xFE2
 25949                           fsr1l	equ	0xFE1
 25950                           indf2	equ	0xFDF
 25951                           postinc2	equ	0xFDE
 25952                           postdec2	equ	0xFDD
 25953                           plusw2	equ	0xFDB
 25954                           fsr2h	equ	0xFDA
 25955                           fsr2l	equ	0xFD9
 25956                           status	equ	0xFD8
 25957                           
 25958 ;; *************** function _PortProperty_Valid *****************
 25959 ;; Defined at:
 25960 ;;		line 220 in file "Library/Types.c"
 25961 ;; Parameters:    Size  Location     Type
 25962 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 25963 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 25964 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 25965 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 25966 ;;		 -> PortC(10), PortF(10), NULL(0), 
 25967 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 25968 ;;  pPin            1   18[BANK0 ] unsigned char 
 25969 ;; Auto vars:     Size  Location     Type
 25970 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 25971 ;;  Pair            1   37[BANK0 ] enum E6469
 25972 ;; Return value:  Size  Location     Type
 25973 ;;                  1    wreg      enum E6475
 25974 ;; Registers used:
 25975 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25976 ;; Tracked objects:
 25977 ;;		On entry : 0/0
 25978 ;;		On exit  : 0/0
 25979 ;;		Unchanged: 0/0
 25980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25981 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25982 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25983 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25984 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25985 ;;Total ram usage:       23 bytes
 25986 ;; Hardware stack levels used:    1
 25987 ;; Hardware stack levels required when called:   10
 25988 ;; This function calls:
 25989 ;;		_Word_GetPair
 25990 ;; This function is called by:
 25991 ;;		_Port_CheckPairType
 25992 ;;		_Port_SetPinType
 25993 ;; This function uses a non-reentrant model
 25994 ;;
 25995                           
 25996                           	psect	text131
 25997  014E86                     __ptext131:
 25998                           	opt stack 0
 25999  014E86                     _PortProperty_Valid:
 26000                           	opt stack 17
 26001                           
 26002                           ;Types.c: 222: ePinDrive Pair;
 26003                           ;Types.c: 223: const ePinError Errors[4][4] =
 26004                           ;Types.c: 224: {
 26005                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 26006                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 26007                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 26008                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 26009                           ;Types.c: 230: };
 26010                           
 26011                           ; BSR set to: 0
 26012                           ;incstack = 0
 26013  014E86  0E85               	movlw	low PortProperty_Valid@F6830
 26014  014E88  6EF6               	movwf	tblptrl,c
 26015  014E8A                     	if	1	;There is more than 1 active tblptr byte
 26016  014E8A  0EFD               	movlw	high PortProperty_Valid@F6830
 26017  014E8C  6EF7               	movwf	tblptrh,c
 26018  014E8E                     	endif
 26019  014E8E                     	if	1	;There are 3 active tblptr bytes
 26020  014E8E  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 26021  014E90  6EF8               	movwf	tblptru,c
 26022  014E92                     	endif
 26023  014E92  EE20  F075         	lfsr	2,PortProperty_Valid@Errors
 26024  014E96  0E0F               	movlw	15
 26025  014E98                     u8640:
 26026  014E98  0009               	tblrd		*+
 26027  014E9A  CFF5 FFDE          	movff	tablat,postinc2
 26028  014E9E  06E8               	decf	wreg,f,c
 26029  014EA0  E2FB               	bc	u8640
 26030                           
 26031                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 26032  014EA2  C06F  F06C         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 26033  014EA6  C070  F06D         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 26034  014EAA  C072  F06E         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 26035  014EAE  EC0C  F0AF         	call	_Word_GetPair	;wreg free
 26036  014EB2  0100               	movlb	0	; () banked
 26037  014EB4  6F85               	movwf	PortProperty_Valid@Pair& (0+255),b
 26038                           
 26039                           ; BSR set to: 0
 26040                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 26041  014EB6  0E04               	movlw	4
 26042  014EB8  0100               	movlb	0	; () banked
 26043  014EBA  6171               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 26044  014EBC  D020               	goto	l819
 26045                           
 26046                           ; BSR set to: 0
 26047  014EBE  0E04               	movlw	4
 26048  014EC0  0100               	movlb	0	; () banked
 26049  014EC2  6185               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 26050  014EC4  D01C               	goto	l819
 26051                           
 26052                           ; BSR set to: 0
 26053                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 26054  014EC6  0100               	movlb	0	; () banked
 26055  014EC8  5171               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 26056  014ECA  0D04               	mullw	4
 26057  014ECC  0E75               	movlw	low PortProperty_Valid@Errors
 26058  014ECE  0100               	movlb	0	; () banked
 26059  014ED0  6F73               	movwf	??_PortProperty_Valid& (0+255),b
 26060  014ED2  0E00               	movlw	high PortProperty_Valid@Errors
 26061  014ED4  0100               	movlb	0	; () banked
 26062  014ED6  6F74               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 26063  014ED8  50F3               	movf	prodl,w,c
 26064  014EDA  0100               	movlb	0	; () banked
 26065  014EDC  2773               	addwf	??_PortProperty_Valid& (0+255),f,b
 26066  014EDE  50F4               	movf	prodh,w,c
 26067  014EE0  0100               	movlb	0	; () banked
 26068  014EE2  2374               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 26069  014EE4  0100               	movlb	0	; () banked
 26070  014EE6  5185               	movf	PortProperty_Valid@Pair& (0+255),w,b
 26071  014EE8  0D01               	mullw	1
 26072  014EEA  50F3               	movf	prodl,w,c
 26073  014EEC  0100               	movlb	0	; () banked
 26074  014EEE  2573               	addwf	??_PortProperty_Valid& (0+255),w,b
 26075  014EF0  6ED9               	movwf	fsr2l,c
 26076  014EF2  50F4               	movf	prodh,w,c
 26077  014EF4  0100               	movlb	0	; () banked
 26078  014EF6  2174               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 26079  014EF8  6EDA               	movwf	fsr2h,c
 26080  014EFA  50DF               	movf	indf2,w,c
 26081                           
 26082                           ; BSR set to: 0
 26083  014EFC  0012               	return	
 26084  014EFE                     l819:
 26085                           
 26086                           ; BSR set to: 0
 26087                           ;Types.c: 237: return ePinErrorState;
 26088                           
 26089                           ; BSR set to: 0
 26090  014EFE  0E05               	movlw	5
 26091  014F00  0012               	return	
 26092  014F02                     __end_of_PortProperty_Valid:
 26093                           	opt stack 0
 26094                           tosu	equ	0xFFF
 26095                           tosh	equ	0xFFE
 26096                           tosl	equ	0xFFD
 26097                           pclath	equ	0xFFA
 26098                           tblptru	equ	0xFF8
 26099                           tblptrh	equ	0xFF7
 26100                           tblptrl	equ	0xFF6
 26101                           tablat	equ	0xFF5
 26102                           prodh	equ	0xFF4
 26103                           prodl	equ	0xFF3
 26104                           intcon	equ	0xFF2
 26105                           postinc0	equ	0xFEE
 26106                           wreg	equ	0xFE8
 26107                           indf1	equ	0xFE7
 26108                           postdec1	equ	0xFE5
 26109                           fsr1h	equ	0xFE2
 26110                           fsr1l	equ	0xFE1
 26111                           indf2	equ	0xFDF
 26112                           postinc2	equ	0xFDE
 26113                           postdec2	equ	0xFDD
 26114                           plusw2	equ	0xFDB
 26115                           fsr2h	equ	0xFDA
 26116                           fsr2l	equ	0xFD9
 26117                           status	equ	0xFD8
 26118                           
 26119 ;; *************** function _Word_GetPair *****************
 26120 ;; Defined at:
 26121 ;;		line 156 in file "Library/Types.c"
 26122 ;; Parameters:    Size  Location     Type
 26123 ;;  pInput          2   12[BANK0 ] PTR struct Word
 26124 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 26125 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 26126 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 26127 ;;		 -> PortC(10), PortF(10), NULL(0), 
 26128 ;;  pPair           1   14[BANK0 ] unsigned char 
 26129 ;; Auto vars:     Size  Location     Type
 26130 ;;		None
 26131 ;; Return value:  Size  Location     Type
 26132 ;;                  1    wreg      unsigned char 
 26133 ;; Registers used:
 26134 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26135 ;; Tracked objects:
 26136 ;;		On entry : 0/0
 26137 ;;		On exit  : 0/0
 26138 ;;		Unchanged: 0/0
 26139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26140 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26141 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26143 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26144 ;;Total ram usage:        3 bytes
 26145 ;; Hardware stack levels used:    1
 26146 ;; Hardware stack levels required when called:    9
 26147 ;; This function calls:
 26148 ;;		_Byte_GetPair
 26149 ;; This function is called by:
 26150 ;;		_Port_Init
 26151 ;;		_Port_SetPin
 26152 ;;		_Port_Set
 26153 ;;		_PortProperty_Valid
 26154 ;;		_Port_SetPair
 26155 ;;		_Port_SetQuad
 26156 ;; This function uses a non-reentrant model
 26157 ;;
 26158                           
 26159                           	psect	text132
 26160  015E18                     __ptext132:
 26161                           	opt stack 0
 26162  015E18                     _Word_GetPair:
 26163                           	opt stack 17
 26164                           
 26165                           ;Types.c: 158: if (pPair >= 4)
 26166                           
 26167                           ; BSR set to: 0
 26168                           ;incstack = 0
 26169  015E18  0E03               	movlw	3
 26170  015E1A  0100               	movlb	0	; () banked
 26171  015E1C  656E               	cpfsgt	Word_GetPair@pPair& (0+255),b
 26172  015E1E  D012               	goto	l781
 26173                           
 26174                           ; BSR set to: 0
 26175                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 26176  015E20  0E01               	movlw	1
 26177  015E22  0100               	movlb	0	; () banked
 26178  015E24  256C               	addwf	Word_GetPair@pInput& (0+255),w,b
 26179  015E26  0100               	movlb	0	; () banked
 26180  015E28  6F69               	movwf	Byte_GetPair@pInput& (0+255),b
 26181  015E2A  0E00               	movlw	0
 26182  015E2C  0100               	movlb	0	; () banked
 26183  015E2E  216D               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 26184  015E30  0100               	movlb	0	; () banked
 26185  015E32  6F6A               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 26186  015E34  0100               	movlb	0	; () banked
 26187  015E36  516E               	movf	Word_GetPair@pPair& (0+255),w,b
 26188  015E38  0FFC               	addlw	252
 26189  015E3A  0100               	movlb	0	; () banked
 26190  015E3C  6F6B               	movwf	Byte_GetPair@pPair& (0+255),b
 26191  015E3E  EC74  F0B1         	call	_Byte_GetPair	;wreg free
 26192  015E42  0012               	return	
 26193  015E44                     l781:
 26194                           
 26195                           ;Types.c: 160: else
 26196                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 26197  015E44  C06C  F069         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 26198  015E48  C06D  F06A         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 26199  015E4C  C06E  F06B         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 26200  015E50  EC74  F0B1         	call	_Byte_GetPair	;wreg free
 26201  015E54  0012               	return	
 26202  015E56                     __end_of_Word_GetPair:
 26203                           	opt stack 0
 26204                           tosu	equ	0xFFF
 26205                           tosh	equ	0xFFE
 26206                           tosl	equ	0xFFD
 26207                           pclath	equ	0xFFA
 26208                           tblptru	equ	0xFF8
 26209                           tblptrh	equ	0xFF7
 26210                           tblptrl	equ	0xFF6
 26211                           tablat	equ	0xFF5
 26212                           prodh	equ	0xFF4
 26213                           prodl	equ	0xFF3
 26214                           intcon	equ	0xFF2
 26215                           postinc0	equ	0xFEE
 26216                           wreg	equ	0xFE8
 26217                           indf1	equ	0xFE7
 26218                           postdec1	equ	0xFE5
 26219                           fsr1h	equ	0xFE2
 26220                           fsr1l	equ	0xFE1
 26221                           indf2	equ	0xFDF
 26222                           postinc2	equ	0xFDE
 26223                           postdec2	equ	0xFDD
 26224                           plusw2	equ	0xFDB
 26225                           fsr2h	equ	0xFDA
 26226                           fsr2l	equ	0xFD9
 26227                           status	equ	0xFD8
 26228                           
 26229 ;; *************** function _Byte_GetPair *****************
 26230 ;; Defined at:
 26231 ;;		line 87 in file "Library/Types.c"
 26232 ;; Parameters:    Size  Location     Type
 26233 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 26234 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 26235 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 26236 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 26237 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 26238 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 26239 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 26240 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 26241 ;;		 -> NULL(0), 
 26242 ;;  pPair           1   11[BANK0 ] unsigned char 
 26243 ;; Auto vars:     Size  Location     Type
 26244 ;;		None
 26245 ;; Return value:  Size  Location     Type
 26246 ;;                  1    wreg      unsigned char 
 26247 ;; Registers used:
 26248 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26249 ;; Tracked objects:
 26250 ;;		On entry : 0/0
 26251 ;;		On exit  : 0/0
 26252 ;;		Unchanged: 0/0
 26253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26254 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26257 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26258 ;;Total ram usage:        3 bytes
 26259 ;; Hardware stack levels used:    1
 26260 ;; Hardware stack levels required when called:    8
 26261 ;; This function calls:
 26262 ;;		_Byte_GetZone
 26263 ;; This function is called by:
 26264 ;;		_Word_GetPair
 26265 ;; This function uses a non-reentrant model
 26266 ;;
 26267                           
 26268                           	psect	text133
 26269  0162E8                     __ptext133:
 26270                           	opt stack 0
 26271  0162E8                     _Byte_GetPair:
 26272                           	opt stack 17
 26273                           
 26274                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 26275                           
 26276                           ;incstack = 0
 26277  0162E8  C069  F060         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 26278  0162EC  C06A  F061         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 26279  0162F0  0E04               	movlw	4
 26280  0162F2  0100               	movlb	0	; () banked
 26281  0162F4  6F62               	movwf	Byte_GetZone@pMax& (0+255),b
 26282  0162F6  C06B  F063         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 26283  0162FA  0E02               	movlw	2
 26284  0162FC  0100               	movlb	0	; () banked
 26285  0162FE  6F64               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 26286  016300  ECC7  F0A4         	call	_Byte_GetZone	;wreg free
 26287  016304  0012               	return	
 26288  016306                     __end_of_Byte_GetPair:
 26289                           	opt stack 0
 26290                           tosu	equ	0xFFF
 26291                           tosh	equ	0xFFE
 26292                           tosl	equ	0xFFD
 26293                           pclath	equ	0xFFA
 26294                           tblptru	equ	0xFF8
 26295                           tblptrh	equ	0xFF7
 26296                           tblptrl	equ	0xFF6
 26297                           tablat	equ	0xFF5
 26298                           prodh	equ	0xFF4
 26299                           prodl	equ	0xFF3
 26300                           intcon	equ	0xFF2
 26301                           postinc0	equ	0xFEE
 26302                           wreg	equ	0xFE8
 26303                           indf1	equ	0xFE7
 26304                           postdec1	equ	0xFE5
 26305                           fsr1h	equ	0xFE2
 26306                           fsr1l	equ	0xFE1
 26307                           indf2	equ	0xFDF
 26308                           postinc2	equ	0xFDE
 26309                           postdec2	equ	0xFDD
 26310                           plusw2	equ	0xFDB
 26311                           fsr2h	equ	0xFDA
 26312                           fsr2l	equ	0xFD9
 26313                           status	equ	0xFD8
 26314                           
 26315 ;; *************** function _Byte_GetZone *****************
 26316 ;; Defined at:
 26317 ;;		line 64 in file "Library/Types.c"
 26318 ;; Parameters:    Size  Location     Type
 26319 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 26320 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 26321 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 26322 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 26323 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 26324 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 26325 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 26326 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 26327 ;;		 -> NULL(0), 
 26328 ;;  pMax            1    2[BANK0 ] unsigned char 
 26329 ;;  pChunk          1    3[BANK0 ] unsigned char 
 26330 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 26331 ;; Auto vars:     Size  Location     Type
 26332 ;;  Output          1    8[BANK0 ] unsigned char 
 26333 ;;  Offset          1    7[BANK0 ] unsigned char 
 26334 ;;  MASK            1    6[BANK0 ] unsigned char 
 26335 ;; Return value:  Size  Location     Type
 26336 ;;                  1    wreg      unsigned char 
 26337 ;; Registers used:
 26338 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 26339 ;; Tracked objects:
 26340 ;;		On entry : 0/0
 26341 ;;		On exit  : 0/0
 26342 ;;		Unchanged: 0/0
 26343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26344 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26345 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26346 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26347 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26348 ;;Total ram usage:        9 bytes
 26349 ;; Hardware stack levels used:    1
 26350 ;; Hardware stack levels required when called:    7
 26351 ;; This function calls:
 26352 ;;		Nothing
 26353 ;; This function is called by:
 26354 ;;		_Byte_GetPair
 26355 ;;		_Byte_GetTriple
 26356 ;;		_Byte_GetQuad
 26357 ;; This function uses a non-reentrant model
 26358 ;;
 26359                           
 26360                           	psect	text134
 26361  01498E                     __ptext134:
 26362                           	opt stack 0
 26363  01498E                     _Byte_GetZone:
 26364                           	opt stack 17
 26365                           
 26366                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 26367                           
 26368                           ;incstack = 0
 26369  01498E  C060  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 26370  014992  C061  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 26371  014996  0E00               	movlw	low (__mediumconst shr (0+16))
 26372  014998  6EF8               	movwf	tblptru,c
 26373  01499A  0E0F               	movlw	(high __ramtop+-1)
 26374  01499C  64F7               	cpfsgt	tblptrh,c
 26375  01499E  D003               	bra	u8607
 26376  0149A0  0008               	tblrd		*
 26377  0149A2  50F5               	movf	tablat,w,c
 26378  0149A4  D005               	bra	u8600
 26379  0149A6                     u8607:
 26380  0149A6  CFF6 FFE9          	movff	tblptrl,fsr0l
 26381  0149AA  CFF7 FFEA          	movff	tblptrh,fsr0h
 26382  0149AE  50EF               	movf	indf0,w,c
 26383  0149B0                     u8600:
 26384  0149B0  0100               	movlb	0	; () banked
 26385  0149B2  6F68               	movwf	Byte_GetZone@Output& (0+255),b
 26386                           
 26387                           ; BSR set to: 0
 26388                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 26389  0149B4  0100               	movlb	0	; () banked
 26390  0149B6  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 26391  0149B8  0D01               	mullw	1
 26392  0149BA  0E9F               	movlw	low _MASKS
 26393  0149BC  24F3               	addwf	prodl,w,c
 26394  0149BE  6EF6               	movwf	tblptrl,c
 26395  0149C0  0EFD               	movlw	high _MASKS
 26396  0149C2  20F4               	addwfc	prodh,w,c
 26397  0149C4  6EF7               	movwf	tblptrh,c
 26398  0149C6                     	if	1	;There are 3 active tblptr bytes
 26399  0149C6  6AF8               	clrf	tblptru,c
 26400  0149C8  0E00               	movlw	low (__mediumconst shr (0+16))
 26401  0149CA  22F8               	addwfc	tblptru,f,c
 26402  0149CC                     	endif
 26403  0149CC  0008               	tblrd		*
 26404  0149CE  CFF5 F066          	movff	tablat,Byte_GetZone@MASK
 26405                           
 26406                           ; BSR set to: 0
 26407                           ;Types.c: 68: UINT8 Offset = 0;
 26408  0149D2  0E00               	movlw	0
 26409  0149D4  0100               	movlb	0	; () banked
 26410  0149D6  6F67               	movwf	Byte_GetZone@Offset& (0+255),b
 26411                           
 26412                           ;Types.c: 70: while (pChunk >= pMax)
 26413  0149D8  D006               	goto	l732
 26414  0149DA                     
 26415                           ; BSR set to: 0
 26416                           ;Types.c: 71: {
 26417                           ;Types.c: 72: pChunk -= pMax;
 26418                           
 26419                           ; BSR set to: 0
 26420  0149DA  0100               	movlb	0	; () banked
 26421  0149DC  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 26422  0149DE  0100               	movlb	0	; () banked
 26423  0149E0  5F63               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 26424                           
 26425                           ; BSR set to: 0
 26426                           ;Types.c: 73: Offset += 1;
 26427  0149E2  0100               	movlb	0	; () banked
 26428  0149E4  2B67               	incf	Byte_GetZone@Offset& (0+255),f,b
 26429  0149E6                     l732:
 26430                           
 26431                           ; BSR set to: 0
 26432                           
 26433                           ; BSR set to: 0
 26434  0149E6  0100               	movlb	0	; () banked
 26435  0149E8  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 26436  0149EA  0100               	movlb	0	; () banked
 26437  0149EC  5D63               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 26438  0149EE  B0D8               	btfsc	status,0,c
 26439  0149F0  D7F4               	goto	l733
 26440                           
 26441                           ; BSR set to: 0
 26442                           ;Types.c: 74: }
 26443                           ;Types.c: 75: pChunk *= pChunkSize;
 26444                           
 26445                           ; BSR set to: 0
 26446  0149F2  0100               	movlb	0	; () banked
 26447  0149F4  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 26448  0149F6  0100               	movlb	0	; () banked
 26449  0149F8  0363               	mulwf	Byte_GetZone@pChunk& (0+255),b
 26450  0149FA  50F3               	movf	prodl,w,c
 26451  0149FC  6F63               	movwf	Byte_GetZone@pChunk& (0+255),b
 26452                           
 26453                           ; BSR set to: 0
 26454                           ;Types.c: 76: pChunk += Offset;
 26455  0149FE  0100               	movlb	0	; () banked
 26456  014A00  5167               	movf	Byte_GetZone@Offset& (0+255),w,b
 26457  014A02  0100               	movlb	0	; () banked
 26458  014A04  2763               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 26459                           
 26460                           ; BSR set to: 0
 26461                           ;Types.c: 78: Output >>= pChunk;
 26462  014A06  0100               	movlb	0	; () banked
 26463  014A08  2963               	incf	Byte_GetZone@pChunk& (0+255),w,b
 26464  014A0A  0100               	movlb	0	; () banked
 26465  014A0C  6F65               	movwf	??_Byte_GetZone& (0+255),b
 26466  014A0E  D003               	goto	u8620
 26467  014A10                     u8625:
 26468  014A10  0100               	movlb	0	; () banked
 26469  014A12  90D8               	bcf	status,0,c
 26470  014A14  3368               	rrcf	Byte_GetZone@Output& (0+255),f,b
 26471  014A16                     u8620:
 26472  014A16  0100               	movlb	0	; () banked
 26473  014A18  2F65               	decfsz	??_Byte_GetZone& (0+255),f,b
 26474  014A1A  D7FA               	goto	u8625
 26475                           
 26476                           ;Types.c: 79: Output &= MASK;
 26477  014A1C  0100               	movlb	0	; () banked
 26478  014A1E  5166               	movf	Byte_GetZone@MASK& (0+255),w,b
 26479  014A20  0100               	movlb	0	; () banked
 26480  014A22  1768               	andwf	Byte_GetZone@Output& (0+255),f,b
 26481                           
 26482                           ; BSR set to: 0
 26483                           ;Types.c: 80: return Output;
 26484  014A24  0100               	movlb	0	; () banked
 26485  014A26  5168               	movf	Byte_GetZone@Output& (0+255),w,b
 26486  014A28  0012               	return	
 26487  014A2A                     __end_of_Byte_GetZone:
 26488                           	opt stack 0
 26489                           tosu	equ	0xFFF
 26490                           tosh	equ	0xFFE
 26491                           tosl	equ	0xFFD
 26492                           pclath	equ	0xFFA
 26493                           tblptru	equ	0xFF8
 26494                           tblptrh	equ	0xFF7
 26495                           tblptrl	equ	0xFF6
 26496                           tablat	equ	0xFF5
 26497                           prodh	equ	0xFF4
 26498                           prodl	equ	0xFF3
 26499                           intcon	equ	0xFF2
 26500                           indf0	equ	0xFEF
 26501                           postinc0	equ	0xFEE
 26502                           fsr0h	equ	0xFEA
 26503                           fsr0l	equ	0xFE9
 26504                           wreg	equ	0xFE8
 26505                           indf1	equ	0xFE7
 26506                           postdec1	equ	0xFE5
 26507                           fsr1h	equ	0xFE2
 26508                           fsr1l	equ	0xFE1
 26509                           indf2	equ	0xFDF
 26510                           postinc2	equ	0xFDE
 26511                           postdec2	equ	0xFDD
 26512                           plusw2	equ	0xFDB
 26513                           fsr2h	equ	0xFDA
 26514                           fsr2l	equ	0xFD9
 26515                           status	equ	0xFD8
 26516                           
 26517 ;; *************** function _Byte_SetQuad *****************
 26518 ;; Defined at:
 26519 ;;		line 101 in file "Library/Types.c"
 26520 ;; Parameters:    Size  Location     Type
 26521 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 26522 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 26523 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 26524 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 26525 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 26526 ;;		 -> NULL(0), 
 26527 ;;  pQuad           1   13[BANK0 ] unsigned char 
 26528 ;;  pValue          1   14[BANK0 ] unsigned char 
 26529 ;; Auto vars:     Size  Location     Type
 26530 ;;		None
 26531 ;; Return value:  Size  Location     Type
 26532 ;;                  1    wreg      void 
 26533 ;; Registers used:
 26534 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26535 ;; Tracked objects:
 26536 ;;		On entry : 0/0
 26537 ;;		On exit  : 0/0
 26538 ;;		Unchanged: 0/0
 26539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26540 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26543 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26544 ;;Total ram usage:        4 bytes
 26545 ;; Hardware stack levels used:    1
 26546 ;; Hardware stack levels required when called:    8
 26547 ;; This function calls:
 26548 ;;		_Byte_SetZone
 26549 ;; This function is called by:
 26550 ;;		_Port_SetQuadType
 26551 ;;		_SPI_Init
 26552 ;;		_SPI_MinSpeed
 26553 ;;		_SPI_MaxSpeed
 26554 ;;		_Port_SetQuad
 26555 ;;		_Word_SetQuad
 26556 ;;		_I2C_Init
 26557 ;; This function uses a non-reentrant model
 26558 ;;
 26559                           
 26560                           	psect	text135
 26561  0161D4                     __ptext135:
 26562                           	opt stack 0
 26563  0161D4                     _Byte_SetQuad:
 26564                           	opt stack 19
 26565                           
 26566                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 26567                           
 26568                           ; BSR set to: 0
 26569                           ;incstack = 0
 26570  0161D4  C06B  F060         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 26571  0161D8  C06C  F061         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 26572  0161DC  0E02               	movlw	2
 26573  0161DE  0100               	movlb	0	; () banked
 26574  0161E0  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 26575  0161E2  C06D  F063         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 26576  0161E6  0E04               	movlw	4
 26577  0161E8  0100               	movlb	0	; () banked
 26578  0161EA  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 26579  0161EC  C06E  F065         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 26580  0161F0  EC24  F0A1         	call	_Byte_SetZone	;wreg free
 26581  0161F4  0012               	return		;funcret
 26582  0161F6                     __end_of_Byte_SetQuad:
 26583                           	opt stack 0
 26584                           tosu	equ	0xFFF
 26585                           tosh	equ	0xFFE
 26586                           tosl	equ	0xFFD
 26587                           pclath	equ	0xFFA
 26588                           tblptru	equ	0xFF8
 26589                           tblptrh	equ	0xFF7
 26590                           tblptrl	equ	0xFF6
 26591                           tablat	equ	0xFF5
 26592                           prodh	equ	0xFF4
 26593                           prodl	equ	0xFF3
 26594                           intcon	equ	0xFF2
 26595                           indf0	equ	0xFEF
 26596                           postinc0	equ	0xFEE
 26597                           fsr0h	equ	0xFEA
 26598                           fsr0l	equ	0xFE9
 26599                           wreg	equ	0xFE8
 26600                           indf1	equ	0xFE7
 26601                           postdec1	equ	0xFE5
 26602                           fsr1h	equ	0xFE2
 26603                           fsr1l	equ	0xFE1
 26604                           indf2	equ	0xFDF
 26605                           postinc2	equ	0xFDE
 26606                           postdec2	equ	0xFDD
 26607                           plusw2	equ	0xFDB
 26608                           fsr2h	equ	0xFDA
 26609                           fsr2l	equ	0xFD9
 26610                           status	equ	0xFD8
 26611                           
 26612 ;; *************** function _Byte_SetZone *****************
 26613 ;; Defined at:
 26614 ;;		line 47 in file "Library/Types.c"
 26615 ;; Parameters:    Size  Location     Type
 26616 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 26617 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 26618 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 26619 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 26620 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 26621 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 26622 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 26623 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 26624 ;;		 -> PortC(10), PortF(10), NULL(0), 
 26625 ;;  pMax            1    2[BANK0 ] unsigned char 
 26626 ;;  pChunk          1    3[BANK0 ] unsigned char 
 26627 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 26628 ;;  pValue          1    5[BANK0 ] unsigned char 
 26629 ;; Auto vars:     Size  Location     Type
 26630 ;;  MASK            1   10[BANK0 ] unsigned char 
 26631 ;;  Offset          1    9[BANK0 ] unsigned char 
 26632 ;; Return value:  Size  Location     Type
 26633 ;;                  1    wreg      void 
 26634 ;; Registers used:
 26635 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 26636 ;; Tracked objects:
 26637 ;;		On entry : 0/0
 26638 ;;		On exit  : 0/0
 26639 ;;		Unchanged: 0/0
 26640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26641 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26642 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26643 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26644 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26645 ;;Total ram usage:       11 bytes
 26646 ;; Hardware stack levels used:    1
 26647 ;; Hardware stack levels required when called:    7
 26648 ;; This function calls:
 26649 ;;		Nothing
 26650 ;; This function is called by:
 26651 ;;		_Byte_SetPair
 26652 ;;		_Byte_SetQuad
 26653 ;;		_Byte_SetTriple
 26654 ;; This function uses a non-reentrant model
 26655 ;;
 26656                           
 26657                           	psect	text136
 26658  014248                     __ptext136:
 26659                           	opt stack 0
 26660  014248                     _Byte_SetZone:
 26661                           	opt stack 18
 26662                           
 26663                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 26664                           
 26665                           ;incstack = 0
 26666  014248  0100               	movlb	0	; () banked
 26667  01424A  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 26668  01424C  0D01               	mullw	1
 26669  01424E  0E9F               	movlw	low _MASKS
 26670  014250  24F3               	addwf	prodl,w,c
 26671  014252  6EF6               	movwf	tblptrl,c
 26672  014254  0EFD               	movlw	high _MASKS
 26673  014256  20F4               	addwfc	prodh,w,c
 26674  014258  6EF7               	movwf	tblptrh,c
 26675  01425A                     	if	1	;There are 3 active tblptr bytes
 26676  01425A  6AF8               	clrf	tblptru,c
 26677  01425C  0E00               	movlw	low (__mediumconst shr (0+16))
 26678  01425E  22F8               	addwfc	tblptru,f,c
 26679  014260                     	endif
 26680  014260  0008               	tblrd		*
 26681  014262  CFF5 F06A          	movff	tablat,Byte_SetZone@MASK
 26682                           
 26683                           ; BSR set to: 0
 26684                           ;Types.c: 50: UINT8 Offset = 0;
 26685  014266  0E00               	movlw	0
 26686  014268  0100               	movlb	0	; () banked
 26687  01426A  6F69               	movwf	Byte_SetZone@Offset& (0+255),b
 26688                           
 26689                           ;Types.c: 52: while (pChunk >= pMax)
 26690  01426C  D006               	goto	l726
 26691  01426E                     
 26692                           ; BSR set to: 0
 26693                           ;Types.c: 53: {
 26694                           ;Types.c: 54: pChunk -= pMax;
 26695                           
 26696                           ; BSR set to: 0
 26697  01426E  0100               	movlb	0	; () banked
 26698  014270  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 26699  014272  0100               	movlb	0	; () banked
 26700  014274  5F63               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 26701                           
 26702                           ; BSR set to: 0
 26703                           ;Types.c: 55: Offset += 1;
 26704  014276  0100               	movlb	0	; () banked
 26705  014278  2B69               	incf	Byte_SetZone@Offset& (0+255),f,b
 26706  01427A                     l726:
 26707                           
 26708                           ; BSR set to: 0
 26709                           
 26710                           ; BSR set to: 0
 26711  01427A  0100               	movlb	0	; () banked
 26712  01427C  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 26713  01427E  0100               	movlb	0	; () banked
 26714  014280  5D63               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 26715  014282  B0D8               	btfsc	status,0,c
 26716  014284  D7F4               	goto	l727
 26717                           
 26718                           ; BSR set to: 0
 26719                           ;Types.c: 56: }
 26720                           ;Types.c: 57: pChunk *= pChunkSize;
 26721                           
 26722                           ; BSR set to: 0
 26723  014286  0100               	movlb	0	; () banked
 26724  014288  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 26725  01428A  0100               	movlb	0	; () banked
 26726  01428C  0363               	mulwf	Byte_SetZone@pChunk& (0+255),b
 26727  01428E  50F3               	movf	prodl,w,c
 26728  014290  6F63               	movwf	Byte_SetZone@pChunk& (0+255),b
 26729                           
 26730                           ; BSR set to: 0
 26731                           ;Types.c: 58: pChunk += Offset;
 26732  014292  0100               	movlb	0	; () banked
 26733  014294  5169               	movf	Byte_SetZone@Offset& (0+255),w,b
 26734  014296  0100               	movlb	0	; () banked
 26735  014298  2763               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 26736                           
 26737                           ; BSR set to: 0
 26738                           ;Types.c: 60: pValue &= MASK;
 26739  01429A  0100               	movlb	0	; () banked
 26740  01429C  516A               	movf	Byte_SetZone@MASK& (0+255),w,b
 26741  01429E  0100               	movlb	0	; () banked
 26742  0142A0  1765               	andwf	Byte_SetZone@pValue& (0+255),f,b
 26743                           
 26744                           ; BSR set to: 0
 26745                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 26746  0142A2  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 26747  0142A6  C06A  F067         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 26748  0142AA  0100               	movlb	0	; () banked
 26749  0142AC  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 26750  0142AE  D003               	goto	u8704
 26751  0142B0                     u8705:
 26752  0142B0  0100               	movlb	0	; () banked
 26753  0142B2  90D8               	bcf	status,0,c
 26754  0142B4  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 26755  0142B6                     u8704:
 26756  0142B6  0100               	movlb	0	; () banked
 26757  0142B8  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 26758  0142BA  D7FA               	goto	u8705
 26759  0142BC  0100               	movlb	0	; () banked
 26760  0142BE  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 26761  0142C0  0AFF               	xorlw	255
 26762  0142C2  0100               	movlb	0	; () banked
 26763  0142C4  6F68               	movwf	(??_Byte_SetZone+2)& (0+255),b
 26764  0142C6  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 26765  0142CA  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 26766  0142CE  0100               	movlb	0	; () banked
 26767  0142D0  5168               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 26768  0142D2  16DF               	andwf	indf2,f,c
 26769                           
 26770                           ; BSR set to: 0
 26771                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 26772  0142D4  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 26773  0142D8  C065  F067         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 26774  0142DC  0100               	movlb	0	; () banked
 26775  0142DE  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 26776  0142E0  D003               	goto	u8714
 26777  0142E2                     u8715:
 26778  0142E2  0100               	movlb	0	; () banked
 26779  0142E4  90D8               	bcf	status,0,c
 26780  0142E6  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 26781  0142E8                     u8714:
 26782  0142E8  0100               	movlb	0	; () banked
 26783  0142EA  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 26784  0142EC  D7FA               	goto	u8715
 26785  0142EE  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 26786  0142F2  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 26787  0142F6  0100               	movlb	0	; () banked
 26788  0142F8  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 26789  0142FA  12DF               	iorwf	indf2,f,c
 26790                           
 26791                           ; BSR set to: 0
 26792  0142FC  0012               	return		;funcret
 26793  0142FE                     __end_of_Byte_SetZone:
 26794                           	opt stack 0
 26795                           tosu	equ	0xFFF
 26796                           tosh	equ	0xFFE
 26797                           tosl	equ	0xFFD
 26798                           pclath	equ	0xFFA
 26799                           tblptru	equ	0xFF8
 26800                           tblptrh	equ	0xFF7
 26801                           tblptrl	equ	0xFF6
 26802                           tablat	equ	0xFF5
 26803                           prodh	equ	0xFF4
 26804                           prodl	equ	0xFF3
 26805                           intcon	equ	0xFF2
 26806                           indf0	equ	0xFEF
 26807                           postinc0	equ	0xFEE
 26808                           fsr0h	equ	0xFEA
 26809                           fsr0l	equ	0xFE9
 26810                           wreg	equ	0xFE8
 26811                           indf1	equ	0xFE7
 26812                           postdec1	equ	0xFE5
 26813                           fsr1h	equ	0xFE2
 26814                           fsr1l	equ	0xFE1
 26815                           indf2	equ	0xFDF
 26816                           postinc2	equ	0xFDE
 26817                           postdec2	equ	0xFDD
 26818                           plusw2	equ	0xFDB
 26819                           fsr2h	equ	0xFDA
 26820                           fsr2l	equ	0xFD9
 26821                           status	equ	0xFD8
 26822                           
 26823 ;; *************** function _Console_Init *****************
 26824 ;; Defined at:
 26825 ;;		line 157 in file "Library/Console.c"
 26826 ;; Parameters:    Size  Location     Type
 26827 ;;		None
 26828 ;; Auto vars:     Size  Location     Type
 26829 ;;  y               1    3[BANK0 ] unsigned char 
 26830 ;;  x               1    2[BANK0 ] unsigned char 
 26831 ;; Return value:  Size  Location     Type
 26832 ;;                  1    wreg      void 
 26833 ;; Registers used:
 26834 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 26835 ;; Tracked objects:
 26836 ;;		On entry : 0/0
 26837 ;;		On exit  : 0/0
 26838 ;;		Unchanged: 0/0
 26839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26841 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26842 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26843 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26844 ;;Total ram usage:        4 bytes
 26845 ;; Hardware stack levels used:    1
 26846 ;; Hardware stack levels required when called:    7
 26847 ;; This function calls:
 26848 ;;		Nothing
 26849 ;; This function is called by:
 26850 ;;		_init
 26851 ;; This function uses a non-reentrant model
 26852 ;;
 26853                           
 26854                           	psect	text137
 26855  014C6C                     __ptext137:
 26856                           	opt stack 0
 26857  014C6C                     _Console_Init:
 26858                           	opt stack 22
 26859                           
 26860                           ;Console.c: 160: lBufferX = 0;
 26861                           
 26862                           ; BSR set to: 0
 26863                           ;incstack = 0
 26864  014C6C  0E00               	movlw	0
 26865  014C6E  0100               	movlb	0	; () banked
 26866  014C70  6FDE               	movwf	_lBufferX& (0+255),b
 26867                           
 26868                           ;Console.c: 161: lBufferY = 0;
 26869  014C72  0E00               	movlw	0
 26870  014C74  0100               	movlb	0	; () banked
 26871  014C76  6FDD               	movwf	_lBufferY& (0+255),b
 26872                           
 26873                           ;Console.c: 163: UINT8 x, y;
 26874                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 26875  014C78  0E00               	movlw	0
 26876  014C7A  0100               	movlb	0	; () banked
 26877  014C7C  6F62               	movwf	Console_Init@x& (0+255),b
 26878  014C7E                     l14013:
 26879                           
 26880                           ; BSR set to: 0
 26881  014C7E  0E13               	movlw	19
 26882  014C80  0100               	movlb	0	; () banked
 26883  014C82  6562               	cpfsgt	Console_Init@x& (0+255),b
 26884  014C84  D001               	goto	l976
 26885  014C86  0012               	return	
 26886  014C88                     l976:
 26887                           
 26888                           ; BSR set to: 0
 26889                           ;Console.c: 165: {
 26890                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 26891                           
 26892                           ; BSR set to: 0
 26893  014C88  0E00               	movlw	0
 26894  014C8A  0100               	movlb	0	; () banked
 26895  014C8C  6F63               	movwf	Console_Init@y& (0+255),b
 26896  014C8E                     l14019:
 26897                           
 26898                           ; BSR set to: 0
 26899  014C8E  0E0E               	movlw	14
 26900  014C90  0100               	movlb	0	; () banked
 26901  014C92  6563               	cpfsgt	Console_Init@y& (0+255),b
 26902  014C94  D001               	goto	l978
 26903  014C96  D02C               	goto	u10800
 26904  014C98                     l978:
 26905                           
 26906                           ; BSR set to: 0
 26907                           ;Console.c: 167: {
 26908                           ;Console.c: 168: lBuffer[y][x] = '\0';
 26909                           
 26910                           ; BSR set to: 0
 26911  014C98  0100               	movlb	0	; () banked
 26912  014C9A  5163               	movf	Console_Init@y& (0+255),w,b
 26913  014C9C  0D14               	mullw	20
 26914  014C9E  0EC8               	movlw	low _lBuffer
 26915  014CA0  0100               	movlb	0	; () banked
 26916  014CA2  6F60               	movwf	??_Console_Init& (0+255),b
 26917  014CA4  0E04               	movlw	high _lBuffer
 26918  014CA6  0100               	movlb	0	; () banked
 26919  014CA8  6F61               	movwf	(??_Console_Init+1)& (0+255),b
 26920  014CAA  50F3               	movf	prodl,w,c
 26921  014CAC  0100               	movlb	0	; () banked
 26922  014CAE  2760               	addwf	??_Console_Init& (0+255),f,b
 26923  014CB0  50F4               	movf	prodh,w,c
 26924  014CB2  0100               	movlb	0	; () banked
 26925  014CB4  2361               	addwfc	(??_Console_Init+1)& (0+255),f,b
 26926  014CB6  0100               	movlb	0	; () banked
 26927  014CB8  5162               	movf	Console_Init@x& (0+255),w,b
 26928  014CBA  0D01               	mullw	1
 26929  014CBC  50F3               	movf	prodl,w,c
 26930  014CBE  0100               	movlb	0	; () banked
 26931  014CC0  2560               	addwf	??_Console_Init& (0+255),w,b
 26932  014CC2  6ED9               	movwf	fsr2l,c
 26933  014CC4  50F4               	movf	prodh,w,c
 26934  014CC6  0100               	movlb	0	; () banked
 26935  014CC8  2161               	addwfc	(??_Console_Init+1)& (0+255),w,b
 26936  014CCA  6EDA               	movwf	fsr2h,c
 26937  014CCC  0E00               	movlw	0
 26938  014CCE  6EDF               	movwf	indf2,c
 26939                           
 26940                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 26941  014CD0  0100               	movlb	0	; () banked
 26942  014CD2  5163               	movf	Console_Init@y& (0+255),w,b
 26943  014CD4  0D02               	mullw	2
 26944  014CD6  0E00               	movlw	low _lCBuffer
 26945  014CD8  24F3               	addwf	prodl,w,c
 26946  014CDA  6ED9               	movwf	fsr2l,c
 26947  014CDC  0E04               	movlw	high _lCBuffer
 26948  014CDE  20F4               	addwfc	prodh,w,c
 26949  014CE0  6EDA               	movwf	fsr2h,c
 26950  014CE2  0EFF               	movlw	255
 26951  014CE4  6EDE               	movwf	postinc2,c
 26952  014CE6  0EFF               	movlw	255
 26953  014CE8  6EDD               	movwf	postdec2,c
 26954                           
 26955                           ; BSR set to: 0
 26956  014CEA  0100               	movlb	0	; () banked
 26957  014CEC  2B63               	incf	Console_Init@y& (0+255),f,b
 26958  014CEE  D7CF               	goto	l14019
 26959  014CF0                     u10800:
 26960                           
 26961                           ; BSR set to: 0
 26962                           
 26963                           ; BSR set to: 0
 26964  014CF0  0100               	movlb	0	; () banked
 26965  014CF2  2B62               	incf	Console_Init@x& (0+255),f,b
 26966  014CF4  D7C4               	goto	l14013
 26967  014CF6                     __end_of_Console_Init:
 26968                           	opt stack 0
 26969                           tosu	equ	0xFFF
 26970                           tosh	equ	0xFFE
 26971                           tosl	equ	0xFFD
 26972                           pclath	equ	0xFFA
 26973                           tblptru	equ	0xFF8
 26974                           tblptrh	equ	0xFF7
 26975                           tblptrl	equ	0xFF6
 26976                           tablat	equ	0xFF5
 26977                           prodh	equ	0xFF4
 26978                           prodl	equ	0xFF3
 26979                           intcon	equ	0xFF2
 26980                           indf0	equ	0xFEF
 26981                           postinc0	equ	0xFEE
 26982                           fsr0h	equ	0xFEA
 26983                           fsr0l	equ	0xFE9
 26984                           wreg	equ	0xFE8
 26985                           indf1	equ	0xFE7
 26986                           postdec1	equ	0xFE5
 26987                           fsr1h	equ	0xFE2
 26988                           fsr1l	equ	0xFE1
 26989                           indf2	equ	0xFDF
 26990                           postinc2	equ	0xFDE
 26991                           postdec2	equ	0xFDD
 26992                           plusw2	equ	0xFDB
 26993                           fsr2h	equ	0xFDA
 26994                           fsr2l	equ	0xFD9
 26995                           status	equ	0xFD8
 26996                           
 26997 ;; *************** function _ADC_Start *****************
 26998 ;; Defined at:
 26999 ;;		line 114 in file "Library/ADC.c"
 27000 ;; Parameters:    Size  Location     Type
 27001 ;;  pInput          2    2[BANK0 ] PTR struct ADC
 27002 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 27003 ;;		 -> NULL(0), 
 27004 ;; Auto vars:     Size  Location     Type
 27005 ;;		None
 27006 ;; Return value:  Size  Location     Type
 27007 ;;                  1    wreg      void 
 27008 ;; Registers used:
 27009 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 27010 ;; Tracked objects:
 27011 ;;		On entry : 0/0
 27012 ;;		On exit  : 0/0
 27013 ;;		Unchanged: 0/0
 27014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27015 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27017 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27018 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27019 ;;Total ram usage:        4 bytes
 27020 ;; Hardware stack levels used:    1
 27021 ;; Hardware stack levels required when called:    8
 27022 ;; This function calls:
 27023 ;;		_ADC_Off
 27024 ;;		_ADC_On
 27025 ;;		_ADC_SetChannel
 27026 ;; This function is called by:
 27027 ;;		_init
 27028 ;;		_mode1
 27029 ;;		_mode4
 27030 ;;		_FunctADC
 27031 ;; This function uses a non-reentrant model
 27032 ;;
 27033                           
 27034                           	psect	text138
 27035  014D80                     __ptext138:
 27036                           	opt stack 0
 27037  014D80                     _ADC_Start:
 27038                           	opt stack 21
 27039                           
 27040                           ;ADC.c: 117: if ((ADCON0bits.GODONE))
 27041                           
 27042                           ; BSR set to: 0
 27043                           ;incstack = 0
 27044  014D80  B2C2               	btfsc	4034,1,c	;volatile
 27045  014D82  0012               	return	
 27046  014D84                     
 27047                           ;ADC.c: 128: {
 27048                           ;ADC.c: 129: ADC_Off();
 27049                           
 27050                           ;ADC.c: 127: for(;;)
 27051  014D84  ECA2  F0B2         	call	_ADC_Off	;wreg free
 27052                           
 27053                           ;ADC.c: 130: ADC_SetChannel(pInput->mChannel);
 27054  014D88  C062  FFD9         	movff	ADC_Start@pInput,fsr2l
 27055  014D8C  C063  FFDA         	movff	ADC_Start@pInput+1,fsr2h
 27056  014D90  50DF               	movf	indf2,w,c
 27057  014D92  EC9F  F0B1         	call	_ADC_SetChannel
 27058                           
 27059                           ;ADC.c: 131: ADC_On();
 27060  014D96  ECB3  F0B2         	call	_ADC_On	;wreg free
 27061                           
 27062                           ;ADC.c: 134: (ADCON0bits.GO) = 1;
 27063  014D9A  82C2               	bsf	4034,1,c	;volatile
 27064  014D9C  B2C2               	btfsc	4034,1,c	;volatile
 27065  014D9E  D7FE               	goto	l1280
 27066                           
 27067                           ;ADC.c: 138: pInput->mValue = (ADRESH << 8) | ADRESL;
 27068  014DA0  50C3               	movf	4035,w,c	;volatile
 27069  014DA2  CFC4 F064          	movff	4036,??_ADC_Start	;volatile
 27070  014DA6  0100               	movlb	0	; () banked
 27071  014DA8  6B65               	clrf	(??_ADC_Start+1)& (0+255),b
 27072  014DAA  C064  F065         	movff	??_ADC_Start,??_ADC_Start+1
 27073  014DAE  0100               	movlb	0	; () banked
 27074  014DB0  6B64               	clrf	??_ADC_Start& (0+255),b
 27075  014DB2  0100               	movlb	0	; () banked
 27076  014DB4  1364               	iorwf	??_ADC_Start& (0+255),f,b
 27077  014DB6  0E00               	movlw	0
 27078  014DB8  1365               	iorwf	(??_ADC_Start+1)& (0+255),f,b
 27079  014DBA  0100               	movlb	0	; () banked
 27080  014DBC  EE20 F001          	lfsr	2,1
 27081  014DC0  5162               	movf	ADC_Start@pInput& (0+255),w,b
 27082  014DC2  26D9               	addwf	fsr2l,f,c
 27083  014DC4  5163               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 27084  014DC6  22DA               	addwfc	fsr2h,f,c
 27085  014DC8  C064  FFDE         	movff	??_ADC_Start,postinc2
 27086  014DCC  C065  FFDD         	movff	??_ADC_Start+1,postdec2
 27087                           
 27088                           ;ADC.c: 141: if (pInput->mNext == 0)
 27089  014DD0  0100               	movlb	0	; () banked
 27090  014DD2  EE20 F003          	lfsr	2,3
 27091  014DD6  5162               	movf	ADC_Start@pInput& (0+255),w,b
 27092  014DD8  26D9               	addwf	fsr2l,f,c
 27093  014DDA  5163               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 27094  014DDC  22DA               	addwfc	fsr2h,f,c
 27095  014DDE  50DE               	movf	postinc2,w,c
 27096  014DE0  10DE               	iorwf	postinc2,w,c
 27097  014DE2  B4D8               	btfsc	status,2,c
 27098  014DE4  D00C               	goto	l1283
 27099                           
 27100                           ; BSR set to: 0
 27101                           ;ADC.c: 145: pInput = pInput->mNext;
 27102                           
 27103                           ; BSR set to: 0
 27104                           
 27105                           ; BSR set to: 0
 27106                           ;ADC.c: 142: break;
 27107  014DE6  0100               	movlb	0	; () banked
 27108  014DE8  EE20 F003          	lfsr	2,3
 27109  014DEC  5162               	movf	ADC_Start@pInput& (0+255),w,b
 27110  014DEE  26D9               	addwf	fsr2l,f,c
 27111  014DF0  5163               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 27112  014DF2  22DA               	addwfc	fsr2h,f,c
 27113  014DF4  CFDE F062          	movff	postinc2,ADC_Start@pInput
 27114  014DF8  CFDD F063          	movff	postdec2,ADC_Start@pInput+1
 27115                           
 27116                           ;ADC.c: 146: }
 27117  014DFC  D7C3               	goto	l1276
 27118  014DFE                     l1283:
 27119                           
 27120                           ; BSR set to: 0
 27121                           ;ADC.c: 147: ADC_Off();
 27122                           
 27123                           ; BSR set to: 0
 27124  014DFE  ECA2  F0B2         	call	_ADC_Off	;wreg free
 27125  014E02  0012               	return		;funcret
 27126  014E04                     __end_of_ADC_Start:
 27127                           	opt stack 0
 27128                           tosu	equ	0xFFF
 27129                           tosh	equ	0xFFE
 27130                           tosl	equ	0xFFD
 27131                           pclath	equ	0xFFA
 27132                           tblptru	equ	0xFF8
 27133                           tblptrh	equ	0xFF7
 27134                           tblptrl	equ	0xFF6
 27135                           tablat	equ	0xFF5
 27136                           prodh	equ	0xFF4
 27137                           prodl	equ	0xFF3
 27138                           intcon	equ	0xFF2
 27139                           indf0	equ	0xFEF
 27140                           postinc0	equ	0xFEE
 27141                           fsr0h	equ	0xFEA
 27142                           fsr0l	equ	0xFE9
 27143                           wreg	equ	0xFE8
 27144                           indf1	equ	0xFE7
 27145                           postdec1	equ	0xFE5
 27146                           fsr1h	equ	0xFE2
 27147                           fsr1l	equ	0xFE1
 27148                           indf2	equ	0xFDF
 27149                           postinc2	equ	0xFDE
 27150                           postdec2	equ	0xFDD
 27151                           plusw2	equ	0xFDB
 27152                           fsr2h	equ	0xFDA
 27153                           fsr2l	equ	0xFD9
 27154                           status	equ	0xFD8
 27155                           
 27156 ;; *************** function _ADC_Init *****************
 27157 ;; Defined at:
 27158 ;;		line 19 in file "Library/ADC.c"
 27159 ;; Parameters:    Size  Location     Type
 27160 ;;  pInput          2    4[BANK0 ] PTR struct ADC
 27161 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 27162 ;;  pChannel        1    6[BANK0 ] enum E6742
 27163 ;; Auto vars:     Size  Location     Type
 27164 ;;		None
 27165 ;; Return value:  Size  Location     Type
 27166 ;;                  1    wreg      void 
 27167 ;; Registers used:
 27168 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 27169 ;; Tracked objects:
 27170 ;;		On entry : 0/0
 27171 ;;		On exit  : 0/0
 27172 ;;		Unchanged: 0/0
 27173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27174 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27177 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27178 ;;Total ram usage:        3 bytes
 27179 ;; Hardware stack levels used:    1
 27180 ;; Hardware stack levels required when called:    9
 27181 ;; This function calls:
 27182 ;;		_ADC_Calibrate
 27183 ;;		_ADC_ClockDivision
 27184 ;;		_ADC_ConversionTime
 27185 ;;		_ADC_SetChannel
 27186 ;;		_ADC_SetupIO
 27187 ;; This function is called by:
 27188 ;;		_init
 27189 ;;		_FunctInitADC
 27190 ;; This function uses a non-reentrant model
 27191 ;;
 27192                           
 27193                           	psect	text139
 27194  014F02                     __ptext139:
 27195                           	opt stack 0
 27196  014F02                     _ADC_Init:
 27197                           	opt stack 20
 27198                           
 27199                           ;ADC.c: 21: if(pInput==(void*)0)
 27200                           
 27201                           ;incstack = 0
 27202  014F02  0100               	movlb	0	; () banked
 27203  014F04  5164               	movf	ADC_Init@pInput& (0+255),w,b
 27204  014F06  0100               	movlb	0	; () banked
 27205  014F08  1165               	iorwf	(ADC_Init@pInput+1)& (0+255),w,b
 27206  014F0A  B4D8               	btfsc	status,2,c
 27207  014F0C  0012               	return	
 27208                           
 27209                           ; BSR set to: 0
 27210                           ;ADC.c: 25: lCurrent = pInput;
 27211                           
 27212                           ; BSR set to: 0
 27213                           
 27214                           ; BSR set to: 0
 27215                           ;ADC.c: 22: return;
 27216  014F0E  C064  F0D0         	movff	ADC_Init@pInput,_lCurrent
 27217  014F12  C065  F0D1         	movff	ADC_Init@pInput+1,_lCurrent+1
 27218                           
 27219                           ; BSR set to: 0
 27220                           ;ADC.c: 27: pInput->mChannel = pChannel;
 27221  014F16  C064  FFD9         	movff	ADC_Init@pInput,fsr2l
 27222  014F1A  C065  FFDA         	movff	ADC_Init@pInput+1,fsr2h
 27223  014F1E  C066  FFDF         	movff	ADC_Init@pChannel,indf2
 27224                           
 27225                           ;ADC.c: 28: pInput->mNext = (ADCPtr)0;
 27226  014F22  0100               	movlb	0	; () banked
 27227  014F24  EE20 F003          	lfsr	2,3
 27228  014F28  5164               	movf	ADC_Init@pInput& (0+255),w,b
 27229  014F2A  26D9               	addwf	fsr2l,f,c
 27230  014F2C  5165               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 27231  014F2E  22DA               	addwfc	fsr2h,f,c
 27232  014F30  0E00               	movlw	0
 27233  014F32  6EDE               	movwf	postinc2,c
 27234  014F34  0E00               	movlw	0
 27235  014F36  6EDD               	movwf	postdec2,c
 27236                           
 27237                           ;ADC.c: 29: pInput->mValue = 0;
 27238  014F38  0100               	movlb	0	; () banked
 27239  014F3A  EE20 F001          	lfsr	2,1
 27240  014F3E  5164               	movf	ADC_Init@pInput& (0+255),w,b
 27241  014F40  26D9               	addwf	fsr2l,f,c
 27242  014F42  5165               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 27243  014F44  22DA               	addwfc	fsr2h,f,c
 27244  014F46  0E00               	movlw	0
 27245  014F48  6EDE               	movwf	postinc2,c
 27246  014F4A  0E00               	movlw	0
 27247  014F4C  6EDD               	movwf	postdec2,c
 27248                           
 27249                           ; BSR set to: 0
 27250                           ;ADC.c: 32: ADC_SetChannel(pChannel);
 27251  014F4E  0100               	movlb	0	; () banked
 27252  014F50  5166               	movf	ADC_Init@pChannel& (0+255),w,b
 27253  014F52  EC9F  F0B1         	call	_ADC_SetChannel
 27254                           
 27255                           ;ADC.c: 35: ADCON0bits.VCFG1 = 0;
 27256  014F56  9EC2               	bcf	4034,7,c	;volatile
 27257                           
 27258                           ;ADC.c: 36: ADCON0bits.VCFG0 = 0;
 27259  014F58  9CC2               	bcf	4034,6,c	;volatile
 27260                           
 27261                           ;ADC.c: 39: ADCON1bits.ADFM = 1;
 27262  014F5A  8EC1               	bsf	4033,7,c	;volatile
 27263                           
 27264                           ;ADC.c: 40: ADCON1bits.ADCAL = 1;
 27265  014F5C  8CC1               	bsf	4033,6,c	;volatile
 27266                           
 27267                           ;ADC.c: 43: ADC_ConversionTime(12);
 27268  014F5E  0E0C               	movlw	12
 27269  014F60  EC7C  F0AD         	call	_ADC_ConversionTime
 27270                           
 27271                           ;ADC.c: 47: ADC_ClockDivision(16);
 27272  014F64  0E10               	movlw	16
 27273  014F66  EC7B  F0A6         	call	_ADC_ClockDivision
 27274                           
 27275                           ;ADC.c: 50: ADC_SetupIO(pChannel);
 27276  014F6A  0100               	movlb	0	; () banked
 27277  014F6C  5166               	movf	ADC_Init@pChannel& (0+255),w,b
 27278  014F6E  ECD3  F0AF         	call	_ADC_SetupIO
 27279                           
 27280                           ;ADC.c: 58: ADC_Initialised = 1;
 27281  014F72  0E01               	movlw	1
 27282  014F74  6E3C               	movwf	_ADC_Initialised,c
 27283                           
 27284                           ;ADC.c: 61: ADC_Calibrate();
 27285  014F76  EC24  F0B2         	call	_ADC_Calibrate	;wreg free
 27286  014F7A  0012               	return		;funcret
 27287  014F7C                     __end_of_ADC_Init:
 27288                           	opt stack 0
 27289                           tosu	equ	0xFFF
 27290                           tosh	equ	0xFFE
 27291                           tosl	equ	0xFFD
 27292                           pclath	equ	0xFFA
 27293                           tblptru	equ	0xFF8
 27294                           tblptrh	equ	0xFF7
 27295                           tblptrl	equ	0xFF6
 27296                           tablat	equ	0xFF5
 27297                           prodh	equ	0xFF4
 27298                           prodl	equ	0xFF3
 27299                           intcon	equ	0xFF2
 27300                           indf0	equ	0xFEF
 27301                           postinc0	equ	0xFEE
 27302                           fsr0h	equ	0xFEA
 27303                           fsr0l	equ	0xFE9
 27304                           wreg	equ	0xFE8
 27305                           indf1	equ	0xFE7
 27306                           postdec1	equ	0xFE5
 27307                           fsr1h	equ	0xFE2
 27308                           fsr1l	equ	0xFE1
 27309                           indf2	equ	0xFDF
 27310                           postinc2	equ	0xFDE
 27311                           postdec2	equ	0xFDD
 27312                           plusw2	equ	0xFDB
 27313                           fsr2h	equ	0xFDA
 27314                           fsr2l	equ	0xFD9
 27315                           status	equ	0xFD8
 27316                           
 27317 ;; *************** function _ADC_SetupIO *****************
 27318 ;; Defined at:
 27319 ;;		line 150 in file "Library/ADC.c"
 27320 ;; Parameters:    Size  Location     Type
 27321 ;;  pChannel        1    wreg     enum E6742
 27322 ;; Auto vars:     Size  Location     Type
 27323 ;;  pChannel        1    2[BANK0 ] enum E6742
 27324 ;;  MASK            1    3[BANK0 ] unsigned char 
 27325 ;; Return value:  Size  Location     Type
 27326 ;;                  1    wreg      void 
 27327 ;; Registers used:
 27328 ;;		wreg, status,2, status,0
 27329 ;; Tracked objects:
 27330 ;;		On entry : 0/0
 27331 ;;		On exit  : 0/0
 27332 ;;		Unchanged: 0/0
 27333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27335 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27336 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27337 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27338 ;;Total ram usage:        4 bytes
 27339 ;; Hardware stack levels used:    1
 27340 ;; Hardware stack levels required when called:    7
 27341 ;; This function calls:
 27342 ;;		Nothing
 27343 ;; This function is called by:
 27344 ;;		_ADC_Init
 27345 ;; This function uses a non-reentrant model
 27346 ;;
 27347                           
 27348                           	psect	text140
 27349  015FA6                     __ptext140:
 27350                           	opt stack 0
 27351  015FA6                     _ADC_SetupIO:
 27352                           	opt stack 21
 27353                           
 27354                           ;incstack = 0
 27355                           ;ADC_SetupIO@pChannel stored from wreg
 27356  015FA6  0100               	movlb	0	; () banked
 27357  015FA8  6F62               	movwf	ADC_SetupIO@pChannel& (0+255),b
 27358                           
 27359                           ;ADC.c: 152: UINT8 MASK = ~(1 << pChannel);
 27360  015FAA  C062  F060         	movff	ADC_SetupIO@pChannel,??_ADC_SetupIO
 27361  015FAE  0E01               	movlw	1
 27362  015FB0  0100               	movlb	0	; () banked
 27363  015FB2  6F61               	movwf	(??_ADC_SetupIO+1)& (0+255),b
 27364  015FB4  0100               	movlb	0	; () banked
 27365  015FB6  2B60               	incf	??_ADC_SetupIO& (0+255),f,b
 27366  015FB8  D003               	goto	u10024
 27367  015FBA                     u10025:
 27368  015FBA  0100               	movlb	0	; () banked
 27369  015FBC  90D8               	bcf	status,0,c
 27370  015FBE  3761               	rlcf	(??_ADC_SetupIO+1)& (0+255),f,b
 27371  015FC0                     u10024:
 27372  015FC0  0100               	movlb	0	; () banked
 27373  015FC2  2F60               	decfsz	??_ADC_SetupIO& (0+255),f,b
 27374  015FC4  D7FA               	goto	u10025
 27375  015FC6  0100               	movlb	0	; () banked
 27376  015FC8  5161               	movf	(??_ADC_SetupIO+1)& (0+255),w,b
 27377  015FCA  0AFF               	xorlw	255
 27378  015FCC  0100               	movlb	0	; () banked
 27379  015FCE  6F63               	movwf	ADC_SetupIO@MASK& (0+255),b
 27380                           
 27381                           ;ADC.c: 153: ANCON0 &= MASK;
 27382  015FD0  0100               	movlb	0	; () banked
 27383  015FD2  5163               	movf	ADC_SetupIO@MASK& (0+255),w,b
 27384  015FD4  16C1               	andwf	4033,f,c	;volatile
 27385                           
 27386                           ; BSR set to: 0
 27387  015FD6  0012               	return		;funcret
 27388  015FD8                     __end_of_ADC_SetupIO:
 27389                           	opt stack 0
 27390                           tosu	equ	0xFFF
 27391                           tosh	equ	0xFFE
 27392                           tosl	equ	0xFFD
 27393                           pclath	equ	0xFFA
 27394                           tblptru	equ	0xFF8
 27395                           tblptrh	equ	0xFF7
 27396                           tblptrl	equ	0xFF6
 27397                           tablat	equ	0xFF5
 27398                           prodh	equ	0xFF4
 27399                           prodl	equ	0xFF3
 27400                           intcon	equ	0xFF2
 27401                           indf0	equ	0xFEF
 27402                           postinc0	equ	0xFEE
 27403                           fsr0h	equ	0xFEA
 27404                           fsr0l	equ	0xFE9
 27405                           wreg	equ	0xFE8
 27406                           indf1	equ	0xFE7
 27407                           postdec1	equ	0xFE5
 27408                           fsr1h	equ	0xFE2
 27409                           fsr1l	equ	0xFE1
 27410                           indf2	equ	0xFDF
 27411                           postinc2	equ	0xFDE
 27412                           postdec2	equ	0xFDD
 27413                           plusw2	equ	0xFDB
 27414                           fsr2h	equ	0xFDA
 27415                           fsr2l	equ	0xFD9
 27416                           status	equ	0xFD8
 27417                           
 27418 ;; *************** function _ADC_SetChannel *****************
 27419 ;; Defined at:
 27420 ;;		line 155 in file "Library/ADC.c"
 27421 ;; Parameters:    Size  Location     Type
 27422 ;;  pChannel        1    wreg     enum E6742
 27423 ;; Auto vars:     Size  Location     Type
 27424 ;;  pChannel        1    1[BANK0 ] enum E6742
 27425 ;; Return value:  Size  Location     Type
 27426 ;;                  1    wreg      void 
 27427 ;; Registers used:
 27428 ;;		wreg, status,2, status,0
 27429 ;; Tracked objects:
 27430 ;;		On entry : 0/0
 27431 ;;		On exit  : 0/0
 27432 ;;		Unchanged: 0/0
 27433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27435 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27436 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27437 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27438 ;;Total ram usage:        2 bytes
 27439 ;; Hardware stack levels used:    1
 27440 ;; Hardware stack levels required when called:    7
 27441 ;; This function calls:
 27442 ;;		Nothing
 27443 ;; This function is called by:
 27444 ;;		_ADC_Init
 27445 ;;		_ADC_Start
 27446 ;;		_ADC_ISR
 27447 ;;		_ADC_Sample
 27448 ;; This function uses a non-reentrant model
 27449 ;;
 27450                           
 27451                           	psect	text141
 27452  01633E                     __ptext141:
 27453                           	opt stack 0
 27454  01633E                     _ADC_SetChannel:
 27455                           	opt stack 21
 27456                           
 27457                           ; BSR set to: 0
 27458                           ;incstack = 0
 27459                           ;ADC_SetChannel@pChannel stored from wreg
 27460  01633E  0100               	movlb	0	; () banked
 27461  016340  6F61               	movwf	ADC_SetChannel@pChannel& (0+255),b
 27462                           
 27463                           ;ADC.c: 157: ADCON0bits.CHS = (UINT8)pChannel;
 27464  016342  C061  F060         	movff	ADC_SetChannel@pChannel,??_ADC_SetChannel
 27465  016346  0100               	movlb	0	; () banked
 27466  016348  4760               	rlncf	??_ADC_SetChannel& (0+255),f,b
 27467  01634A  4760               	rlncf	??_ADC_SetChannel& (0+255),f,b
 27468  01634C  50C2               	movf	4034,w,c	;volatile
 27469  01634E  0100               	movlb	0	; () banked
 27470  016350  1960               	xorwf	??_ADC_SetChannel& (0+255),w,b
 27471  016352  0BC3               	andlw	-61
 27472  016354  1960               	xorwf	??_ADC_SetChannel& (0+255),w,b
 27473  016356  6EC2               	movwf	4034,c	;volatile
 27474                           
 27475                           ; BSR set to: 0
 27476  016358  0012               	return		;funcret
 27477  01635A                     __end_of_ADC_SetChannel:
 27478                           	opt stack 0
 27479                           tosu	equ	0xFFF
 27480                           tosh	equ	0xFFE
 27481                           tosl	equ	0xFFD
 27482                           pclath	equ	0xFFA
 27483                           tblptru	equ	0xFF8
 27484                           tblptrh	equ	0xFF7
 27485                           tblptrl	equ	0xFF6
 27486                           tablat	equ	0xFF5
 27487                           prodh	equ	0xFF4
 27488                           prodl	equ	0xFF3
 27489                           intcon	equ	0xFF2
 27490                           indf0	equ	0xFEF
 27491                           postinc0	equ	0xFEE
 27492                           fsr0h	equ	0xFEA
 27493                           fsr0l	equ	0xFE9
 27494                           wreg	equ	0xFE8
 27495                           indf1	equ	0xFE7
 27496                           postdec1	equ	0xFE5
 27497                           fsr1h	equ	0xFE2
 27498                           fsr1l	equ	0xFE1
 27499                           indf2	equ	0xFDF
 27500                           postinc2	equ	0xFDE
 27501                           postdec2	equ	0xFDD
 27502                           plusw2	equ	0xFDB
 27503                           fsr2h	equ	0xFDA
 27504                           fsr2l	equ	0xFD9
 27505                           status	equ	0xFD8
 27506                           
 27507 ;; *************** function _ADC_ConversionTime *****************
 27508 ;; Defined at:
 27509 ;;		line 199 in file "Library/ADC.c"
 27510 ;; Parameters:    Size  Location     Type
 27511 ;;  pCount          1    wreg     unsigned char 
 27512 ;; Auto vars:     Size  Location     Type
 27513 ;;  pCount          1    1[BANK0 ] unsigned char 
 27514 ;; Return value:  Size  Location     Type
 27515 ;;                  1    wreg      void 
 27516 ;; Registers used:
 27517 ;;		wreg, status,2, status,0
 27518 ;; Tracked objects:
 27519 ;;		On entry : 0/0
 27520 ;;		On exit  : 0/0
 27521 ;;		Unchanged: 0/0
 27522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27524 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27525 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27526 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27527 ;;Total ram usage:        2 bytes
 27528 ;; Hardware stack levels used:    1
 27529 ;; Hardware stack levels required when called:    7
 27530 ;; This function calls:
 27531 ;;		Nothing
 27532 ;; This function is called by:
 27533 ;;		_ADC_Init
 27534 ;; This function uses a non-reentrant model
 27535 ;;
 27536                           
 27537                           	psect	text142
 27538  015AF8                     __ptext142:
 27539                           	opt stack 0
 27540  015AF8                     _ADC_ConversionTime:
 27541                           	opt stack 21
 27542                           
 27543                           ; BSR set to: 0
 27544                           ;incstack = 0
 27545                           ;ADC_ConversionTime@pCount stored from wreg
 27546  015AF8  0100               	movlb	0	; () banked
 27547  015AFA  6F61               	movwf	ADC_ConversionTime@pCount& (0+255),b
 27548                           
 27549                           ;ADC.c: 201: if (pCount == 10)
 27550  015AFC  0E0A               	movlw	10
 27551  015AFE  0100               	movlb	0	; () banked
 27552  015B00  1961               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 27553  015B02  B4D8               	btfsc	status,2,c
 27554  015B04  D00A               	goto	u9990
 27555                           
 27556                           ; BSR set to: 0
 27557                           ;ADC.c: 203: else if (pCount == 14)
 27558                           
 27559                           ; BSR set to: 0
 27560                           
 27561                           ; BSR set to: 0
 27562                           ;ADC.c: 202: pCount -= 2;
 27563  015B06  0E0E               	movlw	14
 27564  015B08  0100               	movlb	0	; () banked
 27565  015B0A  1961               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 27566  015B0C  B4D8               	btfsc	status,2,c
 27567  015B0E  D005               	goto	u9990
 27568                           
 27569                           ; BSR set to: 0
 27570                           ;ADC.c: 205: else if (pCount == 18)
 27571                           
 27572                           ; BSR set to: 0
 27573                           
 27574                           ; BSR set to: 0
 27575                           ;ADC.c: 204: pCount -= 2;
 27576  015B10  0E12               	movlw	18
 27577  015B12  0100               	movlb	0	; () banked
 27578  015B14  1961               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 27579  015B16  A4D8               	btfss	status,2,c
 27580  015B18  D003               	goto	l1313
 27581  015B1A                     u9990:
 27582                           
 27583                           ; BSR set to: 0
 27584                           ;ADC.c: 206: pCount -= 2;
 27585  015B1A  0E02               	movlw	2
 27586  015B1C  0100               	movlb	0	; () banked
 27587  015B1E  5F61               	subwf	ADC_ConversionTime@pCount& (0+255),f,b
 27588  015B20                     l1313:
 27589                           
 27590                           ; BSR set to: 0
 27591                           ;ADC.c: 208: pCount <<= 1;
 27592                           
 27593                           ; BSR set to: 0
 27594                           
 27595                           ; BSR set to: 0
 27596  015B20  0100               	movlb	0	; () banked
 27597  015B22  90D8               	bcf	status,0,c
 27598  015B24  3761               	rlcf	ADC_ConversionTime@pCount& (0+255),f,b
 27599                           
 27600                           ;ADC.c: 209: ADCON1bits.ACQT = pCount;
 27601  015B26  C061  F060         	movff	ADC_ConversionTime@pCount,??_ADC_ConversionTime
 27602  015B2A  0100               	movlb	0	; () banked
 27603  015B2C  4760               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 27604  015B2E  4760               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 27605  015B30  4760               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 27606  015B32  50C1               	movf	4033,w,c	;volatile
 27607  015B34  0100               	movlb	0	; () banked
 27608  015B36  1960               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 27609  015B38  0BC7               	andlw	-57
 27610  015B3A  1960               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 27611  015B3C  6EC1               	movwf	4033,c	;volatile
 27612                           
 27613                           ; BSR set to: 0
 27614  015B3E  0012               	return		;funcret
 27615  015B40                     __end_of_ADC_ConversionTime:
 27616                           	opt stack 0
 27617                           tosu	equ	0xFFF
 27618                           tosh	equ	0xFFE
 27619                           tosl	equ	0xFFD
 27620                           pclath	equ	0xFFA
 27621                           tblptru	equ	0xFF8
 27622                           tblptrh	equ	0xFF7
 27623                           tblptrl	equ	0xFF6
 27624                           tablat	equ	0xFF5
 27625                           prodh	equ	0xFF4
 27626                           prodl	equ	0xFF3
 27627                           intcon	equ	0xFF2
 27628                           indf0	equ	0xFEF
 27629                           postinc0	equ	0xFEE
 27630                           fsr0h	equ	0xFEA
 27631                           fsr0l	equ	0xFE9
 27632                           wreg	equ	0xFE8
 27633                           indf1	equ	0xFE7
 27634                           postdec1	equ	0xFE5
 27635                           fsr1h	equ	0xFE2
 27636                           fsr1l	equ	0xFE1
 27637                           indf2	equ	0xFDF
 27638                           postinc2	equ	0xFDE
 27639                           postdec2	equ	0xFDD
 27640                           plusw2	equ	0xFDB
 27641                           fsr2h	equ	0xFDA
 27642                           fsr2l	equ	0xFD9
 27643                           status	equ	0xFD8
 27644                           
 27645 ;; *************** function _ADC_ClockDivision *****************
 27646 ;; Defined at:
 27647 ;;		line 159 in file "Library/ADC.c"
 27648 ;; Parameters:    Size  Location     Type
 27649 ;;  pDivide         1    wreg     unsigned char 
 27650 ;; Auto vars:     Size  Location     Type
 27651 ;;  pDivide         1    0[BANK0 ] unsigned char 
 27652 ;;  unfound         1    2[BANK0 ] unsigned char 
 27653 ;;  reg             1    1[BANK0 ] unsigned char 
 27654 ;; Return value:  Size  Location     Type
 27655 ;;                  1    wreg      void 
 27656 ;; Registers used:
 27657 ;;		wreg, status,2, status,0
 27658 ;; Tracked objects:
 27659 ;;		On entry : 0/0
 27660 ;;		On exit  : 0/0
 27661 ;;		Unchanged: 0/0
 27662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27664 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27666 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27667 ;;Total ram usage:        3 bytes
 27668 ;; Hardware stack levels used:    1
 27669 ;; Hardware stack levels required when called:    7
 27670 ;; This function calls:
 27671 ;;		Nothing
 27672 ;; This function is called by:
 27673 ;;		_ADC_Init
 27674 ;; This function uses a non-reentrant model
 27675 ;;
 27676                           
 27677                           	psect	text143
 27678  014CF6                     __ptext143:
 27679                           	opt stack 0
 27680  014CF6                     _ADC_ClockDivision:
 27681                           	opt stack 21
 27682                           
 27683                           ; BSR set to: 0
 27684                           ;incstack = 0
 27685                           ;ADC_ClockDivision@pDivide stored from wreg
 27686  014CF6  0100               	movlb	0	; () banked
 27687  014CF8  6F60               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 27688                           
 27689                           ;ADC.c: 161: UINT8 reg = 0;
 27690  014CFA  0E00               	movlw	0
 27691  014CFC  0100               	movlb	0	; () banked
 27692  014CFE  6F61               	movwf	ADC_ClockDivision@reg& (0+255),b
 27693                           
 27694                           ;ADC.c: 162: bool unfound = 1;
 27695  014D00  0E01               	movlw	1
 27696  014D02  D002               	goto	L15
 27697  014D04                     
 27698                           ; BSR set to: 0
 27699                           ;ADC.c: 167: reg = 0;
 27700                           
 27701                           ; BSR set to: 0
 27702  014D04  0E00               	movlw	0
 27703  014D06  D00C               	goto	L20
 27704  014D08                     L15:
 27705  014D08  0100               	movlb	0	; () banked
 27706  014D0A  6F62               	movwf	ADC_ClockDivision@unfound& (0+255),b
 27707                           
 27708                           ;ADC.c: 169: break;
 27709  014D0C  D02D               	goto	l1296
 27710  014D0E                     
 27711                           ; BSR set to: 0
 27712                           ;ADC.c: 171: reg = 0b100;
 27713                           
 27714                           ; BSR set to: 0
 27715  014D0E  0E04               	movlw	4
 27716  014D10  D007               	goto	L20
 27717  014D12                     
 27718                           ; BSR set to: 0
 27719                           ;ADC.c: 175: reg = 0b001;
 27720                           
 27721                           ; BSR set to: 0
 27722  014D12  0E01               	movlw	1
 27723  014D14  D005               	goto	L20
 27724  014D16                     
 27725                           ; BSR set to: 0
 27726                           ;ADC.c: 179: reg = 0b101;
 27727                           
 27728                           ; BSR set to: 0
 27729  014D16  0E05               	movlw	5
 27730  014D18  D003               	goto	L20
 27731  014D1A                     
 27732                           ; BSR set to: 0
 27733                           ;ADC.c: 183: reg = 0b010;
 27734                           
 27735                           ; BSR set to: 0
 27736  014D1A  0E02               	movlw	2
 27737  014D1C  D001               	goto	L20
 27738  014D1E                     
 27739                           ; BSR set to: 0
 27740                           ;ADC.c: 187: reg = 0b110;
 27741                           
 27742                           ; BSR set to: 0
 27743  014D1E  0E06               	movlw	6
 27744  014D20                     L20:
 27745  014D20  0100               	movlb	0	; () banked
 27746  014D22  6F61               	movwf	ADC_ClockDivision@reg& (0+255),b
 27747                           
 27748                           ;ADC.c: 188: unfound = 0;
 27749  014D24  0E00               	movlw	0
 27750  014D26  D7F0               	goto	L15
 27751  014D28                     
 27752                           ; BSR set to: 0
 27753                           ;ADC.c: 191: if (pDivide > 2)
 27754                           
 27755                           ; BSR set to: 0
 27756  014D28  0E02               	movlw	2
 27757  014D2A  0100               	movlb	0	; () banked
 27758  014D2C  6560               	cpfsgt	ADC_ClockDivision@pDivide& (0+255),b
 27759  014D2E  D003               	goto	l1303
 27760                           
 27761                           ; BSR set to: 0
 27762                           ;ADC.c: 192: pDivide --;
 27763  014D30  0100               	movlb	0	; () banked
 27764  014D32  0760               	decf	ADC_ClockDivision@pDivide& (0+255),f,b
 27765  014D34  D019               	goto	l1296
 27766  014D36                     l1303:
 27767                           
 27768                           ; BSR set to: 0
 27769                           ;ADC.c: 193: else
 27770                           ;ADC.c: 194: pDivide = 2;
 27771                           
 27772                           ; BSR set to: 0
 27773  014D36  0E02               	movlw	2
 27774  014D38  0100               	movlb	0	; () banked
 27775  014D3A  6F60               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 27776                           
 27777                           ; BSR set to: 0
 27778                           ;ADC.c: 195: };
 27779  014D3C  D015               	goto	l1296
 27780  014D3E                     
 27781                           ; BSR set to: 0
 27782                           
 27783                           ; BSR set to: 0
 27784  014D3E  0100               	movlb	0	; () banked
 27785  014D40  5160               	movf	ADC_ClockDivision@pDivide& (0+255),w,b
 27786                           
 27787                           ; Switch size 1, requested type "space"
 27788                           ; Number of cases is 6, Range of values is 2 to 64
 27789                           ; switch strategies available:
 27790                           ; Name         Instructions Cycles
 27791                           ; simple_byte           19    10 (average)
 27792                           ;	Chosen strategy is simple_byte
 27793  014D42  0A02               	xorlw	2	; case 2
 27794  014D44  B4D8               	btfsc	status,2,c
 27795  014D46  D7DE               	goto	l1295
 27796  014D48  0A06               	xorlw	6	; case 4
 27797  014D4A  B4D8               	btfsc	status,2,c
 27798  014D4C  D7E0               	goto	l1297
 27799  014D4E  0A0C               	xorlw	12	; case 8
 27800  014D50  B4D8               	btfsc	status,2,c
 27801  014D52  D7DF               	goto	l1298
 27802  014D54  0A18               	xorlw	24	; case 16
 27803  014D56  B4D8               	btfsc	status,2,c
 27804  014D58  D7DE               	goto	l1299
 27805  014D5A  0A30               	xorlw	48	; case 32
 27806  014D5C  B4D8               	btfsc	status,2,c
 27807  014D5E  D7DD               	goto	l1300
 27808  014D60  0A60               	xorlw	96	; case 64
 27809  014D62  B4D8               	btfsc	status,2,c
 27810  014D64  D7DC               	goto	l1301
 27811  014D66  D7E0               	goto	l1302
 27812  014D68                     l1296:
 27813                           
 27814                           ; BSR set to: 0
 27815                           
 27816                           ; BSR set to: 0
 27817                           
 27818                           ; BSR set to: 0
 27819  014D68  0100               	movlb	0	; () banked
 27820  014D6A  5162               	movf	ADC_ClockDivision@unfound& (0+255),w,b
 27821  014D6C  0100               	movlb	0	; () banked
 27822  014D6E  A4D8               	btfss	status,2,c
 27823  014D70  D7E6               	goto	l1294
 27824                           
 27825                           ; BSR set to: 0
 27826                           ;ADC.c: 197: ADCON1bits.ADCS = reg;
 27827                           
 27828                           ; BSR set to: 0
 27829  014D72  50C1               	movf	4033,w,c	;volatile
 27830  014D74  0100               	movlb	0	; () banked
 27831  014D76  1961               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 27832  014D78  0BF8               	andlw	-8
 27833  014D7A  1961               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 27834  014D7C  6EC1               	movwf	4033,c	;volatile
 27835                           
 27836                           ; BSR set to: 0
 27837  014D7E  0012               	return		;funcret
 27838  014D80                     __end_of_ADC_ClockDivision:
 27839                           	opt stack 0
 27840                           tosu	equ	0xFFF
 27841                           tosh	equ	0xFFE
 27842                           tosl	equ	0xFFD
 27843                           pclath	equ	0xFFA
 27844                           tblptru	equ	0xFF8
 27845                           tblptrh	equ	0xFF7
 27846                           tblptrl	equ	0xFF6
 27847                           tablat	equ	0xFF5
 27848                           prodh	equ	0xFF4
 27849                           prodl	equ	0xFF3
 27850                           intcon	equ	0xFF2
 27851                           indf0	equ	0xFEF
 27852                           postinc0	equ	0xFEE
 27853                           fsr0h	equ	0xFEA
 27854                           fsr0l	equ	0xFE9
 27855                           wreg	equ	0xFE8
 27856                           indf1	equ	0xFE7
 27857                           postdec1	equ	0xFE5
 27858                           fsr1h	equ	0xFE2
 27859                           fsr1l	equ	0xFE1
 27860                           indf2	equ	0xFDF
 27861                           postinc2	equ	0xFDE
 27862                           postdec2	equ	0xFDD
 27863                           plusw2	equ	0xFDB
 27864                           fsr2h	equ	0xFDA
 27865                           fsr2l	equ	0xFD9
 27866                           status	equ	0xFD8
 27867                           
 27868 ;; *************** function _ADC_Calibrate *****************
 27869 ;; Defined at:
 27870 ;;		line 63 in file "Library/ADC.c"
 27871 ;; Parameters:    Size  Location     Type
 27872 ;;		None
 27873 ;; Auto vars:     Size  Location     Type
 27874 ;;		None
 27875 ;; Return value:  Size  Location     Type
 27876 ;;                  1    wreg      void 
 27877 ;; Registers used:
 27878 ;;		cstack
 27879 ;; Tracked objects:
 27880 ;;		On entry : 0/0
 27881 ;;		On exit  : 0/0
 27882 ;;		Unchanged: 0/0
 27883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27887 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27888 ;;Total ram usage:        0 bytes
 27889 ;; Hardware stack levels used:    1
 27890 ;; Hardware stack levels required when called:    8
 27891 ;; This function calls:
 27892 ;;		_ADC_Off
 27893 ;;		_ADC_On
 27894 ;; This function is called by:
 27895 ;;		_ADC_Init
 27896 ;; This function uses a non-reentrant model
 27897 ;;
 27898                           
 27899                           	psect	text144
 27900  016448                     __ptext144:
 27901                           	opt stack 0
 27902  016448                     _ADC_Calibrate:
 27903                           	opt stack 20
 27904                           
 27905                           ;ADC.c: 65: ADC_On();
 27906                           
 27907                           ; BSR set to: 0
 27908                           ;incstack = 0
 27909  016448  ECB3  F0B2         	call	_ADC_On	;wreg free
 27910                           
 27911                           ;ADC.c: 67: ADCON1bits.ADCAL = 1;
 27912  01644C  8CC1               	bsf	4033,6,c	;volatile
 27913                           
 27914                           ;ADC.c: 69: (ADCON0bits.GO) = 1;
 27915  01644E  82C2               	bsf	4034,1,c	;volatile
 27916  016450  B2C2               	btfsc	4034,1,c	;volatile
 27917  016452  D7FE               	goto	l1254
 27918                           
 27919                           ;ADC.c: 71: ADCON1bits.ADCAL = 0;
 27920  016454  9CC1               	bcf	4033,6,c	;volatile
 27921                           
 27922                           ;ADC.c: 73: ADC_Off();
 27923  016456  ECA2  F0B2         	call	_ADC_Off	;wreg free
 27924  01645A  0012               	return		;funcret
 27925  01645C                     __end_of_ADC_Calibrate:
 27926                           	opt stack 0
 27927                           tosu	equ	0xFFF
 27928                           tosh	equ	0xFFE
 27929                           tosl	equ	0xFFD
 27930                           pclath	equ	0xFFA
 27931                           tblptru	equ	0xFF8
 27932                           tblptrh	equ	0xFF7
 27933                           tblptrl	equ	0xFF6
 27934                           tablat	equ	0xFF5
 27935                           prodh	equ	0xFF4
 27936                           prodl	equ	0xFF3
 27937                           intcon	equ	0xFF2
 27938                           indf0	equ	0xFEF
 27939                           postinc0	equ	0xFEE
 27940                           fsr0h	equ	0xFEA
 27941                           fsr0l	equ	0xFE9
 27942                           wreg	equ	0xFE8
 27943                           indf1	equ	0xFE7
 27944                           postdec1	equ	0xFE5
 27945                           fsr1h	equ	0xFE2
 27946                           fsr1l	equ	0xFE1
 27947                           indf2	equ	0xFDF
 27948                           postinc2	equ	0xFDE
 27949                           postdec2	equ	0xFDD
 27950                           plusw2	equ	0xFDB
 27951                           fsr2h	equ	0xFDA
 27952                           fsr2l	equ	0xFD9
 27953                           status	equ	0xFD8
 27954                           
 27955 ;; *************** function _ADC_On *****************
 27956 ;; Defined at:
 27957 ;;		line 85 in file "Library/ADC.c"
 27958 ;; Parameters:    Size  Location     Type
 27959 ;;		None
 27960 ;; Auto vars:     Size  Location     Type
 27961 ;;		None
 27962 ;; Return value:  Size  Location     Type
 27963 ;;                  1    wreg      void 
 27964 ;; Registers used:
 27965 ;;		None
 27966 ;; Tracked objects:
 27967 ;;		On entry : 0/0
 27968 ;;		On exit  : 0/0
 27969 ;;		Unchanged: 0/0
 27970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27974 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27975 ;;Total ram usage:        0 bytes
 27976 ;; Hardware stack levels used:    1
 27977 ;; Hardware stack levels required when called:    7
 27978 ;; This function calls:
 27979 ;;		Nothing
 27980 ;; This function is called by:
 27981 ;;		_ADC_Calibrate
 27982 ;;		_ADC_Start
 27983 ;;		_ADC_ISR
 27984 ;;		_ADC_Sample
 27985 ;; This function uses a non-reentrant model
 27986 ;;
 27987                           
 27988                           	psect	text145
 27989  016566                     __ptext145:
 27990                           	opt stack 0
 27991  016566                     _ADC_On:
 27992                           	opt stack 21
 27993                           
 27994                           ;ADC.c: 87: ADCON0bits.ADON = 1;
 27995                           
 27996                           ;incstack = 0
 27997  016566  80C2               	bsf	4034,0,c	;volatile
 27998                           
 27999                           ;ADC.c: 88: PIR1bits.ADIF = 0;
 28000  016568  9C9E               	bcf	3998,6,c	;volatile
 28001  01656A  0012               	return		;funcret
 28002  01656C                     __end_of_ADC_On:
 28003                           	opt stack 0
 28004                           tosu	equ	0xFFF
 28005                           tosh	equ	0xFFE
 28006                           tosl	equ	0xFFD
 28007                           pclath	equ	0xFFA
 28008                           tblptru	equ	0xFF8
 28009                           tblptrh	equ	0xFF7
 28010                           tblptrl	equ	0xFF6
 28011                           tablat	equ	0xFF5
 28012                           prodh	equ	0xFF4
 28013                           prodl	equ	0xFF3
 28014                           intcon	equ	0xFF2
 28015                           indf0	equ	0xFEF
 28016                           postinc0	equ	0xFEE
 28017                           fsr0h	equ	0xFEA
 28018                           fsr0l	equ	0xFE9
 28019                           wreg	equ	0xFE8
 28020                           indf1	equ	0xFE7
 28021                           postdec1	equ	0xFE5
 28022                           fsr1h	equ	0xFE2
 28023                           fsr1l	equ	0xFE1
 28024                           indf2	equ	0xFDF
 28025                           postinc2	equ	0xFDE
 28026                           postdec2	equ	0xFDD
 28027                           plusw2	equ	0xFDB
 28028                           fsr2h	equ	0xFDA
 28029                           fsr2l	equ	0xFD9
 28030                           status	equ	0xFD8
 28031                           
 28032 ;; *************** function _ADC_Off *****************
 28033 ;; Defined at:
 28034 ;;		line 94 in file "Library/ADC.c"
 28035 ;; Parameters:    Size  Location     Type
 28036 ;;		None
 28037 ;; Auto vars:     Size  Location     Type
 28038 ;;		None
 28039 ;; Return value:  Size  Location     Type
 28040 ;;                  1    wreg      void 
 28041 ;; Registers used:
 28042 ;;		None
 28043 ;; Tracked objects:
 28044 ;;		On entry : 0/0
 28045 ;;		On exit  : 0/0
 28046 ;;		Unchanged: 0/0
 28047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28051 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28052 ;;Total ram usage:        0 bytes
 28053 ;; Hardware stack levels used:    1
 28054 ;; Hardware stack levels required when called:    7
 28055 ;; This function calls:
 28056 ;;		Nothing
 28057 ;; This function is called by:
 28058 ;;		_ADC_Calibrate
 28059 ;;		_ADC_Start
 28060 ;;		_ADC_ISR
 28061 ;;		_ADC_Sample
 28062 ;; This function uses a non-reentrant model
 28063 ;;
 28064                           
 28065                           	psect	text146
 28066  016544                     __ptext146:
 28067                           	opt stack 0
 28068  016544                     _ADC_Off:
 28069                           	opt stack 21
 28070                           
 28071                           ;ADC.c: 96: ADCON0bits.ADON = 0;
 28072                           
 28073                           ;incstack = 0
 28074  016544  90C2               	bcf	4034,0,c	;volatile
 28075                           
 28076                           ;ADC.c: 97: PIR1bits.ADIF = 0;
 28077  016546  9C9E               	bcf	3998,6,c	;volatile
 28078                           
 28079                           ;ADC.c: 98: PIE1bits.ADIE = 0;
 28080  016548  9C9D               	bcf	3997,6,c	;volatile
 28081  01654A  0012               	return		;funcret
 28082  01654C                     __end_of_ADC_Off:
 28083                           	opt stack 0
 28084                           tosu	equ	0xFFF
 28085                           tosh	equ	0xFFE
 28086                           tosl	equ	0xFFD
 28087                           pclath	equ	0xFFA
 28088                           tblptru	equ	0xFF8
 28089                           tblptrh	equ	0xFF7
 28090                           tblptrl	equ	0xFF6
 28091                           tablat	equ	0xFF5
 28092                           prodh	equ	0xFF4
 28093                           prodl	equ	0xFF3
 28094                           intcon	equ	0xFF2
 28095                           indf0	equ	0xFEF
 28096                           postinc0	equ	0xFEE
 28097                           fsr0h	equ	0xFEA
 28098                           fsr0l	equ	0xFE9
 28099                           wreg	equ	0xFE8
 28100                           indf1	equ	0xFE7
 28101                           postdec1	equ	0xFE5
 28102                           fsr1h	equ	0xFE2
 28103                           fsr1l	equ	0xFE1
 28104                           indf2	equ	0xFDF
 28105                           postinc2	equ	0xFDE
 28106                           postdec2	equ	0xFDD
 28107                           plusw2	equ	0xFDB
 28108                           fsr2h	equ	0xFDA
 28109                           fsr2l	equ	0xFD9
 28110                           status	equ	0xFD8
 28111                           
 28112 ;; *************** function _getMode *****************
 28113 ;; Defined at:
 28114 ;;		line 102 in file "main.c"
 28115 ;; Parameters:    Size  Location     Type
 28116 ;;		None
 28117 ;; Auto vars:     Size  Location     Type
 28118 ;;		None
 28119 ;; Return value:  Size  Location     Type
 28120 ;;                  1    wreg      void 
 28121 ;; Registers used:
 28122 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 28123 ;; Tracked objects:
 28124 ;;		On entry : 0/0
 28125 ;;		On exit  : 0/0
 28126 ;;		Unchanged: 0/0
 28127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28131 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28132 ;;Total ram usage:        0 bytes
 28133 ;; Hardware stack levels used:    1
 28134 ;; Hardware stack levels required when called:    9
 28135 ;; This function calls:
 28136 ;;		_HMI_DIPSwitch
 28137 ;;		_HMI_DownSwitch
 28138 ;;		_HMI_LeftSwitch
 28139 ;;		_HMI_RightSwitch
 28140 ;;		_HMI_UpSwitch
 28141 ;;		_MXK_DIPSwitch
 28142 ;;		_MXK_TestButton
 28143 ;; This function is called by:
 28144 ;;		_main
 28145 ;; This function uses a non-reentrant model
 28146 ;;
 28147                           
 28148                           	psect	text147
 28149  0140D2                     __ptext147:
 28150                           	opt stack 0
 28151  0140D2                     _getMode:
 28152                           	opt stack 21
 28153                           
 28154                           ;main.c: 103: mode = 0;
 28155                           
 28156                           ;incstack = 0
 28157  0140D2  0E00               	movlw	0
 28158  0140D4  0103               	movlb	3	; () banked
 28159  0140D6  6F24               	movwf	(_mode+1)& (0+255),b
 28160  0140D8  0E00               	movlw	0
 28161  0140DA  6F23               	movwf	_mode& (0+255),b
 28162                           
 28163                           ; BSR set to: 3
 28164                           ;main.c: 104: if (HMIBoard.mUp.mGetState()) {
 28165  0140DC  EE23  F04E         	lfsr	2,_HMIBoard+35
 28166  0140E0  D801               	call	u11478
 28167  0140E2  D00A               	goto	u11479
 28168  0140E4                     u11478:
 28169  0140E4  0005               	push	
 28170  0140E6  6EFA               	movwf	pclath,c
 28171  0140E8  50DE               	movf	postinc2,w,c
 28172  0140EA  6EFD               	movwf	tosl,c
 28173  0140EC  50DE               	movf	postinc2,w,c
 28174  0140EE  6EFE               	movwf	tosh,c
 28175  0140F0  50DE               	movf	postinc2,w,c
 28176  0140F2  6EFF               	movwf	tosu,c
 28177  0140F4  50FA               	movf	pclath,w,c
 28178  0140F6  0012               	return		;indir
 28179  0140F8                     u11479:
 28180  0140F8  0900               	iorlw	0
 28181  0140FA  B4D8               	btfsc	status,2,c
 28182  0140FC  D005               	goto	l2304
 28183                           
 28184                           ;main.c: 105: mode = 1;
 28185  0140FE  0E00               	movlw	0
 28186  014100  0103               	movlb	3	; () banked
 28187  014102  6F24               	movwf	(_mode+1)& (0+255),b
 28188  014104  0E01               	movlw	1
 28189  014106  6F23               	movwf	_mode& (0+255),b
 28190  014108                     l2304:
 28191                           
 28192                           ;main.c: 106: }
 28193                           ;main.c: 107: if (HMIBoard.mRight.mGetState()) {
 28194                           
 28195                           ; BSR set to: 3
 28196  014108  EE23  F03A         	lfsr	2,_HMIBoard+15
 28197  01410C  D801               	call	u11498
 28198  01410E  D00A               	goto	u11499
 28199  014110                     u11498:
 28200  014110  0005               	push	
 28201  014112  6EFA               	movwf	pclath,c
 28202  014114  50DE               	movf	postinc2,w,c
 28203  014116  6EFD               	movwf	tosl,c
 28204  014118  50DE               	movf	postinc2,w,c
 28205  01411A  6EFE               	movwf	tosh,c
 28206  01411C  50DE               	movf	postinc2,w,c
 28207  01411E  6EFF               	movwf	tosu,c
 28208  014120  50FA               	movf	pclath,w,c
 28209  014122  0012               	return		;indir
 28210  014124                     u11499:
 28211  014124  0900               	iorlw	0
 28212  014126  B4D8               	btfsc	status,2,c
 28213  014128  D005               	goto	l2305
 28214                           
 28215                           ;main.c: 108: mode = 2;
 28216  01412A  0E00               	movlw	0
 28217  01412C  0103               	movlb	3	; () banked
 28218  01412E  6F24               	movwf	(_mode+1)& (0+255),b
 28219  014130  0E02               	movlw	2
 28220  014132  6F23               	movwf	_mode& (0+255),b
 28221  014134                     l2305:
 28222                           
 28223                           ;main.c: 109: }
 28224                           ;main.c: 110: if (HMIBoard.mDown.mGetState()) {
 28225                           
 28226                           ; BSR set to: 3
 28227  014134  EE23  F058         	lfsr	2,_HMIBoard+45
 28228  014138  D801               	call	u11518
 28229  01413A  D00A               	goto	u11519
 28230  01413C                     u11518:
 28231  01413C  0005               	push	
 28232  01413E  6EFA               	movwf	pclath,c
 28233  014140  50DE               	movf	postinc2,w,c
 28234  014142  6EFD               	movwf	tosl,c
 28235  014144  50DE               	movf	postinc2,w,c
 28236  014146  6EFE               	movwf	tosh,c
 28237  014148  50DE               	movf	postinc2,w,c
 28238  01414A  6EFF               	movwf	tosu,c
 28239  01414C  50FA               	movf	pclath,w,c
 28240  01414E  0012               	return		;indir
 28241  014150                     u11519:
 28242  014150  0900               	iorlw	0
 28243  014152  B4D8               	btfsc	status,2,c
 28244  014154  D005               	goto	l2306
 28245                           
 28246                           ;main.c: 111: mode = 3;
 28247  014156  0E00               	movlw	0
 28248  014158  0103               	movlb	3	; () banked
 28249  01415A  6F24               	movwf	(_mode+1)& (0+255),b
 28250  01415C  0E03               	movlw	3
 28251  01415E  6F23               	movwf	_mode& (0+255),b
 28252  014160                     l2306:
 28253                           
 28254                           ;main.c: 112: }
 28255                           ;main.c: 113: if (HMIBoard.mLeft.mGetState()) {
 28256                           
 28257                           ; BSR set to: 3
 28258  014160  EE23  F044         	lfsr	2,_HMIBoard+25
 28259  014164  D801               	call	u11538
 28260  014166  D00A               	goto	u11539
 28261  014168                     u11538:
 28262  014168  0005               	push	
 28263  01416A  6EFA               	movwf	pclath,c
 28264  01416C  50DE               	movf	postinc2,w,c
 28265  01416E  6EFD               	movwf	tosl,c
 28266  014170  50DE               	movf	postinc2,w,c
 28267  014172  6EFE               	movwf	tosh,c
 28268  014174  50DE               	movf	postinc2,w,c
 28269  014176  6EFF               	movwf	tosu,c
 28270  014178  50FA               	movf	pclath,w,c
 28271  01417A  0012               	return		;indir
 28272  01417C                     u11539:
 28273  01417C  0900               	iorlw	0
 28274  01417E  B4D8               	btfsc	status,2,c
 28275  014180  0012               	return	
 28276                           
 28277                           ;main.c: 114: mode = 4;
 28278  014182  0E00               	movlw	0
 28279  014184  0103               	movlb	3	; () banked
 28280  014186  6F24               	movwf	(_mode+1)& (0+255),b
 28281  014188  0E04               	movlw	4
 28282  01418A  6F23               	movwf	_mode& (0+255),b
 28283  01418C  0012               	return	
 28284  01418E                     __end_of_getMode:
 28285                           	opt stack 0
 28286                           tosu	equ	0xFFF
 28287                           tosh	equ	0xFFE
 28288                           tosl	equ	0xFFD
 28289                           pclath	equ	0xFFA
 28290                           tblptru	equ	0xFF8
 28291                           tblptrh	equ	0xFF7
 28292                           tblptrl	equ	0xFF6
 28293                           tablat	equ	0xFF5
 28294                           prodh	equ	0xFF4
 28295                           prodl	equ	0xFF3
 28296                           intcon	equ	0xFF2
 28297                           indf0	equ	0xFEF
 28298                           postinc0	equ	0xFEE
 28299                           fsr0h	equ	0xFEA
 28300                           fsr0l	equ	0xFE9
 28301                           wreg	equ	0xFE8
 28302                           indf1	equ	0xFE7
 28303                           postdec1	equ	0xFE5
 28304                           fsr1h	equ	0xFE2
 28305                           fsr1l	equ	0xFE1
 28306                           indf2	equ	0xFDF
 28307                           postinc2	equ	0xFDE
 28308                           postdec2	equ	0xFDD
 28309                           plusw2	equ	0xFDB
 28310                           fsr2h	equ	0xFDA
 28311                           fsr2l	equ	0xFD9
 28312                           status	equ	0xFD8
 28313                           
 28314 ;; *************** function _MXK_DIPSwitch *****************
 28315 ;; Defined at:
 28316 ;;		line 24 in file "Library/MXK.c"
 28317 ;; Parameters:    Size  Location     Type
 28318 ;;		None
 28319 ;; Auto vars:     Size  Location     Type
 28320 ;;		None
 28321 ;; Return value:  Size  Location     Type
 28322 ;;                  1    wreg      unsigned char 
 28323 ;; Registers used:
 28324 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 28325 ;; Tracked objects:
 28326 ;;		On entry : 0/0
 28327 ;;		On exit  : 0/0
 28328 ;;		Unchanged: 0/0
 28329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28331 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28333 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28334 ;;Total ram usage:        0 bytes
 28335 ;; Hardware stack levels used:    1
 28336 ;; Hardware stack levels required when called:    8
 28337 ;; This function calls:
 28338 ;;		_Port_GetQuad
 28339 ;; This function is called by:
 28340 ;;		_FunctInitButton
 28341 ;;		_Button_Poll
 28342 ;;		_getMode
 28343 ;; This function uses a non-reentrant model
 28344 ;;
 28345                           
 28346                           	psect	text148
 28347  01638C                     __ptext148:
 28348                           	opt stack 0
 28349  01638C                     _MXK_DIPSwitch:
 28350                           	opt stack 19
 28351                           
 28352                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
 28353                           
 28354                           ;incstack = 0
 28355  01638C  0EE0               	movlw	low _PortD
 28356  01638E  0100               	movlb	0	; () banked
 28357  016390  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
 28358  016392  0E00               	movlw	high _PortD
 28359  016394  0100               	movlb	0	; () banked
 28360  016396  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 28361  016398  0E00               	movlw	0
 28362  01639A  0100               	movlb	0	; () banked
 28363  01639C  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
 28364  01639E  EC0F  F0AD         	call	_Port_GetQuad	;wreg free
 28365  0163A2  0012               	return	
 28366  0163A4                     __end_of_MXK_DIPSwitch:
 28367                           	opt stack 0
 28368                           tosu	equ	0xFFF
 28369                           tosh	equ	0xFFE
 28370                           tosl	equ	0xFFD
 28371                           pclath	equ	0xFFA
 28372                           tblptru	equ	0xFF8
 28373                           tblptrh	equ	0xFF7
 28374                           tblptrl	equ	0xFF6
 28375                           tablat	equ	0xFF5
 28376                           prodh	equ	0xFF4
 28377                           prodl	equ	0xFF3
 28378                           intcon	equ	0xFF2
 28379                           indf0	equ	0xFEF
 28380                           postinc0	equ	0xFEE
 28381                           fsr0h	equ	0xFEA
 28382                           fsr0l	equ	0xFE9
 28383                           wreg	equ	0xFE8
 28384                           indf1	equ	0xFE7
 28385                           postdec1	equ	0xFE5
 28386                           fsr1h	equ	0xFE2
 28387                           fsr1l	equ	0xFE1
 28388                           indf2	equ	0xFDF
 28389                           postinc2	equ	0xFDE
 28390                           postdec2	equ	0xFDD
 28391                           plusw2	equ	0xFDB
 28392                           fsr2h	equ	0xFDA
 28393                           fsr2l	equ	0xFD9
 28394                           status	equ	0xFD8
 28395                           
 28396 ;; *************** function _HMI_DIPSwitch *****************
 28397 ;; Defined at:
 28398 ;;		line 47 in file "HMI.c"
 28399 ;; Parameters:    Size  Location     Type
 28400 ;;		None
 28401 ;; Auto vars:     Size  Location     Type
 28402 ;;		None
 28403 ;; Return value:  Size  Location     Type
 28404 ;;                  1    wreg      unsigned char 
 28405 ;; Registers used:
 28406 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 28407 ;; Tracked objects:
 28408 ;;		On entry : 0/0
 28409 ;;		On exit  : 0/0
 28410 ;;		Unchanged: 0/0
 28411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28416 ;;Total ram usage:        0 bytes
 28417 ;; Hardware stack levels used:    1
 28418 ;; Hardware stack levels required when called:    8
 28419 ;; This function calls:
 28420 ;;		_Port_GetQuad
 28421 ;; This function is called by:
 28422 ;;		_HMI_Init
 28423 ;;		_Button_Poll
 28424 ;;		_getMode
 28425 ;; This function uses a non-reentrant model
 28426 ;;
 28427                           
 28428                           	psect	text149
 28429  0163A4                     __ptext149:
 28430                           	opt stack 0
 28431  0163A4                     _HMI_DIPSwitch:
 28432                           	opt stack 19
 28433                           
 28434                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
 28435                           
 28436                           ;incstack = 0
 28437  0163A4  0E99               	movlw	low _PortE
 28438  0163A6  0100               	movlb	0	; () banked
 28439  0163A8  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
 28440  0163AA  0E03               	movlw	high _PortE
 28441  0163AC  0100               	movlb	0	; () banked
 28442  0163AE  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 28443  0163B0  0E00               	movlw	0
 28444  0163B2  0100               	movlb	0	; () banked
 28445  0163B4  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
 28446  0163B6  EC0F  F0AD         	call	_Port_GetQuad	;wreg free
 28447  0163BA  0012               	return	
 28448  0163BC                     __end_of_HMI_DIPSwitch:
 28449                           	opt stack 0
 28450                           tosu	equ	0xFFF
 28451                           tosh	equ	0xFFE
 28452                           tosl	equ	0xFFD
 28453                           pclath	equ	0xFFA
 28454                           tblptru	equ	0xFF8
 28455                           tblptrh	equ	0xFF7
 28456                           tblptrl	equ	0xFF6
 28457                           tablat	equ	0xFF5
 28458                           prodh	equ	0xFF4
 28459                           prodl	equ	0xFF3
 28460                           intcon	equ	0xFF2
 28461                           indf0	equ	0xFEF
 28462                           postinc0	equ	0xFEE
 28463                           fsr0h	equ	0xFEA
 28464                           fsr0l	equ	0xFE9
 28465                           wreg	equ	0xFE8
 28466                           indf1	equ	0xFE7
 28467                           postdec1	equ	0xFE5
 28468                           fsr1h	equ	0xFE2
 28469                           fsr1l	equ	0xFE1
 28470                           indf2	equ	0xFDF
 28471                           postinc2	equ	0xFDE
 28472                           postdec2	equ	0xFDD
 28473                           plusw2	equ	0xFDB
 28474                           fsr2h	equ	0xFDA
 28475                           fsr2l	equ	0xFD9
 28476                           status	equ	0xFD8
 28477                           
 28478 ;; *************** function _HMI_DownSwitch *****************
 28479 ;; Defined at:
 28480 ;;		line 42 in file "HMI.c"
 28481 ;; Parameters:    Size  Location     Type
 28482 ;;		None
 28483 ;; Auto vars:     Size  Location     Type
 28484 ;;		None
 28485 ;; Return value:  Size  Location     Type
 28486 ;;                  1    wreg      unsigned char 
 28487 ;; Registers used:
 28488 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 28489 ;; Tracked objects:
 28490 ;;		On entry : 0/0
 28491 ;;		On exit  : 0/0
 28492 ;;		Unchanged: 0/0
 28493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28497 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28498 ;;Total ram usage:        0 bytes
 28499 ;; Hardware stack levels used:    1
 28500 ;; Hardware stack levels required when called:    8
 28501 ;; This function calls:
 28502 ;;		_Port_GetPin
 28503 ;; This function is called by:
 28504 ;;		_HMI_Init
 28505 ;;		_Button_Poll
 28506 ;;		_getMode
 28507 ;; This function uses a non-reentrant model
 28508 ;;
 28509                           
 28510                           	psect	text150
 28511  0163BC                     __ptext150:
 28512                           	opt stack 0
 28513  0163BC                     _HMI_DownSwitch:
 28514                           	opt stack 19
 28515                           
 28516                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
 28517                           
 28518                           ;incstack = 0
 28519  0163BC  0E99               	movlw	low _PortE
 28520  0163BE  0100               	movlb	0	; () banked
 28521  0163C0  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 28522  0163C2  0E03               	movlw	high _PortE
 28523  0163C4  0100               	movlb	0	; () banked
 28524  0163C6  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 28525  0163C8  0E06               	movlw	6
 28526  0163CA  0100               	movlb	0	; () banked
 28527  0163CC  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 28528  0163CE  EC09  F0AE         	call	_Port_GetPin	;wreg free
 28529  0163D2  0012               	return	
 28530  0163D4                     __end_of_HMI_DownSwitch:
 28531                           	opt stack 0
 28532                           tosu	equ	0xFFF
 28533                           tosh	equ	0xFFE
 28534                           tosl	equ	0xFFD
 28535                           pclath	equ	0xFFA
 28536                           tblptru	equ	0xFF8
 28537                           tblptrh	equ	0xFF7
 28538                           tblptrl	equ	0xFF6
 28539                           tablat	equ	0xFF5
 28540                           prodh	equ	0xFF4
 28541                           prodl	equ	0xFF3
 28542                           intcon	equ	0xFF2
 28543                           indf0	equ	0xFEF
 28544                           postinc0	equ	0xFEE
 28545                           fsr0h	equ	0xFEA
 28546                           fsr0l	equ	0xFE9
 28547                           wreg	equ	0xFE8
 28548                           indf1	equ	0xFE7
 28549                           postdec1	equ	0xFE5
 28550                           fsr1h	equ	0xFE2
 28551                           fsr1l	equ	0xFE1
 28552                           indf2	equ	0xFDF
 28553                           postinc2	equ	0xFDE
 28554                           postdec2	equ	0xFDD
 28555                           plusw2	equ	0xFDB
 28556                           fsr2h	equ	0xFDA
 28557                           fsr2l	equ	0xFD9
 28558                           status	equ	0xFD8
 28559                           
 28560 ;; *************** function _HMI_UpSwitch *****************
 28561 ;; Defined at:
 28562 ;;		line 37 in file "HMI.c"
 28563 ;; Parameters:    Size  Location     Type
 28564 ;;		None
 28565 ;; Auto vars:     Size  Location     Type
 28566 ;;		None
 28567 ;; Return value:  Size  Location     Type
 28568 ;;                  1    wreg      unsigned char 
 28569 ;; Registers used:
 28570 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 28571 ;; Tracked objects:
 28572 ;;		On entry : 0/0
 28573 ;;		On exit  : 0/0
 28574 ;;		Unchanged: 0/0
 28575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28579 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28580 ;;Total ram usage:        0 bytes
 28581 ;; Hardware stack levels used:    1
 28582 ;; Hardware stack levels required when called:    8
 28583 ;; This function calls:
 28584 ;;		_Port_GetPin
 28585 ;; This function is called by:
 28586 ;;		_HMI_Init
 28587 ;;		_Button_Poll
 28588 ;;		_getMode
 28589 ;; This function uses a non-reentrant model
 28590 ;;
 28591                           
 28592                           	psect	text151
 28593  0163D4                     __ptext151:
 28594                           	opt stack 0
 28595  0163D4                     _HMI_UpSwitch:
 28596                           	opt stack 19
 28597                           
 28598                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
 28599                           
 28600                           ;incstack = 0
 28601  0163D4  0E99               	movlw	low _PortE
 28602  0163D6  0100               	movlb	0	; () banked
 28603  0163D8  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 28604  0163DA  0E03               	movlw	high _PortE
 28605  0163DC  0100               	movlb	0	; () banked
 28606  0163DE  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 28607  0163E0  0E07               	movlw	7
 28608  0163E2  0100               	movlb	0	; () banked
 28609  0163E4  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 28610  0163E6  EC09  F0AE         	call	_Port_GetPin	;wreg free
 28611  0163EA  0012               	return	
 28612  0163EC                     __end_of_HMI_UpSwitch:
 28613                           	opt stack 0
 28614                           tosu	equ	0xFFF
 28615                           tosh	equ	0xFFE
 28616                           tosl	equ	0xFFD
 28617                           pclath	equ	0xFFA
 28618                           tblptru	equ	0xFF8
 28619                           tblptrh	equ	0xFF7
 28620                           tblptrl	equ	0xFF6
 28621                           tablat	equ	0xFF5
 28622                           prodh	equ	0xFF4
 28623                           prodl	equ	0xFF3
 28624                           intcon	equ	0xFF2
 28625                           indf0	equ	0xFEF
 28626                           postinc0	equ	0xFEE
 28627                           fsr0h	equ	0xFEA
 28628                           fsr0l	equ	0xFE9
 28629                           wreg	equ	0xFE8
 28630                           indf1	equ	0xFE7
 28631                           postdec1	equ	0xFE5
 28632                           fsr1h	equ	0xFE2
 28633                           fsr1l	equ	0xFE1
 28634                           indf2	equ	0xFDF
 28635                           postinc2	equ	0xFDE
 28636                           postdec2	equ	0xFDD
 28637                           plusw2	equ	0xFDB
 28638                           fsr2h	equ	0xFDA
 28639                           fsr2l	equ	0xFD9
 28640                           status	equ	0xFD8
 28641                           
 28642 ;; *************** function _HMI_RightSwitch *****************
 28643 ;; Defined at:
 28644 ;;		line 32 in file "HMI.c"
 28645 ;; Parameters:    Size  Location     Type
 28646 ;;		None
 28647 ;; Auto vars:     Size  Location     Type
 28648 ;;		None
 28649 ;; Return value:  Size  Location     Type
 28650 ;;                  1    wreg      unsigned char 
 28651 ;; Registers used:
 28652 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 28653 ;; Tracked objects:
 28654 ;;		On entry : 0/0
 28655 ;;		On exit  : 0/0
 28656 ;;		Unchanged: 0/0
 28657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28661 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28662 ;;Total ram usage:        0 bytes
 28663 ;; Hardware stack levels used:    1
 28664 ;; Hardware stack levels required when called:    8
 28665 ;; This function calls:
 28666 ;;		_Port_GetPin
 28667 ;; This function is called by:
 28668 ;;		_HMI_Init
 28669 ;;		_Button_Poll
 28670 ;;		_getMode
 28671 ;; This function uses a non-reentrant model
 28672 ;;
 28673                           
 28674                           	psect	text152
 28675  0163EC                     __ptext152:
 28676                           	opt stack 0
 28677  0163EC                     _HMI_RightSwitch:
 28678                           	opt stack 19
 28679                           
 28680                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
 28681                           
 28682                           ;incstack = 0
 28683  0163EC  0E99               	movlw	low _PortE
 28684  0163EE  0100               	movlb	0	; () banked
 28685  0163F0  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 28686  0163F2  0E03               	movlw	high _PortE
 28687  0163F4  0100               	movlb	0	; () banked
 28688  0163F6  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 28689  0163F8  0E04               	movlw	4
 28690  0163FA  0100               	movlb	0	; () banked
 28691  0163FC  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 28692  0163FE  EC09  F0AE         	call	_Port_GetPin	;wreg free
 28693  016402  0012               	return	
 28694  016404                     __end_of_HMI_RightSwitch:
 28695                           	opt stack 0
 28696                           tosu	equ	0xFFF
 28697                           tosh	equ	0xFFE
 28698                           tosl	equ	0xFFD
 28699                           pclath	equ	0xFFA
 28700                           tblptru	equ	0xFF8
 28701                           tblptrh	equ	0xFF7
 28702                           tblptrl	equ	0xFF6
 28703                           tablat	equ	0xFF5
 28704                           prodh	equ	0xFF4
 28705                           prodl	equ	0xFF3
 28706                           intcon	equ	0xFF2
 28707                           indf0	equ	0xFEF
 28708                           postinc0	equ	0xFEE
 28709                           fsr0h	equ	0xFEA
 28710                           fsr0l	equ	0xFE9
 28711                           wreg	equ	0xFE8
 28712                           indf1	equ	0xFE7
 28713                           postdec1	equ	0xFE5
 28714                           fsr1h	equ	0xFE2
 28715                           fsr1l	equ	0xFE1
 28716                           indf2	equ	0xFDF
 28717                           postinc2	equ	0xFDE
 28718                           postdec2	equ	0xFDD
 28719                           plusw2	equ	0xFDB
 28720                           fsr2h	equ	0xFDA
 28721                           fsr2l	equ	0xFD9
 28722                           status	equ	0xFD8
 28723                           
 28724 ;; *************** function _HMI_LeftSwitch *****************
 28725 ;; Defined at:
 28726 ;;		line 27 in file "HMI.c"
 28727 ;; Parameters:    Size  Location     Type
 28728 ;;		None
 28729 ;; Auto vars:     Size  Location     Type
 28730 ;;		None
 28731 ;; Return value:  Size  Location     Type
 28732 ;;                  1    wreg      unsigned char 
 28733 ;; Registers used:
 28734 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 28735 ;; Tracked objects:
 28736 ;;		On entry : 0/0
 28737 ;;		On exit  : 0/0
 28738 ;;		Unchanged: 0/0
 28739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28743 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28744 ;;Total ram usage:        0 bytes
 28745 ;; Hardware stack levels used:    1
 28746 ;; Hardware stack levels required when called:    8
 28747 ;; This function calls:
 28748 ;;		_Port_GetPin
 28749 ;; This function is called by:
 28750 ;;		_HMI_Init
 28751 ;;		_Button_Poll
 28752 ;;		_getMode
 28753 ;; This function uses a non-reentrant model
 28754 ;;
 28755                           
 28756                           	psect	text153
 28757  016404                     __ptext153:
 28758                           	opt stack 0
 28759  016404                     _HMI_LeftSwitch:
 28760                           	opt stack 19
 28761                           
 28762                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
 28763                           
 28764                           ;incstack = 0
 28765  016404  0E99               	movlw	low _PortE
 28766  016406  0100               	movlb	0	; () banked
 28767  016408  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 28768  01640A  0E03               	movlw	high _PortE
 28769  01640C  0100               	movlb	0	; () banked
 28770  01640E  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 28771  016410  0E05               	movlw	5
 28772  016412  0100               	movlb	0	; () banked
 28773  016414  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 28774  016416  EC09  F0AE         	call	_Port_GetPin	;wreg free
 28775  01641A  0012               	return	
 28776  01641C                     __end_of_HMI_LeftSwitch:
 28777                           	opt stack 0
 28778                           tosu	equ	0xFFF
 28779                           tosh	equ	0xFFE
 28780                           tosl	equ	0xFFD
 28781                           pclath	equ	0xFFA
 28782                           tblptru	equ	0xFF8
 28783                           tblptrh	equ	0xFF7
 28784                           tblptrl	equ	0xFF6
 28785                           tablat	equ	0xFF5
 28786                           prodh	equ	0xFF4
 28787                           prodl	equ	0xFF3
 28788                           intcon	equ	0xFF2
 28789                           indf0	equ	0xFEF
 28790                           postinc0	equ	0xFEE
 28791                           fsr0h	equ	0xFEA
 28792                           fsr0l	equ	0xFE9
 28793                           wreg	equ	0xFE8
 28794                           indf1	equ	0xFE7
 28795                           postdec1	equ	0xFE5
 28796                           fsr1h	equ	0xFE2
 28797                           fsr1l	equ	0xFE1
 28798                           indf2	equ	0xFDF
 28799                           postinc2	equ	0xFDE
 28800                           postdec2	equ	0xFDD
 28801                           plusw2	equ	0xFDB
 28802                           fsr2h	equ	0xFDA
 28803                           fsr2l	equ	0xFD9
 28804                           status	equ	0xFD8
 28805                           
 28806 ;; *************** function _MXK_TestButton *****************
 28807 ;; Defined at:
 28808 ;;		line 14 in file "Library/MXK.c"
 28809 ;; Parameters:    Size  Location     Type
 28810 ;;		None
 28811 ;; Auto vars:     Size  Location     Type
 28812 ;;		None
 28813 ;; Return value:  Size  Location     Type
 28814 ;;                  1    wreg      unsigned char 
 28815 ;; Registers used:
 28816 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 28817 ;; Tracked objects:
 28818 ;;		On entry : 0/0
 28819 ;;		On exit  : 0/0
 28820 ;;		Unchanged: 0/0
 28821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28825 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28826 ;;Total ram usage:        0 bytes
 28827 ;; Hardware stack levels used:    1
 28828 ;; Hardware stack levels required when called:    8
 28829 ;; This function calls:
 28830 ;;		_Port_GetPin
 28831 ;; This function is called by:
 28832 ;;		_FunctInitButton
 28833 ;;		_Button_Poll
 28834 ;;		_getMode
 28835 ;; This function uses a non-reentrant model
 28836 ;;
 28837                           
 28838                           	psect	text154
 28839  01641C                     __ptext154:
 28840                           	opt stack 0
 28841  01641C                     _MXK_TestButton:
 28842                           	opt stack 19
 28843                           
 28844                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
 28845                           
 28846                           ;incstack = 0
 28847  01641C  0EA3               	movlw	low _PortB
 28848  01641E  0100               	movlb	0	; () banked
 28849  016420  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 28850  016422  0E03               	movlw	high _PortB
 28851  016424  0100               	movlb	0	; () banked
 28852  016426  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 28853  016428  0E04               	movlw	4
 28854  01642A  0100               	movlb	0	; () banked
 28855  01642C  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 28856  01642E  EC09  F0AE         	call	_Port_GetPin	;wreg free
 28857  016432  0012               	return	
 28858  016434                     __end_of_MXK_TestButton:
 28859                           	opt stack 0
 28860                           tosu	equ	0xFFF
 28861                           tosh	equ	0xFFE
 28862                           tosl	equ	0xFFD
 28863                           pclath	equ	0xFFA
 28864                           tblptru	equ	0xFF8
 28865                           tblptrh	equ	0xFF7
 28866                           tblptrl	equ	0xFF6
 28867                           tablat	equ	0xFF5
 28868                           prodh	equ	0xFF4
 28869                           prodl	equ	0xFF3
 28870                           intcon	equ	0xFF2
 28871                           indf0	equ	0xFEF
 28872                           postinc0	equ	0xFEE
 28873                           fsr0h	equ	0xFEA
 28874                           fsr0l	equ	0xFE9
 28875                           wreg	equ	0xFE8
 28876                           indf1	equ	0xFE7
 28877                           postdec1	equ	0xFE5
 28878                           fsr1h	equ	0xFE2
 28879                           fsr1l	equ	0xFE1
 28880                           indf2	equ	0xFDF
 28881                           postinc2	equ	0xFDE
 28882                           postdec2	equ	0xFDD
 28883                           plusw2	equ	0xFDB
 28884                           fsr2h	equ	0xFDA
 28885                           fsr2l	equ	0xFD9
 28886                           status	equ	0xFD8
 28887                           
 28888 ;; *************** function _Port_GetPin *****************
 28889 ;; Defined at:
 28890 ;;		line 271 in file "Library/Port.c"
 28891 ;; Parameters:    Size  Location     Type
 28892 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 28893 ;;		 -> PortB(10), PortE(10), PortC(10), 
 28894 ;;  pPin            1    2[BANK0 ] enum E6750
 28895 ;; Auto vars:     Size  Location     Type
 28896 ;;  Output          1    5[BANK0 ] unsigned char 
 28897 ;; Return value:  Size  Location     Type
 28898 ;;                  1    wreg      unsigned char 
 28899 ;; Registers used:
 28900 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 28901 ;; Tracked objects:
 28902 ;;		On entry : 0/0
 28903 ;;		On exit  : 0/0
 28904 ;;		Unchanged: 0/0
 28905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28906 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28907 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28908 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28909 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28910 ;;Total ram usage:        6 bytes
 28911 ;; Hardware stack levels used:    1
 28912 ;; Hardware stack levels required when called:    7
 28913 ;; This function calls:
 28914 ;;		Nothing
 28915 ;; This function is called by:
 28916 ;;		_Port_TogglePin
 28917 ;;		_HMI_LeftSwitch
 28918 ;;		_HMI_RightSwitch
 28919 ;;		_HMI_UpSwitch
 28920 ;;		_HMI_DownSwitch
 28921 ;;		_MXK_TestButton
 28922 ;; This function uses a non-reentrant model
 28923 ;;
 28924                           
 28925                           	psect	text155
 28926  015C12                     __ptext155:
 28927                           	opt stack 0
 28928  015C12                     _Port_GetPin:
 28929                           	opt stack 19
 28930                           
 28931                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 28932                           
 28933                           ;incstack = 0
 28934  015C12  0100               	movlb	0	; () banked
 28935  015C14  EE20 F006          	lfsr	2,6
 28936  015C18  5160               	movf	Port_GetPin@pInput& (0+255),w,b
 28937  015C1A  26D9               	addwf	fsr2l,f,c
 28938  015C1C  5161               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 28939  015C1E  22DA               	addwfc	fsr2h,f,c
 28940  015C20  CFDE F063          	movff	postinc2,??_Port_GetPin
 28941  015C24  CFDD F064          	movff	postdec2,??_Port_GetPin+1
 28942  015C28  C063  FFD9         	movff	??_Port_GetPin,fsr2l
 28943  015C2C  C064  FFDA         	movff	??_Port_GetPin+1,fsr2h
 28944  015C30  50DF               	movf	indf2,w,c
 28945  015C32  0100               	movlb	0	; () banked
 28946  015C34  6F65               	movwf	Port_GetPin@Output& (0+255),b
 28947                           
 28948                           ; BSR set to: 0
 28949                           ;Port.c: 274: Output >>= (UINT8)pPin;
 28950  015C36  0100               	movlb	0	; () banked
 28951  015C38  2962               	incf	Port_GetPin@pPin& (0+255),w,b
 28952  015C3A  0100               	movlb	0	; () banked
 28953  015C3C  6F63               	movwf	??_Port_GetPin& (0+255),b
 28954  015C3E  D003               	goto	u8730
 28955  015C40                     u8735:
 28956  015C40  0100               	movlb	0	; () banked
 28957  015C42  90D8               	bcf	status,0,c
 28958  015C44  3365               	rrcf	Port_GetPin@Output& (0+255),f,b
 28959  015C46                     u8730:
 28960  015C46  0100               	movlb	0	; () banked
 28961  015C48  2F63               	decfsz	??_Port_GetPin& (0+255),f,b
 28962  015C4A  D7FA               	goto	u8735
 28963                           
 28964                           ;Port.c: 275: Output &= 1;
 28965  015C4C  0E01               	movlw	1
 28966  015C4E  0100               	movlb	0	; () banked
 28967  015C50  1765               	andwf	Port_GetPin@Output& (0+255),f,b
 28968                           
 28969                           ; BSR set to: 0
 28970                           ;Port.c: 276: return Output;
 28971  015C52  0100               	movlb	0	; () banked
 28972  015C54  5165               	movf	Port_GetPin@Output& (0+255),w,b
 28973  015C56  0012               	return	
 28974  015C58                     __end_of_Port_GetPin:
 28975                           	opt stack 0
 28976                           tosu	equ	0xFFF
 28977                           tosh	equ	0xFFE
 28978                           tosl	equ	0xFFD
 28979                           pclath	equ	0xFFA
 28980                           tblptru	equ	0xFF8
 28981                           tblptrh	equ	0xFF7
 28982                           tblptrl	equ	0xFF6
 28983                           tablat	equ	0xFF5
 28984                           prodh	equ	0xFF4
 28985                           prodl	equ	0xFF3
 28986                           intcon	equ	0xFF2
 28987                           indf0	equ	0xFEF
 28988                           postinc0	equ	0xFEE
 28989                           fsr0h	equ	0xFEA
 28990                           fsr0l	equ	0xFE9
 28991                           wreg	equ	0xFE8
 28992                           indf1	equ	0xFE7
 28993                           postdec1	equ	0xFE5
 28994                           fsr1h	equ	0xFE2
 28995                           fsr1l	equ	0xFE1
 28996                           indf2	equ	0xFDF
 28997                           postinc2	equ	0xFDE
 28998                           postdec2	equ	0xFDD
 28999                           plusw2	equ	0xFDB
 29000                           fsr2h	equ	0xFDA
 29001                           fsr2l	equ	0xFD9
 29002                           status	equ	0xFD8
 29003                           
 29004 ;; *************** function _Port_GetQuad *****************
 29005 ;; Defined at:
 29006 ;;		line 498 in file "Library/Port.c"
 29007 ;; Parameters:    Size  Location     Type
 29008 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 29009 ;;		 -> PortE(10), PortD(10), 
 29010 ;;  pQuad           1    2[BANK0 ] enum E6776
 29011 ;; Auto vars:     Size  Location     Type
 29012 ;;  Output          1    5[BANK0 ] unsigned char 
 29013 ;; Return value:  Size  Location     Type
 29014 ;;                  1    wreg      unsigned char 
 29015 ;; Registers used:
 29016 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 29017 ;; Tracked objects:
 29018 ;;		On entry : 0/0
 29019 ;;		On exit  : 0/0
 29020 ;;		Unchanged: 0/0
 29021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29022 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29023 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29024 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29025 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29026 ;;Total ram usage:        6 bytes
 29027 ;; Hardware stack levels used:    1
 29028 ;; Hardware stack levels required when called:    7
 29029 ;; This function calls:
 29030 ;;		Nothing
 29031 ;; This function is called by:
 29032 ;;		_HMI_DIPSwitch
 29033 ;;		_MXK_DIPSwitch
 29034 ;;		_Port_ToggleQuad
 29035 ;; This function uses a non-reentrant model
 29036 ;;
 29037                           
 29038                           	psect	text156
 29039  015A1E                     __ptext156:
 29040                           	opt stack 0
 29041  015A1E                     _Port_GetQuad:
 29042                           	opt stack 19
 29043                           
 29044                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
 29045                           
 29046                           ; BSR set to: 0
 29047                           ;incstack = 0
 29048  015A1E  0100               	movlb	0	; () banked
 29049  015A20  EE20 F006          	lfsr	2,6
 29050  015A24  5160               	movf	Port_GetQuad@pInput& (0+255),w,b
 29051  015A26  26D9               	addwf	fsr2l,f,c
 29052  015A28  5161               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
 29053  015A2A  22DA               	addwfc	fsr2h,f,c
 29054  015A2C  CFDE F063          	movff	postinc2,??_Port_GetQuad
 29055  015A30  CFDD F064          	movff	postdec2,??_Port_GetQuad+1
 29056  015A34  C063  FFD9         	movff	??_Port_GetQuad,fsr2l
 29057  015A38  C064  FFDA         	movff	??_Port_GetQuad+1,fsr2h
 29058  015A3C  50DF               	movf	indf2,w,c
 29059  015A3E  0100               	movlb	0	; () banked
 29060  015A40  6F65               	movwf	Port_GetQuad@Output& (0+255),b
 29061                           
 29062                           ; BSR set to: 0
 29063                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
 29064  015A42  0100               	movlb	0	; () banked
 29065  015A44  5162               	movf	Port_GetQuad@pQuad& (0+255),w,b
 29066  015A46  0D04               	mullw	4
 29067  015A48  28F3               	incf	prodl,w,c
 29068  015A4A  0100               	movlb	0	; () banked
 29069  015A4C  6F63               	movwf	??_Port_GetQuad& (0+255),b
 29070  015A4E  D003               	goto	u9200
 29071  015A50                     u9205:
 29072  015A50  0100               	movlb	0	; () banked
 29073  015A52  90D8               	bcf	status,0,c
 29074  015A54  3365               	rrcf	Port_GetQuad@Output& (0+255),f,b
 29075  015A56                     u9200:
 29076  015A56  0100               	movlb	0	; () banked
 29077  015A58  2F63               	decfsz	??_Port_GetQuad& (0+255),f,b
 29078  015A5A  D7FA               	goto	u9205
 29079                           
 29080                           ;Port.c: 502: Output &= 0xF;
 29081  015A5C  0E0F               	movlw	15
 29082  015A5E  0100               	movlb	0	; () banked
 29083  015A60  1765               	andwf	Port_GetQuad@Output& (0+255),f,b
 29084                           
 29085                           ; BSR set to: 0
 29086                           ;Port.c: 503: return Output;
 29087  015A62  0100               	movlb	0	; () banked
 29088  015A64  5165               	movf	Port_GetQuad@Output& (0+255),w,b
 29089  015A66  0012               	return	
 29090  015A68                     __end_of_Port_GetQuad:
 29091                           	opt stack 0
 29092                           tosu	equ	0xFFF
 29093                           tosh	equ	0xFFE
 29094                           tosl	equ	0xFFD
 29095                           pclath	equ	0xFFA
 29096                           tblptru	equ	0xFF8
 29097                           tblptrh	equ	0xFF7
 29098                           tblptrl	equ	0xFF6
 29099                           tablat	equ	0xFF5
 29100                           prodh	equ	0xFF4
 29101                           prodl	equ	0xFF3
 29102                           intcon	equ	0xFF2
 29103                           indf0	equ	0xFEF
 29104                           postinc0	equ	0xFEE
 29105                           fsr0h	equ	0xFEA
 29106                           fsr0l	equ	0xFE9
 29107                           wreg	equ	0xFE8
 29108                           indf1	equ	0xFE7
 29109                           postdec1	equ	0xFE5
 29110                           fsr1h	equ	0xFE2
 29111                           fsr1l	equ	0xFE1
 29112                           indf2	equ	0xFDF
 29113                           postinc2	equ	0xFDE
 29114                           postdec2	equ	0xFDD
 29115                           plusw2	equ	0xFDB
 29116                           fsr2h	equ	0xFDA
 29117                           fsr2l	equ	0xFD9
 29118                           status	equ	0xFD8
 29119                           
 29120 ;; *************** function _ISR_Function *****************
 29121 ;; Defined at:
 29122 ;;		line 38 in file "Library/ISR.c"
 29123 ;; Parameters:    Size  Location     Type
 29124 ;;		None
 29125 ;; Auto vars:     Size  Location     Type
 29126 ;;		None
 29127 ;; Return value:  Size  Location     Type
 29128 ;;                  1    wreg      void 
 29129 ;; Registers used:
 29130 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29131 ;; Tracked objects:
 29132 ;;		On entry : 0/0
 29133 ;;		On exit  : 0/0
 29134 ;;		Unchanged: 0/0
 29135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29138 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29139 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29140 ;;Total ram usage:       18 bytes
 29141 ;; Hardware stack levels used:    1
 29142 ;; Hardware stack levels required when called:    6
 29143 ;; This function calls:
 29144 ;;		_Timer0_ISR
 29145 ;; This function is called by:
 29146 ;;		Interrupt level 2
 29147 ;; This function uses a non-reentrant model
 29148 ;;
 29149                           
 29150                           	psect	intcode
 29151  001408                     __pintcode:
 29152                           	opt stack 0
 29153  001408                     _ISR_Function:
 29154                           	opt stack 13
 29155                           
 29156                           ; BSR set to: 0
 29157                           ;incstack = 0
 29158  001408  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 29159  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 29160  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 29161  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 29162  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 29163  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 29164  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 29165  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 29166  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 29167  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 29168  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 29169  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 29170  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 29171  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 29172  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 29173  001442  C051  F025         	movff	btemp,??_ISR_Function+14
 29174  001446  C052  F026         	movff	btemp+1,??_ISR_Function+15
 29175  00144A  C053  F027         	movff	btemp+2,??_ISR_Function+16
 29176  00144E  C054  F028         	movff	btemp+3,??_ISR_Function+17
 29177                           
 29178                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 29179  001452  92F2               	bcf	intcon,1,c	;volatile
 29180                           
 29181                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 29182  001454  B4F2               	btfsc	intcon,2,c	;volatile
 29183  001456  AAF2               	btfss	intcon,5,c	;volatile
 29184  001458  D002               	goto	i2l1590
 29185                           
 29186                           ;ISR.c: 68: Timer0_ISR();
 29187  00145A  EC4B  F0B0         	call	_Timer0_ISR	;wreg free
 29188  00145E                     i2l1590:
 29189  00145E  C028  F054         	movff	??_ISR_Function+17,btemp+3
 29190  001462  C027  F053         	movff	??_ISR_Function+16,btemp+2
 29191  001466  C026  F052         	movff	??_ISR_Function+15,btemp+1
 29192  00146A  C025  F051         	movff	??_ISR_Function+14,btemp
 29193  00146E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 29194  001472  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 29195  001476  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 29196  00147A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 29197  00147E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 29198  001482  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 29199  001486  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 29200  00148A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 29201  00148E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 29202  001492  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 29203  001496  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 29204  00149A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 29205  00149E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 29206  0014A2  C017  FFFA         	movff	??_ISR_Function,pclath
 29207  0014A6  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 29208  0014A8  0011               	retfie		f
 29209  0014AA                     __end_of_ISR_Function:
 29210                           	opt stack 0
 29211                           tosu	equ	0xFFF
 29212                           tosh	equ	0xFFE
 29213                           tosl	equ	0xFFD
 29214                           pclatu	equ	0xFFB
 29215                           pclath	equ	0xFFA
 29216                           tblptru	equ	0xFF8
 29217                           tblptrh	equ	0xFF7
 29218                           tblptrl	equ	0xFF6
 29219                           tablat	equ	0xFF5
 29220                           prodh	equ	0xFF4
 29221                           prodl	equ	0xFF3
 29222                           intcon	equ	0xFF2
 29223                           indf0	equ	0xFEF
 29224                           postinc0	equ	0xFEE
 29225                           fsr0h	equ	0xFEA
 29226                           fsr0l	equ	0xFE9
 29227                           wreg	equ	0xFE8
 29228                           indf1	equ	0xFE7
 29229                           postdec1	equ	0xFE5
 29230                           fsr1h	equ	0xFE2
 29231                           fsr1l	equ	0xFE1
 29232                           indf2	equ	0xFDF
 29233                           postinc2	equ	0xFDE
 29234                           postdec2	equ	0xFDD
 29235                           plusw2	equ	0xFDB
 29236                           fsr2h	equ	0xFDA
 29237                           fsr2l	equ	0xFD9
 29238                           status	equ	0xFD8
 29239                           
 29240 ;; *************** function _Timer0_ISR *****************
 29241 ;; Defined at:
 29242 ;;		line 94 in file "Library/Timer0.c"
 29243 ;; Parameters:    Size  Location     Type
 29244 ;;		None
 29245 ;; Auto vars:     Size  Location     Type
 29246 ;;		None
 29247 ;; Return value:  Size  Location     Type
 29248 ;;                  1    wreg      void 
 29249 ;; Registers used:
 29250 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29251 ;; Tracked objects:
 29252 ;;		On entry : 0/0
 29253 ;;		On exit  : 0/0
 29254 ;;		Unchanged: 0/0
 29255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29259 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29260 ;;Total ram usage:        0 bytes
 29261 ;; Hardware stack levels used:    1
 29262 ;; Hardware stack levels required when called:    5
 29263 ;; This function calls:
 29264 ;;		Absolute function
 29265 ;;		i2_Motor_Step
 29266 ;;		i2_Timer0_Stop
 29267 ;; This function is called by:
 29268 ;;		_ISR_Function
 29269 ;; This function uses a non-reentrant model
 29270 ;;
 29271                           
 29272                           	psect	text158
 29273  016096                     __ptext158:
 29274                           	opt stack 0
 29275  016096                     _Timer0_ISR:
 29276                           	opt stack 13
 29277                           
 29278                           ;Timer0.c: 96: Timer0_Stop();
 29279                           
 29280                           ;incstack = 0
 29281  016096  ECB6  F0B2         	call	i2_Timer0_Stop	;wreg free
 29282                           
 29283                           ;Timer0.c: 99: if (gISR != 0)
 29284  01609A  0103               	movlb	3	; () banked
 29285  01609C  5114               	movf	_gISR& (0+255),w,b
 29286  01609E  0103               	movlb	3	; () banked
 29287  0160A0  1115               	iorwf	(_gISR+1)& (0+255),w,b
 29288  0160A2  0103               	movlb	3	; () banked
 29289  0160A4  1116               	iorwf	(_gISR+2)& (0+255),w,b
 29290  0160A6  B4D8               	btfsc	status,2,c
 29291  0160A8  0012               	return	
 29292                           
 29293                           ; BSR set to: 3
 29294                           ;Timer0.c: 100: gISR();
 29295  0160AA  D801               	call	i2u1341_48
 29296  0160AC  0012               	return	
 29297  0160AE                     i2u1341_48:
 29298  0160AE  0005               	push	
 29299  0160B0  6EFA               	movwf	pclath,c
 29300  0160B2  0103               	movlb	3	; () banked
 29301  0160B4  5114               	movf	_gISR& (0+255),w,b
 29302  0160B6  6EFD               	movwf	tosl,c
 29303  0160B8  5115               	movf	(_gISR+1)& (0+255),w,b
 29304  0160BA  6EFE               	movwf	tosh,c
 29305  0160BC  5116               	movf	(_gISR+2)& (0+255),w,b
 29306  0160BE  6EFF               	movwf	tosu,c
 29307  0160C0  50FA               	movf	pclath,w,c
 29308  0160C2  0012               	return		;indir
 29309  0160C4                     __end_of_Timer0_ISR:
 29310                           	opt stack 0
 29311                           tosu	equ	0xFFF
 29312                           tosh	equ	0xFFE
 29313                           tosl	equ	0xFFD
 29314                           pclatu	equ	0xFFB
 29315                           pclath	equ	0xFFA
 29316                           tblptru	equ	0xFF8
 29317                           tblptrh	equ	0xFF7
 29318                           tblptrl	equ	0xFF6
 29319                           tablat	equ	0xFF5
 29320                           prodh	equ	0xFF4
 29321                           prodl	equ	0xFF3
 29322                           intcon	equ	0xFF2
 29323                           indf0	equ	0xFEF
 29324                           postinc0	equ	0xFEE
 29325                           fsr0h	equ	0xFEA
 29326                           fsr0l	equ	0xFE9
 29327                           wreg	equ	0xFE8
 29328                           indf1	equ	0xFE7
 29329                           postdec1	equ	0xFE5
 29330                           fsr1h	equ	0xFE2
 29331                           fsr1l	equ	0xFE1
 29332                           indf2	equ	0xFDF
 29333                           postinc2	equ	0xFDE
 29334                           postdec2	equ	0xFDD
 29335                           plusw2	equ	0xFDB
 29336                           fsr2h	equ	0xFDA
 29337                           fsr2l	equ	0xFD9
 29338                           status	equ	0xFD8
 29339                           
 29340 ;; *************** function i2_Motor_Step *****************
 29341 ;; Defined at:
 29342 ;;		line 75 in file "Library/Motor.c"
 29343 ;; Parameters:    Size  Location     Type
 29344 ;;		None
 29345 ;; Auto vars:     Size  Location     Type
 29346 ;;		None
 29347 ;; Return value:  Size  Location     Type
 29348 ;;                  1    wreg      void 
 29349 ;; Registers used:
 29350 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29351 ;; Tracked objects:
 29352 ;;		On entry : 0/0
 29353 ;;		On exit  : 0/0
 29354 ;;		Unchanged: 0/0
 29355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29358 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29359 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29360 ;;Total ram usage:        2 bytes
 29361 ;; Hardware stack levels used:    1
 29362 ;; Hardware stack levels required when called:    4
 29363 ;; This function calls:
 29364 ;;		i2_MXK_Queue
 29365 ;;		i2_MXK_Release
 29366 ;;		i2_MXK_SwitchTo
 29367 ;;		i2_Port_SetPin
 29368 ;;		i2_Timer0_Restart
 29369 ;;		i2_Timer0_Stop
 29370 ;; This function is called by:
 29371 ;; This function uses a non-reentrant model
 29372 ;;
 29373                           
 29374                           	psect	text159
 29375  0137B8                     __ptext159:
 29376                           	opt stack 0
 29377  0137B8                     i2_Motor_Step:
 29378                           	opt stack 13
 29379                           
 29380                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 29381                           
 29382                           ;incstack = 0
 29383  0137B8  0100               	movlb	0	; () banked
 29384  0137BA  EE20 F004          	lfsr	2,4
 29385  0137BE  51CE               	movf	_lMotor& (0+255),w,b
 29386  0137C0  26D9               	addwf	fsr2l,f,c
 29387  0137C2  51CF               	movf	(_lMotor+1)& (0+255),w,b
 29388  0137C4  22DA               	addwfc	fsr2h,f,c
 29389  0137C6  50DF               	movf	indf2,w,c
 29390  0137C8  EC9E  F0AF         	call	i2_MXK_SwitchTo
 29391  0137CC  0900               	iorlw	0
 29392  0137CE  B4D8               	btfsc	status,2,c
 29393  0137D0  D06A               	goto	i2l1627
 29394                           
 29395                           ;Motor.c: 78: {
 29396                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 29397  0137D2  C0CE  FFD9         	movff	_lMotor,fsr2l
 29398  0137D6  C0CF  FFDA         	movff	_lMotor+1,fsr2h
 29399  0137DA  50DE               	movf	postinc2,w,c
 29400  0137DC  10DE               	iorwf	postinc2,w,c
 29401  0137DE  B4D8               	btfsc	status,2,c
 29402  0137E0  D05D               	goto	i2l1628
 29403                           
 29404                           ;Motor.c: 80: {
 29405                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 29406  0137E2  C0CE  FFD9         	movff	_lMotor,fsr2l
 29407  0137E6  C0CF  FFDA         	movff	_lMotor+1,fsr2h
 29408  0137EA  0E01               	movlw	1
 29409  0137EC  BEDB               	btfsc	plusw2,7,c
 29410  0137EE  D022               	goto	i2l1629
 29411  0137F0  0E01               	movlw	1
 29412  0137F2  50DB               	movf	plusw2,w,c
 29413  0137F4  E103               	bnz	i2u709_40
 29414  0137F6  04DE               	decf	postinc2,w,c
 29415  0137F8  A0D8               	btfss	status,0,c
 29416  0137FA  D01C               	goto	i2l1629
 29417  0137FC                     i2u709_40:
 29418                           
 29419                           ;Motor.c: 83: {
 29420                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 29421  0137FC  C0CE  FFD9         	movff	_lMotor,fsr2l
 29422  013800  C0CF  FFDA         	movff	_lMotor+1,fsr2h
 29423  013804  28DE               	incf	postinc2,w,c
 29424  013806  E104               	bnz	i2u710_40
 29425  013808  0E7F               	movlw	127
 29426  01380A  18DE               	xorwf	postinc2,w,c
 29427  01380C  B4D8               	btfsc	status,2,c
 29428  01380E  D007               	goto	i2l1630
 29429  013810                     i2u710_40:
 29430                           
 29431                           ;Motor.c: 85: lMotor->mDelta --;
 29432  013810  C0CE  FFD9         	movff	_lMotor,fsr2l
 29433  013814  C0CF  FFDA         	movff	_lMotor+1,fsr2h
 29434  013818  06DE               	decf	postinc2,f,c
 29435  01381A  0E00               	movlw	0
 29436  01381C  5ADD               	subwfb	postdec2,f,c
 29437  01381E                     i2l1630:
 29438                           
 29439                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 29440  01381E  0E99               	movlw	low _PortE
 29441  013820  6E10               	movwf	i2Port_SetPin@pInput,c
 29442  013822  0E03               	movlw	high _PortE
 29443  013824  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29444  013826  0E00               	movlw	0
 29445  013828  6E12               	movwf	i2Port_SetPin@pPin,c
 29446  01382A  0E01               	movlw	1
 29447  01382C  6E13               	movwf	i2Port_SetPin@pValue,c
 29448  01382E  EC83  F0A2         	call	i2_Port_SetPin	;wreg free
 29449                           
 29450                           ;Motor.c: 88: }
 29451  013832  D01B               	goto	i2l1631
 29452  013834                     i2l1629:
 29453                           
 29454                           ;Motor.c: 89: else
 29455                           ;Motor.c: 90: {
 29456                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 29457  013834  C0CE  FFD9         	movff	_lMotor,fsr2l
 29458  013838  C0CF  FFDA         	movff	_lMotor+1,fsr2h
 29459  01383C  04DE               	decf	postinc2,w,c
 29460  01383E  E104               	bnz	i2u711_40
 29461  013840  0E80               	movlw	128
 29462  013842  18DE               	xorwf	postinc2,w,c
 29463  013844  B4D8               	btfsc	status,2,c
 29464  013846  D007               	goto	i2l1632
 29465  013848                     i2u711_40:
 29466                           
 29467                           ;Motor.c: 92: lMotor->mDelta ++;
 29468  013848  C0CE  FFD9         	movff	_lMotor,fsr2l
 29469  01384C  C0CF  FFDA         	movff	_lMotor+1,fsr2h
 29470  013850  2ADE               	incf	postinc2,f,c
 29471  013852  0E00               	movlw	0
 29472  013854  22DD               	addwfc	postdec2,f,c
 29473  013856                     i2l1632:
 29474                           
 29475                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 29476  013856  0E99               	movlw	low _PortE
 29477  013858  6E10               	movwf	i2Port_SetPin@pInput,c
 29478  01385A  0E03               	movlw	high _PortE
 29479  01385C  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29480  01385E  0E00               	movlw	0
 29481  013860  6E12               	movwf	i2Port_SetPin@pPin,c
 29482  013862  0E00               	movlw	0
 29483  013864  6E13               	movwf	i2Port_SetPin@pValue,c
 29484  013866  EC83  F0A2         	call	i2_Port_SetPin	;wreg free
 29485  01386A                     i2l1631:
 29486                           
 29487                           ;Motor.c: 95: }
 29488                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 29489  01386A  0E99               	movlw	low _PortE
 29490  01386C  6E10               	movwf	i2Port_SetPin@pInput,c
 29491  01386E  0E03               	movlw	high _PortE
 29492  013870  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29493  013872  0E01               	movlw	1
 29494  013874  6E12               	movwf	i2Port_SetPin@pPin,c
 29495  013876  0E01               	movlw	1
 29496  013878  6E13               	movwf	i2Port_SetPin@pValue,c
 29497  01387A  EC83  F0A2         	call	i2_Port_SetPin	;wreg free
 29498                           
 29499                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 29500  01387E  0E99               	movlw	low _PortE
 29501  013880  6E10               	movwf	i2Port_SetPin@pInput,c
 29502  013882  0E03               	movlw	high _PortE
 29503  013884  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29504  013886  0E01               	movlw	1
 29505  013888  6E12               	movwf	i2Port_SetPin@pPin,c
 29506  01388A  0E00               	movlw	0
 29507  01388C  6E13               	movwf	i2Port_SetPin@pValue,c
 29508  01388E  EC83  F0A2         	call	i2_Port_SetPin	;wreg free
 29509                           
 29510                           ;Motor.c: 101: MXK_Release();
 29511  013892  ECB9  F0B2         	call	i2_MXK_Release	;wreg free
 29512                           
 29513                           ;Motor.c: 102: Timer0_Restart();
 29514  013896  EC85  F0B2         	call	i2_Timer0_Restart	;wreg free
 29515                           
 29516                           ;Motor.c: 103: return;
 29517  01389A  0012               	return	
 29518  01389C                     i2l1628:
 29519                           
 29520                           ;Motor.c: 104: }
 29521                           ;Motor.c: 105: MXK_Release();
 29522  01389C  ECB9  F0B2         	call	i2_MXK_Release	;wreg free
 29523                           
 29524                           ;Motor.c: 106: Timer0_Stop();
 29525  0138A0  ECB6  F0B2         	call	i2_Timer0_Stop	;wreg free
 29526                           
 29527                           ;Motor.c: 107: return;
 29528  0138A4  0012               	return	
 29529  0138A6                     i2l1627:
 29530                           
 29531                           ;Motor.c: 108: }
 29532                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 29533  0138A6  C0BD  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 29534  0138AA  C0BE  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 29535  0138AE  C0BF  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 29536  0138B2  EC6C  F0B2         	call	i2_MXK_Queue	;wreg free
 29537  0138B6  0012               	return		;funcret
 29538  0138B8                     __end_ofi2_Motor_Step:
 29539                           	opt stack 0
 29540                           tosu	equ	0xFFF
 29541                           tosh	equ	0xFFE
 29542                           tosl	equ	0xFFD
 29543                           pclatu	equ	0xFFB
 29544                           pclath	equ	0xFFA
 29545                           tblptru	equ	0xFF8
 29546                           tblptrh	equ	0xFF7
 29547                           tblptrl	equ	0xFF6
 29548                           tablat	equ	0xFF5
 29549                           prodh	equ	0xFF4
 29550                           prodl	equ	0xFF3
 29551                           intcon	equ	0xFF2
 29552                           indf0	equ	0xFEF
 29553                           postinc0	equ	0xFEE
 29554                           fsr0h	equ	0xFEA
 29555                           fsr0l	equ	0xFE9
 29556                           wreg	equ	0xFE8
 29557                           indf1	equ	0xFE7
 29558                           postdec1	equ	0xFE5
 29559                           fsr1h	equ	0xFE2
 29560                           fsr1l	equ	0xFE1
 29561                           indf2	equ	0xFDF
 29562                           postinc2	equ	0xFDE
 29563                           postdec2	equ	0xFDD
 29564                           plusw2	equ	0xFDB
 29565                           fsr2h	equ	0xFDA
 29566                           fsr2l	equ	0xFD9
 29567                           status	equ	0xFD8
 29568                           
 29569 ;; *************** function i2_Timer0_Stop *****************
 29570 ;; Defined at:
 29571 ;;		line 89 in file "Library/Timer0.c"
 29572 ;; Parameters:    Size  Location     Type
 29573 ;;		None
 29574 ;; Auto vars:     Size  Location     Type
 29575 ;;		None
 29576 ;; Return value:  Size  Location     Type
 29577 ;;                  1    wreg      void 
 29578 ;; Registers used:
 29579 ;;		None
 29580 ;; Tracked objects:
 29581 ;;		On entry : 0/0
 29582 ;;		On exit  : 0/0
 29583 ;;		Unchanged: 0/0
 29584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29588 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29589 ;;Total ram usage:        0 bytes
 29590 ;; Hardware stack levels used:    1
 29591 ;; This function calls:
 29592 ;;		Nothing
 29593 ;; This function is called by:
 29594 ;;		_Timer0_ISR
 29595 ;;		i2_Motor_Step
 29596 ;; This function uses a non-reentrant model
 29597 ;;
 29598                           
 29599                           	psect	text160
 29600  01656C                     __ptext160:
 29601                           	opt stack 0
 29602  01656C                     i2_Timer0_Stop:
 29603                           	opt stack 17
 29604                           
 29605                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 29606                           
 29607                           ;incstack = 0
 29608  01656C  9AF2               	bcf	intcon,5,c	;volatile
 29609                           
 29610                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 29611  01656E  94F2               	bcf	intcon,2,c	;volatile
 29612  016570  0012               	return		;funcret
 29613  016572                     __end_ofi2_Timer0_Stop:
 29614                           	opt stack 0
 29615                           tosu	equ	0xFFF
 29616                           tosh	equ	0xFFE
 29617                           tosl	equ	0xFFD
 29618                           pclatu	equ	0xFFB
 29619                           pclath	equ	0xFFA
 29620                           tblptru	equ	0xFF8
 29621                           tblptrh	equ	0xFF7
 29622                           tblptrl	equ	0xFF6
 29623                           tablat	equ	0xFF5
 29624                           prodh	equ	0xFF4
 29625                           prodl	equ	0xFF3
 29626                           intcon	equ	0xFF2
 29627                           indf0	equ	0xFEF
 29628                           postinc0	equ	0xFEE
 29629                           fsr0h	equ	0xFEA
 29630                           fsr0l	equ	0xFE9
 29631                           wreg	equ	0xFE8
 29632                           indf1	equ	0xFE7
 29633                           postdec1	equ	0xFE5
 29634                           fsr1h	equ	0xFE2
 29635                           fsr1l	equ	0xFE1
 29636                           indf2	equ	0xFDF
 29637                           postinc2	equ	0xFDE
 29638                           postdec2	equ	0xFDD
 29639                           plusw2	equ	0xFDB
 29640                           fsr2h	equ	0xFDA
 29641                           fsr2l	equ	0xFD9
 29642                           status	equ	0xFD8
 29643                           
 29644 ;; *************** function i2_Timer0_Restart *****************
 29645 ;; Defined at:
 29646 ;;		line 83 in file "Library/Timer0.c"
 29647 ;; Parameters:    Size  Location     Type
 29648 ;;		None
 29649 ;; Auto vars:     Size  Location     Type
 29650 ;;		None
 29651 ;; Return value:  Size  Location     Type
 29652 ;;                  1    wreg      void 
 29653 ;; Registers used:
 29654 ;;		None
 29655 ;; Tracked objects:
 29656 ;;		On entry : 0/0
 29657 ;;		On exit  : 0/0
 29658 ;;		Unchanged: 0/0
 29659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29663 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29664 ;;Total ram usage:        0 bytes
 29665 ;; Hardware stack levels used:    1
 29666 ;; This function calls:
 29667 ;;		Nothing
 29668 ;; This function is called by:
 29669 ;;		i2_Motor_Step
 29670 ;; This function uses a non-reentrant model
 29671 ;;
 29672                           
 29673                           	psect	text161
 29674  01650A                     __ptext161:
 29675                           	opt stack 0
 29676  01650A                     i2_Timer0_Restart:
 29677                           	opt stack 16
 29678                           
 29679                           ;Timer0.c: 85: TMR0 = COUNTER;
 29680                           
 29681                           ;incstack = 0
 29682  01650A  C029  FFD6         	movff	_COUNTER,4054	;volatile
 29683  01650E  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 29684                           
 29685                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 29686  016512  8AF2               	bsf	intcon,5,c	;volatile
 29687  016514  0012               	return		;funcret
 29688  016516                     __end_ofi2_Timer0_Restart:
 29689                           	opt stack 0
 29690                           tosu	equ	0xFFF
 29691                           tosh	equ	0xFFE
 29692                           tosl	equ	0xFFD
 29693                           pclatu	equ	0xFFB
 29694                           pclath	equ	0xFFA
 29695                           tblptru	equ	0xFF8
 29696                           tblptrh	equ	0xFF7
 29697                           tblptrl	equ	0xFF6
 29698                           tablat	equ	0xFF5
 29699                           prodh	equ	0xFF4
 29700                           prodl	equ	0xFF3
 29701                           intcon	equ	0xFF2
 29702                           indf0	equ	0xFEF
 29703                           postinc0	equ	0xFEE
 29704                           fsr0h	equ	0xFEA
 29705                           fsr0l	equ	0xFE9
 29706                           wreg	equ	0xFE8
 29707                           indf1	equ	0xFE7
 29708                           postdec1	equ	0xFE5
 29709                           fsr1h	equ	0xFE2
 29710                           fsr1l	equ	0xFE1
 29711                           indf2	equ	0xFDF
 29712                           postinc2	equ	0xFDE
 29713                           postdec2	equ	0xFDD
 29714                           plusw2	equ	0xFDB
 29715                           fsr2h	equ	0xFDA
 29716                           fsr2l	equ	0xFD9
 29717                           status	equ	0xFD8
 29718                           
 29719 ;; *************** function i2_Port_SetPin *****************
 29720 ;; Defined at:
 29721 ;;		line 247 in file "Library/Port.c"
 29722 ;; Parameters:    Size  Location     Type
 29723 ;;  pInput          2   15[COMRAM] const PTR struct Port
 29724 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 29725 ;;  pPin            1   17[COMRAM] enum E6750
 29726 ;;  pValue          1   18[COMRAM] unsigned char 
 29727 ;; Auto vars:     Size  Location     Type
 29728 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 29729 ;; Return value:  Size  Location     Type
 29730 ;;                  1    wreg      void 
 29731 ;; Registers used:
 29732 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29733 ;; Tracked objects:
 29734 ;;		On entry : 0/0
 29735 ;;		On exit  : 0/0
 29736 ;;		Unchanged: 0/0
 29737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29738 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29739 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29741 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29742 ;;Total ram usage:        5 bytes
 29743 ;; Hardware stack levels used:    1
 29744 ;; Hardware stack levels required when called:    3
 29745 ;; This function calls:
 29746 ;;		i2_Byte_SetBit
 29747 ;;		i2_Word_GetPair
 29748 ;; This function is called by:
 29749 ;;		i2_Motor_Step
 29750 ;; This function uses a non-reentrant model
 29751 ;;
 29752                           
 29753                           	psect	text162
 29754  014506                     __ptext162:
 29755                           	opt stack 0
 29756  014506                     i2_Port_SetPin:
 29757                           	opt stack 13
 29758                           
 29759                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 29760                           
 29761                           ;incstack = 0
 29762  014506  0E08               	movlw	8
 29763  014508  2410               	addwf	i2Port_SetPin@pInput,w,c
 29764  01450A  6E0D               	movwf	i2Word_GetPair@pInput,c
 29765  01450C  0E00               	movlw	0
 29766  01450E  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 29767  014510  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 29768  014512  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 29769  014516  EC1C  F0B0         	call	i2_Word_GetPair	;wreg free
 29770  01451A  6E14               	movwf	i2Port_SetPin@Type,c
 29771                           
 29772                           ;Port.c: 250: switch (Type)
 29773  01451C  D03B               	goto	i2l427
 29774  01451E                     
 29775                           ;Port.c: 256: pValue &= 1;
 29776  01451E  0E01               	movlw	1
 29777  014520  1613               	andwf	i2Port_SetPin@pValue,f,c
 29778                           
 29779                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 29780  014522  EE20 F002          	lfsr	2,2
 29781  014526  5010               	movf	i2Port_SetPin@pInput,w,c
 29782  014528  26D9               	addwf	fsr2l,f,c
 29783  01452A  5011               	movf	i2Port_SetPin@pInput+1,w,c
 29784  01452C  22DA               	addwfc	fsr2h,f,c
 29785  01452E  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 29786  014532  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 29787  014536  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 29788  01453A  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 29789  01453E  ECE9  F0AC         	call	i2_Byte_SetBit	;wreg free
 29790                           
 29791                           ;Port.c: 258: break;
 29792  014542  0012               	return	
 29793  014544                     
 29794                           ;Port.c: 261: pValue &= 1;
 29795  014544  0E01               	movlw	1
 29796  014546  1613               	andwf	i2Port_SetPin@pValue,f,c
 29797                           
 29798                           ;Port.c: 262: pValue ^= 1;
 29799  014548  0E01               	movlw	1
 29800  01454A  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 29801                           
 29802                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 29803  01454C  EE20 F002          	lfsr	2,2
 29804  014550  5010               	movf	i2Port_SetPin@pInput,w,c
 29805  014552  26D9               	addwf	fsr2l,f,c
 29806  014554  5011               	movf	i2Port_SetPin@pInput+1,w,c
 29807  014556  22DA               	addwfc	fsr2h,f,c
 29808  014558  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 29809  01455C  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 29810  014560  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 29811  014564  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 29812  014568  ECE9  F0AC         	call	i2_Byte_SetBit	;wreg free
 29813                           
 29814                           ;Port.c: 264: break;
 29815  01456C  0012               	return	
 29816  01456E                     
 29817                           ;Port.c: 266: pValue &= 1;
 29818  01456E  0E01               	movlw	1
 29819  014570  1613               	andwf	i2Port_SetPin@pValue,f,c
 29820                           
 29821                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 29822  014572  EE20 F004          	lfsr	2,4
 29823  014576  5010               	movf	i2Port_SetPin@pInput,w,c
 29824  014578  26D9               	addwf	fsr2l,f,c
 29825  01457A  5011               	movf	i2Port_SetPin@pInput+1,w,c
 29826  01457C  22DA               	addwfc	fsr2h,f,c
 29827  01457E  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 29828  014582  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 29829  014586  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 29830  01458A  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 29831  01458E  ECE9  F0AC         	call	i2_Byte_SetBit	;wreg free
 29832                           
 29833                           ;Port.c: 269: }
 29834                           
 29835                           ;Port.c: 268: break;
 29836  014592  0012               	return	
 29837  014594                     i2l427:
 29838  014594  5014               	movf	i2Port_SetPin@Type,w,c
 29839                           
 29840                           ; Switch size 1, requested type "space"
 29841                           ; Number of cases is 4, Range of values is 0 to 3
 29842                           ; switch strategies available:
 29843                           ; Name         Instructions Cycles
 29844                           ; simple_byte           13     7 (average)
 29845                           ;	Chosen strategy is simple_byte
 29846  014596  0A00               	xorlw	0	; case 0
 29847  014598  B4D8               	btfsc	status,2,c
 29848  01459A  0012               	return	
 29849  01459C  0A01               	xorlw	1	; case 1
 29850  01459E  B4D8               	btfsc	status,2,c
 29851  0145A0  D7BE               	goto	i2l430
 29852  0145A2  0A03               	xorlw	3	; case 2
 29853  0145A4  B4D8               	btfsc	status,2,c
 29854  0145A6  D7CE               	goto	i2l432
 29855  0145A8  0A01               	xorlw	1	; case 3
 29856  0145AA  A4D8               	btfss	status,2,c
 29857  0145AC  0012               	return	
 29858  0145AE  D7DF               	goto	i2l433
 29859  0145B0                     __end_ofi2_Port_SetPin:
 29860                           	opt stack 0
 29861                           tosu	equ	0xFFF
 29862                           tosh	equ	0xFFE
 29863                           tosl	equ	0xFFD
 29864                           pclatu	equ	0xFFB
 29865                           pclath	equ	0xFFA
 29866                           tblptru	equ	0xFF8
 29867                           tblptrh	equ	0xFF7
 29868                           tblptrl	equ	0xFF6
 29869                           tablat	equ	0xFF5
 29870                           prodh	equ	0xFF4
 29871                           prodl	equ	0xFF3
 29872                           intcon	equ	0xFF2
 29873                           indf0	equ	0xFEF
 29874                           postinc0	equ	0xFEE
 29875                           fsr0h	equ	0xFEA
 29876                           fsr0l	equ	0xFE9
 29877                           wreg	equ	0xFE8
 29878                           indf1	equ	0xFE7
 29879                           postdec1	equ	0xFE5
 29880                           fsr1h	equ	0xFE2
 29881                           fsr1l	equ	0xFE1
 29882                           indf2	equ	0xFDF
 29883                           postinc2	equ	0xFDE
 29884                           postdec2	equ	0xFDD
 29885                           plusw2	equ	0xFDB
 29886                           fsr2h	equ	0xFDA
 29887                           fsr2l	equ	0xFD9
 29888                           status	equ	0xFD8
 29889                           
 29890 ;; *************** function i2_Word_GetPair *****************
 29891 ;; Defined at:
 29892 ;;		line 156 in file "Library/Types.c"
 29893 ;; Parameters:    Size  Location     Type
 29894 ;;  pInput          2   12[COMRAM] PTR struct Word
 29895 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 29896 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 29897 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 29898 ;;		 -> PortC(10), PortF(10), NULL(0), 
 29899 ;;  pPair           1   14[COMRAM] unsigned char 
 29900 ;; Auto vars:     Size  Location     Type
 29901 ;;		None
 29902 ;; Return value:  Size  Location     Type
 29903 ;;                  1    wreg      unsigned char 
 29904 ;; Registers used:
 29905 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29906 ;; Tracked objects:
 29907 ;;		On entry : 0/0
 29908 ;;		On exit  : 0/0
 29909 ;;		Unchanged: 0/0
 29910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29911 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29914 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29915 ;;Total ram usage:        3 bytes
 29916 ;; Hardware stack levels used:    1
 29917 ;; Hardware stack levels required when called:    2
 29918 ;; This function calls:
 29919 ;;		i2_Byte_GetPair
 29920 ;; This function is called by:
 29921 ;;		i2_Port_SetPin
 29922 ;; This function uses a non-reentrant model
 29923 ;;
 29924                           
 29925                           	psect	text163
 29926  016038                     __ptext163:
 29927                           	opt stack 0
 29928  016038                     i2_Word_GetPair:
 29929                           	opt stack 13
 29930                           
 29931                           ;Types.c: 158: if (pPair >= 4)
 29932                           
 29933                           ;incstack = 0
 29934  016038  0E03               	movlw	3
 29935  01603A  640F               	cpfsgt	i2Word_GetPair@pPair,c
 29936  01603C  D00C               	goto	i2l781
 29937                           
 29938                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 29939  01603E  0E01               	movlw	1
 29940  016040  240D               	addwf	i2Word_GetPair@pInput,w,c
 29941  016042  6E0A               	movwf	i2Byte_GetPair@pInput,c
 29942  016044  0E00               	movlw	0
 29943  016046  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 29944  016048  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 29945  01604A  500F               	movf	i2Word_GetPair@pPair,w,c
 29946  01604C  0FFC               	addlw	252
 29947  01604E  6E0C               	movwf	i2Byte_GetPair@pPair,c
 29948  016050  ECAD  F0B1         	call	i2_Byte_GetPair	;wreg free
 29949  016054  0012               	return	
 29950  016056                     i2l781:
 29951                           
 29952                           ;Types.c: 160: else
 29953                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 29954  016056  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 29955  01605A  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 29956  01605E  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 29957  016062  ECAD  F0B1         	call	i2_Byte_GetPair	;wreg free
 29958  016066  0012               	return	
 29959  016068                     __end_ofi2_Word_GetPair:
 29960                           	opt stack 0
 29961                           tosu	equ	0xFFF
 29962                           tosh	equ	0xFFE
 29963                           tosl	equ	0xFFD
 29964                           pclatu	equ	0xFFB
 29965                           pclath	equ	0xFFA
 29966                           tblptru	equ	0xFF8
 29967                           tblptrh	equ	0xFF7
 29968                           tblptrl	equ	0xFF6
 29969                           tablat	equ	0xFF5
 29970                           prodh	equ	0xFF4
 29971                           prodl	equ	0xFF3
 29972                           intcon	equ	0xFF2
 29973                           indf0	equ	0xFEF
 29974                           postinc0	equ	0xFEE
 29975                           fsr0h	equ	0xFEA
 29976                           fsr0l	equ	0xFE9
 29977                           wreg	equ	0xFE8
 29978                           indf1	equ	0xFE7
 29979                           postdec1	equ	0xFE5
 29980                           fsr1h	equ	0xFE2
 29981                           fsr1l	equ	0xFE1
 29982                           indf2	equ	0xFDF
 29983                           postinc2	equ	0xFDE
 29984                           postdec2	equ	0xFDD
 29985                           plusw2	equ	0xFDB
 29986                           fsr2h	equ	0xFDA
 29987                           fsr2l	equ	0xFD9
 29988                           status	equ	0xFD8
 29989                           
 29990 ;; *************** function i2_Byte_GetPair *****************
 29991 ;; Defined at:
 29992 ;;		line 87 in file "Library/Types.c"
 29993 ;; Parameters:    Size  Location     Type
 29994 ;;  pInput          2    9[COMRAM] PTR struct Byte
 29995 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 29996 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 29997 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 29998 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 29999 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 30000 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 30001 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 30002 ;;		 -> NULL(0), 
 30003 ;;  pPair           1   11[COMRAM] unsigned char 
 30004 ;; Auto vars:     Size  Location     Type
 30005 ;;		None
 30006 ;; Return value:  Size  Location     Type
 30007 ;;                  1    wreg      unsigned char 
 30008 ;; Registers used:
 30009 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30010 ;; Tracked objects:
 30011 ;;		On entry : 0/0
 30012 ;;		On exit  : 0/0
 30013 ;;		Unchanged: 0/0
 30014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30015 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30018 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30019 ;;Total ram usage:        3 bytes
 30020 ;; Hardware stack levels used:    1
 30021 ;; Hardware stack levels required when called:    1
 30022 ;; This function calls:
 30023 ;;		i2_Byte_GetZone
 30024 ;; This function is called by:
 30025 ;;		i2_Word_GetPair
 30026 ;; This function uses a non-reentrant model
 30027 ;;
 30028                           
 30029                           	psect	text164
 30030  01635A                     __ptext164:
 30031                           	opt stack 0
 30032  01635A                     i2_Byte_GetPair:
 30033                           	opt stack 13
 30034                           
 30035                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 30036                           
 30037                           ;incstack = 0
 30038  01635A  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 30039  01635E  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 30040  016362  0E04               	movlw	4
 30041  016364  6E03               	movwf	i2Byte_GetZone@pMax,c
 30042  016366  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 30043  01636A  0E02               	movlw	2
 30044  01636C  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 30045  01636E  ECFA  F0A7         	call	i2_Byte_GetZone	;wreg free
 30046  016372  0012               	return	
 30047  016374                     __end_ofi2_Byte_GetPair:
 30048                           	opt stack 0
 30049                           tosu	equ	0xFFF
 30050                           tosh	equ	0xFFE
 30051                           tosl	equ	0xFFD
 30052                           pclatu	equ	0xFFB
 30053                           pclath	equ	0xFFA
 30054                           tblptru	equ	0xFF8
 30055                           tblptrh	equ	0xFF7
 30056                           tblptrl	equ	0xFF6
 30057                           tablat	equ	0xFF5
 30058                           prodh	equ	0xFF4
 30059                           prodl	equ	0xFF3
 30060                           intcon	equ	0xFF2
 30061                           indf0	equ	0xFEF
 30062                           postinc0	equ	0xFEE
 30063                           fsr0h	equ	0xFEA
 30064                           fsr0l	equ	0xFE9
 30065                           wreg	equ	0xFE8
 30066                           indf1	equ	0xFE7
 30067                           postdec1	equ	0xFE5
 30068                           fsr1h	equ	0xFE2
 30069                           fsr1l	equ	0xFE1
 30070                           indf2	equ	0xFDF
 30071                           postinc2	equ	0xFDE
 30072                           postdec2	equ	0xFDD
 30073                           plusw2	equ	0xFDB
 30074                           fsr2h	equ	0xFDA
 30075                           fsr2l	equ	0xFD9
 30076                           status	equ	0xFD8
 30077                           
 30078 ;; *************** function i2_Byte_GetZone *****************
 30079 ;; Defined at:
 30080 ;;		line 64 in file "Library/Types.c"
 30081 ;; Parameters:    Size  Location     Type
 30082 ;;  pInput          2    0[COMRAM] PTR struct Byte
 30083 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 30084 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 30085 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 30086 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 30087 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 30088 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 30089 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 30090 ;;		 -> NULL(0), 
 30091 ;;  pMax            1    2[COMRAM] unsigned char 
 30092 ;;  pChunk          1    3[COMRAM] unsigned char 
 30093 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 30094 ;; Auto vars:     Size  Location     Type
 30095 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 30096 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 30097 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 30098 ;; Return value:  Size  Location     Type
 30099 ;;                  1    wreg      unsigned char 
 30100 ;; Registers used:
 30101 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 30102 ;; Tracked objects:
 30103 ;;		On entry : 0/0
 30104 ;;		On exit  : 0/0
 30105 ;;		Unchanged: 0/0
 30106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30107 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30108 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30109 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30110 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30111 ;;Total ram usage:        9 bytes
 30112 ;; Hardware stack levels used:    1
 30113 ;; This function calls:
 30114 ;;		Nothing
 30115 ;; This function is called by:
 30116 ;;		i2_Byte_GetPair
 30117 ;; This function uses a non-reentrant model
 30118 ;;
 30119                           
 30120                           	psect	text165
 30121  014FF4                     __ptext165:
 30122                           	opt stack 0
 30123  014FF4                     i2_Byte_GetZone:
 30124                           	opt stack 13
 30125                           
 30126                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 30127                           
 30128                           ;incstack = 0
 30129  014FF4  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 30130  014FF8  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 30131  014FFC  0E00               	movlw	low (__mediumconst shr (0+16))
 30132  014FFE  6EF8               	movwf	tblptru,c
 30133  015000  0E0F               	movlw	(high __ramtop+-1)
 30134  015002  64F7               	cpfsgt	tblptrh,c
 30135  015004  D003               	bra	i2u484_47
 30136  015006  0008               	tblrd		*
 30137  015008  50F5               	movf	tablat,w,c
 30138  01500A  D005               	bra	i2u484_40
 30139  01500C                     i2u484_47:
 30140  01500C  CFF6 FFE9          	movff	tblptrl,fsr0l
 30141  015010  CFF7 FFEA          	movff	tblptrh,fsr0h
 30142  015014  50EF               	movf	indf0,w,c
 30143  015016                     i2u484_40:
 30144  015016  6E09               	movwf	i2Byte_GetZone@Output,c
 30145                           
 30146                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 30147  015018  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 30148  01501A  0D01               	mullw	1
 30149  01501C  0E9F               	movlw	low _MASKS
 30150  01501E  24F3               	addwf	prodl,w,c
 30151  015020  6EF6               	movwf	tblptrl,c
 30152  015022  0EFD               	movlw	high _MASKS
 30153  015024  20F4               	addwfc	prodh,w,c
 30154  015026  6EF7               	movwf	tblptrh,c
 30155  015028                     	if	1	;There are 3 active tblptr bytes
 30156  015028  6AF8               	clrf	tblptru,c
 30157  01502A  0E00               	movlw	low (__mediumconst shr (0+16))
 30158  01502C  22F8               	addwfc	tblptru,f,c
 30159  01502E                     	endif
 30160  01502E  0008               	tblrd		*
 30161  015030  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 30162                           
 30163                           ;Types.c: 68: UINT8 Offset = 0;
 30164  015034  0E00               	movlw	0
 30165  015036  6E08               	movwf	i2Byte_GetZone@Offset,c
 30166                           
 30167                           ;Types.c: 70: while (pChunk >= pMax)
 30168  015038  D003               	goto	i2l732
 30169  01503A                     
 30170                           ;Types.c: 71: {
 30171                           ;Types.c: 72: pChunk -= pMax;
 30172  01503A  5003               	movf	i2Byte_GetZone@pMax,w,c
 30173  01503C  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 30174                           
 30175                           ;Types.c: 73: Offset += 1;
 30176  01503E  2A08               	incf	i2Byte_GetZone@Offset,f,c
 30177  015040                     i2l732:
 30178  015040  5003               	movf	i2Byte_GetZone@pMax,w,c
 30179  015042  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 30180  015044  B0D8               	btfsc	status,0,c
 30181  015046  D7F9               	goto	i2l733
 30182                           
 30183                           ;Types.c: 74: }
 30184                           ;Types.c: 75: pChunk *= pChunkSize;
 30185  015048  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 30186  01504A  0204               	mulwf	i2Byte_GetZone@pChunk,c
 30187  01504C  50F3               	movf	prodl,w,c
 30188  01504E  6E04               	movwf	i2Byte_GetZone@pChunk,c
 30189                           
 30190                           ;Types.c: 76: pChunk += Offset;
 30191  015050  5008               	movf	i2Byte_GetZone@Offset,w,c
 30192  015052  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 30193                           
 30194                           ;Types.c: 78: Output >>= pChunk;
 30195  015054  2804               	incf	i2Byte_GetZone@pChunk,w,c
 30196  015056  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 30197  015058  D002               	goto	i2u486_40
 30198  01505A                     i2u486_45:
 30199  01505A  90D8               	bcf	status,0,c
 30200  01505C  3209               	rrcf	i2Byte_GetZone@Output,f,c
 30201  01505E                     i2u486_40:
 30202  01505E  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 30203  015060  D7FC               	goto	i2u486_45
 30204                           
 30205                           ;Types.c: 79: Output &= MASK;
 30206  015062  5007               	movf	i2Byte_GetZone@MASK,w,c
 30207  015064  1609               	andwf	i2Byte_GetZone@Output,f,c
 30208                           
 30209                           ;Types.c: 80: return Output;
 30210  015066  5009               	movf	i2Byte_GetZone@Output,w,c
 30211  015068  0012               	return	
 30212  01506A                     __end_ofi2_Byte_GetZone:
 30213                           	opt stack 0
 30214                           tosu	equ	0xFFF
 30215                           tosh	equ	0xFFE
 30216                           tosl	equ	0xFFD
 30217                           pclatu	equ	0xFFB
 30218                           pclath	equ	0xFFA
 30219                           tblptru	equ	0xFF8
 30220                           tblptrh	equ	0xFF7
 30221                           tblptrl	equ	0xFF6
 30222                           tablat	equ	0xFF5
 30223                           prodh	equ	0xFF4
 30224                           prodl	equ	0xFF3
 30225                           intcon	equ	0xFF2
 30226                           indf0	equ	0xFEF
 30227                           postinc0	equ	0xFEE
 30228                           fsr0h	equ	0xFEA
 30229                           fsr0l	equ	0xFE9
 30230                           wreg	equ	0xFE8
 30231                           indf1	equ	0xFE7
 30232                           postdec1	equ	0xFE5
 30233                           fsr1h	equ	0xFE2
 30234                           fsr1l	equ	0xFE1
 30235                           indf2	equ	0xFDF
 30236                           postinc2	equ	0xFDE
 30237                           postdec2	equ	0xFDD
 30238                           plusw2	equ	0xFDB
 30239                           fsr2h	equ	0xFDA
 30240                           fsr2l	equ	0xFD9
 30241                           status	equ	0xFD8
 30242                           
 30243 ;; *************** function i2_Byte_SetBit *****************
 30244 ;; Defined at:
 30245 ;;		line 32 in file "Library/Types.c"
 30246 ;; Parameters:    Size  Location     Type
 30247 ;;  pInput          2    0[COMRAM] PTR struct Byte
 30248 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 30249 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 30250 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 30251 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 30252 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 30253 ;;		 -> NULL(0), 
 30254 ;;  pBit            1    2[COMRAM] unsigned char 
 30255 ;;  pValue          1    3[COMRAM] unsigned char 
 30256 ;; Auto vars:     Size  Location     Type
 30257 ;;		None
 30258 ;; Return value:  Size  Location     Type
 30259 ;;                  1    wreg      void 
 30260 ;; Registers used:
 30261 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 30262 ;; Tracked objects:
 30263 ;;		On entry : 0/0
 30264 ;;		On exit  : 0/0
 30265 ;;		Unchanged: 0/0
 30266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30267 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30269 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30270 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30271 ;;Total ram usage:        7 bytes
 30272 ;; Hardware stack levels used:    1
 30273 ;; This function calls:
 30274 ;;		Nothing
 30275 ;; This function is called by:
 30276 ;;		i2_Port_SetPin
 30277 ;; This function uses a non-reentrant model
 30278 ;;
 30279                           
 30280                           	psect	text166
 30281  0159D2                     __ptext166:
 30282                           	opt stack 0
 30283  0159D2                     i2_Byte_SetBit:
 30284                           	opt stack 15
 30285                           
 30286                           ;Types.c: 34: pValue &= 1;
 30287                           
 30288                           ;incstack = 0
 30289  0159D2  0E01               	movlw	1
 30290  0159D4  1604               	andwf	i2Byte_SetBit@pValue,f,c
 30291                           
 30292                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 30293  0159D6  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 30294  0159DA  0E01               	movlw	1
 30295  0159DC  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 30296  0159DE  2A05               	incf	??i2_Byte_SetBit,f,c
 30297  0159E0  D002               	goto	i2u542_44
 30298  0159E2                     i2u542_45:
 30299  0159E2  90D8               	bcf	status,0,c
 30300  0159E4  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 30301  0159E6                     i2u542_44:
 30302  0159E6  2E05               	decfsz	??i2_Byte_SetBit,f,c
 30303  0159E8  D7FC               	goto	i2u542_45
 30304  0159EA  5006               	movf	??i2_Byte_SetBit+1,w,c
 30305  0159EC  0AFF               	xorlw	255
 30306  0159EE  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 30307  0159F0  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 30308  0159F4  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 30309  0159F8  5007               	movf	??i2_Byte_SetBit+2,w,c
 30310  0159FA  16DF               	andwf	indf2,f,c
 30311                           
 30312                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 30313  0159FC  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 30314  015A00  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 30315  015A04  2A05               	incf	??i2_Byte_SetBit,f,c
 30316  015A06  D002               	goto	i2u543_44
 30317  015A08                     i2u543_45:
 30318  015A08  90D8               	bcf	status,0,c
 30319  015A0A  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 30320  015A0C                     i2u543_44:
 30321  015A0C  2E05               	decfsz	??i2_Byte_SetBit,f,c
 30322  015A0E  D7FC               	goto	i2u543_45
 30323  015A10  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 30324  015A14  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 30325  015A18  5006               	movf	??i2_Byte_SetBit+1,w,c
 30326  015A1A  12DF               	iorwf	indf2,f,c
 30327  015A1C  0012               	return		;funcret
 30328  015A1E                     __end_ofi2_Byte_SetBit:
 30329                           	opt stack 0
 30330                           tosu	equ	0xFFF
 30331                           tosh	equ	0xFFE
 30332                           tosl	equ	0xFFD
 30333                           pclatu	equ	0xFFB
 30334                           pclath	equ	0xFFA
 30335                           tblptru	equ	0xFF8
 30336                           tblptrh	equ	0xFF7
 30337                           tblptrl	equ	0xFF6
 30338                           tablat	equ	0xFF5
 30339                           prodh	equ	0xFF4
 30340                           prodl	equ	0xFF3
 30341                           intcon	equ	0xFF2
 30342                           indf0	equ	0xFEF
 30343                           postinc0	equ	0xFEE
 30344                           fsr0h	equ	0xFEA
 30345                           fsr0l	equ	0xFE9
 30346                           wreg	equ	0xFE8
 30347                           indf1	equ	0xFE7
 30348                           postdec1	equ	0xFE5
 30349                           fsr1h	equ	0xFE2
 30350                           fsr1l	equ	0xFE1
 30351                           indf2	equ	0xFDF
 30352                           postinc2	equ	0xFDE
 30353                           postdec2	equ	0xFDD
 30354                           plusw2	equ	0xFDB
 30355                           fsr2h	equ	0xFDA
 30356                           fsr2l	equ	0xFD9
 30357                           status	equ	0xFD8
 30358                           
 30359 ;; *************** function i2_MXK_SwitchTo *****************
 30360 ;; Defined at:
 30361 ;;		line 105 in file "Library/MXK.c"
 30362 ;; Parameters:    Size  Location     Type
 30363 ;;  pModule         1    wreg     enum E6927
 30364 ;; Auto vars:     Size  Location     Type
 30365 ;;  pModule         1    7[COMRAM] enum E6927
 30366 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 30367 ;; Return value:  Size  Location     Type
 30368 ;;                  1    wreg      unsigned char 
 30369 ;; Registers used:
 30370 ;;		wreg, status,2, status,0, cstack
 30371 ;; Tracked objects:
 30372 ;;		On entry : 0/0
 30373 ;;		On exit  : 0/0
 30374 ;;		Unchanged: 0/0
 30375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30377 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30379 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30380 ;;Total ram usage:        2 bytes
 30381 ;; Hardware stack levels used:    1
 30382 ;; Hardware stack levels required when called:    1
 30383 ;; This function calls:
 30384 ;;		i2_delay_us
 30385 ;; This function is called by:
 30386 ;;		i2_Motor_Step
 30387 ;; This function uses a non-reentrant model
 30388 ;;
 30389                           
 30390                           	psect	text167
 30391  015F3C                     __ptext167:
 30392                           	opt stack 0
 30393  015F3C                     i2_MXK_SwitchTo:
 30394                           	opt stack 15
 30395                           
 30396                           ;incstack = 0
 30397                           ;i2MXK_SwitchTo@pModule stored from wreg
 30398  015F3C  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 30399                           
 30400                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 30401  015F3E  5086               	movf	3974,w,c	;volatile
 30402  015F40  0B0F               	andlw	15
 30403  015F42  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 30404                           
 30405                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 30406  015F44  504B               	movf	_Bus_State,w,c
 30407  015F46  A4D8               	btfss	status,2,c
 30408  015F48  D002               	goto	i2l1730
 30409                           
 30410                           ;MXK.c: 110: return 0;
 30411  015F4A  0E00               	movlw	0
 30412  015F4C  0012               	return	
 30413  015F4E                     i2l1730:
 30414                           
 30415                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 30416  015F4E  0E00               	movlw	0
 30417  015F50  6E4B               	movwf	_Bus_State,c
 30418                           
 30419                           ;MXK.c: 114: if (CUR != pModule)
 30420  015F52  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 30421  015F54  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 30422  015F56  B4D8               	btfsc	status,2,c
 30423  015F58  D00A               	goto	i2l1732
 30424                           
 30425                           ;MXK.c: 115: {
 30426                           ;MXK.c: 116: PORTG &= ~(0xF);
 30427  015F5A  0EF0               	movlw	240
 30428  015F5C  1686               	andwf	3974,f,c	;volatile
 30429                           
 30430                           ;MXK.c: 117: PORTG |= pModule;
 30431  015F5E  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 30432  015F60  1286               	iorwf	3974,f,c	;volatile
 30433                           
 30434                           ;MXK.c: 120: delay_us(10);
 30435  015F62  0E00               	movlw	0
 30436  015F64  6E02               	movwf	i2delay_us@us+1,c
 30437  015F66  0E0A               	movlw	10
 30438  015F68  6E01               	movwf	i2delay_us@us,c
 30439  015F6A  EC8F  F0AE         	call	i2_delay_us	;wreg free
 30440  015F6E                     i2l1732:
 30441                           
 30442                           ;MXK.c: 121: }
 30443                           ;MXK.c: 122: return 1;
 30444  015F6E  0E01               	movlw	1
 30445  015F70  0012               	return	
 30446  015F72                     __end_ofi2_MXK_SwitchTo:
 30447                           	opt stack 0
 30448                           tosu	equ	0xFFF
 30449                           tosh	equ	0xFFE
 30450                           tosl	equ	0xFFD
 30451                           pclatu	equ	0xFFB
 30452                           pclath	equ	0xFFA
 30453                           tblptru	equ	0xFF8
 30454                           tblptrh	equ	0xFF7
 30455                           tblptrl	equ	0xFF6
 30456                           tablat	equ	0xFF5
 30457                           prodh	equ	0xFF4
 30458                           prodl	equ	0xFF3
 30459                           intcon	equ	0xFF2
 30460                           indf0	equ	0xFEF
 30461                           postinc0	equ	0xFEE
 30462                           fsr0h	equ	0xFEA
 30463                           fsr0l	equ	0xFE9
 30464                           wreg	equ	0xFE8
 30465                           indf1	equ	0xFE7
 30466                           postdec1	equ	0xFE5
 30467                           fsr1h	equ	0xFE2
 30468                           fsr1l	equ	0xFE1
 30469                           indf2	equ	0xFDF
 30470                           postinc2	equ	0xFDE
 30471                           postdec2	equ	0xFDD
 30472                           plusw2	equ	0xFDB
 30473                           fsr2h	equ	0xFDA
 30474                           fsr2l	equ	0xFD9
 30475                           status	equ	0xFD8
 30476                           
 30477 ;; *************** function i2_delay_us *****************
 30478 ;; Defined at:
 30479 ;;		line 255 in file "Library/Types.c"
 30480 ;; Parameters:    Size  Location     Type
 30481 ;;  us              2    0[COMRAM] unsigned short 
 30482 ;; Auto vars:     Size  Location     Type
 30483 ;;  delay_us        4    2[COMRAM] unsigned long 
 30484 ;; Return value:  Size  Location     Type
 30485 ;;                  1    wreg      void 
 30486 ;; Registers used:
 30487 ;;		wreg, status,2, status,0
 30488 ;; Tracked objects:
 30489 ;;		On entry : 0/0
 30490 ;;		On exit  : 0/0
 30491 ;;		Unchanged: 0/0
 30492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30493 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30494 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30496 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30497 ;;Total ram usage:        6 bytes
 30498 ;; Hardware stack levels used:    1
 30499 ;; This function calls:
 30500 ;;		Nothing
 30501 ;; This function is called by:
 30502 ;;		i2_MXK_SwitchTo
 30503 ;; This function uses a non-reentrant model
 30504 ;;
 30505                           
 30506                           	psect	text168
 30507  015D1E                     __ptext168:
 30508                           	opt stack 0
 30509  015D1E                     i2_delay_us:
 30510                           	opt stack 15
 30511                           
 30512                           ;Types.c: 256: unsigned long u;
 30513                           ;Types.c: 257: while (us--) {
 30514                           
 30515                           ;incstack = 0
 30516  015D1E  D016               	goto	i2u546_40
 30517  015D20                     i2l9025:
 30518                           
 30519                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 30520  015D20  0E00               	movlw	0
 30521  015D22  6E03               	movwf	i2delay_us@u,c
 30522  015D24  0E00               	movlw	0
 30523  015D26  6E04               	movwf	i2delay_us@u+1,c
 30524  015D28  0E00               	movlw	0
 30525  015D2A  6E05               	movwf	i2delay_us@u+2,c
 30526  015D2C  0E00               	movlw	0
 30527  015D2E  6E06               	movwf	i2delay_us@u+3,c
 30528  015D30                     i2l9027:
 30529  015D30  5003               	movf	i2delay_us@u,w,c
 30530  015D32  1004               	iorwf	i2delay_us@u+1,w,c
 30531  015D34  1005               	iorwf	i2delay_us@u+2,w,c
 30532  015D36  1006               	iorwf	i2delay_us@u+3,w,c
 30533  015D38  A4D8               	btfss	status,2,c
 30534  015D3A  D008               	goto	i2u546_40
 30535  015D3C  F000               	nop		; ;# 
 30536  015D3E  0E01               	movlw	1
 30537  015D40  2603               	addwf	i2delay_us@u,f,c
 30538  015D42  0E00               	movlw	0
 30539  015D44  2204               	addwfc	i2delay_us@u+1,f,c
 30540  015D46  2205               	addwfc	i2delay_us@u+2,f,c
 30541  015D48  2206               	addwfc	i2delay_us@u+3,f,c
 30542  015D4A  D7F2               	goto	i2l9027
 30543  015D4C                     i2u546_40:
 30544  015D4C  0601               	decf	i2delay_us@us,f,c
 30545  015D4E  A0D8               	btfss	status,0,c
 30546  015D50  0602               	decf	i2delay_us@us+1,f,c
 30547  015D52  2801               	incf	i2delay_us@us,w,c
 30548  015D54  E1E5               	bnz	i2l9025
 30549  015D56  2802               	incf	i2delay_us@us+1,w,c
 30550  015D58  B4D8               	btfsc	status,2,c
 30551  015D5A  0012               	return	
 30552  015D5C  D7E1               	goto	i2l832
 30553  015D5E                     __end_ofi2_delay_us:
 30554                           	opt stack 0
 30555                           tosu	equ	0xFFF
 30556                           tosh	equ	0xFFE
 30557                           tosl	equ	0xFFD
 30558                           pclatu	equ	0xFFB
 30559                           pclath	equ	0xFFA
 30560                           tblptru	equ	0xFF8
 30561                           tblptrh	equ	0xFF7
 30562                           tblptrl	equ	0xFF6
 30563                           tablat	equ	0xFF5
 30564                           prodh	equ	0xFF4
 30565                           prodl	equ	0xFF3
 30566                           intcon	equ	0xFF2
 30567                           indf0	equ	0xFEF
 30568                           postinc0	equ	0xFEE
 30569                           fsr0h	equ	0xFEA
 30570                           fsr0l	equ	0xFE9
 30571                           wreg	equ	0xFE8
 30572                           indf1	equ	0xFE7
 30573                           postdec1	equ	0xFE5
 30574                           fsr1h	equ	0xFE2
 30575                           fsr1l	equ	0xFE1
 30576                           indf2	equ	0xFDF
 30577                           postinc2	equ	0xFDE
 30578                           postdec2	equ	0xFDD
 30579                           plusw2	equ	0xFDB
 30580                           fsr2h	equ	0xFDA
 30581                           fsr2l	equ	0xFD9
 30582                           status	equ	0xFD8
 30583                           
 30584 ;; *************** function i2_MXK_Release *****************
 30585 ;; Defined at:
 30586 ;;		line 130 in file "Library/MXK.c"
 30587 ;; Parameters:    Size  Location     Type
 30588 ;;		None
 30589 ;; Auto vars:     Size  Location     Type
 30590 ;;		None
 30591 ;; Return value:  Size  Location     Type
 30592 ;;                  1    wreg      unsigned char 
 30593 ;; Registers used:
 30594 ;;		wreg, status,2, status,0
 30595 ;; Tracked objects:
 30596 ;;		On entry : 0/0
 30597 ;;		On exit  : 0/0
 30598 ;;		Unchanged: 0/0
 30599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30603 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30604 ;;Total ram usage:        0 bytes
 30605 ;; Hardware stack levels used:    1
 30606 ;; This function calls:
 30607 ;;		Nothing
 30608 ;; This function is called by:
 30609 ;;		i2_Motor_Step
 30610 ;; This function uses a non-reentrant model
 30611 ;;
 30612                           
 30613                           	psect	text169
 30614  016572                     __ptext169:
 30615                           	opt stack 0
 30616  016572                     i2_MXK_Release:
 30617                           	opt stack 16
 30618                           
 30619                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 30620                           
 30621                           ;incstack = 0
 30622  016572  0E01               	movlw	1
 30623  016574  6E4B               	movwf	_Bus_State,c
 30624                           
 30625                           ;MXK.c: 135: return 1;
 30626                           ;	Return value of i2_MXK_Release is never used
 30627  016576  0012               	return	
 30628  016578                     __end_ofi2_MXK_Release:
 30629                           	opt stack 0
 30630                           tosu	equ	0xFFF
 30631                           tosh	equ	0xFFE
 30632                           tosl	equ	0xFFD
 30633                           pclatu	equ	0xFFB
 30634                           pclath	equ	0xFFA
 30635                           tblptru	equ	0xFF8
 30636                           tblptrh	equ	0xFF7
 30637                           tblptrl	equ	0xFF6
 30638                           tablat	equ	0xFF5
 30639                           prodh	equ	0xFF4
 30640                           prodl	equ	0xFF3
 30641                           intcon	equ	0xFF2
 30642                           indf0	equ	0xFEF
 30643                           postinc0	equ	0xFEE
 30644                           fsr0h	equ	0xFEA
 30645                           fsr0l	equ	0xFE9
 30646                           wreg	equ	0xFE8
 30647                           indf1	equ	0xFE7
 30648                           postdec1	equ	0xFE5
 30649                           fsr1h	equ	0xFE2
 30650                           fsr1l	equ	0xFE1
 30651                           indf2	equ	0xFDF
 30652                           postinc2	equ	0xFDE
 30653                           postdec2	equ	0xFDD
 30654                           plusw2	equ	0xFDB
 30655                           fsr2h	equ	0xFDA
 30656                           fsr2l	equ	0xFD9
 30657                           status	equ	0xFD8
 30658                           
 30659 ;; *************** function i2_MXK_Queue *****************
 30660 ;; Defined at:
 30661 ;;		line 144 in file "Library/MXK.c"
 30662 ;; Parameters:    Size  Location     Type
 30663 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 30664 ;;		 -> Absolute function(1), Motor_Step(1), 
 30665 ;; Auto vars:     Size  Location     Type
 30666 ;;		None
 30667 ;; Return value:  Size  Location     Type
 30668 ;;                  1    wreg      void 
 30669 ;; Registers used:
 30670 ;;		wreg, status,2, status,0
 30671 ;; Tracked objects:
 30672 ;;		On entry : 0/0
 30673 ;;		On exit  : 0/0
 30674 ;;		Unchanged: 0/0
 30675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30676 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30679 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30680 ;;Total ram usage:        3 bytes
 30681 ;; Hardware stack levels used:    1
 30682 ;; This function calls:
 30683 ;;		Nothing
 30684 ;; This function is called by:
 30685 ;;		i2_Motor_Step
 30686 ;; This function uses a non-reentrant model
 30687 ;;
 30688                           
 30689                           	psect	text170
 30690  0164D8                     __ptext170:
 30691                           	opt stack 0
 30692  0164D8                     i2_MXK_Queue:
 30693                           	opt stack 16
 30694                           
 30695                           ;MXK.c: 146: lQueue = pCallback;
 30696                           
 30697                           ;incstack = 0
 30698  0164D8  C001  F0BA         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 30699  0164DC  C002  F0BB         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 30700  0164E0  C003  F0BC         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 30701  0164E4  0012               	return		;funcret
 30702  0164E6                     __end_ofi2_MXK_Queue:
 30703                           	opt stack 0
 30704                           tosu	equ	0xFFF
 30705                           tosh	equ	0xFFE
 30706                           tosl	equ	0xFFD
 30707                           pclatu	equ	0xFFB
 30708                           pclath	equ	0xFFA
 30709                           tblptru	equ	0xFF8
 30710                           tblptrh	equ	0xFF7
 30711                           tblptrl	equ	0xFF6
 30712                           tablat	equ	0xFF5
 30713                           prodh	equ	0xFF4
 30714                           prodl	equ	0xFF3
 30715                           intcon	equ	0xFF2
 30716                           indf0	equ	0xFEF
 30717                           postinc0	equ	0xFEE
 30718                           fsr0h	equ	0xFEA
 30719                           fsr0l	equ	0xFE9
 30720                           wreg	equ	0xFE8
 30721                           indf1	equ	0xFE7
 30722                           postdec1	equ	0xFE5
 30723                           fsr1h	equ	0xFE2
 30724                           fsr1l	equ	0xFE1
 30725                           indf2	equ	0xFDF
 30726                           postinc2	equ	0xFDE
 30727                           postdec2	equ	0xFDD
 30728                           plusw2	equ	0xFDB
 30729                           fsr2h	equ	0xFDA
 30730                           fsr2l	equ	0xFD9
 30731                           status	equ	0xFD8
 30732                           tosu	equ	0xFFF
 30733                           tosh	equ	0xFFE
 30734                           tosl	equ	0xFFD
 30735                           pclatu	equ	0xFFB
 30736                           pclath	equ	0xFFA
 30737                           tblptru	equ	0xFF8
 30738                           tblptrh	equ	0xFF7
 30739                           tblptrl	equ	0xFF6
 30740                           tablat	equ	0xFF5
 30741                           prodh	equ	0xFF4
 30742                           prodl	equ	0xFF3
 30743                           intcon	equ	0xFF2
 30744                           indf0	equ	0xFEF
 30745                           postinc0	equ	0xFEE
 30746                           fsr0h	equ	0xFEA
 30747                           fsr0l	equ	0xFE9
 30748                           wreg	equ	0xFE8
 30749                           indf1	equ	0xFE7
 30750                           postdec1	equ	0xFE5
 30751                           fsr1h	equ	0xFE2
 30752                           fsr1l	equ	0xFE1
 30753                           indf2	equ	0xFDF
 30754                           postinc2	equ	0xFDE
 30755                           postdec2	equ	0xFDD
 30756                           plusw2	equ	0xFDB
 30757                           fsr2h	equ	0xFDA
 30758                           fsr2l	equ	0xFD9
 30759                           status	equ	0xFD8
 30760                           
 30761                           	psect	text171
 30762  000000                     __ptext171:
 30763                           	opt stack 0
 30764                           tosu	equ	0xFFF
 30765                           tosh	equ	0xFFE
 30766                           tosl	equ	0xFFD
 30767                           pclatu	equ	0xFFB
 30768                           pclath	equ	0xFFA
 30769                           tblptru	equ	0xFF8
 30770                           tblptrh	equ	0xFF7
 30771                           tblptrl	equ	0xFF6
 30772                           tablat	equ	0xFF5
 30773                           prodh	equ	0xFF4
 30774                           prodl	equ	0xFF3
 30775                           intcon	equ	0xFF2
 30776                           indf0	equ	0xFEF
 30777                           postinc0	equ	0xFEE
 30778                           fsr0h	equ	0xFEA
 30779                           fsr0l	equ	0xFE9
 30780                           wreg	equ	0xFE8
 30781                           indf1	equ	0xFE7
 30782                           postdec1	equ	0xFE5
 30783                           fsr1h	equ	0xFE2
 30784                           fsr1l	equ	0xFE1
 30785                           indf2	equ	0xFDF
 30786                           postinc2	equ	0xFDE
 30787                           postdec2	equ	0xFDD
 30788                           plusw2	equ	0xFDB
 30789                           fsr2h	equ	0xFDA
 30790                           fsr2l	equ	0xFD9
 30791                           status	equ	0xFD8
 30792                           
 30793                           	psect	rparam
 30794  0000                     tosu	equ	0xFFF
 30795                           tosh	equ	0xFFE
 30796                           tosl	equ	0xFFD
 30797                           pclatu	equ	0xFFB
 30798                           pclath	equ	0xFFA
 30799                           tblptru	equ	0xFF8
 30800                           tblptrh	equ	0xFF7
 30801                           tblptrl	equ	0xFF6
 30802                           tablat	equ	0xFF5
 30803                           prodh	equ	0xFF4
 30804                           prodl	equ	0xFF3
 30805                           intcon	equ	0xFF2
 30806                           indf0	equ	0xFEF
 30807                           postinc0	equ	0xFEE
 30808                           fsr0h	equ	0xFEA
 30809                           fsr0l	equ	0xFE9
 30810                           wreg	equ	0xFE8
 30811                           indf1	equ	0xFE7
 30812                           postdec1	equ	0xFE5
 30813                           fsr1h	equ	0xFE2
 30814                           fsr1l	equ	0xFE1
 30815                           indf2	equ	0xFDF
 30816                           postinc2	equ	0xFDE
 30817                           postdec2	equ	0xFDD
 30818                           plusw2	equ	0xFDB
 30819                           fsr2h	equ	0xFDA
 30820                           fsr2l	equ	0xFD9
 30821                           status	equ	0xFD8
 30822                           
 30823                           	psect	temp
 30824  000051                     btemp:
 30825                           	opt stack 0
 30826  000051                     	ds	1
 30827  0000                     int$flags	set	btemp
 30828  0000                     wtemp6	set	btemp+1
 30829                           tosu	equ	0xFFF
 30830                           tosh	equ	0xFFE
 30831                           tosl	equ	0xFFD
 30832                           pclatu	equ	0xFFB
 30833                           pclath	equ	0xFFA
 30834                           tblptru	equ	0xFF8
 30835                           tblptrh	equ	0xFF7
 30836                           tblptrl	equ	0xFF6
 30837                           tablat	equ	0xFF5
 30838                           prodh	equ	0xFF4
 30839                           prodl	equ	0xFF3
 30840                           intcon	equ	0xFF2
 30841                           indf0	equ	0xFEF
 30842                           postinc0	equ	0xFEE
 30843                           fsr0h	equ	0xFEA
 30844                           fsr0l	equ	0xFE9
 30845                           wreg	equ	0xFE8
 30846                           indf1	equ	0xFE7
 30847                           postdec1	equ	0xFE5
 30848                           fsr1h	equ	0xFE2
 30849                           fsr1l	equ	0xFE1
 30850                           indf2	equ	0xFDF
 30851                           postinc2	equ	0xFDE
 30852                           postdec2	equ	0xFDD
 30853                           plusw2	equ	0xFDB
 30854                           fsr2h	equ	0xFDA
 30855                           fsr2l	equ	0xFD9
 30856                           status	equ	0xFD8


Data Sizes:
    Strings     97
    Constant    730
    Data        29
    BSS         822
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      80
    BANK0           160     90     160
    BANK1           256    256     256
    BANK2           256    256     256
    BANK3           256     10     251
    BANK4           256      0     200
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[7]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 46
		 -> STR_8(CODE[34]), STR_7(CODE[3]), STR_6(CODE[14]), STR_5(CODE[3]), 
		 -> STR_4(CODE[46]), STR_3(CODE[3]), STR_2(CODE[46]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__memset	PTR void  size(2) Largest target is 100
		 -> iRScriptStack(BANK4[100]), 

    load_iRScriptStack@loadByte	PTR void [1] size(2) Largest target is 1
		 -> ?_load_iRScriptStack(BANK0[1]), 

    irobot_query_and_update@packetIDs	PTR void [1] size(2) Largest target is 1
		 -> ?_irobot_query_and_update(BANK0[1]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    Timer0_Start@pFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Motor_Speed@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK3[6]), 

    Motor_Move@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK3[6]), 

    lMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK3[6]), NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    Motor_Init@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK3[6]), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11800I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Voltage@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN0(BANK0[5]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Start@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 
		 -> NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    S11482ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 
		 -> NULL(NULL[0]), 

    ADC_Init@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK3[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK3[2]), PortB..(BANK3[2]), 
		 -> PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), PortA(BANK3[10]), 
		 -> PortB(BANK3[10]), PortE(BANK3[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK3[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK3[2]), 
		 -> PortB..(BANK3[2]), PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), 
		 -> PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), PortD(BANK0[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK3[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK3[2]), PortB..(BANK3[2]), 
		 -> PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), PortA(BANK3[10]), 
		 -> PortB(BANK3[10]), PortE(BANK3[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK3[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK3[2]), 
		 -> PortB..(BANK3[2]), PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), 
		 -> PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK0[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK3[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortE(BANK3[10]), PortD(BANK0[10]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK3[10]), PortD(BANK0[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK0[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK3[10]), PortE(BANK3[10]), PortC(BANK0[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortE(BANK3[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK3[10]), TestButton(BANK3[10]), HMIBoard(BANK3[58]), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK3[10]), TestButton(BANK3[10]), HMIBoard(BANK3[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _mode4->___fltol
    _irobot_rotate_to->___fltol
    _irobot_rotate->_irobot_move
    _irobot_angle_wait->_load_iRScriptStack
    _mode2->_Console_Render
    _irobot_move_straight->_irobot_move
    _mode1->___fltol
    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update
    _irobot_query_and_update->_rx_assign
    _rx_assign->_sort_iRBumpDrop
    _printf->_putch
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    _irobot_stop_motion->_irobot_move
    _irobot_move->_load_iRScriptStack
    _irobot_song_play->_eusart_putch
    ___fltol->_ADC_Voltage
    _Motor_Speed->_Timer0_Init
    _Motor_Move->_Timer0_Start
    _HMI_Render->_OutSeg
    _OutSeg->_SPI_Send
    _HMI_Poll->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _Event_TestButton->_LED_Toggle
    _HMI_SetNumber->_itos
    _itos->___lwmod
    ___lwmod->___lwdiv
    _HMI_SetSegments->_ToSegment
    _Event_DIPSwitch->_LED_Toggle
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Console_MakeField->_Byte_GetBit
    _ADC_Voltage->___flmul
    ___flmul->___fldiv
    ___fldiv->___xxtofl
    _init->_HMI_Init
    _irobot_led_power_on->_irobot_leds
    _irobot_leds->_load_iRScriptStack
    _irobot_init_song_0->_eusart_putch
    _irobot_init->_eusart_putch
    _Motor_Init->_Port_SetPinType
    _Timer0_Init->___lldiv
    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _HMI_Init->_Button_Init
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone
    _Byte_SetQuad->_Byte_SetZone
    _ADC_Start->_ADC_SetChannel
    _ADC_Init->_ADC_SetupIO
    _MXK_TestButton->_Port_GetPin
    _MXK_DIPSwitch->_Port_GetQuad
    _HMI_UpSwitch->_Port_GetPin
    _HMI_RightSwitch->_Port_GetPin
    _HMI_LeftSwitch->_Port_GetPin
    _HMI_DownSwitch->_Port_GetPin
    _HMI_DIPSwitch->_Port_GetQuad

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    _irobot_rotate_to->___fltol
    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_mode1

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0 1582870
                                              8 BANK3      2     2      0
                           _delay_ms
                            _getMode
                               _init
                              _mode1
                              _mode2
                              _mode3
                              _mode4
 ---------------------------------------------------------------------------------
 (1) _mode4                                                9     9      0  208832
                                              0 BANK3      5     5      0
                          _ADC_Start
                        _ADC_Voltage
                     _Console_Render
                           _HMI_Poll
                         _HMI_Render
                      _HMI_SetNumber
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                         _Motor_Move
                        _Motor_Speed
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl
               _irobot_move_straight
                   _irobot_rotate_to
                   _irobot_song_play
                 _irobot_stop_motion
                             _printf
                       _update_angle
              _update_bump_and_cliff
                    _update_distance
 ---------------------------------------------------------------------------------
 (2) _irobot_rotate_to                                     4     0      4    8495
                                              2 BANK1      4     0      4
                            ___fltol (ARG)
                  _irobot_angle_wait
                      _irobot_rotate
                 _irobot_stop_motion
 ---------------------------------------------------------------------------------
 (3) _irobot_rotate                                        5     1      4    3671
                                             25 BANK0      5     1      4
                        _irobot_move
 ---------------------------------------------------------------------------------
 (3) _irobot_angle_wait                                    4     2      2    1221
                                             16 BANK0      4     2      2
                 _load_iRScriptStack
                 _twos_complement_of
 ---------------------------------------------------------------------------------
 (1) _mode3                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _mode2                                                2     2      0  169542
                                             44 BANK0      2     2      0
                     _Console_Render
                           _HMI_Poll
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
               _irobot_move_straight
                   _irobot_song_play
                 _irobot_stop_motion
                             _printf
                       _update_angle
              _update_bump_and_cliff
                    _update_distance
 ---------------------------------------------------------------------------------
 (2) _irobot_move_straight                                 2     0      2    3510
                                             25 BANK0      2     0      2
                        _irobot_move
 ---------------------------------------------------------------------------------
 (1) _mode1                                               16    16      0  193576
                                              0 BANK3      8     8      0
                          _ADC_Start
                        _ADC_Voltage
                     _Console_Render
                           _HMI_Poll
                         _HMI_Render
                      _HMI_SetNumber
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                         _Motor_Move
                        _Motor_Speed
                            ___fldiv
                            ___fltol
                   _irobot_song_play
                 _irobot_stop_motion
                             _printf
                       _update_angle
              _update_bump_and_cliff
                    _update_distance
 ---------------------------------------------------------------------------------
 (2) _update_distance                                      0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (2) _update_bump_and_cliff                                0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (2) _update_angle                                         0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (3) _irobot_query_and_update                            535   525     10    1737
                                              6 BANK0     23    13     10
                                              0 BANK1    256   256      0
                                              0 BANK2    256   256      0
                       _eusart_getch
                       _eusart_putch
                    _get_packet_size
                          _rx_assign
 ---------------------------------------------------------------------------------
 (4) _rx_assign                                            5     3      2     738
                                              1 BANK0      5     3      2
                    _sort_iRBumpDrop
 ---------------------------------------------------------------------------------
 (5) _sort_iRBumpDrop                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _get_packet_size                                      1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _eusart_getch                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _printf                                              25    17      8    5579
                                             21 BANK0     16     8      8
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0    1972
                                             20 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (4) _Console_PrintChar                                    4     4      0    1941
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (5) _Console_Tab                                          8     8      0    1390
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4    1053
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (6) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (7) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (5) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (6) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _irobot_stop_motion                                   1     1      0    3206
                                             25 BANK0      1     1      0
                        _irobot_move
 ---------------------------------------------------------------------------------
 (3) _irobot_move                                          9     5      4    3175
                                             16 BANK0      9     5      4
                       _eusart_putch
                 _load_iRScriptStack
                 _twos_complement_of
 ---------------------------------------------------------------------------------
 (4) _twos_complement_of                                   2     0      2     806
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _irobot_song_play                                     1     1      0      62
                                              1 BANK0      1     1      0
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4    1249
                                             82 BANK0      8     4      4
                                              0 BANK1      2     2      0
                        _ADC_Voltage (ARG)
                            ___fldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _Motor_Speed                                          4     0      4    4143
                                             27 BANK0      4     0      4
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (2) _Motor_Move                                           6     2      4    1219
                                              3 BANK0      6     2      4
                       _Timer0_Start
 ---------------------------------------------------------------------------------
 (3) _Timer0_Start                                         3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _HMI_Render                                           2     2      0    1593
                                              8 BANK0      2     2      0
                             _OutSeg
 ---------------------------------------------------------------------------------
 (3) _OutSeg                                               5     4      1    1463
                                              3 BANK0      5     4      1
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (2) _HMI_Poll                                             0     0      0   85165
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (3) _Button_Poll                                          9     6      3   85165
                                             27 BANK0      9     6      3
                    _Event_DIPSwitch *
                         _Event_NULL *
                   _Event_TestButton *
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (4) _Event_TestButton                                     1     1      0   37797
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (2) _HMI_SetNumber                                        2     0      2    4702
                                             22 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (3) _itos                                                10     6      4    3009
                                             12 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (4) _reverse                                              7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     840
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     849
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _HMI_SetSegments                                      5     3      2     446
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (4) _ToSegment                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _HMI_SetButton                                        8     8      0     207
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (4) _Event_NULL                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _Event_DIPSwitch                                      2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (5) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Console_Render                                      11    11      0   35327
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (3) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (3) _LCD_DrawField                                       17     7     10   16520
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     536
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (4) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (2) _ADC_Voltage                                         18    14      4    8729
                                             64 BANK0     18    14      4
                            ___fldiv
                            ___flmul
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4     696
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             25    17      8    3065
                                             39 BANK0     25    17      8
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             25    17      8    4007
                                             14 BANK0     25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0  997792
                           _ADC_Init
                          _ADC_Start
                       _Console_Init
                           _HMI_Init
                         _ISR_Enable
                           _LCD_Init
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                         _Motor_Init
                           _delay_ms
                        _eusart_init
                        _irobot_init
                 _irobot_init_song_0
                _irobot_led_power_on
 ---------------------------------------------------------------------------------
 (2) _irobot_led_power_on                                  1     1      0    1358
                                             20 BANK0      1     1      0
                        _irobot_leds
 ---------------------------------------------------------------------------------
 (3) _irobot_leds                                          4     1      3    1327
                                             16 BANK0      4     1      3
                       _eusart_putch
                 _load_iRScriptStack
 ---------------------------------------------------------------------------------
 (4) _load_iRScriptStack                                  16     6     10     167
                                              0 BANK0     16     6     10
 ---------------------------------------------------------------------------------
 (2) _irobot_init_song_0                                   0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (2) _irobot_init                                          0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (4) _eusart_putch                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _eusart_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Motor_Init                                           4     0      4   88478
                                             45 BANK0      4     0      4
                        _Port_SetPin
                    _Port_SetPinType
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (3) _Timer0_Init                                         14    10      4    3138
                                             13 BANK0     14    10      4
                       _Timer0_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) _Timer0_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_Init                                             0     0      0  362464
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Port_Init                                            6     3      3  111429
                                             64 BANK0      6     3      3
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (3) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      6     3      3
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (4) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (4) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (3) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (4) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (2) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             4     4      0  291124
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (4) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (4) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (5) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (4) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (6) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Configure_GPIOs                                      0     0      0  261965
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (4) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _LCD_Reset                                            0     0      0   94589
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             6     4      2    1470
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (5) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (5) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (5) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (6) _Port_TogglePin                                       4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (4) _Port_SetPin                                          5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (2) _ISR_Enable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _HMI_Init                                             2     2      0  217901
                                             72 BANK0      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _SPI_Init                                             8     2      6   86139
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (5) _Timer2_Init                                         17    13      4    2964
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8    2673
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (6) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _Button_Init                                         13     0     13  105207
                                             59 BANK0     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (4) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetBit                                          7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (6) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (4) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (5) _Word_GetPair                                         3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (6) _Byte_GetPair                                         3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (7) _Byte_GetZone                                         9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (4) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (6) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (4) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Start                                            4     2      2    1222
                                              2 BANK0      4     2      2
                            _ADC_Off
                             _ADC_On
                     _ADC_SetChannel
 ---------------------------------------------------------------------------------
 (2) _ADC_Init                                             3     0      3    2172
                                              4 BANK0      3     0      3
                      _ADC_Calibrate
                  _ADC_ClockDivision
                 _ADC_ConversionTime
                     _ADC_SetChannel
                        _ADC_SetupIO
 ---------------------------------------------------------------------------------
 (3) _ADC_SetupIO                                          4     4      0      65
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _ADC_SetChannel                                       2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ConversionTime                                   2     2      0     136
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ClockDivision                                    3     3      0     172
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _ADC_Calibrate                                        0     0      0       0
                            _ADC_Off
                             _ADC_On
 ---------------------------------------------------------------------------------
 (3) _ADC_On                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getMode                                              0     0      0   11658
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (4) _MXK_TestButton                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _MXK_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (4) _HMI_UpSwitch                                         0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_RightSwitch                                      0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_LeftSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_DownSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (4) _HMI_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (5) _Port_GetQuad                                         6     3      3    1014
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _ISR_Function                                       18    18      0    1778
                                             22 COMRAM    18    18      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (13) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (16) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (17) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (18) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (16) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (15) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (16) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delay_ms
   _getMode
     _HMI_DIPSwitch *
       _Port_GetQuad
     _HMI_DownSwitch *
       _Port_GetPin
     _HMI_LeftSwitch *
       _Port_GetPin
     _HMI_RightSwitch *
       _Port_GetPin
     _HMI_UpSwitch *
       _Port_GetPin
     _MXK_DIPSwitch *
       _Port_GetQuad
     _MXK_TestButton *
       _Port_GetPin
   _init
     _ADC_Init
       _ADC_Calibrate
         _ADC_Off
         _ADC_On
       _ADC_ClockDivision
       _ADC_ConversionTime
       _ADC_SetChannel
       _ADC_SetupIO
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _Console_Init
     _HMI_Init
       _Button_Init
         _HMI_InitButtons *
         _MXK_InitDIPSwitch *
           _Port_SetQuadType
             _Byte_SetQuad
               _Byte_SetZone
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
         _MXK_InitTestButton *
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MinSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _ISR_Enable
     _LCD_Init
       _Configure_GPIOs
         _LCD_Reset
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Reset_High
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _Reset_Low
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _delay_ms
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_Init
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
           _SPI_DCS
           _SPI_DisableISR
           _Timer2_Init
             _Timer2_Clear
             ___lldiv
         _SPI_MaxSpeed
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
       _LCD_Fill
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
       _LCD_Write
         _Mode_Set
         _SPI_Send
       _Set_Rotation
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _delay_ms
     _MXK_BlockSwitchTo
       _delay_us
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Init
       _LED_Init
         _LED_Set
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _Port_Init
         _GetPortPORT
         _GetPortProperties
         _GetPortTRIS
         _Port_Set
           _Byte_SetByte
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Port_SetType
           _Port_CheckPortType
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetQuadType
         _Byte_SetQuad
           _Byte_SetZone
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _delay_ms
     _MXK_Release
     _Motor_Init
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     _delay_ms
     _eusart_init
     _irobot_init
       _eusart_putch
     _irobot_init_song_0
       _eusart_putch
     _irobot_led_power_on
       _irobot_leds
         _eusart_putch
         _load_iRScriptStack
   _mode1
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _ADC_Voltage
       ___fldiv
         ___xxtofl (ARG)
       ___flmul
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _HMI_Poll
       _Button_Poll
         _Event_DIPSwitch *
           _HMI_GetBar
           _HMI_SetBar
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Event_NULL *
         _Event_TestButton *
           _HMI_SetButton
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _reverse
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
     _HMI_Render
       _OutSeg
         _SPI_Send
     _HMI_SetNumber
       _HMI_SetSegments
         _ToSegment
       _itos
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _reverse
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _Motor_Move
       _Timer0_Start
     _Motor_Speed
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     ___fldiv
       ___xxtofl (ARG)
     ___fltol
       _ADC_Voltage (ARG)
         ___fldiv
           ___xxtofl (ARG)
         ___flmul
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl
       ___fldiv (ARG)
         ___xxtofl (ARG)
     _irobot_song_play
       _eusart_putch
     _irobot_stop_motion
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _update_angle
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_bump_and_cliff
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_distance
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
   _mode2
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _HMI_Poll
       _Button_Poll
         _Event_DIPSwitch *
           _HMI_GetBar
           _HMI_SetBar
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Event_NULL *
         _Event_TestButton *
           _HMI_SetButton
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _reverse
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _irobot_move_straight
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _irobot_song_play
       _eusart_putch
     _irobot_stop_motion
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _update_angle
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_bump_and_cliff
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_distance
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
   _mode3
   _mode4
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _ADC_Voltage
       ___fldiv
         ___xxtofl (ARG)
       ___flmul
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _HMI_Poll
       _Button_Poll
         _Event_DIPSwitch *
           _HMI_GetBar
           _HMI_SetBar
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Event_NULL *
         _Event_TestButton *
           _HMI_SetButton
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _reverse
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
     _HMI_Render
       _OutSeg
         _SPI_Send
     _HMI_SetNumber
       _HMI_SetSegments
         _ToSegment
       _itos
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _reverse
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _Motor_Move
       _Timer0_Start
     _Motor_Speed
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     ___fldiv
       ___xxtofl (ARG)
     ___flmul
       ___fldiv (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___fltol
       _ADC_Voltage (ARG)
         ___fldiv
           ___xxtofl (ARG)
         ___flmul
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl
       ___fldiv (ARG)
         ___xxtofl (ARG)
     ___xxtofl
     _irobot_move_straight
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _irobot_rotate_to
       ___fltol (ARG)
         _ADC_Voltage (ARG)
           ___fldiv
             ___xxtofl (ARG)
           ___flmul
             ___fldiv (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl
         ___fldiv (ARG)
           ___xxtofl (ARG)
       _irobot_angle_wait (ARG)
         _load_iRScriptStack
         _twos_complement_of
       _irobot_rotate (ARG)
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _irobot_stop_motion (ARG)
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
     _irobot_song_play
       _eusart_putch
     _irobot_stop_motion
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _update_angle
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_bump_and_cliff
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_distance
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0      C8      14       78.1%
BITBANK3           100      0       0      10        0.0%
BANK3              100      A      FB      11       98.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100    100     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100    100     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5A      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      50       1       85.1%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     4B3      12        0.0%
DATA                 0      0     5DF       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Tue Sep 12 18:18:22 2017

                                 _update_angle 646E                                  i2_Timer0_Stop 656C  
                             SPI_Init@pChannel 0091                     __size_of_MXK_BlockSwitchTo 003E  
                                 i2_Motor_Step 37B8                                              _A 004C  
                        __end_of_irobot_rotate 55F0                                              l8 3C80  
                                 ___fldiv@aexp 0086                                   ___fldiv@bexp 0085  
                                            _a 004D                                              _i 003A  
                                            _j 0039                                              _l 004F  
                                            _u 0038                                              _w 0050  
                          _irobot_led_power_on 6306                                   ___fldiv@sign 007A  
                                           l11 30A4                                             l12 308E  
                                           l90 2FDA                                             l85 2ED6  
                                           l87 2F44                                             l89 2FB0  
                                 ___awdiv@sign 0065                             __size_of_ADC_Start 0084  
                          ___wmul@multiplicand 0062                                  _HMI_DIPSwitch 63A4  
                           LCD_DrawField@pSize 0078                             LCD_DrawField@count 007E  
                   __end_of_irobot_stop_motion 5BCC                              ?_Event_TestButton 0001  
                             i2_Timer0_Restart 650A                           ADC_ClockDivision@reg 0061  
                                          l120 4A62                                            l121 4A78  
                                          l122 4A8E                                            l220 575A  
                                          l117 4AA4                                            l221 571E  
                                          l118 4A4C                                            l230 5954  
                                          l222 576A                                            l223 573C  
                                  ?_LED_Toggle 0001                                            l234 5AE6  
                                          l235 5AB6                                            l227 5970  
                                          l403 2B64                                            l412 2840  
                                          l228 5938                                            l340 4710  
                                          l404 2B04                                            l421 27D4  
                                          l413 26D6                                            l237 5ACE  
                                          l341 471E                                            l405 2B94  
                                ??_Console_Tab 0068                                            l414 285C  
                                          l430 3DF4                                            l350 4818  
                                          l342 472C                                            l510 1D02  
                                          l406 2B1C                                            l415 26FC  
                                          l351 47A8                                            l343 473A  
                                          l511 1E12                                            l407 2B34  
                                          l183 48CC                                            l600 04B2  
                                          l432 3E1E                                            l344 4748  
                                          l512 1D24                                            l408 2B4C  
                                          l184 48A6                                            l417 2768  
                                          l601 0646                                            l433 3E4E  
                                          l353 47B6                                            l337 4772  
                                          l345 4756                                            l610 06CE  
                                          l602 04E4                                            l354 47C4  
                                          l346 4764                                            l338 4702  
                                          l370 46A2                                            l611 071C  
                                          l603 0658                                            l427 3E78  
                                          l355 47D2                                            l363 46CC  
                                          l371 46B0                                            l531 17BC  
                                  ?_HMI_GetBar 0001                                            l612 076A  
                                          l604 0592                                            l356 47E0  
                                          l372 46BE                                            l364 465C  
                                          l532 17E0                                            l516 1D6C  
                                          l357 47EE                                            l509 1DF6  
                                          l614 084C                                            l358 47FC  
                                          l366 466A                                            l526 1800  
                                          l615 0844                                            l607 07B8  
                                          l359 480A                                            l367 4678  
                                          l519 1DB4                                            l616 085E  
                                          l608 0680                                            l368 4686  
                                          l528 181E                                            l393 582A  
                                          l617 0848                                            l609 07D6  
                                          l369 4694                                            l529 179C  
                                          l483 1B62                                            l732 49E6  
                                          l476 1C3A                                            l900 18DA  
                                          l733 49DA                                            l389 54BA  
                                          l477 1AAC                                            l397 5AAA  
                                          l901 18DE                                            l726 427A  
                                          l478 1C56                                            l486 1BCE  
                                          l654 614C                                            l910 1902  
                                          l902 18E2                                            l727 426E  
                                          l479 1AF6                                            l655 6144  
                                          l911 1906                                            l903 18E6  
                                          l824 53EE                                            l832 58E2  
                                          l912 190A                                            l904 18EA  
                                          l673 602A                                            l657 6148  
                                          l681 5328                                            l913 190E  
                                          l905 18EE                                            l921 52F8  
                                          l914 1912                                            l906 18F2  
                                          l922 52C4                                            l930 39E6  
                                          l819 4EFE                                            l915 1916  
                                          l907 18F6                                            l684 533E  
                                          l916 191A                                            l908 18FA  
                                          l860 183A                                            l781 5E44  
                                          l597 04C0                                            l853 1922  
                                          l917 191E                                            l909 18FE  
                                          l861 183E                                            l598 04A8  
                                          l678 5364                                            l686 534E  
                                          l870 1862                                            l862 1842  
                                          l854 1826                                            l599 04D0  
                                          l679 5318                                            l871 1866  
                                          l863 1846                                            l776 5BFC  
                                          l880 188A                                            l872 186A  
                                          l864 184A                                            l856 182A  
                                          l928 3A66                                            l881 188E  
                                          l873 186E                                            l865 184E  
                                          l857 182E                                            l929 3A36  
                                          l890 18B2                                            l882 1892  
                                          l874 1872                                            l866 1852  
                                          l858 1832                                            l891 18B6  
                                          l883 1896                                            l875 1876  
                                          l867 1856                                            l859 1836  
                                          l892 18BA                                            l884 189A  
                                          l876 187A                                            l868 185A  
                                          l893 18BE                                            l885 189E  
                                          l877 187E                                            l869 185E  
                                          l894 18C2                                            l886 18A2  
                                          l878 1882                                            l990 4B6E  
                                          l895 18C6                                            l887 18A6  
                                          l879 1886                                            l983 496A  
                                          l976 4C88                                            l896 18CA  
                                          l888 18AA                                            l992 4B7E  
                                          l984 48EE                                            l897 18CE  
                                          l889 18AE                                            l985 4966  
                                          l978 4C98                                            l898 18D2  
                                          l899 18D6                                            l997 5790  
                                          l999 57B4                                            _PR2 000FCB  
                                          _dip 0325                                            _val 00CC  
                              __end_of_ADC_Off 654C                                    ?_HMI_SetBar 0001  
                           ??_Event_TestButton 0079                                   _Word_GetPair 5E18  
                                          prod 000FF3                                    ?_HMI_Render 0001  
                          MXK_SwitchTo@pModule 0067                     __end_of_ADC_ConversionTime 5B40  
                                          tosl 000FFD                                            wreg 000FE8  
                           Console_MakeField@x 0070                             Console_MakeField@y 0071  
                                   _TXSTA1bits 000FAD                                _update_distance 645C  
                                 Console_Tab@c 006F                                   Console_Tab@i 006E  
                          LCD_DrawField@pField 0072                                   Console_Tab@t 006D  
                   __size_of_ADC_ClockDivision 008A                                   ___flmul@aexp 0094  
                                 ___flmul@bexp 0099                                     i2_delay_us 5D1E  
                         Port_Set@TypeRequired 0082                                   ___flmul@sign 0093  
                                 ___flmul@temp 009E                                   ___flmul@prod 009A  
                            Console_FormFeed@x 0062                              Console_FormFeed@y 0063  
                          LCD_DrawField@pPoint 0074                                 ?_LCD_DrawField 0072  
                        Port_SetPinType@Output 008A                                Port_SetPin@Type 0073  
                              Port_SetPin@pPin 0071                           ?_irobot_led_power_on 0001  
                                ?_Byte_GetPair 0069                                __end_of_LED_Set 5982  
                      __size_ofi2_Word_GetPair 0030                                  i2_Port_SetPin 4506  
                                 ___fltol@exp1 0101                                   _Word_SetPair 5BCC  
                                         l1000 57D0                                           l1010 3EE8  
                                         l1004 555A                                  ?_Byte_GetZone 0060  
                                         l1005 5588                                           l1200 419A  
                                         l1040 288A                                           l1201 41EE  
                                         l1009 3EF4                                           l1041 2890  
                                         l1202 420A                                           l1042 2896  
                                         l1043 289C                                           l1300 4D1A  
                                         l1204 4234                                           l1036 29E6  
                                         l1044 28A2                                           l2020 54CA  
                                         l2100 2C70                                           l1301 4D1E  
                                         l1205 421A                                           l1045 28A8  
                                         l1037 2884                                           l2021 54CE  
                                         l1302 4D28                                           l1062 20BE  
                                         l2110 5C86                                           l2022 54D2  
                                         l1303 4D36                                           l1063 20EC  
                                         l1207 4246                                           l1047 294E  
                                         l2023 54D6                                           l2031 396C  
                                         l1056 1F4E                                           l2024 54DA  
                                         l2040 38EC                                           l2032 38BE  
                                         l1313 5B20                                           l1153 232C  
                                         l1057 2114                                           l2017 54EA  
                                         l2025 54DE                                           l2114 53D8  
                                         l1082 3D6E                                           l1058 1F56  
                                         l1146 4E20                                           l2106 5C92  
                                         l2026 54E2                                           l2018 54C6  
                                         l2042 3900                                           l2034 38C8  
                                         l2115 539A                                           l1059 1F80  
                                         l2027 54E6                                           l2035 38CE  
                                         l2140 5868                                           l1084 3D76  
                                         l2108 5C7E                                           l2036 38D4  
                                         l1077 3D3E                                           l2045 392C  
                                         l2037 38DA                                           l1254 6450  
                                         l1158 5D9A                                           l2070 4C66  
                                         l2062 4C22                                           l2054 4BE8  
                                         l2038 38E0                                           l1079 3D4E  
                                         l2135 4386                                           l2047 3940  
                                         l2039 38E6                                           l2311 08EC  
                                         l2304 4108                                           l1280 4D9C  
                                         l2320 0A3E                                           l2152 55B0  
                                         l2305 4134                                           l2321 0A6E  
                                         l2306 4160                                           l2066 4C48  
                                         l2058 4C02                                           l2314 0908  
                                         l2154 55B6                                           l1283 4DFE  
                                         l2163 5BB0                                           l2091 2C26  
                                         l2323 0ABA                                           l1276 4D84  
                                         l2420 25DC                                           l2092 2BE0  
                                         l2316 0966                                           l2156 55D8  
                                         l2333 0CC6                                           l2325 0B7C  
                                         l2341 3484                                           l1294 4D3E  
                                         l1630 35F2                                           l2414 258A  
                                         l2094 2C56                                           l2334 0C2C  
                                         l2326 0ADA                                           l2318 099E  
                                         l1295 4D04                                           l1631 364E  
                                         l2415 2526                                           l2407 250A  
                                         l2095 2C3A                                           l1296 4D68  
                                         l1632 3632                                           l2600 3FB4  
                                         l2424 2632                                           l2416 253E  
                                         l2408 251E                                           l2336 0C64  
                                         l2328 0B12                                           l2344 34A0  
                                         l1297 4D0E                                           l2601 3FA8  
                                         l2425 2690                                           l2409 254E  
                                         l2417 2548                                           l2097 2D26  
                                         l2361 0D7E                                           l1298 4D12  
                                         l1730 5CB2                                           l2426 2638  
                                         l2418 25C2                                           l2098 2C6A  
                                         l2346 355A                                           l2370 1008  
                                         l1299 4D16                                           l1627 369A  
                                         l2099 2CB2                                           l2347 3510  
                                         l2371 0F66                                           l2363 0E2C  
                                         l1724 5DE6                                           l1732 5CDA  
                                         l1628 3690                                           l2604 3FEA  
                                         l2356 0D04                                           l1629 3610  
                                         l2605 3FF8                                           l2373 0F9E  
                                         l2365 0ECC                                           l1726 5E14  
                                         l2606 400C                                           l2366 0EFC  
                                         l2390 5664                                           l1735 633A  
                                         l2359 0D20                                           l2391 566A  
                                         l2296 45DC                                           l2376 1078  
                                         l2368 0F46                                           l2392 5670  
                                         l2377 106A                                           l2393 5676  
                                         l2298 460E                                           l2386 5658  
                                         l1827 3358                                           l2387 5686  
                                         l1828 3378                                           l2388 565E  
                                         l2661 3754                                           l2670 37A6  
                                         l2662 3740                                           l1784 31F2  
                                         l2920 10C4                                           l1785 3200  
                                         l2921 10F2                                           l2833 4FA6  
                                         l1873 5E8A                                           l2930 11D2  
                                         l2922 10E8                                           l2834 4F9A  
                                         l1787 320A                                           l2931 12D4  
                                         l2843 56D6                                           l2667 3780  
                                         l2659 36D2                                           l2780 4054  
                                         l2940 130C                                           l2932 1250  
                                         l2924 1122                                           l2844 56CA  
                                         l2668 3770                                           l2781 4044  
                                         l2933 1288                                           l2925 1150  
                                         l2837 4FDC                                           l2597 3F74  
                                         l2950 143E                                           l2934 127C  
                                         l2926 1146                                           l2838 4FEA  
                                         l2598 3F8A                                           l2951 1442  
                                         l2935 12D0                                           l2847 5700  
                                         l2784 40AE                                           l2928 11A4  
                                         l2960 009C                                           l2848 570E  
                                         l2785 40C0                                           l2945 137A  
                                         l2961 00B4                                           l2938 1320  
                                         l2962 00DC                                           l2954 001E  
                                         l2947 13CA                                           l2939 12F6  
                                         l2955 0048                                           l2948 13F8  
                                         l2980 0482                                           l2956 0042  
                                         l2949 142E                                           l2973 03BE  
                                         l2957 005A                                           l2966 0364  
                                         l2958 0078                                           l2990 2424  
                                         l2975 040E                                           l2967 033A  
                                         l2959 00A2                                           l2991 2406  
                                         l2983 2378                                           l2976 0434  
                                         l2968 0350                                           l2984 2388  
                                         l2993 2472                                           l2985 23B0  
                                         l2978 0462                                           l2994 2462  
                                         l2979 048C                                           l2987 23C8  
                                         l2988 23B8                                           l2998 2498  
                                         l2999 24EA                                 ??_Console_Init 0060  
                        Port_SetPinType@pInput 0086                                           STR_1 FFFB  
                                         STR_2 FF9D                                           STR_3 FFFB  
                                         STR_4 FF9D                                           STR_5 FFFB  
                                         STR_6 FFED                                           STR_7 FFFB  
                                         STR_8 FFCB                                           _LATA 000F89  
                                         _LATB 000F8A                                           _LATC 000F8B  
                                         _LATD 000F8C                                           _LATE 000F8D  
                                         _LATF 000F8E                    __size_of_MXK_InitTestButton 001E  
                                         _LATG 000F8F                            __end_of_GetPortPORT 4848  
                     __end_of_irobot_song_play 6448                                           _PIR1 000F9E  
                                         _PIR2 000FA1                                           _PIR3 000FA4  
                                         u9200 5A56                            __end_of_GetPortTRIS 46FC  
                                         u9040 3FBA                                           u9140 542C  
                                         u9205 5A50                                           u9230 33C4  
                                         u9215 3310                                           u8600 49B0  
                                         u9080 405A                                           u9314 4B1E  
                                         u9315 4B18                                           u8620 4A16  
                                         u9260 591A                                           u8607 49A6  
                                         u8704 42B6                                           u8640 4E98  
                                         u8800 4BC8                                           u8705 42B0  
                                         u8625 4A10                                           u9505 1726  
                                         u8730 5C46                                           u8714 42E8  
                                         u9530 5F94                                           u8715 42E2  
                                         u9515 1768                                           u8820 4FAC  
                                         u9445 1494                                           u9390 5C72  
                                         u8735 5C40                                           u9455 14AC  
                                         u9535 5F8E                                           u9465 14C4  
                                         u8674 560C                                           u8850 56DC  
                                         u8675 5606                                           u9475 14E6  
                                         _SPI1 0365                                           u8684 563E  
                                         u9708 3CEC                                           u8940 3A52  
                                         _SPI2 0370                                           u8685 5638  
                                         u9485 1666                                           u9910 3DB8  
                                         u9830 514C                                           u9718 3038  
                                         u8790 4BC2                                           u8950 5556  
                                         u9495 16E4                                           u9719 304C  
                                         u9920 3DC4                                           u8960 5580  
                                         u8875 648E                                           u8876 6490  
                                         u9790 58DA                                           u9870 2B9A  
                                         u9768 3174                                           u9960 4E6E  
                                         _TMR0 000FD6                                           u9955 4E30  
                                         u9990 5B1A                       __end_of_irobot_rotate_to 60EE  
               irobot_query_and_update@RXArray 0100                              rx_assign@packetID 0065  
                                         _gISR 0314                             Event_DIPSwitch@Bar 007A  
               irobot_query_and_update@TXArray 0200                                  ??_Byte_GetBit 0063  
                                _iRVirtualWall 0030                           __size_of_ADC_SetupIO 0032  
                           SPI_MaxSpeed@pInput 006F                                  ?_Byte_SetByte 0060  
                                ?_Byte_SetPair 006B                                __end_of_SPI_DCS 6038  
                                         _main 5654                     irobot_leds@powerLuminosity 0072  
                                         _init 45B0                                           _mode 0323  
                              ??i2_Byte_SetBit 0005                                  ?_Byte_SetQuad 006B  
                                         _itos 39A8                                           fsr0h 000FEA  
                                         fsr1h 000FE2                                           indf0 000FEF  
                                         fsr2h 000FDA                                           fsr0l 000FE9  
                                         indf1 000FE7                                           indf2 000FDF  
                                         fsr1l 000FE1                                           fsr2l 000FD9  
                                ?_Byte_SetZone 0060                                           btemp 0051  
                                         _zero 004E                               __end_of_ADC_Init 4F7C  
                                ??_Byte_SetBit 0064                             __size_of_LCD_Reset 0050  
                         __size_of_ADC_Voltage 00D8                                           prodh 000FF4  
                                         prodl 000FF3                               Motor_Move@pDelta 0065  
                                         start 14AA                             __size_of_LCD_Write 0022  
                                __CFG_IESO$OFF 000000                                ___fldiv@new_exp 007F  
                            Timer0_Init@DIVIDE 0077                                ?_SPI_DisableISR 0060  
                             Motor_Move@pMotor 0063                            HMI_SetButton@pValue 0066  
                                Console_Init@x 0062                                  Console_Init@y 0063  
                               ?i2_Timer0_Stop 0001                              i2Byte_SetBit@pBit 0003  
                                 ___param_bank 000000                                __end_of_Font5x7 FF8F  
                         Set_Rotation@rotation 0066                         __size_of_HMI_SetButton 0090  
                       __size_of_HMI_SetNumber 002A                                    ?_ISR_Enable 0001  
                           _irobot_init_song_0 61F6                   __size_of_Console_ClearCursor 0040  
                             __end_of_LCD_Fill 58E0                               __end_of_LCD_Init 3026  
                               ?_HMI_DIPSwitch 0001                                  __CFG_PLLDIV$3 000000  
                             __end_of_LED_Init 577A                                   _BAUDCON1bits 000F7E  
                                ??_Button_Init 00A8                        GetPortProperties@pInput 0062  
                                ??_Button_Poll 007E                               __end_of_HMI_Init 232E  
                                        l12123 4B64                                          l14001 2FE8  
                                        l12313 4234                                          l12129 4B74  
                                        l14013 4C7E                                          l13301 58B0  
                                        l12261 3A52                                          l14101 5D68  
                                        l12433 53EE                                          l12441 542C  
                                        l13305 58BE                                          l14019 4C8E  
                                        l12435 5400                                          l13325 5122  
                                        l14047 1F76                                          l12537 58E2  
                                        l12633 64B2                                          l13425 3D44  
                                        l13329 5130                                          l12539 58F4  
                                        l13419 3D34                                          l13383 2AFA  
                                        l13455 4E18                                          l14089 2300  
                                        l13529 31F2                                          l12499 3358  
                                        l14375 25E2                                          l16229 0ADA  
                             __end_of_HMI_Poll 50DE                                          l16263 0C2C  
                                        l16247 0B7C                                          l16417 1008  
                                        l13789 142E                                          l13991 2F44  
                                        l16399 0F66                                          _I2C1T 0040  
                                        _I2C2T 03C1                                  ___fltol@sign1 0100  
                                        ?_main 0001                                          ?_init 0001  
                              __end_of___fldiv 1466                                __end_of___awdiv 4016  
                        irobot_rotate@isScript 007D                                          ?_itos 006C  
                              __end_of___flmul 04A6                                __end_of___fltol 37B8  
                              _Event_DIPSwitch 6068                                __end_of___lldiv 40D2  
                                        u10100 35D0                                          u10110 35E4  
                                        u10024 5FC0                                          u10120 3624  
                                        u10025 5FBA                                          u10070 325E  
                                        u11110 269C                                          u10410 13DE  
                                        u10420 140C                                          u11140 36F2  
                                        u10180 55A4                                          u10510 00C8  
                                        u10600 0422                                          u10520 02DC  
                                        u11145 36E6                                          u10610 0448  
                                        u11090 261E                        __size_of_HMI_LeftSwitch 0018  
                                        u10380 1374                                          u11180 378A  
                              ___awdiv@divisor 0062                                          u10525 02D0  
                                        u10800 4CF0                                          u10730 2ED4  
                                        u10570 03B8                                          u11518 413C  
                                        u11519 4150                                          u11538 4168  
                                        u10770 2FE8                                          u10690 2480  
                                        u11539 417C                                          u11478 40E4  
                                        u10870 20FC                                          u11479 40F8  
                                        u11498 4110                                          u11499 4124  
                                        u13470 08E0                                          u13480 0902  
                                        u13730 0CF8                                          u13900 1098  
                                        u13740 0D1A                                          u13398 5DB0  
                                        u13590 0B90                                          u13670 3478  
                                        u13399 5DC6                                          u13680 349A  
                                        u13850 101C                                          _INDEX 00DC  
                              __end_of___lwdiv 4FF4                                          _MASKS FD9F  
                              __end_of___lwmod 5718                                          i2l430 451E  
                                        i2l432 4544                                          i2l433 456E  
                                        i2l427 4594                                          i2l732 5040  
                                        i2l733 503A                                          i2l832 5D20  
                                        i2l781 6056                                ___awdiv@counter 0064  
                          ?_irobot_init_song_0 0001                                          _PORTA 000F80  
                                        _PORTB 000F81                                          _PORTC 000F82  
                                        _PORTD 000F83                                          _PORTE 000F84  
                                        _PORTF 000F85                                          _PORTG 000F86  
                      __size_of_HMI_DownSwitch 0018                                          _TRISA 000F92  
                                        _TRISB 000F93                                          _TRISC 000F94  
                                        _TRISD 000F95                                          _TRISE 000F96  
                                        _TRISF 000F97                                          _TRISG 000F98  
                             ??i2_Byte_GetPair 000D                               ??i2_Byte_GetZone 0006  
                           Port_TogglePin@pPin 0076                                __end_of_getMode 418E  
                               __CFG_FCMEN$OFF 000000                                          _PortA 03AD  
                                        _PortB 03A3                                          _PortC 00EA  
                                        _PortD 00E0                                          _PortE 0399  
                                        _PortF 03B7                                          _PortG 038F  
                      __end_of_Port_SetPinType 287E                                _ADC_Initialised 003C  
                               ??_Byte_GetPair 006C                          ??_irobot_led_power_on 0074  
                               ?i2_Port_SetPin 0010                                    LED_Set@pLED 0075  
                              __end_of_dpowers FD9F                                 ??_Byte_GetZone 0065  
                    irobot_move@moveTurnRadius 0072                                          _mode1 08C4  
                                        _mode2 344C                                          _mode3 1404  
                                        _mode4 0CDC                                 Button_Poll@Pin 0083  
                     __size_of_Set_Addr_Window 00AA                            __end_of_Console_Tab 3F58  
                             __end_of_MXK_Init 2EB4                       __size_of_sort_iRBumpDrop 008C  
                                 ?_eusart_init 0001                           i2Byte_GetPair@pInput 000A  
                                        _putch 6492                               __end_of_SPI_Init 08C4  
                             __end_of_SPI_Send 5382                          __end_ofi2_MXK_Release 6578  
                                        pclath 000FFA                                          tablat 000FF5  
                              __end_of_reverse 5316                             __size_of_MXK_Queue 000E  
                               ??_Byte_SetByte 0063                              __end_of_ADC_Start 4E04  
                               ??_Byte_SetPair 006F                                 ??_Byte_SetQuad 006F  
                                        plusw2 000FDB                                 ??_Byte_SetZone 0066  
                                        status 000FD8                                          wtemp6 0052  
                       __size_of_ADC_Calibrate 0014                                _Configure_GPIOs 523A  
                         i2MXK_Queue@pCallback 0001                                    i2delay_us@u 0003  
                         ??_irobot_init_song_0 0061                                 _LCD_Word_Write 6252  
                          __size_of_LED_Toggle 0048                            __size_of_HMI_GetBar 0006  
                                ?_HMI_UpSwitch 0001                                     _Event_NULL 6578  
                  __size_of_Port_CheckPairType 006A                                    mode1@moveto 03F3  
                          __size_of_HMI_SetBar 000A                                   ?_irobot_leds 0070  
                                 ?_irobot_init 0001                                __initialization 43AE  
                          __size_of_HMI_Render 003E                                   ?_irobot_move 0070  
                          __end_of_Byte_GetBit 5FA6                         irobot_leds@powerColour 0071  
                                 __end_of_main 56B6                                   __end_of_init 4656  
             irobot_query_and_update@packetIDs 0075                                   __end_of_itos 3A80  
                         HMI_SetButton@reindex 0062                                   SPI_Send9@dat 002D  
                          __end_of_Byte_SetBit 5654                               __end_of_InitList FD75  
                  __size_of_Port_CheckQuadType 005A                               __end_of_Mode_Set 6492  
                                    ??_ADC_Off 0060                        __end_of_update_distance 646E  
                  __size_of_Port_CheckPortType 0048                                    HMI_Render@a 0068  
                                       ??_main 03F9                                         ??_init 00AA  
                                       ??_itos 0070                        _Console_MakeField$10974 006E  
                                __activetblptr 000003                              Port_SetPin@pInput 006F  
                            __end_of_LCD_Reset 59D2                              Port_SetPin@pValue 0072  
                                    ??_LED_Set 0075                              _MXK_InitDIPSwitch 62AC  
                            GetPortPORT@pInput 0062                         Port_CheckPairType@Pin1 008A  
                       Port_CheckPairType@Pin2 008B                              __end_of_LCD_Write 61B2  
                                  _GetPortPORT 47A2                                   ?i2_MXK_Queue 0001  
                                  _GetPortTRIS 4656                                ??_LCD_DrawField 007C  
                   __end_of_PortProperty_Valid 4F02                               __end_of_Port_Set 1820  
                                  ?i2_delay_us 0001               __size_of_Console_IncrementCursor 0066  
                          __end_of_Button_Init 3D02                            __end_of_Button_Poll 318C  
                            Word_GetPair@pPair 006E                        LCD_FillRectangle@pPoint 006B  
                           ?_MXK_InitDIPSwitch 0001                                  _HMI_SetButton 4AC2  
                                    ??_SPI_DCS 0062                                         ?_mode1 0001  
                                       ?_mode2 0001                                         ?_mode3 0001  
                                       ?_mode4 0001                                         _ADRESH 000FC4  
                                       _ADRESL 000FC3                                         _ADC_On 6566  
                                _HMI_SetNumber 6118                         Port_SetQuadType@Output 009A  
                                       _ANCON0 000FC1                               ___awdiv@dividend 0060  
                                       ?_putch 0001                               ??_Console_Render 0083  
                                ToSegment@pCHR 0060                               _Console_FormFeed 4B52  
                       Port_SetQuadType@pInput 0096                                         i2l1630 381E  
                                       i2l1631 386A                                         i2l1632 3856  
                                       i2l1730 5F4E                                         i2l1627 38A6  
                                       i2l1732 5F6E                                         i2l1628 389C  
                                       i2l1629 3834                                         i2l1590 145E  
                               __CFG_WDTEN$OFF 000000                            __size_of_ISR_Enable 000A  
                                       i2l9025 5D20                                         i2l9027 5D30  
                                       _RCREG1 000FAF                                         _RCSTA1 000FAC  
                       __end_of_LCD_Word_Write 6270                                 _Timer0_Restart 64FE  
                                       _SPBRG1 000FB0                            ??_MXK_InitDIPSwitch 009B  
                                       _TXREG1 000FAE                               __end_of___xxtofl 24FC  
                               i2_MXK_SwitchTo 5F3C                                         _TXSTA1 000FAD  
                              Byte_GetBit@pBit 0062                                     _Reset_High 628E  
                           Console_Render@temp 0085                                 ??_HMI_UpSwitch 0066  
                               OutSeg@pSegment 0063                                ??i2_Timer0_Stop 0001  
                          Port_TogglePin@Value 0077                         ADC_SetChannel@pChannel 0061  
                             __end_of_delay_ms 5456                                   LED_Init@pLED 008D  
                             __end_of_delay_us 5932                                  ??_Timer0_Init 0071  
                                ??_Timer2_Init 0071                                  ??_Timer0_Stop 0060  
                                   _Timer0_ISR 6096                       __size_of_Console_NewLine 00A2  
                            Timer2_Init@DIVIDE 007A                                 __CFG_XINST$OFF 000000  
                                       _TimerX 00F9                                         _OutSeg 4E04  
                     __size_of_HMI_InitButtons 0006                                     _Motor_Init 3B58  
                   __end_of_load_iRScriptStack 53EC                                     _Motor_Move 5ECC  
                                       _iRWall 0035                                  ??_Motor_Speed 007F  
                                   _Motor_Step 3586                            rx_assign@byteNumber 0062  
                      __end_of_Event_DIPSwitch 6096                                         ___wmul 5F06  
                              ??_HMI_DIPSwitch 0066                  load_iRScriptStack@bytesToLoad 006E  
                                    ??___fldiv 0076                                      ??___awdiv 0064  
                               __CFG_STVREN$ON 000000                                         _change 00FF  
                                    ??___flmul 008F                                         _lMotor 00CE  
                                    ??___fltol 00B6                                      ??___lldiv 0068  
                                       _lQueue 00BA                                     _TestButton 0385  
                                    ??___lwdiv 0064                             __size_of_ToSegment 0284  
                                    ??___lwmod 006B                       __end_of_Port_SetQuadType 1CFA  
                     i2Byte_GetZone@pChunkSize 0005                                   HMI_GRender@a 002B  
                         __end_of_Console_Init 4CF6                              GetPortTRIS@pInput 0062  
                           __size_of_Reset_Low 001E                                         clear_0 4416  
                                       clear_1 4428                                         clear_2 4434  
                                       clear_3 4440                                         clear_4 444C  
                             ___awdiv@quotient 0066                     irobot_stop_motion@isScript 0079  
                                ?_eusart_getch 0001                                     Port_Init@i 00A5  
                                   _iRDistance 0329                              __end_of_MXK_Queue 64D8  
                   __end_ofHMI_SetButton@F7213 FDAC                                      ??_getMode 0066  
                                   _iRBumpLeft 00D6                                         _printf 24FC  
                                   _iRBumpDrop 0036                      __end_of_MXK_InitDIPSwitch 62CA  
                                _ADC_Calibrate 6448                                     _iRDropLeft 00D4  
                               HMI_SetButton@v 0067                                  ?_eusart_putch 0001  
                       HMI_SetSegments@pString 0061                                    _Console_Tab 3E96  
                          LCD_Word_Write@value 0065                                   __pdataCOMRAM 0047  
                           __size_of_Port_Init 0192                                  ??_Port_GetPin 0063  
                     Port_CheckPortType@Output 0099                                      ?_ADC_Init 0064  
                           _twos_complement_of 5C58                                ??i2_Port_SetPin 0014  
                                 __mediumconst FCC2                    __end_ofTimer2_Init@PRESCALE FDAF  
                     Port_CheckPortType@pDrive 0098                                         tblptrh 000FF7  
                                       tblptrl 000FF6                                         tblptru 000FF8  
                                 ?_MXK_Dequeue 0001                                 ?_HMI_SetButton 0001  
                     Port_CheckPortType@pInput 0096                                  ??_Port_SetPin 0073  
                                    ??_reverse 0064                                     _StepRotate 00C4  
                        Console_MakeField@Fill 0482                               ?_Port_SetPinType 0086  
                                       putch@c 0074                              Motor_Speed@pMotor 007B  
                               ?_HMI_SetNumber 0076                                 i2_Word_GetPair 6038  
                      __end_of_Configure_GPIOs 52AA                            irobot_leds@isScript 0073  
                             ??_MXK_TestButton 0066                         __end_of_Timer0_Restart 650A  
                                Set_Rotation@m 0065                                   ?_MXK_Release 0001  
                          ?_twos_complement_of 0060                  __size_of_irobot_move_straight 0018  
                              __CFG_FOSC$HSPLL 000000                         __end_ofi2_MXK_SwitchTo 5F72  
                                 ___xxtofl@arg 006A                                   i2delay_us@us 0001  
                                 ___xxtofl@exp 0069                                   ___xxtofl@val 0060  
                        _update_bump_and_cliff 5E92                                ?_LCD_Word_Write 0065  
                                   __accesstop 0060                        __end_of__initialization 4452  
                                    ?_LCD_Fill 0069          irobot_query_and_update@packetVariable 0079  
                                    ?_LCD_Init 0001                                  SPI_Init@pMode 0092  
                                  _Byte_GetBit 5F72                                     _Stepstomin 00C2  
                                    ?_LED_Init 0001                       __end_ofi2_Timer0_Restart 6516  
                                    ?_HMI_Init 0001                              ??_Set_Addr_Window 0068  
                                    ?_HMI_Poll 0001               __size_of_irobot_query_and_update 0186  
                                ___rparam_used 000001                              ??_sort_iRBumpDrop 0060  
                                   ___fltol@f1 00B2                                    _Byte_SetBit 55F0  
                                __end_of_MASKS FDA8                                 _PortA_Property FF9B  
                                  ?_Event_NULL 0001                                      LCD_Fill@i 006B  
                                    LCD_Fill@j 006C                            load_iRScriptStack@i 006F  
                                    LCD_Init@i 0097                                 __pcstackCOMRAM 0001  
                               _PortB_Property FF99                            __size_ofi2_delay_us 0040  
                                 __pidataBANK0 654C                                   __pidataBANK3 64E6  
            irobot_move_straight@straightSpeed 0079                            i2Byte_SetBit@pInput 0001  
                         __end_of_Byte_GetPair 6306                                Console_Render@x 008A  
                              Console_Render@y 008B                            i2Byte_SetBit@pValue 0004  
                                ?_Set_Rotation 0001                            Timer0_Init@PRESCALE FD75  
                         __end_of_Byte_GetZone 4A2A                                  __end_of_mode1 0CDC  
                                __end_of_mode2 3586                                  __end_of_mode3 1406  
                                __end_of_mode4 10A6                           ??_twos_complement_of 0062  
                            irobot_leds@LEDBit 0070                                 _PortC_Property FF97  
                          __end_of_Timer0_Init 32EC                                  __end_of_putch 64A0  
                               ??_eusart_getch 0060                                      ?_MXK_Init 0001  
                          __end_of_Timer2_Init 344C                            __end_of_Timer0_Stop 6560  
                               ?_ADC_Calibrate 0001                                      ?_SPI_Init 008D  
                             ?_update_distance 0001                                      ?_SPI_Send 0060  
                               ??_eusart_putch 0060                                    _Button_Init 3C2E  
                            Port_SetType@pType 009C                                    _Button_Poll 3026  
                         __end_of_Byte_SetByte 64CA                           __end_of_Byte_SetPair 61D4  
                               _HMI_LeftSwitch 6404                                 _PortD_Property FF95  
                         __end_of_Byte_SetQuad 61F6                                   ??_LED_Toggle 0078  
                                 ??_HMI_GetBar 0060                     eusart_putch@eusartSendChar 0060  
                         __end_of_Byte_SetZone 42FE                            __end_of_Motor_Speed 6118  
                               _HMI_DownSwitch 63BC                                  SPI_Send@pData 0062  
                        __end_of_MXK_DIPSwitch 63A4                                   ??_HMI_SetBar 0060  
                     __size_of_get_packet_size 0066                                   ??_HMI_Render 0068  
                               _PortE_Property FF93                                     ??_ADC_Init 0067  
                     __size_of_HMI_SetSegments 00BA                         __end_ofi2_Word_GetPair 6068  
                               _PortF_Property FF91                        Port_CheckQuadType@Pair1 0093  
                      Port_CheckQuadType@Pair2 0094                       MXK_BlockSwitchTo@pModule 0067  
                                      ??_mode1 03F1                                        ??_mode2 008C  
                                      ??_mode3 0060                                        ??_mode4 03F1  
                                      ?_ADC_On 0001                              _Console_Backspace 577A  
                              ?_Timer0_Restart 0001                                        ??_putch 0074  
                     __size_of_HMI_RightSwitch 0018                            _Console_ClearCursor 5CDE  
                            __end_of_ToSegment 1AA4                                 _PortG_Property FF8F  
                                   __pbssBANK0 00BA                                     __pbssBANK3 0300  
                                   __pbssBANK4 0400                            __end_of_Port_GetPin 5C58  
                           _irobot_stop_motion 5B86                        Port_CheckQuadType@pQuad 0091  
                              reverse@iterator 0065                               ??_SPI_DisableISR 0062  
                              ?i2_MXK_SwitchTo 0001                              ?_irobot_song_play 0001  
                           ?_Console_Backspace 0001                              __end_of_Reset_Low 628E  
                    __size_of_Event_TestButton 003C                        __size_of_Port_TogglePin 0030  
                                   ??_LCD_Fill 006B                              ?_irobot_rotate_to 0102  
                                   ??_LCD_Init 0095                           __size_of_eusart_init 001E  
                          __end_of_Port_SetPin 3E96                         __end_of_PortA_Property FF9D  
             irobot_led_power_on@powerOnColour 0074                                      ?_Mode_Set 0001  
                           Byte_SetByte@pInput 0060                                     ??_LED_Init 008D  
                     ADC_ClockDivision@pDivide 0060                             Byte_SetByte@pValue 0062  
                                ?_ISR_Function 0001                                    ?_Reset_High 0001  
                           _ADC_ConversionTime 5AF8                                  ?_Timer0_Clear 0001  
                                   ??_HMI_Init 00A8                             ??_irobot_song_play 0061  
                                   ??_HMI_Poll 0084                                  ?_Timer2_Clear 0001  
                           ??_irobot_rotate_to 00BA                        Port_CheckPairType@Props 008D  
                       __end_of_PortB_Property FF9B                                  ?_Timer0_Start 0060  
                          ?_irobot_stop_motion 0001                              __end_of_Port_Init 2BAE  
                                  ?_Timer0_ISR 0001                        Port_CheckPairType@pPair 0088  
                           __end_of_LED_Toggle 5AF8                             __end_of_HMI_GetBar 655A  
                  irobot_rotate_to@rotateSpeed 0104                       LCD_FillRectangle@pColour 0069  
                                   _angleTotal 00C6                            ??_Console_Backspace 0062  
                            Set_Addr_Window@xe 0066                              Set_Addr_Window@ye 0067  
                            Set_Addr_Window@xs 0068                              Set_Addr_Window@ys 0065  
                                      ?_OutSeg 0063                                    ?_Motor_Init 008D  
                           Byte_SetPair@pInput 006B                                    ?_Motor_Move 0063  
                                  ?_Motor_Step 0001                             Byte_SetPair@pValue 006E  
                           __end_of_HMI_SetBar 652A                         __end_of_PortC_Property FF99  
                           Word_GetPair@pInput 006C                             __end_of_HMI_Render 5D9C  
                               ??_Set_Rotation 0065                                      ?_Port_Set 006F  
                          ?_ADC_ConversionTime 0001                                        ?___wmul 0060  
                             ?_Event_DIPSwitch 0001                              Port_GetPin@Output 0065  
                                 ??_ISR_Enable 0060                   __size_of_Console_ResetCursor 001E  
                         __size_of_irobot_leds 0058                           __size_of_irobot_init 000E  
                         ?_Console_ClearCursor 0001                           __size_of_irobot_move 00B0  
                       __end_of_HMI_LeftSwitch 641C                         __end_of_PortD_Property FF97  
                                      _ADC_AN0 00F4                                        _ADC_AN1 03D8  
                                      _ADC_AN2 03D3                                        _ADC_AN3 03CE  
                                   ??_MXK_Init 00A6                              Port_GetPin@pInput 0060  
                            _Console_MakeField 3D02                                        _ADC_Off 6544  
                            ??_Console_NewLine 0060                       ADC_ClockDivision@unfound 0062  
                       __end_of_HMI_DownSwitch 63D4                                     ??_SPI_Init 0093  
                       Event_TestButton@pState 0079                                     ??_SPI_Send 0063  
                                      ?_printf 0075                              ??_HMI_InitButtons 0060  
                   __size_of_MXK_InitDIPSwitch 001E                         __end_of_PortE_Property FF95  
                          Console_Render@F6956 03E5                             ?_Console_MakeField 0065  
                                      _COUNTER 0029                                ??_HMI_SetButton 0060  
                         __end_of_HMI_UpSwitch 63EC                           ??_irobot_stop_motion 0079  
                                      _LED_Set 5932                        _Console_IncrementCursor 5526  
                                    ?___xxtofl 0060                         __end_of_PortF_Property FF93  
                                  _gBackcolour 00D2                                ??_HMI_SetNumber 0078  
                                    _I2C1_Done 0320                                ?i2_Word_GetPair 000D  
                                    _I2C2_Done 031D                                      _I2C1_More 031A  
                                    _I2C2_More 0317                                      ?_delay_ms 0060  
                    __end_of_Console_Backspace 57D6                                      ?_delay_us 0060  
                          __size_of_Event_NULL 0002                     __end_of_MXK_InitTestButton 62E8  
                                      _SSP1ADD 000FC8                                        _SSP1BUF 000FC9  
                                      _SSP2BUF 000F6F                             __size_of_rx_assign 00F0  
                         ??_ADC_ConversionTime 0060                         __end_of_PortG_Property FF91  
                          ??_Console_MakeField 0067                        __size_of_ADC_SetChannel 001C  
                                      _IRValue 00C0                                        _SPI_DCS 6008  
                         __size_ofi2_MXK_Queue 000E                                  ??_ADC_SetupIO 0060  
                             ?_Configure_GPIOs 0001                                __size_of_ADC_On 0006  
                       ?_update_bump_and_cliff 0001                         __size_of_irobot_rotate 0064  
                             ADC_Init@pChannel 0066                           i2Byte_GetZone@Offset 0008  
                                ??_ADC_Voltage 00A4                             __end_of_ISR_Enable 6534  
                               ??_ISR_Function 0017                           i2Byte_GetZone@Output 0009  
                               ??_Timer0_Clear 0060                              Event_TestButton@j 00D8  
                                   ??_Mode_Set 0060                                 ??_Timer2_Clear 0060  
                                      _Font5x7 FDAF                           i2Byte_GetZone@pChunk 0004  
                     ADC_ConversionTime@pCount 0061                                        _MinDist 00FB  
                         i2Byte_GetZone@pInput 0001                                 ??_Timer0_Start 0063  
                         SPI_DisableISR@pInput 0060                                  ?_Port_GetQuad 0060  
                              Byte_SetBit@pBit 0062                           Port_TogglePin@pInput 0074  
                        __end_ofi2_Byte_SetBit 5A1E                                      _ADC_Start 4D80  
                                      __Hparam 0000                              Port_GetQuad@pQuad 0062  
                                  _Timer0_Init 318C                                    _Timer2_Init 32EC  
                                      __Lparam 0000                                    _Timer0_Stop 655A  
                        __size_of_Console_Init 008A                                        OutSeg@a 003D  
              __end_ofPortProperty_Valid@F6830 FD95                                        _iRAngle 0327  
                                LCD_Write@mode 0063                                __size_of_OutSeg 0082  
                                   ??_Port_Set 0072                      __end_of_Console_MakeField 3DD2  
                            _Console_PrintChar 287E                                    _Motor_Speed 60EE  
                                      _Stepper 03C8                                  ?_Port_SetType 009A  
                                      _gCursor 0047                                        ___fldiv 10A6  
                                      ___awdiv 3F58                          ??_Console_ClearCursor 0060  
                                      ___flmul 0000                                        ___fltol 36AC  
                                      _lBuffer 04C8                                        ___lldiv 4016  
                              __size_of___wmul 0036                                ??_ADC_Calibrate 0060  
                                      ___lwdiv 4F7C                                        ___lwmod 56B6  
                              ?_HMI_LeftSwitch 0001                       __end_of_Console_FormFeed 4BE0  
                           ?_Console_PrintChar 0001                                        __pcinit 43AE  
                              ?_HMI_DownSwitch 0001                                        __ramtop 1000  
                                      _getMode 40D2                                        __ptext0 5654  
                                      __ptext1 0CDC                                        __ptext2 60C4  
                                      __ptext3 558C                                        __ptext4 5B40  
                                      __ptext5 1404                                        __ptext6 344C  
                                      __ptext7 6374                                        __ptext8 08C4  
                                      __ptext9 645C                                __size_of_printf 01C2  
                                    _T0CONbits 000FD5                    __end_of_irobot_led_power_on 6322  
                            i2MXK_SwitchTo@CUR 0007                                        _dpowers FD95  
                                    _T2CONbits 000FCA                                  LED_Set@pValue 0074  
                          __size_of_Reset_High 001E                          Event_DIPSwitch@pState 0079  
                                   ??___xxtofl 0064                                   ?_GetPortPORT 0060  
                                 ?_GetPortTRIS 0060                            ??_Console_PrintChar 0070  
                                  _Port_GetPin 5C12                              __CFG_MSSPMSK$MSK5 000000  
                          LCD_DrawRectangle@p2 03E1                            LCD_DrawRectangle@p4 03DD  
                                 ??i2_delay_us 0003                                     ??_delay_ms 0062  
                                   ??_delay_us 0062                                        _reverse 52AA  
                                    _DIPSwitch 037B                            __size_of_Timer0_ISR 002E  
                                  _Port_SetPin 3DD2                                    _iRBumpRight 00D7  
                               LCD_DrawField@i 0082                                      _LCD_Reset 5982  
                          __size_of_Motor_Init 00D6                            __size_of_Motor_Move 003A  
                          __size_of_Motor_Step 0126                                      _LCD_Write 6190  
                                  _iRDropRight 00D5                           __size_of_MXK_Dequeue 003E  
                                   delay_ms@ms 0060                           end_of_initialization 4452  
                          ADC_SetupIO@pChannel 0062                              ??_get_packet_size 0060  
irobot_query_and_update@numberOfPacketRequests 0078                                     delay_us@us 0060  
                            ??_HMI_SetSegments 0063                        Console_PrintChar@pInput 0073  
                                 _Console_Init 4C6C                           __end_of_eusart_getch 653C  
                      _irobot_query_and_update 2BAE                           __size_of_MXK_Release 001C  
                   __end_of_Port_CheckPairType 54C0                           __end_of_eusart_putch 64BC  
                                      itos@Out 0074                                 ??_Port_GetQuad 0063  
                            _irobot_angle_wait 5B40                             _PortProperty_Valid 4E86  
                                    i2u1341_48 60AE                             Byte_SetQuad@pInput 006B  
                           SPI_MinSpeed@pInput 006F                             Byte_SetQuad@pValue 006E  
                          __end_of_ADC_SetupIO 5FD8                          __size_of_Byte_GetPair 001E  
                  __size_of_irobot_init_song_0 0020                                ___lldiv@divisor 0064  
                        __size_of_Byte_GetZone 009C                                     ?_ADC_Start 0062  
                            ??_HMI_RightSwitch 0066                                ___lldiv@counter 006C  
                    __end_of_Console_PrintChar 2A1C                             ?_irobot_angle_wait 0070  
                          __end_of_ADC_Voltage 3B58                                 ??_Port_SetType 009D  
                   __end_of_Port_CheckQuadType 5830                                        printf@c 0084  
                                      printf@f 0075                                 Port_Init@pPort 00A2  
                                      postdec1 000FE5                                        postdec2 000FDD  
                        __size_of_Byte_SetByte 000E                          __size_of_Byte_SetPair 0022  
                       Console_MakeField@Index 0069                              __end_of_rx_assign 39A8  
                                      postinc0 000FEE                                        postinc2 000FDE  
                          ?_PortProperty_Valid 006F                          __size_of_Byte_SetQuad 0022  
                   __end_of_Port_CheckPortType 5AB0                          __size_of_Byte_SetZone 00B6  
                           __end_ofi2_delay_us 5D5E                             Button_Init@pInitIO 009F  
                                _irobot_rotate 558C                          Timer0_Init@pFrequency 006D  
                            ?_Port_SetQuadType 0096                            ??_irobot_angle_wait 0072  
                                  _gForecolour 00FD                      ??_Console_IncrementCursor 0064  
                       __size_ofi2_MXK_Release 0006                                      _PORTFbits 000F85  
                           ??_Port_SetQuadType 009A                                   ?_Console_Tab 0001  
                             Byte_GetZone@MASK 0066                          Console_Render@lCursor 0086  
                           _load_iRScriptStack 5382                  irobot_rotate_to@rotateToAngle 0102  
                                    _MXK_Queue 64CA                               __CFG_CPUDIV$OSC1 000000  
                                ___xxtofl@sign 0068                               Byte_GetZone@pMax 0062  
                   __size_of_Console_Backspace 005C                                      _TRISCbits 000F94  
                   load_iRScriptStack@loadByte 006C                                _Set_Addr_Window 445C  
                               SPI_Init@pClock 008D                               ??_LCD_Word_Write 0067  
                              _sort_iRBumpDrop 4BE0                                    ___fldiv@grs 0081  
                                  ___fldiv@rem 007B                          __end_of_LCD_DrawField 48EC  
                               Port_Set@pInput 006F                                 SPI_Init@pInput 0093  
                         ??_PortProperty_Valid 0073                              __size_of_ADC_Init 007A  
                               Port_Set@pValue 0071                                     ?_LCD_Reset 0001  
                         __end_of_Set_Rotation 4AC2                                     ?_LCD_Write 0063  
                                 _Byte_GetPair 62E8                             HMI_SetButton@F7213 FDA8  
                          ?_load_iRScriptStack 0060                                   _Byte_GetZone 498E  
                                ?_MXK_SwitchTo 0001                              LCD_DrawField@xmax 0080  
                            LCD_DrawField@ymax 0081                                 __end_of_ADC_On 656C  
                               _Port_TogglePin 5FD8                      __end_of_irobot_angle_wait 5B86  
                             _Event_TestButton 5E56                                    ___flmul@grs 0095  
                         Port_SetPinType@Props 008B                                   ?_Byte_GetBit 0060  
                      __size_ofi2_Byte_GetPair 001A                                   _Byte_SetByte 64BC  
                                 _Byte_SetPair 61B2                                ADC_SetupIO@MASK 0063  
                                 _Byte_SetQuad 61D4                        __size_ofi2_Byte_GetZone 0076  
                                 _Byte_SetZone 4248                           Port_SetPinType@pType 0089  
                            ?i2_Timer0_Restart 0001                                   ?_Byte_SetBit 0060  
                                ?_SPI_MaxSpeed 006F                              __size_of_LCD_Fill 0058  
                                 ??_Event_NULL 0060                              __size_of_LCD_Init 0172  
                            __size_of_LED_Init 0062                                  ?_SPI_MinSpeed 006F  
                        __end_ofi2_Timer0_Stop 6572                             ??i2_Timer0_Restart 0001  
                            __size_of_HMI_Init 01FA                              __size_of_HMI_Poll 0074  
                                ?_update_angle 0001                                  ?i2_Motor_Step 0001  
                   __size_of_Console_MakeField 00D0                                 ?_irobot_rotate 0079  
                               __end_of_OutSeg 4E86                           ??_load_iRScriptStack 006A  
                 __end_of_irobot_move_straight 638C                          __size_of_HMI_UpSwitch 0018  
                               __end_of___wmul 5F3C                          __end_of_HMI_DIPSwitch 63BC  
                                __pidataCOMRAM 6516                                   ?_Button_Init 009B  
                                 ?_Button_Poll 007B                                      _Bus_State 004B  
                          i2Byte_GetPair@pPair 000C                           __end_of_ISR_Function 14AA  
                         __end_of_Timer0_Clear 64FE                              __size_of_MXK_Init 0180  
                         __end_of_Timer2_Clear 6544                                 __end_of_printf 26BE  
                            __size_of_SPI_Init 041E                        get_packet_size@packetID 0060  
                            __size_of_SPI_Send 006C                                  ?_Word_GetPair 006C  
                             ??_Timer0_Restart 0060                           __end_of_Timer0_Start 6190  
                           Port_SetType@Output 009F                            start_initialization 43AE  
                                   ?_MXK_Queue 0060                       PortProperty_Valid@Errors 0075  
                             ??i2_MXK_SwitchTo 0007                              _LCD_FillRectangle 50DE  
                           Port_SetType@pInput 009A                                 _ADC_SetChannel 633E  
                                   HMI_Init@in 00A8                            HMI_SetNumber@pInput 0076  
                        __end_ofi2_Port_SetPin 45B0                             __end_of_Event_NULL 657A  
                       rx_assign@packetIDValue 0061                         __end_of_Port_TogglePin 6008  
                                ?_Word_SetPair 006F                              Byte_SetBit@pInput 0060  
                                     ??_ADC_On 0060                                 ??_MXK_SwitchTo 0066  
                            Byte_SetBit@pValue 0063                             ?_LCD_FillRectangle 0069  
                    ??_irobot_query_and_update 0070                            _Console_ResetCursor 6216  
                  PortProperty_Valid@pPinDrive 0071                                    _ADC_SetupIO 5FA6  
                         MXK_BlockSwitchTo@CUR 0066                       PortProperty_Valid@pInput 006F  
                                i2_MXK_Release 6572                                    _ADC_Voltage 3A80  
                       LCD_FillRectangle@pSize 006F                                 SPI_Send@pInput 0060  
                                 ??_Reset_High 0074                       __size_of_Port_SetPinType 01C0  
                               ??_SPI_MaxSpeed 0071                          Port_SetQuadType@pQuad 0098  
                                    _ToSegment 1820                            ??_LCD_FillRectangle 0073  
                        Port_SetQuadType@pType 0099                                _Console_NewLine 48EC  
                               ??_SPI_MinSpeed 0071                                    ??_ADC_Start 0064  
                                 _HMI_UpSwitch 63D4                                      _Reset_Low 6270  
                                 ??_Timer0_ISR 0017                                _HMI_InitButtons 6560  
                            __size_of_Mode_Set 0012                     __size_of_Console_PrintChar 019E  
                               ??_update_angle 007D                                 ADC_Init@pInput 0064  
                                    _gCharSize 03ED                               Timer2_Init@INDEX 00DA  
                                    OutSeg@cur 003F                                 ??i2_Motor_Step 0015  
                                 ??_Motor_Init 0091                                       ??_OutSeg 0064  
                                    OutSeg@out 0067                        __size_of_Console_Render 0210  
                                 ??_Motor_Move 0067                                   ??_Motor_Step 0074  
                                    _iRAngleSS 0304                                      _iRCliffFL 0033  
                                    _iRCliffFR 0032                             Byte_SetZone@Offset 0069  
                                     ??___wmul 0064                           ?_Console_ResetCursor 0001  
                                    _Port_Init 2A1C                                    __pdataBANK0 00F9  
                                  __pdataBANK3 03E5                      __size_of_irobot_song_play 0014  
                  __size_of_twos_complement_of 0044                              __size_of_Port_Set 03BA  
                           Byte_SetZone@pChunk 0063                                       ?_ADC_Off 0001  
                    __size_of_irobot_rotate_to 002A                               ??i2_Word_GetPair 0010  
                           Byte_SetZone@pInput 0060                             Byte_SetZone@pValue 0065  
                                Mode_Set@pMode 0060                                       ??_printf 007D  
                      __end_of_Set_Addr_Window 4506                       Port_CheckQuadType@Output 0095  
                      __end_of_sort_iRBumpDrop 4C6C                                      _gLineSize 03E9  
                     Port_CheckQuadType@pDrive 0092                                 ??_Word_GetPair 006F  
                     Port_CheckQuadType@pInput 008F                           __end_of_Port_GetQuad 5A68  
                                    ___fldiv@a 0072                                      ___fldiv@b 006E  
                    __end_of_LCD_FillRectangle 5152                                    __pbssBIGRAM 04C8  
                       __end_of_ADC_SetChannel 635A                                       ?_LED_Set 0074  
                                    ___flmul@a 008B                                      ___flmul@b 0087  
                                  __pbssCOMRAM 0029                                ADC_Start@pInput 0062  
                           __end_of_Reset_High 62AC                                  __pcstackBANK0 0060  
                                __pcstackBANK1 0100                                  __pcstackBANK2 0200  
                                __pcstackBANK3 03F1                        ??_update_bump_and_cliff 007D  
                                   itos@Length 0072                          __size_of_eusart_getch 0008  
                               ??_Word_SetPair 0073                       __size_of_update_distance 0012  
                            __size_of___xxtofl 01CE                             __end_of_Timer0_ISR 60C4  
                         __size_of_GetPortPORT 00A6                                    ??_LCD_Reset 0079  
                         __size_of_GetPortTRIS 00A6                           __end_of_Port_SetType 1F24  
                                     ?_SPI_DCS 0060                          __size_of_eusart_putch 000E  
                              ?_Port_TogglePin 0074                                  ??_eusart_init 0060  
                   irobot_angle_wait@angleWait 0070                                    ??_LCD_Write 0064  
                            __size_of_delay_ms 006A                              __size_of_delay_us 0052  
                           __end_of_Motor_Init 3C2E                            __CFG_CCP2MX$DEFAULT 000000  
                           __end_of_Motor_Move 5F06                             __end_of_Motor_Step 36AC  
                        Timer2_Init@pFrequency 006D                                 ?i2_MXK_Release 0001  
                   __size_of_irobot_angle_wait 0046                       Port_CheckPairType@Output 008C  
            twos_complement_of@complementValue 0060                                     ?_ToSegment 0001  
                     Port_CheckPairType@pDrive 0089                       Port_CheckPairType@pInput 0086  
                               reverse@tempVar 0064                             _MXK_InitTestButton 62CA  
                                   ?_Reset_Low 0001                                   ?_Timer0_Init 006D  
                       __size_of_MXK_DIPSwitch 0018                                   ?_Timer2_Init 006D  
                             ??_HMI_LeftSwitch 0066                                   ?_Timer0_Stop 0001  
                             ___lwdiv@dividend 0060                                  ??_irobot_leds 0073  
                                ??_irobot_init 0061                                ??_irobot_rotate 007D  
                                ??_irobot_move 0074                                  _lStepFunction 00BD  
                      __size_of_MXK_TestButton 0018                              Byte_SetPair@pPair 006D  
                             ??_HMI_DownSwitch 0066                                      __pintcode 1408  
                                __pmediumconst FCC2                                   ?_Motor_Speed 007B  
                        ??_Console_ResetCursor 0060                                       ?___fldiv 006E  
                                     ?___awdiv 0060                                      __ptext100 5316  
                                    __ptext101 6480                                      __ptext110 3DD2  
                                    __ptext102 523A                                      __ptext111 652A  
                                    __ptext103 5152                                      __ptext120 3C2E  
                                    __ptext112 2134                                      __ptext104 5982  
                                    __ptext121 62AC                                      __ptext113 51C6  
                                    __ptext105 53EC                                      __ptext130 5456  
                                    __ptext122 6560                                      __ptext114 04A6  
                                    __ptext106 6270                                      __ptext131 4E86  
                                    __ptext123 62CA                                      __ptext115 32EC  
                                    __ptext107 628E                                      __ptext140 5FA6  
                                    __ptext132 5E18                                      __ptext124 26BE  
                                    __ptext116 4016                                      __ptext108 5AB0  
                                    __ptext141 633E                                      __ptext133 62E8  
                                    __ptext125 55F0                                      __ptext117 653C  
                                    __ptext109 5FD8                                      __ptext150 63BC  
                                    __ptext142 5AF8                                      __ptext134 498E  
                                    __ptext126 1AA4                                      __ptext118 6142  
                                    __ptext151 63D4                                      __ptext143 4CF6  
                                    __ptext135 61D4                                      __ptext127 5BCC  
                                    __ptext119 6008                                      __ptext160 656C  
                                    __ptext152 63EC                                      __ptext144 6448  
                                    __ptext136 4248                                      __ptext128 61B2  
                                    __ptext161 650A                                      __ptext153 6404  
                                    __ptext145 6566                                      __ptext137 4C6C  
                                    __ptext129 57D6                                      __ptext170 64D8  
                                    __ptext162 4506                                      __ptext154 641C  
                                    __ptext146 6544                                      __ptext138 4D80  
                                    __ptext171 0000                                      __ptext163 6038  
                                    __ptext155 5C12                                      __ptext147 40D2  
                                    __ptext139 4F02                __end_of_irobot_query_and_update 2D34  
                                    __ptext164 635A                                      __ptext156 5A1E  
                                    __ptext148 638C                                      __ptext165 4FF4  
                                    __ptext149 63A4                                      __ptext166 59D2  
                                    __ptext158 6096                                      _pShiftVal 00CA  
                                    __ptext167 5F3C                                      __ptext159 37B8  
                                    __ptext168 5D1E                                      __ptext169 6572  
                                     ?___flmul 0087                                       ?___fltol 00B2  
                                     ?___lldiv 0060                                     ?_Port_Init 00A0  
                         Timer0_Init@pCPUClock 0073                                       ?___lwdiv 0060  
                                     ?___lwmod 0067                            ?_MXK_InitTestButton 0001  
                            ?_Console_FormFeed 0001                              _GetPortProperties 46FC  
                                     ?_getMode 0001                                   _eusart_getch 6534  
                  __end_ofTimer0_Init@PRESCALE FD85                                _get_packet_size 54C0  
                                 _eusart_putch 64AE                             ??_Console_FormFeed 0060  
                              _HMI_SetSegments 418E                             ?_GetPortProperties 0060  
                             Event_NULL@pState 0001                       __size_of_Event_DIPSwitch 002E  
                        __size_of_Set_Rotation 0098                                ?_ADC_SetChannel 0001  
                                ??i2_MXK_Queue 0004                                    ??_MXK_Queue 0063  
                  __size_of_irobot_stop_motion 0046                                   ?_Port_GetPin 0060  
                                     _ADC_Init 4F02                          __end_of_HMI_SetButton 4B52  
                         __size_of_Console_Tab 00C2                                       ?_reverse 0060  
                         irobot_move@moveSpeed 0070                                   ?_Port_SetPin 006F  
                        __end_of_HMI_SetNumber 6142                               ___lwdiv@quotient 0065  
                              _HMI_RightSwitch 63EC                    __size_of_ADC_ConversionTime 0048  
                               __size_of_mode1 0418                                 __size_of_mode2 013A  
                               __size_of_mode3 0002                                 __size_of_mode4 03CA  
                          ??_GetPortProperties 0062                        __end_of_Console_NewLine 498E  
                         ??_MXK_InitTestButton 008D                             Byte_GetPair@pInput 0069  
                               __size_of_putch 000E                        __end_of_HMI_InitButtons 6566  
                            i2Port_SetPin@Type 0014                           _irobot_move_straight 6374  
                            i2Port_SetPin@pPin 0012                                 i2_Byte_GetPair 635A  
                                     _LCD_Fill 5888                                       _LCD_Init 2EB4  
                               ___wmul@product 0064                                       _HMIBoard 032B  
                               i2_Byte_GetZone 4FF4                                       _LED_Init 5718  
                                    delay_ms@u 0062                             Button_Poll@pButton 007B  
                                    delay_us@u 0062                                       _HMI_Init 2134  
                                     _HMI_Poll 506A                             MXK_Queue@pCallback 0060  
                                     _IPR1bits 000F9F                                       _IPR3bits 000FA5  
                                     _PIE1bits 000F9D                            __end_of_eusart_init 6252  
                                     _PIE3bits 000FA3                    __end_of_Console_ClearCursor 5D1E  
                     __size_of_Configure_GPIOs 0070                           __size_of_Byte_GetBit 0034  
                            Byte_SetQuad@pQuad 006D                                       _PIR1bits 000F9E  
                                     _PIR3bits 000FA4                                       i2u710_40 3810  
                                     i2u542_44 59E6                                       i2u542_45 59E2  
                                     i2u711_40 3848                                       i2u543_44 5A0C  
                                     i2u543_45 5A08                                       i2u546_40 5D4C  
                                     i2u484_40 5016                                       i2u484_47 500C  
                                     i2u709_40 37FC                                       i2u486_40 505E  
                                     i2u486_45 505A                           __size_of_Byte_SetBit 0064  
                                     _RCONbits 000FD0                           i2Word_GetPair@pInput 000D  
                                  _mode1$15573 03F5                               __CFG_WDTPS$32768 000000  
                   irobot_song_play@songNumber 0061                               HMI_SetBar@pValue 0060  
                            Button_Init@pInput 009B                        __size_of_SPI_DisableISR 0028  
                                  _mode4$15574 03F2                                       _SSP1CON1 000FC6  
                            ??_Port_SetPinType 008A                                       _SSP1CON2 000FC5  
                                     _SSP2CON1 000F6C                                       _SSP2CON2 000F6B  
                        __size_of_ISR_Function 00A2                          __size_of_Timer0_Clear 000C  
                                     _SSP1STAT 000FC7                      __end_of_GetPortProperties 47A2  
                                     _SSP2STAT 000F6D                                   _Set_Rotation 4A2A  
                        __size_of_Timer2_Clear 0008                           __end_of_MXK_SwitchTo 5CDE  
                           _Port_CheckPairType 5456                                       _MXK_Init 2D34  
                        __size_of_Timer0_Start 0026                                MXK_SwitchTo@CUR 0066  
                        __end_of_ADC_Calibrate 645C                            __end_of_irobot_leds 5888  
                                     _SPI_Init 04A6                            __end_of_irobot_init 64AE  
                     __end_of_Event_TestButton 5E92                                       _SPI_Send 5316  
                          __end_of_irobot_move 43AE                                      _rx_assign 38B8  
                                   _ADCON0bits 000FC2                               __size_of_ADC_Off 0008  
                                   _ADCON1bits 000FC1                               ?_Set_Addr_Window 0065  
                            ___wmul@multiplier 0060                               ?_sort_iRBumpDrop 0001  
                            Byte_GetBit@Output 0064                                     printf@flag 007F  
                         Timer2_Init@pCPUClock 0076                     __size_of_LCD_FillRectangle 0074  
                         __size_of_Button_Init 00D4                           __end_of_SPI_MaxSpeed 51C6  
                                   printf@prec 007E                          Motor_Speed@pFrequency 007D  
                            Byte_GetBit@pInput 0060                            Port_SetPinType@pPin 0088  
                         __size_of_Button_Poll 0166                             _Port_CheckQuadType 57D6  
                                _MXK_DIPSwitch 638C                            ?_Port_CheckPairType 0086  
                         __end_of_SPI_MinSpeed 523A                                  ??_MXK_Dequeue 0076  
                             __size_of_LED_Set 0050                         __size_ofi2_Byte_SetBit 004C  
                           _Port_CheckPortType 5A68                           __end_of_update_angle 6480  
                        Button_Poll@pIncrement 007D                        PortProperty_Valid@F6830 FD85  
                         __end_ofi2_Motor_Step 38B8                                ??i2_MXK_Release 0001  
                 __size_of_irobot_led_power_on 001C                                      copy_data0 43C2  
                                    copy_data1 43E2                                      copy_data2 4402  
                                ??_MXK_Release 0060                         __end_ofi2_Byte_GetPair 6374  
                    __size_of_Port_SetQuadType 0256                               __size_of_SPI_DCS 0030  
                          ?_Port_CheckQuadType 008F                          ?_irobot_move_straight 0079  
                       __end_ofi2_Byte_GetZone 506A                            __end_ofi2_MXK_Queue 64E6  
                                    mode2@dist 008C                            ?_Port_CheckPortType 0096  
                              itos@destination 006E                                       _InitList FCC3  
                   __end_of_irobot_init_song_0 6216                           _Motor_Step$intlevel0 358C  
                                     _Mode_Set 6480                             Port_GetQuad@Output 0065  
                            ??_update_distance 007D                                    ??_ToSegment 0060  
                                 _ISR_Function 1408                                   _Timer0_Clear 64F2  
                           Port_GetQuad@pInput 0060                                   _Timer2_Clear 653C  
                         __end_of_Word_GetPair 5E56                                       _lCBuffer 0400  
                         ??_Port_CheckPairType 008A                                    ??_Reset_Low 0074  
                                     __Hrparam 0000                                   _Timer0_Start 616A  
                                 OutSeg@pInput 0066                                 _Console_Render 1F24  
                                     __Lrparam 0000                                Timer2_Init@RDIV 0072  
                                     _iRCliffL 0034                                       _iRCliffR 0031  
                            _stepsToMinDegrees 0300                                 LCD_Write@value 0064  
                                     _Port_Set 1466                                   OutSeg@segset 003E  
                                    rand@screw 003B                           __end_of_Word_SetPair 5C12  
                      __end_of_get_packet_size 5526                                    ??_Port_Init 00A3  
                      __end_of_HMI_SetSegments 4248                           ??_Port_CheckQuadType 0093  
                             __size_of___fldiv 03C0                               _irobot_song_play 6434  
                        __size_of_Port_GetQuad 004A                               __size_of___awdiv 00BE  
                             __size_of___flmul 04A6                               __size_of___fltol 010C  
                             __size_of___lldiv 00BC                              _MXK_BlockSwitchTo 5DDA  
                             _irobot_rotate_to 60C4                               __size_of___lwdiv 0078  
                         ??_Port_CheckPortType 0099                               __size_of___lwmod 0062  
                                     _lBufferX 00DE                                       _lBufferY 00DD  
                          Timer2_Init@PRESCALE FDAC                                     ?_rx_assign 0061  
                              LCD_Fill@pColour 0069                             ?_MXK_BlockSwitchTo 0001  
                    __size_ofi2_Timer0_Restart 000C                                       _lCurrent 00D0  
                             __size_of_getMode 00BC                        __end_of_HMI_RightSwitch 6404  
                       Byte_GetZone@pChunkSize 0064                                 ?_MXK_DIPSwitch 0001  
                       Byte_SetZone@pChunkSize 0064                          __size_of_Port_SetType 022A  
                                reverse@length 0062                                      itos@input 006C  
                        i2MXK_SwitchTo@pModule 0008                                       ___xxtofl 232E  
                          irobot_move@isScript 0078                             Motor_Init@pAddress 008F  
                                     _delay_ms 53EC                                       _delay_us 58E0  
                                     _clearall 00DF                                ___lwdiv@divisor 0062  
                              ___lwdiv@counter 0064                                Port_GetPin@pPin 0062  
                                     __ptext10 5E92                                       __ptext11 646E  
                                     __ptext20 3E96                                       __ptext12 2BAE  
                                     __ptext21 3F58                                       __ptext13 38B8  
                                     __ptext30 5C58                                       __ptext22 5526  
                                     __ptext14 4BE0                                       __ptext31 6434  
                                     __ptext23 48EC                                       __ptext15 54C0  
                                     __ptext40 6068                                       __ptext32 36AC  
                                     __ptext24 4B52                                       __ptext16 6534  
                                     __ptext41 6578                                       __ptext33 60EE  
                                     __ptext25 6216                                       __ptext17 24FC  
                                     __ptext50 4AC2                                       __ptext42 5E56  
                                     __ptext34 5ECC                                       __ptext26 577A  
                                     __ptext18 6492                                       __ptext51 6520  
                                     __ptext43 6118                                       __ptext35 616A  
                                     __ptext27 5CDE                                       __ptext19 287E  
                                     __ptext60 232E                                       __ptext52 6554  
                                     __ptext44 39A8                                       __ptext36 5D5E  
                                     __ptext28 5B86                                       __ptext61 0000  
                                     __ptext53 1F24                                       __ptext45 52AA  
                                     __ptext37 4E04                                       __ptext29 42FE  
                                     __ptext70 6234                                       __ptext62 10A6  
                                     __ptext54 50DE                                       __ptext46 56B6  
                                     __ptext38 506A                                       __ptext71 3B58  
                                     __ptext63 45B0                                       __ptext55 4848  
                                     __ptext47 4F7C                                       __ptext39 3026  
                          ??_MXK_BlockSwitchTo 0066                                       __ptext80 4656  
                                     __ptext72 318C                                       __ptext64 6306  
                                     __ptext56 5F06                                       __ptext48 418E  
                                     __ptext81 46FC                                       __ptext73 64F2  
                                     __ptext65 5830                                       __ptext57 3D02  
                                     __ptext49 1820                                       __ptext90 6322  
                                     __ptext82 47A2                                       __ptext74 2D34  
                                     __ptext66 5382                                       __ptext58 5F72  
                                     __ptext91 64CA                                       __ptext83 5718  
                                     __ptext75 2A1C                                       __ptext67 61F6  
                                     __ptext59 3A80                                       __ptext92 5DDA  
                                     __ptext84 5932                                       __ptext76 1CFA  
                                     __ptext68 64A0                                       __ptext93 58E0  
                                     __ptext85 5D9C                                       __ptext77 5A68  
                                     __ptext69 64AE                                       __ptext94 2EB4  
                                     __ptext86 3586                                       __ptext78 1466  
                                     __ptext95 4A2A                                       __ptext87 655A  
                                     __ptext79 64BC                                       __ptext96 5888  
                                     __ptext88 64FE                                       __ptext97 445C  
                                     __ptext89 5C9C                                       __ptext98 6252  
                                     __ptext99 6190                                   _SSP1CON1bits 000FC6  
                             __size_of_reverse 006C                                   _SSP1CON2bits 000FC5  
                  __size_of_PortProperty_Valid 007C                             i2Byte_GetZone@MASK 0007  
                            _ADC_ClockDivision 4CF6                                   ?_ADC_SetupIO 0001  
                                 _SSP2CON1bits 000F6C                                   _SSP2CON2bits 000F6B  
                                  _eusart_init 6234                                ?i2_Byte_GetPair 000A  
                             ?_Console_NewLine 0001                              ??_Event_DIPSwitch 0079  
                              ?i2_Byte_GetZone 0001                             i2Byte_GetZone@pMax 0003  
                             ?_HMI_InitButtons 0001                             ?_ADC_ClockDivision 0001  
                                 ?_ADC_Voltage 00A0                            __end_of_MXK_Dequeue 5DDA  
                            HMI_SetSegments@in 0064                          Button_Init@pThreshold 009D  
                                __size_of_main 0062                                  __size_of_init 00A6  
                                __size_of_itos 00D8                              Byte_GetPair@pPair 006B  
                       __end_of_Console_Render 2134                            i2Port_SetPin@pInput 0010  
                          i2Port_SetPin@pValue 0013                                   _Port_GetQuad 5A1E  
                          __end_of_MXK_Release 633E                                 _MXK_TestButton 641C  
                                i2_Byte_SetBit 59D2                            ??_ADC_ClockDivision 0060  
                                 _iRDistanceSS 0308                                    _irobot_leds 5830  
                                  _irobot_init 64A0                            i2Word_GetPair@pPair 000F  
                                  _irobot_move 42FE                                 ADC_Voltage@max 00A6  
                               ADC_Voltage@ref 00AA                      __end_of_MXK_BlockSwitchTo 5E18  
                     ?_Console_IncrementCursor 0001                           __size_of_Timer0_Init 0160  
                         __size_of_Timer2_Init 0160                                       int$flags 0051  
                         __size_of_Timer0_Stop 0006                                   _Port_SetType 1CFA  
                                 Port_Set@Type 0086                     __size_of_GetPortProperties 00A6  
                       __size_of_LCD_DrawField 00A4                                   _iRDropCaster 002F  
                  __size_of_load_iRScriptStack 006A                              ??_Configure_GPIOs 0095  
                                    printf@val 0082                                   _SSP1STATbits 000FC7  
                         __size_of_Motor_Speed 002A                                 Timer0_Init@DIV 0310  
                               Timer0_Init@PRE 00DB                                   _SSP2STATbits 000F6D  
                                   _LED_Toggle 5AB0                                     _HMI_GetBar 6554  
                         Button_Init@pGetState 00A2                         PortProperty_Valid@Pair 0085  
                             ??_Port_TogglePin 0077                                    _OSCTUNEbits 000F9B  
                                   _INTCONbits 000FF2                         PortProperty_Valid@pPin 0072  
                                   _HMI_SetBar 6520                                     _HMI_Render 5D5E  
                             Byte_SetZone@MASK 006A                                    i2_MXK_Queue 64D8  
                    __end_of_ADC_ClockDivision 4D80                                 Timer2_Init@DIV 030C  
                               Timer2_Init@PRE 00D9                               Byte_SetZone@pMax 0062  
                       __size_ofi2_Timer0_Stop 0006                           __size_of_Port_GetPin 0046  
                       ??_irobot_move_straight 007B                 __size_of_update_bump_and_cliff 003A  
                         Button_Init@pFunction 00A5                                       itos@Data 0070  
                __end_of_update_bump_and_cliff 5ECC                             LCD_FillRectangle@i 0075  
                           LCD_FillRectangle@j 0076                           __size_of_Port_SetPin 00C4  
                                     intlevel2 0000                                   reverse@input 0060  
                       __size_of_HMI_DIPSwitch 0018                               ___lwmod@dividend 0067  
                             ___lldiv@dividend 0060                         __end_of_MXK_TestButton 6434  
                              ?_Console_Render 0001                                  _iRScriptIndex 0037  
                      __size_of_LCD_Word_Write 001E                                 ?i2_Byte_SetBit 0001  
                                _iRScriptStack 041E                          __size_of_MXK_SwitchTo 0042  
                     irobot_query_and_update@i 007C                       irobot_query_and_update@j 007A  
                               _SPI_DisableISR 6142                     __end_of_twos_complement_of 5C9C  
                     irobot_rotate@rotateAngle 0079                                Port_Init@pInput 00A0  
                                     printf@ap 0080                               ?_get_packet_size 0001  
                       __size_ofi2_Port_SetPin 00AA                       irobot_rotate@rotateSpeed 007B  
                                   _ISR_Enable 652A                               ?_HMI_SetSegments 0061  
                      Console_MakeField@Column 006C                          __size_of_SPI_MaxSpeed 0074  
                             ??_ADC_SetChannel 0060                                  SPI_DCS@pInput 0060  
                        __size_of_SPI_MinSpeed 0074                                ??_MXK_DIPSwitch 0066  
                                  ??_rx_assign 0063                          __size_of_update_angle 0012  
                        __size_ofi2_Motor_Step 0100                              ADC_Voltage@pInput 00A0  
                      Console_MakeField@pInput 006B                               ?_HMI_RightSwitch 0001  
                             ___lldiv@quotient 0068                                  ??_GetPortPORT 0062  
                              ___lwmod@divisor 0069                                  ??_GetPortTRIS 0062  
                        Timer0_Start@pFunction 0060                             Word_SetPair@pInput 006F  
                              ___lwmod@counter 006B                             Word_SetPair@pValue 0072  
                     ?_irobot_query_and_update 0066                               Motor_Init@pMotor 008D  
                                  _MXK_Dequeue 5D9C                              ADC_Voltage@output 00AE  
                                _distanceTotal 00C8                                 LED_Toggle@pLED 0078  
                                _LCD_DrawField 4848                               _Port_SetQuadType 1AA4  
                                  _MXK_Release 6322                      __size_of_Console_FormFeed 008E  
                                 _MXK_SwitchTo 5C9C                          __size_of_Word_GetPair 003E  
            irobot_query_and_update@startIndex 007B                             Byte_GetZone@Offset 0067  
                                ?_Console_Init 0001                              Word_SetPair@pPair 0071  
                              _Port_SetPinType 26BE                        __size_of_Timer0_Restart 000C  
                           Byte_GetZone@Output 0068                             Byte_GetZone@pChunk 0063  
                              ?_MXK_TestButton 0001                    __end_of_Console_ResetCursor 6234  
                           Byte_GetZone@pInput 0060                        __size_ofi2_MXK_SwitchTo 0036  
              __end_of_Console_IncrementCursor 558C                          __size_of_Word_SetPair 0046  
                       __end_of_SPI_DisableISR 616A                                   _SPI_MaxSpeed 5152  
            irobot_query_and_update@streamSize 0077                                   _SPI_MinSpeed 51C6  
                           Port_Set@TypeActual 0084  
