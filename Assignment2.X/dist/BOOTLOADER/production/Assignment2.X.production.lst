

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Fri Sep 08 19:49:22 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK3,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    19                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    22                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	text0,global,reloc=2,class=CODE,delta=1
    24                           	psect	text1,global,reloc=2,class=CODE,delta=1
    25                           	psect	text2,global,reloc=2,class=CODE,delta=1
    26                           	psect	text3,global,reloc=2,class=CODE,delta=1
    27                           	psect	text4,global,reloc=2,class=CODE,delta=1
    28                           	psect	text5,global,reloc=2,class=CODE,delta=1
    29                           	psect	text6,global,reloc=2,class=CODE,delta=1
    30                           	psect	text7,global,reloc=2,class=CODE,delta=1
    31                           	psect	text8,global,reloc=2,class=CODE,delta=1
    32                           	psect	text9,global,reloc=2,class=CODE,delta=1
    33                           	psect	text10,global,reloc=2,class=CODE,delta=1
    34                           	psect	text11,global,reloc=2,class=CODE,delta=1
    35                           	psect	text12,global,reloc=2,class=CODE,delta=1,inline
    36                           	psect	text13,global,reloc=2,class=CODE,delta=1
    37                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text15,global,reloc=2,class=CODE,delta=1
    39                           	psect	text16,global,reloc=2,class=CODE,delta=1
    40                           	psect	text17,global,reloc=2,class=CODE,delta=1
    41                           	psect	text18,global,reloc=2,class=CODE,delta=1
    42                           	psect	text19,global,reloc=2,class=CODE,delta=1
    43                           	psect	text20,global,reloc=2,class=CODE,delta=1
    44                           	psect	text21,global,reloc=2,class=CODE,delta=1
    45                           	psect	text22,global,reloc=2,class=CODE,delta=1
    46                           	psect	text23,global,reloc=2,class=CODE,delta=1
    47                           	psect	text24,global,reloc=2,class=CODE,delta=1
    48                           	psect	text25,global,reloc=2,class=CODE,delta=1
    49                           	psect	text26,global,reloc=2,class=CODE,delta=1
    50                           	psect	text27,global,reloc=2,class=CODE,delta=1
    51                           	psect	text28,global,reloc=2,class=CODE,delta=1
    52                           	psect	text29,global,reloc=2,class=CODE,delta=1
    53                           	psect	text30,global,reloc=2,class=CODE,delta=1
    54                           	psect	text31,global,reloc=2,class=CODE,delta=1
    55                           	psect	text32,global,reloc=2,class=CODE,delta=1
    56                           	psect	text33,global,reloc=2,class=CODE,delta=1
    57                           	psect	text34,global,reloc=2,class=CODE,delta=1
    58                           	psect	text35,global,reloc=2,class=CODE,delta=1
    59                           	psect	text36,global,reloc=2,class=CODE,delta=1
    60                           	psect	text37,global,reloc=2,class=CODE,delta=1
    61                           	psect	text38,global,reloc=2,class=CODE,delta=1
    62                           	psect	text39,global,reloc=2,class=CODE,delta=1
    63                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	text42,global,reloc=2,class=CODE,delta=1
    66                           	psect	text43,global,reloc=2,class=CODE,delta=1
    67                           	psect	text44,global,reloc=2,class=CODE,delta=1
    68                           	psect	text45,global,reloc=2,class=CODE,delta=1
    69                           	psect	text46,global,reloc=2,class=CODE,delta=1
    70                           	psect	text47,global,reloc=2,class=CODE,delta=1
    71                           	psect	text48,global,reloc=2,class=CODE,delta=1
    72                           	psect	text49,global,reloc=2,class=CODE,delta=1
    73                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text51,global,reloc=2,class=CODE,delta=1
    75                           	psect	text52,global,reloc=2,class=CODE,delta=1
    76                           	psect	text53,global,reloc=2,class=CODE,delta=1
    77                           	psect	text54,global,reloc=2,class=CODE,delta=1
    78                           	psect	text55,global,reloc=2,class=CODE,delta=1
    79                           	psect	text56,global,reloc=2,class=CODE,delta=1
    80                           	psect	text57,global,reloc=2,class=CODE,delta=1
    81                           	psect	text58,global,reloc=2,class=CODE,delta=1
    82                           	psect	text59,global,reloc=2,class=CODE,delta=1
    83                           	psect	text60,global,reloc=2,class=CODE,delta=1
    84                           	psect	text61,global,reloc=2,class=CODE,delta=1
    85                           	psect	text62,global,reloc=2,class=CODE,delta=1
    86                           	psect	text63,global,reloc=2,class=CODE,delta=1
    87                           	psect	text64,global,reloc=2,class=CODE,delta=1
    88                           	psect	text65,global,reloc=2,class=CODE,delta=1
    89                           	psect	text66,global,reloc=2,class=CODE,delta=1
    90                           	psect	text67,global,reloc=2,class=CODE,delta=1
    91                           	psect	text68,global,reloc=2,class=CODE,delta=1
    92                           	psect	text69,global,reloc=2,class=CODE,delta=1
    93                           	psect	text70,global,reloc=2,class=CODE,delta=1
    94                           	psect	text71,global,reloc=2,class=CODE,delta=1
    95                           	psect	text72,global,reloc=2,class=CODE,delta=1
    96                           	psect	text73,global,reloc=2,class=CODE,delta=1
    97                           	psect	text74,global,reloc=2,class=CODE,delta=1
    98                           	psect	text75,global,reloc=2,class=CODE,delta=1
    99                           	psect	text76,global,reloc=2,class=CODE,delta=1
   100                           	psect	text77,global,reloc=2,class=CODE,delta=1
   101                           	psect	text78,global,reloc=2,class=CODE,delta=1
   102                           	psect	text79,global,reloc=2,class=CODE,delta=1
   103                           	psect	text80,global,reloc=2,class=CODE,delta=1
   104                           	psect	text81,global,reloc=2,class=CODE,delta=1
   105                           	psect	text82,global,reloc=2,class=CODE,delta=1
   106                           	psect	text83,global,reloc=2,class=CODE,delta=1
   107                           	psect	text84,global,reloc=2,class=CODE,delta=1
   108                           	psect	text85,global,reloc=2,class=CODE,delta=1
   109                           	psect	text86,global,reloc=2,class=CODE,delta=1
   110                           	psect	text87,global,reloc=2,class=CODE,delta=1
   111                           	psect	text88,global,reloc=2,class=CODE,delta=1
   112                           	psect	text89,global,reloc=2,class=CODE,delta=1
   113                           	psect	text90,global,reloc=2,class=CODE,delta=1
   114                           	psect	text91,global,reloc=2,class=CODE,delta=1,inline
   115                           	psect	text92,global,reloc=2,class=CODE,delta=1
   116                           	psect	text93,global,reloc=2,class=CODE,delta=1
   117                           	psect	text94,global,reloc=2,class=CODE,delta=1
   118                           	psect	text95,global,reloc=2,class=CODE,delta=1
   119                           	psect	text96,global,reloc=2,class=CODE,delta=1,inline
   120                           	psect	text97,global,reloc=2,class=CODE,delta=1,inline
   121                           	psect	text98,global,reloc=2,class=CODE,delta=1
   122                           	psect	text99,global,reloc=2,class=CODE,delta=1
   123                           	psect	text100,global,reloc=2,class=CODE,delta=1
   124                           	psect	text101,global,reloc=2,class=CODE,delta=1
   125                           	psect	text102,global,reloc=2,class=CODE,delta=1
   126                           	psect	text103,global,reloc=2,class=CODE,delta=1
   127                           	psect	text104,global,reloc=2,class=CODE,delta=1
   128                           	psect	text105,global,reloc=2,class=CODE,delta=1
   129                           	psect	text106,global,reloc=2,class=CODE,delta=1,group=1
   130                           	psect	text107,global,reloc=2,class=CODE,delta=1
   131                           	psect	text108,global,reloc=2,class=CODE,delta=1
   132                           	psect	text109,global,reloc=2,class=CODE,delta=1
   133                           	psect	text110,global,reloc=2,class=CODE,delta=1
   134                           	psect	text111,global,reloc=2,class=CODE,delta=1
   135                           	psect	text112,global,reloc=2,class=CODE,delta=1
   136                           	psect	text113,global,reloc=2,class=CODE,delta=1
   137                           	psect	text114,global,reloc=2,class=CODE,delta=1
   138                           	psect	text115,global,reloc=2,class=CODE,delta=1
   139                           	psect	text116,global,reloc=2,class=CODE,delta=1
   140                           	psect	text117,global,reloc=2,class=CODE,delta=1
   141                           	psect	text118,global,reloc=2,class=CODE,delta=1
   142                           	psect	text119,global,reloc=2,class=CODE,delta=1
   143                           	psect	text120,global,reloc=2,class=CODE,delta=1
   144                           	psect	text121,global,reloc=2,class=CODE,delta=1
   145                           	psect	text122,global,reloc=2,class=CODE,delta=1
   146                           	psect	text123,global,reloc=2,class=CODE,delta=1
   147                           	psect	text124,global,reloc=2,class=CODE,delta=1,inline
   148                           	psect	text125,global,reloc=2,class=CODE,delta=1
   149                           	psect	text126,global,reloc=2,class=CODE,delta=1,inline
   150                           	psect	text127,global,reloc=2,class=CODE,delta=1
   151                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   152                           	psect	text129,global,reloc=2,class=CODE,delta=1
   153                           	psect	text130,global,reloc=2,class=CODE,delta=1
   154                           	psect	text131,global,reloc=2,class=CODE,delta=1
   155                           	psect	text132,global,reloc=2,class=CODE,delta=1
   156                           	psect	text133,global,reloc=2,class=CODE,delta=1
   157                           	psect	text134,global,reloc=2,class=CODE,delta=1
   158                           	psect	text135,global,reloc=2,class=CODE,delta=1
   159                           	psect	text136,global,reloc=2,class=CODE,delta=1,inline
   160                           	psect	text137,global,reloc=2,class=CODE,delta=1
   161                           	psect	text138,global,reloc=2,class=CODE,delta=1
   162                           	psect	text139,global,reloc=2,class=CODE,delta=1
   163                           	psect	text140,global,reloc=2,class=CODE,delta=1
   164                           	psect	text141,global,reloc=2,class=CODE,delta=1
   165                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   166                           	psect	text142,global,reloc=2,class=CODE,delta=1
   167                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   168                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   169  0000                     
   170                           ; Version 1.43
   171                           ; Generated 25/07/2017 GMT
   172                           ; 
   173                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   174                           ; All rights reserved.
   175                           ; 
   176                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   177                           ; 
   178                           ; Redistribution and use in source and binary forms, with or without modification, are
   179                           ; permitted provided that the following conditions are met:
   180                           ; 
   181                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   182                           ;        conditions and the following disclaimer.
   183                           ; 
   184                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   185                           ;        of conditions and the following disclaimer in the documentation and/or other
   186                           ;        materials provided with the distribution.
   187                           ; 
   188                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   189                           ;        software without specific prior written permission.
   190                           ; 
   191                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   192                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   193                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   194                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   195                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   196                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   197                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   198                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   199                           ; 
   200                           ; 
   201                           ; Code-generator required, PIC18F67J50 Definitions
   202                           ; 
   203                           ; SFR Addresses
   204  0000                     
   205                           	psect	idataCOMRAM
   206  0000'                    __pidataCOMRAM:
   207                           	opt stack 0
   208                           
   209                           ;initializer for _gCursor
   210  0000' 0006               	dw	6
   211  0002' 0006               	dw	6
   212                           
   213                           ;initializer for _Bus_State
   214  0004' 01                 	db	1
   215                           
   216                           ;initializer for _A
   217  0005' 41                 	db	65
   218                           
   219                           ;initializer for _a
   220  0006' 61                 	db	97
   221                           
   222                           ;initializer for _zero
   223  0007' 30                 	db	48
   224                           
   225                           ;initializer for _l
   226  0008' 80                 	db	128
   227                           
   228                           ;initializer for _w
   229  0009' 80                 	db	128
   230                           
   231                           	psect	idataBANK0
   232  0000'                    __pidataBANK0:
   233                           	opt stack 0
   234                           
   235                           ;initializer for _gCharSize
   236  0000' 0005               	dw	5
   237  0002' 0007               	dw	7
   238                           
   239                           ;initializer for _gForecolour
   240  0004' FFFF               	dw	65535
   241                           
   242                           ;initializer for _change
   243  0006' 01                 	db	1
   244                           
   245                           	psect	idataBANK3
   246  0000'                    __pidataBANK3:
   247                           	opt stack 0
   248                           
   249                           ;initializer for Console_Render@F6956
   250  0000' 0006               	dw	6
   251  0002' 0006               	dw	6
   252                           
   253                           ;initializer for _gLineSize
   254  0004' 0080               	dw	128
   255  0006' 0007               	dw	7
   256                           
   257                           	psect	mediumconst
   258  0000'                    __pmediumconst:
   259                           	opt stack 0
   260  0000' 00                 	db	0
   261  0001'                    _InitList:
   262                           	opt stack 0
   263  0001' 1100               	dw	4352
   264  0003' 0080               	dw	128
   265  0005' 012C               	dw	300
   266  0007' B100               	dw	45312
   267  0009' 0002               	dw	2
   268  000B' 0035               	dw	53
   269  000D' 0036               	dw	54
   270  000F' B200               	dw	45568
   271  0011' 0002               	dw	2
   272  0013' 0035               	dw	53
   273  0015' 0036               	dw	54
   274  0017' B300               	dw	45824
   275  0019' 0002               	dw	2
   276  001B' 0035               	dw	53
   277  001D' 0036               	dw	54
   278  001F' 0002               	dw	2
   279  0021' 0035               	dw	53
   280  0023' 0036               	dw	54
   281  0025' B400               	dw	46080
   282  0027' 0000               	dw	0
   283  0029' C000               	dw	49152
   284  002B' 00A2               	dw	162
   285  002D' 0002               	dw	2
   286  002F' 0084               	dw	132
   287  0031' C100               	dw	49408
   288  0033' 00C5               	dw	197
   289  0035' C200               	dw	49664
   290  0037' 000D               	dw	13
   291  0039' 0000               	dw	0
   292  003B' C300               	dw	49920
   293  003D' 008D               	dw	141
   294  003F' 002A               	dw	42
   295  0041' C400               	dw	50176
   296  0043' 008D               	dw	141
   297  0045' 00EE               	dw	238
   298  0047' C500               	dw	50432
   299  0049' 000A               	dw	10
   300  004B' 3600               	dw	13824
   301  004D' 00C8               	dw	200
   302  004F' E000               	dw	57344
   303  0051' 0012               	dw	18
   304  0053' 001C               	dw	28
   305  0055' 0010               	dw	16
   306  0057' 0018               	dw	24
   307  0059' 0033               	dw	51
   308  005B' 002C               	dw	44
   309  005D' 0025               	dw	37
   310  005F' 0028               	dw	40
   311  0061' 0028               	dw	40
   312  0063' 0027               	dw	39
   313  0065' 002F               	dw	47
   314  0067' 003C               	dw	60
   315  0069' 0000               	dw	0
   316  006B' 0003               	dw	3
   317  006D' 0003               	dw	3
   318  006F' 0010               	dw	16
   319  0071' 0080               	dw	128
   320  0073' 0078               	dw	120
   321  0075' E100               	dw	57600
   322  0077' 0012               	dw	18
   323  0079' 001C               	dw	28
   324  007B' 0010               	dw	16
   325  007D' 0018               	dw	24
   326  007F' 002D               	dw	45
   327  0081' 0028               	dw	40
   328  0083' 0023               	dw	35
   329  0085' 0028               	dw	40
   330  0087' 0028               	dw	40
   331  0089' 0026               	dw	38
   332  008B' 002F               	dw	47
   333  008D' 003B               	dw	59
   334  008F' 0000               	dw	0
   335  0091' 0003               	dw	3
   336  0093' 0003               	dw	3
   337  0095' 0010               	dw	16
   338  0097' 3A00               	dw	14848
   339  0099' 0005               	dw	5
   340  009B' 2A00               	dw	10752
   341  009D' 0000               	dw	0
   342  009F' 0002               	dw	2
   343  00A1' 0000               	dw	0
   344  00A3' 0081               	dw	129
   345  00A5' 2B00               	dw	11008
   346  00A7' 0000               	dw	0
   347  00A9' 0003               	dw	3
   348  00AB' 0000               	dw	0
   349  00AD' 00A2               	dw	162
   350  00AF' 2900               	dw	10496
   351  00B1' 2C00               	dw	11264
   352  00B3'                    __end_of_InitList:
   353                           	opt stack 0
   354  00B3'                    Timer0_Init@PRESCALE:
   355                           	opt stack 0
   356  00B3' 0002               	dw	2
   357  00B5' 0004               	dw	4
   358  00B7' 0008               	dw	8
   359  00B9' 0010               	dw	16
   360  00BB' 0020               	dw	32
   361  00BD' 0040               	dw	64
   362  00BF' 0080               	dw	128
   363  00C1' 0100               	dw	256
   364  00C3'                    __end_ofTimer0_Init@PRESCALE:
   365                           	opt stack 0
   366  00C3'                    PortProperty_Valid@F6830:
   367                           	opt stack 0
   368  00C3' 00                 	db	0
   369  00C4' 01                 	db	1
   370  00C5' 02                 	db	2
   371  00C6' 00                 	db	0
   372  00C7' 01                 	db	1
   373  00C8' 00                 	db	0
   374  00C9' 01                 	db	1
   375  00CA' 00                 	db	0
   376  00CB' 02                 	db	2
   377  00CC' 02                 	db	2
   378  00CD' 00                 	db	0
   379  00CE' 00                 	db	0
   380  00CF' 03                 	db	3
   381  00D0' 03                 	db	3
   382  00D1' 03                 	db	3
   383  00D2' 00                 	db	0
   384  00D3'                    __end_ofPortProperty_Valid@F6830:
   385                           	opt stack 0
   386  00D3'                    _dpowers:
   387                           	opt stack 0
   388  00D3' 0001               	dw	1
   389  00D5' 000A               	dw	10
   390  00D7' 0064               	dw	100
   391  00D9' 03E8               	dw	1000
   392  00DB' 2710               	dw	10000
   393  00DD'                    __end_of_dpowers:
   394                           	opt stack 0
   395  00DD'                    _MASKS:
   396                           	opt stack 0
   397  00DD' 00                 	db	0
   398  00DE' 01                 	db	1
   399  00DF' 03                 	db	3
   400  00E0' 07                 	db	7
   401  00E1' 0F                 	db	15
   402  00E2' 1F                 	db	31
   403  00E3' 3F                 	db	63
   404  00E4' 7F                 	db	127
   405  00E5' FF                 	db	255
   406  00E6'                    __end_of_MASKS:
   407                           	opt stack 0
   408  00E6'                    HMI_SetButton@F7213:
   409                           	opt stack 0
   410  00E6' 00                 	db	0
   411  00E7' 02                 	db	2
   412  00E8' 01                 	db	1
   413  00E9' 03                 	db	3
   414  00EA'                    __end_ofHMI_SetButton@F7213:
   415                           	opt stack 0
   416  00EA'                    Timer2_Init@PRESCALE:
   417                           	opt stack 0
   418  00EA' 01                 	db	1
   419  00EB' 04                 	db	4
   420  00EC' 10                 	db	16
   421  00ED'                    __end_ofTimer2_Init@PRESCALE:
   422                           	opt stack 0
   423  00ED'                    _Font5x7:
   424                           	opt stack 0
   425  00ED' 00                 	db	0
   426  00EE' 00                 	db	0
   427  00EF' 00                 	db	0
   428  00F0' 00                 	db	0
   429  00F1' 00                 	db	0
   430  00F2' 00                 	db	0
   431  00F3' 00                 	db	0
   432  00F4' 5F                 	db	95
   433  00F5' 00                 	db	0
   434  00F6' 00                 	db	0
   435  00F7' 00                 	db	0
   436  00F8' 07                 	db	7
   437  00F9' 00                 	db	0
   438  00FA' 07                 	db	7
   439  00FB' 00                 	db	0
   440  00FC' 14                 	db	20
   441  00FD' 7F                 	db	127
   442  00FE' 14                 	db	20
   443  00FF' 7F                 	db	127
   444  0100' 14                 	db	20
   445  0101' 24                 	db	36
   446  0102' 2A                 	db	42
   447  0103' 7F                 	db	127
   448  0104' 2A                 	db	42
   449  0105' 12                 	db	18
   450  0106' 23                 	db	35
   451  0107' 13                 	db	19
   452  0108' 08                 	db	8
   453  0109' 64                 	db	100
   454  010A' 62                 	db	98
   455  010B' 36                 	db	54
   456  010C' 49                 	db	73
   457  010D' 55                 	db	85
   458  010E' 22                 	db	34
   459  010F' 50                 	db	80
   460  0110' 00                 	db	0
   461  0111' 05                 	db	5
   462  0112' 03                 	db	3
   463  0113' 00                 	db	0
   464  0114' 00                 	db	0
   465  0115' 00                 	db	0
   466  0116' 1C                 	db	28
   467  0117' 22                 	db	34
   468  0118' 41                 	db	65
   469  0119' 00                 	db	0
   470  011A' 00                 	db	0
   471  011B' 41                 	db	65
   472  011C' 22                 	db	34
   473  011D' 1C                 	db	28
   474  011E' 00                 	db	0
   475  011F' 08                 	db	8
   476  0120' 2A                 	db	42
   477  0121' 1C                 	db	28
   478  0122' 2A                 	db	42
   479  0123' 08                 	db	8
   480  0124' 08                 	db	8
   481  0125' 08                 	db	8
   482  0126' 3E                 	db	62
   483  0127' 08                 	db	8
   484  0128' 08                 	db	8
   485  0129' 00                 	db	0
   486  012A' 50                 	db	80
   487  012B' 30                 	db	48
   488  012C' 00                 	db	0
   489  012D' 00                 	db	0
   490  012E' 08                 	db	8
   491  012F' 08                 	db	8
   492  0130' 08                 	db	8
   493  0131' 08                 	db	8
   494  0132' 08                 	db	8
   495  0133' 00                 	db	0
   496  0134' 60                 	db	96
   497  0135' 60                 	db	96
   498  0136' 00                 	db	0
   499  0137' 00                 	db	0
   500  0138' 20                 	db	32
   501  0139' 10                 	db	16
   502  013A' 08                 	db	8
   503  013B' 04                 	db	4
   504  013C' 02                 	db	2
   505  013D' 3E                 	db	62
   506  013E' 51                 	db	81
   507  013F' 49                 	db	73
   508  0140' 45                 	db	69
   509  0141' 3E                 	db	62
   510  0142' 00                 	db	0
   511  0143' 42                 	db	66
   512  0144' 7F                 	db	127
   513  0145' 40                 	db	64
   514  0146' 00                 	db	0
   515  0147' 42                 	db	66
   516  0148' 61                 	db	97
   517  0149' 51                 	db	81
   518  014A' 49                 	db	73
   519  014B' 46                 	db	70
   520  014C' 21                 	db	33
   521  014D' 41                 	db	65
   522  014E' 45                 	db	69
   523  014F' 4B                 	db	75
   524  0150' 31                 	db	49
   525  0151' 18                 	db	24
   526  0152' 14                 	db	20
   527  0153' 12                 	db	18
   528  0154' 7F                 	db	127
   529  0155' 10                 	db	16
   530  0156' 27                 	db	39
   531  0157' 45                 	db	69
   532  0158' 45                 	db	69
   533  0159' 45                 	db	69
   534  015A' 39                 	db	57
   535  015B' 3C                 	db	60
   536  015C' 4A                 	db	74
   537  015D' 49                 	db	73
   538  015E' 49                 	db	73
   539  015F' 30                 	db	48
   540  0160' 01                 	db	1
   541  0161' 71                 	db	113
   542  0162' 09                 	db	9
   543  0163' 05                 	db	5
   544  0164' 03                 	db	3
   545  0165' 36                 	db	54
   546  0166' 49                 	db	73
   547  0167' 49                 	db	73
   548  0168' 49                 	db	73
   549  0169' 36                 	db	54
   550  016A' 06                 	db	6
   551  016B' 49                 	db	73
   552  016C' 49                 	db	73
   553  016D' 29                 	db	41
   554  016E' 1E                 	db	30
   555  016F' 00                 	db	0
   556  0170' 36                 	db	54
   557  0171' 36                 	db	54
   558  0172' 00                 	db	0
   559  0173' 00                 	db	0
   560  0174' 00                 	db	0
   561  0175' 56                 	db	86
   562  0176' 36                 	db	54
   563  0177' 00                 	db	0
   564  0178' 00                 	db	0
   565  0179' 00                 	db	0
   566  017A' 08                 	db	8
   567  017B' 14                 	db	20
   568  017C' 22                 	db	34
   569  017D' 41                 	db	65
   570  017E' 14                 	db	20
   571  017F' 14                 	db	20
   572  0180' 14                 	db	20
   573  0181' 14                 	db	20
   574  0182' 14                 	db	20
   575  0183' 41                 	db	65
   576  0184' 22                 	db	34
   577  0185' 14                 	db	20
   578  0186' 08                 	db	8
   579  0187' 00                 	db	0
   580  0188' 02                 	db	2
   581  0189' 01                 	db	1
   582  018A' 51                 	db	81
   583  018B' 09                 	db	9
   584  018C' 06                 	db	6
   585  018D' 32                 	db	50
   586  018E' 49                 	db	73
   587  018F' 79                 	db	121
   588  0190' 41                 	db	65
   589  0191' 3E                 	db	62
   590  0192' 7E                 	db	126
   591  0193' 11                 	db	17
   592  0194' 11                 	db	17
   593  0195' 11                 	db	17
   594  0196' 7E                 	db	126
   595  0197' 7F                 	db	127
   596  0198' 49                 	db	73
   597  0199' 49                 	db	73
   598  019A' 49                 	db	73
   599  019B' 36                 	db	54
   600  019C' 3E                 	db	62
   601  019D' 41                 	db	65
   602  019E' 41                 	db	65
   603  019F' 41                 	db	65
   604  01A0' 22                 	db	34
   605  01A1' 7F                 	db	127
   606  01A2' 41                 	db	65
   607  01A3' 41                 	db	65
   608  01A4' 22                 	db	34
   609  01A5' 1C                 	db	28
   610  01A6' 7F                 	db	127
   611  01A7' 49                 	db	73
   612  01A8' 49                 	db	73
   613  01A9' 49                 	db	73
   614  01AA' 41                 	db	65
   615  01AB' 7F                 	db	127
   616  01AC' 09                 	db	9
   617  01AD' 09                 	db	9
   618  01AE' 01                 	db	1
   619  01AF' 01                 	db	1
   620  01B0' 3E                 	db	62
   621  01B1' 41                 	db	65
   622  01B2' 41                 	db	65
   623  01B3' 51                 	db	81
   624  01B4' 32                 	db	50
   625  01B5' 7F                 	db	127
   626  01B6' 08                 	db	8
   627  01B7' 08                 	db	8
   628  01B8' 08                 	db	8
   629  01B9' 7F                 	db	127
   630  01BA' 00                 	db	0
   631  01BB' 41                 	db	65
   632  01BC' 7F                 	db	127
   633  01BD' 41                 	db	65
   634  01BE' 00                 	db	0
   635  01BF' 20                 	db	32
   636  01C0' 40                 	db	64
   637  01C1' 41                 	db	65
   638  01C2' 3F                 	db	63
   639  01C3' 01                 	db	1
   640  01C4' 7F                 	db	127
   641  01C5' 08                 	db	8
   642  01C6' 14                 	db	20
   643  01C7' 22                 	db	34
   644  01C8' 41                 	db	65
   645  01C9' 7F                 	db	127
   646  01CA' 40                 	db	64
   647  01CB' 40                 	db	64
   648  01CC' 40                 	db	64
   649  01CD' 40                 	db	64
   650  01CE' 7F                 	db	127
   651  01CF' 02                 	db	2
   652  01D0' 04                 	db	4
   653  01D1' 02                 	db	2
   654  01D2' 7F                 	db	127
   655  01D3' 7F                 	db	127
   656  01D4' 04                 	db	4
   657  01D5' 08                 	db	8
   658  01D6' 10                 	db	16
   659  01D7' 7F                 	db	127
   660  01D8' 3E                 	db	62
   661  01D9' 41                 	db	65
   662  01DA' 41                 	db	65
   663  01DB' 41                 	db	65
   664  01DC' 3E                 	db	62
   665  01DD' 7F                 	db	127
   666  01DE' 09                 	db	9
   667  01DF' 09                 	db	9
   668  01E0' 09                 	db	9
   669  01E1' 06                 	db	6
   670  01E2' 3E                 	db	62
   671  01E3' 41                 	db	65
   672  01E4' 51                 	db	81
   673  01E5' 21                 	db	33
   674  01E6' 5E                 	db	94
   675  01E7' 7F                 	db	127
   676  01E8' 09                 	db	9
   677  01E9' 19                 	db	25
   678  01EA' 29                 	db	41
   679  01EB' 46                 	db	70
   680  01EC' 46                 	db	70
   681  01ED' 49                 	db	73
   682  01EE' 49                 	db	73
   683  01EF' 49                 	db	73
   684  01F0' 31                 	db	49
   685  01F1' 01                 	db	1
   686  01F2' 01                 	db	1
   687  01F3' 7F                 	db	127
   688  01F4' 01                 	db	1
   689  01F5' 01                 	db	1
   690  01F6' 3F                 	db	63
   691  01F7' 40                 	db	64
   692  01F8' 40                 	db	64
   693  01F9' 40                 	db	64
   694  01FA' 3F                 	db	63
   695  01FB' 1F                 	db	31
   696  01FC' 20                 	db	32
   697  01FD' 40                 	db	64
   698  01FE' 20                 	db	32
   699  01FF' 1F                 	db	31
   700  0200' 7F                 	db	127
   701  0201' 20                 	db	32
   702  0202' 18                 	db	24
   703  0203' 20                 	db	32
   704  0204' 7F                 	db	127
   705  0205' 63                 	db	99
   706  0206' 14                 	db	20
   707  0207' 08                 	db	8
   708  0208' 14                 	db	20
   709  0209' 63                 	db	99
   710  020A' 03                 	db	3
   711  020B' 04                 	db	4
   712  020C' 78                 	db	120
   713  020D' 04                 	db	4
   714  020E' 03                 	db	3
   715  020F' 61                 	db	97
   716  0210' 51                 	db	81
   717  0211' 49                 	db	73
   718  0212' 45                 	db	69
   719  0213' 43                 	db	67
   720  0214' 00                 	db	0
   721  0215' 00                 	db	0
   722  0216' 7F                 	db	127
   723  0217' 41                 	db	65
   724  0218' 41                 	db	65
   725  0219' 02                 	db	2
   726  021A' 04                 	db	4
   727  021B' 08                 	db	8
   728  021C' 10                 	db	16
   729  021D' 20                 	db	32
   730  021E' 41                 	db	65
   731  021F' 41                 	db	65
   732  0220' 7F                 	db	127
   733  0221' 00                 	db	0
   734  0222' 00                 	db	0
   735  0223' 04                 	db	4
   736  0224' 02                 	db	2
   737  0225' 01                 	db	1
   738  0226' 02                 	db	2
   739  0227' 04                 	db	4
   740  0228' 40                 	db	64
   741  0229' 40                 	db	64
   742  022A' 40                 	db	64
   743  022B' 40                 	db	64
   744  022C' 40                 	db	64
   745  022D' 00                 	db	0
   746  022E' 01                 	db	1
   747  022F' 02                 	db	2
   748  0230' 04                 	db	4
   749  0231' 00                 	db	0
   750  0232' 20                 	db	32
   751  0233' 54                 	db	84
   752  0234' 54                 	db	84
   753  0235' 54                 	db	84
   754  0236' 78                 	db	120
   755  0237' 7F                 	db	127
   756  0238' 48                 	db	72
   757  0239' 44                 	db	68
   758  023A' 44                 	db	68
   759  023B' 38                 	db	56
   760  023C' 38                 	db	56
   761  023D' 44                 	db	68
   762  023E' 44                 	db	68
   763  023F' 44                 	db	68
   764  0240' 20                 	db	32
   765  0241' 38                 	db	56
   766  0242' 44                 	db	68
   767  0243' 44                 	db	68
   768  0244' 48                 	db	72
   769  0245' 7F                 	db	127
   770  0246' 38                 	db	56
   771  0247' 54                 	db	84
   772  0248' 54                 	db	84
   773  0249' 54                 	db	84
   774  024A' 18                 	db	24
   775  024B' 08                 	db	8
   776  024C' 7E                 	db	126
   777  024D' 09                 	db	9
   778  024E' 01                 	db	1
   779  024F' 02                 	db	2
   780  0250' 08                 	db	8
   781  0251' 14                 	db	20
   782  0252' 54                 	db	84
   783  0253' 54                 	db	84
   784  0254' 3C                 	db	60
   785  0255' 7F                 	db	127
   786  0256' 08                 	db	8
   787  0257' 04                 	db	4
   788  0258' 04                 	db	4
   789  0259' 78                 	db	120
   790  025A' 00                 	db	0
   791  025B' 44                 	db	68
   792  025C' 7D                 	db	125
   793  025D' 40                 	db	64
   794  025E' 00                 	db	0
   795  025F' 20                 	db	32
   796  0260' 40                 	db	64
   797  0261' 44                 	db	68
   798  0262' 3D                 	db	61
   799  0263' 00                 	db	0
   800  0264' 00                 	db	0
   801  0265' 7F                 	db	127
   802  0266' 10                 	db	16
   803  0267' 28                 	db	40
   804  0268' 44                 	db	68
   805  0269' 00                 	db	0
   806  026A' 41                 	db	65
   807  026B' 7F                 	db	127
   808  026C' 40                 	db	64
   809  026D' 00                 	db	0
   810  026E' 7C                 	db	124
   811  026F' 04                 	db	4
   812  0270' 18                 	db	24
   813  0271' 04                 	db	4
   814  0272' 78                 	db	120
   815  0273' 7C                 	db	124
   816  0274' 08                 	db	8
   817  0275' 04                 	db	4
   818  0276' 04                 	db	4
   819  0277' 78                 	db	120
   820  0278' 38                 	db	56
   821  0279' 44                 	db	68
   822  027A' 44                 	db	68
   823  027B' 44                 	db	68
   824  027C' 38                 	db	56
   825  027D' 7C                 	db	124
   826  027E' 14                 	db	20
   827  027F' 14                 	db	20
   828  0280' 14                 	db	20
   829  0281' 08                 	db	8
   830  0282' 08                 	db	8
   831  0283' 14                 	db	20
   832  0284' 14                 	db	20
   833  0285' 18                 	db	24
   834  0286' 7C                 	db	124
   835  0287' 7C                 	db	124
   836  0288' 08                 	db	8
   837  0289' 04                 	db	4
   838  028A' 04                 	db	4
   839  028B' 08                 	db	8
   840  028C' 48                 	db	72
   841  028D' 54                 	db	84
   842  028E' 54                 	db	84
   843  028F' 54                 	db	84
   844  0290' 20                 	db	32
   845  0291' 04                 	db	4
   846  0292' 3F                 	db	63
   847  0293' 44                 	db	68
   848  0294' 40                 	db	64
   849  0295' 20                 	db	32
   850  0296' 3C                 	db	60
   851  0297' 40                 	db	64
   852  0298' 40                 	db	64
   853  0299' 20                 	db	32
   854  029A' 7C                 	db	124
   855  029B' 1C                 	db	28
   856  029C' 20                 	db	32
   857  029D' 40                 	db	64
   858  029E' 20                 	db	32
   859  029F' 1C                 	db	28
   860  02A0' 3C                 	db	60
   861  02A1' 40                 	db	64
   862  02A2' 30                 	db	48
   863  02A3' 40                 	db	64
   864  02A4' 3C                 	db	60
   865  02A5' 44                 	db	68
   866  02A6' 28                 	db	40
   867  02A7' 10                 	db	16
   868  02A8' 28                 	db	40
   869  02A9' 44                 	db	68
   870  02AA' 0C                 	db	12
   871  02AB' 50                 	db	80
   872  02AC' 50                 	db	80
   873  02AD' 50                 	db	80
   874  02AE' 3C                 	db	60
   875  02AF' 44                 	db	68
   876  02B0' 64                 	db	100
   877  02B1' 54                 	db	84
   878  02B2' 4C                 	db	76
   879  02B3' 44                 	db	68
   880  02B4' 00                 	db	0
   881  02B5' 08                 	db	8
   882  02B6' 36                 	db	54
   883  02B7' 41                 	db	65
   884  02B8' 00                 	db	0
   885  02B9' 00                 	db	0
   886  02BA' 00                 	db	0
   887  02BB' 7F                 	db	127
   888  02BC' 00                 	db	0
   889  02BD' 00                 	db	0
   890  02BE' 00                 	db	0
   891  02BF' 41                 	db	65
   892  02C0' 36                 	db	54
   893  02C1' 08                 	db	8
   894  02C2' 00                 	db	0
   895  02C3' 08                 	db	8
   896  02C4' 08                 	db	8
   897  02C5' 2A                 	db	42
   898  02C6' 1C                 	db	28
   899  02C7' 08                 	db	8
   900  02C8' 08                 	db	8
   901  02C9' 1C                 	db	28
   902  02CA' 2A                 	db	42
   903  02CB' 08                 	db	8
   904  02CC' 08                 	db	8
   905  02CD'                    __end_of_Font5x7:
   906                           	opt stack 0
   907  02CD'                    _PortG_Property:
   908                           	opt stack 0
   909  02CD' FC00               	dw	64512
   910  02CF'                    __end_of_PortG_Property:
   911                           	opt stack 0
   912  02CF'                    _PortF_Property:
   913                           	opt stack 0
   914  02CF' 0FFF               	dw	4095
   915  02D1'                    __end_of_PortF_Property:
   916                           	opt stack 0
   917  02D1'                    _PortE_Property:
   918                           	opt stack 0
   919  02D1' 0000               	dw	0
   920  02D3'                    __end_of_PortE_Property:
   921                           	opt stack 0
   922  02D3'                    _PortD_Property:
   923                           	opt stack 0
   924  02D3' FFFF               	dw	65535
   925  02D5'                    __end_of_PortD_Property:
   926                           	opt stack 0
   927  02D5'                    _PortC_Property:
   928                           	opt stack 0
   929  02D5' FFF0               	dw	65520
   930  02D7'                    __end_of_PortC_Property:
   931                           	opt stack 0
   932  02D7'                    _PortB_Property:
   933                           	opt stack 0
   934  02D7' FF00               	dw	65280
   935  02D9'                    __end_of_PortB_Property:
   936                           	opt stack 0
   937  02D9'                    _PortA_Property:
   938                           	opt stack 0
   939  02D9' 00FF               	dw	255
   940  02DB'                    __end_of_PortA_Property:
   941                           	opt stack 0
   942  0000                     _TMR0	set	4054
   943  0000                     _RCREG1	set	4015
   944  0000                     _TXREG1	set	4014
   945  0000                     _SPBRG1	set	4016
   946  0000                     _TXSTA1bits	set	4013
   947  0000                     _BAUDCON1bits	set	3966
   948  0000                     _RCSTA1	set	4012
   949  0000                     _TXSTA1	set	4013
   950  0000                     _TRISCbits	set	3988
   951  0000                     _PR2	set	4043
   952  0000                     _T2CONbits	set	4042
   953  0000                     _T0CONbits	set	4053
   954  0000                     _RCONbits	set	4048
   955  0000                     _OSCTUNEbits	set	3995
   956  0000                     _PIR3	set	4004
   957  0000                     _PIR2	set	4001
   958  0000                     _PIR1	set	3998
   959  0000                     _INTCONbits	set	4082
   960  0000                     _SSP2CON2bits	set	3947
   961  0000                     _SSP1CON2bits	set	4037
   962  0000                     _SSP1ADD	set	4040
   963  0000                     _ANCON0	set	4033
   964  0000                     _ADRESL	set	4035
   965  0000                     _ADRESH	set	4036
   966  0000                     _ADCON1bits	set	4033
   967  0000                     _ADCON0bits	set	4034
   968  0000                     _SSP2CON1bits	set	3948
   969  0000                     _SSP1CON1bits	set	4038
   970  0000                     _SSP2STATbits	set	3949
   971  0000                     _SSP1STATbits	set	4039
   972  0000                     _PIE3bits	set	4003
   973  0000                     _PIE1bits	set	3997
   974  0000                     _PIR3bits	set	4004
   975  0000                     _PIR1bits	set	3998
   976  0000                     _IPR3bits	set	4005
   977  0000                     _IPR1bits	set	3999
   978  0000                     _PORTFbits	set	3973
   979  0000                     _SSP2CON2	set	3947
   980  0000                     _SSP1CON2	set	4037
   981  0000                     _SSP2BUF	set	3951
   982  0000                     _SSP2CON1	set	3948
   983  0000                     _SSP2STAT	set	3949
   984  0000                     _SSP1BUF	set	4041
   985  0000                     _SSP1CON1	set	4038
   986  0000                     _SSP1STAT	set	4039
   987  0000                     _LATG	set	3983
   988  0000                     _LATF	set	3982
   989  0000                     _LATE	set	3981
   990  0000                     _LATD	set	3980
   991  0000                     _LATC	set	3979
   992  0000                     _LATB	set	3978
   993  0000                     _LATA	set	3977
   994  0000                     _TRISG	set	3992
   995  0000                     _TRISF	set	3991
   996  0000                     _TRISE	set	3990
   997  0000                     _TRISD	set	3989
   998  0000                     _TRISC	set	3988
   999  0000                     _TRISB	set	3987
  1000  0000                     _TRISA	set	3986
  1001  0000                     _PORTG	set	3974
  1002  0000                     _PORTF	set	3973
  1003  0000                     _PORTE	set	3972
  1004  0000                     _PORTD	set	3971
  1005  0000                     _PORTC	set	3970
  1006  0000                     _PORTB	set	3969
  1007  0000                     _PORTA	set	3968
  1008  02DB'                    STR_2:
  1009  02DB' 54                 	db	84	;'T'
  1010  02DC' 6F                 	db	111	;'o'
  1011  02DD' 74                 	db	116	;'t'
  1012  02DE' 61                 	db	97	;'a'
  1013  02DF' 6C                 	db	108	;'l'
  1014  02E0' 20                 	db	32
  1015  02E1' 44                 	db	68	;'D'
  1016  02E2' 69                 	db	105	;'i'
  1017  02E3' 73                 	db	115	;'s'
  1018  02E4' 74                 	db	116	;'t'
  1019  02E5' 61                 	db	97	;'a'
  1020  02E6' 6E                 	db	110	;'n'
  1021  02E7' 63                 	db	99	;'c'
  1022  02E8' 65                 	db	101	;'e'
  1023  02E9' 3A                 	db	58	;':'
  1024  02EA' 25                 	db	37
  1025  02EB' 75                 	db	117	;'u'
  1026  02EC' 0A                 	db	10
  1027  02ED' 4C                 	db	76	;'L'
  1028  02EE' 65                 	db	101	;'e'
  1029  02EF' 66                 	db	102	;'f'
  1030  02F0' 74                 	db	116	;'t'
  1031  02F1' 20                 	db	32
  1032  02F2' 42                 	db	66	;'B'
  1033  02F3' 75                 	db	117	;'u'
  1034  02F4' 6D                 	db	109	;'m'
  1035  02F5' 70                 	db	112	;'p'
  1036  02F6' 3A                 	db	58	;':'
  1037  02F7' 25                 	db	37
  1038  02F8' 75                 	db	117	;'u'
  1039  02F9' 0A                 	db	10
  1040  02FA' 52                 	db	82	;'R'
  1041  02FB' 69                 	db	105	;'i'
  1042  02FC' 67                 	db	103	;'g'
  1043  02FD' 68                 	db	104	;'h'
  1044  02FE' 74                 	db	116	;'t'
  1045  02FF' 20                 	db	32
  1046  0300' 42                 	db	66	;'B'
  1047  0301' 75                 	db	117	;'u'
  1048  0302' 6D                 	db	109	;'m'
  1049  0303' 70                 	db	112	;'p'
  1050  0304' 3A                 	db	58	;':'
  1051  0305' 25                 	db	37
  1052  0306' 75                 	db	117	;'u'
  1053  0307' 0A                 	db	10
  1054  0308' 00                 	db	0
  1055  0309'                    STR_4:
  1056  0309' 44                 	db	68	;'D'
  1057  030A' 69                 	db	105	;'i'
  1058  030B' 73                 	db	115	;'s'
  1059  030C' 74                 	db	116	;'t'
  1060  030D' 61                 	db	97	;'a'
  1061  030E' 6E                 	db	110	;'n'
  1062  030F' 63                 	db	99	;'c'
  1063  0310' 65                 	db	101	;'e'
  1064  0311' 3A                 	db	58	;':'
  1065  0312' 20                 	db	32
  1066  0313' 25                 	db	37
  1067  0314' 64                 	db	100	;'d'
  1068  0315' 0A                 	db	10
  1069  0316' 00                 	db	0
  1070  0317'                    STR_1:
  1071  0317' 25                 	db	37
  1072  0318' 63                 	db	99	;'c'
  1073  0319' 00                 	db	0
  1074  0000                     
  1075                           ; #config settings
  1076  031A' 00                 	db	0	; dummy byte at the end
  1077  0000                     
  1078                           	psect	cinit
  1079  0000'                    __pcinit:
  1080                           	opt stack 0
  1081  0000'                    start_initialization:
  1082                           	opt stack 0
  1083  0000'                    __initialization:
  1084                           	opt stack 0
  1085                           
  1086                           ; Initialize objects allocated to BANK3 (8 bytes)
  1087                           ; load TBLPTR registers with __pidataBANK3
  1088  0000' 0E00'              	movlw	low __pidataBANK3
  1089  0002' 6EF6               	movwf	tblptrl,c
  1090  0004' 0E00'              	movlw	high __pidataBANK3
  1091  0006' 6EF7               	movwf	tblptrh,c
  1092  0008' 0E00'              	movlw	low (__pidataBANK3 shr (0+16))
  1093  000A' 6EF8               	movwf	tblptru,c
  1094  000C' EE00' F000'        	lfsr	0,__pdataBANK3
  1095  0010' EE10 F008          	lfsr	1,8
  1096  0014'                    copy_data0:
  1097  0014' 0009               	tblrd		*+
  1098  0016' CFF5 FFEE          	movff	tablat,postinc0
  1099  001A' 50E5               	movf	postdec1,w,c
  1100  001C' 50E1               	movf	fsr1l,w,c
  1101  001E' E1FA               	bnz	copy_data0
  1102                           
  1103                           ; Initialize objects allocated to BANK0 (7 bytes)
  1104                           ; load TBLPTR registers with __pidataBANK0
  1105  0020' 0E00'              	movlw	low __pidataBANK0
  1106  0022' 6EF6               	movwf	tblptrl,c
  1107  0024' 0E00'              	movlw	high __pidataBANK0
  1108  0026' 6EF7               	movwf	tblptrh,c
  1109  0028' 0E00'              	movlw	low (__pidataBANK0 shr (0+16))
  1110  002A' 6EF8               	movwf	tblptru,c
  1111  002C' EE00' F000'        	lfsr	0,__pdataBANK0
  1112  0030' EE10 F007          	lfsr	1,7
  1113  0034'                    copy_data1:
  1114  0034' 0009               	tblrd		*+
  1115  0036' CFF5 FFEE          	movff	tablat,postinc0
  1116  003A' 50E5               	movf	postdec1,w,c
  1117  003C' 50E1               	movf	fsr1l,w,c
  1118  003E' E1FA               	bnz	copy_data1
  1119                           
  1120                           ; Initialize objects allocated to COMRAM (10 bytes)
  1121                           ; load TBLPTR registers with __pidataCOMRAM
  1122  0040' 0E00'              	movlw	low __pidataCOMRAM
  1123  0042' 6EF6               	movwf	tblptrl,c
  1124  0044' 0E00'              	movlw	high __pidataCOMRAM
  1125  0046' 6EF7               	movwf	tblptrh,c
  1126  0048' 0E00'              	movlw	low (__pidataCOMRAM shr (0+16))
  1127  004A' 6EF8               	movwf	tblptru,c
  1128  004C' EE00' F000'        	lfsr	0,__pdataCOMRAM
  1129  0050' EE10 F00A          	lfsr	1,10
  1130  0054'                    copy_data2:
  1131  0054' 0009               	tblrd		*+
  1132  0056' CFF5 FFEE          	movff	tablat,postinc0
  1133  005A' 50E5               	movf	postdec1,w,c
  1134  005C' 50E1               	movf	fsr1l,w,c
  1135  005E' E1FA               	bnz	copy_data2
  1136                           
  1137                           ; Clear objects allocated to BIGRAM (300 bytes)
  1138  0060' EE00' F000'        	lfsr	0,__pbssBIGRAM
  1139  0064' EE11 F02C          	lfsr	1,300
  1140  0068'                    clear_0:
  1141  0068' 6AEE               	clrf	postinc0,c
  1142  006A' 50E5               	movf	postdec1,w,c
  1143  006C' 50E1               	movf	fsr1l,w,c
  1144  006E' E1FC               	bnz	clear_0
  1145  0070' 50E2               	movf	fsr1h,w,c
  1146  0072' E1FA               	bnz	clear_0
  1147                           
  1148                           ; Clear objects allocated to BANK4 (170 bytes)
  1149  0074' EE00' F000'        	lfsr	0,__pbssBANK4
  1150  0078' 0EAA               	movlw	170
  1151  007A'                    clear_1:
  1152  007A' 6AEE               	clrf	postinc0,c
  1153  007C' 06E8               	decf	wreg,f,c
  1154  007E' E1FD               	bnz	clear_1
  1155                           
  1156                           ; Clear objects allocated to BANK3 (223 bytes)
  1157  0080' EE00' F000'        	lfsr	0,__pbssBANK3
  1158  0084' 0EDF               	movlw	223
  1159  0086'                    clear_2:
  1160  0086' 6AEE               	clrf	postinc0,c
  1161  0088' 06E8               	decf	wreg,f,c
  1162  008A' E1FD               	bnz	clear_2
  1163                           
  1164                           ; Clear objects allocated to BANK0 (91 bytes)
  1165  008C' EE00' F000'        	lfsr	0,__pbssBANK0
  1166  0090' 0E5B               	movlw	91
  1167  0092'                    clear_3:
  1168  0092' 6AEE               	clrf	postinc0,c
  1169  0094' 06E8               	decf	wreg,f,c
  1170  0096' E1FD               	bnz	clear_3
  1171                           
  1172                           ; Clear objects allocated to COMRAM (30 bytes)
  1173  0098' EE00' F000'        	lfsr	0,__pbssCOMRAM
  1174  009C' 0E1E               	movlw	30
  1175  009E'                    clear_4:
  1176  009E' 6AEE               	clrf	postinc0,c
  1177  00A0' 06E8               	decf	wreg,f,c
  1178  00A2' E1FD               	bnz	clear_4
  1179  00A4'                    end_of_initialization:
  1180                           	opt stack 0
  1181  00A4'                    __end_of__initialization:
  1182                           	opt stack 0
  1183  00A4' 9000'              	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1184  00A6' 9200'              	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1185  00A8' 0100               	movlb	0
  1186  00AA' EF00' F000'        	goto	_main	;jump to C main() function
  1187                           tblptru	equ	0xFF8
  1188                           tblptrh	equ	0xFF7
  1189                           tblptrl	equ	0xFF6
  1190                           tablat	equ	0xFF5
  1191                           postinc0	equ	0xFEE
  1192                           wreg	equ	0xFE8
  1193                           postdec1	equ	0xFE5
  1194                           fsr1h	equ	0xFE2
  1195                           fsr1l	equ	0xFE1
  1196                           
  1197                           	psect	bssCOMRAM
  1198  0000'                    __pbssCOMRAM:
  1199                           	opt stack 0
  1200  0000'                    _COUNTER:
  1201                           	opt stack 0
  1202  0000'                    	ds	2
  1203  0002'                    HMI_GRender@a:
  1204                           	opt stack 0
  1205  0002'                    	ds	2
  1206  0004'                    _iRDropRight:
  1207                           	opt stack 0
  1208  0004'                    	ds	1
  1209  0005'                    _iRVirtualWall:
  1210                           	opt stack 0
  1211  0005'                    	ds	1
  1212  0006'                    _iRCliffR:
  1213                           	opt stack 0
  1214  0006'                    	ds	1
  1215  0007'                    _iRCliffFR:
  1216                           	opt stack 0
  1217  0007'                    	ds	1
  1218  0008'                    _iRCliffFL:
  1219                           	opt stack 0
  1220  0008'                    	ds	1
  1221  0009'                    _iRCliffL:
  1222                           	opt stack 0
  1223  0009'                    	ds	1
  1224  000A'                    _iRWall:
  1225                           	opt stack 0
  1226  000A'                    	ds	1
  1227  000B'                    _iRBumpDrop:
  1228                           	opt stack 0
  1229  000B'                    	ds	1
  1230  000C'                    _iRScriptIndex:
  1231                           	opt stack 0
  1232  000C'                    	ds	1
  1233  000D'                    _u:
  1234                           	opt stack 0
  1235  000D'                    	ds	1
  1236  000E'                    _j:
  1237                           	opt stack 0
  1238  000E'                    	ds	1
  1239  000F'                    _i:
  1240                           	opt stack 0
  1241  000F'                    	ds	1
  1242  0010'                    Timer0_Init@PRE:
  1243                           	opt stack 0
  1244  0010'                    	ds	1
  1245  0011'                    _INDEX:
  1246                           	opt stack 0
  1247  0011'                    	ds	1
  1248  0012'                    rand@screw:
  1249                           	opt stack 0
  1250  0012'                    	ds	1
  1251  0013'                    _ADC_Initialised:
  1252                           	opt stack 0
  1253  0013'                    	ds	1
  1254  0014'                    OutSeg@a:
  1255                           	opt stack 0
  1256  0014'                    	ds	1
  1257  0015'                    OutSeg@segset:
  1258                           	opt stack 0
  1259  0015'                    	ds	1
  1260  0016'                    OutSeg@cur:
  1261                           	opt stack 0
  1262  0016'                    	ds	1
  1263  0017'                    _I2C1T:
  1264                           	opt stack 0
  1265  0017'                    	ds	7
  1266                           tblptru	equ	0xFF8
  1267                           tblptrh	equ	0xFF7
  1268                           tblptrl	equ	0xFF6
  1269                           tablat	equ	0xFF5
  1270                           postinc0	equ	0xFEE
  1271                           wreg	equ	0xFE8
  1272                           postdec1	equ	0xFE5
  1273                           fsr1h	equ	0xFE2
  1274                           fsr1l	equ	0xFE1
  1275                           
  1276                           	psect	dataCOMRAM
  1277  0000'                    __pdataCOMRAM:
  1278                           	opt stack 0
  1279  0000'                    _gCursor:
  1280                           	opt stack 0
  1281  0000'                    	ds	4
  1282  0004'                    _Bus_State:
  1283                           	opt stack 0
  1284  0004'                    	ds	1
  1285  0005'                    	ds	1
  1286  0006'                    	ds	1
  1287  0007'                    	ds	1
  1288  0008'                    _l:
  1289                           	opt stack 0
  1290  0008'                    	ds	1
  1291  0009'                    _w:
  1292                           	opt stack 0
  1293  0009'                    	ds	1
  1294                           tblptru	equ	0xFF8
  1295                           tblptrh	equ	0xFF7
  1296                           tblptrl	equ	0xFF6
  1297                           tablat	equ	0xFF5
  1298                           postinc0	equ	0xFEE
  1299                           wreg	equ	0xFE8
  1300                           postdec1	equ	0xFE5
  1301                           fsr1h	equ	0xFE2
  1302                           fsr1l	equ	0xFE1
  1303                           
  1304                           	psect	bssBANK0
  1305  0000'                    __pbssBANK0:
  1306                           	opt stack 0
  1307  0000'                    _iRDistanceSS:
  1308                           	opt stack 0
  1309  0000'                    	ds	4
  1310  0004'                    _gISR:
  1311                           	opt stack 0
  1312  0004'                    	ds	3
  1313  0007'                    _lQueue:
  1314                           	opt stack 0
  1315  0007'                    	ds	3
  1316  000A'                    _lStepFunction:
  1317                           	opt stack 0
  1318  000A'                    	ds	3
  1319  000D'                    _selectedMode4:
  1320                           	opt stack 0
  1321  000D'                    	ds	2
  1322  000F'                    _selectedMode3:
  1323                           	opt stack 0
  1324  000F'                    	ds	2
  1325  0011'                    _selectedMode2:
  1326                           	opt stack 0
  1327  0011'                    	ds	2
  1328  0013'                    _selectedMode1:
  1329                           	opt stack 0
  1330  0013'                    	ds	2
  1331  0015'                    _mode:
  1332                           	opt stack 0
  1333  0015'                    	ds	2
  1334  0017'                    _angleTotal:
  1335                           	opt stack 0
  1336  0017'                    	ds	2
  1337  0019'                    _distanceTotal:
  1338                           	opt stack 0
  1339  0019'                    	ds	2
  1340  001B'                    _iRAngle:
  1341                           	opt stack 0
  1342  001B'                    	ds	2
  1343  001D'                    _iRDistance:
  1344                           	opt stack 0
  1345  001D'                    	ds	2
  1346  001F'                    _pShiftVal:
  1347                           	opt stack 0
  1348  001F'                    	ds	2
  1349  0021'                    _val:
  1350                           	opt stack 0
  1351  0021'                    	ds	2
  1352  0023'                    _lMotor:
  1353                           	opt stack 0
  1354  0023'                    	ds	2
  1355  0025'                    _lCurrent:
  1356                           	opt stack 0
  1357  0025'                    	ds	2
  1358  0027'                    _gBackcolour:
  1359                           	opt stack 0
  1360  0027'                    	ds	2
  1361  0029'                    SPI_Send9@dat:
  1362                           	opt stack 0
  1363  0029'                    	ds	2
  1364  002B'                    _iRDropCaster:
  1365                           	opt stack 0
  1366  002B'                    	ds	1
  1367  002C'                    _iRDropLeft:
  1368                           	opt stack 0
  1369  002C'                    	ds	1
  1370  002D'                    _iRBumpLeft:
  1371                           	opt stack 0
  1372  002D'                    	ds	1
  1373  002E'                    _iRBumpRight:
  1374                           	opt stack 0
  1375  002E'                    	ds	1
  1376  002F'                    Event_TestButton@j:
  1377                           	opt stack 0
  1378  002F'                    	ds	1
  1379  0030'                    Timer2_Init@PRE:
  1380                           	opt stack 0
  1381  0030'                    	ds	1
  1382  0031'                    Timer2_Init@INDEX:
  1383                           	opt stack 0
  1384  0031'                    	ds	1
  1385  0032'                    _lBufferY:
  1386                           	opt stack 0
  1387  0032'                    	ds	1
  1388  0033'                    _lBufferX:
  1389                           	opt stack 0
  1390  0033'                    	ds	1
  1391  0034'                    _clearall:
  1392                           	opt stack 0
  1393  0034'                    	ds	1
  1394  0035'                    _PortE:
  1395                           	opt stack 0
  1396  0035'                    	ds	10
  1397  003F'                    _PortD:
  1398                           	opt stack 0
  1399  003F'                    	ds	10
  1400  0049'                    _PortC:
  1401                           	opt stack 0
  1402  0049'                    	ds	10
  1403  0053'                    LCD_DrawRectangle@p4:
  1404                           	opt stack 0
  1405  0053'                    	ds	4
  1406  0057'                    LCD_DrawRectangle@p2:
  1407                           	opt stack 0
  1408  0057'                    	ds	4
  1409                           tblptru	equ	0xFF8
  1410                           tblptrh	equ	0xFF7
  1411                           tblptrl	equ	0xFF6
  1412                           tablat	equ	0xFF5
  1413                           postinc0	equ	0xFEE
  1414                           wreg	equ	0xFE8
  1415                           postdec1	equ	0xFE5
  1416                           fsr1h	equ	0xFE2
  1417                           fsr1l	equ	0xFE1
  1418                           
  1419                           	psect	dataBANK0
  1420  0000'                    __pdataBANK0:
  1421                           	opt stack 0
  1422  0000'                    _gCharSize:
  1423                           	opt stack 0
  1424  0000'                    	ds	4
  1425  0004'                    _gForecolour:
  1426                           	opt stack 0
  1427  0004'                    	ds	2
  1428  0006'                    _change:
  1429                           	opt stack 0
  1430  0006'                    	ds	1
  1431                           tblptru	equ	0xFF8
  1432                           tblptrh	equ	0xFF7
  1433                           tblptrl	equ	0xFF6
  1434                           tablat	equ	0xFF5
  1435                           postinc0	equ	0xFEE
  1436                           wreg	equ	0xFE8
  1437                           postdec1	equ	0xFE5
  1438                           fsr1h	equ	0xFE2
  1439                           fsr1l	equ	0xFE1
  1440                           
  1441                           	psect	bssBANK3
  1442  0000'                    __pbssBANK3:
  1443                           	opt stack 0
  1444  0000'                    _lCBuffer:
  1445                           	opt stack 0
  1446  0000'                    	ds	30
  1447  001E'                    _iRAngleSS:
  1448                           	opt stack 0
  1449  001E'                    	ds	4
  1450  0022'                    Timer2_Init@DIV:
  1451                           	opt stack 0
  1452  0022'                    	ds	4
  1453  0026'                    Timer0_Init@DIV:
  1454                           	opt stack 0
  1455  0026'                    	ds	4
  1456  002A'                    _I2C2_More:
  1457                           	opt stack 0
  1458  002A'                    	ds	3
  1459  002D'                    _I2C1_More:
  1460                           	opt stack 0
  1461  002D'                    	ds	3
  1462  0030'                    _I2C2_Done:
  1463                           	opt stack 0
  1464  0030'                    	ds	3
  1465  0033'                    _I2C1_Done:
  1466                           	opt stack 0
  1467  0033'                    	ds	3
  1468  0036'                    _dip:
  1469                           	opt stack 0
  1470  0036'                    	ds	2
  1471  0038'                    _HMIBoard:
  1472                           	opt stack 0
  1473  0038'                    	ds	58
  1474  0072'                    _SPI1:
  1475                           	opt stack 0
  1476  0072'                    	ds	11
  1477  007D'                    _SPI2:
  1478                           	opt stack 0
  1479  007D'                    	ds	11
  1480  0088'                    _DIPSwitch:
  1481                           	opt stack 0
  1482  0088'                    	ds	10
  1483  0092'                    _TestButton:
  1484                           	opt stack 0
  1485  0092'                    	ds	10
  1486  009C'                    _PortG:
  1487                           	opt stack 0
  1488  009C'                    	ds	10
  1489  00A6'                    _PortB:
  1490                           	opt stack 0
  1491  00A6'                    	ds	10
  1492  00B0'                    _PortA:
  1493                           	opt stack 0
  1494  00B0'                    	ds	10
  1495  00BA'                    _PortF:
  1496                           	opt stack 0
  1497  00BA'                    	ds	10
  1498  00C4'                    _I2C2T:
  1499                           	opt stack 0
  1500  00C4'                    	ds	7
  1501  00CB'                    _ADC_AN3:
  1502                           	opt stack 0
  1503  00CB'                    	ds	5
  1504  00D0'                    _ADC_AN2:
  1505                           	opt stack 0
  1506  00D0'                    	ds	5
  1507  00D5'                    _ADC_AN1:
  1508                           	opt stack 0
  1509  00D5'                    	ds	5
  1510  00DA'                    _ADC_AN0:
  1511                           	opt stack 0
  1512  00DA'                    	ds	5
  1513                           tblptru	equ	0xFF8
  1514                           tblptrh	equ	0xFF7
  1515                           tblptrl	equ	0xFF6
  1516                           tablat	equ	0xFF5
  1517                           postinc0	equ	0xFEE
  1518                           wreg	equ	0xFE8
  1519                           postdec1	equ	0xFE5
  1520                           fsr1h	equ	0xFE2
  1521                           fsr1l	equ	0xFE1
  1522                           
  1523                           	psect	dataBANK3
  1524  0000'                    __pdataBANK3:
  1525                           	opt stack 0
  1526  0000'                    Console_Render@F6956:
  1527                           	opt stack 0
  1528  0000'                    	ds	4
  1529  0004'                    _gLineSize:
  1530                           	opt stack 0
  1531  0004'                    	ds	4
  1532                           tblptru	equ	0xFF8
  1533                           tblptrh	equ	0xFF7
  1534                           tblptrl	equ	0xFF6
  1535                           tablat	equ	0xFF5
  1536                           postinc0	equ	0xFEE
  1537                           wreg	equ	0xFE8
  1538                           postdec1	equ	0xFE5
  1539                           fsr1h	equ	0xFE2
  1540                           fsr1l	equ	0xFE1
  1541                           
  1542                           	psect	bssBANK4
  1543  0000'                    __pbssBANK4:
  1544                           	opt stack 0
  1545  0000'                    _iRScriptStack:
  1546                           	opt stack 0
  1547  0000'                    	ds	100
  1548  0064'                    Console_MakeField@Fill:
  1549                           	opt stack 0
  1550  0064'                    	ds	70
  1551                           tblptru	equ	0xFF8
  1552                           tblptrh	equ	0xFF7
  1553                           tblptrl	equ	0xFF6
  1554                           tablat	equ	0xFF5
  1555                           postinc0	equ	0xFEE
  1556                           wreg	equ	0xFE8
  1557                           postdec1	equ	0xFE5
  1558                           fsr1h	equ	0xFE2
  1559                           fsr1l	equ	0xFE1
  1560                           
  1561                           	psect	bssBIGRAM
  1562  0000'                    __pbssBIGRAM:
  1563                           	opt stack 0
  1564  0000'                    _lBuffer:
  1565                           	opt stack 0
  1566  0000'                    	ds	300
  1567                           tblptru	equ	0xFF8
  1568                           tblptrh	equ	0xFF7
  1569                           tblptrl	equ	0xFF6
  1570                           tablat	equ	0xFF5
  1571                           postinc0	equ	0xFEE
  1572                           wreg	equ	0xFE8
  1573                           postdec1	equ	0xFE5
  1574                           fsr1h	equ	0xFE2
  1575                           fsr1l	equ	0xFE1
  1576                           
  1577                           	psect	cstackBANK3
  1578  0000'                    __pcstackBANK3:
  1579                           	opt stack 0
  1580  0000'                    ??_main:
  1581                           
  1582                           ; 1 bytes @ 0x0
  1583  0000'                    	ds	2
  1584                           tblptru	equ	0xFF8
  1585                           tblptrh	equ	0xFF7
  1586                           tblptrl	equ	0xFF6
  1587                           tablat	equ	0xFF5
  1588                           postinc0	equ	0xFEE
  1589                           wreg	equ	0xFE8
  1590                           postdec1	equ	0xFE5
  1591                           fsr1h	equ	0xFE2
  1592                           fsr1l	equ	0xFE1
  1593                           
  1594                           	psect	cstackBANK2
  1595  0000'                    __pcstackBANK2:
  1596                           	opt stack 0
  1597  0000'                    irobot_query_and_update@TXArray:
  1598                           	opt stack 0
  1599                           
  1600                           ; 256 bytes @ 0x0
  1601  0000'                    	ds	256
  1602                           tblptru	equ	0xFF8
  1603                           tblptrh	equ	0xFF7
  1604                           tblptrl	equ	0xFF6
  1605                           tablat	equ	0xFF5
  1606                           postinc0	equ	0xFEE
  1607                           wreg	equ	0xFE8
  1608                           postdec1	equ	0xFE5
  1609                           fsr1h	equ	0xFE2
  1610                           fsr1l	equ	0xFE1
  1611                           
  1612                           	psect	cstackBANK1
  1613  0000'                    __pcstackBANK1:
  1614                           	opt stack 0
  1615  0000'                    ??_Port_SetType:
  1616  0000'                    Button_Init@pInput:
  1617                           	opt stack 0
  1618  0000'                    irobot_query_and_update@RXArray:
  1619                           	opt stack 0
  1620                           
  1621                           ; 256 bytes @ 0x0
  1622  0000'                    	ds	2
  1623  0002'                    Button_Init@pThreshold:
  1624                           	opt stack 0
  1625  0002'                    Port_Init@pInput:
  1626                           	opt stack 0
  1627                           
  1628                           ; 2 bytes @ 0x2
  1629  0002'                    	ds	2
  1630  0004'                    Port_Init@pPort:
  1631                           	opt stack 0
  1632  0004'                    Button_Init@pInitIO:
  1633                           	opt stack 0
  1634                           
  1635                           ; 3 bytes @ 0x4
  1636  0004'                    	ds	1
  1637  0005'                    ??_Port_Init:
  1638                           
  1639                           ; 1 bytes @ 0x5
  1640  0005'                    	ds	2
  1641  0007'                    Port_Init@i:
  1642                           	opt stack 0
  1643  0007'                    Button_Init@pGetState:
  1644                           	opt stack 0
  1645                           
  1646                           ; 3 bytes @ 0x7
  1647  0007'                    	ds	3
  1648  000A'                    Button_Init@pFunction:
  1649                           	opt stack 0
  1650                           
  1651                           ; 3 bytes @ 0xA
  1652  000A'                    	ds	246
  1653                           tblptru	equ	0xFF8
  1654                           tblptrh	equ	0xFF7
  1655                           tblptrl	equ	0xFF6
  1656                           tablat	equ	0xFF5
  1657                           postinc0	equ	0xFEE
  1658                           wreg	equ	0xFE8
  1659                           postdec1	equ	0xFE5
  1660                           fsr1h	equ	0xFE2
  1661                           fsr1l	equ	0xFE1
  1662                           
  1663                           	psect	cstackBANK0
  1664  0000'                    __pcstackBANK0:
  1665                           	opt stack 0
  1666  0000'                    ??_Console_ClearCursor:
  1667  0000'                    ??_sort_iRBumpDrop:
  1668  0000'                    ?_load_iRScriptStack:
  1669                           	opt stack 0
  1670  0000'                    ??_Console_Init:
  1671  0000'                    ??_Console_NewLine:
  1672  0000'                    ??_Console_FormFeed:
  1673  0000'                    ??_HMI_SetButton:
  1674  0000'                    ?_GetPortProperties:
  1675                           	opt stack 0
  1676  0000'                    ?_GetPortPORT:
  1677                           	opt stack 0
  1678  0000'                    ?_GetPortTRIS:
  1679                           	opt stack 0
  1680  0000'                    ?_twos_complement_of:
  1681                           	opt stack 0
  1682  0000'                    ?___wmul:
  1683                           	opt stack 0
  1684  0000'                    ?___awdiv:
  1685                           	opt stack 0
  1686  0000'                    ?___lwdiv:
  1687                           	opt stack 0
  1688  0000'                    ?___lldiv:
  1689                           	opt stack 0
  1690  0000'                    Mode_Set@pMode:
  1691                           	opt stack 0
  1692  0000'                    ToSegment@pCHR:
  1693                           	opt stack 0
  1694  0000'                    HMI_SetBar@pValue:
  1695                           	opt stack 0
  1696  0000'                    get_packet_size@packetID:
  1697                           	opt stack 0
  1698  0000'                    eusart_putch@eusartSendChar:
  1699                           	opt stack 0
  1700  0000'                    Port_GetPin@pInput:
  1701                           	opt stack 0
  1702  0000'                    Port_GetQuad@pInput:
  1703                           	opt stack 0
  1704  0000'                    SPI_DisableISR@pInput:
  1705                           	opt stack 0
  1706  0000'                    SPI_DCS@pInput:
  1707                           	opt stack 0
  1708  0000'                    SPI_Send@pInput:
  1709                           	opt stack 0
  1710  0000'                    Byte_SetBit@pInput:
  1711                           	opt stack 0
  1712  0000'                    Byte_GetBit@pInput:
  1713                           	opt stack 0
  1714  0000'                    Byte_SetZone@pInput:
  1715                           	opt stack 0
  1716  0000'                    Byte_GetZone@pInput:
  1717                           	opt stack 0
  1718  0000'                    Byte_SetByte@pInput:
  1719                           	opt stack 0
  1720  0000'                    delay_ms@ms:
  1721                           	opt stack 0
  1722  0000'                    delay_us@us:
  1723                           	opt stack 0
  1724  0000'                    reverse@input:
  1725                           	opt stack 0
  1726  0000'                    twos_complement_of@complementValue:
  1727                           	opt stack 0
  1728  0000'                    ___wmul@multiplier:
  1729                           	opt stack 0
  1730  0000'                    ___awdiv@dividend:
  1731                           	opt stack 0
  1732  0000'                    ___lwdiv@dividend:
  1733                           	opt stack 0
  1734  0000'                    MXK_Queue@pCallback:
  1735                           	opt stack 0
  1736  0000'                    ___lldiv@dividend:
  1737                           	opt stack 0
  1738                           
  1739                           ; 4 bytes @ 0x0
  1740  0000'                    	ds	1
  1741  0001'                    rx_assign@packetIDValue:
  1742                           	opt stack 0
  1743  0001'                    irobot_song_play@songNumber:
  1744                           	opt stack 0
  1745  0001'                    HMI_SetSegments@pString:
  1746                           	opt stack 0
  1747                           
  1748                           ; 2 bytes @ 0x1
  1749  0001'                    	ds	1
  1750  0002'                    GetPortProperties@pInput:
  1751                           	opt stack 0
  1752  0002'                    GetPortPORT@pInput:
  1753                           	opt stack 0
  1754  0002'                    GetPortTRIS@pInput:
  1755                           	opt stack 0
  1756  0002'                    Port_GetPin@pPin:
  1757                           	opt stack 0
  1758  0002'                    Port_GetQuad@pQuad:
  1759                           	opt stack 0
  1760  0002'                    SPI_Send@pData:
  1761                           	opt stack 0
  1762  0002'                    Byte_SetBit@pBit:
  1763                           	opt stack 0
  1764  0002'                    Byte_GetBit@pBit:
  1765                           	opt stack 0
  1766  0002'                    Byte_SetZone@pMax:
  1767                           	opt stack 0
  1768  0002'                    Byte_GetZone@pMax:
  1769                           	opt stack 0
  1770  0002'                    Byte_SetByte@pValue:
  1771                           	opt stack 0
  1772  0002'                    Console_Init@x:
  1773                           	opt stack 0
  1774  0002'                    Console_FormFeed@x:
  1775                           	opt stack 0
  1776  0002'                    rx_assign@byteNumber:
  1777                           	opt stack 0
  1778  0002'                    reverse@length:
  1779                           	opt stack 0
  1780  0002'                    ___wmul@multiplicand:
  1781                           	opt stack 0
  1782  0002'                    ___awdiv@divisor:
  1783                           	opt stack 0
  1784  0002'                    ___lwdiv@divisor:
  1785                           	opt stack 0
  1786  0002'                    delay_ms@u:
  1787                           	opt stack 0
  1788  0002'                    delay_us@u:
  1789                           	opt stack 0
  1790  0002'                    HMI_SetButton@reindex:
  1791                           	opt stack 0
  1792                           
  1793                           ; 4 bytes @ 0x2
  1794  0002'                    	ds	1
  1795  0003'                    ??_Port_GetPin:
  1796  0003'                    ??_Port_GetQuad:
  1797  0003'                    ??_Byte_GetBit:
  1798  0003'                    ??_rx_assign:
  1799  0003'                    LCD_Write@mode:
  1800                           	opt stack 0
  1801  0003'                    Byte_SetBit@pValue:
  1802                           	opt stack 0
  1803  0003'                    Byte_SetZone@pChunk:
  1804                           	opt stack 0
  1805  0003'                    Byte_GetZone@pChunk:
  1806                           	opt stack 0
  1807  0003'                    Console_Init@y:
  1808                           	opt stack 0
  1809  0003'                    Console_FormFeed@y:
  1810                           	opt stack 0
  1811                           
  1812                           ; 1 bytes @ 0x3
  1813  0003'                    	ds	1
  1814  0004'                    ??_Byte_SetBit:
  1815  0004'                    ??_Console_IncrementCursor:
  1816  0004'                    LCD_Write@value:
  1817                           	opt stack 0
  1818  0004'                    Byte_GetBit@Output:
  1819                           	opt stack 0
  1820  0004'                    Byte_SetZone@pChunkSize:
  1821                           	opt stack 0
  1822  0004'                    Byte_GetZone@pChunkSize:
  1823                           	opt stack 0
  1824  0004'                    reverse@tempVar:
  1825                           	opt stack 0
  1826  0004'                    ___awdiv@counter:
  1827                           	opt stack 0
  1828  0004'                    ___lwdiv@counter:
  1829                           	opt stack 0
  1830  0004'                    HMI_SetSegments@in:
  1831                           	opt stack 0
  1832  0004'                    ___wmul@product:
  1833                           	opt stack 0
  1834  0004'                    ___lldiv@divisor:
  1835                           	opt stack 0
  1836                           
  1837                           ; 4 bytes @ 0x4
  1838  0004'                    	ds	1
  1839  0005'                    ??_Byte_GetZone:
  1840  0005'                    ?_Console_MakeField:
  1841                           	opt stack 0
  1842  0005'                    Set_Addr_Window@ys:
  1843                           	opt stack 0
  1844  0005'                    Set_Rotation@m:
  1845                           	opt stack 0
  1846  0005'                    Port_GetPin@Output:
  1847                           	opt stack 0
  1848  0005'                    Port_GetQuad@Output:
  1849                           	opt stack 0
  1850  0005'                    Byte_SetZone@pValue:
  1851                           	opt stack 0
  1852  0005'                    rx_assign@packetID:
  1853                           	opt stack 0
  1854  0005'                    ___awdiv@sign:
  1855                           	opt stack 0
  1856  0005'                    LCD_Word_Write@value:
  1857                           	opt stack 0
  1858  0005'                    reverse@iterator:
  1859                           	opt stack 0
  1860  0005'                    ___lwdiv@quotient:
  1861                           	opt stack 0
  1862                           
  1863                           ; 2 bytes @ 0x5
  1864  0005'                    	ds	1
  1865  0006'                    ?_irobot_query_and_update:
  1866                           	opt stack 0
  1867  0006'                    ??_Byte_SetZone:
  1868  0006'                    Set_Addr_Window@xe:
  1869                           	opt stack 0
  1870  0006'                    Set_Rotation@rotation:
  1871                           	opt stack 0
  1872  0006'                    Byte_GetZone@MASK:
  1873                           	opt stack 0
  1874  0006'                    HMI_SetButton@pValue:
  1875                           	opt stack 0
  1876  0006'                    MXK_BlockSwitchTo@CUR:
  1877                           	opt stack 0
  1878  0006'                    MXK_SwitchTo@CUR:
  1879                           	opt stack 0
  1880  0006'                    ___awdiv@quotient:
  1881                           	opt stack 0
  1882                           
  1883                           ; 2 bytes @ 0x6
  1884  0006'                    	ds	1
  1885  0007'                    ??_Console_MakeField:
  1886  0007'                    ?___lwmod:
  1887                           	opt stack 0
  1888  0007'                    Set_Addr_Window@ye:
  1889                           	opt stack 0
  1890  0007'                    Byte_GetZone@Offset:
  1891                           	opt stack 0
  1892  0007'                    HMI_SetButton@v:
  1893                           	opt stack 0
  1894  0007'                    MXK_BlockSwitchTo@pModule:
  1895                           	opt stack 0
  1896  0007'                    MXK_SwitchTo@pModule:
  1897                           	opt stack 0
  1898  0007'                    ___lwmod@dividend:
  1899                           	opt stack 0
  1900                           
  1901                           ; 2 bytes @ 0x7
  1902  0007'                    	ds	1
  1903  0008'                    ??_Console_Tab:
  1904  0008'                    Set_Addr_Window@xs:
  1905                           	opt stack 0
  1906  0008'                    Byte_GetZone@Output:
  1907                           	opt stack 0
  1908  0008'                    ___lldiv@quotient:
  1909                           	opt stack 0
  1910                           
  1911                           ; 4 bytes @ 0x8
  1912  0008'                    	ds	1
  1913  0009'                    Byte_SetZone@Offset:
  1914                           	opt stack 0
  1915  0009'                    LCD_Fill@pColour:
  1916                           	opt stack 0
  1917  0009'                    LCD_FillRectangle@pColour:
  1918                           	opt stack 0
  1919  0009'                    Byte_GetPair@pInput:
  1920                           	opt stack 0
  1921  0009'                    Console_MakeField@Index:
  1922                           	opt stack 0
  1923  0009'                    ___lwmod@divisor:
  1924                           	opt stack 0
  1925                           
  1926                           ; 2 bytes @ 0x9
  1927  0009'                    	ds	1
  1928  000A'                    ??_load_iRScriptStack:
  1929  000A'                    Byte_SetZone@MASK:
  1930                           	opt stack 0
  1931                           
  1932                           ; 1 bytes @ 0xA
  1933  000A'                    	ds	1
  1934  000B'                    LCD_Fill@i:
  1935                           	opt stack 0
  1936  000B'                    Byte_GetPair@pPair:
  1937                           	opt stack 0
  1938  000B'                    Console_MakeField@pInput:
  1939                           	opt stack 0
  1940  000B'                    ___lwmod@counter:
  1941                           	opt stack 0
  1942  000B'                    Byte_SetPair@pInput:
  1943                           	opt stack 0
  1944  000B'                    Byte_SetQuad@pInput:
  1945                           	opt stack 0
  1946  000B'                    LCD_FillRectangle@pPoint:
  1947                           	opt stack 0
  1948                           
  1949                           ; 4 bytes @ 0xB
  1950  000B'                    	ds	1
  1951  000C'                    LCD_Fill@j:
  1952                           	opt stack 0
  1953  000C'                    ___lldiv@counter:
  1954                           	opt stack 0
  1955  000C'                    Word_GetPair@pInput:
  1956                           	opt stack 0
  1957  000C'                    itos@input:
  1958                           	opt stack 0
  1959  000C'                    Console_MakeField@Column:
  1960                           	opt stack 0
  1961  000C'                    load_iRScriptStack@loadByte:
  1962                           	opt stack 0
  1963                           
  1964                           ; 2 bytes @ 0xC
  1965  000C'                    	ds	1
  1966  000D'                    Byte_SetPair@pPair:
  1967                           	opt stack 0
  1968  000D'                    Byte_SetQuad@pQuad:
  1969                           	opt stack 0
  1970  000D'                    Console_Tab@t:
  1971                           	opt stack 0
  1972  000D'                    Timer2_Init@pFrequency:
  1973                           	opt stack 0
  1974                           
  1975                           ; 4 bytes @ 0xD
  1976  000D'                    	ds	1
  1977  000E'                    Byte_SetPair@pValue:
  1978                           	opt stack 0
  1979  000E'                    Byte_SetQuad@pValue:
  1980                           	opt stack 0
  1981  000E'                    Word_GetPair@pPair:
  1982                           	opt stack 0
  1983  000E'                    Console_Tab@i:
  1984                           	opt stack 0
  1985  000E'                    load_iRScriptStack@bytesToLoad:
  1986                           	opt stack 0
  1987  000E'                    itos@destination:
  1988                           	opt stack 0
  1989  000E'                    _Console_MakeField$10974:
  1990                           	opt stack 0
  1991                           
  1992                           ; 2 bytes @ 0xE
  1993  000E'                    	ds	1
  1994  000F'                    Console_Tab@c:
  1995                           	opt stack 0
  1996  000F'                    load_iRScriptStack@i:
  1997                           	opt stack 0
  1998  000F'                    Port_SetPin@pInput:
  1999                           	opt stack 0
  2000  000F'                    Port_Set@pInput:
  2001                           	opt stack 0
  2002  000F'                    SPI_MinSpeed@pInput:
  2003                           	opt stack 0
  2004  000F'                    SPI_MaxSpeed@pInput:
  2005                           	opt stack 0
  2006  000F'                    Word_SetPair@pInput:
  2007                           	opt stack 0
  2008  000F'                    PortProperty_Valid@pInput:
  2009                           	opt stack 0
  2010  000F'                    LCD_FillRectangle@pSize:
  2011                           	opt stack 0
  2012                           
  2013                           ; 4 bytes @ 0xF
  2014  000F'                    	ds	1
  2015  0010'                    ??_irobot_query_and_update:
  2016  0010'                    ??_Console_PrintChar:
  2017  0010'                    Console_MakeField@x:
  2018                           	opt stack 0
  2019  0010'                    irobot_leds@LEDBit:
  2020                           	opt stack 0
  2021  0010'                    itos@Data:
  2022                           	opt stack 0
  2023  0010'                    irobot_move@moveSpeed:
  2024                           	opt stack 0
  2025                           
  2026                           ; 2 bytes @ 0x10
  2027  0010'                    	ds	1
  2028  0011'                    ??_Timer2_Init:
  2029  0011'                    Port_SetPin@pPin:
  2030                           	opt stack 0
  2031  0011'                    Port_Set@pValue:
  2032                           	opt stack 0
  2033  0011'                    Word_SetPair@pPair:
  2034                           	opt stack 0
  2035  0011'                    PortProperty_Valid@pPinDrive:
  2036                           	opt stack 0
  2037  0011'                    Console_MakeField@y:
  2038                           	opt stack 0
  2039  0011'                    irobot_leds@powerColour:
  2040                           	opt stack 0
  2041                           
  2042                           ; 1 bytes @ 0x11
  2043  0011'                    	ds	1
  2044  0012'                    ??_Port_Set:
  2045  0012'                    Port_SetPin@pValue:
  2046                           	opt stack 0
  2047  0012'                    Word_SetPair@pValue:
  2048                           	opt stack 0
  2049  0012'                    PortProperty_Valid@pPin:
  2050                           	opt stack 0
  2051  0012'                    irobot_leds@powerLuminosity:
  2052                           	opt stack 0
  2053  0012'                    LCD_DrawField@pField:
  2054                           	opt stack 0
  2055  0012'                    itos@Length:
  2056                           	opt stack 0
  2057  0012'                    irobot_move@moveTurnRadius:
  2058                           	opt stack 0
  2059  0012'                    Timer2_Init@RDIV:
  2060                           	opt stack 0
  2061                           
  2062                           ; 4 bytes @ 0x12
  2063  0012'                    	ds	1
  2064  0013'                    ??_PortProperty_Valid:
  2065  0013'                    ??_LCD_FillRectangle:
  2066  0013'                    Port_SetPin@Type:
  2067                           	opt stack 0
  2068  0013'                    Console_PrintChar@pInput:
  2069                           	opt stack 0
  2070  0013'                    irobot_leds@isScript:
  2071                           	opt stack 0
  2072                           
  2073                           ; 1 bytes @ 0x13
  2074  0013'                    	ds	1
  2075  0014'                    ??_irobot_move:
  2076  0014'                    LED_Set@pValue:
  2077                           	opt stack 0
  2078  0014'                    putch@c:
  2079                           	opt stack 0
  2080  0014'                    irobot_led_power_on@powerOnColour:
  2081                           	opt stack 0
  2082  0014'                    Port_TogglePin@pInput:
  2083                           	opt stack 0
  2084  0014'                    itos@Out:
  2085                           	opt stack 0
  2086  0014'                    LCD_DrawField@pPoint:
  2087                           	opt stack 0
  2088                           
  2089                           ; 4 bytes @ 0x14
  2090  0014'                    	ds	1
  2091  0015'                    ?_printf:
  2092                           	opt stack 0
  2093  0015'                    LCD_FillRectangle@i:
  2094                           	opt stack 0
  2095  0015'                    LED_Set@pLED:
  2096                           	opt stack 0
  2097  0015'                    irobot_query_and_update@packetIDs:
  2098                           	opt stack 0
  2099  0015'                    printf@f:
  2100                           	opt stack 0
  2101  0015'                    PortProperty_Valid@Errors:
  2102                           	opt stack 0
  2103                           
  2104                           ; 16 bytes @ 0x15
  2105  0015'                    	ds	1
  2106  0016'                    LCD_FillRectangle@j:
  2107                           	opt stack 0
  2108  0016'                    Port_TogglePin@pPin:
  2109                           	opt stack 0
  2110  0016'                    HMI_SetNumber@pInput:
  2111                           	opt stack 0
  2112  0016'                    Timer2_Init@pCPUClock:
  2113                           	opt stack 0
  2114                           
  2115                           ; 4 bytes @ 0x16
  2116  0016'                    	ds	1
  2117  0017'                    Port_TogglePin@Value:
  2118                           	opt stack 0
  2119  0017'                    irobot_query_and_update@streamSize:
  2120                           	opt stack 0
  2121                           
  2122                           ; 1 bytes @ 0x17
  2123  0017'                    	ds	1
  2124  0018'                    LED_Toggle@pLED:
  2125                           	opt stack 0
  2126  0018'                    irobot_query_and_update@numberOfPacketRequests:
  2127                           	opt stack 0
  2128  0018'                    irobot_move@isScript:
  2129                           	opt stack 0
  2130  0018'                    LCD_DrawField@pSize:
  2131                           	opt stack 0
  2132                           
  2133                           ; 4 bytes @ 0x18
  2134  0018'                    	ds	1
  2135  0019'                    Event_DIPSwitch@pState:
  2136                           	opt stack 0
  2137  0019'                    Event_TestButton@pState:
  2138                           	opt stack 0
  2139  0019'                    irobot_query_and_update@packetVariable:
  2140                           	opt stack 0
  2141  0019'                    irobot_stop_motion@isScript:
  2142                           	opt stack 0
  2143  0019'                    irobot_rotate@rotateAngle:
  2144                           	opt stack 0
  2145  0019'                    irobot_move_straight@straightSpeed:
  2146                           	opt stack 0
  2147                           
  2148                           ; 2 bytes @ 0x19
  2149  0019'                    	ds	1
  2150  001A'                    Event_DIPSwitch@Bar:
  2151                           	opt stack 0
  2152  001A'                    irobot_query_and_update@j:
  2153                           	opt stack 0
  2154  001A'                    Timer2_Init@DIVIDE:
  2155                           	opt stack 0
  2156                           
  2157                           ; 4 bytes @ 0x1A
  2158  001A'                    	ds	1
  2159  001B'                    irobot_query_and_update@startIndex:
  2160                           	opt stack 0
  2161  001B'                    Button_Poll@pButton:
  2162                           	opt stack 0
  2163  001B'                    irobot_rotate@rotateSpeed:
  2164                           	opt stack 0
  2165                           
  2166                           ; 2 bytes @ 0x1B
  2167  001B'                    	ds	1
  2168  001C'                    ??_LCD_DrawField:
  2169  001C'                    irobot_query_and_update@i:
  2170                           	opt stack 0
  2171                           
  2172                           ; 1 bytes @ 0x1C
  2173  001C'                    	ds	1
  2174  001D'                    ??_printf:
  2175  001D'                    Button_Poll@pIncrement:
  2176                           	opt stack 0
  2177  001D'                    irobot_rotate@isScript:
  2178                           	opt stack 0
  2179                           
  2180                           ; 1 bytes @ 0x1D
  2181  001D'                    	ds	1
  2182  001E'                    ??_Button_Poll:
  2183  001E'                    printf@prec:
  2184                           	opt stack 0
  2185  001E'                    LCD_DrawField@count:
  2186                           	opt stack 0
  2187                           
  2188                           ; 2 bytes @ 0x1E
  2189  001E'                    	ds	1
  2190  001F'                    printf@flag:
  2191                           	opt stack 0
  2192                           
  2193                           ; 1 bytes @ 0x1F
  2194  001F'                    	ds	1
  2195  0020'                    LCD_DrawField@xmax:
  2196                           	opt stack 0
  2197  0020'                    printf@ap:
  2198                           	opt stack 0
  2199                           
  2200                           ; 2 bytes @ 0x20
  2201  0020'                    	ds	1
  2202  0021'                    LCD_DrawField@ymax:
  2203                           	opt stack 0
  2204                           
  2205                           ; 1 bytes @ 0x21
  2206  0021'                    	ds	1
  2207  0022'                    LCD_DrawField@i:
  2208                           	opt stack 0
  2209  0022'                    Port_Set@TypeRequired:
  2210                           	opt stack 0
  2211  0022'                    printf@val:
  2212                           	opt stack 0
  2213                           
  2214                           ; 2 bytes @ 0x22
  2215  0022'                    	ds	1
  2216  0023'                    ??_Console_Render:
  2217  0023'                    Button_Poll@Pin:
  2218                           	opt stack 0
  2219                           
  2220                           ; 1 bytes @ 0x23
  2221  0023'                    	ds	1
  2222  0024'                    printf@c:
  2223                           	opt stack 0
  2224  0024'                    Port_Set@TypeActual:
  2225                           	opt stack 0
  2226                           
  2227                           ; 2 bytes @ 0x24
  2228  0024'                    	ds	1
  2229  0025'                    PortProperty_Valid@Pair:
  2230                           	opt stack 0
  2231  0025'                    Console_Render@temp:
  2232                           	opt stack 0
  2233                           
  2234                           ; 1 bytes @ 0x25
  2235  0025'                    	ds	1
  2236  0026'                    Port_Set@Type:
  2237                           	opt stack 0
  2238  0026'                    Port_CheckPairType@pInput:
  2239                           	opt stack 0
  2240  0026'                    Port_SetPinType@pInput:
  2241                           	opt stack 0
  2242  0026'                    Console_Render@lCursor:
  2243                           	opt stack 0
  2244                           
  2245                           ; 4 bytes @ 0x26
  2246  0026'                    	ds	2
  2247  0028'                    Port_CheckPairType@pPair:
  2248                           	opt stack 0
  2249  0028'                    Port_SetPinType@pPin:
  2250                           	opt stack 0
  2251                           
  2252                           ; 1 bytes @ 0x28
  2253  0028'                    	ds	1
  2254  0029'                    Port_CheckPairType@pDrive:
  2255                           	opt stack 0
  2256  0029'                    Port_SetPinType@pType:
  2257                           	opt stack 0
  2258                           
  2259                           ; 1 bytes @ 0x29
  2260  0029'                    	ds	1
  2261  002A'                    Port_CheckPairType@Pin1:
  2262                           	opt stack 0
  2263  002A'                    Port_SetPinType@Output:
  2264                           	opt stack 0
  2265  002A'                    Console_Render@x:
  2266                           	opt stack 0
  2267                           
  2268                           ; 1 bytes @ 0x2A
  2269  002A'                    	ds	1
  2270  002B'                    Port_CheckPairType@Pin2:
  2271                           	opt stack 0
  2272  002B'                    Console_Render@y:
  2273                           	opt stack 0
  2274  002B'                    Port_SetPinType@Props:
  2275                           	opt stack 0
  2276                           
  2277                           ; 2 bytes @ 0x2B
  2278  002B'                    	ds	1
  2279  002C'                    Port_CheckPairType@Output:
  2280                           	opt stack 0
  2281  002C'                    mode2@dist:
  2282                           	opt stack 0
  2283                           
  2284                           ; 2 bytes @ 0x2C
  2285  002C'                    	ds	1
  2286  002D'                    LED_Init@pLED:
  2287                           	opt stack 0
  2288  002D'                    Port_CheckPairType@Props:
  2289                           	opt stack 0
  2290  002D'                    SPI_Init@pClock:
  2291                           	opt stack 0
  2292                           
  2293                           ; 4 bytes @ 0x2D
  2294  002D'                    	ds	2
  2295  002F'                    Port_CheckQuadType@pInput:
  2296                           	opt stack 0
  2297                           
  2298                           ; 2 bytes @ 0x2F
  2299  002F'                    	ds	2
  2300  0031'                    Port_CheckQuadType@pQuad:
  2301                           	opt stack 0
  2302  0031'                    SPI_Init@pChannel:
  2303                           	opt stack 0
  2304                           
  2305                           ; 1 bytes @ 0x31
  2306  0031'                    	ds	1
  2307  0032'                    Port_CheckQuadType@pDrive:
  2308                           	opt stack 0
  2309  0032'                    SPI_Init@pMode:
  2310                           	opt stack 0
  2311                           
  2312                           ; 1 bytes @ 0x32
  2313  0032'                    	ds	1
  2314  0033'                    Port_CheckQuadType@Pair1:
  2315                           	opt stack 0
  2316  0033'                    SPI_Init@pInput:
  2317                           	opt stack 0
  2318                           
  2319                           ; 2 bytes @ 0x33
  2320  0033'                    	ds	1
  2321  0034'                    Port_CheckQuadType@Pair2:
  2322                           	opt stack 0
  2323                           
  2324                           ; 1 bytes @ 0x34
  2325  0034'                    	ds	1
  2326  0035'                    ??_LCD_Init:
  2327  0035'                    Port_CheckQuadType@Output:
  2328                           	opt stack 0
  2329                           
  2330                           ; 1 bytes @ 0x35
  2331  0035'                    	ds	1
  2332  0036'                    Port_CheckPortType@pInput:
  2333                           	opt stack 0
  2334  0036'                    Port_SetQuadType@pInput:
  2335                           	opt stack 0
  2336                           
  2337                           ; 2 bytes @ 0x36
  2338  0036'                    	ds	1
  2339  0037'                    LCD_Init@i:
  2340                           	opt stack 0
  2341                           
  2342                           ; 2 bytes @ 0x37
  2343  0037'                    	ds	1
  2344  0038'                    Port_CheckPortType@pDrive:
  2345                           	opt stack 0
  2346  0038'                    Port_SetQuadType@pQuad:
  2347                           	opt stack 0
  2348                           
  2349                           ; 1 bytes @ 0x38
  2350  0038'                    	ds	1
  2351  0039'                    Port_CheckPortType@Output:
  2352                           	opt stack 0
  2353  0039'                    Port_SetQuadType@pType:
  2354                           	opt stack 0
  2355                           
  2356                           ; 1 bytes @ 0x39
  2357  0039'                    	ds	1
  2358  003A'                    Port_SetQuadType@Output:
  2359                           	opt stack 0
  2360  003A'                    Port_SetType@pInput:
  2361                           	opt stack 0
  2362                           
  2363                           ; 2 bytes @ 0x3A
  2364  003A'                    	ds	1
  2365  003B'                    HMI_Init@in:
  2366                           	opt stack 0
  2367                           
  2368                           ; 2 bytes @ 0x3B
  2369  003B'                    	ds	1
  2370  003C'                    Port_SetType@pType:
  2371                           	opt stack 0
  2372                           
  2373                           ; 1 bytes @ 0x3C
  2374  003C'                    	ds	1
  2375  003D'                    Port_SetType@Output:
  2376                           	opt stack 0
  2377                           
  2378                           ; 1 bytes @ 0x3D
  2379  003D'                    	ds	1
  2380  003E'                    tblptru	equ	0xFF8
  2381                           tblptrh	equ	0xFF7
  2382                           tblptrl	equ	0xFF6
  2383                           tablat	equ	0xFF5
  2384                           postinc0	equ	0xFEE
  2385                           wreg	equ	0xFE8
  2386                           postdec1	equ	0xFE5
  2387                           fsr1h	equ	0xFE2
  2388                           fsr1l	equ	0xFE1
  2389                           
  2390                           ; 1 bytes @ 0x3E
  2391                           
  2392                           	psect	cstackCOMRAM
  2393  0000'                    __pcstackCOMRAM:
  2394                           	opt stack 0
  2395  0000'                    i2Byte_SetBit@pInput:
  2396                           	opt stack 0
  2397  0000'                    i2Byte_GetZone@pInput:
  2398                           	opt stack 0
  2399  0000'                    i2delay_us@us:
  2400                           	opt stack 0
  2401  0000'                    i2MXK_Queue@pCallback:
  2402                           	opt stack 0
  2403                           
  2404                           ; 3 bytes @ 0x0
  2405  0000'                    	ds	2
  2406  0002'                    i2Byte_SetBit@pBit:
  2407                           	opt stack 0
  2408  0002'                    i2Byte_GetZone@pMax:
  2409                           	opt stack 0
  2410  0002'                    i2delay_us@u:
  2411                           	opt stack 0
  2412                           
  2413                           ; 4 bytes @ 0x2
  2414  0002'                    	ds	1
  2415  0003'                    i2Byte_SetBit@pValue:
  2416                           	opt stack 0
  2417  0003'                    i2Byte_GetZone@pChunk:
  2418                           	opt stack 0
  2419                           
  2420                           ; 1 bytes @ 0x3
  2421  0003'                    	ds	1
  2422  0004'                    ??i2_Byte_SetBit:
  2423  0004'                    i2Byte_GetZone@pChunkSize:
  2424                           	opt stack 0
  2425                           
  2426                           ; 1 bytes @ 0x4
  2427  0004'                    	ds	1
  2428  0005'                    ??i2_Byte_GetZone:
  2429                           
  2430                           ; 1 bytes @ 0x5
  2431  0005'                    	ds	1
  2432  0006'                    i2Byte_GetZone@MASK:
  2433                           	opt stack 0
  2434  0006'                    i2MXK_SwitchTo@CUR:
  2435                           	opt stack 0
  2436                           
  2437                           ; 1 bytes @ 0x6
  2438  0006'                    	ds	1
  2439  0007'                    i2Byte_GetZone@Offset:
  2440                           	opt stack 0
  2441  0007'                    i2MXK_SwitchTo@pModule:
  2442                           	opt stack 0
  2443                           
  2444                           ; 1 bytes @ 0x7
  2445  0007'                    	ds	1
  2446  0008'                    i2Byte_GetZone@Output:
  2447                           	opt stack 0
  2448                           
  2449                           ; 1 bytes @ 0x8
  2450  0008'                    	ds	1
  2451  0009'                    i2Byte_GetPair@pInput:
  2452                           	opt stack 0
  2453                           
  2454                           ; 2 bytes @ 0x9
  2455  0009'                    	ds	2
  2456  000B'                    i2Byte_GetPair@pPair:
  2457                           	opt stack 0
  2458                           
  2459                           ; 1 bytes @ 0xB
  2460  000B'                    	ds	1
  2461  000C'                    i2Word_GetPair@pInput:
  2462                           	opt stack 0
  2463                           
  2464                           ; 2 bytes @ 0xC
  2465  000C'                    	ds	2
  2466  000E'                    i2Word_GetPair@pPair:
  2467                           	opt stack 0
  2468                           
  2469                           ; 1 bytes @ 0xE
  2470  000E'                    	ds	1
  2471  000F'                    i2Port_SetPin@pInput:
  2472                           	opt stack 0
  2473                           
  2474                           ; 2 bytes @ 0xF
  2475  000F'                    	ds	2
  2476  0011'                    i2Port_SetPin@pPin:
  2477                           	opt stack 0
  2478                           
  2479                           ; 1 bytes @ 0x11
  2480  0011'                    	ds	1
  2481  0012'                    i2Port_SetPin@pValue:
  2482                           	opt stack 0
  2483                           
  2484                           ; 1 bytes @ 0x12
  2485  0012'                    	ds	1
  2486  0013'                    i2Port_SetPin@Type:
  2487                           	opt stack 0
  2488                           
  2489                           ; 1 bytes @ 0x13
  2490  0013'                    	ds	1
  2491  0014'                    
  2492                           ; 1 bytes @ 0x14
  2493  0014'                    	ds	2
  2494  0016'                    ??_ISR_Function:
  2495                           
  2496                           ; 1 bytes @ 0x16
  2497  0016'                    	ds	18
  2498                           tblptru	equ	0xFF8
  2499                           tblptrh	equ	0xFF7
  2500                           tblptrl	equ	0xFF6
  2501                           tablat	equ	0xFF5
  2502                           postinc0	equ	0xFEE
  2503                           wreg	equ	0xFE8
  2504                           postdec1	equ	0xFE5
  2505                           fsr1h	equ	0xFE2
  2506                           fsr1l	equ	0xFE1
  2507                           
  2508 ;;
  2509 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2510 ;;
  2511 ;; *************** function _main *****************
  2512 ;; Defined at:
  2513 ;;		line 144 in file "main.c"
  2514 ;; Parameters:    Size  Location     Type
  2515 ;;		None
  2516 ;; Auto vars:     Size  Location     Type
  2517 ;;		None
  2518 ;; Return value:  Size  Location     Type
  2519 ;;                  1    wreg      void 
  2520 ;; Registers used:
  2521 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, b
      +temp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tbl
      +ptru, prodl, prodh, bsr, cstack
  2522 ;; Tracked objects:
  2523 ;;		On entry : 0/0
  2524 ;;		On exit  : 0/0
  2525 ;;		Unchanged: 0/0
  2526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2529 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2530 ;;      Totals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2531 ;;Total ram usage:        2 bytes
  2532 ;; Hardware stack levels required when called:   18
  2533 ;; This function calls:
  2534 ;;		_init
  2535 ;;		_mode1
  2536 ;;		_mode2
  2537 ;;		_mode3
  2538 ;;		_mode4
  2539 ;; This function is called by:
  2540 ;;		Startup code after reset
  2541 ;; This function uses a non-reentrant model
  2542 ;;
  2543                           
  2544                           	psect	text0
  2545  0000'                    __ptext0:
  2546                           	opt stack 0
  2547  0000'                    _main:
  2548                           	opt stack 13
  2549                           
  2550                           ;main.c: 145: init();
  2551                           
  2552                           ;incstack = 0
  2553  0000' EC00' F000'        	call	_init	;wreg free
  2554                           
  2555                           ;main.c: 147: switch (mode) {
  2556                           
  2557                           ;main.c: 146: for(;;) {
  2558  0004' D00B               	goto	l13633
  2559  0006'                    
  2560                           ;main.c: 149: mode1();
  2561  0006' EC00' F000'        	call	_mode1	;wreg free
  2562                           
  2563                           ;main.c: 150: break;
  2564  000A' D008               	goto	l13633
  2565  000C'                    
  2566                           ;main.c: 152: mode2();
  2567  000C' EC00' F000'        	call	_mode2	;wreg free
  2568                           
  2569                           ;main.c: 153: break;
  2570  0010' D005               	goto	l13633
  2571  0012'                    
  2572                           ;main.c: 155: mode3();
  2573  0012' EC00' F000'        	call	_mode3	;wreg free
  2574                           
  2575                           ;main.c: 156: break;
  2576  0016' D002               	goto	l13633
  2577  0018'                    
  2578                           ;main.c: 158: mode4();
  2579  0018' EC00' F000'        	call	_mode4	;wreg free
  2580  001C'                    l13633:
  2581                           
  2582                           ;main.c: 160: }
  2583  001C' C015' F000'        	movff	_mode,??_main
  2584  0020' C016' F001'        	movff	_mode+1,??_main+1
  2585                           
  2586                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2587                           ; Switch size 1, requested type "space"
  2588                           ; Number of cases is 1, Range of values is 0 to 0
  2589                           ; switch strategies available:
  2590                           ; Name         Instructions Cycles
  2591                           ; simple_byte            4     3 (average)
  2592                           ;	Chosen strategy is simple_byte
  2593  0024' 0103               	movlb	3	; () banked
  2594  0026' 5100'              	movf	(??_main+1)& (0+255),w,b
  2595  0028' 0A00               	xorlw	0	; case 0
  2596  002A' A4D8               	btfss	status,2,c
  2597  002C' D7F7               	goto	l13633
  2598                           
  2599                           ; BSR set to: 3
  2600                           ; Switch size 1, requested type "space"
  2601                           ; Number of cases is 4, Range of values is 1 to 4
  2602                           ; switch strategies available:
  2603                           ; Name         Instructions Cycles
  2604                           ; simple_byte           13     7 (average)
  2605                           ;	Chosen strategy is simple_byte
  2606  002E' 0103               	movlb	3	; () banked
  2607  0030' 5100'              	movf	??_main& (0+255),w,b
  2608  0032' 0A01               	xorlw	1	; case 1
  2609  0034' B4D8               	btfsc	status,2,c
  2610  0036' D7E7               	goto	l2305
  2611  0038' 0A03               	xorlw	3	; case 2
  2612  003A' B4D8               	btfsc	status,2,c
  2613  003C' D7E7               	goto	l2307
  2614  003E' 0A01               	xorlw	1	; case 3
  2615  0040' B4D8               	btfsc	status,2,c
  2616  0042' D7E7               	goto	l2308
  2617  0044' 0A07               	xorlw	7	; case 4
  2618  0046' B4D8               	btfsc	status,2,c
  2619  0048' D7E7               	goto	l2309
  2620                           
  2621                           ; BSR set to: 3
  2622                           ;main.c: 162: }
  2623  004A' D7E8               	goto	l13633
  2624  004C'                    __end_of_main:
  2625                           	opt stack 0
  2626                           tblptru	equ	0xFF8
  2627                           tblptrh	equ	0xFF7
  2628                           tblptrl	equ	0xFF6
  2629                           tablat	equ	0xFF5
  2630                           postinc0	equ	0xFEE
  2631                           wreg	equ	0xFE8
  2632                           postdec1	equ	0xFE5
  2633                           fsr1h	equ	0xFE2
  2634                           fsr1l	equ	0xFE1
  2635                           status	equ	0xFD8
  2636                           
  2637 ;; *************** function _mode2 *****************
  2638 ;; Defined at:
  2639 ;;		line 107 in file "main.c"
  2640 ;; Parameters:    Size  Location     Type
  2641 ;;		None
  2642 ;; Auto vars:     Size  Location     Type
  2643 ;;  dist            2   44[BANK0 ] int 
  2644 ;; Return value:  Size  Location     Type
  2645 ;;                  1    wreg      void 
  2646 ;; Registers used:
  2647 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2648 ;; Tracked objects:
  2649 ;;		On entry : 0/0
  2650 ;;		On exit  : 0/0
  2651 ;;		Unchanged: 0/0
  2652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2654 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2656 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2657 ;;Total ram usage:        2 bytes
  2658 ;; Hardware stack levels used:    1
  2659 ;; Hardware stack levels required when called:   16
  2660 ;; This function calls:
  2661 ;;		_Console_Render
  2662 ;;		_HMI_DIPSwitch
  2663 ;;		_HMI_DownSwitch
  2664 ;;		_HMI_LeftSwitch
  2665 ;;		_HMI_Poll
  2666 ;;		_HMI_RightSwitch
  2667 ;;		_HMI_UpSwitch
  2668 ;;		_MXK_DIPSwitch
  2669 ;;		_MXK_Dequeue
  2670 ;;		_MXK_Release
  2671 ;;		_MXK_SwitchTo
  2672 ;;		_MXK_TestButton
  2673 ;;		_irobot_move_straight
  2674 ;;		_irobot_song_play
  2675 ;;		_irobot_stop_motion
  2676 ;;		_printf
  2677 ;;		_update_angle
  2678 ;;		_update_bump_and_cliff
  2679 ;;		_update_distance
  2680 ;; This function is called by:
  2681 ;;		_main
  2682 ;; This function uses a non-reentrant model
  2683 ;;
  2684                           
  2685                           	psect	text1
  2686  0000'                    __ptext1:
  2687                           	opt stack 0
  2688  0000'                    _mode2:
  2689                           	opt stack 14
  2690                           
  2691                           ;main.c: 108: update_bump_and_cliff();
  2692                           
  2693                           ; BSR set to: 3
  2694                           ;incstack = 0
  2695  0000' EC00' F000'        	call	_update_bump_and_cliff	;wreg free
  2696                           
  2697                           ;main.c: 109: update_distance();
  2698  0004' EC00' F000'        	call	_update_distance	;wreg free
  2699                           
  2700                           ;main.c: 110: update_angle();
  2701  0008' EC00' F000'        	call	_update_angle	;wreg free
  2702                           
  2703                           ;main.c: 112: angleTotal += iRAngle;
  2704  000C' 0100               	movlb	0	; () banked
  2705  000E' 5100'              	movf	_iRAngle& (0+255),w,b
  2706  0010' 0100               	movlb	0	; () banked
  2707  0012' 2700'              	addwf	_angleTotal& (0+255),f,b
  2708  0014' 0100               	movlb	0	; () banked
  2709  0016' 5100'              	movf	(_iRAngle+1)& (0+255),w,b
  2710  0018' 0100               	movlb	0	; () banked
  2711  001A' 2300'              	addwfc	(_angleTotal+1)& (0+255),f,b
  2712                           
  2713                           ; BSR set to: 0
  2714                           ;main.c: 114: if (iRBumpLeft || iRBumpRight) {
  2715  001C' 0100               	movlb	0	; () banked
  2716  001E' 5100'              	movf	_iRBumpLeft& (0+255),w,b
  2717  0020' A4D8               	btfss	status,2,c
  2718  0022' D004               	goto	u9610
  2719                           
  2720                           ; BSR set to: 0
  2721  0024' 0100               	movlb	0	; () banked
  2722  0026' 5100'              	movf	_iRBumpRight& (0+255),w,b
  2723  0028' B4D8               	btfsc	status,2,c
  2724  002A' D006               	goto	l2288
  2725  002C'                    u9610:
  2726                           
  2727                           ; BSR set to: 0
  2728                           ;main.c: 115: irobot_song_play(0);
  2729                           
  2730                           ; BSR set to: 0
  2731  002C' 0E00               	movlw	0
  2732  002E' EC00' F000'        	call	_irobot_song_play
  2733                           
  2734                           ;main.c: 116: irobot_stop_motion(0);
  2735  0032' 0E00               	movlw	0
  2736  0034' EC00' F000'        	call	_irobot_stop_motion
  2737  0038'                    l2288:
  2738                           
  2739                           ;main.c: 117: }
  2740                           ;main.c: 118: if (angleTotal > 90) {
  2741  0038' 0100               	movlb	0	; () banked
  2742  003A' BF00'              	btfsc	(_angleTotal+1)& (0+255),7,b
  2743  003C' D00B               	goto	l2291
  2744  003E' 0100               	movlb	0	; () banked
  2745  0040' 5100'              	movf	(_angleTotal+1)& (0+255),w,b
  2746  0042' E105               	bnz	u9620
  2747  0044' 0E5B               	movlw	91
  2748  0046' 0100               	movlb	0	; () banked
  2749  0048' 5D00'              	subwf	_angleTotal& (0+255),w,b
  2750  004A' A0D8               	btfss	status,0,c
  2751  004C' D003               	goto	l2291
  2752  004E'                    u9620:
  2753                           
  2754                           ; BSR set to: 0
  2755                           ;main.c: 119: irobot_stop_motion(0);
  2756  004E' 0E00               	movlw	0
  2757  0050' EC00' F000'        	call	_irobot_stop_motion
  2758  0054'                    l2291:
  2759                           
  2760                           ;main.c: 120: }
  2761                           ;main.c: 121: HMI_Poll();
  2762  0054' EC00' F000'        	call	_HMI_Poll	;wreg free
  2763                           
  2764                           ;main.c: 122: if (MXK_SwitchTo(eMXK_HMI)) {
  2765  0058' 0E01               	movlw	1
  2766  005A' EC00' F000'        	call	_MXK_SwitchTo
  2767  005E' 0900               	iorlw	0
  2768  0060' B4D8               	btfsc	status,2,c
  2769  0062' 0012               	return	
  2770                           
  2771                           ;main.c: 123: printf("%c", (char)35);
  2772  0064' 0E00'              	movlw	low STR_1
  2773  0066' 0100               	movlb	0	; () banked
  2774  0068' 6F00'              	movwf	printf@f& (0+255),b
  2775  006A' 0E00'              	movlw	high STR_1
  2776  006C' 0100               	movlb	0	; () banked
  2777  006E' 6F00'              	movwf	(printf@f+1)& (0+255),b
  2778  0070' 0E00               	movlw	0
  2779  0072' 0100               	movlb	0	; () banked
  2780  0074' 6F00'              	movwf	(?_printf+3)& (0+255),b
  2781  0076' 0E23               	movlw	35
  2782  0078' 6F00'              	movwf	(?_printf+2)& (0+255),b
  2783  007A' EC00' F000'        	call	_printf	;wreg free
  2784                           
  2785                           ;main.c: 124: printf("Total Distance:%u\nLeft Bump:%u\nRight Bump:%u\n", distanceTotal, 
      +                          iRBumpLeft, iRBumpRight);
  2786  007E' 0E00'              	movlw	low STR_2
  2787  0080' 0100               	movlb	0	; () banked
  2788  0082' 6F00'              	movwf	printf@f& (0+255),b
  2789  0084' 0E00'              	movlw	high STR_2
  2790  0086' 0100               	movlb	0	; () banked
  2791  0088' 6F00'              	movwf	(printf@f+1)& (0+255),b
  2792  008A' C019' F017'        	movff	_distanceTotal,?_printf+2
  2793  008E' C01A' F018'        	movff	_distanceTotal+1,?_printf+3
  2794  0092' C02D' F019'        	movff	_iRBumpLeft,?_printf+4
  2795  0096' 0100               	movlb	0	; () banked
  2796  0098' 6B00'              	clrf	(?_printf+5)& (0+255),b
  2797  009A' C02E' F01B'        	movff	_iRBumpRight,?_printf+6
  2798  009E' 0100               	movlb	0	; () banked
  2799  00A0' 6B00'              	clrf	(?_printf+7)& (0+255),b
  2800  00A2' EC00' F000'        	call	_printf	;wreg free
  2801                           
  2802                           ;main.c: 125: Console_Render();
  2803  00A6' EC00' F000'        	call	_Console_Render	;wreg free
  2804                           
  2805                           ;main.c: 126: if(HMIBoard.mUp.mGetState()) {
  2806  00AA' EE20' F000'        	lfsr	2,_HMIBoard+35
  2807  00AE' D801               	call	u9648
  2808  00B0' D00A               	goto	u9649
  2809  00B2'                    u9648:
  2810  00B2' 0005               	push	
  2811  00B4' 6EFA               	movwf	pclath,c
  2812  00B6' 50DE               	movf	postinc2,w,c
  2813  00B8' 6EFD               	movwf	tosl,c
  2814  00BA' 50DE               	movf	postinc2,w,c
  2815  00BC' 6EFE               	movwf	tosh,c
  2816  00BE' 50DE               	movf	postinc2,w,c
  2817  00C0' 6EFF               	movwf	tosu,c
  2818  00C2' 50FA               	movf	pclath,w,c
  2819  00C4' 0012               	return		;indir
  2820  00C6'                    u9649:
  2821  00C6' 0900               	iorlw	0
  2822  00C8' B4D8               	btfsc	status,2,c
  2823  00CA' D040               	goto	l2293
  2824                           
  2825                           ;main.c: 127: int dist = 0;
  2826  00CC' 0E00               	movlw	0
  2827  00CE' 0100               	movlb	0	; () banked
  2828  00D0' 6F00'              	movwf	(mode2@dist+1)& (0+255),b
  2829  00D2' 0E00               	movlw	0
  2830  00D4' 6F00'              	movwf	mode2@dist& (0+255),b
  2831                           
  2832                           ; BSR set to: 0
  2833                           ;main.c: 128: irobot_move_straight(200);
  2834  00D6' 0E00               	movlw	0
  2835  00D8' 0100               	movlb	0	; () banked
  2836  00DA' 6F00'              	movwf	(irobot_move_straight@straightSpeed+1)& (0+255),b
  2837  00DC' 0EC8               	movlw	200
  2838  00DE' 6F00'              	movwf	irobot_move_straight@straightSpeed& (0+255),b
  2839  00E0' EC00' F000'        	call	_irobot_move_straight	;wreg free
  2840                           
  2841                           ;main.c: 129: while(dist<5000) {
  2842  00E4' D025               	goto	l2294
  2843  00E6'                    
  2844                           ;main.c: 130: update_distance();
  2845  00E6' EC00' F000'        	call	_update_distance	;wreg free
  2846                           
  2847                           ;main.c: 131: dist += iRDistance;
  2848  00EA' 0100               	movlb	0	; () banked
  2849  00EC' 5100'              	movf	_iRDistance& (0+255),w,b
  2850  00EE' 0100               	movlb	0	; () banked
  2851  00F0' 2700'              	addwf	mode2@dist& (0+255),f,b
  2852  00F2' 0100               	movlb	0	; () banked
  2853  00F4' 5100'              	movf	(_iRDistance+1)& (0+255),w,b
  2854  00F6' 0100               	movlb	0	; () banked
  2855  00F8' 2300'              	addwfc	(mode2@dist+1)& (0+255),f,b
  2856                           
  2857                           ; BSR set to: 0
  2858                           ;main.c: 132: printf("%c",(char)35);
  2859  00FA' 0E00'              	movlw	low STR_1
  2860  00FC' 0100               	movlb	0	; () banked
  2861  00FE' 6F00'              	movwf	printf@f& (0+255),b
  2862  0100' 0E00'              	movlw	high STR_1
  2863  0102' 0100               	movlb	0	; () banked
  2864  0104' 6F00'              	movwf	(printf@f+1)& (0+255),b
  2865  0106' 0E00               	movlw	0
  2866  0108' 0100               	movlb	0	; () banked
  2867  010A' 6F00'              	movwf	(?_printf+3)& (0+255),b
  2868  010C' 0E23               	movlw	35
  2869  010E' 6F00'              	movwf	(?_printf+2)& (0+255),b
  2870  0110' EC00' F000'        	call	_printf	;wreg free
  2871                           
  2872                           ;main.c: 133: printf("Distance: %d\n",dist);
  2873  0114' 0E00'              	movlw	low STR_4
  2874  0116' 0100               	movlb	0	; () banked
  2875  0118' 6F00'              	movwf	printf@f& (0+255),b
  2876  011A' 0E00'              	movlw	high STR_4
  2877  011C' 0100               	movlb	0	; () banked
  2878  011E' 6F00'              	movwf	(printf@f+1)& (0+255),b
  2879  0120' C02C' F017'        	movff	mode2@dist,?_printf+2
  2880  0124' C02D' F018'        	movff	mode2@dist+1,?_printf+3
  2881  0128' EC00' F000'        	call	_printf	;wreg free
  2882                           
  2883                           ;main.c: 134: Console_Render();
  2884  012C' EC00' F000'        	call	_Console_Render	;wreg free
  2885  0130'                    l2294:
  2886  0130' 0100               	movlb	0	; () banked
  2887  0132' BF00'              	btfsc	(mode2@dist+1)& (0+255),7,b
  2888  0134' D7D8               	goto	l2295
  2889  0136' 0E88               	movlw	136
  2890  0138' 0100               	movlb	0	; () banked
  2891  013A' 5D00'              	subwf	mode2@dist& (0+255),w,b
  2892  013C' 0E13               	movlw	19
  2893  013E' 0100               	movlb	0	; () banked
  2894  0140' 5900'              	subwfb	(mode2@dist+1)& (0+255),w,b
  2895  0142' A0D8               	btfss	status,0,c
  2896  0144' D7D0               	goto	l2295
  2897                           
  2898                           ; BSR set to: 0
  2899                           ;main.c: 135: }
  2900                           ;main.c: 136: irobot_stop_motion(0);
  2901                           
  2902                           ; BSR set to: 0
  2903  0146' 0E00               	movlw	0
  2904  0148' EC00' F000'        	call	_irobot_stop_motion
  2905  014C'                    l2293:
  2906                           
  2907                           ;main.c: 137: }
  2908                           ;main.c: 138: if (MXK_Release())
  2909  014C' EC00' F000'        	call	_MXK_Release	;wreg free
  2910  0150' 0900               	iorlw	0
  2911  0152' B4D8               	btfsc	status,2,c
  2912  0154' 0012               	return	
  2913                           
  2914                           ;main.c: 139: MXK_Dequeue();
  2915  0156' EC00' F000'        	call	_MXK_Dequeue	;wreg free
  2916  015A' 0012               	return	
  2917  015C'                    __end_of_mode2:
  2918                           	opt stack 0
  2919                           tosu	equ	0xFFF
  2920                           tosh	equ	0xFFE
  2921                           tosl	equ	0xFFD
  2922                           pclath	equ	0xFFA
  2923                           tblptru	equ	0xFF8
  2924                           tblptrh	equ	0xFF7
  2925                           tblptrl	equ	0xFF6
  2926                           tablat	equ	0xFF5
  2927                           postinc0	equ	0xFEE
  2928                           wreg	equ	0xFE8
  2929                           postdec1	equ	0xFE5
  2930                           fsr1h	equ	0xFE2
  2931                           fsr1l	equ	0xFE1
  2932                           postinc2	equ	0xFDE
  2933                           status	equ	0xFD8
  2934                           
  2935 ;; *************** function _update_distance *****************
  2936 ;; Defined at:
  2937 ;;		line 315 in file "Library/iRobotSerial.c"
  2938 ;; Parameters:    Size  Location     Type
  2939 ;;		None
  2940 ;; Auto vars:     Size  Location     Type
  2941 ;;		None
  2942 ;; Return value:  Size  Location     Type
  2943 ;;                  1    wreg      void 
  2944 ;; Registers used:
  2945 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2946 ;; Tracked objects:
  2947 ;;		On entry : 0/0
  2948 ;;		On exit  : 0/0
  2949 ;;		Unchanged: 0/0
  2950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2954 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2955 ;;Total ram usage:        0 bytes
  2956 ;; Hardware stack levels used:    1
  2957 ;; Hardware stack levels required when called:   10
  2958 ;; This function calls:
  2959 ;;		_irobot_query_and_update
  2960 ;; This function is called by:
  2961 ;;		_mode2
  2962 ;; This function uses a non-reentrant model
  2963 ;;
  2964                           
  2965                           	psect	text2
  2966  0000'                    __ptext2:
  2967                           	opt stack 0
  2968  0000'                    _update_distance:
  2969                           	opt stack 19
  2970                           
  2971                           ;iRobotSerial.c: 316: irobot_query_and_update(1, iR_PKT_DISTANCE);
  2972                           
  2973                           ;incstack = 0
  2974  0000' 0E00               	movlw	0
  2975  0002' 0100               	movlb	0	; () banked
  2976  0004' 6F00'              	movwf	(?_irobot_query_and_update+1)& (0+255),b
  2977  0006' 0E13               	movlw	19
  2978  0008' 6F00'              	movwf	?_irobot_query_and_update& (0+255),b
  2979  000A' 0E01               	movlw	1
  2980  000C' EC00' F000'        	call	_irobot_query_and_update
  2981  0010' 0012               	return		;funcret
  2982  0012'                    __end_of_update_distance:
  2983                           	opt stack 0
  2984                           tosu	equ	0xFFF
  2985                           tosh	equ	0xFFE
  2986                           tosl	equ	0xFFD
  2987                           pclath	equ	0xFFA
  2988                           tblptru	equ	0xFF8
  2989                           tblptrh	equ	0xFF7
  2990                           tblptrl	equ	0xFF6
  2991                           tablat	equ	0xFF5
  2992                           postinc0	equ	0xFEE
  2993                           wreg	equ	0xFE8
  2994                           postdec1	equ	0xFE5
  2995                           fsr1h	equ	0xFE2
  2996                           fsr1l	equ	0xFE1
  2997                           postinc2	equ	0xFDE
  2998                           status	equ	0xFD8
  2999                           
  3000 ;; *************** function _update_bump_and_cliff *****************
  3001 ;; Defined at:
  3002 ;;		line 308 in file "Library/iRobotSerial.c"
  3003 ;; Parameters:    Size  Location     Type
  3004 ;;		None
  3005 ;; Auto vars:     Size  Location     Type
  3006 ;;		None
  3007 ;; Return value:  Size  Location     Type
  3008 ;;                  1    wreg      void 
  3009 ;; Registers used:
  3010 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3011 ;; Tracked objects:
  3012 ;;		On entry : 0/0
  3013 ;;		On exit  : 0/0
  3014 ;;		Unchanged: 0/0
  3015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3019 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3020 ;;Total ram usage:        0 bytes
  3021 ;; Hardware stack levels used:    1
  3022 ;; Hardware stack levels required when called:   10
  3023 ;; This function calls:
  3024 ;;		_irobot_query_and_update
  3025 ;; This function is called by:
  3026 ;;		_mode2
  3027 ;; This function uses a non-reentrant model
  3028 ;;
  3029                           
  3030                           	psect	text3
  3031  0000'                    __ptext3:
  3032                           	opt stack 0
  3033  0000'                    _update_bump_and_cliff:
  3034                           	opt stack 19
  3035                           
  3036                           ;iRobotSerial.c: 309: irobot_query_and_update(5, iR_PKT_BUMP_DROP,
  3037                           ;iRobotSerial.c: 310: iR_PKT_CLIFF_L, iR_PKT_CLIFF_FL,
  3038                           ;iRobotSerial.c: 311: iR_PKT_CLIFF_FR, iR_PKT_CLIFF_R);
  3039                           
  3040                           ;incstack = 0
  3041  0000' 0E00               	movlw	0
  3042  0002' 0100               	movlb	0	; () banked
  3043  0004' 6F00'              	movwf	(?_irobot_query_and_update+1)& (0+255),b
  3044  0006' 0E07               	movlw	7
  3045  0008' 6F00'              	movwf	?_irobot_query_and_update& (0+255),b
  3046  000A' 0E00               	movlw	0
  3047  000C' 0100               	movlb	0	; () banked
  3048  000E' 6F00'              	movwf	(?_irobot_query_and_update+3)& (0+255),b
  3049  0010' 0E09               	movlw	9
  3050  0012' 6F00'              	movwf	(?_irobot_query_and_update+2)& (0+255),b
  3051  0014' 0E00               	movlw	0
  3052  0016' 0100               	movlb	0	; () banked
  3053  0018' 6F00'              	movwf	(?_irobot_query_and_update+5)& (0+255),b
  3054  001A' 0E0A               	movlw	10
  3055  001C' 6F00'              	movwf	(?_irobot_query_and_update+4)& (0+255),b
  3056  001E' 0E00               	movlw	0
  3057  0020' 0100               	movlb	0	; () banked
  3058  0022' 6F00'              	movwf	(?_irobot_query_and_update+7)& (0+255),b
  3059  0024' 0E0B               	movlw	11
  3060  0026' 6F00'              	movwf	(?_irobot_query_and_update+6)& (0+255),b
  3061  0028' 0E00               	movlw	0
  3062  002A' 0100               	movlb	0	; () banked
  3063  002C' 6F00'              	movwf	(?_irobot_query_and_update+9)& (0+255),b
  3064  002E' 0E0C               	movlw	12
  3065  0030' 6F00'              	movwf	(?_irobot_query_and_update+8)& (0+255),b
  3066  0032' 0E05               	movlw	5
  3067  0034' EC00' F000'        	call	_irobot_query_and_update
  3068  0038' 0012               	return		;funcret
  3069  003A'                    __end_of_update_bump_and_cliff:
  3070                           	opt stack 0
  3071                           tosu	equ	0xFFF
  3072                           tosh	equ	0xFFE
  3073                           tosl	equ	0xFFD
  3074                           pclath	equ	0xFFA
  3075                           tblptru	equ	0xFF8
  3076                           tblptrh	equ	0xFF7
  3077                           tblptrl	equ	0xFF6
  3078                           tablat	equ	0xFF5
  3079                           postinc0	equ	0xFEE
  3080                           wreg	equ	0xFE8
  3081                           postdec1	equ	0xFE5
  3082                           fsr1h	equ	0xFE2
  3083                           fsr1l	equ	0xFE1
  3084                           postinc2	equ	0xFDE
  3085                           status	equ	0xFD8
  3086                           
  3087 ;; *************** function _update_angle *****************
  3088 ;; Defined at:
  3089 ;;		line 320 in file "Library/iRobotSerial.c"
  3090 ;; Parameters:    Size  Location     Type
  3091 ;;		None
  3092 ;; Auto vars:     Size  Location     Type
  3093 ;;		None
  3094 ;; Return value:  Size  Location     Type
  3095 ;;                  1    wreg      void 
  3096 ;; Registers used:
  3097 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3098 ;; Tracked objects:
  3099 ;;		On entry : 0/0
  3100 ;;		On exit  : 0/0
  3101 ;;		Unchanged: 0/0
  3102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3106 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3107 ;;Total ram usage:        0 bytes
  3108 ;; Hardware stack levels used:    1
  3109 ;; Hardware stack levels required when called:   10
  3110 ;; This function calls:
  3111 ;;		_irobot_query_and_update
  3112 ;; This function is called by:
  3113 ;;		_mode2
  3114 ;; This function uses a non-reentrant model
  3115 ;;
  3116                           
  3117                           	psect	text4
  3118  0000'                    __ptext4:
  3119                           	opt stack 0
  3120  0000'                    _update_angle:
  3121                           	opt stack 19
  3122                           
  3123                           ;iRobotSerial.c: 321: irobot_query_and_update(1, iR_PKT_ANGLE);
  3124                           
  3125                           ;incstack = 0
  3126  0000' 0E00               	movlw	0
  3127  0002' 0100               	movlb	0	; () banked
  3128  0004' 6F00'              	movwf	(?_irobot_query_and_update+1)& (0+255),b
  3129  0006' 0E14               	movlw	20
  3130  0008' 6F00'              	movwf	?_irobot_query_and_update& (0+255),b
  3131  000A' 0E01               	movlw	1
  3132  000C' EC00' F000'        	call	_irobot_query_and_update
  3133  0010' 0012               	return		;funcret
  3134  0012'                    __end_of_update_angle:
  3135                           	opt stack 0
  3136                           tosu	equ	0xFFF
  3137                           tosh	equ	0xFFE
  3138                           tosl	equ	0xFFD
  3139                           pclath	equ	0xFFA
  3140                           tblptru	equ	0xFF8
  3141                           tblptrh	equ	0xFF7
  3142                           tblptrl	equ	0xFF6
  3143                           tablat	equ	0xFF5
  3144                           postinc0	equ	0xFEE
  3145                           wreg	equ	0xFE8
  3146                           postdec1	equ	0xFE5
  3147                           fsr1h	equ	0xFE2
  3148                           fsr1l	equ	0xFE1
  3149                           postinc2	equ	0xFDE
  3150                           status	equ	0xFD8
  3151                           
  3152 ;; *************** function _irobot_query_and_update *****************
  3153 ;; Defined at:
  3154 ;;		line 130 in file "Library/iRobotSerial.c"
  3155 ;; Parameters:    Size  Location     Type
  3156 ;;  numberOfPack    1    wreg     unsigned char 
  3157 ;; Auto vars:     Size  Location     Type
  3158 ;;  numberOfPack    1   24[BANK0 ] unsigned char 
  3159 ;;  TXArray       256    0[BANK2 ] unsigned char [256]
  3160 ;;  RXArray       256    0[BANK1 ] unsigned char [256]
  3161 ;;  packetIDs       2   21[BANK0 ] PTR void [1]
  3162 ;;		 -> ?_irobot_query_and_update(1), 
  3163 ;;  i               1   28[BANK0 ] unsigned char 
  3164 ;;  startIndex      1   27[BANK0 ] unsigned char 
  3165 ;;  j               1   26[BANK0 ] unsigned char 
  3166 ;;  packetVariab    1   25[BANK0 ] unsigned char 
  3167 ;;  streamSize      1   23[BANK0 ] unsigned char 
  3168 ;; Return value:  Size  Location     Type
  3169 ;;                  1    wreg      void 
  3170 ;; Registers used:
  3171 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3172 ;; Tracked objects:
  3173 ;;		On entry : 0/0
  3174 ;;		On exit  : 0/0
  3175 ;;		Unchanged: 0/0
  3176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3177 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3178 ;;      Locals:         0       8     256     256       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3179 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3180 ;;      Totals:         0      23     256     256       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3181 ;;Total ram usage:      535 bytes
  3182 ;; Hardware stack levels used:    1
  3183 ;; Hardware stack levels required when called:    9
  3184 ;; This function calls:
  3185 ;;		_eusart_getch
  3186 ;;		_eusart_putch
  3187 ;;		_get_packet_size
  3188 ;;		_rx_assign
  3189 ;; This function is called by:
  3190 ;;		_update_bump_and_cliff
  3191 ;;		_update_distance
  3192 ;;		_update_angle
  3193 ;; This function uses a non-reentrant model
  3194 ;;
  3195                           
  3196                           	psect	text5
  3197  0000'                    __ptext5:
  3198                           	opt stack 0
  3199  0000'                    _irobot_query_and_update:
  3200                           	opt stack 19
  3201                           
  3202                           ;incstack = 0
  3203                           ;irobot_query_and_update@numberOfPacketRequests stored from wreg
  3204  0000' 0100               	movlb	0	; () banked
  3205  0002' 6F00'              	movwf	irobot_query_and_update@numberOfPacketRequests& (0+255),b
  3206                           
  3207                           ;iRobotSerial.c: 131: UINT8 i, j, packetVariable, streamSize = 0, startIndex = 0, RXArra
      +                          y[256], TXArray[256];
  3208  0004' 0E00               	movlw	0
  3209  0006' 0100               	movlb	0	; () banked
  3210  0008' 6F00'              	movwf	irobot_query_and_update@streamSize& (0+255),b
  3211  000A' 0E00               	movlw	0
  3212  000C' 0100               	movlb	0	; () banked
  3213  000E' 6F00'              	movwf	irobot_query_and_update@startIndex& (0+255),b
  3214                           
  3215                           ;iRobotSerial.c: 133: va_list packetIDs;
  3216                           ;iRobotSerial.c: 134: *packetIDs = __va_start();
  3217  0010' 0E00'              	movlw	low ?_irobot_query_and_update
  3218  0012' 0100               	movlb	0	; () banked
  3219  0014' 6F00'              	movwf	irobot_query_and_update@packetIDs& (0+255),b
  3220  0016' 0E00'              	movlw	high ?_irobot_query_and_update
  3221  0018' 0100               	movlb	0	; () banked
  3222  001A' 6F00'              	movwf	(irobot_query_and_update@packetIDs+1)& (0+255),b
  3223                           
  3224                           ; BSR set to: 0
  3225                           ;iRobotSerial.c: 135: eusart_putch(iR_QUERY_LIST);
  3226  001C' 0E95               	movlw	149
  3227  001E' EC00' F000'        	call	_eusart_putch
  3228                           
  3229                           ;iRobotSerial.c: 136: eusart_putch(numberOfPacketRequests);
  3230  0022' 0100               	movlb	0	; () banked
  3231  0024' 5100'              	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  3232  0026' EC00' F000'        	call	_eusart_putch
  3233                           
  3234                           ;iRobotSerial.c: 137: for (i = 0; i < numberOfPacketRequests; i++) {
  3235  002A' 0E00               	movlw	0
  3236  002C' 0100               	movlb	0	; () banked
  3237  002E' 6F00'              	movwf	irobot_query_and_update@i& (0+255),b
  3238  0030' D023               	goto	l2091
  3239  0032'                    
  3240                           ; BSR set to: 0
  3241                           ;iRobotSerial.c: 138: packetVariable = (*(int *)__va_arg((*(int **)packetIDs), (int)0));
  3242                           
  3243                           ; BSR set to: 0
  3244  0032' C015' FFD9         	movff	irobot_query_and_update@packetIDs,fsr2l
  3245  0036' C016' FFDA         	movff	irobot_query_and_update@packetIDs+1,fsr2h
  3246  003A' 50DF               	movf	indf2,w,c
  3247  003C' 0100               	movlb	0	; () banked
  3248  003E' 6F00'              	movwf	irobot_query_and_update@packetVariable& (0+255),b
  3249                           
  3250                           ; BSR set to: 0
  3251  0040' 0E02               	movlw	2
  3252  0042' 0100               	movlb	0	; () banked
  3253  0044' 2700'              	addwf	irobot_query_and_update@packetIDs& (0+255),f,b
  3254  0046' 0E00               	movlw	0
  3255  0048' 2300'              	addwfc	(irobot_query_and_update@packetIDs+1)& (0+255),f,b
  3256                           
  3257                           ; BSR set to: 0
  3258                           ;iRobotSerial.c: 139: streamSize += get_packet_size(packetVariable);
  3259  004A' 0100               	movlb	0	; () banked
  3260  004C' 5100'              	movf	irobot_query_and_update@packetVariable& (0+255),w,b
  3261  004E' EC00' F000'        	call	_get_packet_size
  3262  0052' 0100               	movlb	0	; () banked
  3263  0054' 2700'              	addwf	irobot_query_and_update@streamSize& (0+255),f,b
  3264                           
  3265                           ; BSR set to: 0
  3266                           ;iRobotSerial.c: 140: TXArray[i] = packetVariable;
  3267  0056' 0100               	movlb	0	; () banked
  3268  0058' 5100'              	movf	irobot_query_and_update@i& (0+255),w,b
  3269  005A' 0D01               	mullw	1
  3270  005C' 0E00'              	movlw	low irobot_query_and_update@TXArray
  3271  005E' 24F3               	addwf	prodl,w,c
  3272  0060' 6ED9               	movwf	fsr2l,c
  3273  0062' 0E00'              	movlw	high irobot_query_and_update@TXArray
  3274  0064' 20F4               	addwfc	prodh,w,c
  3275  0066' 6EDA               	movwf	fsr2h,c
  3276  0068' C019' FFDF         	movff	irobot_query_and_update@packetVariable,indf2
  3277                           
  3278                           ; BSR set to: 0
  3279                           ;iRobotSerial.c: 141: eusart_putch(packetVariable);
  3280  006C' 0100               	movlb	0	; () banked
  3281  006E' 5100'              	movf	irobot_query_and_update@packetVariable& (0+255),w,b
  3282  0070' EC00' F000'        	call	_eusart_putch
  3283  0074' 0100               	movlb	0	; () banked
  3284  0076' 2B00'              	incf	irobot_query_and_update@i& (0+255),f,b
  3285  0078'                    l2091:
  3286                           
  3287                           ; BSR set to: 0
  3288                           
  3289                           ; BSR set to: 0
  3290  0078' 0100               	movlb	0	; () banked
  3291  007A' 5100'              	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  3292  007C' 0100               	movlb	0	; () banked
  3293  007E' 5D00'              	subwf	irobot_query_and_update@i& (0+255),w,b
  3294  0080' A0D8               	btfss	status,0,c
  3295  0082' D7D7               	goto	l2092
  3296                           
  3297                           ; BSR set to: 0
  3298                           ;iRobotSerial.c: 142: }
  3299                           ;iRobotSerial.c: 143: ;
  3300                           ;iRobotSerial.c: 145: for (i = 0; i < streamSize; i++) {RXArray[i] = eusart_getch();}
  3301                           
  3302                           ; BSR set to: 0
  3303  0084' 0E00               	movlw	0
  3304  0086' 0100               	movlb	0	; () banked
  3305  0088' 6F00'              	movwf	irobot_query_and_update@i& (0+255),b
  3306  008A' D00E               	goto	l2094
  3307  008C'                    
  3308                           ; BSR set to: 0
  3309                           
  3310                           ; BSR set to: 0
  3311  008C' 0100               	movlb	0	; () banked
  3312  008E' 5100'              	movf	irobot_query_and_update@i& (0+255),w,b
  3313  0090' 0D01               	mullw	1
  3314  0092' 0E00'              	movlw	low irobot_query_and_update@RXArray
  3315  0094' 24F3               	addwf	prodl,w,c
  3316  0096' 6ED9               	movwf	fsr2l,c
  3317  0098' 0E00'              	movlw	high irobot_query_and_update@RXArray
  3318  009A' 20F4               	addwfc	prodh,w,c
  3319  009C' 6EDA               	movwf	fsr2h,c
  3320  009E' EC00' F000'        	call	_eusart_getch	;wreg free
  3321  00A2' 6EDF               	movwf	indf2,c
  3322  00A4' 0100               	movlb	0	; () banked
  3323  00A6' 2B00'              	incf	irobot_query_and_update@i& (0+255),f,b
  3324  00A8'                    l2094:
  3325                           
  3326                           ; BSR set to: 0
  3327                           
  3328                           ; BSR set to: 0
  3329  00A8' 0100               	movlb	0	; () banked
  3330  00AA' 5100'              	movf	irobot_query_and_update@streamSize& (0+255),w,b
  3331  00AC' 0100               	movlb	0	; () banked
  3332  00AE' 5D00'              	subwf	irobot_query_and_update@i& (0+255),w,b
  3333  00B0' A0D8               	btfss	status,0,c
  3334  00B2' D7EC               	goto	l2095
  3335                           
  3336                           ; BSR set to: 0
  3337                           ;iRobotSerial.c: 147: for (i = 0; i < numberOfPacketRequests; i++) {
  3338                           
  3339                           ; BSR set to: 0
  3340  00B4' 0E00               	movlw	0
  3341  00B6' 0100               	movlb	0	; () banked
  3342  00B8' 6F00'              	movwf	irobot_query_and_update@i& (0+255),b
  3343  00BA' D05E               	goto	l2097
  3344  00BC'                    l2098:
  3345                           
  3346                           ; BSR set to: 0
  3347                           ;iRobotSerial.c: 148: for (j = startIndex; j < get_packet_size(TXArray[i]) + startIndex;
      +                           j++) {
  3348  00BC' C01B' F01A'        	movff	irobot_query_and_update@startIndex,irobot_query_and_update@j
  3349  00C0' D021               	goto	l2099
  3350  00C2'                    
  3351                           ; BSR set to: 0
  3352                           ;iRobotSerial.c: 149: rx_assign(TXArray[i], RXArray[j], j - startIndex);
  3353                           
  3354                           ; BSR set to: 0
  3355  00C2' 0100               	movlb	0	; () banked
  3356  00C4' 5100'              	movf	irobot_query_and_update@j& (0+255),w,b
  3357  00C6' 0D01               	mullw	1
  3358  00C8' 0E00'              	movlw	low irobot_query_and_update@RXArray
  3359  00CA' 24F3               	addwf	prodl,w,c
  3360  00CC' 6ED9               	movwf	fsr2l,c
  3361  00CE' 0E00'              	movlw	high irobot_query_and_update@RXArray
  3362  00D0' 20F4               	addwfc	prodh,w,c
  3363  00D2' 6EDA               	movwf	fsr2h,c
  3364  00D4' 50DF               	movf	indf2,w,c
  3365  00D6' 0100               	movlb	0	; () banked
  3366  00D8' 6F00'              	movwf	rx_assign@packetIDValue& (0+255),b
  3367  00DA' 0100               	movlb	0	; () banked
  3368  00DC' 5100'              	movf	irobot_query_and_update@startIndex& (0+255),w,b
  3369  00DE' 0800               	sublw	0
  3370  00E0' 0100               	movlb	0	; () banked
  3371  00E2' 2500'              	addwf	irobot_query_and_update@j& (0+255),w,b
  3372  00E4' 0100               	movlb	0	; () banked
  3373  00E6' 6F00'              	movwf	rx_assign@byteNumber& (0+255),b
  3374  00E8' 0100               	movlb	0	; () banked
  3375  00EA' 5100'              	movf	irobot_query_and_update@i& (0+255),w,b
  3376  00EC' 0D01               	mullw	1
  3377  00EE' 0E00'              	movlw	low irobot_query_and_update@TXArray
  3378  00F0' 24F3               	addwf	prodl,w,c
  3379  00F2' 6ED9               	movwf	fsr2l,c
  3380  00F4' 0E00'              	movlw	high irobot_query_and_update@TXArray
  3381  00F6' 20F4               	addwfc	prodh,w,c
  3382  00F8' 6EDA               	movwf	fsr2h,c
  3383  00FA' 50DF               	movf	indf2,w,c
  3384  00FC' EC00' F000'        	call	_rx_assign
  3385  0100' 0100               	movlb	0	; () banked
  3386  0102' 2B00'              	incf	irobot_query_and_update@j& (0+255),f,b
  3387  0104'                    l2099:
  3388                           
  3389                           ; BSR set to: 0
  3390                           
  3391                           ; BSR set to: 0
  3392  0104' 0100               	movlb	0	; () banked
  3393  0106' 5100'              	movf	irobot_query_and_update@i& (0+255),w,b
  3394  0108' 0D01               	mullw	1
  3395  010A' 0E00'              	movlw	low irobot_query_and_update@TXArray
  3396  010C' 24F3               	addwf	prodl,w,c
  3397  010E' 6ED9               	movwf	fsr2l,c
  3398  0110' 0E00'              	movlw	high irobot_query_and_update@TXArray
  3399  0112' 20F4               	addwfc	prodh,w,c
  3400  0114' 6EDA               	movwf	fsr2h,c
  3401  0116' 50DF               	movf	indf2,w,c
  3402  0118' EC00' F000'        	call	_get_packet_size
  3403  011C' 0100               	movlb	0	; () banked
  3404  011E' 6F00'              	movwf	??_irobot_query_and_update& (0+255),b
  3405  0120' 6B00'              	clrf	(??_irobot_query_and_update+1)& (0+255),b
  3406  0122' 0100               	movlb	0	; () banked
  3407  0124' 5100'              	movf	irobot_query_and_update@startIndex& (0+255),w,b
  3408  0126' 0100               	movlb	0	; () banked
  3409  0128' 2700'              	addwf	??_irobot_query_and_update& (0+255),f,b
  3410  012A' 0E00               	movlw	0
  3411  012C' 2300'              	addwfc	(??_irobot_query_and_update+1)& (0+255),f,b
  3412  012E' 0100               	movlb	0	; () banked
  3413  0130' 5100'              	movf	irobot_query_and_update@j& (0+255),w,b
  3414  0132' 0100               	movlb	0	; () banked
  3415  0134' 6F00'              	movwf	(??_irobot_query_and_update+2)& (0+255),b
  3416  0136' 6B00'              	clrf	(??_irobot_query_and_update+3)& (0+255),b
  3417  0138' 0100               	movlb	0	; () banked
  3418  013A' 5100'              	movf	??_irobot_query_and_update& (0+255),w,b
  3419  013C' 0100               	movlb	0	; () banked
  3420  013E' 5D00'              	subwf	(??_irobot_query_and_update+2)& (0+255),w,b
  3421  0140' 0100               	movlb	0	; () banked
  3422  0142' 5100'              	movf	(??_irobot_query_and_update+3)& (0+255),w,b
  3423  0144' 0A80               	xorlw	128
  3424  0146' 0100               	movlb	0	; () banked
  3425  0148' 6F00'              	movwf	(??_irobot_query_and_update+4)& (0+255),b
  3426  014A' 0100               	movlb	0	; () banked
  3427  014C' 5100'              	movf	(??_irobot_query_and_update+1)& (0+255),w,b
  3428  014E' 0A80               	xorlw	128
  3429  0150' 0100               	movlb	0	; () banked
  3430  0152' 5900'              	subwfb	(??_irobot_query_and_update+4)& (0+255),w,b
  3431  0154' A0D8               	btfss	status,0,c
  3432  0156' D7B5               	goto	l2100
  3433                           
  3434                           ; BSR set to: 0
  3435                           ;iRobotSerial.c: 150: }
  3436                           ;iRobotSerial.c: 151: startIndex += get_packet_size(TXArray[i]);
  3437                           
  3438                           ; BSR set to: 0
  3439  0158' 0100               	movlb	0	; () banked
  3440  015A' 5100'              	movf	irobot_query_and_update@i& (0+255),w,b
  3441  015C' 0D01               	mullw	1
  3442  015E' 0E00'              	movlw	low irobot_query_and_update@TXArray
  3443  0160' 24F3               	addwf	prodl,w,c
  3444  0162' 6ED9               	movwf	fsr2l,c
  3445  0164' 0E00'              	movlw	high irobot_query_and_update@TXArray
  3446  0166' 20F4               	addwfc	prodh,w,c
  3447  0168' 6EDA               	movwf	fsr2h,c
  3448  016A' 50DF               	movf	indf2,w,c
  3449  016C' EC00' F000'        	call	_get_packet_size
  3450  0170' 0100               	movlb	0	; () banked
  3451  0172' 2700'              	addwf	irobot_query_and_update@startIndex& (0+255),f,b
  3452                           
  3453                           ; BSR set to: 0
  3454  0174' 0100               	movlb	0	; () banked
  3455  0176' 2B00'              	incf	irobot_query_and_update@i& (0+255),f,b
  3456  0178'                    l2097:
  3457                           
  3458                           ; BSR set to: 0
  3459                           
  3460                           ; BSR set to: 0
  3461  0178' 0100               	movlb	0	; () banked
  3462  017A' 5100'              	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  3463  017C' 0100               	movlb	0	; () banked
  3464  017E' 5D00'              	subwf	irobot_query_and_update@i& (0+255),w,b
  3465  0180' B0D8               	btfsc	status,0,c
  3466  0182' 0012               	return	
  3467  0184' D79B               	goto	l2098
  3468  0186'                    __end_of_irobot_query_and_update:
  3469                           	opt stack 0
  3470                           tosu	equ	0xFFF
  3471                           tosh	equ	0xFFE
  3472                           tosl	equ	0xFFD
  3473                           pclath	equ	0xFFA
  3474                           tblptru	equ	0xFF8
  3475                           tblptrh	equ	0xFF7
  3476                           tblptrl	equ	0xFF6
  3477                           tablat	equ	0xFF5
  3478                           prodh	equ	0xFF4
  3479                           prodl	equ	0xFF3
  3480                           postinc0	equ	0xFEE
  3481                           wreg	equ	0xFE8
  3482                           postdec1	equ	0xFE5
  3483                           fsr1h	equ	0xFE2
  3484                           fsr1l	equ	0xFE1
  3485                           indf2	equ	0xFDF
  3486                           postinc2	equ	0xFDE
  3487                           fsr2h	equ	0xFDA
  3488                           fsr2l	equ	0xFD9
  3489                           status	equ	0xFD8
  3490                           
  3491 ;; *************** function _rx_assign *****************
  3492 ;; Defined at:
  3493 ;;		line 74 in file "Library/iRobotSerial.c"
  3494 ;; Parameters:    Size  Location     Type
  3495 ;;  packetID        1    wreg     unsigned char 
  3496 ;;  packetIDValu    1    1[BANK0 ] unsigned char 
  3497 ;;  byteNumber      1    2[BANK0 ] unsigned char 
  3498 ;; Auto vars:     Size  Location     Type
  3499 ;;  packetID        1    5[BANK0 ] unsigned char 
  3500 ;; Return value:  Size  Location     Type
  3501 ;;                  1    wreg      void 
  3502 ;; Registers used:
  3503 ;;		wreg, status,2, status,0, cstack
  3504 ;; Tracked objects:
  3505 ;;		On entry : 0/0
  3506 ;;		On exit  : 0/0
  3507 ;;		Unchanged: 0/0
  3508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3509 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3510 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3511 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3512 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3513 ;;Total ram usage:        5 bytes
  3514 ;; Hardware stack levels used:    1
  3515 ;; Hardware stack levels required when called:    8
  3516 ;; This function calls:
  3517 ;;		_sort_iRBumpDrop
  3518 ;; This function is called by:
  3519 ;;		_irobot_query_and_update
  3520 ;; This function uses a non-reentrant model
  3521 ;;
  3522                           
  3523                           	psect	text6
  3524  0000'                    __ptext6:
  3525                           	opt stack 0
  3526  0000'                    _rx_assign:
  3527                           	opt stack 19
  3528                           
  3529                           ; BSR set to: 0
  3530                           ;incstack = 0
  3531                           ;rx_assign@packetID stored from wreg
  3532  0000' 0100               	movlb	0	; () banked
  3533  0002' 6F00'              	movwf	rx_assign@packetID& (0+255),b
  3534                           
  3535                           ;iRobotSerial.c: 75: switch (packetID) {
  3536  0004' D057               	goto	l2031
  3537  0006'                    l2032:
  3538                           
  3539                           ; BSR set to: 0
  3540  0006' C001' F00B'        	movff	rx_assign@packetIDValue,_iRBumpDrop
  3541                           
  3542                           ; BSR set to: 0
  3543  000A' EC00' F000'        	call	_sort_iRBumpDrop	;wreg free
  3544  000E' 0012               	return	
  3545  0010'                    l2034:
  3546                           
  3547                           ; BSR set to: 0
  3548  0010' C001' F00A'        	movff	rx_assign@packetIDValue,_iRWall
  3549  0014' 0012               	return	
  3550  0016'                    l2035:
  3551                           
  3552                           ; BSR set to: 0
  3553  0016' C001' F009'        	movff	rx_assign@packetIDValue,_iRCliffL
  3554  001A' 0012               	return	
  3555  001C'                    l2036:
  3556                           
  3557                           ; BSR set to: 0
  3558  001C' C001' F008'        	movff	rx_assign@packetIDValue,_iRCliffFL
  3559  0020' 0012               	return	
  3560  0022'                    l2037:
  3561                           
  3562                           ; BSR set to: 0
  3563  0022' C001' F007'        	movff	rx_assign@packetIDValue,_iRCliffFR
  3564  0026' 0012               	return	
  3565  0028'                    l2038:
  3566                           
  3567                           ; BSR set to: 0
  3568  0028' C001' F006'        	movff	rx_assign@packetIDValue,_iRCliffR
  3569  002C' 0012               	return	
  3570  002E'                    l2039:
  3571                           
  3572                           ; BSR set to: 0
  3573  002E' C001' F005'        	movff	rx_assign@packetIDValue,_iRVirtualWall
  3574  0032' 0012               	return	
  3575  0034'                    
  3576                           ; BSR set to: 0
  3577                           ;iRobotSerial.c: 84: (byteNumber == 0) ? (iRDistanceSS.HB = packetIDValue) : (iRDistance
      +                          SS.LB = packetIDValue,
  3578                           ;iRobotSerial.c: 85: iRDistance = ((iRDistanceSS.HB)<<8) + iRDistanceSS.LB); break;
  3579                           
  3580                           ; BSR set to: 0
  3581  0034' 0100               	movlb	0	; () banked
  3582  0036' 5100'              	movf	rx_assign@byteNumber& (0+255),w,b
  3583  0038' 0100               	movlb	0	; () banked
  3584  003A' A4D8               	btfss	status,2,c
  3585  003C' D005               	goto	l2042
  3586                           
  3587                           ; BSR set to: 0
  3588  003E' C001' F000'        	movff	rx_assign@packetIDValue,_iRDistanceSS
  3589  0042' 0100               	movlb	0	; () banked
  3590  0044' 6B00'              	clrf	(_iRDistanceSS+1)& (0+255),b
  3591  0046' 0012               	return	
  3592  0048'                    l2042:
  3593                           
  3594                           ; BSR set to: 0
  3595  0048' C001' F002'        	movff	rx_assign@packetIDValue,_iRDistanceSS+2
  3596  004C' 0100               	movlb	0	; () banked
  3597  004E' 6B00'              	clrf	(_iRDistanceSS+3)& (0+255),b
  3598                           
  3599                           ; BSR set to: 0
  3600  0050' 0100               	movlb	0	; () banked
  3601  0052' 5100'              	movf	_iRDistanceSS& (0+255),w,b
  3602  0054' 0100               	movlb	0	; () banked
  3603  0056' 6F00'              	movwf	(??_rx_assign+1)& (0+255),b
  3604  0058' 6B00'              	clrf	??_rx_assign& (0+255),b
  3605  005A' 0100               	movlb	0	; () banked
  3606  005C' 5100'              	movf	(_iRDistanceSS+2)& (0+255),w,b
  3607  005E' 0100               	movlb	0	; () banked
  3608  0060' 2500'              	addwf	??_rx_assign& (0+255),w,b
  3609  0062' 0100               	movlb	0	; () banked
  3610  0064' 6F00'              	movwf	_iRDistance& (0+255),b
  3611  0066' 0100               	movlb	0	; () banked
  3612  0068' 5100'              	movf	(_iRDistanceSS+3)& (0+255),w,b
  3613  006A' 0100               	movlb	0	; () banked
  3614  006C' 2100'              	addwfc	(??_rx_assign+1)& (0+255),w,b
  3615  006E' 0100               	movlb	0	; () banked
  3616  0070' 6F00'              	movwf	(_iRDistance+1)& (0+255),b
  3617                           
  3618                           ; BSR set to: 0
  3619  0072' 0012               	return	
  3620  0074'                    
  3621                           ; BSR set to: 0
  3622                           ;iRobotSerial.c: 87: (byteNumber == 0) ? (iRAngleSS.HB = packetIDValue) : (iRAngleSS.LB 
      +                          = packetIDValue,
  3623                           ;iRobotSerial.c: 88: iRAngle = ((iRAngleSS.HB)<<8) + iRAngleSS.LB); break;
  3624                           
  3625                           ; BSR set to: 0
  3626  0074' 0100               	movlb	0	; () banked
  3627  0076' 5100'              	movf	rx_assign@byteNumber& (0+255),w,b
  3628  0078' 0100               	movlb	0	; () banked
  3629  007A' A4D8               	btfss	status,2,c
  3630  007C' D005               	goto	l2047
  3631                           
  3632                           ; BSR set to: 0
  3633  007E' C001' F01E'        	movff	rx_assign@packetIDValue,_iRAngleSS
  3634  0082' 0103               	movlb	3	; () banked
  3635  0084' 6B00'              	clrf	(_iRAngleSS+1)& (0+255),b
  3636  0086' 0012               	return	
  3637  0088'                    l2047:
  3638                           
  3639                           ; BSR set to: 0
  3640  0088' C001' F020'        	movff	rx_assign@packetIDValue,_iRAngleSS+2
  3641  008C' 0103               	movlb	3	; () banked
  3642  008E' 6B00'              	clrf	(_iRAngleSS+3)& (0+255),b
  3643                           
  3644                           ; BSR set to: 3
  3645  0090' 0103               	movlb	3	; () banked
  3646  0092' 5100'              	movf	_iRAngleSS& (0+255),w,b
  3647  0094' 0100               	movlb	0	; () banked
  3648  0096' 6F00'              	movwf	(??_rx_assign+1)& (0+255),b
  3649  0098' 6B00'              	clrf	??_rx_assign& (0+255),b
  3650  009A' 0103               	movlb	3	; () banked
  3651  009C' 5100'              	movf	(_iRAngleSS+2)& (0+255),w,b
  3652  009E' 0100               	movlb	0	; () banked
  3653  00A0' 2500'              	addwf	??_rx_assign& (0+255),w,b
  3654  00A2' 0100               	movlb	0	; () banked
  3655  00A4' 6F00'              	movwf	_iRAngle& (0+255),b
  3656  00A6' 0103               	movlb	3	; () banked
  3657  00A8' 5100'              	movf	(_iRAngleSS+3)& (0+255),w,b
  3658  00AA' 0100               	movlb	0	; () banked
  3659  00AC' 2100'              	addwfc	(??_rx_assign+1)& (0+255),w,b
  3660  00AE' 0100               	movlb	0	; () banked
  3661  00B0' 6F00'              	movwf	(_iRAngle+1)& (0+255),b
  3662                           
  3663                           ; BSR set to: 0
  3664                           ;iRobotSerial.c: 89: }
  3665                           
  3666                           ; BSR set to: 0
  3667  00B2' 0012               	return	
  3668  00B4'                    l2031:
  3669                           
  3670                           ; BSR set to: 0
  3671  00B4' 0100               	movlb	0	; () banked
  3672  00B6' 5100'              	movf	rx_assign@packetID& (0+255),w,b
  3673                           
  3674                           ; Switch size 1, requested type "space"
  3675                           ; Number of cases is 9, Range of values is 7 to 20
  3676                           ; switch strategies available:
  3677                           ; Name         Instructions Cycles
  3678                           ; simple_byte           28    15 (average)
  3679                           ;	Chosen strategy is simple_byte
  3680  00B8' 0A07               	xorlw	7	; case 7
  3681  00BA' B4D8               	btfsc	status,2,c
  3682  00BC' D7A4               	goto	l2032
  3683  00BE' 0A0F               	xorlw	15	; case 8
  3684  00C0' B4D8               	btfsc	status,2,c
  3685  00C2' D7A6               	goto	l2034
  3686  00C4' 0A01               	xorlw	1	; case 9
  3687  00C6' B4D8               	btfsc	status,2,c
  3688  00C8' D7A6               	goto	l2035
  3689  00CA' 0A03               	xorlw	3	; case 10
  3690  00CC' B4D8               	btfsc	status,2,c
  3691  00CE' D7A6               	goto	l2036
  3692  00D0' 0A01               	xorlw	1	; case 11
  3693  00D2' B4D8               	btfsc	status,2,c
  3694  00D4' D7A6               	goto	l2037
  3695  00D6' 0A07               	xorlw	7	; case 12
  3696  00D8' B4D8               	btfsc	status,2,c
  3697  00DA' D7A6               	goto	l2038
  3698  00DC' 0A01               	xorlw	1	; case 13
  3699  00DE' B4D8               	btfsc	status,2,c
  3700  00E0' D7A6               	goto	l2039
  3701  00E2' 0A1E               	xorlw	30	; case 19
  3702  00E4' B4D8               	btfsc	status,2,c
  3703  00E6' D7A6               	goto	l2040
  3704  00E8' 0A07               	xorlw	7	; case 20
  3705  00EA' A4D8               	btfss	status,2,c
  3706  00EC' 0012               	return	
  3707  00EE' D7C2               	goto	l2045
  3708  00F0'                    __end_of_rx_assign:
  3709                           	opt stack 0
  3710                           tosu	equ	0xFFF
  3711                           tosh	equ	0xFFE
  3712                           tosl	equ	0xFFD
  3713                           pclath	equ	0xFFA
  3714                           tblptru	equ	0xFF8
  3715                           tblptrh	equ	0xFF7
  3716                           tblptrl	equ	0xFF6
  3717                           tablat	equ	0xFF5
  3718                           prodh	equ	0xFF4
  3719                           prodl	equ	0xFF3
  3720                           postinc0	equ	0xFEE
  3721                           wreg	equ	0xFE8
  3722                           postdec1	equ	0xFE5
  3723                           fsr1h	equ	0xFE2
  3724                           fsr1l	equ	0xFE1
  3725                           indf2	equ	0xFDF
  3726                           postinc2	equ	0xFDE
  3727                           fsr2h	equ	0xFDA
  3728                           fsr2l	equ	0xFD9
  3729                           status	equ	0xFD8
  3730                           
  3731 ;; *************** function _sort_iRBumpDrop *****************
  3732 ;; Defined at:
  3733 ;;		line 92 in file "Library/iRobotSerial.c"
  3734 ;; Parameters:    Size  Location     Type
  3735 ;;		None
  3736 ;; Auto vars:     Size  Location     Type
  3737 ;;		None
  3738 ;; Return value:  Size  Location     Type
  3739 ;;                  1    wreg      void 
  3740 ;; Registers used:
  3741 ;;		wreg, status,2, status,0
  3742 ;; Tracked objects:
  3743 ;;		On entry : 0/0
  3744 ;;		On exit  : 0/0
  3745 ;;		Unchanged: 0/0
  3746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3749 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3750 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3751 ;;Total ram usage:        1 bytes
  3752 ;; Hardware stack levels used:    1
  3753 ;; Hardware stack levels required when called:    7
  3754 ;; This function calls:
  3755 ;;		Nothing
  3756 ;; This function is called by:
  3757 ;;		_rx_assign
  3758 ;; This function uses a non-reentrant model
  3759 ;;
  3760                           
  3761                           	psect	text7
  3762  0000'                    __ptext7:
  3763                           	opt stack 0
  3764  0000'                    _sort_iRBumpDrop:
  3765                           	opt stack 19
  3766                           
  3767                           ;iRobotSerial.c: 93: (iRBumpDrop & 0x1) ? (iRBumpRight = 1) : (iRBumpRight = 0);
  3768                           
  3769                           ;incstack = 0
  3770  0000' A00B'              	btfss	_iRBumpDrop,0,c
  3771  0002' D002               	goto	l2054
  3772  0004' 0E01               	movlw	1
  3773  0006' D001               	goto	L1
  3774  0008'                    l2054:
  3775                           
  3776                           ; BSR set to: 0
  3777  0008' 0E00               	movlw	0
  3778  000A'                    L1:
  3779  000A' 0100               	movlb	0	; () banked
  3780  000C' 6F00'              	movwf	_iRBumpRight& (0+255),b
  3781                           
  3782                           ; BSR set to: 0
  3783                           ;iRobotSerial.c: 94: ((iRBumpDrop >> 0x1) & (0x1)) ? (iRBumpLeft = 1) : (iRBumpLeft = 0)
      +                          ;
  3784                           
  3785                           ; BSR set to: 0
  3786  000E' C00B' F000'        	movff	_iRBumpDrop,??_sort_iRBumpDrop
  3787  0012' 0100               	movlb	0	; () banked
  3788  0014' 90D8               	bcf	status,0,c
  3789  0016' 3300'              	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  3790  0018' 0100               	movlb	0	; () banked
  3791  001A' A100'              	btfss	??_sort_iRBumpDrop& (0+255),0,b
  3792  001C' D002               	goto	l2058
  3793                           
  3794                           ; BSR set to: 0
  3795  001E' 0E01               	movlw	1
  3796  0020' D001               	goto	L2
  3797  0022'                    l2058:
  3798                           
  3799                           ; BSR set to: 0
  3800                           
  3801                           ; BSR set to: 0
  3802  0022' 0E00               	movlw	0
  3803  0024'                    L2:
  3804  0024' 0100               	movlb	0	; () banked
  3805  0026' 6F00'              	movwf	_iRBumpLeft& (0+255),b
  3806                           
  3807                           ; BSR set to: 0
  3808                           ;iRobotSerial.c: 95: ((iRBumpDrop >> 0x2) & (0x1)) ? (iRDropRight = 1) : (iRDropRight = 
      +                          0);
  3809                           
  3810                           ; BSR set to: 0
  3811  0028' C00B' F000'        	movff	_iRBumpDrop,??_sort_iRBumpDrop
  3812  002C' 0100               	movlb	0	; () banked
  3813  002E' 90D8               	bcf	status,0,c
  3814  0030' 3300'              	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  3815  0032' 0100               	movlb	0	; () banked
  3816  0034' 90D8               	bcf	status,0,c
  3817  0036' 3300'              	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  3818  0038' 0100               	movlb	0	; () banked
  3819  003A' A100'              	btfss	??_sort_iRBumpDrop& (0+255),0,b
  3820  003C' D002               	goto	l2062
  3821                           
  3822                           ; BSR set to: 0
  3823  003E' 0E01               	movlw	1
  3824  0040' D001               	goto	L3
  3825  0042'                    l2062:
  3826                           
  3827                           ; BSR set to: 0
  3828                           
  3829                           ; BSR set to: 0
  3830  0042' 0E00               	movlw	0
  3831  0044'                    L3:
  3832  0044' 6E04'              	movwf	_iRDropRight,c
  3833                           
  3834                           ; BSR set to: 0
  3835                           ;iRobotSerial.c: 96: ((iRBumpDrop >> 0x3) & (0x1)) ? (iRDropLeft = 1) : (iRDropLeft = 0)
      +                          ;
  3836                           
  3837                           ; BSR set to: 0
  3838  0046' C00B' F000'        	movff	_iRBumpDrop,??_sort_iRBumpDrop
  3839  004A' 0100               	movlb	0	; () banked
  3840  004C' 90D8               	bcf	status,0,c
  3841  004E' 3300'              	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  3842  0050' 0100               	movlb	0	; () banked
  3843  0052' 90D8               	bcf	status,0,c
  3844  0054' 3300'              	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  3845  0056' 0100               	movlb	0	; () banked
  3846  0058' 90D8               	bcf	status,0,c
  3847  005A' 3300'              	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  3848  005C' 0100               	movlb	0	; () banked
  3849  005E' A100'              	btfss	??_sort_iRBumpDrop& (0+255),0,b
  3850  0060' D002               	goto	l2066
  3851                           
  3852                           ; BSR set to: 0
  3853  0062' 0E01               	movlw	1
  3854  0064' D001               	goto	L4
  3855  0066'                    l2066:
  3856                           
  3857                           ; BSR set to: 0
  3858                           
  3859                           ; BSR set to: 0
  3860  0066' 0E00               	movlw	0
  3861  0068'                    L4:
  3862  0068' 0100               	movlb	0	; () banked
  3863  006A' 6F00'              	movwf	_iRDropLeft& (0+255),b
  3864                           
  3865                           ; BSR set to: 0
  3866                           ;iRobotSerial.c: 97: ((iRBumpDrop >> 0x4) & (0x1)) ? (iRDropCaster = 1) : (iRDropCaster 
      +                          = 0);
  3867                           
  3868                           ; BSR set to: 0
  3869  006C' C00B' F000'        	movff	_iRBumpDrop,??_sort_iRBumpDrop
  3870  0070' 0100               	movlb	0	; () banked
  3871  0072' 3B00'              	swapf	??_sort_iRBumpDrop& (0+255),f,b
  3872  0074' 0E0F               	movlw	15
  3873  0076' 1700'              	andwf	??_sort_iRBumpDrop& (0+255),f,b
  3874  0078' 0100               	movlb	0	; () banked
  3875  007A' A100'              	btfss	??_sort_iRBumpDrop& (0+255),0,b
  3876  007C' D004               	goto	l2070
  3877                           
  3878                           ; BSR set to: 0
  3879  007E' 0E01               	movlw	1
  3880  0080' 0100               	movlb	0	; () banked
  3881  0082' 6F00'              	movwf	_iRDropCaster& (0+255),b
  3882  0084' 0012               	return	
  3883  0086'                    l2070:
  3884                           
  3885                           ; BSR set to: 0
  3886                           
  3887                           ; BSR set to: 0
  3888  0086' 0E00               	movlw	0
  3889  0088' 0100               	movlb	0	; () banked
  3890  008A' 6F00'              	movwf	_iRDropCaster& (0+255),b
  3891  008C' 0012               	return	
  3892  008E'                    __end_of_sort_iRBumpDrop:
  3893                           	opt stack 0
  3894                           tosu	equ	0xFFF
  3895                           tosh	equ	0xFFE
  3896                           tosl	equ	0xFFD
  3897                           pclath	equ	0xFFA
  3898                           tblptru	equ	0xFF8
  3899                           tblptrh	equ	0xFF7
  3900                           tblptrl	equ	0xFF6
  3901                           tablat	equ	0xFF5
  3902                           prodh	equ	0xFF4
  3903                           prodl	equ	0xFF3
  3904                           postinc0	equ	0xFEE
  3905                           wreg	equ	0xFE8
  3906                           postdec1	equ	0xFE5
  3907                           fsr1h	equ	0xFE2
  3908                           fsr1l	equ	0xFE1
  3909                           indf2	equ	0xFDF
  3910                           postinc2	equ	0xFDE
  3911                           fsr2h	equ	0xFDA
  3912                           fsr2l	equ	0xFD9
  3913                           status	equ	0xFD8
  3914                           
  3915 ;; *************** function _get_packet_size *****************
  3916 ;; Defined at:
  3917 ;;		line 60 in file "Library/iRobotSerial.c"
  3918 ;; Parameters:    Size  Location     Type
  3919 ;;  packetID        1    wreg     unsigned char 
  3920 ;; Auto vars:     Size  Location     Type
  3921 ;;  packetID        1    0[BANK0 ] unsigned char 
  3922 ;; Return value:  Size  Location     Type
  3923 ;;                  1    wreg      unsigned char 
  3924 ;; Registers used:
  3925 ;;		wreg, status,2, status,0
  3926 ;; Tracked objects:
  3927 ;;		On entry : 0/0
  3928 ;;		On exit  : 0/0
  3929 ;;		Unchanged: 0/0
  3930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3932 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3934 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3935 ;;Total ram usage:        1 bytes
  3936 ;; Hardware stack levels used:    1
  3937 ;; Hardware stack levels required when called:    7
  3938 ;; This function calls:
  3939 ;;		Nothing
  3940 ;; This function is called by:
  3941 ;;		_irobot_query_and_update
  3942 ;; This function uses a non-reentrant model
  3943 ;;
  3944                           
  3945                           	psect	text8
  3946  0000'                    __ptext8:
  3947                           	opt stack 0
  3948  0000'                    _get_packet_size:
  3949                           	opt stack 20
  3950                           
  3951                           ; BSR set to: 0
  3952                           ;incstack = 0
  3953                           ;get_packet_size@packetID stored from wreg
  3954  0000' 0100               	movlb	0	; () banked
  3955  0002' 6F00'              	movwf	get_packet_size@packetID& (0+255),b
  3956                           
  3957                           ;iRobotSerial.c: 61: switch (packetID) {
  3958  0004' D012               	goto	l2017
  3959  0006' 0E01               	movlw	1
  3960  0008' 0012               	return	
  3961  000A' 0E01               	movlw	1
  3962  000C' 0012               	return	
  3963  000E' 0E01               	movlw	1
  3964  0010' 0012               	return	
  3965  0012' 0E01               	movlw	1
  3966  0014' 0012               	return	
  3967  0016' 0E01               	movlw	1
  3968  0018' 0012               	return	
  3969  001A' 0E01               	movlw	1
  3970  001C' 0012               	return	
  3971  001E' 0E01               	movlw	1
  3972  0020' 0012               	return	
  3973  0022' 0E02               	movlw	2
  3974  0024' 0012               	return	
  3975  0026' 0E02               	movlw	2
  3976                           
  3977                           ;iRobotSerial.c: 71: }
  3978  0028' 0012               	return	
  3979  002A'                    l2017:
  3980  002A' 0100               	movlb	0	; () banked
  3981  002C' 5100'              	movf	get_packet_size@packetID& (0+255),w,b
  3982                           
  3983                           ; Switch size 1, requested type "space"
  3984                           ; Number of cases is 9, Range of values is 7 to 20
  3985                           ; switch strategies available:
  3986                           ; Name         Instructions Cycles
  3987                           ; simple_byte           28    15 (average)
  3988                           ;	Chosen strategy is simple_byte
  3989  002E' 0A07               	xorlw	7	; case 7
  3990  0030' B4D8               	btfsc	status,2,c
  3991  0032' D7E9               	goto	l2018
  3992  0034' 0A0F               	xorlw	15	; case 8
  3993  0036' B4D8               	btfsc	status,2,c
  3994  0038' D7E8               	goto	l2020
  3995  003A' 0A01               	xorlw	1	; case 9
  3996  003C' B4D8               	btfsc	status,2,c
  3997  003E' D7E7               	goto	l2021
  3998  0040' 0A03               	xorlw	3	; case 10
  3999  0042' B4D8               	btfsc	status,2,c
  4000  0044' D7E6               	goto	l2022
  4001  0046' 0A01               	xorlw	1	; case 11
  4002  0048' B4D8               	btfsc	status,2,c
  4003  004A' D7E5               	goto	l2023
  4004  004C' 0A07               	xorlw	7	; case 12
  4005  004E' B4D8               	btfsc	status,2,c
  4006  0050' D7E4               	goto	l2024
  4007  0052' 0A01               	xorlw	1	; case 13
  4008  0054' B4D8               	btfsc	status,2,c
  4009  0056' D7E3               	goto	l2025
  4010  0058' 0A1E               	xorlw	30	; case 19
  4011  005A' B4D8               	btfsc	status,2,c
  4012  005C' D7E2               	goto	l2026
  4013  005E' 0A07               	xorlw	7	; case 20
  4014  0060' A4D8               	btfss	status,2,c
  4015  0062' 0012               	return	
  4016  0064' D7E0               	goto	l2027
  4017  0066'                    __end_of_get_packet_size:
  4018                           	opt stack 0
  4019                           tosu	equ	0xFFF
  4020                           tosh	equ	0xFFE
  4021                           tosl	equ	0xFFD
  4022                           pclath	equ	0xFFA
  4023                           tblptru	equ	0xFF8
  4024                           tblptrh	equ	0xFF7
  4025                           tblptrl	equ	0xFF6
  4026                           tablat	equ	0xFF5
  4027                           prodh	equ	0xFF4
  4028                           prodl	equ	0xFF3
  4029                           postinc0	equ	0xFEE
  4030                           wreg	equ	0xFE8
  4031                           postdec1	equ	0xFE5
  4032                           fsr1h	equ	0xFE2
  4033                           fsr1l	equ	0xFE1
  4034                           indf2	equ	0xFDF
  4035                           postinc2	equ	0xFDE
  4036                           fsr2h	equ	0xFDA
  4037                           fsr2l	equ	0xFD9
  4038                           status	equ	0xFD8
  4039                           
  4040 ;; *************** function _eusart_getch *****************
  4041 ;; Defined at:
  4042 ;;		line 125 in file "Library/iRobotSerial.c"
  4043 ;; Parameters:    Size  Location     Type
  4044 ;;		None
  4045 ;; Auto vars:     Size  Location     Type
  4046 ;;		None
  4047 ;; Return value:  Size  Location     Type
  4048 ;;                  1    wreg      unsigned char 
  4049 ;; Registers used:
  4050 ;;		wreg, status,2
  4051 ;; Tracked objects:
  4052 ;;		On entry : 0/0
  4053 ;;		On exit  : 0/0
  4054 ;;		Unchanged: 0/0
  4055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4059 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4060 ;;Total ram usage:        0 bytes
  4061 ;; Hardware stack levels used:    1
  4062 ;; Hardware stack levels required when called:    7
  4063 ;; This function calls:
  4064 ;;		Nothing
  4065 ;; This function is called by:
  4066 ;;		_irobot_query_and_update
  4067 ;; This function uses a non-reentrant model
  4068 ;;
  4069                           
  4070                           	psect	text9
  4071  0000'                    __ptext9:
  4072                           	opt stack 0
  4073  0000'                    _eusart_getch:
  4074                           	opt stack 20
  4075                           
  4076                           ;iRobotSerial.c: 126: while (!PIR1bits.RC1IF) {};
  4077                           
  4078                           ;incstack = 0
  4079  0000' AA9E               	btfss	3998,5,c	;volatile
  4080  0002' D7FE               	goto	_eusart_getch
  4081                           
  4082                           ;iRobotSerial.c: 127: return RCREG1;
  4083  0004' 50AF               	movf	4015,w,c	;volatile
  4084  0006' 0012               	return	
  4085  0008'                    __end_of_eusart_getch:
  4086                           	opt stack 0
  4087                           tosu	equ	0xFFF
  4088                           tosh	equ	0xFFE
  4089                           tosl	equ	0xFFD
  4090                           pclath	equ	0xFFA
  4091                           tblptru	equ	0xFF8
  4092                           tblptrh	equ	0xFF7
  4093                           tblptrl	equ	0xFF6
  4094                           tablat	equ	0xFF5
  4095                           prodh	equ	0xFF4
  4096                           prodl	equ	0xFF3
  4097                           postinc0	equ	0xFEE
  4098                           wreg	equ	0xFE8
  4099                           postdec1	equ	0xFE5
  4100                           fsr1h	equ	0xFE2
  4101                           fsr1l	equ	0xFE1
  4102                           indf2	equ	0xFDF
  4103                           postinc2	equ	0xFDE
  4104                           fsr2h	equ	0xFDA
  4105                           fsr2l	equ	0xFD9
  4106                           status	equ	0xFD8
  4107                           
  4108 ;; *************** function _printf *****************
  4109 ;; Defined at:
  4110 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  4111 ;; Parameters:    Size  Location     Type
  4112 ;;  f               2   21[BANK0 ] PTR const unsigned char 
  4113 ;;		 -> STR_4(14), STR_3(3), STR_2(46), STR_1(3), 
  4114 ;; Auto vars:     Size  Location     Type
  4115 ;;  tmpval          4    0        struct .
  4116 ;;  cp              3    0        PTR const unsigned char 
  4117 ;;  val             2   34[BANK0 ] unsigned int 
  4118 ;;  ap              2   32[BANK0 ] PTR void [1]
  4119 ;;		 -> ?_printf(2), 
  4120 ;;  len             2    0        unsigned int 
  4121 ;;  c               1   36[BANK0 ] char 
  4122 ;;  flag            1   31[BANK0 ] unsigned char 
  4123 ;;  prec            1   30[BANK0 ] char 
  4124 ;; Return value:  Size  Location     Type
  4125 ;;                  2   21[BANK0 ] int 
  4126 ;; Registers used:
  4127 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4128 ;; Tracked objects:
  4129 ;;		On entry : 0/0
  4130 ;;		On exit  : 0/0
  4131 ;;		Unchanged: 0/0
  4132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4133 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4134 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4135 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4136 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4137 ;;Total ram usage:       16 bytes
  4138 ;; Hardware stack levels used:    1
  4139 ;; Hardware stack levels required when called:   12
  4140 ;; This function calls:
  4141 ;;		___lwdiv
  4142 ;;		___lwmod
  4143 ;;		_putch
  4144 ;; This function is called by:
  4145 ;;		_mode2
  4146 ;; This function uses a non-reentrant model
  4147 ;;
  4148                           
  4149                           	psect	text10
  4150  0000'                    __ptext10:
  4151                           	opt stack 0
  4152  0000'                    _printf:
  4153                           	opt stack 17
  4154                           
  4155                           ;doprnt.c: 466: va_list ap;
  4156                           ;doprnt.c: 499: signed char c;
  4157                           ;doprnt.c: 506: signed char prec;
  4158                           ;doprnt.c: 508: unsigned char flag;
  4159                           ;doprnt.c: 523: union {
  4160                           ;doprnt.c: 524: unsigned long vd;
  4161                           ;doprnt.c: 525: double integ;
  4162                           ;doprnt.c: 526: } tmpval;
  4163                           ;doprnt.c: 528: unsigned int val;
  4164                           ;doprnt.c: 529: unsigned len;
  4165                           ;doprnt.c: 530: const char * cp;
  4166                           ;doprnt.c: 533: *ap = __va_start();
  4167                           
  4168                           ;incstack = 0
  4169  0000' 0E00'              	movlw	low (?_printf+2)
  4170  0002' 0100               	movlb	0	; () banked
  4171  0004' 6F00'              	movwf	printf@ap& (0+255),b
  4172  0006' 0E00'              	movlw	high (?_printf+2)
  4173  0008' 0100               	movlb	0	; () banked
  4174  000A' 6F00'              	movwf	(printf@ap+1)& (0+255),b
  4175                           
  4176                           ;doprnt.c: 536: while(c = *f++) {
  4177  000C' D0C9               	goto	u8420
  4178  000E'                    
  4179                           ; BSR set to: 0
  4180                           ;doprnt.c: 538: if(c != '%')
  4181                           
  4182                           ; BSR set to: 0
  4183  000E' 0E25               	movlw	37
  4184  0010' 0100               	movlb	0	; () banked
  4185  0012' 1900'              	xorwf	printf@c& (0+255),w,b
  4186  0014' B4D8               	btfsc	status,2,c
  4187  0016' D005               	goto	l2324
  4188                           
  4189                           ; BSR set to: 0
  4190                           ;doprnt.c: 540: {
  4191                           ;doprnt.c: 541: (putch(c) );
  4192  0018' 0100               	movlb	0	; () banked
  4193  001A' 5100'              	movf	printf@c& (0+255),w,b
  4194  001C' EC00' F000'        	call	_putch
  4195                           
  4196                           ;doprnt.c: 542: continue;
  4197  0020' D0BF               	goto	u8420
  4198  0022'                    l2324:
  4199                           
  4200                           ;doprnt.c: 543: }
  4201                           ;doprnt.c: 548: flag = 0;
  4202  0022' 0E00               	movlw	0
  4203  0024' 0100               	movlb	0	; () banked
  4204  0026' 6F00'              	movwf	printf@flag& (0+255),b
  4205                           
  4206                           ;doprnt.c: 635: switch(c = *f++) {
  4207  0028' D014               	goto	l2325
  4208  002A'                    
  4209                           ; BSR set to: 0
  4210                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  4211                           
  4212                           ; BSR set to: 0
  4213  002A' C020' FFD9         	movff	printf@ap,fsr2l
  4214  002E' C021' FFDA         	movff	printf@ap+1,fsr2h
  4215  0032' 50DF               	movf	indf2,w,c
  4216  0034' 0100               	movlb	0	; () banked
  4217  0036' 6F00'              	movwf	printf@c& (0+255),b
  4218                           
  4219                           ; BSR set to: 0
  4220  0038' 0E02               	movlw	2
  4221  003A' 0100               	movlb	0	; () banked
  4222  003C' 2700'              	addwf	printf@ap& (0+255),f,b
  4223  003E' 0E00               	movlw	0
  4224  0040' 2300'              	addwfc	(printf@ap+1)& (0+255),f,b
  4225  0042'                    
  4226                           ; BSR set to: 0
  4227                           ;doprnt.c: 809: (putch(c) );
  4228                           
  4229                           ; BSR set to: 0
  4230  0042' 0100               	movlb	0	; () banked
  4231  0044' 5100'              	movf	printf@c& (0+255),w,b
  4232  0046' EC00' F000'        	call	_putch
  4233                           
  4234                           ;doprnt.c: 810: continue;
  4235  004A' D0AA               	goto	u8420
  4236  004C'                    
  4237                           ;doprnt.c: 818: flag |= 0x40;
  4238  004C' 0100               	movlb	0	; () banked
  4239  004E' 8D00'              	bsf	printf@flag& (0+255),6,b
  4240                           
  4241                           ; BSR set to: 0
  4242                           ;doprnt.c: 822: }
  4243                           
  4244                           ;doprnt.c: 819: break;
  4245  0050' D01E               	goto	l2330
  4246  0052'                    l2325:
  4247                           
  4248                           ; BSR set to: 0
  4249                           
  4250                           ; BSR set to: 0
  4251  0052' C015' FFF6         	movff	printf@f,tblptrl
  4252  0056' C016' FFF7         	movff	printf@f+1,tblptrh
  4253  005A' 0100               	movlb	0	; () banked
  4254  005C' 4B00'              	infsnz	printf@f& (0+255),f,b
  4255  005E' 2B00'              	incf	(printf@f+1)& (0+255),f,b
  4256  0060'                    	if	0	;tblptru may be non-zero
  4257  0060'                    	endif
  4258  0060'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4259  0060' 0E00'              	movlw	low (__mediumconst shr (0+16))
  4260  0062' 6EF8               	movwf	tblptru,c
  4261  0064'                    	endif
  4262  0064' 0008               	tblrd		*
  4263  0066' CFF5 F024'         	movff	tablat,printf@c
  4264  006A' 0100               	movlb	0	; () banked
  4265  006C' 5100'              	movf	printf@c& (0+255),w,b
  4266                           
  4267                           ; Switch size 1, requested type "space"
  4268                           ; Number of cases is 5, Range of values is 0 to 117
  4269                           ; switch strategies available:
  4270                           ; Name         Instructions Cycles
  4271                           ; simple_byte           16     9 (average)
  4272                           ;	Chosen strategy is simple_byte
  4273  006E' 0A00               	xorlw	0	; case 0
  4274  0070' B4D8               	btfsc	status,2,c
  4275  0072' 0012               	return	
  4276  0074' 0A63               	xorlw	99	; case 99
  4277  0076' B4D8               	btfsc	status,2,c
  4278  0078' D7D8               	goto	l2331
  4279  007A' 0A07               	xorlw	7	; case 100
  4280  007C' B4D8               	btfsc	status,2,c
  4281  007E' D007               	goto	l2330
  4282  0080' 0A0D               	xorlw	13	; case 105
  4283  0082' B4D8               	btfsc	status,2,c
  4284  0084' D004               	goto	l2330
  4285  0086' 0A1C               	xorlw	28	; case 117
  4286  0088' B4D8               	btfsc	status,2,c
  4287  008A' D7E0               	goto	l2333
  4288  008C' D7DA               	goto	l2332
  4289  008E'                    l2330:
  4290                           
  4291                           ; BSR set to: 0
  4292                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  4293  008E' 0100               	movlb	0	; () banked
  4294  0090' BD00'              	btfsc	printf@flag& (0+255),6,b
  4295  0092' D019               	goto	l2334
  4296                           
  4297                           ; BSR set to: 0
  4298                           ;doprnt.c: 1253: {
  4299                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4300  0094' C020' FFD9         	movff	printf@ap,fsr2l
  4301  0098' C021' FFDA         	movff	printf@ap+1,fsr2h
  4302  009C' CFDE F022'         	movff	postinc2,printf@val
  4303  00A0' CFDD F023'         	movff	postdec2,printf@val+1
  4304                           
  4305                           ; BSR set to: 0
  4306  00A4' 0E02               	movlw	2
  4307  00A6' 0100               	movlb	0	; () banked
  4308  00A8' 2700'              	addwf	printf@ap& (0+255),f,b
  4309  00AA' 0E00               	movlw	0
  4310  00AC' 2300'              	addwfc	(printf@ap+1)& (0+255),f,b
  4311                           
  4312                           ; BSR set to: 0
  4313                           ;doprnt.c: 1261: if((int)val < 0) {
  4314  00AE' 0100               	movlb	0	; () banked
  4315  00B0' AF00'              	btfss	(printf@val+1)& (0+255),7,b
  4316  00B2' D016               	goto	l2336
  4317                           
  4318                           ; BSR set to: 0
  4319                           ;doprnt.c: 1262: flag |= 0x03;
  4320  00B4' 0E03               	movlw	3
  4321  00B6' 0100               	movlb	0	; () banked
  4322  00B8' 1300'              	iorwf	printf@flag& (0+255),f,b
  4323                           
  4324                           ; BSR set to: 0
  4325                           ;doprnt.c: 1263: val = -val;
  4326  00BA' 0100               	movlb	0	; () banked
  4327  00BC' 6D00'              	negf	printf@val& (0+255),b
  4328  00BE' 1F00'              	comf	(printf@val+1)& (0+255),f,b
  4329  00C0' B0D8               	btfsc	status,0,c
  4330  00C2' 2B00'              	incf	(printf@val+1)& (0+255),f,b
  4331                           
  4332                           ; BSR set to: 0
  4333                           ;doprnt.c: 1264: }
  4334                           ;doprnt.c: 1266: }
  4335  00C4' D00D               	goto	l2336
  4336  00C6'                    l2334:
  4337                           
  4338                           ; BSR set to: 0
  4339                           ;doprnt.c: 1268: else
  4340                           ;doprnt.c: 1273: {
  4341                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4342                           
  4343                           ; BSR set to: 0
  4344  00C6' C020' FFD9         	movff	printf@ap,fsr2l
  4345  00CA' C021' FFDA         	movff	printf@ap+1,fsr2h
  4346  00CE' CFDE F022'         	movff	postinc2,printf@val
  4347  00D2' CFDD F023'         	movff	postdec2,printf@val+1
  4348                           
  4349                           ; BSR set to: 0
  4350  00D6' 0E02               	movlw	2
  4351  00D8' 0100               	movlb	0	; () banked
  4352  00DA' 2700'              	addwf	printf@ap& (0+255),f,b
  4353  00DC' 0E00               	movlw	0
  4354  00DE' 2300'              	addwfc	(printf@ap+1)& (0+255),f,b
  4355  00E0'                    l2336:
  4356                           
  4357                           ; BSR set to: 0
  4358                           ;doprnt.c: 1287: }
  4359                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4360                           
  4361                           ; BSR set to: 0
  4362  00E0' 0E01               	movlw	1
  4363  00E2' 0100               	movlb	0	; () banked
  4364  00E4' 6F00'              	movwf	printf@c& (0+255),b
  4365  00E6'                    l12513:
  4366                           
  4367                           ; BSR set to: 0
  4368  00E6' 0E05               	movlw	5
  4369  00E8' 0100               	movlb	0	; () banked
  4370  00EA' 1900'              	xorwf	printf@c& (0+255),w,b
  4371  00EC' B4D8               	btfsc	status,2,c
  4372  00EE' D019               	goto	u8400
  4373                           
  4374                           ; BSR set to: 0
  4375                           ;doprnt.c: 1306: if(val < dpowers[c])
  4376                           
  4377                           ; BSR set to: 0
  4378                           
  4379                           ; BSR set to: 0
  4380  00F0' 0100               	movlb	0	; () banked
  4381  00F2' 5100'              	movf	printf@c& (0+255),w,b
  4382  00F4' 0D02               	mullw	2
  4383  00F6' 0E00'              	movlw	low _dpowers
  4384  00F8' 24F3               	addwf	prodl,w,c
  4385  00FA' 6EF6               	movwf	tblptrl,c
  4386  00FC' 0E00'              	movlw	high _dpowers
  4387  00FE' 20F4               	addwfc	prodh,w,c
  4388  0100' 6EF7               	movwf	tblptrh,c
  4389  0102'                    	if	1	;There are 3 active tblptr bytes
  4390  0102' 6AF8               	clrf	tblptru,c
  4391  0104' 0E00'              	movlw	low (__mediumconst shr (0+16))
  4392  0106' 22F8               	addwfc	tblptru,f,c
  4393  0108'                    	endif
  4394  0108' 0009               	tblrd		*+
  4395  010A' 50F5               	movf	tablat,w,c
  4396  010C' 0100               	movlb	0	; () banked
  4397  010E' 5D00'              	subwf	printf@val& (0+255),w,b
  4398  0110' 0009               	tblrd		*+
  4399  0112' 50F5               	movf	tablat,w,c
  4400  0114' 0100               	movlb	0	; () banked
  4401  0116' 5900'              	subwfb	(printf@val+1)& (0+255),w,b
  4402  0118' A0D8               	btfss	status,0,c
  4403  011A' D003               	goto	u8400
  4404                           
  4405                           ; BSR set to: 0
  4406                           
  4407                           ; BSR set to: 0
  4408                           
  4409                           ; BSR set to: 0
  4410                           ;doprnt.c: 1307: break;
  4411  011C' 0100               	movlb	0	; () banked
  4412  011E' 2B00'              	incf	printf@c& (0+255),f,b
  4413  0120' D7E2               	goto	l12513
  4414  0122'                    u8400:
  4415                           
  4416                           ; BSR set to: 0
  4417                           ;doprnt.c: 1422: {
  4418                           ;doprnt.c: 1438: if(flag & 0x03)
  4419                           
  4420                           ; BSR set to: 0
  4421  0122' C01F' F01D'        	movff	printf@flag,??_printf
  4422  0126' 0E03               	movlw	3
  4423  0128' 0100               	movlb	0	; () banked
  4424  012A' 1700'              	andwf	??_printf& (0+255),f,b
  4425  012C' B4D8               	btfsc	status,2,c
  4426  012E' D003               	goto	l2340
  4427                           
  4428                           ; BSR set to: 0
  4429                           ;doprnt.c: 1439: (putch('-') );
  4430  0130' 0E2D               	movlw	45
  4431  0132' EC00' F000'        	call	_putch
  4432  0136'                    l2340:
  4433                           
  4434                           ;doprnt.c: 1469: }
  4435                           ;doprnt.c: 1472: prec = c;
  4436  0136' C024' F01E'        	movff	printf@c,printf@prec
  4437                           
  4438                           ;doprnt.c: 1474: while(prec--) {
  4439  013A' D02C               	goto	l2341
  4440  013C'                    
  4441                           ;doprnt.c: 1478: {
  4442                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4443  013C' 0100               	movlb	0	; () banked
  4444  013E' 5100'              	movf	printf@prec& (0+255),w,b
  4445  0140' 0D02               	mullw	2
  4446  0142' 0E00'              	movlw	low _dpowers
  4447  0144' 24F3               	addwf	prodl,w,c
  4448  0146' 6EF6               	movwf	tblptrl,c
  4449  0148' 0E00'              	movlw	high _dpowers
  4450  014A' 20F4               	addwfc	prodh,w,c
  4451  014C' 6EF7               	movwf	tblptrh,c
  4452  014E'                    	if	1	;There are 3 active tblptr bytes
  4453  014E' 6AF8               	clrf	tblptru,c
  4454  0150' 0E00'              	movlw	low (__mediumconst shr (0+16))
  4455  0152' 22F8               	addwfc	tblptru,f,c
  4456  0154'                    	endif
  4457  0154' 0009               	tblrd		*+
  4458  0156' CFF5 F002'         	movff	tablat,___lwdiv@divisor
  4459  015A' 000A               	tblrd		*-
  4460  015C' CFF5 F003'         	movff	tablat,___lwdiv@divisor+1
  4461  0160' C022' F000'        	movff	printf@val,___lwdiv@dividend
  4462  0164' C023' F001'        	movff	printf@val+1,___lwdiv@dividend+1
  4463  0168' EC00' F000'        	call	___lwdiv	;wreg free
  4464  016C' C000' F007'        	movff	?___lwdiv,___lwmod@dividend
  4465  0170' C001' F008'        	movff	?___lwdiv+1,___lwmod@dividend+1
  4466  0174' 0E00               	movlw	0
  4467  0176' 0100               	movlb	0	; () banked
  4468  0178' 6F00'              	movwf	(___lwmod@divisor+1)& (0+255),b
  4469  017A' 0E0A               	movlw	10
  4470  017C' 6F00'              	movwf	___lwmod@divisor& (0+255),b
  4471  017E' EC00' F000'        	call	___lwmod	;wreg free
  4472  0182' 0100               	movlb	0	; () banked
  4473  0184' 5100'              	movf	?___lwmod& (0+255),w,b
  4474  0186' 0F30               	addlw	48
  4475  0188' 0100               	movlb	0	; () banked
  4476  018A' 6F00'              	movwf	printf@c& (0+255),b
  4477                           
  4478                           ; BSR set to: 0
  4479                           ;doprnt.c: 1523: }
  4480                           ;doprnt.c: 1524: (putch(c) );
  4481  018C' 0100               	movlb	0	; () banked
  4482  018E' 5100'              	movf	printf@c& (0+255),w,b
  4483  0190' EC00' F000'        	call	_putch
  4484  0194'                    l2341:
  4485  0194' 0100               	movlb	0	; () banked
  4486  0196' 0700'              	decf	printf@prec& (0+255),f,b
  4487  0198' 0100               	movlb	0	; () banked
  4488  019A' 2900'              	incf	printf@prec& (0+255),w,b
  4489  019C' A4D8               	btfss	status,2,c
  4490  019E' D7CE               	goto	l2342
  4491  01A0'                    u8420:
  4492                           
  4493                           ; BSR set to: 0
  4494                           
  4495                           ; BSR set to: 0
  4496  01A0' C015' FFF6         	movff	printf@f,tblptrl
  4497  01A4' C016' FFF7         	movff	printf@f+1,tblptrh
  4498  01A8' 0100               	movlb	0	; () banked
  4499  01AA' 4B00'              	infsnz	printf@f& (0+255),f,b
  4500  01AC' 2B00'              	incf	(printf@f+1)& (0+255),f,b
  4501  01AE'                    	if	0	;tblptru may be non-zero
  4502  01AE'                    	endif
  4503  01AE'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4504  01AE' 0E00'              	movlw	low (__mediumconst shr (0+16))
  4505  01B0' 6EF8               	movwf	tblptru,c
  4506  01B2'                    	endif
  4507  01B2' 0008               	tblrd		*
  4508  01B4' CFF5 F024'         	movff	tablat,printf@c
  4509  01B8' 0100               	movlb	0	; () banked
  4510  01BA' 5100'              	movf	printf@c& (0+255),w,b
  4511  01BC' B4D8               	btfsc	status,2,c
  4512  01BE' 0012               	return	
  4513  01C0' D726               	goto	l2323
  4514  01C2'                    __end_of_printf:
  4515                           	opt stack 0
  4516                           tosu	equ	0xFFF
  4517                           tosh	equ	0xFFE
  4518                           tosl	equ	0xFFD
  4519                           pclath	equ	0xFFA
  4520                           tblptru	equ	0xFF8
  4521                           tblptrh	equ	0xFF7
  4522                           tblptrl	equ	0xFF6
  4523                           tablat	equ	0xFF5
  4524                           prodh	equ	0xFF4
  4525                           prodl	equ	0xFF3
  4526                           postinc0	equ	0xFEE
  4527                           wreg	equ	0xFE8
  4528                           postdec1	equ	0xFE5
  4529                           fsr1h	equ	0xFE2
  4530                           fsr1l	equ	0xFE1
  4531                           indf2	equ	0xFDF
  4532                           postinc2	equ	0xFDE
  4533                           postdec2	equ	0xFDD
  4534                           fsr2h	equ	0xFDA
  4535                           fsr2l	equ	0xFD9
  4536                           status	equ	0xFD8
  4537                           
  4538 ;; *************** function _putch *****************
  4539 ;; Defined at:
  4540 ;;		line 454 in file "Library/Console.c"
  4541 ;; Parameters:    Size  Location     Type
  4542 ;;  c               1    wreg     unsigned char 
  4543 ;; Auto vars:     Size  Location     Type
  4544 ;;  c               1   20[BANK0 ] unsigned char 
  4545 ;; Return value:  Size  Location     Type
  4546 ;;                  1    wreg      void 
  4547 ;; Registers used:
  4548 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4549 ;; Tracked objects:
  4550 ;;		On entry : 0/0
  4551 ;;		On exit  : 0/0
  4552 ;;		Unchanged: 0/0
  4553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4555 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4557 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4558 ;;Total ram usage:        1 bytes
  4559 ;; Hardware stack levels used:    1
  4560 ;; Hardware stack levels required when called:   11
  4561 ;; This function calls:
  4562 ;;		_Console_PrintChar
  4563 ;; This function is called by:
  4564 ;;		_printf
  4565 ;; This function uses a non-reentrant model
  4566 ;;
  4567                           
  4568                           	psect	text11
  4569  0000'                    __ptext11:
  4570                           	opt stack 0
  4571  0000'                    _putch:
  4572                           	opt stack 17
  4573                           
  4574                           ; BSR set to: 0
  4575                           ;incstack = 0
  4576                           ;putch@c stored from wreg
  4577  0000' 0100               	movlb	0	; () banked
  4578  0002' 6F00'              	movwf	putch@c& (0+255),b
  4579                           
  4580                           ;Console.c: 456: Console_PrintChar(c);
  4581  0004' 0100               	movlb	0	; () banked
  4582  0006' 5100'              	movf	putch@c& (0+255),w,b
  4583  0008' EC00' F000'        	call	_Console_PrintChar
  4584  000C' 0012               	return		;funcret
  4585  000E'                    __end_of_putch:
  4586                           	opt stack 0
  4587                           tosu	equ	0xFFF
  4588                           tosh	equ	0xFFE
  4589                           tosl	equ	0xFFD
  4590                           pclath	equ	0xFFA
  4591                           tblptru	equ	0xFF8
  4592                           tblptrh	equ	0xFF7
  4593                           tblptrl	equ	0xFF6
  4594                           tablat	equ	0xFF5
  4595                           prodh	equ	0xFF4
  4596                           prodl	equ	0xFF3
  4597                           postinc0	equ	0xFEE
  4598                           wreg	equ	0xFE8
  4599                           postdec1	equ	0xFE5
  4600                           fsr1h	equ	0xFE2
  4601                           fsr1l	equ	0xFE1
  4602                           indf2	equ	0xFDF
  4603                           postinc2	equ	0xFDE
  4604                           postdec2	equ	0xFDD
  4605                           fsr2h	equ	0xFDA
  4606                           fsr2l	equ	0xFD9
  4607                           status	equ	0xFD8
  4608                           
  4609 ;; *************** function _Console_PrintChar *****************
  4610 ;; Defined at:
  4611 ;;		line 322 in file "Library/Console.c"
  4612 ;; Parameters:    Size  Location     Type
  4613 ;;  pInput          1    wreg     unsigned char 
  4614 ;; Auto vars:     Size  Location     Type
  4615 ;;  pInput          1   19[BANK0 ] unsigned char 
  4616 ;; Return value:  Size  Location     Type
  4617 ;;                  1    wreg      void 
  4618 ;; Registers used:
  4619 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4620 ;; Tracked objects:
  4621 ;;		On entry : 0/0
  4622 ;;		On exit  : 0/0
  4623 ;;		Unchanged: 0/0
  4624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4626 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4627 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4628 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4629 ;;Total ram usage:        4 bytes
  4630 ;; Hardware stack levels used:    1
  4631 ;; Hardware stack levels required when called:   10
  4632 ;; This function calls:
  4633 ;;		_Console_Backspace
  4634 ;;		_Console_FormFeed
  4635 ;;		_Console_IncrementCursor
  4636 ;;		_Console_NewLine
  4637 ;;		_Console_ResetCursor
  4638 ;;		_Console_Tab
  4639 ;; This function is called by:
  4640 ;;		_putch
  4641 ;;		_Console_PrintString
  4642 ;; This function uses a non-reentrant model
  4643 ;;
  4644                           
  4645                           	psect	text12
  4646  0000'                    __ptext12:
  4647                           	opt stack 0
  4648  0000'                    _Console_PrintChar:
  4649                           	opt stack 17
  4650                           
  4651                           ;incstack = 0
  4652                           ;Console_PrintChar@pInput stored from wreg
  4653  0000' 0100               	movlb	0	; () banked
  4654  0002' 6F00'              	movwf	Console_PrintChar@pInput& (0+255),b
  4655                           
  4656                           ;Console.c: 324: switch(pInput)
  4657  0004' D0B1               	goto	l1036
  4658  0006'                    
  4659                           ;Console.c: 327: case '\n':
  4660                           ;Console.c: 328: Console_NewLine();
  4661  0006' EC00' F000'        	call	_Console_NewLine	;wreg free
  4662                           
  4663                           ;Console.c: 329: return;
  4664  000A' 0012               	return	
  4665  000C'                    
  4666                           ;Console.c: 331: Console_Backspace();
  4667  000C' EC00' F000'        	call	_Console_Backspace	;wreg free
  4668                           
  4669                           ;Console.c: 332: return;
  4670  0010' 0012               	return	
  4671  0012'                    
  4672                           ;Console.c: 334: Console_FormFeed();
  4673  0012' EC00' F000'        	call	_Console_FormFeed	;wreg free
  4674                           
  4675                           ;Console.c: 335: return;
  4676  0016' 0012               	return	
  4677  0018'                    
  4678                           ;Console.c: 337: Console_Tab();
  4679  0018' EC00' F000'        	call	_Console_Tab	;wreg free
  4680                           
  4681                           ;Console.c: 338: return;
  4682  001C' 0012               	return	
  4683  001E'                    
  4684                           ;Console.c: 340: Console_IncrementCursor();
  4685  001E' EC00' F000'        	call	_Console_IncrementCursor	;wreg free
  4686                           
  4687                           ;Console.c: 341: return;
  4688  0022' 0012               	return	
  4689  0024'                    
  4690                           ;Console.c: 343: Console_ResetCursor();
  4691  0024' EC00' F000'        	call	_Console_ResetCursor	;wreg free
  4692                           
  4693                           ;Console.c: 344: return;
  4694  0028' 0012               	return	
  4695  002A'                    
  4696                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  4697                           
  4698                           ;Console.c: 349: default:
  4699  002A' C013' F010'        	movff	Console_PrintChar@pInput,??_Console_PrintChar
  4700  002E' 0E7F               	movlw	127
  4701  0030' 0100               	movlb	0	; () banked
  4702  0032' 1700'              	andwf	??_Console_PrintChar& (0+255),f,b
  4703  0034' 0100               	movlb	0	; () banked
  4704  0036' 5100'              	movf	_lBufferY& (0+255),w,b
  4705  0038' 0D14               	mullw	20
  4706  003A' 0E00'              	movlw	low _lBuffer
  4707  003C' 0100               	movlb	0	; () banked
  4708  003E' 6F00'              	movwf	(??_Console_PrintChar+1)& (0+255),b
  4709  0040' 0E00'              	movlw	high _lBuffer
  4710  0042' 0100               	movlb	0	; () banked
  4711  0044' 6F00'              	movwf	(??_Console_PrintChar+2)& (0+255),b
  4712  0046' 50F3               	movf	prodl,w,c
  4713  0048' 0100               	movlb	0	; () banked
  4714  004A' 2700'              	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  4715  004C' 50F4               	movf	prodh,w,c
  4716  004E' 0100               	movlb	0	; () banked
  4717  0050' 2300'              	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  4718  0052' 0100               	movlb	0	; () banked
  4719  0054' 5100'              	movf	_lBufferX& (0+255),w,b
  4720  0056' 0D01               	mullw	1
  4721  0058' 50F3               	movf	prodl,w,c
  4722  005A' 0100               	movlb	0	; () banked
  4723  005C' 2500'              	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  4724  005E' 6ED9               	movwf	fsr2l,c
  4725  0060' 50F4               	movf	prodh,w,c
  4726  0062' 0100               	movlb	0	; () banked
  4727  0064' 2100'              	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  4728  0066' 6EDA               	movwf	fsr2h,c
  4729  0068' 50DF               	movf	indf2,w,c
  4730  006A' 0B7F               	andlw	127
  4731  006C' 0100               	movlb	0	; () banked
  4732  006E' 1900'              	xorwf	??_Console_PrintChar& (0+255),w,b
  4733  0070' B4D8               	btfsc	status,2,c
  4734  0072' D02E               	goto	l1047
  4735                           
  4736                           ; BSR set to: 0
  4737                           ;Console.c: 351: {
  4738                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  4739  0074' 0E01               	movlw	1
  4740  0076' 0100               	movlb	0	; () banked
  4741  0078' 6F00'              	movwf	_change& (0+255),b
  4742                           
  4743                           ; BSR set to: 0
  4744  007A' 0100               	movlb	0	; () banked
  4745  007C' 5100'              	movf	_lBufferY& (0+255),w,b
  4746  007E' 0D14               	mullw	20
  4747  0080' 0E00'              	movlw	low _lBuffer
  4748  0082' 0100               	movlb	0	; () banked
  4749  0084' 6F00'              	movwf	??_Console_PrintChar& (0+255),b
  4750  0086' 0E00'              	movlw	high _lBuffer
  4751  0088' 0100               	movlb	0	; () banked
  4752  008A' 6F00'              	movwf	(??_Console_PrintChar+1)& (0+255),b
  4753  008C' 50F3               	movf	prodl,w,c
  4754  008E' 0100               	movlb	0	; () banked
  4755  0090' 2700'              	addwf	??_Console_PrintChar& (0+255),f,b
  4756  0092' 50F4               	movf	prodh,w,c
  4757  0094' 0100               	movlb	0	; () banked
  4758  0096' 2300'              	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  4759  0098' 0100               	movlb	0	; () banked
  4760  009A' 5100'              	movf	_lBufferX& (0+255),w,b
  4761  009C' 0D01               	mullw	1
  4762  009E' 50F3               	movf	prodl,w,c
  4763  00A0' 0100               	movlb	0	; () banked
  4764  00A2' 2500'              	addwf	??_Console_PrintChar& (0+255),w,b
  4765  00A4' 6ED9               	movwf	fsr2l,c
  4766  00A6' 50F4               	movf	prodh,w,c
  4767  00A8' 0100               	movlb	0	; () banked
  4768  00AA' 2100'              	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  4769  00AC' 6EDA               	movwf	fsr2h,c
  4770  00AE' 0100               	movlb	0	; () banked
  4771  00B0' 5100'              	movf	Console_PrintChar@pInput& (0+255),w,b
  4772  00B2' 0980               	iorlw	128
  4773  00B4' 6EDF               	movwf	indf2,c
  4774                           
  4775                           ; BSR set to: 0
  4776                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
  4777  00B6' 0100               	movlb	0	; () banked
  4778  00B8' 5100'              	movf	_lBufferY& (0+255),w,b
  4779  00BA' 0D02               	mullw	2
  4780  00BC' 0E00'              	movlw	low _lCBuffer
  4781  00BE' 24F3               	addwf	prodl,w,c
  4782  00C0' 6ED9               	movwf	fsr2l,c
  4783  00C2' 0E00'              	movlw	high _lCBuffer
  4784  00C4' 20F4               	addwfc	prodh,w,c
  4785  00C6' 6EDA               	movwf	fsr2h,c
  4786  00C8' C004' FFDE         	movff	_gForecolour,postinc2
  4787  00CC' C005' FFDD         	movff	_gForecolour+1,postdec2
  4788  00D0'                    l1047:
  4789                           
  4790                           ; BSR set to: 0
  4791                           ;Console.c: 354: }
  4792                           ;Console.c: 368: if(Console_IncrementCursor())
  4793                           
  4794                           ; BSR set to: 0
  4795  00D0' EC00' F000'        	call	_Console_IncrementCursor	;wreg free
  4796  00D4' 0900               	iorlw	0
  4797  00D6' B4D8               	btfsc	status,2,c
  4798  00D8' 0012               	return	
  4799                           
  4800                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  4801  00DA' C013' F010'        	movff	Console_PrintChar@pInput,??_Console_PrintChar
  4802  00DE' 0E7F               	movlw	127
  4803  00E0' 0100               	movlb	0	; () banked
  4804  00E2' 1700'              	andwf	??_Console_PrintChar& (0+255),f,b
  4805  00E4' 0100               	movlb	0	; () banked
  4806  00E6' 5100'              	movf	_lBufferY& (0+255),w,b
  4807  00E8' 0D14               	mullw	20
  4808  00EA' 0E00'              	movlw	low _lBuffer
  4809  00EC' 0100               	movlb	0	; () banked
  4810  00EE' 6F00'              	movwf	(??_Console_PrintChar+1)& (0+255),b
  4811  00F0' 0E00'              	movlw	high _lBuffer
  4812  00F2' 0100               	movlb	0	; () banked
  4813  00F4' 6F00'              	movwf	(??_Console_PrintChar+2)& (0+255),b
  4814  00F6' 50F3               	movf	prodl,w,c
  4815  00F8' 0100               	movlb	0	; () banked
  4816  00FA' 2700'              	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  4817  00FC' 50F4               	movf	prodh,w,c
  4818  00FE' 0100               	movlb	0	; () banked
  4819  0100' 2300'              	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  4820  0102' 0100               	movlb	0	; () banked
  4821  0104' 5100'              	movf	_lBufferX& (0+255),w,b
  4822  0106' 0D01               	mullw	1
  4823  0108' 50F3               	movf	prodl,w,c
  4824  010A' 0100               	movlb	0	; () banked
  4825  010C' 2500'              	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  4826  010E' 6ED9               	movwf	fsr2l,c
  4827  0110' 50F4               	movf	prodh,w,c
  4828  0112' 0100               	movlb	0	; () banked
  4829  0114' 2100'              	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  4830  0116' 6EDA               	movwf	fsr2h,c
  4831  0118' 50DF               	movf	indf2,w,c
  4832  011A' 0B7F               	andlw	127
  4833  011C' 0100               	movlb	0	; () banked
  4834  011E' 1900'              	xorwf	??_Console_PrintChar& (0+255),w,b
  4835  0120' B4D8               	btfsc	status,2,c
  4836  0122' 0012               	return	
  4837                           
  4838                           ; BSR set to: 0
  4839                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  4840  0124' 0E01               	movlw	1
  4841  0126' 0100               	movlb	0	; () banked
  4842  0128' 6F00'              	movwf	_change& (0+255),b
  4843                           
  4844                           ; BSR set to: 0
  4845  012A' 0100               	movlb	0	; () banked
  4846  012C' 5100'              	movf	_lBufferY& (0+255),w,b
  4847  012E' 0D14               	mullw	20
  4848  0130' 0E00'              	movlw	low _lBuffer
  4849  0132' 0100               	movlb	0	; () banked
  4850  0134' 6F00'              	movwf	??_Console_PrintChar& (0+255),b
  4851  0136' 0E00'              	movlw	high _lBuffer
  4852  0138' 0100               	movlb	0	; () banked
  4853  013A' 6F00'              	movwf	(??_Console_PrintChar+1)& (0+255),b
  4854  013C' 50F3               	movf	prodl,w,c
  4855  013E' 0100               	movlb	0	; () banked
  4856  0140' 2700'              	addwf	??_Console_PrintChar& (0+255),f,b
  4857  0142' 50F4               	movf	prodh,w,c
  4858  0144' 0100               	movlb	0	; () banked
  4859  0146' 2300'              	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  4860  0148' 0100               	movlb	0	; () banked
  4861  014A' 5100'              	movf	_lBufferX& (0+255),w,b
  4862  014C' 0D01               	mullw	1
  4863  014E' 50F3               	movf	prodl,w,c
  4864  0150' 0100               	movlb	0	; () banked
  4865  0152' 2500'              	addwf	??_Console_PrintChar& (0+255),w,b
  4866  0154' 6ED9               	movwf	fsr2l,c
  4867  0156' 50F4               	movf	prodh,w,c
  4868  0158' 0100               	movlb	0	; () banked
  4869  015A' 2100'              	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  4870  015C' 6EDA               	movwf	fsr2h,c
  4871  015E' 0100               	movlb	0	; () banked
  4872  0160' 5100'              	movf	Console_PrintChar@pInput& (0+255),w,b
  4873  0162' 0980               	iorlw	128
  4874  0164' 6EDF               	movwf	indf2,c
  4875                           
  4876                           ; BSR set to: 0
  4877                           ;Console.c: 372: };
  4878                           
  4879                           ; BSR set to: 0
  4880                           ;Console.c: 371: return;
  4881                           
  4882                           ; BSR set to: 0
  4883                           
  4884                           ; BSR set to: 0
  4885  0166' 0012               	return	
  4886  0168'                    l1036:
  4887                           
  4888                           ; BSR set to: 0
  4889  0168' 0100               	movlb	0	; () banked
  4890  016A' 5100'              	movf	Console_PrintChar@pInput& (0+255),w,b
  4891                           
  4892                           ; Switch size 1, requested type "space"
  4893                           ; Number of cases is 8, Range of values is 7 to 35
  4894                           ; switch strategies available:
  4895                           ; Name         Instructions Cycles
  4896                           ; simple_byte           25    13 (average)
  4897                           ;	Chosen strategy is simple_byte
  4898  016C' 0A07               	xorlw	7	; case 7
  4899  016E' B4D8               	btfsc	status,2,c
  4900  0170' D756               	goto	l1043
  4901  0172' 0A0F               	xorlw	15	; case 8
  4902  0174' B4D8               	btfsc	status,2,c
  4903  0176' D74A               	goto	l1040
  4904  0178' 0A01               	xorlw	1	; case 9
  4905  017A' B4D8               	btfsc	status,2,c
  4906  017C' D74D               	goto	l1042
  4907  017E' 0A03               	xorlw	3	; case 10
  4908  0180' B4D8               	btfsc	status,2,c
  4909  0182' D741               	goto	l1037
  4910  0184' 0A06               	xorlw	6	; case 12
  4911  0186' B4D8               	btfsc	status,2,c
  4912  0188' D744               	goto	l1041
  4913  018A' 0A01               	xorlw	1	; case 13
  4914  018C' B4D8               	btfsc	status,2,c
  4915  018E' D73B               	goto	l1037
  4916  0190' 0A2D               	xorlw	45	; case 32
  4917  0192' B4D8               	btfsc	status,2,c
  4918  0194' D74A               	goto	l1045
  4919  0196' 0A03               	xorlw	3	; case 35
  4920  0198' B4D8               	btfsc	status,2,c
  4921  019A' D744               	goto	l1044
  4922  019C' D746               	goto	l1045
  4923  019E'                    __end_of_Console_PrintChar:
  4924                           	opt stack 0
  4925                           tosu	equ	0xFFF
  4926                           tosh	equ	0xFFE
  4927                           tosl	equ	0xFFD
  4928                           pclath	equ	0xFFA
  4929                           tblptru	equ	0xFF8
  4930                           tblptrh	equ	0xFF7
  4931                           tblptrl	equ	0xFF6
  4932                           tablat	equ	0xFF5
  4933                           prodh	equ	0xFF4
  4934                           prodl	equ	0xFF3
  4935                           postinc0	equ	0xFEE
  4936                           wreg	equ	0xFE8
  4937                           postdec1	equ	0xFE5
  4938                           fsr1h	equ	0xFE2
  4939                           fsr1l	equ	0xFE1
  4940                           indf2	equ	0xFDF
  4941                           postinc2	equ	0xFDE
  4942                           postdec2	equ	0xFDD
  4943                           fsr2h	equ	0xFDA
  4944                           fsr2l	equ	0xFD9
  4945                           status	equ	0xFD8
  4946                           
  4947 ;; *************** function _Console_Tab *****************
  4948 ;; Defined at:
  4949 ;;		line 260 in file "Library/Console.c"
  4950 ;; Parameters:    Size  Location     Type
  4951 ;;		None
  4952 ;; Auto vars:     Size  Location     Type
  4953 ;;  c               1   15[BANK0 ] unsigned char 
  4954 ;;  i               1   14[BANK0 ] unsigned char 
  4955 ;;  t               1   13[BANK0 ] unsigned char 
  4956 ;; Return value:  Size  Location     Type
  4957 ;;                  1    wreg      void 
  4958 ;; Registers used:
  4959 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4960 ;; Tracked objects:
  4961 ;;		On entry : 0/0
  4962 ;;		On exit  : 0/0
  4963 ;;		Unchanged: 0/0
  4964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4966 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4967 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4968 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4969 ;;Total ram usage:        8 bytes
  4970 ;; Hardware stack levels used:    1
  4971 ;; Hardware stack levels required when called:    9
  4972 ;; This function calls:
  4973 ;;		_Console_ClearCursor
  4974 ;;		_Console_IncrementCursor
  4975 ;;		___awdiv
  4976 ;; This function is called by:
  4977 ;;		_Console_PrintChar
  4978 ;; This function uses a non-reentrant model
  4979 ;;
  4980                           
  4981                           	psect	text13
  4982  0000'                    __ptext13:
  4983                           	opt stack 0
  4984  0000'                    _Console_Tab:
  4985                           	opt stack 17
  4986                           
  4987                           ;Console.c: 262: UINT8 i = 0;
  4988                           
  4989                           ;incstack = 0
  4990  0000' 0E00               	movlw	0
  4991  0002' 0100               	movlb	0	; () banked
  4992  0004' 6F00'              	movwf	Console_Tab@i& (0+255),b
  4993                           
  4994                           ; BSR set to: 0
  4995                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
  4996  0006' 0EFA               	movlw	250
  4997  0008' 2400'              	addwf	_gCursor,w,c
  4998  000A' 0100               	movlb	0	; () banked
  4999  000C' 6F00'              	movwf	___awdiv@dividend& (0+255),b
  5000  000E' 0EFF               	movlw	255
  5001  0010' 2001'              	addwfc	_gCursor+1,w,c
  5002  0012' 0100               	movlb	0	; () banked
  5003  0014' 6F00'              	movwf	(___awdiv@dividend+1)& (0+255),b
  5004  0016' 0E00               	movlw	0
  5005  0018' 0100               	movlb	0	; () banked
  5006  001A' 6F00'              	movwf	(___awdiv@divisor+1)& (0+255),b
  5007  001C' 0E06               	movlw	6
  5008  001E' 6F00'              	movwf	___awdiv@divisor& (0+255),b
  5009  0020' EC00' F000'        	call	___awdiv	;wreg free
  5010  0024' 0100               	movlb	0	; () banked
  5011  0026' 5100'              	movf	?___awdiv& (0+255),w,b
  5012  0028' 0100               	movlb	0	; () banked
  5013  002A' 6F00'              	movwf	Console_Tab@c& (0+255),b
  5014                           
  5015                           ; BSR set to: 0
  5016                           ;Console.c: 264: UINT8 t = c/4;
  5017  002C' C00F' F000'        	movff	Console_Tab@c,___awdiv@dividend
  5018  0030' 0100               	movlb	0	; () banked
  5019  0032' 6B00'              	clrf	(___awdiv@dividend+1)& (0+255),b
  5020  0034' 0E00               	movlw	0
  5021  0036' 0100               	movlb	0	; () banked
  5022  0038' 6F00'              	movwf	(___awdiv@divisor+1)& (0+255),b
  5023  003A' 0E04               	movlw	4
  5024  003C' 6F00'              	movwf	___awdiv@divisor& (0+255),b
  5025  003E' EC00' F000'        	call	___awdiv	;wreg free
  5026  0042' 0100               	movlb	0	; () banked
  5027  0044' 5100'              	movf	?___awdiv& (0+255),w,b
  5028  0046' 0100               	movlb	0	; () banked
  5029  0048' 6F00'              	movwf	Console_Tab@t& (0+255),b
  5030                           
  5031                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
  5032  004A' 0E00               	movlw	0
  5033  004C' 0100               	movlb	0	; () banked
  5034  004E' 6F00'              	movwf	Console_Tab@i& (0+255),b
  5035  0050' D006               	goto	l1009
  5036  0052'                    
  5037                           ; BSR set to: 0
  5038                           ;Console.c: 266: {
  5039                           ;Console.c: 267: Console_ClearCursor();
  5040                           
  5041                           ; BSR set to: 0
  5042  0052' EC00' F000'        	call	_Console_ClearCursor	;wreg free
  5043                           
  5044                           ;Console.c: 268: Console_IncrementCursor();
  5045  0056' EC00' F000'        	call	_Console_IncrementCursor	;wreg free
  5046  005A' 0100               	movlb	0	; () banked
  5047  005C' 2B00'              	incf	Console_Tab@i& (0+255),f,b
  5048  005E'                    l1009:
  5049                           
  5050                           ; BSR set to: 0
  5051                           
  5052                           ; BSR set to: 0
  5053  005E' 0100               	movlb	0	; () banked
  5054  0060' 5100'              	movf	Console_Tab@t& (0+255),w,b
  5055  0062' 0D04               	mullw	4
  5056  0064' 1EF3               	comf	prodl,f,c
  5057  0066' 1EF4               	comf	prodh,f,c
  5058  0068' 4AF3               	infsnz	prodl,f,c
  5059  006A' 2AF4               	incf	prodh,f,c
  5060  006C' 0100               	movlb	0	; () banked
  5061  006E' 5100'              	movf	Console_Tab@c& (0+255),w,b
  5062  0070' 0100               	movlb	0	; () banked
  5063  0072' 6F00'              	movwf	??_Console_Tab& (0+255),b
  5064  0074' 6B00'              	clrf	(??_Console_Tab+1)& (0+255),b
  5065  0076' 50F3               	movf	prodl,w,c
  5066  0078' 0100               	movlb	0	; () banked
  5067  007A' 2700'              	addwf	??_Console_Tab& (0+255),f,b
  5068  007C' 50F4               	movf	prodh,w,c
  5069  007E' 0100               	movlb	0	; () banked
  5070  0080' 2300'              	addwfc	(??_Console_Tab+1)& (0+255),f,b
  5071  0082' 0100               	movlb	0	; () banked
  5072  0084' 1F00'              	comf	??_Console_Tab& (0+255),f,b
  5073  0086' 1F00'              	comf	(??_Console_Tab+1)& (0+255),f,b
  5074  0088' 4B00'              	infsnz	??_Console_Tab& (0+255),f,b
  5075  008A' 2B00'              	incf	(??_Console_Tab+1)& (0+255),f,b
  5076  008C' 0E04               	movlw	4
  5077  008E' 0100               	movlb	0	; () banked
  5078  0090' 2700'              	addwf	??_Console_Tab& (0+255),f,b
  5079  0092' 0E00               	movlw	0
  5080  0094' 2300'              	addwfc	(??_Console_Tab+1)& (0+255),f,b
  5081  0096' 0100               	movlb	0	; () banked
  5082  0098' 5100'              	movf	Console_Tab@i& (0+255),w,b
  5083  009A' 0100               	movlb	0	; () banked
  5084  009C' 6F00'              	movwf	(??_Console_Tab+2)& (0+255),b
  5085  009E' 6B00'              	clrf	(??_Console_Tab+3)& (0+255),b
  5086  00A0' 0100               	movlb	0	; () banked
  5087  00A2' 5100'              	movf	??_Console_Tab& (0+255),w,b
  5088  00A4' 0100               	movlb	0	; () banked
  5089  00A6' 5D00'              	subwf	(??_Console_Tab+2)& (0+255),w,b
  5090  00A8' 0100               	movlb	0	; () banked
  5091  00AA' 5100'              	movf	(??_Console_Tab+3)& (0+255),w,b
  5092  00AC' 0A80               	xorlw	128
  5093  00AE' 0100               	movlb	0	; () banked
  5094  00B0' 6F00'              	movwf	(??_Console_Tab+4)& (0+255),b
  5095  00B2' 0100               	movlb	0	; () banked
  5096  00B4' 5100'              	movf	(??_Console_Tab+1)& (0+255),w,b
  5097  00B6' 0A80               	xorlw	128
  5098  00B8' 0100               	movlb	0	; () banked
  5099  00BA' 5900'              	subwfb	(??_Console_Tab+4)& (0+255),w,b
  5100  00BC' B0D8               	btfsc	status,0,c
  5101  00BE' 0012               	return	
  5102  00C0' D7C8               	goto	l1010
  5103  00C2'                    __end_of_Console_Tab:
  5104                           	opt stack 0
  5105                           tosu	equ	0xFFF
  5106                           tosh	equ	0xFFE
  5107                           tosl	equ	0xFFD
  5108                           pclath	equ	0xFFA
  5109                           tblptru	equ	0xFF8
  5110                           tblptrh	equ	0xFF7
  5111                           tblptrl	equ	0xFF6
  5112                           tablat	equ	0xFF5
  5113                           prodh	equ	0xFF4
  5114                           prodl	equ	0xFF3
  5115                           postinc0	equ	0xFEE
  5116                           wreg	equ	0xFE8
  5117                           postdec1	equ	0xFE5
  5118                           fsr1h	equ	0xFE2
  5119                           fsr1l	equ	0xFE1
  5120                           indf2	equ	0xFDF
  5121                           postinc2	equ	0xFDE
  5122                           postdec2	equ	0xFDD
  5123                           fsr2h	equ	0xFDA
  5124                           fsr2l	equ	0xFD9
  5125                           status	equ	0xFD8
  5126                           
  5127 ;; *************** function ___awdiv *****************
  5128 ;; Defined at:
  5129 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
  5130 ;; Parameters:    Size  Location     Type
  5131 ;;  dividend        2    0[BANK0 ] int 
  5132 ;;  divisor         2    2[BANK0 ] int 
  5133 ;; Auto vars:     Size  Location     Type
  5134 ;;  quotient        2    6[BANK0 ] int 
  5135 ;;  sign            1    5[BANK0 ] unsigned char 
  5136 ;;  counter         1    4[BANK0 ] unsigned char 
  5137 ;; Return value:  Size  Location     Type
  5138 ;;                  2    0[BANK0 ] int 
  5139 ;; Registers used:
  5140 ;;		wreg, status,2, status,0
  5141 ;; Tracked objects:
  5142 ;;		On entry : 0/0
  5143 ;;		On exit  : 0/0
  5144 ;;		Unchanged: 0/0
  5145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5146 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5147 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5149 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5150 ;;Total ram usage:        8 bytes
  5151 ;; Hardware stack levels used:    1
  5152 ;; Hardware stack levels required when called:    7
  5153 ;; This function calls:
  5154 ;;		Nothing
  5155 ;; This function is called by:
  5156 ;;		_Console_Tab
  5157 ;; This function uses a non-reentrant model
  5158 ;;
  5159                           
  5160                           	psect	text14
  5161  0000'                    __ptext14:
  5162                           	opt stack 0
  5163  0000'                    ___awdiv:
  5164                           	opt stack 18
  5165                           
  5166                           ; BSR set to: 0
  5167                           ;incstack = 0
  5168  0000' 0E00               	movlw	0
  5169  0002' 0100               	movlb	0	; () banked
  5170  0004' 6F00'              	movwf	___awdiv@sign& (0+255),b
  5171                           
  5172                           ; BSR set to: 0
  5173  0006' 0100               	movlb	0	; () banked
  5174  0008' AF00'              	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5175  000A' D008               	goto	l2513
  5176                           
  5177                           ; BSR set to: 0
  5178  000C' 0100               	movlb	0	; () banked
  5179  000E' 6D00'              	negf	___awdiv@divisor& (0+255),b
  5180  0010' 1F00'              	comf	(___awdiv@divisor+1)& (0+255),f,b
  5181  0012' B0D8               	btfsc	status,0,c
  5182  0014' 2B00'              	incf	(___awdiv@divisor+1)& (0+255),f,b
  5183                           
  5184                           ; BSR set to: 0
  5185  0016' 0E01               	movlw	1
  5186  0018' 0100               	movlb	0	; () banked
  5187  001A' 6F00'              	movwf	___awdiv@sign& (0+255),b
  5188  001C'                    l2513:
  5189                           
  5190                           ; BSR set to: 0
  5191                           
  5192                           ; BSR set to: 0
  5193  001C' 0100               	movlb	0	; () banked
  5194  001E' AF00'              	btfss	(___awdiv@dividend+1)& (0+255),7,b
  5195  0020' D008               	goto	l2514
  5196                           
  5197                           ; BSR set to: 0
  5198  0022' 0100               	movlb	0	; () banked
  5199  0024' 6D00'              	negf	___awdiv@dividend& (0+255),b
  5200  0026' 1F00'              	comf	(___awdiv@dividend+1)& (0+255),f,b
  5201  0028' B0D8               	btfsc	status,0,c
  5202  002A' 2B00'              	incf	(___awdiv@dividend+1)& (0+255),f,b
  5203                           
  5204                           ; BSR set to: 0
  5205  002C' 0E01               	movlw	1
  5206  002E' 0100               	movlb	0	; () banked
  5207  0030' 1B00'              	xorwf	___awdiv@sign& (0+255),f,b
  5208  0032'                    l2514:
  5209                           
  5210                           ; BSR set to: 0
  5211                           
  5212                           ; BSR set to: 0
  5213  0032' 0E00               	movlw	0
  5214  0034' 0100               	movlb	0	; () banked
  5215  0036' 6F00'              	movwf	(___awdiv@quotient+1)& (0+255),b
  5216  0038' 0E00               	movlw	0
  5217  003A' 6F00'              	movwf	___awdiv@quotient& (0+255),b
  5218                           
  5219                           ; BSR set to: 0
  5220  003C' 0100               	movlb	0	; () banked
  5221  003E' 5100'              	movf	___awdiv@divisor& (0+255),w,b
  5222  0040' 0100               	movlb	0	; () banked
  5223  0042' 1100'              	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  5224  0044' B4D8               	btfsc	status,2,c
  5225  0046' D02C               	goto	l2521
  5226                           
  5227                           ; BSR set to: 0
  5228  0048' 0E01               	movlw	1
  5229  004A' 0100               	movlb	0	; () banked
  5230  004C' 6F00'              	movwf	___awdiv@counter& (0+255),b
  5231  004E' D006               	goto	l2516
  5232  0050'                    
  5233                           ; BSR set to: 0
  5234                           
  5235                           ; BSR set to: 0
  5236  0050' 0100               	movlb	0	; () banked
  5237  0052' 90D8               	bcf	status,0,c
  5238  0054' 3700'              	rlcf	___awdiv@divisor& (0+255),f,b
  5239  0056' 3700'              	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  5240  0058' 0100               	movlb	0	; () banked
  5241  005A' 2B00'              	incf	___awdiv@counter& (0+255),f,b
  5242  005C'                    l2516:
  5243                           
  5244                           ; BSR set to: 0
  5245                           
  5246                           ; BSR set to: 0
  5247  005C' 0100               	movlb	0	; () banked
  5248  005E' AF00'              	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5249  0060' D7F7               	goto	l2517
  5250  0062'                    u7100:
  5251                           
  5252                           ; BSR set to: 0
  5253                           
  5254                           ; BSR set to: 0
  5255                           
  5256                           ; BSR set to: 0
  5257  0062' 0100               	movlb	0	; () banked
  5258  0064' 90D8               	bcf	status,0,c
  5259  0066' 3700'              	rlcf	___awdiv@quotient& (0+255),f,b
  5260  0068' 3700'              	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  5261                           
  5262                           ; BSR set to: 0
  5263  006A' 0100               	movlb	0	; () banked
  5264  006C' 5100'              	movf	___awdiv@divisor& (0+255),w,b
  5265  006E' 0100               	movlb	0	; () banked
  5266  0070' 5D00'              	subwf	___awdiv@dividend& (0+255),w,b
  5267  0072' 0100               	movlb	0	; () banked
  5268  0074' 5100'              	movf	(___awdiv@divisor+1)& (0+255),w,b
  5269  0076' 0100               	movlb	0	; () banked
  5270  0078' 5900'              	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  5271  007A' A0D8               	btfss	status,0,c
  5272  007C' D00A               	goto	l2520
  5273                           
  5274                           ; BSR set to: 0
  5275  007E' 0100               	movlb	0	; () banked
  5276  0080' 5100'              	movf	___awdiv@divisor& (0+255),w,b
  5277  0082' 0100               	movlb	0	; () banked
  5278  0084' 5F00'              	subwf	___awdiv@dividend& (0+255),f,b
  5279  0086' 0100               	movlb	0	; () banked
  5280  0088' 5100'              	movf	(___awdiv@divisor+1)& (0+255),w,b
  5281  008A' 0100               	movlb	0	; () banked
  5282  008C' 5B00'              	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  5283                           
  5284                           ; BSR set to: 0
  5285  008E' 0100               	movlb	0	; () banked
  5286  0090' 8100'              	bsf	___awdiv@quotient& (0+255),0,b
  5287  0092'                    l2520:
  5288                           
  5289                           ; BSR set to: 0
  5290                           
  5291                           ; BSR set to: 0
  5292  0092' 0100               	movlb	0	; () banked
  5293  0094' 90D8               	bcf	status,0,c
  5294  0096' 3300'              	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  5295  0098' 3300'              	rrcf	___awdiv@divisor& (0+255),f,b
  5296                           
  5297                           ; BSR set to: 0
  5298  009A' 0100               	movlb	0	; () banked
  5299  009C' 2F00'              	decfsz	___awdiv@counter& (0+255),f,b
  5300  009E' D7E1               	goto	u7100
  5301  00A0'                    l2521:
  5302                           
  5303                           ; BSR set to: 0
  5304                           
  5305                           ; BSR set to: 0
  5306                           
  5307                           ; BSR set to: 0
  5308  00A0' 0100               	movlb	0	; () banked
  5309  00A2' 5100'              	movf	___awdiv@sign& (0+255),w,b
  5310  00A4' 0100               	movlb	0	; () banked
  5311  00A6' B4D8               	btfsc	status,2,c
  5312  00A8' D005               	goto	l2522
  5313                           
  5314                           ; BSR set to: 0
  5315  00AA' 0100               	movlb	0	; () banked
  5316  00AC' 6D00'              	negf	___awdiv@quotient& (0+255),b
  5317  00AE' 1F00'              	comf	(___awdiv@quotient+1)& (0+255),f,b
  5318  00B0' B0D8               	btfsc	status,0,c
  5319  00B2' 2B00'              	incf	(___awdiv@quotient+1)& (0+255),f,b
  5320  00B4'                    l2522:
  5321                           
  5322                           ; BSR set to: 0
  5323                           
  5324                           ; BSR set to: 0
  5325  00B4' C006' F000'        	movff	___awdiv@quotient,?___awdiv
  5326  00B8' C007' F001'        	movff	___awdiv@quotient+1,?___awdiv+1
  5327  00BC' 0012               	return	
  5328  00BE'                    __end_of___awdiv:
  5329                           	opt stack 0
  5330                           tosu	equ	0xFFF
  5331                           tosh	equ	0xFFE
  5332                           tosl	equ	0xFFD
  5333                           pclath	equ	0xFFA
  5334                           tblptru	equ	0xFF8
  5335                           tblptrh	equ	0xFF7
  5336                           tblptrl	equ	0xFF6
  5337                           tablat	equ	0xFF5
  5338                           prodh	equ	0xFF4
  5339                           prodl	equ	0xFF3
  5340                           postinc0	equ	0xFEE
  5341                           wreg	equ	0xFE8
  5342                           postdec1	equ	0xFE5
  5343                           fsr1h	equ	0xFE2
  5344                           fsr1l	equ	0xFE1
  5345                           indf2	equ	0xFDF
  5346                           postinc2	equ	0xFDE
  5347                           postdec2	equ	0xFDD
  5348                           fsr2h	equ	0xFDA
  5349                           fsr2l	equ	0xFD9
  5350                           status	equ	0xFD8
  5351                           
  5352 ;; *************** function _Console_IncrementCursor *****************
  5353 ;; Defined at:
  5354 ;;		line 243 in file "Library/Console.c"
  5355 ;; Parameters:    Size  Location     Type
  5356 ;;		None
  5357 ;; Auto vars:     Size  Location     Type
  5358 ;;		None
  5359 ;; Return value:  Size  Location     Type
  5360 ;;                  1    wreg      unsigned char 
  5361 ;; Registers used:
  5362 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5363 ;; Tracked objects:
  5364 ;;		On entry : 0/0
  5365 ;;		On exit  : 0/0
  5366 ;;		Unchanged: 0/0
  5367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5370 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5371 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5372 ;;Total ram usage:        2 bytes
  5373 ;; Hardware stack levels used:    1
  5374 ;; Hardware stack levels required when called:    8
  5375 ;; This function calls:
  5376 ;;		_Console_FormFeed
  5377 ;;		_Console_NewLine
  5378 ;; This function is called by:
  5379 ;;		_Console_Tab
  5380 ;;		_Console_PrintChar
  5381 ;; This function uses a non-reentrant model
  5382 ;;
  5383                           
  5384                           	psect	text15
  5385  0000'                    __ptext15:
  5386                           	opt stack 0
  5387  0000'                    _Console_IncrementCursor:
  5388                           	opt stack 17
  5389                           
  5390                           ;Console.c: 246: lBufferX += 1;
  5391                           
  5392                           ; BSR set to: 0
  5393                           ;incstack = 0
  5394  0000' 0100               	movlb	0	; () banked
  5395  0002' 2B00'              	incf	_lBufferX& (0+255),f,b
  5396                           
  5397                           ; BSR set to: 0
  5398                           ;Console.c: 248: gCursor.x += 6;
  5399  0004' 0E06               	movlw	6
  5400  0006' 2600'              	addwf	_gCursor,f,c
  5401  0008' 0E00               	movlw	0
  5402  000A' 2201'              	addwfc	_gCursor+1,f,c
  5403                           
  5404                           ; BSR set to: 0
  5405                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
  5406  000C' 0E06               	movlw	6
  5407  000E' 2400'              	addwf	_gCursor,w,c
  5408  0010' 0100               	movlb	0	; () banked
  5409  0012' 6F00'              	movwf	??_Console_IncrementCursor& (0+255),b
  5410  0014' 0E00               	movlw	0
  5411  0016' 2001'              	addwfc	_gCursor+1,w,c
  5412  0018' 0100               	movlb	0	; () banked
  5413  001A' 6F00'              	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  5414  001C' 0100               	movlb	0	; () banked
  5415  001E' BF00'              	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  5416  0020' D009               	goto	l1004
  5417  0022' 0100               	movlb	0	; () banked
  5418  0024' 5100'              	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  5419  0026' E104               	bnz	u7010
  5420  0028' 0E80               	movlw	128
  5421  002A' 0100               	movlb	0	; () banked
  5422  002C' 5D00'              	subwf	??_Console_IncrementCursor& (0+255),w,b
  5423  002E' B0D8               	btfsc	status,0,c
  5424  0030'                    u7010:
  5425                           
  5426                           ; BSR set to: 0
  5427                           ;Console.c: 250: Console_NewLine();
  5428  0030' EC00' F000'        	call	_Console_NewLine	;wreg free
  5429  0034'                    l1004:
  5430                           
  5431                           ;Console.c: 251: if (gCursor.y + 8>= 128)
  5432  0034' 0E08               	movlw	8
  5433  0036' 2402'              	addwf	_gCursor+2,w,c
  5434  0038' 0100               	movlb	0	; () banked
  5435  003A' 6F00'              	movwf	??_Console_IncrementCursor& (0+255),b
  5436  003C' 0E00               	movlw	0
  5437  003E' 2003'              	addwfc	_gCursor+3,w,c
  5438  0040' 0100               	movlb	0	; () banked
  5439  0042' 6F00'              	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  5440  0044' 0100               	movlb	0	; () banked
  5441  0046' BF00'              	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  5442  0048' D00C               	goto	l1005
  5443  004A' 0100               	movlb	0	; () banked
  5444  004C' 5100'              	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  5445  004E' E105               	bnz	u7020
  5446  0050' 0E80               	movlw	128
  5447  0052' 0100               	movlb	0	; () banked
  5448  0054' 5D00'              	subwf	??_Console_IncrementCursor& (0+255),w,b
  5449  0056' A0D8               	btfss	status,0,c
  5450  0058' D004               	goto	l1005
  5451  005A'                    u7020:
  5452                           
  5453                           ; BSR set to: 0
  5454                           ;Console.c: 252: {
  5455                           ;Console.c: 253: Console_FormFeed();
  5456  005A' EC00' F000'        	call	_Console_FormFeed	;wreg free
  5457                           
  5458                           ;Console.c: 254: return 1;
  5459  005E' 0E01               	movlw	1
  5460  0060' 0012               	return	
  5461  0062'                    l1005:
  5462                           
  5463                           ;Console.c: 255: }
  5464                           ;Console.c: 257: return 0;
  5465  0062' 0E00               	movlw	0
  5466  0064' 0012               	return	
  5467  0066'                    __end_of_Console_IncrementCursor:
  5468                           	opt stack 0
  5469                           tosu	equ	0xFFF
  5470                           tosh	equ	0xFFE
  5471                           tosl	equ	0xFFD
  5472                           pclath	equ	0xFFA
  5473                           tblptru	equ	0xFF8
  5474                           tblptrh	equ	0xFF7
  5475                           tblptrl	equ	0xFF6
  5476                           tablat	equ	0xFF5
  5477                           prodh	equ	0xFF4
  5478                           prodl	equ	0xFF3
  5479                           postinc0	equ	0xFEE
  5480                           wreg	equ	0xFE8
  5481                           postdec1	equ	0xFE5
  5482                           fsr1h	equ	0xFE2
  5483                           fsr1l	equ	0xFE1
  5484                           indf2	equ	0xFDF
  5485                           postinc2	equ	0xFDE
  5486                           postdec2	equ	0xFDD
  5487                           fsr2h	equ	0xFDA
  5488                           fsr2l	equ	0xFD9
  5489                           status	equ	0xFD8
  5490                           
  5491 ;; *************** function _Console_NewLine *****************
  5492 ;; Defined at:
  5493 ;;		line 175 in file "Library/Console.c"
  5494 ;; Parameters:    Size  Location     Type
  5495 ;;		None
  5496 ;; Auto vars:     Size  Location     Type
  5497 ;;		None
  5498 ;; Return value:  Size  Location     Type
  5499 ;;                  1    wreg      void 
  5500 ;; Registers used:
  5501 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5502 ;; Tracked objects:
  5503 ;;		On entry : 0/0
  5504 ;;		On exit  : 0/0
  5505 ;;		Unchanged: 0/0
  5506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5509 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5510 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5511 ;;Total ram usage:        2 bytes
  5512 ;; Hardware stack levels used:    1
  5513 ;; Hardware stack levels required when called:    7
  5514 ;; This function calls:
  5515 ;;		Nothing
  5516 ;; This function is called by:
  5517 ;;		_Console_IncrementCursor
  5518 ;;		_Console_PrintChar
  5519 ;; This function uses a non-reentrant model
  5520 ;;
  5521                           
  5522                           	psect	text16
  5523  0000'                    __ptext16:
  5524                           	opt stack 0
  5525  0000'                    _Console_NewLine:
  5526                           	opt stack 17
  5527                           
  5528                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
  5529                           
  5530                           ;incstack = 0
  5531  0000' D03E               	goto	l983
  5532  0002'                    
  5533                           ;Console.c: 179: {
  5534                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
  5535  0002' 0100               	movlb	0	; () banked
  5536  0004' 5100'              	movf	_lBufferY& (0+255),w,b
  5537  0006' 0D14               	mullw	20
  5538  0008' 0E00'              	movlw	low _lBuffer
  5539  000A' 0100               	movlb	0	; () banked
  5540  000C' 6F00'              	movwf	??_Console_NewLine& (0+255),b
  5541  000E' 0E00'              	movlw	high _lBuffer
  5542  0010' 0100               	movlb	0	; () banked
  5543  0012' 6F00'              	movwf	(??_Console_NewLine+1)& (0+255),b
  5544  0014' 50F3               	movf	prodl,w,c
  5545  0016' 0100               	movlb	0	; () banked
  5546  0018' 2700'              	addwf	??_Console_NewLine& (0+255),f,b
  5547  001A' 50F4               	movf	prodh,w,c
  5548  001C' 0100               	movlb	0	; () banked
  5549  001E' 2300'              	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  5550  0020' 0100               	movlb	0	; () banked
  5551  0022' 5100'              	movf	_lBufferX& (0+255),w,b
  5552  0024' 0D01               	mullw	1
  5553  0026' 50F3               	movf	prodl,w,c
  5554  0028' 0100               	movlb	0	; () banked
  5555  002A' 2500'              	addwf	??_Console_NewLine& (0+255),w,b
  5556  002C' 6ED9               	movwf	fsr2l,c
  5557  002E' 50F4               	movf	prodh,w,c
  5558  0030' 0100               	movlb	0	; () banked
  5559  0032' 2100'              	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  5560  0034' 6EDA               	movwf	fsr2h,c
  5561  0036' 50DF               	movf	indf2,w,c
  5562  0038' B4D8               	btfsc	status,2,c
  5563  003A' D01F               	goto	l985
  5564                           
  5565                           ; BSR set to: 0
  5566                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
  5567  003C' 0E01               	movlw	1
  5568  003E' 0100               	movlb	0	; () banked
  5569  0040' 6F00'              	movwf	_change& (0+255),b
  5570                           
  5571                           ; BSR set to: 0
  5572  0042' 0100               	movlb	0	; () banked
  5573  0044' 5100'              	movf	_lBufferY& (0+255),w,b
  5574  0046' 0D14               	mullw	20
  5575  0048' 0E00'              	movlw	low _lBuffer
  5576  004A' 0100               	movlb	0	; () banked
  5577  004C' 6F00'              	movwf	??_Console_NewLine& (0+255),b
  5578  004E' 0E00'              	movlw	high _lBuffer
  5579  0050' 0100               	movlb	0	; () banked
  5580  0052' 6F00'              	movwf	(??_Console_NewLine+1)& (0+255),b
  5581  0054' 50F3               	movf	prodl,w,c
  5582  0056' 0100               	movlb	0	; () banked
  5583  0058' 2700'              	addwf	??_Console_NewLine& (0+255),f,b
  5584  005A' 50F4               	movf	prodh,w,c
  5585  005C' 0100               	movlb	0	; () banked
  5586  005E' 2300'              	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  5587  0060' 0100               	movlb	0	; () banked
  5588  0062' 5100'              	movf	_lBufferX& (0+255),w,b
  5589  0064' 0D01               	mullw	1
  5590  0066' 50F3               	movf	prodl,w,c
  5591  0068' 0100               	movlb	0	; () banked
  5592  006A' 2500'              	addwf	??_Console_NewLine& (0+255),w,b
  5593  006C' 6ED9               	movwf	fsr2l,c
  5594  006E' 50F4               	movf	prodh,w,c
  5595  0070' 0100               	movlb	0	; () banked
  5596  0072' 2100'              	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  5597  0074' 6EDA               	movwf	fsr2h,c
  5598  0076' 0E80               	movlw	128
  5599  0078' 6EDF               	movwf	indf2,c
  5600  007A'                    l985:
  5601                           
  5602                           ; BSR set to: 0
  5603                           ;Console.c: 182: lBufferX ++;
  5604                           
  5605                           ; BSR set to: 0
  5606  007A' 0100               	movlb	0	; () banked
  5607  007C' 2B00'              	incf	_lBufferX& (0+255),f,b
  5608  007E'                    l983:
  5609                           
  5610                           ; BSR set to: 0
  5611  007E' 0E13               	movlw	19
  5612  0080' 0100               	movlb	0	; () banked
  5613  0082' 6500'              	cpfsgt	_lBufferX& (0+255),b
  5614  0084' D7BE               	goto	l984
  5615                           
  5616                           ; BSR set to: 0
  5617                           ;Console.c: 183: }
  5618                           ;Console.c: 185: lBufferX = 0;
  5619                           
  5620                           ; BSR set to: 0
  5621  0086' 0E00               	movlw	0
  5622  0088' 0100               	movlb	0	; () banked
  5623  008A' 6F00'              	movwf	_lBufferX& (0+255),b
  5624                           
  5625                           ; BSR set to: 0
  5626                           ;Console.c: 186: lBufferY ++;
  5627  008C' 0100               	movlb	0	; () banked
  5628  008E' 2B00'              	incf	_lBufferY& (0+255),f,b
  5629                           
  5630                           ; BSR set to: 0
  5631                           ;Console.c: 188: gCursor.y += 8;
  5632  0090' 0E08               	movlw	8
  5633  0092' 2602'              	addwf	_gCursor+2,f,c
  5634  0094' 0E00               	movlw	0
  5635  0096' 2203'              	addwfc	_gCursor+3,f,c
  5636                           
  5637                           ; BSR set to: 0
  5638                           ;Console.c: 189: gCursor.x = 6;
  5639  0098' 0E00               	movlw	0
  5640  009A' 6E01'              	movwf	_gCursor+1,c
  5641  009C' 0E06               	movlw	6
  5642  009E' 6E00'              	movwf	_gCursor,c
  5643                           
  5644                           ; BSR set to: 0
  5645  00A0' 0012               	return		;funcret
  5646  00A2'                    __end_of_Console_NewLine:
  5647                           	opt stack 0
  5648                           tosu	equ	0xFFF
  5649                           tosh	equ	0xFFE
  5650                           tosl	equ	0xFFD
  5651                           pclath	equ	0xFFA
  5652                           tblptru	equ	0xFF8
  5653                           tblptrh	equ	0xFF7
  5654                           tblptrl	equ	0xFF6
  5655                           tablat	equ	0xFF5
  5656                           prodh	equ	0xFF4
  5657                           prodl	equ	0xFF3
  5658                           postinc0	equ	0xFEE
  5659                           wreg	equ	0xFE8
  5660                           postdec1	equ	0xFE5
  5661                           fsr1h	equ	0xFE2
  5662                           fsr1l	equ	0xFE1
  5663                           indf2	equ	0xFDF
  5664                           postinc2	equ	0xFDE
  5665                           postdec2	equ	0xFDD
  5666                           fsr2h	equ	0xFDA
  5667                           fsr2l	equ	0xFD9
  5668                           status	equ	0xFD8
  5669                           
  5670 ;; *************** function _Console_FormFeed *****************
  5671 ;; Defined at:
  5672 ;;		line 192 in file "Library/Console.c"
  5673 ;; Parameters:    Size  Location     Type
  5674 ;;		None
  5675 ;; Auto vars:     Size  Location     Type
  5676 ;;  y               1    3[BANK0 ] unsigned char 
  5677 ;;  x               1    2[BANK0 ] unsigned char 
  5678 ;; Return value:  Size  Location     Type
  5679 ;;                  1    wreg      void 
  5680 ;; Registers used:
  5681 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5682 ;; Tracked objects:
  5683 ;;		On entry : 0/0
  5684 ;;		On exit  : 0/0
  5685 ;;		Unchanged: 0/0
  5686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5688 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5689 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5690 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5691 ;;Total ram usage:        4 bytes
  5692 ;; Hardware stack levels used:    1
  5693 ;; Hardware stack levels required when called:    7
  5694 ;; This function calls:
  5695 ;;		Nothing
  5696 ;; This function is called by:
  5697 ;;		_Console_IncrementCursor
  5698 ;;		_Console_PrintChar
  5699 ;; This function uses a non-reentrant model
  5700 ;;
  5701                           
  5702                           	psect	text17
  5703  0000'                    __ptext17:
  5704                           	opt stack 0
  5705  0000'                    _Console_FormFeed:
  5706                           	opt stack 17
  5707                           
  5708                           ;Console.c: 195: lBufferX = 0;
  5709                           
  5710                           ; BSR set to: 0
  5711                           ;incstack = 0
  5712  0000' 0E00               	movlw	0
  5713  0002' 0100               	movlb	0	; () banked
  5714  0004' 6F00'              	movwf	_lBufferX& (0+255),b
  5715                           
  5716                           ;Console.c: 196: lBufferY = 0;
  5717  0006' 0E00               	movlw	0
  5718  0008' 0100               	movlb	0	; () banked
  5719  000A' 6F00'              	movwf	_lBufferY& (0+255),b
  5720                           
  5721                           ;Console.c: 197: UINT8 x, y;
  5722                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
  5723  000C' 0E00               	movlw	0
  5724  000E' 0100               	movlb	0	; () banked
  5725  0010' 6F00'              	movwf	Console_FormFeed@y& (0+255),b
  5726  0012'                    l10813:
  5727                           
  5728                           ; BSR set to: 0
  5729  0012' 0E0E               	movlw	14
  5730  0014' 0100               	movlb	0	; () banked
  5731  0016' 6500'              	cpfsgt	Console_FormFeed@y& (0+255),b
  5732  0018' D001               	goto	l990
  5733  001A' D02D               	goto	u6860
  5734  001C'                    l990:
  5735                           
  5736                           ; BSR set to: 0
  5737                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
  5738                           
  5739                           ; BSR set to: 0
  5740  001C' 0E00               	movlw	0
  5741  001E' 0100               	movlb	0	; () banked
  5742  0020' 6F00'              	movwf	Console_FormFeed@x& (0+255),b
  5743  0022'                    l10819:
  5744                           
  5745                           ; BSR set to: 0
  5746  0022' 0E13               	movlw	19
  5747  0024' 0100               	movlb	0	; () banked
  5748  0026' 6500'              	cpfsgt	Console_FormFeed@x& (0+255),b
  5749  0028' D001               	goto	l992
  5750  002A' D022               	goto	u6850
  5751  002C'                    l992:
  5752                           
  5753                           ; BSR set to: 0
  5754                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
  5755                           
  5756                           ; BSR set to: 0
  5757  002C' 0E01               	movlw	1
  5758  002E' 0100               	movlb	0	; () banked
  5759  0030' 6F00'              	movwf	_change& (0+255),b
  5760                           
  5761                           ; BSR set to: 0
  5762  0032' 0100               	movlb	0	; () banked
  5763  0034' 5100'              	movf	Console_FormFeed@y& (0+255),w,b
  5764  0036' 0D14               	mullw	20
  5765  0038' 0E00'              	movlw	low _lBuffer
  5766  003A' 0100               	movlb	0	; () banked
  5767  003C' 6F00'              	movwf	??_Console_FormFeed& (0+255),b
  5768  003E' 0E00'              	movlw	high _lBuffer
  5769  0040' 0100               	movlb	0	; () banked
  5770  0042' 6F00'              	movwf	(??_Console_FormFeed+1)& (0+255),b
  5771  0044' 50F3               	movf	prodl,w,c
  5772  0046' 0100               	movlb	0	; () banked
  5773  0048' 2700'              	addwf	??_Console_FormFeed& (0+255),f,b
  5774  004A' 50F4               	movf	prodh,w,c
  5775  004C' 0100               	movlb	0	; () banked
  5776  004E' 2300'              	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
  5777  0050' 0100               	movlb	0	; () banked
  5778  0052' 5100'              	movf	Console_FormFeed@x& (0+255),w,b
  5779  0054' 0D01               	mullw	1
  5780  0056' 50F3               	movf	prodl,w,c
  5781  0058' 0100               	movlb	0	; () banked
  5782  005A' 2500'              	addwf	??_Console_FormFeed& (0+255),w,b
  5783  005C' 6ED9               	movwf	fsr2l,c
  5784  005E' 50F4               	movf	prodh,w,c
  5785  0060' 0100               	movlb	0	; () banked
  5786  0062' 2100'              	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
  5787  0064' 6EDA               	movwf	fsr2h,c
  5788  0066' 0E80               	movlw	128
  5789  0068' 6EDF               	movwf	indf2,c
  5790                           
  5791                           ; BSR set to: 0
  5792  006A' 0100               	movlb	0	; () banked
  5793  006C' 2B00'              	incf	Console_FormFeed@x& (0+255),f,b
  5794  006E' D7D9               	goto	l10819
  5795  0070'                    u6850:
  5796                           
  5797                           ; BSR set to: 0
  5798                           
  5799                           ; BSR set to: 0
  5800  0070' 0100               	movlb	0	; () banked
  5801  0072' 2B00'              	incf	Console_FormFeed@y& (0+255),f,b
  5802  0074' D7CE               	goto	l10813
  5803  0076'                    u6860:
  5804                           
  5805                           ; BSR set to: 0
  5806                           ;Console.c: 204: clearall = 1;
  5807                           
  5808                           ; BSR set to: 0
  5809  0076' 0E01               	movlw	1
  5810  0078' 0100               	movlb	0	; () banked
  5811  007A' 6F00'              	movwf	_clearall& (0+255),b
  5812                           
  5813                           ;Console.c: 205: gCursor.x = 6;
  5814  007C' 0E00               	movlw	0
  5815  007E' 6E01'              	movwf	_gCursor+1,c
  5816  0080' 0E06               	movlw	6
  5817  0082' 6E00'              	movwf	_gCursor,c
  5818                           
  5819                           ;Console.c: 206: gCursor.y = 6;
  5820  0084' 0E00               	movlw	0
  5821  0086' 6E03'              	movwf	_gCursor+3,c
  5822  0088' 0E06               	movlw	6
  5823  008A' 6E02'              	movwf	_gCursor+2,c
  5824                           
  5825                           ; BSR set to: 0
  5826  008C' 0012               	return		;funcret
  5827  008E'                    __end_of_Console_FormFeed:
  5828                           	opt stack 0
  5829                           tosu	equ	0xFFF
  5830                           tosh	equ	0xFFE
  5831                           tosl	equ	0xFFD
  5832                           pclath	equ	0xFFA
  5833                           tblptru	equ	0xFF8
  5834                           tblptrh	equ	0xFF7
  5835                           tblptrl	equ	0xFF6
  5836                           tablat	equ	0xFF5
  5837                           prodh	equ	0xFF4
  5838                           prodl	equ	0xFF3
  5839                           postinc0	equ	0xFEE
  5840                           wreg	equ	0xFE8
  5841                           postdec1	equ	0xFE5
  5842                           fsr1h	equ	0xFE2
  5843                           fsr1l	equ	0xFE1
  5844                           indf2	equ	0xFDF
  5845                           postinc2	equ	0xFDE
  5846                           postdec2	equ	0xFDD
  5847                           fsr2h	equ	0xFDA
  5848                           fsr2l	equ	0xFD9
  5849                           status	equ	0xFD8
  5850                           
  5851 ;; *************** function _Console_ResetCursor *****************
  5852 ;; Defined at:
  5853 ;;		line 297 in file "Library/Console.c"
  5854 ;; Parameters:    Size  Location     Type
  5855 ;;		None
  5856 ;; Auto vars:     Size  Location     Type
  5857 ;;		None
  5858 ;; Return value:  Size  Location     Type
  5859 ;;                  1    wreg      void 
  5860 ;; Registers used:
  5861 ;;		wreg, status,2
  5862 ;; Tracked objects:
  5863 ;;		On entry : 0/0
  5864 ;;		On exit  : 0/0
  5865 ;;		Unchanged: 0/0
  5866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5870 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5871 ;;Total ram usage:        0 bytes
  5872 ;; Hardware stack levels used:    1
  5873 ;; Hardware stack levels required when called:    7
  5874 ;; This function calls:
  5875 ;;		Nothing
  5876 ;; This function is called by:
  5877 ;;		_Console_PrintChar
  5878 ;; This function uses a non-reentrant model
  5879 ;;
  5880                           
  5881                           	psect	text18
  5882  0000'                    __ptext18:
  5883                           	opt stack 0
  5884  0000'                    _Console_ResetCursor:
  5885                           	opt stack 19
  5886                           
  5887                           ;Console.c: 299: gCursor.x = 6;
  5888                           
  5889                           ; BSR set to: 0
  5890                           ;incstack = 0
  5891  0000' 0E00               	movlw	0
  5892  0002' 6E01'              	movwf	_gCursor+1,c
  5893  0004' 0E06               	movlw	6
  5894  0006' 6E00'              	movwf	_gCursor,c
  5895                           
  5896                           ;Console.c: 300: gCursor.y = 6;
  5897  0008' 0E00               	movlw	0
  5898  000A' 6E03'              	movwf	_gCursor+3,c
  5899  000C' 0E06               	movlw	6
  5900  000E' 6E02'              	movwf	_gCursor+2,c
  5901                           
  5902                           ;Console.c: 303: lBufferX = 0;
  5903  0010' 0E00               	movlw	0
  5904  0012' 0100               	movlb	0	; () banked
  5905  0014' 6F00'              	movwf	_lBufferX& (0+255),b
  5906                           
  5907                           ;Console.c: 304: lBufferY = 0;
  5908  0016' 0E00               	movlw	0
  5909  0018' 0100               	movlb	0	; () banked
  5910  001A' 6F00'              	movwf	_lBufferY& (0+255),b
  5911                           
  5912                           ; BSR set to: 0
  5913  001C' 0012               	return		;funcret
  5914  001E'                    __end_of_Console_ResetCursor:
  5915                           	opt stack 0
  5916                           tosu	equ	0xFFF
  5917                           tosh	equ	0xFFE
  5918                           tosl	equ	0xFFD
  5919                           pclath	equ	0xFFA
  5920                           tblptru	equ	0xFF8
  5921                           tblptrh	equ	0xFF7
  5922                           tblptrl	equ	0xFF6
  5923                           tablat	equ	0xFF5
  5924                           prodh	equ	0xFF4
  5925                           prodl	equ	0xFF3
  5926                           postinc0	equ	0xFEE
  5927                           wreg	equ	0xFE8
  5928                           postdec1	equ	0xFE5
  5929                           fsr1h	equ	0xFE2
  5930                           fsr1l	equ	0xFE1
  5931                           indf2	equ	0xFDF
  5932                           postinc2	equ	0xFDE
  5933                           postdec2	equ	0xFDD
  5934                           fsr2h	equ	0xFDA
  5935                           fsr2l	equ	0xFD9
  5936                           status	equ	0xFD8
  5937                           
  5938 ;; *************** function _Console_Backspace *****************
  5939 ;; Defined at:
  5940 ;;		line 209 in file "Library/Console.c"
  5941 ;; Parameters:    Size  Location     Type
  5942 ;;		None
  5943 ;; Auto vars:     Size  Location     Type
  5944 ;;		None
  5945 ;; Return value:  Size  Location     Type
  5946 ;;                  1    wreg      void 
  5947 ;; Registers used:
  5948 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5949 ;; Tracked objects:
  5950 ;;		On entry : 0/0
  5951 ;;		On exit  : 0/0
  5952 ;;		Unchanged: 0/0
  5953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5957 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5958 ;;Total ram usage:        0 bytes
  5959 ;; Hardware stack levels used:    1
  5960 ;; Hardware stack levels required when called:    8
  5961 ;; This function calls:
  5962 ;;		_Console_ClearCursor
  5963 ;; This function is called by:
  5964 ;;		_Console_PrintChar
  5965 ;; This function uses a non-reentrant model
  5966 ;;
  5967                           
  5968                           	psect	text19
  5969  0000'                    __ptext19:
  5970                           	opt stack 0
  5971  0000'                    _Console_Backspace:
  5972                           	opt stack 18
  5973                           
  5974                           ;Console.c: 211: if (lBufferX > 0)
  5975                           
  5976                           ; BSR set to: 0
  5977                           ;incstack = 0
  5978  0000' 0100               	movlb	0	; () banked
  5979  0002' 5100'              	movf	_lBufferX& (0+255),w,b
  5980  0004' B4D8               	btfsc	status,2,c
  5981  0006' D007               	goto	l997
  5982                           
  5983                           ; BSR set to: 0
  5984                           ;Console.c: 212: {
  5985                           ;Console.c: 213: gCursor.x -= 6;
  5986  0008' 0EFA               	movlw	250
  5987  000A' 2600'              	addwf	_gCursor,f,c
  5988  000C' 0EFF               	movlw	255
  5989  000E' 2201'              	addwfc	_gCursor+1,f,c
  5990                           
  5991                           ; BSR set to: 0
  5992                           ;Console.c: 216: lBufferX --;
  5993  0010' 0100               	movlb	0	; () banked
  5994  0012' 0700'              	decf	_lBufferX& (0+255),f,b
  5995                           
  5996                           ;Console.c: 218: }
  5997  0014' D020               	goto	l1000
  5998  0016'                    l997:
  5999                           
  6000                           ; BSR set to: 0
  6001                           ;Console.c: 219: else if (lBufferY > 0)
  6002                           
  6003                           ; BSR set to: 0
  6004  0016' 0100               	movlb	0	; () banked
  6005  0018' 5100'              	movf	_lBufferY& (0+255),w,b
  6006  001A' B4D8               	btfsc	status,2,c
  6007  001C' D00E               	goto	l999
  6008                           
  6009                           ; BSR set to: 0
  6010                           ;Console.c: 220: {
  6011                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
  6012  001E' 0E00               	movlw	0
  6013  0020' 6E01'              	movwf	_gCursor+1,c
  6014  0022' 0E72               	movlw	114
  6015  0024' 6E00'              	movwf	_gCursor,c
  6016                           
  6017                           ; BSR set to: 0
  6018                           ;Console.c: 222: gCursor.y -= 8;
  6019  0026' 0EF8               	movlw	248
  6020  0028' 2602'              	addwf	_gCursor+2,f,c
  6021  002A' 0EFF               	movlw	255
  6022  002C' 2203'              	addwfc	_gCursor+3,f,c
  6023                           
  6024                           ; BSR set to: 0
  6025                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
  6026  002E' 0E13               	movlw	19
  6027  0030' 0100               	movlb	0	; () banked
  6028  0032' 6F00'              	movwf	_lBufferX& (0+255),b
  6029                           
  6030                           ; BSR set to: 0
  6031                           ;Console.c: 226: lBufferY --;
  6032  0034' 0100               	movlb	0	; () banked
  6033  0036' 0700'              	decf	_lBufferY& (0+255),f,b
  6034                           
  6035                           ;Console.c: 228: }
  6036  0038' D00E               	goto	l1000
  6037  003A'                    l999:
  6038                           
  6039                           ; BSR set to: 0
  6040                           ;Console.c: 229: else
  6041                           ;Console.c: 230: {
  6042                           ;Console.c: 231: gCursor.x = 6;
  6043                           
  6044                           ; BSR set to: 0
  6045  003A' 0E00               	movlw	0
  6046  003C' 6E01'              	movwf	_gCursor+1,c
  6047  003E' 0E06               	movlw	6
  6048  0040' 6E00'              	movwf	_gCursor,c
  6049                           
  6050                           ;Console.c: 232: gCursor.y = 6;
  6051  0042' 0E00               	movlw	0
  6052  0044' 6E03'              	movwf	_gCursor+3,c
  6053  0046' 0E06               	movlw	6
  6054  0048' 6E02'              	movwf	_gCursor+2,c
  6055                           
  6056                           ;Console.c: 235: lBufferX = 0;
  6057  004A' 0E00               	movlw	0
  6058  004C' 0100               	movlb	0	; () banked
  6059  004E' 6F00'              	movwf	_lBufferX& (0+255),b
  6060                           
  6061                           ;Console.c: 236: lBufferY = 0;
  6062  0050' 0E00               	movlw	0
  6063  0052' 0100               	movlb	0	; () banked
  6064  0054' 6F00'              	movwf	_lBufferY& (0+255),b
  6065  0056'                    l1000:
  6066                           
  6067                           ; BSR set to: 0
  6068                           ;Console.c: 238: }
  6069                           ;Console.c: 240: Console_ClearCursor();
  6070                           
  6071                           ; BSR set to: 0
  6072                           
  6073                           ; BSR set to: 0
  6074  0056' EC00' F000'        	call	_Console_ClearCursor	;wreg free
  6075  005A' 0012               	return		;funcret
  6076  005C'                    __end_of_Console_Backspace:
  6077                           	opt stack 0
  6078                           tosu	equ	0xFFF
  6079                           tosh	equ	0xFFE
  6080                           tosl	equ	0xFFD
  6081                           pclath	equ	0xFFA
  6082                           tblptru	equ	0xFF8
  6083                           tblptrh	equ	0xFF7
  6084                           tblptrl	equ	0xFF6
  6085                           tablat	equ	0xFF5
  6086                           prodh	equ	0xFF4
  6087                           prodl	equ	0xFF3
  6088                           postinc0	equ	0xFEE
  6089                           wreg	equ	0xFE8
  6090                           postdec1	equ	0xFE5
  6091                           fsr1h	equ	0xFE2
  6092                           fsr1l	equ	0xFE1
  6093                           indf2	equ	0xFDF
  6094                           postinc2	equ	0xFDE
  6095                           postdec2	equ	0xFDD
  6096                           fsr2h	equ	0xFDA
  6097                           fsr2l	equ	0xFD9
  6098                           status	equ	0xFD8
  6099                           
  6100 ;; *************** function _Console_ClearCursor *****************
  6101 ;; Defined at:
  6102 ;;		line 308 in file "Library/Console.c"
  6103 ;; Parameters:    Size  Location     Type
  6104 ;;		None
  6105 ;; Auto vars:     Size  Location     Type
  6106 ;;		None
  6107 ;; Return value:  Size  Location     Type
  6108 ;;                  1    wreg      void 
  6109 ;; Registers used:
  6110 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6111 ;; Tracked objects:
  6112 ;;		On entry : 0/0
  6113 ;;		On exit  : 0/0
  6114 ;;		Unchanged: 0/0
  6115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6118 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6119 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6120 ;;Total ram usage:        2 bytes
  6121 ;; Hardware stack levels used:    1
  6122 ;; Hardware stack levels required when called:    7
  6123 ;; This function calls:
  6124 ;;		Nothing
  6125 ;; This function is called by:
  6126 ;;		_Console_Backspace
  6127 ;;		_Console_Tab
  6128 ;; This function uses a non-reentrant model
  6129 ;;
  6130                           
  6131                           	psect	text20
  6132  0000'                    __ptext20:
  6133                           	opt stack 0
  6134  0000'                    _Console_ClearCursor:
  6135                           	opt stack 18
  6136                           
  6137                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
  6138                           
  6139                           ;incstack = 0
  6140  0000' 0E01               	movlw	1
  6141  0002' 0100               	movlb	0	; () banked
  6142  0004' 6F00'              	movwf	_change& (0+255),b
  6143                           
  6144                           ; BSR set to: 0
  6145  0006' 0100               	movlb	0	; () banked
  6146  0008' 5100'              	movf	_lBufferY& (0+255),w,b
  6147  000A' 0D14               	mullw	20
  6148  000C' 0E00'              	movlw	low _lBuffer
  6149  000E' 0100               	movlb	0	; () banked
  6150  0010' 6F00'              	movwf	??_Console_ClearCursor& (0+255),b
  6151  0012' 0E00'              	movlw	high _lBuffer
  6152  0014' 0100               	movlb	0	; () banked
  6153  0016' 6F00'              	movwf	(??_Console_ClearCursor+1)& (0+255),b
  6154  0018' 50F3               	movf	prodl,w,c
  6155  001A' 0100               	movlb	0	; () banked
  6156  001C' 2700'              	addwf	??_Console_ClearCursor& (0+255),f,b
  6157  001E' 50F4               	movf	prodh,w,c
  6158  0020' 0100               	movlb	0	; () banked
  6159  0022' 2300'              	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
  6160  0024' 0100               	movlb	0	; () banked
  6161  0026' 5100'              	movf	_lBufferX& (0+255),w,b
  6162  0028' 0D01               	mullw	1
  6163  002A' 50F3               	movf	prodl,w,c
  6164  002C' 0100               	movlb	0	; () banked
  6165  002E' 2500'              	addwf	??_Console_ClearCursor& (0+255),w,b
  6166  0030' 6ED9               	movwf	fsr2l,c
  6167  0032' 50F4               	movf	prodh,w,c
  6168  0034' 0100               	movlb	0	; () banked
  6169  0036' 2100'              	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
  6170  0038' 6EDA               	movwf	fsr2h,c
  6171  003A' 0E80               	movlw	128
  6172  003C' 6EDF               	movwf	indf2,c
  6173                           
  6174                           ; BSR set to: 0
  6175  003E' 0012               	return		;funcret
  6176  0040'                    __end_of_Console_ClearCursor:
  6177                           	opt stack 0
  6178                           tosu	equ	0xFFF
  6179                           tosh	equ	0xFFE
  6180                           tosl	equ	0xFFD
  6181                           pclath	equ	0xFFA
  6182                           tblptru	equ	0xFF8
  6183                           tblptrh	equ	0xFF7
  6184                           tblptrl	equ	0xFF6
  6185                           tablat	equ	0xFF5
  6186                           prodh	equ	0xFF4
  6187                           prodl	equ	0xFF3
  6188                           postinc0	equ	0xFEE
  6189                           wreg	equ	0xFE8
  6190                           postdec1	equ	0xFE5
  6191                           fsr1h	equ	0xFE2
  6192                           fsr1l	equ	0xFE1
  6193                           indf2	equ	0xFDF
  6194                           postinc2	equ	0xFDE
  6195                           postdec2	equ	0xFDD
  6196                           fsr2h	equ	0xFDA
  6197                           fsr2l	equ	0xFD9
  6198                           status	equ	0xFD8
  6199                           
  6200 ;; *************** function _irobot_stop_motion *****************
  6201 ;; Defined at:
  6202 ;;		line 288 in file "Library/iRobotSerial.c"
  6203 ;; Parameters:    Size  Location     Type
  6204 ;;  isScript        1    wreg     unsigned char 
  6205 ;; Auto vars:     Size  Location     Type
  6206 ;;  isScript        1   25[BANK0 ] unsigned char 
  6207 ;; Return value:  Size  Location     Type
  6208 ;;                  1    wreg      void 
  6209 ;; Registers used:
  6210 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6211 ;; Tracked objects:
  6212 ;;		On entry : 0/0
  6213 ;;		On exit  : 0/0
  6214 ;;		Unchanged: 0/0
  6215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6217 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6219 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6220 ;;Total ram usage:        1 bytes
  6221 ;; Hardware stack levels used:    1
  6222 ;; Hardware stack levels required when called:    9
  6223 ;; This function calls:
  6224 ;;		_irobot_move
  6225 ;; This function is called by:
  6226 ;;		_mode2
  6227 ;;		_irobot_move_to_simple
  6228 ;;		_irobot_rotate_to
  6229 ;; This function uses a non-reentrant model
  6230 ;;
  6231                           
  6232                           	psect	text21
  6233  0000'                    __ptext21:
  6234                           	opt stack 0
  6235  0000'                    _irobot_stop_motion:
  6236                           	opt stack 20
  6237                           
  6238                           ; BSR set to: 0
  6239                           ;incstack = 0
  6240                           ;irobot_stop_motion@isScript stored from wreg
  6241  0000' 0100               	movlb	0	; () banked
  6242  0002' 6F00'              	movwf	irobot_stop_motion@isScript& (0+255),b
  6243                           
  6244                           ;iRobotSerial.c: 289: (isScript) ? irobot_move(1,0,0) : irobot_move(0,0,0);
  6245  0004' 0100               	movlb	0	; () banked
  6246  0006' 5100'              	movf	irobot_stop_motion@isScript& (0+255),w,b
  6247  0008' 0100               	movlb	0	; () banked
  6248  000A' B4D8               	btfsc	status,2,c
  6249  000C' D00E               	goto	l2163
  6250                           
  6251                           ; BSR set to: 0
  6252  000E' 0E00               	movlw	0
  6253  0010' 0100               	movlb	0	; () banked
  6254  0012' 6F00'              	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  6255  0014' 0E00               	movlw	0
  6256  0016' 6F00'              	movwf	irobot_move@moveSpeed& (0+255),b
  6257  0018' 0E00               	movlw	0
  6258  001A' 0100               	movlb	0	; () banked
  6259  001C' 6F00'              	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  6260  001E' 0E00               	movlw	0
  6261  0020' 6F00'              	movwf	irobot_move@moveTurnRadius& (0+255),b
  6262  0022' 0E01               	movlw	1
  6263  0024' EC00' F000'        	call	_irobot_move
  6264  0028' 0012               	return	
  6265  002A'                    l2163:
  6266  002A' 0E00               	movlw	0
  6267  002C' 0100               	movlb	0	; () banked
  6268  002E' 6F00'              	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  6269  0030' 0E00               	movlw	0
  6270  0032' 6F00'              	movwf	irobot_move@moveSpeed& (0+255),b
  6271  0034' 0E00               	movlw	0
  6272  0036' 0100               	movlb	0	; () banked
  6273  0038' 6F00'              	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  6274  003A' 0E00               	movlw	0
  6275  003C' 6F00'              	movwf	irobot_move@moveTurnRadius& (0+255),b
  6276  003E' 0E00               	movlw	0
  6277  0040' EC00' F000'        	call	_irobot_move
  6278  0044' 0012               	return	
  6279  0046'                    __end_of_irobot_stop_motion:
  6280                           	opt stack 0
  6281                           tosu	equ	0xFFF
  6282                           tosh	equ	0xFFE
  6283                           tosl	equ	0xFFD
  6284                           pclath	equ	0xFFA
  6285                           tblptru	equ	0xFF8
  6286                           tblptrh	equ	0xFF7
  6287                           tblptrl	equ	0xFF6
  6288                           tablat	equ	0xFF5
  6289                           prodh	equ	0xFF4
  6290                           prodl	equ	0xFF3
  6291                           postinc0	equ	0xFEE
  6292                           wreg	equ	0xFE8
  6293                           postdec1	equ	0xFE5
  6294                           fsr1h	equ	0xFE2
  6295                           fsr1l	equ	0xFE1
  6296                           indf2	equ	0xFDF
  6297                           postinc2	equ	0xFDE
  6298                           postdec2	equ	0xFDD
  6299                           fsr2h	equ	0xFDA
  6300                           fsr2l	equ	0xFD9
  6301                           status	equ	0xFD8
  6302                           
  6303 ;; *************** function _irobot_song_play *****************
  6304 ;; Defined at:
  6305 ;;		line 274 in file "Library/iRobotSerial.c"
  6306 ;; Parameters:    Size  Location     Type
  6307 ;;  songNumber      1    wreg     unsigned char 
  6308 ;; Auto vars:     Size  Location     Type
  6309 ;;  songNumber      1    1[BANK0 ] unsigned char 
  6310 ;; Return value:  Size  Location     Type
  6311 ;;                  1    wreg      void 
  6312 ;; Registers used:
  6313 ;;		wreg, status,2, cstack
  6314 ;; Tracked objects:
  6315 ;;		On entry : 0/0
  6316 ;;		On exit  : 0/0
  6317 ;;		Unchanged: 0/0
  6318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6320 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6322 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6323 ;;Total ram usage:        1 bytes
  6324 ;; Hardware stack levels used:    1
  6325 ;; Hardware stack levels required when called:    8
  6326 ;; This function calls:
  6327 ;;		_eusart_putch
  6328 ;; This function is called by:
  6329 ;;		_mode2
  6330 ;; This function uses a non-reentrant model
  6331 ;;
  6332                           
  6333                           	psect	text22
  6334  0000'                    __ptext22:
  6335                           	opt stack 0
  6336  0000'                    _irobot_song_play:
  6337                           	opt stack 21
  6338                           
  6339                           ;incstack = 0
  6340                           ;irobot_song_play@songNumber stored from wreg
  6341  0000' 0100               	movlb	0	; () banked
  6342  0002' 6F00'              	movwf	irobot_song_play@songNumber& (0+255),b
  6343                           
  6344                           ;iRobotSerial.c: 275: eusart_putch(iR_SONG_PLAY);
  6345  0004' 0E8D               	movlw	141
  6346  0006' EC00' F000'        	call	_eusart_putch
  6347                           
  6348                           ;iRobotSerial.c: 276: eusart_putch(songNumber);
  6349  000A' 0100               	movlb	0	; () banked
  6350  000C' 5100'              	movf	irobot_song_play@songNumber& (0+255),w,b
  6351  000E' EC00' F000'        	call	_eusart_putch
  6352  0012' 0012               	return		;funcret
  6353  0014'                    __end_of_irobot_song_play:
  6354                           	opt stack 0
  6355                           tosu	equ	0xFFF
  6356                           tosh	equ	0xFFE
  6357                           tosl	equ	0xFFD
  6358                           pclath	equ	0xFFA
  6359                           tblptru	equ	0xFF8
  6360                           tblptrh	equ	0xFF7
  6361                           tblptrl	equ	0xFF6
  6362                           tablat	equ	0xFF5
  6363                           prodh	equ	0xFF4
  6364                           prodl	equ	0xFF3
  6365                           postinc0	equ	0xFEE
  6366                           wreg	equ	0xFE8
  6367                           postdec1	equ	0xFE5
  6368                           fsr1h	equ	0xFE2
  6369                           fsr1l	equ	0xFE1
  6370                           indf2	equ	0xFDF
  6371                           postinc2	equ	0xFDE
  6372                           postdec2	equ	0xFDD
  6373                           fsr2h	equ	0xFDA
  6374                           fsr2l	equ	0xFD9
  6375                           status	equ	0xFD8
  6376                           
  6377 ;; *************** function _irobot_move_straight *****************
  6378 ;; Defined at:
  6379 ;;		line 303 in file "Library/iRobotSerial.c"
  6380 ;; Parameters:    Size  Location     Type
  6381 ;;  straightSpee    2   25[BANK0 ] short 
  6382 ;; Auto vars:     Size  Location     Type
  6383 ;;		None
  6384 ;; Return value:  Size  Location     Type
  6385 ;;                  1    wreg      void 
  6386 ;; Registers used:
  6387 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6388 ;; Tracked objects:
  6389 ;;		On entry : 0/0
  6390 ;;		On exit  : 0/0
  6391 ;;		Unchanged: 0/0
  6392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6393 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6396 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6397 ;;Total ram usage:        2 bytes
  6398 ;; Hardware stack levels used:    1
  6399 ;; Hardware stack levels required when called:    9
  6400 ;; This function calls:
  6401 ;;		_irobot_move
  6402 ;; This function is called by:
  6403 ;;		_mode2
  6404 ;; This function uses a non-reentrant model
  6405 ;;
  6406                           
  6407                           	psect	text23
  6408  0000'                    __ptext23:
  6409                           	opt stack 0
  6410  0000'                    _irobot_move_straight:
  6411                           	opt stack 20
  6412                           
  6413                           ;iRobotSerial.c: 304: irobot_move(0, straightSpeed, iR_CONST_STRAIGHT_2);
  6414                           
  6415                           ;incstack = 0
  6416  0000' C019' F010'        	movff	irobot_move_straight@straightSpeed,irobot_move@moveSpeed
  6417  0004' C01A' F011'        	movff	irobot_move_straight@straightSpeed+1,irobot_move@moveSpeed+1
  6418  0008' 0E7F               	movlw	127
  6419  000A' 0100               	movlb	0	; () banked
  6420  000C' 6F00'              	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  6421  000E' 6900'              	setf	irobot_move@moveTurnRadius& (0+255),b
  6422  0010' 0E00               	movlw	0
  6423  0012' EC00' F000'        	call	_irobot_move
  6424  0016' 0012               	return		;funcret
  6425  0018'                    __end_of_irobot_move_straight:
  6426                           	opt stack 0
  6427                           tosu	equ	0xFFF
  6428                           tosh	equ	0xFFE
  6429                           tosl	equ	0xFFD
  6430                           pclath	equ	0xFFA
  6431                           tblptru	equ	0xFF8
  6432                           tblptrh	equ	0xFF7
  6433                           tblptrl	equ	0xFF6
  6434                           tablat	equ	0xFF5
  6435                           prodh	equ	0xFF4
  6436                           prodl	equ	0xFF3
  6437                           postinc0	equ	0xFEE
  6438                           wreg	equ	0xFE8
  6439                           postdec1	equ	0xFE5
  6440                           fsr1h	equ	0xFE2
  6441                           fsr1l	equ	0xFE1
  6442                           indf2	equ	0xFDF
  6443                           postinc2	equ	0xFDE
  6444                           postdec2	equ	0xFDD
  6445                           fsr2h	equ	0xFDA
  6446                           fsr2l	equ	0xFD9
  6447                           status	equ	0xFD8
  6448                           
  6449 ;; *************** function _HMI_Poll *****************
  6450 ;; Defined at:
  6451 ;;		line 252 in file "HMI.c"
  6452 ;; Parameters:    Size  Location     Type
  6453 ;;		None
  6454 ;; Auto vars:     Size  Location     Type
  6455 ;;		None
  6456 ;; Return value:  Size  Location     Type
  6457 ;;                  1    wreg      void 
  6458 ;; Registers used:
  6459 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  6460 ;; Tracked objects:
  6461 ;;		On entry : 0/0
  6462 ;;		On exit  : 0/0
  6463 ;;		Unchanged: 0/0
  6464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6468 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6469 ;;Total ram usage:        0 bytes
  6470 ;; Hardware stack levels used:    1
  6471 ;; Hardware stack levels required when called:   15
  6472 ;; This function calls:
  6473 ;;		_Button_Poll
  6474 ;; This function is called by:
  6475 ;;		_mode2
  6476 ;; This function uses a non-reentrant model
  6477 ;;
  6478                           
  6479                           	psect	text24
  6480  0000'                    __ptext24:
  6481                           	opt stack 0
  6482  0000'                    _HMI_Poll:
  6483                           	opt stack 14
  6484                           
  6485                           ;HMI.c: 254: TRISE = 0xFC;
  6486                           
  6487                           ;incstack = 0
  6488  0000' 0EFC               	movlw	252
  6489  0002' 6E96               	movwf	3990,c	;volatile
  6490                           
  6491                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
  6492  0004' 0E00'              	movlw	low (_HMIBoard+48)
  6493  0006' 0100               	movlb	0	; () banked
  6494  0008' 6F00'              	movwf	Button_Poll@pButton& (0+255),b
  6495  000A' 0E00'              	movlw	high (_HMIBoard+48)
  6496  000C' 0100               	movlb	0	; () banked
  6497  000E' 6F00'              	movwf	(Button_Poll@pButton+1)& (0+255),b
  6498  0010' 0E01               	movlw	1
  6499  0012' 0100               	movlb	0	; () banked
  6500  0014' 6F00'              	movwf	Button_Poll@pIncrement& (0+255),b
  6501  0016' EC00' F000'        	call	_Button_Poll	;wreg free
  6502                           
  6503                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
  6504  001A' 0E00'              	movlw	low (_HMIBoard+18)
  6505  001C' 0100               	movlb	0	; () banked
  6506  001E' 6F00'              	movwf	Button_Poll@pButton& (0+255),b
  6507  0020' 0E00'              	movlw	high (_HMIBoard+18)
  6508  0022' 0100               	movlb	0	; () banked
  6509  0024' 6F00'              	movwf	(Button_Poll@pButton+1)& (0+255),b
  6510  0026' 0E01               	movlw	1
  6511  0028' 0100               	movlb	0	; () banked
  6512  002A' 6F00'              	movwf	Button_Poll@pIncrement& (0+255),b
  6513  002C' EC00' F000'        	call	_Button_Poll	;wreg free
  6514                           
  6515                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
  6516  0030' 0E00'              	movlw	low (_HMIBoard+8)
  6517  0032' 0100               	movlb	0	; () banked
  6518  0034' 6F00'              	movwf	Button_Poll@pButton& (0+255),b
  6519  0036' 0E00'              	movlw	high (_HMIBoard+8)
  6520  0038' 0100               	movlb	0	; () banked
  6521  003A' 6F00'              	movwf	(Button_Poll@pButton+1)& (0+255),b
  6522  003C' 0E01               	movlw	1
  6523  003E' 0100               	movlb	0	; () banked
  6524  0040' 6F00'              	movwf	Button_Poll@pIncrement& (0+255),b
  6525  0042' EC00' F000'        	call	_Button_Poll	;wreg free
  6526                           
  6527                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
  6528  0046' 0E00'              	movlw	low (_HMIBoard+28)
  6529  0048' 0100               	movlb	0	; () banked
  6530  004A' 6F00'              	movwf	Button_Poll@pButton& (0+255),b
  6531  004C' 0E00'              	movlw	high (_HMIBoard+28)
  6532  004E' 0100               	movlb	0	; () banked
  6533  0050' 6F00'              	movwf	(Button_Poll@pButton+1)& (0+255),b
  6534  0052' 0E01               	movlw	1
  6535  0054' 0100               	movlb	0	; () banked
  6536  0056' 6F00'              	movwf	Button_Poll@pIncrement& (0+255),b
  6537  0058' EC00' F000'        	call	_Button_Poll	;wreg free
  6538                           
  6539                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
  6540  005C' 0E00'              	movlw	low (_HMIBoard+38)
  6541  005E' 0100               	movlb	0	; () banked
  6542  0060' 6F00'              	movwf	Button_Poll@pButton& (0+255),b
  6543  0062' 0E00'              	movlw	high (_HMIBoard+38)
  6544  0064' 0100               	movlb	0	; () banked
  6545  0066' 6F00'              	movwf	(Button_Poll@pButton+1)& (0+255),b
  6546  0068' 0E01               	movlw	1
  6547  006A' 0100               	movlb	0	; () banked
  6548  006C' 6F00'              	movwf	Button_Poll@pIncrement& (0+255),b
  6549  006E' EC00' F000'        	call	_Button_Poll	;wreg free
  6550  0072' 0012               	return		;funcret
  6551  0074'                    __end_of_HMI_Poll:
  6552                           	opt stack 0
  6553                           tosu	equ	0xFFF
  6554                           tosh	equ	0xFFE
  6555                           tosl	equ	0xFFD
  6556                           pclath	equ	0xFFA
  6557                           tblptru	equ	0xFF8
  6558                           tblptrh	equ	0xFF7
  6559                           tblptrl	equ	0xFF6
  6560                           tablat	equ	0xFF5
  6561                           prodh	equ	0xFF4
  6562                           prodl	equ	0xFF3
  6563                           postinc0	equ	0xFEE
  6564                           wreg	equ	0xFE8
  6565                           postdec1	equ	0xFE5
  6566                           fsr1h	equ	0xFE2
  6567                           fsr1l	equ	0xFE1
  6568                           indf2	equ	0xFDF
  6569                           postinc2	equ	0xFDE
  6570                           postdec2	equ	0xFDD
  6571                           fsr2h	equ	0xFDA
  6572                           fsr2l	equ	0xFD9
  6573                           status	equ	0xFD8
  6574                           
  6575 ;; *************** function _Button_Poll *****************
  6576 ;; Defined at:
  6577 ;;		line 57 in file "Library/Button.c"
  6578 ;; Parameters:    Size  Location     Type
  6579 ;;  pButton         2   27[BANK0 ] const PTR struct Button
  6580 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
  6581 ;;  pIncrement      1   29[BANK0 ] unsigned char 
  6582 ;; Auto vars:     Size  Location     Type
  6583 ;;  Pin             1   35[BANK0 ] unsigned char 
  6584 ;; Return value:  Size  Location     Type
  6585 ;;                  1    wreg      unsigned char 
  6586 ;; Registers used:
  6587 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  6588 ;; Tracked objects:
  6589 ;;		On entry : 0/0
  6590 ;;		On exit  : 0/0
  6591 ;;		Unchanged: 0/0
  6592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6593 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6594 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6595 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6596 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6597 ;;Total ram usage:        9 bytes
  6598 ;; Hardware stack levels used:    1
  6599 ;; Hardware stack levels required when called:   14
  6600 ;; This function calls:
  6601 ;;		_Event_DIPSwitch
  6602 ;;		_Event_NULL
  6603 ;;		_Event_TestButton
  6604 ;;		_HMI_DIPSwitch
  6605 ;;		_HMI_DownSwitch
  6606 ;;		_HMI_LeftSwitch
  6607 ;;		_HMI_RightSwitch
  6608 ;;		_HMI_UpSwitch
  6609 ;;		_MXK_DIPSwitch
  6610 ;;		_MXK_TestButton
  6611 ;; This function is called by:
  6612 ;;		_HMI_Poll
  6613 ;;		_MXK_Poll
  6614 ;; This function uses a non-reentrant model
  6615 ;;
  6616                           
  6617                           	psect	text25
  6618  0000'                    __ptext25:
  6619                           	opt stack 0
  6620  0000'                    _Button_Poll:
  6621                           	opt stack 14
  6622                           
  6623                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
  6624                           
  6625                           ;incstack = 0
  6626  0000' 0100               	movlb	0	; () banked
  6627  0002' EE20 F007          	lfsr	2,7
  6628  0006' 5100'              	movf	Button_Poll@pButton& (0+255),w,b
  6629  0008' 26D9               	addwf	fsr2l,f,c
  6630  000A' 5100'              	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6631  000C' 22DA               	addwfc	fsr2h,f,c
  6632  000E' D801               	call	u7768
  6633  0010' D00A               	goto	u7769
  6634  0012'                    u7768:
  6635  0012' 0005               	push	
  6636  0014' 6EFA               	movwf	pclath,c
  6637  0016' 50DE               	movf	postinc2,w,c
  6638  0018' 6EFD               	movwf	tosl,c
  6639  001A' 50DE               	movf	postinc2,w,c
  6640  001C' 6EFE               	movwf	tosh,c
  6641  001E' 50DE               	movf	postinc2,w,c
  6642  0020' 6EFF               	movwf	tosu,c
  6643  0022' 50FA               	movf	pclath,w,c
  6644  0024' 0012               	return		;indir
  6645  0026'                    u7769:
  6646  0026' 0100               	movlb	0	; () banked
  6647  0028' 6F00'              	movwf	Button_Poll@Pin& (0+255),b
  6648                           
  6649                           ; BSR set to: 0
  6650                           ;Button.c: 61: if (pButton->mState == Pin)
  6651  002A' C01B' FFD9         	movff	Button_Poll@pButton,fsr2l
  6652  002E' C01C' FFDA         	movff	Button_Poll@pButton+1,fsr2h
  6653  0032' 0100               	movlb	0	; () banked
  6654  0034' 5100'              	movf	Button_Poll@Pin& (0+255),w,b
  6655  0036' 18DE               	xorwf	postinc2,w,c
  6656  0038' A4D8               	btfss	status,2,c
  6657  003A' D021               	goto	l11
  6658                           
  6659                           ; BSR set to: 0
  6660                           ;Button.c: 62: {
  6661                           ;Button.c: 65: if(pIncrement > pButton->mCount)
  6662  003C' 0100               	movlb	0	; () banked
  6663  003E' EE20 F001          	lfsr	2,1
  6664  0042' 5100'              	movf	Button_Poll@pButton& (0+255),w,b
  6665  0044' 26D9               	addwf	fsr2l,f,c
  6666  0046' 5100'              	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6667  0048' 22DA               	addwfc	fsr2h,f,c
  6668  004A' 0100               	movlb	0	; () banked
  6669  004C' 5100'              	movf	Button_Poll@pIncrement& (0+255),w,b
  6670  004E' 5CDE               	subwf	postinc2,w,c
  6671  0050' B0D8               	btfsc	status,0,c
  6672  0052' D00A               	goto	l12
  6673                           
  6674                           ; BSR set to: 0
  6675                           ;Button.c: 66: pButton->mCount = 0;
  6676  0054' 0100               	movlb	0	; () banked
  6677  0056' EE20 F001          	lfsr	2,1
  6678  005A' 5100'              	movf	Button_Poll@pButton& (0+255),w,b
  6679  005C' 26D9               	addwf	fsr2l,f,c
  6680  005E' 5100'              	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6681  0060' 22DA               	addwfc	fsr2h,f,c
  6682  0062' 0E00               	movlw	0
  6683  0064' 6EDF               	movwf	indf2,c
  6684  0066' 0012               	return	
  6685  0068'                    l12:
  6686                           
  6687                           ; BSR set to: 0
  6688                           ;Button.c: 67: else
  6689                           ;Button.c: 68: pButton->mCount -= pIncrement;
  6690                           
  6691                           ; BSR set to: 0
  6692  0068' 0100               	movlb	0	; () banked
  6693  006A' EE20 F001          	lfsr	2,1
  6694  006E' 5100'              	movf	Button_Poll@pButton& (0+255),w,b
  6695  0070' 26D9               	addwf	fsr2l,f,c
  6696  0072' 5100'              	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6697  0074' 22DA               	addwfc	fsr2h,f,c
  6698  0076' 0100               	movlb	0	; () banked
  6699  0078' 5100'              	movf	Button_Poll@pIncrement& (0+255),w,b
  6700  007A' 5EDF               	subwf	indf2,f,c
  6701                           
  6702                           ; BSR set to: 0
  6703                           ;Button.c: 69: }
  6704  007C' 0012               	return	
  6705  007E'                    l11:
  6706                           
  6707                           ; BSR set to: 0
  6708                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
  6709                           
  6710                           ; BSR set to: 0
  6711  007E' 0100               	movlb	0	; () banked
  6712  0080' EE20 F001          	lfsr	2,1
  6713  0084' 5100'              	movf	Button_Poll@pButton& (0+255),w,b
  6714  0086' 26D9               	addwf	fsr2l,f,c
  6715  0088' 5100'              	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6716  008A' 22DA               	addwfc	fsr2h,f,c
  6717  008C' 50DF               	movf	indf2,w,c
  6718  008E' 0100               	movlb	0	; () banked
  6719  0090' 6F00'              	movwf	??_Button_Poll& (0+255),b
  6720  0092' 6B00'              	clrf	(??_Button_Poll+1)& (0+255),b
  6721  0094' 0100               	movlb	0	; () banked
  6722  0096' 5100'              	movf	Button_Poll@pIncrement& (0+255),w,b
  6723  0098' 0100               	movlb	0	; () banked
  6724  009A' 2700'              	addwf	??_Button_Poll& (0+255),f,b
  6725  009C' 0E00               	movlw	0
  6726  009E' 2300'              	addwfc	(??_Button_Poll+1)& (0+255),f,b
  6727  00A0' 0100               	movlb	0	; () banked
  6728  00A2' EE20 F001          	lfsr	2,1
  6729  00A6' 5100'              	movf	Button_Poll@pButton& (0+255),w,b
  6730  00A8' 26D9               	addwf	fsr2l,f,c
  6731  00AA' 5100'              	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6732  00AC' 22DA               	addwfc	fsr2h,f,c
  6733  00AE' 50DF               	movf	indf2,w,c
  6734  00B0' 0100               	movlb	0	; () banked
  6735  00B2' 6F00'              	movwf	(??_Button_Poll+2)& (0+255),b
  6736  00B4' 6B00'              	clrf	(??_Button_Poll+3)& (0+255),b
  6737  00B6' 0100               	movlb	0	; () banked
  6738  00B8' 5100'              	movf	??_Button_Poll& (0+255),w,b
  6739  00BA' 0100               	movlb	0	; () banked
  6740  00BC' 5D00'              	subwf	(??_Button_Poll+2)& (0+255),w,b
  6741  00BE' 0100               	movlb	0	; () banked
  6742  00C0' 5100'              	movf	(??_Button_Poll+3)& (0+255),w,b
  6743  00C2' 0A80               	xorlw	128
  6744  00C4' 0100               	movlb	0	; () banked
  6745  00C6' 6F00'              	movwf	(??_Button_Poll+4)& (0+255),b
  6746  00C8' 0100               	movlb	0	; () banked
  6747  00CA' 5100'              	movf	(??_Button_Poll+1)& (0+255),w,b
  6748  00CC' 0A80               	xorlw	128
  6749  00CE' 0100               	movlb	0	; () banked
  6750  00D0' 5900'              	subwfb	(??_Button_Poll+4)& (0+255),w,b
  6751  00D2' B0D8               	btfsc	status,0,c
  6752  00D4' 0012               	return	
  6753                           
  6754                           ; BSR set to: 0
  6755                           ;Button.c: 73: {
  6756                           ;Button.c: 75: pButton->mCount += pIncrement;
  6757  00D6' 0100               	movlb	0	; () banked
  6758  00D8' EE20 F001          	lfsr	2,1
  6759  00DC' 5100'              	movf	Button_Poll@pButton& (0+255),w,b
  6760  00DE' 26D9               	addwf	fsr2l,f,c
  6761  00E0' 5100'              	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6762  00E2' 22DA               	addwfc	fsr2h,f,c
  6763  00E4' 0100               	movlb	0	; () banked
  6764  00E6' 5100'              	movf	Button_Poll@pIncrement& (0+255),w,b
  6765  00E8' 26DF               	addwf	indf2,f,c
  6766                           
  6767                           ; BSR set to: 0
  6768                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
  6769  00EA' 0100               	movlb	0	; () banked
  6770  00EC' EE20 F002          	lfsr	2,2
  6771  00F0' 5100'              	movf	Button_Poll@pButton& (0+255),w,b
  6772  00F2' 26D9               	addwf	fsr2l,f,c
  6773  00F4' 5100'              	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6774  00F6' 22DA               	addwfc	fsr2h,f,c
  6775  00F8' 0100               	movlb	0	; () banked
  6776  00FA' EE10 F001          	lfsr	1,1
  6777  00FE' 5100'              	movf	Button_Poll@pButton& (0+255),w,b
  6778  0100' 26E1               	addwf	fsr1l,f,c
  6779  0102' 5100'              	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6780  0104' 22E2               	addwfc	fsr1h,f,c
  6781  0106' 50E7               	movf	indf1,w,c
  6782  0108' 0100               	movlb	0	; () banked
  6783  010A' 6F00'              	movwf	(??_Button_Poll+2)& (0+255),b
  6784  010C' 6B00'              	clrf	(??_Button_Poll+3)& (0+255),b
  6785  010E' 50DE               	movf	postinc2,w,c
  6786  0110' 0100               	movlb	0	; () banked
  6787  0112' 5D00'              	subwf	(??_Button_Poll+2)& (0+255),w,b
  6788  0114' 50DE               	movf	postinc2,w,c
  6789  0116' 0100               	movlb	0	; () banked
  6790  0118' 5900'              	subwfb	(??_Button_Poll+3)& (0+255),w,b
  6791  011A' A0D8               	btfss	status,0,c
  6792  011C' 0012               	return	
  6793                           
  6794                           ; BSR set to: 0
  6795                           ;Button.c: 77: {
  6796                           ;Button.c: 79: pButton->mState = Pin;
  6797  011E' C01B' FFD9         	movff	Button_Poll@pButton,fsr2l
  6798  0122' C01C' FFDA         	movff	Button_Poll@pButton+1,fsr2h
  6799  0126' C023' FFDF         	movff	Button_Poll@Pin,indf2
  6800                           
  6801                           ; BSR set to: 0
  6802                           ;Button.c: 80: pButton->mCount = 0;
  6803  012A' 0100               	movlb	0	; () banked
  6804  012C' EE20 F001          	lfsr	2,1
  6805  0130' 5100'              	movf	Button_Poll@pButton& (0+255),w,b
  6806  0132' 26D9               	addwf	fsr2l,f,c
  6807  0134' 5100'              	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6808  0136' 22DA               	addwfc	fsr2h,f,c
  6809  0138' 0E00               	movlw	0
  6810  013A' 6EDF               	movwf	indf2,c
  6811                           
  6812                           ; BSR set to: 0
  6813                           ;Button.c: 83: pButton->mFunction(Pin);
  6814  013C' 0100               	movlb	0	; () banked
  6815  013E' EE20 F004          	lfsr	2,4
  6816  0142' 5100'              	movf	Button_Poll@pButton& (0+255),w,b
  6817  0144' 26D9               	addwf	fsr2l,f,c
  6818  0146' 5100'              	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6819  0148' 22DA               	addwfc	fsr2h,f,c
  6820  014A' D801               	call	u7818
  6821  014C' 0012               	return	
  6822  014E'                    u7818:
  6823  014E' 0005               	push	
  6824  0150' 6EFA               	movwf	pclath,c
  6825  0152' 50DE               	movf	postinc2,w,c
  6826  0154' 6EFD               	movwf	tosl,c
  6827  0156' 50DE               	movf	postinc2,w,c
  6828  0158' 6EFE               	movwf	tosh,c
  6829  015A' 50DE               	movf	postinc2,w,c
  6830  015C' 6EFF               	movwf	tosu,c
  6831  015E' 50FA               	movf	pclath,w,c
  6832  0160' 0100               	movlb	0	; () banked
  6833  0162' 5100'              	movf	Button_Poll@Pin& (0+255),w,b
  6834  0164' 0012               	return		;indir
  6835  0166'                    __end_of_Button_Poll:
  6836                           	opt stack 0
  6837                           tosu	equ	0xFFF
  6838                           tosh	equ	0xFFE
  6839                           tosl	equ	0xFFD
  6840                           pclath	equ	0xFFA
  6841                           tblptru	equ	0xFF8
  6842                           tblptrh	equ	0xFF7
  6843                           tblptrl	equ	0xFF6
  6844                           tablat	equ	0xFF5
  6845                           prodh	equ	0xFF4
  6846                           prodl	equ	0xFF3
  6847                           postinc0	equ	0xFEE
  6848                           wreg	equ	0xFE8
  6849                           indf1	equ	0xFE7
  6850                           postdec1	equ	0xFE5
  6851                           fsr1h	equ	0xFE2
  6852                           fsr1l	equ	0xFE1
  6853                           indf2	equ	0xFDF
  6854                           postinc2	equ	0xFDE
  6855                           postdec2	equ	0xFDD
  6856                           fsr2h	equ	0xFDA
  6857                           fsr2l	equ	0xFD9
  6858                           status	equ	0xFD8
  6859                           
  6860 ;; *************** function _MXK_DIPSwitch *****************
  6861 ;; Defined at:
  6862 ;;		line 24 in file "Library/MXK.c"
  6863 ;; Parameters:    Size  Location     Type
  6864 ;;		None
  6865 ;; Auto vars:     Size  Location     Type
  6866 ;;		None
  6867 ;; Return value:  Size  Location     Type
  6868 ;;                  1    wreg      unsigned char 
  6869 ;; Registers used:
  6870 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6871 ;; Tracked objects:
  6872 ;;		On entry : 0/0
  6873 ;;		On exit  : 0/0
  6874 ;;		Unchanged: 0/0
  6875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6877 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6879 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6880 ;;Total ram usage:        0 bytes
  6881 ;; Hardware stack levels used:    1
  6882 ;; Hardware stack levels required when called:    8
  6883 ;; This function calls:
  6884 ;;		_Port_GetQuad
  6885 ;; This function is called by:
  6886 ;;		_FunctInitButton
  6887 ;;		_Button_Poll
  6888 ;;		_mode2
  6889 ;;		_getMode
  6890 ;; This function uses a non-reentrant model
  6891 ;;
  6892                           
  6893                           	psect	text26
  6894  0000'                    __ptext26:
  6895                           	opt stack 0
  6896  0000'                    _MXK_DIPSwitch:
  6897                           	opt stack 21
  6898                           
  6899                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
  6900                           
  6901                           ;incstack = 0
  6902  0000' 0E00'              	movlw	low _PortD
  6903  0002' 0100               	movlb	0	; () banked
  6904  0004' 6F00'              	movwf	Port_GetQuad@pInput& (0+255),b
  6905  0006' 0E00'              	movlw	high _PortD
  6906  0008' 0100               	movlb	0	; () banked
  6907  000A' 6F00'              	movwf	(Port_GetQuad@pInput+1)& (0+255),b
  6908  000C' 0E00               	movlw	0
  6909  000E' 0100               	movlb	0	; () banked
  6910  0010' 6F00'              	movwf	Port_GetQuad@pQuad& (0+255),b
  6911  0012' EC00' F000'        	call	_Port_GetQuad
  6912  0016' 0012               	return	
  6913  0018'                    __end_of_MXK_DIPSwitch:
  6914                           	opt stack 0
  6915                           tosu	equ	0xFFF
  6916                           tosh	equ	0xFFE
  6917                           tosl	equ	0xFFD
  6918                           pclath	equ	0xFFA
  6919                           tblptru	equ	0xFF8
  6920                           tblptrh	equ	0xFF7
  6921                           tblptrl	equ	0xFF6
  6922                           tablat	equ	0xFF5
  6923                           prodh	equ	0xFF4
  6924                           prodl	equ	0xFF3
  6925                           postinc0	equ	0xFEE
  6926                           wreg	equ	0xFE8
  6927                           indf1	equ	0xFE7
  6928                           postdec1	equ	0xFE5
  6929                           fsr1h	equ	0xFE2
  6930                           fsr1l	equ	0xFE1
  6931                           indf2	equ	0xFDF
  6932                           postinc2	equ	0xFDE
  6933                           postdec2	equ	0xFDD
  6934                           fsr2h	equ	0xFDA
  6935                           fsr2l	equ	0xFD9
  6936                           status	equ	0xFD8
  6937                           
  6938 ;; *************** function _HMI_DIPSwitch *****************
  6939 ;; Defined at:
  6940 ;;		line 47 in file "HMI.c"
  6941 ;; Parameters:    Size  Location     Type
  6942 ;;		None
  6943 ;; Auto vars:     Size  Location     Type
  6944 ;;		None
  6945 ;; Return value:  Size  Location     Type
  6946 ;;                  1    wreg      unsigned char 
  6947 ;; Registers used:
  6948 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6949 ;; Tracked objects:
  6950 ;;		On entry : 0/0
  6951 ;;		On exit  : 0/0
  6952 ;;		Unchanged: 0/0
  6953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6957 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6958 ;;Total ram usage:        0 bytes
  6959 ;; Hardware stack levels used:    1
  6960 ;; Hardware stack levels required when called:    8
  6961 ;; This function calls:
  6962 ;;		_Port_GetQuad
  6963 ;; This function is called by:
  6964 ;;		_HMI_Init
  6965 ;;		_Button_Poll
  6966 ;;		_mode2
  6967 ;;		_getMode
  6968 ;; This function uses a non-reentrant model
  6969 ;;
  6970                           
  6971                           	psect	text27
  6972  0000'                    __ptext27:
  6973                           	opt stack 0
  6974  0000'                    _HMI_DIPSwitch:
  6975                           	opt stack 19
  6976                           
  6977                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
  6978                           
  6979                           ;incstack = 0
  6980  0000' 0E00'              	movlw	low _PortE
  6981  0002' 0100               	movlb	0	; () banked
  6982  0004' 6F00'              	movwf	Port_GetQuad@pInput& (0+255),b
  6983  0006' 0E00'              	movlw	high _PortE
  6984  0008' 0100               	movlb	0	; () banked
  6985  000A' 6F00'              	movwf	(Port_GetQuad@pInput+1)& (0+255),b
  6986  000C' 0E00               	movlw	0
  6987  000E' 0100               	movlb	0	; () banked
  6988  0010' 6F00'              	movwf	Port_GetQuad@pQuad& (0+255),b
  6989  0012' EC00' F000'        	call	_Port_GetQuad	;wreg free
  6990  0016' 0012               	return	
  6991  0018'                    __end_of_HMI_DIPSwitch:
  6992                           	opt stack 0
  6993                           tosu	equ	0xFFF
  6994                           tosh	equ	0xFFE
  6995                           tosl	equ	0xFFD
  6996                           pclath	equ	0xFFA
  6997                           tblptru	equ	0xFF8
  6998                           tblptrh	equ	0xFF7
  6999                           tblptrl	equ	0xFF6
  7000                           tablat	equ	0xFF5
  7001                           prodh	equ	0xFF4
  7002                           prodl	equ	0xFF3
  7003                           postinc0	equ	0xFEE
  7004                           wreg	equ	0xFE8
  7005                           indf1	equ	0xFE7
  7006                           postdec1	equ	0xFE5
  7007                           fsr1h	equ	0xFE2
  7008                           fsr1l	equ	0xFE1
  7009                           indf2	equ	0xFDF
  7010                           postinc2	equ	0xFDE
  7011                           postdec2	equ	0xFDD
  7012                           fsr2h	equ	0xFDA
  7013                           fsr2l	equ	0xFD9
  7014                           status	equ	0xFD8
  7015                           
  7016 ;; *************** function _HMI_DownSwitch *****************
  7017 ;; Defined at:
  7018 ;;		line 42 in file "HMI.c"
  7019 ;; Parameters:    Size  Location     Type
  7020 ;;		None
  7021 ;; Auto vars:     Size  Location     Type
  7022 ;;		None
  7023 ;; Return value:  Size  Location     Type
  7024 ;;                  1    wreg      unsigned char 
  7025 ;; Registers used:
  7026 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7027 ;; Tracked objects:
  7028 ;;		On entry : 0/0
  7029 ;;		On exit  : 0/0
  7030 ;;		Unchanged: 0/0
  7031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7035 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7036 ;;Total ram usage:        0 bytes
  7037 ;; Hardware stack levels used:    1
  7038 ;; Hardware stack levels required when called:    8
  7039 ;; This function calls:
  7040 ;;		_Port_GetPin
  7041 ;; This function is called by:
  7042 ;;		_HMI_Init
  7043 ;;		_Button_Poll
  7044 ;;		_mode2
  7045 ;;		_getMode
  7046 ;; This function uses a non-reentrant model
  7047 ;;
  7048                           
  7049                           	psect	text28
  7050  0000'                    __ptext28:
  7051                           	opt stack 0
  7052  0000'                    _HMI_DownSwitch:
  7053                           	opt stack 19
  7054                           
  7055                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
  7056                           
  7057                           ;incstack = 0
  7058  0000' 0E00'              	movlw	low _PortE
  7059  0002' 0100               	movlb	0	; () banked
  7060  0004' 6F00'              	movwf	Port_GetPin@pInput& (0+255),b
  7061  0006' 0E00'              	movlw	high _PortE
  7062  0008' 0100               	movlb	0	; () banked
  7063  000A' 6F00'              	movwf	(Port_GetPin@pInput+1)& (0+255),b
  7064  000C' 0E06               	movlw	6
  7065  000E' 0100               	movlb	0	; () banked
  7066  0010' 6F00'              	movwf	Port_GetPin@pPin& (0+255),b
  7067  0012' EC00' F000'        	call	_Port_GetPin	;wreg free
  7068  0016' 0012               	return	
  7069  0018'                    __end_of_HMI_DownSwitch:
  7070                           	opt stack 0
  7071                           tosu	equ	0xFFF
  7072                           tosh	equ	0xFFE
  7073                           tosl	equ	0xFFD
  7074                           pclath	equ	0xFFA
  7075                           tblptru	equ	0xFF8
  7076                           tblptrh	equ	0xFF7
  7077                           tblptrl	equ	0xFF6
  7078                           tablat	equ	0xFF5
  7079                           prodh	equ	0xFF4
  7080                           prodl	equ	0xFF3
  7081                           postinc0	equ	0xFEE
  7082                           wreg	equ	0xFE8
  7083                           indf1	equ	0xFE7
  7084                           postdec1	equ	0xFE5
  7085                           fsr1h	equ	0xFE2
  7086                           fsr1l	equ	0xFE1
  7087                           indf2	equ	0xFDF
  7088                           postinc2	equ	0xFDE
  7089                           postdec2	equ	0xFDD
  7090                           fsr2h	equ	0xFDA
  7091                           fsr2l	equ	0xFD9
  7092                           status	equ	0xFD8
  7093                           
  7094 ;; *************** function _HMI_UpSwitch *****************
  7095 ;; Defined at:
  7096 ;;		line 37 in file "HMI.c"
  7097 ;; Parameters:    Size  Location     Type
  7098 ;;		None
  7099 ;; Auto vars:     Size  Location     Type
  7100 ;;		None
  7101 ;; Return value:  Size  Location     Type
  7102 ;;                  1    wreg      unsigned char 
  7103 ;; Registers used:
  7104 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7105 ;; Tracked objects:
  7106 ;;		On entry : 0/0
  7107 ;;		On exit  : 0/0
  7108 ;;		Unchanged: 0/0
  7109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7111 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7113 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7114 ;;Total ram usage:        0 bytes
  7115 ;; Hardware stack levels used:    1
  7116 ;; Hardware stack levels required when called:    8
  7117 ;; This function calls:
  7118 ;;		_Port_GetPin
  7119 ;; This function is called by:
  7120 ;;		_HMI_Init
  7121 ;;		_Button_Poll
  7122 ;;		_mode2
  7123 ;;		_getMode
  7124 ;; This function uses a non-reentrant model
  7125 ;;
  7126                           
  7127                           	psect	text29
  7128  0000'                    __ptext29:
  7129                           	opt stack 0
  7130  0000'                    _HMI_UpSwitch:
  7131                           	opt stack 21
  7132                           
  7133                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
  7134                           
  7135                           ;incstack = 0
  7136  0000' 0E00'              	movlw	low _PortE
  7137  0002' 0100               	movlb	0	; () banked
  7138  0004' 6F00'              	movwf	Port_GetPin@pInput& (0+255),b
  7139  0006' 0E00'              	movlw	high _PortE
  7140  0008' 0100               	movlb	0	; () banked
  7141  000A' 6F00'              	movwf	(Port_GetPin@pInput+1)& (0+255),b
  7142  000C' 0E07               	movlw	7
  7143  000E' 0100               	movlb	0	; () banked
  7144  0010' 6F00'              	movwf	Port_GetPin@pPin& (0+255),b
  7145  0012' EC00' F000'        	call	_Port_GetPin	;wreg free
  7146  0016' 0012               	return	
  7147  0018'                    __end_of_HMI_UpSwitch:
  7148                           	opt stack 0
  7149                           tosu	equ	0xFFF
  7150                           tosh	equ	0xFFE
  7151                           tosl	equ	0xFFD
  7152                           pclath	equ	0xFFA
  7153                           tblptru	equ	0xFF8
  7154                           tblptrh	equ	0xFF7
  7155                           tblptrl	equ	0xFF6
  7156                           tablat	equ	0xFF5
  7157                           prodh	equ	0xFF4
  7158                           prodl	equ	0xFF3
  7159                           postinc0	equ	0xFEE
  7160                           wreg	equ	0xFE8
  7161                           indf1	equ	0xFE7
  7162                           postdec1	equ	0xFE5
  7163                           fsr1h	equ	0xFE2
  7164                           fsr1l	equ	0xFE1
  7165                           indf2	equ	0xFDF
  7166                           postinc2	equ	0xFDE
  7167                           postdec2	equ	0xFDD
  7168                           fsr2h	equ	0xFDA
  7169                           fsr2l	equ	0xFD9
  7170                           status	equ	0xFD8
  7171                           
  7172 ;; *************** function _HMI_RightSwitch *****************
  7173 ;; Defined at:
  7174 ;;		line 32 in file "HMI.c"
  7175 ;; Parameters:    Size  Location     Type
  7176 ;;		None
  7177 ;; Auto vars:     Size  Location     Type
  7178 ;;		None
  7179 ;; Return value:  Size  Location     Type
  7180 ;;                  1    wreg      unsigned char 
  7181 ;; Registers used:
  7182 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7183 ;; Tracked objects:
  7184 ;;		On entry : 0/0
  7185 ;;		On exit  : 0/0
  7186 ;;		Unchanged: 0/0
  7187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7191 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7192 ;;Total ram usage:        0 bytes
  7193 ;; Hardware stack levels used:    1
  7194 ;; Hardware stack levels required when called:    8
  7195 ;; This function calls:
  7196 ;;		_Port_GetPin
  7197 ;; This function is called by:
  7198 ;;		_HMI_Init
  7199 ;;		_Button_Poll
  7200 ;;		_mode2
  7201 ;;		_getMode
  7202 ;; This function uses a non-reentrant model
  7203 ;;
  7204                           
  7205                           	psect	text30
  7206  0000'                    __ptext30:
  7207                           	opt stack 0
  7208  0000'                    _HMI_RightSwitch:
  7209                           	opt stack 21
  7210                           
  7211                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
  7212                           
  7213                           ;incstack = 0
  7214  0000' 0E00'              	movlw	low _PortE
  7215  0002' 0100               	movlb	0	; () banked
  7216  0004' 6F00'              	movwf	Port_GetPin@pInput& (0+255),b
  7217  0006' 0E00'              	movlw	high _PortE
  7218  0008' 0100               	movlb	0	; () banked
  7219  000A' 6F00'              	movwf	(Port_GetPin@pInput+1)& (0+255),b
  7220  000C' 0E04               	movlw	4
  7221  000E' 0100               	movlb	0	; () banked
  7222  0010' 6F00'              	movwf	Port_GetPin@pPin& (0+255),b
  7223  0012' EC00' F000'        	call	_Port_GetPin	;wreg free
  7224  0016' 0012               	return	
  7225  0018'                    __end_of_HMI_RightSwitch:
  7226                           	opt stack 0
  7227                           tosu	equ	0xFFF
  7228                           tosh	equ	0xFFE
  7229                           tosl	equ	0xFFD
  7230                           pclath	equ	0xFFA
  7231                           tblptru	equ	0xFF8
  7232                           tblptrh	equ	0xFF7
  7233                           tblptrl	equ	0xFF6
  7234                           tablat	equ	0xFF5
  7235                           prodh	equ	0xFF4
  7236                           prodl	equ	0xFF3
  7237                           postinc0	equ	0xFEE
  7238                           wreg	equ	0xFE8
  7239                           indf1	equ	0xFE7
  7240                           postdec1	equ	0xFE5
  7241                           fsr1h	equ	0xFE2
  7242                           fsr1l	equ	0xFE1
  7243                           indf2	equ	0xFDF
  7244                           postinc2	equ	0xFDE
  7245                           postdec2	equ	0xFDD
  7246                           fsr2h	equ	0xFDA
  7247                           fsr2l	equ	0xFD9
  7248                           status	equ	0xFD8
  7249                           
  7250 ;; *************** function _HMI_LeftSwitch *****************
  7251 ;; Defined at:
  7252 ;;		line 27 in file "HMI.c"
  7253 ;; Parameters:    Size  Location     Type
  7254 ;;		None
  7255 ;; Auto vars:     Size  Location     Type
  7256 ;;		None
  7257 ;; Return value:  Size  Location     Type
  7258 ;;                  1    wreg      unsigned char 
  7259 ;; Registers used:
  7260 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7261 ;; Tracked objects:
  7262 ;;		On entry : 0/0
  7263 ;;		On exit  : 0/0
  7264 ;;		Unchanged: 0/0
  7265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7269 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7270 ;;Total ram usage:        0 bytes
  7271 ;; Hardware stack levels used:    1
  7272 ;; Hardware stack levels required when called:    8
  7273 ;; This function calls:
  7274 ;;		_Port_GetPin
  7275 ;; This function is called by:
  7276 ;;		_HMI_Init
  7277 ;;		_Button_Poll
  7278 ;;		_mode2
  7279 ;;		_getMode
  7280 ;; This function uses a non-reentrant model
  7281 ;;
  7282                           
  7283                           	psect	text31
  7284  0000'                    __ptext31:
  7285                           	opt stack 0
  7286  0000'                    _HMI_LeftSwitch:
  7287                           	opt stack 19
  7288                           
  7289                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
  7290                           
  7291                           ;incstack = 0
  7292  0000' 0E00'              	movlw	low _PortE
  7293  0002' 0100               	movlb	0	; () banked
  7294  0004' 6F00'              	movwf	Port_GetPin@pInput& (0+255),b
  7295  0006' 0E00'              	movlw	high _PortE
  7296  0008' 0100               	movlb	0	; () banked
  7297  000A' 6F00'              	movwf	(Port_GetPin@pInput+1)& (0+255),b
  7298  000C' 0E05               	movlw	5
  7299  000E' 0100               	movlb	0	; () banked
  7300  0010' 6F00'              	movwf	Port_GetPin@pPin& (0+255),b
  7301  0012' EC00' F000'        	call	_Port_GetPin	;wreg free
  7302  0016' 0012               	return	
  7303  0018'                    __end_of_HMI_LeftSwitch:
  7304                           	opt stack 0
  7305                           tosu	equ	0xFFF
  7306                           tosh	equ	0xFFE
  7307                           tosl	equ	0xFFD
  7308                           pclath	equ	0xFFA
  7309                           tblptru	equ	0xFF8
  7310                           tblptrh	equ	0xFF7
  7311                           tblptrl	equ	0xFF6
  7312                           tablat	equ	0xFF5
  7313                           prodh	equ	0xFF4
  7314                           prodl	equ	0xFF3
  7315                           postinc0	equ	0xFEE
  7316                           wreg	equ	0xFE8
  7317                           indf1	equ	0xFE7
  7318                           postdec1	equ	0xFE5
  7319                           fsr1h	equ	0xFE2
  7320                           fsr1l	equ	0xFE1
  7321                           indf2	equ	0xFDF
  7322                           postinc2	equ	0xFDE
  7323                           postdec2	equ	0xFDD
  7324                           fsr2h	equ	0xFDA
  7325                           fsr2l	equ	0xFD9
  7326                           status	equ	0xFD8
  7327                           
  7328 ;; *************** function _MXK_TestButton *****************
  7329 ;; Defined at:
  7330 ;;		line 14 in file "Library/MXK.c"
  7331 ;; Parameters:    Size  Location     Type
  7332 ;;		None
  7333 ;; Auto vars:     Size  Location     Type
  7334 ;;		None
  7335 ;; Return value:  Size  Location     Type
  7336 ;;                  1    wreg      unsigned char 
  7337 ;; Registers used:
  7338 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7339 ;; Tracked objects:
  7340 ;;		On entry : 0/0
  7341 ;;		On exit  : 0/0
  7342 ;;		Unchanged: 0/0
  7343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7347 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7348 ;;Total ram usage:        0 bytes
  7349 ;; Hardware stack levels used:    1
  7350 ;; Hardware stack levels required when called:    8
  7351 ;; This function calls:
  7352 ;;		_Port_GetPin
  7353 ;; This function is called by:
  7354 ;;		_FunctInitButton
  7355 ;;		_Button_Poll
  7356 ;;		_mode2
  7357 ;;		_getMode
  7358 ;; This function uses a non-reentrant model
  7359 ;;
  7360                           
  7361                           	psect	text32
  7362  0000'                    __ptext32:
  7363                           	opt stack 0
  7364  0000'                    _MXK_TestButton:
  7365                           	opt stack 21
  7366                           
  7367                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
  7368                           
  7369                           ;incstack = 0
  7370  0000' 0E00'              	movlw	low _PortB
  7371  0002' 0100               	movlb	0	; () banked
  7372  0004' 6F00'              	movwf	Port_GetPin@pInput& (0+255),b
  7373  0006' 0E00'              	movlw	high _PortB
  7374  0008' 0100               	movlb	0	; () banked
  7375  000A' 6F00'              	movwf	(Port_GetPin@pInput+1)& (0+255),b
  7376  000C' 0E04               	movlw	4
  7377  000E' 0100               	movlb	0	; () banked
  7378  0010' 6F00'              	movwf	Port_GetPin@pPin& (0+255),b
  7379  0012' EC00' F000'        	call	_Port_GetPin	;wreg free
  7380  0016' 0012               	return	
  7381  0018'                    __end_of_MXK_TestButton:
  7382                           	opt stack 0
  7383                           tosu	equ	0xFFF
  7384                           tosh	equ	0xFFE
  7385                           tosl	equ	0xFFD
  7386                           pclath	equ	0xFFA
  7387                           tblptru	equ	0xFF8
  7388                           tblptrh	equ	0xFF7
  7389                           tblptrl	equ	0xFF6
  7390                           tablat	equ	0xFF5
  7391                           prodh	equ	0xFF4
  7392                           prodl	equ	0xFF3
  7393                           postinc0	equ	0xFEE
  7394                           wreg	equ	0xFE8
  7395                           indf1	equ	0xFE7
  7396                           postdec1	equ	0xFE5
  7397                           fsr1h	equ	0xFE2
  7398                           fsr1l	equ	0xFE1
  7399                           indf2	equ	0xFDF
  7400                           postinc2	equ	0xFDE
  7401                           postdec2	equ	0xFDD
  7402                           fsr2h	equ	0xFDA
  7403                           fsr2l	equ	0xFD9
  7404                           status	equ	0xFD8
  7405                           
  7406 ;; *************** function _Port_GetQuad *****************
  7407 ;; Defined at:
  7408 ;;		line 498 in file "Library/Port.c"
  7409 ;; Parameters:    Size  Location     Type
  7410 ;;  pInput          2    0[BANK0 ] const PTR struct Port
  7411 ;;		 -> PortE(10), PortD(10), 
  7412 ;;  pQuad           1    2[BANK0 ] enum E6776
  7413 ;; Auto vars:     Size  Location     Type
  7414 ;;  Output          1    5[BANK0 ] unsigned char 
  7415 ;; Return value:  Size  Location     Type
  7416 ;;                  1    wreg      unsigned char 
  7417 ;; Registers used:
  7418 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7419 ;; Tracked objects:
  7420 ;;		On entry : 0/0
  7421 ;;		On exit  : 0/0
  7422 ;;		Unchanged: 0/0
  7423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7424 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7425 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7426 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7427 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7428 ;;Total ram usage:        6 bytes
  7429 ;; Hardware stack levels used:    1
  7430 ;; Hardware stack levels required when called:    7
  7431 ;; This function calls:
  7432 ;;		Nothing
  7433 ;; This function is called by:
  7434 ;;		_HMI_DIPSwitch
  7435 ;;		_MXK_DIPSwitch
  7436 ;;		_Port_ToggleQuad
  7437 ;; This function uses a non-reentrant model
  7438 ;;
  7439                           
  7440                           	psect	text33
  7441  0000'                    __ptext33:
  7442                           	opt stack 0
  7443  0000'                    _Port_GetQuad:
  7444                           	opt stack 21
  7445                           
  7446                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
  7447                           
  7448                           ;incstack = 0
  7449  0000' 0100               	movlb	0	; () banked
  7450  0002' EE20 F006          	lfsr	2,6
  7451  0006' 5100'              	movf	Port_GetQuad@pInput& (0+255),w,b
  7452  0008' 26D9               	addwf	fsr2l,f,c
  7453  000A' 5100'              	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
  7454  000C' 22DA               	addwfc	fsr2h,f,c
  7455  000E' CFDE F003'         	movff	postinc2,??_Port_GetQuad
  7456  0012' CFDD F004'         	movff	postdec2,??_Port_GetQuad+1
  7457  0016' C003' FFD9         	movff	??_Port_GetQuad,fsr2l
  7458  001A' C004' FFDA         	movff	??_Port_GetQuad+1,fsr2h
  7459  001E' 50DF               	movf	indf2,w,c
  7460  0020' 0100               	movlb	0	; () banked
  7461  0022' 6F00'              	movwf	Port_GetQuad@Output& (0+255),b
  7462                           
  7463                           ; BSR set to: 0
  7464                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
  7465  0024' 0100               	movlb	0	; () banked
  7466  0026' 5100'              	movf	Port_GetQuad@pQuad& (0+255),w,b
  7467  0028' 0D04               	mullw	4
  7468  002A' 28F3               	incf	prodl,w,c
  7469  002C' 0100               	movlb	0	; () banked
  7470  002E' 6F00'              	movwf	??_Port_GetQuad& (0+255),b
  7471  0030' D003               	goto	u7260
  7472  0032'                    u7265:
  7473  0032' 0100               	movlb	0	; () banked
  7474  0034' 90D8               	bcf	status,0,c
  7475  0036' 3300'              	rrcf	Port_GetQuad@Output& (0+255),f,b
  7476  0038'                    u7260:
  7477  0038' 0100               	movlb	0	; () banked
  7478  003A' 2F00'              	decfsz	??_Port_GetQuad& (0+255),f,b
  7479  003C' D7FA               	goto	u7265
  7480                           
  7481                           ;Port.c: 502: Output &= 0xF;
  7482  003E' 0E0F               	movlw	15
  7483  0040' 0100               	movlb	0	; () banked
  7484  0042' 1700'              	andwf	Port_GetQuad@Output& (0+255),f,b
  7485                           
  7486                           ; BSR set to: 0
  7487                           ;Port.c: 503: return Output;
  7488  0044' 0100               	movlb	0	; () banked
  7489  0046' 5100'              	movf	Port_GetQuad@Output& (0+255),w,b
  7490  0048' 0012               	return	
  7491  004A'                    __end_of_Port_GetQuad:
  7492                           	opt stack 0
  7493                           tosu	equ	0xFFF
  7494                           tosh	equ	0xFFE
  7495                           tosl	equ	0xFFD
  7496                           pclath	equ	0xFFA
  7497                           tblptru	equ	0xFF8
  7498                           tblptrh	equ	0xFF7
  7499                           tblptrl	equ	0xFF6
  7500                           tablat	equ	0xFF5
  7501                           prodh	equ	0xFF4
  7502                           prodl	equ	0xFF3
  7503                           postinc0	equ	0xFEE
  7504                           wreg	equ	0xFE8
  7505                           indf1	equ	0xFE7
  7506                           postdec1	equ	0xFE5
  7507                           fsr1h	equ	0xFE2
  7508                           fsr1l	equ	0xFE1
  7509                           indf2	equ	0xFDF
  7510                           postinc2	equ	0xFDE
  7511                           postdec2	equ	0xFDD
  7512                           fsr2h	equ	0xFDA
  7513                           fsr2l	equ	0xFD9
  7514                           status	equ	0xFD8
  7515                           
  7516 ;; *************** function _Event_DIPSwitch *****************
  7517 ;; Defined at:
  7518 ;;		line 22 in file "Events.c"
  7519 ;; Parameters:    Size  Location     Type
  7520 ;;  pState          1    wreg     unsigned char 
  7521 ;; Auto vars:     Size  Location     Type
  7522 ;;  pState          1   25[BANK0 ] unsigned char 
  7523 ;;  Bar             1   26[BANK0 ] unsigned char 
  7524 ;; Return value:  Size  Location     Type
  7525 ;;                  1    wreg      void 
  7526 ;; Registers used:
  7527 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7528 ;; Tracked objects:
  7529 ;;		On entry : 0/0
  7530 ;;		On exit  : 0/0
  7531 ;;		Unchanged: 0/0
  7532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7534 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7536 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7537 ;;Total ram usage:        2 bytes
  7538 ;; Hardware stack levels used:    1
  7539 ;; Hardware stack levels required when called:   13
  7540 ;; This function calls:
  7541 ;;		_HMI_GetBar
  7542 ;;		_HMI_SetBar
  7543 ;;		_LED_Toggle
  7544 ;; This function is called by:
  7545 ;;		_FunctInitButton
  7546 ;;		_Button_Poll
  7547 ;; This function uses a non-reentrant model
  7548 ;;
  7549                           
  7550                           	psect	text34
  7551  0000'                    __ptext34:
  7552                           	opt stack 0
  7553  0000'                    _Event_DIPSwitch:
  7554                           	opt stack 14
  7555                           
  7556                           ; BSR set to: 0
  7557                           ;incstack = 0
  7558                           ;Event_DIPSwitch@pState stored from wreg
  7559  0000' 0100               	movlb	0	; () banked
  7560  0002' 6F00'              	movwf	Event_DIPSwitch@pState& (0+255),b
  7561                           
  7562                           ;Events.c: 24: UINT8 Bar = HMI_GetBar();
  7563  0004' EC00' F000'        	call	_HMI_GetBar	;wreg free
  7564  0008' 0100               	movlb	0	; () banked
  7565  000A' 6F00'              	movwf	Event_DIPSwitch@Bar& (0+255),b
  7566                           
  7567                           ; BSR set to: 0
  7568                           ;Events.c: 25: Bar &= 0x0F;
  7569  000C' 0E0F               	movlw	15
  7570  000E' 0100               	movlb	0	; () banked
  7571  0010' 1700'              	andwf	Event_DIPSwitch@Bar& (0+255),f,b
  7572                           
  7573                           ; BSR set to: 0
  7574                           ;Events.c: 26: pState <<= 4;
  7575  0012' 0100               	movlb	0	; () banked
  7576  0014' 3B00'              	swapf	Event_DIPSwitch@pState& (0+255),f,b
  7577  0016' 0EF0               	movlw	240
  7578  0018' 1700'              	andwf	Event_DIPSwitch@pState& (0+255),f,b
  7579                           
  7580                           ; BSR set to: 0
  7581                           ;Events.c: 29: HMI_SetBar(pState | Bar);
  7582  001A' 0100               	movlb	0	; () banked
  7583  001C' 5100'              	movf	Event_DIPSwitch@pState& (0+255),w,b
  7584  001E' 0100               	movlb	0	; () banked
  7585  0020' 1100'              	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
  7586  0022' EC00' F000'        	call	_HMI_SetBar
  7587                           
  7588                           ;Events.c: 32: LED_Toggle(eLED1);
  7589  0026' 0E00               	movlw	0
  7590  0028' EC00' F000'        	call	_LED_Toggle
  7591  002C' 0012               	return		;funcret
  7592  002E'                    __end_of_Event_DIPSwitch:
  7593                           	opt stack 0
  7594                           tosu	equ	0xFFF
  7595                           tosh	equ	0xFFE
  7596                           tosl	equ	0xFFD
  7597                           pclath	equ	0xFFA
  7598                           tblptru	equ	0xFF8
  7599                           tblptrh	equ	0xFF7
  7600                           tblptrl	equ	0xFF6
  7601                           tablat	equ	0xFF5
  7602                           prodh	equ	0xFF4
  7603                           prodl	equ	0xFF3
  7604                           postinc0	equ	0xFEE
  7605                           wreg	equ	0xFE8
  7606                           indf1	equ	0xFE7
  7607                           postdec1	equ	0xFE5
  7608                           fsr1h	equ	0xFE2
  7609                           fsr1l	equ	0xFE1
  7610                           indf2	equ	0xFDF
  7611                           postinc2	equ	0xFDE
  7612                           postdec2	equ	0xFDD
  7613                           fsr2h	equ	0xFDA
  7614                           fsr2l	equ	0xFD9
  7615                           status	equ	0xFD8
  7616                           
  7617 ;; *************** function _Event_NULL *****************
  7618 ;; Defined at:
  7619 ;;		line 9 in file "Events.c"
  7620 ;; Parameters:    Size  Location     Type
  7621 ;;  pState          1    wreg     unsigned char 
  7622 ;; Auto vars:     Size  Location     Type
  7623 ;;  pState          1    0[COMRAM] unsigned char 
  7624 ;; Return value:  Size  Location     Type
  7625 ;;                  1    wreg      void 
  7626 ;; Registers used:
  7627 ;;		wreg
  7628 ;; Tracked objects:
  7629 ;;		On entry : 0/0
  7630 ;;		On exit  : 0/0
  7631 ;;		Unchanged: 0/0
  7632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7634 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7636 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7637 ;;Total ram usage:        0 bytes
  7638 ;; Hardware stack levels used:    1
  7639 ;; Hardware stack levels required when called:    7
  7640 ;; This function calls:
  7641 ;;		Nothing
  7642 ;; This function is called by:
  7643 ;;		_HMI_Init
  7644 ;;		_Button_Poll
  7645 ;; This function uses a non-reentrant model
  7646 ;;
  7647                           
  7648                           	psect	text35
  7649  0000'                    __ptext35:
  7650                           	opt stack 0
  7651  0000'                    _Event_NULL:
  7652                           	opt stack 20
  7653                           
  7654                           ;incstack = 0
  7655  0000' 0012               	return		;funcret
  7656  0002'                    __end_of_Event_NULL:
  7657                           	opt stack 0
  7658                           tosu	equ	0xFFF
  7659                           tosh	equ	0xFFE
  7660                           tosl	equ	0xFFD
  7661                           pclath	equ	0xFFA
  7662                           tblptru	equ	0xFF8
  7663                           tblptrh	equ	0xFF7
  7664                           tblptrl	equ	0xFF6
  7665                           tablat	equ	0xFF5
  7666                           prodh	equ	0xFF4
  7667                           prodl	equ	0xFF3
  7668                           postinc0	equ	0xFEE
  7669                           wreg	equ	0xFE8
  7670                           indf1	equ	0xFE7
  7671                           postdec1	equ	0xFE5
  7672                           fsr1h	equ	0xFE2
  7673                           fsr1l	equ	0xFE1
  7674                           indf2	equ	0xFDF
  7675                           postinc2	equ	0xFDE
  7676                           postdec2	equ	0xFDD
  7677                           fsr2h	equ	0xFDA
  7678                           fsr2l	equ	0xFD9
  7679                           status	equ	0xFD8
  7680                           
  7681 ;; *************** function _Event_TestButton *****************
  7682 ;; Defined at:
  7683 ;;		line 52 in file "Events.c"
  7684 ;; Parameters:    Size  Location     Type
  7685 ;;  pState          1    wreg     unsigned char 
  7686 ;; Auto vars:     Size  Location     Type
  7687 ;;  pState          1   25[BANK0 ] unsigned char 
  7688 ;; Return value:  Size  Location     Type
  7689 ;;                  1    wreg      void 
  7690 ;; Registers used:
  7691 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7692 ;; Tracked objects:
  7693 ;;		On entry : 0/0
  7694 ;;		On exit  : 0/0
  7695 ;;		Unchanged: 0/0
  7696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7698 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7700 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7701 ;;Total ram usage:        1 bytes
  7702 ;; Hardware stack levels used:    1
  7703 ;; Hardware stack levels required when called:   13
  7704 ;; This function calls:
  7705 ;;		_HMI_SetButton
  7706 ;;		_HMI_SetNumber
  7707 ;;		_LED_Toggle
  7708 ;; This function is called by:
  7709 ;;		_FunctInitButton
  7710 ;;		_Button_Poll
  7711 ;; This function uses a non-reentrant model
  7712 ;;
  7713                           
  7714                           	psect	text36
  7715  0000'                    __ptext36:
  7716                           	opt stack 0
  7717  0000'                    _Event_TestButton:
  7718                           	opt stack 14
  7719                           
  7720                           ;incstack = 0
  7721                           ;Event_TestButton@pState stored from wreg
  7722  0000' 0100               	movlb	0	; () banked
  7723  0002' 6F00'              	movwf	Event_TestButton@pState& (0+255),b
  7724                           
  7725                           ;Events.c: 56: static UINT8 j = 0;
  7726                           ;Events.c: 60: if (pState == 0)
  7727  0004' 0100               	movlb	0	; () banked
  7728  0006' 5100'              	movf	Event_TestButton@pState& (0+255),w,b
  7729  0008' 0100               	movlb	0	; () banked
  7730  000A' A4D8               	btfss	status,2,c
  7731  000C' D013               	goto	l1873
  7732                           
  7733                           ; BSR set to: 0
  7734                           ;Events.c: 61: {
  7735                           ;Events.c: 62: j++;
  7736  000E' 0100               	movlb	0	; () banked
  7737  0010' 2B00'              	incf	Event_TestButton@j& (0+255),f,b
  7738                           
  7739                           ; BSR set to: 0
  7740                           ;Events.c: 63: val += j;
  7741  0012' 0100               	movlb	0	; () banked
  7742  0014' 5100'              	movf	Event_TestButton@j& (0+255),w,b
  7743  0016' 0100               	movlb	0	; () banked
  7744  0018' 2700'              	addwf	_val& (0+255),f,b
  7745  001A' 0E00               	movlw	0
  7746  001C' 2300'              	addwfc	(_val+1)& (0+255),f,b
  7747                           
  7748                           ; BSR set to: 0
  7749                           ;Events.c: 64: HMI_SetNumber( val );
  7750  001E' C021' F016'        	movff	_val,HMI_SetNumber@pInput
  7751  0022' C022' F017'        	movff	_val+1,HMI_SetNumber@pInput+1
  7752  0026' EC00' F000'        	call	_HMI_SetNumber	;wreg free
  7753                           
  7754                           ;Events.c: 67: HMI_SetButton( j & 3 );
  7755  002A' 0100               	movlb	0	; () banked
  7756  002C' 5100'              	movf	Event_TestButton@j& (0+255),w,b
  7757  002E' 0B03               	andlw	3
  7758  0030' EC00' F000'        	call	_HMI_SetButton
  7759  0034'                    l1873:
  7760                           
  7761                           ;Events.c: 68: }
  7762                           ;Events.c: 72: LED_Toggle(eLED1);
  7763  0034' 0E00               	movlw	0
  7764  0036' EC00' F000'        	call	_LED_Toggle
  7765  003A' 0012               	return		;funcret
  7766  003C'                    __end_of_Event_TestButton:
  7767                           	opt stack 0
  7768                           tosu	equ	0xFFF
  7769                           tosh	equ	0xFFE
  7770                           tosl	equ	0xFFD
  7771                           pclath	equ	0xFFA
  7772                           tblptru	equ	0xFF8
  7773                           tblptrh	equ	0xFF7
  7774                           tblptrl	equ	0xFF6
  7775                           tablat	equ	0xFF5
  7776                           prodh	equ	0xFF4
  7777                           prodl	equ	0xFF3
  7778                           postinc0	equ	0xFEE
  7779                           wreg	equ	0xFE8
  7780                           indf1	equ	0xFE7
  7781                           postdec1	equ	0xFE5
  7782                           fsr1h	equ	0xFE2
  7783                           fsr1l	equ	0xFE1
  7784                           indf2	equ	0xFDF
  7785                           postinc2	equ	0xFDE
  7786                           postdec2	equ	0xFDD
  7787                           fsr2h	equ	0xFDA
  7788                           fsr2l	equ	0xFD9
  7789                           status	equ	0xFD8
  7790                           
  7791 ;; *************** function _HMI_SetNumber *****************
  7792 ;; Defined at:
  7793 ;;		line 221 in file "HMI.c"
  7794 ;; Parameters:    Size  Location     Type
  7795 ;;  pInput          2   22[BANK0 ] int 
  7796 ;; Auto vars:     Size  Location     Type
  7797 ;;		None
  7798 ;; Return value:  Size  Location     Type
  7799 ;;                  1    wreg      void 
  7800 ;; Registers used:
  7801 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  7802 ;; Tracked objects:
  7803 ;;		On entry : 0/0
  7804 ;;		On exit  : 0/0
  7805 ;;		Unchanged: 0/0
  7806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7807 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7810 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7811 ;;Total ram usage:        2 bytes
  7812 ;; Hardware stack levels used:    1
  7813 ;; Hardware stack levels required when called:    9
  7814 ;; This function calls:
  7815 ;;		_HMI_SetSegments
  7816 ;;		_itos
  7817 ;; This function is called by:
  7818 ;;		_Event_TestButton
  7819 ;;		_Event_HMI_UpButton
  7820 ;;		_Event_HMI_DownButton
  7821 ;; This function uses a non-reentrant model
  7822 ;;
  7823                           
  7824                           	psect	text37
  7825  0000'                    __ptext37:
  7826                           	opt stack 0
  7827  0000'                    _HMI_SetNumber:
  7828                           	opt stack 17
  7829                           
  7830                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
  7831                           
  7832                           ;incstack = 0
  7833  0000' C016' F00C'        	movff	HMI_SetNumber@pInput,itos@input
  7834  0004' C017' F00D'        	movff	HMI_SetNumber@pInput+1,itos@input+1
  7835  0008' 0E00'              	movlw	low _HMIBoard
  7836  000A' 0100               	movlb	0	; () banked
  7837  000C' 6F00'              	movwf	itos@destination& (0+255),b
  7838  000E' 0E00'              	movlw	high _HMIBoard
  7839  0010' 0100               	movlb	0	; () banked
  7840  0012' 6F00'              	movwf	(itos@destination+1)& (0+255),b
  7841  0014' EC00' F000'        	call	_itos	;wreg free
  7842                           
  7843                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
  7844  0018' 0E00'              	movlw	low _HMIBoard
  7845  001A' 0100               	movlb	0	; () banked
  7846  001C' 6F00'              	movwf	HMI_SetSegments@pString& (0+255),b
  7847  001E' 0E00'              	movlw	high _HMIBoard
  7848  0020' 0100               	movlb	0	; () banked
  7849  0022' 6F00'              	movwf	(HMI_SetSegments@pString+1)& (0+255),b
  7850  0024' EC00' F000'        	call	_HMI_SetSegments	;wreg free
  7851  0028' 0012               	return		;funcret
  7852  002A'                    __end_of_HMI_SetNumber:
  7853                           	opt stack 0
  7854                           tosu	equ	0xFFF
  7855                           tosh	equ	0xFFE
  7856                           tosl	equ	0xFFD
  7857                           pclath	equ	0xFFA
  7858                           tblptru	equ	0xFF8
  7859                           tblptrh	equ	0xFF7
  7860                           tblptrl	equ	0xFF6
  7861                           tablat	equ	0xFF5
  7862                           prodh	equ	0xFF4
  7863                           prodl	equ	0xFF3
  7864                           postinc0	equ	0xFEE
  7865                           wreg	equ	0xFE8
  7866                           indf1	equ	0xFE7
  7867                           postdec1	equ	0xFE5
  7868                           fsr1h	equ	0xFE2
  7869                           fsr1l	equ	0xFE1
  7870                           indf2	equ	0xFDF
  7871                           postinc2	equ	0xFDE
  7872                           postdec2	equ	0xFDD
  7873                           fsr2h	equ	0xFDA
  7874                           fsr2l	equ	0xFD9
  7875                           status	equ	0xFD8
  7876                           
  7877 ;; *************** function _itos *****************
  7878 ;; Defined at:
  7879 ;;		line 369 in file "Library/Types.c"
  7880 ;; Parameters:    Size  Location     Type
  7881 ;;  input           2   12[BANK0 ] unsigned short 
  7882 ;;  destination     2   14[BANK0 ] PTR unsigned char 
  7883 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  7884 ;; Auto vars:     Size  Location     Type
  7885 ;;  Out             2   20[BANK0 ] unsigned short 
  7886 ;;  Length          2   18[BANK0 ] unsigned short 
  7887 ;;  Data            2   16[BANK0 ] PTR unsigned char 
  7888 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  7889 ;; Return value:  Size  Location     Type
  7890 ;;                  1    wreg      void 
  7891 ;; Registers used:
  7892 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  7893 ;; Tracked objects:
  7894 ;;		On entry : 0/0
  7895 ;;		On exit  : 0/0
  7896 ;;		Unchanged: 0/0
  7897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7898 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7899 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7901 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7902 ;;Total ram usage:       10 bytes
  7903 ;; Hardware stack levels used:    1
  7904 ;; Hardware stack levels required when called:    8
  7905 ;; This function calls:
  7906 ;;		___lwdiv
  7907 ;;		___lwmod
  7908 ;;		_reverse
  7909 ;; This function is called by:
  7910 ;;		_HMI_SetNumber
  7911 ;; This function uses a non-reentrant model
  7912 ;;
  7913                           
  7914                           	psect	text38
  7915  0000'                    __ptext38:
  7916                           	opt stack 0
  7917  0000'                    _itos:
  7918                           	opt stack 17
  7919                           
  7920                           ;Types.c: 371: UINT16 Out = input;
  7921                           
  7922                           ;incstack = 0
  7923  0000' C00C' F014'        	movff	itos@input,itos@Out
  7924  0004' C00D' F015'        	movff	itos@input+1,itos@Out+1
  7925                           
  7926                           ;Types.c: 372: UINT16 Length = 0;
  7927  0008' 0E00               	movlw	0
  7928  000A' 0100               	movlb	0	; () banked
  7929  000C' 6F00'              	movwf	(itos@Length+1)& (0+255),b
  7930  000E' 0E00               	movlw	0
  7931  0010' 6F00'              	movwf	itos@Length& (0+255),b
  7932                           
  7933                           ; BSR set to: 0
  7934                           ;Types.c: 373: char *Data = destination;
  7935  0012' C00E' F010'        	movff	itos@destination,itos@Data
  7936  0016' C00F' F011'        	movff	itos@destination+1,itos@Data+1
  7937                           
  7938                           ; BSR set to: 0
  7939                           ;Types.c: 374: if(Out == 0)
  7940  001A' 0100               	movlb	0	; () banked
  7941  001C' 5100'              	movf	itos@Out& (0+255),w,b
  7942  001E' 0100               	movlb	0	; () banked
  7943  0020' 1100'              	iorwf	(itos@Out+1)& (0+255),w,b
  7944  0022' A4D8               	btfss	status,2,c
  7945  0024' D034               	goto	l929
  7946                           
  7947                           ; BSR set to: 0
  7948                           ;Types.c: 375: {
  7949                           ;Types.c: 376: Data[0] = (UINT16)'0';
  7950  0026' C010' FFD9         	movff	itos@Data,fsr2l
  7951  002A' C011' FFDA         	movff	itos@Data+1,fsr2h
  7952  002E' 0E30               	movlw	48
  7953  0030' 6EDF               	movwf	indf2,c
  7954                           
  7955                           ; BSR set to: 0
  7956                           ;Types.c: 377: Length = 1;
  7957  0032' 0E00               	movlw	0
  7958  0034' 0100               	movlb	0	; () banked
  7959  0036' 6F00'              	movwf	(itos@Length+1)& (0+255),b
  7960  0038' 0E01               	movlw	1
  7961  003A' 6F00'              	movwf	itos@Length& (0+255),b
  7962                           
  7963                           ;Types.c: 378: }
  7964  003C' D040               	goto	l928
  7965  003E'                    
  7966                           ; BSR set to: 0
  7967                           ;Types.c: 382: {
  7968                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
  7969                           
  7970                           ; BSR set to: 0
  7971  003E' C014' F007'        	movff	itos@Out,___lwmod@dividend
  7972  0042' C015' F008'        	movff	itos@Out+1,___lwmod@dividend+1
  7973  0046' 0E00               	movlw	0
  7974  0048' 0100               	movlb	0	; () banked
  7975  004A' 6F00'              	movwf	(___lwmod@divisor+1)& (0+255),b
  7976  004C' 0E0A               	movlw	10
  7977  004E' 6F00'              	movwf	___lwmod@divisor& (0+255),b
  7978  0050' EC00' F000'        	call	___lwmod	;wreg free
  7979  0054' 0100               	movlb	0	; () banked
  7980  0056' 5100'              	movf	?___lwmod& (0+255),w,b
  7981  0058' 0F30               	addlw	48
  7982  005A' C010' FFD9         	movff	itos@Data,fsr2l
  7983  005E' C011' FFDA         	movff	itos@Data+1,fsr2h
  7984  0062' 6EDF               	movwf	indf2,c
  7985                           
  7986                           ; BSR set to: 0
  7987                           ;Types.c: 384: Out /= 10;
  7988  0064' C014' F000'        	movff	itos@Out,___lwdiv@dividend
  7989  0068' C015' F001'        	movff	itos@Out+1,___lwdiv@dividend+1
  7990  006C' 0E00               	movlw	0
  7991  006E' 0100               	movlb	0	; () banked
  7992  0070' 6F00'              	movwf	(___lwdiv@divisor+1)& (0+255),b
  7993  0072' 0E0A               	movlw	10
  7994  0074' 6F00'              	movwf	___lwdiv@divisor& (0+255),b
  7995  0076' EC00' F000'        	call	___lwdiv	;wreg free
  7996  007A' C000' F014'        	movff	?___lwdiv,itos@Out
  7997  007E' C001' F015'        	movff	?___lwdiv+1,itos@Out+1
  7998                           
  7999                           ;Types.c: 385: Length ++;
  8000  0082' 0100               	movlb	0	; () banked
  8001  0084' 4B00'              	infsnz	itos@Length& (0+255),f,b
  8002  0086' 2B00'              	incf	(itos@Length+1)& (0+255),f,b
  8003                           
  8004                           ; BSR set to: 0
  8005                           ;Types.c: 386: Data++;
  8006  0088' 0100               	movlb	0	; () banked
  8007  008A' 4B00'              	infsnz	itos@Data& (0+255),f,b
  8008  008C' 2B00'              	incf	(itos@Data+1)& (0+255),f,b
  8009  008E'                    l929:
  8010                           
  8011                           ; BSR set to: 0
  8012                           
  8013                           ; BSR set to: 0
  8014  008E' 0100               	movlb	0	; () banked
  8015  0090' 5100'              	movf	itos@Out& (0+255),w,b
  8016  0092' 0100               	movlb	0	; () banked
  8017  0094' 1100'              	iorwf	(itos@Out+1)& (0+255),w,b
  8018  0096' B4D8               	btfsc	status,2,c
  8019  0098' D008               	goto	u7000
  8020                           
  8021                           ; BSR set to: 0
  8022  009A' 0100               	movlb	0	; () banked
  8023  009C' 5100'              	movf	(itos@Length+1)& (0+255),w,b
  8024  009E' E105               	bnz	l10951
  8025  00A0' 0E06               	movlw	6
  8026  00A2' 0100               	movlb	0	; () banked
  8027  00A4' 5D00'              	subwf	itos@Length& (0+255),w,b
  8028  00A6' A0D8               	btfss	status,0,c
  8029  00A8' D7CA               	goto	l930
  8030  00AA'                    u7000:
  8031  00AA'                    l10951:
  8032                           
  8033                           ; BSR set to: 0
  8034                           ;Types.c: 387: }
  8035                           ;Types.c: 388: reverse(destination, Length);
  8036  00AA' C00E' F000'        	movff	itos@destination,reverse@input
  8037  00AE' C00F' F001'        	movff	itos@destination+1,reverse@input+1
  8038  00B2' C012' F002'        	movff	itos@Length,reverse@length
  8039  00B6' C013' F003'        	movff	itos@Length+1,reverse@length+1
  8040  00BA' EC00' F000'        	call	_reverse	;wreg free
  8041  00BE'                    l928:
  8042                           
  8043                           ;Types.c: 389: }
  8044                           ;Types.c: 390: destination[Length] = '\0';
  8045  00BE' 0100               	movlb	0	; () banked
  8046  00C0' 5100'              	movf	itos@Length& (0+255),w,b
  8047  00C2' 0100               	movlb	0	; () banked
  8048  00C4' 2500'              	addwf	itos@destination& (0+255),w,b
  8049  00C6' 6ED9               	movwf	fsr2l,c
  8050  00C8' 0100               	movlb	0	; () banked
  8051  00CA' 5100'              	movf	(itos@Length+1)& (0+255),w,b
  8052  00CC' 0100               	movlb	0	; () banked
  8053  00CE' 2100'              	addwfc	(itos@destination+1)& (0+255),w,b
  8054  00D0' 6EDA               	movwf	fsr2h,c
  8055  00D2' 0E00               	movlw	0
  8056  00D4' 6EDF               	movwf	indf2,c
  8057                           
  8058                           ; BSR set to: 0
  8059  00D6' 0012               	return		;funcret
  8060  00D8'                    __end_of_itos:
  8061                           	opt stack 0
  8062                           tosu	equ	0xFFF
  8063                           tosh	equ	0xFFE
  8064                           tosl	equ	0xFFD
  8065                           pclath	equ	0xFFA
  8066                           tblptru	equ	0xFF8
  8067                           tblptrh	equ	0xFF7
  8068                           tblptrl	equ	0xFF6
  8069                           tablat	equ	0xFF5
  8070                           prodh	equ	0xFF4
  8071                           prodl	equ	0xFF3
  8072                           postinc0	equ	0xFEE
  8073                           wreg	equ	0xFE8
  8074                           indf1	equ	0xFE7
  8075                           postdec1	equ	0xFE5
  8076                           fsr1h	equ	0xFE2
  8077                           fsr1l	equ	0xFE1
  8078                           indf2	equ	0xFDF
  8079                           postinc2	equ	0xFDE
  8080                           postdec2	equ	0xFDD
  8081                           fsr2h	equ	0xFDA
  8082                           fsr2l	equ	0xFD9
  8083                           status	equ	0xFD8
  8084                           
  8085 ;; *************** function _reverse *****************
  8086 ;; Defined at:
  8087 ;;		line 357 in file "Library/Types.c"
  8088 ;; Parameters:    Size  Location     Type
  8089 ;;  input           2    0[BANK0 ] PTR unsigned char 
  8090 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  8091 ;;  length          2    2[BANK0 ] unsigned short 
  8092 ;; Auto vars:     Size  Location     Type
  8093 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
  8094 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  8095 ;;  tempVar         1    4[BANK0 ] unsigned char 
  8096 ;; Return value:  Size  Location     Type
  8097 ;;                  1    wreg      void 
  8098 ;; Registers used:
  8099 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  8100 ;; Tracked objects:
  8101 ;;		On entry : 0/0
  8102 ;;		On exit  : 0/0
  8103 ;;		Unchanged: 0/0
  8104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8105 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8106 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8108 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8109 ;;Total ram usage:        7 bytes
  8110 ;; Hardware stack levels used:    1
  8111 ;; Hardware stack levels required when called:    7
  8112 ;; This function calls:
  8113 ;;		Nothing
  8114 ;; This function is called by:
  8115 ;;		_itos
  8116 ;; This function uses a non-reentrant model
  8117 ;;
  8118                           
  8119                           	psect	text39
  8120  0000'                    __ptext39:
  8121                           	opt stack 0
  8122  0000'                    _reverse:
  8123                           	opt stack 17
  8124                           
  8125                           ;Types.c: 359: char tempVar,
  8126                           ;Types.c: 360: *iterator = input + length;
  8127                           
  8128                           ; BSR set to: 0
  8129                           ;incstack = 0
  8130  0000' 0100               	movlb	0	; () banked
  8131  0002' 5100'              	movf	reverse@length& (0+255),w,b
  8132  0004' 0100               	movlb	0	; () banked
  8133  0006' 2500'              	addwf	reverse@input& (0+255),w,b
  8134  0008' 0100               	movlb	0	; () banked
  8135  000A' 6F00'              	movwf	reverse@iterator& (0+255),b
  8136  000C' 0100               	movlb	0	; () banked
  8137  000E' 5100'              	movf	(reverse@length+1)& (0+255),w,b
  8138  0010' 0100               	movlb	0	; () banked
  8139  0012' 2100'              	addwfc	(reverse@input+1)& (0+255),w,b
  8140  0014' 0100               	movlb	0	; () banked
  8141  0016' 6F00'              	movwf	(reverse@iterator+1)& (0+255),b
  8142                           
  8143                           ;Types.c: 362: while ( --iterator > input )
  8144  0018' D01A               	goto	l921
  8145  001A'                    
  8146                           ; BSR set to: 0
  8147                           ;Types.c: 363: {
  8148                           ;Types.c: 364: tempVar = *input;
  8149                           
  8150                           ; BSR set to: 0
  8151  001A' C000' FFD9         	movff	reverse@input,fsr2l
  8152  001E' C001' FFDA         	movff	reverse@input+1,fsr2h
  8153  0022' 50DF               	movf	indf2,w,c
  8154  0024' 0100               	movlb	0	; () banked
  8155  0026' 6F00'              	movwf	reverse@tempVar& (0+255),b
  8156                           
  8157                           ; BSR set to: 0
  8158                           ;Types.c: 365: *input++=*iterator;
  8159  0028' C005' FFD9         	movff	reverse@iterator,fsr2l
  8160  002C' C006' FFDA         	movff	reverse@iterator+1,fsr2h
  8161  0030' C000' FFE1         	movff	reverse@input,fsr1l
  8162  0034' C001' FFE2         	movff	reverse@input+1,fsr1h
  8163  0038' CFDF FFE7          	movff	indf2,indf1
  8164                           
  8165                           ; BSR set to: 0
  8166  003C' 0100               	movlb	0	; () banked
  8167  003E' 4B00'              	infsnz	reverse@input& (0+255),f,b
  8168  0040' 2B00'              	incf	(reverse@input+1)& (0+255),f,b
  8169                           
  8170                           ; BSR set to: 0
  8171                           ;Types.c: 366: *iterator=tempVar;
  8172  0042' C005' FFD9         	movff	reverse@iterator,fsr2l
  8173  0046' C006' FFDA         	movff	reverse@iterator+1,fsr2h
  8174  004A' C004' FFDF         	movff	reverse@tempVar,indf2
  8175  004E'                    l921:
  8176                           
  8177                           ; BSR set to: 0
  8178                           
  8179                           ; BSR set to: 0
  8180  004E' 0100               	movlb	0	; () banked
  8181  0050' 0700'              	decf	reverse@iterator& (0+255),f,b
  8182  0052' A0D8               	btfss	status,0,c
  8183  0054' 0700'              	decf	(reverse@iterator+1)& (0+255),f,b
  8184  0056' 0100               	movlb	0	; () banked
  8185  0058' 5100'              	movf	reverse@iterator& (0+255),w,b
  8186  005A' 0100               	movlb	0	; () banked
  8187  005C' 5D00'              	subwf	reverse@input& (0+255),w,b
  8188  005E' 0100               	movlb	0	; () banked
  8189  0060' 5100'              	movf	(reverse@iterator+1)& (0+255),w,b
  8190  0062' 0100               	movlb	0	; () banked
  8191  0064' 5900'              	subwfb	(reverse@input+1)& (0+255),w,b
  8192  0066' B0D8               	btfsc	status,0,c
  8193  0068' 0012               	return	
  8194  006A' D7D7               	goto	l922
  8195  006C'                    __end_of_reverse:
  8196                           	opt stack 0
  8197                           tosu	equ	0xFFF
  8198                           tosh	equ	0xFFE
  8199                           tosl	equ	0xFFD
  8200                           pclath	equ	0xFFA
  8201                           tblptru	equ	0xFF8
  8202                           tblptrh	equ	0xFF7
  8203                           tblptrl	equ	0xFF6
  8204                           tablat	equ	0xFF5
  8205                           prodh	equ	0xFF4
  8206                           prodl	equ	0xFF3
  8207                           postinc0	equ	0xFEE
  8208                           wreg	equ	0xFE8
  8209                           indf1	equ	0xFE7
  8210                           postdec1	equ	0xFE5
  8211                           fsr1h	equ	0xFE2
  8212                           fsr1l	equ	0xFE1
  8213                           indf2	equ	0xFDF
  8214                           postinc2	equ	0xFDE
  8215                           postdec2	equ	0xFDD
  8216                           fsr2h	equ	0xFDA
  8217                           fsr2l	equ	0xFD9
  8218                           status	equ	0xFD8
  8219                           
  8220 ;; *************** function ___lwmod *****************
  8221 ;; Defined at:
  8222 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
  8223 ;; Parameters:    Size  Location     Type
  8224 ;;  dividend        2    7[BANK0 ] unsigned int 
  8225 ;;  divisor         2    9[BANK0 ] unsigned int 
  8226 ;; Auto vars:     Size  Location     Type
  8227 ;;  counter         1   11[BANK0 ] unsigned char 
  8228 ;; Return value:  Size  Location     Type
  8229 ;;                  2    7[BANK0 ] unsigned int 
  8230 ;; Registers used:
  8231 ;;		wreg, status,2, status,0
  8232 ;; Tracked objects:
  8233 ;;		On entry : 0/0
  8234 ;;		On exit  : 0/0
  8235 ;;		Unchanged: 0/0
  8236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8237 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8238 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8240 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8241 ;;Total ram usage:        5 bytes
  8242 ;; Hardware stack levels used:    1
  8243 ;; Hardware stack levels required when called:    7
  8244 ;; This function calls:
  8245 ;;		Nothing
  8246 ;; This function is called by:
  8247 ;;		_itos
  8248 ;;		_printf
  8249 ;; This function uses a non-reentrant model
  8250 ;;
  8251                           
  8252                           	psect	text40
  8253  0000'                    __ptext40:
  8254                           	opt stack 0
  8255  0000'                    ___lwmod:
  8256                           	opt stack 21
  8257                           
  8258                           ; BSR set to: 0
  8259                           ;incstack = 0
  8260  0000' 0100               	movlb	0	; () banked
  8261  0002' 5100'              	movf	___lwmod@divisor& (0+255),w,b
  8262  0004' 0100               	movlb	0	; () banked
  8263  0006' 1100'              	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  8264  0008' B4D8               	btfsc	status,2,c
  8265  000A' D026               	goto	l2764
  8266                           
  8267                           ; BSR set to: 0
  8268  000C' 0E01               	movlw	1
  8269  000E' 0100               	movlb	0	; () banked
  8270  0010' 6F00'              	movwf	___lwmod@counter& (0+255),b
  8271  0012' D006               	goto	l2759
  8272  0014'                    
  8273                           ; BSR set to: 0
  8274                           
  8275                           ; BSR set to: 0
  8276  0014' 0100               	movlb	0	; () banked
  8277  0016' 90D8               	bcf	status,0,c
  8278  0018' 3700'              	rlcf	___lwmod@divisor& (0+255),f,b
  8279  001A' 3700'              	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  8280  001C' 0100               	movlb	0	; () banked
  8281  001E' 2B00'              	incf	___lwmod@counter& (0+255),f,b
  8282  0020'                    l2759:
  8283                           
  8284                           ; BSR set to: 0
  8285                           
  8286                           ; BSR set to: 0
  8287  0020' 0100               	movlb	0	; () banked
  8288  0022' AF00'              	btfss	(___lwmod@divisor+1)& (0+255),7,b
  8289  0024' D7F7               	goto	l2760
  8290  0026'                    u6910:
  8291                           
  8292                           ; BSR set to: 0
  8293                           
  8294                           ; BSR set to: 0
  8295                           
  8296                           ; BSR set to: 0
  8297  0026' 0100               	movlb	0	; () banked
  8298  0028' 5100'              	movf	___lwmod@divisor& (0+255),w,b
  8299  002A' 0100               	movlb	0	; () banked
  8300  002C' 5D00'              	subwf	___lwmod@dividend& (0+255),w,b
  8301  002E' 0100               	movlb	0	; () banked
  8302  0030' 5100'              	movf	(___lwmod@divisor+1)& (0+255),w,b
  8303  0032' 0100               	movlb	0	; () banked
  8304  0034' 5900'              	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  8305  0036' A0D8               	btfss	status,0,c
  8306  0038' D008               	goto	l2763
  8307                           
  8308                           ; BSR set to: 0
  8309  003A' 0100               	movlb	0	; () banked
  8310  003C' 5100'              	movf	___lwmod@divisor& (0+255),w,b
  8311  003E' 0100               	movlb	0	; () banked
  8312  0040' 5F00'              	subwf	___lwmod@dividend& (0+255),f,b
  8313  0042' 0100               	movlb	0	; () banked
  8314  0044' 5100'              	movf	(___lwmod@divisor+1)& (0+255),w,b
  8315  0046' 0100               	movlb	0	; () banked
  8316  0048' 5B00'              	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  8317  004A'                    l2763:
  8318                           
  8319                           ; BSR set to: 0
  8320                           
  8321                           ; BSR set to: 0
  8322  004A' 0100               	movlb	0	; () banked
  8323  004C' 90D8               	bcf	status,0,c
  8324  004E' 3300'              	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  8325  0050' 3300'              	rrcf	___lwmod@divisor& (0+255),f,b
  8326                           
  8327                           ; BSR set to: 0
  8328  0052' 0100               	movlb	0	; () banked
  8329  0054' 2F00'              	decfsz	___lwmod@counter& (0+255),f,b
  8330  0056' D7E7               	goto	u6910
  8331  0058'                    l2764:
  8332                           
  8333                           ; BSR set to: 0
  8334                           
  8335                           ; BSR set to: 0
  8336  0058' C007' F007'        	movff	___lwmod@dividend,?___lwmod
  8337  005C' C008' F008'        	movff	___lwmod@dividend+1,?___lwmod+1
  8338                           
  8339                           ; BSR set to: 0
  8340  0060' 0012               	return		;funcret
  8341  0062'                    __end_of___lwmod:
  8342                           	opt stack 0
  8343                           tosu	equ	0xFFF
  8344                           tosh	equ	0xFFE
  8345                           tosl	equ	0xFFD
  8346                           pclath	equ	0xFFA
  8347                           tblptru	equ	0xFF8
  8348                           tblptrh	equ	0xFF7
  8349                           tblptrl	equ	0xFF6
  8350                           tablat	equ	0xFF5
  8351                           prodh	equ	0xFF4
  8352                           prodl	equ	0xFF3
  8353                           postinc0	equ	0xFEE
  8354                           wreg	equ	0xFE8
  8355                           indf1	equ	0xFE7
  8356                           postdec1	equ	0xFE5
  8357                           fsr1h	equ	0xFE2
  8358                           fsr1l	equ	0xFE1
  8359                           indf2	equ	0xFDF
  8360                           postinc2	equ	0xFDE
  8361                           postdec2	equ	0xFDD
  8362                           fsr2h	equ	0xFDA
  8363                           fsr2l	equ	0xFD9
  8364                           status	equ	0xFD8
  8365                           
  8366 ;; *************** function ___lwdiv *****************
  8367 ;; Defined at:
  8368 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
  8369 ;; Parameters:    Size  Location     Type
  8370 ;;  dividend        2    0[BANK0 ] unsigned int 
  8371 ;;  divisor         2    2[BANK0 ] unsigned int 
  8372 ;; Auto vars:     Size  Location     Type
  8373 ;;  quotient        2    5[BANK0 ] unsigned int 
  8374 ;;  counter         1    4[BANK0 ] unsigned char 
  8375 ;; Return value:  Size  Location     Type
  8376 ;;                  2    0[BANK0 ] unsigned int 
  8377 ;; Registers used:
  8378 ;;		wreg, status,2, status,0
  8379 ;; Tracked objects:
  8380 ;;		On entry : 0/0
  8381 ;;		On exit  : 0/0
  8382 ;;		Unchanged: 0/0
  8383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8384 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8385 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8387 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8388 ;;Total ram usage:        7 bytes
  8389 ;; Hardware stack levels used:    1
  8390 ;; Hardware stack levels required when called:    7
  8391 ;; This function calls:
  8392 ;;		Nothing
  8393 ;; This function is called by:
  8394 ;;		_itos
  8395 ;;		_printf
  8396 ;; This function uses a non-reentrant model
  8397 ;;
  8398                           
  8399                           	psect	text41
  8400  0000'                    __ptext41:
  8401                           	opt stack 0
  8402  0000'                    ___lwdiv:
  8403                           	opt stack 21
  8404                           
  8405                           ; BSR set to: 0
  8406                           ;incstack = 0
  8407  0000' 0E00               	movlw	0
  8408  0002' 0100               	movlb	0	; () banked
  8409  0004' 6F00'              	movwf	(___lwdiv@quotient+1)& (0+255),b
  8410  0006' 0E00               	movlw	0
  8411  0008' 6F00'              	movwf	___lwdiv@quotient& (0+255),b
  8412                           
  8413                           ; BSR set to: 0
  8414  000A' 0100               	movlb	0	; () banked
  8415  000C' 5100'              	movf	___lwdiv@divisor& (0+255),w,b
  8416  000E' 0100               	movlb	0	; () banked
  8417  0010' 1100'              	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  8418  0012' B4D8               	btfsc	status,2,c
  8419  0014' D02C               	goto	l2754
  8420                           
  8421                           ; BSR set to: 0
  8422  0016' 0E01               	movlw	1
  8423  0018' 0100               	movlb	0	; () banked
  8424  001A' 6F00'              	movwf	___lwdiv@counter& (0+255),b
  8425  001C' D006               	goto	l2749
  8426  001E'                    
  8427                           ; BSR set to: 0
  8428                           
  8429                           ; BSR set to: 0
  8430  001E' 0100               	movlb	0	; () banked
  8431  0020' 90D8               	bcf	status,0,c
  8432  0022' 3700'              	rlcf	___lwdiv@divisor& (0+255),f,b
  8433  0024' 3700'              	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  8434  0026' 0100               	movlb	0	; () banked
  8435  0028' 2B00'              	incf	___lwdiv@counter& (0+255),f,b
  8436  002A'                    l2749:
  8437                           
  8438                           ; BSR set to: 0
  8439                           
  8440                           ; BSR set to: 0
  8441  002A' 0100               	movlb	0	; () banked
  8442  002C' AF00'              	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  8443  002E' D7F7               	goto	l2750
  8444  0030'                    u6880:
  8445                           
  8446                           ; BSR set to: 0
  8447                           
  8448                           ; BSR set to: 0
  8449                           
  8450                           ; BSR set to: 0
  8451  0030' 0100               	movlb	0	; () banked
  8452  0032' 90D8               	bcf	status,0,c
  8453  0034' 3700'              	rlcf	___lwdiv@quotient& (0+255),f,b
  8454  0036' 3700'              	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  8455                           
  8456                           ; BSR set to: 0
  8457  0038' 0100               	movlb	0	; () banked
  8458  003A' 5100'              	movf	___lwdiv@divisor& (0+255),w,b
  8459  003C' 0100               	movlb	0	; () banked
  8460  003E' 5D00'              	subwf	___lwdiv@dividend& (0+255),w,b
  8461  0040' 0100               	movlb	0	; () banked
  8462  0042' 5100'              	movf	(___lwdiv@divisor+1)& (0+255),w,b
  8463  0044' 0100               	movlb	0	; () banked
  8464  0046' 5900'              	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  8465  0048' A0D8               	btfss	status,0,c
  8466  004A' D00A               	goto	l2753
  8467                           
  8468                           ; BSR set to: 0
  8469  004C' 0100               	movlb	0	; () banked
  8470  004E' 5100'              	movf	___lwdiv@divisor& (0+255),w,b
  8471  0050' 0100               	movlb	0	; () banked
  8472  0052' 5F00'              	subwf	___lwdiv@dividend& (0+255),f,b
  8473  0054' 0100               	movlb	0	; () banked
  8474  0056' 5100'              	movf	(___lwdiv@divisor+1)& (0+255),w,b
  8475  0058' 0100               	movlb	0	; () banked
  8476  005A' 5B00'              	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  8477                           
  8478                           ; BSR set to: 0
  8479  005C' 0100               	movlb	0	; () banked
  8480  005E' 8100'              	bsf	___lwdiv@quotient& (0+255),0,b
  8481  0060'                    l2753:
  8482                           
  8483                           ; BSR set to: 0
  8484                           
  8485                           ; BSR set to: 0
  8486  0060' 0100               	movlb	0	; () banked
  8487  0062' 90D8               	bcf	status,0,c
  8488  0064' 3300'              	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  8489  0066' 3300'              	rrcf	___lwdiv@divisor& (0+255),f,b
  8490                           
  8491                           ; BSR set to: 0
  8492  0068' 0100               	movlb	0	; () banked
  8493  006A' 2F00'              	decfsz	___lwdiv@counter& (0+255),f,b
  8494  006C' D7E1               	goto	u6880
  8495  006E'                    l2754:
  8496                           
  8497                           ; BSR set to: 0
  8498                           
  8499                           ; BSR set to: 0
  8500  006E' C005' F000'        	movff	___lwdiv@quotient,?___lwdiv
  8501  0072' C006' F001'        	movff	___lwdiv@quotient+1,?___lwdiv+1
  8502                           
  8503                           ; BSR set to: 0
  8504  0076' 0012               	return		;funcret
  8505  0078'                    __end_of___lwdiv:
  8506                           	opt stack 0
  8507                           tosu	equ	0xFFF
  8508                           tosh	equ	0xFFE
  8509                           tosl	equ	0xFFD
  8510                           pclath	equ	0xFFA
  8511                           tblptru	equ	0xFF8
  8512                           tblptrh	equ	0xFF7
  8513                           tblptrl	equ	0xFF6
  8514                           tablat	equ	0xFF5
  8515                           prodh	equ	0xFF4
  8516                           prodl	equ	0xFF3
  8517                           postinc0	equ	0xFEE
  8518                           wreg	equ	0xFE8
  8519                           indf1	equ	0xFE7
  8520                           postdec1	equ	0xFE5
  8521                           fsr1h	equ	0xFE2
  8522                           fsr1l	equ	0xFE1
  8523                           indf2	equ	0xFDF
  8524                           postinc2	equ	0xFDE
  8525                           postdec2	equ	0xFDD
  8526                           fsr2h	equ	0xFDA
  8527                           fsr2l	equ	0xFD9
  8528                           status	equ	0xFD8
  8529                           
  8530 ;; *************** function _HMI_SetSegments *****************
  8531 ;; Defined at:
  8532 ;;		line 226 in file "HMI.c"
  8533 ;; Parameters:    Size  Location     Type
  8534 ;;  pString         2    1[BANK0 ] PTR unsigned char 
  8535 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  8536 ;; Auto vars:     Size  Location     Type
  8537 ;;  in              2    4[BANK0 ] unsigned short 
  8538 ;; Return value:  Size  Location     Type
  8539 ;;                  1    wreg      void 
  8540 ;; Registers used:
  8541 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8542 ;; Tracked objects:
  8543 ;;		On entry : 0/0
  8544 ;;		On exit  : 0/0
  8545 ;;		Unchanged: 0/0
  8546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8547 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8548 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8549 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8550 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8551 ;;Total ram usage:        5 bytes
  8552 ;; Hardware stack levels used:    1
  8553 ;; Hardware stack levels required when called:    8
  8554 ;; This function calls:
  8555 ;;		_ToSegment
  8556 ;; This function is called by:
  8557 ;;		_HMI_SetNumber
  8558 ;; This function uses a non-reentrant model
  8559 ;;
  8560                           
  8561                           	psect	text42
  8562  0000'                    __ptext42:
  8563                           	opt stack 0
  8564  0000'                    _HMI_SetSegments:
  8565                           	opt stack 17
  8566                           
  8567                           ;HMI.c: 228: UINT16 in=0;
  8568                           
  8569                           ; BSR set to: 0
  8570                           ;incstack = 0
  8571  0000' 0E00               	movlw	0
  8572  0002' 0100               	movlb	0	; () banked
  8573  0004' 6F00'              	movwf	(HMI_SetSegments@in+1)& (0+255),b
  8574  0006' 0E00               	movlw	0
  8575  0008' 6F00'              	movwf	HMI_SetSegments@in& (0+255),b
  8576                           
  8577                           ;HMI.c: 229: while(*pString)
  8578  000A' D038               	goto	l1202
  8579  000C'                    
  8580                           ; BSR set to: 0
  8581                           ;HMI.c: 230: {
  8582                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
  8583                           
  8584                           ; BSR set to: 0
  8585  000C' 0E00'              	movlw	low _HMIBoard
  8586  000E' 0100               	movlb	0	; () banked
  8587  0010' 2500'              	addwf	HMI_SetSegments@in& (0+255),w,b
  8588  0012' 6ED9               	movwf	fsr2l,c
  8589  0014' 0E00'              	movlw	high _HMIBoard
  8590  0016' 0100               	movlb	0	; () banked
  8591  0018' 2100'              	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  8592  001A' 6EDA               	movwf	fsr2h,c
  8593  001C' C001' FFE1         	movff	HMI_SetSegments@pString,fsr1l
  8594  0020' C002' FFE2         	movff	HMI_SetSegments@pString+1,fsr1h
  8595  0024' 50E7               	movf	indf1,w,c
  8596  0026' EC00' F000'        	call	_ToSegment
  8597  002A' 6EDF               	movwf	indf2,c
  8598                           
  8599                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
  8600  002C' 0E00'              	movlw	low _HMIBoard
  8601  002E' 0100               	movlb	0	; () banked
  8602  0030' 2500'              	addwf	HMI_SetSegments@in& (0+255),w,b
  8603  0032' 6ED9               	movwf	fsr2l,c
  8604  0034' 0E00'              	movlw	high _HMIBoard
  8605  0036' 0100               	movlb	0	; () banked
  8606  0038' 2100'              	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  8607  003A' 6EDA               	movwf	fsr2h,c
  8608  003C' 0E80               	movlw	128
  8609  003E' 18DE               	xorwf	postinc2,w,c
  8610  0040' A4D8               	btfss	status,2,c
  8611  0042' D00E               	goto	l1201
  8612                           
  8613                           ; BSR set to: 0
  8614                           ;HMI.c: 234: {
  8615                           ;HMI.c: 235: in--;
  8616  0044' 0100               	movlb	0	; () banked
  8617  0046' 0700'              	decf	HMI_SetSegments@in& (0+255),f,b
  8618  0048' A0D8               	btfss	status,0,c
  8619  004A' 0700'              	decf	(HMI_SetSegments@in+1)& (0+255),f,b
  8620                           
  8621                           ; BSR set to: 0
  8622                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
  8623  004C' 0E00'              	movlw	low _HMIBoard
  8624  004E' 0100               	movlb	0	; () banked
  8625  0050' 2500'              	addwf	HMI_SetSegments@in& (0+255),w,b
  8626  0052' 6ED9               	movwf	fsr2l,c
  8627  0054' 0E00'              	movlw	high _HMIBoard
  8628  0056' 0100               	movlb	0	; () banked
  8629  0058' 2100'              	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  8630  005A' 6EDA               	movwf	fsr2h,c
  8631  005C' 0E00               	movlw	0
  8632  005E' 8EDB               	bsf	plusw2,7,c
  8633  0060'                    l1201:
  8634                           
  8635                           ; BSR set to: 0
  8636                           ;HMI.c: 237: }
  8637                           ;HMI.c: 239: pString++;
  8638                           
  8639                           ; BSR set to: 0
  8640  0060' 0100               	movlb	0	; () banked
  8641  0062' 4B00'              	infsnz	HMI_SetSegments@pString& (0+255),f,b
  8642  0064' 2B00'              	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
  8643                           
  8644                           ; BSR set to: 0
  8645                           ;HMI.c: 240: in++;
  8646  0066' 0100               	movlb	0	; () banked
  8647  0068' 4B00'              	infsnz	HMI_SetSegments@in& (0+255),f,b
  8648  006A' 2B00'              	incf	(HMI_SetSegments@in+1)& (0+255),f,b
  8649                           
  8650                           ; BSR set to: 0
  8651                           ;HMI.c: 241: if (in>=6)
  8652  006C' 0100               	movlb	0	; () banked
  8653  006E' 5100'              	movf	(HMI_SetSegments@in+1)& (0+255),w,b
  8654  0070' E11A               	bnz	l11003
  8655  0072' 0E06               	movlw	6
  8656  0074' 0100               	movlb	0	; () banked
  8657  0076' 5D00'              	subwf	HMI_SetSegments@in& (0+255),w,b
  8658  0078' B0D8               	btfsc	status,0,c
  8659  007A' D015               	goto	l1204
  8660  007C'                    l1202:
  8661                           
  8662                           ; BSR set to: 0
  8663                           
  8664                           ; BSR set to: 0
  8665                           
  8666                           ; BSR set to: 0
  8667  007C' C001' FFD9         	movff	HMI_SetSegments@pString,fsr2l
  8668  0080' C002' FFDA         	movff	HMI_SetSegments@pString+1,fsr2h
  8669  0084' 50DF               	movf	indf2,w,c
  8670  0086' B4D8               	btfsc	status,2,c
  8671  0088' D00E               	goto	l1204
  8672  008A' D7C0               	goto	l1200
  8673  008C'                    
  8674                           ; BSR set to: 0
  8675                           ;HMI.c: 245: {
  8676                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
  8677                           
  8678                           ; BSR set to: 0
  8679  008C' 0E00'              	movlw	low _HMIBoard
  8680  008E' 0100               	movlb	0	; () banked
  8681  0090' 2500'              	addwf	HMI_SetSegments@in& (0+255),w,b
  8682  0092' 6ED9               	movwf	fsr2l,c
  8683  0094' 0E00'              	movlw	high _HMIBoard
  8684  0096' 0100               	movlb	0	; () banked
  8685  0098' 2100'              	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  8686  009A' 6EDA               	movwf	fsr2h,c
  8687  009C' 0E00               	movlw	0
  8688  009E' 6EDF               	movwf	indf2,c
  8689                           
  8690                           ; BSR set to: 0
  8691                           ;HMI.c: 247: in++;
  8692  00A0' 0100               	movlb	0	; () banked
  8693  00A2' 4B00'              	infsnz	HMI_SetSegments@in& (0+255),f,b
  8694  00A4' 2B00'              	incf	(HMI_SetSegments@in+1)& (0+255),f,b
  8695  00A6'                    l1204:
  8696  00A6'                    l11003:
  8697                           
  8698                           ; BSR set to: 0
  8699  00A6' 0100               	movlb	0	; () banked
  8700  00A8' 5100'              	movf	(HMI_SetSegments@in+1)& (0+255),w,b
  8701  00AA' E106               	bnz	l1207
  8702  00AC' 0E06               	movlw	6
  8703  00AE' 0100               	movlb	0	; () banked
  8704  00B0' 5D00'              	subwf	HMI_SetSegments@in& (0+255),w,b
  8705  00B2' B0D8               	btfsc	status,0,c
  8706  00B4' 0012               	return	
  8707  00B6' D7EA               	goto	l1205
  8708  00B8'                    l1207:
  8709                           
  8710                           ; BSR set to: 0
  8711  00B8' 0012               	return		;funcret
  8712  00BA'                    __end_of_HMI_SetSegments:
  8713                           	opt stack 0
  8714                           tosu	equ	0xFFF
  8715                           tosh	equ	0xFFE
  8716                           tosl	equ	0xFFD
  8717                           pclath	equ	0xFFA
  8718                           tblptru	equ	0xFF8
  8719                           tblptrh	equ	0xFF7
  8720                           tblptrl	equ	0xFF6
  8721                           tablat	equ	0xFF5
  8722                           prodh	equ	0xFF4
  8723                           prodl	equ	0xFF3
  8724                           postinc0	equ	0xFEE
  8725                           wreg	equ	0xFE8
  8726                           indf1	equ	0xFE7
  8727                           postdec1	equ	0xFE5
  8728                           fsr1h	equ	0xFE2
  8729                           fsr1l	equ	0xFE1
  8730                           indf2	equ	0xFDF
  8731                           postinc2	equ	0xFDE
  8732                           postdec2	equ	0xFDD
  8733                           plusw2	equ	0xFDB
  8734                           fsr2h	equ	0xFDA
  8735                           fsr2l	equ	0xFD9
  8736                           status	equ	0xFD8
  8737                           
  8738 ;; *************** function _ToSegment *****************
  8739 ;; Defined at:
  8740 ;;		line 284 in file "Library/Types.c"
  8741 ;; Parameters:    Size  Location     Type
  8742 ;;  pCHR            1    wreg     unsigned char 
  8743 ;; Auto vars:     Size  Location     Type
  8744 ;;  pCHR            1    0[BANK0 ] unsigned char 
  8745 ;; Return value:  Size  Location     Type
  8746 ;;                  1    wreg      unsigned char 
  8747 ;; Registers used:
  8748 ;;		wreg, status,2, status,0
  8749 ;; Tracked objects:
  8750 ;;		On entry : 0/0
  8751 ;;		On exit  : 0/0
  8752 ;;		Unchanged: 0/0
  8753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8755 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8757 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8758 ;;Total ram usage:        1 bytes
  8759 ;; Hardware stack levels used:    1
  8760 ;; Hardware stack levels required when called:    7
  8761 ;; This function calls:
  8762 ;;		Nothing
  8763 ;; This function is called by:
  8764 ;;		_HMI_SetSegments
  8765 ;; This function uses a non-reentrant model
  8766 ;;
  8767                           
  8768                           	psect	text43
  8769  0000'                    __ptext43:
  8770                           	opt stack 0
  8771  0000'                    _ToSegment:
  8772                           	opt stack 17
  8773                           
  8774                           ; BSR set to: 0
  8775                           ;incstack = 0
  8776                           ;ToSegment@pCHR stored from wreg
  8777  0000' 0100               	movlb	0	; () banked
  8778  0002' 6F00'              	movwf	ToSegment@pCHR& (0+255),b
  8779                           
  8780                           ;Types.c: 286: switch(pCHR)
  8781  0004' D07E               	goto	l853
  8782  0006' 0E3F               	movlw	63
  8783  0008' 0012               	return	
  8784  000A' 0E06               	movlw	6
  8785  000C' 0012               	return	
  8786  000E' 0E5B               	movlw	91
  8787  0010' 0012               	return	
  8788  0012' 0E4F               	movlw	79
  8789  0014' 0012               	return	
  8790  0016' 0E66               	movlw	102
  8791  0018' 0012               	return	
  8792  001A' 0E6D               	movlw	109
  8793  001C' 0012               	return	
  8794  001E' 0E7D               	movlw	125
  8795  0020' 0012               	return	
  8796  0022' 0E07               	movlw	7
  8797  0024' 0012               	return	
  8798  0026' 0E7F               	movlw	127
  8799  0028' 0012               	return	
  8800  002A' 0E6F               	movlw	111
  8801  002C' 0012               	return	
  8802  002E' 0E5F               	movlw	95
  8803  0030' 0012               	return	
  8804  0032' 0E7C               	movlw	124
  8805  0034' 0012               	return	
  8806  0036' 0E58               	movlw	88
  8807  0038' 0012               	return	
  8808  003A' 0E5E               	movlw	94
  8809  003C' 0012               	return	
  8810  003E' 0E7B               	movlw	123
  8811  0040' 0012               	return	
  8812  0042' 0E71               	movlw	113
  8813  0044' 0012               	return	
  8814  0046' 0E6F               	movlw	111
  8815  0048' 0012               	return	
  8816  004A' 0E74               	movlw	116
  8817  004C' 0012               	return	
  8818  004E' 0E04               	movlw	4
  8819  0050' 0012               	return	
  8820  0052' 0E0E               	movlw	14
  8821  0054' 0012               	return	
  8822  0056' 0E7A               	movlw	122
  8823  0058' 0012               	return	
  8824  005A' 0E06               	movlw	6
  8825  005C' 0012               	return	
  8826  005E' 0E14               	movlw	20
  8827  0060' 0012               	return	
  8828  0062' 0E54               	movlw	84
  8829  0064' 0012               	return	
  8830  0066' 0E5C               	movlw	92
  8831  0068' 0012               	return	
  8832  006A' 0E73               	movlw	115
  8833  006C' 0012               	return	
  8834  006E' 0E67               	movlw	103
  8835  0070' 0012               	return	
  8836  0072' 0E50               	movlw	80
  8837  0074' 0012               	return	
  8838  0076' 0E6D               	movlw	109
  8839  0078' 0012               	return	
  8840  007A' 0E78               	movlw	120
  8841  007C' 0012               	return	
  8842  007E' 0E1C               	movlw	28
  8843  0080' 0012               	return	
  8844  0082' 0E62               	movlw	98
  8845  0084' 0012               	return	
  8846  0086' 0E2A               	movlw	42
  8847  0088' 0012               	return	
  8848  008A' 0E64               	movlw	100
  8849  008C' 0012               	return	
  8850  008E' 0E6E               	movlw	110
  8851  0090' 0012               	return	
  8852  0092' 0E5B               	movlw	91
  8853  0094' 0012               	return	
  8854  0096' 0E77               	movlw	119
  8855  0098' 0012               	return	
  8856  009A' 0E7F               	movlw	127
  8857  009C' 0012               	return	
  8858  009E' 0E39               	movlw	57
  8859  00A0' 0012               	return	
  8860  00A2' 0E3F               	movlw	63
  8861  00A4' 0012               	return	
  8862  00A6' 0E79               	movlw	121
  8863  00A8' 0012               	return	
  8864  00AA' 0E71               	movlw	113
  8865  00AC' 0012               	return	
  8866  00AE' 0E3D               	movlw	61
  8867  00B0' 0012               	return	
  8868  00B2' 0E76               	movlw	118
  8869  00B4' 0012               	return	
  8870  00B6' 0E06               	movlw	6
  8871  00B8' 0012               	return	
  8872  00BA' 0E1E               	movlw	30
  8873  00BC' 0012               	return	
  8874  00BE' 0E57               	movlw	87
  8875  00C0' 0012               	return	
  8876  00C2' 0E38               	movlw	56
  8877  00C4' 0012               	return	
  8878  00C6' 0E76               	movlw	118
  8879  00C8' 0012               	return	
  8880  00CA' 0E76               	movlw	118
  8881  00CC' 0012               	return	
  8882  00CE' 0E3F               	movlw	63
  8883  00D0' 0012               	return	
  8884  00D2' 0E73               	movlw	115
  8885  00D4' 0012               	return	
  8886  00D6' 0E3F               	movlw	63
  8887  00D8' 0012               	return	
  8888  00DA' 0E77               	movlw	119
  8889  00DC' 0012               	return	
  8890  00DE' 0E6D               	movlw	109
  8891  00E0' 0012               	return	
  8892  00E2' 0E31               	movlw	49
  8893  00E4' 0012               	return	
  8894  00E6' 0E3E               	movlw	62
  8895  00E8' 0012               	return	
  8896  00EA' 0E3E               	movlw	62
  8897  00EC' 0012               	return	
  8898  00EE' 0E7E               	movlw	126
  8899  00F0' 0012               	return	
  8900  00F2' 0E76               	movlw	118
  8901  00F4' 0012               	return	
  8902  00F6' 0E66               	movlw	102
  8903  00F8' 0012               	return	
  8904  00FA' 0E5B               	movlw	91
  8905  00FC' 0012               	return	
  8906  00FE' 0E80               	movlw	128
  8907  0100' 0012               	return	
  8908  0102'                    l853:
  8909  0102' 0100               	movlb	0	; () banked
  8910  0104' 5100'              	movf	ToSegment@pCHR& (0+255),w,b
  8911                           
  8912                           ; Switch size 1, requested type "space"
  8913                           ; Number of cases is 63, Range of values is 46 to 122
  8914                           ; switch strategies available:
  8915                           ; Name         Instructions Cycles
  8916                           ; simple_byte          190    96 (average)
  8917                           ;	Chosen strategy is simple_byte
  8918  0106' 0A2E               	xorlw	46	; case 46
  8919  0108' B4D8               	btfsc	status,2,c
  8920  010A' D7F9               	goto	l917
  8921  010C' 0A1E               	xorlw	30	; case 48
  8922  010E' B4D8               	btfsc	status,2,c
  8923  0110' D77A               	goto	l854
  8924  0112' 0A01               	xorlw	1	; case 49
  8925  0114' B4D8               	btfsc	status,2,c
  8926  0116' D779               	goto	l856
  8927  0118' 0A03               	xorlw	3	; case 50
  8928  011A' B4D8               	btfsc	status,2,c
  8929  011C' D778               	goto	l857
  8930  011E' 0A01               	xorlw	1	; case 51
  8931  0120' B4D8               	btfsc	status,2,c
  8932  0122' D777               	goto	l858
  8933  0124' 0A07               	xorlw	7	; case 52
  8934  0126' B4D8               	btfsc	status,2,c
  8935  0128' D776               	goto	l859
  8936  012A' 0A01               	xorlw	1	; case 53
  8937  012C' B4D8               	btfsc	status,2,c
  8938  012E' D775               	goto	l860
  8939  0130' 0A03               	xorlw	3	; case 54
  8940  0132' B4D8               	btfsc	status,2,c
  8941  0134' D774               	goto	l861
  8942  0136' 0A01               	xorlw	1	; case 55
  8943  0138' B4D8               	btfsc	status,2,c
  8944  013A' D773               	goto	l862
  8945  013C' 0A0F               	xorlw	15	; case 56
  8946  013E' B4D8               	btfsc	status,2,c
  8947  0140' D772               	goto	l863
  8948  0142' 0A01               	xorlw	1	; case 57
  8949  0144' B4D8               	btfsc	status,2,c
  8950  0146' D771               	goto	l864
  8951  0148' 0A78               	xorlw	120	; case 65
  8952  014A' B4D8               	btfsc	status,2,c
  8953  014C' D7A4               	goto	l891
  8954  014E' 0A03               	xorlw	3	; case 66
  8955  0150' B4D8               	btfsc	status,2,c
  8956  0152' D7A3               	goto	l892
  8957  0154' 0A01               	xorlw	1	; case 67
  8958  0156' B4D8               	btfsc	status,2,c
  8959  0158' D7A2               	goto	l893
  8960  015A' 0A07               	xorlw	7	; case 68
  8961  015C' B4D8               	btfsc	status,2,c
  8962  015E' D7A1               	goto	l894
  8963  0160' 0A01               	xorlw	1	; case 69
  8964  0162' B4D8               	btfsc	status,2,c
  8965  0164' D7A0               	goto	l895
  8966  0166' 0A03               	xorlw	3	; case 70
  8967  0168' B4D8               	btfsc	status,2,c
  8968  016A' D79F               	goto	l896
  8969  016C' 0A01               	xorlw	1	; case 71
  8970  016E' B4D8               	btfsc	status,2,c
  8971  0170' D79E               	goto	l897
  8972  0172' 0A0F               	xorlw	15	; case 72
  8973  0174' B4D8               	btfsc	status,2,c
  8974  0176' D79D               	goto	l898
  8975  0178' 0A01               	xorlw	1	; case 73
  8976  017A' B4D8               	btfsc	status,2,c
  8977  017C' D79C               	goto	l899
  8978  017E' 0A03               	xorlw	3	; case 74
  8979  0180' B4D8               	btfsc	status,2,c
  8980  0182' D79B               	goto	l900
  8981  0184' 0A01               	xorlw	1	; case 75
  8982  0186' B4D8               	btfsc	status,2,c
  8983  0188' D79A               	goto	l901
  8984  018A' 0A07               	xorlw	7	; case 76
  8985  018C' B4D8               	btfsc	status,2,c
  8986  018E' D799               	goto	l902
  8987  0190' 0A01               	xorlw	1	; case 77
  8988  0192' B4D8               	btfsc	status,2,c
  8989  0194' D798               	goto	l903
  8990  0196' 0A03               	xorlw	3	; case 78
  8991  0198' B4D8               	btfsc	status,2,c
  8992  019A' D797               	goto	l904
  8993  019C' 0A01               	xorlw	1	; case 79
  8994  019E' B4D8               	btfsc	status,2,c
  8995  01A0' D796               	goto	l905
  8996  01A2' 0A1F               	xorlw	31	; case 80
  8997  01A4' B4D8               	btfsc	status,2,c
  8998  01A6' D795               	goto	l906
  8999  01A8' 0A01               	xorlw	1	; case 81
  9000  01AA' B4D8               	btfsc	status,2,c
  9001  01AC' D794               	goto	l907
  9002  01AE' 0A03               	xorlw	3	; case 82
  9003  01B0' B4D8               	btfsc	status,2,c
  9004  01B2' D793               	goto	l908
  9005  01B4' 0A01               	xorlw	1	; case 83
  9006  01B6' B4D8               	btfsc	status,2,c
  9007  01B8' D792               	goto	l909
  9008  01BA' 0A07               	xorlw	7	; case 84
  9009  01BC' B4D8               	btfsc	status,2,c
  9010  01BE' D791               	goto	l910
  9011  01C0' 0A01               	xorlw	1	; case 85
  9012  01C2' B4D8               	btfsc	status,2,c
  9013  01C4' D790               	goto	l911
  9014  01C6' 0A03               	xorlw	3	; case 86
  9015  01C8' B4D8               	btfsc	status,2,c
  9016  01CA' D78F               	goto	l912
  9017  01CC' 0A01               	xorlw	1	; case 87
  9018  01CE' B4D8               	btfsc	status,2,c
  9019  01D0' D78E               	goto	l913
  9020  01D2' 0A0F               	xorlw	15	; case 88
  9021  01D4' B4D8               	btfsc	status,2,c
  9022  01D6' D78D               	goto	l914
  9023  01D8' 0A01               	xorlw	1	; case 89
  9024  01DA' B4D8               	btfsc	status,2,c
  9025  01DC' D78C               	goto	l915
  9026  01DE' 0A03               	xorlw	3	; case 90
  9027  01E0' B4D8               	btfsc	status,2,c
  9028  01E2' D78B               	goto	l916
  9029  01E4' 0A3B               	xorlw	59	; case 97
  9030  01E6' B4D8               	btfsc	status,2,c
  9031  01E8' D722               	goto	l865
  9032  01EA' 0A03               	xorlw	3	; case 98
  9033  01EC' B4D8               	btfsc	status,2,c
  9034  01EE' D721               	goto	l866
  9035  01F0' 0A01               	xorlw	1	; case 99
  9036  01F2' B4D8               	btfsc	status,2,c
  9037  01F4' D720               	goto	l867
  9038  01F6' 0A07               	xorlw	7	; case 100
  9039  01F8' B4D8               	btfsc	status,2,c
  9040  01FA' D71F               	goto	l868
  9041  01FC' 0A01               	xorlw	1	; case 101
  9042  01FE' B4D8               	btfsc	status,2,c
  9043  0200' D71E               	goto	l869
  9044  0202' 0A03               	xorlw	3	; case 102
  9045  0204' B4D8               	btfsc	status,2,c
  9046  0206' D71D               	goto	l870
  9047  0208' 0A01               	xorlw	1	; case 103
  9048  020A' B4D8               	btfsc	status,2,c
  9049  020C' D71C               	goto	l871
  9050  020E' 0A0F               	xorlw	15	; case 104
  9051  0210' B4D8               	btfsc	status,2,c
  9052  0212' D71B               	goto	l872
  9053  0214' 0A01               	xorlw	1	; case 105
  9054  0216' B4D8               	btfsc	status,2,c
  9055  0218' D71A               	goto	l873
  9056  021A' 0A03               	xorlw	3	; case 106
  9057  021C' B4D8               	btfsc	status,2,c
  9058  021E' D719               	goto	l874
  9059  0220' 0A01               	xorlw	1	; case 107
  9060  0222' B4D8               	btfsc	status,2,c
  9061  0224' D718               	goto	l875
  9062  0226' 0A07               	xorlw	7	; case 108
  9063  0228' B4D8               	btfsc	status,2,c
  9064  022A' D717               	goto	l876
  9065  022C' 0A01               	xorlw	1	; case 109
  9066  022E' B4D8               	btfsc	status,2,c
  9067  0230' D716               	goto	l877
  9068  0232' 0A03               	xorlw	3	; case 110
  9069  0234' B4D8               	btfsc	status,2,c
  9070  0236' D715               	goto	l878
  9071  0238' 0A01               	xorlw	1	; case 111
  9072  023A' B4D8               	btfsc	status,2,c
  9073  023C' D714               	goto	l879
  9074  023E' 0A1F               	xorlw	31	; case 112
  9075  0240' B4D8               	btfsc	status,2,c
  9076  0242' D713               	goto	l880
  9077  0244' 0A01               	xorlw	1	; case 113
  9078  0246' B4D8               	btfsc	status,2,c
  9079  0248' D712               	goto	l881
  9080  024A' 0A03               	xorlw	3	; case 114
  9081  024C' B4D8               	btfsc	status,2,c
  9082  024E' D711               	goto	l882
  9083  0250' 0A01               	xorlw	1	; case 115
  9084  0252' B4D8               	btfsc	status,2,c
  9085  0254' D710               	goto	l883
  9086  0256' 0A07               	xorlw	7	; case 116
  9087  0258' B4D8               	btfsc	status,2,c
  9088  025A' D70F               	goto	l884
  9089  025C' 0A01               	xorlw	1	; case 117
  9090  025E' B4D8               	btfsc	status,2,c
  9091  0260' D70E               	goto	l885
  9092  0262' 0A03               	xorlw	3	; case 118
  9093  0264' B4D8               	btfsc	status,2,c
  9094  0266' D70D               	goto	l886
  9095  0268' 0A01               	xorlw	1	; case 119
  9096  026A' B4D8               	btfsc	status,2,c
  9097  026C' D70C               	goto	l887
  9098  026E' 0A0F               	xorlw	15	; case 120
  9099  0270' B4D8               	btfsc	status,2,c
  9100  0272' D70B               	goto	l888
  9101  0274' 0A01               	xorlw	1	; case 121
  9102  0276' B4D8               	btfsc	status,2,c
  9103  0278' D70A               	goto	l889
  9104  027A' 0A03               	xorlw	3	; case 122
  9105  027C' B4D8               	btfsc	status,2,c
  9106  027E' D709               	goto	l890
  9107                           
  9108                           ;Types.c: 354: return 0;
  9109                           
  9110                           ; BSR set to: 0
  9111  0280' 0E00               	movlw	0
  9112  0282' 0012               	return	
  9113  0284'                    __end_of_ToSegment:
  9114                           	opt stack 0
  9115                           tosu	equ	0xFFF
  9116                           tosh	equ	0xFFE
  9117                           tosl	equ	0xFFD
  9118                           pclath	equ	0xFFA
  9119                           tblptru	equ	0xFF8
  9120                           tblptrh	equ	0xFF7
  9121                           tblptrl	equ	0xFF6
  9122                           tablat	equ	0xFF5
  9123                           prodh	equ	0xFF4
  9124                           prodl	equ	0xFF3
  9125                           postinc0	equ	0xFEE
  9126                           wreg	equ	0xFE8
  9127                           indf1	equ	0xFE7
  9128                           postdec1	equ	0xFE5
  9129                           fsr1h	equ	0xFE2
  9130                           fsr1l	equ	0xFE1
  9131                           indf2	equ	0xFDF
  9132                           postinc2	equ	0xFDE
  9133                           postdec2	equ	0xFDD
  9134                           plusw2	equ	0xFDB
  9135                           fsr2h	equ	0xFDA
  9136                           fsr2l	equ	0xFD9
  9137                           status	equ	0xFD8
  9138                           
  9139 ;; *************** function _HMI_SetButton *****************
  9140 ;; Defined at:
  9141 ;;		line 186 in file "HMI.c"
  9142 ;; Parameters:    Size  Location     Type
  9143 ;;  pValue          1    wreg     unsigned char 
  9144 ;; Auto vars:     Size  Location     Type
  9145 ;;  pValue          1    6[BANK0 ] unsigned char 
  9146 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
  9147 ;;  v               1    7[BANK0 ] unsigned char 
  9148 ;; Return value:  Size  Location     Type
  9149 ;;                  1    wreg      void 
  9150 ;; Registers used:
  9151 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  9152 ;; Tracked objects:
  9153 ;;		On entry : 0/0
  9154 ;;		On exit  : 0/0
  9155 ;;		Unchanged: 0/0
  9156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9158 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9159 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9160 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9161 ;;Total ram usage:        8 bytes
  9162 ;; Hardware stack levels used:    1
  9163 ;; Hardware stack levels required when called:    7
  9164 ;; This function calls:
  9165 ;;		Nothing
  9166 ;; This function is called by:
  9167 ;;		_Event_TestButton
  9168 ;; This function uses a non-reentrant model
  9169 ;;
  9170                           
  9171                           	psect	text44
  9172  0000'                    __ptext44:
  9173                           	opt stack 0
  9174  0000'                    _HMI_SetButton:
  9175                           	opt stack 19
  9176                           
  9177                           ;incstack = 0
  9178                           ;HMI_SetButton@pValue stored from wreg
  9179  0000' 0100               	movlb	0	; () banked
  9180  0002' 6F00'              	movwf	HMI_SetButton@pValue& (0+255),b
  9181                           
  9182                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
  9183  0004' 0E00'              	movlw	low HMI_SetButton@F7213
  9184  0006' 6EF6               	movwf	tblptrl,c
  9185  0008'                    	if	1	;There is more than 1 active tblptr byte
  9186  0008' 0E00'              	movlw	high HMI_SetButton@F7213
  9187  000A' 6EF7               	movwf	tblptrh,c
  9188  000C'                    	endif
  9189  000C'                    	if	1	;There are 3 active tblptr bytes
  9190  000C' 0E00'              	movlw	low (HMI_SetButton@F7213 shr (0+16))
  9191  000E' 6EF8               	movwf	tblptru,c
  9192  0010'                    	endif
  9193  0010' 0009               	tblrd		*+
  9194  0012' CFF5 F002'         	movff	tablat,HMI_SetButton@reindex
  9195  0016' 0009               	tblrd		*+
  9196  0018' CFF5 F003'         	movff	tablat,HMI_SetButton@reindex+1
  9197  001C' 0009               	tblrd		*+
  9198  001E' CFF5 F004'         	movff	tablat,HMI_SetButton@reindex+2
  9199  0022' 000A               	tblrd		*-
  9200  0024' CFF5 F005'         	movff	tablat,HMI_SetButton@reindex+3
  9201                           
  9202                           ;HMI.c: 189: UINT8 v = 0b00010001;
  9203  0028' 0E11               	movlw	17
  9204  002A' 0100               	movlb	0	; () banked
  9205  002C' 6F00'              	movwf	HMI_SetButton@v& (0+255),b
  9206                           
  9207                           ; BSR set to: 0
  9208                           ;HMI.c: 190: pValue &= 3;
  9209  002E' 0E03               	movlw	3
  9210  0030' 0100               	movlb	0	; () banked
  9211  0032' 1700'              	andwf	HMI_SetButton@pValue& (0+255),f,b
  9212                           
  9213                           ; BSR set to: 0
  9214                           ;HMI.c: 191: v = v << reindex[pValue];
  9215  0034' 0100               	movlb	0	; () banked
  9216  0036' 5100'              	movf	HMI_SetButton@pValue& (0+255),w,b
  9217  0038' 0D01               	mullw	1
  9218  003A' 0E00'              	movlw	low HMI_SetButton@reindex
  9219  003C' 24F3               	addwf	prodl,w,c
  9220  003E' 6ED9               	movwf	fsr2l,c
  9221  0040' 0E00'              	movlw	high HMI_SetButton@reindex
  9222  0042' 20F4               	addwfc	prodh,w,c
  9223  0044' 6EDA               	movwf	fsr2h,c
  9224  0046' 50DF               	movf	indf2,w,c
  9225  0048' 0100               	movlb	0	; () banked
  9226  004A' 6F00'              	movwf	??_HMI_SetButton& (0+255),b
  9227  004C' C007' F001'        	movff	HMI_SetButton@v,??_HMI_SetButton+1
  9228  0050' 0100               	movlb	0	; () banked
  9229  0052' 2B00'              	incf	??_HMI_SetButton& (0+255),f,b
  9230  0054' D003               	goto	u7374
  9231  0056'                    u7375:
  9232  0056' 0100               	movlb	0	; () banked
  9233  0058' 90D8               	bcf	status,0,c
  9234  005A' 3700'              	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
  9235  005C'                    u7374:
  9236  005C' 0100               	movlb	0	; () banked
  9237  005E' 2F00'              	decfsz	??_HMI_SetButton& (0+255),f,b
  9238  0060' D7FA               	goto	u7375
  9239  0062' 0100               	movlb	0	; () banked
  9240  0064' 5100'              	movf	(??_HMI_SetButton+1)& (0+255),w,b
  9241  0066' 0100               	movlb	0	; () banked
  9242  0068' 6F00'              	movwf	HMI_SetButton@v& (0+255),b
  9243                           
  9244                           ; BSR set to: 0
  9245                           ;HMI.c: 192: v = v >> 4;
  9246  006A' 0100               	movlb	0	; () banked
  9247  006C' 3900'              	swapf	HMI_SetButton@v& (0+255),w,b
  9248  006E' 0B0F               	andlw	15
  9249  0070' 0100               	movlb	0	; () banked
  9250  0072' 6F00'              	movwf	HMI_SetButton@v& (0+255),b
  9251                           
  9252                           ; BSR set to: 0
  9253                           ;HMI.c: 193: v = v & 0x0F;
  9254  0074' 0100               	movlb	0	; () banked
  9255  0076' 5100'              	movf	HMI_SetButton@v& (0+255),w,b
  9256  0078' 0B0F               	andlw	15
  9257  007A' 0100               	movlb	0	; () banked
  9258  007C' 6F00'              	movwf	HMI_SetButton@v& (0+255),b
  9259                           
  9260                           ; BSR set to: 0
  9261                           ;HMI.c: 194: HMIBoard.pButton = v;
  9262  007E' 0103               	movlb	3	; () banked
  9263  0080' 5100'              	movf	(_HMIBoard+6)& (0+255),w,b
  9264  0082' 0100               	movlb	0	; () banked
  9265  0084' 1900'              	xorwf	HMI_SetButton@v& (0+255),w,b
  9266  0086' 0BF0               	andlw	-16
  9267  0088' 1900'              	xorwf	HMI_SetButton@v& (0+255),w,b
  9268  008A' 0103               	movlb	3	; () banked
  9269  008C' 6F00'              	movwf	(_HMIBoard+6)& (0+255),b
  9270                           
  9271                           ; BSR set to: 3
  9272  008E' 0012               	return		;funcret
  9273  0090'                    __end_of_HMI_SetButton:
  9274                           	opt stack 0
  9275                           tosu	equ	0xFFF
  9276                           tosh	equ	0xFFE
  9277                           tosl	equ	0xFFD
  9278                           pclath	equ	0xFFA
  9279                           tblptru	equ	0xFF8
  9280                           tblptrh	equ	0xFF7
  9281                           tblptrl	equ	0xFF6
  9282                           tablat	equ	0xFF5
  9283                           prodh	equ	0xFF4
  9284                           prodl	equ	0xFF3
  9285                           postinc0	equ	0xFEE
  9286                           wreg	equ	0xFE8
  9287                           indf1	equ	0xFE7
  9288                           postdec1	equ	0xFE5
  9289                           fsr1h	equ	0xFE2
  9290                           fsr1l	equ	0xFE1
  9291                           indf2	equ	0xFDF
  9292                           postinc2	equ	0xFDE
  9293                           postdec2	equ	0xFDD
  9294                           plusw2	equ	0xFDB
  9295                           fsr2h	equ	0xFDA
  9296                           fsr2l	equ	0xFD9
  9297                           status	equ	0xFD8
  9298                           
  9299 ;; *************** function _HMI_SetBar *****************
  9300 ;; Defined at:
  9301 ;;		line 205 in file "HMI.c"
  9302 ;; Parameters:    Size  Location     Type
  9303 ;;  pValue          1    wreg     unsigned char 
  9304 ;; Auto vars:     Size  Location     Type
  9305 ;;  pValue          1    0[BANK0 ] unsigned char 
  9306 ;; Return value:  Size  Location     Type
  9307 ;;                  1    wreg      void 
  9308 ;; Registers used:
  9309 ;;		wreg
  9310 ;; Tracked objects:
  9311 ;;		On entry : 0/0
  9312 ;;		On exit  : 0/0
  9313 ;;		Unchanged: 0/0
  9314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9316 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9318 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9319 ;;Total ram usage:        1 bytes
  9320 ;; Hardware stack levels used:    1
  9321 ;; Hardware stack levels required when called:    7
  9322 ;; This function calls:
  9323 ;;		Nothing
  9324 ;; This function is called by:
  9325 ;;		_Event_DIPSwitch
  9326 ;;		_Event_HMI_DIPSwitch
  9327 ;;		_Event_HMI_LeftButton
  9328 ;;		_Event_HMI_RightButton
  9329 ;; This function uses a non-reentrant model
  9330 ;;
  9331                           
  9332                           	psect	text45
  9333  0000'                    __ptext45:
  9334                           	opt stack 0
  9335  0000'                    _HMI_SetBar:
  9336                           	opt stack 19
  9337                           
  9338                           ; BSR set to: 3
  9339                           ;incstack = 0
  9340                           ;HMI_SetBar@pValue stored from wreg
  9341  0000' 0100               	movlb	0	; () banked
  9342  0002' 6F00'              	movwf	HMI_SetBar@pValue& (0+255),b
  9343                           
  9344                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
  9345  0004' C000' F03F'        	movff	HMI_SetBar@pValue,_HMIBoard+7
  9346  0008' 0012               	return		;funcret
  9347  000A'                    __end_of_HMI_SetBar:
  9348                           	opt stack 0
  9349                           tosu	equ	0xFFF
  9350                           tosh	equ	0xFFE
  9351                           tosl	equ	0xFFD
  9352                           pclath	equ	0xFFA
  9353                           tblptru	equ	0xFF8
  9354                           tblptrh	equ	0xFF7
  9355                           tblptrl	equ	0xFF6
  9356                           tablat	equ	0xFF5
  9357                           prodh	equ	0xFF4
  9358                           prodl	equ	0xFF3
  9359                           postinc0	equ	0xFEE
  9360                           wreg	equ	0xFE8
  9361                           indf1	equ	0xFE7
  9362                           postdec1	equ	0xFE5
  9363                           fsr1h	equ	0xFE2
  9364                           fsr1l	equ	0xFE1
  9365                           indf2	equ	0xFDF
  9366                           postinc2	equ	0xFDE
  9367                           postdec2	equ	0xFDD
  9368                           plusw2	equ	0xFDB
  9369                           fsr2h	equ	0xFDA
  9370                           fsr2l	equ	0xFD9
  9371                           status	equ	0xFD8
  9372                           
  9373 ;; *************** function _HMI_GetBar *****************
  9374 ;; Defined at:
  9375 ;;		line 209 in file "HMI.c"
  9376 ;; Parameters:    Size  Location     Type
  9377 ;;		None
  9378 ;; Auto vars:     Size  Location     Type
  9379 ;;		None
  9380 ;; Return value:  Size  Location     Type
  9381 ;;                  1    wreg      unsigned char 
  9382 ;; Registers used:
  9383 ;;		wreg, status,2
  9384 ;; Tracked objects:
  9385 ;;		On entry : 0/0
  9386 ;;		On exit  : 0/0
  9387 ;;		Unchanged: 0/0
  9388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9390 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9392 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9393 ;;Total ram usage:        0 bytes
  9394 ;; Hardware stack levels used:    1
  9395 ;; Hardware stack levels required when called:    7
  9396 ;; This function calls:
  9397 ;;		Nothing
  9398 ;; This function is called by:
  9399 ;;		_Event_DIPSwitch
  9400 ;;		_Event_HMI_DIPSwitch
  9401 ;; This function uses a non-reentrant model
  9402 ;;
  9403                           
  9404                           	psect	text46
  9405  0000'                    __ptext46:
  9406                           	opt stack 0
  9407  0000'                    _HMI_GetBar:
  9408                           	opt stack 19
  9409                           
  9410                           ;HMI.c: 211: return HMIBoard.pBarGraph;
  9411                           
  9412                           ;incstack = 0
  9413  0000' 0103               	movlb	3	; () banked
  9414  0002' 5100'              	movf	(_HMIBoard+7)& (0+255),w,b
  9415  0004' 0012               	return	
  9416  0006'                    __end_of_HMI_GetBar:
  9417                           	opt stack 0
  9418                           tosu	equ	0xFFF
  9419                           tosh	equ	0xFFE
  9420                           tosl	equ	0xFFD
  9421                           pclath	equ	0xFFA
  9422                           tblptru	equ	0xFF8
  9423                           tblptrh	equ	0xFF7
  9424                           tblptrl	equ	0xFF6
  9425                           tablat	equ	0xFF5
  9426                           prodh	equ	0xFF4
  9427                           prodl	equ	0xFF3
  9428                           postinc0	equ	0xFEE
  9429                           wreg	equ	0xFE8
  9430                           indf1	equ	0xFE7
  9431                           postdec1	equ	0xFE5
  9432                           fsr1h	equ	0xFE2
  9433                           fsr1l	equ	0xFE1
  9434                           indf2	equ	0xFDF
  9435                           postinc2	equ	0xFDE
  9436                           postdec2	equ	0xFDD
  9437                           plusw2	equ	0xFDB
  9438                           fsr2h	equ	0xFDA
  9439                           fsr2l	equ	0xFD9
  9440                           status	equ	0xFD8
  9441                           
  9442 ;; *************** function _Console_Render *****************
  9443 ;; Defined at:
  9444 ;;		line 377 in file "Library/Console.c"
  9445 ;; Parameters:    Size  Location     Type
  9446 ;;		None
  9447 ;; Auto vars:     Size  Location     Type
  9448 ;;  lCursor         4   38[BANK0 ] struct Point
  9449 ;;  y               1   43[BANK0 ] unsigned char 
  9450 ;;  x               1   42[BANK0 ] unsigned char 
  9451 ;;  temp            1   37[BANK0 ] unsigned char 
  9452 ;;  Temp            2    0        unsigned short 
  9453 ;; Return value:  Size  Location     Type
  9454 ;;                  1    wreg      void 
  9455 ;; Registers used:
  9456 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9457 ;; Tracked objects:
  9458 ;;		On entry : 0/0
  9459 ;;		On exit  : 0/0
  9460 ;;		Unchanged: 0/0
  9461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9463 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9464 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9465 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9466 ;;Total ram usage:        9 bytes
  9467 ;; Hardware stack levels used:    1
  9468 ;; Hardware stack levels required when called:   11
  9469 ;; This function calls:
  9470 ;;		_Console_MakeField
  9471 ;;		_LCD_DrawField
  9472 ;;		_LCD_FillRectangle
  9473 ;; This function is called by:
  9474 ;;		_mode2
  9475 ;; This function uses a non-reentrant model
  9476 ;;
  9477                           
  9478                           	psect	text47
  9479  0000'                    __ptext47:
  9480                           	opt stack 0
  9481  0000'                    _Console_Render:
  9482                           	opt stack 18
  9483                           
  9484                           ;Console.c: 379: Colour Temp;
  9485                           ;Console.c: 380: if (change)
  9486                           
  9487                           ; BSR set to: 3
  9488                           ;incstack = 0
  9489  0000' 0100               	movlb	0	; () banked
  9490  0002' 5100'              	movf	_change& (0+255),w,b
  9491  0004' B4D8               	btfsc	status,2,c
  9492  0006' 0012               	return	
  9493                           
  9494                           ; BSR set to: 0
  9495                           ;Console.c: 381: {
  9496                           ;Console.c: 382: UINT8 x, y, temp;
  9497                           ;Console.c: 383: Point lCursor = {6,6};
  9498  0008' C000' F026'        	movff	Console_Render@F6956,Console_Render@lCursor
  9499  000C' C001' F027'        	movff	Console_Render@F6956+1,Console_Render@lCursor+1
  9500  0010' C002' F028'        	movff	Console_Render@F6956+2,Console_Render@lCursor+2
  9501  0014' C003' F029'        	movff	Console_Render@F6956+3,Console_Render@lCursor+3
  9502                           
  9503                           ; BSR set to: 0
  9504                           ;Console.c: 385: if (clearall)
  9505  0018' 0100               	movlb	0	; () banked
  9506  001A' 5100'              	movf	_clearall& (0+255),w,b
  9507  001C' B4D8               	btfsc	status,2,c
  9508  001E' D005               	goto	l1056
  9509                           
  9510                           ; BSR set to: 0
  9511                           ;Console.c: 386: {
  9512                           ;Console.c: 389: temp = lBufferY;
  9513  0020' C032' F025'        	movff	_lBufferY,Console_Render@temp
  9514                           
  9515                           ; BSR set to: 0
  9516                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
  9517  0024' 0E0F               	movlw	15
  9518  0026' 0100               	movlb	0	; () banked
  9519  0028' 6F00'              	movwf	_lBufferY& (0+255),b
  9520  002A'                    l1056:
  9521                           
  9522                           ; BSR set to: 0
  9523                           ;Console.c: 391: }
  9524                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
  9525  002A' 0E00               	movlw	0
  9526  002C' 0100               	movlb	0	; () banked
  9527  002E' 6F00'              	movwf	Console_Render@y& (0+255),b
  9528  0030' D0DF               	goto	l1057
  9529  0032'                    
  9530                           ; BSR set to: 0
  9531                           ;Console.c: 394: {
  9532                           ;Console.c: 395: gForecolour = lCBuffer[y];
  9533                           
  9534                           ; BSR set to: 0
  9535  0032' 0100               	movlb	0	; () banked
  9536  0034' 5100'              	movf	Console_Render@y& (0+255),w,b
  9537  0036' 0D02               	mullw	2
  9538  0038' 0E00'              	movlw	low _lCBuffer
  9539  003A' 24F3               	addwf	prodl,w,c
  9540  003C' 6ED9               	movwf	fsr2l,c
  9541  003E' 0E00'              	movlw	high _lCBuffer
  9542  0040' 20F4               	addwfc	prodh,w,c
  9543  0042' 6EDA               	movwf	fsr2h,c
  9544  0044' CFDE F004'         	movff	postinc2,_gForecolour
  9545  0048' CFDD F005'         	movff	postdec2,_gForecolour+1
  9546                           
  9547                           ; BSR set to: 0
  9548                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
  9549  004C' 0E00               	movlw	0
  9550  004E' 0100               	movlb	0	; () banked
  9551  0050' 6F00'              	movwf	Console_Render@x& (0+255),b
  9552  0052'                    l12293:
  9553                           
  9554                           ; BSR set to: 0
  9555  0052' 0E13               	movlw	19
  9556  0054' 0100               	movlb	0	; () banked
  9557  0056' 6500'              	cpfsgt	Console_Render@x& (0+255),b
  9558  0058' D001               	goto	l1059
  9559  005A' D0BE               	goto	u8230
  9560  005C'                    l1059:
  9561                           
  9562                           ; BSR set to: 0
  9563                           ;Console.c: 397: {
  9564                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
  9565                           
  9566                           ; BSR set to: 0
  9567  005C' 0100               	movlb	0	; () banked
  9568  005E' 5100'              	movf	Console_Render@y& (0+255),w,b
  9569  0060' 0D14               	mullw	20
  9570  0062' 0E00'              	movlw	low _lBuffer
  9571  0064' 0100               	movlb	0	; () banked
  9572  0066' 6F00'              	movwf	??_Console_Render& (0+255),b
  9573  0068' 0E00'              	movlw	high _lBuffer
  9574  006A' 0100               	movlb	0	; () banked
  9575  006C' 6F00'              	movwf	(??_Console_Render+1)& (0+255),b
  9576  006E' 50F3               	movf	prodl,w,c
  9577  0070' 0100               	movlb	0	; () banked
  9578  0072' 2700'              	addwf	??_Console_Render& (0+255),f,b
  9579  0074' 50F4               	movf	prodh,w,c
  9580  0076' 0100               	movlb	0	; () banked
  9581  0078' 2300'              	addwfc	(??_Console_Render+1)& (0+255),f,b
  9582  007A' 0100               	movlb	0	; () banked
  9583  007C' 5100'              	movf	Console_Render@x& (0+255),w,b
  9584  007E' 0D01               	mullw	1
  9585  0080' 50F3               	movf	prodl,w,c
  9586  0082' 0100               	movlb	0	; () banked
  9587  0084' 2500'              	addwf	??_Console_Render& (0+255),w,b
  9588  0086' 6ED9               	movwf	fsr2l,c
  9589  0088' 50F4               	movf	prodh,w,c
  9590  008A' 0100               	movlb	0	; () banked
  9591  008C' 2100'              	addwfc	(??_Console_Render+1)& (0+255),w,b
  9592  008E' 6EDA               	movwf	fsr2h,c
  9593  0090' AEDF               	btfss	indf2,7,c
  9594  0092' D09A               	goto	l1063
  9595                           
  9596                           ; BSR set to: 0
  9597                           ;Console.c: 399: {
  9598                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
  9599  0094' 0100               	movlb	0	; () banked
  9600  0096' 5100'              	movf	Console_Render@y& (0+255),w,b
  9601  0098' 0D14               	mullw	20
  9602  009A' 0E00'              	movlw	low _lBuffer
  9603  009C' 0100               	movlb	0	; () banked
  9604  009E' 6F00'              	movwf	??_Console_Render& (0+255),b
  9605  00A0' 0E00'              	movlw	high _lBuffer
  9606  00A2' 0100               	movlb	0	; () banked
  9607  00A4' 6F00'              	movwf	(??_Console_Render+1)& (0+255),b
  9608  00A6' 50F3               	movf	prodl,w,c
  9609  00A8' 0100               	movlb	0	; () banked
  9610  00AA' 2700'              	addwf	??_Console_Render& (0+255),f,b
  9611  00AC' 50F4               	movf	prodh,w,c
  9612  00AE' 0100               	movlb	0	; () banked
  9613  00B0' 2300'              	addwfc	(??_Console_Render+1)& (0+255),f,b
  9614  00B2' 0100               	movlb	0	; () banked
  9615  00B4' 5100'              	movf	Console_Render@x& (0+255),w,b
  9616  00B6' 0D01               	mullw	1
  9617  00B8' 50F3               	movf	prodl,w,c
  9618  00BA' 0100               	movlb	0	; () banked
  9619  00BC' 2500'              	addwf	??_Console_Render& (0+255),w,b
  9620  00BE' 6ED9               	movwf	fsr2l,c
  9621  00C0' 50F4               	movf	prodh,w,c
  9622  00C2' 0100               	movlb	0	; () banked
  9623  00C4' 2100'              	addwfc	(??_Console_Render+1)& (0+255),w,b
  9624  00C6' 6EDA               	movwf	fsr2h,c
  9625  00C8' 0E7F               	movlw	127
  9626  00CA' 16DF               	andwf	indf2,f,c
  9627                           
  9628                           ;Console.c: 401: if (lBuffer[y][x])
  9629  00CC' 0100               	movlb	0	; () banked
  9630  00CE' 5100'              	movf	Console_Render@y& (0+255),w,b
  9631  00D0' 0D14               	mullw	20
  9632  00D2' 0E00'              	movlw	low _lBuffer
  9633  00D4' 0100               	movlb	0	; () banked
  9634  00D6' 6F00'              	movwf	??_Console_Render& (0+255),b
  9635  00D8' 0E00'              	movlw	high _lBuffer
  9636  00DA' 0100               	movlb	0	; () banked
  9637  00DC' 6F00'              	movwf	(??_Console_Render+1)& (0+255),b
  9638  00DE' 50F3               	movf	prodl,w,c
  9639  00E0' 0100               	movlb	0	; () banked
  9640  00E2' 2700'              	addwf	??_Console_Render& (0+255),f,b
  9641  00E4' 50F4               	movf	prodh,w,c
  9642  00E6' 0100               	movlb	0	; () banked
  9643  00E8' 2300'              	addwfc	(??_Console_Render+1)& (0+255),f,b
  9644  00EA' 0100               	movlb	0	; () banked
  9645  00EC' 5100'              	movf	Console_Render@x& (0+255),w,b
  9646  00EE' 0D01               	mullw	1
  9647  00F0' 50F3               	movf	prodl,w,c
  9648  00F2' 0100               	movlb	0	; () banked
  9649  00F4' 2500'              	addwf	??_Console_Render& (0+255),w,b
  9650  00F6' 6ED9               	movwf	fsr2l,c
  9651  00F8' 50F4               	movf	prodh,w,c
  9652  00FA' 0100               	movlb	0	; () banked
  9653  00FC' 2100'              	addwfc	(??_Console_Render+1)& (0+255),w,b
  9654  00FE' 6EDA               	movwf	fsr2h,c
  9655  0100' 50DF               	movf	indf2,w,c
  9656  0102' B4D8               	btfsc	status,2,c
  9657  0104' D04A               	goto	l1062
  9658                           
  9659                           ; BSR set to: 0
  9660                           ;Console.c: 402: {
  9661                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
  9662  0106' C027' F009'        	movff	_gBackcolour,LCD_FillRectangle@pColour
  9663  010A' C028' F00A'        	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
  9664  010E' C026' F00B'        	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
  9665  0112' C027' F00C'        	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
  9666  0116' C028' F00D'        	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
  9667  011A' C029' F00E'        	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
  9668  011E' C000' F00F'        	movff	_gCharSize,LCD_FillRectangle@pSize
  9669  0122' C001' F010'        	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
  9670  0126' C002' F011'        	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
  9671  012A' C003' F012'        	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
  9672  012E' EC00' F000'        	call	_LCD_FillRectangle	;wreg free
  9673                           
  9674                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
  9675  0132' 0100               	movlb	0	; () banked
  9676  0134' 5100'              	movf	Console_Render@y& (0+255),w,b
  9677  0136' 0D14               	mullw	20
  9678  0138' 0E00'              	movlw	low _lBuffer
  9679  013A' 0100               	movlb	0	; () banked
  9680  013C' 6F00'              	movwf	??_Console_Render& (0+255),b
  9681  013E' 0E00'              	movlw	high _lBuffer
  9682  0140' 0100               	movlb	0	; () banked
  9683  0142' 6F00'              	movwf	(??_Console_Render+1)& (0+255),b
  9684  0144' 50F3               	movf	prodl,w,c
  9685  0146' 0100               	movlb	0	; () banked
  9686  0148' 2700'              	addwf	??_Console_Render& (0+255),f,b
  9687  014A' 50F4               	movf	prodh,w,c
  9688  014C' 0100               	movlb	0	; () banked
  9689  014E' 2300'              	addwfc	(??_Console_Render+1)& (0+255),f,b
  9690  0150' 0100               	movlb	0	; () banked
  9691  0152' 5100'              	movf	Console_Render@x& (0+255),w,b
  9692  0154' 0D01               	mullw	1
  9693  0156' 50F3               	movf	prodl,w,c
  9694  0158' 0100               	movlb	0	; () banked
  9695  015A' 2500'              	addwf	??_Console_Render& (0+255),w,b
  9696  015C' 6ED9               	movwf	fsr2l,c
  9697  015E' 50F4               	movf	prodh,w,c
  9698  0160' 0100               	movlb	0	; () banked
  9699  0162' 2100'              	addwfc	(??_Console_Render+1)& (0+255),w,b
  9700  0164' 6EDA               	movwf	fsr2h,c
  9701  0166' 50DF               	movf	indf2,w,c
  9702  0168' EC00' F000'        	call	_Console_MakeField
  9703  016C' C005' F012'        	movff	?_Console_MakeField,LCD_DrawField@pField
  9704  0170' C006' F013'        	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
  9705  0174' C026' F014'        	movff	Console_Render@lCursor,LCD_DrawField@pPoint
  9706  0178' C027' F015'        	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
  9707  017C' C028' F016'        	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
  9708  0180' C029' F017'        	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
  9709  0184' C000' F018'        	movff	_gCharSize,LCD_DrawField@pSize
  9710  0188' C001' F019'        	movff	_gCharSize+1,LCD_DrawField@pSize+1
  9711  018C' C002' F01A'        	movff	_gCharSize+2,LCD_DrawField@pSize+2
  9712  0190' C003' F01B'        	movff	_gCharSize+3,LCD_DrawField@pSize+3
  9713  0194' EC00' F000'        	call	_LCD_DrawField	;wreg free
  9714                           
  9715                           ;Console.c: 405: }
  9716  0198' D017               	goto	l1063
  9717  019A'                    l1062:
  9718                           
  9719                           ;Console.c: 406: else
  9720                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
  9721  019A' 0E00               	movlw	0
  9722  019C' 0100               	movlb	0	; () banked
  9723  019E' 6F00'              	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
  9724  01A0' 0E00               	movlw	0
  9725  01A2' 6F00'              	movwf	LCD_FillRectangle@pColour& (0+255),b
  9726  01A4' C026' F00B'        	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
  9727  01A8' C027' F00C'        	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
  9728  01AC' C028' F00D'        	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
  9729  01B0' C029' F00E'        	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
  9730  01B4' C000' F00F'        	movff	_gCharSize,LCD_FillRectangle@pSize
  9731  01B8' C001' F010'        	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
  9732  01BC' C002' F011'        	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
  9733  01C0' C003' F012'        	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
  9734  01C4' EC00' F000'        	call	_LCD_FillRectangle	;wreg free
  9735  01C8'                    l1063:
  9736                           
  9737                           ;Console.c: 408: }
  9738                           ;Console.c: 409: lCursor.x += (5 + 1);
  9739  01C8' 0E06               	movlw	6
  9740  01CA' 0100               	movlb	0	; () banked
  9741  01CC' 2700'              	addwf	Console_Render@lCursor& (0+255),f,b
  9742  01CE' 0E00               	movlw	0
  9743  01D0' 2300'              	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
  9744                           
  9745                           ; BSR set to: 0
  9746  01D2' 0100               	movlb	0	; () banked
  9747  01D4' 2B00'              	incf	Console_Render@x& (0+255),f,b
  9748  01D6' D73D               	goto	l12293
  9749  01D8'                    u8230:
  9750                           
  9751                           ; BSR set to: 0
  9752                           ;Console.c: 410: }
  9753                           ;Console.c: 411: lCursor.y += (7 + 1);
  9754                           
  9755                           ; BSR set to: 0
  9756  01D8' 0E08               	movlw	8
  9757  01DA' 0100               	movlb	0	; () banked
  9758  01DC' 2700'              	addwf	(Console_Render@lCursor+2)& (0+255),f,b
  9759  01DE' 0E00               	movlw	0
  9760  01E0' 2300'              	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
  9761                           
  9762                           ; BSR set to: 0
  9763                           ;Console.c: 412: lCursor.x = 6;
  9764  01E2' 0E00               	movlw	0
  9765  01E4' 0100               	movlb	0	; () banked
  9766  01E6' 6F00'              	movwf	(Console_Render@lCursor+1)& (0+255),b
  9767  01E8' 0E06               	movlw	6
  9768  01EA' 6F00'              	movwf	Console_Render@lCursor& (0+255),b
  9769                           
  9770                           ; BSR set to: 0
  9771  01EC' 0100               	movlb	0	; () banked
  9772  01EE' 2B00'              	incf	Console_Render@y& (0+255),f,b
  9773  01F0'                    l1057:
  9774                           
  9775                           ; BSR set to: 0
  9776                           
  9777                           ; BSR set to: 0
  9778  01F0' 0100               	movlb	0	; () banked
  9779  01F2' 5100'              	movf	Console_Render@y& (0+255),w,b
  9780  01F4' 0100               	movlb	0	; () banked
  9781  01F6' 5D00'              	subwf	_lBufferY& (0+255),w,b
  9782  01F8' B0D8               	btfsc	status,0,c
  9783  01FA' D71B               	goto	l1058
  9784                           
  9785                           ; BSR set to: 0
  9786                           ;Console.c: 413: }
  9787                           ;Console.c: 415: if (clearall)
  9788                           
  9789                           ; BSR set to: 0
  9790  01FC' 0100               	movlb	0	; () banked
  9791  01FE' 5100'              	movf	_clearall& (0+255),w,b
  9792  0200' B4D8               	btfsc	status,2,c
  9793  0202' 0012               	return	
  9794                           
  9795                           ; BSR set to: 0
  9796                           ;Console.c: 416: {
  9797                           ;Console.c: 417: clearall = 0;
  9798  0204' 0E00               	movlw	0
  9799  0206' 0100               	movlb	0	; () banked
  9800  0208' 6F00'              	movwf	_clearall& (0+255),b
  9801                           
  9802                           ; BSR set to: 0
  9803                           ;Console.c: 418: lBufferY = temp;
  9804  020A' C025' F032'        	movff	Console_Render@temp,_lBufferY
  9805                           
  9806                           ; BSR set to: 0
  9807  020E' 0012               	return	
  9808  0210'                    __end_of_Console_Render:
  9809                           	opt stack 0
  9810                           tosu	equ	0xFFF
  9811                           tosh	equ	0xFFE
  9812                           tosl	equ	0xFFD
  9813                           pclath	equ	0xFFA
  9814                           tblptru	equ	0xFF8
  9815                           tblptrh	equ	0xFF7
  9816                           tblptrl	equ	0xFF6
  9817                           tablat	equ	0xFF5
  9818                           prodh	equ	0xFF4
  9819                           prodl	equ	0xFF3
  9820                           postinc0	equ	0xFEE
  9821                           wreg	equ	0xFE8
  9822                           indf1	equ	0xFE7
  9823                           postdec1	equ	0xFE5
  9824                           fsr1h	equ	0xFE2
  9825                           fsr1l	equ	0xFE1
  9826                           indf2	equ	0xFDF
  9827                           postinc2	equ	0xFDE
  9828                           postdec2	equ	0xFDD
  9829                           plusw2	equ	0xFDB
  9830                           fsr2h	equ	0xFDA
  9831                           fsr2l	equ	0xFD9
  9832                           status	equ	0xFD8
  9833                           
  9834 ;; *************** function _LCD_FillRectangle *****************
  9835 ;; Defined at:
  9836 ;;		line 318 in file "Library/LCD.c"
  9837 ;; Parameters:    Size  Location     Type
  9838 ;;  pColour         2    9[BANK0 ] unsigned short 
  9839 ;;  pPoint          4   11[BANK0 ] struct Point
  9840 ;;  pSize           4   15[BANK0 ] struct Point
  9841 ;; Auto vars:     Size  Location     Type
  9842 ;;  j               1   22[BANK0 ] unsigned char 
  9843 ;;  i               1   21[BANK0 ] unsigned char 
  9844 ;; Return value:  Size  Location     Type
  9845 ;;                  1    wreg      void 
  9846 ;; Registers used:
  9847 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9848 ;; Tracked objects:
  9849 ;;		On entry : 0/0
  9850 ;;		On exit  : 0/0
  9851 ;;		Unchanged: 0/0
  9852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9853 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9854 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9855 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9856 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9857 ;;Total ram usage:       14 bytes
  9858 ;; Hardware stack levels used:    1
  9859 ;; Hardware stack levels required when called:   10
  9860 ;; This function calls:
  9861 ;;		_LCD_Word_Write
  9862 ;;		_Set_Addr_Window
  9863 ;; This function is called by:
  9864 ;;		_Console_Render
  9865 ;;		_Console_ClearLine
  9866 ;; This function uses a non-reentrant model
  9867 ;;
  9868                           
  9869                           	psect	text48
  9870  0000'                    __ptext48:
  9871                           	opt stack 0
  9872  0000'                    _LCD_FillRectangle:
  9873                           	opt stack 18
  9874                           
  9875                           ;LCD.c: 320: UINT8 i = 0x00;
  9876                           
  9877                           ; BSR set to: 0
  9878                           ;incstack = 0
  9879  0000' 0E00               	movlw	0
  9880  0002' 0100               	movlb	0	; () banked
  9881  0004' 6F00'              	movwf	LCD_FillRectangle@i& (0+255),b
  9882                           
  9883                           ;LCD.c: 321: UINT8 j = 0x00;
  9884  0006' 0E00               	movlw	0
  9885  0008' 0100               	movlb	0	; () banked
  9886  000A' 6F00'              	movwf	LCD_FillRectangle@j& (0+255),b
  9887                           
  9888                           ; BSR set to: 0
  9889                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
  9890  000C' C00D' F005'        	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
  9891  0010' 0100               	movlb	0	; () banked
  9892  0012' 5100'              	movf	LCD_FillRectangle@pPoint& (0+255),w,b
  9893  0014' 0100               	movlb	0	; () banked
  9894  0016' 2500'              	addwf	LCD_FillRectangle@pSize& (0+255),w,b
  9895  0018' 0100               	movlb	0	; () banked
  9896  001A' 6F00'              	movwf	??_LCD_FillRectangle& (0+255),b
  9897  001C' 0100               	movlb	0	; () banked
  9898  001E' 0500'              	decf	??_LCD_FillRectangle& (0+255),w,b
  9899  0020' 0100               	movlb	0	; () banked
  9900  0022' 6F00'              	movwf	Set_Addr_Window@xe& (0+255),b
  9901  0024' 0100               	movlb	0	; () banked
  9902  0026' 5100'              	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
  9903  0028' 0100               	movlb	0	; () banked
  9904  002A' 2500'              	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
  9905  002C' 0100               	movlb	0	; () banked
  9906  002E' 6F00'              	movwf	(??_LCD_FillRectangle+1)& (0+255),b
  9907  0030' 0100               	movlb	0	; () banked
  9908  0032' 0500'              	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
  9909  0034' 0100               	movlb	0	; () banked
  9910  0036' 6F00'              	movwf	Set_Addr_Window@ye& (0+255),b
  9911  0038' 0100               	movlb	0	; () banked
  9912  003A' 5100'              	movf	LCD_FillRectangle@pPoint& (0+255),w,b
  9913  003C' EC00' F000'        	call	_Set_Addr_Window
  9914                           
  9915                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
  9916  0040' C011' F016'        	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
  9917  0044'                    l11993:
  9918  0044' 0100               	movlb	0	; () banked
  9919  0046' 5100'              	movf	LCD_FillRectangle@j& (0+255),w,b
  9920  0048' 0100               	movlb	0	; () banked
  9921  004A' B4D8               	btfsc	status,2,c
  9922  004C' 0012               	return	
  9923                           
  9924                           ; BSR set to: 0
  9925                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
  9926                           
  9927                           ; BSR set to: 0
  9928  004E' C00F' F015'        	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
  9929  0052'                    l11997:
  9930                           
  9931                           ; BSR set to: 0
  9932  0052' 0100               	movlb	0	; () banked
  9933  0054' 5100'              	movf	LCD_FillRectangle@i& (0+255),w,b
  9934  0056' 0100               	movlb	0	; () banked
  9935  0058' B4D8               	btfsc	status,2,c
  9936  005A' D009               	goto	u7880
  9937                           
  9938                           ; BSR set to: 0
  9939                           ;LCD.c: 333: LCD_Word_Write(pColour);
  9940                           
  9941                           ; BSR set to: 0
  9942                           
  9943                           ; BSR set to: 0
  9944  005C' C009' F005'        	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
  9945  0060' C00A' F006'        	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
  9946  0064' EC00' F000'        	call	_LCD_Word_Write	;wreg free
  9947  0068' 0100               	movlb	0	; () banked
  9948  006A' 0700'              	decf	LCD_FillRectangle@i& (0+255),f,b
  9949  006C' D7F2               	goto	l11997
  9950  006E'                    u7880:
  9951                           
  9952                           ; BSR set to: 0
  9953                           
  9954                           ; BSR set to: 0
  9955  006E' 0100               	movlb	0	; () banked
  9956  0070' 0700'              	decf	LCD_FillRectangle@j& (0+255),f,b
  9957  0072' D7E8               	goto	l11993
  9958  0074'                    __end_of_LCD_FillRectangle:
  9959                           	opt stack 0
  9960                           tosu	equ	0xFFF
  9961                           tosh	equ	0xFFE
  9962                           tosl	equ	0xFFD
  9963                           pclath	equ	0xFFA
  9964                           tblptru	equ	0xFF8
  9965                           tblptrh	equ	0xFF7
  9966                           tblptrl	equ	0xFF6
  9967                           tablat	equ	0xFF5
  9968                           prodh	equ	0xFF4
  9969                           prodl	equ	0xFF3
  9970                           postinc0	equ	0xFEE
  9971                           wreg	equ	0xFE8
  9972                           indf1	equ	0xFE7
  9973                           postdec1	equ	0xFE5
  9974                           fsr1h	equ	0xFE2
  9975                           fsr1l	equ	0xFE1
  9976                           indf2	equ	0xFDF
  9977                           postinc2	equ	0xFDE
  9978                           postdec2	equ	0xFDD
  9979                           plusw2	equ	0xFDB
  9980                           fsr2h	equ	0xFDA
  9981                           fsr2l	equ	0xFD9
  9982                           status	equ	0xFD8
  9983                           
  9984 ;; *************** function _LCD_DrawField *****************
  9985 ;; Defined at:
  9986 ;;		line 393 in file "Library/LCD.c"
  9987 ;; Parameters:    Size  Location     Type
  9988 ;;  pField          2   18[BANK0 ] PTR unsigned short 
  9989 ;;		 -> Console_MakeField@Fill(70), 
  9990 ;;  pPoint          4   20[BANK0 ] struct Point
  9991 ;;  pSize           4   24[BANK0 ] struct Point
  9992 ;; Auto vars:     Size  Location     Type
  9993 ;;  count           2   30[BANK0 ] unsigned short 
  9994 ;;  i               1   34[BANK0 ] unsigned char 
  9995 ;;  ymax            1   33[BANK0 ] unsigned char 
  9996 ;;  xmax            1   32[BANK0 ] unsigned char 
  9997 ;; Return value:  Size  Location     Type
  9998 ;;                  1    wreg      void 
  9999 ;; Registers used:
 10000 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10001 ;; Tracked objects:
 10002 ;;		On entry : 0/0
 10003 ;;		On exit  : 0/0
 10004 ;;		Unchanged: 0/0
 10005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10006 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10007 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10008 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10009 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10010 ;;Total ram usage:       17 bytes
 10011 ;; Hardware stack levels used:    1
 10012 ;; Hardware stack levels required when called:   10
 10013 ;; This function calls:
 10014 ;;		_LCD_Word_Write
 10015 ;;		_Set_Addr_Window
 10016 ;;		___wmul
 10017 ;; This function is called by:
 10018 ;;		_Console_Render
 10019 ;; This function uses a non-reentrant model
 10020 ;;
 10021                           
 10022                           	psect	text49
 10023  0000'                    __ptext49:
 10024                           	opt stack 0
 10025  0000'                    _LCD_DrawField:
 10026                           	opt stack 18
 10027                           
 10028                           ;LCD.c: 396: UINT8 i = 0x00;
 10029                           
 10030                           ; BSR set to: 0
 10031                           ;incstack = 0
 10032  0000' 0E00               	movlw	0
 10033  0002' 0100               	movlb	0	; () banked
 10034  0004' 6F00'              	movwf	LCD_DrawField@i& (0+255),b
 10035                           
 10036                           ; BSR set to: 0
 10037                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
 10038  0006' 0100               	movlb	0	; () banked
 10039  0008' 5100'              	movf	LCD_DrawField@pPoint& (0+255),w,b
 10040  000A' 0100               	movlb	0	; () banked
 10041  000C' 2500'              	addwf	LCD_DrawField@pSize& (0+255),w,b
 10042  000E' 0100               	movlb	0	; () banked
 10043  0010' 6F00'              	movwf	LCD_DrawField@xmax& (0+255),b
 10044                           
 10045                           ; BSR set to: 0
 10046                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
 10047  0012' 0100               	movlb	0	; () banked
 10048  0014' 5100'              	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
 10049  0016' 0100               	movlb	0	; () banked
 10050  0018' 2500'              	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
 10051  001A' 0100               	movlb	0	; () banked
 10052  001C' 6F00'              	movwf	LCD_DrawField@ymax& (0+255),b
 10053                           
 10054                           ; BSR set to: 0
 10055                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
 10056  001E' C01A' F000'        	movff	LCD_DrawField@pSize+2,___wmul@multiplier
 10057  0022' C01B' F001'        	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
 10058  0026' C018' F002'        	movff	LCD_DrawField@pSize,___wmul@multiplicand
 10059  002A' C019' F003'        	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
 10060  002E' EC00' F000'        	call	___wmul	;wreg free
 10061  0032' C000' F01E'        	movff	?___wmul,LCD_DrawField@count
 10062  0036' C001' F01F'        	movff	?___wmul+1,LCD_DrawField@count+1
 10063                           
 10064                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
 10065  003A' C016' F005'        	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
 10066  003E' 0100               	movlb	0	; () banked
 10067  0040' 0500'              	decf	LCD_DrawField@xmax& (0+255),w,b
 10068  0042' 0100               	movlb	0	; () banked
 10069  0044' 6F00'              	movwf	Set_Addr_Window@xe& (0+255),b
 10070  0046' 0100               	movlb	0	; () banked
 10071  0048' 0500'              	decf	LCD_DrawField@ymax& (0+255),w,b
 10072  004A' 0100               	movlb	0	; () banked
 10073  004C' 6F00'              	movwf	Set_Addr_Window@ye& (0+255),b
 10074  004E' 0100               	movlb	0	; () banked
 10075  0050' 5100'              	movf	LCD_DrawField@pPoint& (0+255),w,b
 10076  0052' EC00' F000'        	call	_Set_Addr_Window
 10077                           
 10078                           ;LCD.c: 403: for(i = 0; i < count; i++)
 10079  0056' 0E00               	movlw	0
 10080  0058' 0100               	movlb	0	; () banked
 10081  005A' 6F00'              	movwf	LCD_DrawField@i& (0+255),b
 10082  005C' D013               	goto	l183
 10083  005E'                    
 10084                           ; BSR set to: 0
 10085                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
 10086                           
 10087                           ; BSR set to: 0
 10088  005E' 0100               	movlb	0	; () banked
 10089  0060' 5100'              	movf	LCD_DrawField@i& (0+255),w,b
 10090  0062' 0D02               	mullw	2
 10091  0064' 50F3               	movf	prodl,w,c
 10092  0066' 0100               	movlb	0	; () banked
 10093  0068' 2500'              	addwf	LCD_DrawField@pField& (0+255),w,b
 10094  006A' 6ED9               	movwf	fsr2l,c
 10095  006C' 50F4               	movf	prodh,w,c
 10096  006E' 0100               	movlb	0	; () banked
 10097  0070' 2100'              	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
 10098  0072' 6EDA               	movwf	fsr2h,c
 10099  0074' CFDE F005'         	movff	postinc2,LCD_Word_Write@value
 10100  0078' CFDD F006'         	movff	postdec2,LCD_Word_Write@value+1
 10101  007C' EC00' F000'        	call	_LCD_Word_Write	;wreg free
 10102  0080' 0100               	movlb	0	; () banked
 10103  0082' 2B00'              	incf	LCD_DrawField@i& (0+255),f,b
 10104  0084'                    l183:
 10105                           
 10106                           ; BSR set to: 0
 10107                           
 10108                           ; BSR set to: 0
 10109  0084' 0100               	movlb	0	; () banked
 10110  0086' 5100'              	movf	LCD_DrawField@i& (0+255),w,b
 10111  0088' 0100               	movlb	0	; () banked
 10112  008A' 6F00'              	movwf	??_LCD_DrawField& (0+255),b
 10113  008C' 6B00'              	clrf	(??_LCD_DrawField+1)& (0+255),b
 10114  008E' 0100               	movlb	0	; () banked
 10115  0090' 5100'              	movf	LCD_DrawField@count& (0+255),w,b
 10116  0092' 0100               	movlb	0	; () banked
 10117  0094' 5D00'              	subwf	??_LCD_DrawField& (0+255),w,b
 10118  0096' 0100               	movlb	0	; () banked
 10119  0098' 5100'              	movf	(LCD_DrawField@count+1)& (0+255),w,b
 10120  009A' 0100               	movlb	0	; () banked
 10121  009C' 5900'              	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
 10122  009E' B0D8               	btfsc	status,0,c
 10123  00A0' 0012               	return	
 10124  00A2' D7DD               	goto	l184
 10125  00A4'                    __end_of_LCD_DrawField:
 10126                           	opt stack 0
 10127                           tosu	equ	0xFFF
 10128                           tosh	equ	0xFFE
 10129                           tosl	equ	0xFFD
 10130                           pclath	equ	0xFFA
 10131                           tblptru	equ	0xFF8
 10132                           tblptrh	equ	0xFF7
 10133                           tblptrl	equ	0xFF6
 10134                           tablat	equ	0xFF5
 10135                           prodh	equ	0xFF4
 10136                           prodl	equ	0xFF3
 10137                           postinc0	equ	0xFEE
 10138                           wreg	equ	0xFE8
 10139                           indf1	equ	0xFE7
 10140                           postdec1	equ	0xFE5
 10141                           fsr1h	equ	0xFE2
 10142                           fsr1l	equ	0xFE1
 10143                           indf2	equ	0xFDF
 10144                           postinc2	equ	0xFDE
 10145                           postdec2	equ	0xFDD
 10146                           plusw2	equ	0xFDB
 10147                           fsr2h	equ	0xFDA
 10148                           fsr2l	equ	0xFD9
 10149                           status	equ	0xFD8
 10150                           
 10151 ;; *************** function ___wmul *****************
 10152 ;; Defined at:
 10153 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
 10154 ;; Parameters:    Size  Location     Type
 10155 ;;  multiplier      2    0[BANK0 ] unsigned int 
 10156 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 10157 ;; Auto vars:     Size  Location     Type
 10158 ;;  product         2    4[BANK0 ] unsigned int 
 10159 ;; Return value:  Size  Location     Type
 10160 ;;                  2    0[BANK0 ] unsigned int 
 10161 ;; Registers used:
 10162 ;;		wreg, status,2, status,0, prodl, prodh
 10163 ;; Tracked objects:
 10164 ;;		On entry : 0/0
 10165 ;;		On exit  : 0/0
 10166 ;;		Unchanged: 0/0
 10167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10168 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10169 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10171 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10172 ;;Total ram usage:        6 bytes
 10173 ;; Hardware stack levels used:    1
 10174 ;; Hardware stack levels required when called:    7
 10175 ;; This function calls:
 10176 ;;		Nothing
 10177 ;; This function is called by:
 10178 ;;		_LCD_DrawField
 10179 ;; This function uses a non-reentrant model
 10180 ;;
 10181                           
 10182                           	psect	text50
 10183  0000'                    __ptext50:
 10184                           	opt stack 0
 10185  0000'                    ___wmul:
 10186                           	opt stack 20
 10187                           
 10188                           ; BSR set to: 0
 10189                           ;incstack = 0
 10190  0000' 0100               	movlb	0	; () banked
 10191  0002' 5100'              	movf	___wmul@multiplier& (0+255),w,b
 10192  0004' 0100               	movlb	0	; () banked
 10193  0006' 0300'              	mulwf	___wmul@multiplicand& (0+255),b
 10194  0008' CFF3 F004'         	movff	prodl,___wmul@product
 10195  000C' CFF4 F005'         	movff	prodh,___wmul@product+1
 10196  0010' 0100               	movlb	0	; () banked
 10197  0012' 5100'              	movf	___wmul@multiplier& (0+255),w,b
 10198  0014' 0100               	movlb	0	; () banked
 10199  0016' 0300'              	mulwf	(___wmul@multiplicand+1)& (0+255),b
 10200  0018' 50F3               	movf	prodl,w,c
 10201  001A' 0100               	movlb	0	; () banked
 10202  001C' 2700'              	addwf	(___wmul@product+1)& (0+255),f,b
 10203  001E' 0100               	movlb	0	; () banked
 10204  0020' 5100'              	movf	(___wmul@multiplier+1)& (0+255),w,b
 10205  0022' 0100               	movlb	0	; () banked
 10206  0024' 0300'              	mulwf	___wmul@multiplicand& (0+255),b
 10207  0026' 50F3               	movf	prodl,w,c
 10208  0028' 0100               	movlb	0	; () banked
 10209  002A' 2700'              	addwf	(___wmul@product+1)& (0+255),f,b
 10210                           
 10211                           ; BSR set to: 0
 10212  002C' C004' F000'        	movff	___wmul@product,?___wmul
 10213  0030' C005' F001'        	movff	___wmul@product+1,?___wmul+1
 10214  0034' 0012               	return	
 10215  0036'                    __end_of___wmul:
 10216                           	opt stack 0
 10217                           tosu	equ	0xFFF
 10218                           tosh	equ	0xFFE
 10219                           tosl	equ	0xFFD
 10220                           pclath	equ	0xFFA
 10221                           tblptru	equ	0xFF8
 10222                           tblptrh	equ	0xFF7
 10223                           tblptrl	equ	0xFF6
 10224                           tablat	equ	0xFF5
 10225                           prodh	equ	0xFF4
 10226                           prodl	equ	0xFF3
 10227                           postinc0	equ	0xFEE
 10228                           wreg	equ	0xFE8
 10229                           indf1	equ	0xFE7
 10230                           postdec1	equ	0xFE5
 10231                           fsr1h	equ	0xFE2
 10232                           fsr1l	equ	0xFE1
 10233                           indf2	equ	0xFDF
 10234                           postinc2	equ	0xFDE
 10235                           postdec2	equ	0xFDD
 10236                           plusw2	equ	0xFDB
 10237                           fsr2h	equ	0xFDA
 10238                           fsr2l	equ	0xFD9
 10239                           status	equ	0xFD8
 10240                           
 10241 ;; *************** function _Console_MakeField *****************
 10242 ;; Defined at:
 10243 ;;		line 435 in file "Library/Console.c"
 10244 ;; Parameters:    Size  Location     Type
 10245 ;;  pInput          1    wreg     unsigned char 
 10246 ;; Auto vars:     Size  Location     Type
 10247 ;;  pInput          1   11[BANK0 ] unsigned char 
 10248 ;;  y               1   17[BANK0 ] unsigned char 
 10249 ;;  x               1   16[BANK0 ] unsigned char 
 10250 ;;  Column          2   12[BANK0 ] PTR struct Byte
 10251 ;;		 -> Font5x7(480), 
 10252 ;;  Index           2    9[BANK0 ] unsigned short 
 10253 ;; Return value:  Size  Location     Type
 10254 ;;                  2    5[BANK0 ] PTR unsigned short 
 10255 ;; Registers used:
 10256 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10257 ;; Tracked objects:
 10258 ;;		On entry : 0/0
 10259 ;;		On exit  : 0/0
 10260 ;;		Unchanged: 0/0
 10261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10262 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10263 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10264 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10265 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10266 ;;Total ram usage:       13 bytes
 10267 ;; Hardware stack levels used:    1
 10268 ;; Hardware stack levels required when called:    8
 10269 ;; This function calls:
 10270 ;;		_Byte_GetBit
 10271 ;; This function is called by:
 10272 ;;		_Console_Render
 10273 ;; This function uses a non-reentrant model
 10274 ;;
 10275                           
 10276                           	psect	text51
 10277  0000'                    __ptext51:
 10278                           	opt stack 0
 10279  0000'                    _Console_MakeField:
 10280                           	opt stack 20
 10281                           
 10282                           ; BSR set to: 0
 10283                           ;incstack = 0
 10284                           ;Console_MakeField@pInput stored from wreg
 10285  0000' 0100               	movlb	0	; () banked
 10286  0002' 6F00'              	movwf	Console_MakeField@pInput& (0+255),b
 10287                           
 10288                           ;Console.c: 437: static Colour Fill[7][5];
 10289                           ;Console.c: 438: pInput -= 32;
 10290  0004' 0E20               	movlw	32
 10291  0006' 0100               	movlb	0	; () banked
 10292  0008' 5F00'              	subwf	Console_MakeField@pInput& (0+255),f,b
 10293                           
 10294                           ; BSR set to: 0
 10295                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
 10296  000A' 0100               	movlb	0	; () banked
 10297  000C' 5100'              	movf	Console_MakeField@pInput& (0+255),w,b
 10298  000E' 0D05               	mullw	5
 10299  0010' CFF3 F009'         	movff	prodl,Console_MakeField@Index
 10300  0014' CFF4 F00A'         	movff	prodh,Console_MakeField@Index+1
 10301                           
 10302                           ; BSR set to: 0
 10303                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 10304  0018' 0E00'              	movlw	low _Font5x7
 10305  001A' 0100               	movlb	0	; () banked
 10306  001C' 2500'              	addwf	Console_MakeField@Index& (0+255),w,b
 10307  001E' 0100               	movlb	0	; () banked
 10308  0020' 6F00'              	movwf	Console_MakeField@Column& (0+255),b
 10309  0022' 0E00'              	movlw	high _Font5x7
 10310  0024' 0100               	movlb	0	; () banked
 10311  0026' 2100'              	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 10312  0028' 0100               	movlb	0	; () banked
 10313  002A' 6F00'              	movwf	(Console_MakeField@Column+1)& (0+255),b
 10314                           
 10315                           ; BSR set to: 0
 10316                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
 10317  002C' 0E00               	movlw	0
 10318  002E' 0100               	movlb	0	; () banked
 10319  0030' 6F00'              	movwf	Console_MakeField@x& (0+255),b
 10320  0032'                    l12087:
 10321                           
 10322                           ; BSR set to: 0
 10323  0032' 0E04               	movlw	4
 10324  0034' 0100               	movlb	0	; () banked
 10325  0036' 6500'              	cpfsgt	Console_MakeField@x& (0+255),b
 10326  0038' D001               	goto	l1077
 10327  003A' D043               	goto	u7970
 10328  003C'                    l1077:
 10329                           
 10330                           ; BSR set to: 0
 10331                           ;Console.c: 444: {
 10332                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
 10333                           
 10334                           ; BSR set to: 0
 10335  003C' 0E00               	movlw	0
 10336  003E' 0100               	movlb	0	; () banked
 10337  0040' 6F00'              	movwf	Console_MakeField@y& (0+255),b
 10338  0042'                    l12093:
 10339                           
 10340                           ; BSR set to: 0
 10341  0042' 0E06               	movlw	6
 10342  0044' 0100               	movlb	0	; () banked
 10343  0046' 6500'              	cpfsgt	Console_MakeField@y& (0+255),b
 10344  0048' D001               	goto	l1079
 10345  004A' D035               	goto	u7960
 10346  004C'                    l1079:
 10347                           
 10348                           ; BSR set to: 0
 10349                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 10350                           
 10351                           ; BSR set to: 0
 10352  004C' C00C' F000'        	movff	Console_MakeField@Column,Byte_GetBit@pInput
 10353  0050' C00D' F001'        	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 10354  0054' C011' F002'        	movff	Console_MakeField@y,Byte_GetBit@pBit
 10355  0058' EC00' F000'        	call	_Byte_GetBit	;wreg free
 10356  005C' 0900               	iorlw	0
 10357  005E' A4D8               	btfss	status,2,c
 10358  0060' D005               	goto	l1082
 10359  0062' C027' F00E'        	movff	_gBackcolour,_Console_MakeField$10974
 10360  0066' C028' F00F'        	movff	_gBackcolour+1,_Console_MakeField$10974+1
 10361  006A' D004               	goto	l1084
 10362  006C'                    l1082:
 10363  006C' C004' F00E'        	movff	_gForecolour,_Console_MakeField$10974
 10364  0070' C005' F00F'        	movff	_gForecolour+1,_Console_MakeField$10974+1
 10365  0074'                    l1084:
 10366  0074' 0100               	movlb	0	; () banked
 10367  0076' 5100'              	movf	Console_MakeField@y& (0+255),w,b
 10368  0078' 0D0A               	mullw	10
 10369  007A' 0E00'              	movlw	low Console_MakeField@Fill
 10370  007C' 0100               	movlb	0	; () banked
 10371  007E' 6F00'              	movwf	??_Console_MakeField& (0+255),b
 10372  0080' 0E00'              	movlw	high Console_MakeField@Fill
 10373  0082' 0100               	movlb	0	; () banked
 10374  0084' 6F00'              	movwf	(??_Console_MakeField+1)& (0+255),b
 10375  0086' 50F3               	movf	prodl,w,c
 10376  0088' 0100               	movlb	0	; () banked
 10377  008A' 2700'              	addwf	??_Console_MakeField& (0+255),f,b
 10378  008C' 50F4               	movf	prodh,w,c
 10379  008E' 0100               	movlb	0	; () banked
 10380  0090' 2300'              	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 10381  0092' 0100               	movlb	0	; () banked
 10382  0094' 5100'              	movf	Console_MakeField@x& (0+255),w,b
 10383  0096' 0D02               	mullw	2
 10384  0098' 50F3               	movf	prodl,w,c
 10385  009A' 0100               	movlb	0	; () banked
 10386  009C' 2500'              	addwf	??_Console_MakeField& (0+255),w,b
 10387  009E' 6ED9               	movwf	fsr2l,c
 10388  00A0' 50F4               	movf	prodh,w,c
 10389  00A2' 0100               	movlb	0	; () banked
 10390  00A4' 2100'              	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 10391  00A6' 6EDA               	movwf	fsr2h,c
 10392  00A8' C00E' FFDE         	movff	_Console_MakeField$10974,postinc2
 10393  00AC' C00F' FFDD         	movff	_Console_MakeField$10974+1,postdec2
 10394                           
 10395                           ; BSR set to: 0
 10396  00B0' 0100               	movlb	0	; () banked
 10397  00B2' 2B00'              	incf	Console_MakeField@y& (0+255),f,b
 10398  00B4' D7C6               	goto	l12093
 10399  00B6'                    u7960:
 10400                           
 10401                           ; BSR set to: 0
 10402                           ;Console.c: 447: Column += 1;
 10403                           
 10404                           ; BSR set to: 0
 10405  00B6' 0100               	movlb	0	; () banked
 10406  00B8' 4B00'              	infsnz	Console_MakeField@Column& (0+255),f,b
 10407  00BA' 2B00'              	incf	(Console_MakeField@Column+1)& (0+255),f,b
 10408  00BC' 0100               	movlb	0	; () banked
 10409  00BE' 2B00'              	incf	Console_MakeField@x& (0+255),f,b
 10410  00C0' D7B8               	goto	l12087
 10411  00C2'                    u7970:
 10412                           
 10413                           ; BSR set to: 0
 10414                           ;Console.c: 448: }
 10415                           ;Console.c: 449: return (ColourPtr)Fill;
 10416                           
 10417                           ; BSR set to: 0
 10418  00C2' 0E00'              	movlw	low Console_MakeField@Fill
 10419  00C4' 0100               	movlb	0	; () banked
 10420  00C6' 6F00'              	movwf	?_Console_MakeField& (0+255),b
 10421  00C8' 0E00'              	movlw	high Console_MakeField@Fill
 10422  00CA' 0100               	movlb	0	; () banked
 10423  00CC' 6F00'              	movwf	(?_Console_MakeField+1)& (0+255),b
 10424  00CE' 0012               	return	
 10425  00D0'                    __end_of_Console_MakeField:
 10426                           	opt stack 0
 10427                           tosu	equ	0xFFF
 10428                           tosh	equ	0xFFE
 10429                           tosl	equ	0xFFD
 10430                           pclath	equ	0xFFA
 10431                           tblptru	equ	0xFF8
 10432                           tblptrh	equ	0xFF7
 10433                           tblptrl	equ	0xFF6
 10434                           tablat	equ	0xFF5
 10435                           prodh	equ	0xFF4
 10436                           prodl	equ	0xFF3
 10437                           postinc0	equ	0xFEE
 10438                           wreg	equ	0xFE8
 10439                           indf1	equ	0xFE7
 10440                           postdec1	equ	0xFE5
 10441                           fsr1h	equ	0xFE2
 10442                           fsr1l	equ	0xFE1
 10443                           indf2	equ	0xFDF
 10444                           postinc2	equ	0xFDE
 10445                           postdec2	equ	0xFDD
 10446                           plusw2	equ	0xFDB
 10447                           fsr2h	equ	0xFDA
 10448                           fsr2l	equ	0xFD9
 10449                           status	equ	0xFD8
 10450                           
 10451 ;; *************** function _Byte_GetBit *****************
 10452 ;; Defined at:
 10453 ;;		line 38 in file "Library/Types.c"
 10454 ;; Parameters:    Size  Location     Type
 10455 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 10456 ;;		 -> Font5x7(480), 
 10457 ;;  pBit            1    2[BANK0 ] unsigned char 
 10458 ;; Auto vars:     Size  Location     Type
 10459 ;;  Output          1    4[BANK0 ] unsigned char 
 10460 ;; Return value:  Size  Location     Type
 10461 ;;                  1    wreg      unsigned char 
 10462 ;; Registers used:
 10463 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 10464 ;; Tracked objects:
 10465 ;;		On entry : 0/0
 10466 ;;		On exit  : 0/0
 10467 ;;		Unchanged: 0/0
 10468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10469 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10470 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10471 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10472 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10473 ;;Total ram usage:        5 bytes
 10474 ;; Hardware stack levels used:    1
 10475 ;; Hardware stack levels required when called:    7
 10476 ;; This function calls:
 10477 ;;		Nothing
 10478 ;; This function is called by:
 10479 ;;		_Console_MakeField
 10480 ;;		_Word_GetBit
 10481 ;; This function uses a non-reentrant model
 10482 ;;
 10483                           
 10484                           	psect	text52
 10485  0000'                    __ptext52:
 10486                           	opt stack 0
 10487  0000'                    _Byte_GetBit:
 10488                           	opt stack 20
 10489                           
 10490                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 10491                           
 10492                           ; BSR set to: 0
 10493                           ;incstack = 0
 10494  0000' C000' FFF6         	movff	Byte_GetBit@pInput,tblptrl
 10495  0004' C001' FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 10496  0008'                    	if	0	;tblptru may be non-zero
 10497  0008'                    	endif
 10498  0008'                    	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10499  0008' 0E00'              	movlw	low (__mediumconst shr (0+16))
 10500  000A' 6EF8               	movwf	tblptru,c
 10501  000C'                    	endif
 10502  000C' 0008               	tblrd		*
 10503  000E' CFF5 F004'         	movff	tablat,Byte_GetBit@Output
 10504                           
 10505                           ;Types.c: 42: Output >>= pBit;
 10506  0012' 0100               	movlb	0	; () banked
 10507  0014' 2900'              	incf	Byte_GetBit@pBit& (0+255),w,b
 10508  0016' 0100               	movlb	0	; () banked
 10509  0018' 6F00'              	movwf	??_Byte_GetBit& (0+255),b
 10510  001A' D003               	goto	u7550
 10511  001C'                    u7555:
 10512  001C' 0100               	movlb	0	; () banked
 10513  001E' 90D8               	bcf	status,0,c
 10514  0020' 3300'              	rrcf	Byte_GetBit@Output& (0+255),f,b
 10515  0022'                    u7550:
 10516  0022' 0100               	movlb	0	; () banked
 10517  0024' 2F00'              	decfsz	??_Byte_GetBit& (0+255),f,b
 10518  0026' D7FA               	goto	u7555
 10519                           
 10520                           ;Types.c: 43: Output &= 1;
 10521  0028' 0E01               	movlw	1
 10522  002A' 0100               	movlb	0	; () banked
 10523  002C' 1700'              	andwf	Byte_GetBit@Output& (0+255),f,b
 10524                           
 10525                           ; BSR set to: 0
 10526                           ;Types.c: 44: return Output;
 10527  002E' 0100               	movlb	0	; () banked
 10528  0030' 5100'              	movf	Byte_GetBit@Output& (0+255),w,b
 10529  0032' 0012               	return	
 10530  0034'                    __end_of_Byte_GetBit:
 10531                           	opt stack 0
 10532                           tosu	equ	0xFFF
 10533                           tosh	equ	0xFFE
 10534                           tosl	equ	0xFFD
 10535                           pclath	equ	0xFFA
 10536                           tblptru	equ	0xFF8
 10537                           tblptrh	equ	0xFF7
 10538                           tblptrl	equ	0xFF6
 10539                           tablat	equ	0xFF5
 10540                           prodh	equ	0xFF4
 10541                           prodl	equ	0xFF3
 10542                           postinc0	equ	0xFEE
 10543                           wreg	equ	0xFE8
 10544                           indf1	equ	0xFE7
 10545                           postdec1	equ	0xFE5
 10546                           fsr1h	equ	0xFE2
 10547                           fsr1l	equ	0xFE1
 10548                           indf2	equ	0xFDF
 10549                           postinc2	equ	0xFDE
 10550                           postdec2	equ	0xFDD
 10551                           plusw2	equ	0xFDB
 10552                           fsr2h	equ	0xFDA
 10553                           fsr2l	equ	0xFD9
 10554                           status	equ	0xFD8
 10555                           
 10556 ;; *************** function _init *****************
 10557 ;; Defined at:
 10558 ;;		line 55 in file "main.c"
 10559 ;; Parameters:    Size  Location     Type
 10560 ;;		None
 10561 ;; Auto vars:     Size  Location     Type
 10562 ;;		None
 10563 ;; Return value:  Size  Location     Type
 10564 ;;                  1    wreg      void 
 10565 ;; Registers used:
 10566 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 10567 ;; Tracked objects:
 10568 ;;		On entry : 0/0
 10569 ;;		On exit  : 0/0
 10570 ;;		Unchanged: 0/0
 10571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10575 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10576 ;;Total ram usage:        0 bytes
 10577 ;; Hardware stack levels used:    1
 10578 ;; Hardware stack levels required when called:   17
 10579 ;; This function calls:
 10580 ;;		_Console_Init
 10581 ;;		_HMI_Init
 10582 ;;		_LCD_Init
 10583 ;;		_MXK_BlockSwitchTo
 10584 ;;		_MXK_Dequeue
 10585 ;;		_MXK_Init
 10586 ;;		_MXK_Release
 10587 ;;		_delay_ms
 10588 ;;		_eusart_init
 10589 ;;		_irobot_init
 10590 ;;		_irobot_init_song_0
 10591 ;;		_irobot_led_power_on
 10592 ;;		_irobot_rotate
 10593 ;; This function is called by:
 10594 ;;		_main
 10595 ;; This function uses a non-reentrant model
 10596 ;;
 10597                           
 10598                           	psect	text53
 10599  0000'                    __ptext53:
 10600                           	opt stack 0
 10601  0000'                    _init:
 10602                           	opt stack 13
 10603                           
 10604                           ;main.c: 57: MXK_Init();
 10605                           
 10606                           ; BSR set to: 0
 10607                           ;incstack = 0
 10608  0000' EC00' F000'        	call	_MXK_Init	;wreg free
 10609                           
 10610                           ;main.c: 60: if (MXK_BlockSwitchTo(eMXK_HMI)) {
 10611  0004' 0E01               	movlw	1
 10612  0006' EC00' F000'        	call	_MXK_BlockSwitchTo
 10613  000A' 0900               	iorlw	0
 10614  000C' B4D8               	btfsc	status,2,c
 10615  000E' D00C               	goto	l2272
 10616                           
 10617                           ;main.c: 61: Console_Init();
 10618  0010' EC00' F000'        	call	_Console_Init	;wreg free
 10619                           
 10620                           ;main.c: 62: HMI_Init();
 10621  0014' EC00' F000'        	call	_HMI_Init	;wreg free
 10622                           
 10623                           ;main.c: 63: LCD_Init();
 10624  0018' EC00' F000'        	call	_LCD_Init	;wreg free
 10625                           
 10626                           ;main.c: 64: if (MXK_Release())
 10627  001C' EC00' F000'        	call	_MXK_Release	;wreg free
 10628  0020' 0900               	iorlw	0
 10629  0022' A4D8               	btfss	status,2,c
 10630                           
 10631                           ;main.c: 65: MXK_Dequeue();
 10632  0024' EC00' F000'        	call	_MXK_Dequeue	;wreg free
 10633  0028'                    l2272:
 10634                           
 10635                           ;main.c: 66: }
 10636                           ;main.c: 67: eusart_init();
 10637  0028' EC00' F000'        	call	_eusart_init	;wreg free
 10638                           
 10639                           ;main.c: 68: irobot_init();
 10640  002C' EC00' F000'        	call	_irobot_init	;wreg free
 10641                           
 10642                           ;main.c: 70: irobot_led_power_on(0xA);
 10643  0030' 0E0A               	movlw	10
 10644  0032' EC00' F000'        	call	_irobot_led_power_on
 10645                           
 10646                           ;main.c: 71: irobot_init_song_0();
 10647  0036' EC00' F000'        	call	_irobot_init_song_0	;wreg free
 10648                           
 10649                           ;main.c: 72: delay_ms(20);
 10650  003A' 0E00               	movlw	0
 10651  003C' 0100               	movlb	0	; () banked
 10652  003E' 6F00'              	movwf	(delay_ms@ms+1)& (0+255),b
 10653  0040' 0E14               	movlw	20
 10654  0042' 6F00'              	movwf	delay_ms@ms& (0+255),b
 10655  0044' EC00' F000'        	call	_delay_ms	;wreg free
 10656                           
 10657                           ;main.c: 75: irobot_rotate(0, 90, 200);
 10658  0048' 0E00               	movlw	0
 10659  004A' 0100               	movlb	0	; () banked
 10660  004C' 6F00'              	movwf	(irobot_rotate@rotateAngle+1)& (0+255),b
 10661  004E' 0E5A               	movlw	90
 10662  0050' 6F00'              	movwf	irobot_rotate@rotateAngle& (0+255),b
 10663  0052' 0E00               	movlw	0
 10664  0054' 0100               	movlb	0	; () banked
 10665  0056' 6F00'              	movwf	(irobot_rotate@rotateSpeed+1)& (0+255),b
 10666  0058' 0EC8               	movlw	200
 10667  005A' 6F00'              	movwf	irobot_rotate@rotateSpeed& (0+255),b
 10668  005C' 0E00               	movlw	0
 10669  005E' EC00' F000'        	call	_irobot_rotate
 10670                           
 10671                           ;main.c: 77: distanceTotal = 0;
 10672  0062' 0E00               	movlw	0
 10673  0064' 0100               	movlb	0	; () banked
 10674  0066' 6F00'              	movwf	(_distanceTotal+1)& (0+255),b
 10675  0068' 0E00               	movlw	0
 10676  006A' 6F00'              	movwf	_distanceTotal& (0+255),b
 10677                           
 10678                           ; BSR set to: 0
 10679                           ;main.c: 78: angleTotal = 0;
 10680  006C' 0E00               	movlw	0
 10681  006E' 0100               	movlb	0	; () banked
 10682  0070' 6F00'              	movwf	(_angleTotal+1)& (0+255),b
 10683  0072' 0E00               	movlw	0
 10684  0074' 6F00'              	movwf	_angleTotal& (0+255),b
 10685                           
 10686                           ; BSR set to: 0
 10687  0076' 0012               	return		;funcret
 10688  0078'                    __end_of_init:
 10689                           	opt stack 0
 10690                           tosu	equ	0xFFF
 10691                           tosh	equ	0xFFE
 10692                           tosl	equ	0xFFD
 10693                           pclath	equ	0xFFA
 10694                           tblptru	equ	0xFF8
 10695                           tblptrh	equ	0xFF7
 10696                           tblptrl	equ	0xFF6
 10697                           tablat	equ	0xFF5
 10698                           prodh	equ	0xFF4
 10699                           prodl	equ	0xFF3
 10700                           postinc0	equ	0xFEE
 10701                           wreg	equ	0xFE8
 10702                           indf1	equ	0xFE7
 10703                           postdec1	equ	0xFE5
 10704                           fsr1h	equ	0xFE2
 10705                           fsr1l	equ	0xFE1
 10706                           indf2	equ	0xFDF
 10707                           postinc2	equ	0xFDE
 10708                           postdec2	equ	0xFDD
 10709                           plusw2	equ	0xFDB
 10710                           fsr2h	equ	0xFDA
 10711                           fsr2l	equ	0xFD9
 10712                           status	equ	0xFD8
 10713                           
 10714 ;; *************** function _irobot_rotate *****************
 10715 ;; Defined at:
 10716 ;;		line 280 in file "Library/iRobotSerial.c"
 10717 ;; Parameters:    Size  Location     Type
 10718 ;;  isScript        1    wreg     unsigned char 
 10719 ;;  rotateAngle     2   25[BANK0 ] short 
 10720 ;;  rotateSpeed     2   27[BANK0 ] short 
 10721 ;; Auto vars:     Size  Location     Type
 10722 ;;  isScript        1   29[BANK0 ] unsigned char 
 10723 ;; Return value:  Size  Location     Type
 10724 ;;                  1    wreg      void 
 10725 ;; Registers used:
 10726 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10727 ;; Tracked objects:
 10728 ;;		On entry : 0/0
 10729 ;;		On exit  : 0/0
 10730 ;;		Unchanged: 0/0
 10731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10732 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10733 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10735 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10736 ;;Total ram usage:        5 bytes
 10737 ;; Hardware stack levels used:    1
 10738 ;; Hardware stack levels required when called:    9
 10739 ;; This function calls:
 10740 ;;		_irobot_move
 10741 ;; This function is called by:
 10742 ;;		_init
 10743 ;;		_irobot_rotate_to
 10744 ;; This function uses a non-reentrant model
 10745 ;;
 10746                           
 10747                           	psect	text54
 10748  0000'                    __ptext54:
 10749                           	opt stack 0
 10750  0000'                    _irobot_rotate:
 10751                           	opt stack 20
 10752                           
 10753                           ; BSR set to: 0
 10754                           ;incstack = 0
 10755                           ;irobot_rotate@isScript stored from wreg
 10756  0000' 0100               	movlb	0	; () banked
 10757  0002' 6F00'              	movwf	irobot_rotate@isScript& (0+255),b
 10758                           
 10759                           ;iRobotSerial.c: 281: (rotateAngle > 0) ? (rotateAngle = iR_CONST_CCW) : (rotateAngle = 
      +                          iR_CONST_CW);
 10760  0004' 0100               	movlb	0	; () banked
 10761  0006' BF00'              	btfsc	(irobot_rotate@rotateAngle+1)& (0+255),7,b
 10762  0008' D00D               	goto	l2152
 10763  000A' 0100               	movlb	0	; () banked
 10764  000C' 5100'              	movf	(irobot_rotate@rotateAngle+1)& (0+255),w,b
 10765  000E' E104               	bnz	u8320
 10766  0010' 0100               	movlb	0	; () banked
 10767  0012' 0500'              	decf	irobot_rotate@rotateAngle& (0+255),w,b
 10768  0014' A0D8               	btfss	status,0,c
 10769  0016' D006               	goto	l2152
 10770  0018'                    u8320:
 10771                           
 10772                           ; BSR set to: 0
 10773  0018' 0E00               	movlw	0
 10774  001A' 0100               	movlb	0	; () banked
 10775  001C' 6F00'              	movwf	(irobot_rotate@rotateAngle+1)& (0+255),b
 10776  001E' 0E01               	movlw	1
 10777  0020' 6F00'              	movwf	irobot_rotate@rotateAngle& (0+255),b
 10778  0022' D003               	goto	l2154
 10779  0024'                    l2152:
 10780                           
 10781                           ; BSR set to: 0
 10782  0024' 0100               	movlb	0	; () banked
 10783  0026' 6900'              	setf	irobot_rotate@rotateAngle& (0+255),b
 10784  0028' 6900'              	setf	(irobot_rotate@rotateAngle+1)& (0+255),b
 10785  002A'                    l2154:
 10786                           
 10787                           ; BSR set to: 0
 10788                           ;iRobotSerial.c: 282: (isScript) ?
 10789                           ;iRobotSerial.c: 283: irobot_move(1, rotateSpeed, rotateAngle) :
 10790                           ;iRobotSerial.c: 284: irobot_move(0, rotateSpeed, rotateAngle);
 10791                           
 10792                           ; BSR set to: 0
 10793  002A' 0100               	movlb	0	; () banked
 10794  002C' 5100'              	movf	irobot_rotate@isScript& (0+255),w,b
 10795  002E' 0100               	movlb	0	; () banked
 10796  0030' B4D8               	btfsc	status,2,c
 10797  0032' D00C               	goto	l2156
 10798                           
 10799                           ; BSR set to: 0
 10800  0034' C01B' F010'        	movff	irobot_rotate@rotateSpeed,irobot_move@moveSpeed
 10801  0038' C01C' F011'        	movff	irobot_rotate@rotateSpeed+1,irobot_move@moveSpeed+1
 10802  003C' C019' F012'        	movff	irobot_rotate@rotateAngle,irobot_move@moveTurnRadius
 10803  0040' C01A' F013'        	movff	irobot_rotate@rotateAngle+1,irobot_move@moveTurnRadius+1
 10804  0044' 0E01               	movlw	1
 10805  0046' EC00' F000'        	call	_irobot_move
 10806  004A' 0012               	return	
 10807  004C'                    l2156:
 10808  004C' C01B' F010'        	movff	irobot_rotate@rotateSpeed,irobot_move@moveSpeed
 10809  0050' C01C' F011'        	movff	irobot_rotate@rotateSpeed+1,irobot_move@moveSpeed+1
 10810  0054' C019' F012'        	movff	irobot_rotate@rotateAngle,irobot_move@moveTurnRadius
 10811  0058' C01A' F013'        	movff	irobot_rotate@rotateAngle+1,irobot_move@moveTurnRadius+1
 10812  005C' 0E00               	movlw	0
 10813  005E' EC00' F000'        	call	_irobot_move
 10814  0062' 0012               	return	
 10815  0064'                    __end_of_irobot_rotate:
 10816                           	opt stack 0
 10817                           tosu	equ	0xFFF
 10818                           tosh	equ	0xFFE
 10819                           tosl	equ	0xFFD
 10820                           pclath	equ	0xFFA
 10821                           tblptru	equ	0xFF8
 10822                           tblptrh	equ	0xFF7
 10823                           tblptrl	equ	0xFF6
 10824                           tablat	equ	0xFF5
 10825                           prodh	equ	0xFF4
 10826                           prodl	equ	0xFF3
 10827                           postinc0	equ	0xFEE
 10828                           wreg	equ	0xFE8
 10829                           indf1	equ	0xFE7
 10830                           postdec1	equ	0xFE5
 10831                           fsr1h	equ	0xFE2
 10832                           fsr1l	equ	0xFE1
 10833                           indf2	equ	0xFDF
 10834                           postinc2	equ	0xFDE
 10835                           postdec2	equ	0xFDD
 10836                           plusw2	equ	0xFDB
 10837                           fsr2h	equ	0xFDA
 10838                           fsr2l	equ	0xFD9
 10839                           status	equ	0xFD8
 10840                           
 10841 ;; *************** function _irobot_move *****************
 10842 ;; Defined at:
 10843 ;;		line 220 in file "Library/iRobotSerial.c"
 10844 ;; Parameters:    Size  Location     Type
 10845 ;;  isScript        1    wreg     unsigned char 
 10846 ;;  moveSpeed       2   16[BANK0 ] short 
 10847 ;;  moveTurnRadi    2   18[BANK0 ] short 
 10848 ;; Auto vars:     Size  Location     Type
 10849 ;;  isScript        1   24[BANK0 ] unsigned char 
 10850 ;; Return value:  Size  Location     Type
 10851 ;;                  1    wreg      void 
 10852 ;; Registers used:
 10853 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10854 ;; Tracked objects:
 10855 ;;		On entry : 0/0
 10856 ;;		On exit  : 0/0
 10857 ;;		Unchanged: 0/0
 10858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10859 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10860 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10861 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10862 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10863 ;;Total ram usage:        9 bytes
 10864 ;; Hardware stack levels used:    1
 10865 ;; Hardware stack levels required when called:    8
 10866 ;; This function calls:
 10867 ;;		_eusart_putch
 10868 ;;		_load_iRScriptStack
 10869 ;;		_twos_complement_of
 10870 ;; This function is called by:
 10871 ;;		_irobot_rotate
 10872 ;;		_irobot_stop_motion
 10873 ;;		_irobot_move_straight
 10874 ;;		_irobot_move_to_simple
 10875 ;; This function uses a non-reentrant model
 10876 ;;
 10877                           
 10878                           	psect	text55
 10879  0000'                    __ptext55:
 10880                           	opt stack 0
 10881  0000'                    _irobot_move:
 10882                           	opt stack 20
 10883                           
 10884                           ;incstack = 0
 10885                           ;irobot_move@isScript stored from wreg
 10886  0000' 0100               	movlb	0	; () banked
 10887  0002' 6F00'              	movwf	irobot_move@isScript& (0+255),b
 10888                           
 10889                           ;iRobotSerial.c: 221: moveSpeed = twos_complement_of(moveSpeed);
 10890  0004' C010' F000'        	movff	irobot_move@moveSpeed,twos_complement_of@complementValue
 10891  0008' C011' F001'        	movff	irobot_move@moveSpeed+1,twos_complement_of@complementValue+1
 10892  000C' EC00' F000'        	call	_twos_complement_of	;wreg free
 10893  0010' C000' F010'        	movff	?_twos_complement_of,irobot_move@moveSpeed
 10894  0014' C001' F011'        	movff	?_twos_complement_of+1,irobot_move@moveSpeed+1
 10895                           
 10896                           ;iRobotSerial.c: 222: moveTurnRadius = twos_complement_of(moveTurnRadius);
 10897  0018' C012' F000'        	movff	irobot_move@moveTurnRadius,twos_complement_of@complementValue
 10898  001C' C013' F001'        	movff	irobot_move@moveTurnRadius+1,twos_complement_of@complementValue+1
 10899  0020' EC00' F000'        	call	_twos_complement_of	;wreg free
 10900  0024' C000' F012'        	movff	?_twos_complement_of,irobot_move@moveTurnRadius
 10901  0028' C001' F013'        	movff	?_twos_complement_of+1,irobot_move@moveTurnRadius+1
 10902                           
 10903                           ;iRobotSerial.c: 224: if (isScript) {
 10904  002C' 0100               	movlb	0	; () banked
 10905  002E' 5100'              	movf	irobot_move@isScript& (0+255),w,b
 10906  0030' 0100               	movlb	0	; () banked
 10907  0032' B4D8               	btfsc	status,2,c
 10908  0034' D029               	goto	l2135
 10909                           
 10910                           ; BSR set to: 0
 10911                           ;iRobotSerial.c: 225: load_iRScriptStack(5, iR_DRIVE,
 10912                           ;iRobotSerial.c: 226: (((moveSpeed)>>8) & 0xFF), ((moveSpeed) & 0xFF),
 10913                           ;iRobotSerial.c: 227: (((moveTurnRadius)>>8) & 0xFF), ((moveTurnRadius) & 0xFF));
 10914  0036' 0E00               	movlw	0
 10915  0038' 0100               	movlb	0	; () banked
 10916  003A' 6F00'              	movwf	(?_load_iRScriptStack+1)& (0+255),b
 10917  003C' 0E89               	movlw	137
 10918  003E' 6F00'              	movwf	?_load_iRScriptStack& (0+255),b
 10919  0040' C011' F014'        	movff	irobot_move@moveSpeed+1,??_irobot_move
 10920  0044' 0100               	movlb	0	; () banked
 10921  0046' 6B00'              	clrf	(??_irobot_move+1)& (0+255),b
 10922  0048' BF00'              	btfsc	??_irobot_move& (0+255),7,b
 10923  004A' 6900'              	setf	(??_irobot_move+1)& (0+255),b
 10924  004C' 0100               	movlb	0	; () banked
 10925  004E' 5100'              	movf	??_irobot_move& (0+255),w,b
 10926  0050' 0100               	movlb	0	; () banked
 10927  0052' 6F00'              	movwf	(?_load_iRScriptStack+2)& (0+255),b
 10928  0054' 6B00'              	clrf	(?_load_iRScriptStack+3)& (0+255),b
 10929  0056' 0100               	movlb	0	; () banked
 10930  0058' 5100'              	movf	irobot_move@moveSpeed& (0+255),w,b
 10931  005A' 0100               	movlb	0	; () banked
 10932  005C' 6F00'              	movwf	(?_load_iRScriptStack+4)& (0+255),b
 10933  005E' 6B00'              	clrf	(?_load_iRScriptStack+5)& (0+255),b
 10934  0060' C013' F016'        	movff	irobot_move@moveTurnRadius+1,??_irobot_move+2
 10935  0064' 0100               	movlb	0	; () banked
 10936  0066' 6B00'              	clrf	(??_irobot_move+3)& (0+255),b
 10937  0068' BF00'              	btfsc	(??_irobot_move+2)& (0+255),7,b
 10938  006A' 6900'              	setf	(??_irobot_move+3)& (0+255),b
 10939  006C' 0100               	movlb	0	; () banked
 10940  006E' 5100'              	movf	(??_irobot_move+2)& (0+255),w,b
 10941  0070' 0100               	movlb	0	; () banked
 10942  0072' 6F00'              	movwf	(?_load_iRScriptStack+6)& (0+255),b
 10943  0074' 6B00'              	clrf	(?_load_iRScriptStack+7)& (0+255),b
 10944  0076' 0100               	movlb	0	; () banked
 10945  0078' 5100'              	movf	irobot_move@moveTurnRadius& (0+255),w,b
 10946  007A' 0100               	movlb	0	; () banked
 10947  007C' 6F00'              	movwf	(?_load_iRScriptStack+8)& (0+255),b
 10948  007E' 6B00'              	clrf	(?_load_iRScriptStack+9)& (0+255),b
 10949  0080' 0E05               	movlw	5
 10950  0082' EC00' F000'        	call	_load_iRScriptStack
 10951                           
 10952                           ;iRobotSerial.c: 228: }
 10953  0086' 0012               	return	
 10954  0088'                    l2135:
 10955                           
 10956                           ;iRobotSerial.c: 229: else{
 10957                           ;iRobotSerial.c: 230: eusart_putch(iR_DRIVE);
 10958  0088' 0E89               	movlw	137
 10959  008A' EC00' F000'        	call	_eusart_putch
 10960                           
 10961                           ;iRobotSerial.c: 231: eusart_putch((((moveSpeed)>>8) & 0xFF));
 10962  008E' 0100               	movlb	0	; () banked
 10963  0090' 5100'              	movf	(irobot_move@moveSpeed+1)& (0+255),w,b
 10964  0092' EC00' F000'        	call	_eusart_putch
 10965                           
 10966                           ;iRobotSerial.c: 232: eusart_putch(((moveSpeed) & 0xFF));
 10967  0096' 0100               	movlb	0	; () banked
 10968  0098' 5100'              	movf	irobot_move@moveSpeed& (0+255),w,b
 10969  009A' EC00' F000'        	call	_eusart_putch
 10970                           
 10971                           ;iRobotSerial.c: 233: eusart_putch((((moveTurnRadius)>>8) & 0xFF));
 10972  009E' 0100               	movlb	0	; () banked
 10973  00A0' 5100'              	movf	(irobot_move@moveTurnRadius+1)& (0+255),w,b
 10974  00A2' EC00' F000'        	call	_eusart_putch
 10975                           
 10976                           ;iRobotSerial.c: 234: eusart_putch(((moveTurnRadius) & 0xFF));
 10977  00A6' 0100               	movlb	0	; () banked
 10978  00A8' 5100'              	movf	irobot_move@moveTurnRadius& (0+255),w,b
 10979  00AA' EC00' F000'        	call	_eusart_putch
 10980  00AE' 0012               	return	
 10981  00B0'                    __end_of_irobot_move:
 10982                           	opt stack 0
 10983                           tosu	equ	0xFFF
 10984                           tosh	equ	0xFFE
 10985                           tosl	equ	0xFFD
 10986                           pclath	equ	0xFFA
 10987                           tblptru	equ	0xFF8
 10988                           tblptrh	equ	0xFF7
 10989                           tblptrl	equ	0xFF6
 10990                           tablat	equ	0xFF5
 10991                           prodh	equ	0xFF4
 10992                           prodl	equ	0xFF3
 10993                           postinc0	equ	0xFEE
 10994                           wreg	equ	0xFE8
 10995                           indf1	equ	0xFE7
 10996                           postdec1	equ	0xFE5
 10997                           fsr1h	equ	0xFE2
 10998                           fsr1l	equ	0xFE1
 10999                           indf2	equ	0xFDF
 11000                           postinc2	equ	0xFDE
 11001                           postdec2	equ	0xFDD
 11002                           plusw2	equ	0xFDB
 11003                           fsr2h	equ	0xFDA
 11004                           fsr2l	equ	0xFD9
 11005                           status	equ	0xFD8
 11006                           
 11007 ;; *************** function _twos_complement_of *****************
 11008 ;; Defined at:
 11009 ;;		line 167 in file "Library/iRobotSerial.c"
 11010 ;; Parameters:    Size  Location     Type
 11011 ;;  complementVa    2    0[BANK0 ] short 
 11012 ;; Auto vars:     Size  Location     Type
 11013 ;;		None
 11014 ;; Return value:  Size  Location     Type
 11015 ;;                  2    0[BANK0 ] unsigned short 
 11016 ;; Registers used:
 11017 ;;		wreg, status,2, status,0
 11018 ;; Tracked objects:
 11019 ;;		On entry : 0/0
 11020 ;;		On exit  : 0/0
 11021 ;;		Unchanged: 0/0
 11022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11023 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11026 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11027 ;;Total ram usage:        2 bytes
 11028 ;; Hardware stack levels used:    1
 11029 ;; Hardware stack levels required when called:    7
 11030 ;; This function calls:
 11031 ;;		Nothing
 11032 ;; This function is called by:
 11033 ;;		_irobot_move
 11034 ;;		_irobot_angle_wait
 11035 ;;		_irobot_distance_wait
 11036 ;; This function uses a non-reentrant model
 11037 ;;
 11038                           
 11039                           	psect	text56
 11040  0000'                    __ptext56:
 11041                           	opt stack 0
 11042  0000'                    _twos_complement_of:
 11043                           	opt stack 20
 11044                           
 11045                           ;iRobotSerial.c: 168: if (complementValue < 0) {
 11046                           
 11047                           ;incstack = 0
 11048  0000' 0100               	movlb	0	; () banked
 11049  0002' AF00'              	btfss	(twos_complement_of@complementValue+1)& (0+255),7,b
 11050  0004' D01A               	goto	l2106
 11051                           
 11052                           ; BSR set to: 0
 11053                           ;iRobotSerial.c: 169: complementValue = ((complementValue) > 0 ? (complementValue) : -(c
      +                          omplementValue));
 11054  0006' 0100               	movlb	0	; () banked
 11055  0008' BF00'              	btfsc	(twos_complement_of@complementValue+1)& (0+255),7,b
 11056  000A' D007               	goto	u7680
 11057  000C' 0100               	movlb	0	; () banked
 11058  000E' 5100'              	movf	(twos_complement_of@complementValue+1)& (0+255),w,b
 11059  0010' E10A               	bnz	l2108
 11060  0012' 0100               	movlb	0	; () banked
 11061  0014' 0500'              	decf	twos_complement_of@complementValue& (0+255),w,b
 11062  0016' B0D8               	btfsc	status,0,c
 11063  0018' D006               	goto	l2108
 11064  001A'                    u7680:
 11065                           
 11066                           ; BSR set to: 0
 11067  001A' 0100               	movlb	0	; () banked
 11068  001C' 6D00'              	negf	twos_complement_of@complementValue& (0+255),b
 11069  001E' 1F00'              	comf	(twos_complement_of@complementValue+1)& (0+255),f,b
 11070  0020' B0D8               	btfsc	status,0,c
 11071  0022' 2B00'              	incf	(twos_complement_of@complementValue+1)& (0+255),f,b
 11072  0024' D004               	goto	l2110
 11073  0026'                    l2108:
 11074                           
 11075                           ; BSR set to: 0
 11076  0026' C000' F000'        	movff	twos_complement_of@complementValue,twos_complement_of@complementValue
 11077  002A' C001' F001'        	movff	twos_complement_of@complementValue+1,twos_complement_of@complementValue+1
 11078  002E'                    l2110:
 11079                           
 11080                           ; BSR set to: 0
 11081                           ;iRobotSerial.c: 170: complementValue = ~complementValue;
 11082                           
 11083                           ; BSR set to: 0
 11084  002E' 0100               	movlb	0	; () banked
 11085  0030' 1F00'              	comf	twos_complement_of@complementValue& (0+255),f,b
 11086  0032' 1F00'              	comf	(twos_complement_of@complementValue+1)& (0+255),f,b
 11087                           
 11088                           ;iRobotSerial.c: 171: complementValue += 1;
 11089  0034' 0100               	movlb	0	; () banked
 11090  0036' 4B00'              	infsnz	twos_complement_of@complementValue& (0+255),f,b
 11091  0038' 2B00'              	incf	(twos_complement_of@complementValue+1)& (0+255),f,b
 11092  003A'                    l2106:
 11093                           
 11094                           ; BSR set to: 0
 11095                           ;iRobotSerial.c: 172: }
 11096                           ;iRobotSerial.c: 173: return complementValue;
 11097                           
 11098                           ; BSR set to: 0
 11099  003A' C000' F000'        	movff	twos_complement_of@complementValue,?_twos_complement_of
 11100  003E' C001' F001'        	movff	twos_complement_of@complementValue+1,?_twos_complement_of+1
 11101  0042' 0012               	return	
 11102  0044'                    __end_of_twos_complement_of:
 11103                           	opt stack 0
 11104                           tosu	equ	0xFFF
 11105                           tosh	equ	0xFFE
 11106                           tosl	equ	0xFFD
 11107                           pclath	equ	0xFFA
 11108                           tblptru	equ	0xFF8
 11109                           tblptrh	equ	0xFF7
 11110                           tblptrl	equ	0xFF6
 11111                           tablat	equ	0xFF5
 11112                           prodh	equ	0xFF4
 11113                           prodl	equ	0xFF3
 11114                           postinc0	equ	0xFEE
 11115                           wreg	equ	0xFE8
 11116                           indf1	equ	0xFE7
 11117                           postdec1	equ	0xFE5
 11118                           fsr1h	equ	0xFE2
 11119                           fsr1l	equ	0xFE1
 11120                           indf2	equ	0xFDF
 11121                           postinc2	equ	0xFDE
 11122                           postdec2	equ	0xFDD
 11123                           plusw2	equ	0xFDB
 11124                           fsr2h	equ	0xFDA
 11125                           fsr2l	equ	0xFD9
 11126                           status	equ	0xFD8
 11127                           
 11128 ;; *************** function _irobot_led_power_on *****************
 11129 ;; Defined at:
 11130 ;;		line 293 in file "Library/iRobotSerial.c"
 11131 ;; Parameters:    Size  Location     Type
 11132 ;;  powerOnColou    1    wreg     unsigned char 
 11133 ;; Auto vars:     Size  Location     Type
 11134 ;;  powerOnColou    1   20[BANK0 ] unsigned char 
 11135 ;; Return value:  Size  Location     Type
 11136 ;;                  1    wreg      void 
 11137 ;; Registers used:
 11138 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11139 ;; Tracked objects:
 11140 ;;		On entry : 0/0
 11141 ;;		On exit  : 0/0
 11142 ;;		Unchanged: 0/0
 11143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11145 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11147 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11148 ;;Total ram usage:        1 bytes
 11149 ;; Hardware stack levels used:    1
 11150 ;; Hardware stack levels required when called:    9
 11151 ;; This function calls:
 11152 ;;		_irobot_leds
 11153 ;; This function is called by:
 11154 ;;		_init
 11155 ;; This function uses a non-reentrant model
 11156 ;;
 11157                           
 11158                           	psect	text57
 11159  0000'                    __ptext57:
 11160                           	opt stack 0
 11161  0000'                    _irobot_led_power_on:
 11162                           	opt stack 20
 11163                           
 11164                           ; BSR set to: 0
 11165                           ;incstack = 0
 11166                           ;irobot_led_power_on@powerOnColour stored from wreg
 11167  0000' 0100               	movlb	0	; () banked
 11168  0002' 6F00'              	movwf	irobot_led_power_on@powerOnColour& (0+255),b
 11169                           
 11170                           ;iRobotSerial.c: 294: irobot_leds(0, 0, powerOnColour, iR_CONST_LED_ON);
 11171  0004' 0E00               	movlw	0
 11172  0006' 0100               	movlb	0	; () banked
 11173  0008' 6F00'              	movwf	irobot_leds@LEDBit& (0+255),b
 11174  000A' C014' F011'        	movff	irobot_led_power_on@powerOnColour,irobot_leds@powerColour
 11175  000E' 0EFF               	movlw	255
 11176  0010' 0100               	movlb	0	; () banked
 11177  0012' 6F00'              	movwf	irobot_leds@powerLuminosity& (0+255),b
 11178  0014' 0E00               	movlw	0
 11179  0016' EC00' F000'        	call	_irobot_leds
 11180  001A' 0012               	return		;funcret
 11181  001C'                    __end_of_irobot_led_power_on:
 11182                           	opt stack 0
 11183                           tosu	equ	0xFFF
 11184                           tosh	equ	0xFFE
 11185                           tosl	equ	0xFFD
 11186                           pclath	equ	0xFFA
 11187                           tblptru	equ	0xFF8
 11188                           tblptrh	equ	0xFF7
 11189                           tblptrl	equ	0xFF6
 11190                           tablat	equ	0xFF5
 11191                           prodh	equ	0xFF4
 11192                           prodl	equ	0xFF3
 11193                           postinc0	equ	0xFEE
 11194                           wreg	equ	0xFE8
 11195                           indf1	equ	0xFE7
 11196                           postdec1	equ	0xFE5
 11197                           fsr1h	equ	0xFE2
 11198                           fsr1l	equ	0xFE1
 11199                           indf2	equ	0xFDF
 11200                           postinc2	equ	0xFDE
 11201                           postdec2	equ	0xFDD
 11202                           plusw2	equ	0xFDB
 11203                           fsr2h	equ	0xFDA
 11204                           fsr2l	equ	0xFD9
 11205                           status	equ	0xFD8
 11206                           
 11207 ;; *************** function _irobot_leds *****************
 11208 ;; Defined at:
 11209 ;;		line 239 in file "Library/iRobotSerial.c"
 11210 ;; Parameters:    Size  Location     Type
 11211 ;;  isScript        1    wreg     unsigned char 
 11212 ;;  LEDBit          1   16[BANK0 ] unsigned char 
 11213 ;;  powerColour     1   17[BANK0 ] unsigned char 
 11214 ;;  powerLuminos    1   18[BANK0 ] unsigned char 
 11215 ;; Auto vars:     Size  Location     Type
 11216 ;;  isScript        1   19[BANK0 ] unsigned char 
 11217 ;; Return value:  Size  Location     Type
 11218 ;;                  1    wreg      void 
 11219 ;; Registers used:
 11220 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11221 ;; Tracked objects:
 11222 ;;		On entry : 0/0
 11223 ;;		On exit  : 0/0
 11224 ;;		Unchanged: 0/0
 11225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11226 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11227 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11229 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11230 ;;Total ram usage:        4 bytes
 11231 ;; Hardware stack levels used:    1
 11232 ;; Hardware stack levels required when called:    8
 11233 ;; This function calls:
 11234 ;;		_eusart_putch
 11235 ;;		_load_iRScriptStack
 11236 ;; This function is called by:
 11237 ;;		_irobot_led_power_on
 11238 ;;		_irobot_led_power_off
 11239 ;; This function uses a non-reentrant model
 11240 ;;
 11241                           
 11242                           	psect	text58
 11243  0000'                    __ptext58:
 11244                           	opt stack 0
 11245  0000'                    _irobot_leds:
 11246                           	opt stack 20
 11247                           
 11248                           ;incstack = 0
 11249                           ;irobot_leds@isScript stored from wreg
 11250  0000' 0100               	movlb	0	; () banked
 11251  0002' 6F00'              	movwf	irobot_leds@isScript& (0+255),b
 11252                           
 11253                           ;iRobotSerial.c: 240: if (isScript) {
 11254  0004' 0100               	movlb	0	; () banked
 11255  0006' 5100'              	movf	irobot_leds@isScript& (0+255),w,b
 11256  0008' 0100               	movlb	0	; () banked
 11257  000A' B4D8               	btfsc	status,2,c
 11258  000C' D015               	goto	l2140
 11259                           
 11260                           ; BSR set to: 0
 11261                           ;iRobotSerial.c: 241: load_iRScriptStack(4, iR_LEDS,
 11262                           ;iRobotSerial.c: 242: LEDBit, powerColour, powerLuminosity);
 11263  000E' 0E00               	movlw	0
 11264  0010' 0100               	movlb	0	; () banked
 11265  0012' 6F00'              	movwf	(?_load_iRScriptStack+1)& (0+255),b
 11266  0014' 0E8B               	movlw	139
 11267  0016' 6F00'              	movwf	?_load_iRScriptStack& (0+255),b
 11268  0018' C010' F002'        	movff	irobot_leds@LEDBit,?_load_iRScriptStack+2
 11269  001C' 0100               	movlb	0	; () banked
 11270  001E' 6B00'              	clrf	(?_load_iRScriptStack+3)& (0+255),b
 11271  0020' C011' F004'        	movff	irobot_leds@powerColour,?_load_iRScriptStack+4
 11272  0024' 0100               	movlb	0	; () banked
 11273  0026' 6B00'              	clrf	(?_load_iRScriptStack+5)& (0+255),b
 11274  0028' C012' F006'        	movff	irobot_leds@powerLuminosity,?_load_iRScriptStack+6
 11275  002C' 0100               	movlb	0	; () banked
 11276  002E' 6B00'              	clrf	(?_load_iRScriptStack+7)& (0+255),b
 11277  0030' 0E04               	movlw	4
 11278  0032' EC00' F000'        	call	_load_iRScriptStack
 11279                           
 11280                           ;iRobotSerial.c: 243: }
 11281  0036' 0012               	return	
 11282  0038'                    l2140:
 11283                           
 11284                           ;iRobotSerial.c: 244: else{
 11285                           ;iRobotSerial.c: 245: eusart_putch(iR_LEDS);
 11286  0038' 0E8B               	movlw	139
 11287  003A' EC00' F000'        	call	_eusart_putch
 11288                           
 11289                           ;iRobotSerial.c: 246: eusart_putch(LEDBit);
 11290  003E' 0100               	movlb	0	; () banked
 11291  0040' 5100'              	movf	irobot_leds@LEDBit& (0+255),w,b
 11292  0042' EC00' F000'        	call	_eusart_putch
 11293                           
 11294                           ;iRobotSerial.c: 247: eusart_putch(powerColour);
 11295  0046' 0100               	movlb	0	; () banked
 11296  0048' 5100'              	movf	irobot_leds@powerColour& (0+255),w,b
 11297  004A' EC00' F000'        	call	_eusart_putch
 11298                           
 11299                           ;iRobotSerial.c: 248: eusart_putch(powerLuminosity);
 11300  004E' 0100               	movlb	0	; () banked
 11301  0050' 5100'              	movf	irobot_leds@powerLuminosity& (0+255),w,b
 11302  0052' EC00' F000'        	call	_eusart_putch
 11303  0056' 0012               	return	
 11304  0058'                    __end_of_irobot_leds:
 11305                           	opt stack 0
 11306                           tosu	equ	0xFFF
 11307                           tosh	equ	0xFFE
 11308                           tosl	equ	0xFFD
 11309                           pclath	equ	0xFFA
 11310                           tblptru	equ	0xFF8
 11311                           tblptrh	equ	0xFF7
 11312                           tblptrl	equ	0xFF6
 11313                           tablat	equ	0xFF5
 11314                           prodh	equ	0xFF4
 11315                           prodl	equ	0xFF3
 11316                           postinc0	equ	0xFEE
 11317                           wreg	equ	0xFE8
 11318                           indf1	equ	0xFE7
 11319                           postdec1	equ	0xFE5
 11320                           fsr1h	equ	0xFE2
 11321                           fsr1l	equ	0xFE1
 11322                           indf2	equ	0xFDF
 11323                           postinc2	equ	0xFDE
 11324                           postdec2	equ	0xFDD
 11325                           plusw2	equ	0xFDB
 11326                           fsr2h	equ	0xFDA
 11327                           fsr2l	equ	0xFD9
 11328                           status	equ	0xFD8
 11329                           
 11330 ;; *************** function _load_iRScriptStack *****************
 11331 ;; Defined at:
 11332 ;;		line 176 in file "Library/iRobotSerial.c"
 11333 ;; Parameters:    Size  Location     Type
 11334 ;;  bytesToLoad     1    wreg     unsigned char 
 11335 ;; Auto vars:     Size  Location     Type
 11336 ;;  bytesToLoad     1   14[BANK0 ] unsigned char 
 11337 ;;  i               1   15[BANK0 ] unsigned char 
 11338 ;;  loadByte        2   12[BANK0 ] PTR void [1]
 11339 ;;		 -> ?_load_iRScriptStack(1), 
 11340 ;; Return value:  Size  Location     Type
 11341 ;;                  1    wreg      void 
 11342 ;; Registers used:
 11343 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 11344 ;; Tracked objects:
 11345 ;;		On entry : 0/0
 11346 ;;		On exit  : 0/0
 11347 ;;		Unchanged: 0/0
 11348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11349 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11350 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11351 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11352 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11353 ;;Total ram usage:       16 bytes
 11354 ;; Hardware stack levels used:    1
 11355 ;; Hardware stack levels required when called:    7
 11356 ;; This function calls:
 11357 ;;		Nothing
 11358 ;; This function is called by:
 11359 ;;		_irobot_move
 11360 ;;		_irobot_leds
 11361 ;;		_irobot_angle_wait
 11362 ;;		_irobot_distance_wait
 11363 ;; This function uses a non-reentrant model
 11364 ;;
 11365                           
 11366                           	psect	text59
 11367  0000'                    __ptext59:
 11368                           	opt stack 0
 11369  0000'                    _load_iRScriptStack:
 11370                           	opt stack 20
 11371                           
 11372                           ;incstack = 0
 11373                           ;load_iRScriptStack@bytesToLoad stored from wreg
 11374  0000' 0100               	movlb	0	; () banked
 11375  0002' 6F00'              	movwf	load_iRScriptStack@bytesToLoad& (0+255),b
 11376                           
 11377                           ;iRobotSerial.c: 177: va_list loadByte;
 11378                           ;iRobotSerial.c: 178: *loadByte = __va_start();
 11379  0004' 0E00'              	movlw	low ?_load_iRScriptStack
 11380  0006' 0100               	movlb	0	; () banked
 11381  0008' 6F00'              	movwf	load_iRScriptStack@loadByte& (0+255),b
 11382  000A' 0E00'              	movlw	high ?_load_iRScriptStack
 11383  000C' 0100               	movlb	0	; () banked
 11384  000E' 6F00'              	movwf	(load_iRScriptStack@loadByte+1)& (0+255),b
 11385                           
 11386                           ;iRobotSerial.c: 179: for (UINT8 i = 0; i < bytesToLoad; i++) {
 11387  0010' 0E00               	movlw	0
 11388  0012' 0100               	movlb	0	; () banked
 11389  0014' 6F00'              	movwf	load_iRScriptStack@i& (0+255),b
 11390  0016' D01F               	goto	l2114
 11391  0018'                    
 11392                           ; BSR set to: 0
 11393                           ;iRobotSerial.c: 180: iRScriptStack[iRScriptIndex + i] = (*(int *)__va_arg((*(int **)loa
      +                          dByte), (int)0));
 11394                           
 11395                           ; BSR set to: 0
 11396  0018' C00C' FFD9         	movff	load_iRScriptStack@loadByte,fsr2l
 11397  001C' C00D' FFDA         	movff	load_iRScriptStack@loadByte+1,fsr2h
 11398  0020' 0100               	movlb	0	; () banked
 11399  0022' 5100'              	movf	load_iRScriptStack@i& (0+255),w,b
 11400  0024' C00C' F00A'        	movff	_iRScriptIndex,??_load_iRScriptStack
 11401  0028' 0100               	movlb	0	; () banked
 11402  002A' 6B00'              	clrf	(??_load_iRScriptStack+1)& (0+255),b
 11403  002C' 0100               	movlb	0	; () banked
 11404  002E' 2700'              	addwf	??_load_iRScriptStack& (0+255),f,b
 11405  0030' 0E00               	movlw	0
 11406  0032' 2300'              	addwfc	(??_load_iRScriptStack+1)& (0+255),f,b
 11407  0034' 0E00'              	movlw	low _iRScriptStack
 11408  0036' 0100               	movlb	0	; () banked
 11409  0038' 2500'              	addwf	??_load_iRScriptStack& (0+255),w,b
 11410  003A' 6EE1               	movwf	fsr1l,c
 11411  003C' 0E00'              	movlw	high _iRScriptStack
 11412  003E' 0100               	movlb	0	; () banked
 11413  0040' 2100'              	addwfc	(??_load_iRScriptStack+1)& (0+255),w,b
 11414  0042' 6EE2               	movwf	fsr1h,c
 11415  0044' CFDF FFE7          	movff	indf2,indf1
 11416                           
 11417                           ; BSR set to: 0
 11418  0048' 0E02               	movlw	2
 11419  004A' 0100               	movlb	0	; () banked
 11420  004C' 2700'              	addwf	load_iRScriptStack@loadByte& (0+255),f,b
 11421  004E' 0E00               	movlw	0
 11422  0050' 2300'              	addwfc	(load_iRScriptStack@loadByte+1)& (0+255),f,b
 11423                           
 11424                           ; BSR set to: 0
 11425  0052' 0100               	movlb	0	; () banked
 11426  0054' 2B00'              	incf	load_iRScriptStack@i& (0+255),f,b
 11427  0056'                    l2114:
 11428                           
 11429                           ; BSR set to: 0
 11430                           
 11431                           ; BSR set to: 0
 11432  0056' 0100               	movlb	0	; () banked
 11433  0058' 5100'              	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
 11434  005A' 0100               	movlb	0	; () banked
 11435  005C' 5D00'              	subwf	load_iRScriptStack@i& (0+255),w,b
 11436  005E' A0D8               	btfss	status,0,c
 11437  0060' D7DB               	goto	l2115
 11438                           
 11439                           ; BSR set to: 0
 11440                           ;iRobotSerial.c: 181: }
 11441                           ;iRobotSerial.c: 182: ;
 11442                           ;iRobotSerial.c: 183: iRScriptIndex += bytesToLoad;
 11443                           
 11444                           ; BSR set to: 0
 11445  0062' 0100               	movlb	0	; () banked
 11446  0064' 5100'              	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
 11447  0066' 260C'              	addwf	_iRScriptIndex,f,c
 11448                           
 11449                           ; BSR set to: 0
 11450  0068' 0012               	return		;funcret
 11451  006A'                    __end_of_load_iRScriptStack:
 11452                           	opt stack 0
 11453                           tosu	equ	0xFFF
 11454                           tosh	equ	0xFFE
 11455                           tosl	equ	0xFFD
 11456                           pclath	equ	0xFFA
 11457                           tblptru	equ	0xFF8
 11458                           tblptrh	equ	0xFF7
 11459                           tblptrl	equ	0xFF6
 11460                           tablat	equ	0xFF5
 11461                           prodh	equ	0xFF4
 11462                           prodl	equ	0xFF3
 11463                           postinc0	equ	0xFEE
 11464                           wreg	equ	0xFE8
 11465                           indf1	equ	0xFE7
 11466                           postdec1	equ	0xFE5
 11467                           fsr1h	equ	0xFE2
 11468                           fsr1l	equ	0xFE1
 11469                           indf2	equ	0xFDF
 11470                           postinc2	equ	0xFDE
 11471                           postdec2	equ	0xFDD
 11472                           plusw2	equ	0xFDB
 11473                           fsr2h	equ	0xFDA
 11474                           fsr2l	equ	0xFD9
 11475                           status	equ	0xFD8
 11476                           
 11477 ;; *************** function _irobot_init_song_0 *****************
 11478 ;; Defined at:
 11479 ;;		line 252 in file "Library/iRobotSerial.c"
 11480 ;; Parameters:    Size  Location     Type
 11481 ;;		None
 11482 ;; Auto vars:     Size  Location     Type
 11483 ;;		None
 11484 ;; Return value:  Size  Location     Type
 11485 ;;                  1    wreg      void 
 11486 ;; Registers used:
 11487 ;;		wreg, cstack
 11488 ;; Tracked objects:
 11489 ;;		On entry : 0/0
 11490 ;;		On exit  : 0/0
 11491 ;;		Unchanged: 0/0
 11492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11496 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11497 ;;Total ram usage:        0 bytes
 11498 ;; Hardware stack levels used:    1
 11499 ;; Hardware stack levels required when called:    8
 11500 ;; This function calls:
 11501 ;;		_eusart_putch
 11502 ;; This function is called by:
 11503 ;;		_init
 11504 ;; This function uses a non-reentrant model
 11505 ;;
 11506                           
 11507                           	psect	text60
 11508  0000'                    __ptext60:
 11509                           	opt stack 0
 11510  0000'                    _irobot_init_song_0:
 11511                           	opt stack 21
 11512                           
 11513                           ;iRobotSerial.c: 253: eusart_putch(iR_SONG_INIT);
 11514                           
 11515                           ; BSR set to: 0
 11516                           ;incstack = 0
 11517  0000' 0E8C               	movlw	140
 11518  0002' EC00' F000'        	call	_eusart_putch
 11519                           
 11520                           ;iRobotSerial.c: 254: eusart_putch(0);
 11521  0006' 0E00               	movlw	0
 11522  0008' EC00' F000'        	call	_eusart_putch
 11523                           
 11524                           ;iRobotSerial.c: 255: eusart_putch(1);
 11525  000C' 0E01               	movlw	1
 11526  000E' EC00' F000'        	call	_eusart_putch
 11527                           
 11528                           ;iRobotSerial.c: 256: eusart_putch(60);
 11529  0012' 0E3C               	movlw	60
 11530  0014' EC00' F000'        	call	_eusart_putch
 11531                           
 11532                           ;iRobotSerial.c: 257: eusart_putch(4);
 11533  0018' 0E04               	movlw	4
 11534  001A' EC00' F000'        	call	_eusart_putch
 11535  001E' 0012               	return		;funcret
 11536  0020'                    __end_of_irobot_init_song_0:
 11537                           	opt stack 0
 11538                           tosu	equ	0xFFF
 11539                           tosh	equ	0xFFE
 11540                           tosl	equ	0xFFD
 11541                           pclath	equ	0xFFA
 11542                           tblptru	equ	0xFF8
 11543                           tblptrh	equ	0xFF7
 11544                           tblptrl	equ	0xFF6
 11545                           tablat	equ	0xFF5
 11546                           prodh	equ	0xFF4
 11547                           prodl	equ	0xFF3
 11548                           postinc0	equ	0xFEE
 11549                           wreg	equ	0xFE8
 11550                           indf1	equ	0xFE7
 11551                           postdec1	equ	0xFE5
 11552                           fsr1h	equ	0xFE2
 11553                           fsr1l	equ	0xFE1
 11554                           indf2	equ	0xFDF
 11555                           postinc2	equ	0xFDE
 11556                           postdec2	equ	0xFDD
 11557                           plusw2	equ	0xFDB
 11558                           fsr2h	equ	0xFDA
 11559                           fsr2l	equ	0xFD9
 11560                           status	equ	0xFD8
 11561                           
 11562 ;; *************** function _irobot_init *****************
 11563 ;; Defined at:
 11564 ;;		line 198 in file "Library/iRobotSerial.c"
 11565 ;; Parameters:    Size  Location     Type
 11566 ;;		None
 11567 ;; Auto vars:     Size  Location     Type
 11568 ;;		None
 11569 ;; Return value:  Size  Location     Type
 11570 ;;                  1    wreg      void 
 11571 ;; Registers used:
 11572 ;;		wreg, cstack
 11573 ;; Tracked objects:
 11574 ;;		On entry : 0/0
 11575 ;;		On exit  : 0/0
 11576 ;;		Unchanged: 0/0
 11577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11581 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11582 ;;Total ram usage:        0 bytes
 11583 ;; Hardware stack levels used:    1
 11584 ;; Hardware stack levels required when called:    8
 11585 ;; This function calls:
 11586 ;;		_eusart_putch
 11587 ;; This function is called by:
 11588 ;;		_init
 11589 ;; This function uses a non-reentrant model
 11590 ;;
 11591                           
 11592                           	psect	text61
 11593  0000'                    __ptext61:
 11594                           	opt stack 0
 11595  0000'                    _irobot_init:
 11596                           	opt stack 21
 11597                           
 11598                           ;iRobotSerial.c: 199: eusart_putch(iR_START);
 11599                           
 11600                           ;incstack = 0
 11601  0000' 0E80               	movlw	128
 11602  0002' EC00' F000'        	call	_eusart_putch
 11603                           
 11604                           ;iRobotSerial.c: 200: eusart_putch(iR_FULL_MODE);
 11605  0006' 0E84               	movlw	132
 11606  0008' EC00' F000'        	call	_eusart_putch
 11607  000C' 0012               	return		;funcret
 11608  000E'                    __end_of_irobot_init:
 11609                           	opt stack 0
 11610                           tosu	equ	0xFFF
 11611                           tosh	equ	0xFFE
 11612                           tosl	equ	0xFFD
 11613                           pclath	equ	0xFFA
 11614                           tblptru	equ	0xFF8
 11615                           tblptrh	equ	0xFF7
 11616                           tblptrl	equ	0xFF6
 11617                           tablat	equ	0xFF5
 11618                           prodh	equ	0xFF4
 11619                           prodl	equ	0xFF3
 11620                           postinc0	equ	0xFEE
 11621                           wreg	equ	0xFE8
 11622                           indf1	equ	0xFE7
 11623                           postdec1	equ	0xFE5
 11624                           fsr1h	equ	0xFE2
 11625                           fsr1l	equ	0xFE1
 11626                           indf2	equ	0xFDF
 11627                           postinc2	equ	0xFDE
 11628                           postdec2	equ	0xFDD
 11629                           plusw2	equ	0xFDB
 11630                           fsr2h	equ	0xFDA
 11631                           fsr2l	equ	0xFD9
 11632                           status	equ	0xFD8
 11633                           
 11634 ;; *************** function _eusart_putch *****************
 11635 ;; Defined at:
 11636 ;;		line 120 in file "Library/iRobotSerial.c"
 11637 ;; Parameters:    Size  Location     Type
 11638 ;;  eusartSendCh    1    wreg     unsigned char 
 11639 ;; Auto vars:     Size  Location     Type
 11640 ;;  eusartSendCh    1    0[BANK0 ] unsigned char 
 11641 ;; Return value:  Size  Location     Type
 11642 ;;                  1    wreg      void 
 11643 ;; Registers used:
 11644 ;;		wreg
 11645 ;; Tracked objects:
 11646 ;;		On entry : 0/0
 11647 ;;		On exit  : 0/0
 11648 ;;		Unchanged: 0/0
 11649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11651 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11653 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11654 ;;Total ram usage:        1 bytes
 11655 ;; Hardware stack levels used:    1
 11656 ;; Hardware stack levels required when called:    7
 11657 ;; This function calls:
 11658 ;;		Nothing
 11659 ;; This function is called by:
 11660 ;;		_irobot_query_and_update
 11661 ;;		_irobot_init
 11662 ;;		_irobot_move
 11663 ;;		_irobot_leds
 11664 ;;		_irobot_init_song_0
 11665 ;;		_irobot_song_play
 11666 ;;		_irobot_script_play
 11667 ;; This function uses a non-reentrant model
 11668 ;;
 11669                           
 11670                           	psect	text62
 11671  0000'                    __ptext62:
 11672                           	opt stack 0
 11673  0000'                    _eusart_putch:
 11674                           	opt stack 20
 11675                           
 11676                           ;incstack = 0
 11677                           ;eusart_putch@eusartSendChar stored from wreg
 11678  0000' 0100               	movlb	0	; () banked
 11679  0002' 6F00'              	movwf	eusart_putch@eusartSendChar& (0+255),b
 11680  0004'                    
 11681                           ;iRobotSerial.c: 121: while (!TXSTA1bits.TRMT) {};
 11682  0004' A2AD               	btfss	4013,1,c	;volatile
 11683  0006' D7FE               	goto	l11829
 11684                           
 11685                           ;iRobotSerial.c: 122: TXREG1 = eusartSendChar;
 11686  0008' C000' FFAE         	movff	eusart_putch@eusartSendChar,4014	;volatile
 11687  000C' 0012               	return		;funcret
 11688  000E'                    __end_of_eusart_putch:
 11689                           	opt stack 0
 11690                           tosu	equ	0xFFF
 11691                           tosh	equ	0xFFE
 11692                           tosl	equ	0xFFD
 11693                           pclath	equ	0xFFA
 11694                           tblptru	equ	0xFF8
 11695                           tblptrh	equ	0xFF7
 11696                           tblptrl	equ	0xFF6
 11697                           tablat	equ	0xFF5
 11698                           prodh	equ	0xFF4
 11699                           prodl	equ	0xFF3
 11700                           postinc0	equ	0xFEE
 11701                           wreg	equ	0xFE8
 11702                           indf1	equ	0xFE7
 11703                           postdec1	equ	0xFE5
 11704                           fsr1h	equ	0xFE2
 11705                           fsr1l	equ	0xFE1
 11706                           indf2	equ	0xFDF
 11707                           postinc2	equ	0xFDE
 11708                           postdec2	equ	0xFDD
 11709                           plusw2	equ	0xFDB
 11710                           fsr2h	equ	0xFDA
 11711                           fsr2l	equ	0xFD9
 11712                           status	equ	0xFD8
 11713                           
 11714 ;; *************** function _eusart_init *****************
 11715 ;; Defined at:
 11716 ;;		line 103 in file "Library/iRobotSerial.c"
 11717 ;; Parameters:    Size  Location     Type
 11718 ;;		None
 11719 ;; Auto vars:     Size  Location     Type
 11720 ;;		None
 11721 ;; Return value:  Size  Location     Type
 11722 ;;                  1    wreg      void 
 11723 ;; Registers used:
 11724 ;;		wreg, status,2
 11725 ;; Tracked objects:
 11726 ;;		On entry : 0/0
 11727 ;;		On exit  : 0/0
 11728 ;;		Unchanged: 0/0
 11729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11731 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11733 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11734 ;;Total ram usage:        0 bytes
 11735 ;; Hardware stack levels used:    1
 11736 ;; Hardware stack levels required when called:    7
 11737 ;; This function calls:
 11738 ;;		Nothing
 11739 ;; This function is called by:
 11740 ;;		_init
 11741 ;; This function uses a non-reentrant model
 11742 ;;
 11743                           
 11744                           	psect	text63
 11745  0000'                    __ptext63:
 11746                           	opt stack 0
 11747  0000'                    _eusart_init:
 11748                           	opt stack 22
 11749                           
 11750                           ;iRobotSerial.c: 104: TRISCbits.TRISC6 = 0;
 11751                           
 11752                           ;incstack = 0
 11753  0000' 9C94               	bcf	3988,6,c	;volatile
 11754                           
 11755                           ;iRobotSerial.c: 105: TRISCbits.TRISC7 = 1;
 11756  0002' 8E94               	bsf	3988,7,c	;volatile
 11757                           
 11758                           ;iRobotSerial.c: 107: TXSTA1 = 0b00100100;
 11759  0004' 0E24               	movlw	36
 11760  0006' 6EAD               	movwf	4013,c	;volatile
 11761                           
 11762                           ;iRobotSerial.c: 108: RCSTA1 = 0b10011000;
 11763  0008' 0E98               	movlw	152
 11764  000A' 6EAC               	movwf	4012,c	;volatile
 11765                           
 11766                           ;iRobotSerial.c: 110: BAUDCON1bits.DTRXP = 0;
 11767  000C' 9A7E               	bcf	3966,5,c	;volatile
 11768                           
 11769                           ;iRobotSerial.c: 111: BAUDCON1bits.SCKP = 0;
 11770  000E' 987E               	bcf	3966,4,c	;volatile
 11771                           
 11772                           ;iRobotSerial.c: 112: BAUDCON1bits.WUE = 0;
 11773  0010' 927E               	bcf	3966,1,c	;volatile
 11774                           
 11775                           ;iRobotSerial.c: 113: BAUDCON1bits.ABDEN = 0;
 11776  0012' 907E               	bcf	3966,0,c	;volatile
 11777                           
 11778                           ;iRobotSerial.c: 115: TXSTA1bits.BRGH = 1;
 11779  0014' 84AD               	bsf	4013,2,c	;volatile
 11780                           
 11781                           ;iRobotSerial.c: 116: BAUDCON1bits.BRG16 = 0;
 11782  0016' 967E               	bcf	3966,3,c	;volatile
 11783                           
 11784                           ;iRobotSerial.c: 117: SPBRG1 = 51;
 11785  0018' 0E33               	movlw	51
 11786  001A' 6EB0               	movwf	4016,c	;volatile
 11787  001C' 0012               	return		;funcret
 11788  001E'                    __end_of_eusart_init:
 11789                           	opt stack 0
 11790                           tosu	equ	0xFFF
 11791                           tosh	equ	0xFFE
 11792                           tosl	equ	0xFFD
 11793                           pclath	equ	0xFFA
 11794                           tblptru	equ	0xFF8
 11795                           tblptrh	equ	0xFF7
 11796                           tblptrl	equ	0xFF6
 11797                           tablat	equ	0xFF5
 11798                           prodh	equ	0xFF4
 11799                           prodl	equ	0xFF3
 11800                           postinc0	equ	0xFEE
 11801                           wreg	equ	0xFE8
 11802                           indf1	equ	0xFE7
 11803                           postdec1	equ	0xFE5
 11804                           fsr1h	equ	0xFE2
 11805                           fsr1l	equ	0xFE1
 11806                           indf2	equ	0xFDF
 11807                           postinc2	equ	0xFDE
 11808                           postdec2	equ	0xFDD
 11809                           plusw2	equ	0xFDB
 11810                           fsr2h	equ	0xFDA
 11811                           fsr2l	equ	0xFD9
 11812                           status	equ	0xFD8
 11813                           
 11814 ;; *************** function _MXK_Init *****************
 11815 ;; Defined at:
 11816 ;;		line 33 in file "Library/MXK.c"
 11817 ;; Parameters:    Size  Location     Type
 11818 ;;		None
 11819 ;; Auto vars:     Size  Location     Type
 11820 ;;		None
 11821 ;; Return value:  Size  Location     Type
 11822 ;;                  1    wreg      void 
 11823 ;; Registers used:
 11824 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11825 ;; Tracked objects:
 11826 ;;		On entry : 0/0
 11827 ;;		On exit  : 0/0
 11828 ;;		Unchanged: 0/0
 11829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11833 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11834 ;;Total ram usage:        0 bytes
 11835 ;; Hardware stack levels used:    1
 11836 ;; Hardware stack levels required when called:   16
 11837 ;; This function calls:
 11838 ;;		_LED_Init
 11839 ;;		_Port_Init
 11840 ;;		_Port_SetPin
 11841 ;;		_Port_SetPinType
 11842 ;;		_Port_SetQuadType
 11843 ;;		_Port_SetType
 11844 ;;		_delay_ms
 11845 ;; This function is called by:
 11846 ;;		_init
 11847 ;; This function uses a non-reentrant model
 11848 ;;
 11849                           
 11850                           	psect	text64
 11851  0000'                    __ptext64:
 11852                           	opt stack 0
 11853  0000'                    _MXK_Init:
 11854                           	opt stack 13
 11855                           
 11856                           ;MXK.c: 35: Bus_State = eMXK_Idle;
 11857                           
 11858                           ;incstack = 0
 11859  0000' 0E01               	movlw	1
 11860  0002' 6E04'              	movwf	_Bus_State,c
 11861                           
 11862                           ;MXK.c: 36: lQueue = (Function)0;
 11863  0004' 0E00               	movlw	0
 11864  0006' 0100               	movlb	0	; () banked
 11865  0008' 6F00'              	movwf	_lQueue& (0+255),b	;volatile
 11866  000A' 0E00               	movlw	0
 11867  000C' 0100               	movlb	0	; () banked
 11868  000E' 6F00'              	movwf	(_lQueue+1)& (0+255),b	;volatile
 11869  0010' 0E00               	movlw	0
 11870  0012' 0100               	movlb	0	; () banked
 11871  0014' 6F00'              	movwf	(_lQueue+2)& (0+255),b	;volatile
 11872                           
 11873                           ; BSR set to: 0
 11874                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
 11875  0016' 0E00'              	movlw	low _PortA
 11876  0018' 0101               	movlb	1	; () banked
 11877  001A' 6F00'              	movwf	Port_Init@pInput& (0+255),b
 11878  001C' 0E00'              	movlw	high _PortA
 11879  001E' 0101               	movlb	1	; () banked
 11880  0020' 6F00'              	movwf	(Port_Init@pInput+1)& (0+255),b
 11881  0022' 0E00               	movlw	0
 11882  0024' 0101               	movlb	1	; () banked
 11883  0026' 6F00'              	movwf	Port_Init@pPort& (0+255),b
 11884  0028' EC00' F000'        	call	_Port_Init	;wreg free
 11885                           
 11886                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
 11887  002C' 0E00'              	movlw	low _PortB
 11888  002E' 0101               	movlb	1	; () banked
 11889  0030' 6F00'              	movwf	Port_Init@pInput& (0+255),b
 11890  0032' 0E00'              	movlw	high _PortB
 11891  0034' 0101               	movlb	1	; () banked
 11892  0036' 6F00'              	movwf	(Port_Init@pInput+1)& (0+255),b
 11893  0038' 0E01               	movlw	1
 11894  003A' 0101               	movlb	1	; () banked
 11895  003C' 6F00'              	movwf	Port_Init@pPort& (0+255),b
 11896  003E' EC00' F000'        	call	_Port_Init	;wreg free
 11897                           
 11898                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
 11899  0042' 0E00'              	movlw	low _PortC
 11900  0044' 0101               	movlb	1	; () banked
 11901  0046' 6F00'              	movwf	Port_Init@pInput& (0+255),b
 11902  0048' 0E00'              	movlw	high _PortC
 11903  004A' 0101               	movlb	1	; () banked
 11904  004C' 6F00'              	movwf	(Port_Init@pInput+1)& (0+255),b
 11905  004E' 0E02               	movlw	2
 11906  0050' 0101               	movlb	1	; () banked
 11907  0052' 6F00'              	movwf	Port_Init@pPort& (0+255),b
 11908  0054' EC00' F000'        	call	_Port_Init	;wreg free
 11909                           
 11910                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
 11911  0058' 0E00'              	movlw	low _PortD
 11912  005A' 0101               	movlb	1	; () banked
 11913  005C' 6F00'              	movwf	Port_Init@pInput& (0+255),b
 11914  005E' 0E00'              	movlw	high _PortD
 11915  0060' 0101               	movlb	1	; () banked
 11916  0062' 6F00'              	movwf	(Port_Init@pInput+1)& (0+255),b
 11917  0064' 0E03               	movlw	3
 11918  0066' 0101               	movlb	1	; () banked
 11919  0068' 6F00'              	movwf	Port_Init@pPort& (0+255),b
 11920  006A' EC00' F000'        	call	_Port_Init	;wreg free
 11921                           
 11922                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
 11923  006E' 0E00'              	movlw	low _PortE
 11924  0070' 0101               	movlb	1	; () banked
 11925  0072' 6F00'              	movwf	Port_Init@pInput& (0+255),b
 11926  0074' 0E00'              	movlw	high _PortE
 11927  0076' 0101               	movlb	1	; () banked
 11928  0078' 6F00'              	movwf	(Port_Init@pInput+1)& (0+255),b
 11929  007A' 0E04               	movlw	4
 11930  007C' 0101               	movlb	1	; () banked
 11931  007E' 6F00'              	movwf	Port_Init@pPort& (0+255),b
 11932  0080' EC00' F000'        	call	_Port_Init	;wreg free
 11933                           
 11934                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
 11935  0084' 0E00'              	movlw	low _PortF
 11936  0086' 0101               	movlb	1	; () banked
 11937  0088' 6F00'              	movwf	Port_Init@pInput& (0+255),b
 11938  008A' 0E00'              	movlw	high _PortF
 11939  008C' 0101               	movlb	1	; () banked
 11940  008E' 6F00'              	movwf	(Port_Init@pInput+1)& (0+255),b
 11941  0090' 0E05               	movlw	5
 11942  0092' 0101               	movlb	1	; () banked
 11943  0094' 6F00'              	movwf	Port_Init@pPort& (0+255),b
 11944  0096' EC00' F000'        	call	_Port_Init	;wreg free
 11945                           
 11946                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
 11947  009A' 0E00'              	movlw	low _PortG
 11948  009C' 0101               	movlb	1	; () banked
 11949  009E' 6F00'              	movwf	Port_Init@pInput& (0+255),b
 11950  00A0' 0E00'              	movlw	high _PortG
 11951  00A2' 0101               	movlb	1	; () banked
 11952  00A4' 6F00'              	movwf	(Port_Init@pInput+1)& (0+255),b
 11953  00A6' 0E06               	movlw	6
 11954  00A8' 0101               	movlb	1	; () banked
 11955  00AA' 6F00'              	movwf	Port_Init@pPort& (0+255),b
 11956  00AC' EC00' F000'        	call	_Port_Init	;wreg free
 11957                           
 11958                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
 11959  00B0' 0E00'              	movlw	low _PortF
 11960  00B2' 0100               	movlb	0	; () banked
 11961  00B4' 6F00'              	movwf	Port_SetPinType@pInput& (0+255),b
 11962  00B6' 0E00'              	movlw	high _PortF
 11963  00B8' 0100               	movlb	0	; () banked
 11964  00BA' 6F00'              	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 11965  00BC' 0E05               	movlw	5
 11966  00BE' 0100               	movlb	0	; () banked
 11967  00C0' 6F00'              	movwf	Port_SetPinType@pPin& (0+255),b
 11968  00C2' 0E00               	movlw	0
 11969  00C4' 0100               	movlb	0	; () banked
 11970  00C6' 6F00'              	movwf	Port_SetPinType@pType& (0+255),b
 11971  00C8' EC00' F000'        	call	_Port_SetPinType	;wreg free
 11972                           
 11973                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
 11974  00CC' 0E00'              	movlw	low _PortB
 11975  00CE' 0100               	movlb	0	; () banked
 11976  00D0' 6F00'              	movwf	Port_SetQuadType@pInput& (0+255),b
 11977  00D2' 0E00'              	movlw	high _PortB
 11978  00D4' 0100               	movlb	0	; () banked
 11979  00D6' 6F00'              	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 11980  00D8' 0E00               	movlw	0
 11981  00DA' 0100               	movlb	0	; () banked
 11982  00DC' 6F00'              	movwf	Port_SetQuadType@pQuad& (0+255),b
 11983  00DE' 0E00               	movlw	0
 11984  00E0' 0100               	movlb	0	; () banked
 11985  00E2' 6F00'              	movwf	Port_SetQuadType@pType& (0+255),b
 11986  00E4' EC00' F000'        	call	_Port_SetQuadType	;wreg free
 11987                           
 11988                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
 11989  00E8' 0E00'              	movlw	low _PortF
 11990  00EA' 0100               	movlb	0	; () banked
 11991  00EC' 6F00'              	movwf	Port_SetPinType@pInput& (0+255),b
 11992  00EE' 0E00'              	movlw	high _PortF
 11993  00F0' 0100               	movlb	0	; () banked
 11994  00F2' 6F00'              	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 11995  00F4' 0E06               	movlw	6
 11996  00F6' 0100               	movlb	0	; () banked
 11997  00F8' 6F00'              	movwf	Port_SetPinType@pPin& (0+255),b
 11998  00FA' 0E03               	movlw	3
 11999  00FC' 0100               	movlb	0	; () banked
 12000  00FE' 6F00'              	movwf	Port_SetPinType@pType& (0+255),b
 12001  0100' EC00' F000'        	call	_Port_SetPinType	;wreg free
 12002                           
 12003                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
 12004  0104' 0E00'              	movlw	low _PortG
 12005  0106' 0100               	movlb	0	; () banked
 12006  0108' 6F00'              	movwf	Port_SetType@pInput& (0+255),b
 12007  010A' 0E00'              	movlw	high _PortG
 12008  010C' 0100               	movlb	0	; () banked
 12009  010E' 6F00'              	movwf	(Port_SetType@pInput+1)& (0+255),b
 12010  0110' 0E03               	movlw	3
 12011  0112' 0100               	movlb	0	; () banked
 12012  0114' 6F00'              	movwf	Port_SetType@pType& (0+255),b
 12013  0116' EC00' F000'        	call	_Port_SetType	;wreg free
 12014                           
 12015                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
 12016  011A' 0E00'              	movlw	low _PortG
 12017  011C' 0100               	movlb	0	; () banked
 12018  011E' 6F00'              	movwf	Port_SetPin@pInput& (0+255),b
 12019  0120' 0E00'              	movlw	high _PortG
 12020  0122' 0100               	movlb	0	; () banked
 12021  0124' 6F00'              	movwf	(Port_SetPin@pInput+1)& (0+255),b
 12022  0126' 0E04               	movlw	4
 12023  0128' 0100               	movlb	0	; () banked
 12024  012A' 6F00'              	movwf	Port_SetPin@pPin& (0+255),b
 12025  012C' 0E00               	movlw	0
 12026  012E' 0100               	movlb	0	; () banked
 12027  0130' 6F00'              	movwf	Port_SetPin@pValue& (0+255),b
 12028  0132' EC00' F000'        	call	_Port_SetPin	;wreg free
 12029                           
 12030                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
 12031  0136' 0E00'              	movlw	low _PortF
 12032  0138' 0100               	movlb	0	; () banked
 12033  013A' 6F00'              	movwf	Port_SetPin@pInput& (0+255),b
 12034  013C' 0E00'              	movlw	high _PortF
 12035  013E' 0100               	movlb	0	; () banked
 12036  0140' 6F00'              	movwf	(Port_SetPin@pInput+1)& (0+255),b
 12037  0142' 0E06               	movlw	6
 12038  0144' 0100               	movlb	0	; () banked
 12039  0146' 6F00'              	movwf	Port_SetPin@pPin& (0+255),b
 12040  0148' 0E01               	movlw	1
 12041  014A' 0100               	movlb	0	; () banked
 12042  014C' 6F00'              	movwf	Port_SetPin@pValue& (0+255),b
 12043  014E' EC00' F000'        	call	_Port_SetPin	;wreg free
 12044                           
 12045                           ;MXK.c: 55: LED_Init(eLED1);
 12046  0152' 0E00               	movlw	0
 12047  0154' EC00' F000'        	call	_LED_Init
 12048                           
 12049                           ;MXK.c: 56: LED_Init(eLED2);
 12050  0158' 0E01               	movlw	1
 12051  015A' EC00' F000'        	call	_LED_Init
 12052                           
 12053                           ;MXK.c: 58: PIR1 = 0;
 12054  015E' 0E00               	movlw	0
 12055  0160' 6E9E               	movwf	3998,c	;volatile
 12056                           
 12057                           ;MXK.c: 59: PIR2 = 0;
 12058  0162' 0E00               	movlw	0
 12059  0164' 6EA1               	movwf	4001,c	;volatile
 12060                           
 12061                           ;MXK.c: 60: PIR3 = 0;
 12062  0166' 0E00               	movlw	0
 12063  0168' 6EA4               	movwf	4004,c	;volatile
 12064                           
 12065                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
 12066  016A' 8E9B               	bsf	3995,7,c	;volatile
 12067                           
 12068                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
 12069  016C' 8C9B               	bsf	3995,6,c	;volatile
 12070                           
 12071                           ;MXK.c: 66: delay_ms(100);
 12072  016E' 0E00               	movlw	0
 12073  0170' 0100               	movlb	0	; () banked
 12074  0172' 6F00'              	movwf	(delay_ms@ms+1)& (0+255),b
 12075  0174' 0E64               	movlw	100
 12076  0176' 6F00'              	movwf	delay_ms@ms& (0+255),b
 12077  0178' EC00' F000'        	call	_delay_ms	;wreg free
 12078                           
 12079                           ;MXK.c: 68: RCONbits.IPEN = 1;
 12080  017C' 8ED0               	bsf	4048,7,c	;volatile
 12081  017E' 0012               	return		;funcret
 12082  0180'                    __end_of_MXK_Init:
 12083                           	opt stack 0
 12084                           tosu	equ	0xFFF
 12085                           tosh	equ	0xFFE
 12086                           tosl	equ	0xFFD
 12087                           pclath	equ	0xFFA
 12088                           tblptru	equ	0xFF8
 12089                           tblptrh	equ	0xFF7
 12090                           tblptrl	equ	0xFF6
 12091                           tablat	equ	0xFF5
 12092                           prodh	equ	0xFF4
 12093                           prodl	equ	0xFF3
 12094                           postinc0	equ	0xFEE
 12095                           wreg	equ	0xFE8
 12096                           indf1	equ	0xFE7
 12097                           postdec1	equ	0xFE5
 12098                           fsr1h	equ	0xFE2
 12099                           fsr1l	equ	0xFE1
 12100                           indf2	equ	0xFDF
 12101                           postinc2	equ	0xFDE
 12102                           postdec2	equ	0xFDD
 12103                           plusw2	equ	0xFDB
 12104                           fsr2h	equ	0xFDA
 12105                           fsr2l	equ	0xFD9
 12106                           status	equ	0xFD8
 12107                           
 12108 ;; *************** function _Port_Init *****************
 12109 ;; Defined at:
 12110 ;;		line 150 in file "Library/Port.c"
 12111 ;; Parameters:    Size  Location     Type
 12112 ;;  pInput          2    2[BANK1 ] const PTR struct Port
 12113 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 12114 ;;		 -> PortD(10), PortC(10), PortF(10), 
 12115 ;;  pPort           1    4[BANK1 ] enum E6786
 12116 ;; Auto vars:     Size  Location     Type
 12117 ;;  i               1    7[BANK1 ] unsigned char 
 12118 ;; Return value:  Size  Location     Type
 12119 ;;                  1    wreg      void 
 12120 ;; Registers used:
 12121 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12122 ;; Tracked objects:
 12123 ;;		On entry : 0/0
 12124 ;;		On exit  : 0/0
 12125 ;;		Unchanged: 0/0
 12126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12127 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12128 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12129 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12130 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12131 ;;Total ram usage:        6 bytes
 12132 ;; Hardware stack levels used:    1
 12133 ;; Hardware stack levels required when called:   15
 12134 ;; This function calls:
 12135 ;;		_GetPortPORT
 12136 ;;		_GetPortProperties
 12137 ;;		_GetPortTRIS
 12138 ;;		_Port_Set
 12139 ;;		_Port_SetPinType
 12140 ;;		_Port_SetType
 12141 ;;		_Word_GetPair
 12142 ;; This function is called by:
 12143 ;;		_MXK_Init
 12144 ;; This function uses a non-reentrant model
 12145 ;;
 12146                           
 12147                           	psect	text65
 12148  0000'                    __ptext65:
 12149                           	opt stack 0
 12150  0000'                    _Port_Init:
 12151                           	opt stack 13
 12152                           
 12153                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
 12154                           
 12155                           ;incstack = 0
 12156  0000' 0101               	movlb	1	; () banked
 12157  0002' 5100'              	movf	Port_Init@pPort& (0+255),w,b
 12158  0004' EC00' F000'        	call	_GetPortProperties
 12159  0008' C002' FFD9         	movff	Port_Init@pInput,fsr2l
 12160  000C' C003' FFDA         	movff	Port_Init@pInput+1,fsr2h
 12161  0010' 0100               	movlb	0	; () banked
 12162  0012' C000' FFDE         	movff	?_GetPortProperties,postinc2
 12163  0016' 0100               	movlb	0	; () banked
 12164  0018' C001' FFDD         	movff	?_GetPortProperties+1,postdec2
 12165                           
 12166                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
 12167  001C' 0101               	movlb	1	; () banked
 12168  001E' 5100'              	movf	Port_Init@pPort& (0+255),w,b
 12169  0020' EC00' F000'        	call	_GetPortPORT
 12170  0024' 0101               	movlb	1	; () banked
 12171  0026' EE20 F006          	lfsr	2,6
 12172  002A' 5100'              	movf	Port_Init@pInput& (0+255),w,b
 12173  002C' 26D9               	addwf	fsr2l,f,c
 12174  002E' 5100'              	movf	(Port_Init@pInput+1)& (0+255),w,b
 12175  0030' 22DA               	addwfc	fsr2h,f,c
 12176  0032' 0100               	movlb	0	; () banked
 12177  0034' C000' FFDE         	movff	?_GetPortPORT,postinc2
 12178  0038' 0100               	movlb	0	; () banked
 12179  003A' C001' FFDD         	movff	?_GetPortPORT+1,postdec2
 12180                           
 12181                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
 12182  003E' 0101               	movlb	1	; () banked
 12183  0040' 5100'              	movf	Port_Init@pPort& (0+255),w,b
 12184  0042' EC00' F000'        	call	_GetPortPORT
 12185  0046' 0101               	movlb	1	; () banked
 12186  0048' EE20 F004          	lfsr	2,4
 12187  004C' 5100'              	movf	Port_Init@pInput& (0+255),w,b
 12188  004E' 26D9               	addwf	fsr2l,f,c
 12189  0050' 5100'              	movf	(Port_Init@pInput+1)& (0+255),w,b
 12190  0052' 22DA               	addwfc	fsr2h,f,c
 12191  0054' 0100               	movlb	0	; () banked
 12192  0056' C000' FFDE         	movff	?_GetPortPORT,postinc2
 12193  005A' 0100               	movlb	0	; () banked
 12194  005C' C001' FFDD         	movff	?_GetPortPORT+1,postdec2
 12195                           
 12196                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
 12197  0060' 0101               	movlb	1	; () banked
 12198  0062' 5100'              	movf	Port_Init@pPort& (0+255),w,b
 12199  0064' EC00' F000'        	call	_GetPortTRIS
 12200  0068' 0101               	movlb	1	; () banked
 12201  006A' EE20 F002          	lfsr	2,2
 12202  006E' 5100'              	movf	Port_Init@pInput& (0+255),w,b
 12203  0070' 26D9               	addwf	fsr2l,f,c
 12204  0072' 5100'              	movf	(Port_Init@pInput+1)& (0+255),w,b
 12205  0074' 22DA               	addwfc	fsr2h,f,c
 12206  0076' 0100               	movlb	0	; () banked
 12207  0078' C000' FFDE         	movff	?_GetPortTRIS,postinc2
 12208  007C' 0100               	movlb	0	; () banked
 12209  007E' C001' FFDD         	movff	?_GetPortTRIS+1,postdec2
 12210                           
 12211                           ; BSR set to: 0
 12212                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
 12213  0082' 0101               	movlb	1	; () banked
 12214  0084' EE20 F004          	lfsr	2,4
 12215  0088' 5100'              	movf	Port_Init@pInput& (0+255),w,b
 12216  008A' 26D9               	addwf	fsr2l,f,c
 12217  008C' 5100'              	movf	(Port_Init@pInput+1)& (0+255),w,b
 12218  008E' 22DA               	addwfc	fsr2h,f,c
 12219  0090' CFDE F005'         	movff	postinc2,??_Port_Init
 12220  0094' CFDD F006'         	movff	postdec2,??_Port_Init+1
 12221  0098' C005' FFD9         	movff	??_Port_Init,fsr2l
 12222  009C' C006' FFDA         	movff	??_Port_Init+1,fsr2h
 12223  00A0' 0E00               	movlw	0
 12224  00A2' 6EDF               	movwf	indf2,c
 12225                           
 12226                           ; BSR set to: 1
 12227                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
 12228  00A4' 0101               	movlb	1	; () banked
 12229  00A6' EE20 F002          	lfsr	2,2
 12230  00AA' 5100'              	movf	Port_Init@pInput& (0+255),w,b
 12231  00AC' 26D9               	addwf	fsr2l,f,c
 12232  00AE' 5100'              	movf	(Port_Init@pInput+1)& (0+255),w,b
 12233  00B0' 22DA               	addwfc	fsr2h,f,c
 12234  00B2' CFDE F005'         	movff	postinc2,??_Port_Init
 12235  00B6' CFDD F006'         	movff	postdec2,??_Port_Init+1
 12236  00BA' C005' FFD9         	movff	??_Port_Init,fsr2l
 12237  00BE' C006' FFDA         	movff	??_Port_Init+1,fsr2h
 12238  00C2' 0EFF               	movlw	255
 12239  00C4' 6EDF               	movwf	indf2,c
 12240                           
 12241                           ; BSR set to: 1
 12242                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
 12243  00C6' C002' F03A'        	movff	Port_Init@pInput,Port_SetType@pInput
 12244  00CA' C003' F03B'        	movff	Port_Init@pInput+1,Port_SetType@pInput+1
 12245  00CE' 0E00               	movlw	0
 12246  00D0' 0100               	movlb	0	; () banked
 12247  00D2' 6F00'              	movwf	Port_SetType@pType& (0+255),b
 12248  00D4' EC00' F000'        	call	_Port_SetType	;wreg free
 12249                           
 12250                           ;Port.c: 166: UINT8 i;
 12251                           ;Port.c: 167: for (i=0; i<8; i++)
 12252  00D8' 0E00               	movlw	0
 12253  00DA' 0101               	movlb	1	; () banked
 12254  00DC' 6F00'              	movwf	Port_Init@i& (0+255),b
 12255  00DE'                    l12051:
 12256                           
 12257                           ; BSR set to: 1
 12258  00DE' 0E07               	movlw	7
 12259  00E0' 0101               	movlb	1	; () banked
 12260  00E2' 6500'              	cpfsgt	Port_Init@i& (0+255),b
 12261  00E4' D031               	goto	l403
 12262  00E6' D04B               	goto	u7920
 12263  00E8'                    
 12264                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
 12265                           
 12266                           ; BSR set to: 1
 12267  00E8' C002' F026'        	movff	Port_Init@pInput,Port_SetPinType@pInput
 12268  00EC' C003' F027'        	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 12269  00F0' C007' F028'        	movff	Port_Init@i,Port_SetPinType@pPin
 12270  00F4' 0E03               	movlw	3
 12271  00F6' 0100               	movlb	0	; () banked
 12272  00F8' 6F00'              	movwf	Port_SetPinType@pType& (0+255),b
 12273  00FA' EC00' F000'        	call	_Port_SetPinType	;wreg free
 12274                           
 12275                           ;Port.c: 173: break;
 12276  00FE' D03C               	goto	l405
 12277  0100'                    
 12278                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
 12279  0100' C002' F026'        	movff	Port_Init@pInput,Port_SetPinType@pInput
 12280  0104' C003' F027'        	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 12281  0108' C007' F028'        	movff	Port_Init@i,Port_SetPinType@pPin
 12282  010C' 0E02               	movlw	2
 12283  010E' 0100               	movlb	0	; () banked
 12284  0110' 6F00'              	movwf	Port_SetPinType@pType& (0+255),b
 12285  0112' EC00' F000'        	call	_Port_SetPinType	;wreg free
 12286                           
 12287                           ;Port.c: 176: break;
 12288  0116' D030               	goto	l405
 12289  0118'                    
 12290                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
 12291  0118' C002' F026'        	movff	Port_Init@pInput,Port_SetPinType@pInput
 12292  011C' C003' F027'        	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 12293  0120' C007' F028'        	movff	Port_Init@i,Port_SetPinType@pPin
 12294  0124' 0E01               	movlw	1
 12295  0126' 0100               	movlb	0	; () banked
 12296  0128' 6F00'              	movwf	Port_SetPinType@pType& (0+255),b
 12297  012A' EC00' F000'        	call	_Port_SetPinType	;wreg free
 12298                           
 12299                           ;Port.c: 179: break;
 12300  012E' D024               	goto	l405
 12301  0130'                    
 12302                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
 12303  0130' C002' F026'        	movff	Port_Init@pInput,Port_SetPinType@pInput
 12304  0134' C003' F027'        	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 12305  0138' C007' F028'        	movff	Port_Init@i,Port_SetPinType@pPin
 12306  013C' 0E00               	movlw	0
 12307  013E' 0100               	movlb	0	; () banked
 12308  0140' 6F00'              	movwf	Port_SetPinType@pType& (0+255),b
 12309  0142' EC00' F000'        	call	_Port_SetPinType	;wreg free
 12310                           
 12311                           ;Port.c: 183: }
 12312                           
 12313                           ;Port.c: 182: break;
 12314  0146' D018               	goto	l405
 12315  0148'                    l403:
 12316  0148' C002' FFD9         	movff	Port_Init@pInput,fsr2l
 12317  014C' C003' FFDA         	movff	Port_Init@pInput+1,fsr2h
 12318  0150' CFDE F00C'         	movff	postinc2,Word_GetPair@pInput
 12319  0154' CFDD F00D'         	movff	postdec2,Word_GetPair@pInput+1
 12320  0158' C007' F00E'        	movff	Port_Init@i,Word_GetPair@pPair
 12321  015C' EC00' F000'        	call	_Word_GetPair	;wreg free
 12322                           
 12323                           ; Switch size 1, requested type "space"
 12324                           ; Number of cases is 4, Range of values is 0 to 3
 12325                           ; switch strategies available:
 12326                           ; Name         Instructions Cycles
 12327                           ; simple_byte           13     7 (average)
 12328                           ;	Chosen strategy is simple_byte
 12329  0160' 0A00               	xorlw	0	; case 0
 12330  0162' B4D8               	btfsc	status,2,c
 12331  0164' D7C1               	goto	l404
 12332  0166' 0A01               	xorlw	1	; case 1
 12333  0168' B4D8               	btfsc	status,2,c
 12334  016A' D7D6               	goto	l407
 12335  016C' 0A03               	xorlw	3	; case 2
 12336  016E' B4D8               	btfsc	status,2,c
 12337  0170' D7C7               	goto	l406
 12338  0172' 0A01               	xorlw	1	; case 3
 12339  0174' B4D8               	btfsc	status,2,c
 12340  0176' D7DC               	goto	l408
 12341  0178'                    l405:
 12342  0178' 0101               	movlb	1	; () banked
 12343  017A' 2B00'              	incf	Port_Init@i& (0+255),f,b
 12344  017C' D7B0               	goto	l12051
 12345  017E'                    u7920:
 12346                           
 12347                           ; BSR set to: 1
 12348                           ;Port.c: 184: }
 12349                           ;Port.c: 185: Port_Set(pInput, 0x00);
 12350                           
 12351                           ; BSR set to: 1
 12352  017E' C002' F00F'        	movff	Port_Init@pInput,Port_Set@pInput
 12353  0182' C003' F010'        	movff	Port_Init@pInput+1,Port_Set@pInput+1
 12354  0186' 0E00               	movlw	0
 12355  0188' 0100               	movlb	0	; () banked
 12356  018A' 6F00'              	movwf	Port_Set@pValue& (0+255),b
 12357  018C' EC00' F000'        	call	_Port_Set	;wreg free
 12358  0190' 0012               	return		;funcret
 12359  0192'                    __end_of_Port_Init:
 12360                           	opt stack 0
 12361                           tosu	equ	0xFFF
 12362                           tosh	equ	0xFFE
 12363                           tosl	equ	0xFFD
 12364                           pclath	equ	0xFFA
 12365                           tblptru	equ	0xFF8
 12366                           tblptrh	equ	0xFF7
 12367                           tblptrl	equ	0xFF6
 12368                           tablat	equ	0xFF5
 12369                           prodh	equ	0xFF4
 12370                           prodl	equ	0xFF3
 12371                           postinc0	equ	0xFEE
 12372                           wreg	equ	0xFE8
 12373                           indf1	equ	0xFE7
 12374                           postdec1	equ	0xFE5
 12375                           fsr1h	equ	0xFE2
 12376                           fsr1l	equ	0xFE1
 12377                           indf2	equ	0xFDF
 12378                           postinc2	equ	0xFDE
 12379                           postdec2	equ	0xFDD
 12380                           plusw2	equ	0xFDB
 12381                           fsr2h	equ	0xFDA
 12382                           fsr2l	equ	0xFD9
 12383                           status	equ	0xFD8
 12384                           
 12385 ;; *************** function _Port_SetType *****************
 12386 ;; Defined at:
 12387 ;;		line 513 in file "Library/Port.c"
 12388 ;; Parameters:    Size  Location     Type
 12389 ;;  pInput          2   58[BANK0 ] const PTR struct Port
 12390 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 12391 ;;		 -> PortD(10), PortC(10), PortF(10), 
 12392 ;;  pType           1   60[BANK0 ] enum E6795
 12393 ;; Auto vars:     Size  Location     Type
 12394 ;;  Output          1   61[BANK0 ] enum E6475
 12395 ;; Return value:  Size  Location     Type
 12396 ;;                  1    wreg      enum E6475
 12397 ;; Registers used:
 12398 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12399 ;; Tracked objects:
 12400 ;;		On entry : 0/0
 12401 ;;		On exit  : 0/0
 12402 ;;		Unchanged: 0/0
 12403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12404 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12405 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12406 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12407 ;;      Totals:         0       4       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12408 ;;Total ram usage:        6 bytes
 12409 ;; Hardware stack levels used:    1
 12410 ;; Hardware stack levels required when called:   14
 12411 ;; This function calls:
 12412 ;;		_Port_CheckPortType
 12413 ;;		_Word_SetPair
 12414 ;; This function is called by:
 12415 ;;		_Port_Init
 12416 ;;		_MXK_Init
 12417 ;; This function uses a non-reentrant model
 12418 ;;
 12419                           
 12420                           	psect	text66
 12421  0000'                    __ptext66:
 12422                           	opt stack 0
 12423  0000'                    _Port_SetType:
 12424                           	opt stack 14
 12425                           
 12426                           ;Port.c: 515: ePinError Output = ePinErrorState;
 12427                           
 12428                           ;incstack = 0
 12429  0000' 0E05               	movlw	5
 12430  0002' 0100               	movlb	0	; () banked
 12431  0004' 6F00'              	movwf	Port_SetType@Output& (0+255),b
 12432                           
 12433                           ;Port.c: 517: switch (pType)
 12434  0006' D07A               	goto	l509
 12435  0008'                    
 12436                           ; BSR set to: 0
 12437                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
 12438                           
 12439                           ; BSR set to: 0
 12440  0008' 0100               	movlb	0	; () banked
 12441  000A' EE20 F002          	lfsr	2,2
 12442  000E' 5100'              	movf	Port_SetType@pInput& (0+255),w,b
 12443  0010' 26D9               	addwf	fsr2l,f,c
 12444  0012' 5100'              	movf	(Port_SetType@pInput+1)& (0+255),w,b
 12445  0014' 22DA               	addwfc	fsr2h,f,c
 12446  0016' CFDE F000'         	movff	postinc2,??_Port_SetType
 12447  001A' CFDD F001'         	movff	postdec2,??_Port_SetType+1
 12448  001E' C000' FFD9         	movff	??_Port_SetType,fsr2l
 12449  0022' C001' FFDA         	movff	??_Port_SetType+1,fsr2h
 12450  0026' 0EFF               	movlw	255
 12451  0028' D067               	goto	L7
 12452  002A'                    
 12453                           ; BSR set to: 0
 12454                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
 12455                           
 12456                           ; BSR set to: 0
 12457  002A' C03A' F036'        	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 12458  002E' C03B' F037'        	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 12459  0032' 0E01               	movlw	1
 12460  0034' 0100               	movlb	0	; () banked
 12461  0036' 6F00'              	movwf	Port_CheckPortType@pDrive& (0+255),b
 12462  0038' EC00' F000'        	call	_Port_CheckPortType	;wreg free
 12463  003C' 0100               	movlb	0	; () banked
 12464  003E' 6F00'              	movwf	Port_SetType@Output& (0+255),b
 12465  0040' 0100               	movlb	0	; () banked
 12466  0042' 5100'              	movf	Port_SetType@Output& (0+255),w,b
 12467  0044' A4D8               	btfss	status,2,c
 12468  0046' 0012               	return	
 12469                           
 12470                           ; BSR set to: 0
 12471                           ;Port.c: 527: {
 12472                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
 12473  0048' 0100               	movlb	0	; () banked
 12474  004A' EE20 F002          	lfsr	2,2
 12475  004E' 5100'              	movf	Port_SetType@pInput& (0+255),w,b
 12476  0050' 26D9               	addwf	fsr2l,f,c
 12477  0052' 5100'              	movf	(Port_SetType@pInput+1)& (0+255),w,b
 12478  0054' 22DA               	addwfc	fsr2h,f,c
 12479  0056' CFDE F000'         	movff	postinc2,??_Port_SetType
 12480  005A' CFDD F001'         	movff	postdec2,??_Port_SetType+1
 12481  005E' C000' FFD9         	movff	??_Port_SetType,fsr2l
 12482  0062' C001' FFDA         	movff	??_Port_SetType+1,fsr2h
 12483  0066' 0E00               	movlw	0
 12484  0068' 6EDF               	movwf	indf2,c
 12485                           
 12486                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
 12487  006A' 0100               	movlb	0	; () banked
 12488  006C' EE20 F004          	lfsr	2,4
 12489  0070' D036               	goto	L12
 12490  0072'                    
 12491                           ; BSR set to: 0
 12492                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
 12493                           
 12494                           ; BSR set to: 0
 12495  0072' C03A' F036'        	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 12496  0076' C03B' F037'        	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 12497  007A' 0E02               	movlw	2
 12498  007C' 0100               	movlb	0	; () banked
 12499  007E' 6F00'              	movwf	Port_CheckPortType@pDrive& (0+255),b
 12500  0080' EC00' F000'        	call	_Port_CheckPortType	;wreg free
 12501  0084' 0100               	movlb	0	; () banked
 12502  0086' 6F00'              	movwf	Port_SetType@Output& (0+255),b
 12503  0088' 0100               	movlb	0	; () banked
 12504  008A' 5100'              	movf	Port_SetType@Output& (0+255),w,b
 12505  008C' A4D8               	btfss	status,2,c
 12506  008E' 0012               	return	
 12507                           
 12508                           ; BSR set to: 0
 12509                           ;Port.c: 538: {
 12510                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
 12511  0090' 0100               	movlb	0	; () banked
 12512  0092' EE20 F002          	lfsr	2,2
 12513  0096' 5100'              	movf	Port_SetType@pInput& (0+255),w,b
 12514  0098' 26D9               	addwf	fsr2l,f,c
 12515  009A' 5100'              	movf	(Port_SetType@pInput+1)& (0+255),w,b
 12516  009C' 22DA               	addwfc	fsr2h,f,c
 12517  009E' CFDE F000'         	movff	postinc2,??_Port_SetType
 12518  00A2' CFDD F001'         	movff	postdec2,??_Port_SetType+1
 12519  00A6' C000' FFD9         	movff	??_Port_SetType,fsr2l
 12520  00AA' C001' FFDA         	movff	??_Port_SetType+1,fsr2h
 12521  00AE' 0EFF               	movlw	255
 12522  00B0' 6EDF               	movwf	indf2,c
 12523                           
 12524                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
 12525  00B2' 0100               	movlb	0	; () banked
 12526  00B4' EE20 F004          	lfsr	2,4
 12527  00B8' D7AA               	goto	L8
 12528  00BA'                    
 12529                           ; BSR set to: 0
 12530                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
 12531                           
 12532                           ; BSR set to: 0
 12533  00BA' C03A' F036'        	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 12534  00BE' C03B' F037'        	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 12535  00C2' 0E00               	movlw	0
 12536  00C4' 0100               	movlb	0	; () banked
 12537  00C6' 6F00'              	movwf	Port_CheckPortType@pDrive& (0+255),b
 12538  00C8' EC00' F000'        	call	_Port_CheckPortType	;wreg free
 12539  00CC' 0100               	movlb	0	; () banked
 12540  00CE' 6F00'              	movwf	Port_SetType@Output& (0+255),b
 12541  00D0' 0100               	movlb	0	; () banked
 12542  00D2' 5100'              	movf	Port_SetType@Output& (0+255),w,b
 12543  00D4' A4D8               	btfss	status,2,c
 12544  00D6' 0012               	return	
 12545                           
 12546                           ; BSR set to: 0
 12547                           ;Port.c: 549: {
 12548                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
 12549  00D8' 0100               	movlb	0	; () banked
 12550  00DA' EE20 F002          	lfsr	2,2
 12551  00DE'                    L12:
 12552  00DE' 5100'              	movf	Port_SetType@pInput& (0+255),w,b
 12553  00E0' 26D9               	addwf	fsr2l,f,c
 12554  00E2' 5100'              	movf	(Port_SetType@pInput+1)& (0+255),w,b
 12555  00E4' 22DA               	addwfc	fsr2h,f,c
 12556  00E6' CFDE F000'         	movff	postinc2,??_Port_SetType
 12557  00EA' CFDD F001'         	movff	postdec2,??_Port_SetType+1
 12558  00EE' C000' FFD9         	movff	??_Port_SetType,fsr2l
 12559  00F2' C001' FFDA         	movff	??_Port_SetType+1,fsr2h
 12560  00F6' 0E00               	movlw	0
 12561  00F8'                    L7:
 12562  00F8' 6EDF               	movwf	indf2,c
 12563                           
 12564                           ;Port.c: 552: }
 12565  00FA' D00E               	goto	l511
 12566  00FC'                    l509:
 12567                           
 12568                           ; BSR set to: 0
 12569                           
 12570                           ; BSR set to: 0
 12571  00FC' 0100               	movlb	0	; () banked
 12572  00FE' 5100'              	movf	Port_SetType@pType& (0+255),w,b
 12573                           
 12574                           ; Switch size 1, requested type "space"
 12575                           ; Number of cases is 4, Range of values is 0 to 3
 12576                           ; switch strategies available:
 12577                           ; Name         Instructions Cycles
 12578                           ; simple_byte           13     7 (average)
 12579                           ;	Chosen strategy is simple_byte
 12580  0100' 0A00               	xorlw	0	; case 0
 12581  0102' B4D8               	btfsc	status,2,c
 12582  0104' D781               	goto	l510
 12583  0106' 0A01               	xorlw	1	; case 1
 12584  0108' B4D8               	btfsc	status,2,c
 12585  010A' D78F               	goto	l512
 12586  010C' 0A03               	xorlw	3	; case 2
 12587  010E' B4D8               	btfsc	status,2,c
 12588  0110' D7B0               	goto	l516
 12589  0112' 0A01               	xorlw	1	; case 3
 12590  0114' B4D8               	btfsc	status,2,c
 12591  0116' D7D1               	goto	l519
 12592  0118'                    l511:
 12593                           
 12594                           ; BSR set to: 0
 12595                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
 12596                           
 12597                           ; BSR set to: 0
 12598  0118' 0E08               	movlw	8
 12599  011A' 0100               	movlb	0	; () banked
 12600  011C' 2500'              	addwf	Port_SetType@pInput& (0+255),w,b
 12601  011E' 0100               	movlb	0	; () banked
 12602  0120' 6F00'              	movwf	Word_SetPair@pInput& (0+255),b
 12603  0122' 0E00               	movlw	0
 12604  0124' 0100               	movlb	0	; () banked
 12605  0126' 2100'              	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 12606  0128' 0100               	movlb	0	; () banked
 12607  012A' 6F00'              	movwf	(Word_SetPair@pInput+1)& (0+255),b
 12608  012C' 0E00               	movlw	0
 12609  012E' 0100               	movlb	0	; () banked
 12610  0130' 6F00'              	movwf	Word_SetPair@pPair& (0+255),b
 12611  0132' C03C' F012'        	movff	Port_SetType@pType,Word_SetPair@pValue
 12612  0136' EC00' F000'        	call	_Word_SetPair	;wreg free
 12613                           
 12614                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
 12615  013A' 0E08               	movlw	8
 12616  013C' 0100               	movlb	0	; () banked
 12617  013E' 2500'              	addwf	Port_SetType@pInput& (0+255),w,b
 12618  0140' 0100               	movlb	0	; () banked
 12619  0142' 6F00'              	movwf	Word_SetPair@pInput& (0+255),b
 12620  0144' 0E00               	movlw	0
 12621  0146' 0100               	movlb	0	; () banked
 12622  0148' 2100'              	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 12623  014A' 0100               	movlb	0	; () banked
 12624  014C' 6F00'              	movwf	(Word_SetPair@pInput+1)& (0+255),b
 12625  014E' 0E01               	movlw	1
 12626  0150' 0100               	movlb	0	; () banked
 12627  0152' 6F00'              	movwf	Word_SetPair@pPair& (0+255),b
 12628  0154' C03C' F012'        	movff	Port_SetType@pType,Word_SetPair@pValue
 12629  0158' EC00' F000'        	call	_Word_SetPair	;wreg free
 12630                           
 12631                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
 12632  015C' 0E08               	movlw	8
 12633  015E' 0100               	movlb	0	; () banked
 12634  0160' 2500'              	addwf	Port_SetType@pInput& (0+255),w,b
 12635  0162' 0100               	movlb	0	; () banked
 12636  0164' 6F00'              	movwf	Word_SetPair@pInput& (0+255),b
 12637  0166' 0E00               	movlw	0
 12638  0168' 0100               	movlb	0	; () banked
 12639  016A' 2100'              	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 12640  016C' 0100               	movlb	0	; () banked
 12641  016E' 6F00'              	movwf	(Word_SetPair@pInput+1)& (0+255),b
 12642  0170' 0E02               	movlw	2
 12643  0172' 0100               	movlb	0	; () banked
 12644  0174' 6F00'              	movwf	Word_SetPair@pPair& (0+255),b
 12645  0176' C03C' F012'        	movff	Port_SetType@pType,Word_SetPair@pValue
 12646  017A' EC00' F000'        	call	_Word_SetPair	;wreg free
 12647                           
 12648                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
 12649  017E' 0E08               	movlw	8
 12650  0180' 0100               	movlb	0	; () banked
 12651  0182' 2500'              	addwf	Port_SetType@pInput& (0+255),w,b
 12652  0184' 0100               	movlb	0	; () banked
 12653  0186' 6F00'              	movwf	Word_SetPair@pInput& (0+255),b
 12654  0188' 0E00               	movlw	0
 12655  018A' 0100               	movlb	0	; () banked
 12656  018C' 2100'              	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 12657  018E' 0100               	movlb	0	; () banked
 12658  0190' 6F00'              	movwf	(Word_SetPair@pInput+1)& (0+255),b
 12659  0192' 0E03               	movlw	3
 12660  0194' 0100               	movlb	0	; () banked
 12661  0196' 6F00'              	movwf	Word_SetPair@pPair& (0+255),b
 12662  0198' C03C' F012'        	movff	Port_SetType@pType,Word_SetPair@pValue
 12663  019C' EC00' F000'        	call	_Word_SetPair	;wreg free
 12664                           
 12665                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
 12666  01A0' 0E08               	movlw	8
 12667  01A2' 0100               	movlb	0	; () banked
 12668  01A4' 2500'              	addwf	Port_SetType@pInput& (0+255),w,b
 12669  01A6' 0100               	movlb	0	; () banked
 12670  01A8' 6F00'              	movwf	Word_SetPair@pInput& (0+255),b
 12671  01AA' 0E00               	movlw	0
 12672  01AC' 0100               	movlb	0	; () banked
 12673  01AE' 2100'              	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 12674  01B0' 0100               	movlb	0	; () banked
 12675  01B2' 6F00'              	movwf	(Word_SetPair@pInput+1)& (0+255),b
 12676  01B4' 0E04               	movlw	4
 12677  01B6' 0100               	movlb	0	; () banked
 12678  01B8' 6F00'              	movwf	Word_SetPair@pPair& (0+255),b
 12679  01BA' C03C' F012'        	movff	Port_SetType@pType,Word_SetPair@pValue
 12680  01BE' EC00' F000'        	call	_Word_SetPair	;wreg free
 12681                           
 12682                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
 12683  01C2' 0E08               	movlw	8
 12684  01C4' 0100               	movlb	0	; () banked
 12685  01C6' 2500'              	addwf	Port_SetType@pInput& (0+255),w,b
 12686  01C8' 0100               	movlb	0	; () banked
 12687  01CA' 6F00'              	movwf	Word_SetPair@pInput& (0+255),b
 12688  01CC' 0E00               	movlw	0
 12689  01CE' 0100               	movlb	0	; () banked
 12690  01D0' 2100'              	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 12691  01D2' 0100               	movlb	0	; () banked
 12692  01D4' 6F00'              	movwf	(Word_SetPair@pInput+1)& (0+255),b
 12693  01D6' 0E05               	movlw	5
 12694  01D8' 0100               	movlb	0	; () banked
 12695  01DA' 6F00'              	movwf	Word_SetPair@pPair& (0+255),b
 12696  01DC' C03C' F012'        	movff	Port_SetType@pType,Word_SetPair@pValue
 12697  01E0' EC00' F000'        	call	_Word_SetPair	;wreg free
 12698                           
 12699                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
 12700  01E4' 0E08               	movlw	8
 12701  01E6' 0100               	movlb	0	; () banked
 12702  01E8' 2500'              	addwf	Port_SetType@pInput& (0+255),w,b
 12703  01EA' 0100               	movlb	0	; () banked
 12704  01EC' 6F00'              	movwf	Word_SetPair@pInput& (0+255),b
 12705  01EE' 0E00               	movlw	0
 12706  01F0' 0100               	movlb	0	; () banked
 12707  01F2' 2100'              	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 12708  01F4' 0100               	movlb	0	; () banked
 12709  01F6' 6F00'              	movwf	(Word_SetPair@pInput+1)& (0+255),b
 12710  01F8' 0E06               	movlw	6
 12711  01FA' 0100               	movlb	0	; () banked
 12712  01FC' 6F00'              	movwf	Word_SetPair@pPair& (0+255),b
 12713  01FE' C03C' F012'        	movff	Port_SetType@pType,Word_SetPair@pValue
 12714  0202' EC00' F000'        	call	_Word_SetPair	;wreg free
 12715                           
 12716                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
 12717  0206' 0E08               	movlw	8
 12718  0208' 0100               	movlb	0	; () banked
 12719  020A' 2500'              	addwf	Port_SetType@pInput& (0+255),w,b
 12720  020C' 0100               	movlb	0	; () banked
 12721  020E' 6F00'              	movwf	Word_SetPair@pInput& (0+255),b
 12722  0210' 0E00               	movlw	0
 12723  0212' 0100               	movlb	0	; () banked
 12724  0214' 2100'              	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 12725  0216' 0100               	movlb	0	; () banked
 12726  0218' 6F00'              	movwf	(Word_SetPair@pInput+1)& (0+255),b
 12727  021A' 0E07               	movlw	7
 12728  021C' 0100               	movlb	0	; () banked
 12729  021E' 6F00'              	movwf	Word_SetPair@pPair& (0+255),b
 12730  0220' C03C' F012'        	movff	Port_SetType@pType,Word_SetPair@pValue
 12731  0224' EC00' F000'        	call	_Word_SetPair	;wreg free
 12732  0228' 0012               	return	
 12733  022A'                    __end_of_Port_SetType:
 12734                           	opt stack 0
 12735                           tosu	equ	0xFFF
 12736                           tosh	equ	0xFFE
 12737                           tosl	equ	0xFFD
 12738                           pclath	equ	0xFFA
 12739                           tblptru	equ	0xFF8
 12740                           tblptrh	equ	0xFF7
 12741                           tblptrl	equ	0xFF6
 12742                           tablat	equ	0xFF5
 12743                           prodh	equ	0xFF4
 12744                           prodl	equ	0xFF3
 12745                           postinc0	equ	0xFEE
 12746                           wreg	equ	0xFE8
 12747                           indf1	equ	0xFE7
 12748                           postdec1	equ	0xFE5
 12749                           fsr1h	equ	0xFE2
 12750                           fsr1l	equ	0xFE1
 12751                           indf2	equ	0xFDF
 12752                           postinc2	equ	0xFDE
 12753                           postdec2	equ	0xFDD
 12754                           plusw2	equ	0xFDB
 12755                           fsr2h	equ	0xFDA
 12756                           fsr2l	equ	0xFD9
 12757                           status	equ	0xFD8
 12758                           
 12759 ;; *************** function _Port_CheckPortType *****************
 12760 ;; Defined at:
 12761 ;;		line 138 in file "Library/Port.c"
 12762 ;; Parameters:    Size  Location     Type
 12763 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 12764 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 12765 ;;		 -> PortD(10), PortC(10), PortF(10), 
 12766 ;;  pDrive          1   56[BANK0 ] enum E6469
 12767 ;; Auto vars:     Size  Location     Type
 12768 ;;  Output          1   57[BANK0 ] enum E6475
 12769 ;; Return value:  Size  Location     Type
 12770 ;;                  1    wreg      enum E6475
 12771 ;; Registers used:
 12772 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12773 ;; Tracked objects:
 12774 ;;		On entry : 0/0
 12775 ;;		On exit  : 0/0
 12776 ;;		Unchanged: 0/0
 12777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12778 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12779 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12781 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12782 ;;Total ram usage:        4 bytes
 12783 ;; Hardware stack levels used:    1
 12784 ;; Hardware stack levels required when called:   13
 12785 ;; This function calls:
 12786 ;;		_Port_CheckQuadType
 12787 ;; This function is called by:
 12788 ;;		_Port_SetType
 12789 ;; This function uses a non-reentrant model
 12790 ;;
 12791                           
 12792                           	psect	text67
 12793  0000'                    __ptext67:
 12794                           	opt stack 0
 12795  0000'                    _Port_CheckPortType:
 12796                           	opt stack 14
 12797                           
 12798                           ;Port.c: 140: ePinError Output = ePinErrorState;
 12799                           
 12800                           ;incstack = 0
 12801  0000' 0E05               	movlw	5
 12802  0002' 0100               	movlb	0	; () banked
 12803  0004' 6F00'              	movwf	Port_CheckPortType@Output& (0+255),b
 12804                           
 12805                           ; BSR set to: 0
 12806                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
 12807  0006' C036' F02F'        	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 12808  000A' C037' F030'        	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 12809  000E' 0E00               	movlw	0
 12810  0010' 0100               	movlb	0	; () banked
 12811  0012' 6F00'              	movwf	Port_CheckQuadType@pQuad& (0+255),b
 12812  0014' C038' F032'        	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 12813  0018' EC00' F000'        	call	_Port_CheckQuadType	;wreg free
 12814  001C' 0100               	movlb	0	; () banked
 12815  001E' 6F00'              	movwf	Port_CheckPortType@Output& (0+255),b
 12816  0020' 0100               	movlb	0	; () banked
 12817  0022' 5100'              	movf	Port_CheckPortType@Output& (0+255),w,b
 12818  0024' A4D8               	btfss	status,2,c
 12819  0026' D00D               	goto	l397
 12820                           
 12821                           ; BSR set to: 0
 12822                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
 12823  0028' C036' F02F'        	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 12824  002C' C037' F030'        	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 12825  0030' 0E01               	movlw	1
 12826  0032' 0100               	movlb	0	; () banked
 12827  0034' 6F00'              	movwf	Port_CheckQuadType@pQuad& (0+255),b
 12828  0036' C038' F032'        	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 12829  003A' EC00' F000'        	call	_Port_CheckQuadType	;wreg free
 12830  003E' 0100               	movlb	0	; () banked
 12831  0040' 6F00'              	movwf	Port_CheckPortType@Output& (0+255),b
 12832  0042'                    l397:
 12833                           
 12834                           ; BSR set to: 0
 12835                           ;Port.c: 146: return Output;
 12836                           
 12837                           ; BSR set to: 0
 12838  0042' 0100               	movlb	0	; () banked
 12839  0044' 5100'              	movf	Port_CheckPortType@Output& (0+255),w,b
 12840  0046' 0012               	return	
 12841  0048'                    __end_of_Port_CheckPortType:
 12842                           	opt stack 0
 12843                           tosu	equ	0xFFF
 12844                           tosh	equ	0xFFE
 12845                           tosl	equ	0xFFD
 12846                           pclath	equ	0xFFA
 12847                           tblptru	equ	0xFF8
 12848                           tblptrh	equ	0xFF7
 12849                           tblptrl	equ	0xFF6
 12850                           tablat	equ	0xFF5
 12851                           prodh	equ	0xFF4
 12852                           prodl	equ	0xFF3
 12853                           postinc0	equ	0xFEE
 12854                           wreg	equ	0xFE8
 12855                           indf1	equ	0xFE7
 12856                           postdec1	equ	0xFE5
 12857                           fsr1h	equ	0xFE2
 12858                           fsr1l	equ	0xFE1
 12859                           indf2	equ	0xFDF
 12860                           postinc2	equ	0xFDE
 12861                           postdec2	equ	0xFDD
 12862                           plusw2	equ	0xFDB
 12863                           fsr2h	equ	0xFDA
 12864                           fsr2l	equ	0xFD9
 12865                           status	equ	0xFD8
 12866                           
 12867 ;; *************** function _Port_Set *****************
 12868 ;; Defined at:
 12869 ;;		line 570 in file "Library/Port.c"
 12870 ;; Parameters:    Size  Location     Type
 12871 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 12872 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 12873 ;;		 -> PortD(10), PortC(10), PortF(10), 
 12874 ;;  pValue          1   17[BANK0 ] unsigned char 
 12875 ;; Auto vars:     Size  Location     Type
 12876 ;;  TypeActual      2   36[BANK0 ] unsigned short 
 12877 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
 12878 ;;  Type            1   38[BANK0 ] enum E6795
 12879 ;; Return value:  Size  Location     Type
 12880 ;;                  1    wreg      void 
 12881 ;; Registers used:
 12882 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12883 ;; Tracked objects:
 12884 ;;		On entry : 0/0
 12885 ;;		On exit  : 0/0
 12886 ;;		Unchanged: 0/0
 12887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12888 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12889 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12890 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12891 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12892 ;;Total ram usage:       24 bytes
 12893 ;; Hardware stack levels used:    1
 12894 ;; Hardware stack levels required when called:   10
 12895 ;; This function calls:
 12896 ;;		_Byte_SetByte
 12897 ;;		_Word_GetPair
 12898 ;; This function is called by:
 12899 ;;		_Port_Init
 12900 ;;		_Port_Toggle
 12901 ;; This function uses a non-reentrant model
 12902 ;;
 12903                           
 12904                           	psect	text68
 12905  0000'                    __ptext68:
 12906                           	opt stack 0
 12907  0000'                    _Port_Set:
 12908                           	opt stack 17
 12909                           
 12910                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
 12911                           
 12912                           ; BSR set to: 0
 12913                           ;incstack = 0
 12914  0000' 0E08               	movlw	8
 12915  0002' 0100               	movlb	0	; () banked
 12916  0004' 2500'              	addwf	Port_Set@pInput& (0+255),w,b
 12917  0006' 0100               	movlb	0	; () banked
 12918  0008' 6F00'              	movwf	Word_GetPair@pInput& (0+255),b
 12919  000A' 0E00               	movlw	0
 12920  000C' 0100               	movlb	0	; () banked
 12921  000E' 2100'              	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 12922  0010' 0100               	movlb	0	; () banked
 12923  0012' 6F00'              	movwf	(Word_GetPair@pInput+1)& (0+255),b
 12924  0014' 0E00               	movlw	0
 12925  0016' 0100               	movlb	0	; () banked
 12926  0018' 6F00'              	movwf	Word_GetPair@pPair& (0+255),b
 12927  001A' EC00' F000'        	call	_Word_GetPair	;wreg free
 12928  001E' 0100               	movlb	0	; () banked
 12929  0020' 6F00'              	movwf	Port_Set@Type& (0+255),b
 12930                           
 12931                           ; BSR set to: 0
 12932                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
 12933  0022' 0100               	movlb	0	; () banked
 12934  0024' 5100'              	movf	Port_Set@Type& (0+255),w,b
 12935  0026' 0100               	movlb	0	; () banked
 12936  0028' 6F00'              	movwf	??_Port_Set& (0+255),b
 12937  002A' 6B00'              	clrf	(??_Port_Set+1)& (0+255),b
 12938  002C' 0E0E               	movlw	14
 12939  002E'                    u7465:
 12940  002E' 90D8               	bcf	status,0,c
 12941  0030' 0100               	movlb	0	; () banked
 12942  0032' 3700'              	rlcf	??_Port_Set& (0+255),f,b
 12943  0034' 3700'              	rlcf	(??_Port_Set+1)& (0+255),f,b
 12944  0036' 2EE8               	decfsz	wreg,f,c
 12945  0038' D7FA               	goto	u7465
 12946  003A' 0100               	movlb	0	; () banked
 12947  003C' 5100'              	movf	Port_Set@Type& (0+255),w,b
 12948  003E' 0100               	movlb	0	; () banked
 12949  0040' 6F00'              	movwf	(??_Port_Set+2)& (0+255),b
 12950  0042' 6B00'              	clrf	(??_Port_Set+3)& (0+255),b
 12951  0044' 0E0C               	movlw	12
 12952  0046'                    u7475:
 12953  0046' 90D8               	bcf	status,0,c
 12954  0048' 0100               	movlb	0	; () banked
 12955  004A' 3700'              	rlcf	(??_Port_Set+2)& (0+255),f,b
 12956  004C' 3700'              	rlcf	(??_Port_Set+3)& (0+255),f,b
 12957  004E' 2EE8               	decfsz	wreg,f,c
 12958  0050' D7FA               	goto	u7475
 12959  0052' 0100               	movlb	0	; () banked
 12960  0054' 5100'              	movf	Port_Set@Type& (0+255),w,b
 12961  0056' 0100               	movlb	0	; () banked
 12962  0058' 6F00'              	movwf	(??_Port_Set+4)& (0+255),b
 12963  005A' 6B00'              	clrf	(??_Port_Set+5)& (0+255),b
 12964  005C' 0E0A               	movlw	10
 12965  005E'                    u7485:
 12966  005E' 90D8               	bcf	status,0,c
 12967  0060' 0100               	movlb	0	; () banked
 12968  0062' 3700'              	rlcf	(??_Port_Set+4)& (0+255),f,b
 12969  0064' 3700'              	rlcf	(??_Port_Set+5)& (0+255),f,b
 12970  0066' 2EE8               	decfsz	wreg,f,c
 12971  0068' D7FA               	goto	u7485
 12972  006A' 0100               	movlb	0	; () banked
 12973  006C' 5100'              	movf	Port_Set@Type& (0+255),w,b
 12974  006E' 0100               	movlb	0	; () banked
 12975  0070' 6F00'              	movwf	(??_Port_Set+7)& (0+255),b
 12976  0072' 6B00'              	clrf	(??_Port_Set+6)& (0+255),b
 12977  0074' 0100               	movlb	0	; () banked
 12978  0076' 5100'              	movf	Port_Set@Type& (0+255),w,b
 12979  0078' 0100               	movlb	0	; () banked
 12980  007A' 6F00'              	movwf	(??_Port_Set+8)& (0+255),b
 12981  007C' 6B00'              	clrf	(??_Port_Set+9)& (0+255),b
 12982  007E' 0E06               	movlw	6
 12983  0080'                    u7495:
 12984  0080' 90D8               	bcf	status,0,c
 12985  0082' 0100               	movlb	0	; () banked
 12986  0084' 3700'              	rlcf	(??_Port_Set+8)& (0+255),f,b
 12987  0086' 3700'              	rlcf	(??_Port_Set+9)& (0+255),f,b
 12988  0088' 2EE8               	decfsz	wreg,f,c
 12989  008A' D7FA               	goto	u7495
 12990  008C' 0100               	movlb	0	; () banked
 12991  008E' 5100'              	movf	Port_Set@Type& (0+255),w,b
 12992  0090' 0100               	movlb	0	; () banked
 12993  0092' 6F00'              	movwf	(??_Port_Set+10)& (0+255),b
 12994  0094' 6B00'              	clrf	(??_Port_Set+11)& (0+255),b
 12995  0096' 0100               	movlb	0	; () banked
 12996  0098' 3B00'              	swapf	(??_Port_Set+10)& (0+255),f,b
 12997  009A' 3B00'              	swapf	(??_Port_Set+11)& (0+255),f,b
 12998  009C' 0EF0               	movlw	240
 12999  009E' 1700'              	andwf	(??_Port_Set+11)& (0+255),f,b
 13000  00A0' 5100'              	movf	(??_Port_Set+10)& (0+255),w,b
 13001  00A2' 0B0F               	andlw	15
 13002  00A4' 1300'              	iorwf	(??_Port_Set+11)& (0+255),f,b
 13003  00A6' 0EF0               	movlw	240
 13004  00A8' 1700'              	andwf	(??_Port_Set+10)& (0+255),f,b
 13005  00AA' 0100               	movlb	0	; () banked
 13006  00AC' 5100'              	movf	Port_Set@Type& (0+255),w,b
 13007  00AE' 0100               	movlb	0	; () banked
 13008  00B0' 6F00'              	movwf	(??_Port_Set+12)& (0+255),b
 13009  00B2' 6B00'              	clrf	(??_Port_Set+13)& (0+255),b
 13010  00B4' 0100               	movlb	0	; () banked
 13011  00B6' 90D8               	bcf	status,0,c
 13012  00B8' 3700'              	rlcf	(??_Port_Set+12)& (0+255),f,b
 13013  00BA' 3700'              	rlcf	(??_Port_Set+13)& (0+255),f,b
 13014  00BC' 0100               	movlb	0	; () banked
 13015  00BE' 90D8               	bcf	status,0,c
 13016  00C0' 3700'              	rlcf	(??_Port_Set+12)& (0+255),f,b
 13017  00C2' 3700'              	rlcf	(??_Port_Set+13)& (0+255),f,b
 13018  00C4' 0100               	movlb	0	; () banked
 13019  00C6' 5100'              	movf	Port_Set@Type& (0+255),w,b
 13020  00C8' 0100               	movlb	0	; () banked
 13021  00CA' 6F00'              	movwf	(??_Port_Set+14)& (0+255),b
 13022  00CC' 6B00'              	clrf	(??_Port_Set+15)& (0+255),b
 13023  00CE' 0100               	movlb	0	; () banked
 13024  00D0' 5100'              	movf	(??_Port_Set+12)& (0+255),w,b
 13025  00D2' 0100               	movlb	0	; () banked
 13026  00D4' 1300'              	iorwf	(??_Port_Set+14)& (0+255),f,b
 13027  00D6' 0100               	movlb	0	; () banked
 13028  00D8' 5100'              	movf	(??_Port_Set+13)& (0+255),w,b
 13029  00DA' 0100               	movlb	0	; () banked
 13030  00DC' 1300'              	iorwf	(??_Port_Set+15)& (0+255),f,b
 13031  00DE' 0100               	movlb	0	; () banked
 13032  00E0' 5100'              	movf	(??_Port_Set+10)& (0+255),w,b
 13033  00E2' 0100               	movlb	0	; () banked
 13034  00E4' 1300'              	iorwf	(??_Port_Set+14)& (0+255),f,b
 13035  00E6' 0100               	movlb	0	; () banked
 13036  00E8' 5100'              	movf	(??_Port_Set+11)& (0+255),w,b
 13037  00EA' 0100               	movlb	0	; () banked
 13038  00EC' 1300'              	iorwf	(??_Port_Set+15)& (0+255),f,b
 13039  00EE' 0100               	movlb	0	; () banked
 13040  00F0' 5100'              	movf	(??_Port_Set+8)& (0+255),w,b
 13041  00F2' 0100               	movlb	0	; () banked
 13042  00F4' 1300'              	iorwf	(??_Port_Set+14)& (0+255),f,b
 13043  00F6' 0100               	movlb	0	; () banked
 13044  00F8' 5100'              	movf	(??_Port_Set+9)& (0+255),w,b
 13045  00FA' 0100               	movlb	0	; () banked
 13046  00FC' 1300'              	iorwf	(??_Port_Set+15)& (0+255),f,b
 13047  00FE' 0100               	movlb	0	; () banked
 13048  0100' 5100'              	movf	(??_Port_Set+6)& (0+255),w,b
 13049  0102' 0100               	movlb	0	; () banked
 13050  0104' 1300'              	iorwf	(??_Port_Set+14)& (0+255),f,b
 13051  0106' 0100               	movlb	0	; () banked
 13052  0108' 5100'              	movf	(??_Port_Set+7)& (0+255),w,b
 13053  010A' 0100               	movlb	0	; () banked
 13054  010C' 1300'              	iorwf	(??_Port_Set+15)& (0+255),f,b
 13055  010E' 0100               	movlb	0	; () banked
 13056  0110' 5100'              	movf	(??_Port_Set+4)& (0+255),w,b
 13057  0112' 0100               	movlb	0	; () banked
 13058  0114' 1300'              	iorwf	(??_Port_Set+14)& (0+255),f,b
 13059  0116' 0100               	movlb	0	; () banked
 13060  0118' 5100'              	movf	(??_Port_Set+5)& (0+255),w,b
 13061  011A' 0100               	movlb	0	; () banked
 13062  011C' 1300'              	iorwf	(??_Port_Set+15)& (0+255),f,b
 13063  011E' 0100               	movlb	0	; () banked
 13064  0120' 5100'              	movf	(??_Port_Set+2)& (0+255),w,b
 13065  0122' 0100               	movlb	0	; () banked
 13066  0124' 1300'              	iorwf	(??_Port_Set+14)& (0+255),f,b
 13067  0126' 0100               	movlb	0	; () banked
 13068  0128' 5100'              	movf	(??_Port_Set+3)& (0+255),w,b
 13069  012A' 0100               	movlb	0	; () banked
 13070  012C' 1300'              	iorwf	(??_Port_Set+15)& (0+255),f,b
 13071  012E' 0100               	movlb	0	; () banked
 13072  0130' 5100'              	movf	??_Port_Set& (0+255),w,b
 13073  0132' 0100               	movlb	0	; () banked
 13074  0134' 1100'              	iorwf	(??_Port_Set+14)& (0+255),w,b
 13075  0136' 0100               	movlb	0	; () banked
 13076  0138' 6F00'              	movwf	Port_Set@TypeRequired& (0+255),b
 13077  013A' 0100               	movlb	0	; () banked
 13078  013C' 5100'              	movf	(??_Port_Set+1)& (0+255),w,b
 13079  013E' 0100               	movlb	0	; () banked
 13080  0140' 1100'              	iorwf	(??_Port_Set+15)& (0+255),w,b
 13081  0142' 0100               	movlb	0	; () banked
 13082  0144' 6F00'              	movwf	(Port_Set@TypeRequired+1)& (0+255),b
 13083                           
 13084                           ; BSR set to: 0
 13085                           ;Port.c: 574: UINT16 TypeActual = Type;
 13086  0146' C026' F024'        	movff	Port_Set@Type,Port_Set@TypeActual
 13087  014A' 0100               	movlb	0	; () banked
 13088  014C' 6B00'              	clrf	(Port_Set@TypeActual+1)& (0+255),b
 13089                           
 13090                           ; BSR set to: 0
 13091                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
 13092  014E' 0E08               	movlw	8
 13093  0150' 0100               	movlb	0	; () banked
 13094  0152' 2500'              	addwf	Port_Set@pInput& (0+255),w,b
 13095  0154' 0100               	movlb	0	; () banked
 13096  0156' 6F00'              	movwf	Word_GetPair@pInput& (0+255),b
 13097  0158' 0E00               	movlw	0
 13098  015A' 0100               	movlb	0	; () banked
 13099  015C' 2100'              	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 13100  015E' 0100               	movlb	0	; () banked
 13101  0160' 6F00'              	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13102  0162' 0E01               	movlw	1
 13103  0164' 0100               	movlb	0	; () banked
 13104  0166' 6F00'              	movwf	Word_GetPair@pPair& (0+255),b
 13105  0168' EC00' F000'        	call	_Word_GetPair	;wreg free
 13106  016C' 0100               	movlb	0	; () banked
 13107  016E' 6F00'              	movwf	??_Port_Set& (0+255),b
 13108  0170' 6B00'              	clrf	(??_Port_Set+1)& (0+255),b
 13109  0172' 0100               	movlb	0	; () banked
 13110  0174' 90D8               	bcf	status,0,c
 13111  0176' 3700'              	rlcf	??_Port_Set& (0+255),f,b
 13112  0178' 3700'              	rlcf	(??_Port_Set+1)& (0+255),f,b
 13113  017A' 0100               	movlb	0	; () banked
 13114  017C' 90D8               	bcf	status,0,c
 13115  017E' 3700'              	rlcf	??_Port_Set& (0+255),f,b
 13116  0180' 3700'              	rlcf	(??_Port_Set+1)& (0+255),f,b
 13117  0182' 0100               	movlb	0	; () banked
 13118  0184' 5100'              	movf	??_Port_Set& (0+255),w,b
 13119  0186' 0100               	movlb	0	; () banked
 13120  0188' 1300'              	iorwf	Port_Set@TypeActual& (0+255),f,b
 13121  018A' 0100               	movlb	0	; () banked
 13122  018C' 5100'              	movf	(??_Port_Set+1)& (0+255),w,b
 13123  018E' 0100               	movlb	0	; () banked
 13124  0190' 1300'              	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 13125                           
 13126                           ; BSR set to: 0
 13127                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
 13128  0192' 0E08               	movlw	8
 13129  0194' 0100               	movlb	0	; () banked
 13130  0196' 2500'              	addwf	Port_Set@pInput& (0+255),w,b
 13131  0198' 0100               	movlb	0	; () banked
 13132  019A' 6F00'              	movwf	Word_GetPair@pInput& (0+255),b
 13133  019C' 0E00               	movlw	0
 13134  019E' 0100               	movlb	0	; () banked
 13135  01A0' 2100'              	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 13136  01A2' 0100               	movlb	0	; () banked
 13137  01A4' 6F00'              	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13138  01A6' 0E02               	movlw	2
 13139  01A8' 0100               	movlb	0	; () banked
 13140  01AA' 6F00'              	movwf	Word_GetPair@pPair& (0+255),b
 13141  01AC' EC00' F000'        	call	_Word_GetPair	;wreg free
 13142  01B0' 0100               	movlb	0	; () banked
 13143  01B2' 6F00'              	movwf	??_Port_Set& (0+255),b
 13144  01B4' 6B00'              	clrf	(??_Port_Set+1)& (0+255),b
 13145  01B6' 0100               	movlb	0	; () banked
 13146  01B8' 3B00'              	swapf	??_Port_Set& (0+255),f,b
 13147  01BA' 3B00'              	swapf	(??_Port_Set+1)& (0+255),f,b
 13148  01BC' 0EF0               	movlw	240
 13149  01BE' 1700'              	andwf	(??_Port_Set+1)& (0+255),f,b
 13150  01C0' 5100'              	movf	??_Port_Set& (0+255),w,b
 13151  01C2' 0B0F               	andlw	15
 13152  01C4' 1300'              	iorwf	(??_Port_Set+1)& (0+255),f,b
 13153  01C6' 0EF0               	movlw	240
 13154  01C8' 1700'              	andwf	??_Port_Set& (0+255),f,b
 13155  01CA' 0100               	movlb	0	; () banked
 13156  01CC' 5100'              	movf	??_Port_Set& (0+255),w,b
 13157  01CE' 0100               	movlb	0	; () banked
 13158  01D0' 1300'              	iorwf	Port_Set@TypeActual& (0+255),f,b
 13159  01D2' 0100               	movlb	0	; () banked
 13160  01D4' 5100'              	movf	(??_Port_Set+1)& (0+255),w,b
 13161  01D6' 0100               	movlb	0	; () banked
 13162  01D8' 1300'              	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 13163                           
 13164                           ; BSR set to: 0
 13165                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
 13166  01DA' 0E08               	movlw	8
 13167  01DC' 0100               	movlb	0	; () banked
 13168  01DE' 2500'              	addwf	Port_Set@pInput& (0+255),w,b
 13169  01E0' 0100               	movlb	0	; () banked
 13170  01E2' 6F00'              	movwf	Word_GetPair@pInput& (0+255),b
 13171  01E4' 0E00               	movlw	0
 13172  01E6' 0100               	movlb	0	; () banked
 13173  01E8' 2100'              	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 13174  01EA' 0100               	movlb	0	; () banked
 13175  01EC' 6F00'              	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13176  01EE' 0E03               	movlw	3
 13177  01F0' 0100               	movlb	0	; () banked
 13178  01F2' 6F00'              	movwf	Word_GetPair@pPair& (0+255),b
 13179  01F4' EC00' F000'        	call	_Word_GetPair	;wreg free
 13180  01F8' 0100               	movlb	0	; () banked
 13181  01FA' 6F00'              	movwf	??_Port_Set& (0+255),b
 13182  01FC' 6B00'              	clrf	(??_Port_Set+1)& (0+255),b
 13183  01FE' 0E06               	movlw	6
 13184  0200'                    u7505:
 13185  0200' 90D8               	bcf	status,0,c
 13186  0202' 0100               	movlb	0	; () banked
 13187  0204' 3700'              	rlcf	??_Port_Set& (0+255),f,b
 13188  0206' 3700'              	rlcf	(??_Port_Set+1)& (0+255),f,b
 13189  0208' 2EE8               	decfsz	wreg,f,c
 13190  020A' D7FA               	goto	u7505
 13191  020C' 0100               	movlb	0	; () banked
 13192  020E' 5100'              	movf	??_Port_Set& (0+255),w,b
 13193  0210' 0100               	movlb	0	; () banked
 13194  0212' 1300'              	iorwf	Port_Set@TypeActual& (0+255),f,b
 13195  0214' 0100               	movlb	0	; () banked
 13196  0216' 5100'              	movf	(??_Port_Set+1)& (0+255),w,b
 13197  0218' 0100               	movlb	0	; () banked
 13198  021A' 1300'              	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 13199                           
 13200                           ; BSR set to: 0
 13201                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
 13202  021C' 0E08               	movlw	8
 13203  021E' 0100               	movlb	0	; () banked
 13204  0220' 2500'              	addwf	Port_Set@pInput& (0+255),w,b
 13205  0222' 0100               	movlb	0	; () banked
 13206  0224' 6F00'              	movwf	Word_GetPair@pInput& (0+255),b
 13207  0226' 0E00               	movlw	0
 13208  0228' 0100               	movlb	0	; () banked
 13209  022A' 2100'              	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 13210  022C' 0100               	movlb	0	; () banked
 13211  022E' 6F00'              	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13212  0230' 0E04               	movlw	4
 13213  0232' 0100               	movlb	0	; () banked
 13214  0234' 6F00'              	movwf	Word_GetPair@pPair& (0+255),b
 13215  0236' EC00' F000'        	call	_Word_GetPair	;wreg free
 13216  023A' 0100               	movlb	0	; () banked
 13217  023C' 6F00'              	movwf	??_Port_Set& (0+255),b
 13218  023E' 0100               	movlb	0	; () banked
 13219  0240' 5100'              	movf	??_Port_Set& (0+255),w,b
 13220  0242' 0100               	movlb	0	; () banked
 13221  0244' 6F00'              	movwf	(??_Port_Set+2)& (0+255),b
 13222  0246' 6B00'              	clrf	(??_Port_Set+1)& (0+255),b
 13223  0248' 0100               	movlb	0	; () banked
 13224  024A' 5100'              	movf	(??_Port_Set+1)& (0+255),w,b
 13225  024C' 0100               	movlb	0	; () banked
 13226  024E' 1300'              	iorwf	Port_Set@TypeActual& (0+255),f,b
 13227  0250' 0100               	movlb	0	; () banked
 13228  0252' 5100'              	movf	(??_Port_Set+2)& (0+255),w,b
 13229  0254' 0100               	movlb	0	; () banked
 13230  0256' 1300'              	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 13231                           
 13232                           ; BSR set to: 0
 13233                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
 13234  0258' 0E08               	movlw	8
 13235  025A' 0100               	movlb	0	; () banked
 13236  025C' 2500'              	addwf	Port_Set@pInput& (0+255),w,b
 13237  025E' 0100               	movlb	0	; () banked
 13238  0260' 6F00'              	movwf	Word_GetPair@pInput& (0+255),b
 13239  0262' 0E00               	movlw	0
 13240  0264' 0100               	movlb	0	; () banked
 13241  0266' 2100'              	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 13242  0268' 0100               	movlb	0	; () banked
 13243  026A' 6F00'              	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13244  026C' 0E05               	movlw	5
 13245  026E' 0100               	movlb	0	; () banked
 13246  0270' 6F00'              	movwf	Word_GetPair@pPair& (0+255),b
 13247  0272' EC00' F000'        	call	_Word_GetPair	;wreg free
 13248  0276' 0100               	movlb	0	; () banked
 13249  0278' 6F00'              	movwf	??_Port_Set& (0+255),b
 13250  027A' 6B00'              	clrf	(??_Port_Set+1)& (0+255),b
 13251  027C' 0E0A               	movlw	10
 13252  027E'                    u7515:
 13253  027E' 90D8               	bcf	status,0,c
 13254  0280' 0100               	movlb	0	; () banked
 13255  0282' 3700'              	rlcf	??_Port_Set& (0+255),f,b
 13256  0284' 3700'              	rlcf	(??_Port_Set+1)& (0+255),f,b
 13257  0286' 2EE8               	decfsz	wreg,f,c
 13258  0288' D7FA               	goto	u7515
 13259  028A' 0100               	movlb	0	; () banked
 13260  028C' 5100'              	movf	??_Port_Set& (0+255),w,b
 13261  028E' 0100               	movlb	0	; () banked
 13262  0290' 1300'              	iorwf	Port_Set@TypeActual& (0+255),f,b
 13263  0292' 0100               	movlb	0	; () banked
 13264  0294' 5100'              	movf	(??_Port_Set+1)& (0+255),w,b
 13265  0296' 0100               	movlb	0	; () banked
 13266  0298' 1300'              	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 13267                           
 13268                           ; BSR set to: 0
 13269                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
 13270  029A' 0E08               	movlw	8
 13271  029C' 0100               	movlb	0	; () banked
 13272  029E' 2500'              	addwf	Port_Set@pInput& (0+255),w,b
 13273  02A0' 0100               	movlb	0	; () banked
 13274  02A2' 6F00'              	movwf	Word_GetPair@pInput& (0+255),b
 13275  02A4' 0E00               	movlw	0
 13276  02A6' 0100               	movlb	0	; () banked
 13277  02A8' 2100'              	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 13278  02AA' 0100               	movlb	0	; () banked
 13279  02AC' 6F00'              	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13280  02AE' 0E06               	movlw	6
 13281  02B0' 0100               	movlb	0	; () banked
 13282  02B2' 6F00'              	movwf	Word_GetPair@pPair& (0+255),b
 13283  02B4' EC00' F000'        	call	_Word_GetPair	;wreg free
 13284  02B8' 0100               	movlb	0	; () banked
 13285  02BA' 6F00'              	movwf	??_Port_Set& (0+255),b
 13286  02BC' 6B00'              	clrf	(??_Port_Set+1)& (0+255),b
 13287  02BE' 0E0C               	movlw	12
 13288  02C0'                    u7525:
 13289  02C0' 90D8               	bcf	status,0,c
 13290  02C2' 0100               	movlb	0	; () banked
 13291  02C4' 3700'              	rlcf	??_Port_Set& (0+255),f,b
 13292  02C6' 3700'              	rlcf	(??_Port_Set+1)& (0+255),f,b
 13293  02C8' 2EE8               	decfsz	wreg,f,c
 13294  02CA' D7FA               	goto	u7525
 13295  02CC' 0100               	movlb	0	; () banked
 13296  02CE' 5100'              	movf	??_Port_Set& (0+255),w,b
 13297  02D0' 0100               	movlb	0	; () banked
 13298  02D2' 1300'              	iorwf	Port_Set@TypeActual& (0+255),f,b
 13299  02D4' 0100               	movlb	0	; () banked
 13300  02D6' 5100'              	movf	(??_Port_Set+1)& (0+255),w,b
 13301  02D8' 0100               	movlb	0	; () banked
 13302  02DA' 1300'              	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 13303                           
 13304                           ; BSR set to: 0
 13305                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
 13306  02DC' 0E08               	movlw	8
 13307  02DE' 0100               	movlb	0	; () banked
 13308  02E0' 2500'              	addwf	Port_Set@pInput& (0+255),w,b
 13309  02E2' 0100               	movlb	0	; () banked
 13310  02E4' 6F00'              	movwf	Word_GetPair@pInput& (0+255),b
 13311  02E6' 0E00               	movlw	0
 13312  02E8' 0100               	movlb	0	; () banked
 13313  02EA' 2100'              	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 13314  02EC' 0100               	movlb	0	; () banked
 13315  02EE' 6F00'              	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13316  02F0' 0E07               	movlw	7
 13317  02F2' 0100               	movlb	0	; () banked
 13318  02F4' 6F00'              	movwf	Word_GetPair@pPair& (0+255),b
 13319  02F6' EC00' F000'        	call	_Word_GetPair	;wreg free
 13320  02FA' 0100               	movlb	0	; () banked
 13321  02FC' 6F00'              	movwf	??_Port_Set& (0+255),b
 13322  02FE' 6B00'              	clrf	(??_Port_Set+1)& (0+255),b
 13323  0300' 0E0E               	movlw	14
 13324  0302'                    u7535:
 13325  0302' 90D8               	bcf	status,0,c
 13326  0304' 0100               	movlb	0	; () banked
 13327  0306' 3700'              	rlcf	??_Port_Set& (0+255),f,b
 13328  0308' 3700'              	rlcf	(??_Port_Set+1)& (0+255),f,b
 13329  030A' 2EE8               	decfsz	wreg,f,c
 13330  030C' D7FA               	goto	u7535
 13331  030E' 0100               	movlb	0	; () banked
 13332  0310' 5100'              	movf	??_Port_Set& (0+255),w,b
 13333  0312' 0100               	movlb	0	; () banked
 13334  0314' 1300'              	iorwf	Port_Set@TypeActual& (0+255),f,b
 13335  0316' 0100               	movlb	0	; () banked
 13336  0318' 5100'              	movf	(??_Port_Set+1)& (0+255),w,b
 13337  031A' 0100               	movlb	0	; () banked
 13338  031C' 1300'              	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 13339                           
 13340                           ;Port.c: 584: if (TypeRequired == TypeActual)
 13341  031E' 0100               	movlb	0	; () banked
 13342  0320' 5100'              	movf	Port_Set@TypeActual& (0+255),w,b
 13343  0322' 0100               	movlb	0	; () banked
 13344  0324' 1900'              	xorwf	Port_Set@TypeRequired& (0+255),w,b
 13345  0326' E148               	bnz	l528
 13346  0328' 0100               	movlb	0	; () banked
 13347  032A' 5100'              	movf	(Port_Set@TypeActual+1)& (0+255),w,b
 13348  032C' 0100               	movlb	0	; () banked
 13349  032E' 1900'              	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
 13350  0330' A4D8               	btfss	status,2,c
 13351  0332' 0012               	return	
 13352  0334' D032               	goto	l526
 13353  0336'                    
 13354                           ; BSR set to: 0
 13355                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
 13356                           
 13357                           ; BSR set to: 0
 13358  0336' 0100               	movlb	0	; () banked
 13359  0338' EE20 F002          	lfsr	2,2
 13360  033C' 5100'              	movf	Port_Set@pInput& (0+255),w,b
 13361  033E' 26D9               	addwf	fsr2l,f,c
 13362  0340' 5100'              	movf	(Port_Set@pInput+1)& (0+255),w,b
 13363  0342' 22DA               	addwfc	fsr2h,f,c
 13364  0344' CFDE F000'         	movff	postinc2,Byte_SetByte@pInput
 13365  0348' CFDD F001'         	movff	postdec2,Byte_SetByte@pInput+1
 13366  034C' C011' F002'        	movff	Port_Set@pValue,Byte_SetByte@pValue
 13367  0350' EC00' F000'        	call	_Byte_SetByte	;wreg free
 13368                           
 13369                           ;Port.c: 594: break;
 13370  0354' 0012               	return	
 13371  0356'                    
 13372                           ;Port.c: 597: pValue = ~pValue;
 13373  0356' 0100               	movlb	0	; () banked
 13374  0358' 1F00'              	comf	Port_Set@pValue& (0+255),f,b
 13375                           
 13376                           ; BSR set to: 0
 13377                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
 13378  035A' 0100               	movlb	0	; () banked
 13379  035C' EE20 F002          	lfsr	2,2
 13380  0360' 5100'              	movf	Port_Set@pInput& (0+255),w,b
 13381  0362' 26D9               	addwf	fsr2l,f,c
 13382  0364' 5100'              	movf	(Port_Set@pInput+1)& (0+255),w,b
 13383  0366' 22DA               	addwfc	fsr2h,f,c
 13384  0368' CFDE F000'         	movff	postinc2,Byte_SetByte@pInput
 13385  036C' CFDD F001'         	movff	postdec2,Byte_SetByte@pInput+1
 13386  0370' C011' F002'        	movff	Port_Set@pValue,Byte_SetByte@pValue
 13387  0374' EC00' F000'        	call	_Byte_SetByte	;wreg free
 13388                           
 13389                           ;Port.c: 599: break;
 13390  0378' 0012               	return	
 13391  037A'                    
 13392                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
 13393  037A' 0100               	movlb	0	; () banked
 13394  037C' EE20 F004          	lfsr	2,4
 13395  0380' 5100'              	movf	Port_Set@pInput& (0+255),w,b
 13396  0382' 26D9               	addwf	fsr2l,f,c
 13397  0384' 5100'              	movf	(Port_Set@pInput+1)& (0+255),w,b
 13398  0386' 22DA               	addwfc	fsr2h,f,c
 13399  0388' CFDE F000'         	movff	postinc2,Byte_SetByte@pInput
 13400  038C' CFDD F001'         	movff	postdec2,Byte_SetByte@pInput+1
 13401  0390' C011' F002'        	movff	Port_Set@pValue,Byte_SetByte@pValue
 13402  0394' EC00' F000'        	call	_Byte_SetByte	;wreg free
 13403                           
 13404                           ;Port.c: 606: }
 13405                           
 13406                           ;Port.c: 605: break;
 13407                           
 13408                           ;Port.c: 604: default:
 13409                           
 13410                           ;Port.c: 603: break;
 13411  0398' 0012               	return	
 13412  039A'                    l526:
 13413  039A' 0100               	movlb	0	; () banked
 13414  039C' 5100'              	movf	Port_Set@Type& (0+255),w,b
 13415                           
 13416                           ; Switch size 1, requested type "space"
 13417                           ; Number of cases is 4, Range of values is 0 to 3
 13418                           ; switch strategies available:
 13419                           ; Name         Instructions Cycles
 13420                           ; simple_byte           13     7 (average)
 13421                           ;	Chosen strategy is simple_byte
 13422  039E' 0A00               	xorlw	0	; case 0
 13423  03A0' B4D8               	btfsc	status,2,c
 13424  03A2' 0012               	return	
 13425  03A4' 0A01               	xorlw	1	; case 1
 13426  03A6' B4D8               	btfsc	status,2,c
 13427  03A8' D7C6               	goto	l529
 13428  03AA' 0A03               	xorlw	3	; case 2
 13429  03AC' B4D8               	btfsc	status,2,c
 13430  03AE' D7D3               	goto	l531
 13431  03B0' 0A01               	xorlw	1	; case 3
 13432  03B2' A4D8               	btfss	status,2,c
 13433                           
 13434                           ; BSR set to: 0
 13435                           
 13436                           ; BSR set to: 0
 13437                           ;Port.c: 607: }
 13438  03B4' 0012               	return	
 13439  03B6' D7E1               	goto	l532
 13440  03B8'                    l528:
 13441  03B8' 0012               	return		;funcret
 13442  03BA'                    __end_of_Port_Set:
 13443                           	opt stack 0
 13444                           tosu	equ	0xFFF
 13445                           tosh	equ	0xFFE
 13446                           tosl	equ	0xFFD
 13447                           pclath	equ	0xFFA
 13448                           tblptru	equ	0xFF8
 13449                           tblptrh	equ	0xFF7
 13450                           tblptrl	equ	0xFF6
 13451                           tablat	equ	0xFF5
 13452                           prodh	equ	0xFF4
 13453                           prodl	equ	0xFF3
 13454                           postinc0	equ	0xFEE
 13455                           wreg	equ	0xFE8
 13456                           indf1	equ	0xFE7
 13457                           postdec1	equ	0xFE5
 13458                           fsr1h	equ	0xFE2
 13459                           fsr1l	equ	0xFE1
 13460                           indf2	equ	0xFDF
 13461                           postinc2	equ	0xFDE
 13462                           postdec2	equ	0xFDD
 13463                           plusw2	equ	0xFDB
 13464                           fsr2h	equ	0xFDA
 13465                           fsr2l	equ	0xFD9
 13466                           status	equ	0xFD8
 13467                           
 13468 ;; *************** function _Byte_SetByte *****************
 13469 ;; Defined at:
 13470 ;;		line 110 in file "Library/Types.c"
 13471 ;; Parameters:    Size  Location     Type
 13472 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 13473 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
 13474 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 13475 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 13476 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 13477 ;;		 -> NULL(0), 
 13478 ;;  pValue          1    2[BANK0 ] unsigned char 
 13479 ;; Auto vars:     Size  Location     Type
 13480 ;;		None
 13481 ;; Return value:  Size  Location     Type
 13482 ;;                  1    wreg      void 
 13483 ;; Registers used:
 13484 ;;		fsr2l, fsr2h
 13485 ;; Tracked objects:
 13486 ;;		On entry : 0/0
 13487 ;;		On exit  : 0/0
 13488 ;;		Unchanged: 0/0
 13489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13490 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13493 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13494 ;;Total ram usage:        3 bytes
 13495 ;; Hardware stack levels used:    1
 13496 ;; Hardware stack levels required when called:    7
 13497 ;; This function calls:
 13498 ;;		Nothing
 13499 ;; This function is called by:
 13500 ;;		_Port_Set
 13501 ;;		_I2C_Init
 13502 ;; This function uses a non-reentrant model
 13503 ;;
 13504                           
 13505                           	psect	text69
 13506  0000'                    __ptext69:
 13507                           	opt stack 0
 13508  0000'                    _Byte_SetByte:
 13509                           	opt stack 19
 13510                           
 13511                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
 13512                           
 13513                           ;incstack = 0
 13514  0000' C000' FFD9         	movff	Byte_SetByte@pInput,fsr2l
 13515  0004' C001' FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
 13516  0008' C002' FFDF         	movff	Byte_SetByte@pValue,indf2
 13517  000C' 0012               	return		;funcret
 13518  000E'                    __end_of_Byte_SetByte:
 13519                           	opt stack 0
 13520                           tosu	equ	0xFFF
 13521                           tosh	equ	0xFFE
 13522                           tosl	equ	0xFFD
 13523                           pclath	equ	0xFFA
 13524                           tblptru	equ	0xFF8
 13525                           tblptrh	equ	0xFF7
 13526                           tblptrl	equ	0xFF6
 13527                           tablat	equ	0xFF5
 13528                           prodh	equ	0xFF4
 13529                           prodl	equ	0xFF3
 13530                           postinc0	equ	0xFEE
 13531                           wreg	equ	0xFE8
 13532                           indf1	equ	0xFE7
 13533                           postdec1	equ	0xFE5
 13534                           fsr1h	equ	0xFE2
 13535                           fsr1l	equ	0xFE1
 13536                           indf2	equ	0xFDF
 13537                           postinc2	equ	0xFDE
 13538                           postdec2	equ	0xFDD
 13539                           plusw2	equ	0xFDB
 13540                           fsr2h	equ	0xFDA
 13541                           fsr2l	equ	0xFD9
 13542                           status	equ	0xFD8
 13543                           
 13544 ;; *************** function _GetPortTRIS *****************
 13545 ;; Defined at:
 13546 ;;		line 67 in file "Library/Port.c"
 13547 ;; Parameters:    Size  Location     Type
 13548 ;;  pInput          1    wreg     enum E6786
 13549 ;; Auto vars:     Size  Location     Type
 13550 ;;  pInput          1    2[BANK0 ] enum E6786
 13551 ;; Return value:  Size  Location     Type
 13552 ;;                  2    0[BANK0 ] PTR struct Byte
 13553 ;; Registers used:
 13554 ;;		wreg, status,2, status,0
 13555 ;; Tracked objects:
 13556 ;;		On entry : 0/0
 13557 ;;		On exit  : 0/0
 13558 ;;		Unchanged: 0/0
 13559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13560 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13561 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13563 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13564 ;;Total ram usage:        3 bytes
 13565 ;; Hardware stack levels used:    1
 13566 ;; Hardware stack levels required when called:    7
 13567 ;; This function calls:
 13568 ;;		Nothing
 13569 ;; This function is called by:
 13570 ;;		_Port_Init
 13571 ;; This function uses a non-reentrant model
 13572 ;;
 13573                           
 13574                           	psect	text70
 13575  0000'                    __ptext70:
 13576                           	opt stack 0
 13577  0000'                    _GetPortTRIS:
 13578                           	opt stack 20
 13579                           
 13580                           ;incstack = 0
 13581                           ;GetPortTRIS@pInput stored from wreg
 13582  0000' 0100               	movlb	0	; () banked
 13583  0002' 6F00'              	movwf	GetPortTRIS@pInput& (0+255),b
 13584                           
 13585                           ;Port.c: 69: switch (pInput)
 13586  0004' D038               	goto	l363
 13587  0006'                    
 13588                           ;Port.c: 72: return (BytePtr)&TRISA;
 13589  0006' 0E92               	movlw	146
 13590  0008' 0100               	movlb	0	; () banked
 13591  000A' 6F00'              	movwf	?_GetPortTRIS& (0+255),b
 13592  000C' 0E0F               	movlw	15
 13593  000E' 0100               	movlb	0	; () banked
 13594  0010' 6F00'              	movwf	(?_GetPortTRIS+1)& (0+255),b
 13595                           
 13596                           ; BSR set to: 0
 13597  0012' 0012               	return	
 13598  0014'                    
 13599                           ; BSR set to: 0
 13600                           ;Port.c: 74: return (BytePtr)&TRISB;
 13601                           
 13602                           ; BSR set to: 0
 13603  0014' 0E93               	movlw	147
 13604  0016' 0100               	movlb	0	; () banked
 13605  0018' 6F00'              	movwf	?_GetPortTRIS& (0+255),b
 13606  001A' 0E0F               	movlw	15
 13607  001C' 0100               	movlb	0	; () banked
 13608  001E' 6F00'              	movwf	(?_GetPortTRIS+1)& (0+255),b
 13609                           
 13610                           ; BSR set to: 0
 13611  0020' 0012               	return	
 13612  0022'                    
 13613                           ; BSR set to: 0
 13614                           ;Port.c: 76: return (BytePtr)&TRISC;
 13615                           
 13616                           ; BSR set to: 0
 13617  0022' 0E94               	movlw	148
 13618  0024' 0100               	movlb	0	; () banked
 13619  0026' 6F00'              	movwf	?_GetPortTRIS& (0+255),b
 13620  0028' 0E0F               	movlw	15
 13621  002A' 0100               	movlb	0	; () banked
 13622  002C' 6F00'              	movwf	(?_GetPortTRIS+1)& (0+255),b
 13623                           
 13624                           ; BSR set to: 0
 13625  002E' 0012               	return	
 13626  0030'                    
 13627                           ; BSR set to: 0
 13628                           ;Port.c: 78: return (BytePtr)&TRISD;
 13629                           
 13630                           ; BSR set to: 0
 13631  0030' 0E95               	movlw	149
 13632  0032' 0100               	movlb	0	; () banked
 13633  0034' 6F00'              	movwf	?_GetPortTRIS& (0+255),b
 13634  0036' 0E0F               	movlw	15
 13635  0038' 0100               	movlb	0	; () banked
 13636  003A' 6F00'              	movwf	(?_GetPortTRIS+1)& (0+255),b
 13637                           
 13638                           ; BSR set to: 0
 13639  003C' 0012               	return	
 13640  003E'                    
 13641                           ; BSR set to: 0
 13642                           ;Port.c: 80: return (BytePtr)&TRISE;
 13643                           
 13644                           ; BSR set to: 0
 13645  003E' 0E96               	movlw	150
 13646  0040' 0100               	movlb	0	; () banked
 13647  0042' 6F00'              	movwf	?_GetPortTRIS& (0+255),b
 13648  0044' 0E0F               	movlw	15
 13649  0046' 0100               	movlb	0	; () banked
 13650  0048' 6F00'              	movwf	(?_GetPortTRIS+1)& (0+255),b
 13651                           
 13652                           ; BSR set to: 0
 13653  004A' 0012               	return	
 13654  004C'                    
 13655                           ; BSR set to: 0
 13656                           ;Port.c: 82: return (BytePtr)&TRISF;
 13657                           
 13658                           ; BSR set to: 0
 13659  004C' 0E97               	movlw	151
 13660  004E' 0100               	movlb	0	; () banked
 13661  0050' 6F00'              	movwf	?_GetPortTRIS& (0+255),b
 13662  0052' 0E0F               	movlw	15
 13663  0054' 0100               	movlb	0	; () banked
 13664  0056' 6F00'              	movwf	(?_GetPortTRIS+1)& (0+255),b
 13665                           
 13666                           ; BSR set to: 0
 13667  0058' 0012               	return	
 13668  005A'                    
 13669                           ; BSR set to: 0
 13670                           ;Port.c: 84: return (BytePtr)&TRISG;
 13671                           
 13672                           ; BSR set to: 0
 13673  005A' 0E98               	movlw	152
 13674  005C' 0100               	movlb	0	; () banked
 13675  005E' 6F00'              	movwf	?_GetPortTRIS& (0+255),b
 13676  0060' 0E0F               	movlw	15
 13677  0062' 0100               	movlb	0	; () banked
 13678  0064' 6F00'              	movwf	(?_GetPortTRIS+1)& (0+255),b
 13679                           
 13680                           ; BSR set to: 0
 13681  0066' 0012               	return	
 13682  0068'                    
 13683                           ; BSR set to: 0
 13684                           ;Port.c: 86: return (void*)0;
 13685                           
 13686                           ; BSR set to: 0
 13687  0068' 0E00               	movlw	0
 13688  006A' 0100               	movlb	0	; () banked
 13689  006C' 6F00'              	movwf	?_GetPortTRIS& (0+255),b
 13690  006E' 0E00               	movlw	0
 13691  0070' 0100               	movlb	0	; () banked
 13692  0072' 6F00'              	movwf	(?_GetPortTRIS+1)& (0+255),b
 13693                           
 13694                           ; BSR set to: 0
 13695                           ;Port.c: 87: }
 13696                           
 13697                           ; BSR set to: 0
 13698  0074' 0012               	return	
 13699  0076'                    l363:
 13700                           
 13701                           ; BSR set to: 0
 13702  0076' 0100               	movlb	0	; () banked
 13703  0078' 5100'              	movf	GetPortTRIS@pInput& (0+255),w,b
 13704                           
 13705                           ; Switch size 1, requested type "space"
 13706                           ; Number of cases is 7, Range of values is 0 to 6
 13707                           ; switch strategies available:
 13708                           ; Name         Instructions Cycles
 13709                           ; simple_byte           22    12 (average)
 13710                           ;	Chosen strategy is simple_byte
 13711  007A' 0A00               	xorlw	0	; case 0
 13712  007C' B4D8               	btfsc	status,2,c
 13713  007E' D7C3               	goto	l364
 13714  0080' 0A01               	xorlw	1	; case 1
 13715  0082' B4D8               	btfsc	status,2,c
 13716  0084' D7C7               	goto	l366
 13717  0086' 0A03               	xorlw	3	; case 2
 13718  0088' B4D8               	btfsc	status,2,c
 13719  008A' D7CB               	goto	l367
 13720  008C' 0A01               	xorlw	1	; case 3
 13721  008E' B4D8               	btfsc	status,2,c
 13722  0090' D7CF               	goto	l368
 13723  0092' 0A07               	xorlw	7	; case 4
 13724  0094' B4D8               	btfsc	status,2,c
 13725  0096' D7D3               	goto	l369
 13726  0098' 0A01               	xorlw	1	; case 5
 13727  009A' B4D8               	btfsc	status,2,c
 13728  009C' D7D7               	goto	l370
 13729  009E' 0A03               	xorlw	3	; case 6
 13730  00A0' B4D8               	btfsc	status,2,c
 13731  00A2' D7DB               	goto	l371
 13732  00A4' D7E1               	goto	l372
 13733  00A6'                    __end_of_GetPortTRIS:
 13734                           	opt stack 0
 13735                           tosu	equ	0xFFF
 13736                           tosh	equ	0xFFE
 13737                           tosl	equ	0xFFD
 13738                           pclath	equ	0xFFA
 13739                           tblptru	equ	0xFF8
 13740                           tblptrh	equ	0xFF7
 13741                           tblptrl	equ	0xFF6
 13742                           tablat	equ	0xFF5
 13743                           prodh	equ	0xFF4
 13744                           prodl	equ	0xFF3
 13745                           postinc0	equ	0xFEE
 13746                           wreg	equ	0xFE8
 13747                           indf1	equ	0xFE7
 13748                           postdec1	equ	0xFE5
 13749                           fsr1h	equ	0xFE2
 13750                           fsr1l	equ	0xFE1
 13751                           indf2	equ	0xFDF
 13752                           postinc2	equ	0xFDE
 13753                           postdec2	equ	0xFDD
 13754                           plusw2	equ	0xFDB
 13755                           fsr2h	equ	0xFDA
 13756                           fsr2l	equ	0xFD9
 13757                           status	equ	0xFD8
 13758                           
 13759 ;; *************** function _GetPortProperties *****************
 13760 ;; Defined at:
 13761 ;;		line 21 in file "Library/Port.c"
 13762 ;; Parameters:    Size  Location     Type
 13763 ;;  pInput          1    wreg     enum E6786
 13764 ;; Auto vars:     Size  Location     Type
 13765 ;;  pInput          1    2[BANK0 ] enum E6786
 13766 ;; Return value:  Size  Location     Type
 13767 ;;                  2    0[BANK0 ] PTR struct PortProperty
 13768 ;; Registers used:
 13769 ;;		wreg, status,2, status,0
 13770 ;; Tracked objects:
 13771 ;;		On entry : 0/0
 13772 ;;		On exit  : 0/0
 13773 ;;		Unchanged: 0/0
 13774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13775 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13776 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13778 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13779 ;;Total ram usage:        3 bytes
 13780 ;; Hardware stack levels used:    1
 13781 ;; Hardware stack levels required when called:    7
 13782 ;; This function calls:
 13783 ;;		Nothing
 13784 ;; This function is called by:
 13785 ;;		_Port_Init
 13786 ;; This function uses a non-reentrant model
 13787 ;;
 13788                           
 13789                           	psect	text71
 13790  0000'                    __ptext71:
 13791                           	opt stack 0
 13792  0000'                    _GetPortProperties:
 13793                           	opt stack 20
 13794                           
 13795                           ; BSR set to: 0
 13796                           ;incstack = 0
 13797                           ;GetPortProperties@pInput stored from wreg
 13798  0000' 0100               	movlb	0	; () banked
 13799  0002' 6F00'              	movwf	GetPortProperties@pInput& (0+255),b
 13800                           
 13801                           ;Port.c: 23: switch (pInput)
 13802  0004' D038               	goto	l337
 13803  0006'                    
 13804                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
 13805  0006' 0E00'              	movlw	low _PortA_Property
 13806  0008' 0100               	movlb	0	; () banked
 13807  000A' 6F00'              	movwf	?_GetPortProperties& (0+255),b
 13808  000C' 0E00'              	movlw	high _PortA_Property
 13809  000E' 0100               	movlb	0	; () banked
 13810  0010' 6F00'              	movwf	(?_GetPortProperties+1)& (0+255),b
 13811                           
 13812                           ; BSR set to: 0
 13813  0012' 0012               	return	
 13814  0014'                    
 13815                           ; BSR set to: 0
 13816                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
 13817                           
 13818                           ; BSR set to: 0
 13819  0014' 0E00'              	movlw	low _PortB_Property
 13820  0016' 0100               	movlb	0	; () banked
 13821  0018' 6F00'              	movwf	?_GetPortProperties& (0+255),b
 13822  001A' 0E00'              	movlw	high _PortB_Property
 13823  001C' 0100               	movlb	0	; () banked
 13824  001E' 6F00'              	movwf	(?_GetPortProperties+1)& (0+255),b
 13825                           
 13826                           ; BSR set to: 0
 13827  0020' 0012               	return	
 13828  0022'                    
 13829                           ; BSR set to: 0
 13830                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
 13831                           
 13832                           ; BSR set to: 0
 13833  0022' 0E00'              	movlw	low _PortC_Property
 13834  0024' 0100               	movlb	0	; () banked
 13835  0026' 6F00'              	movwf	?_GetPortProperties& (0+255),b
 13836  0028' 0E00'              	movlw	high _PortC_Property
 13837  002A' 0100               	movlb	0	; () banked
 13838  002C' 6F00'              	movwf	(?_GetPortProperties+1)& (0+255),b
 13839                           
 13840                           ; BSR set to: 0
 13841  002E' 0012               	return	
 13842  0030'                    
 13843                           ; BSR set to: 0
 13844                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
 13845                           
 13846                           ; BSR set to: 0
 13847  0030' 0E00'              	movlw	low _PortD_Property
 13848  0032' 0100               	movlb	0	; () banked
 13849  0034' 6F00'              	movwf	?_GetPortProperties& (0+255),b
 13850  0036' 0E00'              	movlw	high _PortD_Property
 13851  0038' 0100               	movlb	0	; () banked
 13852  003A' 6F00'              	movwf	(?_GetPortProperties+1)& (0+255),b
 13853                           
 13854                           ; BSR set to: 0
 13855  003C' 0012               	return	
 13856  003E'                    
 13857                           ; BSR set to: 0
 13858                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
 13859                           
 13860                           ; BSR set to: 0
 13861  003E' 0E00'              	movlw	low _PortE_Property
 13862  0040' 0100               	movlb	0	; () banked
 13863  0042' 6F00'              	movwf	?_GetPortProperties& (0+255),b
 13864  0044' 0E00'              	movlw	high _PortE_Property
 13865  0046' 0100               	movlb	0	; () banked
 13866  0048' 6F00'              	movwf	(?_GetPortProperties+1)& (0+255),b
 13867                           
 13868                           ; BSR set to: 0
 13869  004A' 0012               	return	
 13870  004C'                    
 13871                           ; BSR set to: 0
 13872                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
 13873                           
 13874                           ; BSR set to: 0
 13875  004C' 0E00'              	movlw	low _PortF_Property
 13876  004E' 0100               	movlb	0	; () banked
 13877  0050' 6F00'              	movwf	?_GetPortProperties& (0+255),b
 13878  0052' 0E00'              	movlw	high _PortF_Property
 13879  0054' 0100               	movlb	0	; () banked
 13880  0056' 6F00'              	movwf	(?_GetPortProperties+1)& (0+255),b
 13881                           
 13882                           ; BSR set to: 0
 13883  0058' 0012               	return	
 13884  005A'                    
 13885                           ; BSR set to: 0
 13886                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
 13887                           
 13888                           ; BSR set to: 0
 13889  005A' 0E00'              	movlw	low _PortG_Property
 13890  005C' 0100               	movlb	0	; () banked
 13891  005E' 6F00'              	movwf	?_GetPortProperties& (0+255),b
 13892  0060' 0E00'              	movlw	high _PortG_Property
 13893  0062' 0100               	movlb	0	; () banked
 13894  0064' 6F00'              	movwf	(?_GetPortProperties+1)& (0+255),b
 13895                           
 13896                           ; BSR set to: 0
 13897  0066' 0012               	return	
 13898  0068'                    
 13899                           ; BSR set to: 0
 13900                           ;Port.c: 40: return (void*)0;
 13901                           
 13902                           ; BSR set to: 0
 13903  0068' 0E00               	movlw	0
 13904  006A' 0100               	movlb	0	; () banked
 13905  006C' 6F00'              	movwf	?_GetPortProperties& (0+255),b
 13906  006E' 0E00               	movlw	0
 13907  0070' 0100               	movlb	0	; () banked
 13908  0072' 6F00'              	movwf	(?_GetPortProperties+1)& (0+255),b
 13909                           
 13910                           ; BSR set to: 0
 13911                           ;Port.c: 41: }
 13912                           
 13913                           ; BSR set to: 0
 13914  0074' 0012               	return	
 13915  0076'                    l337:
 13916                           
 13917                           ; BSR set to: 0
 13918  0076' 0100               	movlb	0	; () banked
 13919  0078' 5100'              	movf	GetPortProperties@pInput& (0+255),w,b
 13920                           
 13921                           ; Switch size 1, requested type "space"
 13922                           ; Number of cases is 7, Range of values is 0 to 6
 13923                           ; switch strategies available:
 13924                           ; Name         Instructions Cycles
 13925                           ; simple_byte           22    12 (average)
 13926                           ;	Chosen strategy is simple_byte
 13927  007A' 0A00               	xorlw	0	; case 0
 13928  007C' B4D8               	btfsc	status,2,c
 13929  007E' D7C3               	goto	l338
 13930  0080' 0A01               	xorlw	1	; case 1
 13931  0082' B4D8               	btfsc	status,2,c
 13932  0084' D7C7               	goto	l340
 13933  0086' 0A03               	xorlw	3	; case 2
 13934  0088' B4D8               	btfsc	status,2,c
 13935  008A' D7CB               	goto	l341
 13936  008C' 0A01               	xorlw	1	; case 3
 13937  008E' B4D8               	btfsc	status,2,c
 13938  0090' D7CF               	goto	l342
 13939  0092' 0A07               	xorlw	7	; case 4
 13940  0094' B4D8               	btfsc	status,2,c
 13941  0096' D7D3               	goto	l343
 13942  0098' 0A01               	xorlw	1	; case 5
 13943  009A' B4D8               	btfsc	status,2,c
 13944  009C' D7D7               	goto	l344
 13945  009E' 0A03               	xorlw	3	; case 6
 13946  00A0' B4D8               	btfsc	status,2,c
 13947  00A2' D7DB               	goto	l345
 13948  00A4' D7E1               	goto	l346
 13949  00A6'                    __end_of_GetPortProperties:
 13950                           	opt stack 0
 13951                           tosu	equ	0xFFF
 13952                           tosh	equ	0xFFE
 13953                           tosl	equ	0xFFD
 13954                           pclath	equ	0xFFA
 13955                           tblptru	equ	0xFF8
 13956                           tblptrh	equ	0xFF7
 13957                           tblptrl	equ	0xFF6
 13958                           tablat	equ	0xFF5
 13959                           prodh	equ	0xFF4
 13960                           prodl	equ	0xFF3
 13961                           postinc0	equ	0xFEE
 13962                           wreg	equ	0xFE8
 13963                           indf1	equ	0xFE7
 13964                           postdec1	equ	0xFE5
 13965                           fsr1h	equ	0xFE2
 13966                           fsr1l	equ	0xFE1
 13967                           indf2	equ	0xFDF
 13968                           postinc2	equ	0xFDE
 13969                           postdec2	equ	0xFDD
 13970                           plusw2	equ	0xFDB
 13971                           fsr2h	equ	0xFDA
 13972                           fsr2l	equ	0xFD9
 13973                           status	equ	0xFD8
 13974                           
 13975 ;; *************** function _GetPortPORT *****************
 13976 ;; Defined at:
 13977 ;;		line 44 in file "Library/Port.c"
 13978 ;; Parameters:    Size  Location     Type
 13979 ;;  pInput          1    wreg     enum E6786
 13980 ;; Auto vars:     Size  Location     Type
 13981 ;;  pInput          1    2[BANK0 ] enum E6786
 13982 ;; Return value:  Size  Location     Type
 13983 ;;                  2    0[BANK0 ] PTR struct Byte
 13984 ;; Registers used:
 13985 ;;		wreg, status,2, status,0
 13986 ;; Tracked objects:
 13987 ;;		On entry : 0/0
 13988 ;;		On exit  : 0/0
 13989 ;;		Unchanged: 0/0
 13990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13991 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13992 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13994 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13995 ;;Total ram usage:        3 bytes
 13996 ;; Hardware stack levels used:    1
 13997 ;; Hardware stack levels required when called:    7
 13998 ;; This function calls:
 13999 ;;		Nothing
 14000 ;; This function is called by:
 14001 ;;		_Port_Init
 14002 ;; This function uses a non-reentrant model
 14003 ;;
 14004                           
 14005                           	psect	text72
 14006  0000'                    __ptext72:
 14007                           	opt stack 0
 14008  0000'                    _GetPortPORT:
 14009                           	opt stack 20
 14010                           
 14011                           ; BSR set to: 0
 14012                           ;incstack = 0
 14013                           ;GetPortPORT@pInput stored from wreg
 14014  0000' 0100               	movlb	0	; () banked
 14015  0002' 6F00'              	movwf	GetPortPORT@pInput& (0+255),b
 14016                           
 14017                           ;Port.c: 46: switch (pInput)
 14018  0004' D038               	goto	l350
 14019  0006'                    
 14020                           ;Port.c: 49: return (BytePtr)&PORTA;
 14021  0006' 0E80               	movlw	128
 14022  0008' 0100               	movlb	0	; () banked
 14023  000A' 6F00'              	movwf	?_GetPortPORT& (0+255),b
 14024  000C' 0E0F               	movlw	15
 14025  000E' 0100               	movlb	0	; () banked
 14026  0010' 6F00'              	movwf	(?_GetPortPORT+1)& (0+255),b
 14027                           
 14028                           ; BSR set to: 0
 14029  0012' 0012               	return	
 14030  0014'                    
 14031                           ; BSR set to: 0
 14032                           ;Port.c: 51: return (BytePtr)&PORTB;
 14033                           
 14034                           ; BSR set to: 0
 14035  0014' 0E81               	movlw	129
 14036  0016' 0100               	movlb	0	; () banked
 14037  0018' 6F00'              	movwf	?_GetPortPORT& (0+255),b
 14038  001A' 0E0F               	movlw	15
 14039  001C' 0100               	movlb	0	; () banked
 14040  001E' 6F00'              	movwf	(?_GetPortPORT+1)& (0+255),b
 14041                           
 14042                           ; BSR set to: 0
 14043  0020' 0012               	return	
 14044  0022'                    
 14045                           ; BSR set to: 0
 14046                           ;Port.c: 53: return (BytePtr)&PORTC;
 14047                           
 14048                           ; BSR set to: 0
 14049  0022' 0E82               	movlw	130
 14050  0024' 0100               	movlb	0	; () banked
 14051  0026' 6F00'              	movwf	?_GetPortPORT& (0+255),b
 14052  0028' 0E0F               	movlw	15
 14053  002A' 0100               	movlb	0	; () banked
 14054  002C' 6F00'              	movwf	(?_GetPortPORT+1)& (0+255),b
 14055                           
 14056                           ; BSR set to: 0
 14057  002E' 0012               	return	
 14058  0030'                    
 14059                           ; BSR set to: 0
 14060                           ;Port.c: 55: return (BytePtr)&PORTD;
 14061                           
 14062                           ; BSR set to: 0
 14063  0030' 0E83               	movlw	131
 14064  0032' 0100               	movlb	0	; () banked
 14065  0034' 6F00'              	movwf	?_GetPortPORT& (0+255),b
 14066  0036' 0E0F               	movlw	15
 14067  0038' 0100               	movlb	0	; () banked
 14068  003A' 6F00'              	movwf	(?_GetPortPORT+1)& (0+255),b
 14069                           
 14070                           ; BSR set to: 0
 14071  003C' 0012               	return	
 14072  003E'                    
 14073                           ; BSR set to: 0
 14074                           ;Port.c: 57: return (BytePtr)&PORTE;
 14075                           
 14076                           ; BSR set to: 0
 14077  003E' 0E84               	movlw	132
 14078  0040' 0100               	movlb	0	; () banked
 14079  0042' 6F00'              	movwf	?_GetPortPORT& (0+255),b
 14080  0044' 0E0F               	movlw	15
 14081  0046' 0100               	movlb	0	; () banked
 14082  0048' 6F00'              	movwf	(?_GetPortPORT+1)& (0+255),b
 14083                           
 14084                           ; BSR set to: 0
 14085  004A' 0012               	return	
 14086  004C'                    
 14087                           ; BSR set to: 0
 14088                           ;Port.c: 59: return (BytePtr)&PORTF;
 14089                           
 14090                           ; BSR set to: 0
 14091  004C' 0E85               	movlw	133
 14092  004E' 0100               	movlb	0	; () banked
 14093  0050' 6F00'              	movwf	?_GetPortPORT& (0+255),b
 14094  0052' 0E0F               	movlw	15
 14095  0054' 0100               	movlb	0	; () banked
 14096  0056' 6F00'              	movwf	(?_GetPortPORT+1)& (0+255),b
 14097                           
 14098                           ; BSR set to: 0
 14099  0058' 0012               	return	
 14100  005A'                    
 14101                           ; BSR set to: 0
 14102                           ;Port.c: 61: return (BytePtr)&PORTG;
 14103                           
 14104                           ; BSR set to: 0
 14105  005A' 0E86               	movlw	134
 14106  005C' 0100               	movlb	0	; () banked
 14107  005E' 6F00'              	movwf	?_GetPortPORT& (0+255),b
 14108  0060' 0E0F               	movlw	15
 14109  0062' 0100               	movlb	0	; () banked
 14110  0064' 6F00'              	movwf	(?_GetPortPORT+1)& (0+255),b
 14111                           
 14112                           ; BSR set to: 0
 14113  0066' 0012               	return	
 14114  0068'                    
 14115                           ; BSR set to: 0
 14116                           ;Port.c: 63: return (void*)0;
 14117                           
 14118                           ; BSR set to: 0
 14119  0068' 0E00               	movlw	0
 14120  006A' 0100               	movlb	0	; () banked
 14121  006C' 6F00'              	movwf	?_GetPortPORT& (0+255),b
 14122  006E' 0E00               	movlw	0
 14123  0070' 0100               	movlb	0	; () banked
 14124  0072' 6F00'              	movwf	(?_GetPortPORT+1)& (0+255),b
 14125                           
 14126                           ; BSR set to: 0
 14127                           ;Port.c: 64: }
 14128                           
 14129                           ; BSR set to: 0
 14130  0074' 0012               	return	
 14131  0076'                    l350:
 14132                           
 14133                           ; BSR set to: 0
 14134  0076' 0100               	movlb	0	; () banked
 14135  0078' 5100'              	movf	GetPortPORT@pInput& (0+255),w,b
 14136                           
 14137                           ; Switch size 1, requested type "space"
 14138                           ; Number of cases is 7, Range of values is 0 to 6
 14139                           ; switch strategies available:
 14140                           ; Name         Instructions Cycles
 14141                           ; simple_byte           22    12 (average)
 14142                           ;	Chosen strategy is simple_byte
 14143  007A' 0A00               	xorlw	0	; case 0
 14144  007C' B4D8               	btfsc	status,2,c
 14145  007E' D7C3               	goto	l351
 14146  0080' 0A01               	xorlw	1	; case 1
 14147  0082' B4D8               	btfsc	status,2,c
 14148  0084' D7C7               	goto	l353
 14149  0086' 0A03               	xorlw	3	; case 2
 14150  0088' B4D8               	btfsc	status,2,c
 14151  008A' D7CB               	goto	l354
 14152  008C' 0A01               	xorlw	1	; case 3
 14153  008E' B4D8               	btfsc	status,2,c
 14154  0090' D7CF               	goto	l355
 14155  0092' 0A07               	xorlw	7	; case 4
 14156  0094' B4D8               	btfsc	status,2,c
 14157  0096' D7D3               	goto	l356
 14158  0098' 0A01               	xorlw	1	; case 5
 14159  009A' B4D8               	btfsc	status,2,c
 14160  009C' D7D7               	goto	l357
 14161  009E' 0A03               	xorlw	3	; case 6
 14162  00A0' B4D8               	btfsc	status,2,c
 14163  00A2' D7DB               	goto	l358
 14164  00A4' D7E1               	goto	l359
 14165  00A6'                    __end_of_GetPortPORT:
 14166                           	opt stack 0
 14167                           tosu	equ	0xFFF
 14168                           tosh	equ	0xFFE
 14169                           tosl	equ	0xFFD
 14170                           pclath	equ	0xFFA
 14171                           tblptru	equ	0xFF8
 14172                           tblptrh	equ	0xFF7
 14173                           tblptrl	equ	0xFF6
 14174                           tablat	equ	0xFF5
 14175                           prodh	equ	0xFF4
 14176                           prodl	equ	0xFF3
 14177                           postinc0	equ	0xFEE
 14178                           wreg	equ	0xFE8
 14179                           indf1	equ	0xFE7
 14180                           postdec1	equ	0xFE5
 14181                           fsr1h	equ	0xFE2
 14182                           fsr1l	equ	0xFE1
 14183                           indf2	equ	0xFDF
 14184                           postinc2	equ	0xFDE
 14185                           postdec2	equ	0xFDD
 14186                           plusw2	equ	0xFDB
 14187                           fsr2h	equ	0xFDA
 14188                           fsr2l	equ	0xFD9
 14189                           status	equ	0xFD8
 14190                           
 14191 ;; *************** function _LED_Init *****************
 14192 ;; Defined at:
 14193 ;;		line 15 in file "Library/LED.c"
 14194 ;; Parameters:    Size  Location     Type
 14195 ;;  pLED            1    wreg     enum E6739
 14196 ;; Auto vars:     Size  Location     Type
 14197 ;;  pLED            1   45[BANK0 ] enum E6739
 14198 ;; Return value:  Size  Location     Type
 14199 ;;                  1    wreg      void 
 14200 ;; Registers used:
 14201 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14202 ;; Tracked objects:
 14203 ;;		On entry : 0/0
 14204 ;;		On exit  : 0/0
 14205 ;;		Unchanged: 0/0
 14206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14208 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14210 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14211 ;;Total ram usage:        1 bytes
 14212 ;; Hardware stack levels used:    1
 14213 ;; Hardware stack levels required when called:   12
 14214 ;; This function calls:
 14215 ;;		_LED_Set
 14216 ;;		_Port_SetPinType
 14217 ;; This function is called by:
 14218 ;;		_MXK_Init
 14219 ;; This function uses a non-reentrant model
 14220 ;;
 14221                           
 14222                           	psect	text73
 14223  0000'                    __ptext73:
 14224                           	opt stack 0
 14225  0000'                    _LED_Init:
 14226                           	opt stack 16
 14227                           
 14228                           ; BSR set to: 0
 14229                           ;incstack = 0
 14230                           ;LED_Init@pLED stored from wreg
 14231  0000' 0100               	movlb	0	; () banked
 14232  0002' 6F00'              	movwf	LED_Init@pLED& (0+255),b
 14233                           
 14234                           ;LED.c: 17: switch (pLED)
 14235  0004' D01E               	goto	l220
 14236  0006'                    
 14237                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
 14238  0006' 0E00'              	movlw	low _PortC
 14239  0008' 0100               	movlb	0	; () banked
 14240  000A' 6F00'              	movwf	Port_SetPinType@pInput& (0+255),b
 14241  000C' 0E00'              	movlw	high _PortC
 14242  000E' 0100               	movlb	0	; () banked
 14243  0010' 6F00'              	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14244  0012' 0E00               	movlw	0
 14245  0014' 0100               	movlb	0	; () banked
 14246  0016' 6F00'              	movwf	Port_SetPinType@pPin& (0+255),b
 14247  0018' 0E03               	movlw	3
 14248  001A' 0100               	movlb	0	; () banked
 14249  001C' 6F00'              	movwf	Port_SetPinType@pType& (0+255),b
 14250  001E' EC00' F000'        	call	_Port_SetPinType	;wreg free
 14251                           
 14252                           ;LED.c: 21: break;
 14253  0022' D017               	goto	l222
 14254  0024'                    
 14255                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
 14256  0024' 0E00'              	movlw	low _PortC
 14257  0026' 0100               	movlb	0	; () banked
 14258  0028' 6F00'              	movwf	Port_SetPinType@pInput& (0+255),b
 14259  002A' 0E00'              	movlw	high _PortC
 14260  002C' 0100               	movlb	0	; () banked
 14261  002E' 6F00'              	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14262  0030' 0E01               	movlw	1
 14263  0032' 0100               	movlb	0	; () banked
 14264  0034' 6F00'              	movwf	Port_SetPinType@pPin& (0+255),b
 14265  0036' 0E03               	movlw	3
 14266  0038' 0100               	movlb	0	; () banked
 14267  003A' 6F00'              	movwf	Port_SetPinType@pType& (0+255),b
 14268  003C' EC00' F000'        	call	_Port_SetPinType	;wreg free
 14269                           
 14270                           ;LED.c: 25: }
 14271                           
 14272                           ;LED.c: 24: break;
 14273  0040' D008               	goto	l222
 14274  0042'                    l220:
 14275  0042' 0100               	movlb	0	; () banked
 14276  0044' 5100'              	movf	LED_Init@pLED& (0+255),w,b
 14277                           
 14278                           ; Switch size 1, requested type "space"
 14279                           ; Number of cases is 2, Range of values is 0 to 1
 14280                           ; switch strategies available:
 14281                           ; Name         Instructions Cycles
 14282                           ; simple_byte            7     4 (average)
 14283                           ;	Chosen strategy is simple_byte
 14284  0046' 0A00               	xorlw	0	; case 0
 14285  0048' B4D8               	btfsc	status,2,c
 14286  004A' D7DD               	goto	l221
 14287  004C' 0A01               	xorlw	1	; case 1
 14288  004E' B4D8               	btfsc	status,2,c
 14289  0050' D7E9               	goto	l223
 14290  0052'                    l222:
 14291                           
 14292                           ;LED.c: 26: LED_Set(pLED, 0);
 14293                           
 14294                           ; BSR set to: 0
 14295  0052' 0E00               	movlw	0
 14296  0054' 0100               	movlb	0	; () banked
 14297  0056' 6F00'              	movwf	LED_Set@pValue& (0+255),b
 14298  0058' 0100               	movlb	0	; () banked
 14299  005A' 5100'              	movf	LED_Init@pLED& (0+255),w,b
 14300  005C' EC00' F000'        	call	_LED_Set
 14301  0060' 0012               	return		;funcret
 14302  0062'                    __end_of_LED_Init:
 14303                           	opt stack 0
 14304                           tosu	equ	0xFFF
 14305                           tosh	equ	0xFFE
 14306                           tosl	equ	0xFFD
 14307                           pclath	equ	0xFFA
 14308                           tblptru	equ	0xFF8
 14309                           tblptrh	equ	0xFF7
 14310                           tblptrl	equ	0xFF6
 14311                           tablat	equ	0xFF5
 14312                           prodh	equ	0xFF4
 14313                           prodl	equ	0xFF3
 14314                           postinc0	equ	0xFEE
 14315                           wreg	equ	0xFE8
 14316                           indf1	equ	0xFE7
 14317                           postdec1	equ	0xFE5
 14318                           fsr1h	equ	0xFE2
 14319                           fsr1l	equ	0xFE1
 14320                           indf2	equ	0xFDF
 14321                           postinc2	equ	0xFDE
 14322                           postdec2	equ	0xFDD
 14323                           plusw2	equ	0xFDB
 14324                           fsr2h	equ	0xFDA
 14325                           fsr2l	equ	0xFD9
 14326                           status	equ	0xFD8
 14327                           
 14328 ;; *************** function _LED_Set *****************
 14329 ;; Defined at:
 14330 ;;		line 33 in file "Library/LED.c"
 14331 ;; Parameters:    Size  Location     Type
 14332 ;;  pLED            1    wreg     enum E6739
 14333 ;;  pValue          1   20[BANK0 ] unsigned char 
 14334 ;; Auto vars:     Size  Location     Type
 14335 ;;  pLED            1   21[BANK0 ] enum E6739
 14336 ;; Return value:  Size  Location     Type
 14337 ;;                  1    wreg      void 
 14338 ;; Registers used:
 14339 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14340 ;; Tracked objects:
 14341 ;;		On entry : 0/0
 14342 ;;		On exit  : 0/0
 14343 ;;		Unchanged: 0/0
 14344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14345 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14346 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14348 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14349 ;;Total ram usage:        2 bytes
 14350 ;; Hardware stack levels used:    1
 14351 ;; Hardware stack levels required when called:   11
 14352 ;; This function calls:
 14353 ;;		_Port_SetPin
 14354 ;; This function is called by:
 14355 ;;		_LED_Init
 14356 ;;		_SYSTEM_Initialize
 14357 ;; This function uses a non-reentrant model
 14358 ;;
 14359                           
 14360                           	psect	text74
 14361  0000'                    __ptext74:
 14362                           	opt stack 0
 14363  0000'                    _LED_Set:
 14364                           	opt stack 16
 14365                           
 14366                           ;incstack = 0
 14367                           ;LED_Set@pLED stored from wreg
 14368  0000' 0100               	movlb	0	; () banked
 14369  0002' 6F00'              	movwf	LED_Set@pLED& (0+255),b
 14370                           
 14371                           ;LED.c: 35: switch (pLED)
 14372  0004' D01C               	goto	l227
 14373  0006'                    
 14374                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
 14375  0006' 0E00'              	movlw	low _PortC
 14376  0008' 0100               	movlb	0	; () banked
 14377  000A' 6F00'              	movwf	Port_SetPin@pInput& (0+255),b
 14378  000C' 0E00'              	movlw	high _PortC
 14379  000E' 0100               	movlb	0	; () banked
 14380  0010' 6F00'              	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14381  0012' 0E00               	movlw	0
 14382  0014' 0100               	movlb	0	; () banked
 14383  0016' 6F00'              	movwf	Port_SetPin@pPin& (0+255),b
 14384  0018' C014' F012'        	movff	LED_Set@pValue,Port_SetPin@pValue
 14385  001C' EC00' F000'        	call	_Port_SetPin	;wreg free
 14386                           
 14387                           ;LED.c: 39: break;
 14388  0020' 0012               	return	
 14389  0022'                    
 14390                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
 14391  0022' 0E00'              	movlw	low _PortC
 14392  0024' 0100               	movlb	0	; () banked
 14393  0026' 6F00'              	movwf	Port_SetPin@pInput& (0+255),b
 14394  0028' 0E00'              	movlw	high _PortC
 14395  002A' 0100               	movlb	0	; () banked
 14396  002C' 6F00'              	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14397  002E' 0E01               	movlw	1
 14398  0030' 0100               	movlb	0	; () banked
 14399  0032' 6F00'              	movwf	Port_SetPin@pPin& (0+255),b
 14400  0034' C014' F012'        	movff	LED_Set@pValue,Port_SetPin@pValue
 14401  0038' EC00' F000'        	call	_Port_SetPin	;wreg free
 14402                           
 14403                           ;LED.c: 43: }
 14404                           
 14405                           ;LED.c: 42: break;
 14406  003C' 0012               	return	
 14407  003E'                    l227:
 14408  003E' 0100               	movlb	0	; () banked
 14409  0040' 5100'              	movf	LED_Set@pLED& (0+255),w,b
 14410                           
 14411                           ; Switch size 1, requested type "space"
 14412                           ; Number of cases is 2, Range of values is 0 to 1
 14413                           ; switch strategies available:
 14414                           ; Name         Instructions Cycles
 14415                           ; simple_byte            7     4 (average)
 14416                           ;	Chosen strategy is simple_byte
 14417  0042' 0A00               	xorlw	0	; case 0
 14418  0044' B4D8               	btfsc	status,2,c
 14419  0046' D7DF               	goto	l228
 14420  0048' 0A01               	xorlw	1	; case 1
 14421  004A' A4D8               	btfss	status,2,c
 14422  004C' 0012               	return	
 14423  004E' D7E9               	goto	l230
 14424  0050'                    __end_of_LED_Set:
 14425                           	opt stack 0
 14426                           tosu	equ	0xFFF
 14427                           tosh	equ	0xFFE
 14428                           tosl	equ	0xFFD
 14429                           pclath	equ	0xFFA
 14430                           tblptru	equ	0xFF8
 14431                           tblptrh	equ	0xFF7
 14432                           tblptrl	equ	0xFF6
 14433                           tablat	equ	0xFF5
 14434                           prodh	equ	0xFF4
 14435                           prodl	equ	0xFF3
 14436                           postinc0	equ	0xFEE
 14437                           wreg	equ	0xFE8
 14438                           indf1	equ	0xFE7
 14439                           postdec1	equ	0xFE5
 14440                           fsr1h	equ	0xFE2
 14441                           fsr1l	equ	0xFE1
 14442                           indf2	equ	0xFDF
 14443                           postinc2	equ	0xFDE
 14444                           postdec2	equ	0xFDD
 14445                           plusw2	equ	0xFDB
 14446                           fsr2h	equ	0xFDA
 14447                           fsr2l	equ	0xFD9
 14448                           status	equ	0xFD8
 14449                           
 14450 ;; *************** function _MXK_Dequeue *****************
 14451 ;; Defined at:
 14452 ;;		line 153 in file "Library/MXK.c"
 14453 ;; Parameters:    Size  Location     Type
 14454 ;;		None
 14455 ;; Auto vars:     Size  Location     Type
 14456 ;;		None
 14457 ;; Return value:  Size  Location     Type
 14458 ;;                  1    wreg      void 
 14459 ;; Registers used:
 14460 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14461 ;; Tracked objects:
 14462 ;;		On entry : 0/0
 14463 ;;		On exit  : 0/0
 14464 ;;		Unchanged: 0/0
 14465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14467 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14469 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14470 ;;Total ram usage:        0 bytes
 14471 ;; Hardware stack levels used:    1
 14472 ;; Hardware stack levels required when called:   12
 14473 ;; This function calls:
 14474 ;;		Absolute function
 14475 ;;		_Motor_Step
 14476 ;; This function is called by:
 14477 ;;		_init
 14478 ;;		_mode2
 14479 ;; This function uses a non-reentrant model
 14480 ;;
 14481                           
 14482                           	psect	text75
 14483  0000'                    __ptext75:
 14484                           	opt stack 0
 14485  0000'                    _MXK_Dequeue:
 14486                           	opt stack 17
 14487                           
 14488                           ;MXK.c: 155: if (lQueue)
 14489                           
 14490                           ;incstack = 0
 14491  0000' 0100               	movlb	0	; () banked
 14492  0002' 5100'              	movf	_lQueue& (0+255),w,b	;volatile
 14493  0004' 0100               	movlb	0	; () banked
 14494  0006' 1100'              	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 14495  0008' 0100               	movlb	0	; () banked
 14496  000A' 1100'              	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 14497  000C' B4D8               	btfsc	status,2,c
 14498  000E' D00D               	goto	u9559
 14499                           
 14500                           ; BSR set to: 0
 14501                           ;MXK.c: 156: lQueue();
 14502  0010' D801               	call	u9558
 14503  0012' D00B               	goto	u9559
 14504  0014'                    u9558:
 14505  0014' 0005               	push	
 14506  0016' 6EFA               	movwf	pclath,c
 14507  0018' 0100               	movlb	0	; () banked
 14508  001A' 5100'              	movf	_lQueue& (0+255),w,b	;volatile
 14509  001C' 6EFD               	movwf	tosl,c
 14510  001E' 5100'              	movf	(_lQueue+1)& (0+255),w,b	;volatile
 14511  0020' 6EFE               	movwf	tosh,c
 14512  0022' 5100'              	movf	(_lQueue+2)& (0+255),w,b	;volatile
 14513  0024' 6EFF               	movwf	tosu,c
 14514  0026' 50FA               	movf	pclath,w,c
 14515  0028' 0012               	return		;indir
 14516  002A'                    u9559:
 14517                           
 14518                           ;MXK.c: 157: lQueue = 0;
 14519  002A' 0E00               	movlw	0
 14520  002C' 0100               	movlb	0	; () banked
 14521  002E' 6F00'              	movwf	_lQueue& (0+255),b	;volatile
 14522  0030' 0E00               	movlw	0
 14523  0032' 0100               	movlb	0	; () banked
 14524  0034' 6F00'              	movwf	(_lQueue+1)& (0+255),b	;volatile
 14525  0036' 0E00               	movlw	0
 14526  0038' 0100               	movlb	0	; () banked
 14527  003A' 6F00'              	movwf	(_lQueue+2)& (0+255),b	;volatile
 14528                           
 14529                           ; BSR set to: 0
 14530  003C' 0012               	return		;funcret
 14531  003E'                    __end_of_MXK_Dequeue:
 14532                           	opt stack 0
 14533                           tosu	equ	0xFFF
 14534                           tosh	equ	0xFFE
 14535                           tosl	equ	0xFFD
 14536                           pclath	equ	0xFFA
 14537                           tblptru	equ	0xFF8
 14538                           tblptrh	equ	0xFF7
 14539                           tblptrl	equ	0xFF6
 14540                           tablat	equ	0xFF5
 14541                           prodh	equ	0xFF4
 14542                           prodl	equ	0xFF3
 14543                           postinc0	equ	0xFEE
 14544                           wreg	equ	0xFE8
 14545                           indf1	equ	0xFE7
 14546                           postdec1	equ	0xFE5
 14547                           fsr1h	equ	0xFE2
 14548                           fsr1l	equ	0xFE1
 14549                           indf2	equ	0xFDF
 14550                           postinc2	equ	0xFDE
 14551                           postdec2	equ	0xFDD
 14552                           plusw2	equ	0xFDB
 14553                           fsr2h	equ	0xFDA
 14554                           fsr2l	equ	0xFD9
 14555                           status	equ	0xFD8
 14556                           
 14557 ;; *************** function _Motor_Step *****************
 14558 ;; Defined at:
 14559 ;;		line 75 in file "Library/Motor.c"
 14560 ;; Parameters:    Size  Location     Type
 14561 ;;		None
 14562 ;; Auto vars:     Size  Location     Type
 14563 ;;		None
 14564 ;; Return value:  Size  Location     Type
 14565 ;;                  1    wreg      void 
 14566 ;; Registers used:
 14567 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14568 ;; Tracked objects:
 14569 ;;		On entry : 0/0
 14570 ;;		On exit  : 0/0
 14571 ;;		Unchanged: 0/0
 14572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14574 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14575 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14576 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14577 ;;Total ram usage:        2 bytes
 14578 ;; Hardware stack levels used:    1
 14579 ;; Hardware stack levels required when called:   11
 14580 ;; This function calls:
 14581 ;;		_MXK_Queue
 14582 ;;		_MXK_Release
 14583 ;;		_MXK_SwitchTo
 14584 ;;		_Port_SetPin
 14585 ;;		_Timer0_Restart
 14586 ;;		_Timer0_Stop
 14587 ;; This function is called by:
 14588 ;;		_Motor_Init
 14589 ;;		_MXK_Dequeue
 14590 ;;		_Timer0_ISR
 14591 ;; This function uses a non-reentrant model
 14592 ;;
 14593                           
 14594                           	psect	text76
 14595  0000'                    __ptext76:
 14596                           	opt stack 0
 14597  0000'                    _Motor_Step:
 14598                           	opt stack 0
 14599                           
 14600                           ; BSR set to: 0
 14601                           ;Skip over the trampoline to the duplicate function for level 2
 14602  0000' B200'              	btfsc	btemp,1,c
 14603  0002' EF00' F000'        	goto	i2_Motor_Step
 14604  0006'                    _Motor_Step$intlevel0:
 14605                           	opt stack 17
 14606                           
 14607                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 14608                           
 14609                           ;incstack = 0
 14610  0006' 0100               	movlb	0	; () banked
 14611  0008' EE20 F004          	lfsr	2,4
 14612  000C' 5100'              	movf	_lMotor& (0+255),w,b
 14613  000E' 26D9               	addwf	fsr2l,f,c
 14614  0010' 5100'              	movf	(_lMotor+1)& (0+255),w,b
 14615  0012' 22DA               	addwfc	fsr2h,f,c
 14616  0014' 50DF               	movf	indf2,w,c
 14617  0016' EC00' F000'        	call	_MXK_SwitchTo
 14618  001A' 0900               	iorlw	0
 14619  001C' B4D8               	btfsc	status,2,c
 14620  001E' D07A               	goto	l1627
 14621                           
 14622                           ;Motor.c: 78: {
 14623                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 14624  0020' C023' FFD9         	movff	_lMotor,fsr2l
 14625  0024' C024' FFDA         	movff	_lMotor+1,fsr2h
 14626  0028' 50DE               	movf	postinc2,w,c
 14627  002A' 10DE               	iorwf	postinc2,w,c
 14628  002C' B4D8               	btfsc	status,2,c
 14629  002E' D06D               	goto	l1628
 14630                           
 14631                           ;Motor.c: 80: {
 14632                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 14633  0030' C023' FFD9         	movff	_lMotor,fsr2l
 14634  0034' C024' FFDA         	movff	_lMotor+1,fsr2h
 14635  0038' 0E01               	movlw	1
 14636  003A' BEDB               	btfsc	plusw2,7,c
 14637  003C' D026               	goto	l1629
 14638  003E' 0E01               	movlw	1
 14639  0040' 50DB               	movf	plusw2,w,c
 14640  0042' E103               	bnz	u8000
 14641  0044' 04DE               	decf	postinc2,w,c
 14642  0046' A0D8               	btfss	status,0,c
 14643  0048' D020               	goto	l1629
 14644  004A'                    u8000:
 14645                           
 14646                           ;Motor.c: 83: {
 14647                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 14648  004A' C023' FFD9         	movff	_lMotor,fsr2l
 14649  004E' C024' FFDA         	movff	_lMotor+1,fsr2h
 14650  0052' 28DE               	incf	postinc2,w,c
 14651  0054' E104               	bnz	u8010
 14652  0056' 0E7F               	movlw	127
 14653  0058' 18DE               	xorwf	postinc2,w,c
 14654  005A' B4D8               	btfsc	status,2,c
 14655  005C' D007               	goto	l1630
 14656  005E'                    u8010:
 14657                           
 14658                           ;Motor.c: 85: lMotor->mDelta --;
 14659  005E' C023' FFD9         	movff	_lMotor,fsr2l
 14660  0062' C024' FFDA         	movff	_lMotor+1,fsr2h
 14661  0066' 06DE               	decf	postinc2,f,c
 14662  0068' 0E00               	movlw	0
 14663  006A' 5ADD               	subwfb	postdec2,f,c
 14664  006C'                    l1630:
 14665                           
 14666                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 14667  006C' 0E00'              	movlw	low _PortE
 14668  006E' 0100               	movlb	0	; () banked
 14669  0070' 6F00'              	movwf	Port_SetPin@pInput& (0+255),b
 14670  0072' 0E00'              	movlw	high _PortE
 14671  0074' 0100               	movlb	0	; () banked
 14672  0076' 6F00'              	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14673  0078' 0E00               	movlw	0
 14674  007A' 0100               	movlb	0	; () banked
 14675  007C' 6F00'              	movwf	Port_SetPin@pPin& (0+255),b
 14676  007E' 0E01               	movlw	1
 14677  0080' 0100               	movlb	0	; () banked
 14678  0082' 6F00'              	movwf	Port_SetPin@pValue& (0+255),b
 14679  0084' EC00' F000'        	call	_Port_SetPin	;wreg free
 14680                           
 14681                           ;Motor.c: 88: }
 14682  0088' D01F               	goto	l1631
 14683  008A'                    l1629:
 14684                           
 14685                           ;Motor.c: 89: else
 14686                           ;Motor.c: 90: {
 14687                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 14688  008A' C023' FFD9         	movff	_lMotor,fsr2l
 14689  008E' C024' FFDA         	movff	_lMotor+1,fsr2h
 14690  0092' 04DE               	decf	postinc2,w,c
 14691  0094' E104               	bnz	u8020
 14692  0096' 0E80               	movlw	128
 14693  0098' 18DE               	xorwf	postinc2,w,c
 14694  009A' B4D8               	btfsc	status,2,c
 14695  009C' D007               	goto	l1632
 14696  009E'                    u8020:
 14697                           
 14698                           ;Motor.c: 92: lMotor->mDelta ++;
 14699  009E' C023' FFD9         	movff	_lMotor,fsr2l
 14700  00A2' C024' FFDA         	movff	_lMotor+1,fsr2h
 14701  00A6' 2ADE               	incf	postinc2,f,c
 14702  00A8' 0E00               	movlw	0
 14703  00AA' 22DD               	addwfc	postdec2,f,c
 14704  00AC'                    l1632:
 14705                           
 14706                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 14707  00AC' 0E00'              	movlw	low _PortE
 14708  00AE' 0100               	movlb	0	; () banked
 14709  00B0' 6F00'              	movwf	Port_SetPin@pInput& (0+255),b
 14710  00B2' 0E00'              	movlw	high _PortE
 14711  00B4' 0100               	movlb	0	; () banked
 14712  00B6' 6F00'              	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14713  00B8' 0E00               	movlw	0
 14714  00BA' 0100               	movlb	0	; () banked
 14715  00BC' 6F00'              	movwf	Port_SetPin@pPin& (0+255),b
 14716  00BE' 0E00               	movlw	0
 14717  00C0' 0100               	movlb	0	; () banked
 14718  00C2' 6F00'              	movwf	Port_SetPin@pValue& (0+255),b
 14719  00C4' EC00' F000'        	call	_Port_SetPin	;wreg free
 14720  00C8'                    l1631:
 14721                           
 14722                           ;Motor.c: 95: }
 14723                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 14724  00C8' 0E00'              	movlw	low _PortE
 14725  00CA' 0100               	movlb	0	; () banked
 14726  00CC' 6F00'              	movwf	Port_SetPin@pInput& (0+255),b
 14727  00CE' 0E00'              	movlw	high _PortE
 14728  00D0' 0100               	movlb	0	; () banked
 14729  00D2' 6F00'              	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14730  00D4' 0E01               	movlw	1
 14731  00D6' 0100               	movlb	0	; () banked
 14732  00D8' 6F00'              	movwf	Port_SetPin@pPin& (0+255),b
 14733  00DA' 0E01               	movlw	1
 14734  00DC' 0100               	movlb	0	; () banked
 14735  00DE' 6F00'              	movwf	Port_SetPin@pValue& (0+255),b
 14736  00E0' EC00' F000'        	call	_Port_SetPin	;wreg free
 14737                           
 14738                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 14739  00E4' 0E00'              	movlw	low _PortE
 14740  00E6' 0100               	movlb	0	; () banked
 14741  00E8' 6F00'              	movwf	Port_SetPin@pInput& (0+255),b
 14742  00EA' 0E00'              	movlw	high _PortE
 14743  00EC' 0100               	movlb	0	; () banked
 14744  00EE' 6F00'              	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14745  00F0' 0E01               	movlw	1
 14746  00F2' 0100               	movlb	0	; () banked
 14747  00F4' 6F00'              	movwf	Port_SetPin@pPin& (0+255),b
 14748  00F6' 0E00               	movlw	0
 14749  00F8' 0100               	movlb	0	; () banked
 14750  00FA' 6F00'              	movwf	Port_SetPin@pValue& (0+255),b
 14751  00FC' EC00' F000'        	call	_Port_SetPin	;wreg free
 14752                           
 14753                           ;Motor.c: 101: MXK_Release();
 14754  0100' EC00' F000'        	call	_MXK_Release	;wreg free
 14755                           
 14756                           ;Motor.c: 102: Timer0_Restart();
 14757  0104' EC00' F000'        	call	_Timer0_Restart	;wreg free
 14758                           
 14759                           ;Motor.c: 103: return;
 14760  0108' 0012               	return	
 14761  010A'                    l1628:
 14762                           
 14763                           ;Motor.c: 104: }
 14764                           ;Motor.c: 105: MXK_Release();
 14765  010A' EC00' F000'        	call	_MXK_Release	;wreg free
 14766                           
 14767                           ;Motor.c: 106: Timer0_Stop();
 14768  010E' EC00' F000'        	call	_Timer0_Stop	;wreg free
 14769                           
 14770                           ;Motor.c: 107: return;
 14771  0112' 0012               	return	
 14772  0114'                    l1627:
 14773                           
 14774                           ;Motor.c: 108: }
 14775                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 14776  0114' C00A' F000'        	movff	_lStepFunction,MXK_Queue@pCallback
 14777  0118' C00B' F001'        	movff	_lStepFunction+1,MXK_Queue@pCallback+1
 14778  011C' C00C' F002'        	movff	_lStepFunction+2,MXK_Queue@pCallback+2
 14779  0120' EC00' F000'        	call	_MXK_Queue	;wreg free
 14780  0124' 0012               	return		;funcret
 14781  0126'                    __end_of_Motor_Step:
 14782                           	opt stack 0
 14783                           tosu	equ	0xFFF
 14784                           tosh	equ	0xFFE
 14785                           tosl	equ	0xFFD
 14786                           pclath	equ	0xFFA
 14787                           tblptru	equ	0xFF8
 14788                           tblptrh	equ	0xFF7
 14789                           tblptrl	equ	0xFF6
 14790                           tablat	equ	0xFF5
 14791                           prodh	equ	0xFF4
 14792                           prodl	equ	0xFF3
 14793                           postinc0	equ	0xFEE
 14794                           wreg	equ	0xFE8
 14795                           indf1	equ	0xFE7
 14796                           postdec1	equ	0xFE5
 14797                           fsr1h	equ	0xFE2
 14798                           fsr1l	equ	0xFE1
 14799                           indf2	equ	0xFDF
 14800                           postinc2	equ	0xFDE
 14801                           postdec2	equ	0xFDD
 14802                           plusw2	equ	0xFDB
 14803                           fsr2h	equ	0xFDA
 14804                           fsr2l	equ	0xFD9
 14805                           status	equ	0xFD8
 14806                           
 14807 ;; *************** function _Timer0_Stop *****************
 14808 ;; Defined at:
 14809 ;;		line 89 in file "Library/Timer0.c"
 14810 ;; Parameters:    Size  Location     Type
 14811 ;;		None
 14812 ;; Auto vars:     Size  Location     Type
 14813 ;;		None
 14814 ;; Return value:  Size  Location     Type
 14815 ;;                  1    wreg      void 
 14816 ;; Registers used:
 14817 ;;		None
 14818 ;; Tracked objects:
 14819 ;;		On entry : 0/0
 14820 ;;		On exit  : 0/0
 14821 ;;		Unchanged: 0/0
 14822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14826 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14827 ;;Total ram usage:        0 bytes
 14828 ;; Hardware stack levels used:    1
 14829 ;; Hardware stack levels required when called:    7
 14830 ;; This function calls:
 14831 ;;		Nothing
 14832 ;; This function is called by:
 14833 ;;		_Motor_Step
 14834 ;; This function uses a non-reentrant model
 14835 ;;
 14836                           
 14837                           	psect	text77
 14838  0000'                    __ptext77:
 14839                           	opt stack 0
 14840  0000'                    _Timer0_Stop:
 14841                           	opt stack 20
 14842                           
 14843                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 14844                           
 14845                           ;incstack = 0
 14846  0000' 9AF2               	bcf	intcon,5,c	;volatile
 14847                           
 14848                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 14849  0002' 94F2               	bcf	intcon,2,c	;volatile
 14850  0004' 0012               	return		;funcret
 14851  0006'                    __end_of_Timer0_Stop:
 14852                           	opt stack 0
 14853                           tosu	equ	0xFFF
 14854                           tosh	equ	0xFFE
 14855                           tosl	equ	0xFFD
 14856                           pclath	equ	0xFFA
 14857                           tblptru	equ	0xFF8
 14858                           tblptrh	equ	0xFF7
 14859                           tblptrl	equ	0xFF6
 14860                           tablat	equ	0xFF5
 14861                           prodh	equ	0xFF4
 14862                           prodl	equ	0xFF3
 14863                           intcon	equ	0xFF2
 14864                           postinc0	equ	0xFEE
 14865                           wreg	equ	0xFE8
 14866                           indf1	equ	0xFE7
 14867                           postdec1	equ	0xFE5
 14868                           fsr1h	equ	0xFE2
 14869                           fsr1l	equ	0xFE1
 14870                           indf2	equ	0xFDF
 14871                           postinc2	equ	0xFDE
 14872                           postdec2	equ	0xFDD
 14873                           plusw2	equ	0xFDB
 14874                           fsr2h	equ	0xFDA
 14875                           fsr2l	equ	0xFD9
 14876                           status	equ	0xFD8
 14877                           
 14878 ;; *************** function _Timer0_Restart *****************
 14879 ;; Defined at:
 14880 ;;		line 83 in file "Library/Timer0.c"
 14881 ;; Parameters:    Size  Location     Type
 14882 ;;		None
 14883 ;; Auto vars:     Size  Location     Type
 14884 ;;		None
 14885 ;; Return value:  Size  Location     Type
 14886 ;;                  1    wreg      void 
 14887 ;; Registers used:
 14888 ;;		None
 14889 ;; Tracked objects:
 14890 ;;		On entry : 0/0
 14891 ;;		On exit  : 0/0
 14892 ;;		Unchanged: 0/0
 14893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14897 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14898 ;;Total ram usage:        0 bytes
 14899 ;; Hardware stack levels used:    1
 14900 ;; Hardware stack levels required when called:    7
 14901 ;; This function calls:
 14902 ;;		Nothing
 14903 ;; This function is called by:
 14904 ;;		_Motor_Step
 14905 ;; This function uses a non-reentrant model
 14906 ;;
 14907                           
 14908                           	psect	text78
 14909  0000'                    __ptext78:
 14910                           	opt stack 0
 14911  0000'                    _Timer0_Restart:
 14912                           	opt stack 20
 14913                           
 14914                           ;Timer0.c: 85: TMR0 = COUNTER;
 14915                           
 14916                           ;incstack = 0
 14917  0000' C000' FFD6         	movff	_COUNTER,4054	;volatile
 14918  0004' C001' FFD7         	movff	_COUNTER+1,4055	;volatile
 14919                           
 14920                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 14921  0008' 8AF2               	bsf	intcon,5,c	;volatile
 14922  000A' 0012               	return		;funcret
 14923  000C'                    __end_of_Timer0_Restart:
 14924                           	opt stack 0
 14925                           tosu	equ	0xFFF
 14926                           tosh	equ	0xFFE
 14927                           tosl	equ	0xFFD
 14928                           pclath	equ	0xFFA
 14929                           tblptru	equ	0xFF8
 14930                           tblptrh	equ	0xFF7
 14931                           tblptrl	equ	0xFF6
 14932                           tablat	equ	0xFF5
 14933                           prodh	equ	0xFF4
 14934                           prodl	equ	0xFF3
 14935                           intcon	equ	0xFF2
 14936                           postinc0	equ	0xFEE
 14937                           wreg	equ	0xFE8
 14938                           indf1	equ	0xFE7
 14939                           postdec1	equ	0xFE5
 14940                           fsr1h	equ	0xFE2
 14941                           fsr1l	equ	0xFE1
 14942                           indf2	equ	0xFDF
 14943                           postinc2	equ	0xFDE
 14944                           postdec2	equ	0xFDD
 14945                           plusw2	equ	0xFDB
 14946                           fsr2h	equ	0xFDA
 14947                           fsr2l	equ	0xFD9
 14948                           status	equ	0xFD8
 14949                           
 14950 ;; *************** function _MXK_SwitchTo *****************
 14951 ;; Defined at:
 14952 ;;		line 105 in file "Library/MXK.c"
 14953 ;; Parameters:    Size  Location     Type
 14954 ;;  pModule         1    wreg     enum E6927
 14955 ;; Auto vars:     Size  Location     Type
 14956 ;;  pModule         1    7[BANK0 ] enum E6927
 14957 ;;  CUR             1    6[BANK0 ] unsigned char 
 14958 ;; Return value:  Size  Location     Type
 14959 ;;                  1    wreg      unsigned char 
 14960 ;; Registers used:
 14961 ;;		wreg, status,2, status,0, cstack
 14962 ;; Tracked objects:
 14963 ;;		On entry : 0/0
 14964 ;;		On exit  : 0/0
 14965 ;;		Unchanged: 0/0
 14966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14968 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14970 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14971 ;;Total ram usage:        2 bytes
 14972 ;; Hardware stack levels used:    1
 14973 ;; Hardware stack levels required when called:    8
 14974 ;; This function calls:
 14975 ;;		_delay_us
 14976 ;; This function is called by:
 14977 ;;		_Motor_Step
 14978 ;;		_mode2
 14979 ;; This function uses a non-reentrant model
 14980 ;;
 14981                           
 14982                           	psect	text79
 14983  0000'                    __ptext79:
 14984                           	opt stack 0
 14985  0000'                    _MXK_SwitchTo:
 14986                           	opt stack 21
 14987                           
 14988                           ;incstack = 0
 14989                           ;MXK_SwitchTo@pModule stored from wreg
 14990  0000' 0100               	movlb	0	; () banked
 14991  0002' 6F00'              	movwf	MXK_SwitchTo@pModule& (0+255),b
 14992                           
 14993                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 14994  0004' 5086               	movf	3974,w,c	;volatile
 14995  0006' 0B0F               	andlw	15
 14996  0008' 0100               	movlb	0	; () banked
 14997  000A' 6F00'              	movwf	MXK_SwitchTo@CUR& (0+255),b
 14998                           
 14999                           ; BSR set to: 0
 15000                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 15001  000C' 5004'              	movf	_Bus_State,w,c
 15002  000E' A4D8               	btfss	status,2,c
 15003  0010' D002               	goto	l1730
 15004                           
 15005                           ; BSR set to: 0
 15006                           ;MXK.c: 110: return 0;
 15007  0012' 0E00               	movlw	0
 15008                           
 15009                           ; BSR set to: 0
 15010  0014' 0012               	return	
 15011  0016'                    l1730:
 15012                           
 15013                           ; BSR set to: 0
 15014                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 15015                           
 15016                           ; BSR set to: 0
 15017  0016' 0E00               	movlw	0
 15018  0018' 6E04'              	movwf	_Bus_State,c
 15019                           
 15020                           ; BSR set to: 0
 15021                           ;MXK.c: 114: if (CUR != pModule)
 15022  001A' 0100               	movlb	0	; () banked
 15023  001C' 5100'              	movf	MXK_SwitchTo@pModule& (0+255),w,b
 15024  001E' 0100               	movlb	0	; () banked
 15025  0020' 1900'              	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
 15026  0022' B4D8               	btfsc	status,2,c
 15027  0024' D00C               	goto	l1732
 15028                           
 15029                           ; BSR set to: 0
 15030                           ;MXK.c: 115: {
 15031                           ;MXK.c: 116: PORTG &= ~(0xF);
 15032  0026' 0EF0               	movlw	240
 15033  0028' 1686               	andwf	3974,f,c	;volatile
 15034                           
 15035                           ;MXK.c: 117: PORTG |= pModule;
 15036  002A' 0100               	movlb	0	; () banked
 15037  002C' 5100'              	movf	MXK_SwitchTo@pModule& (0+255),w,b
 15038  002E' 1286               	iorwf	3974,f,c	;volatile
 15039                           
 15040                           ; BSR set to: 0
 15041                           ;MXK.c: 120: delay_us(10);
 15042  0030' 0E00               	movlw	0
 15043  0032' 0100               	movlb	0	; () banked
 15044  0034' 6F00'              	movwf	(delay_us@us+1)& (0+255),b
 15045  0036' 0E0A               	movlw	10
 15046  0038' 6F00'              	movwf	delay_us@us& (0+255),b
 15047  003A' EC00' F000'        	call	_delay_us	;wreg free
 15048  003E'                    l1732:
 15049                           
 15050                           ;MXK.c: 121: }
 15051                           ;MXK.c: 122: return 1;
 15052  003E' 0E01               	movlw	1
 15053  0040' 0012               	return	
 15054  0042'                    __end_of_MXK_SwitchTo:
 15055                           	opt stack 0
 15056                           tosu	equ	0xFFF
 15057                           tosh	equ	0xFFE
 15058                           tosl	equ	0xFFD
 15059                           pclath	equ	0xFFA
 15060                           tblptru	equ	0xFF8
 15061                           tblptrh	equ	0xFF7
 15062                           tblptrl	equ	0xFF6
 15063                           tablat	equ	0xFF5
 15064                           prodh	equ	0xFF4
 15065                           prodl	equ	0xFF3
 15066                           intcon	equ	0xFF2
 15067                           postinc0	equ	0xFEE
 15068                           wreg	equ	0xFE8
 15069                           indf1	equ	0xFE7
 15070                           postdec1	equ	0xFE5
 15071                           fsr1h	equ	0xFE2
 15072                           fsr1l	equ	0xFE1
 15073                           indf2	equ	0xFDF
 15074                           postinc2	equ	0xFDE
 15075                           postdec2	equ	0xFDD
 15076                           plusw2	equ	0xFDB
 15077                           fsr2h	equ	0xFDA
 15078                           fsr2l	equ	0xFD9
 15079                           status	equ	0xFD8
 15080                           
 15081 ;; *************** function _MXK_Release *****************
 15082 ;; Defined at:
 15083 ;;		line 130 in file "Library/MXK.c"
 15084 ;; Parameters:    Size  Location     Type
 15085 ;;		None
 15086 ;; Auto vars:     Size  Location     Type
 15087 ;;		None
 15088 ;; Return value:  Size  Location     Type
 15089 ;;                  1    wreg      unsigned char 
 15090 ;; Registers used:
 15091 ;;		wreg, status,2, status,0
 15092 ;; Tracked objects:
 15093 ;;		On entry : 0/0
 15094 ;;		On exit  : 0/0
 15095 ;;		Unchanged: 0/0
 15096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15098 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15100 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15101 ;;Total ram usage:        0 bytes
 15102 ;; Hardware stack levels used:    1
 15103 ;; Hardware stack levels required when called:    7
 15104 ;; This function calls:
 15105 ;;		Nothing
 15106 ;; This function is called by:
 15107 ;;		_Motor_Step
 15108 ;;		_init
 15109 ;;		_mode2
 15110 ;; This function uses a non-reentrant model
 15111 ;;
 15112                           
 15113                           	psect	text80
 15114  0000'                    __ptext80:
 15115                           	opt stack 0
 15116  0000'                    _MXK_Release:
 15117                           	opt stack 22
 15118                           
 15119                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 15120                           
 15121                           ;incstack = 0
 15122  0000' 0E01               	movlw	1
 15123  0002' 6E04'              	movwf	_Bus_State,c
 15124                           
 15125                           ;MXK.c: 134: if (lQueue != 0)
 15126  0004' 0100               	movlb	0	; () banked
 15127  0006' 5100'              	movf	_lQueue& (0+255),w,b	;volatile
 15128  0008' 0100               	movlb	0	; () banked
 15129  000A' 1100'              	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 15130  000C' 0100               	movlb	0	; () banked
 15131  000E' 1100'              	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 15132  0010' B4D8               	btfsc	status,2,c
 15133  0012' D002               	goto	l1735
 15134                           
 15135                           ; BSR set to: 0
 15136                           ;MXK.c: 135: return 1;
 15137  0014' 0E01               	movlw	1
 15138                           
 15139                           ; BSR set to: 0
 15140  0016' 0012               	return	
 15141  0018'                    l1735:
 15142                           
 15143                           ; BSR set to: 0
 15144                           ;MXK.c: 137: return 0;
 15145                           
 15146                           ; BSR set to: 0
 15147  0018' 0E00               	movlw	0
 15148  001A' 0012               	return	
 15149  001C'                    __end_of_MXK_Release:
 15150                           	opt stack 0
 15151                           tosu	equ	0xFFF
 15152                           tosh	equ	0xFFE
 15153                           tosl	equ	0xFFD
 15154                           pclath	equ	0xFFA
 15155                           tblptru	equ	0xFF8
 15156                           tblptrh	equ	0xFF7
 15157                           tblptrl	equ	0xFF6
 15158                           tablat	equ	0xFF5
 15159                           prodh	equ	0xFF4
 15160                           prodl	equ	0xFF3
 15161                           intcon	equ	0xFF2
 15162                           postinc0	equ	0xFEE
 15163                           wreg	equ	0xFE8
 15164                           indf1	equ	0xFE7
 15165                           postdec1	equ	0xFE5
 15166                           fsr1h	equ	0xFE2
 15167                           fsr1l	equ	0xFE1
 15168                           indf2	equ	0xFDF
 15169                           postinc2	equ	0xFDE
 15170                           postdec2	equ	0xFDD
 15171                           plusw2	equ	0xFDB
 15172                           fsr2h	equ	0xFDA
 15173                           fsr2l	equ	0xFD9
 15174                           status	equ	0xFD8
 15175                           
 15176 ;; *************** function _MXK_Queue *****************
 15177 ;; Defined at:
 15178 ;;		line 144 in file "Library/MXK.c"
 15179 ;; Parameters:    Size  Location     Type
 15180 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
 15181 ;;		 -> Absolute function(1), Motor_Step(1), 
 15182 ;; Auto vars:     Size  Location     Type
 15183 ;;		None
 15184 ;; Return value:  Size  Location     Type
 15185 ;;                  1    wreg      void 
 15186 ;; Registers used:
 15187 ;;		wreg, status,2, status,0
 15188 ;; Tracked objects:
 15189 ;;		On entry : 0/0
 15190 ;;		On exit  : 0/0
 15191 ;;		Unchanged: 0/0
 15192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15193 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15196 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15197 ;;Total ram usage:        3 bytes
 15198 ;; Hardware stack levels used:    1
 15199 ;; Hardware stack levels required when called:    7
 15200 ;; This function calls:
 15201 ;;		Nothing
 15202 ;; This function is called by:
 15203 ;;		_Motor_Step
 15204 ;; This function uses a non-reentrant model
 15205 ;;
 15206                           
 15207                           	psect	text81
 15208  0000'                    __ptext81:
 15209                           	opt stack 0
 15210  0000'                    _MXK_Queue:
 15211                           	opt stack 20
 15212                           
 15213                           ;MXK.c: 146: lQueue = pCallback;
 15214                           
 15215                           ; BSR set to: 0
 15216                           ;incstack = 0
 15217  0000' C000' F007'        	movff	MXK_Queue@pCallback,_lQueue	;volatile
 15218  0004' C001' F008'        	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
 15219  0008' C002' F009'        	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
 15220  000C' 0012               	return		;funcret
 15221  000E'                    __end_of_MXK_Queue:
 15222                           	opt stack 0
 15223                           tosu	equ	0xFFF
 15224                           tosh	equ	0xFFE
 15225                           tosl	equ	0xFFD
 15226                           pclath	equ	0xFFA
 15227                           tblptru	equ	0xFF8
 15228                           tblptrh	equ	0xFF7
 15229                           tblptrl	equ	0xFF6
 15230                           tablat	equ	0xFF5
 15231                           prodh	equ	0xFF4
 15232                           prodl	equ	0xFF3
 15233                           intcon	equ	0xFF2
 15234                           postinc0	equ	0xFEE
 15235                           wreg	equ	0xFE8
 15236                           indf1	equ	0xFE7
 15237                           postdec1	equ	0xFE5
 15238                           fsr1h	equ	0xFE2
 15239                           fsr1l	equ	0xFE1
 15240                           indf2	equ	0xFDF
 15241                           postinc2	equ	0xFDE
 15242                           postdec2	equ	0xFDD
 15243                           plusw2	equ	0xFDB
 15244                           fsr2h	equ	0xFDA
 15245                           fsr2l	equ	0xFD9
 15246                           status	equ	0xFD8
 15247                           
 15248 ;; *************** function _MXK_BlockSwitchTo *****************
 15249 ;; Defined at:
 15250 ;;		line 82 in file "Library/MXK.c"
 15251 ;; Parameters:    Size  Location     Type
 15252 ;;  pModule         1    wreg     enum E6927
 15253 ;; Auto vars:     Size  Location     Type
 15254 ;;  pModule         1    7[BANK0 ] enum E6927
 15255 ;;  CUR             1    6[BANK0 ] unsigned char 
 15256 ;; Return value:  Size  Location     Type
 15257 ;;                  1    wreg      unsigned char 
 15258 ;; Registers used:
 15259 ;;		wreg, status,2, status,0, cstack
 15260 ;; Tracked objects:
 15261 ;;		On entry : 0/0
 15262 ;;		On exit  : 0/0
 15263 ;;		Unchanged: 0/0
 15264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15266 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15268 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15269 ;;Total ram usage:        2 bytes
 15270 ;; Hardware stack levels used:    1
 15271 ;; Hardware stack levels required when called:    8
 15272 ;; This function calls:
 15273 ;;		_delay_us
 15274 ;; This function is called by:
 15275 ;;		_init
 15276 ;; This function uses a non-reentrant model
 15277 ;;
 15278                           
 15279                           	psect	text82
 15280  0000'                    __ptext82:
 15281                           	opt stack 0
 15282  0000'                    _MXK_BlockSwitchTo:
 15283                           	opt stack 21
 15284                           
 15285                           ;incstack = 0
 15286                           ;MXK_BlockSwitchTo@pModule stored from wreg
 15287  0000' 0100               	movlb	0	; () banked
 15288  0002' 6F00'              	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
 15289                           
 15290                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
 15291  0004' 5086               	movf	3974,w,c	;volatile
 15292  0006' 0B0F               	andlw	15
 15293  0008' 0100               	movlb	0	; () banked
 15294  000A' 6F00'              	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
 15295  000C'                    
 15296                           ; BSR set to: 0
 15297                           
 15298                           ; BSR set to: 0
 15299  000C' 5004'              	movf	_Bus_State,w,c
 15300  000E' B4D8               	btfsc	status,2,c
 15301  0010' D7FD               	goto	l1724
 15302                           
 15303                           ;MXK.c: 88: Bus_State = eMXK_Busy;
 15304  0012' 0E00               	movlw	0
 15305  0014' 6E04'              	movwf	_Bus_State,c
 15306                           
 15307                           ;MXK.c: 90: if (CUR != pModule)
 15308  0016' 0100               	movlb	0	; () banked
 15309  0018' 5100'              	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 15310  001A' 0100               	movlb	0	; () banked
 15311  001C' 1900'              	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
 15312  001E' B4D8               	btfsc	status,2,c
 15313  0020' D00C               	goto	l1726
 15314                           
 15315                           ; BSR set to: 0
 15316                           ;MXK.c: 91: {
 15317                           ;MXK.c: 92: PORTG &= ~(0xF);
 15318  0022' 0EF0               	movlw	240
 15319  0024' 1686               	andwf	3974,f,c	;volatile
 15320                           
 15321                           ;MXK.c: 93: PORTG |= pModule;
 15322  0026' 0100               	movlb	0	; () banked
 15323  0028' 5100'              	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 15324  002A' 1286               	iorwf	3974,f,c	;volatile
 15325                           
 15326                           ; BSR set to: 0
 15327                           ;MXK.c: 96: delay_us(10);
 15328  002C' 0E00               	movlw	0
 15329  002E' 0100               	movlb	0	; () banked
 15330  0030' 6F00'              	movwf	(delay_us@us+1)& (0+255),b
 15331  0032' 0E0A               	movlw	10
 15332  0034' 6F00'              	movwf	delay_us@us& (0+255),b
 15333  0036' EC00' F000'        	call	_delay_us	;wreg free
 15334  003A'                    l1726:
 15335                           
 15336                           ;MXK.c: 97: }
 15337                           ;MXK.c: 98: return 1;
 15338  003A' 0E01               	movlw	1
 15339  003C' 0012               	return	
 15340  003E'                    __end_of_MXK_BlockSwitchTo:
 15341                           	opt stack 0
 15342                           tosu	equ	0xFFF
 15343                           tosh	equ	0xFFE
 15344                           tosl	equ	0xFFD
 15345                           pclath	equ	0xFFA
 15346                           tblptru	equ	0xFF8
 15347                           tblptrh	equ	0xFF7
 15348                           tblptrl	equ	0xFF6
 15349                           tablat	equ	0xFF5
 15350                           prodh	equ	0xFF4
 15351                           prodl	equ	0xFF3
 15352                           intcon	equ	0xFF2
 15353                           postinc0	equ	0xFEE
 15354                           wreg	equ	0xFE8
 15355                           indf1	equ	0xFE7
 15356                           postdec1	equ	0xFE5
 15357                           fsr1h	equ	0xFE2
 15358                           fsr1l	equ	0xFE1
 15359                           indf2	equ	0xFDF
 15360                           postinc2	equ	0xFDE
 15361                           postdec2	equ	0xFDD
 15362                           plusw2	equ	0xFDB
 15363                           fsr2h	equ	0xFDA
 15364                           fsr2l	equ	0xFD9
 15365                           status	equ	0xFD8
 15366                           
 15367 ;; *************** function _delay_us *****************
 15368 ;; Defined at:
 15369 ;;		line 255 in file "Library/Types.c"
 15370 ;; Parameters:    Size  Location     Type
 15371 ;;  us              2    0[BANK0 ] unsigned short 
 15372 ;; Auto vars:     Size  Location     Type
 15373 ;;  u               4    2[BANK0 ] unsigned long 
 15374 ;; Return value:  Size  Location     Type
 15375 ;;                  1    wreg      void 
 15376 ;; Registers used:
 15377 ;;		wreg, status,2, status,0
 15378 ;; Tracked objects:
 15379 ;;		On entry : 0/0
 15380 ;;		On exit  : 0/0
 15381 ;;		Unchanged: 0/0
 15382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15383 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15384 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15386 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15387 ;;Total ram usage:        6 bytes
 15388 ;; Hardware stack levels used:    1
 15389 ;; Hardware stack levels required when called:    7
 15390 ;; This function calls:
 15391 ;;		Nothing
 15392 ;; This function is called by:
 15393 ;;		_MXK_BlockSwitchTo
 15394 ;;		_MXK_SwitchTo
 15395 ;; This function uses a non-reentrant model
 15396 ;;
 15397                           
 15398                           	psect	text83
 15399  0000'                    __ptext83:
 15400                           	opt stack 0
 15401  0000'                    _delay_us:
 15402                           	opt stack 21
 15403                           
 15404                           ;Types.c: 256: unsigned long u;
 15405                           ;Types.c: 257: while (us--) {
 15406                           
 15407                           ;incstack = 0
 15408  0000' D01C               	goto	u7320
 15409  0002'                    l11227:
 15410                           
 15411                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 15412  0002' 0E00               	movlw	0
 15413  0004' 0100               	movlb	0	; () banked
 15414  0006' 6F00'              	movwf	delay_us@u& (0+255),b
 15415  0008' 0E00               	movlw	0
 15416  000A' 6F00'              	movwf	(delay_us@u+1)& (0+255),b
 15417  000C' 0E00               	movlw	0
 15418  000E' 6F00'              	movwf	(delay_us@u+2)& (0+255),b
 15419  0010' 0E00               	movlw	0
 15420  0012' 6F00'              	movwf	(delay_us@u+3)& (0+255),b
 15421  0014'                    l11229:
 15422                           
 15423                           ; BSR set to: 0
 15424  0014' 0100               	movlb	0	; () banked
 15425  0016' 5100'              	movf	delay_us@u& (0+255),w,b
 15426  0018' 0100               	movlb	0	; () banked
 15427  001A' 1100'              	iorwf	(delay_us@u+1)& (0+255),w,b
 15428  001C' 0100               	movlb	0	; () banked
 15429  001E' 1100'              	iorwf	(delay_us@u+2)& (0+255),w,b
 15430  0020' 0100               	movlb	0	; () banked
 15431  0022' 1100'              	iorwf	(delay_us@u+3)& (0+255),w,b
 15432  0024' A4D8               	btfss	status,2,c
 15433  0026' D009               	goto	u7320
 15434                           
 15435                           ; BSR set to: 0
 15436                           
 15437                           ; BSR set to: 0
 15438  0028' F000               	nop		; ;# 
 15439  002A' 0E01               	movlw	1
 15440  002C' 0100               	movlb	0	; () banked
 15441  002E' 2700'              	addwf	delay_us@u& (0+255),f,b
 15442  0030' 0E00               	movlw	0
 15443  0032' 2300'              	addwfc	(delay_us@u+1)& (0+255),f,b
 15444  0034' 2300'              	addwfc	(delay_us@u+2)& (0+255),f,b
 15445  0036' 2300'              	addwfc	(delay_us@u+3)& (0+255),f,b
 15446  0038' D7ED               	goto	l11229
 15447  003A'                    u7320:
 15448                           
 15449                           ; BSR set to: 0
 15450                           
 15451                           ; BSR set to: 0
 15452  003A' 0100               	movlb	0	; () banked
 15453  003C' 0700'              	decf	delay_us@us& (0+255),f,b
 15454  003E' A0D8               	btfss	status,0,c
 15455  0040' 0700'              	decf	(delay_us@us+1)& (0+255),f,b
 15456  0042' 0100               	movlb	0	; () banked
 15457  0044' 2900'              	incf	delay_us@us& (0+255),w,b
 15458  0046' E1DD               	bnz	l11227
 15459  0048' 0100               	movlb	0	; () banked
 15460  004A' 2900'              	incf	(delay_us@us+1)& (0+255),w,b
 15461  004C' B4D8               	btfsc	status,2,c
 15462  004E' 0012               	return	
 15463  0050' D7D8               	goto	l832
 15464  0052'                    __end_of_delay_us:
 15465                           	opt stack 0
 15466                           tosu	equ	0xFFF
 15467                           tosh	equ	0xFFE
 15468                           tosl	equ	0xFFD
 15469                           pclath	equ	0xFFA
 15470                           tblptru	equ	0xFF8
 15471                           tblptrh	equ	0xFF7
 15472                           tblptrl	equ	0xFF6
 15473                           tablat	equ	0xFF5
 15474                           prodh	equ	0xFF4
 15475                           prodl	equ	0xFF3
 15476                           intcon	equ	0xFF2
 15477                           postinc0	equ	0xFEE
 15478                           wreg	equ	0xFE8
 15479                           indf1	equ	0xFE7
 15480                           postdec1	equ	0xFE5
 15481                           fsr1h	equ	0xFE2
 15482                           fsr1l	equ	0xFE1
 15483                           indf2	equ	0xFDF
 15484                           postinc2	equ	0xFDE
 15485                           postdec2	equ	0xFDD
 15486                           plusw2	equ	0xFDB
 15487                           fsr2h	equ	0xFDA
 15488                           fsr2l	equ	0xFD9
 15489                           status	equ	0xFD8
 15490                           
 15491 ;; *************** function _LCD_Init *****************
 15492 ;; Defined at:
 15493 ;;		line 172 in file "Library/LCD.c"
 15494 ;; Parameters:    Size  Location     Type
 15495 ;;		None
 15496 ;; Auto vars:     Size  Location     Type
 15497 ;;  i               2   55[BANK0 ] unsigned short 
 15498 ;; Return value:  Size  Location     Type
 15499 ;;                  1    wreg      void 
 15500 ;; Registers used:
 15501 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15502 ;; Tracked objects:
 15503 ;;		On entry : 0/0
 15504 ;;		On exit  : 0/0
 15505 ;;		Unchanged: 0/0
 15506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15508 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15509 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15510 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15511 ;;Total ram usage:        4 bytes
 15512 ;; Hardware stack levels used:    1
 15513 ;; Hardware stack levels required when called:   15
 15514 ;; This function calls:
 15515 ;;		_Configure_GPIOs
 15516 ;;		_LCD_Fill
 15517 ;;		_LCD_Write
 15518 ;;		_Set_Rotation
 15519 ;;		_delay_ms
 15520 ;; This function is called by:
 15521 ;;		_init
 15522 ;; This function uses a non-reentrant model
 15523 ;;
 15524                           
 15525                           	psect	text84
 15526  0000'                    __ptext84:
 15527                           	opt stack 0
 15528  0000'                    _LCD_Init:
 15529                           	opt stack 14
 15530                           
 15531                           ;LCD.c: 174: UINT16 i;
 15532                           ;LCD.c: 175: Configure_GPIOs();
 15533                           
 15534                           ; BSR set to: 0
 15535                           ;incstack = 0
 15536  0000' EC00' F000'        	call	_Configure_GPIOs	;wreg free
 15537                           
 15538                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
 15539  0004' 0E00               	movlw	0
 15540  0006' 0100               	movlb	0	; () banked
 15541  0008' 6F00'              	movwf	(LCD_Init@i+1)& (0+255),b
 15542  000A' 0E00               	movlw	0
 15543  000C' 6F00'              	movwf	LCD_Init@i& (0+255),b
 15544                           
 15545                           ; BSR set to: 0
 15546  000E' 0100               	movlb	0	; () banked
 15547  0010' 5100'              	movf	(LCD_Init@i+1)& (0+255),w,b
 15548  0012' E106               	bnz	u8090
 15549  0014' 0E59               	movlw	89
 15550  0016' 0100               	movlb	0	; () banked
 15551  0018' 5D00'              	subwf	LCD_Init@i& (0+255),w,b
 15552  001A' B0D8               	btfsc	status,0,c
 15553  001C' D08B               	goto	u8130
 15554  001E' D001               	goto	l85
 15555  0020'                    u8090:
 15556                           
 15557                           ; BSR set to: 0
 15558  0020' D089               	goto	u8130
 15559  0022'                    l85:
 15560                           
 15561                           ; BSR set to: 0
 15562                           ;LCD.c: 178: {
 15563                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
 15564                           
 15565                           ; BSR set to: 0
 15566  0022' 90D8               	bcf	status,0,c
 15567  0024' 0100               	movlb	0	; () banked
 15568  0026' 3500'              	rlcf	LCD_Init@i& (0+255),w,b
 15569  0028' 6EF6               	movwf	tblptrl,c
 15570  002A' 0100               	movlb	0	; () banked
 15571  002C' 3500'              	rlcf	(LCD_Init@i+1)& (0+255),w,b
 15572  002E' 6EF7               	movwf	tblptrh,c
 15573  0030' 0E00'              	movlw	low _InitList
 15574  0032' 26F6               	addwf	tblptrl,f,c
 15575  0034' 0E00'              	movlw	high _InitList
 15576  0036' 22F7               	addwfc	tblptrh,f,c
 15577  0038'                    	if	1	;There are 3 active tblptr bytes
 15578  0038' 6AF8               	clrf	tblptru,c
 15579  003A' 0E00'              	movlw	low (__mediumconst shr (0+16))
 15580  003C' 22F8               	addwfc	tblptru,f,c
 15581  003E'                    	endif
 15582  003E' 0009               	tblrd		*+
 15583  0040' 0E80               	movlw	128
 15584  0042' 18F5               	xorwf	tablat,w,c
 15585  0044' 0009               	tblrd		*+
 15586  0046' 10F5               	iorwf	tablat,w,c
 15587  0048' A4D8               	btfss	status,2,c
 15588  004A' D022               	goto	l87
 15589                           
 15590                           ; BSR set to: 0
 15591  004C' 0100               	movlb	0	; () banked
 15592  004E' 5100'              	movf	(LCD_Init@i+1)& (0+255),w,b
 15593  0050' E11F               	bnz	l12237
 15594  0052' 0E58               	movlw	88
 15595  0054' 0100               	movlb	0	; () banked
 15596  0056' 5D00'              	subwf	LCD_Init@i& (0+255),w,b
 15597  0058' B0D8               	btfsc	status,0,c
 15598  005A' D01A               	goto	l87
 15599                           
 15600                           ; BSR set to: 0
 15601                           ;LCD.c: 180: delay_ms(InitList[++i]);
 15602  005C' 0100               	movlb	0	; () banked
 15603  005E' 4B00'              	infsnz	LCD_Init@i& (0+255),f,b
 15604  0060' 2B00'              	incf	(LCD_Init@i+1)& (0+255),f,b
 15605  0062' 90D8               	bcf	status,0,c
 15606  0064' 0100               	movlb	0	; () banked
 15607  0066' 3500'              	rlcf	LCD_Init@i& (0+255),w,b
 15608  0068' 6EF6               	movwf	tblptrl,c
 15609  006A' 0100               	movlb	0	; () banked
 15610  006C' 3500'              	rlcf	(LCD_Init@i+1)& (0+255),w,b
 15611  006E' 6EF7               	movwf	tblptrh,c
 15612  0070' 0E00'              	movlw	low _InitList
 15613  0072' 26F6               	addwf	tblptrl,f,c
 15614  0074' 0E00'              	movlw	high _InitList
 15615  0076' 22F7               	addwfc	tblptrh,f,c
 15616  0078'                    	if	1	;There are 3 active tblptr bytes
 15617  0078' 6AF8               	clrf	tblptru,c
 15618  007A' 0E00'              	movlw	low (__mediumconst shr (0+16))
 15619  007C' 22F8               	addwfc	tblptru,f,c
 15620  007E'                    	endif
 15621  007E' 0009               	tblrd		*+
 15622  0080' CFF5 F000'         	movff	tablat,delay_ms@ms
 15623  0084' 000A               	tblrd		*-
 15624  0086' CFF5 F001'         	movff	tablat,delay_ms@ms+1
 15625  008A' EC00' F000'        	call	_delay_ms	;wreg free
 15626  008E' D04B               	goto	l90
 15627  0090'                    l87:
 15628  0090'                    l12237:
 15629                           
 15630                           ;LCD.c: 181: else
 15631                           ;LCD.c: 182: {
 15632                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
 15633  0090' 90D8               	bcf	status,0,c
 15634  0092' 0100               	movlb	0	; () banked
 15635  0094' 3500'              	rlcf	LCD_Init@i& (0+255),w,b
 15636  0096' 6EF6               	movwf	tblptrl,c
 15637  0098' 0100               	movlb	0	; () banked
 15638  009A' 3500'              	rlcf	(LCD_Init@i+1)& (0+255),w,b
 15639  009C' 6EF7               	movwf	tblptrh,c
 15640  009E' 0E00'              	movlw	low _InitList
 15641  00A0' 26F6               	addwf	tblptrl,f,c
 15642  00A2' 0E00'              	movlw	high _InitList
 15643  00A4' 22F7               	addwfc	tblptrh,f,c
 15644  00A6'                    	if	1	;There are 3 active tblptr bytes
 15645  00A6' 6AF8               	clrf	tblptru,c
 15646  00A8' 0E00'              	movlw	low (__mediumconst shr (0+16))
 15647  00AA' 22F8               	addwfc	tblptru,f,c
 15648  00AC'                    	endif
 15649  00AC' 0009               	tblrd		*+
 15650  00AE' 0E00               	movlw	0
 15651  00B0' 5EF5               	subwf	tablat,f,c
 15652  00B2' 0009               	tblrd		*+
 15653  00B4' 0E01               	movlw	1
 15654  00B6' 5AF5               	subwfb	tablat,f,c
 15655  00B8' A0D8               	btfss	status,0,c
 15656  00BA' D020               	goto	l89
 15657                           
 15658                           ; BSR set to: 0
 15659  00BC' 0E00               	movlw	0
 15660  00BE' 0100               	movlb	0	; () banked
 15661  00C0' 6F00'              	movwf	LCD_Write@mode& (0+255),b
 15662  00C2' 90D8               	bcf	status,0,c
 15663  00C4' 0100               	movlb	0	; () banked
 15664  00C6' 3500'              	rlcf	LCD_Init@i& (0+255),w,b
 15665  00C8' 6EF6               	movwf	tblptrl,c
 15666  00CA' 0100               	movlb	0	; () banked
 15667  00CC' 3500'              	rlcf	(LCD_Init@i+1)& (0+255),w,b
 15668  00CE' 6EF7               	movwf	tblptrh,c
 15669  00D0' 0E00'              	movlw	low _InitList
 15670  00D2' 26F6               	addwf	tblptrl,f,c
 15671  00D4' 0E00'              	movlw	high _InitList
 15672  00D6' 22F7               	addwfc	tblptrh,f,c
 15673  00D8'                    	if	1	;There are 3 active tblptr bytes
 15674  00D8' 6AF8               	clrf	tblptru,c
 15675  00DA' 0E00'              	movlw	low (__mediumconst shr (0+16))
 15676  00DC' 22F8               	addwfc	tblptru,f,c
 15677  00DE'                    	endif
 15678  00DE' 0009               	tblrd		*+
 15679  00E0' CFF5 F035'         	movff	tablat,??_LCD_Init
 15680  00E4' 0009               	tblrd		*+
 15681  00E6' CFF5 F036'         	movff	tablat,??_LCD_Init+1
 15682  00EA' C036' F035'        	movff	??_LCD_Init+1,??_LCD_Init
 15683  00EE' 0100               	movlb	0	; () banked
 15684  00F0' 6B00'              	clrf	(??_LCD_Init+1)& (0+255),b
 15685  00F2' 0100               	movlb	0	; () banked
 15686  00F4' 5100'              	movf	??_LCD_Init& (0+255),w,b
 15687  00F6' EC00' F000'        	call	_LCD_Write
 15688  00FA' D015               	goto	l90
 15689  00FC'                    l89:
 15690                           
 15691                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
 15692  00FC' 0E01               	movlw	1
 15693  00FE' 0100               	movlb	0	; () banked
 15694  0100' 6F00'              	movwf	LCD_Write@mode& (0+255),b
 15695  0102' 90D8               	bcf	status,0,c
 15696  0104' 0100               	movlb	0	; () banked
 15697  0106' 3500'              	rlcf	LCD_Init@i& (0+255),w,b
 15698  0108' 6EF6               	movwf	tblptrl,c
 15699  010A' 0100               	movlb	0	; () banked
 15700  010C' 3500'              	rlcf	(LCD_Init@i+1)& (0+255),w,b
 15701  010E' 6EF7               	movwf	tblptrh,c
 15702  0110' 0E00'              	movlw	low _InitList
 15703  0112' 26F6               	addwf	tblptrl,f,c
 15704  0114' 0E00'              	movlw	high _InitList
 15705  0116' 22F7               	addwfc	tblptrh,f,c
 15706  0118'                    	if	1	;There are 3 active tblptr bytes
 15707  0118' 6AF8               	clrf	tblptru,c
 15708  011A' 0E00'              	movlw	low (__mediumconst shr (0+16))
 15709  011C' 22F8               	addwfc	tblptru,f,c
 15710  011E'                    	endif
 15711  011E' 0008               	tblrd		*
 15712  0120' 50F5               	movf	tablat,w,c
 15713  0122' EC00' F000'        	call	_LCD_Write
 15714  0126'                    l90:
 15715  0126' 0100               	movlb	0	; () banked
 15716  0128' 4B00'              	infsnz	LCD_Init@i& (0+255),f,b
 15717  012A' 2B00'              	incf	(LCD_Init@i+1)& (0+255),f,b
 15718                           
 15719                           ; BSR set to: 0
 15720  012C' 0100               	movlb	0	; () banked
 15721  012E' 5100'              	movf	(LCD_Init@i+1)& (0+255),w,b
 15722  0130' E101               	bnz	l12247
 15723  0132' D770               	goto	L9
 15724  0134'                    u8130:
 15725  0134'                    l12247:
 15726                           
 15727                           ; BSR set to: 0
 15728                           ;LCD.c: 185: }
 15729                           ;LCD.c: 186: }
 15730                           ;LCD.c: 187: delay_ms(100);
 15731  0134' 0E00               	movlw	0
 15732  0136' 0100               	movlb	0	; () banked
 15733  0138' 6F00'              	movwf	(delay_ms@ms+1)& (0+255),b
 15734  013A' 0E64               	movlw	100
 15735  013C' 6F00'              	movwf	delay_ms@ms& (0+255),b
 15736  013E' EC00' F000'        	call	_delay_ms	;wreg free
 15737                           
 15738                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
 15739  0142' 0E00               	movlw	0
 15740  0144' 0100               	movlb	0	; () banked
 15741  0146' 6F00'              	movwf	LCD_Write@mode& (0+255),b
 15742  0148' 0E29               	movlw	41
 15743  014A' EC00' F000'        	call	_LCD_Write
 15744                           
 15745                           ;LCD.c: 189: Set_Rotation(1);
 15746  014E' 0E01               	movlw	1
 15747  0150' EC00' F000'        	call	_Set_Rotation
 15748                           
 15749                           ;LCD.c: 191: delay_ms(100);
 15750  0154' 0E00               	movlw	0
 15751  0156' 0100               	movlb	0	; () banked
 15752  0158' 6F00'              	movwf	(delay_ms@ms+1)& (0+255),b
 15753  015A' 0E64               	movlw	100
 15754  015C' 6F00'              	movwf	delay_ms@ms& (0+255),b
 15755  015E' EC00' F000'        	call	_delay_ms	;wreg free
 15756                           
 15757                           ;LCD.c: 192: LCD_Fill(0x0000);
 15758  0162' 0E00               	movlw	0
 15759  0164' 0100               	movlb	0	; () banked
 15760  0166' 6F00'              	movwf	(LCD_Fill@pColour+1)& (0+255),b
 15761  0168' 0E00               	movlw	0
 15762  016A' 6F00'              	movwf	LCD_Fill@pColour& (0+255),b
 15763  016C' EC00' F000'        	call	_LCD_Fill	;wreg free
 15764  0170' 0012               	return		;funcret
 15765  0172'                    __end_of_LCD_Init:
 15766                           	opt stack 0
 15767                           tosu	equ	0xFFF
 15768                           tosh	equ	0xFFE
 15769                           tosl	equ	0xFFD
 15770                           pclath	equ	0xFFA
 15771                           tblptru	equ	0xFF8
 15772                           tblptrh	equ	0xFF7
 15773                           tblptrl	equ	0xFF6
 15774                           tablat	equ	0xFF5
 15775                           prodh	equ	0xFF4
 15776                           prodl	equ	0xFF3
 15777                           intcon	equ	0xFF2
 15778                           postinc0	equ	0xFEE
 15779                           wreg	equ	0xFE8
 15780                           indf1	equ	0xFE7
 15781                           postdec1	equ	0xFE5
 15782                           fsr1h	equ	0xFE2
 15783                           fsr1l	equ	0xFE1
 15784                           indf2	equ	0xFDF
 15785                           postinc2	equ	0xFDE
 15786                           postdec2	equ	0xFDD
 15787                           plusw2	equ	0xFDB
 15788                           fsr2h	equ	0xFDA
 15789                           fsr2l	equ	0xFD9
 15790                           status	equ	0xFD8
 15791                           
 15792 ;; *************** function _Set_Rotation *****************
 15793 ;; Defined at:
 15794 ;;		line 248 in file "Library/LCD.c"
 15795 ;; Parameters:    Size  Location     Type
 15796 ;;  m               1    wreg     unsigned char 
 15797 ;; Auto vars:     Size  Location     Type
 15798 ;;  m               1    5[BANK0 ] unsigned char 
 15799 ;;  rotation        1    6[BANK0 ] unsigned char 
 15800 ;; Return value:  Size  Location     Type
 15801 ;;                  1    wreg      void 
 15802 ;; Registers used:
 15803 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15804 ;; Tracked objects:
 15805 ;;		On entry : 0/0
 15806 ;;		On exit  : 0/0
 15807 ;;		Unchanged: 0/0
 15808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15810 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15812 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15813 ;;Total ram usage:        2 bytes
 15814 ;; Hardware stack levels used:    1
 15815 ;; Hardware stack levels required when called:    9
 15816 ;; This function calls:
 15817 ;;		_LCD_Write
 15818 ;; This function is called by:
 15819 ;;		_LCD_Init
 15820 ;; This function uses a non-reentrant model
 15821 ;;
 15822                           
 15823                           	psect	text85
 15824  0000'                    __ptext85:
 15825                           	opt stack 0
 15826  0000'                    _Set_Rotation:
 15827                           	opt stack 19
 15828                           
 15829                           ;incstack = 0
 15830                           ;Set_Rotation@m stored from wreg
 15831  0000' 0100               	movlb	0	; () banked
 15832  0002' 6F00'              	movwf	Set_Rotation@m& (0+255),b
 15833                           
 15834                           ;LCD.c: 250: UINT8 rotation = 0x00;
 15835  0004' 0E00               	movlw	0
 15836  0006' 0100               	movlb	0	; () banked
 15837  0008' 6F00'              	movwf	Set_Rotation@rotation& (0+255),b
 15838                           
 15839                           ; BSR set to: 0
 15840                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
 15841  000A' 0E00               	movlw	0
 15842  000C' 0100               	movlb	0	; () banked
 15843  000E' 6F00'              	movwf	LCD_Write@mode& (0+255),b
 15844  0010' 0E36               	movlw	54
 15845  0012' EC00' F000'        	call	_LCD_Write
 15846                           
 15847                           ;LCD.c: 253: rotation = (m % 4);
 15848  0016' 0100               	movlb	0	; () banked
 15849  0018' 5100'              	movf	Set_Rotation@m& (0+255),w,b
 15850  001A' 0B03               	andlw	3
 15851  001C' 0100               	movlb	0	; () banked
 15852  001E' 6F00'              	movwf	Set_Rotation@rotation& (0+255),b
 15853                           
 15854                           ;LCD.c: 255: switch(rotation)
 15855  0020' D02C               	goto	l117
 15856  0022'                    
 15857                           ; BSR set to: 0
 15858                           ;LCD.c: 258: {
 15859                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
 15860                           
 15861                           ; BSR set to: 0
 15862  0022' 0E01               	movlw	1
 15863  0024' 0100               	movlb	0	; () banked
 15864  0026' 6F00'              	movwf	LCD_Write@mode& (0+255),b
 15865  0028' 0EC8               	movlw	200
 15866  002A' EC00' F000'        	call	_LCD_Write
 15867                           
 15868                           ;LCD.c: 260: w = 128;
 15869  002E' 0E80               	movlw	128
 15870  0030' 6E09'              	movwf	_w,c
 15871                           
 15872                           ;LCD.c: 261: l = 128;
 15873  0032' 0E80               	movlw	128
 15874  0034' 6E08'              	movwf	_l,c
 15875                           
 15876                           ;LCD.c: 262: break;
 15877  0036' 0012               	return	
 15878  0038'                    
 15879                           ;LCD.c: 265: {
 15880                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
 15881  0038' 0E01               	movlw	1
 15882  003A' 0100               	movlb	0	; () banked
 15883  003C' 6F00'              	movwf	LCD_Write@mode& (0+255),b
 15884  003E' 0EA8               	movlw	168
 15885  0040' EC00' F000'        	call	_LCD_Write
 15886                           
 15887                           ;LCD.c: 267: w = 128;
 15888  0044' 0E80               	movlw	128
 15889  0046' 6E09'              	movwf	_w,c
 15890                           
 15891                           ;LCD.c: 268: l = 128;
 15892  0048' 0E80               	movlw	128
 15893  004A' 6E08'              	movwf	_l,c
 15894                           
 15895                           ;LCD.c: 269: break;
 15896  004C' 0012               	return	
 15897  004E'                    
 15898                           ;LCD.c: 272: {
 15899                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
 15900  004E' 0E01               	movlw	1
 15901  0050' 0100               	movlb	0	; () banked
 15902  0052' 6F00'              	movwf	LCD_Write@mode& (0+255),b
 15903  0054' 0E08               	movlw	8
 15904  0056' EC00' F000'        	call	_LCD_Write
 15905                           
 15906                           ;LCD.c: 274: w = 128;
 15907  005A' 0E80               	movlw	128
 15908  005C' 6E09'              	movwf	_w,c
 15909                           
 15910                           ;LCD.c: 275: l = 128;
 15911  005E' 0E80               	movlw	128
 15912  0060' 6E08'              	movwf	_l,c
 15913                           
 15914                           ;LCD.c: 276: break;
 15915  0062' 0012               	return	
 15916  0064'                    
 15917                           ;LCD.c: 279: {
 15918                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
 15919  0064' 0E01               	movlw	1
 15920  0066' 0100               	movlb	0	; () banked
 15921  0068' 6F00'              	movwf	LCD_Write@mode& (0+255),b
 15922  006A' 0E68               	movlw	104
 15923  006C' EC00' F000'        	call	_LCD_Write
 15924                           
 15925                           ;LCD.c: 281: w = 128;
 15926  0070' 0E80               	movlw	128
 15927  0072' 6E09'              	movwf	_w,c
 15928                           
 15929                           ;LCD.c: 282: l = 128;
 15930  0074' 0E80               	movlw	128
 15931  0076' 6E08'              	movwf	_l,c
 15932                           
 15933                           ;LCD.c: 284: }
 15934                           ;LCD.c: 285: }
 15935                           
 15936                           ;LCD.c: 283: break;
 15937  0078' 0012               	return	
 15938  007A'                    l117:
 15939  007A' 0100               	movlb	0	; () banked
 15940  007C' 5100'              	movf	Set_Rotation@rotation& (0+255),w,b
 15941                           
 15942                           ; Switch size 1, requested type "space"
 15943                           ; Number of cases is 4, Range of values is 0 to 3
 15944                           ; switch strategies available:
 15945                           ; Name         Instructions Cycles
 15946                           ; simple_byte           13     7 (average)
 15947                           ;	Chosen strategy is simple_byte
 15948  007E' 0A00               	xorlw	0	; case 0
 15949  0080' B4D8               	btfsc	status,2,c
 15950  0082' D7CF               	goto	l118
 15951  0084' 0A01               	xorlw	1	; case 1
 15952  0086' B4D8               	btfsc	status,2,c
 15953  0088' D7D7               	goto	l120
 15954  008A' 0A03               	xorlw	3	; case 2
 15955  008C' B4D8               	btfsc	status,2,c
 15956  008E' D7DF               	goto	l121
 15957  0090' 0A01               	xorlw	1	; case 3
 15958  0092' A4D8               	btfss	status,2,c
 15959  0094' 0012               	return	
 15960  0096' D7E6               	goto	l122
 15961  0098'                    __end_of_Set_Rotation:
 15962                           	opt stack 0
 15963                           tosu	equ	0xFFF
 15964                           tosh	equ	0xFFE
 15965                           tosl	equ	0xFFD
 15966                           pclath	equ	0xFFA
 15967                           tblptru	equ	0xFF8
 15968                           tblptrh	equ	0xFF7
 15969                           tblptrl	equ	0xFF6
 15970                           tablat	equ	0xFF5
 15971                           prodh	equ	0xFF4
 15972                           prodl	equ	0xFF3
 15973                           intcon	equ	0xFF2
 15974                           postinc0	equ	0xFEE
 15975                           wreg	equ	0xFE8
 15976                           indf1	equ	0xFE7
 15977                           postdec1	equ	0xFE5
 15978                           fsr1h	equ	0xFE2
 15979                           fsr1l	equ	0xFE1
 15980                           indf2	equ	0xFDF
 15981                           postinc2	equ	0xFDE
 15982                           postdec2	equ	0xFDD
 15983                           plusw2	equ	0xFDB
 15984                           fsr2h	equ	0xFDA
 15985                           fsr2l	equ	0xFD9
 15986                           status	equ	0xFD8
 15987                           
 15988 ;; *************** function _LCD_Fill *****************
 15989 ;; Defined at:
 15990 ;;		line 287 in file "Library/LCD.c"
 15991 ;; Parameters:    Size  Location     Type
 15992 ;;  pColour         2    9[BANK0 ] unsigned short 
 15993 ;; Auto vars:     Size  Location     Type
 15994 ;;  j               1   12[BANK0 ] unsigned char 
 15995 ;;  i               1   11[BANK0 ] unsigned char 
 15996 ;; Return value:  Size  Location     Type
 15997 ;;                  1    wreg      void 
 15998 ;; Registers used:
 15999 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16000 ;; Tracked objects:
 16001 ;;		On entry : 0/0
 16002 ;;		On exit  : 0/0
 16003 ;;		Unchanged: 0/0
 16004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16005 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16006 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16008 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16009 ;;Total ram usage:        4 bytes
 16010 ;; Hardware stack levels used:    1
 16011 ;; Hardware stack levels required when called:   10
 16012 ;; This function calls:
 16013 ;;		_LCD_Word_Write
 16014 ;;		_Set_Addr_Window
 16015 ;; This function is called by:
 16016 ;;		_LCD_Init
 16017 ;; This function uses a non-reentrant model
 16018 ;;
 16019                           
 16020                           	psect	text86
 16021  0000'                    __ptext86:
 16022                           	opt stack 0
 16023  0000'                    _LCD_Fill:
 16024                           	opt stack 18
 16025                           
 16026                           ;LCD.c: 296: UINT8 i = 0x00;
 16027                           
 16028                           ;incstack = 0
 16029  0000' 0E00               	movlw	0
 16030  0002' 0100               	movlb	0	; () banked
 16031  0004' 6F00'              	movwf	LCD_Fill@i& (0+255),b
 16032                           
 16033                           ;LCD.c: 297: UINT8 j = 0x00;
 16034  0006' 0E00               	movlw	0
 16035  0008' 0100               	movlb	0	; () banked
 16036  000A' 6F00'              	movwf	LCD_Fill@j& (0+255),b
 16037                           
 16038                           ; BSR set to: 0
 16039                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
 16040  000C' 0E00               	movlw	0
 16041  000E' 0100               	movlb	0	; () banked
 16042  0010' 6F00'              	movwf	Set_Addr_Window@ys& (0+255),b
 16043  0012' 0409'              	decf	_w,w,c
 16044  0014' 0100               	movlb	0	; () banked
 16045  0016' 6F00'              	movwf	Set_Addr_Window@xe& (0+255),b
 16046  0018' 0408'              	decf	_l,w,c
 16047  001A' 0100               	movlb	0	; () banked
 16048  001C' 6F00'              	movwf	Set_Addr_Window@ye& (0+255),b
 16049  001E' 0E00               	movlw	0
 16050  0020' EC00' F000'        	call	_Set_Addr_Window
 16051                           
 16052                           ;LCD.c: 299: for (j = l; j > 0; j--)
 16053  0024' C008' F00C'        	movff	_l,LCD_Fill@j
 16054  0028'                    l11969:
 16055  0028' 0100               	movlb	0	; () banked
 16056  002A' 5100'              	movf	LCD_Fill@j& (0+255),w,b
 16057  002C' 0100               	movlb	0	; () banked
 16058  002E' B4D8               	btfsc	status,2,c
 16059  0030' 0012               	return	
 16060                           
 16061                           ; BSR set to: 0
 16062                           ;LCD.c: 300: for (i = w; i > 0; i--)
 16063                           
 16064                           ; BSR set to: 0
 16065  0032' C009' F00B'        	movff	_w,LCD_Fill@i
 16066  0036'                    l11973:
 16067                           
 16068                           ; BSR set to: 0
 16069  0036' 0100               	movlb	0	; () banked
 16070  0038' 5100'              	movf	LCD_Fill@i& (0+255),w,b
 16071  003A' 0100               	movlb	0	; () banked
 16072  003C' B4D8               	btfsc	status,2,c
 16073  003E' D009               	goto	u7840
 16074                           
 16075                           ; BSR set to: 0
 16076                           ;LCD.c: 301: LCD_Word_Write(pColour);
 16077                           
 16078                           ; BSR set to: 0
 16079                           
 16080                           ; BSR set to: 0
 16081  0040' C009' F005'        	movff	LCD_Fill@pColour,LCD_Word_Write@value
 16082  0044' C00A' F006'        	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
 16083  0048' EC00' F000'        	call	_LCD_Word_Write	;wreg free
 16084  004C' 0100               	movlb	0	; () banked
 16085  004E' 0700'              	decf	LCD_Fill@i& (0+255),f,b
 16086  0050' D7F2               	goto	l11973
 16087  0052'                    u7840:
 16088                           
 16089                           ; BSR set to: 0
 16090                           
 16091                           ; BSR set to: 0
 16092  0052' 0100               	movlb	0	; () banked
 16093  0054' 0700'              	decf	LCD_Fill@j& (0+255),f,b
 16094  0056' D7E8               	goto	l11969
 16095  0058'                    __end_of_LCD_Fill:
 16096                           	opt stack 0
 16097                           tosu	equ	0xFFF
 16098                           tosh	equ	0xFFE
 16099                           tosl	equ	0xFFD
 16100                           pclath	equ	0xFFA
 16101                           tblptru	equ	0xFF8
 16102                           tblptrh	equ	0xFF7
 16103                           tblptrl	equ	0xFF6
 16104                           tablat	equ	0xFF5
 16105                           prodh	equ	0xFF4
 16106                           prodl	equ	0xFF3
 16107                           intcon	equ	0xFF2
 16108                           postinc0	equ	0xFEE
 16109                           wreg	equ	0xFE8
 16110                           indf1	equ	0xFE7
 16111                           postdec1	equ	0xFE5
 16112                           fsr1h	equ	0xFE2
 16113                           fsr1l	equ	0xFE1
 16114                           indf2	equ	0xFDF
 16115                           postinc2	equ	0xFDE
 16116                           postdec2	equ	0xFDD
 16117                           plusw2	equ	0xFDB
 16118                           fsr2h	equ	0xFDA
 16119                           fsr2l	equ	0xFD9
 16120                           status	equ	0xFD8
 16121                           
 16122 ;; *************** function _Set_Addr_Window *****************
 16123 ;; Defined at:
 16124 ;;		line 214 in file "Library/LCD.c"
 16125 ;; Parameters:    Size  Location     Type
 16126 ;;  xs              1    wreg     unsigned char 
 16127 ;;  ys              1    5[BANK0 ] unsigned char 
 16128 ;;  xe              1    6[BANK0 ] unsigned char 
 16129 ;;  ye              1    7[BANK0 ] unsigned char 
 16130 ;; Auto vars:     Size  Location     Type
 16131 ;;  xs              1    8[BANK0 ] unsigned char 
 16132 ;; Return value:  Size  Location     Type
 16133 ;;                  1    wreg      void 
 16134 ;; Registers used:
 16135 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16136 ;; Tracked objects:
 16137 ;;		On entry : 0/0
 16138 ;;		On exit  : 0/0
 16139 ;;		Unchanged: 0/0
 16140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16141 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16142 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16144 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16145 ;;Total ram usage:        4 bytes
 16146 ;; Hardware stack levels used:    1
 16147 ;; Hardware stack levels required when called:    9
 16148 ;; This function calls:
 16149 ;;		_LCD_Write
 16150 ;; This function is called by:
 16151 ;;		_LCD_Fill
 16152 ;;		_LCD_FillRectangle
 16153 ;;		_LCD_DrawField
 16154 ;;		_RAM_Address_Set
 16155 ;;		_LCD_DrawPixel
 16156 ;; This function uses a non-reentrant model
 16157 ;;
 16158                           
 16159                           	psect	text87
 16160  0000'                    __ptext87:
 16161                           	opt stack 0
 16162  0000'                    _Set_Addr_Window:
 16163                           	opt stack 18
 16164                           
 16165                           ; BSR set to: 0
 16166                           ;incstack = 0
 16167                           ;Set_Addr_Window@xs stored from wreg
 16168  0000' 0100               	movlb	0	; () banked
 16169  0002' 6F00'              	movwf	Set_Addr_Window@xs& (0+255),b
 16170                           
 16171                           ;LCD.c: 216: ys+=2;
 16172  0004' 0E02               	movlw	2
 16173  0006' 0100               	movlb	0	; () banked
 16174  0008' 2700'              	addwf	Set_Addr_Window@ys& (0+255),f,b
 16175                           
 16176                           ;LCD.c: 217: ye+=2;
 16177  000A' 0E02               	movlw	2
 16178  000C' 0100               	movlb	0	; () banked
 16179  000E' 2700'              	addwf	Set_Addr_Window@ye& (0+255),f,b
 16180                           
 16181                           ;LCD.c: 218: xs+=3;
 16182  0010' 0E03               	movlw	3
 16183  0012' 0100               	movlb	0	; () banked
 16184  0014' 2700'              	addwf	Set_Addr_Window@xs& (0+255),f,b
 16185                           
 16186                           ;LCD.c: 219: xe+=3;
 16187  0016' 0E03               	movlw	3
 16188  0018' 0100               	movlb	0	; () banked
 16189  001A' 2700'              	addwf	Set_Addr_Window@xe& (0+255),f,b
 16190                           
 16191                           ; BSR set to: 0
 16192                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 16193  001C' 0E00               	movlw	0
 16194  001E' 0100               	movlb	0	; () banked
 16195  0020' 6F00'              	movwf	LCD_Write@mode& (0+255),b
 16196  0022' 0E2A               	movlw	42
 16197  0024' EC00' F000'        	call	_LCD_Write
 16198                           
 16199                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 16200  0028' 0E01               	movlw	1
 16201  002A' 0100               	movlb	0	; () banked
 16202  002C' 6F00'              	movwf	LCD_Write@mode& (0+255),b
 16203  002E' 0E00               	movlw	0
 16204  0030' EC00' F000'        	call	_LCD_Write
 16205                           
 16206                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 16207  0034' 0E01               	movlw	1
 16208  0036' 0100               	movlb	0	; () banked
 16209  0038' 6F00'              	movwf	LCD_Write@mode& (0+255),b
 16210  003A' 0100               	movlb	0	; () banked
 16211  003C' 5100'              	movf	Set_Addr_Window@xs& (0+255),w,b
 16212  003E' EC00' F000'        	call	_LCD_Write
 16213                           
 16214                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 16215  0042' 0E01               	movlw	1
 16216  0044' 0100               	movlb	0	; () banked
 16217  0046' 6F00'              	movwf	LCD_Write@mode& (0+255),b
 16218  0048' 0E00               	movlw	0
 16219  004A' EC00' F000'        	call	_LCD_Write
 16220                           
 16221                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 16222  004E' 0E01               	movlw	1
 16223  0050' 0100               	movlb	0	; () banked
 16224  0052' 6F00'              	movwf	LCD_Write@mode& (0+255),b
 16225  0054' 0100               	movlb	0	; () banked
 16226  0056' 5100'              	movf	Set_Addr_Window@xe& (0+255),w,b
 16227  0058' EC00' F000'        	call	_LCD_Write
 16228                           
 16229                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 16230  005C' 0E00               	movlw	0
 16231  005E' 0100               	movlb	0	; () banked
 16232  0060' 6F00'              	movwf	LCD_Write@mode& (0+255),b
 16233  0062' 0E2B               	movlw	43
 16234  0064' EC00' F000'        	call	_LCD_Write
 16235                           
 16236                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 16237  0068' 0E01               	movlw	1
 16238  006A' 0100               	movlb	0	; () banked
 16239  006C' 6F00'              	movwf	LCD_Write@mode& (0+255),b
 16240  006E' 0E00               	movlw	0
 16241  0070' EC00' F000'        	call	_LCD_Write
 16242                           
 16243                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 16244  0074' 0E01               	movlw	1
 16245  0076' 0100               	movlb	0	; () banked
 16246  0078' 6F00'              	movwf	LCD_Write@mode& (0+255),b
 16247  007A' 0100               	movlb	0	; () banked
 16248  007C' 5100'              	movf	Set_Addr_Window@ys& (0+255),w,b
 16249  007E' EC00' F000'        	call	_LCD_Write
 16250                           
 16251                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 16252  0082' 0E01               	movlw	1
 16253  0084' 0100               	movlb	0	; () banked
 16254  0086' 6F00'              	movwf	LCD_Write@mode& (0+255),b
 16255  0088' 0E00               	movlw	0
 16256  008A' EC00' F000'        	call	_LCD_Write
 16257                           
 16258                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 16259  008E' 0E01               	movlw	1
 16260  0090' 0100               	movlb	0	; () banked
 16261  0092' 6F00'              	movwf	LCD_Write@mode& (0+255),b
 16262  0094' 0100               	movlb	0	; () banked
 16263  0096' 5100'              	movf	Set_Addr_Window@ye& (0+255),w,b
 16264  0098' EC00' F000'        	call	_LCD_Write
 16265                           
 16266                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 16267  009C' 0E00               	movlw	0
 16268  009E' 0100               	movlb	0	; () banked
 16269  00A0' 6F00'              	movwf	LCD_Write@mode& (0+255),b
 16270  00A2' 0E2C               	movlw	44
 16271  00A4' EC00' F000'        	call	_LCD_Write
 16272  00A8' 0012               	return		;funcret
 16273  00AA'                    __end_of_Set_Addr_Window:
 16274                           	opt stack 0
 16275                           tosu	equ	0xFFF
 16276                           tosh	equ	0xFFE
 16277                           tosl	equ	0xFFD
 16278                           pclath	equ	0xFFA
 16279                           tblptru	equ	0xFF8
 16280                           tblptrh	equ	0xFF7
 16281                           tblptrl	equ	0xFF6
 16282                           tablat	equ	0xFF5
 16283                           prodh	equ	0xFF4
 16284                           prodl	equ	0xFF3
 16285                           intcon	equ	0xFF2
 16286                           postinc0	equ	0xFEE
 16287                           wreg	equ	0xFE8
 16288                           indf1	equ	0xFE7
 16289                           postdec1	equ	0xFE5
 16290                           fsr1h	equ	0xFE2
 16291                           fsr1l	equ	0xFE1
 16292                           indf2	equ	0xFDF
 16293                           postinc2	equ	0xFDE
 16294                           postdec2	equ	0xFDD
 16295                           plusw2	equ	0xFDB
 16296                           fsr2h	equ	0xFDA
 16297                           fsr2l	equ	0xFD9
 16298                           status	equ	0xFD8
 16299                           
 16300 ;; *************** function _LCD_Word_Write *****************
 16301 ;; Defined at:
 16302 ;;		line 198 in file "Library/LCD.c"
 16303 ;; Parameters:    Size  Location     Type
 16304 ;;  value           2    5[BANK0 ] unsigned short 
 16305 ;; Auto vars:     Size  Location     Type
 16306 ;;		None
 16307 ;; Return value:  Size  Location     Type
 16308 ;;                  1    wreg      void 
 16309 ;; Registers used:
 16310 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16311 ;; Tracked objects:
 16312 ;;		On entry : 0/0
 16313 ;;		On exit  : 0/0
 16314 ;;		Unchanged: 0/0
 16315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16316 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16319 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16320 ;;Total ram usage:        2 bytes
 16321 ;; Hardware stack levels used:    1
 16322 ;; Hardware stack levels required when called:    9
 16323 ;; This function calls:
 16324 ;;		_LCD_Write
 16325 ;; This function is called by:
 16326 ;;		_LCD_Fill
 16327 ;;		_LCD_FillRectangle
 16328 ;;		_LCD_DrawField
 16329 ;;		_LCD_DrawPixel
 16330 ;; This function uses a non-reentrant model
 16331 ;;
 16332                           
 16333                           	psect	text88
 16334  0000'                    __ptext88:
 16335                           	opt stack 0
 16336  0000'                    _LCD_Word_Write:
 16337                           	opt stack 18
 16338                           
 16339                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 16340                           
 16341                           ;incstack = 0
 16342  0000' 0E01               	movlw	1
 16343  0002' 0100               	movlb	0	; () banked
 16344  0004' 6F00'              	movwf	LCD_Write@mode& (0+255),b
 16345  0006' 0100               	movlb	0	; () banked
 16346  0008' 5100'              	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 16347  000A' EC00' F000'        	call	_LCD_Write
 16348                           
 16349                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 16350  000E' 0E01               	movlw	1
 16351  0010' 0100               	movlb	0	; () banked
 16352  0012' 6F00'              	movwf	LCD_Write@mode& (0+255),b
 16353  0014' 0100               	movlb	0	; () banked
 16354  0016' 5100'              	movf	LCD_Word_Write@value& (0+255),w,b
 16355  0018' EC00' F000'        	call	_LCD_Write
 16356  001C' 0012               	return		;funcret
 16357  001E'                    __end_of_LCD_Word_Write:
 16358                           	opt stack 0
 16359                           tosu	equ	0xFFF
 16360                           tosh	equ	0xFFE
 16361                           tosl	equ	0xFFD
 16362                           pclath	equ	0xFFA
 16363                           tblptru	equ	0xFF8
 16364                           tblptrh	equ	0xFF7
 16365                           tblptrl	equ	0xFF6
 16366                           tablat	equ	0xFF5
 16367                           prodh	equ	0xFF4
 16368                           prodl	equ	0xFF3
 16369                           intcon	equ	0xFF2
 16370                           postinc0	equ	0xFEE
 16371                           wreg	equ	0xFE8
 16372                           indf1	equ	0xFE7
 16373                           postdec1	equ	0xFE5
 16374                           fsr1h	equ	0xFE2
 16375                           fsr1l	equ	0xFE1
 16376                           indf2	equ	0xFDF
 16377                           postinc2	equ	0xFDE
 16378                           postdec2	equ	0xFDD
 16379                           plusw2	equ	0xFDB
 16380                           fsr2h	equ	0xFDA
 16381                           fsr2l	equ	0xFD9
 16382                           status	equ	0xFD8
 16383                           
 16384 ;; *************** function _LCD_Write *****************
 16385 ;; Defined at:
 16386 ;;		line 67 in file "Library/LCD.c"
 16387 ;; Parameters:    Size  Location     Type
 16388 ;;  value           1    wreg     unsigned char 
 16389 ;;  mode            1    3[BANK0 ] enum E6761
 16390 ;; Auto vars:     Size  Location     Type
 16391 ;;  value           1    4[BANK0 ] unsigned char 
 16392 ;; Return value:  Size  Location     Type
 16393 ;;                  1    wreg      void 
 16394 ;; Registers used:
 16395 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16396 ;; Tracked objects:
 16397 ;;		On entry : 0/0
 16398 ;;		On exit  : 0/0
 16399 ;;		Unchanged: 0/0
 16400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16401 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16402 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16404 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16405 ;;Total ram usage:        2 bytes
 16406 ;; Hardware stack levels used:    1
 16407 ;; Hardware stack levels required when called:    8
 16408 ;; This function calls:
 16409 ;;		_Mode_Set
 16410 ;;		_SPI_Send
 16411 ;; This function is called by:
 16412 ;;		_LCD_Init
 16413 ;;		_LCD_Word_Write
 16414 ;;		_Set_Addr_Window
 16415 ;;		_Set_Rotation
 16416 ;;		_LCD_WriteCMD
 16417 ;;		_LCD_WriteData
 16418 ;;		_LCD_Data_Write
 16419 ;;		_LCD_Data_Write_4k
 16420 ;;		_Invert_Display
 16421 ;; This function uses a non-reentrant model
 16422 ;;
 16423                           
 16424                           	psect	text89
 16425  0000'                    __ptext89:
 16426                           	opt stack 0
 16427  0000'                    _LCD_Write:
 16428                           	opt stack 18
 16429                           
 16430                           ;incstack = 0
 16431                           ;LCD_Write@value stored from wreg
 16432  0000' 0100               	movlb	0	; () banked
 16433  0002' 6F00'              	movwf	LCD_Write@value& (0+255),b
 16434                           
 16435                           ;LCD.c: 89: Mode_Set(mode);
 16436  0004' 0100               	movlb	0	; () banked
 16437  0006' 5100'              	movf	LCD_Write@mode& (0+255),w,b
 16438  0008' EC00' F000'        	call	_Mode_Set
 16439                           
 16440                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 16441  000C' 0E00'              	movlw	low _SPI2
 16442  000E' 0100               	movlb	0	; () banked
 16443  0010' 6F00'              	movwf	SPI_Send@pInput& (0+255),b
 16444  0012' 0E00'              	movlw	high _SPI2
 16445  0014' 0100               	movlb	0	; () banked
 16446  0016' 6F00'              	movwf	(SPI_Send@pInput+1)& (0+255),b
 16447  0018' C004' F002'        	movff	LCD_Write@value,SPI_Send@pData
 16448  001C' EC00' F000'        	call	_SPI_Send	;wreg free
 16449  0020' 0012               	return		;funcret
 16450  0022'                    __end_of_LCD_Write:
 16451                           	opt stack 0
 16452                           tosu	equ	0xFFF
 16453                           tosh	equ	0xFFE
 16454                           tosl	equ	0xFFD
 16455                           pclath	equ	0xFFA
 16456                           tblptru	equ	0xFF8
 16457                           tblptrh	equ	0xFF7
 16458                           tblptrl	equ	0xFF6
 16459                           tablat	equ	0xFF5
 16460                           prodh	equ	0xFF4
 16461                           prodl	equ	0xFF3
 16462                           intcon	equ	0xFF2
 16463                           postinc0	equ	0xFEE
 16464                           wreg	equ	0xFE8
 16465                           indf1	equ	0xFE7
 16466                           postdec1	equ	0xFE5
 16467                           fsr1h	equ	0xFE2
 16468                           fsr1l	equ	0xFE1
 16469                           indf2	equ	0xFDF
 16470                           postinc2	equ	0xFDE
 16471                           postdec2	equ	0xFDD
 16472                           plusw2	equ	0xFDB
 16473                           fsr2h	equ	0xFDA
 16474                           fsr2l	equ	0xFD9
 16475                           status	equ	0xFD8
 16476                           
 16477 ;; *************** function _SPI_Send *****************
 16478 ;; Defined at:
 16479 ;;		line 226 in file "Library/SPI.c"
 16480 ;; Parameters:    Size  Location     Type
 16481 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 16482 ;;		 -> SPI1(11), SPI2(11), 
 16483 ;;  pData           1    2[BANK0 ] unsigned char 
 16484 ;; Auto vars:     Size  Location     Type
 16485 ;;		None
 16486 ;; Return value:  Size  Location     Type
 16487 ;;                  1    wreg      unsigned char 
 16488 ;; Registers used:
 16489 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16490 ;; Tracked objects:
 16491 ;;		On entry : 0/0
 16492 ;;		On exit  : 0/0
 16493 ;;		Unchanged: 0/0
 16494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16495 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16498 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16499 ;;Total ram usage:        3 bytes
 16500 ;; Hardware stack levels used:    1
 16501 ;; Hardware stack levels required when called:    7
 16502 ;; This function calls:
 16503 ;;		Nothing
 16504 ;; This function is called by:
 16505 ;;		_LCD_Write
 16506 ;;		_OutSeg
 16507 ;; This function uses a non-reentrant model
 16508 ;;
 16509                           
 16510                           	psect	text90
 16511  0000'                    __ptext90:
 16512                           	opt stack 0
 16513  0000'                    _SPI_Send:
 16514                           	opt stack 18
 16515                           
 16516                           ;SPI.c: 253: switch (pInput->mChannel)
 16517                           
 16518                           ;incstack = 0
 16519  0000' D026               	goto	l678
 16520  0002'                    
 16521                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 16522  0002' C04D' FFD9         	movff	_PortC+4,fsr2l
 16523  0006' C04E' FFDA         	movff	_PortC+5,fsr2h
 16524  000A' 0100               	movlb	0	; () banked
 16525  000C' 94DF               	bcf	indf2,2,c
 16526                           
 16527                           ; BSR set to: 0
 16528                           ;SPI.c: 257: SSP1BUF = pData;
 16529  000E' C002' FFC9         	movff	SPI_Send@pData,4041	;volatile
 16530  0012'                    
 16531                           ; BSR set to: 0
 16532  0012' A0C7               	btfss	4039,0,c	;volatile
 16533  0014' D7FE               	goto	l681
 16534                           
 16535                           ;SPI.c: 259: pData = SSP1BUF;
 16536  0016' CFC9 F002'         	movff	4041,SPI_Send@pData	;volatile
 16537                           
 16538                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 16539  001A' C04D' FFD9         	movff	_PortC+4,fsr2l
 16540  001E' C04E' FFDA         	movff	_PortC+5,fsr2h
 16541  0022' 0100               	movlb	0	; () banked
 16542  0024' 84DF               	bsf	indf2,2,c
 16543                           
 16544                           ; BSR set to: 0
 16545                           ;SPI.c: 261: return pData;
 16546                           ;	Return value of _SPI_Send is never used
 16547  0026' 0012               	return	
 16548  0028'                    
 16549                           ; BSR set to: 0
 16550                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 16551                           
 16552                           ; BSR set to: 0
 16553  0028' C043' FFD9         	movff	_PortD+4,fsr2l
 16554  002C' C044' FFDA         	movff	_PortD+5,fsr2h
 16555  0030' 0100               	movlb	0	; () banked
 16556  0032' 9EDF               	bcf	indf2,7,c
 16557                           
 16558                           ; BSR set to: 0
 16559                           ;SPI.c: 264: SSP2BUF = pData;
 16560  0034' C002' FF6F         	movff	SPI_Send@pData,3951	;volatile
 16561  0038'                    
 16562                           ; BSR set to: 0
 16563  0038' A06D               	btfss	3949,0,c	;volatile
 16564  003A' D7FE               	goto	l686
 16565                           
 16566                           ;SPI.c: 266: pData = SSP2BUF;
 16567  003C' CF6F F002'         	movff	3951,SPI_Send@pData	;volatile
 16568                           
 16569                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 16570  0040' C043' FFD9         	movff	_PortD+4,fsr2l
 16571  0044' C044' FFDA         	movff	_PortD+5,fsr2h
 16572  0048' 0100               	movlb	0	; () banked
 16573  004A' 8EDF               	bsf	indf2,7,c
 16574                           
 16575                           ; BSR set to: 0
 16576                           ;SPI.c: 269: };
 16577                           
 16578                           ; BSR set to: 0
 16579                           ;SPI.c: 268: return pData;
 16580                           ;	Return value of _SPI_Send is never used
 16581  004C' 0012               	return	
 16582  004E'                    l678:
 16583                           
 16584                           ; BSR set to: 0
 16585  004E' 0100               	movlb	0	; () banked
 16586  0050' EE20 F002          	lfsr	2,2
 16587  0054' 5100'              	movf	SPI_Send@pInput& (0+255),w,b
 16588  0056' 26D9               	addwf	fsr2l,f,c
 16589  0058' 5100'              	movf	(SPI_Send@pInput+1)& (0+255),w,b
 16590  005A' 22DA               	addwfc	fsr2h,f,c
 16591  005C' 50DF               	movf	indf2,w,c
 16592                           
 16593                           ; Switch size 1, requested type "space"
 16594                           ; Number of cases is 2, Range of values is 0 to 1
 16595                           ; switch strategies available:
 16596                           ; Name         Instructions Cycles
 16597                           ; simple_byte            7     4 (average)
 16598                           ;	Chosen strategy is simple_byte
 16599  005E' 0A00               	xorlw	0	; case 0
 16600  0060' B4D8               	btfsc	status,2,c
 16601  0062' D7CF               	goto	l679
 16602  0064' 0A01               	xorlw	1	; case 1
 16603  0066' A4D8               	btfss	status,2,c
 16604  0068' 0012               	return	
 16605  006A' D7DE               	goto	l684
 16606  006C'                    __end_of_SPI_Send:
 16607                           	opt stack 0
 16608                           tosu	equ	0xFFF
 16609                           tosh	equ	0xFFE
 16610                           tosl	equ	0xFFD
 16611                           pclath	equ	0xFFA
 16612                           tblptru	equ	0xFF8
 16613                           tblptrh	equ	0xFF7
 16614                           tblptrl	equ	0xFF6
 16615                           tablat	equ	0xFF5
 16616                           prodh	equ	0xFF4
 16617                           prodl	equ	0xFF3
 16618                           intcon	equ	0xFF2
 16619                           postinc0	equ	0xFEE
 16620                           wreg	equ	0xFE8
 16621                           indf1	equ	0xFE7
 16622                           postdec1	equ	0xFE5
 16623                           fsr1h	equ	0xFE2
 16624                           fsr1l	equ	0xFE1
 16625                           indf2	equ	0xFDF
 16626                           postinc2	equ	0xFDE
 16627                           postdec2	equ	0xFDD
 16628                           plusw2	equ	0xFDB
 16629                           fsr2h	equ	0xFDA
 16630                           fsr2l	equ	0xFD9
 16631                           status	equ	0xFD8
 16632                           
 16633 ;; *************** function _Mode_Set *****************
 16634 ;; Defined at:
 16635 ;;		line 40 in file "Library/LCD.c"
 16636 ;; Parameters:    Size  Location     Type
 16637 ;;  pMode           1    wreg     enum E6761
 16638 ;; Auto vars:     Size  Location     Type
 16639 ;;  pMode           1    0[BANK0 ] enum E6761
 16640 ;; Return value:  Size  Location     Type
 16641 ;;                  1    wreg      void 
 16642 ;; Registers used:
 16643 ;;		wreg
 16644 ;; Tracked objects:
 16645 ;;		On entry : 0/0
 16646 ;;		On exit  : 0/0
 16647 ;;		Unchanged: 0/0
 16648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16650 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16652 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16653 ;;Total ram usage:        1 bytes
 16654 ;; Hardware stack levels used:    1
 16655 ;; Hardware stack levels required when called:    7
 16656 ;; This function calls:
 16657 ;;		Nothing
 16658 ;; This function is called by:
 16659 ;;		_LCD_Write
 16660 ;; This function uses a non-reentrant model
 16661 ;;
 16662                           
 16663                           	psect	text91
 16664  0000'                    __ptext91:
 16665                           	opt stack 0
 16666  0000'                    _Mode_Set:
 16667                           	opt stack 18
 16668                           
 16669                           ; BSR set to: 0
 16670                           ;incstack = 0
 16671                           ;Mode_Set@pMode stored from wreg
 16672  0000' 0100               	movlb	0	; () banked
 16673  0002' 6F00'              	movwf	Mode_Set@pMode& (0+255),b
 16674                           
 16675                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 16676  0004' 0100               	movlb	0	; () banked
 16677  0006' B100'              	btfsc	Mode_Set@pMode& (0+255),0,b
 16678  0008' D002               	bra	u6935
 16679  000A' 9E85               	bcf	3973,7,c	;volatile
 16680  000C' D001               	bra	u6936
 16681  000E'                    u6935:
 16682  000E' 8E85               	bsf	3973,7,c	;volatile
 16683  0010'                    u6936:
 16684  0010' 0012               	return		;funcret
 16685  0012'                    __end_of_Mode_Set:
 16686                           	opt stack 0
 16687                           tosu	equ	0xFFF
 16688                           tosh	equ	0xFFE
 16689                           tosl	equ	0xFFD
 16690                           pclath	equ	0xFFA
 16691                           tblptru	equ	0xFF8
 16692                           tblptrh	equ	0xFF7
 16693                           tblptrl	equ	0xFF6
 16694                           tablat	equ	0xFF5
 16695                           prodh	equ	0xFF4
 16696                           prodl	equ	0xFF3
 16697                           intcon	equ	0xFF2
 16698                           postinc0	equ	0xFEE
 16699                           wreg	equ	0xFE8
 16700                           indf1	equ	0xFE7
 16701                           postdec1	equ	0xFE5
 16702                           fsr1h	equ	0xFE2
 16703                           fsr1l	equ	0xFE1
 16704                           indf2	equ	0xFDF
 16705                           postinc2	equ	0xFDE
 16706                           postdec2	equ	0xFDD
 16707                           plusw2	equ	0xFDB
 16708                           fsr2h	equ	0xFDA
 16709                           fsr2l	equ	0xFD9
 16710                           status	equ	0xFD8
 16711                           
 16712 ;; *************** function _Configure_GPIOs *****************
 16713 ;; Defined at:
 16714 ;;		line 46 in file "Library/LCD.c"
 16715 ;; Parameters:    Size  Location     Type
 16716 ;;		None
 16717 ;; Auto vars:     Size  Location     Type
 16718 ;;		None
 16719 ;; Return value:  Size  Location     Type
 16720 ;;                  1    wreg      void 
 16721 ;; Registers used:
 16722 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16723 ;; Tracked objects:
 16724 ;;		On entry : 0/0
 16725 ;;		On exit  : 0/0
 16726 ;;		Unchanged: 0/0
 16727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16730 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16731 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16732 ;;Total ram usage:        0 bytes
 16733 ;; Hardware stack levels used:    1
 16734 ;; Hardware stack levels required when called:   14
 16735 ;; This function calls:
 16736 ;;		_LCD_Reset
 16737 ;;		_Port_SetPinType
 16738 ;;		_SPI_Init
 16739 ;;		_SPI_MaxSpeed
 16740 ;; This function is called by:
 16741 ;;		_LCD_Init
 16742 ;; This function uses a non-reentrant model
 16743 ;;
 16744                           
 16745                           	psect	text92
 16746  0000'                    __ptext92:
 16747                           	opt stack 0
 16748  0000'                    _Configure_GPIOs:
 16749                           	opt stack 14
 16750                           
 16751                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
 16752                           
 16753                           ;incstack = 0
 16754  0000' 0E00'              	movlw	low _PortF
 16755  0002' 0100               	movlb	0	; () banked
 16756  0004' 6F00'              	movwf	Port_SetPinType@pInput& (0+255),b
 16757  0006' 0E00'              	movlw	high _PortF
 16758  0008' 0100               	movlb	0	; () banked
 16759  000A' 6F00'              	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16760  000C' 0E07               	movlw	7
 16761  000E' 0100               	movlb	0	; () banked
 16762  0010' 6F00'              	movwf	Port_SetPinType@pPin& (0+255),b
 16763  0012' 0E03               	movlw	3
 16764  0014' 0100               	movlb	0	; () banked
 16765  0016' 6F00'              	movwf	Port_SetPinType@pType& (0+255),b
 16766  0018' EC00' F000'        	call	_Port_SetPinType	;wreg free
 16767                           
 16768                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
 16769  001C' 0E00'              	movlw	low _PortF
 16770  001E' 0100               	movlb	0	; () banked
 16771  0020' 6F00'              	movwf	Port_SetPinType@pInput& (0+255),b
 16772  0022' 0E00'              	movlw	high _PortF
 16773  0024' 0100               	movlb	0	; () banked
 16774  0026' 6F00'              	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16775  0028' 0E06               	movlw	6
 16776  002A' 0100               	movlb	0	; () banked
 16777  002C' 6F00'              	movwf	Port_SetPinType@pPin& (0+255),b
 16778  002E' 0E03               	movlw	3
 16779  0030' 0100               	movlb	0	; () banked
 16780  0032' 6F00'              	movwf	Port_SetPinType@pType& (0+255),b
 16781  0034' EC00' F000'        	call	_Port_SetPinType	;wreg free
 16782                           
 16783                           ;LCD.c: 55: LCD_Reset();
 16784  0038' EC00' F000'        	call	_LCD_Reset	;wreg free
 16785                           
 16786                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
 16787  003C' 0EC0               	movlw	192
 16788  003E' 0100               	movlb	0	; () banked
 16789  0040' 6F00'              	movwf	SPI_Init@pClock& (0+255),b
 16790  0042' 0EC6               	movlw	198
 16791  0044' 6F00'              	movwf	(SPI_Init@pClock+1)& (0+255),b
 16792  0046' 0E2D               	movlw	45
 16793  0048' 6F00'              	movwf	(SPI_Init@pClock+2)& (0+255),b
 16794  004A' 0E00               	movlw	0
 16795  004C' 6F00'              	movwf	(SPI_Init@pClock+3)& (0+255),b
 16796  004E' 0E01               	movlw	1
 16797  0050' 0100               	movlb	0	; () banked
 16798  0052' 6F00'              	movwf	SPI_Init@pChannel& (0+255),b
 16799  0054' 0E01               	movlw	1
 16800  0056' 0100               	movlb	0	; () banked
 16801  0058' 6F00'              	movwf	SPI_Init@pMode& (0+255),b
 16802  005A' EC00' F000'        	call	_SPI_Init	;wreg free
 16803                           
 16804                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
 16805  005E' 0E00'              	movlw	low _SPI2
 16806  0060' 0100               	movlb	0	; () banked
 16807  0062' 6F00'              	movwf	SPI_MaxSpeed@pInput& (0+255),b
 16808  0064' 0E00'              	movlw	high _SPI2
 16809  0066' 0100               	movlb	0	; () banked
 16810  0068' 6F00'              	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
 16811  006A' EC00' F000'        	call	_SPI_MaxSpeed	;wreg free
 16812  006E' 0012               	return		;funcret
 16813  0070'                    __end_of_Configure_GPIOs:
 16814                           	opt stack 0
 16815                           tosu	equ	0xFFF
 16816                           tosh	equ	0xFFE
 16817                           tosl	equ	0xFFD
 16818                           pclath	equ	0xFFA
 16819                           tblptru	equ	0xFF8
 16820                           tblptrh	equ	0xFF7
 16821                           tblptrl	equ	0xFF6
 16822                           tablat	equ	0xFF5
 16823                           prodh	equ	0xFF4
 16824                           prodl	equ	0xFF3
 16825                           intcon	equ	0xFF2
 16826                           postinc0	equ	0xFEE
 16827                           wreg	equ	0xFE8
 16828                           indf1	equ	0xFE7
 16829                           postdec1	equ	0xFE5
 16830                           fsr1h	equ	0xFE2
 16831                           fsr1l	equ	0xFE1
 16832                           indf2	equ	0xFDF
 16833                           postinc2	equ	0xFDE
 16834                           postdec2	equ	0xFDD
 16835                           plusw2	equ	0xFDB
 16836                           fsr2h	equ	0xFDA
 16837                           fsr2l	equ	0xFD9
 16838                           status	equ	0xFD8
 16839                           
 16840 ;; *************** function _SPI_MaxSpeed *****************
 16841 ;; Defined at:
 16842 ;;		line 201 in file "Library/SPI.c"
 16843 ;; Parameters:    Size  Location     Type
 16844 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 16845 ;;		 -> SPI2(11), 
 16846 ;; Auto vars:     Size  Location     Type
 16847 ;;		None
 16848 ;; Return value:  Size  Location     Type
 16849 ;;                  1    wreg      void 
 16850 ;; Registers used:
 16851 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16852 ;; Tracked objects:
 16853 ;;		On entry : 0/0
 16854 ;;		On exit  : 0/0
 16855 ;;		Unchanged: 0/0
 16856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16857 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16858 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16860 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16861 ;;Total ram usage:        2 bytes
 16862 ;; Hardware stack levels used:    1
 16863 ;; Hardware stack levels required when called:    9
 16864 ;; This function calls:
 16865 ;;		_Byte_SetBit
 16866 ;;		_Byte_SetQuad
 16867 ;; This function is called by:
 16868 ;;		_Configure_GPIOs
 16869 ;; This function uses a non-reentrant model
 16870 ;;
 16871                           
 16872                           	psect	text93
 16873  0000'                    __ptext93:
 16874                           	opt stack 0
 16875  0000'                    _SPI_MaxSpeed:
 16876                           	opt stack 18
 16877                           
 16878                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 16879                           
 16880                           ;incstack = 0
 16881  0000' 0100               	movlb	0	; () banked
 16882  0002' EE20 F006          	lfsr	2,6
 16883  0006' 5100'              	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 16884  0008' 26D9               	addwf	fsr2l,f,c
 16885  000A' 5100'              	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 16886  000C' 22DA               	addwfc	fsr2h,f,c
 16887  000E' CFDE F000'         	movff	postinc2,Byte_SetBit@pInput
 16888  0012' CFDD F001'         	movff	postdec2,Byte_SetBit@pInput+1
 16889  0016' 0E05               	movlw	5
 16890  0018' 0100               	movlb	0	; () banked
 16891  001A' 6F00'              	movwf	Byte_SetBit@pBit& (0+255),b
 16892  001C' 0E00               	movlw	0
 16893  001E' 0100               	movlb	0	; () banked
 16894  0020' 6F00'              	movwf	Byte_SetBit@pValue& (0+255),b
 16895  0022' EC00' F000'        	call	_Byte_SetBit	;wreg free
 16896                           
 16897                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
 16898  0026' 0100               	movlb	0	; () banked
 16899  0028' EE20 F006          	lfsr	2,6
 16900  002C' 5100'              	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 16901  002E' 26D9               	addwf	fsr2l,f,c
 16902  0030' 5100'              	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 16903  0032' 22DA               	addwfc	fsr2h,f,c
 16904  0034' CFDE F00B'         	movff	postinc2,Byte_SetQuad@pInput
 16905  0038' CFDD F00C'         	movff	postdec2,Byte_SetQuad@pInput+1
 16906  003C' 0E00               	movlw	0
 16907  003E' 0100               	movlb	0	; () banked
 16908  0040' 6F00'              	movwf	Byte_SetQuad@pQuad& (0+255),b
 16909  0042' 0E00               	movlw	0
 16910  0044' 0100               	movlb	0	; () banked
 16911  0046' 6F00'              	movwf	Byte_SetQuad@pValue& (0+255),b
 16912  0048' EC00' F000'        	call	_Byte_SetQuad	;wreg free
 16913                           
 16914                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 16915  004C' 0100               	movlb	0	; () banked
 16916  004E' EE20 F006          	lfsr	2,6
 16917  0052' 5100'              	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 16918  0054' 26D9               	addwf	fsr2l,f,c
 16919  0056' 5100'              	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 16920  0058' 22DA               	addwfc	fsr2h,f,c
 16921  005A' CFDE F000'         	movff	postinc2,Byte_SetBit@pInput
 16922  005E' CFDD F001'         	movff	postdec2,Byte_SetBit@pInput+1
 16923  0062' 0E05               	movlw	5
 16924  0064' 0100               	movlb	0	; () banked
 16925  0066' 6F00'              	movwf	Byte_SetBit@pBit& (0+255),b
 16926  0068' 0E01               	movlw	1
 16927  006A' 0100               	movlb	0	; () banked
 16928  006C' 6F00'              	movwf	Byte_SetBit@pValue& (0+255),b
 16929  006E' EC00' F000'        	call	_Byte_SetBit	;wreg free
 16930  0072' 0012               	return		;funcret
 16931  0074'                    __end_of_SPI_MaxSpeed:
 16932                           	opt stack 0
 16933                           tosu	equ	0xFFF
 16934                           tosh	equ	0xFFE
 16935                           tosl	equ	0xFFD
 16936                           pclath	equ	0xFFA
 16937                           tblptru	equ	0xFF8
 16938                           tblptrh	equ	0xFF7
 16939                           tblptrl	equ	0xFF6
 16940                           tablat	equ	0xFF5
 16941                           prodh	equ	0xFF4
 16942                           prodl	equ	0xFF3
 16943                           intcon	equ	0xFF2
 16944                           postinc0	equ	0xFEE
 16945                           wreg	equ	0xFE8
 16946                           indf1	equ	0xFE7
 16947                           postdec1	equ	0xFE5
 16948                           fsr1h	equ	0xFE2
 16949                           fsr1l	equ	0xFE1
 16950                           indf2	equ	0xFDF
 16951                           postinc2	equ	0xFDE
 16952                           postdec2	equ	0xFDD
 16953                           plusw2	equ	0xFDB
 16954                           fsr2h	equ	0xFDA
 16955                           fsr2l	equ	0xFD9
 16956                           status	equ	0xFD8
 16957                           
 16958 ;; *************** function _LCD_Reset *****************
 16959 ;; Defined at:
 16960 ;;		line 95 in file "Library/LCD.c"
 16961 ;; Parameters:    Size  Location     Type
 16962 ;;		None
 16963 ;; Auto vars:     Size  Location     Type
 16964 ;;		None
 16965 ;; Return value:  Size  Location     Type
 16966 ;;                  1    wreg      void 
 16967 ;; Registers used:
 16968 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16969 ;; Tracked objects:
 16970 ;;		On entry : 0/0
 16971 ;;		On exit  : 0/0
 16972 ;;		Unchanged: 0/0
 16973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16977 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16978 ;;Total ram usage:        0 bytes
 16979 ;; Hardware stack levels used:    1
 16980 ;; Hardware stack levels required when called:   13
 16981 ;; This function calls:
 16982 ;;		_LED_Toggle
 16983 ;;		_Reset_High
 16984 ;;		_Reset_Low
 16985 ;;		_delay_ms
 16986 ;; This function is called by:
 16987 ;;		_Configure_GPIOs
 16988 ;; This function uses a non-reentrant model
 16989 ;;
 16990                           
 16991                           	psect	text94
 16992  0000'                    __ptext94:
 16993                           	opt stack 0
 16994  0000'                    _LCD_Reset:
 16995                           	opt stack 14
 16996                           
 16997                           ;LCD.c: 97: Reset_High();
 16998                           
 16999                           ;incstack = 0
 17000  0000' EC00' F000'        	call	_Reset_High	;wreg free
 17001                           
 17002                           ;LCD.c: 98: LED_Toggle(eLED2);
 17003  0004' 0E01               	movlw	1
 17004  0006' EC00' F000'        	call	_LED_Toggle
 17005                           
 17006                           ;LCD.c: 99: delay_ms(0x80);
 17007  000A' 0E00               	movlw	0
 17008  000C' 0100               	movlb	0	; () banked
 17009  000E' 6F00'              	movwf	(delay_ms@ms+1)& (0+255),b
 17010  0010' 0E80               	movlw	128
 17011  0012' 6F00'              	movwf	delay_ms@ms& (0+255),b
 17012  0014' EC00' F000'        	call	_delay_ms	;wreg free
 17013                           
 17014                           ;LCD.c: 100: LED_Toggle(eLED2);
 17015  0018' 0E01               	movlw	1
 17016  001A' EC00' F000'        	call	_LED_Toggle
 17017                           
 17018                           ;LCD.c: 101: Reset_Low();
 17019  001E' EC00' F000'        	call	_Reset_Low	;wreg free
 17020                           
 17021                           ;LCD.c: 102: delay_ms(0x80);
 17022  0022' 0E00               	movlw	0
 17023  0024' 0100               	movlb	0	; () banked
 17024  0026' 6F00'              	movwf	(delay_ms@ms+1)& (0+255),b
 17025  0028' 0E80               	movlw	128
 17026  002A' 6F00'              	movwf	delay_ms@ms& (0+255),b
 17027  002C' EC00' F000'        	call	_delay_ms	;wreg free
 17028                           
 17029                           ;LCD.c: 103: LED_Toggle(eLED2);
 17030  0030' 0E01               	movlw	1
 17031  0032' EC00' F000'        	call	_LED_Toggle
 17032                           
 17033                           ;LCD.c: 104: Reset_High();
 17034  0036' EC00' F000'        	call	_Reset_High	;wreg free
 17035                           
 17036                           ;LCD.c: 105: delay_ms(0x80);
 17037  003A' 0E00               	movlw	0
 17038  003C' 0100               	movlb	0	; () banked
 17039  003E' 6F00'              	movwf	(delay_ms@ms+1)& (0+255),b
 17040  0040' 0E80               	movlw	128
 17041  0042' 6F00'              	movwf	delay_ms@ms& (0+255),b
 17042  0044' EC00' F000'        	call	_delay_ms	;wreg free
 17043                           
 17044                           ;LCD.c: 106: LED_Toggle(eLED2);
 17045  0048' 0E01               	movlw	1
 17046  004A' EC00' F000'        	call	_LED_Toggle
 17047  004E' 0012               	return		;funcret
 17048  0050'                    __end_of_LCD_Reset:
 17049                           	opt stack 0
 17050                           tosu	equ	0xFFF
 17051                           tosh	equ	0xFFE
 17052                           tosl	equ	0xFFD
 17053                           pclath	equ	0xFFA
 17054                           tblptru	equ	0xFF8
 17055                           tblptrh	equ	0xFF7
 17056                           tblptrl	equ	0xFF6
 17057                           tablat	equ	0xFF5
 17058                           prodh	equ	0xFF4
 17059                           prodl	equ	0xFF3
 17060                           intcon	equ	0xFF2
 17061                           postinc0	equ	0xFEE
 17062                           wreg	equ	0xFE8
 17063                           indf1	equ	0xFE7
 17064                           postdec1	equ	0xFE5
 17065                           fsr1h	equ	0xFE2
 17066                           fsr1l	equ	0xFE1
 17067                           indf2	equ	0xFDF
 17068                           postinc2	equ	0xFDE
 17069                           postdec2	equ	0xFDD
 17070                           plusw2	equ	0xFDB
 17071                           fsr2h	equ	0xFDA
 17072                           fsr2l	equ	0xFD9
 17073                           status	equ	0xFD8
 17074                           
 17075 ;; *************** function _delay_ms *****************
 17076 ;; Defined at:
 17077 ;;		line 240 in file "Library/Types.c"
 17078 ;; Parameters:    Size  Location     Type
 17079 ;;  ms              2    0[BANK0 ] unsigned short 
 17080 ;; Auto vars:     Size  Location     Type
 17081 ;;  u               4    2[BANK0 ] volatile unsigned long 
 17082 ;; Return value:  Size  Location     Type
 17083 ;;                  1    wreg      void 
 17084 ;; Registers used:
 17085 ;;		wreg, status,2, status,0
 17086 ;; Tracked objects:
 17087 ;;		On entry : 0/0
 17088 ;;		On exit  : 0/0
 17089 ;;		Unchanged: 0/0
 17090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17091 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17092 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17094 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17095 ;;Total ram usage:        6 bytes
 17096 ;; Hardware stack levels used:    1
 17097 ;; Hardware stack levels required when called:    7
 17098 ;; This function calls:
 17099 ;;		Nothing
 17100 ;; This function is called by:
 17101 ;;		_LCD_Reset
 17102 ;;		_LCD_Init
 17103 ;;		_MXK_Init
 17104 ;;		_init
 17105 ;; This function uses a non-reentrant model
 17106 ;;
 17107                           
 17108                           	psect	text95
 17109  0000'                    __ptext95:
 17110                           	opt stack 0
 17111  0000'                    _delay_ms:
 17112                           	opt stack 22
 17113                           
 17114                           ;Types.c: 242: volatile unsigned long u;
 17115                           ;Types.c: 243: while (ms--)
 17116                           
 17117                           ;incstack = 0
 17118  0000' D01F               	goto	u7200
 17119  0002'                    l11123:
 17120                           
 17121                           ;Types.c: 244: {
 17122                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 17123  0002' 0E00               	movlw	0
 17124  0004' 0100               	movlb	0	; () banked
 17125  0006' 6F00'              	movwf	delay_ms@u& (0+255),b	;volatile
 17126  0008' 0E00               	movlw	0
 17127  000A' 6F00'              	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 17128  000C' 0E00               	movlw	0
 17129  000E' 6F00'              	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 17130  0010' 0E00               	movlw	0
 17131  0012' 6F00'              	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 17132  0014'                    l11125:
 17133                           
 17134                           ; BSR set to: 0
 17135  0014' 0100               	movlb	0	; () banked
 17136  0016' 5100'              	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 17137  0018' 0100               	movlb	0	; () banked
 17138  001A' 1100'              	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 17139  001C' E111               	bnz	l11131
 17140  001E' 0EB0               	movlw	176
 17141  0020' 0100               	movlb	0	; () banked
 17142  0022' 5D00'              	subwf	delay_ms@u& (0+255),w,b	;volatile
 17143  0024' 0E04               	movlw	4
 17144  0026' 0100               	movlb	0	; () banked
 17145  0028' 5900'              	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 17146  002A' B0D8               	btfsc	status,0,c
 17147  002C' D009               	goto	u7200
 17148                           
 17149                           ; BSR set to: 0
 17150                           
 17151                           ; BSR set to: 0
 17152  002E' F000               	nop		; ;# 
 17153  0030' 0E01               	movlw	1
 17154  0032' 0100               	movlb	0	; () banked
 17155  0034' 2700'              	addwf	delay_ms@u& (0+255),f,b	;volatile
 17156  0036' 0E00               	movlw	0
 17157  0038' 2300'              	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 17158  003A' 2300'              	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 17159  003C' 2300'              	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 17160  003E' D7EA               	goto	l11125
 17161  0040'                    u7200:
 17162  0040'                    l11131:
 17163  0040' 0100               	movlb	0	; () banked
 17164  0042' 0700'              	decf	delay_ms@ms& (0+255),f,b
 17165  0044' A0D8               	btfss	status,0,c
 17166  0046' 0700'              	decf	(delay_ms@ms+1)& (0+255),f,b
 17167  0048' 0100               	movlb	0	; () banked
 17168  004A' 2900'              	incf	delay_ms@ms& (0+255),w,b
 17169  004C' E1DA               	bnz	l11123
 17170  004E' 0100               	movlb	0	; () banked
 17171  0050' 2900'              	incf	(delay_ms@ms+1)& (0+255),w,b
 17172  0052' A4D8               	btfss	status,2,c
 17173  0054' D7D6               	goto	l824
 17174                           
 17175                           ; BSR set to: 0
 17176                           ;Types.c: 251: }
 17177                           ;Types.c: 252: }
 17178                           ;Types.c: 253: u = 0x8008;
 17179                           
 17180                           ; BSR set to: 0
 17181  0056' 0E08               	movlw	8
 17182  0058' 0100               	movlb	0	; () banked
 17183  005A' 6F00'              	movwf	delay_ms@u& (0+255),b	;volatile
 17184  005C' 0E80               	movlw	128
 17185  005E' 6F00'              	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 17186  0060' 0E00               	movlw	0
 17187  0062' 6F00'              	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 17188  0064' 0E00               	movlw	0
 17189  0066' 6F00'              	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 17190                           
 17191                           ; BSR set to: 0
 17192  0068' 0012               	return		;funcret
 17193  006A'                    __end_of_delay_ms:
 17194                           	opt stack 0
 17195                           tosu	equ	0xFFF
 17196                           tosh	equ	0xFFE
 17197                           tosl	equ	0xFFD
 17198                           pclath	equ	0xFFA
 17199                           tblptru	equ	0xFF8
 17200                           tblptrh	equ	0xFF7
 17201                           tblptrl	equ	0xFF6
 17202                           tablat	equ	0xFF5
 17203                           prodh	equ	0xFF4
 17204                           prodl	equ	0xFF3
 17205                           intcon	equ	0xFF2
 17206                           postinc0	equ	0xFEE
 17207                           wreg	equ	0xFE8
 17208                           indf1	equ	0xFE7
 17209                           postdec1	equ	0xFE5
 17210                           fsr1h	equ	0xFE2
 17211                           fsr1l	equ	0xFE1
 17212                           indf2	equ	0xFDF
 17213                           postinc2	equ	0xFDE
 17214                           postdec2	equ	0xFDD
 17215                           plusw2	equ	0xFDB
 17216                           fsr2h	equ	0xFDA
 17217                           fsr2l	equ	0xFD9
 17218                           status	equ	0xFD8
 17219                           
 17220 ;; *************** function _Reset_Low *****************
 17221 ;; Defined at:
 17222 ;;		line 32 in file "Library/LCD.c"
 17223 ;; Parameters:    Size  Location     Type
 17224 ;;		None
 17225 ;; Auto vars:     Size  Location     Type
 17226 ;;		None
 17227 ;; Return value:  Size  Location     Type
 17228 ;;                  1    wreg      void 
 17229 ;; Registers used:
 17230 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17231 ;; Tracked objects:
 17232 ;;		On entry : 0/0
 17233 ;;		On exit  : 0/0
 17234 ;;		Unchanged: 0/0
 17235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17237 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17239 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17240 ;;Total ram usage:        0 bytes
 17241 ;; Hardware stack levels used:    1
 17242 ;; Hardware stack levels required when called:   11
 17243 ;; This function calls:
 17244 ;;		_Port_SetPin
 17245 ;; This function is called by:
 17246 ;;		_LCD_Reset
 17247 ;; This function uses a non-reentrant model
 17248 ;;
 17249                           
 17250                           	psect	text96
 17251  0000'                    __ptext96:
 17252                           	opt stack 0
 17253  0000'                    _Reset_Low:
 17254                           	opt stack 15
 17255                           
 17256                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
 17257                           
 17258                           ; BSR set to: 0
 17259                           ;incstack = 0
 17260  0000' 0E00'              	movlw	low _PortF
 17261  0002' 0100               	movlb	0	; () banked
 17262  0004' 6F00'              	movwf	Port_SetPin@pInput& (0+255),b
 17263  0006' 0E00'              	movlw	high _PortF
 17264  0008' 0100               	movlb	0	; () banked
 17265  000A' 6F00'              	movwf	(Port_SetPin@pInput+1)& (0+255),b
 17266  000C' 0E06               	movlw	6
 17267  000E' 0100               	movlb	0	; () banked
 17268  0010' 6F00'              	movwf	Port_SetPin@pPin& (0+255),b
 17269  0012' 0E01               	movlw	1
 17270  0014' 0100               	movlb	0	; () banked
 17271  0016' 6F00'              	movwf	Port_SetPin@pValue& (0+255),b
 17272  0018' EC00' F000'        	call	_Port_SetPin	;wreg free
 17273  001C' 0012               	return		;funcret
 17274  001E'                    __end_of_Reset_Low:
 17275                           	opt stack 0
 17276                           tosu	equ	0xFFF
 17277                           tosh	equ	0xFFE
 17278                           tosl	equ	0xFFD
 17279                           pclath	equ	0xFFA
 17280                           tblptru	equ	0xFF8
 17281                           tblptrh	equ	0xFF7
 17282                           tblptrl	equ	0xFF6
 17283                           tablat	equ	0xFF5
 17284                           prodh	equ	0xFF4
 17285                           prodl	equ	0xFF3
 17286                           intcon	equ	0xFF2
 17287                           postinc0	equ	0xFEE
 17288                           wreg	equ	0xFE8
 17289                           indf1	equ	0xFE7
 17290                           postdec1	equ	0xFE5
 17291                           fsr1h	equ	0xFE2
 17292                           fsr1l	equ	0xFE1
 17293                           indf2	equ	0xFDF
 17294                           postinc2	equ	0xFDE
 17295                           postdec2	equ	0xFDD
 17296                           plusw2	equ	0xFDB
 17297                           fsr2h	equ	0xFDA
 17298                           fsr2l	equ	0xFD9
 17299                           status	equ	0xFD8
 17300                           
 17301 ;; *************** function _Reset_High *****************
 17302 ;; Defined at:
 17303 ;;		line 36 in file "Library/LCD.c"
 17304 ;; Parameters:    Size  Location     Type
 17305 ;;		None
 17306 ;; Auto vars:     Size  Location     Type
 17307 ;;		None
 17308 ;; Return value:  Size  Location     Type
 17309 ;;                  1    wreg      void 
 17310 ;; Registers used:
 17311 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17312 ;; Tracked objects:
 17313 ;;		On entry : 0/0
 17314 ;;		On exit  : 0/0
 17315 ;;		Unchanged: 0/0
 17316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17320 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17321 ;;Total ram usage:        0 bytes
 17322 ;; Hardware stack levels used:    1
 17323 ;; Hardware stack levels required when called:   11
 17324 ;; This function calls:
 17325 ;;		_Port_SetPin
 17326 ;; This function is called by:
 17327 ;;		_LCD_Reset
 17328 ;; This function uses a non-reentrant model
 17329 ;;
 17330                           
 17331                           	psect	text97
 17332  0000'                    __ptext97:
 17333                           	opt stack 0
 17334  0000'                    _Reset_High:
 17335                           	opt stack 15
 17336                           
 17337                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
 17338                           
 17339                           ;incstack = 0
 17340  0000' 0E00'              	movlw	low _PortF
 17341  0002' 0100               	movlb	0	; () banked
 17342  0004' 6F00'              	movwf	Port_SetPin@pInput& (0+255),b
 17343  0006' 0E00'              	movlw	high _PortF
 17344  0008' 0100               	movlb	0	; () banked
 17345  000A' 6F00'              	movwf	(Port_SetPin@pInput+1)& (0+255),b
 17346  000C' 0E06               	movlw	6
 17347  000E' 0100               	movlb	0	; () banked
 17348  0010' 6F00'              	movwf	Port_SetPin@pPin& (0+255),b
 17349  0012' 0E00               	movlw	0
 17350  0014' 0100               	movlb	0	; () banked
 17351  0016' 6F00'              	movwf	Port_SetPin@pValue& (0+255),b
 17352  0018' EC00' F000'        	call	_Port_SetPin	;wreg free
 17353  001C' 0012               	return		;funcret
 17354  001E'                    __end_of_Reset_High:
 17355                           	opt stack 0
 17356                           tosu	equ	0xFFF
 17357                           tosh	equ	0xFFE
 17358                           tosl	equ	0xFFD
 17359                           pclath	equ	0xFFA
 17360                           tblptru	equ	0xFF8
 17361                           tblptrh	equ	0xFF7
 17362                           tblptrl	equ	0xFF6
 17363                           tablat	equ	0xFF5
 17364                           prodh	equ	0xFF4
 17365                           prodl	equ	0xFF3
 17366                           intcon	equ	0xFF2
 17367                           postinc0	equ	0xFEE
 17368                           wreg	equ	0xFE8
 17369                           indf1	equ	0xFE7
 17370                           postdec1	equ	0xFE5
 17371                           fsr1h	equ	0xFE2
 17372                           fsr1l	equ	0xFE1
 17373                           indf2	equ	0xFDF
 17374                           postinc2	equ	0xFDE
 17375                           postdec2	equ	0xFDD
 17376                           plusw2	equ	0xFDB
 17377                           fsr2h	equ	0xFDA
 17378                           fsr2l	equ	0xFD9
 17379                           status	equ	0xFD8
 17380                           
 17381 ;; *************** function _LED_Toggle *****************
 17382 ;; Defined at:
 17383 ;;		line 50 in file "Library/LED.c"
 17384 ;; Parameters:    Size  Location     Type
 17385 ;;  pLED            1    wreg     enum E6739
 17386 ;; Auto vars:     Size  Location     Type
 17387 ;;  pLED            1   24[BANK0 ] enum E6739
 17388 ;; Return value:  Size  Location     Type
 17389 ;;                  1    wreg      void 
 17390 ;; Registers used:
 17391 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17392 ;; Tracked objects:
 17393 ;;		On entry : 0/0
 17394 ;;		On exit  : 0/0
 17395 ;;		Unchanged: 0/0
 17396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17398 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17400 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17401 ;;Total ram usage:        1 bytes
 17402 ;; Hardware stack levels used:    1
 17403 ;; Hardware stack levels required when called:   12
 17404 ;; This function calls:
 17405 ;;		_Port_TogglePin
 17406 ;; This function is called by:
 17407 ;;		_LCD_Reset
 17408 ;;		_Event_DIPSwitch
 17409 ;;		_Event_TestButton
 17410 ;;		_Event_ADCSequenceComplete
 17411 ;;		_Event_HMI_DIPSwitch
 17412 ;;		_Event_HMI_LeftButton
 17413 ;;		_Event_HMI_RightButton
 17414 ;;		_Event_HMI_UpButton
 17415 ;;		_Event_HMI_DownButton
 17416 ;; This function uses a non-reentrant model
 17417 ;;
 17418                           
 17419                           	psect	text98
 17420  0000'                    __ptext98:
 17421                           	opt stack 0
 17422  0000'                    _LED_Toggle:
 17423                           	opt stack 14
 17424                           
 17425                           ;incstack = 0
 17426                           ;LED_Toggle@pLED stored from wreg
 17427  0000' 0100               	movlb	0	; () banked
 17428  0002' 6F00'              	movwf	LED_Toggle@pLED& (0+255),b
 17429                           
 17430                           ;LED.c: 52: switch (pLED)
 17431  0004' D018               	goto	l234
 17432  0006'                    
 17433                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 17434  0006' 0E00'              	movlw	low _PortC
 17435  0008' 0100               	movlb	0	; () banked
 17436  000A' 6F00'              	movwf	Port_TogglePin@pInput& (0+255),b
 17437  000C' 0E00'              	movlw	high _PortC
 17438  000E' 0100               	movlb	0	; () banked
 17439  0010' 6F00'              	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 17440  0012' 0E00               	movlw	0
 17441  0014' 0100               	movlb	0	; () banked
 17442  0016' 6F00'              	movwf	Port_TogglePin@pPin& (0+255),b
 17443  0018' EC00' F000'        	call	_Port_TogglePin	;wreg free
 17444                           
 17445                           ;LED.c: 56: break;
 17446  001C' 0012               	return	
 17447  001E'                    
 17448                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 17449  001E' 0E00'              	movlw	low _PortC
 17450  0020' 0100               	movlb	0	; () banked
 17451  0022' 6F00'              	movwf	Port_TogglePin@pInput& (0+255),b
 17452  0024' 0E00'              	movlw	high _PortC
 17453  0026' 0100               	movlb	0	; () banked
 17454  0028' 6F00'              	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 17455  002A' 0E01               	movlw	1
 17456  002C' 0100               	movlb	0	; () banked
 17457  002E' 6F00'              	movwf	Port_TogglePin@pPin& (0+255),b
 17458  0030' EC00' F000'        	call	_Port_TogglePin	;wreg free
 17459                           
 17460                           ;LED.c: 60: }
 17461                           
 17462                           ;LED.c: 59: break;
 17463  0034' 0012               	return	
 17464  0036'                    l234:
 17465  0036' 0100               	movlb	0	; () banked
 17466  0038' 5100'              	movf	LED_Toggle@pLED& (0+255),w,b
 17467                           
 17468                           ; Switch size 1, requested type "space"
 17469                           ; Number of cases is 2, Range of values is 0 to 1
 17470                           ; switch strategies available:
 17471                           ; Name         Instructions Cycles
 17472                           ; simple_byte            7     4 (average)
 17473                           ;	Chosen strategy is simple_byte
 17474  003A' 0A00               	xorlw	0	; case 0
 17475  003C' B4D8               	btfsc	status,2,c
 17476  003E' D7E3               	goto	l235
 17477  0040' 0A01               	xorlw	1	; case 1
 17478  0042' A4D8               	btfss	status,2,c
 17479  0044' 0012               	return	
 17480  0046' D7EB               	goto	l237
 17481  0048'                    __end_of_LED_Toggle:
 17482                           	opt stack 0
 17483                           tosu	equ	0xFFF
 17484                           tosh	equ	0xFFE
 17485                           tosl	equ	0xFFD
 17486                           pclath	equ	0xFFA
 17487                           tblptru	equ	0xFF8
 17488                           tblptrh	equ	0xFF7
 17489                           tblptrl	equ	0xFF6
 17490                           tablat	equ	0xFF5
 17491                           prodh	equ	0xFF4
 17492                           prodl	equ	0xFF3
 17493                           intcon	equ	0xFF2
 17494                           postinc0	equ	0xFEE
 17495                           wreg	equ	0xFE8
 17496                           indf1	equ	0xFE7
 17497                           postdec1	equ	0xFE5
 17498                           fsr1h	equ	0xFE2
 17499                           fsr1l	equ	0xFE1
 17500                           indf2	equ	0xFDF
 17501                           postinc2	equ	0xFDE
 17502                           postdec2	equ	0xFDD
 17503                           plusw2	equ	0xFDB
 17504                           fsr2h	equ	0xFDA
 17505                           fsr2l	equ	0xFD9
 17506                           status	equ	0xFD8
 17507                           
 17508 ;; *************** function _Port_TogglePin *****************
 17509 ;; Defined at:
 17510 ;;		line 278 in file "Library/Port.c"
 17511 ;; Parameters:    Size  Location     Type
 17512 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 17513 ;;		 -> PortC(10), 
 17514 ;;  pPin            1   22[BANK0 ] enum E6750
 17515 ;; Auto vars:     Size  Location     Type
 17516 ;;  Value           1   23[BANK0 ] unsigned char 
 17517 ;; Return value:  Size  Location     Type
 17518 ;;                  1    wreg      void 
 17519 ;; Registers used:
 17520 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17521 ;; Tracked objects:
 17522 ;;		On entry : 0/0
 17523 ;;		On exit  : 0/0
 17524 ;;		Unchanged: 0/0
 17525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17526 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17527 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17529 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17530 ;;Total ram usage:        4 bytes
 17531 ;; Hardware stack levels used:    1
 17532 ;; Hardware stack levels required when called:   11
 17533 ;; This function calls:
 17534 ;;		_Port_GetPin
 17535 ;;		_Port_SetPin
 17536 ;; This function is called by:
 17537 ;;		_LED_Toggle
 17538 ;; This function uses a non-reentrant model
 17539 ;;
 17540                           
 17541                           	psect	text99
 17542  0000'                    __ptext99:
 17543                           	opt stack 0
 17544  0000'                    _Port_TogglePin:
 17545                           	opt stack 14
 17546                           
 17547                           ;Port.c: 280: UINT8 Value;
 17548                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 17549                           
 17550                           ;incstack = 0
 17551  0000' C014' F000'        	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 17552  0004' C015' F001'        	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 17553  0008' C016' F002'        	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 17554  000C' EC00' F000'        	call	_Port_GetPin	;wreg free
 17555  0010' 0100               	movlb	0	; () banked
 17556  0012' 6F00'              	movwf	Port_TogglePin@Value& (0+255),b
 17557                           
 17558                           ; BSR set to: 0
 17559                           ;Port.c: 282: Value ^= 0x01;
 17560  0014' 0E01               	movlw	1
 17561  0016' 0100               	movlb	0	; () banked
 17562  0018' 1B00'              	xorwf	Port_TogglePin@Value& (0+255),f,b
 17563                           
 17564                           ; BSR set to: 0
 17565                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 17566  001A' C014' F00F'        	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 17567  001E' C015' F010'        	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 17568  0022' C016' F011'        	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 17569  0026' C017' F012'        	movff	Port_TogglePin@Value,Port_SetPin@pValue
 17570  002A' EC00' F000'        	call	_Port_SetPin	;wreg free
 17571  002E' 0012               	return		;funcret
 17572  0030'                    __end_of_Port_TogglePin:
 17573                           	opt stack 0
 17574                           tosu	equ	0xFFF
 17575                           tosh	equ	0xFFE
 17576                           tosl	equ	0xFFD
 17577                           pclath	equ	0xFFA
 17578                           tblptru	equ	0xFF8
 17579                           tblptrh	equ	0xFF7
 17580                           tblptrl	equ	0xFF6
 17581                           tablat	equ	0xFF5
 17582                           prodh	equ	0xFF4
 17583                           prodl	equ	0xFF3
 17584                           intcon	equ	0xFF2
 17585                           postinc0	equ	0xFEE
 17586                           wreg	equ	0xFE8
 17587                           indf1	equ	0xFE7
 17588                           postdec1	equ	0xFE5
 17589                           fsr1h	equ	0xFE2
 17590                           fsr1l	equ	0xFE1
 17591                           indf2	equ	0xFDF
 17592                           postinc2	equ	0xFDE
 17593                           postdec2	equ	0xFDD
 17594                           plusw2	equ	0xFDB
 17595                           fsr2h	equ	0xFDA
 17596                           fsr2l	equ	0xFD9
 17597                           status	equ	0xFD8
 17598                           
 17599 ;; *************** function _Port_SetPin *****************
 17600 ;; Defined at:
 17601 ;;		line 247 in file "Library/Port.c"
 17602 ;; Parameters:    Size  Location     Type
 17603 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 17604 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 17605 ;;  pPin            1   17[BANK0 ] enum E6750
 17606 ;;  pValue          1   18[BANK0 ] unsigned char 
 17607 ;; Auto vars:     Size  Location     Type
 17608 ;;  Type            1   19[BANK0 ] enum E6795
 17609 ;; Return value:  Size  Location     Type
 17610 ;;                  1    wreg      void 
 17611 ;; Registers used:
 17612 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17613 ;; Tracked objects:
 17614 ;;		On entry : 0/0
 17615 ;;		On exit  : 0/0
 17616 ;;		Unchanged: 0/0
 17617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17618 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17619 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17621 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17622 ;;Total ram usage:        5 bytes
 17623 ;; Hardware stack levels used:    1
 17624 ;; Hardware stack levels required when called:   10
 17625 ;; This function calls:
 17626 ;;		_Byte_SetBit
 17627 ;;		_Word_GetPair
 17628 ;; This function is called by:
 17629 ;;		_Reset_Low
 17630 ;;		_Reset_High
 17631 ;;		_LED_Set
 17632 ;;		_Port_TogglePin
 17633 ;;		_Motor_Step
 17634 ;;		_MXK_Init
 17635 ;;		_Motor_Init
 17636 ;; This function uses a non-reentrant model
 17637 ;;
 17638                           
 17639                           	psect	text100
 17640  0000'                    __ptext100:
 17641                           	opt stack 0
 17642  0000'                    _Port_SetPin:
 17643                           	opt stack 17
 17644                           
 17645                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 17646                           
 17647                           ;incstack = 0
 17648  0000' 0E08               	movlw	8
 17649  0002' 0100               	movlb	0	; () banked
 17650  0004' 2500'              	addwf	Port_SetPin@pInput& (0+255),w,b
 17651  0006' 0100               	movlb	0	; () banked
 17652  0008' 6F00'              	movwf	Word_GetPair@pInput& (0+255),b
 17653  000A' 0E00               	movlw	0
 17654  000C' 0100               	movlb	0	; () banked
 17655  000E' 2100'              	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 17656  0010' 0100               	movlb	0	; () banked
 17657  0012' 6F00'              	movwf	(Word_GetPair@pInput+1)& (0+255),b
 17658  0014' C011' F00E'        	movff	Port_SetPin@pPin,Word_GetPair@pPair
 17659  0018' EC00' F000'        	call	_Word_GetPair	;wreg free
 17660  001C' 0100               	movlb	0	; () banked
 17661  001E' 6F00'              	movwf	Port_SetPin@Type& (0+255),b
 17662                           
 17663                           ;Port.c: 250: switch (Type)
 17664  0020' D042               	goto	l427
 17665  0022'                    
 17666                           ; BSR set to: 0
 17667                           ;Port.c: 256: pValue &= 1;
 17668                           
 17669                           ; BSR set to: 0
 17670  0022' 0E01               	movlw	1
 17671  0024' 0100               	movlb	0	; () banked
 17672  0026' 1700'              	andwf	Port_SetPin@pValue& (0+255),f,b
 17673                           
 17674                           ; BSR set to: 0
 17675                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 17676  0028' 0100               	movlb	0	; () banked
 17677  002A' EE20 F002          	lfsr	2,2
 17678  002E' 5100'              	movf	Port_SetPin@pInput& (0+255),w,b
 17679  0030' 26D9               	addwf	fsr2l,f,c
 17680  0032' 5100'              	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 17681  0034' 22DA               	addwfc	fsr2h,f,c
 17682  0036' CFDE F000'         	movff	postinc2,Byte_SetBit@pInput
 17683  003A' CFDD F001'         	movff	postdec2,Byte_SetBit@pInput+1
 17684  003E' C011' F002'        	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 17685  0042' C012' F003'        	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 17686  0046' EC00' F000'        	call	_Byte_SetBit	;wreg free
 17687                           
 17688                           ;Port.c: 258: break;
 17689  004A' 0012               	return	
 17690  004C'                    
 17691                           ;Port.c: 261: pValue &= 1;
 17692  004C' 0E01               	movlw	1
 17693  004E' 0100               	movlb	0	; () banked
 17694  0050' 1700'              	andwf	Port_SetPin@pValue& (0+255),f,b
 17695                           
 17696                           ;Port.c: 262: pValue ^= 1;
 17697  0052' 0E01               	movlw	1
 17698  0054' 0100               	movlb	0	; () banked
 17699  0056' 1B00'              	xorwf	Port_SetPin@pValue& (0+255),f,b
 17700                           
 17701                           ; BSR set to: 0
 17702                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 17703  0058' 0100               	movlb	0	; () banked
 17704  005A' EE20 F002          	lfsr	2,2
 17705  005E' 5100'              	movf	Port_SetPin@pInput& (0+255),w,b
 17706  0060' 26D9               	addwf	fsr2l,f,c
 17707  0062' 5100'              	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 17708  0064' 22DA               	addwfc	fsr2h,f,c
 17709  0066' CFDE F000'         	movff	postinc2,Byte_SetBit@pInput
 17710  006A' CFDD F001'         	movff	postdec2,Byte_SetBit@pInput+1
 17711  006E' C011' F002'        	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 17712  0072' C012' F003'        	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 17713  0076' EC00' F000'        	call	_Byte_SetBit	;wreg free
 17714                           
 17715                           ;Port.c: 264: break;
 17716  007A' 0012               	return	
 17717  007C'                    
 17718                           ;Port.c: 266: pValue &= 1;
 17719  007C' 0E01               	movlw	1
 17720  007E' 0100               	movlb	0	; () banked
 17721  0080' 1700'              	andwf	Port_SetPin@pValue& (0+255),f,b
 17722                           
 17723                           ; BSR set to: 0
 17724                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 17725  0082' 0100               	movlb	0	; () banked
 17726  0084' EE20 F004          	lfsr	2,4
 17727  0088' 5100'              	movf	Port_SetPin@pInput& (0+255),w,b
 17728  008A' 26D9               	addwf	fsr2l,f,c
 17729  008C' 5100'              	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 17730  008E' 22DA               	addwfc	fsr2h,f,c
 17731  0090' CFDE F000'         	movff	postinc2,Byte_SetBit@pInput
 17732  0094' CFDD F001'         	movff	postdec2,Byte_SetBit@pInput+1
 17733  0098' C011' F002'        	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 17734  009C' C012' F003'        	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 17735  00A0' EC00' F000'        	call	_Byte_SetBit	;wreg free
 17736                           
 17737                           ;Port.c: 269: }
 17738                           
 17739                           ;Port.c: 268: break;
 17740  00A4' 0012               	return	
 17741  00A6'                    l427:
 17742  00A6' 0100               	movlb	0	; () banked
 17743  00A8' 5100'              	movf	Port_SetPin@Type& (0+255),w,b
 17744                           
 17745                           ; Switch size 1, requested type "space"
 17746                           ; Number of cases is 4, Range of values is 0 to 3
 17747                           ; switch strategies available:
 17748                           ; Name         Instructions Cycles
 17749                           ; simple_byte           13     7 (average)
 17750                           ;	Chosen strategy is simple_byte
 17751  00AA' 0A00               	xorlw	0	; case 0
 17752  00AC' B4D8               	btfsc	status,2,c
 17753  00AE' 0012               	return	
 17754  00B0' 0A01               	xorlw	1	; case 1
 17755  00B2' B4D8               	btfsc	status,2,c
 17756  00B4' D7B6               	goto	l430
 17757  00B6' 0A03               	xorlw	3	; case 2
 17758  00B8' B4D8               	btfsc	status,2,c
 17759  00BA' D7C8               	goto	l432
 17760  00BC' 0A01               	xorlw	1	; case 3
 17761  00BE' A4D8               	btfss	status,2,c
 17762  00C0' 0012               	return	
 17763  00C2' D7DC               	goto	l433
 17764  00C4'                    __end_of_Port_SetPin:
 17765                           	opt stack 0
 17766                           tosu	equ	0xFFF
 17767                           tosh	equ	0xFFE
 17768                           tosl	equ	0xFFD
 17769                           pclath	equ	0xFFA
 17770                           tblptru	equ	0xFF8
 17771                           tblptrh	equ	0xFF7
 17772                           tblptrl	equ	0xFF6
 17773                           tablat	equ	0xFF5
 17774                           prodh	equ	0xFF4
 17775                           prodl	equ	0xFF3
 17776                           intcon	equ	0xFF2
 17777                           postinc0	equ	0xFEE
 17778                           wreg	equ	0xFE8
 17779                           indf1	equ	0xFE7
 17780                           postdec1	equ	0xFE5
 17781                           fsr1h	equ	0xFE2
 17782                           fsr1l	equ	0xFE1
 17783                           indf2	equ	0xFDF
 17784                           postinc2	equ	0xFDE
 17785                           postdec2	equ	0xFDD
 17786                           plusw2	equ	0xFDB
 17787                           fsr2h	equ	0xFDA
 17788                           fsr2l	equ	0xFD9
 17789                           status	equ	0xFD8
 17790                           
 17791 ;; *************** function _Port_GetPin *****************
 17792 ;; Defined at:
 17793 ;;		line 271 in file "Library/Port.c"
 17794 ;; Parameters:    Size  Location     Type
 17795 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 17796 ;;		 -> PortB(10), PortE(10), PortC(10), 
 17797 ;;  pPin            1    2[BANK0 ] enum E6750
 17798 ;; Auto vars:     Size  Location     Type
 17799 ;;  Output          1    5[BANK0 ] unsigned char 
 17800 ;; Return value:  Size  Location     Type
 17801 ;;                  1    wreg      unsigned char 
 17802 ;; Registers used:
 17803 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17804 ;; Tracked objects:
 17805 ;;		On entry : 0/0
 17806 ;;		On exit  : 0/0
 17807 ;;		Unchanged: 0/0
 17808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17809 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17810 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17811 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17812 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17813 ;;Total ram usage:        6 bytes
 17814 ;; Hardware stack levels used:    1
 17815 ;; Hardware stack levels required when called:    7
 17816 ;; This function calls:
 17817 ;;		Nothing
 17818 ;; This function is called by:
 17819 ;;		_Port_TogglePin
 17820 ;;		_HMI_LeftSwitch
 17821 ;;		_HMI_RightSwitch
 17822 ;;		_HMI_UpSwitch
 17823 ;;		_HMI_DownSwitch
 17824 ;;		_MXK_TestButton
 17825 ;; This function uses a non-reentrant model
 17826 ;;
 17827                           
 17828                           	psect	text101
 17829  0000'                    __ptext101:
 17830                           	opt stack 0
 17831  0000'                    _Port_GetPin:
 17832                           	opt stack 21
 17833                           
 17834                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 17835                           
 17836                           ;incstack = 0
 17837  0000' 0100               	movlb	0	; () banked
 17838  0002' EE20 F006          	lfsr	2,6
 17839  0006' 5100'              	movf	Port_GetPin@pInput& (0+255),w,b
 17840  0008' 26D9               	addwf	fsr2l,f,c
 17841  000A' 5100'              	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 17842  000C' 22DA               	addwfc	fsr2h,f,c
 17843  000E' CFDE F003'         	movff	postinc2,??_Port_GetPin
 17844  0012' CFDD F004'         	movff	postdec2,??_Port_GetPin+1
 17845  0016' C003' FFD9         	movff	??_Port_GetPin,fsr2l
 17846  001A' C004' FFDA         	movff	??_Port_GetPin+1,fsr2h
 17847  001E' 50DF               	movf	indf2,w,c
 17848  0020' 0100               	movlb	0	; () banked
 17849  0022' 6F00'              	movwf	Port_GetPin@Output& (0+255),b
 17850                           
 17851                           ; BSR set to: 0
 17852                           ;Port.c: 274: Output >>= (UINT8)pPin;
 17853  0024' 0100               	movlb	0	; () banked
 17854  0026' 2900'              	incf	Port_GetPin@pPin& (0+255),w,b
 17855  0028' 0100               	movlb	0	; () banked
 17856  002A' 6F00'              	movwf	??_Port_GetPin& (0+255),b
 17857  002C' D003               	goto	u6790
 17858  002E'                    u6795:
 17859  002E' 0100               	movlb	0	; () banked
 17860  0030' 90D8               	bcf	status,0,c
 17861  0032' 3300'              	rrcf	Port_GetPin@Output& (0+255),f,b
 17862  0034'                    u6790:
 17863  0034' 0100               	movlb	0	; () banked
 17864  0036' 2F00'              	decfsz	??_Port_GetPin& (0+255),f,b
 17865  0038' D7FA               	goto	u6795
 17866                           
 17867                           ;Port.c: 275: Output &= 1;
 17868  003A' 0E01               	movlw	1
 17869  003C' 0100               	movlb	0	; () banked
 17870  003E' 1700'              	andwf	Port_GetPin@Output& (0+255),f,b
 17871                           
 17872                           ; BSR set to: 0
 17873                           ;Port.c: 276: return Output;
 17874  0040' 0100               	movlb	0	; () banked
 17875  0042' 5100'              	movf	Port_GetPin@Output& (0+255),w,b
 17876  0044' 0012               	return	
 17877  0046'                    __end_of_Port_GetPin:
 17878                           	opt stack 0
 17879                           tosu	equ	0xFFF
 17880                           tosh	equ	0xFFE
 17881                           tosl	equ	0xFFD
 17882                           pclath	equ	0xFFA
 17883                           tblptru	equ	0xFF8
 17884                           tblptrh	equ	0xFF7
 17885                           tblptrl	equ	0xFF6
 17886                           tablat	equ	0xFF5
 17887                           prodh	equ	0xFF4
 17888                           prodl	equ	0xFF3
 17889                           intcon	equ	0xFF2
 17890                           postinc0	equ	0xFEE
 17891                           wreg	equ	0xFE8
 17892                           indf1	equ	0xFE7
 17893                           postdec1	equ	0xFE5
 17894                           fsr1h	equ	0xFE2
 17895                           fsr1l	equ	0xFE1
 17896                           indf2	equ	0xFDF
 17897                           postinc2	equ	0xFDE
 17898                           postdec2	equ	0xFDD
 17899                           plusw2	equ	0xFDB
 17900                           fsr2h	equ	0xFDA
 17901                           fsr2l	equ	0xFD9
 17902                           status	equ	0xFD8
 17903                           
 17904 ;; *************** function _HMI_Init *****************
 17905 ;; Defined at:
 17906 ;;		line 104 in file "HMI.c"
 17907 ;; Parameters:    Size  Location     Type
 17908 ;;		None
 17909 ;; Auto vars:     Size  Location     Type
 17910 ;;  in              2   59[BANK0 ] unsigned short 
 17911 ;; Return value:  Size  Location     Type
 17912 ;;                  1    wreg      void 
 17913 ;; Registers used:
 17914 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17915 ;; Tracked objects:
 17916 ;;		On entry : 0/0
 17917 ;;		On exit  : 0/0
 17918 ;;		Unchanged: 0/0
 17919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17921 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17923 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17924 ;;Total ram usage:        2 bytes
 17925 ;; Hardware stack levels used:    1
 17926 ;; Hardware stack levels required when called:   16
 17927 ;; This function calls:
 17928 ;;		_Button_Init
 17929 ;;		_SPI_Init
 17930 ;;		_SPI_MinSpeed
 17931 ;; This function is called by:
 17932 ;;		_init
 17933 ;; This function uses a non-reentrant model
 17934 ;;
 17935                           
 17936                           	psect	text102
 17937  0000'                    __ptext102:
 17938                           	opt stack 0
 17939  0000'                    _HMI_Init:
 17940                           	opt stack 13
 17941                           
 17942                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 17943                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_NULL);
 17944                           
 17945                           ; BSR set to: 0
 17946                           ;incstack = 0
 17947  0000' 0E00'              	movlw	low (_HMIBoard+48)
 17948  0002' 0101               	movlb	1	; () banked
 17949  0004' 6F00'              	movwf	Button_Init@pInput& (0+255),b
 17950  0006' 0E00'              	movlw	high (_HMIBoard+48)
 17951  0008' 0101               	movlb	1	; () banked
 17952  000A' 6F00'              	movwf	(Button_Init@pInput+1)& (0+255),b
 17953  000C' 0E00               	movlw	0
 17954  000E' 0101               	movlb	1	; () banked
 17955  0010' 6F00'              	movwf	(Button_Init@pThreshold+1)& (0+255),b
 17956  0012' 0E02               	movlw	2
 17957  0014' 6F00'              	movwf	Button_Init@pThreshold& (0+255),b
 17958  0016' 0E00'              	movlw	low _HMI_InitButtons
 17959  0018' 0101               	movlb	1	; () banked
 17960  001A' 6F00'              	movwf	Button_Init@pInitIO& (0+255),b
 17961  001C' 0E00'              	movlw	high _HMI_InitButtons
 17962  001E' 0101               	movlb	1	; () banked
 17963  0020' 6F00'              	movwf	(Button_Init@pInitIO+1)& (0+255),b
 17964  0022' 0E00'              	movlw	low (_HMI_InitButtons shr (0+16))
 17965  0024' 0101               	movlb	1	; () banked
 17966  0026' 6F00'              	movwf	(Button_Init@pInitIO+2)& (0+255),b
 17967  0028' 0E00'              	movlw	low _HMI_DIPSwitch
 17968  002A' 0101               	movlb	1	; () banked
 17969  002C' 6F00'              	movwf	Button_Init@pGetState& (0+255),b
 17970  002E' 0E00'              	movlw	high _HMI_DIPSwitch
 17971  0030' 0101               	movlb	1	; () banked
 17972  0032' 6F00'              	movwf	(Button_Init@pGetState+1)& (0+255),b
 17973  0034' 0E00'              	movlw	low (_HMI_DIPSwitch shr (0+16))
 17974  0036' 0101               	movlb	1	; () banked
 17975  0038' 6F00'              	movwf	(Button_Init@pGetState+2)& (0+255),b
 17976  003A' 0E00'              	movlw	low _Event_NULL
 17977  003C' 0101               	movlb	1	; () banked
 17978  003E' 6F00'              	movwf	Button_Init@pFunction& (0+255),b
 17979  0040' 0E00'              	movlw	high _Event_NULL
 17980  0042' 0101               	movlb	1	; () banked
 17981  0044' 6F00'              	movwf	(Button_Init@pFunction+1)& (0+255),b
 17982  0046' 0E00'              	movlw	low (_Event_NULL shr (0+16))
 17983  0048' 0101               	movlb	1	; () banked
 17984  004A' 6F00'              	movwf	(Button_Init@pFunction+2)& (0+255),b
 17985  004C' EC00' F000'        	call	_Button_Init	;wreg free
 17986                           
 17987                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 17988                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_NULL);
 17989  0050' 0E00'              	movlw	low (_HMIBoard+18)
 17990  0052' 0101               	movlb	1	; () banked
 17991  0054' 6F00'              	movwf	Button_Init@pInput& (0+255),b
 17992  0056' 0E00'              	movlw	high (_HMIBoard+18)
 17993  0058' 0101               	movlb	1	; () banked
 17994  005A' 6F00'              	movwf	(Button_Init@pInput+1)& (0+255),b
 17995  005C' 0E00               	movlw	0
 17996  005E' 0101               	movlb	1	; () banked
 17997  0060' 6F00'              	movwf	(Button_Init@pThreshold+1)& (0+255),b
 17998  0062' 0E02               	movlw	2
 17999  0064' 6F00'              	movwf	Button_Init@pThreshold& (0+255),b
 18000  0066' 0E00'              	movlw	low _HMI_InitButtons
 18001  0068' 0101               	movlb	1	; () banked
 18002  006A' 6F00'              	movwf	Button_Init@pInitIO& (0+255),b
 18003  006C' 0E00'              	movlw	high _HMI_InitButtons
 18004  006E' 0101               	movlb	1	; () banked
 18005  0070' 6F00'              	movwf	(Button_Init@pInitIO+1)& (0+255),b
 18006  0072' 0E00'              	movlw	low (_HMI_InitButtons shr (0+16))
 18007  0074' 0101               	movlb	1	; () banked
 18008  0076' 6F00'              	movwf	(Button_Init@pInitIO+2)& (0+255),b
 18009  0078' 0E00'              	movlw	low _HMI_LeftSwitch
 18010  007A' 0101               	movlb	1	; () banked
 18011  007C' 6F00'              	movwf	Button_Init@pGetState& (0+255),b
 18012  007E' 0E00'              	movlw	high _HMI_LeftSwitch
 18013  0080' 0101               	movlb	1	; () banked
 18014  0082' 6F00'              	movwf	(Button_Init@pGetState+1)& (0+255),b
 18015  0084' 0E00'              	movlw	low (_HMI_LeftSwitch shr (0+16))
 18016  0086' 0101               	movlb	1	; () banked
 18017  0088' 6F00'              	movwf	(Button_Init@pGetState+2)& (0+255),b
 18018  008A' 0E00'              	movlw	low _Event_NULL
 18019  008C' 0101               	movlb	1	; () banked
 18020  008E' 6F00'              	movwf	Button_Init@pFunction& (0+255),b
 18021  0090' 0E00'              	movlw	high _Event_NULL
 18022  0092' 0101               	movlb	1	; () banked
 18023  0094' 6F00'              	movwf	(Button_Init@pFunction+1)& (0+255),b
 18024  0096' 0E00'              	movlw	low (_Event_NULL shr (0+16))
 18025  0098' 0101               	movlb	1	; () banked
 18026  009A' 6F00'              	movwf	(Button_Init@pFunction+2)& (0+255),b
 18027  009C' EC00' F000'        	call	_Button_Init	;wreg free
 18028                           
 18029                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 18030                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_NULL);
 18031  00A0' 0E00'              	movlw	low (_HMIBoard+8)
 18032  00A2' 0101               	movlb	1	; () banked
 18033  00A4' 6F00'              	movwf	Button_Init@pInput& (0+255),b
 18034  00A6' 0E00'              	movlw	high (_HMIBoard+8)
 18035  00A8' 0101               	movlb	1	; () banked
 18036  00AA' 6F00'              	movwf	(Button_Init@pInput+1)& (0+255),b
 18037  00AC' 0E00               	movlw	0
 18038  00AE' 0101               	movlb	1	; () banked
 18039  00B0' 6F00'              	movwf	(Button_Init@pThreshold+1)& (0+255),b
 18040  00B2' 0E02               	movlw	2
 18041  00B4' 6F00'              	movwf	Button_Init@pThreshold& (0+255),b
 18042  00B6' 0E00'              	movlw	low _HMI_InitButtons
 18043  00B8' 0101               	movlb	1	; () banked
 18044  00BA' 6F00'              	movwf	Button_Init@pInitIO& (0+255),b
 18045  00BC' 0E00'              	movlw	high _HMI_InitButtons
 18046  00BE' 0101               	movlb	1	; () banked
 18047  00C0' 6F00'              	movwf	(Button_Init@pInitIO+1)& (0+255),b
 18048  00C2' 0E00'              	movlw	low (_HMI_InitButtons shr (0+16))
 18049  00C4' 0101               	movlb	1	; () banked
 18050  00C6' 6F00'              	movwf	(Button_Init@pInitIO+2)& (0+255),b
 18051  00C8' 0E00'              	movlw	low _HMI_RightSwitch
 18052  00CA' 0101               	movlb	1	; () banked
 18053  00CC' 6F00'              	movwf	Button_Init@pGetState& (0+255),b
 18054  00CE' 0E00'              	movlw	high _HMI_RightSwitch
 18055  00D0' 0101               	movlb	1	; () banked
 18056  00D2' 6F00'              	movwf	(Button_Init@pGetState+1)& (0+255),b
 18057  00D4' 0E00'              	movlw	low (_HMI_RightSwitch shr (0+16))
 18058  00D6' 0101               	movlb	1	; () banked
 18059  00D8' 6F00'              	movwf	(Button_Init@pGetState+2)& (0+255),b
 18060  00DA' 0E00'              	movlw	low _Event_NULL
 18061  00DC' 0101               	movlb	1	; () banked
 18062  00DE' 6F00'              	movwf	Button_Init@pFunction& (0+255),b
 18063  00E0' 0E00'              	movlw	high _Event_NULL
 18064  00E2' 0101               	movlb	1	; () banked
 18065  00E4' 6F00'              	movwf	(Button_Init@pFunction+1)& (0+255),b
 18066  00E6' 0E00'              	movlw	low (_Event_NULL shr (0+16))
 18067  00E8' 0101               	movlb	1	; () banked
 18068  00EA' 6F00'              	movwf	(Button_Init@pFunction+2)& (0+255),b
 18069  00EC' EC00' F000'        	call	_Button_Init	;wreg free
 18070                           
 18071                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 18072                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_NULL);
 18073  00F0' 0E00'              	movlw	low (_HMIBoard+28)
 18074  00F2' 0101               	movlb	1	; () banked
 18075  00F4' 6F00'              	movwf	Button_Init@pInput& (0+255),b
 18076  00F6' 0E00'              	movlw	high (_HMIBoard+28)
 18077  00F8' 0101               	movlb	1	; () banked
 18078  00FA' 6F00'              	movwf	(Button_Init@pInput+1)& (0+255),b
 18079  00FC' 0E00               	movlw	0
 18080  00FE' 0101               	movlb	1	; () banked
 18081  0100' 6F00'              	movwf	(Button_Init@pThreshold+1)& (0+255),b
 18082  0102' 0E02               	movlw	2
 18083  0104' 6F00'              	movwf	Button_Init@pThreshold& (0+255),b
 18084  0106' 0E00'              	movlw	low _HMI_InitButtons
 18085  0108' 0101               	movlb	1	; () banked
 18086  010A' 6F00'              	movwf	Button_Init@pInitIO& (0+255),b
 18087  010C' 0E00'              	movlw	high _HMI_InitButtons
 18088  010E' 0101               	movlb	1	; () banked
 18089  0110' 6F00'              	movwf	(Button_Init@pInitIO+1)& (0+255),b
 18090  0112' 0E00'              	movlw	low (_HMI_InitButtons shr (0+16))
 18091  0114' 0101               	movlb	1	; () banked
 18092  0116' 6F00'              	movwf	(Button_Init@pInitIO+2)& (0+255),b
 18093  0118' 0E00'              	movlw	low _HMI_UpSwitch
 18094  011A' 0101               	movlb	1	; () banked
 18095  011C' 6F00'              	movwf	Button_Init@pGetState& (0+255),b
 18096  011E' 0E00'              	movlw	high _HMI_UpSwitch
 18097  0120' 0101               	movlb	1	; () banked
 18098  0122' 6F00'              	movwf	(Button_Init@pGetState+1)& (0+255),b
 18099  0124' 0E00'              	movlw	low (_HMI_UpSwitch shr (0+16))
 18100  0126' 0101               	movlb	1	; () banked
 18101  0128' 6F00'              	movwf	(Button_Init@pGetState+2)& (0+255),b
 18102  012A' 0E00'              	movlw	low _Event_NULL
 18103  012C' 0101               	movlb	1	; () banked
 18104  012E' 6F00'              	movwf	Button_Init@pFunction& (0+255),b
 18105  0130' 0E00'              	movlw	high _Event_NULL
 18106  0132' 0101               	movlb	1	; () banked
 18107  0134' 6F00'              	movwf	(Button_Init@pFunction+1)& (0+255),b
 18108  0136' 0E00'              	movlw	low (_Event_NULL shr (0+16))
 18109  0138' 0101               	movlb	1	; () banked
 18110  013A' 6F00'              	movwf	(Button_Init@pFunction+2)& (0+255),b
 18111  013C' EC00' F000'        	call	_Button_Init	;wreg free
 18112                           
 18113                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 18114                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_NULL);
 18115  0140' 0E00'              	movlw	low (_HMIBoard+38)
 18116  0142' 0101               	movlb	1	; () banked
 18117  0144' 6F00'              	movwf	Button_Init@pInput& (0+255),b
 18118  0146' 0E00'              	movlw	high (_HMIBoard+38)
 18119  0148' 0101               	movlb	1	; () banked
 18120  014A' 6F00'              	movwf	(Button_Init@pInput+1)& (0+255),b
 18121  014C' 0E00               	movlw	0
 18122  014E' 0101               	movlb	1	; () banked
 18123  0150' 6F00'              	movwf	(Button_Init@pThreshold+1)& (0+255),b
 18124  0152' 0E02               	movlw	2
 18125  0154' 6F00'              	movwf	Button_Init@pThreshold& (0+255),b
 18126  0156' 0E00'              	movlw	low _HMI_InitButtons
 18127  0158' 0101               	movlb	1	; () banked
 18128  015A' 6F00'              	movwf	Button_Init@pInitIO& (0+255),b
 18129  015C' 0E00'              	movlw	high _HMI_InitButtons
 18130  015E' 0101               	movlb	1	; () banked
 18131  0160' 6F00'              	movwf	(Button_Init@pInitIO+1)& (0+255),b
 18132  0162' 0E00'              	movlw	low (_HMI_InitButtons shr (0+16))
 18133  0164' 0101               	movlb	1	; () banked
 18134  0166' 6F00'              	movwf	(Button_Init@pInitIO+2)& (0+255),b
 18135  0168' 0E00'              	movlw	low _HMI_DownSwitch
 18136  016A' 0101               	movlb	1	; () banked
 18137  016C' 6F00'              	movwf	Button_Init@pGetState& (0+255),b
 18138  016E' 0E00'              	movlw	high _HMI_DownSwitch
 18139  0170' 0101               	movlb	1	; () banked
 18140  0172' 6F00'              	movwf	(Button_Init@pGetState+1)& (0+255),b
 18141  0174' 0E00'              	movlw	low (_HMI_DownSwitch shr (0+16))
 18142  0176' 0101               	movlb	1	; () banked
 18143  0178' 6F00'              	movwf	(Button_Init@pGetState+2)& (0+255),b
 18144  017A' 0E00'              	movlw	low _Event_NULL
 18145  017C' 0101               	movlb	1	; () banked
 18146  017E' 6F00'              	movwf	Button_Init@pFunction& (0+255),b
 18147  0180' 0E00'              	movlw	high _Event_NULL
 18148  0182' 0101               	movlb	1	; () banked
 18149  0184' 6F00'              	movwf	(Button_Init@pFunction+1)& (0+255),b
 18150  0186' 0E00'              	movlw	low (_Event_NULL shr (0+16))
 18151  0188' 0101               	movlb	1	; () banked
 18152  018A' 6F00'              	movwf	(Button_Init@pFunction+2)& (0+255),b
 18153  018C' EC00' F000'        	call	_Button_Init	;wreg free
 18154                           
 18155                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 18156  0190' 0EA0               	movlw	160
 18157  0192' 0100               	movlb	0	; () banked
 18158  0194' 6F00'              	movwf	SPI_Init@pClock& (0+255),b
 18159  0196' 0E86               	movlw	134
 18160  0198' 6F00'              	movwf	(SPI_Init@pClock+1)& (0+255),b
 18161  019A' 0E01               	movlw	1
 18162  019C' 6F00'              	movwf	(SPI_Init@pClock+2)& (0+255),b
 18163  019E' 0E00               	movlw	0
 18164  01A0' 6F00'              	movwf	(SPI_Init@pClock+3)& (0+255),b
 18165  01A2' 0E00               	movlw	0
 18166  01A4' 0100               	movlb	0	; () banked
 18167  01A6' 6F00'              	movwf	SPI_Init@pChannel& (0+255),b
 18168  01A8' 0E02               	movlw	2
 18169  01AA' 0100               	movlb	0	; () banked
 18170  01AC' 6F00'              	movwf	SPI_Init@pMode& (0+255),b
 18171  01AE' EC00' F000'        	call	_SPI_Init	;wreg free
 18172                           
 18173                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 18174  01B2' 0E00'              	movlw	low _SPI1
 18175  01B4' 0100               	movlb	0	; () banked
 18176  01B6' 6F00'              	movwf	SPI_MinSpeed@pInput& (0+255),b
 18177  01B8' 0E00'              	movlw	high _SPI1
 18178  01BA' 0100               	movlb	0	; () banked
 18179  01BC' 6F00'              	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 18180  01BE' EC00' F000'        	call	_SPI_MinSpeed	;wreg free
 18181                           
 18182                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 18183  01C2' 0E00               	movlw	0
 18184  01C4' 0100               	movlb	0	; () banked
 18185  01C6' 6F00'              	movwf	(HMI_Init@in+1)& (0+255),b
 18186  01C8' 0E00               	movlw	0
 18187  01CA' 6F00'              	movwf	HMI_Init@in& (0+255),b
 18188  01CC'                    l12335:
 18189                           
 18190                           ; BSR set to: 0
 18191  01CC' 0100               	movlb	0	; () banked
 18192  01CE' 5100'              	movf	(HMI_Init@in+1)& (0+255),w,b
 18193  01D0' E113               	bnz	l1153
 18194  01D2' 0E08               	movlw	8
 18195  01D4' 0100               	movlb	0	; () banked
 18196  01D6' 5D00'              	subwf	HMI_Init@in& (0+255),w,b
 18197  01D8' B0D8               	btfsc	status,0,c
 18198  01DA' 0012               	return	
 18199                           
 18200                           ; BSR set to: 0
 18201                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 18202                           
 18203                           ; BSR set to: 0
 18204                           
 18205                           ; BSR set to: 0
 18206  01DC' 0E00'              	movlw	low _HMIBoard
 18207  01DE' 0100               	movlb	0	; () banked
 18208  01E0' 2500'              	addwf	HMI_Init@in& (0+255),w,b
 18209  01E2' 6ED9               	movwf	fsr2l,c
 18210  01E4' 0E00'              	movlw	high _HMIBoard
 18211  01E6' 0100               	movlb	0	; () banked
 18212  01E8' 2100'              	addwfc	(HMI_Init@in+1)& (0+255),w,b
 18213  01EA' 6EDA               	movwf	fsr2h,c
 18214  01EC' 0E00               	movlw	0
 18215  01EE' 6EDF               	movwf	indf2,c
 18216                           
 18217                           ; BSR set to: 0
 18218  01F0' 0100               	movlb	0	; () banked
 18219  01F2' 4B00'              	infsnz	HMI_Init@in& (0+255),f,b
 18220  01F4' 2B00'              	incf	(HMI_Init@in+1)& (0+255),f,b
 18221  01F6' D7EA               	goto	l12335
 18222  01F8'                    l1153:
 18223                           
 18224                           ; BSR set to: 0
 18225  01F8' 0012               	return		;funcret
 18226  01FA'                    __end_of_HMI_Init:
 18227                           	opt stack 0
 18228                           tosu	equ	0xFFF
 18229                           tosh	equ	0xFFE
 18230                           tosl	equ	0xFFD
 18231                           pclath	equ	0xFFA
 18232                           tblptru	equ	0xFF8
 18233                           tblptrh	equ	0xFF7
 18234                           tblptrl	equ	0xFF6
 18235                           tablat	equ	0xFF5
 18236                           prodh	equ	0xFF4
 18237                           prodl	equ	0xFF3
 18238                           intcon	equ	0xFF2
 18239                           postinc0	equ	0xFEE
 18240                           wreg	equ	0xFE8
 18241                           indf1	equ	0xFE7
 18242                           postdec1	equ	0xFE5
 18243                           fsr1h	equ	0xFE2
 18244                           fsr1l	equ	0xFE1
 18245                           indf2	equ	0xFDF
 18246                           postinc2	equ	0xFDE
 18247                           postdec2	equ	0xFDD
 18248                           plusw2	equ	0xFDB
 18249                           fsr2h	equ	0xFDA
 18250                           fsr2l	equ	0xFD9
 18251                           status	equ	0xFD8
 18252                           
 18253 ;; *************** function _SPI_MinSpeed *****************
 18254 ;; Defined at:
 18255 ;;		line 190 in file "Library/SPI.c"
 18256 ;; Parameters:    Size  Location     Type
 18257 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 18258 ;;		 -> SPI1(11), 
 18259 ;; Auto vars:     Size  Location     Type
 18260 ;;		None
 18261 ;; Return value:  Size  Location     Type
 18262 ;;                  1    wreg      void 
 18263 ;; Registers used:
 18264 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18265 ;; Tracked objects:
 18266 ;;		On entry : 0/0
 18267 ;;		On exit  : 0/0
 18268 ;;		Unchanged: 0/0
 18269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18270 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18273 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18274 ;;Total ram usage:        2 bytes
 18275 ;; Hardware stack levels used:    1
 18276 ;; Hardware stack levels required when called:    9
 18277 ;; This function calls:
 18278 ;;		_Byte_SetBit
 18279 ;;		_Byte_SetQuad
 18280 ;; This function is called by:
 18281 ;;		_HMI_Init
 18282 ;; This function uses a non-reentrant model
 18283 ;;
 18284                           
 18285                           	psect	text103
 18286  0000'                    __ptext103:
 18287                           	opt stack 0
 18288  0000'                    _SPI_MinSpeed:
 18289                           	opt stack 19
 18290                           
 18291                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 18292                           
 18293                           ; BSR set to: 0
 18294                           ;incstack = 0
 18295  0000' 0100               	movlb	0	; () banked
 18296  0002' EE20 F006          	lfsr	2,6
 18297  0006' 5100'              	movf	SPI_MinSpeed@pInput& (0+255),w,b
 18298  0008' 26D9               	addwf	fsr2l,f,c
 18299  000A' 5100'              	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 18300  000C' 22DA               	addwfc	fsr2h,f,c
 18301  000E' CFDE F000'         	movff	postinc2,Byte_SetBit@pInput
 18302  0012' CFDD F001'         	movff	postdec2,Byte_SetBit@pInput+1
 18303  0016' 0E05               	movlw	5
 18304  0018' 0100               	movlb	0	; () banked
 18305  001A' 6F00'              	movwf	Byte_SetBit@pBit& (0+255),b
 18306  001C' 0E00               	movlw	0
 18307  001E' 0100               	movlb	0	; () banked
 18308  0020' 6F00'              	movwf	Byte_SetBit@pValue& (0+255),b
 18309  0022' EC00' F000'        	call	_Byte_SetBit	;wreg free
 18310                           
 18311                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 18312  0026' 0100               	movlb	0	; () banked
 18313  0028' EE20 F006          	lfsr	2,6
 18314  002C' 5100'              	movf	SPI_MinSpeed@pInput& (0+255),w,b
 18315  002E' 26D9               	addwf	fsr2l,f,c
 18316  0030' 5100'              	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 18317  0032' 22DA               	addwfc	fsr2h,f,c
 18318  0034' CFDE F00B'         	movff	postinc2,Byte_SetQuad@pInput
 18319  0038' CFDD F00C'         	movff	postdec2,Byte_SetQuad@pInput+1
 18320  003C' 0E00               	movlw	0
 18321  003E' 0100               	movlb	0	; () banked
 18322  0040' 6F00'              	movwf	Byte_SetQuad@pQuad& (0+255),b
 18323  0042' 0E02               	movlw	2
 18324  0044' 0100               	movlb	0	; () banked
 18325  0046' 6F00'              	movwf	Byte_SetQuad@pValue& (0+255),b
 18326  0048' EC00' F000'        	call	_Byte_SetQuad	;wreg free
 18327                           
 18328                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 18329  004C' 0100               	movlb	0	; () banked
 18330  004E' EE20 F006          	lfsr	2,6
 18331  0052' 5100'              	movf	SPI_MinSpeed@pInput& (0+255),w,b
 18332  0054' 26D9               	addwf	fsr2l,f,c
 18333  0056' 5100'              	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 18334  0058' 22DA               	addwfc	fsr2h,f,c
 18335  005A' CFDE F000'         	movff	postinc2,Byte_SetBit@pInput
 18336  005E' CFDD F001'         	movff	postdec2,Byte_SetBit@pInput+1
 18337  0062' 0E05               	movlw	5
 18338  0064' 0100               	movlb	0	; () banked
 18339  0066' 6F00'              	movwf	Byte_SetBit@pBit& (0+255),b
 18340  0068' 0E01               	movlw	1
 18341  006A' 0100               	movlb	0	; () banked
 18342  006C' 6F00'              	movwf	Byte_SetBit@pValue& (0+255),b
 18343  006E' EC00' F000'        	call	_Byte_SetBit	;wreg free
 18344  0072' 0012               	return		;funcret
 18345  0074'                    __end_of_SPI_MinSpeed:
 18346                           	opt stack 0
 18347                           tosu	equ	0xFFF
 18348                           tosh	equ	0xFFE
 18349                           tosl	equ	0xFFD
 18350                           pclath	equ	0xFFA
 18351                           tblptru	equ	0xFF8
 18352                           tblptrh	equ	0xFF7
 18353                           tblptrl	equ	0xFF6
 18354                           tablat	equ	0xFF5
 18355                           prodh	equ	0xFF4
 18356                           prodl	equ	0xFF3
 18357                           intcon	equ	0xFF2
 18358                           postinc0	equ	0xFEE
 18359                           wreg	equ	0xFE8
 18360                           indf1	equ	0xFE7
 18361                           postdec1	equ	0xFE5
 18362                           fsr1h	equ	0xFE2
 18363                           fsr1l	equ	0xFE1
 18364                           indf2	equ	0xFDF
 18365                           postinc2	equ	0xFDE
 18366                           postdec2	equ	0xFDD
 18367                           plusw2	equ	0xFDB
 18368                           fsr2h	equ	0xFDA
 18369                           fsr2l	equ	0xFD9
 18370                           status	equ	0xFD8
 18371                           
 18372 ;; *************** function _SPI_Init *****************
 18373 ;; Defined at:
 18374 ;;		line 12 in file "Library/SPI.c"
 18375 ;; Parameters:    Size  Location     Type
 18376 ;;  pClock          4   45[BANK0 ] unsigned long 
 18377 ;;  pChannel        1   49[BANK0 ] enum E6744
 18378 ;;  pMode           1   50[BANK0 ] enum E6748
 18379 ;; Auto vars:     Size  Location     Type
 18380 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 18381 ;;		 -> SPI1(11), SPI2(11), 
 18382 ;; Return value:  Size  Location     Type
 18383 ;;                  1    wreg      void 
 18384 ;; Registers used:
 18385 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18386 ;; Tracked objects:
 18387 ;;		On entry : 0/0
 18388 ;;		On exit  : 0/0
 18389 ;;		Unchanged: 0/0
 18390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18391 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18392 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18394 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18395 ;;Total ram usage:        8 bytes
 18396 ;; Hardware stack levels used:    1
 18397 ;; Hardware stack levels required when called:   12
 18398 ;; This function calls:
 18399 ;;		_Byte_SetBit
 18400 ;;		_Byte_SetQuad
 18401 ;;		_Port_SetPinType
 18402 ;;		_SPI_DCS
 18403 ;;		_SPI_DisableISR
 18404 ;;		_Timer2_Init
 18405 ;; This function is called by:
 18406 ;;		_Configure_GPIOs
 18407 ;;		_HMI_Init
 18408 ;; This function uses a non-reentrant model
 18409 ;;
 18410                           
 18411                           	psect	text104
 18412  0000'                    __ptext104:
 18413                           	opt stack 0
 18414  0000'                    _SPI_Init:
 18415                           	opt stack 15
 18416                           
 18417                           ;SPI.c: 14: SPIPtr pInput;
 18418                           ;SPI.c: 16: switch (pChannel)
 18419                           
 18420                           ;incstack = 0
 18421  0000' D00C               	goto	l597
 18422  0002'                    
 18423                           ;SPI.c: 19: pInput = &SPI1;
 18424  0002' 0E00'              	movlw	low _SPI1
 18425  0004' 0100               	movlb	0	; () banked
 18426  0006' 6F00'              	movwf	SPI_Init@pInput& (0+255),b
 18427  0008' 0E00'              	movlw	high _SPI1
 18428  000A' D004               	goto	L10
 18429  000C'                    
 18430                           ; BSR set to: 0
 18431                           ;SPI.c: 22: pInput = &SPI2;
 18432                           
 18433                           ; BSR set to: 0
 18434  000C' 0E00'              	movlw	low _SPI2
 18435  000E' 0100               	movlb	0	; () banked
 18436  0010' 6F00'              	movwf	SPI_Init@pInput& (0+255),b
 18437  0012' 0E00'              	movlw	high _SPI2
 18438  0014'                    L10:
 18439  0014' 0100               	movlb	0	; () banked
 18440  0016' 6F00'              	movwf	(SPI_Init@pInput+1)& (0+255),b
 18441                           
 18442                           ; BSR set to: 0
 18443                           ;SPI.c: 24: };
 18444                           
 18445                           ;SPI.c: 23: break;
 18446  0018' D008               	goto	l599
 18447  001A'                    l597:
 18448                           
 18449                           ; BSR set to: 0
 18450  001A' 0100               	movlb	0	; () banked
 18451  001C' 5100'              	movf	SPI_Init@pChannel& (0+255),w,b
 18452                           
 18453                           ; Switch size 1, requested type "space"
 18454                           ; Number of cases is 2, Range of values is 0 to 1
 18455                           ; switch strategies available:
 18456                           ; Name         Instructions Cycles
 18457                           ; simple_byte            7     4 (average)
 18458                           ;	Chosen strategy is simple_byte
 18459  001E' 0A00               	xorlw	0	; case 0
 18460  0020' B4D8               	btfsc	status,2,c
 18461  0022' D7EF               	goto	l598
 18462  0024' 0A01               	xorlw	1	; case 1
 18463  0026' B4D8               	btfsc	status,2,c
 18464  0028' D7F1               	goto	l600
 18465  002A'                    l599:
 18466                           
 18467                           ; BSR set to: 0
 18468                           ;SPI.c: 26: pInput->mChannel = pChannel;
 18469                           
 18470                           ; BSR set to: 0
 18471  002A' 0100               	movlb	0	; () banked
 18472  002C' EE20 F002          	lfsr	2,2
 18473  0030' 5100'              	movf	SPI_Init@pInput& (0+255),w,b
 18474  0032' 26D9               	addwf	fsr2l,f,c
 18475  0034' 5100'              	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18476  0036' 22DA               	addwfc	fsr2h,f,c
 18477  0038' C031' FFDF         	movff	SPI_Init@pChannel,indf2
 18478                           
 18479                           ;SPI.c: 35: switch (pChannel)
 18480  003C' D0B1               	goto	l601
 18481  003E'                    
 18482                           ; BSR set to: 0
 18483                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 18484                           
 18485                           ; BSR set to: 0
 18486  003E' 0E00'              	movlw	low _PortC
 18487  0040' 0100               	movlb	0	; () banked
 18488  0042' 6F00'              	movwf	Port_SetPinType@pInput& (0+255),b
 18489  0044' 0E00'              	movlw	high _PortC
 18490  0046' 0100               	movlb	0	; () banked
 18491  0048' 6F00'              	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18492  004A' 0E02               	movlw	2
 18493  004C' 0100               	movlb	0	; () banked
 18494  004E' 6F00'              	movwf	Port_SetPinType@pPin& (0+255),b
 18495  0050' 0E03               	movlw	3
 18496  0052' 0100               	movlb	0	; () banked
 18497  0054' 6F00'              	movwf	Port_SetPinType@pType& (0+255),b
 18498  0056' EC00' F000'        	call	_Port_SetPinType	;wreg free
 18499                           
 18500                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 18501  005A' 0E00'              	movlw	low _PortC
 18502  005C' 0100               	movlb	0	; () banked
 18503  005E' 6F00'              	movwf	Port_SetPinType@pInput& (0+255),b
 18504  0060' 0E00'              	movlw	high _PortC
 18505  0062' 0100               	movlb	0	; () banked
 18506  0064' 6F00'              	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18507  0066' 0E03               	movlw	3
 18508  0068' 0100               	movlb	0	; () banked
 18509  006A' 6F00'              	movwf	Port_SetPinType@pPin& (0+255),b
 18510  006C' 0E03               	movlw	3
 18511  006E' 0100               	movlb	0	; () banked
 18512  0070' 6F00'              	movwf	Port_SetPinType@pType& (0+255),b
 18513  0072' EC00' F000'        	call	_Port_SetPinType	;wreg free
 18514                           
 18515                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 18516  0076' 0E00'              	movlw	low _PortC
 18517  0078' 0100               	movlb	0	; () banked
 18518  007A' 6F00'              	movwf	Port_SetPinType@pInput& (0+255),b
 18519  007C' 0E00'              	movlw	high _PortC
 18520  007E' 0100               	movlb	0	; () banked
 18521  0080' 6F00'              	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18522  0082' 0E05               	movlw	5
 18523  0084' 0100               	movlb	0	; () banked
 18524  0086' 6F00'              	movwf	Port_SetPinType@pPin& (0+255),b
 18525  0088' 0E03               	movlw	3
 18526  008A' 0100               	movlb	0	; () banked
 18527  008C' 6F00'              	movwf	Port_SetPinType@pType& (0+255),b
 18528  008E' EC00' F000'        	call	_Port_SetPinType	;wreg free
 18529                           
 18530                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 18531  0092' 0E00'              	movlw	low _PortC
 18532  0094' 0100               	movlb	0	; () banked
 18533  0096' 6F00'              	movwf	Port_SetPinType@pInput& (0+255),b
 18534  0098' 0E00'              	movlw	high _PortC
 18535  009A' 0100               	movlb	0	; () banked
 18536  009C' 6F00'              	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18537  009E' 0E04               	movlw	4
 18538  00A0' 0100               	movlb	0	; () banked
 18539  00A2' 6F00'              	movwf	Port_SetPinType@pPin& (0+255),b
 18540  00A4' 0E00               	movlw	0
 18541  00A6' 0100               	movlb	0	; () banked
 18542  00A8' 6F00'              	movwf	Port_SetPinType@pType& (0+255),b
 18543  00AA' EC00' F000'        	call	_Port_SetPinType	;wreg free
 18544                           
 18545                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 18546  00AE' 0100               	movlb	0	; () banked
 18547  00B0' EE20 F003          	lfsr	2,3
 18548  00B4' 5100'              	movf	SPI_Init@pInput& (0+255),w,b
 18549  00B6' 26D9               	addwf	fsr2l,f,c
 18550  00B8' 5100'              	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18551  00BA' 22DA               	addwfc	fsr2h,f,c
 18552  00BC' 0EC7               	movlw	199
 18553  00BE' 6EDE               	movwf	postinc2,c
 18554  00C0' 0E0F               	movlw	15
 18555  00C2' 6EDD               	movwf	postdec2,c
 18556                           
 18557                           ; BSR set to: 0
 18558                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 18559  00C4' 0100               	movlb	0	; () banked
 18560  00C6' EE20 F006          	lfsr	2,6
 18561  00CA' 5100'              	movf	SPI_Init@pInput& (0+255),w,b
 18562  00CC' 26D9               	addwf	fsr2l,f,c
 18563  00CE' 5100'              	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18564  00D0' 22DA               	addwfc	fsr2h,f,c
 18565  00D2' 0EC6               	movlw	198
 18566  00D4' 6EDE               	movwf	postinc2,c
 18567  00D6' 0E0F               	movlw	15
 18568  00D8' 6EDD               	movwf	postdec2,c
 18569                           
 18570                           ; BSR set to: 0
 18571                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 18572  00DA' 0100               	movlb	0	; () banked
 18573  00DC' EE20 F009          	lfsr	2,9
 18574  00E0' 5100'              	movf	SPI_Init@pInput& (0+255),w,b
 18575  00E2' 26D9               	addwf	fsr2l,f,c
 18576  00E4' 5100'              	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18577  00E6' 22DA               	addwfc	fsr2h,f,c
 18578  00E8' 0EC9               	movlw	201
 18579  00EA' D056               	goto	L11
 18580  00EC'                    
 18581                           ; BSR set to: 0
 18582                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 18583                           
 18584                           ; BSR set to: 0
 18585  00EC' 0E00'              	movlw	low _PortD
 18586  00EE' 0100               	movlb	0	; () banked
 18587  00F0' 6F00'              	movwf	Port_SetPinType@pInput& (0+255),b
 18588  00F2' 0E00'              	movlw	high _PortD
 18589  00F4' 0100               	movlb	0	; () banked
 18590  00F6' 6F00'              	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18591  00F8' 0E07               	movlw	7
 18592  00FA' 0100               	movlb	0	; () banked
 18593  00FC' 6F00'              	movwf	Port_SetPinType@pPin& (0+255),b
 18594  00FE' 0E03               	movlw	3
 18595  0100' 0100               	movlb	0	; () banked
 18596  0102' 6F00'              	movwf	Port_SetPinType@pType& (0+255),b
 18597  0104' EC00' F000'        	call	_Port_SetPinType	;wreg free
 18598                           
 18599                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 18600  0108' 0E00'              	movlw	low _PortD
 18601  010A' 0100               	movlb	0	; () banked
 18602  010C' 6F00'              	movwf	Port_SetPinType@pInput& (0+255),b
 18603  010E' 0E00'              	movlw	high _PortD
 18604  0110' 0100               	movlb	0	; () banked
 18605  0112' 6F00'              	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18606  0114' 0E06               	movlw	6
 18607  0116' 0100               	movlb	0	; () banked
 18608  0118' 6F00'              	movwf	Port_SetPinType@pPin& (0+255),b
 18609  011A' 0E03               	movlw	3
 18610  011C' 0100               	movlb	0	; () banked
 18611  011E' 6F00'              	movwf	Port_SetPinType@pType& (0+255),b
 18612  0120' EC00' F000'        	call	_Port_SetPinType	;wreg free
 18613                           
 18614                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 18615  0124' 0E00'              	movlw	low _PortD
 18616  0126' 0100               	movlb	0	; () banked
 18617  0128' 6F00'              	movwf	Port_SetPinType@pInput& (0+255),b
 18618  012A' 0E00'              	movlw	high _PortD
 18619  012C' 0100               	movlb	0	; () banked
 18620  012E' 6F00'              	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18621  0130' 0E04               	movlw	4
 18622  0132' 0100               	movlb	0	; () banked
 18623  0134' 6F00'              	movwf	Port_SetPinType@pPin& (0+255),b
 18624  0136' 0E03               	movlw	3
 18625  0138' 0100               	movlb	0	; () banked
 18626  013A' 6F00'              	movwf	Port_SetPinType@pType& (0+255),b
 18627  013C' EC00' F000'        	call	_Port_SetPinType	;wreg free
 18628                           
 18629                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 18630  0140' 0E00'              	movlw	low _PortD
 18631  0142' 0100               	movlb	0	; () banked
 18632  0144' 6F00'              	movwf	Port_SetPinType@pInput& (0+255),b
 18633  0146' 0E00'              	movlw	high _PortD
 18634  0148' 0100               	movlb	0	; () banked
 18635  014A' 6F00'              	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18636  014C' 0E05               	movlw	5
 18637  014E' 0100               	movlb	0	; () banked
 18638  0150' 6F00'              	movwf	Port_SetPinType@pPin& (0+255),b
 18639  0152' 0E00               	movlw	0
 18640  0154' 0100               	movlb	0	; () banked
 18641  0156' 6F00'              	movwf	Port_SetPinType@pType& (0+255),b
 18642  0158' EC00' F000'        	call	_Port_SetPinType	;wreg free
 18643                           
 18644                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 18645  015C' 0100               	movlb	0	; () banked
 18646  015E' EE20 F003          	lfsr	2,3
 18647  0162' 5100'              	movf	SPI_Init@pInput& (0+255),w,b
 18648  0164' 26D9               	addwf	fsr2l,f,c
 18649  0166' 5100'              	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18650  0168' 22DA               	addwfc	fsr2h,f,c
 18651  016A' 0E6D               	movlw	109
 18652  016C' 6EDE               	movwf	postinc2,c
 18653  016E' 0E0F               	movlw	15
 18654  0170' 6EDD               	movwf	postdec2,c
 18655                           
 18656                           ; BSR set to: 0
 18657                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 18658  0172' 0100               	movlb	0	; () banked
 18659  0174' EE20 F006          	lfsr	2,6
 18660  0178' 5100'              	movf	SPI_Init@pInput& (0+255),w,b
 18661  017A' 26D9               	addwf	fsr2l,f,c
 18662  017C' 5100'              	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18663  017E' 22DA               	addwfc	fsr2h,f,c
 18664  0180' 0E6C               	movlw	108
 18665  0182' 6EDE               	movwf	postinc2,c
 18666  0184' 0E0F               	movlw	15
 18667  0186' 6EDD               	movwf	postdec2,c
 18668                           
 18669                           ; BSR set to: 0
 18670                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 18671  0188' 0100               	movlb	0	; () banked
 18672  018A' EE20 F009          	lfsr	2,9
 18673  018E' 5100'              	movf	SPI_Init@pInput& (0+255),w,b
 18674  0190' 26D9               	addwf	fsr2l,f,c
 18675  0192' 5100'              	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18676  0194' 22DA               	addwfc	fsr2h,f,c
 18677  0196' 0E6F               	movlw	111
 18678  0198'                    L11:
 18679  0198' 6EDE               	movwf	postinc2,c
 18680  019A' 0E0F               	movlw	15
 18681  019C' 6EDD               	movwf	postdec2,c
 18682                           
 18683                           ;SPI.c: 68: break;
 18684  019E' D009               	goto	l603
 18685  01A0'                    l601:
 18686                           
 18687                           ; BSR set to: 0
 18688                           
 18689                           ; BSR set to: 0
 18690  01A0' 0100               	movlb	0	; () banked
 18691  01A2' 5100'              	movf	SPI_Init@pChannel& (0+255),w,b
 18692                           
 18693                           ; Switch size 1, requested type "space"
 18694                           ; Number of cases is 2, Range of values is 0 to 1
 18695                           ; switch strategies available:
 18696                           ; Name         Instructions Cycles
 18697                           ; simple_byte            7     4 (average)
 18698                           ;	Chosen strategy is simple_byte
 18699  01A4' 0A00               	xorlw	0	; case 0
 18700  01A6' B4D8               	btfsc	status,2,c
 18701  01A8' D74A               	goto	l602
 18702  01AA' 0A01               	xorlw	1	; case 1
 18703  01AC' A4D8               	btfss	status,2,c
 18704  01AE' 0012               	return	
 18705  01B0' D79D               	goto	l604
 18706  01B2'                    l603:
 18707                           
 18708                           ; BSR set to: 0
 18709                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 18710                           
 18711                           ; BSR set to: 0
 18712  01B2' 0100               	movlb	0	; () banked
 18713  01B4' EE20 F006          	lfsr	2,6
 18714  01B8' 5100'              	movf	SPI_Init@pInput& (0+255),w,b
 18715  01BA' 26D9               	addwf	fsr2l,f,c
 18716  01BC' 5100'              	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18717  01BE' 22DA               	addwfc	fsr2h,f,c
 18718  01C0' CFDE F000'         	movff	postinc2,Byte_SetBit@pInput
 18719  01C4' CFDD F001'         	movff	postdec2,Byte_SetBit@pInput+1
 18720  01C8' 0E05               	movlw	5
 18721  01CA' 0100               	movlb	0	; () banked
 18722  01CC' 6F00'              	movwf	Byte_SetBit@pBit& (0+255),b
 18723  01CE' 0E00               	movlw	0
 18724  01D0' 0100               	movlb	0	; () banked
 18725  01D2' 6F00'              	movwf	Byte_SetBit@pValue& (0+255),b
 18726  01D4' EC00' F000'        	call	_Byte_SetBit	;wreg free
 18727                           
 18728                           ;SPI.c: 77: switch(pMode)
 18729  01D8' D09C               	goto	l607
 18730  01DA'                    
 18731                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 18732  01DA' 0100               	movlb	0	; () banked
 18733  01DC' EE20 F006          	lfsr	2,6
 18734  01E0' 5100'              	movf	SPI_Init@pInput& (0+255),w,b
 18735  01E2' 26D9               	addwf	fsr2l,f,c
 18736  01E4' 5100'              	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18737  01E6' 22DA               	addwfc	fsr2h,f,c
 18738  01E8' CFDE F000'         	movff	postinc2,Byte_SetBit@pInput
 18739  01EC' CFDD F001'         	movff	postdec2,Byte_SetBit@pInput+1
 18740  01F0' 0E04               	movlw	4
 18741  01F2' 0100               	movlb	0	; () banked
 18742  01F4' 6F00'              	movwf	Byte_SetBit@pBit& (0+255),b
 18743  01F6' 0E00               	movlw	0
 18744  01F8' 0100               	movlb	0	; () banked
 18745  01FA' 6F00'              	movwf	Byte_SetBit@pValue& (0+255),b
 18746  01FC' EC00' F000'        	call	_Byte_SetBit	;wreg free
 18747                           
 18748                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 18749  0200' 0100               	movlb	0	; () banked
 18750  0202' EE20 F003          	lfsr	2,3
 18751  0206' 5100'              	movf	SPI_Init@pInput& (0+255),w,b
 18752  0208' 26D9               	addwf	fsr2l,f,c
 18753  020A' 5100'              	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18754  020C' 22DA               	addwfc	fsr2h,f,c
 18755  020E' CFDE F000'         	movff	postinc2,Byte_SetBit@pInput
 18756  0212' CFDD F001'         	movff	postdec2,Byte_SetBit@pInput+1
 18757  0216' 0E06               	movlw	6
 18758  0218' 0100               	movlb	0	; () banked
 18759  021A' 6F00'              	movwf	Byte_SetBit@pBit& (0+255),b
 18760  021C' 0E00               	movlw	0
 18761  021E' 0100               	movlb	0	; () banked
 18762  0220' 6F00'              	movwf	Byte_SetBit@pValue& (0+255),b
 18763  0222' EC00' F000'        	call	_Byte_SetBit	;wreg free
 18764                           
 18765                           ;SPI.c: 82: break;
 18766  0226' D084               	goto	l609
 18767  0228'                    
 18768                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 18769  0228' 0100               	movlb	0	; () banked
 18770  022A' EE20 F006          	lfsr	2,6
 18771  022E' 5100'              	movf	SPI_Init@pInput& (0+255),w,b
 18772  0230' 26D9               	addwf	fsr2l,f,c
 18773  0232' 5100'              	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18774  0234' 22DA               	addwfc	fsr2h,f,c
 18775  0236' CFDE F000'         	movff	postinc2,Byte_SetBit@pInput
 18776  023A' CFDD F001'         	movff	postdec2,Byte_SetBit@pInput+1
 18777  023E' 0E04               	movlw	4
 18778  0240' 0100               	movlb	0	; () banked
 18779  0242' 6F00'              	movwf	Byte_SetBit@pBit& (0+255),b
 18780  0244' 0E00               	movlw	0
 18781  0246' 0100               	movlb	0	; () banked
 18782  0248' 6F00'              	movwf	Byte_SetBit@pValue& (0+255),b
 18783  024A' EC00' F000'        	call	_Byte_SetBit	;wreg free
 18784                           
 18785                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 18786  024E' 0100               	movlb	0	; () banked
 18787  0250' EE20 F003          	lfsr	2,3
 18788  0254' 5100'              	movf	SPI_Init@pInput& (0+255),w,b
 18789  0256' 26D9               	addwf	fsr2l,f,c
 18790  0258' 5100'              	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18791  025A' 22DA               	addwfc	fsr2h,f,c
 18792  025C' CFDE F000'         	movff	postinc2,Byte_SetBit@pInput
 18793  0260' CFDD F001'         	movff	postdec2,Byte_SetBit@pInput+1
 18794  0264' 0E06               	movlw	6
 18795  0266' 0100               	movlb	0	; () banked
 18796  0268' 6F00'              	movwf	Byte_SetBit@pBit& (0+255),b
 18797  026A' 0E01               	movlw	1
 18798  026C' 0100               	movlb	0	; () banked
 18799  026E' 6F00'              	movwf	Byte_SetBit@pValue& (0+255),b
 18800  0270' EC00' F000'        	call	_Byte_SetBit	;wreg free
 18801                           
 18802                           ;SPI.c: 86: break;
 18803  0274' D05D               	goto	l609
 18804  0276'                    
 18805                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 18806  0276' 0100               	movlb	0	; () banked
 18807  0278' EE20 F006          	lfsr	2,6
 18808  027C' 5100'              	movf	SPI_Init@pInput& (0+255),w,b
 18809  027E' 26D9               	addwf	fsr2l,f,c
 18810  0280' 5100'              	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18811  0282' 22DA               	addwfc	fsr2h,f,c
 18812  0284' CFDE F000'         	movff	postinc2,Byte_SetBit@pInput
 18813  0288' CFDD F001'         	movff	postdec2,Byte_SetBit@pInput+1
 18814  028C' 0E04               	movlw	4
 18815  028E' 0100               	movlb	0	; () banked
 18816  0290' 6F00'              	movwf	Byte_SetBit@pBit& (0+255),b
 18817  0292' 0E01               	movlw	1
 18818  0294' 0100               	movlb	0	; () banked
 18819  0296' 6F00'              	movwf	Byte_SetBit@pValue& (0+255),b
 18820  0298' EC00' F000'        	call	_Byte_SetBit	;wreg free
 18821                           
 18822                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 18823  029C' 0100               	movlb	0	; () banked
 18824  029E' EE20 F003          	lfsr	2,3
 18825  02A2' 5100'              	movf	SPI_Init@pInput& (0+255),w,b
 18826  02A4' 26D9               	addwf	fsr2l,f,c
 18827  02A6' 5100'              	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18828  02A8' 22DA               	addwfc	fsr2h,f,c
 18829  02AA' CFDE F000'         	movff	postinc2,Byte_SetBit@pInput
 18830  02AE' CFDD F001'         	movff	postdec2,Byte_SetBit@pInput+1
 18831  02B2' 0E06               	movlw	6
 18832  02B4' 0100               	movlb	0	; () banked
 18833  02B6' 6F00'              	movwf	Byte_SetBit@pBit& (0+255),b
 18834  02B8' 0E00               	movlw	0
 18835  02BA' 0100               	movlb	0	; () banked
 18836  02BC' 6F00'              	movwf	Byte_SetBit@pValue& (0+255),b
 18837  02BE' EC00' F000'        	call	_Byte_SetBit	;wreg free
 18838                           
 18839                           ;SPI.c: 90: break;
 18840  02C2' D036               	goto	l609
 18841  02C4'                    
 18842                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 18843  02C4' 0100               	movlb	0	; () banked
 18844  02C6' EE20 F006          	lfsr	2,6
 18845  02CA' 5100'              	movf	SPI_Init@pInput& (0+255),w,b
 18846  02CC' 26D9               	addwf	fsr2l,f,c
 18847  02CE' 5100'              	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18848  02D0' 22DA               	addwfc	fsr2h,f,c
 18849  02D2' CFDE F000'         	movff	postinc2,Byte_SetBit@pInput
 18850  02D6' CFDD F001'         	movff	postdec2,Byte_SetBit@pInput+1
 18851  02DA' 0E04               	movlw	4
 18852  02DC' 0100               	movlb	0	; () banked
 18853  02DE' 6F00'              	movwf	Byte_SetBit@pBit& (0+255),b
 18854  02E0' 0E01               	movlw	1
 18855  02E2' 0100               	movlb	0	; () banked
 18856  02E4' 6F00'              	movwf	Byte_SetBit@pValue& (0+255),b
 18857  02E6' EC00' F000'        	call	_Byte_SetBit	;wreg free
 18858                           
 18859                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 18860  02EA' 0100               	movlb	0	; () banked
 18861  02EC' EE20 F003          	lfsr	2,3
 18862  02F0' 5100'              	movf	SPI_Init@pInput& (0+255),w,b
 18863  02F2' 26D9               	addwf	fsr2l,f,c
 18864  02F4' 5100'              	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18865  02F6' 22DA               	addwfc	fsr2h,f,c
 18866  02F8' CFDE F000'         	movff	postinc2,Byte_SetBit@pInput
 18867  02FC' CFDD F001'         	movff	postdec2,Byte_SetBit@pInput+1
 18868  0300' 0E06               	movlw	6
 18869  0302' 0100               	movlb	0	; () banked
 18870  0304' 6F00'              	movwf	Byte_SetBit@pBit& (0+255),b
 18871  0306' 0E01               	movlw	1
 18872  0308' 0100               	movlb	0	; () banked
 18873  030A' 6F00'              	movwf	Byte_SetBit@pValue& (0+255),b
 18874  030C' EC00' F000'        	call	_Byte_SetBit	;wreg free
 18875                           
 18876                           ;SPI.c: 94: break;
 18877  0310' D00F               	goto	l609
 18878  0312'                    l607:
 18879  0312' 0100               	movlb	0	; () banked
 18880  0314' 5100'              	movf	SPI_Init@pMode& (0+255),w,b
 18881                           
 18882                           ; Switch size 1, requested type "space"
 18883                           ; Number of cases is 4, Range of values is 0 to 3
 18884                           ; switch strategies available:
 18885                           ; Name         Instructions Cycles
 18886                           ; simple_byte           13     7 (average)
 18887                           ;	Chosen strategy is simple_byte
 18888  0316' 0A00               	xorlw	0	; case 0
 18889  0318' B4D8               	btfsc	status,2,c
 18890  031A' D75F               	goto	l608
 18891  031C' 0A01               	xorlw	1	; case 1
 18892  031E' B4D8               	btfsc	status,2,c
 18893  0320' D783               	goto	l610
 18894  0322' 0A03               	xorlw	3	; case 2
 18895  0324' B4D8               	btfsc	status,2,c
 18896  0326' D7A7               	goto	l611
 18897  0328' 0A01               	xorlw	1	; case 3
 18898  032A' A4D8               	btfss	status,2,c
 18899  032C' 0012               	return	
 18900  032E' D7CA               	goto	l612
 18901  0330'                    l609:
 18902                           
 18903                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 18904                           
 18905                           ; BSR set to: 0
 18906  0330' 0100               	movlb	0	; () banked
 18907  0332' EE20 F006          	lfsr	2,6
 18908  0336' 5100'              	movf	SPI_Init@pInput& (0+255),w,b
 18909  0338' 26D9               	addwf	fsr2l,f,c
 18910  033A' 5100'              	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18911  033C' 22DA               	addwfc	fsr2h,f,c
 18912  033E' CFDE F000'         	movff	postinc2,Byte_SetBit@pInput
 18913  0342' CFDD F001'         	movff	postdec2,Byte_SetBit@pInput+1
 18914  0346' 0E07               	movlw	7
 18915  0348' 0100               	movlb	0	; () banked
 18916  034A' 6F00'              	movwf	Byte_SetBit@pBit& (0+255),b
 18917  034C' 0E00               	movlw	0
 18918  034E' 0100               	movlb	0	; () banked
 18919  0350' 6F00'              	movwf	Byte_SetBit@pValue& (0+255),b
 18920  0352' EC00' F000'        	call	_Byte_SetBit	;wreg free
 18921                           
 18922                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 18923  0356' 0100               	movlb	0	; () banked
 18924  0358' EE20 F006          	lfsr	2,6
 18925  035C' 5100'              	movf	SPI_Init@pInput& (0+255),w,b
 18926  035E' 26D9               	addwf	fsr2l,f,c
 18927  0360' 5100'              	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18928  0362' 22DA               	addwfc	fsr2h,f,c
 18929  0364' CFDE F000'         	movff	postinc2,Byte_SetBit@pInput
 18930  0368' CFDD F001'         	movff	postdec2,Byte_SetBit@pInput+1
 18931  036C' 0E06               	movlw	6
 18932  036E' 0100               	movlb	0	; () banked
 18933  0370' 6F00'              	movwf	Byte_SetBit@pBit& (0+255),b
 18934  0372' 0E00               	movlw	0
 18935  0374' 0100               	movlb	0	; () banked
 18936  0376' 6F00'              	movwf	Byte_SetBit@pValue& (0+255),b
 18937  0378' EC00' F000'        	call	_Byte_SetBit	;wreg free
 18938                           
 18939                           ;SPI.c: 106: Timer2_Init(pClock);
 18940  037C' C02D' F00D'        	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 18941  0380' C02E' F00E'        	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 18942  0384' C02F' F00F'        	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 18943  0388' C030' F010'        	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 18944  038C' EC00' F000'        	call	_Timer2_Init	;wreg free
 18945                           
 18946                           ;SPI.c: 112: SPI_DisableISR(pInput);
 18947  0390' C033' F000'        	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 18948  0394' C034' F001'        	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 18949  0398' EC00' F000'        	call	_SPI_DisableISR	;wreg free
 18950                           
 18951                           ;SPI.c: 116: switch (pChannel)
 18952  039C' D004               	goto	l614
 18953  039E'                    l615:
 18954                           
 18955                           ; BSR set to: 0
 18956  039E' 869F               	bsf	3999,3,c	;volatile
 18957  03A0' D00B               	goto	l616
 18958  03A2'                    l617:
 18959                           
 18960                           ; BSR set to: 0
 18961  03A2' 8EA5               	bsf	4005,7,c	;volatile
 18962  03A4' D009               	goto	l616
 18963  03A6'                    l614:
 18964                           
 18965                           ; BSR set to: 0
 18966  03A6' 0100               	movlb	0	; () banked
 18967  03A8' 5100'              	movf	SPI_Init@pChannel& (0+255),w,b
 18968                           
 18969                           ; Switch size 1, requested type "space"
 18970                           ; Number of cases is 2, Range of values is 0 to 1
 18971                           ; switch strategies available:
 18972                           ; Name         Instructions Cycles
 18973                           ; simple_byte            7     4 (average)
 18974                           ;	Chosen strategy is simple_byte
 18975  03AA' 0A00               	xorlw	0	; case 0
 18976  03AC' B4D8               	btfsc	status,2,c
 18977  03AE' D7F7               	goto	l615
 18978  03B0' 0A01               	xorlw	1	; case 1
 18979  03B2' A4D8               	btfss	status,2,c
 18980  03B4' 0012               	return	
 18981  03B6' D7F5               	goto	l617
 18982  03B8'                    l616:
 18983                           
 18984                           ; BSR set to: 0
 18985                           ;SPI.c: 124: SPI_DCS(pInput);
 18986                           
 18987                           ; BSR set to: 0
 18988  03B8' C033' F000'        	movff	SPI_Init@pInput,SPI_DCS@pInput
 18989  03BC' C034' F001'        	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 18990  03C0' EC00' F000'        	call	_SPI_DCS	;wreg free
 18991                           
 18992                           ;SPI.c: 126: pInput->mBusy = 0;
 18993  03C4' C033' FFD9         	movff	SPI_Init@pInput,fsr2l
 18994  03C8' C034' FFDA         	movff	SPI_Init@pInput+1,fsr2h
 18995  03CC' 0E00               	movlw	0
 18996  03CE' 6EDF               	movwf	indf2,c
 18997                           
 18998                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 18999  03D0' 0100               	movlb	0	; () banked
 19000  03D2' EE20 F006          	lfsr	2,6
 19001  03D6' 5100'              	movf	SPI_Init@pInput& (0+255),w,b
 19002  03D8' 26D9               	addwf	fsr2l,f,c
 19003  03DA' 5100'              	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19004  03DC' 22DA               	addwfc	fsr2h,f,c
 19005  03DE' CFDE F00B'         	movff	postinc2,Byte_SetQuad@pInput
 19006  03E2' CFDD F00C'         	movff	postdec2,Byte_SetQuad@pInput+1
 19007  03E6' 0E00               	movlw	0
 19008  03E8' 0100               	movlb	0	; () banked
 19009  03EA' 6F00'              	movwf	Byte_SetQuad@pQuad& (0+255),b
 19010  03EC' 0E03               	movlw	3
 19011  03EE' 0100               	movlb	0	; () banked
 19012  03F0' 6F00'              	movwf	Byte_SetQuad@pValue& (0+255),b
 19013  03F2' EC00' F000'        	call	_Byte_SetQuad	;wreg free
 19014                           
 19015                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 19016  03F6' 0100               	movlb	0	; () banked
 19017  03F8' EE20 F006          	lfsr	2,6
 19018  03FC' 5100'              	movf	SPI_Init@pInput& (0+255),w,b
 19019  03FE' 26D9               	addwf	fsr2l,f,c
 19020  0400' 5100'              	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19021  0402' 22DA               	addwfc	fsr2h,f,c
 19022  0404' CFDE F000'         	movff	postinc2,Byte_SetBit@pInput
 19023  0408' CFDD F001'         	movff	postdec2,Byte_SetBit@pInput+1
 19024  040C' 0E05               	movlw	5
 19025  040E' 0100               	movlb	0	; () banked
 19026  0410' 6F00'              	movwf	Byte_SetBit@pBit& (0+255),b
 19027  0412' 0E01               	movlw	1
 19028  0414' 0100               	movlb	0	; () banked
 19029  0416' 6F00'              	movwf	Byte_SetBit@pValue& (0+255),b
 19030  0418' EC00' F000'        	call	_Byte_SetBit	;wreg free
 19031  041C' 0012               	return		;funcret
 19032  041E'                    __end_of_SPI_Init:
 19033                           	opt stack 0
 19034                           tosu	equ	0xFFF
 19035                           tosh	equ	0xFFE
 19036                           tosl	equ	0xFFD
 19037                           pclath	equ	0xFFA
 19038                           tblptru	equ	0xFF8
 19039                           tblptrh	equ	0xFF7
 19040                           tblptrl	equ	0xFF6
 19041                           tablat	equ	0xFF5
 19042                           prodh	equ	0xFF4
 19043                           prodl	equ	0xFF3
 19044                           intcon	equ	0xFF2
 19045                           postinc0	equ	0xFEE
 19046                           wreg	equ	0xFE8
 19047                           indf1	equ	0xFE7
 19048                           postdec1	equ	0xFE5
 19049                           fsr1h	equ	0xFE2
 19050                           fsr1l	equ	0xFE1
 19051                           indf2	equ	0xFDF
 19052                           postinc2	equ	0xFDE
 19053                           postdec2	equ	0xFDD
 19054                           plusw2	equ	0xFDB
 19055                           fsr2h	equ	0xFDA
 19056                           fsr2l	equ	0xFD9
 19057                           status	equ	0xFD8
 19058                           
 19059 ;; *************** function _Timer2_Init *****************
 19060 ;; Defined at:
 19061 ;;		line 10 in file "Library/Timer2.c"
 19062 ;; Parameters:    Size  Location     Type
 19063 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 19064 ;; Auto vars:     Size  Location     Type
 19065 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 19066 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 19067 ;;  RDIV            4   18[BANK0 ] unsigned long 
 19068 ;; Return value:  Size  Location     Type
 19069 ;;                  1    wreg      void 
 19070 ;; Registers used:
 19071 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19072 ;; Tracked objects:
 19073 ;;		On entry : 0/0
 19074 ;;		On exit  : 0/0
 19075 ;;		Unchanged: 0/0
 19076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19077 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19078 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19079 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19080 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19081 ;;Total ram usage:       17 bytes
 19082 ;; Hardware stack levels used:    1
 19083 ;; Hardware stack levels required when called:    8
 19084 ;; This function calls:
 19085 ;;		_Timer2_Clear
 19086 ;;		___lldiv
 19087 ;; This function is called by:
 19088 ;;		_SPI_Init
 19089 ;; This function uses a non-reentrant model
 19090 ;;
 19091                           
 19092                           	psect	text105
 19093  0000'                    __ptext105:
 19094                           	opt stack 0
 19095  0000'                    _Timer2_Init:
 19096                           	opt stack 18
 19097                           
 19098                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 19099                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 19100                           ;Timer2.c: 14: static UINT8 PRE = 0;
 19101                           ;Timer2.c: 15: static UINT32 DIV = 0;
 19102                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 19103                           
 19104                           ;incstack = 0
 19105  0000' 0E00               	movlw	0
 19106  0002' 0100               	movlb	0	; () banked
 19107  0004' 6F00'              	movwf	Timer2_Init@pCPUClock& (0+255),b
 19108  0006' 0E6C               	movlw	108
 19109  0008' 6F00'              	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 19110  000A' 0EDC               	movlw	220
 19111  000C' 6F00'              	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 19112  000E' 0E02               	movlw	2
 19113  0010' 6F00'              	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 19114                           
 19115                           ; BSR set to: 0
 19116                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 19117                           ;Timer2.c: 20: pFrequency *= 2;
 19118  0012' 0100               	movlb	0	; () banked
 19119  0014' 90D8               	bcf	status,0,c
 19120  0016' 3700'              	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 19121  0018' 3700'              	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 19122  001A' 3700'              	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 19123  001C' 3700'              	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 19124                           
 19125                           ; BSR set to: 0
 19126                           ;Timer2.c: 23: pCPUClock /= 4;
 19127  001E' 0E02               	movlw	2
 19128  0020' 0100               	movlb	0	; () banked
 19129  0022' 6F00'              	movwf	??_Timer2_Init& (0+255),b
 19130  0024'                    u7275:
 19131  0024' 90D8               	bcf	status,0,c
 19132  0026' 0100               	movlb	0	; () banked
 19133  0028' 3300'              	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 19134  002A' 3300'              	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 19135  002C' 3300'              	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 19136  002E' 3300'              	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 19137  0030' 0100               	movlb	0	; () banked
 19138  0032' 2F00'              	decfsz	??_Timer2_Init& (0+255),f,b
 19139  0034' D7F7               	goto	u7275
 19140                           
 19141                           ; BSR set to: 0
 19142                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 19143  0036' C016' F000'        	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 19144  003A' C017' F001'        	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 19145  003E' C018' F002'        	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 19146  0042' C019' F003'        	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 19147  0046' C00D' F004'        	movff	Timer2_Init@pFrequency,___lldiv@divisor
 19148  004A' C00E' F005'        	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 19149  004E' C00F' F006'        	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 19150  0052' C010' F007'        	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 19151  0056' EC00' F000'        	call	___lldiv	;wreg free
 19152  005A' C000' F01A'        	movff	?___lldiv,Timer2_Init@DIVIDE
 19153  005E' C001' F01B'        	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 19154  0062' C002' F01C'        	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 19155  0066' C003' F01D'        	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 19156                           
 19157                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 19158  006A' D010               	goto	l1828
 19159  006C'                    l11189:
 19160                           
 19161                           ;Timer2.c: 28: {
 19162                           ;Timer2.c: 29: RDIV = 0;
 19163  006C' 0E00               	movlw	0
 19164  006E' 0100               	movlb	0	; () banked
 19165  0070' 6F00'              	movwf	Timer2_Init@RDIV& (0+255),b
 19166  0072' 0E00               	movlw	0
 19167  0074' 6F00'              	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 19168  0076' 0E00               	movlw	0
 19169  0078' 6F00'              	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 19170  007A' 0E00               	movlw	0
 19171  007C' 6F00'              	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 19172                           
 19173                           ; BSR set to: 0
 19174                           ;Timer2.c: 30: INDEX ++;
 19175  007E' 0100               	movlb	0	; () banked
 19176  0080' 2B00'              	incf	Timer2_Init@INDEX& (0+255),f,b
 19177                           
 19178                           ; BSR set to: 0
 19179                           ;Timer2.c: 31: if (INDEX >= 3)
 19180  0082' 0E02               	movlw	2
 19181  0084' 0100               	movlb	0	; () banked
 19182  0086' 6500'              	cpfsgt	Timer2_Init@INDEX& (0+255),b
 19183  0088' D001               	goto	l1828
 19184  008A' D026               	goto	u7290
 19185  008C'                    l1828:
 19186                           
 19187                           ; BSR set to: 0
 19188                           
 19189                           ; BSR set to: 0
 19190  008C' C01A' F000'        	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 19191  0090' C01B' F001'        	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 19192  0094' C01C' F002'        	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 19193  0098' C01D' F003'        	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 19194  009C' 0100               	movlb	0	; () banked
 19195  009E' 5100'              	movf	Timer2_Init@INDEX& (0+255),w,b
 19196  00A0' 0D01               	mullw	1
 19197  00A2' 0E00'              	movlw	low Timer2_Init@PRESCALE
 19198  00A4' 24F3               	addwf	prodl,w,c
 19199  00A6' 6EF6               	movwf	tblptrl,c
 19200  00A8' 0E00'              	movlw	high Timer2_Init@PRESCALE
 19201  00AA' 20F4               	addwfc	prodh,w,c
 19202  00AC' 6EF7               	movwf	tblptrh,c
 19203  00AE'                    	if	1	;There are 3 active tblptr bytes
 19204  00AE' 6AF8               	clrf	tblptru,c
 19205  00B0' 0E00'              	movlw	low (__mediumconst shr (0+16))
 19206  00B2' 22F8               	addwfc	tblptru,f,c
 19207  00B4'                    	endif
 19208  00B4' 0008               	tblrd		*
 19209  00B6' 50F5               	movf	tablat,w,c
 19210  00B8' 0100               	movlb	0	; () banked
 19211  00BA' 6F00'              	movwf	___lldiv@divisor& (0+255),b
 19212  00BC' 6B00'              	clrf	(___lldiv@divisor+1)& (0+255),b
 19213  00BE' 6B00'              	clrf	(___lldiv@divisor+2)& (0+255),b
 19214  00C0' 6B00'              	clrf	(___lldiv@divisor+3)& (0+255),b
 19215  00C2' EC00' F000'        	call	___lldiv	;wreg free
 19216  00C6' 0100               	movlb	0	; () banked
 19217  00C8' 5100'              	movf	(?___lldiv+3)& (0+255),w,b
 19218  00CA' 0100               	movlb	0	; () banked
 19219  00CC' 1100'              	iorwf	(?___lldiv+2)& (0+255),w,b
 19220  00CE' E1CE               	bnz	l11189
 19221  00D0' 0100               	movlb	0	; () banked
 19222  00D2' 0500'              	decf	(?___lldiv+1)& (0+255),w,b
 19223  00D4' B0D8               	btfsc	status,0,c
 19224  00D6' D7CA               	goto	l1827
 19225  00D8'                    u7290:
 19226                           
 19227                           ; BSR set to: 0
 19228                           ;Timer2.c: 33: }
 19229                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 19230                           
 19231                           ; BSR set to: 0
 19232  00D8' 50CA               	movf	4042,w,c	;volatile
 19233  00DA' 0100               	movlb	0	; () banked
 19234  00DC' 1900'              	xorwf	Timer2_Init@INDEX& (0+255),w,b
 19235  00DE' 0BFC               	andlw	-4
 19236  00E0' 1900'              	xorwf	Timer2_Init@INDEX& (0+255),w,b
 19237  00E2' 6ECA               	movwf	4042,c	;volatile
 19238                           
 19239                           ; BSR set to: 0
 19240                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 19241  00E4' 84CA               	bsf	4042,2,c	;volatile
 19242                           
 19243                           ; BSR set to: 0
 19244                           ;Timer2.c: 44: Timer2_Clear();
 19245  00E6' EC00' F000'        	call	_Timer2_Clear	;wreg free
 19246                           
 19247                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 19248  00EA' 0100               	movlb	0	; () banked
 19249  00EC' 5100'              	movf	Timer2_Init@INDEX& (0+255),w,b
 19250  00EE' 0D01               	mullw	1
 19251  00F0' 0E00'              	movlw	low Timer2_Init@PRESCALE
 19252  00F2' 24F3               	addwf	prodl,w,c
 19253  00F4' 6EF6               	movwf	tblptrl,c
 19254  00F6' 0E00'              	movlw	high Timer2_Init@PRESCALE
 19255  00F8' 20F4               	addwfc	prodh,w,c
 19256  00FA' 6EF7               	movwf	tblptrh,c
 19257  00FC'                    	if	1	;There are 3 active tblptr bytes
 19258  00FC' 6AF8               	clrf	tblptru,c
 19259  00FE' 0E00'              	movlw	low (__mediumconst shr (0+16))
 19260  0100' 22F8               	addwfc	tblptru,f,c
 19261  0102'                    	endif
 19262  0102' 0008               	tblrd		*
 19263  0104' CFF5 F030'         	movff	tablat,Timer2_Init@PRE
 19264                           
 19265                           ; BSR set to: 0
 19266                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 19267  0108' 0EFF               	movlw	255
 19268  010A' 0100               	movlb	0	; () banked
 19269  010C' 2500'              	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 19270  010E' 0103               	movlb	3	; () banked
 19271  0110' 6F00'              	movwf	Timer2_Init@DIV& (0+255),b
 19272  0112' 0EFF               	movlw	255
 19273  0114' 0100               	movlb	0	; () banked
 19274  0116' 2100'              	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 19275  0118' 0103               	movlb	3	; () banked
 19276  011A' 6F00'              	movwf	(Timer2_Init@DIV+1)& (0+255),b
 19277  011C' 0EFF               	movlw	255
 19278  011E' 0100               	movlb	0	; () banked
 19279  0120' 2100'              	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 19280  0122' 0103               	movlb	3	; () banked
 19281  0124' 6F00'              	movwf	(Timer2_Init@DIV+2)& (0+255),b
 19282  0126' 0EFF               	movlw	255
 19283  0128' 0100               	movlb	0	; () banked
 19284  012A' 2100'              	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 19285  012C' 0103               	movlb	3	; () banked
 19286  012E' 6F00'              	movwf	(Timer2_Init@DIV+3)& (0+255),b
 19287                           
 19288                           ; BSR set to: 3
 19289                           ;Timer2.c: 48: INDEX = DIV/PRE;
 19290  0130' C022' F000'        	movff	Timer2_Init@DIV,___lldiv@dividend
 19291  0134' C023' F001'        	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 19292  0138' C024' F002'        	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 19293  013C' C025' F003'        	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 19294  0140' 0100               	movlb	0	; () banked
 19295  0142' 5100'              	movf	Timer2_Init@PRE& (0+255),w,b
 19296  0144' 0100               	movlb	0	; () banked
 19297  0146' 6F00'              	movwf	___lldiv@divisor& (0+255),b
 19298  0148' 6B00'              	clrf	(___lldiv@divisor+1)& (0+255),b
 19299  014A' 6B00'              	clrf	(___lldiv@divisor+2)& (0+255),b
 19300  014C' 6B00'              	clrf	(___lldiv@divisor+3)& (0+255),b
 19301  014E' EC00' F000'        	call	___lldiv	;wreg free
 19302  0152' 0100               	movlb	0	; () banked
 19303  0154' 5100'              	movf	?___lldiv& (0+255),w,b
 19304  0156' 0100               	movlb	0	; () banked
 19305  0158' 6F00'              	movwf	Timer2_Init@INDEX& (0+255),b
 19306                           
 19307                           ; BSR set to: 0
 19308                           ;Timer2.c: 49: PR2 = INDEX;
 19309  015A' C031' FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 19310                           
 19311                           ; BSR set to: 0
 19312  015E' 0012               	return		;funcret
 19313  0160'                    __end_of_Timer2_Init:
 19314                           	opt stack 0
 19315                           tosu	equ	0xFFF
 19316                           tosh	equ	0xFFE
 19317                           tosl	equ	0xFFD
 19318                           pclath	equ	0xFFA
 19319                           tblptru	equ	0xFF8
 19320                           tblptrh	equ	0xFF7
 19321                           tblptrl	equ	0xFF6
 19322                           tablat	equ	0xFF5
 19323                           prodh	equ	0xFF4
 19324                           prodl	equ	0xFF3
 19325                           intcon	equ	0xFF2
 19326                           postinc0	equ	0xFEE
 19327                           wreg	equ	0xFE8
 19328                           indf1	equ	0xFE7
 19329                           postdec1	equ	0xFE5
 19330                           fsr1h	equ	0xFE2
 19331                           fsr1l	equ	0xFE1
 19332                           indf2	equ	0xFDF
 19333                           postinc2	equ	0xFDE
 19334                           postdec2	equ	0xFDD
 19335                           plusw2	equ	0xFDB
 19336                           fsr2h	equ	0xFDA
 19337                           fsr2l	equ	0xFD9
 19338                           status	equ	0xFD8
 19339                           
 19340 ;; *************** function ___lldiv *****************
 19341 ;; Defined at:
 19342 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
 19343 ;; Parameters:    Size  Location     Type
 19344 ;;  dividend        4    0[BANK0 ] unsigned long 
 19345 ;;  divisor         4    4[BANK0 ] unsigned long 
 19346 ;; Auto vars:     Size  Location     Type
 19347 ;;  quotient        4    8[BANK0 ] unsigned long 
 19348 ;;  counter         1   12[BANK0 ] unsigned char 
 19349 ;; Return value:  Size  Location     Type
 19350 ;;                  4    0[BANK0 ] unsigned long 
 19351 ;; Registers used:
 19352 ;;		wreg, status,2, status,0
 19353 ;; Tracked objects:
 19354 ;;		On entry : 0/0
 19355 ;;		On exit  : 0/0
 19356 ;;		Unchanged: 0/0
 19357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19358 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19359 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19361 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19362 ;;Total ram usage:       13 bytes
 19363 ;; Hardware stack levels used:    1
 19364 ;; Hardware stack levels required when called:    7
 19365 ;; This function calls:
 19366 ;;		Nothing
 19367 ;; This function is called by:
 19368 ;;		_Timer2_Init
 19369 ;;		_rand_between
 19370 ;;		_I2C_Init
 19371 ;;		_Timer0_Init
 19372 ;; This function uses a non-reentrant model
 19373 ;;
 19374                           
 19375                           	psect	text106
 19376  0000'                    __ptext106:
 19377                           	opt stack 0
 19378  0000'                    ___lldiv:
 19379                           	opt stack 18
 19380                           
 19381                           ; BSR set to: 0
 19382                           ;incstack = 0
 19383  0000' 0E00               	movlw	0
 19384  0002' 0100               	movlb	0	; () banked
 19385  0004' 6F00'              	movwf	___lldiv@quotient& (0+255),b
 19386  0006' 0E00               	movlw	0
 19387  0008' 6F00'              	movwf	(___lldiv@quotient+1)& (0+255),b
 19388  000A' 0E00               	movlw	0
 19389  000C' 6F00'              	movwf	(___lldiv@quotient+2)& (0+255),b
 19390  000E' 0E00               	movlw	0
 19391  0010' 6F00'              	movwf	(___lldiv@quotient+3)& (0+255),b
 19392                           
 19393                           ; BSR set to: 0
 19394  0012' 0100               	movlb	0	; () banked
 19395  0014' 5100'              	movf	___lldiv@divisor& (0+255),w,b
 19396  0016' 0100               	movlb	0	; () banked
 19397  0018' 1100'              	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 19398  001A' 0100               	movlb	0	; () banked
 19399  001C' 1100'              	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 19400  001E' 0100               	movlb	0	; () banked
 19401  0020' 1100'              	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 19402  0022' B4D8               	btfsc	status,2,c
 19403  0024' D042               	goto	l2701
 19404                           
 19405                           ; BSR set to: 0
 19406  0026' 0E01               	movlw	1
 19407  0028' 0100               	movlb	0	; () banked
 19408  002A' 6F00'              	movwf	___lldiv@counter& (0+255),b
 19409  002C' D008               	goto	l2696
 19410  002E'                    
 19411                           ; BSR set to: 0
 19412                           
 19413                           ; BSR set to: 0
 19414  002E' 0100               	movlb	0	; () banked
 19415  0030' 90D8               	bcf	status,0,c
 19416  0032' 3700'              	rlcf	___lldiv@divisor& (0+255),f,b
 19417  0034' 3700'              	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 19418  0036' 3700'              	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 19419  0038' 3700'              	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 19420  003A' 0100               	movlb	0	; () banked
 19421  003C' 2B00'              	incf	___lldiv@counter& (0+255),f,b
 19422  003E'                    l2696:
 19423                           
 19424                           ; BSR set to: 0
 19425                           
 19426                           ; BSR set to: 0
 19427  003E' 0100               	movlb	0	; () banked
 19428  0040' AF00'              	btfss	(___lldiv@divisor+3)& (0+255),7,b
 19429  0042' D7F5               	goto	l2697
 19430  0044'                    u7140:
 19431                           
 19432                           ; BSR set to: 0
 19433                           
 19434                           ; BSR set to: 0
 19435                           
 19436                           ; BSR set to: 0
 19437  0044' 0100               	movlb	0	; () banked
 19438  0046' 90D8               	bcf	status,0,c
 19439  0048' 3700'              	rlcf	___lldiv@quotient& (0+255),f,b
 19440  004A' 3700'              	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 19441  004C' 3700'              	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 19442  004E' 3700'              	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 19443                           
 19444                           ; BSR set to: 0
 19445  0050' 0100               	movlb	0	; () banked
 19446  0052' 5100'              	movf	___lldiv@divisor& (0+255),w,b
 19447  0054' 0100               	movlb	0	; () banked
 19448  0056' 5D00'              	subwf	___lldiv@dividend& (0+255),w,b
 19449  0058' 0100               	movlb	0	; () banked
 19450  005A' 5100'              	movf	(___lldiv@divisor+1)& (0+255),w,b
 19451  005C' 0100               	movlb	0	; () banked
 19452  005E' 5900'              	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 19453  0060' 0100               	movlb	0	; () banked
 19454  0062' 5100'              	movf	(___lldiv@divisor+2)& (0+255),w,b
 19455  0064' 0100               	movlb	0	; () banked
 19456  0066' 5900'              	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 19457  0068' 0100               	movlb	0	; () banked
 19458  006A' 5100'              	movf	(___lldiv@divisor+3)& (0+255),w,b
 19459  006C' 0100               	movlb	0	; () banked
 19460  006E' 5900'              	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 19461  0070' A0D8               	btfss	status,0,c
 19462  0072' D012               	goto	l2700
 19463                           
 19464                           ; BSR set to: 0
 19465  0074' 0100               	movlb	0	; () banked
 19466  0076' 5100'              	movf	___lldiv@divisor& (0+255),w,b
 19467  0078' 0100               	movlb	0	; () banked
 19468  007A' 5F00'              	subwf	___lldiv@dividend& (0+255),f,b
 19469  007C' 0100               	movlb	0	; () banked
 19470  007E' 5100'              	movf	(___lldiv@divisor+1)& (0+255),w,b
 19471  0080' 0100               	movlb	0	; () banked
 19472  0082' 5B00'              	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 19473  0084' 0100               	movlb	0	; () banked
 19474  0086' 5100'              	movf	(___lldiv@divisor+2)& (0+255),w,b
 19475  0088' 0100               	movlb	0	; () banked
 19476  008A' 5B00'              	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 19477  008C' 0100               	movlb	0	; () banked
 19478  008E' 5100'              	movf	(___lldiv@divisor+3)& (0+255),w,b
 19479  0090' 0100               	movlb	0	; () banked
 19480  0092' 5B00'              	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 19481                           
 19482                           ; BSR set to: 0
 19483  0094' 0100               	movlb	0	; () banked
 19484  0096' 8100'              	bsf	___lldiv@quotient& (0+255),0,b
 19485  0098'                    l2700:
 19486                           
 19487                           ; BSR set to: 0
 19488                           
 19489                           ; BSR set to: 0
 19490  0098' 0100               	movlb	0	; () banked
 19491  009A' 90D8               	bcf	status,0,c
 19492  009C' 3300'              	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 19493  009E' 3300'              	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 19494  00A0' 3300'              	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 19495  00A2' 3300'              	rrcf	___lldiv@divisor& (0+255),f,b
 19496                           
 19497                           ; BSR set to: 0
 19498  00A4' 0100               	movlb	0	; () banked
 19499  00A6' 2F00'              	decfsz	___lldiv@counter& (0+255),f,b
 19500  00A8' D7CD               	goto	u7140
 19501  00AA'                    l2701:
 19502                           
 19503                           ; BSR set to: 0
 19504                           
 19505                           ; BSR set to: 0
 19506  00AA' C008' F000'        	movff	___lldiv@quotient,?___lldiv
 19507  00AE' C009' F001'        	movff	___lldiv@quotient+1,?___lldiv+1
 19508  00B2' C00A' F002'        	movff	___lldiv@quotient+2,?___lldiv+2
 19509  00B6' C00B' F003'        	movff	___lldiv@quotient+3,?___lldiv+3
 19510                           
 19511                           ; BSR set to: 0
 19512  00BA' 0012               	return		;funcret
 19513  00BC'                    __end_of___lldiv:
 19514                           	opt stack 0
 19515                           tosu	equ	0xFFF
 19516                           tosh	equ	0xFFE
 19517                           tosl	equ	0xFFD
 19518                           pclath	equ	0xFFA
 19519                           tblptru	equ	0xFF8
 19520                           tblptrh	equ	0xFF7
 19521                           tblptrl	equ	0xFF6
 19522                           tablat	equ	0xFF5
 19523                           prodh	equ	0xFF4
 19524                           prodl	equ	0xFF3
 19525                           intcon	equ	0xFF2
 19526                           postinc0	equ	0xFEE
 19527                           wreg	equ	0xFE8
 19528                           indf1	equ	0xFE7
 19529                           postdec1	equ	0xFE5
 19530                           fsr1h	equ	0xFE2
 19531                           fsr1l	equ	0xFE1
 19532                           indf2	equ	0xFDF
 19533                           postinc2	equ	0xFDE
 19534                           postdec2	equ	0xFDD
 19535                           plusw2	equ	0xFDB
 19536                           fsr2h	equ	0xFDA
 19537                           fsr2l	equ	0xFD9
 19538                           status	equ	0xFD8
 19539                           
 19540 ;; *************** function _Timer2_Clear *****************
 19541 ;; Defined at:
 19542 ;;		line 3 in file "Library/Timer2.c"
 19543 ;; Parameters:    Size  Location     Type
 19544 ;;		None
 19545 ;; Auto vars:     Size  Location     Type
 19546 ;;		None
 19547 ;; Return value:  Size  Location     Type
 19548 ;;                  1    wreg      void 
 19549 ;; Registers used:
 19550 ;;		None
 19551 ;; Tracked objects:
 19552 ;;		On entry : 0/0
 19553 ;;		On exit  : 0/0
 19554 ;;		Unchanged: 0/0
 19555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19559 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19560 ;;Total ram usage:        0 bytes
 19561 ;; Hardware stack levels used:    1
 19562 ;; Hardware stack levels required when called:    7
 19563 ;; This function calls:
 19564 ;;		Nothing
 19565 ;; This function is called by:
 19566 ;;		_Timer2_Init
 19567 ;; This function uses a non-reentrant model
 19568 ;;
 19569                           
 19570                           	psect	text107
 19571  0000'                    __ptext107:
 19572                           	opt stack 0
 19573  0000'                    _Timer2_Clear:
 19574                           	opt stack 18
 19575                           
 19576                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 19577                           
 19578                           ; BSR set to: 0
 19579                           ;incstack = 0
 19580  0000' 929E               	bcf	3998,1,c	;volatile
 19581                           
 19582                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 19583  0002' 929D               	bcf	3997,1,c	;volatile
 19584                           
 19585                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 19586  0004' 929F               	bcf	3999,1,c	;volatile
 19587  0006' 0012               	return		;funcret
 19588  0008'                    __end_of_Timer2_Clear:
 19589                           	opt stack 0
 19590                           tosu	equ	0xFFF
 19591                           tosh	equ	0xFFE
 19592                           tosl	equ	0xFFD
 19593                           pclath	equ	0xFFA
 19594                           tblptru	equ	0xFF8
 19595                           tblptrh	equ	0xFF7
 19596                           tblptrl	equ	0xFF6
 19597                           tablat	equ	0xFF5
 19598                           prodh	equ	0xFF4
 19599                           prodl	equ	0xFF3
 19600                           intcon	equ	0xFF2
 19601                           postinc0	equ	0xFEE
 19602                           wreg	equ	0xFE8
 19603                           indf1	equ	0xFE7
 19604                           postdec1	equ	0xFE5
 19605                           fsr1h	equ	0xFE2
 19606                           fsr1l	equ	0xFE1
 19607                           indf2	equ	0xFDF
 19608                           postinc2	equ	0xFDE
 19609                           postdec2	equ	0xFDD
 19610                           plusw2	equ	0xFDB
 19611                           fsr2h	equ	0xFDA
 19612                           fsr2l	equ	0xFD9
 19613                           status	equ	0xFD8
 19614                           
 19615 ;; *************** function _SPI_DisableISR *****************
 19616 ;; Defined at:
 19617 ;;		line 181 in file "Library/SPI.c"
 19618 ;; Parameters:    Size  Location     Type
 19619 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 19620 ;;		 -> SPI1(11), SPI2(11), 
 19621 ;; Auto vars:     Size  Location     Type
 19622 ;;		None
 19623 ;; Return value:  Size  Location     Type
 19624 ;;                  1    wreg      void 
 19625 ;; Registers used:
 19626 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 19627 ;; Tracked objects:
 19628 ;;		On entry : 0/0
 19629 ;;		On exit  : 0/0
 19630 ;;		Unchanged: 0/0
 19631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19632 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19635 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19636 ;;Total ram usage:        2 bytes
 19637 ;; Hardware stack levels used:    1
 19638 ;; Hardware stack levels required when called:    7
 19639 ;; This function calls:
 19640 ;;		Nothing
 19641 ;; This function is called by:
 19642 ;;		_SPI_Init
 19643 ;; This function uses a non-reentrant model
 19644 ;;
 19645                           
 19646                           	psect	text108
 19647  0000'                    __ptext108:
 19648                           	opt stack 0
 19649  0000'                    _SPI_DisableISR:
 19650                           	opt stack 19
 19651                           
 19652                           ;SPI.c: 183: switch (pInput->mChannel)
 19653                           
 19654                           ;incstack = 0
 19655  0000' D004               	goto	l654
 19656  0002'                    l655:
 19657                           
 19658                           ; BSR set to: 0
 19659  0002' 969D               	bcf	3997,3,c	;volatile
 19660  0004' 0012               	return	
 19661  0006'                    l657:
 19662                           
 19663                           ; BSR set to: 0
 19664  0006' 9EA3               	bcf	4003,7,c	;volatile
 19665                           
 19666                           ; BSR set to: 0
 19667                           ;SPI.c: 188: };
 19668                           
 19669                           ; BSR set to: 0
 19670                           
 19671                           ;SPI.c: 187: default: return;
 19672  0008' 0012               	return	
 19673  000A'                    l654:
 19674                           
 19675                           ; BSR set to: 0
 19676  000A' 0100               	movlb	0	; () banked
 19677  000C' EE20 F002          	lfsr	2,2
 19678  0010' 5100'              	movf	SPI_DisableISR@pInput& (0+255),w,b
 19679  0012' 26D9               	addwf	fsr2l,f,c
 19680  0014' 5100'              	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 19681  0016' 22DA               	addwfc	fsr2h,f,c
 19682  0018' 50DF               	movf	indf2,w,c
 19683                           
 19684                           ; Switch size 1, requested type "space"
 19685                           ; Number of cases is 2, Range of values is 0 to 1
 19686                           ; switch strategies available:
 19687                           ; Name         Instructions Cycles
 19688                           ; simple_byte            7     4 (average)
 19689                           ;	Chosen strategy is simple_byte
 19690  001A' 0A00               	xorlw	0	; case 0
 19691  001C' B4D8               	btfsc	status,2,c
 19692  001E' D7F1               	goto	l655
 19693  0020' 0A01               	xorlw	1	; case 1
 19694  0022' A4D8               	btfss	status,2,c
 19695  0024' 0012               	return	
 19696  0026' D7EF               	goto	l657
 19697  0028'                    __end_of_SPI_DisableISR:
 19698                           	opt stack 0
 19699                           tosu	equ	0xFFF
 19700                           tosh	equ	0xFFE
 19701                           tosl	equ	0xFFD
 19702                           pclath	equ	0xFFA
 19703                           tblptru	equ	0xFF8
 19704                           tblptrh	equ	0xFF7
 19705                           tblptrl	equ	0xFF6
 19706                           tablat	equ	0xFF5
 19707                           prodh	equ	0xFF4
 19708                           prodl	equ	0xFF3
 19709                           intcon	equ	0xFF2
 19710                           postinc0	equ	0xFEE
 19711                           wreg	equ	0xFE8
 19712                           indf1	equ	0xFE7
 19713                           postdec1	equ	0xFE5
 19714                           fsr1h	equ	0xFE2
 19715                           fsr1l	equ	0xFE1
 19716                           indf2	equ	0xFDF
 19717                           postinc2	equ	0xFDE
 19718                           postdec2	equ	0xFDD
 19719                           plusw2	equ	0xFDB
 19720                           fsr2h	equ	0xFDA
 19721                           fsr2l	equ	0xFD9
 19722                           status	equ	0xFD8
 19723                           
 19724 ;; *************** function _SPI_DCS *****************
 19725 ;; Defined at:
 19726 ;;		line 219 in file "Library/SPI.c"
 19727 ;; Parameters:    Size  Location     Type
 19728 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 19729 ;;		 -> SPI1(11), SPI2(11), 
 19730 ;; Auto vars:     Size  Location     Type
 19731 ;;		None
 19732 ;; Return value:  Size  Location     Type
 19733 ;;                  1    wreg      void 
 19734 ;; Registers used:
 19735 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 19736 ;; Tracked objects:
 19737 ;;		On entry : 0/0
 19738 ;;		On exit  : 0/0
 19739 ;;		Unchanged: 0/0
 19740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19741 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19744 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19745 ;;Total ram usage:        2 bytes
 19746 ;; Hardware stack levels used:    1
 19747 ;; Hardware stack levels required when called:    7
 19748 ;; This function calls:
 19749 ;;		Nothing
 19750 ;; This function is called by:
 19751 ;;		_SPI_Init
 19752 ;; This function uses a non-reentrant model
 19753 ;;
 19754                           
 19755                           	psect	text109
 19756  0000'                    __ptext109:
 19757                           	opt stack 0
 19758  0000'                    _SPI_DCS:
 19759                           	opt stack 19
 19760                           
 19761                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 19762                           
 19763                           ; BSR set to: 0
 19764                           ;incstack = 0
 19765  0000' 0100               	movlb	0	; () banked
 19766  0002' EE20 F002          	lfsr	2,2
 19767  0006' 5100'              	movf	SPI_DCS@pInput& (0+255),w,b
 19768  0008' 26D9               	addwf	fsr2l,f,c
 19769  000A' 5100'              	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 19770  000C' 22DA               	addwfc	fsr2h,f,c
 19771  000E' 50DF               	movf	indf2,w,c
 19772  0010' A4D8               	btfss	status,2,c
 19773  0012' D007               	goto	l673
 19774                           
 19775                           ; BSR set to: 0
 19776                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 19777  0014' C04D' FFD9         	movff	_PortC+4,fsr2l
 19778  0018' C04E' FFDA         	movff	_PortC+5,fsr2h
 19779  001C' 0100               	movlb	0	; () banked
 19780  001E' 84DF               	bsf	indf2,2,c
 19781  0020' 0012               	return	
 19782  0022'                    l673:
 19783                           
 19784                           ; BSR set to: 0
 19785                           ;SPI.c: 223: else
 19786                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 19787                           
 19788                           ; BSR set to: 0
 19789  0022' C043' FFD9         	movff	_PortD+4,fsr2l
 19790  0026' C044' FFDA         	movff	_PortD+5,fsr2h
 19791  002A' 0100               	movlb	0	; () banked
 19792  002C' 8EDF               	bsf	indf2,7,c
 19793  002E' 0012               	return	
 19794  0030'                    __end_of_SPI_DCS:
 19795                           	opt stack 0
 19796                           tosu	equ	0xFFF
 19797                           tosh	equ	0xFFE
 19798                           tosl	equ	0xFFD
 19799                           pclath	equ	0xFFA
 19800                           tblptru	equ	0xFF8
 19801                           tblptrh	equ	0xFF7
 19802                           tblptrl	equ	0xFF6
 19803                           tablat	equ	0xFF5
 19804                           prodh	equ	0xFF4
 19805                           prodl	equ	0xFF3
 19806                           intcon	equ	0xFF2
 19807                           postinc0	equ	0xFEE
 19808                           wreg	equ	0xFE8
 19809                           indf1	equ	0xFE7
 19810                           postdec1	equ	0xFE5
 19811                           fsr1h	equ	0xFE2
 19812                           fsr1l	equ	0xFE1
 19813                           indf2	equ	0xFDF
 19814                           postinc2	equ	0xFDE
 19815                           postdec2	equ	0xFDD
 19816                           plusw2	equ	0xFDB
 19817                           fsr2h	equ	0xFDA
 19818                           fsr2l	equ	0xFD9
 19819                           status	equ	0xFD8
 19820                           
 19821 ;; *************** function _Button_Init *****************
 19822 ;; Defined at:
 19823 ;;		line 18 in file "Library/Button.c"
 19824 ;; Parameters:    Size  Location     Type
 19825 ;;  pInput          2    0[BANK1 ] const PTR struct Button
 19826 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 19827 ;;  pThreshold      2    2[BANK1 ] unsigned short 
 19828 ;;  pInitIO         3    4[BANK1 ] PTR FTN()void 
 19829 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 19830 ;;  pGetState       3    7[BANK1 ] PTR FTN()unsigned char 
 19831 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 19832 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 19833 ;;  pFunction       3   10[BANK1 ] PTR FTN(unsigned char ,)
 19834 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_NULL(1), 
 19835 ;; Auto vars:     Size  Location     Type
 19836 ;;		None
 19837 ;; Return value:  Size  Location     Type
 19838 ;;                  1    wreg      void 
 19839 ;; Registers used:
 19840 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19841 ;; Tracked objects:
 19842 ;;		On entry : 0/0
 19843 ;;		On exit  : 0/0
 19844 ;;		Unchanged: 0/0
 19845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19846 ;;      Params:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19849 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19850 ;;Total ram usage:       13 bytes
 19851 ;; Hardware stack levels used:    1
 19852 ;; Hardware stack levels required when called:   15
 19853 ;; This function calls:
 19854 ;;		_HMI_InitButtons
 19855 ;;		_MXK_InitDIPSwitch
 19856 ;;		_MXK_InitTestButton
 19857 ;; This function is called by:
 19858 ;;		_HMI_Init
 19859 ;;		_FunctInitButton
 19860 ;; This function uses a non-reentrant model
 19861 ;;
 19862                           
 19863                           	psect	text110
 19864  0000'                    __ptext110:
 19865                           	opt stack 0
 19866  0000'                    _Button_Init:
 19867                           	opt stack 13
 19868                           
 19869                           ;Button.c: 21: if(pInput==(void*)0)
 19870                           
 19871                           ; BSR set to: 0
 19872                           ;incstack = 0
 19873  0000' 0101               	movlb	1	; () banked
 19874  0002' 5100'              	movf	Button_Init@pInput& (0+255),w,b
 19875  0004' 0101               	movlb	1	; () banked
 19876  0006' 1100'              	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 19877  0008' B4D8               	btfsc	status,2,c
 19878  000A' 0012               	return	
 19879                           
 19880                           ; BSR set to: 1
 19881                           ;Button.c: 23: if(pInitIO==(void*)0)
 19882                           
 19883                           ; BSR set to: 1
 19884                           
 19885                           ; BSR set to: 1
 19886                           ;Button.c: 22: return;
 19887  000C' 0101               	movlb	1	; () banked
 19888  000E' 5100'              	movf	Button_Init@pInitIO& (0+255),w,b
 19889  0010' 0101               	movlb	1	; () banked
 19890  0012' 1100'              	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 19891  0014' 0101               	movlb	1	; () banked
 19892  0016' 1100'              	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 19893  0018' B4D8               	btfsc	status,2,c
 19894  001A' 0012               	return	
 19895                           
 19896                           ; BSR set to: 1
 19897                           ;Button.c: 25: if(pGetState==(void*)0)
 19898                           
 19899                           ; BSR set to: 1
 19900                           
 19901                           ; BSR set to: 1
 19902                           ;Button.c: 24: return;
 19903  001C' 0101               	movlb	1	; () banked
 19904  001E' 5100'              	movf	Button_Init@pGetState& (0+255),w,b
 19905  0020' 0101               	movlb	1	; () banked
 19906  0022' 1100'              	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 19907  0024' 0101               	movlb	1	; () banked
 19908  0026' 1100'              	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 19909  0028' B4D8               	btfsc	status,2,c
 19910  002A' 0012               	return	
 19911                           
 19912                           ; BSR set to: 1
 19913                           ;Button.c: 27: if(pFunction==(void*)0)
 19914                           
 19915                           ; BSR set to: 1
 19916                           
 19917                           ; BSR set to: 1
 19918                           ;Button.c: 26: return;
 19919  002C' 0101               	movlb	1	; () banked
 19920  002E' 5100'              	movf	Button_Init@pFunction& (0+255),w,b
 19921  0030' 0101               	movlb	1	; () banked
 19922  0032' 1100'              	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 19923  0034' 0101               	movlb	1	; () banked
 19924  0036' 1100'              	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 19925  0038' B4D8               	btfsc	status,2,c
 19926  003A' 0012               	return	
 19927                           
 19928                           ; BSR set to: 1
 19929                           ;Button.c: 30: if(pThreshold == 0)
 19930                           
 19931                           ; BSR set to: 1
 19932                           
 19933                           ; BSR set to: 1
 19934                           ;Button.c: 28: return;
 19935  003C' 0101               	movlb	1	; () banked
 19936  003E' 5100'              	movf	Button_Init@pThreshold& (0+255),w,b
 19937  0040' 0101               	movlb	1	; () banked
 19938  0042' 1100'              	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 19939  0044' A4D8               	btfss	status,2,c
 19940  0046' D005               	goto	l8
 19941                           
 19942                           ; BSR set to: 1
 19943                           ;Button.c: 31: pThreshold = 1;
 19944  0048' 0E00               	movlw	0
 19945  004A' 0101               	movlb	1	; () banked
 19946  004C' 6F00'              	movwf	(Button_Init@pThreshold+1)& (0+255),b
 19947  004E' 0E01               	movlw	1
 19948  0050' 6F00'              	movwf	Button_Init@pThreshold& (0+255),b
 19949  0052'                    l8:
 19950                           
 19951                           ; BSR set to: 1
 19952                           ;Button.c: 34: pInput->mState = 0;
 19953                           
 19954                           ; BSR set to: 1
 19955  0052' C000' FFD9         	movff	Button_Init@pInput,fsr2l
 19956  0056' C001' FFDA         	movff	Button_Init@pInput+1,fsr2h
 19957  005A' 0E00               	movlw	0
 19958  005C' 6EDF               	movwf	indf2,c
 19959                           
 19960                           ; BSR set to: 1
 19961                           ;Button.c: 35: pInput->mCount = 0;
 19962  005E' 0101               	movlb	1	; () banked
 19963  0060' EE20 F001          	lfsr	2,1
 19964  0064' 5100'              	movf	Button_Init@pInput& (0+255),w,b
 19965  0066' 26D9               	addwf	fsr2l,f,c
 19966  0068' 5100'              	movf	(Button_Init@pInput+1)& (0+255),w,b
 19967  006A' 22DA               	addwfc	fsr2h,f,c
 19968  006C' 0E00               	movlw	0
 19969  006E' 6EDF               	movwf	indf2,c
 19970                           
 19971                           ; BSR set to: 1
 19972                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 19973  0070' 0101               	movlb	1	; () banked
 19974  0072' EE20 F002          	lfsr	2,2
 19975  0076' 5100'              	movf	Button_Init@pInput& (0+255),w,b
 19976  0078' 26D9               	addwf	fsr2l,f,c
 19977  007A' 5100'              	movf	(Button_Init@pInput+1)& (0+255),w,b
 19978  007C' 22DA               	addwfc	fsr2h,f,c
 19979  007E' C002' FFDE         	movff	Button_Init@pThreshold,postinc2
 19980  0082' C003' FFDD         	movff	Button_Init@pThreshold+1,postdec2
 19981                           
 19982                           ; BSR set to: 1
 19983                           ;Button.c: 37: pInput->mFunction = pFunction;
 19984  0086' 0101               	movlb	1	; () banked
 19985  0088' EE20 F004          	lfsr	2,4
 19986  008C' 5100'              	movf	Button_Init@pInput& (0+255),w,b
 19987  008E' 26D9               	addwf	fsr2l,f,c
 19988  0090' 5100'              	movf	(Button_Init@pInput+1)& (0+255),w,b
 19989  0092' 22DA               	addwfc	fsr2h,f,c
 19990  0094' C00A' FFDE         	movff	Button_Init@pFunction,postinc2
 19991  0098' C00B' FFDE         	movff	Button_Init@pFunction+1,postinc2
 19992  009C' C00C' FFDE         	movff	Button_Init@pFunction+2,postinc2
 19993                           
 19994                           ; BSR set to: 1
 19995                           ;Button.c: 38: pInput->mGetState = pGetState;
 19996  00A0' 0101               	movlb	1	; () banked
 19997  00A2' EE20 F007          	lfsr	2,7
 19998  00A6' 5100'              	movf	Button_Init@pInput& (0+255),w,b
 19999  00A8' 26D9               	addwf	fsr2l,f,c
 20000  00AA' 5100'              	movf	(Button_Init@pInput+1)& (0+255),w,b
 20001  00AC' 22DA               	addwfc	fsr2h,f,c
 20002  00AE' C007' FFDE         	movff	Button_Init@pGetState,postinc2
 20003  00B2' C008' FFDE         	movff	Button_Init@pGetState+1,postinc2
 20004  00B6' C009' FFDE         	movff	Button_Init@pGetState+2,postinc2
 20005                           
 20006                           ; BSR set to: 1
 20007                           ;Button.c: 41: pInitIO();
 20008  00BA' D801               	call	u7758
 20009  00BC' 0012               	return	
 20010  00BE'                    u7758:
 20011  00BE' 0005               	push	
 20012  00C0' 6EFA               	movwf	pclath,c
 20013  00C2' 0101               	movlb	1	; () banked
 20014  00C4' 5100'              	movf	Button_Init@pInitIO& (0+255),w,b
 20015  00C6' 6EFD               	movwf	tosl,c
 20016  00C8' 5100'              	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 20017  00CA' 6EFE               	movwf	tosh,c
 20018  00CC' 5100'              	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 20019  00CE' 6EFF               	movwf	tosu,c
 20020  00D0' 50FA               	movf	pclath,w,c
 20021  00D2' 0012               	return		;indir
 20022  00D4'                    __end_of_Button_Init:
 20023                           	opt stack 0
 20024                           tosu	equ	0xFFF
 20025                           tosh	equ	0xFFE
 20026                           tosl	equ	0xFFD
 20027                           pclath	equ	0xFFA
 20028                           tblptru	equ	0xFF8
 20029                           tblptrh	equ	0xFF7
 20030                           tblptrl	equ	0xFF6
 20031                           tablat	equ	0xFF5
 20032                           prodh	equ	0xFF4
 20033                           prodl	equ	0xFF3
 20034                           intcon	equ	0xFF2
 20035                           postinc0	equ	0xFEE
 20036                           wreg	equ	0xFE8
 20037                           indf1	equ	0xFE7
 20038                           postdec1	equ	0xFE5
 20039                           fsr1h	equ	0xFE2
 20040                           fsr1l	equ	0xFE1
 20041                           indf2	equ	0xFDF
 20042                           postinc2	equ	0xFDE
 20043                           postdec2	equ	0xFDD
 20044                           plusw2	equ	0xFDB
 20045                           fsr2h	equ	0xFDA
 20046                           fsr2l	equ	0xFD9
 20047                           status	equ	0xFD8
 20048                           
 20049 ;; *************** function _MXK_InitDIPSwitch *****************
 20050 ;; Defined at:
 20051 ;;		line 20 in file "Library/MXK.c"
 20052 ;; Parameters:    Size  Location     Type
 20053 ;;		None
 20054 ;; Auto vars:     Size  Location     Type
 20055 ;;		None
 20056 ;; Return value:  Size  Location     Type
 20057 ;;                  1    wreg      void 
 20058 ;; Registers used:
 20059 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20060 ;; Tracked objects:
 20061 ;;		On entry : 0/0
 20062 ;;		On exit  : 0/0
 20063 ;;		Unchanged: 0/0
 20064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20068 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20069 ;;Total ram usage:        0 bytes
 20070 ;; Hardware stack levels used:    1
 20071 ;; Hardware stack levels required when called:   14
 20072 ;; This function calls:
 20073 ;;		_Port_SetQuadType
 20074 ;; This function is called by:
 20075 ;;		_FunctInitButton
 20076 ;;		_Button_Init
 20077 ;; This function uses a non-reentrant model
 20078 ;;
 20079                           
 20080                           	psect	text111
 20081  0000'                    __ptext111:
 20082                           	opt stack 0
 20083  0000'                    _MXK_InitDIPSwitch:
 20084                           	opt stack 13
 20085                           
 20086                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 20087                           
 20088                           ;incstack = 0
 20089  0000' 0E00'              	movlw	low _PortD
 20090  0002' 0100               	movlb	0	; () banked
 20091  0004' 6F00'              	movwf	Port_SetQuadType@pInput& (0+255),b
 20092  0006' 0E00'              	movlw	high _PortD
 20093  0008' 0100               	movlb	0	; () banked
 20094  000A' 6F00'              	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 20095  000C' 0E00               	movlw	0
 20096  000E' 0100               	movlb	0	; () banked
 20097  0010' 6F00'              	movwf	Port_SetQuadType@pQuad& (0+255),b
 20098  0012' 0E00               	movlw	0
 20099  0014' 0100               	movlb	0	; () banked
 20100  0016' 6F00'              	movwf	Port_SetQuadType@pType& (0+255),b
 20101  0018' EC00' F000'        	call	_Port_SetQuadType	;wreg free
 20102  001C' 0012               	return		;funcret
 20103  001E'                    __end_of_MXK_InitDIPSwitch:
 20104                           	opt stack 0
 20105                           tosu	equ	0xFFF
 20106                           tosh	equ	0xFFE
 20107                           tosl	equ	0xFFD
 20108                           pclath	equ	0xFFA
 20109                           tblptru	equ	0xFF8
 20110                           tblptrh	equ	0xFF7
 20111                           tblptrl	equ	0xFF6
 20112                           tablat	equ	0xFF5
 20113                           prodh	equ	0xFF4
 20114                           prodl	equ	0xFF3
 20115                           intcon	equ	0xFF2
 20116                           postinc0	equ	0xFEE
 20117                           wreg	equ	0xFE8
 20118                           indf1	equ	0xFE7
 20119                           postdec1	equ	0xFE5
 20120                           fsr1h	equ	0xFE2
 20121                           fsr1l	equ	0xFE1
 20122                           indf2	equ	0xFDF
 20123                           postinc2	equ	0xFDE
 20124                           postdec2	equ	0xFDD
 20125                           plusw2	equ	0xFDB
 20126                           fsr2h	equ	0xFDA
 20127                           fsr2l	equ	0xFD9
 20128                           status	equ	0xFD8
 20129                           
 20130 ;; *************** function _HMI_InitButtons *****************
 20131 ;; Defined at:
 20132 ;;		line 21 in file "HMI.c"
 20133 ;; Parameters:    Size  Location     Type
 20134 ;;		None
 20135 ;; Auto vars:     Size  Location     Type
 20136 ;;		None
 20137 ;; Return value:  Size  Location     Type
 20138 ;;                  1    wreg      void 
 20139 ;; Registers used:
 20140 ;;		wreg, status,2
 20141 ;; Tracked objects:
 20142 ;;		On entry : 0/0
 20143 ;;		On exit  : 0/0
 20144 ;;		Unchanged: 0/0
 20145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20149 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20150 ;;Total ram usage:        0 bytes
 20151 ;; Hardware stack levels used:    1
 20152 ;; Hardware stack levels required when called:    7
 20153 ;; This function calls:
 20154 ;;		Nothing
 20155 ;; This function is called by:
 20156 ;;		_HMI_Init
 20157 ;;		_Button_Init
 20158 ;; This function uses a non-reentrant model
 20159 ;;
 20160                           
 20161                           	psect	text112
 20162  0000'                    __ptext112:
 20163                           	opt stack 0
 20164  0000'                    _HMI_InitButtons:
 20165                           	opt stack 20
 20166                           
 20167                           ;HMI.c: 23: TRISE = 0xFC;
 20168                           
 20169                           ;incstack = 0
 20170  0000' 0EFC               	movlw	252
 20171  0002' 6E96               	movwf	3990,c	;volatile
 20172  0004' 0012               	return		;funcret
 20173  0006'                    __end_of_HMI_InitButtons:
 20174                           	opt stack 0
 20175                           tosu	equ	0xFFF
 20176                           tosh	equ	0xFFE
 20177                           tosl	equ	0xFFD
 20178                           pclath	equ	0xFFA
 20179                           tblptru	equ	0xFF8
 20180                           tblptrh	equ	0xFF7
 20181                           tblptrl	equ	0xFF6
 20182                           tablat	equ	0xFF5
 20183                           prodh	equ	0xFF4
 20184                           prodl	equ	0xFF3
 20185                           intcon	equ	0xFF2
 20186                           postinc0	equ	0xFEE
 20187                           wreg	equ	0xFE8
 20188                           indf1	equ	0xFE7
 20189                           postdec1	equ	0xFE5
 20190                           fsr1h	equ	0xFE2
 20191                           fsr1l	equ	0xFE1
 20192                           indf2	equ	0xFDF
 20193                           postinc2	equ	0xFDE
 20194                           postdec2	equ	0xFDD
 20195                           plusw2	equ	0xFDB
 20196                           fsr2h	equ	0xFDA
 20197                           fsr2l	equ	0xFD9
 20198                           status	equ	0xFD8
 20199                           
 20200 ;; *************** function _MXK_InitTestButton *****************
 20201 ;; Defined at:
 20202 ;;		line 10 in file "Library/MXK.c"
 20203 ;; Parameters:    Size  Location     Type
 20204 ;;		None
 20205 ;; Auto vars:     Size  Location     Type
 20206 ;;		None
 20207 ;; Return value:  Size  Location     Type
 20208 ;;                  1    wreg      void 
 20209 ;; Registers used:
 20210 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20211 ;; Tracked objects:
 20212 ;;		On entry : 0/0
 20213 ;;		On exit  : 0/0
 20214 ;;		Unchanged: 0/0
 20215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20219 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20220 ;;Total ram usage:        0 bytes
 20221 ;; Hardware stack levels used:    1
 20222 ;; Hardware stack levels required when called:   12
 20223 ;; This function calls:
 20224 ;;		_Port_SetPinType
 20225 ;; This function is called by:
 20226 ;;		_FunctInitButton
 20227 ;;		_Button_Init
 20228 ;; This function uses a non-reentrant model
 20229 ;;
 20230                           
 20231                           	psect	text113
 20232  0000'                    __ptext113:
 20233                           	opt stack 0
 20234  0000'                    _MXK_InitTestButton:
 20235                           	opt stack 15
 20236                           
 20237                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 20238                           
 20239                           ;incstack = 0
 20240  0000' 0E00'              	movlw	low _PortB
 20241  0002' 0100               	movlb	0	; () banked
 20242  0004' 6F00'              	movwf	Port_SetPinType@pInput& (0+255),b
 20243  0006' 0E00'              	movlw	high _PortB
 20244  0008' 0100               	movlb	0	; () banked
 20245  000A' 6F00'              	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20246  000C' 0E04               	movlw	4
 20247  000E' 0100               	movlb	0	; () banked
 20248  0010' 6F00'              	movwf	Port_SetPinType@pPin& (0+255),b
 20249  0012' 0E00               	movlw	0
 20250  0014' 0100               	movlb	0	; () banked
 20251  0016' 6F00'              	movwf	Port_SetPinType@pType& (0+255),b
 20252  0018' EC00' F000'        	call	_Port_SetPinType	;wreg free
 20253  001C' 0012               	return		;funcret
 20254  001E'                    __end_of_MXK_InitTestButton:
 20255                           	opt stack 0
 20256                           tosu	equ	0xFFF
 20257                           tosh	equ	0xFFE
 20258                           tosl	equ	0xFFD
 20259                           pclath	equ	0xFFA
 20260                           tblptru	equ	0xFF8
 20261                           tblptrh	equ	0xFF7
 20262                           tblptrl	equ	0xFF6
 20263                           tablat	equ	0xFF5
 20264                           prodh	equ	0xFF4
 20265                           prodl	equ	0xFF3
 20266                           intcon	equ	0xFF2
 20267                           postinc0	equ	0xFEE
 20268                           wreg	equ	0xFE8
 20269                           indf1	equ	0xFE7
 20270                           postdec1	equ	0xFE5
 20271                           fsr1h	equ	0xFE2
 20272                           fsr1l	equ	0xFE1
 20273                           indf2	equ	0xFDF
 20274                           postinc2	equ	0xFDE
 20275                           postdec2	equ	0xFDD
 20276                           plusw2	equ	0xFDB
 20277                           fsr2h	equ	0xFDA
 20278                           fsr2l	equ	0xFD9
 20279                           status	equ	0xFD8
 20280                           
 20281 ;; *************** function _Port_SetPinType *****************
 20282 ;; Defined at:
 20283 ;;		line 189 in file "Library/Port.c"
 20284 ;; Parameters:    Size  Location     Type
 20285 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 20286 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 20287 ;;		 -> PortD(10), PortC(10), PortF(10), 
 20288 ;;  pPin            1   40[BANK0 ] enum E6750
 20289 ;;  pType           1   41[BANK0 ] enum E6795
 20290 ;; Auto vars:     Size  Location     Type
 20291 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 20292 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 20293 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 20294 ;;  Output          1   42[BANK0 ] enum E6475
 20295 ;; Return value:  Size  Location     Type
 20296 ;;                  1    wreg      enum E6475
 20297 ;; Registers used:
 20298 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20299 ;; Tracked objects:
 20300 ;;		On entry : 0/0
 20301 ;;		On exit  : 0/0
 20302 ;;		Unchanged: 0/0
 20303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20304 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20305 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20307 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20308 ;;Total ram usage:        7 bytes
 20309 ;; Hardware stack levels used:    1
 20310 ;; Hardware stack levels required when called:   11
 20311 ;; This function calls:
 20312 ;;		_Byte_SetBit
 20313 ;;		_PortProperty_Valid
 20314 ;;		_Word_SetPair
 20315 ;; This function is called by:
 20316 ;;		_Configure_GPIOs
 20317 ;;		_LED_Init
 20318 ;;		_Port_Init
 20319 ;;		_SPI_Init
 20320 ;;		_MXK_InitTestButton
 20321 ;;		_MXK_Init
 20322 ;;		_I2C_Init
 20323 ;;		_Motor_Init
 20324 ;; This function uses a non-reentrant model
 20325 ;;
 20326                           
 20327                           	psect	text114
 20328  0000'                    __ptext114:
 20329                           	opt stack 0
 20330  0000'                    _Port_SetPinType:
 20331                           	opt stack 17
 20332                           
 20333                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 20334                           
 20335                           ;incstack = 0
 20336  0000' C026' FFD9         	movff	Port_SetPinType@pInput,fsr2l
 20337  0004' C027' FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 20338  0008' CFDE F02B'         	movff	postinc2,Port_SetPinType@Props
 20339  000C' CFDD F02C'         	movff	postdec2,Port_SetPinType@Props+1
 20340                           
 20341                           ;Port.c: 192: ePinError Output = ePinErrorState;
 20342  0010' 0E05               	movlw	5
 20343  0012' 0100               	movlb	0	; () banked
 20344  0014' 6F00'              	movwf	Port_SetPinType@Output& (0+255),b
 20345                           
 20346                           ;Port.c: 193: switch (pType)
 20347  0016' D0B5               	goto	l412
 20348  0018'                    
 20349                           ; BSR set to: 0
 20350                           ;Port.c: 197: {
 20351                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 20352                           
 20353                           ; BSR set to: 0
 20354  0018' 0100               	movlb	0	; () banked
 20355  001A' EE20 F002          	lfsr	2,2
 20356  001E' 5100'              	movf	Port_SetPinType@pInput& (0+255),w,b
 20357  0020' 26D9               	addwf	fsr2l,f,c
 20358  0022' 5100'              	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 20359  0024' 22DA               	addwfc	fsr2h,f,c
 20360  0026' CFDE F000'         	movff	postinc2,Byte_SetBit@pInput
 20361  002A' CFDD F001'         	movff	postdec2,Byte_SetBit@pInput+1
 20362  002E' C028' F002'        	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 20363  0032' 0E01               	movlw	1
 20364  0034' 0100               	movlb	0	; () banked
 20365  0036' 6F00'              	movwf	Byte_SetBit@pValue& (0+255),b
 20366  0038' EC00' F000'        	call	_Byte_SetBit	;wreg free
 20367                           
 20368                           ;Port.c: 203: break;
 20369  003C' D0B0               	goto	l414
 20370  003E'                    
 20371                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 20372  003E' C02B' F00F'        	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 20373  0042' C02C' F010'        	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 20374  0046' 0E01               	movlw	1
 20375  0048' 0100               	movlb	0	; () banked
 20376  004A' 6F00'              	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 20377  004C' C028' F012'        	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 20378  0050' EC00' F000'        	call	_PortProperty_Valid	;wreg free
 20379  0054' 0100               	movlb	0	; () banked
 20380  0056' 6F00'              	movwf	Port_SetPinType@Output& (0+255),b
 20381  0058' 0100               	movlb	0	; () banked
 20382  005A' 5100'              	movf	Port_SetPinType@Output& (0+255),w,b
 20383  005C' A4D8               	btfss	status,2,c
 20384  005E' 0012               	return	
 20385                           
 20386                           ; BSR set to: 0
 20387                           ;Port.c: 208: {
 20388                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 20389  0060' 0100               	movlb	0	; () banked
 20390  0062' EE20 F002          	lfsr	2,2
 20391  0066' 5100'              	movf	Port_SetPinType@pInput& (0+255),w,b
 20392  0068' 26D9               	addwf	fsr2l,f,c
 20393  006A' 5100'              	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 20394  006C' 22DA               	addwfc	fsr2h,f,c
 20395  006E' CFDE F000'         	movff	postinc2,Byte_SetBit@pInput
 20396  0072' CFDD F001'         	movff	postdec2,Byte_SetBit@pInput+1
 20397  0076' C028' F002'        	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 20398  007A' 0E00               	movlw	0
 20399  007C' 0100               	movlb	0	; () banked
 20400  007E' 6F00'              	movwf	Byte_SetBit@pValue& (0+255),b
 20401  0080' EC00' F000'        	call	_Byte_SetBit	;wreg free
 20402                           
 20403                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 20404  0084' 0100               	movlb	0	; () banked
 20405  0086' EE20 F004          	lfsr	2,4
 20406  008A' 5100'              	movf	Port_SetPinType@pInput& (0+255),w,b
 20407  008C' 26D9               	addwf	fsr2l,f,c
 20408  008E' 5100'              	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 20409  0090' 22DA               	addwfc	fsr2h,f,c
 20410  0092' CFDE F000'         	movff	postinc2,Byte_SetBit@pInput
 20411  0096' CFDD F001'         	movff	postdec2,Byte_SetBit@pInput+1
 20412  009A' C028' F002'        	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 20413  009E' 0E00               	movlw	0
 20414  00A0' 0100               	movlb	0	; () banked
 20415  00A2' 6F00'              	movwf	Byte_SetBit@pValue& (0+255),b
 20416  00A4' EC00' F000'        	call	_Byte_SetBit	;wreg free
 20417                           
 20418                           ;Port.c: 214: break;
 20419  00A8' D07A               	goto	l414
 20420  00AA'                    
 20421                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 20422                           
 20423                           ;Port.c: 218: case eTypeOutputOpenSource:
 20424  00AA' C02B' F00F'        	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 20425  00AE' C02C' F010'        	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 20426  00B2' 0E02               	movlw	2
 20427  00B4' 0100               	movlb	0	; () banked
 20428  00B6' 6F00'              	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 20429  00B8' C028' F012'        	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 20430  00BC' EC00' F000'        	call	_PortProperty_Valid	;wreg free
 20431  00C0' 0100               	movlb	0	; () banked
 20432  00C2' 6F00'              	movwf	Port_SetPinType@Output& (0+255),b
 20433  00C4' 0100               	movlb	0	; () banked
 20434  00C6' 5100'              	movf	Port_SetPinType@Output& (0+255),w,b
 20435  00C8' A4D8               	btfss	status,2,c
 20436  00CA' 0012               	return	
 20437                           
 20438                           ; BSR set to: 0
 20439                           ;Port.c: 220: {
 20440                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 20441  00CC' 0100               	movlb	0	; () banked
 20442  00CE' EE20 F002          	lfsr	2,2
 20443  00D2' 5100'              	movf	Port_SetPinType@pInput& (0+255),w,b
 20444  00D4' 26D9               	addwf	fsr2l,f,c
 20445  00D6' 5100'              	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 20446  00D8' 22DA               	addwfc	fsr2h,f,c
 20447  00DA' CFDE F000'         	movff	postinc2,Byte_SetBit@pInput
 20448  00DE' CFDD F001'         	movff	postdec2,Byte_SetBit@pInput+1
 20449  00E2' C028' F002'        	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 20450  00E6' 0E01               	movlw	1
 20451  00E8' 0100               	movlb	0	; () banked
 20452  00EA' 6F00'              	movwf	Byte_SetBit@pValue& (0+255),b
 20453  00EC' EC00' F000'        	call	_Byte_SetBit	;wreg free
 20454                           
 20455                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 20456  00F0' 0100               	movlb	0	; () banked
 20457  00F2' EE20 F004          	lfsr	2,4
 20458  00F6' 5100'              	movf	Port_SetPinType@pInput& (0+255),w,b
 20459  00F8' 26D9               	addwf	fsr2l,f,c
 20460  00FA' 5100'              	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 20461  00FC' 22DA               	addwfc	fsr2h,f,c
 20462  00FE' CFDE F000'         	movff	postinc2,Byte_SetBit@pInput
 20463  0102' CFDD F001'         	movff	postdec2,Byte_SetBit@pInput+1
 20464  0106' C028' F002'        	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 20465  010A' 0E01               	movlw	1
 20466  010C' 0100               	movlb	0	; () banked
 20467  010E' 6F00'              	movwf	Byte_SetBit@pValue& (0+255),b
 20468  0110' EC00' F000'        	call	_Byte_SetBit	;wreg free
 20469                           
 20470                           ;Port.c: 226: break;
 20471  0114' D044               	goto	l414
 20472  0116'                    
 20473                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 20474                           
 20475                           ;Port.c: 230: case eTypeOutputPushPull:
 20476  0116' C02B' F00F'        	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 20477  011A' C02C' F010'        	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 20478  011E' 0E00               	movlw	0
 20479  0120' 0100               	movlb	0	; () banked
 20480  0122' 6F00'              	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 20481  0124' C028' F012'        	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 20482  0128' EC00' F000'        	call	_PortProperty_Valid	;wreg free
 20483  012C' 0100               	movlb	0	; () banked
 20484  012E' 6F00'              	movwf	Port_SetPinType@Output& (0+255),b
 20485  0130' 0100               	movlb	0	; () banked
 20486  0132' 5100'              	movf	Port_SetPinType@Output& (0+255),w,b
 20487  0134' A4D8               	btfss	status,2,c
 20488  0136' 0012               	return	
 20489                           
 20490                           ; BSR set to: 0
 20491                           ;Port.c: 232: {
 20492                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 20493  0138' 0100               	movlb	0	; () banked
 20494  013A' EE20 F002          	lfsr	2,2
 20495  013E' 5100'              	movf	Port_SetPinType@pInput& (0+255),w,b
 20496  0140' 26D9               	addwf	fsr2l,f,c
 20497  0142' 5100'              	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 20498  0144' 22DA               	addwfc	fsr2h,f,c
 20499  0146' CFDE F000'         	movff	postinc2,Byte_SetBit@pInput
 20500  014A' CFDD F001'         	movff	postdec2,Byte_SetBit@pInput+1
 20501  014E' C028' F002'        	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 20502  0152' 0E00               	movlw	0
 20503  0154' 0100               	movlb	0	; () banked
 20504  0156' 6F00'              	movwf	Byte_SetBit@pValue& (0+255),b
 20505  0158' EC00' F000'        	call	_Byte_SetBit	;wreg free
 20506                           
 20507                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 20508  015C' 0100               	movlb	0	; () banked
 20509  015E' EE20 F004          	lfsr	2,4
 20510  0162' 5100'              	movf	Port_SetPinType@pInput& (0+255),w,b
 20511  0164' 26D9               	addwf	fsr2l,f,c
 20512  0166' 5100'              	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 20513  0168' 22DA               	addwfc	fsr2h,f,c
 20514  016A' CFDE F000'         	movff	postinc2,Byte_SetBit@pInput
 20515  016E' CFDD F001'         	movff	postdec2,Byte_SetBit@pInput+1
 20516  0172' C028' F002'        	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 20517  0176' 0E00               	movlw	0
 20518  0178' 0100               	movlb	0	; () banked
 20519  017A' 6F00'              	movwf	Byte_SetBit@pValue& (0+255),b
 20520  017C' EC00' F000'        	call	_Byte_SetBit	;wreg free
 20521                           
 20522                           ;Port.c: 239: }
 20523                           
 20524                           ;Port.c: 238: break;
 20525  0180' D00E               	goto	l414
 20526  0182'                    l412:
 20527  0182' 0100               	movlb	0	; () banked
 20528  0184' 5100'              	movf	Port_SetPinType@pType& (0+255),w,b
 20529                           
 20530                           ; Switch size 1, requested type "space"
 20531                           ; Number of cases is 4, Range of values is 0 to 3
 20532                           ; switch strategies available:
 20533                           ; Name         Instructions Cycles
 20534                           ; simple_byte           13     7 (average)
 20535                           ;	Chosen strategy is simple_byte
 20536  0186' 0A00               	xorlw	0	; case 0
 20537  0188' B4D8               	btfsc	status,2,c
 20538  018A' D746               	goto	l413
 20539  018C' 0A01               	xorlw	1	; case 1
 20540  018E' B4D8               	btfsc	status,2,c
 20541  0190' D756               	goto	l415
 20542  0192' 0A03               	xorlw	3	; case 2
 20543  0194' B4D8               	btfsc	status,2,c
 20544  0196' D789               	goto	l417
 20545  0198' 0A01               	xorlw	1	; case 3
 20546  019A' B4D8               	btfsc	status,2,c
 20547  019C' D7BC               	goto	l421
 20548  019E'                    l414:
 20549                           
 20550                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 20551                           
 20552                           ; BSR set to: 0
 20553  019E' 0E08               	movlw	8
 20554  01A0' 0100               	movlb	0	; () banked
 20555  01A2' 2500'              	addwf	Port_SetPinType@pInput& (0+255),w,b
 20556  01A4' 0100               	movlb	0	; () banked
 20557  01A6' 6F00'              	movwf	Word_SetPair@pInput& (0+255),b
 20558  01A8' 0E00               	movlw	0
 20559  01AA' 0100               	movlb	0	; () banked
 20560  01AC' 2100'              	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 20561  01AE' 0100               	movlb	0	; () banked
 20562  01B0' 6F00'              	movwf	(Word_SetPair@pInput+1)& (0+255),b
 20563  01B2' C028' F011'        	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 20564  01B6' C029' F012'        	movff	Port_SetPinType@pType,Word_SetPair@pValue
 20565  01BA' EC00' F000'        	call	_Word_SetPair	;wreg free
 20566  01BE' 0012               	return	
 20567  01C0'                    __end_of_Port_SetPinType:
 20568                           	opt stack 0
 20569                           tosu	equ	0xFFF
 20570                           tosh	equ	0xFFE
 20571                           tosl	equ	0xFFD
 20572                           pclath	equ	0xFFA
 20573                           tblptru	equ	0xFF8
 20574                           tblptrh	equ	0xFF7
 20575                           tblptrl	equ	0xFF6
 20576                           tablat	equ	0xFF5
 20577                           prodh	equ	0xFF4
 20578                           prodl	equ	0xFF3
 20579                           intcon	equ	0xFF2
 20580                           postinc0	equ	0xFEE
 20581                           wreg	equ	0xFE8
 20582                           indf1	equ	0xFE7
 20583                           postdec1	equ	0xFE5
 20584                           fsr1h	equ	0xFE2
 20585                           fsr1l	equ	0xFE1
 20586                           indf2	equ	0xFDF
 20587                           postinc2	equ	0xFDE
 20588                           postdec2	equ	0xFDD
 20589                           plusw2	equ	0xFDB
 20590                           fsr2h	equ	0xFDA
 20591                           fsr2l	equ	0xFD9
 20592                           status	equ	0xFD8
 20593                           
 20594 ;; *************** function _Byte_SetBit *****************
 20595 ;; Defined at:
 20596 ;;		line 32 in file "Library/Types.c"
 20597 ;; Parameters:    Size  Location     Type
 20598 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 20599 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 20600 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 20601 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 20602 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 20603 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 20604 ;;		 -> NULL(0), 
 20605 ;;  pBit            1    2[BANK0 ] unsigned char 
 20606 ;;  pValue          1    3[BANK0 ] unsigned char 
 20607 ;; Auto vars:     Size  Location     Type
 20608 ;;		None
 20609 ;; Return value:  Size  Location     Type
 20610 ;;                  1    wreg      void 
 20611 ;; Registers used:
 20612 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 20613 ;; Tracked objects:
 20614 ;;		On entry : 0/0
 20615 ;;		On exit  : 0/0
 20616 ;;		Unchanged: 0/0
 20617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20618 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20620 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20621 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20622 ;;Total ram usage:        7 bytes
 20623 ;; Hardware stack levels used:    1
 20624 ;; Hardware stack levels required when called:    7
 20625 ;; This function calls:
 20626 ;;		Nothing
 20627 ;; This function is called by:
 20628 ;;		_Port_SetPinType
 20629 ;;		_Port_SetPin
 20630 ;;		_SPI_Init
 20631 ;;		_SPI_MinSpeed
 20632 ;;		_SPI_MaxSpeed
 20633 ;;		_Word_SetBit
 20634 ;;		_I2C_Init
 20635 ;; This function uses a non-reentrant model
 20636 ;;
 20637                           
 20638                           	psect	text115
 20639  0000'                    __ptext115:
 20640                           	opt stack 0
 20641  0000'                    _Byte_SetBit:
 20642                           	opt stack 19
 20643                           
 20644                           ;Types.c: 34: pValue &= 1;
 20645                           
 20646                           ;incstack = 0
 20647  0000' 0E01               	movlw	1
 20648  0002' 0100               	movlb	0	; () banked
 20649  0004' 1700'              	andwf	Byte_SetBit@pValue& (0+255),f,b
 20650                           
 20651                           ; BSR set to: 0
 20652                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 20653  0006' C002' F004'        	movff	Byte_SetBit@pBit,??_Byte_SetBit
 20654  000A' 0E01               	movlw	1
 20655  000C' 0100               	movlb	0	; () banked
 20656  000E' 6F00'              	movwf	(??_Byte_SetBit+1)& (0+255),b
 20657  0010' 0100               	movlb	0	; () banked
 20658  0012' 2B00'              	incf	??_Byte_SetBit& (0+255),f,b
 20659  0014' D003               	goto	u6734
 20660  0016'                    u6735:
 20661  0016' 0100               	movlb	0	; () banked
 20662  0018' 90D8               	bcf	status,0,c
 20663  001A' 3700'              	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 20664  001C'                    u6734:
 20665  001C' 0100               	movlb	0	; () banked
 20666  001E' 2F00'              	decfsz	??_Byte_SetBit& (0+255),f,b
 20667  0020' D7FA               	goto	u6735
 20668  0022' 0100               	movlb	0	; () banked
 20669  0024' 5100'              	movf	(??_Byte_SetBit+1)& (0+255),w,b
 20670  0026' 0AFF               	xorlw	255
 20671  0028' 0100               	movlb	0	; () banked
 20672  002A' 6F00'              	movwf	(??_Byte_SetBit+2)& (0+255),b
 20673  002C' C000' FFD9         	movff	Byte_SetBit@pInput,fsr2l
 20674  0030' C001' FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 20675  0034' 0100               	movlb	0	; () banked
 20676  0036' 5100'              	movf	(??_Byte_SetBit+2)& (0+255),w,b
 20677  0038' 16DF               	andwf	indf2,f,c
 20678                           
 20679                           ; BSR set to: 0
 20680                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 20681  003A' C002' F004'        	movff	Byte_SetBit@pBit,??_Byte_SetBit
 20682  003E' C003' F005'        	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 20683  0042' 0100               	movlb	0	; () banked
 20684  0044' 2B00'              	incf	??_Byte_SetBit& (0+255),f,b
 20685  0046' D003               	goto	u6744
 20686  0048'                    u6745:
 20687  0048' 0100               	movlb	0	; () banked
 20688  004A' 90D8               	bcf	status,0,c
 20689  004C' 3700'              	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 20690  004E'                    u6744:
 20691  004E' 0100               	movlb	0	; () banked
 20692  0050' 2F00'              	decfsz	??_Byte_SetBit& (0+255),f,b
 20693  0052' D7FA               	goto	u6745
 20694  0054' C000' FFD9         	movff	Byte_SetBit@pInput,fsr2l
 20695  0058' C001' FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 20696  005C' 0100               	movlb	0	; () banked
 20697  005E' 5100'              	movf	(??_Byte_SetBit+1)& (0+255),w,b
 20698  0060' 12DF               	iorwf	indf2,f,c
 20699                           
 20700                           ; BSR set to: 0
 20701  0062' 0012               	return		;funcret
 20702  0064'                    __end_of_Byte_SetBit:
 20703                           	opt stack 0
 20704                           tosu	equ	0xFFF
 20705                           tosh	equ	0xFFE
 20706                           tosl	equ	0xFFD
 20707                           pclath	equ	0xFFA
 20708                           tblptru	equ	0xFF8
 20709                           tblptrh	equ	0xFF7
 20710                           tblptrl	equ	0xFF6
 20711                           tablat	equ	0xFF5
 20712                           prodh	equ	0xFF4
 20713                           prodl	equ	0xFF3
 20714                           intcon	equ	0xFF2
 20715                           postinc0	equ	0xFEE
 20716                           wreg	equ	0xFE8
 20717                           indf1	equ	0xFE7
 20718                           postdec1	equ	0xFE5
 20719                           fsr1h	equ	0xFE2
 20720                           fsr1l	equ	0xFE1
 20721                           indf2	equ	0xFDF
 20722                           postinc2	equ	0xFDE
 20723                           postdec2	equ	0xFDD
 20724                           plusw2	equ	0xFDB
 20725                           fsr2h	equ	0xFDA
 20726                           fsr2l	equ	0xFD9
 20727                           status	equ	0xFD8
 20728                           
 20729 ;; *************** function _Port_SetQuadType *****************
 20730 ;; Defined at:
 20731 ;;		line 399 in file "Library/Port.c"
 20732 ;; Parameters:    Size  Location     Type
 20733 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 20734 ;;		 -> PortB(10), PortD(10), 
 20735 ;;  pQuad           1   56[BANK0 ] enum E6776
 20736 ;;  pType           1   57[BANK0 ] enum E6795
 20737 ;; Auto vars:     Size  Location     Type
 20738 ;;  Output          1   58[BANK0 ] enum E6475
 20739 ;; Return value:  Size  Location     Type
 20740 ;;                  1    wreg      enum E6475
 20741 ;; Registers used:
 20742 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20743 ;; Tracked objects:
 20744 ;;		On entry : 0/0
 20745 ;;		On exit  : 0/0
 20746 ;;		Unchanged: 0/0
 20747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20748 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20749 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20751 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20752 ;;Total ram usage:        5 bytes
 20753 ;; Hardware stack levels used:    1
 20754 ;; Hardware stack levels required when called:   13
 20755 ;; This function calls:
 20756 ;;		_Byte_SetQuad
 20757 ;;		_Port_CheckQuadType
 20758 ;;		_Word_SetPair
 20759 ;; This function is called by:
 20760 ;;		_MXK_InitDIPSwitch
 20761 ;;		_MXK_Init
 20762 ;; This function uses a non-reentrant model
 20763 ;;
 20764                           
 20765                           	psect	text116
 20766  0000'                    __ptext116:
 20767                           	opt stack 0
 20768  0000'                    _Port_SetQuadType:
 20769                           	opt stack 15
 20770                           
 20771                           ;Port.c: 401: ePinError Output = ePinErrorState;
 20772                           
 20773                           ; BSR set to: 0
 20774                           ;incstack = 0
 20775  0000' 0E05               	movlw	5
 20776  0002' 0100               	movlb	0	; () banked
 20777  0004' 6F00'              	movwf	Port_SetQuadType@Output& (0+255),b
 20778                           
 20779                           ;Port.c: 403: switch (pType)
 20780  0006' D0C7               	goto	l476
 20781  0008'                    
 20782                           ; BSR set to: 0
 20783                           ;Port.c: 407: {
 20784                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 20785                           
 20786                           ; BSR set to: 0
 20787  0008' 0100               	movlb	0	; () banked
 20788  000A' EE20 F002          	lfsr	2,2
 20789  000E' 5100'              	movf	Port_SetQuadType@pInput& (0+255),w,b
 20790  0010' 26D9               	addwf	fsr2l,f,c
 20791  0012' 5100'              	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 20792  0014' 22DA               	addwfc	fsr2h,f,c
 20793  0016' CFDE F00B'         	movff	postinc2,Byte_SetQuad@pInput
 20794  001A' CFDD F00C'         	movff	postdec2,Byte_SetQuad@pInput+1
 20795  001E' C038' F00D'        	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 20796  0022' 0E0F               	movlw	15
 20797  0024' 0100               	movlb	0	; () banked
 20798  0026' 6F00'              	movwf	Byte_SetQuad@pValue& (0+255),b
 20799  0028' EC00' F000'        	call	_Byte_SetQuad	;wreg free
 20800                           
 20801                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 20802  002C' 0100               	movlb	0	; () banked
 20803  002E' EE20 F004          	lfsr	2,4
 20804  0032' 5100'              	movf	Port_SetQuadType@pInput& (0+255),w,b
 20805  0034' 26D9               	addwf	fsr2l,f,c
 20806  0036' 5100'              	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 20807  0038' 22DA               	addwfc	fsr2h,f,c
 20808  003A' CFDE F00B'         	movff	postinc2,Byte_SetQuad@pInput
 20809  003E' CFDD F00C'         	movff	postdec2,Byte_SetQuad@pInput+1
 20810  0042' C038' F00D'        	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 20811  0046' 0E00               	movlw	0
 20812  0048' 0100               	movlb	0	; () banked
 20813  004A' 6F00'              	movwf	Byte_SetQuad@pValue& (0+255),b
 20814  004C' EC00' F000'        	call	_Byte_SetQuad	;wreg free
 20815                           
 20816                           ;Port.c: 413: }
 20817                           ;Port.c: 415: break;
 20818  0050' D0B0               	goto	l478
 20819  0052'                    
 20820                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 20821  0052' C036' F02F'        	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 20822  0056' C037' F030'        	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 20823  005A' C038' F031'        	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 20824  005E' 0E03               	movlw	3
 20825  0060' 0100               	movlb	0	; () banked
 20826  0062' 6F00'              	movwf	Port_CheckQuadType@pDrive& (0+255),b
 20827  0064' EC00' F000'        	call	_Port_CheckQuadType	;wreg free
 20828  0068' 0100               	movlb	0	; () banked
 20829  006A' 6F00'              	movwf	Port_SetQuadType@Output& (0+255),b
 20830  006C' 0100               	movlb	0	; () banked
 20831  006E' 5100'              	movf	Port_SetQuadType@Output& (0+255),w,b
 20832  0070' A4D8               	btfss	status,2,c
 20833  0072' 0012               	return	
 20834                           
 20835                           ; BSR set to: 0
 20836                           ;Port.c: 418: {
 20837                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 20838  0074' 0100               	movlb	0	; () banked
 20839  0076' EE20 F002          	lfsr	2,2
 20840  007A' 5100'              	movf	Port_SetQuadType@pInput& (0+255),w,b
 20841  007C' 26D9               	addwf	fsr2l,f,c
 20842  007E' 5100'              	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 20843  0080' 22DA               	addwfc	fsr2h,f,c
 20844  0082' CFDE F00B'         	movff	postinc2,Byte_SetQuad@pInput
 20845  0086' CFDD F00C'         	movff	postdec2,Byte_SetQuad@pInput+1
 20846  008A' C038' F00D'        	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 20847  008E' 0E00               	movlw	0
 20848  0090' 0100               	movlb	0	; () banked
 20849  0092' 6F00'              	movwf	Byte_SetQuad@pValue& (0+255),b
 20850  0094' EC00' F000'        	call	_Byte_SetQuad	;wreg free
 20851                           
 20852                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 20853  0098' 0100               	movlb	0	; () banked
 20854  009A' EE20 F004          	lfsr	2,4
 20855  009E' 5100'              	movf	Port_SetQuadType@pInput& (0+255),w,b
 20856  00A0' 26D9               	addwf	fsr2l,f,c
 20857  00A2' 5100'              	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 20858  00A4' 22DA               	addwfc	fsr2h,f,c
 20859  00A6' CFDE F00B'         	movff	postinc2,Byte_SetQuad@pInput
 20860  00AA' CFDD F00C'         	movff	postdec2,Byte_SetQuad@pInput+1
 20861  00AE' C038' F00D'        	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 20862  00B2' 0E00               	movlw	0
 20863  00B4' 0100               	movlb	0	; () banked
 20864  00B6' 6F00'              	movwf	Byte_SetQuad@pValue& (0+255),b
 20865  00B8' EC00' F000'        	call	_Byte_SetQuad	;wreg free
 20866                           
 20867                           ;Port.c: 424: }
 20868  00BC' D07A               	goto	l478
 20869  00BE'                    
 20870                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 20871  00BE' C036' F02F'        	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 20872  00C2' C037' F030'        	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 20873  00C6' C038' F031'        	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 20874  00CA' 0E03               	movlw	3
 20875  00CC' 0100               	movlb	0	; () banked
 20876  00CE' 6F00'              	movwf	Port_CheckQuadType@pDrive& (0+255),b
 20877  00D0' EC00' F000'        	call	_Port_CheckQuadType	;wreg free
 20878  00D4' 0100               	movlb	0	; () banked
 20879  00D6' 6F00'              	movwf	Port_SetQuadType@Output& (0+255),b
 20880  00D8' 0100               	movlb	0	; () banked
 20881  00DA' 5100'              	movf	Port_SetQuadType@Output& (0+255),w,b
 20882  00DC' A4D8               	btfss	status,2,c
 20883  00DE' 0012               	return	
 20884                           
 20885                           ; BSR set to: 0
 20886                           ;Port.c: 429: {
 20887                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 20888  00E0' 0100               	movlb	0	; () banked
 20889  00E2' EE20 F002          	lfsr	2,2
 20890  00E6' 5100'              	movf	Port_SetQuadType@pInput& (0+255),w,b
 20891  00E8' 26D9               	addwf	fsr2l,f,c
 20892  00EA' 5100'              	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 20893  00EC' 22DA               	addwfc	fsr2h,f,c
 20894  00EE' CFDE F00B'         	movff	postinc2,Byte_SetQuad@pInput
 20895  00F2' CFDD F00C'         	movff	postdec2,Byte_SetQuad@pInput+1
 20896  00F6' C038' F00D'        	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 20897  00FA' 0E0F               	movlw	15
 20898  00FC' 0100               	movlb	0	; () banked
 20899  00FE' 6F00'              	movwf	Byte_SetQuad@pValue& (0+255),b
 20900  0100' EC00' F000'        	call	_Byte_SetQuad	;wreg free
 20901                           
 20902                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 20903  0104' 0100               	movlb	0	; () banked
 20904  0106' EE20 F004          	lfsr	2,4
 20905  010A' 5100'              	movf	Port_SetQuadType@pInput& (0+255),w,b
 20906  010C' 26D9               	addwf	fsr2l,f,c
 20907  010E' 5100'              	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 20908  0110' 22DA               	addwfc	fsr2h,f,c
 20909  0112' CFDE F00B'         	movff	postinc2,Byte_SetQuad@pInput
 20910  0116' CFDD F00C'         	movff	postdec2,Byte_SetQuad@pInput+1
 20911  011A' C038' F00D'        	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 20912  011E' 0E0F               	movlw	15
 20913  0120' 0100               	movlb	0	; () banked
 20914  0122' 6F00'              	movwf	Byte_SetQuad@pValue& (0+255),b
 20915  0124' EC00' F000'        	call	_Byte_SetQuad	;wreg free
 20916                           
 20917                           ;Port.c: 435: }
 20918  0128' D044               	goto	l478
 20919  012A'                    
 20920                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 20921  012A' C036' F02F'        	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 20922  012E' C037' F030'        	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 20923  0132' C038' F031'        	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 20924  0136' 0E03               	movlw	3
 20925  0138' 0100               	movlb	0	; () banked
 20926  013A' 6F00'              	movwf	Port_CheckQuadType@pDrive& (0+255),b
 20927  013C' EC00' F000'        	call	_Port_CheckQuadType	;wreg free
 20928  0140' 0100               	movlb	0	; () banked
 20929  0142' 6F00'              	movwf	Port_SetQuadType@Output& (0+255),b
 20930  0144' 0100               	movlb	0	; () banked
 20931  0146' 5100'              	movf	Port_SetQuadType@Output& (0+255),w,b
 20932  0148' A4D8               	btfss	status,2,c
 20933  014A' 0012               	return	
 20934                           
 20935                           ; BSR set to: 0
 20936                           ;Port.c: 440: {
 20937                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 20938  014C' 0100               	movlb	0	; () banked
 20939  014E' EE20 F002          	lfsr	2,2
 20940  0152' 5100'              	movf	Port_SetQuadType@pInput& (0+255),w,b
 20941  0154' 26D9               	addwf	fsr2l,f,c
 20942  0156' 5100'              	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 20943  0158' 22DA               	addwfc	fsr2h,f,c
 20944  015A' CFDE F00B'         	movff	postinc2,Byte_SetQuad@pInput
 20945  015E' CFDD F00C'         	movff	postdec2,Byte_SetQuad@pInput+1
 20946  0162' C038' F00D'        	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 20947  0166' 0E00               	movlw	0
 20948  0168' 0100               	movlb	0	; () banked
 20949  016A' 6F00'              	movwf	Byte_SetQuad@pValue& (0+255),b
 20950  016C' EC00' F000'        	call	_Byte_SetQuad	;wreg free
 20951                           
 20952                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 20953  0170' 0100               	movlb	0	; () banked
 20954  0172' EE20 F004          	lfsr	2,4
 20955  0176' 5100'              	movf	Port_SetQuadType@pInput& (0+255),w,b
 20956  0178' 26D9               	addwf	fsr2l,f,c
 20957  017A' 5100'              	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 20958  017C' 22DA               	addwfc	fsr2h,f,c
 20959  017E' CFDE F00B'         	movff	postinc2,Byte_SetQuad@pInput
 20960  0182' CFDD F00C'         	movff	postdec2,Byte_SetQuad@pInput+1
 20961  0186' C038' F00D'        	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 20962  018A' 0E00               	movlw	0
 20963  018C' 0100               	movlb	0	; () banked
 20964  018E' 6F00'              	movwf	Byte_SetQuad@pValue& (0+255),b
 20965  0190' EC00' F000'        	call	_Byte_SetQuad	;wreg free
 20966                           
 20967                           ;Port.c: 446: }
 20968  0194' D00E               	goto	l478
 20969  0196'                    l476:
 20970  0196' 0100               	movlb	0	; () banked
 20971  0198' 5100'              	movf	Port_SetQuadType@pType& (0+255),w,b
 20972                           
 20973                           ; Switch size 1, requested type "space"
 20974                           ; Number of cases is 4, Range of values is 0 to 3
 20975                           ; switch strategies available:
 20976                           ; Name         Instructions Cycles
 20977                           ; simple_byte           13     7 (average)
 20978                           ;	Chosen strategy is simple_byte
 20979  019A' 0A00               	xorlw	0	; case 0
 20980  019C' B4D8               	btfsc	status,2,c
 20981  019E' D734               	goto	l477
 20982  01A0' 0A01               	xorlw	1	; case 1
 20983  01A2' B4D8               	btfsc	status,2,c
 20984  01A4' D756               	goto	l479
 20985  01A6' 0A03               	xorlw	3	; case 2
 20986  01A8' B4D8               	btfsc	status,2,c
 20987  01AA' D789               	goto	l483
 20988  01AC' 0A01               	xorlw	1	; case 3
 20989  01AE' B4D8               	btfsc	status,2,c
 20990  01B0' D7BC               	goto	l486
 20991  01B2'                    l478:
 20992                           
 20993                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 20994                           
 20995                           ; BSR set to: 0
 20996  01B2' 0E08               	movlw	8
 20997  01B4' 0100               	movlb	0	; () banked
 20998  01B6' 2500'              	addwf	Port_SetQuadType@pInput& (0+255),w,b
 20999  01B8' 0100               	movlb	0	; () banked
 21000  01BA' 6F00'              	movwf	Word_SetPair@pInput& (0+255),b
 21001  01BC' 0E00               	movlw	0
 21002  01BE' 0100               	movlb	0	; () banked
 21003  01C0' 2100'              	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21004  01C2' 0100               	movlb	0	; () banked
 21005  01C4' 6F00'              	movwf	(Word_SetPair@pInput+1)& (0+255),b
 21006  01C6' 0100               	movlb	0	; () banked
 21007  01C8' 5100'              	movf	Port_SetQuadType@pQuad& (0+255),w,b
 21008  01CA' 0D04               	mullw	4
 21009  01CC' CFF3 F011'         	movff	prodl,Word_SetPair@pPair
 21010  01D0' C039' F012'        	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 21011  01D4' EC00' F000'        	call	_Word_SetPair	;wreg free
 21012                           
 21013                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 21014  01D8' 0E08               	movlw	8
 21015  01DA' 0100               	movlb	0	; () banked
 21016  01DC' 2500'              	addwf	Port_SetQuadType@pInput& (0+255),w,b
 21017  01DE' 0100               	movlb	0	; () banked
 21018  01E0' 6F00'              	movwf	Word_SetPair@pInput& (0+255),b
 21019  01E2' 0E00               	movlw	0
 21020  01E4' 0100               	movlb	0	; () banked
 21021  01E6' 2100'              	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21022  01E8' 0100               	movlb	0	; () banked
 21023  01EA' 6F00'              	movwf	(Word_SetPair@pInput+1)& (0+255),b
 21024  01EC' 0100               	movlb	0	; () banked
 21025  01EE' 5100'              	movf	Port_SetQuadType@pQuad& (0+255),w,b
 21026  01F0' 0D04               	mullw	4
 21027  01F2' 28F3               	incf	prodl,w,c
 21028  01F4' 0100               	movlb	0	; () banked
 21029  01F6' 6F00'              	movwf	Word_SetPair@pPair& (0+255),b
 21030  01F8' C039' F012'        	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 21031  01FC' EC00' F000'        	call	_Word_SetPair	;wreg free
 21032                           
 21033                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 21034  0200' 0E08               	movlw	8
 21035  0202' 0100               	movlb	0	; () banked
 21036  0204' 2500'              	addwf	Port_SetQuadType@pInput& (0+255),w,b
 21037  0206' 0100               	movlb	0	; () banked
 21038  0208' 6F00'              	movwf	Word_SetPair@pInput& (0+255),b
 21039  020A' 0E00               	movlw	0
 21040  020C' 0100               	movlb	0	; () banked
 21041  020E' 2100'              	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21042  0210' 0100               	movlb	0	; () banked
 21043  0212' 6F00'              	movwf	(Word_SetPair@pInput+1)& (0+255),b
 21044  0214' 0100               	movlb	0	; () banked
 21045  0216' 5100'              	movf	Port_SetQuadType@pQuad& (0+255),w,b
 21046  0218' 0D04               	mullw	4
 21047  021A' 50F3               	movf	prodl,w,c
 21048  021C' 0F02               	addlw	2
 21049  021E' 0100               	movlb	0	; () banked
 21050  0220' 6F00'              	movwf	Word_SetPair@pPair& (0+255),b
 21051  0222' C039' F012'        	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 21052  0226' EC00' F000'        	call	_Word_SetPair	;wreg free
 21053                           
 21054                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 21055  022A' 0E08               	movlw	8
 21056  022C' 0100               	movlb	0	; () banked
 21057  022E' 2500'              	addwf	Port_SetQuadType@pInput& (0+255),w,b
 21058  0230' 0100               	movlb	0	; () banked
 21059  0232' 6F00'              	movwf	Word_SetPair@pInput& (0+255),b
 21060  0234' 0E00               	movlw	0
 21061  0236' 0100               	movlb	0	; () banked
 21062  0238' 2100'              	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21063  023A' 0100               	movlb	0	; () banked
 21064  023C' 6F00'              	movwf	(Word_SetPair@pInput+1)& (0+255),b
 21065  023E' 0100               	movlb	0	; () banked
 21066  0240' 5100'              	movf	Port_SetQuadType@pQuad& (0+255),w,b
 21067  0242' 0D04               	mullw	4
 21068  0244' 50F3               	movf	prodl,w,c
 21069  0246' 0F03               	addlw	3
 21070  0248' 0100               	movlb	0	; () banked
 21071  024A' 6F00'              	movwf	Word_SetPair@pPair& (0+255),b
 21072  024C' C039' F012'        	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 21073  0250' EC00' F000'        	call	_Word_SetPair	;wreg free
 21074  0254' 0012               	return	
 21075  0256'                    __end_of_Port_SetQuadType:
 21076                           	opt stack 0
 21077                           tosu	equ	0xFFF
 21078                           tosh	equ	0xFFE
 21079                           tosl	equ	0xFFD
 21080                           pclath	equ	0xFFA
 21081                           tblptru	equ	0xFF8
 21082                           tblptrh	equ	0xFF7
 21083                           tblptrl	equ	0xFF6
 21084                           tablat	equ	0xFF5
 21085                           prodh	equ	0xFF4
 21086                           prodl	equ	0xFF3
 21087                           intcon	equ	0xFF2
 21088                           postinc0	equ	0xFEE
 21089                           wreg	equ	0xFE8
 21090                           indf1	equ	0xFE7
 21091                           postdec1	equ	0xFE5
 21092                           fsr1h	equ	0xFE2
 21093                           fsr1l	equ	0xFE1
 21094                           indf2	equ	0xFDF
 21095                           postinc2	equ	0xFDE
 21096                           postdec2	equ	0xFDD
 21097                           plusw2	equ	0xFDB
 21098                           fsr2h	equ	0xFDA
 21099                           fsr2l	equ	0xFD9
 21100                           status	equ	0xFD8
 21101                           
 21102 ;; *************** function _Word_SetPair *****************
 21103 ;; Defined at:
 21104 ;;		line 149 in file "Library/Types.c"
 21105 ;; Parameters:    Size  Location     Type
 21106 ;;  pInput          2   15[BANK0 ] PTR struct Word
 21107 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 21108 ;;		 -> PortD(10), PortC(10), PortF(10), 
 21109 ;;  pPair           1   17[BANK0 ] unsigned char 
 21110 ;;  pValue          1   18[BANK0 ] unsigned char 
 21111 ;; Auto vars:     Size  Location     Type
 21112 ;;		None
 21113 ;; Return value:  Size  Location     Type
 21114 ;;                  1    wreg      void 
 21115 ;; Registers used:
 21116 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21117 ;; Tracked objects:
 21118 ;;		On entry : 0/0
 21119 ;;		On exit  : 0/0
 21120 ;;		Unchanged: 0/0
 21121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21122 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21125 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21126 ;;Total ram usage:        4 bytes
 21127 ;; Hardware stack levels used:    1
 21128 ;; Hardware stack levels required when called:    9
 21129 ;; This function calls:
 21130 ;;		_Byte_SetPair
 21131 ;; This function is called by:
 21132 ;;		_Port_SetPinType
 21133 ;;		_Port_SetQuadType
 21134 ;;		_Port_SetType
 21135 ;;		_Port_SetPairType
 21136 ;;		_PortProperty_Init
 21137 ;; This function uses a non-reentrant model
 21138 ;;
 21139                           
 21140                           	psect	text117
 21141  0000'                    __ptext117:
 21142                           	opt stack 0
 21143  0000'                    _Word_SetPair:
 21144                           	opt stack 18
 21145                           
 21146                           ;Types.c: 151: if (pPair >= 4)
 21147                           
 21148                           ;incstack = 0
 21149  0000' 0E03               	movlw	3
 21150  0002' 0100               	movlb	0	; () banked
 21151  0004' 6500'              	cpfsgt	Word_SetPair@pPair& (0+255),b
 21152  0006' D014               	goto	l776
 21153                           
 21154                           ; BSR set to: 0
 21155                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 21156  0008' 0E01               	movlw	1
 21157  000A' 0100               	movlb	0	; () banked
 21158  000C' 2500'              	addwf	Word_SetPair@pInput& (0+255),w,b
 21159  000E' 0100               	movlb	0	; () banked
 21160  0010' 6F00'              	movwf	Byte_SetPair@pInput& (0+255),b
 21161  0012' 0E00               	movlw	0
 21162  0014' 0100               	movlb	0	; () banked
 21163  0016' 2100'              	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 21164  0018' 0100               	movlb	0	; () banked
 21165  001A' 6F00'              	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 21166  001C' 0100               	movlb	0	; () banked
 21167  001E' 5100'              	movf	Word_SetPair@pPair& (0+255),w,b
 21168  0020' 0FFC               	addlw	252
 21169  0022' 0100               	movlb	0	; () banked
 21170  0024' 6F00'              	movwf	Byte_SetPair@pPair& (0+255),b
 21171  0026' C012' F00E'        	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 21172  002A' EC00' F000'        	call	_Byte_SetPair	;wreg free
 21173  002E' 0012               	return	
 21174  0030'                    l776:
 21175                           
 21176                           ;Types.c: 153: else
 21177                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 21178  0030' C00F' F00B'        	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 21179  0034' C010' F00C'        	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 21180  0038' C011' F00D'        	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 21181  003C' C012' F00E'        	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 21182  0040' EC00' F000'        	call	_Byte_SetPair	;wreg free
 21183  0044' 0012               	return	
 21184  0046'                    __end_of_Word_SetPair:
 21185                           	opt stack 0
 21186                           tosu	equ	0xFFF
 21187                           tosh	equ	0xFFE
 21188                           tosl	equ	0xFFD
 21189                           pclath	equ	0xFFA
 21190                           tblptru	equ	0xFF8
 21191                           tblptrh	equ	0xFF7
 21192                           tblptrl	equ	0xFF6
 21193                           tablat	equ	0xFF5
 21194                           prodh	equ	0xFF4
 21195                           prodl	equ	0xFF3
 21196                           intcon	equ	0xFF2
 21197                           postinc0	equ	0xFEE
 21198                           wreg	equ	0xFE8
 21199                           indf1	equ	0xFE7
 21200                           postdec1	equ	0xFE5
 21201                           fsr1h	equ	0xFE2
 21202                           fsr1l	equ	0xFE1
 21203                           indf2	equ	0xFDF
 21204                           postinc2	equ	0xFDE
 21205                           postdec2	equ	0xFDD
 21206                           plusw2	equ	0xFDB
 21207                           fsr2h	equ	0xFDA
 21208                           fsr2l	equ	0xFD9
 21209                           status	equ	0xFD8
 21210                           
 21211 ;; *************** function _Byte_SetPair *****************
 21212 ;; Defined at:
 21213 ;;		line 83 in file "Library/Types.c"
 21214 ;; Parameters:    Size  Location     Type
 21215 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 21216 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 21217 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 21218 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 21219 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 21220 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 21221 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 21222 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 21223 ;;		 -> NULL(0), 
 21224 ;;  pPair           1   13[BANK0 ] unsigned char 
 21225 ;;  pValue          1   14[BANK0 ] unsigned char 
 21226 ;; Auto vars:     Size  Location     Type
 21227 ;;		None
 21228 ;; Return value:  Size  Location     Type
 21229 ;;                  1    wreg      void 
 21230 ;; Registers used:
 21231 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21232 ;; Tracked objects:
 21233 ;;		On entry : 0/0
 21234 ;;		On exit  : 0/0
 21235 ;;		Unchanged: 0/0
 21236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21237 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21240 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21241 ;;Total ram usage:        4 bytes
 21242 ;; Hardware stack levels used:    1
 21243 ;; Hardware stack levels required when called:    8
 21244 ;; This function calls:
 21245 ;;		_Byte_SetZone
 21246 ;; This function is called by:
 21247 ;;		_Word_SetPair
 21248 ;;		_Port_SetPairType
 21249 ;;		_Port_SetPair
 21250 ;; This function uses a non-reentrant model
 21251 ;;
 21252                           
 21253                           	psect	text118
 21254  0000'                    __ptext118:
 21255                           	opt stack 0
 21256  0000'                    _Byte_SetPair:
 21257                           	opt stack 18
 21258                           
 21259                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 21260                           
 21261                           ;incstack = 0
 21262  0000' C00B' F000'        	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 21263  0004' C00C' F001'        	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 21264  0008' 0E04               	movlw	4
 21265  000A' 0100               	movlb	0	; () banked
 21266  000C' 6F00'              	movwf	Byte_SetZone@pMax& (0+255),b
 21267  000E' C00D' F003'        	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 21268  0012' 0E02               	movlw	2
 21269  0014' 0100               	movlb	0	; () banked
 21270  0016' 6F00'              	movwf	Byte_SetZone@pChunkSize& (0+255),b
 21271  0018' C00E' F005'        	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 21272  001C' EC00' F000'        	call	_Byte_SetZone	;wreg free
 21273  0020' 0012               	return		;funcret
 21274  0022'                    __end_of_Byte_SetPair:
 21275                           	opt stack 0
 21276                           tosu	equ	0xFFF
 21277                           tosh	equ	0xFFE
 21278                           tosl	equ	0xFFD
 21279                           pclath	equ	0xFFA
 21280                           tblptru	equ	0xFF8
 21281                           tblptrh	equ	0xFF7
 21282                           tblptrl	equ	0xFF6
 21283                           tablat	equ	0xFF5
 21284                           prodh	equ	0xFF4
 21285                           prodl	equ	0xFF3
 21286                           intcon	equ	0xFF2
 21287                           postinc0	equ	0xFEE
 21288                           wreg	equ	0xFE8
 21289                           indf1	equ	0xFE7
 21290                           postdec1	equ	0xFE5
 21291                           fsr1h	equ	0xFE2
 21292                           fsr1l	equ	0xFE1
 21293                           indf2	equ	0xFDF
 21294                           postinc2	equ	0xFDE
 21295                           postdec2	equ	0xFDD
 21296                           plusw2	equ	0xFDB
 21297                           fsr2h	equ	0xFDA
 21298                           fsr2l	equ	0xFD9
 21299                           status	equ	0xFD8
 21300                           
 21301 ;; *************** function _Port_CheckQuadType *****************
 21302 ;; Defined at:
 21303 ;;		line 126 in file "Library/Port.c"
 21304 ;; Parameters:    Size  Location     Type
 21305 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 21306 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 21307 ;;		 -> PortD(10), PortC(10), PortF(10), 
 21308 ;;  pQuad           1   49[BANK0 ] enum E6776
 21309 ;;  pDrive          1   50[BANK0 ] enum E6469
 21310 ;; Auto vars:     Size  Location     Type
 21311 ;;  Output          1   53[BANK0 ] enum E6475
 21312 ;;  Pair2           1   52[BANK0 ] enum E6760
 21313 ;;  Pair1           1   51[BANK0 ] enum E6760
 21314 ;; Return value:  Size  Location     Type
 21315 ;;                  1    wreg      enum E6475
 21316 ;; Registers used:
 21317 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21318 ;; Tracked objects:
 21319 ;;		On entry : 0/0
 21320 ;;		On exit  : 0/0
 21321 ;;		Unchanged: 0/0
 21322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21323 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21324 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21326 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21327 ;;Total ram usage:        7 bytes
 21328 ;; Hardware stack levels used:    1
 21329 ;; Hardware stack levels required when called:   12
 21330 ;; This function calls:
 21331 ;;		_Port_CheckPairType
 21332 ;; This function is called by:
 21333 ;;		_Port_CheckPortType
 21334 ;;		_Port_SetQuadType
 21335 ;; This function uses a non-reentrant model
 21336 ;;
 21337                           
 21338                           	psect	text119
 21339  0000'                    __ptext119:
 21340                           	opt stack 0
 21341  0000'                    _Port_CheckQuadType:
 21342                           	opt stack 14
 21343                           
 21344                           ;Port.c: 128: ePinError Output = ePinErrorState;
 21345                           
 21346                           ;incstack = 0
 21347  0000' 0E05               	movlw	5
 21348  0002' 0100               	movlb	0	; () banked
 21349  0004' 6F00'              	movwf	Port_CheckQuadType@Output& (0+255),b
 21350                           
 21351                           ; BSR set to: 0
 21352                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 21353  0006' 0100               	movlb	0	; () banked
 21354  0008' 5100'              	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 21355  000A' 0D02               	mullw	2
 21356  000C' CFF3 F033'         	movff	prodl,Port_CheckQuadType@Pair1
 21357                           
 21358                           ; BSR set to: 0
 21359                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 21360  0010' 0100               	movlb	0	; () banked
 21361  0012' 5100'              	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 21362  0014' 0D02               	mullw	2
 21363  0016' 28F3               	incf	prodl,w,c
 21364  0018' 0100               	movlb	0	; () banked
 21365  001A' 6F00'              	movwf	Port_CheckQuadType@Pair2& (0+255),b
 21366                           
 21367                           ; BSR set to: 0
 21368                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 21369  001C' C02F' F026'        	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 21370  0020' C030' F027'        	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 21371  0024' C033' F028'        	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 21372  0028' C032' F029'        	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 21373  002C' EC00' F000'        	call	_Port_CheckPairType	;wreg free
 21374  0030' 0100               	movlb	0	; () banked
 21375  0032' 6F00'              	movwf	Port_CheckQuadType@Output& (0+255),b
 21376  0034' 0100               	movlb	0	; () banked
 21377  0036' 5100'              	movf	Port_CheckQuadType@Output& (0+255),w,b
 21378  0038' A4D8               	btfss	status,2,c
 21379  003A' D00C               	goto	l393
 21380                           
 21381                           ; BSR set to: 0
 21382                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 21383  003C' C02F' F026'        	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 21384  0040' C030' F027'        	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 21385  0044' C034' F028'        	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 21386  0048' C032' F029'        	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 21387  004C' EC00' F000'        	call	_Port_CheckPairType	;wreg free
 21388  0050' 0100               	movlb	0	; () banked
 21389  0052' 6F00'              	movwf	Port_CheckQuadType@Output& (0+255),b
 21390  0054'                    l393:
 21391                           
 21392                           ; BSR set to: 0
 21393                           ;Port.c: 136: return Output;
 21394                           
 21395                           ; BSR set to: 0
 21396  0054' 0100               	movlb	0	; () banked
 21397  0056' 5100'              	movf	Port_CheckQuadType@Output& (0+255),w,b
 21398  0058' 0012               	return	
 21399  005A'                    __end_of_Port_CheckQuadType:
 21400                           	opt stack 0
 21401                           tosu	equ	0xFFF
 21402                           tosh	equ	0xFFE
 21403                           tosl	equ	0xFFD
 21404                           pclath	equ	0xFFA
 21405                           tblptru	equ	0xFF8
 21406                           tblptrh	equ	0xFF7
 21407                           tblptrl	equ	0xFF6
 21408                           tablat	equ	0xFF5
 21409                           prodh	equ	0xFF4
 21410                           prodl	equ	0xFF3
 21411                           intcon	equ	0xFF2
 21412                           postinc0	equ	0xFEE
 21413                           wreg	equ	0xFE8
 21414                           indf1	equ	0xFE7
 21415                           postdec1	equ	0xFE5
 21416                           fsr1h	equ	0xFE2
 21417                           fsr1l	equ	0xFE1
 21418                           indf2	equ	0xFDF
 21419                           postinc2	equ	0xFDE
 21420                           postdec2	equ	0xFDD
 21421                           plusw2	equ	0xFDB
 21422                           fsr2h	equ	0xFDA
 21423                           fsr2l	equ	0xFD9
 21424                           status	equ	0xFD8
 21425                           
 21426 ;; *************** function _Port_CheckPairType *****************
 21427 ;; Defined at:
 21428 ;;		line 112 in file "Library/Port.c"
 21429 ;; Parameters:    Size  Location     Type
 21430 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 21431 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 21432 ;;		 -> PortD(10), PortC(10), PortF(10), 
 21433 ;;  pPair           1   40[BANK0 ] enum E6760
 21434 ;;  pDrive          1   41[BANK0 ] enum E6469
 21435 ;; Auto vars:     Size  Location     Type
 21436 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 21437 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 21438 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 21439 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 21440 ;;		 -> PortC(10), PortF(10), NULL(0), 
 21441 ;;  Output          1   44[BANK0 ] enum E6475
 21442 ;;  Pin2            1   43[BANK0 ] enum E6750
 21443 ;;  Pin1            1   42[BANK0 ] enum E6750
 21444 ;; Return value:  Size  Location     Type
 21445 ;;                  1    wreg      enum E6475
 21446 ;; Registers used:
 21447 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21448 ;; Tracked objects:
 21449 ;;		On entry : 0/0
 21450 ;;		On exit  : 0/0
 21451 ;;		Unchanged: 0/0
 21452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21453 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21454 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21456 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21457 ;;Total ram usage:        9 bytes
 21458 ;; Hardware stack levels used:    1
 21459 ;; Hardware stack levels required when called:   11
 21460 ;; This function calls:
 21461 ;;		_PortProperty_Valid
 21462 ;; This function is called by:
 21463 ;;		_Port_CheckQuadType
 21464 ;;		_Port_SetPairType
 21465 ;; This function uses a non-reentrant model
 21466 ;;
 21467                           
 21468                           	psect	text120
 21469  0000'                    __ptext120:
 21470                           	opt stack 0
 21471  0000'                    _Port_CheckPairType:
 21472                           	opt stack 14
 21473                           
 21474                           ;Port.c: 114: ePinError Output = ePinErrorState;
 21475                           
 21476                           ; BSR set to: 0
 21477                           ;incstack = 0
 21478  0000' 0E05               	movlw	5
 21479  0002' 0100               	movlb	0	; () banked
 21480  0004' 6F00'              	movwf	Port_CheckPairType@Output& (0+255),b
 21481                           
 21482                           ; BSR set to: 0
 21483                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 21484  0006' C026' FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 21485  000A' C027' FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 21486  000E' CFDE F02D'         	movff	postinc2,Port_CheckPairType@Props
 21487  0012' CFDD F02E'         	movff	postdec2,Port_CheckPairType@Props+1
 21488                           
 21489                           ; BSR set to: 0
 21490                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 21491  0016' 0100               	movlb	0	; () banked
 21492  0018' 5100'              	movf	Port_CheckPairType@pPair& (0+255),w,b
 21493  001A' 0D02               	mullw	2
 21494  001C' CFF3 F02A'         	movff	prodl,Port_CheckPairType@Pin1
 21495                           
 21496                           ; BSR set to: 0
 21497                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 21498  0020' 0100               	movlb	0	; () banked
 21499  0022' 5100'              	movf	Port_CheckPairType@pPair& (0+255),w,b
 21500  0024' 0D02               	mullw	2
 21501  0026' 28F3               	incf	prodl,w,c
 21502  0028' 0100               	movlb	0	; () banked
 21503  002A' 6F00'              	movwf	Port_CheckPairType@Pin2& (0+255),b
 21504                           
 21505                           ; BSR set to: 0
 21506                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 21507  002C' C02D' F00F'        	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 21508  0030' C02E' F010'        	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 21509  0034' C029' F011'        	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 21510  0038' C02A' F012'        	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 21511  003C' EC00' F000'        	call	_PortProperty_Valid	;wreg free
 21512  0040' 0100               	movlb	0	; () banked
 21513  0042' 6F00'              	movwf	Port_CheckPairType@Output& (0+255),b
 21514  0044' 0100               	movlb	0	; () banked
 21515  0046' 5100'              	movf	Port_CheckPairType@Output& (0+255),w,b
 21516  0048' A4D8               	btfss	status,2,c
 21517  004A' D00C               	goto	l389
 21518                           
 21519                           ; BSR set to: 0
 21520                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 21521  004C' C02D' F00F'        	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 21522  0050' C02E' F010'        	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 21523  0054' C029' F011'        	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 21524  0058' C02B' F012'        	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 21525  005C' EC00' F000'        	call	_PortProperty_Valid	;wreg free
 21526  0060' 0100               	movlb	0	; () banked
 21527  0062' 6F00'              	movwf	Port_CheckPairType@Output& (0+255),b
 21528  0064'                    l389:
 21529                           
 21530                           ; BSR set to: 0
 21531                           ;Port.c: 124: return Output;
 21532                           
 21533                           ; BSR set to: 0
 21534  0064' 0100               	movlb	0	; () banked
 21535  0066' 5100'              	movf	Port_CheckPairType@Output& (0+255),w,b
 21536  0068' 0012               	return	
 21537  006A'                    __end_of_Port_CheckPairType:
 21538                           	opt stack 0
 21539                           tosu	equ	0xFFF
 21540                           tosh	equ	0xFFE
 21541                           tosl	equ	0xFFD
 21542                           pclath	equ	0xFFA
 21543                           tblptru	equ	0xFF8
 21544                           tblptrh	equ	0xFF7
 21545                           tblptrl	equ	0xFF6
 21546                           tablat	equ	0xFF5
 21547                           prodh	equ	0xFF4
 21548                           prodl	equ	0xFF3
 21549                           intcon	equ	0xFF2
 21550                           postinc0	equ	0xFEE
 21551                           wreg	equ	0xFE8
 21552                           indf1	equ	0xFE7
 21553                           postdec1	equ	0xFE5
 21554                           fsr1h	equ	0xFE2
 21555                           fsr1l	equ	0xFE1
 21556                           indf2	equ	0xFDF
 21557                           postinc2	equ	0xFDE
 21558                           postdec2	equ	0xFDD
 21559                           plusw2	equ	0xFDB
 21560                           fsr2h	equ	0xFDA
 21561                           fsr2l	equ	0xFD9
 21562                           status	equ	0xFD8
 21563                           
 21564 ;; *************** function _PortProperty_Valid *****************
 21565 ;; Defined at:
 21566 ;;		line 220 in file "Library/Types.c"
 21567 ;; Parameters:    Size  Location     Type
 21568 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 21569 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 21570 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 21571 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 21572 ;;		 -> PortC(10), PortF(10), NULL(0), 
 21573 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 21574 ;;  pPin            1   18[BANK0 ] unsigned char 
 21575 ;; Auto vars:     Size  Location     Type
 21576 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 21577 ;;  Pair            1   37[BANK0 ] enum E6469
 21578 ;; Return value:  Size  Location     Type
 21579 ;;                  1    wreg      enum E6475
 21580 ;; Registers used:
 21581 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21582 ;; Tracked objects:
 21583 ;;		On entry : 0/0
 21584 ;;		On exit  : 0/0
 21585 ;;		Unchanged: 0/0
 21586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21587 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21588 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21589 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21590 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21591 ;;Total ram usage:       23 bytes
 21592 ;; Hardware stack levels used:    1
 21593 ;; Hardware stack levels required when called:   10
 21594 ;; This function calls:
 21595 ;;		_Word_GetPair
 21596 ;; This function is called by:
 21597 ;;		_Port_CheckPairType
 21598 ;;		_Port_SetPinType
 21599 ;; This function uses a non-reentrant model
 21600 ;;
 21601                           
 21602                           	psect	text121
 21603  0000'                    __ptext121:
 21604                           	opt stack 0
 21605  0000'                    _PortProperty_Valid:
 21606                           	opt stack 14
 21607                           
 21608                           ;Types.c: 222: ePinDrive Pair;
 21609                           ;Types.c: 223: const ePinError Errors[4][4] =
 21610                           ;Types.c: 224: {
 21611                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 21612                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 21613                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 21614                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 21615                           ;Types.c: 230: };
 21616                           
 21617                           ; BSR set to: 0
 21618                           ;incstack = 0
 21619  0000' 0E00'              	movlw	low PortProperty_Valid@F6830
 21620  0002' 6EF6               	movwf	tblptrl,c
 21621  0004'                    	if	1	;There is more than 1 active tblptr byte
 21622  0004' 0E00'              	movlw	high PortProperty_Valid@F6830
 21623  0006' 6EF7               	movwf	tblptrh,c
 21624  0008'                    	endif
 21625  0008'                    	if	1	;There are 3 active tblptr bytes
 21626  0008' 0E00'              	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 21627  000A' 6EF8               	movwf	tblptru,c
 21628  000C'                    	endif
 21629  000C' EE20' F000'        	lfsr	2,PortProperty_Valid@Errors
 21630  0010' 0E0F               	movlw	15
 21631  0012'                    u6700:
 21632  0012' 0009               	tblrd		*+
 21633  0014' CFF5 FFDE          	movff	tablat,postinc2
 21634  0018' 06E8               	decf	wreg,f,c
 21635  001A' E2FB               	bc	u6700
 21636                           
 21637                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 21638  001C' C00F' F00C'        	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 21639  0020' C010' F00D'        	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 21640  0024' C012' F00E'        	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 21641  0028' EC00' F000'        	call	_Word_GetPair	;wreg free
 21642  002C' 0100               	movlb	0	; () banked
 21643  002E' 6F00'              	movwf	PortProperty_Valid@Pair& (0+255),b
 21644                           
 21645                           ; BSR set to: 0
 21646                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 21647  0030' 0E04               	movlw	4
 21648  0032' 0100               	movlb	0	; () banked
 21649  0034' 6100'              	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 21650  0036' D020               	goto	l819
 21651                           
 21652                           ; BSR set to: 0
 21653  0038' 0E04               	movlw	4
 21654  003A' 0100               	movlb	0	; () banked
 21655  003C' 6100'              	cpfslt	PortProperty_Valid@Pair& (0+255),b
 21656  003E' D01C               	goto	l819
 21657                           
 21658                           ; BSR set to: 0
 21659                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 21660  0040' 0100               	movlb	0	; () banked
 21661  0042' 5100'              	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 21662  0044' 0D04               	mullw	4
 21663  0046' 0E00'              	movlw	low PortProperty_Valid@Errors
 21664  0048' 0100               	movlb	0	; () banked
 21665  004A' 6F00'              	movwf	??_PortProperty_Valid& (0+255),b
 21666  004C' 0E00'              	movlw	high PortProperty_Valid@Errors
 21667  004E' 0100               	movlb	0	; () banked
 21668  0050' 6F00'              	movwf	(??_PortProperty_Valid+1)& (0+255),b
 21669  0052' 50F3               	movf	prodl,w,c
 21670  0054' 0100               	movlb	0	; () banked
 21671  0056' 2700'              	addwf	??_PortProperty_Valid& (0+255),f,b
 21672  0058' 50F4               	movf	prodh,w,c
 21673  005A' 0100               	movlb	0	; () banked
 21674  005C' 2300'              	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 21675  005E' 0100               	movlb	0	; () banked
 21676  0060' 5100'              	movf	PortProperty_Valid@Pair& (0+255),w,b
 21677  0062' 0D01               	mullw	1
 21678  0064' 50F3               	movf	prodl,w,c
 21679  0066' 0100               	movlb	0	; () banked
 21680  0068' 2500'              	addwf	??_PortProperty_Valid& (0+255),w,b
 21681  006A' 6ED9               	movwf	fsr2l,c
 21682  006C' 50F4               	movf	prodh,w,c
 21683  006E' 0100               	movlb	0	; () banked
 21684  0070' 2100'              	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 21685  0072' 6EDA               	movwf	fsr2h,c
 21686  0074' 50DF               	movf	indf2,w,c
 21687                           
 21688                           ; BSR set to: 0
 21689  0076' 0012               	return	
 21690  0078'                    l819:
 21691                           
 21692                           ; BSR set to: 0
 21693                           ;Types.c: 237: return ePinErrorState;
 21694                           
 21695                           ; BSR set to: 0
 21696  0078' 0E05               	movlw	5
 21697  007A' 0012               	return	
 21698  007C'                    __end_of_PortProperty_Valid:
 21699                           	opt stack 0
 21700                           tosu	equ	0xFFF
 21701                           tosh	equ	0xFFE
 21702                           tosl	equ	0xFFD
 21703                           pclath	equ	0xFFA
 21704                           tblptru	equ	0xFF8
 21705                           tblptrh	equ	0xFF7
 21706                           tblptrl	equ	0xFF6
 21707                           tablat	equ	0xFF5
 21708                           prodh	equ	0xFF4
 21709                           prodl	equ	0xFF3
 21710                           intcon	equ	0xFF2
 21711                           postinc0	equ	0xFEE
 21712                           wreg	equ	0xFE8
 21713                           indf1	equ	0xFE7
 21714                           postdec1	equ	0xFE5
 21715                           fsr1h	equ	0xFE2
 21716                           fsr1l	equ	0xFE1
 21717                           indf2	equ	0xFDF
 21718                           postinc2	equ	0xFDE
 21719                           postdec2	equ	0xFDD
 21720                           plusw2	equ	0xFDB
 21721                           fsr2h	equ	0xFDA
 21722                           fsr2l	equ	0xFD9
 21723                           status	equ	0xFD8
 21724                           
 21725 ;; *************** function _Word_GetPair *****************
 21726 ;; Defined at:
 21727 ;;		line 156 in file "Library/Types.c"
 21728 ;; Parameters:    Size  Location     Type
 21729 ;;  pInput          2   12[BANK0 ] PTR struct Word
 21730 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 21731 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 21732 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 21733 ;;		 -> PortC(10), PortF(10), NULL(0), 
 21734 ;;  pPair           1   14[BANK0 ] unsigned char 
 21735 ;; Auto vars:     Size  Location     Type
 21736 ;;		None
 21737 ;; Return value:  Size  Location     Type
 21738 ;;                  1    wreg      unsigned char 
 21739 ;; Registers used:
 21740 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21741 ;; Tracked objects:
 21742 ;;		On entry : 0/0
 21743 ;;		On exit  : 0/0
 21744 ;;		Unchanged: 0/0
 21745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21746 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21749 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21750 ;;Total ram usage:        3 bytes
 21751 ;; Hardware stack levels used:    1
 21752 ;; Hardware stack levels required when called:    9
 21753 ;; This function calls:
 21754 ;;		_Byte_GetPair
 21755 ;; This function is called by:
 21756 ;;		_Port_Init
 21757 ;;		_Port_SetPin
 21758 ;;		_Port_Set
 21759 ;;		_PortProperty_Valid
 21760 ;;		_Port_SetPair
 21761 ;;		_Port_SetQuad
 21762 ;; This function uses a non-reentrant model
 21763 ;;
 21764                           
 21765                           	psect	text122
 21766  0000'                    __ptext122:
 21767                           	opt stack 0
 21768  0000'                    _Word_GetPair:
 21769                           	opt stack 17
 21770                           
 21771                           ;Types.c: 158: if (pPair >= 4)
 21772                           
 21773                           ; BSR set to: 0
 21774                           ;incstack = 0
 21775  0000' 0E03               	movlw	3
 21776  0002' 0100               	movlb	0	; () banked
 21777  0004' 6500'              	cpfsgt	Word_GetPair@pPair& (0+255),b
 21778  0006' D012               	goto	l781
 21779                           
 21780                           ; BSR set to: 0
 21781                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 21782  0008' 0E01               	movlw	1
 21783  000A' 0100               	movlb	0	; () banked
 21784  000C' 2500'              	addwf	Word_GetPair@pInput& (0+255),w,b
 21785  000E' 0100               	movlb	0	; () banked
 21786  0010' 6F00'              	movwf	Byte_GetPair@pInput& (0+255),b
 21787  0012' 0E00               	movlw	0
 21788  0014' 0100               	movlb	0	; () banked
 21789  0016' 2100'              	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 21790  0018' 0100               	movlb	0	; () banked
 21791  001A' 6F00'              	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 21792  001C' 0100               	movlb	0	; () banked
 21793  001E' 5100'              	movf	Word_GetPair@pPair& (0+255),w,b
 21794  0020' 0FFC               	addlw	252
 21795  0022' 0100               	movlb	0	; () banked
 21796  0024' 6F00'              	movwf	Byte_GetPair@pPair& (0+255),b
 21797  0026' EC00' F000'        	call	_Byte_GetPair	;wreg free
 21798  002A' 0012               	return	
 21799  002C'                    l781:
 21800                           
 21801                           ;Types.c: 160: else
 21802                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 21803  002C' C00C' F009'        	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 21804  0030' C00D' F00A'        	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 21805  0034' C00E' F00B'        	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 21806  0038' EC00' F000'        	call	_Byte_GetPair	;wreg free
 21807  003C' 0012               	return	
 21808  003E'                    __end_of_Word_GetPair:
 21809                           	opt stack 0
 21810                           tosu	equ	0xFFF
 21811                           tosh	equ	0xFFE
 21812                           tosl	equ	0xFFD
 21813                           pclath	equ	0xFFA
 21814                           tblptru	equ	0xFF8
 21815                           tblptrh	equ	0xFF7
 21816                           tblptrl	equ	0xFF6
 21817                           tablat	equ	0xFF5
 21818                           prodh	equ	0xFF4
 21819                           prodl	equ	0xFF3
 21820                           intcon	equ	0xFF2
 21821                           postinc0	equ	0xFEE
 21822                           wreg	equ	0xFE8
 21823                           indf1	equ	0xFE7
 21824                           postdec1	equ	0xFE5
 21825                           fsr1h	equ	0xFE2
 21826                           fsr1l	equ	0xFE1
 21827                           indf2	equ	0xFDF
 21828                           postinc2	equ	0xFDE
 21829                           postdec2	equ	0xFDD
 21830                           plusw2	equ	0xFDB
 21831                           fsr2h	equ	0xFDA
 21832                           fsr2l	equ	0xFD9
 21833                           status	equ	0xFD8
 21834                           
 21835 ;; *************** function _Byte_GetPair *****************
 21836 ;; Defined at:
 21837 ;;		line 87 in file "Library/Types.c"
 21838 ;; Parameters:    Size  Location     Type
 21839 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 21840 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 21841 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 21842 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 21843 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 21844 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 21845 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 21846 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 21847 ;;		 -> NULL(0), 
 21848 ;;  pPair           1   11[BANK0 ] unsigned char 
 21849 ;; Auto vars:     Size  Location     Type
 21850 ;;		None
 21851 ;; Return value:  Size  Location     Type
 21852 ;;                  1    wreg      unsigned char 
 21853 ;; Registers used:
 21854 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21855 ;; Tracked objects:
 21856 ;;		On entry : 0/0
 21857 ;;		On exit  : 0/0
 21858 ;;		Unchanged: 0/0
 21859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21860 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21863 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21864 ;;Total ram usage:        3 bytes
 21865 ;; Hardware stack levels used:    1
 21866 ;; Hardware stack levels required when called:    8
 21867 ;; This function calls:
 21868 ;;		_Byte_GetZone
 21869 ;; This function is called by:
 21870 ;;		_Word_GetPair
 21871 ;; This function uses a non-reentrant model
 21872 ;;
 21873                           
 21874                           	psect	text123
 21875  0000'                    __ptext123:
 21876                           	opt stack 0
 21877  0000'                    _Byte_GetPair:
 21878                           	opt stack 17
 21879                           
 21880                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 21881                           
 21882                           ;incstack = 0
 21883  0000' C009' F000'        	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 21884  0004' C00A' F001'        	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 21885  0008' 0E04               	movlw	4
 21886  000A' 0100               	movlb	0	; () banked
 21887  000C' 6F00'              	movwf	Byte_GetZone@pMax& (0+255),b
 21888  000E' C00B' F003'        	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 21889  0012' 0E02               	movlw	2
 21890  0014' 0100               	movlb	0	; () banked
 21891  0016' 6F00'              	movwf	Byte_GetZone@pChunkSize& (0+255),b
 21892  0018' EC00' F000'        	call	_Byte_GetZone	;wreg free
 21893  001C' 0012               	return	
 21894  001E'                    __end_of_Byte_GetPair:
 21895                           	opt stack 0
 21896                           tosu	equ	0xFFF
 21897                           tosh	equ	0xFFE
 21898                           tosl	equ	0xFFD
 21899                           pclath	equ	0xFFA
 21900                           tblptru	equ	0xFF8
 21901                           tblptrh	equ	0xFF7
 21902                           tblptrl	equ	0xFF6
 21903                           tablat	equ	0xFF5
 21904                           prodh	equ	0xFF4
 21905                           prodl	equ	0xFF3
 21906                           intcon	equ	0xFF2
 21907                           postinc0	equ	0xFEE
 21908                           wreg	equ	0xFE8
 21909                           indf1	equ	0xFE7
 21910                           postdec1	equ	0xFE5
 21911                           fsr1h	equ	0xFE2
 21912                           fsr1l	equ	0xFE1
 21913                           indf2	equ	0xFDF
 21914                           postinc2	equ	0xFDE
 21915                           postdec2	equ	0xFDD
 21916                           plusw2	equ	0xFDB
 21917                           fsr2h	equ	0xFDA
 21918                           fsr2l	equ	0xFD9
 21919                           status	equ	0xFD8
 21920                           
 21921 ;; *************** function _Byte_GetZone *****************
 21922 ;; Defined at:
 21923 ;;		line 64 in file "Library/Types.c"
 21924 ;; Parameters:    Size  Location     Type
 21925 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 21926 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 21927 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 21928 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 21929 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 21930 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 21931 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 21932 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 21933 ;;		 -> NULL(0), 
 21934 ;;  pMax            1    2[BANK0 ] unsigned char 
 21935 ;;  pChunk          1    3[BANK0 ] unsigned char 
 21936 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 21937 ;; Auto vars:     Size  Location     Type
 21938 ;;  Output          1    8[BANK0 ] unsigned char 
 21939 ;;  Offset          1    7[BANK0 ] unsigned char 
 21940 ;;  MASK            1    6[BANK0 ] unsigned char 
 21941 ;; Return value:  Size  Location     Type
 21942 ;;                  1    wreg      unsigned char 
 21943 ;; Registers used:
 21944 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 21945 ;; Tracked objects:
 21946 ;;		On entry : 0/0
 21947 ;;		On exit  : 0/0
 21948 ;;		Unchanged: 0/0
 21949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21950 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21951 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21952 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21953 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21954 ;;Total ram usage:        9 bytes
 21955 ;; Hardware stack levels used:    1
 21956 ;; Hardware stack levels required when called:    7
 21957 ;; This function calls:
 21958 ;;		Nothing
 21959 ;; This function is called by:
 21960 ;;		_Byte_GetPair
 21961 ;;		_Byte_GetTriple
 21962 ;;		_Byte_GetQuad
 21963 ;; This function uses a non-reentrant model
 21964 ;;
 21965                           
 21966                           	psect	text124
 21967  0000'                    __ptext124:
 21968                           	opt stack 0
 21969  0000'                    _Byte_GetZone:
 21970                           	opt stack 17
 21971                           
 21972                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 21973                           
 21974                           ;incstack = 0
 21975  0000' C000' FFF6         	movff	Byte_GetZone@pInput,tblptrl
 21976  0004' C001' FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 21977  0008' 0E00'              	movlw	low (__mediumconst shr (0+16))
 21978  000A' 6EF8               	movwf	tblptru,c
 21979  000C' 0EFF'              	movlw	(high __ramtop+-1)
 21980  000E' 64F7               	cpfsgt	tblptrh,c
 21981  0010' D003               	bra	u6667
 21982  0012' 0008               	tblrd		*
 21983  0014' 50F5               	movf	tablat,w,c
 21984  0016' D005               	bra	u6660
 21985  0018'                    u6667:
 21986  0018' CFF6 FFE9          	movff	tblptrl,fsr0l
 21987  001C' CFF7 FFEA          	movff	tblptrh,fsr0h
 21988  0020' 50EF               	movf	indf0,w,c
 21989  0022'                    u6660:
 21990  0022' 0100               	movlb	0	; () banked
 21991  0024' 6F00'              	movwf	Byte_GetZone@Output& (0+255),b
 21992                           
 21993                           ; BSR set to: 0
 21994                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 21995  0026' 0100               	movlb	0	; () banked
 21996  0028' 5100'              	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 21997  002A' 0D01               	mullw	1
 21998  002C' 0E00'              	movlw	low _MASKS
 21999  002E' 24F3               	addwf	prodl,w,c
 22000  0030' 6EF6               	movwf	tblptrl,c
 22001  0032' 0E00'              	movlw	high _MASKS
 22002  0034' 20F4               	addwfc	prodh,w,c
 22003  0036' 6EF7               	movwf	tblptrh,c
 22004  0038'                    	if	1	;There are 3 active tblptr bytes
 22005  0038' 6AF8               	clrf	tblptru,c
 22006  003A' 0E00'              	movlw	low (__mediumconst shr (0+16))
 22007  003C' 22F8               	addwfc	tblptru,f,c
 22008  003E'                    	endif
 22009  003E' 0008               	tblrd		*
 22010  0040' CFF5 F006'         	movff	tablat,Byte_GetZone@MASK
 22011                           
 22012                           ; BSR set to: 0
 22013                           ;Types.c: 68: UINT8 Offset = 0;
 22014  0044' 0E00               	movlw	0
 22015  0046' 0100               	movlb	0	; () banked
 22016  0048' 6F00'              	movwf	Byte_GetZone@Offset& (0+255),b
 22017                           
 22018                           ;Types.c: 70: while (pChunk >= pMax)
 22019  004A' D006               	goto	l732
 22020  004C'                    
 22021                           ; BSR set to: 0
 22022                           ;Types.c: 71: {
 22023                           ;Types.c: 72: pChunk -= pMax;
 22024                           
 22025                           ; BSR set to: 0
 22026  004C' 0100               	movlb	0	; () banked
 22027  004E' 5100'              	movf	Byte_GetZone@pMax& (0+255),w,b
 22028  0050' 0100               	movlb	0	; () banked
 22029  0052' 5F00'              	subwf	Byte_GetZone@pChunk& (0+255),f,b
 22030                           
 22031                           ; BSR set to: 0
 22032                           ;Types.c: 73: Offset += 1;
 22033  0054' 0100               	movlb	0	; () banked
 22034  0056' 2B00'              	incf	Byte_GetZone@Offset& (0+255),f,b
 22035  0058'                    l732:
 22036                           
 22037                           ; BSR set to: 0
 22038                           
 22039                           ; BSR set to: 0
 22040  0058' 0100               	movlb	0	; () banked
 22041  005A' 5100'              	movf	Byte_GetZone@pMax& (0+255),w,b
 22042  005C' 0100               	movlb	0	; () banked
 22043  005E' 5D00'              	subwf	Byte_GetZone@pChunk& (0+255),w,b
 22044  0060' B0D8               	btfsc	status,0,c
 22045  0062' D7F4               	goto	l733
 22046                           
 22047                           ; BSR set to: 0
 22048                           ;Types.c: 74: }
 22049                           ;Types.c: 75: pChunk *= pChunkSize;
 22050                           
 22051                           ; BSR set to: 0
 22052  0064' 0100               	movlb	0	; () banked
 22053  0066' 5100'              	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 22054  0068' 0100               	movlb	0	; () banked
 22055  006A' 0300'              	mulwf	Byte_GetZone@pChunk& (0+255),b
 22056  006C' 50F3               	movf	prodl,w,c
 22057  006E' 6F00'              	movwf	Byte_GetZone@pChunk& (0+255),b
 22058                           
 22059                           ; BSR set to: 0
 22060                           ;Types.c: 76: pChunk += Offset;
 22061  0070' 0100               	movlb	0	; () banked
 22062  0072' 5100'              	movf	Byte_GetZone@Offset& (0+255),w,b
 22063  0074' 0100               	movlb	0	; () banked
 22064  0076' 2700'              	addwf	Byte_GetZone@pChunk& (0+255),f,b
 22065                           
 22066                           ; BSR set to: 0
 22067                           ;Types.c: 78: Output >>= pChunk;
 22068  0078' 0100               	movlb	0	; () banked
 22069  007A' 2900'              	incf	Byte_GetZone@pChunk& (0+255),w,b
 22070  007C' 0100               	movlb	0	; () banked
 22071  007E' 6F00'              	movwf	??_Byte_GetZone& (0+255),b
 22072  0080' D003               	goto	u6680
 22073  0082'                    u6685:
 22074  0082' 0100               	movlb	0	; () banked
 22075  0084' 90D8               	bcf	status,0,c
 22076  0086' 3300'              	rrcf	Byte_GetZone@Output& (0+255),f,b
 22077  0088'                    u6680:
 22078  0088' 0100               	movlb	0	; () banked
 22079  008A' 2F00'              	decfsz	??_Byte_GetZone& (0+255),f,b
 22080  008C' D7FA               	goto	u6685
 22081                           
 22082                           ;Types.c: 79: Output &= MASK;
 22083  008E' 0100               	movlb	0	; () banked
 22084  0090' 5100'              	movf	Byte_GetZone@MASK& (0+255),w,b
 22085  0092' 0100               	movlb	0	; () banked
 22086  0094' 1700'              	andwf	Byte_GetZone@Output& (0+255),f,b
 22087                           
 22088                           ; BSR set to: 0
 22089                           ;Types.c: 80: return Output;
 22090  0096' 0100               	movlb	0	; () banked
 22091  0098' 5100'              	movf	Byte_GetZone@Output& (0+255),w,b
 22092  009A' 0012               	return	
 22093  009C'                    __end_of_Byte_GetZone:
 22094                           	opt stack 0
 22095                           tosu	equ	0xFFF
 22096                           tosh	equ	0xFFE
 22097                           tosl	equ	0xFFD
 22098                           pclath	equ	0xFFA
 22099                           tblptru	equ	0xFF8
 22100                           tblptrh	equ	0xFF7
 22101                           tblptrl	equ	0xFF6
 22102                           tablat	equ	0xFF5
 22103                           prodh	equ	0xFF4
 22104                           prodl	equ	0xFF3
 22105                           intcon	equ	0xFF2
 22106                           indf0	equ	0xFEF
 22107                           postinc0	equ	0xFEE
 22108                           fsr0h	equ	0xFEA
 22109                           fsr0l	equ	0xFE9
 22110                           wreg	equ	0xFE8
 22111                           indf1	equ	0xFE7
 22112                           postdec1	equ	0xFE5
 22113                           fsr1h	equ	0xFE2
 22114                           fsr1l	equ	0xFE1
 22115                           indf2	equ	0xFDF
 22116                           postinc2	equ	0xFDE
 22117                           postdec2	equ	0xFDD
 22118                           plusw2	equ	0xFDB
 22119                           fsr2h	equ	0xFDA
 22120                           fsr2l	equ	0xFD9
 22121                           status	equ	0xFD8
 22122                           
 22123 ;; *************** function _Byte_SetQuad *****************
 22124 ;; Defined at:
 22125 ;;		line 101 in file "Library/Types.c"
 22126 ;; Parameters:    Size  Location     Type
 22127 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 22128 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 22129 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 22130 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 22131 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 22132 ;;		 -> NULL(0), 
 22133 ;;  pQuad           1   13[BANK0 ] unsigned char 
 22134 ;;  pValue          1   14[BANK0 ] unsigned char 
 22135 ;; Auto vars:     Size  Location     Type
 22136 ;;		None
 22137 ;; Return value:  Size  Location     Type
 22138 ;;                  1    wreg      void 
 22139 ;; Registers used:
 22140 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22141 ;; Tracked objects:
 22142 ;;		On entry : 0/0
 22143 ;;		On exit  : 0/0
 22144 ;;		Unchanged: 0/0
 22145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22146 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22149 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22150 ;;Total ram usage:        4 bytes
 22151 ;; Hardware stack levels used:    1
 22152 ;; Hardware stack levels required when called:    8
 22153 ;; This function calls:
 22154 ;;		_Byte_SetZone
 22155 ;; This function is called by:
 22156 ;;		_Port_SetQuadType
 22157 ;;		_SPI_Init
 22158 ;;		_SPI_MinSpeed
 22159 ;;		_SPI_MaxSpeed
 22160 ;;		_Port_SetQuad
 22161 ;;		_Word_SetQuad
 22162 ;;		_I2C_Init
 22163 ;; This function uses a non-reentrant model
 22164 ;;
 22165                           
 22166                           	psect	text125
 22167  0000'                    __ptext125:
 22168                           	opt stack 0
 22169  0000'                    _Byte_SetQuad:
 22170                           	opt stack 19
 22171                           
 22172                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 22173                           
 22174                           ; BSR set to: 0
 22175                           ;incstack = 0
 22176  0000' C00B' F000'        	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 22177  0004' C00C' F001'        	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 22178  0008' 0E02               	movlw	2
 22179  000A' 0100               	movlb	0	; () banked
 22180  000C' 6F00'              	movwf	Byte_SetZone@pMax& (0+255),b
 22181  000E' C00D' F003'        	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 22182  0012' 0E04               	movlw	4
 22183  0014' 0100               	movlb	0	; () banked
 22184  0016' 6F00'              	movwf	Byte_SetZone@pChunkSize& (0+255),b
 22185  0018' C00E' F005'        	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 22186  001C' EC00' F000'        	call	_Byte_SetZone	;wreg free
 22187  0020' 0012               	return		;funcret
 22188  0022'                    __end_of_Byte_SetQuad:
 22189                           	opt stack 0
 22190                           tosu	equ	0xFFF
 22191                           tosh	equ	0xFFE
 22192                           tosl	equ	0xFFD
 22193                           pclath	equ	0xFFA
 22194                           tblptru	equ	0xFF8
 22195                           tblptrh	equ	0xFF7
 22196                           tblptrl	equ	0xFF6
 22197                           tablat	equ	0xFF5
 22198                           prodh	equ	0xFF4
 22199                           prodl	equ	0xFF3
 22200                           intcon	equ	0xFF2
 22201                           indf0	equ	0xFEF
 22202                           postinc0	equ	0xFEE
 22203                           fsr0h	equ	0xFEA
 22204                           fsr0l	equ	0xFE9
 22205                           wreg	equ	0xFE8
 22206                           indf1	equ	0xFE7
 22207                           postdec1	equ	0xFE5
 22208                           fsr1h	equ	0xFE2
 22209                           fsr1l	equ	0xFE1
 22210                           indf2	equ	0xFDF
 22211                           postinc2	equ	0xFDE
 22212                           postdec2	equ	0xFDD
 22213                           plusw2	equ	0xFDB
 22214                           fsr2h	equ	0xFDA
 22215                           fsr2l	equ	0xFD9
 22216                           status	equ	0xFD8
 22217                           
 22218 ;; *************** function _Byte_SetZone *****************
 22219 ;; Defined at:
 22220 ;;		line 47 in file "Library/Types.c"
 22221 ;; Parameters:    Size  Location     Type
 22222 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 22223 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 22224 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 22225 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 22226 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 22227 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 22228 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 22229 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 22230 ;;		 -> PortC(10), PortF(10), NULL(0), 
 22231 ;;  pMax            1    2[BANK0 ] unsigned char 
 22232 ;;  pChunk          1    3[BANK0 ] unsigned char 
 22233 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 22234 ;;  pValue          1    5[BANK0 ] unsigned char 
 22235 ;; Auto vars:     Size  Location     Type
 22236 ;;  MASK            1   10[BANK0 ] unsigned char 
 22237 ;;  Offset          1    9[BANK0 ] unsigned char 
 22238 ;; Return value:  Size  Location     Type
 22239 ;;                  1    wreg      void 
 22240 ;; Registers used:
 22241 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 22242 ;; Tracked objects:
 22243 ;;		On entry : 0/0
 22244 ;;		On exit  : 0/0
 22245 ;;		Unchanged: 0/0
 22246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22247 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22248 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22249 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22250 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22251 ;;Total ram usage:       11 bytes
 22252 ;; Hardware stack levels used:    1
 22253 ;; Hardware stack levels required when called:    7
 22254 ;; This function calls:
 22255 ;;		Nothing
 22256 ;; This function is called by:
 22257 ;;		_Byte_SetPair
 22258 ;;		_Byte_SetQuad
 22259 ;;		_Byte_SetTriple
 22260 ;; This function uses a non-reentrant model
 22261 ;;
 22262                           
 22263                           	psect	text126
 22264  0000'                    __ptext126:
 22265                           	opt stack 0
 22266  0000'                    _Byte_SetZone:
 22267                           	opt stack 18
 22268                           
 22269                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 22270                           
 22271                           ;incstack = 0
 22272  0000' 0100               	movlb	0	; () banked
 22273  0002' 5100'              	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 22274  0004' 0D01               	mullw	1
 22275  0006' 0E00'              	movlw	low _MASKS
 22276  0008' 24F3               	addwf	prodl,w,c
 22277  000A' 6EF6               	movwf	tblptrl,c
 22278  000C' 0E00'              	movlw	high _MASKS
 22279  000E' 20F4               	addwfc	prodh,w,c
 22280  0010' 6EF7               	movwf	tblptrh,c
 22281  0012'                    	if	1	;There are 3 active tblptr bytes
 22282  0012' 6AF8               	clrf	tblptru,c
 22283  0014' 0E00'              	movlw	low (__mediumconst shr (0+16))
 22284  0016' 22F8               	addwfc	tblptru,f,c
 22285  0018'                    	endif
 22286  0018' 0008               	tblrd		*
 22287  001A' CFF5 F00A'         	movff	tablat,Byte_SetZone@MASK
 22288                           
 22289                           ; BSR set to: 0
 22290                           ;Types.c: 50: UINT8 Offset = 0;
 22291  001E' 0E00               	movlw	0
 22292  0020' 0100               	movlb	0	; () banked
 22293  0022' 6F00'              	movwf	Byte_SetZone@Offset& (0+255),b
 22294                           
 22295                           ;Types.c: 52: while (pChunk >= pMax)
 22296  0024' D006               	goto	l726
 22297  0026'                    
 22298                           ; BSR set to: 0
 22299                           ;Types.c: 53: {
 22300                           ;Types.c: 54: pChunk -= pMax;
 22301                           
 22302                           ; BSR set to: 0
 22303  0026' 0100               	movlb	0	; () banked
 22304  0028' 5100'              	movf	Byte_SetZone@pMax& (0+255),w,b
 22305  002A' 0100               	movlb	0	; () banked
 22306  002C' 5F00'              	subwf	Byte_SetZone@pChunk& (0+255),f,b
 22307                           
 22308                           ; BSR set to: 0
 22309                           ;Types.c: 55: Offset += 1;
 22310  002E' 0100               	movlb	0	; () banked
 22311  0030' 2B00'              	incf	Byte_SetZone@Offset& (0+255),f,b
 22312  0032'                    l726:
 22313                           
 22314                           ; BSR set to: 0
 22315                           
 22316                           ; BSR set to: 0
 22317  0032' 0100               	movlb	0	; () banked
 22318  0034' 5100'              	movf	Byte_SetZone@pMax& (0+255),w,b
 22319  0036' 0100               	movlb	0	; () banked
 22320  0038' 5D00'              	subwf	Byte_SetZone@pChunk& (0+255),w,b
 22321  003A' B0D8               	btfsc	status,0,c
 22322  003C' D7F4               	goto	l727
 22323                           
 22324                           ; BSR set to: 0
 22325                           ;Types.c: 56: }
 22326                           ;Types.c: 57: pChunk *= pChunkSize;
 22327                           
 22328                           ; BSR set to: 0
 22329  003E' 0100               	movlb	0	; () banked
 22330  0040' 5100'              	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 22331  0042' 0100               	movlb	0	; () banked
 22332  0044' 0300'              	mulwf	Byte_SetZone@pChunk& (0+255),b
 22333  0046' 50F3               	movf	prodl,w,c
 22334  0048' 6F00'              	movwf	Byte_SetZone@pChunk& (0+255),b
 22335                           
 22336                           ; BSR set to: 0
 22337                           ;Types.c: 58: pChunk += Offset;
 22338  004A' 0100               	movlb	0	; () banked
 22339  004C' 5100'              	movf	Byte_SetZone@Offset& (0+255),w,b
 22340  004E' 0100               	movlb	0	; () banked
 22341  0050' 2700'              	addwf	Byte_SetZone@pChunk& (0+255),f,b
 22342                           
 22343                           ; BSR set to: 0
 22344                           ;Types.c: 60: pValue &= MASK;
 22345  0052' 0100               	movlb	0	; () banked
 22346  0054' 5100'              	movf	Byte_SetZone@MASK& (0+255),w,b
 22347  0056' 0100               	movlb	0	; () banked
 22348  0058' 1700'              	andwf	Byte_SetZone@pValue& (0+255),f,b
 22349                           
 22350                           ; BSR set to: 0
 22351                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 22352  005A' C003' F006'        	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 22353  005E' C00A' F007'        	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 22354  0062' 0100               	movlb	0	; () banked
 22355  0064' 2B00'              	incf	??_Byte_SetZone& (0+255),f,b
 22356  0066' D003               	goto	u6764
 22357  0068'                    u6765:
 22358  0068' 0100               	movlb	0	; () banked
 22359  006A' 90D8               	bcf	status,0,c
 22360  006C' 3700'              	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 22361  006E'                    u6764:
 22362  006E' 0100               	movlb	0	; () banked
 22363  0070' 2F00'              	decfsz	??_Byte_SetZone& (0+255),f,b
 22364  0072' D7FA               	goto	u6765
 22365  0074' 0100               	movlb	0	; () banked
 22366  0076' 5100'              	movf	(??_Byte_SetZone+1)& (0+255),w,b
 22367  0078' 0AFF               	xorlw	255
 22368  007A' 0100               	movlb	0	; () banked
 22369  007C' 6F00'              	movwf	(??_Byte_SetZone+2)& (0+255),b
 22370  007E' C000' FFD9         	movff	Byte_SetZone@pInput,fsr2l
 22371  0082' C001' FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 22372  0086' 0100               	movlb	0	; () banked
 22373  0088' 5100'              	movf	(??_Byte_SetZone+2)& (0+255),w,b
 22374  008A' 16DF               	andwf	indf2,f,c
 22375                           
 22376                           ; BSR set to: 0
 22377                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 22378  008C' C003' F006'        	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 22379  0090' C005' F007'        	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 22380  0094' 0100               	movlb	0	; () banked
 22381  0096' 2B00'              	incf	??_Byte_SetZone& (0+255),f,b
 22382  0098' D003               	goto	u6774
 22383  009A'                    u6775:
 22384  009A' 0100               	movlb	0	; () banked
 22385  009C' 90D8               	bcf	status,0,c
 22386  009E' 3700'              	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 22387  00A0'                    u6774:
 22388  00A0' 0100               	movlb	0	; () banked
 22389  00A2' 2F00'              	decfsz	??_Byte_SetZone& (0+255),f,b
 22390  00A4' D7FA               	goto	u6775
 22391  00A6' C000' FFD9         	movff	Byte_SetZone@pInput,fsr2l
 22392  00AA' C001' FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 22393  00AE' 0100               	movlb	0	; () banked
 22394  00B0' 5100'              	movf	(??_Byte_SetZone+1)& (0+255),w,b
 22395  00B2' 12DF               	iorwf	indf2,f,c
 22396                           
 22397                           ; BSR set to: 0
 22398  00B4' 0012               	return		;funcret
 22399  00B6'                    __end_of_Byte_SetZone:
 22400                           	opt stack 0
 22401                           tosu	equ	0xFFF
 22402                           tosh	equ	0xFFE
 22403                           tosl	equ	0xFFD
 22404                           pclath	equ	0xFFA
 22405                           tblptru	equ	0xFF8
 22406                           tblptrh	equ	0xFF7
 22407                           tblptrl	equ	0xFF6
 22408                           tablat	equ	0xFF5
 22409                           prodh	equ	0xFF4
 22410                           prodl	equ	0xFF3
 22411                           intcon	equ	0xFF2
 22412                           indf0	equ	0xFEF
 22413                           postinc0	equ	0xFEE
 22414                           fsr0h	equ	0xFEA
 22415                           fsr0l	equ	0xFE9
 22416                           wreg	equ	0xFE8
 22417                           indf1	equ	0xFE7
 22418                           postdec1	equ	0xFE5
 22419                           fsr1h	equ	0xFE2
 22420                           fsr1l	equ	0xFE1
 22421                           indf2	equ	0xFDF
 22422                           postinc2	equ	0xFDE
 22423                           postdec2	equ	0xFDD
 22424                           plusw2	equ	0xFDB
 22425                           fsr2h	equ	0xFDA
 22426                           fsr2l	equ	0xFD9
 22427                           status	equ	0xFD8
 22428                           
 22429 ;; *************** function _Console_Init *****************
 22430 ;; Defined at:
 22431 ;;		line 157 in file "Library/Console.c"
 22432 ;; Parameters:    Size  Location     Type
 22433 ;;		None
 22434 ;; Auto vars:     Size  Location     Type
 22435 ;;  y               1    3[BANK0 ] unsigned char 
 22436 ;;  x               1    2[BANK0 ] unsigned char 
 22437 ;; Return value:  Size  Location     Type
 22438 ;;                  1    wreg      void 
 22439 ;; Registers used:
 22440 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 22441 ;; Tracked objects:
 22442 ;;		On entry : 0/0
 22443 ;;		On exit  : 0/0
 22444 ;;		Unchanged: 0/0
 22445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22447 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22448 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22449 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22450 ;;Total ram usage:        4 bytes
 22451 ;; Hardware stack levels used:    1
 22452 ;; Hardware stack levels required when called:    7
 22453 ;; This function calls:
 22454 ;;		Nothing
 22455 ;; This function is called by:
 22456 ;;		_init
 22457 ;; This function uses a non-reentrant model
 22458 ;;
 22459                           
 22460                           	psect	text127
 22461  0000'                    __ptext127:
 22462                           	opt stack 0
 22463  0000'                    _Console_Init:
 22464                           	opt stack 22
 22465                           
 22466                           ;Console.c: 160: lBufferX = 0;
 22467                           
 22468                           ; BSR set to: 0
 22469                           ;incstack = 0
 22470  0000' 0E00               	movlw	0
 22471  0002' 0100               	movlb	0	; () banked
 22472  0004' 6F00'              	movwf	_lBufferX& (0+255),b
 22473                           
 22474                           ;Console.c: 161: lBufferY = 0;
 22475  0006' 0E00               	movlw	0
 22476  0008' 0100               	movlb	0	; () banked
 22477  000A' 6F00'              	movwf	_lBufferY& (0+255),b
 22478                           
 22479                           ;Console.c: 163: UINT8 x, y;
 22480                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 22481  000C' 0E00               	movlw	0
 22482  000E' 0100               	movlb	0	; () banked
 22483  0010' 6F00'              	movwf	Console_Init@x& (0+255),b
 22484  0012'                    l12259:
 22485                           
 22486                           ; BSR set to: 0
 22487  0012' 0E13               	movlw	19
 22488  0014' 0100               	movlb	0	; () banked
 22489  0016' 6500'              	cpfsgt	Console_Init@x& (0+255),b
 22490  0018' D001               	goto	l976
 22491  001A' 0012               	return	
 22492  001C'                    l976:
 22493                           
 22494                           ; BSR set to: 0
 22495                           ;Console.c: 165: {
 22496                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 22497                           
 22498                           ; BSR set to: 0
 22499  001C' 0E00               	movlw	0
 22500  001E' 0100               	movlb	0	; () banked
 22501  0020' 6F00'              	movwf	Console_Init@y& (0+255),b
 22502  0022'                    l12265:
 22503                           
 22504                           ; BSR set to: 0
 22505  0022' 0E0E               	movlw	14
 22506  0024' 0100               	movlb	0	; () banked
 22507  0026' 6500'              	cpfsgt	Console_Init@y& (0+255),b
 22508  0028' D001               	goto	l978
 22509  002A' D02C               	goto	u8160
 22510  002C'                    l978:
 22511                           
 22512                           ; BSR set to: 0
 22513                           ;Console.c: 167: {
 22514                           ;Console.c: 168: lBuffer[y][x] = '\0';
 22515                           
 22516                           ; BSR set to: 0
 22517  002C' 0100               	movlb	0	; () banked
 22518  002E' 5100'              	movf	Console_Init@y& (0+255),w,b
 22519  0030' 0D14               	mullw	20
 22520  0032' 0E00'              	movlw	low _lBuffer
 22521  0034' 0100               	movlb	0	; () banked
 22522  0036' 6F00'              	movwf	??_Console_Init& (0+255),b
 22523  0038' 0E00'              	movlw	high _lBuffer
 22524  003A' 0100               	movlb	0	; () banked
 22525  003C' 6F00'              	movwf	(??_Console_Init+1)& (0+255),b
 22526  003E' 50F3               	movf	prodl,w,c
 22527  0040' 0100               	movlb	0	; () banked
 22528  0042' 2700'              	addwf	??_Console_Init& (0+255),f,b
 22529  0044' 50F4               	movf	prodh,w,c
 22530  0046' 0100               	movlb	0	; () banked
 22531  0048' 2300'              	addwfc	(??_Console_Init+1)& (0+255),f,b
 22532  004A' 0100               	movlb	0	; () banked
 22533  004C' 5100'              	movf	Console_Init@x& (0+255),w,b
 22534  004E' 0D01               	mullw	1
 22535  0050' 50F3               	movf	prodl,w,c
 22536  0052' 0100               	movlb	0	; () banked
 22537  0054' 2500'              	addwf	??_Console_Init& (0+255),w,b
 22538  0056' 6ED9               	movwf	fsr2l,c
 22539  0058' 50F4               	movf	prodh,w,c
 22540  005A' 0100               	movlb	0	; () banked
 22541  005C' 2100'              	addwfc	(??_Console_Init+1)& (0+255),w,b
 22542  005E' 6EDA               	movwf	fsr2h,c
 22543  0060' 0E00               	movlw	0
 22544  0062' 6EDF               	movwf	indf2,c
 22545                           
 22546                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 22547  0064' 0100               	movlb	0	; () banked
 22548  0066' 5100'              	movf	Console_Init@y& (0+255),w,b
 22549  0068' 0D02               	mullw	2
 22550  006A' 0E00'              	movlw	low _lCBuffer
 22551  006C' 24F3               	addwf	prodl,w,c
 22552  006E' 6ED9               	movwf	fsr2l,c
 22553  0070' 0E00'              	movlw	high _lCBuffer
 22554  0072' 20F4               	addwfc	prodh,w,c
 22555  0074' 6EDA               	movwf	fsr2h,c
 22556  0076' 0EFF               	movlw	255
 22557  0078' 6EDE               	movwf	postinc2,c
 22558  007A' 0EFF               	movlw	255
 22559  007C' 6EDD               	movwf	postdec2,c
 22560                           
 22561                           ; BSR set to: 0
 22562  007E' 0100               	movlb	0	; () banked
 22563  0080' 2B00'              	incf	Console_Init@y& (0+255),f,b
 22564  0082' D7CF               	goto	l12265
 22565  0084'                    u8160:
 22566                           
 22567                           ; BSR set to: 0
 22568                           
 22569                           ; BSR set to: 0
 22570  0084' 0100               	movlb	0	; () banked
 22571  0086' 2B00'              	incf	Console_Init@x& (0+255),f,b
 22572  0088' D7C4               	goto	l12259
 22573  008A'                    __end_of_Console_Init:
 22574                           	opt stack 0
 22575                           tosu	equ	0xFFF
 22576                           tosh	equ	0xFFE
 22577                           tosl	equ	0xFFD
 22578                           pclath	equ	0xFFA
 22579                           tblptru	equ	0xFF8
 22580                           tblptrh	equ	0xFF7
 22581                           tblptrl	equ	0xFF6
 22582                           tablat	equ	0xFF5
 22583                           prodh	equ	0xFF4
 22584                           prodl	equ	0xFF3
 22585                           intcon	equ	0xFF2
 22586                           indf0	equ	0xFEF
 22587                           postinc0	equ	0xFEE
 22588                           fsr0h	equ	0xFEA
 22589                           fsr0l	equ	0xFE9
 22590                           wreg	equ	0xFE8
 22591                           indf1	equ	0xFE7
 22592                           postdec1	equ	0xFE5
 22593                           fsr1h	equ	0xFE2
 22594                           fsr1l	equ	0xFE1
 22595                           indf2	equ	0xFDF
 22596                           postinc2	equ	0xFDE
 22597                           postdec2	equ	0xFDD
 22598                           plusw2	equ	0xFDB
 22599                           fsr2h	equ	0xFDA
 22600                           fsr2l	equ	0xFD9
 22601                           status	equ	0xFD8
 22602                           
 22603 ;; *************** function _ISR_Function *****************
 22604 ;; Defined at:
 22605 ;;		line 38 in file "Library/ISR.c"
 22606 ;; Parameters:    Size  Location     Type
 22607 ;;		None
 22608 ;; Auto vars:     Size  Location     Type
 22609 ;;		None
 22610 ;; Return value:  Size  Location     Type
 22611 ;;                  1    wreg      void 
 22612 ;; Registers used:
 22613 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22614 ;; Tracked objects:
 22615 ;;		On entry : 0/0
 22616 ;;		On exit  : 0/0
 22617 ;;		Unchanged: 0/0
 22618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22621 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22622 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22623 ;;Total ram usage:       18 bytes
 22624 ;; Hardware stack levels used:    1
 22625 ;; Hardware stack levels required when called:    6
 22626 ;; This function calls:
 22627 ;;		_Timer0_ISR
 22628 ;; This function is called by:
 22629 ;;		Interrupt level 2
 22630 ;; This function uses a non-reentrant model
 22631 ;;
 22632                           
 22633                           	psect	intcode
 22634  0000'                    __pintcode:
 22635                           	opt stack 0
 22636  0000'                    _ISR_Function:
 22637                           	opt stack 13
 22638                           
 22639                           ; BSR set to: 0
 22640                           ;incstack = 0
 22641  0000' 8200'              	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 22642  0002' CFFA F016'         	movff	pclath,??_ISR_Function
 22643  0006' CFFB F017'         	movff	pclatu,??_ISR_Function+1
 22644  000A' CFE9 F018'         	movff	fsr0l,??_ISR_Function+2
 22645  000E' CFEA F019'         	movff	fsr0h,??_ISR_Function+3
 22646  0012' CFE1 F01A'         	movff	fsr1l,??_ISR_Function+4
 22647  0016' CFE2 F01B'         	movff	fsr1h,??_ISR_Function+5
 22648  001A' CFD9 F01C'         	movff	fsr2l,??_ISR_Function+6
 22649  001E' CFDA F01D'         	movff	fsr2h,??_ISR_Function+7
 22650  0022' CFF3 F01E'         	movff	prodl,??_ISR_Function+8
 22651  0026' CFF4 F01F'         	movff	prodh,??_ISR_Function+9
 22652  002A' CFF6 F020'         	movff	tblptrl,??_ISR_Function+10
 22653  002E' CFF7 F021'         	movff	tblptrh,??_ISR_Function+11
 22654  0032' CFF8 F022'         	movff	tblptru,??_ISR_Function+12
 22655  0036' CFF5 F023'         	movff	tablat,??_ISR_Function+13
 22656  003A' C000' F024'        	movff	btemp,??_ISR_Function+14
 22657  003E' C001' F025'        	movff	btemp+1,??_ISR_Function+15
 22658  0042' C002' F026'        	movff	btemp+2,??_ISR_Function+16
 22659  0046' C003' F027'        	movff	btemp+3,??_ISR_Function+17
 22660                           
 22661                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 22662  004A' 92F2               	bcf	intcon,1,c	;volatile
 22663                           
 22664                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 22665  004C' B4F2               	btfsc	intcon,2,c	;volatile
 22666  004E' AAF2               	btfss	intcon,5,c	;volatile
 22667  0050' D002               	goto	i2l1590
 22668                           
 22669                           ;ISR.c: 68: Timer0_ISR();
 22670  0052' EC00' F000'        	call	_Timer0_ISR	;wreg free
 22671  0056'                    i2l1590:
 22672  0056' C027' F003'        	movff	??_ISR_Function+17,btemp+3
 22673  005A' C026' F002'        	movff	??_ISR_Function+16,btemp+2
 22674  005E' C025' F001'        	movff	??_ISR_Function+15,btemp+1
 22675  0062' C024' F000'        	movff	??_ISR_Function+14,btemp
 22676  0066' C023' FFF5         	movff	??_ISR_Function+13,tablat
 22677  006A' C022' FFF8         	movff	??_ISR_Function+12,tblptru
 22678  006E' C021' FFF7         	movff	??_ISR_Function+11,tblptrh
 22679  0072' C020' FFF6         	movff	??_ISR_Function+10,tblptrl
 22680  0076' C01F' FFF4         	movff	??_ISR_Function+9,prodh
 22681  007A' C01E' FFF3         	movff	??_ISR_Function+8,prodl
 22682  007E' C01D' FFDA         	movff	??_ISR_Function+7,fsr2h
 22683  0082' C01C' FFD9         	movff	??_ISR_Function+6,fsr2l
 22684  0086' C01B' FFE2         	movff	??_ISR_Function+5,fsr1h
 22685  008A' C01A' FFE1         	movff	??_ISR_Function+4,fsr1l
 22686  008E' C019' FFEA         	movff	??_ISR_Function+3,fsr0h
 22687  0092' C018' FFE9         	movff	??_ISR_Function+2,fsr0l
 22688  0096' C017' FFFB         	movff	??_ISR_Function+1,pclatu
 22689  009A' C016' FFFA         	movff	??_ISR_Function,pclath
 22690  009E' 9200'              	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 22691  00A0' 0011               	retfie		f
 22692  00A2'                    __end_of_ISR_Function:
 22693                           	opt stack 0
 22694                           tosu	equ	0xFFF
 22695                           tosh	equ	0xFFE
 22696                           tosl	equ	0xFFD
 22697                           pclatu	equ	0xFFB
 22698                           pclath	equ	0xFFA
 22699                           tblptru	equ	0xFF8
 22700                           tblptrh	equ	0xFF7
 22701                           tblptrl	equ	0xFF6
 22702                           tablat	equ	0xFF5
 22703                           prodh	equ	0xFF4
 22704                           prodl	equ	0xFF3
 22705                           intcon	equ	0xFF2
 22706                           indf0	equ	0xFEF
 22707                           postinc0	equ	0xFEE
 22708                           fsr0h	equ	0xFEA
 22709                           fsr0l	equ	0xFE9
 22710                           wreg	equ	0xFE8
 22711                           indf1	equ	0xFE7
 22712                           postdec1	equ	0xFE5
 22713                           fsr1h	equ	0xFE2
 22714                           fsr1l	equ	0xFE1
 22715                           indf2	equ	0xFDF
 22716                           postinc2	equ	0xFDE
 22717                           postdec2	equ	0xFDD
 22718                           plusw2	equ	0xFDB
 22719                           fsr2h	equ	0xFDA
 22720                           fsr2l	equ	0xFD9
 22721                           status	equ	0xFD8
 22722                           
 22723 ;; *************** function _Timer0_ISR *****************
 22724 ;; Defined at:
 22725 ;;		line 94 in file "Library/Timer0.c"
 22726 ;; Parameters:    Size  Location     Type
 22727 ;;		None
 22728 ;; Auto vars:     Size  Location     Type
 22729 ;;		None
 22730 ;; Return value:  Size  Location     Type
 22731 ;;                  1    wreg      void 
 22732 ;; Registers used:
 22733 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22734 ;; Tracked objects:
 22735 ;;		On entry : 0/0
 22736 ;;		On exit  : 0/0
 22737 ;;		Unchanged: 0/0
 22738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22742 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22743 ;;Total ram usage:        0 bytes
 22744 ;; Hardware stack levels used:    1
 22745 ;; Hardware stack levels required when called:    5
 22746 ;; This function calls:
 22747 ;;		Absolute function
 22748 ;;		i2_Motor_Step
 22749 ;;		i2_Timer0_Stop
 22750 ;; This function is called by:
 22751 ;;		_ISR_Function
 22752 ;; This function uses a non-reentrant model
 22753 ;;
 22754                           
 22755                           	psect	text129
 22756  0000'                    __ptext129:
 22757                           	opt stack 0
 22758  0000'                    _Timer0_ISR:
 22759                           	opt stack 13
 22760                           
 22761                           ;Timer0.c: 96: Timer0_Stop();
 22762                           
 22763                           ;incstack = 0
 22764  0000' EC00' F000'        	call	i2_Timer0_Stop	;wreg free
 22765                           
 22766                           ;Timer0.c: 99: if (gISR != 0)
 22767  0004' 0100               	movlb	0	; () banked
 22768  0006' 5100'              	movf	_gISR& (0+255),w,b
 22769  0008' 0100               	movlb	0	; () banked
 22770  000A' 1100'              	iorwf	(_gISR+1)& (0+255),w,b
 22771  000C' 0100               	movlb	0	; () banked
 22772  000E' 1100'              	iorwf	(_gISR+2)& (0+255),w,b
 22773  0010' B4D8               	btfsc	status,2,c
 22774  0012' 0012               	return	
 22775                           
 22776                           ; BSR set to: 0
 22777                           ;Timer0.c: 100: gISR();
 22778  0014' D801               	call	i2u957_48
 22779  0016' 0012               	return	
 22780  0018'                    i2u957_48:
 22781  0018' 0005               	push	
 22782  001A' 6EFA               	movwf	pclath,c
 22783  001C' 0100               	movlb	0	; () banked
 22784  001E' 5100'              	movf	_gISR& (0+255),w,b
 22785  0020' 6EFD               	movwf	tosl,c
 22786  0022' 5100'              	movf	(_gISR+1)& (0+255),w,b
 22787  0024' 6EFE               	movwf	tosh,c
 22788  0026' 5100'              	movf	(_gISR+2)& (0+255),w,b
 22789  0028' 6EFF               	movwf	tosu,c
 22790  002A' 50FA               	movf	pclath,w,c
 22791  002C' 0012               	return		;indir
 22792  002E'                    __end_of_Timer0_ISR:
 22793                           	opt stack 0
 22794                           tosu	equ	0xFFF
 22795                           tosh	equ	0xFFE
 22796                           tosl	equ	0xFFD
 22797                           pclatu	equ	0xFFB
 22798                           pclath	equ	0xFFA
 22799                           tblptru	equ	0xFF8
 22800                           tblptrh	equ	0xFF7
 22801                           tblptrl	equ	0xFF6
 22802                           tablat	equ	0xFF5
 22803                           prodh	equ	0xFF4
 22804                           prodl	equ	0xFF3
 22805                           intcon	equ	0xFF2
 22806                           indf0	equ	0xFEF
 22807                           postinc0	equ	0xFEE
 22808                           fsr0h	equ	0xFEA
 22809                           fsr0l	equ	0xFE9
 22810                           wreg	equ	0xFE8
 22811                           indf1	equ	0xFE7
 22812                           postdec1	equ	0xFE5
 22813                           fsr1h	equ	0xFE2
 22814                           fsr1l	equ	0xFE1
 22815                           indf2	equ	0xFDF
 22816                           postinc2	equ	0xFDE
 22817                           postdec2	equ	0xFDD
 22818                           plusw2	equ	0xFDB
 22819                           fsr2h	equ	0xFDA
 22820                           fsr2l	equ	0xFD9
 22821                           status	equ	0xFD8
 22822                           
 22823 ;; *************** function i2_Motor_Step *****************
 22824 ;; Defined at:
 22825 ;;		line 75 in file "Library/Motor.c"
 22826 ;; Parameters:    Size  Location     Type
 22827 ;;		None
 22828 ;; Auto vars:     Size  Location     Type
 22829 ;;		None
 22830 ;; Return value:  Size  Location     Type
 22831 ;;                  1    wreg      void 
 22832 ;; Registers used:
 22833 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22834 ;; Tracked objects:
 22835 ;;		On entry : 0/0
 22836 ;;		On exit  : 0/0
 22837 ;;		Unchanged: 0/0
 22838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22841 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22842 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22843 ;;Total ram usage:        2 bytes
 22844 ;; Hardware stack levels used:    1
 22845 ;; Hardware stack levels required when called:    4
 22846 ;; This function calls:
 22847 ;;		i2_MXK_Queue
 22848 ;;		i2_MXK_Release
 22849 ;;		i2_MXK_SwitchTo
 22850 ;;		i2_Port_SetPin
 22851 ;;		i2_Timer0_Restart
 22852 ;;		i2_Timer0_Stop
 22853 ;; This function is called by:
 22854 ;; This function uses a non-reentrant model
 22855 ;;
 22856                           
 22857                           	psect	text130
 22858  0000'                    __ptext130:
 22859                           	opt stack 0
 22860  0000'                    i2_Motor_Step:
 22861                           	opt stack 13
 22862                           
 22863                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 22864                           
 22865                           ;incstack = 0
 22866  0000' 0100               	movlb	0	; () banked
 22867  0002' EE20 F004          	lfsr	2,4
 22868  0006' 5100'              	movf	_lMotor& (0+255),w,b
 22869  0008' 26D9               	addwf	fsr2l,f,c
 22870  000A' 5100'              	movf	(_lMotor+1)& (0+255),w,b
 22871  000C' 22DA               	addwfc	fsr2h,f,c
 22872  000E' 50DF               	movf	indf2,w,c
 22873  0010' EC00' F000'        	call	i2_MXK_SwitchTo
 22874  0014' 0900               	iorlw	0
 22875  0016' B4D8               	btfsc	status,2,c
 22876  0018' D06A               	goto	i2l1627
 22877                           
 22878                           ;Motor.c: 78: {
 22879                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 22880  001A' C023' FFD9         	movff	_lMotor,fsr2l
 22881  001E' C024' FFDA         	movff	_lMotor+1,fsr2h
 22882  0022' 50DE               	movf	postinc2,w,c
 22883  0024' 10DE               	iorwf	postinc2,w,c
 22884  0026' B4D8               	btfsc	status,2,c
 22885  0028' D05D               	goto	i2l1628
 22886                           
 22887                           ;Motor.c: 80: {
 22888                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 22889  002A' C023' FFD9         	movff	_lMotor,fsr2l
 22890  002E' C024' FFDA         	movff	_lMotor+1,fsr2h
 22891  0032' 0E01               	movlw	1
 22892  0034' BEDB               	btfsc	plusw2,7,c
 22893  0036' D022               	goto	i2l1629
 22894  0038' 0E01               	movlw	1
 22895  003A' 50DB               	movf	plusw2,w,c
 22896  003C' E103               	bnz	i2u538_40
 22897  003E' 04DE               	decf	postinc2,w,c
 22898  0040' A0D8               	btfss	status,0,c
 22899  0042' D01C               	goto	i2l1629
 22900  0044'                    i2u538_40:
 22901                           
 22902                           ;Motor.c: 83: {
 22903                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 22904  0044' C023' FFD9         	movff	_lMotor,fsr2l
 22905  0048' C024' FFDA         	movff	_lMotor+1,fsr2h
 22906  004C' 28DE               	incf	postinc2,w,c
 22907  004E' E104               	bnz	i2u539_40
 22908  0050' 0E7F               	movlw	127
 22909  0052' 18DE               	xorwf	postinc2,w,c
 22910  0054' B4D8               	btfsc	status,2,c
 22911  0056' D007               	goto	i2l1630
 22912  0058'                    i2u539_40:
 22913                           
 22914                           ;Motor.c: 85: lMotor->mDelta --;
 22915  0058' C023' FFD9         	movff	_lMotor,fsr2l
 22916  005C' C024' FFDA         	movff	_lMotor+1,fsr2h
 22917  0060' 06DE               	decf	postinc2,f,c
 22918  0062' 0E00               	movlw	0
 22919  0064' 5ADD               	subwfb	postdec2,f,c
 22920  0066'                    i2l1630:
 22921                           
 22922                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 22923  0066' 0E00'              	movlw	low _PortE
 22924  0068' 6E0F'              	movwf	i2Port_SetPin@pInput,c
 22925  006A' 0E00'              	movlw	high _PortE
 22926  006C' 6E10'              	movwf	i2Port_SetPin@pInput+1,c
 22927  006E' 0E00               	movlw	0
 22928  0070' 6E11'              	movwf	i2Port_SetPin@pPin,c
 22929  0072' 0E01               	movlw	1
 22930  0074' 6E12'              	movwf	i2Port_SetPin@pValue,c
 22931  0076' EC00' F000'        	call	i2_Port_SetPin	;wreg free
 22932                           
 22933                           ;Motor.c: 88: }
 22934  007A' D01B               	goto	i2l1631
 22935  007C'                    i2l1629:
 22936                           
 22937                           ;Motor.c: 89: else
 22938                           ;Motor.c: 90: {
 22939                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 22940  007C' C023' FFD9         	movff	_lMotor,fsr2l
 22941  0080' C024' FFDA         	movff	_lMotor+1,fsr2h
 22942  0084' 04DE               	decf	postinc2,w,c
 22943  0086' E104               	bnz	i2u540_40
 22944  0088' 0E80               	movlw	128
 22945  008A' 18DE               	xorwf	postinc2,w,c
 22946  008C' B4D8               	btfsc	status,2,c
 22947  008E' D007               	goto	i2l1632
 22948  0090'                    i2u540_40:
 22949                           
 22950                           ;Motor.c: 92: lMotor->mDelta ++;
 22951  0090' C023' FFD9         	movff	_lMotor,fsr2l
 22952  0094' C024' FFDA         	movff	_lMotor+1,fsr2h
 22953  0098' 2ADE               	incf	postinc2,f,c
 22954  009A' 0E00               	movlw	0
 22955  009C' 22DD               	addwfc	postdec2,f,c
 22956  009E'                    i2l1632:
 22957                           
 22958                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 22959  009E' 0E00'              	movlw	low _PortE
 22960  00A0' 6E0F'              	movwf	i2Port_SetPin@pInput,c
 22961  00A2' 0E00'              	movlw	high _PortE
 22962  00A4' 6E10'              	movwf	i2Port_SetPin@pInput+1,c
 22963  00A6' 0E00               	movlw	0
 22964  00A8' 6E11'              	movwf	i2Port_SetPin@pPin,c
 22965  00AA' 0E00               	movlw	0
 22966  00AC' 6E12'              	movwf	i2Port_SetPin@pValue,c
 22967  00AE' EC00' F000'        	call	i2_Port_SetPin	;wreg free
 22968  00B2'                    i2l1631:
 22969                           
 22970                           ;Motor.c: 95: }
 22971                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 22972  00B2' 0E00'              	movlw	low _PortE
 22973  00B4' 6E0F'              	movwf	i2Port_SetPin@pInput,c
 22974  00B6' 0E00'              	movlw	high _PortE
 22975  00B8' 6E10'              	movwf	i2Port_SetPin@pInput+1,c
 22976  00BA' 0E01               	movlw	1
 22977  00BC' 6E11'              	movwf	i2Port_SetPin@pPin,c
 22978  00BE' 0E01               	movlw	1
 22979  00C0' 6E12'              	movwf	i2Port_SetPin@pValue,c
 22980  00C2' EC00' F000'        	call	i2_Port_SetPin	;wreg free
 22981                           
 22982                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 22983  00C6' 0E00'              	movlw	low _PortE
 22984  00C8' 6E0F'              	movwf	i2Port_SetPin@pInput,c
 22985  00CA' 0E00'              	movlw	high _PortE
 22986  00CC' 6E10'              	movwf	i2Port_SetPin@pInput+1,c
 22987  00CE' 0E01               	movlw	1
 22988  00D0' 6E11'              	movwf	i2Port_SetPin@pPin,c
 22989  00D2' 0E00               	movlw	0
 22990  00D4' 6E12'              	movwf	i2Port_SetPin@pValue,c
 22991  00D6' EC00' F000'        	call	i2_Port_SetPin	;wreg free
 22992                           
 22993                           ;Motor.c: 101: MXK_Release();
 22994  00DA' EC00' F000'        	call	i2_MXK_Release	;wreg free
 22995                           
 22996                           ;Motor.c: 102: Timer0_Restart();
 22997  00DE' EC00' F000'        	call	i2_Timer0_Restart	;wreg free
 22998                           
 22999                           ;Motor.c: 103: return;
 23000  00E2' 0012               	return	
 23001  00E4'                    i2l1628:
 23002                           
 23003                           ;Motor.c: 104: }
 23004                           ;Motor.c: 105: MXK_Release();
 23005  00E4' EC00' F000'        	call	i2_MXK_Release	;wreg free
 23006                           
 23007                           ;Motor.c: 106: Timer0_Stop();
 23008  00E8' EC00' F000'        	call	i2_Timer0_Stop	;wreg free
 23009                           
 23010                           ;Motor.c: 107: return;
 23011  00EC' 0012               	return	
 23012  00EE'                    i2l1627:
 23013                           
 23014                           ;Motor.c: 108: }
 23015                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 23016  00EE' C00A' F000'        	movff	_lStepFunction,i2MXK_Queue@pCallback
 23017  00F2' C00B' F001'        	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 23018  00F6' C00C' F002'        	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 23019  00FA' EC00' F000'        	call	i2_MXK_Queue	;wreg free
 23020  00FE' 0012               	return		;funcret
 23021  0100'                    __end_ofi2_Motor_Step:
 23022                           	opt stack 0
 23023                           tosu	equ	0xFFF
 23024                           tosh	equ	0xFFE
 23025                           tosl	equ	0xFFD
 23026                           pclatu	equ	0xFFB
 23027                           pclath	equ	0xFFA
 23028                           tblptru	equ	0xFF8
 23029                           tblptrh	equ	0xFF7
 23030                           tblptrl	equ	0xFF6
 23031                           tablat	equ	0xFF5
 23032                           prodh	equ	0xFF4
 23033                           prodl	equ	0xFF3
 23034                           intcon	equ	0xFF2
 23035                           indf0	equ	0xFEF
 23036                           postinc0	equ	0xFEE
 23037                           fsr0h	equ	0xFEA
 23038                           fsr0l	equ	0xFE9
 23039                           wreg	equ	0xFE8
 23040                           indf1	equ	0xFE7
 23041                           postdec1	equ	0xFE5
 23042                           fsr1h	equ	0xFE2
 23043                           fsr1l	equ	0xFE1
 23044                           indf2	equ	0xFDF
 23045                           postinc2	equ	0xFDE
 23046                           postdec2	equ	0xFDD
 23047                           plusw2	equ	0xFDB
 23048                           fsr2h	equ	0xFDA
 23049                           fsr2l	equ	0xFD9
 23050                           status	equ	0xFD8
 23051                           
 23052 ;; *************** function i2_Timer0_Stop *****************
 23053 ;; Defined at:
 23054 ;;		line 89 in file "Library/Timer0.c"
 23055 ;; Parameters:    Size  Location     Type
 23056 ;;		None
 23057 ;; Auto vars:     Size  Location     Type
 23058 ;;		None
 23059 ;; Return value:  Size  Location     Type
 23060 ;;                  1    wreg      void 
 23061 ;; Registers used:
 23062 ;;		None
 23063 ;; Tracked objects:
 23064 ;;		On entry : 0/0
 23065 ;;		On exit  : 0/0
 23066 ;;		Unchanged: 0/0
 23067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23071 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23072 ;;Total ram usage:        0 bytes
 23073 ;; Hardware stack levels used:    1
 23074 ;; This function calls:
 23075 ;;		Nothing
 23076 ;; This function is called by:
 23077 ;;		_Timer0_ISR
 23078 ;;		i2_Motor_Step
 23079 ;; This function uses a non-reentrant model
 23080 ;;
 23081                           
 23082                           	psect	text131
 23083  0000'                    __ptext131:
 23084                           	opt stack 0
 23085  0000'                    i2_Timer0_Stop:
 23086                           	opt stack 17
 23087                           
 23088                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 23089                           
 23090                           ;incstack = 0
 23091  0000' 9AF2               	bcf	intcon,5,c	;volatile
 23092                           
 23093                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 23094  0002' 94F2               	bcf	intcon,2,c	;volatile
 23095  0004' 0012               	return		;funcret
 23096  0006'                    __end_ofi2_Timer0_Stop:
 23097                           	opt stack 0
 23098                           tosu	equ	0xFFF
 23099                           tosh	equ	0xFFE
 23100                           tosl	equ	0xFFD
 23101                           pclatu	equ	0xFFB
 23102                           pclath	equ	0xFFA
 23103                           tblptru	equ	0xFF8
 23104                           tblptrh	equ	0xFF7
 23105                           tblptrl	equ	0xFF6
 23106                           tablat	equ	0xFF5
 23107                           prodh	equ	0xFF4
 23108                           prodl	equ	0xFF3
 23109                           intcon	equ	0xFF2
 23110                           indf0	equ	0xFEF
 23111                           postinc0	equ	0xFEE
 23112                           fsr0h	equ	0xFEA
 23113                           fsr0l	equ	0xFE9
 23114                           wreg	equ	0xFE8
 23115                           indf1	equ	0xFE7
 23116                           postdec1	equ	0xFE5
 23117                           fsr1h	equ	0xFE2
 23118                           fsr1l	equ	0xFE1
 23119                           indf2	equ	0xFDF
 23120                           postinc2	equ	0xFDE
 23121                           postdec2	equ	0xFDD
 23122                           plusw2	equ	0xFDB
 23123                           fsr2h	equ	0xFDA
 23124                           fsr2l	equ	0xFD9
 23125                           status	equ	0xFD8
 23126                           
 23127 ;; *************** function i2_Timer0_Restart *****************
 23128 ;; Defined at:
 23129 ;;		line 83 in file "Library/Timer0.c"
 23130 ;; Parameters:    Size  Location     Type
 23131 ;;		None
 23132 ;; Auto vars:     Size  Location     Type
 23133 ;;		None
 23134 ;; Return value:  Size  Location     Type
 23135 ;;                  1    wreg      void 
 23136 ;; Registers used:
 23137 ;;		None
 23138 ;; Tracked objects:
 23139 ;;		On entry : 0/0
 23140 ;;		On exit  : 0/0
 23141 ;;		Unchanged: 0/0
 23142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23146 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23147 ;;Total ram usage:        0 bytes
 23148 ;; Hardware stack levels used:    1
 23149 ;; This function calls:
 23150 ;;		Nothing
 23151 ;; This function is called by:
 23152 ;;		i2_Motor_Step
 23153 ;; This function uses a non-reentrant model
 23154 ;;
 23155                           
 23156                           	psect	text132
 23157  0000'                    __ptext132:
 23158                           	opt stack 0
 23159  0000'                    i2_Timer0_Restart:
 23160                           	opt stack 16
 23161                           
 23162                           ;Timer0.c: 85: TMR0 = COUNTER;
 23163                           
 23164                           ;incstack = 0
 23165  0000' C000' FFD6         	movff	_COUNTER,4054	;volatile
 23166  0004' C001' FFD7         	movff	_COUNTER+1,4055	;volatile
 23167                           
 23168                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 23169  0008' 8AF2               	bsf	intcon,5,c	;volatile
 23170  000A' 0012               	return		;funcret
 23171  000C'                    __end_ofi2_Timer0_Restart:
 23172                           	opt stack 0
 23173                           tosu	equ	0xFFF
 23174                           tosh	equ	0xFFE
 23175                           tosl	equ	0xFFD
 23176                           pclatu	equ	0xFFB
 23177                           pclath	equ	0xFFA
 23178                           tblptru	equ	0xFF8
 23179                           tblptrh	equ	0xFF7
 23180                           tblptrl	equ	0xFF6
 23181                           tablat	equ	0xFF5
 23182                           prodh	equ	0xFF4
 23183                           prodl	equ	0xFF3
 23184                           intcon	equ	0xFF2
 23185                           indf0	equ	0xFEF
 23186                           postinc0	equ	0xFEE
 23187                           fsr0h	equ	0xFEA
 23188                           fsr0l	equ	0xFE9
 23189                           wreg	equ	0xFE8
 23190                           indf1	equ	0xFE7
 23191                           postdec1	equ	0xFE5
 23192                           fsr1h	equ	0xFE2
 23193                           fsr1l	equ	0xFE1
 23194                           indf2	equ	0xFDF
 23195                           postinc2	equ	0xFDE
 23196                           postdec2	equ	0xFDD
 23197                           plusw2	equ	0xFDB
 23198                           fsr2h	equ	0xFDA
 23199                           fsr2l	equ	0xFD9
 23200                           status	equ	0xFD8
 23201                           
 23202 ;; *************** function i2_Port_SetPin *****************
 23203 ;; Defined at:
 23204 ;;		line 247 in file "Library/Port.c"
 23205 ;; Parameters:    Size  Location     Type
 23206 ;;  pInput          2   15[COMRAM] const PTR struct Port
 23207 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 23208 ;;  pPin            1   17[COMRAM] enum E6750
 23209 ;;  pValue          1   18[COMRAM] unsigned char 
 23210 ;; Auto vars:     Size  Location     Type
 23211 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 23212 ;; Return value:  Size  Location     Type
 23213 ;;                  1    wreg      void 
 23214 ;; Registers used:
 23215 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23216 ;; Tracked objects:
 23217 ;;		On entry : 0/0
 23218 ;;		On exit  : 0/0
 23219 ;;		Unchanged: 0/0
 23220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23221 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23222 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23224 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23225 ;;Total ram usage:        5 bytes
 23226 ;; Hardware stack levels used:    1
 23227 ;; Hardware stack levels required when called:    3
 23228 ;; This function calls:
 23229 ;;		i2_Byte_SetBit
 23230 ;;		i2_Word_GetPair
 23231 ;; This function is called by:
 23232 ;;		i2_Motor_Step
 23233 ;; This function uses a non-reentrant model
 23234 ;;
 23235                           
 23236                           	psect	text133
 23237  0000'                    __ptext133:
 23238                           	opt stack 0
 23239  0000'                    i2_Port_SetPin:
 23240                           	opt stack 13
 23241                           
 23242                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 23243                           
 23244                           ;incstack = 0
 23245  0000' 0E08               	movlw	8
 23246  0002' 240F'              	addwf	i2Port_SetPin@pInput,w,c
 23247  0004' 6E0C'              	movwf	i2Word_GetPair@pInput,c
 23248  0006' 0E00               	movlw	0
 23249  0008' 2010'              	addwfc	i2Port_SetPin@pInput+1,w,c
 23250  000A' 6E0D'              	movwf	i2Word_GetPair@pInput+1,c
 23251  000C' C011' F00E'        	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 23252  0010' EC00' F000'        	call	i2_Word_GetPair	;wreg free
 23253  0014' 6E13'              	movwf	i2Port_SetPin@Type,c
 23254                           
 23255                           ;Port.c: 250: switch (Type)
 23256  0016' D03B               	goto	i2l427
 23257  0018'                    
 23258                           ;Port.c: 256: pValue &= 1;
 23259  0018' 0E01               	movlw	1
 23260  001A' 1612'              	andwf	i2Port_SetPin@pValue,f,c
 23261                           
 23262                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 23263  001C' EE20 F002          	lfsr	2,2
 23264  0020' 500F'              	movf	i2Port_SetPin@pInput,w,c
 23265  0022' 26D9               	addwf	fsr2l,f,c
 23266  0024' 5010'              	movf	i2Port_SetPin@pInput+1,w,c
 23267  0026' 22DA               	addwfc	fsr2h,f,c
 23268  0028' CFDE F000'         	movff	postinc2,i2Byte_SetBit@pInput
 23269  002C' CFDD F001'         	movff	postdec2,i2Byte_SetBit@pInput+1
 23270  0030' C011' F002'        	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 23271  0034' C012' F003'        	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 23272  0038' EC00' F000'        	call	i2_Byte_SetBit	;wreg free
 23273                           
 23274                           ;Port.c: 258: break;
 23275  003C' 0012               	return	
 23276  003E'                    
 23277                           ;Port.c: 261: pValue &= 1;
 23278  003E' 0E01               	movlw	1
 23279  0040' 1612'              	andwf	i2Port_SetPin@pValue,f,c
 23280                           
 23281                           ;Port.c: 262: pValue ^= 1;
 23282  0042' 0E01               	movlw	1
 23283  0044' 1A12'              	xorwf	i2Port_SetPin@pValue,f,c
 23284                           
 23285                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 23286  0046' EE20 F002          	lfsr	2,2
 23287  004A' 500F'              	movf	i2Port_SetPin@pInput,w,c
 23288  004C' 26D9               	addwf	fsr2l,f,c
 23289  004E' 5010'              	movf	i2Port_SetPin@pInput+1,w,c
 23290  0050' 22DA               	addwfc	fsr2h,f,c
 23291  0052' CFDE F000'         	movff	postinc2,i2Byte_SetBit@pInput
 23292  0056' CFDD F001'         	movff	postdec2,i2Byte_SetBit@pInput+1
 23293  005A' C011' F002'        	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 23294  005E' C012' F003'        	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 23295  0062' EC00' F000'        	call	i2_Byte_SetBit	;wreg free
 23296                           
 23297                           ;Port.c: 264: break;
 23298  0066' 0012               	return	
 23299  0068'                    
 23300                           ;Port.c: 266: pValue &= 1;
 23301  0068' 0E01               	movlw	1
 23302  006A' 1612'              	andwf	i2Port_SetPin@pValue,f,c
 23303                           
 23304                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 23305  006C' EE20 F004          	lfsr	2,4
 23306  0070' 500F'              	movf	i2Port_SetPin@pInput,w,c
 23307  0072' 26D9               	addwf	fsr2l,f,c
 23308  0074' 5010'              	movf	i2Port_SetPin@pInput+1,w,c
 23309  0076' 22DA               	addwfc	fsr2h,f,c
 23310  0078' CFDE F000'         	movff	postinc2,i2Byte_SetBit@pInput
 23311  007C' CFDD F001'         	movff	postdec2,i2Byte_SetBit@pInput+1
 23312  0080' C011' F002'        	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 23313  0084' C012' F003'        	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 23314  0088' EC00' F000'        	call	i2_Byte_SetBit	;wreg free
 23315                           
 23316                           ;Port.c: 269: }
 23317                           
 23318                           ;Port.c: 268: break;
 23319  008C' 0012               	return	
 23320  008E'                    i2l427:
 23321  008E' 5013'              	movf	i2Port_SetPin@Type,w,c
 23322                           
 23323                           ; Switch size 1, requested type "space"
 23324                           ; Number of cases is 4, Range of values is 0 to 3
 23325                           ; switch strategies available:
 23326                           ; Name         Instructions Cycles
 23327                           ; simple_byte           13     7 (average)
 23328                           ;	Chosen strategy is simple_byte
 23329  0090' 0A00               	xorlw	0	; case 0
 23330  0092' B4D8               	btfsc	status,2,c
 23331  0094' 0012               	return	
 23332  0096' 0A01               	xorlw	1	; case 1
 23333  0098' B4D8               	btfsc	status,2,c
 23334  009A' D7BE               	goto	i2l430
 23335  009C' 0A03               	xorlw	3	; case 2
 23336  009E' B4D8               	btfsc	status,2,c
 23337  00A0' D7CE               	goto	i2l432
 23338  00A2' 0A01               	xorlw	1	; case 3
 23339  00A4' A4D8               	btfss	status,2,c
 23340  00A6' 0012               	return	
 23341  00A8' D7DF               	goto	i2l433
 23342  00AA'                    __end_ofi2_Port_SetPin:
 23343                           	opt stack 0
 23344                           tosu	equ	0xFFF
 23345                           tosh	equ	0xFFE
 23346                           tosl	equ	0xFFD
 23347                           pclatu	equ	0xFFB
 23348                           pclath	equ	0xFFA
 23349                           tblptru	equ	0xFF8
 23350                           tblptrh	equ	0xFF7
 23351                           tblptrl	equ	0xFF6
 23352                           tablat	equ	0xFF5
 23353                           prodh	equ	0xFF4
 23354                           prodl	equ	0xFF3
 23355                           intcon	equ	0xFF2
 23356                           indf0	equ	0xFEF
 23357                           postinc0	equ	0xFEE
 23358                           fsr0h	equ	0xFEA
 23359                           fsr0l	equ	0xFE9
 23360                           wreg	equ	0xFE8
 23361                           indf1	equ	0xFE7
 23362                           postdec1	equ	0xFE5
 23363                           fsr1h	equ	0xFE2
 23364                           fsr1l	equ	0xFE1
 23365                           indf2	equ	0xFDF
 23366                           postinc2	equ	0xFDE
 23367                           postdec2	equ	0xFDD
 23368                           plusw2	equ	0xFDB
 23369                           fsr2h	equ	0xFDA
 23370                           fsr2l	equ	0xFD9
 23371                           status	equ	0xFD8
 23372                           
 23373 ;; *************** function i2_Word_GetPair *****************
 23374 ;; Defined at:
 23375 ;;		line 156 in file "Library/Types.c"
 23376 ;; Parameters:    Size  Location     Type
 23377 ;;  pInput          2   12[COMRAM] PTR struct Word
 23378 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 23379 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 23380 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 23381 ;;		 -> PortC(10), PortF(10), NULL(0), 
 23382 ;;  pPair           1   14[COMRAM] unsigned char 
 23383 ;; Auto vars:     Size  Location     Type
 23384 ;;		None
 23385 ;; Return value:  Size  Location     Type
 23386 ;;                  1    wreg      unsigned char 
 23387 ;; Registers used:
 23388 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23389 ;; Tracked objects:
 23390 ;;		On entry : 0/0
 23391 ;;		On exit  : 0/0
 23392 ;;		Unchanged: 0/0
 23393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23394 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23397 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23398 ;;Total ram usage:        3 bytes
 23399 ;; Hardware stack levels used:    1
 23400 ;; Hardware stack levels required when called:    2
 23401 ;; This function calls:
 23402 ;;		i2_Byte_GetPair
 23403 ;; This function is called by:
 23404 ;;		i2_Port_SetPin
 23405 ;; This function uses a non-reentrant model
 23406 ;;
 23407                           
 23408                           	psect	text134
 23409  0000'                    __ptext134:
 23410                           	opt stack 0
 23411  0000'                    i2_Word_GetPair:
 23412                           	opt stack 13
 23413                           
 23414                           ;Types.c: 158: if (pPair >= 4)
 23415                           
 23416                           ;incstack = 0
 23417  0000' 0E03               	movlw	3
 23418  0002' 640E'              	cpfsgt	i2Word_GetPair@pPair,c
 23419  0004' D00C               	goto	i2l781
 23420                           
 23421                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 23422  0006' 0E01               	movlw	1
 23423  0008' 240C'              	addwf	i2Word_GetPair@pInput,w,c
 23424  000A' 6E09'              	movwf	i2Byte_GetPair@pInput,c
 23425  000C' 0E00               	movlw	0
 23426  000E' 200D'              	addwfc	i2Word_GetPair@pInput+1,w,c
 23427  0010' 6E0A'              	movwf	i2Byte_GetPair@pInput+1,c
 23428  0012' 500E'              	movf	i2Word_GetPair@pPair,w,c
 23429  0014' 0FFC               	addlw	252
 23430  0016' 6E0B'              	movwf	i2Byte_GetPair@pPair,c
 23431  0018' EC00' F000'        	call	i2_Byte_GetPair	;wreg free
 23432  001C' 0012               	return	
 23433  001E'                    i2l781:
 23434                           
 23435                           ;Types.c: 160: else
 23436                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 23437  001E' C00C' F009'        	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 23438  0022' C00D' F00A'        	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 23439  0026' C00E' F00B'        	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 23440  002A' EC00' F000'        	call	i2_Byte_GetPair	;wreg free
 23441  002E' 0012               	return	
 23442  0030'                    __end_ofi2_Word_GetPair:
 23443                           	opt stack 0
 23444                           tosu	equ	0xFFF
 23445                           tosh	equ	0xFFE
 23446                           tosl	equ	0xFFD
 23447                           pclatu	equ	0xFFB
 23448                           pclath	equ	0xFFA
 23449                           tblptru	equ	0xFF8
 23450                           tblptrh	equ	0xFF7
 23451                           tblptrl	equ	0xFF6
 23452                           tablat	equ	0xFF5
 23453                           prodh	equ	0xFF4
 23454                           prodl	equ	0xFF3
 23455                           intcon	equ	0xFF2
 23456                           indf0	equ	0xFEF
 23457                           postinc0	equ	0xFEE
 23458                           fsr0h	equ	0xFEA
 23459                           fsr0l	equ	0xFE9
 23460                           wreg	equ	0xFE8
 23461                           indf1	equ	0xFE7
 23462                           postdec1	equ	0xFE5
 23463                           fsr1h	equ	0xFE2
 23464                           fsr1l	equ	0xFE1
 23465                           indf2	equ	0xFDF
 23466                           postinc2	equ	0xFDE
 23467                           postdec2	equ	0xFDD
 23468                           plusw2	equ	0xFDB
 23469                           fsr2h	equ	0xFDA
 23470                           fsr2l	equ	0xFD9
 23471                           status	equ	0xFD8
 23472                           
 23473 ;; *************** function i2_Byte_GetPair *****************
 23474 ;; Defined at:
 23475 ;;		line 87 in file "Library/Types.c"
 23476 ;; Parameters:    Size  Location     Type
 23477 ;;  pInput          2    9[COMRAM] PTR struct Byte
 23478 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 23479 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 23480 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 23481 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 23482 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 23483 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 23484 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 23485 ;;		 -> NULL(0), 
 23486 ;;  pPair           1   11[COMRAM] unsigned char 
 23487 ;; Auto vars:     Size  Location     Type
 23488 ;;		None
 23489 ;; Return value:  Size  Location     Type
 23490 ;;                  1    wreg      unsigned char 
 23491 ;; Registers used:
 23492 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23493 ;; Tracked objects:
 23494 ;;		On entry : 0/0
 23495 ;;		On exit  : 0/0
 23496 ;;		Unchanged: 0/0
 23497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23498 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23501 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23502 ;;Total ram usage:        3 bytes
 23503 ;; Hardware stack levels used:    1
 23504 ;; Hardware stack levels required when called:    1
 23505 ;; This function calls:
 23506 ;;		i2_Byte_GetZone
 23507 ;; This function is called by:
 23508 ;;		i2_Word_GetPair
 23509 ;; This function uses a non-reentrant model
 23510 ;;
 23511                           
 23512                           	psect	text135
 23513  0000'                    __ptext135:
 23514                           	opt stack 0
 23515  0000'                    i2_Byte_GetPair:
 23516                           	opt stack 13
 23517                           
 23518                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 23519                           
 23520                           ;incstack = 0
 23521  0000' C009' F000'        	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 23522  0004' C00A' F001'        	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 23523  0008' 0E04               	movlw	4
 23524  000A' 6E02'              	movwf	i2Byte_GetZone@pMax,c
 23525  000C' C00B' F003'        	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 23526  0010' 0E02               	movlw	2
 23527  0012' 6E04'              	movwf	i2Byte_GetZone@pChunkSize,c
 23528  0014' EC00' F000'        	call	i2_Byte_GetZone	;wreg free
 23529  0018' 0012               	return	
 23530  001A'                    __end_ofi2_Byte_GetPair:
 23531                           	opt stack 0
 23532                           tosu	equ	0xFFF
 23533                           tosh	equ	0xFFE
 23534                           tosl	equ	0xFFD
 23535                           pclatu	equ	0xFFB
 23536                           pclath	equ	0xFFA
 23537                           tblptru	equ	0xFF8
 23538                           tblptrh	equ	0xFF7
 23539                           tblptrl	equ	0xFF6
 23540                           tablat	equ	0xFF5
 23541                           prodh	equ	0xFF4
 23542                           prodl	equ	0xFF3
 23543                           intcon	equ	0xFF2
 23544                           indf0	equ	0xFEF
 23545                           postinc0	equ	0xFEE
 23546                           fsr0h	equ	0xFEA
 23547                           fsr0l	equ	0xFE9
 23548                           wreg	equ	0xFE8
 23549                           indf1	equ	0xFE7
 23550                           postdec1	equ	0xFE5
 23551                           fsr1h	equ	0xFE2
 23552                           fsr1l	equ	0xFE1
 23553                           indf2	equ	0xFDF
 23554                           postinc2	equ	0xFDE
 23555                           postdec2	equ	0xFDD
 23556                           plusw2	equ	0xFDB
 23557                           fsr2h	equ	0xFDA
 23558                           fsr2l	equ	0xFD9
 23559                           status	equ	0xFD8
 23560                           
 23561 ;; *************** function i2_Byte_GetZone *****************
 23562 ;; Defined at:
 23563 ;;		line 64 in file "Library/Types.c"
 23564 ;; Parameters:    Size  Location     Type
 23565 ;;  pInput          2    0[COMRAM] PTR struct Byte
 23566 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 23567 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 23568 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 23569 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 23570 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 23571 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 23572 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 23573 ;;		 -> NULL(0), 
 23574 ;;  pMax            1    2[COMRAM] unsigned char 
 23575 ;;  pChunk          1    3[COMRAM] unsigned char 
 23576 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 23577 ;; Auto vars:     Size  Location     Type
 23578 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 23579 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 23580 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 23581 ;; Return value:  Size  Location     Type
 23582 ;;                  1    wreg      unsigned char 
 23583 ;; Registers used:
 23584 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 23585 ;; Tracked objects:
 23586 ;;		On entry : 0/0
 23587 ;;		On exit  : 0/0
 23588 ;;		Unchanged: 0/0
 23589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23590 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23591 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23592 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23593 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23594 ;;Total ram usage:        9 bytes
 23595 ;; Hardware stack levels used:    1
 23596 ;; This function calls:
 23597 ;;		Nothing
 23598 ;; This function is called by:
 23599 ;;		i2_Byte_GetPair
 23600 ;; This function uses a non-reentrant model
 23601 ;;
 23602                           
 23603                           	psect	text136
 23604  0000'                    __ptext136:
 23605                           	opt stack 0
 23606  0000'                    i2_Byte_GetZone:
 23607                           	opt stack 13
 23608                           
 23609                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 23610                           
 23611                           ;incstack = 0
 23612  0000' C000' FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 23613  0004' C001' FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 23614  0008' 0E00'              	movlw	low (__mediumconst shr (0+16))
 23615  000A' 6EF8               	movwf	tblptru,c
 23616  000C' 0EFF'              	movlw	(high __ramtop+-1)
 23617  000E' 64F7               	cpfsgt	tblptrh,c
 23618  0010' D003               	bra	i2u387_47
 23619  0012' 0008               	tblrd		*
 23620  0014' 50F5               	movf	tablat,w,c
 23621  0016' D005               	bra	i2u387_40
 23622  0018'                    i2u387_47:
 23623  0018' CFF6 FFE9          	movff	tblptrl,fsr0l
 23624  001C' CFF7 FFEA          	movff	tblptrh,fsr0h
 23625  0020' 50EF               	movf	indf0,w,c
 23626  0022'                    i2u387_40:
 23627  0022' 6E08'              	movwf	i2Byte_GetZone@Output,c
 23628                           
 23629                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 23630  0024' 5004'              	movf	i2Byte_GetZone@pChunkSize,w,c
 23631  0026' 0D01               	mullw	1
 23632  0028' 0E00'              	movlw	low _MASKS
 23633  002A' 24F3               	addwf	prodl,w,c
 23634  002C' 6EF6               	movwf	tblptrl,c
 23635  002E' 0E00'              	movlw	high _MASKS
 23636  0030' 20F4               	addwfc	prodh,w,c
 23637  0032' 6EF7               	movwf	tblptrh,c
 23638  0034'                    	if	1	;There are 3 active tblptr bytes
 23639  0034' 6AF8               	clrf	tblptru,c
 23640  0036' 0E00'              	movlw	low (__mediumconst shr (0+16))
 23641  0038' 22F8               	addwfc	tblptru,f,c
 23642  003A'                    	endif
 23643  003A' 0008               	tblrd		*
 23644  003C' CFF5 F006'         	movff	tablat,i2Byte_GetZone@MASK
 23645                           
 23646                           ;Types.c: 68: UINT8 Offset = 0;
 23647  0040' 0E00               	movlw	0
 23648  0042' 6E07'              	movwf	i2Byte_GetZone@Offset,c
 23649                           
 23650                           ;Types.c: 70: while (pChunk >= pMax)
 23651  0044' D003               	goto	i2l732
 23652  0046'                    
 23653                           ;Types.c: 71: {
 23654                           ;Types.c: 72: pChunk -= pMax;
 23655  0046' 5002'              	movf	i2Byte_GetZone@pMax,w,c
 23656  0048' 5E03'              	subwf	i2Byte_GetZone@pChunk,f,c
 23657                           
 23658                           ;Types.c: 73: Offset += 1;
 23659  004A' 2A07'              	incf	i2Byte_GetZone@Offset,f,c
 23660  004C'                    i2l732:
 23661  004C' 5002'              	movf	i2Byte_GetZone@pMax,w,c
 23662  004E' 5C03'              	subwf	i2Byte_GetZone@pChunk,w,c
 23663  0050' B0D8               	btfsc	status,0,c
 23664  0052' D7F9               	goto	i2l733
 23665                           
 23666                           ;Types.c: 74: }
 23667                           ;Types.c: 75: pChunk *= pChunkSize;
 23668  0054' 5004'              	movf	i2Byte_GetZone@pChunkSize,w,c
 23669  0056' 0203'              	mulwf	i2Byte_GetZone@pChunk,c
 23670  0058' 50F3               	movf	prodl,w,c
 23671  005A' 6E03'              	movwf	i2Byte_GetZone@pChunk,c
 23672                           
 23673                           ;Types.c: 76: pChunk += Offset;
 23674  005C' 5007'              	movf	i2Byte_GetZone@Offset,w,c
 23675  005E' 2603'              	addwf	i2Byte_GetZone@pChunk,f,c
 23676                           
 23677                           ;Types.c: 78: Output >>= pChunk;
 23678  0060' 2803'              	incf	i2Byte_GetZone@pChunk,w,c
 23679  0062' 6E00'              	movwf	??i2_Byte_GetZone& (0+255),c
 23680  0064' D002               	goto	i2u389_40
 23681  0066'                    i2u389_45:
 23682  0066' 90D8               	bcf	status,0,c
 23683  0068' 3208'              	rrcf	i2Byte_GetZone@Output,f,c
 23684  006A'                    i2u389_40:
 23685  006A' 2E00'              	decfsz	??i2_Byte_GetZone& (0+255),f,c
 23686  006C' D7FC               	goto	i2u389_45
 23687                           
 23688                           ;Types.c: 79: Output &= MASK;
 23689  006E' 5006'              	movf	i2Byte_GetZone@MASK,w,c
 23690  0070' 1608'              	andwf	i2Byte_GetZone@Output,f,c
 23691                           
 23692                           ;Types.c: 80: return Output;
 23693  0072' 5008'              	movf	i2Byte_GetZone@Output,w,c
 23694  0074' 0012               	return	
 23695  0076'                    __end_ofi2_Byte_GetZone:
 23696                           	opt stack 0
 23697                           tosu	equ	0xFFF
 23698                           tosh	equ	0xFFE
 23699                           tosl	equ	0xFFD
 23700                           pclatu	equ	0xFFB
 23701                           pclath	equ	0xFFA
 23702                           tblptru	equ	0xFF8
 23703                           tblptrh	equ	0xFF7
 23704                           tblptrl	equ	0xFF6
 23705                           tablat	equ	0xFF5
 23706                           prodh	equ	0xFF4
 23707                           prodl	equ	0xFF3
 23708                           intcon	equ	0xFF2
 23709                           indf0	equ	0xFEF
 23710                           postinc0	equ	0xFEE
 23711                           fsr0h	equ	0xFEA
 23712                           fsr0l	equ	0xFE9
 23713                           wreg	equ	0xFE8
 23714                           indf1	equ	0xFE7
 23715                           postdec1	equ	0xFE5
 23716                           fsr1h	equ	0xFE2
 23717                           fsr1l	equ	0xFE1
 23718                           indf2	equ	0xFDF
 23719                           postinc2	equ	0xFDE
 23720                           postdec2	equ	0xFDD
 23721                           plusw2	equ	0xFDB
 23722                           fsr2h	equ	0xFDA
 23723                           fsr2l	equ	0xFD9
 23724                           status	equ	0xFD8
 23725                           
 23726 ;; *************** function i2_Byte_SetBit *****************
 23727 ;; Defined at:
 23728 ;;		line 32 in file "Library/Types.c"
 23729 ;; Parameters:    Size  Location     Type
 23730 ;;  pInput          2    0[COMRAM] PTR struct Byte
 23731 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 23732 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 23733 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 23734 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 23735 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 23736 ;;		 -> NULL(0), 
 23737 ;;  pBit            1    2[COMRAM] unsigned char 
 23738 ;;  pValue          1    3[COMRAM] unsigned char 
 23739 ;; Auto vars:     Size  Location     Type
 23740 ;;		None
 23741 ;; Return value:  Size  Location     Type
 23742 ;;                  1    wreg      void 
 23743 ;; Registers used:
 23744 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 23745 ;; Tracked objects:
 23746 ;;		On entry : 0/0
 23747 ;;		On exit  : 0/0
 23748 ;;		Unchanged: 0/0
 23749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23750 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23751 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23752 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23753 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23754 ;;Total ram usage:        7 bytes
 23755 ;; Hardware stack levels used:    1
 23756 ;; This function calls:
 23757 ;;		Nothing
 23758 ;; This function is called by:
 23759 ;;		i2_Port_SetPin
 23760 ;; This function uses a non-reentrant model
 23761 ;;
 23762                           
 23763                           	psect	text137
 23764  0000'                    __ptext137:
 23765                           	opt stack 0
 23766  0000'                    i2_Byte_SetBit:
 23767                           	opt stack 15
 23768                           
 23769                           ;Types.c: 34: pValue &= 1;
 23770                           
 23771                           ;incstack = 0
 23772  0000' 0E01               	movlw	1
 23773  0002' 1603'              	andwf	i2Byte_SetBit@pValue,f,c
 23774                           
 23775                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 23776  0004' C002' F004'        	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 23777  0008' 0E01               	movlw	1
 23778  000A' 6E00'              	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 23779  000C' 2A04'              	incf	??i2_Byte_SetBit,f,c
 23780  000E' D002               	goto	i2u444_44
 23781  0010'                    i2u444_45:
 23782  0010' 90D8               	bcf	status,0,c
 23783  0012' 3605'              	rlcf	??i2_Byte_SetBit+1,f,c
 23784  0014'                    i2u444_44:
 23785  0014' 2E04'              	decfsz	??i2_Byte_SetBit,f,c
 23786  0016' D7FC               	goto	i2u444_45
 23787  0018' 5005'              	movf	??i2_Byte_SetBit+1,w,c
 23788  001A' 0AFF               	xorlw	255
 23789  001C' 6E00'              	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 23790  001E' C000' FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 23791  0022' C001' FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 23792  0026' 5006'              	movf	??i2_Byte_SetBit+2,w,c
 23793  0028' 16DF               	andwf	indf2,f,c
 23794                           
 23795                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 23796  002A' C002' F004'        	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 23797  002E' C003' F005'        	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 23798  0032' 2A04'              	incf	??i2_Byte_SetBit,f,c
 23799  0034' D002               	goto	i2u445_44
 23800  0036'                    i2u445_45:
 23801  0036' 90D8               	bcf	status,0,c
 23802  0038' 3605'              	rlcf	??i2_Byte_SetBit+1,f,c
 23803  003A'                    i2u445_44:
 23804  003A' 2E04'              	decfsz	??i2_Byte_SetBit,f,c
 23805  003C' D7FC               	goto	i2u445_45
 23806  003E' C000' FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 23807  0042' C001' FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 23808  0046' 5005'              	movf	??i2_Byte_SetBit+1,w,c
 23809  0048' 12DF               	iorwf	indf2,f,c
 23810  004A' 0012               	return		;funcret
 23811  004C'                    __end_ofi2_Byte_SetBit:
 23812                           	opt stack 0
 23813                           tosu	equ	0xFFF
 23814                           tosh	equ	0xFFE
 23815                           tosl	equ	0xFFD
 23816                           pclatu	equ	0xFFB
 23817                           pclath	equ	0xFFA
 23818                           tblptru	equ	0xFF8
 23819                           tblptrh	equ	0xFF7
 23820                           tblptrl	equ	0xFF6
 23821                           tablat	equ	0xFF5
 23822                           prodh	equ	0xFF4
 23823                           prodl	equ	0xFF3
 23824                           intcon	equ	0xFF2
 23825                           indf0	equ	0xFEF
 23826                           postinc0	equ	0xFEE
 23827                           fsr0h	equ	0xFEA
 23828                           fsr0l	equ	0xFE9
 23829                           wreg	equ	0xFE8
 23830                           indf1	equ	0xFE7
 23831                           postdec1	equ	0xFE5
 23832                           fsr1h	equ	0xFE2
 23833                           fsr1l	equ	0xFE1
 23834                           indf2	equ	0xFDF
 23835                           postinc2	equ	0xFDE
 23836                           postdec2	equ	0xFDD
 23837                           plusw2	equ	0xFDB
 23838                           fsr2h	equ	0xFDA
 23839                           fsr2l	equ	0xFD9
 23840                           status	equ	0xFD8
 23841                           
 23842 ;; *************** function i2_MXK_SwitchTo *****************
 23843 ;; Defined at:
 23844 ;;		line 105 in file "Library/MXK.c"
 23845 ;; Parameters:    Size  Location     Type
 23846 ;;  pModule         1    wreg     enum E6927
 23847 ;; Auto vars:     Size  Location     Type
 23848 ;;  pModule         1    7[COMRAM] enum E6927
 23849 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 23850 ;; Return value:  Size  Location     Type
 23851 ;;                  1    wreg      unsigned char 
 23852 ;; Registers used:
 23853 ;;		wreg, status,2, status,0, cstack
 23854 ;; Tracked objects:
 23855 ;;		On entry : 0/0
 23856 ;;		On exit  : 0/0
 23857 ;;		Unchanged: 0/0
 23858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23860 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23862 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23863 ;;Total ram usage:        2 bytes
 23864 ;; Hardware stack levels used:    1
 23865 ;; Hardware stack levels required when called:    1
 23866 ;; This function calls:
 23867 ;;		i2_delay_us
 23868 ;; This function is called by:
 23869 ;;		i2_Motor_Step
 23870 ;; This function uses a non-reentrant model
 23871 ;;
 23872                           
 23873                           	psect	text138
 23874  0000'                    __ptext138:
 23875                           	opt stack 0
 23876  0000'                    i2_MXK_SwitchTo:
 23877                           	opt stack 15
 23878                           
 23879                           ;incstack = 0
 23880                           ;i2MXK_SwitchTo@pModule stored from wreg
 23881  0000' 6E07'              	movwf	i2MXK_SwitchTo@pModule,c
 23882                           
 23883                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 23884  0002' 5086               	movf	3974,w,c	;volatile
 23885  0004' 0B0F               	andlw	15
 23886  0006' 6E06'              	movwf	i2MXK_SwitchTo@CUR,c
 23887                           
 23888                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 23889  0008' 5004'              	movf	_Bus_State,w,c
 23890  000A' A4D8               	btfss	status,2,c
 23891  000C' D002               	goto	i2l1730
 23892                           
 23893                           ;MXK.c: 110: return 0;
 23894  000E' 0E00               	movlw	0
 23895  0010' 0012               	return	
 23896  0012'                    i2l1730:
 23897                           
 23898                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 23899  0012' 0E00               	movlw	0
 23900  0014' 6E04'              	movwf	_Bus_State,c
 23901                           
 23902                           ;MXK.c: 114: if (CUR != pModule)
 23903  0016' 5007'              	movf	i2MXK_SwitchTo@pModule,w,c
 23904  0018' 1806'              	xorwf	i2MXK_SwitchTo@CUR,w,c
 23905  001A' B4D8               	btfsc	status,2,c
 23906  001C' D00A               	goto	i2l1732
 23907                           
 23908                           ;MXK.c: 115: {
 23909                           ;MXK.c: 116: PORTG &= ~(0xF);
 23910  001E' 0EF0               	movlw	240
 23911  0020' 1686               	andwf	3974,f,c	;volatile
 23912                           
 23913                           ;MXK.c: 117: PORTG |= pModule;
 23914  0022' 5007'              	movf	i2MXK_SwitchTo@pModule,w,c
 23915  0024' 1286               	iorwf	3974,f,c	;volatile
 23916                           
 23917                           ;MXK.c: 120: delay_us(10);
 23918  0026' 0E00               	movlw	0
 23919  0028' 6E01'              	movwf	i2delay_us@us+1,c
 23920  002A' 0E0A               	movlw	10
 23921  002C' 6E00'              	movwf	i2delay_us@us,c
 23922  002E' EC00' F000'        	call	i2_delay_us	;wreg free
 23923  0032'                    i2l1732:
 23924                           
 23925                           ;MXK.c: 121: }
 23926                           ;MXK.c: 122: return 1;
 23927  0032' 0E01               	movlw	1
 23928  0034' 0012               	return	
 23929  0036'                    __end_ofi2_MXK_SwitchTo:
 23930                           	opt stack 0
 23931                           tosu	equ	0xFFF
 23932                           tosh	equ	0xFFE
 23933                           tosl	equ	0xFFD
 23934                           pclatu	equ	0xFFB
 23935                           pclath	equ	0xFFA
 23936                           tblptru	equ	0xFF8
 23937                           tblptrh	equ	0xFF7
 23938                           tblptrl	equ	0xFF6
 23939                           tablat	equ	0xFF5
 23940                           prodh	equ	0xFF4
 23941                           prodl	equ	0xFF3
 23942                           intcon	equ	0xFF2
 23943                           indf0	equ	0xFEF
 23944                           postinc0	equ	0xFEE
 23945                           fsr0h	equ	0xFEA
 23946                           fsr0l	equ	0xFE9
 23947                           wreg	equ	0xFE8
 23948                           indf1	equ	0xFE7
 23949                           postdec1	equ	0xFE5
 23950                           fsr1h	equ	0xFE2
 23951                           fsr1l	equ	0xFE1
 23952                           indf2	equ	0xFDF
 23953                           postinc2	equ	0xFDE
 23954                           postdec2	equ	0xFDD
 23955                           plusw2	equ	0xFDB
 23956                           fsr2h	equ	0xFDA
 23957                           fsr2l	equ	0xFD9
 23958                           status	equ	0xFD8
 23959                           
 23960 ;; *************** function i2_delay_us *****************
 23961 ;; Defined at:
 23962 ;;		line 255 in file "Library/Types.c"
 23963 ;; Parameters:    Size  Location     Type
 23964 ;;  us              2    0[COMRAM] unsigned short 
 23965 ;; Auto vars:     Size  Location     Type
 23966 ;;  delay_us        4    2[COMRAM] unsigned long 
 23967 ;; Return value:  Size  Location     Type
 23968 ;;                  1    wreg      void 
 23969 ;; Registers used:
 23970 ;;		wreg, status,2, status,0
 23971 ;; Tracked objects:
 23972 ;;		On entry : 0/0
 23973 ;;		On exit  : 0/0
 23974 ;;		Unchanged: 0/0
 23975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23976 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23977 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23979 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23980 ;;Total ram usage:        6 bytes
 23981 ;; Hardware stack levels used:    1
 23982 ;; This function calls:
 23983 ;;		Nothing
 23984 ;; This function is called by:
 23985 ;;		i2_MXK_SwitchTo
 23986 ;; This function uses a non-reentrant model
 23987 ;;
 23988                           
 23989                           	psect	text139
 23990  0000'                    __ptext139:
 23991                           	opt stack 0
 23992  0000'                    i2_delay_us:
 23993                           	opt stack 15
 23994                           
 23995                           ;Types.c: 256: unsigned long u;
 23996                           ;Types.c: 257: while (us--) {
 23997                           
 23998                           ;incstack = 0
 23999  0000' D016               	goto	i2u448_40
 24000  0002'                    i2l8315:
 24001                           
 24002                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 24003  0002' 0E00               	movlw	0
 24004  0004' 6E02'              	movwf	i2delay_us@u,c
 24005  0006' 0E00               	movlw	0
 24006  0008' 6E03'              	movwf	i2delay_us@u+1,c
 24007  000A' 0E00               	movlw	0
 24008  000C' 6E04'              	movwf	i2delay_us@u+2,c
 24009  000E' 0E00               	movlw	0
 24010  0010' 6E05'              	movwf	i2delay_us@u+3,c
 24011  0012'                    i2l8317:
 24012  0012' 5002'              	movf	i2delay_us@u,w,c
 24013  0014' 1003'              	iorwf	i2delay_us@u+1,w,c
 24014  0016' 1004'              	iorwf	i2delay_us@u+2,w,c
 24015  0018' 1005'              	iorwf	i2delay_us@u+3,w,c
 24016  001A' A4D8               	btfss	status,2,c
 24017  001C' D008               	goto	i2u448_40
 24018  001E' F000               	nop		; ;# 
 24019  0020' 0E01               	movlw	1
 24020  0022' 2602'              	addwf	i2delay_us@u,f,c
 24021  0024' 0E00               	movlw	0
 24022  0026' 2203'              	addwfc	i2delay_us@u+1,f,c
 24023  0028' 2204'              	addwfc	i2delay_us@u+2,f,c
 24024  002A' 2205'              	addwfc	i2delay_us@u+3,f,c
 24025  002C' D7F2               	goto	i2l8317
 24026  002E'                    i2u448_40:
 24027  002E' 0600'              	decf	i2delay_us@us,f,c
 24028  0030' A0D8               	btfss	status,0,c
 24029  0032' 0601'              	decf	i2delay_us@us+1,f,c
 24030  0034' 2800'              	incf	i2delay_us@us,w,c
 24031  0036' E1E5               	bnz	i2l8315
 24032  0038' 2801'              	incf	i2delay_us@us+1,w,c
 24033  003A' B4D8               	btfsc	status,2,c
 24034  003C' 0012               	return	
 24035  003E' D7E1               	goto	i2l832
 24036  0040'                    __end_ofi2_delay_us:
 24037                           	opt stack 0
 24038                           tosu	equ	0xFFF
 24039                           tosh	equ	0xFFE
 24040                           tosl	equ	0xFFD
 24041                           pclatu	equ	0xFFB
 24042                           pclath	equ	0xFFA
 24043                           tblptru	equ	0xFF8
 24044                           tblptrh	equ	0xFF7
 24045                           tblptrl	equ	0xFF6
 24046                           tablat	equ	0xFF5
 24047                           prodh	equ	0xFF4
 24048                           prodl	equ	0xFF3
 24049                           intcon	equ	0xFF2
 24050                           indf0	equ	0xFEF
 24051                           postinc0	equ	0xFEE
 24052                           fsr0h	equ	0xFEA
 24053                           fsr0l	equ	0xFE9
 24054                           wreg	equ	0xFE8
 24055                           indf1	equ	0xFE7
 24056                           postdec1	equ	0xFE5
 24057                           fsr1h	equ	0xFE2
 24058                           fsr1l	equ	0xFE1
 24059                           indf2	equ	0xFDF
 24060                           postinc2	equ	0xFDE
 24061                           postdec2	equ	0xFDD
 24062                           plusw2	equ	0xFDB
 24063                           fsr2h	equ	0xFDA
 24064                           fsr2l	equ	0xFD9
 24065                           status	equ	0xFD8
 24066                           
 24067 ;; *************** function i2_MXK_Release *****************
 24068 ;; Defined at:
 24069 ;;		line 130 in file "Library/MXK.c"
 24070 ;; Parameters:    Size  Location     Type
 24071 ;;		None
 24072 ;; Auto vars:     Size  Location     Type
 24073 ;;		None
 24074 ;; Return value:  Size  Location     Type
 24075 ;;                  1    wreg      unsigned char 
 24076 ;; Registers used:
 24077 ;;		wreg, status,2, status,0
 24078 ;; Tracked objects:
 24079 ;;		On entry : 0/0
 24080 ;;		On exit  : 0/0
 24081 ;;		Unchanged: 0/0
 24082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24086 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24087 ;;Total ram usage:        0 bytes
 24088 ;; Hardware stack levels used:    1
 24089 ;; This function calls:
 24090 ;;		Nothing
 24091 ;; This function is called by:
 24092 ;;		i2_Motor_Step
 24093 ;; This function uses a non-reentrant model
 24094 ;;
 24095                           
 24096                           	psect	text140
 24097  0000'                    __ptext140:
 24098                           	opt stack 0
 24099  0000'                    i2_MXK_Release:
 24100                           	opt stack 16
 24101                           
 24102                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 24103                           
 24104                           ;incstack = 0
 24105  0000' 0E01               	movlw	1
 24106  0002' 6E04'              	movwf	_Bus_State,c
 24107                           
 24108                           ;MXK.c: 135: return 1;
 24109                           ;	Return value of i2_MXK_Release is never used
 24110  0004' 0012               	return	
 24111  0006'                    __end_ofi2_MXK_Release:
 24112                           	opt stack 0
 24113                           tosu	equ	0xFFF
 24114                           tosh	equ	0xFFE
 24115                           tosl	equ	0xFFD
 24116                           pclatu	equ	0xFFB
 24117                           pclath	equ	0xFFA
 24118                           tblptru	equ	0xFF8
 24119                           tblptrh	equ	0xFF7
 24120                           tblptrl	equ	0xFF6
 24121                           tablat	equ	0xFF5
 24122                           prodh	equ	0xFF4
 24123                           prodl	equ	0xFF3
 24124                           intcon	equ	0xFF2
 24125                           indf0	equ	0xFEF
 24126                           postinc0	equ	0xFEE
 24127                           fsr0h	equ	0xFEA
 24128                           fsr0l	equ	0xFE9
 24129                           wreg	equ	0xFE8
 24130                           indf1	equ	0xFE7
 24131                           postdec1	equ	0xFE5
 24132                           fsr1h	equ	0xFE2
 24133                           fsr1l	equ	0xFE1
 24134                           indf2	equ	0xFDF
 24135                           postinc2	equ	0xFDE
 24136                           postdec2	equ	0xFDD
 24137                           plusw2	equ	0xFDB
 24138                           fsr2h	equ	0xFDA
 24139                           fsr2l	equ	0xFD9
 24140                           status	equ	0xFD8
 24141                           
 24142 ;; *************** function i2_MXK_Queue *****************
 24143 ;; Defined at:
 24144 ;;		line 144 in file "Library/MXK.c"
 24145 ;; Parameters:    Size  Location     Type
 24146 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 24147 ;;		 -> Absolute function(1), Motor_Step(1), 
 24148 ;; Auto vars:     Size  Location     Type
 24149 ;;		None
 24150 ;; Return value:  Size  Location     Type
 24151 ;;                  1    wreg      void 
 24152 ;; Registers used:
 24153 ;;		wreg, status,2, status,0
 24154 ;; Tracked objects:
 24155 ;;		On entry : 0/0
 24156 ;;		On exit  : 0/0
 24157 ;;		Unchanged: 0/0
 24158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24159 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24162 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24163 ;;Total ram usage:        3 bytes
 24164 ;; Hardware stack levels used:    1
 24165 ;; This function calls:
 24166 ;;		Nothing
 24167 ;; This function is called by:
 24168 ;;		i2_Motor_Step
 24169 ;; This function uses a non-reentrant model
 24170 ;;
 24171                           
 24172                           	psect	text141
 24173  0000'                    __ptext141:
 24174                           	opt stack 0
 24175  0000'                    i2_MXK_Queue:
 24176                           	opt stack 16
 24177                           
 24178                           ;MXK.c: 146: lQueue = pCallback;
 24179                           
 24180                           ;incstack = 0
 24181  0000' C000' F007'        	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 24182  0004' C001' F008'        	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 24183  0008' C002' F009'        	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 24184  000C' 0012               	return		;funcret
 24185  000E'                    __end_ofi2_MXK_Queue:
 24186                           	opt stack 0
 24187                           tosu	equ	0xFFF
 24188                           tosh	equ	0xFFE
 24189                           tosl	equ	0xFFD
 24190                           pclatu	equ	0xFFB
 24191                           pclath	equ	0xFFA
 24192                           tblptru	equ	0xFF8
 24193                           tblptrh	equ	0xFF7
 24194                           tblptrl	equ	0xFF6
 24195                           tablat	equ	0xFF5
 24196                           prodh	equ	0xFF4
 24197                           prodl	equ	0xFF3
 24198                           intcon	equ	0xFF2
 24199                           indf0	equ	0xFEF
 24200                           postinc0	equ	0xFEE
 24201                           fsr0h	equ	0xFEA
 24202                           fsr0l	equ	0xFE9
 24203                           wreg	equ	0xFE8
 24204                           indf1	equ	0xFE7
 24205                           postdec1	equ	0xFE5
 24206                           fsr1h	equ	0xFE2
 24207                           fsr1l	equ	0xFE1
 24208                           indf2	equ	0xFDF
 24209                           postinc2	equ	0xFDE
 24210                           postdec2	equ	0xFDD
 24211                           plusw2	equ	0xFDB
 24212                           fsr2h	equ	0xFDA
 24213                           fsr2l	equ	0xFD9
 24214                           status	equ	0xFD8
 24215                           tosu	equ	0xFFF
 24216                           tosh	equ	0xFFE
 24217                           tosl	equ	0xFFD
 24218                           pclatu	equ	0xFFB
 24219                           pclath	equ	0xFFA
 24220                           tblptru	equ	0xFF8
 24221                           tblptrh	equ	0xFF7
 24222                           tblptrl	equ	0xFF6
 24223                           tablat	equ	0xFF5
 24224                           prodh	equ	0xFF4
 24225                           prodl	equ	0xFF3
 24226                           intcon	equ	0xFF2
 24227                           indf0	equ	0xFEF
 24228                           postinc0	equ	0xFEE
 24229                           fsr0h	equ	0xFEA
 24230                           fsr0l	equ	0xFE9
 24231                           wreg	equ	0xFE8
 24232                           indf1	equ	0xFE7
 24233                           postdec1	equ	0xFE5
 24234                           fsr1h	equ	0xFE2
 24235                           fsr1l	equ	0xFE1
 24236                           indf2	equ	0xFDF
 24237                           postinc2	equ	0xFDE
 24238                           postdec2	equ	0xFDD
 24239                           plusw2	equ	0xFDB
 24240                           fsr2h	equ	0xFDA
 24241                           fsr2l	equ	0xFD9
 24242                           status	equ	0xFD8
 24243                           
 24244                           	psect	text142
 24245  0000'                    __ptext142:
 24246                           	opt stack 0
 24247                           tosu	equ	0xFFF
 24248                           tosh	equ	0xFFE
 24249                           tosl	equ	0xFFD
 24250                           pclatu	equ	0xFFB
 24251                           pclath	equ	0xFFA
 24252                           tblptru	equ	0xFF8
 24253                           tblptrh	equ	0xFF7
 24254                           tblptrl	equ	0xFF6
 24255                           tablat	equ	0xFF5
 24256                           prodh	equ	0xFF4
 24257                           prodl	equ	0xFF3
 24258                           intcon	equ	0xFF2
 24259                           indf0	equ	0xFEF
 24260                           postinc0	equ	0xFEE
 24261                           fsr0h	equ	0xFEA
 24262                           fsr0l	equ	0xFE9
 24263                           wreg	equ	0xFE8
 24264                           indf1	equ	0xFE7
 24265                           postdec1	equ	0xFE5
 24266                           fsr1h	equ	0xFE2
 24267                           fsr1l	equ	0xFE1
 24268                           indf2	equ	0xFDF
 24269                           postinc2	equ	0xFDE
 24270                           postdec2	equ	0xFDD
 24271                           plusw2	equ	0xFDB
 24272                           fsr2h	equ	0xFDA
 24273                           fsr2l	equ	0xFD9
 24274                           status	equ	0xFD8
 24275                           
 24276                           	psect	rparam
 24277  0000                     tosu	equ	0xFFF
 24278                           tosh	equ	0xFFE
 24279                           tosl	equ	0xFFD
 24280                           pclatu	equ	0xFFB
 24281                           pclath	equ	0xFFA
 24282                           tblptru	equ	0xFF8
 24283                           tblptrh	equ	0xFF7
 24284                           tblptrl	equ	0xFF6
 24285                           tablat	equ	0xFF5
 24286                           prodh	equ	0xFF4
 24287                           prodl	equ	0xFF3
 24288                           intcon	equ	0xFF2
 24289                           indf0	equ	0xFEF
 24290                           postinc0	equ	0xFEE
 24291                           fsr0h	equ	0xFEA
 24292                           fsr0l	equ	0xFE9
 24293                           wreg	equ	0xFE8
 24294                           indf1	equ	0xFE7
 24295                           postdec1	equ	0xFE5
 24296                           fsr1h	equ	0xFE2
 24297                           fsr1l	equ	0xFE1
 24298                           indf2	equ	0xFDF
 24299                           postinc2	equ	0xFDE
 24300                           postdec2	equ	0xFDD
 24301                           plusw2	equ	0xFDB
 24302                           fsr2h	equ	0xFDA
 24303                           fsr2l	equ	0xFD9
 24304                           status	equ	0xFD8
 24305                           
 24306                           	psect	temp
 24307  0000'                    btemp:
 24308                           	opt stack 0
 24309  0000'                    	ds	1
 24310  0000                     int$flags	set	btemp
 24311  0000                     wtemp6	set	btemp+1
 24312                           tosu	equ	0xFFF
 24313                           tosh	equ	0xFFE
 24314                           tosl	equ	0xFFD
 24315                           pclatu	equ	0xFFB
 24316                           pclath	equ	0xFFA
 24317                           tblptru	equ	0xFF8
 24318                           tblptrh	equ	0xFF7
 24319                           tblptrl	equ	0xFF6
 24320                           tablat	equ	0xFF5
 24321                           prodh	equ	0xFF4
 24322                           prodl	equ	0xFF3
 24323                           intcon	equ	0xFF2
 24324                           indf0	equ	0xFEF
 24325                           postinc0	equ	0xFEE
 24326                           fsr0h	equ	0xFEA
 24327                           fsr0l	equ	0xFE9
 24328                           wreg	equ	0xFE8
 24329                           indf1	equ	0xFE7
 24330                           postdec1	equ	0xFE5
 24331                           fsr1h	equ	0xFE2
 24332                           fsr1l	equ	0xFE1
 24333                           indf2	equ	0xFDF
 24334                           postinc2	equ	0xFDE
 24335                           postdec2	equ	0xFDD
 24336                           plusw2	equ	0xFDB
 24337                           fsr2h	equ	0xFDA
 24338                           fsr2l	equ	0xFD9
 24339                           status	equ	0xFD8


Data Sizes:
    Strings     63
    Constant    730
    Data        25
    BSS         814
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      80
    BANK0           160     62     160
    BANK1           256    256     256
    BANK2           256    256     256
    BANK3           256      2     233
    BANK4           256      0     170
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[7]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 46
		 -> STR_4(CODE[14]), STR_3(CODE[3]), STR_2(CODE[46]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__memset	PTR void  size(2) Largest target is 100
		 -> iRScriptStack(BANK4[100]), 

    load_iRScriptStack@loadByte	PTR void [1] size(2) Largest target is 1
		 -> ?_load_iRScriptStack(BANK0[1]), 

    irobot_query_and_update@packetIDs	PTR void [1] size(2) Largest target is 1
		 -> ?_irobot_query_and_update(BANK0[1]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    lMotor	PTR struct Motor size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11800I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    S11482ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK3[5]), 
		 -> NULL(NULL[0]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK3[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK3[2]), 
		 -> PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), PortA(BANK3[10]), 
		 -> PortB(BANK3[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK3[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK3[2]), PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), 
		 -> PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), PortD(BANK0[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK3[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK3[2]), 
		 -> PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), PortA(BANK3[10]), 
		 -> PortB(BANK3[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK3[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK3[2]), PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), 
		 -> PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK0[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK3[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortE(BANK0[10]), PortD(BANK0[10]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK3[10]), PortD(BANK0[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK0[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK3[10]), PortE(BANK0[10]), PortC(BANK0[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortE(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK3[10]), TestButton(BANK3[10]), HMIBoard(BANK3[58]), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK3[10]), TestButton(BANK3[10]), HMIBoard(BANK3[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _mode2->_Console_Render
    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update
    _irobot_query_and_update->_rx_assign
    _rx_assign->_sort_iRBumpDrop
    _printf->_putch
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    _irobot_stop_motion->_irobot_move
    _irobot_song_play->_eusart_putch
    _irobot_move_straight->_irobot_move
    _HMI_Poll->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _MXK_TestButton->_Port_GetPin
    _MXK_DIPSwitch->_Port_GetQuad
    _HMI_UpSwitch->_Port_GetPin
    _HMI_RightSwitch->_Port_GetPin
    _HMI_LeftSwitch->_Port_GetPin
    _HMI_DownSwitch->_Port_GetPin
    _HMI_DIPSwitch->_Port_GetQuad
    _Event_TestButton->_LED_Toggle
    _HMI_SetNumber->_itos
    _itos->___lwmod
    ___lwmod->___lwdiv
    _HMI_SetSegments->_ToSegment
    _Event_DIPSwitch->_LED_Toggle
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Console_MakeField->_Byte_GetBit
    _irobot_rotate->_irobot_move
    _irobot_move->_load_iRScriptStack
    _irobot_led_power_on->_irobot_leds
    _irobot_leds->_load_iRScriptStack
    _irobot_init_song_0->_eusart_putch
    _irobot_init->_eusart_putch
    _MXK_Init->_Port_SetType
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone
    _Byte_SetQuad->_Byte_SetZone

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update
    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _HMI_Init->_Button_Init

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0 1088967
                                              0 BANK3      2     2      0
                               _init
                              _mode1
                              _mode2
                              _mode3
                              _mode4
 ---------------------------------------------------------------------------------
 (1) _mode4                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _mode3                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _mode2                                                2     2      0  179680
                                             44 BANK0      2     2      0
                     _Console_Render
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                           _HMI_Poll
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                     _MXK_TestButton *
               _irobot_move_straight
                   _irobot_song_play
                 _irobot_stop_motion
                             _printf
                       _update_angle
              _update_bump_and_cliff
                    _update_distance
 ---------------------------------------------------------------------------------
 (2) _update_distance                                      0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (2) _update_bump_and_cliff                                0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (2) _update_angle                                         0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (3) _irobot_query_and_update                            535   525     10    1737
                                              6 BANK0     23    13     10
                                              0 BANK1    256   256      0
                                              0 BANK2    256   256      0
                       _eusart_getch
                       _eusart_putch
                    _get_packet_size
                          _rx_assign
 ---------------------------------------------------------------------------------
 (4) _rx_assign                                            5     3      2     738
                                              1 BANK0      5     3      2
                    _sort_iRBumpDrop
 ---------------------------------------------------------------------------------
 (5) _sort_iRBumpDrop                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _get_packet_size                                      1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _eusart_getch                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _printf                                              25    17      8    4971
                                             21 BANK0     16     8      8
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0    1972
                                             20 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (4) _Console_PrintChar                                    4     4      0    1941
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (5) _Console_Tab                                          8     8      0    1390
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4    1053
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (6) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (7) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (5) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (6) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _irobot_stop_motion                                   1     1      0    3206
                                             25 BANK0      1     1      0
                        _irobot_move
 ---------------------------------------------------------------------------------
 (2) _irobot_song_play                                     1     1      0      62
                                              1 BANK0      1     1      0
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (2) _irobot_move_straight                                 2     0      2    3358
                                             25 BANK0      2     0      2
                        _irobot_move
 ---------------------------------------------------------------------------------
 (2) _HMI_Poll                                             0     0      0   84405
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (3) _Button_Poll                                          9     6      3   84405
                                             27 BANK0      9     6      3
                    _Event_DIPSwitch *
                         _Event_NULL *
                   _Event_TestButton *
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (2) _MXK_TestButton                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (2) _MXK_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (2) _HMI_UpSwitch                                         0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (2) _HMI_RightSwitch                                      0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_LeftSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_DownSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (3) _Port_GetQuad                                         6     3      3    1014
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (4) _Event_TestButton                                     1     1      0   37037
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (5) _HMI_SetNumber                                        2     0      2    3942
                                             22 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (6) _itos                                                10     6      4    3009
                                             12 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (7) _reverse                                              7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     840
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     849
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (6) _HMI_SetSegments                                      5     3      2     446
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (7) _ToSegment                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _HMI_SetButton                                        8     8      0     207
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (4) _Event_NULL                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _Event_DIPSwitch                                      2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (5) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Console_Render                                      11    11      0   35327
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (3) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (3) _LCD_DrawField                                       17     7     10   16520
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     536
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (4) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (1) _mode1                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0  909287
                       _Console_Init
                           _HMI_Init
                           _LCD_Init
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                           _delay_ms
                        _eusart_init
                        _irobot_init
                 _irobot_init_song_0
                _irobot_led_power_on
                      _irobot_rotate
 ---------------------------------------------------------------------------------
 (2) _irobot_rotate                                        5     1      4    3975
                                             25 BANK0      5     1      4
                        _irobot_move
 ---------------------------------------------------------------------------------
 (3) _irobot_move                                          9     5      4    3175
                                             16 BANK0      9     5      4
                       _eusart_putch
                 _load_iRScriptStack
                 _twos_complement_of
 ---------------------------------------------------------------------------------
 (4) _twos_complement_of                                   2     0      2     806
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _irobot_led_power_on                                  1     1      0    1358
                                             20 BANK0      1     1      0
                        _irobot_leds
 ---------------------------------------------------------------------------------
 (3) _irobot_leds                                          4     1      3    1327
                                             16 BANK0      4     1      3
                       _eusart_putch
                 _load_iRScriptStack
 ---------------------------------------------------------------------------------
 (4) _load_iRScriptStack                                  16     6     10     167
                                              0 BANK0     16     6     10
 ---------------------------------------------------------------------------------
 (2) _irobot_init_song_0                                   0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (2) _irobot_init                                          0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (4) _eusart_putch                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _eusart_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_Init                                             0     0      0  362312
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Port_Init                                            6     3      3  111429
                                              2 BANK1      6     3      3
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (3) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      4     1      3
                                              0 BANK1      2     2      0
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (4) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (4) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (3) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (4) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (2) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             4     4      0  290820
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (4) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (4) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (5) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (6) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (6) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Configure_GPIOs                                      0     0      0  261813
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (4) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _LCD_Reset                                            0     0      0   94437
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             6     4      2    1318
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (5) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (5) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (5) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (6) _Port_TogglePin                                       4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (4) _Port_SetPin                                          5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (3) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (2) _HMI_Init                                             2     2      0  217901
                                             59 BANK0      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _SPI_Init                                             8     2      6   86139
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (5) _Timer2_Init                                         17    13      4    2964
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (6) ___lldiv                                             13     5      8    2673
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (6) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _Button_Init                                         13     0     13  105207
                                              0 BANK1     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (4) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetBit                                          7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (6) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (7) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (5) _Word_GetPair                                         3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (6) _Byte_GetPair                                         3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (7) _Byte_GetZone                                         9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (4) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (6) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (4) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _ISR_Function                                       18    18      0    1778
                                             22 COMRAM    18    18      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (13) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (16) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (17) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (18) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (16) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (15) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (16) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _Console_Init
     _HMI_Init
       _Button_Init
         _HMI_InitButtons *
         _MXK_InitDIPSwitch *
           _Port_SetQuadType
             _Byte_SetQuad
               _Byte_SetZone
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
         _MXK_InitTestButton *
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MinSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _LCD_Init
       _Configure_GPIOs
         _LCD_Reset
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Reset_High
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _Reset_Low
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _delay_ms
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_Init
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
           _SPI_DCS
           _SPI_DisableISR
           _Timer2_Init
             _Timer2_Clear
             ___lldiv
         _SPI_MaxSpeed
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
       _LCD_Fill
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
       _LCD_Write
         _Mode_Set
         _SPI_Send
       _Set_Rotation
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _delay_ms
     _MXK_BlockSwitchTo
       _delay_us
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Init
       _LED_Init
         _LED_Set
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _Port_Init
         _GetPortPORT
         _GetPortProperties
         _GetPortTRIS
         _Port_Set
           _Byte_SetByte
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Port_SetType
           _Port_CheckPortType
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetQuadType
         _Byte_SetQuad
           _Byte_SetZone
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _delay_ms
     _MXK_Release
     _delay_ms
     _eusart_init
     _irobot_init
       _eusart_putch
     _irobot_init_song_0
       _eusart_putch
     _irobot_led_power_on
       _irobot_leds
         _eusart_putch
         _load_iRScriptStack
     _irobot_rotate
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
   _mode1
   _mode2
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _HMI_DIPSwitch *
       _Port_GetQuad
     _HMI_DownSwitch *
       _Port_GetPin
     _HMI_LeftSwitch *
       _Port_GetPin
     _HMI_Poll *
       _Button_Poll
         _Event_DIPSwitch *
           _HMI_GetBar
           _HMI_SetBar
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Event_NULL *
         _Event_TestButton *
           _HMI_SetButton
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _reverse
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
     _HMI_RightSwitch *
       _Port_GetPin
     _HMI_UpSwitch *
       _Port_GetPin
     _MXK_DIPSwitch *
       _Port_GetQuad
     _MXK_Dequeue *
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release *
     _MXK_SwitchTo *
       _delay_us
     _MXK_TestButton *
       _Port_GetPin
     _irobot_move_straight *
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _irobot_song_play *
       _eusart_putch
     _irobot_stop_motion *
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _printf *
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _update_angle *
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_bump_and_cliff *
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_distance *
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
   _mode3
   _mode4

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0      AA      14       66.4%
BITBANK3           100      0       0      10        0.0%
BANK3              100      2      E9      11       91.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100    100     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100    100     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3E      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      50       1       85.1%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     483      12        0.0%
DATA                 0      0     5AF       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Fri Sep 08 19:49:22 2017

                                 _update_angle 000000                                  i2_Timer0_Stop 000000  
                             SPI_Init@pChannel 000031                     __size_of_MXK_BlockSwitchTo 000000  
                                 i2_Motor_Step 000000                                              _A 000005  
                        __end_of_irobot_rotate 000064                                              l8 000052  
                                            _a 000006                                              _i 00000F  
                                            _j 00000E                                              _l 000008  
                                            _u 00000D                                              _w 000009  
                          _irobot_led_power_on 000000                                             l11 00007E  
                                           l12 000068                                             l90 000126  
                                           l85 000022                                             l87 000090  
                                           l89 0000FC                                   ___awdiv@sign 000005  
                          ___wmul@multiplicand 000002                                  _HMI_DIPSwitch 000000  
                           LCD_DrawField@pSize 000018                             LCD_DrawField@count 00001E  
                   __end_of_irobot_stop_motion 000046                              ?_Event_TestButton 000000  
                             i2_Timer0_Restart 000000                                            l120 000038  
                                          l121 00004E                                            l122 000064  
                                          l220 000042                                            l117 00007A  
                                          l221 000006                                            l118 000022  
                                          l230 000022                                            l222 000052  
                                          l223 000024                                    ?_LED_Toggle 000000  
                                          l234 000036                                            l235 000006  
                                          l227 00003E                                            l403 000148  
                                          l412 000182                                            l228 000006  
                                          l340 000014                                            l404 0000E8  
                                          l421 000116                                            l413 000018  
                                          l237 00001E                                            l341 000022  
                                          l405 000178                                  ??_Console_Tab 000008  
                                          l414 00019E                                            l430 000022  
                                          l350 000076                                            l342 000030  
                                          l510 000008                                            l406 000100  
                                          l415 00003E                                            l351 000006  
                                          l343 00003E                                            l511 000118  
                                          l407 000118                                            l183 000084  
                                          l600 00000C                                            l432 00004C  
                                          l344 00004C                                            l512 00002A  
                                          l408 000130                                            l184 00005E  
                                          l417 0000AA                                            l601 0001A0  
                                          l433 00007C                                            l353 000014  
                                          l337 000076                                            l345 00005A  
                                          l610 000228                                            l602 00003E  
                                          l354 000022                                            l346 000068  
                                          l338 000006                                            l370 00004C  
                                          l611 000276                                            l603 0001B2  
                                          l427 0000A6                                            l355 000030  
                                          l363 000076                                            l371 00005A  
                                          l531 000356                                    ?_HMI_GetBar 000000  
                                          l612 0002C4                                            l604 0000EC  
                                          l356 00003E                                            l372 000068  
                                          l364 000006                                            l532 00037A  
                                          l516 000072                                            l357 00004C  
                                          l509 0000FC                                            l614 0003A6  
                                          l358 00005A                                            l366 000014  
                                          l526 00039A                                            l615 00039E  
                                          l607 000312                                            l359 000068  
                                          l367 000022                                            l519 0000BA  
                                          l616 0003B8                                            l608 0001DA  
                                          l368 000030                                            l528 0003B8  
                                          l393 000054                                            l617 0003A2  
                                          l609 000330                                            l369 00003E  
                                          l529 000336                                            l483 0000BE  
                                          l732 000058                                            l476 000196  
                                          l900 0000BA                                            l733 00004C  
                                          l389 000064                                            l477 000008  
                                          l397 000042                                            l901 0000BE  
                                          l726 000032                                            l478 0001B2  
                                          l486 00012A                                            l654 00000A  
                                          l910 0000E2                                            l902 0000C2  
                                          l727 000026                                            l479 000052  
                                          l655 000002                                            l911 0000E6  
                                          l903 0000C6                                            l824 000002  
                                          l832 000002                                            l912 0000EA  
                                          l904 0000CA                                            l673 000022  
                                          l657 000006                                            l681 000012  
                                          l913 0000EE                                            l905 0000CE  
                                          l921 00004E                                            l914 0000F2  
                                          l906 0000D2                                            l922 00001A  
                                          l930 00003E                                            l819 000078  
                                          l915 0000F6                                            l907 0000D6  
                                          l684 000028                                            l916 0000FA  
                                          l908 0000DA                                            l860 00001A  
                                          l781 00002C                                            l597 00001A  
                                          l853 000102                                            l917 0000FE  
                                          l909 0000DE                                            l861 00001E  
                                          l598 000002                                            l678 00004E  
                                          l686 000038                                            l870 000042  
                                          l862 000022                                            l854 000006  
                                          l599 00002A                                            l679 000002  
                                          l871 000046                                            l863 000026  
                                          l776 000030                                            l880 00006A  
                                          l872 00004A                                            l864 00002A  
                                          l856 00000A                                            l928 0000BE  
                                          l881 00006E                                            l873 00004E  
                                          l865 00002E                                            l857 00000E  
                                          l929 00008E                                            l890 000092  
                                          l882 000072                                            l874 000052  
                                          l866 000032                                            l858 000012  
                                          l891 000096                                            l883 000076  
                                          l875 000056                                            l867 000036  
                                          l859 000016                                            l892 00009A  
                                          l884 00007A                                            l876 00005A  
                                          l868 00003A                                            l893 00009E  
                                          l885 00007E                                            l877 00005E  
                                          l869 00003E                                            l894 0000A2  
                                          l886 000082                                            l878 000062  
                                          l990 00001C                                            l895 0000A6  
                                          l887 000086                                            l879 000066  
                                          l983 00007E                                            l976 00001C  
                                          l896 0000AA                                            l888 00008A  
                                          l992 00002C                                            l984 000002  
                                          l897 0000AE                                            l889 00008E  
                                          l985 00007A                                            l978 00002C  
                                          l898 0000B2                                            l899 0000B6  
                                          l997 000016                                            l999 00003A  
                                          _PR2 000FCB                                            _dip 000036  
                                          _val 000021                                    ?_HMI_SetBar 000000  
                           ??_Event_TestButton 000019                                   _Word_GetPair 000000  
                                          prod 000FF3                            MXK_SwitchTo@pModule 000007  
                                          tosl 000FFD                                            wreg 000FE8  
                           Console_MakeField@x 000010                             Console_MakeField@y 000011  
                                   _TXSTA1bits 000FAD                                _update_distance 000000  
                                 Console_Tab@c 00000F                                   Console_Tab@i 00000E  
                          LCD_DrawField@pField 000012                                   Console_Tab@t 00000D  
                                   i2_delay_us 000000                           Port_Set@TypeRequired 000022  
                            Console_FormFeed@x 000002                              Console_FormFeed@y 000003  
                          LCD_DrawField@pPoint 000014                                 ?_LCD_DrawField 000012  
                        Port_SetPinType@Output 00002A                                Port_SetPin@Type 000013  
                              Port_SetPin@pPin 000011                           ?_irobot_led_power_on 000000  
                                ?_Byte_GetPair 000009                                __end_of_LED_Set 000050  
                      __size_ofi2_Word_GetPair 000000                                  i2_Port_SetPin 000000  
                                 _Word_SetPair 000000                                           l1000 000056  
                                         l1010 000052                                           l1004 000034  
                                ?_Byte_GetZone 000000                                           l1005 000062  
                                         l1200 00000C                                           l1040 00000C  
                                         l1201 000060                                           l1009 00005E  
                                         l1041 000012                                           l1202 00007C  
                                         l1042 000018                                           l1043 00001E  
                                         l1204 0000A6                                           l1036 000168  
                                         l1044 000024                                           l2020 00000A  
                                         l2100 0000C2                                           l1205 00008C  
                                         l1045 00002A                                           l1037 000006  
                                         l2021 00000E                                           l2110 00002E  
                                         l1062 00019A                                           l2022 000012  
                                         l1063 0001C8                                           l1207 0000B8  
                                         l1047 0000D0                                           l2023 000016  
                                         l2031 0000B4                                           l1056 00002A  
                                         l2024 00001A                                           l2040 000034  
                                         l2032 000006                                           l1153 0001F8  
                                         l1057 0001F0                                           l2017 00002A  
                                         l2025 00001E                                           l2114 000056  
                                         l2106 00003A                                           l1082 00006C  
                                         l1058 000032                                           l2026 000022  
                                         l2018 000006                                           l2042 000048  
                                         l2034 000010                                           l2115 000018  
                                         l1059 00005C                                           l2027 000026  
                                         l2035 000016                                           l2140 000038  
                                         l2108 000026                                           l1084 000074  
                                         l2036 00001C                                           l1077 00003C  
                                         l2045 000074                                           l2037 000022  
                                         l2070 000086                                           l2062 000042  
                                         l2054 000008                                           l2038 000028  
                                         l2135 000088                                           l1079 00004C  
                                         l2047 000088                                           l2039 00002E  
                                         l2152 000024                                           l2305 000006  
                                         l2154 00002A                                           l2330 00008E  
                                         l2066 000066                                           l2058 000022  
                                         l2163 00002A                                           l2331 00002A  
                                         l2323 00000E                                           l2091 000078  
                                         l2307 00000C                                           l2156 00004C  
                                         l2340 000136                                           l2332 000042  
                                         l2324 000022                                           l2092 000032  
                                         l2308 000012                                           l2341 000194  
                                         l2325 000052                                           l2333 00004C  
                                         l2309 000018                                           l1630 00006C  
                                         l2342 00013C                                           l2334 0000C6  
                                         l2094 0000A8                                           l1631 0000C8  
                                         l2095 00008C                                           l1632 0000AC  
                                         l2272 000028                                           l2520 000092  
                                         l2336 0000E0                                           l2521 0000A0  
                                         l2513 00001C                                           l2097 000178  
                                         l1730 000016                                           l2522 0000B4  
                                         l2514 000032                                           l2098 0000BC  
                                         l1627 000114                                           l2099 000104  
                                         l2291 000054                                           l2700 000098  
                                         l1724 00000C                                           l1732 00003E  
                                         l1628 00010A                                           l2516 00005C  
                                         l2701 0000AA                                           l1629 00008A  
                                         l2517 000050                                           l2293 00014C  
                                         l1726 00003A                                           l2294 000130  
                                         l1735 000018                                           l2295 0000E6  
                                         l2288 000038                                           l1827 00006C  
                                         l1828 00008C                                           l2750 00001E  
                                         l2760 000014                                           l2753 000060  
                                         l1873 000034                                           l2754 00006E  
                                         l2763 00004A                                           l2764 000058  
                                         l2749 00002A                                           l2759 000020  
                                         l2696 00003E                                           l2697 00002E  
                               ??_Console_Init 000000                          Port_SetPinType@pInput 000026  
                                         STR_1 000317                                           STR_2 0002DB  
                                         STR_3 000000                                           STR_4 000309  
                                         _LATA 000F89                                           _LATB 000F8A  
                                         _LATC 000F8B                                           _LATD 000F8C  
                                         _LATE 000F8D                                           _LATF 000F8E  
                  __size_of_MXK_InitTestButton 000000                                           _LATG 000F8F  
                          __end_of_GetPortPORT 0000A6                                           u7000 0000AA  
                                         u7010 000030                                           u7020 00005A  
                                         u7100 000062                                           u7200 000040  
                                         u8000 00004A                                           u8010 00005E  
                     __end_of_irobot_song_play 000014                                           u7140 000044  
                                         u8020 00009E                                           u7320 00003A  
                                         _PIR1 000F9E                                           u8130 000134  
                                         _PIR2 000FA1                                           _PIR3 000FA4  
                                         u6700 000012                                           u7260 000038  
                                         u8230 0001D8                                           u8160 000084  
                          __end_of_GetPortTRIS 0000A6                                           u8320 000018  
                                         u8400 000122                                           u7505 000200  
                                         u7265 000032                                           u7290 0000D8  
                                         u8090 000020                                           u7275 000024  
                                         u7515 00027E                                           u6660 000022  
                                         u8420 0001A0                                           u7525 0002C0  
                                         u6734 00001C                                           u7550 000022  
                                         u7374 00005C                                           u6910 000026  
                                         u6735 000016                                           u7535 000302  
                                         u7375 000056                                           u6680 000088  
                                         u6744 00004E                                           u6745 000048  
                                         u7465 00002E                                           u6850 000070  
                                         u6667 000018                                           u7475 000046  
                                         u7555 00001C                                           u6764 00006E  
                                         u6860 000076                                           u6765 000068  
                                         u6685 000082                                           u7485 00005E  
                                         u6774 0000A0                                           u6790 000034  
                                         u6775 00009A                                           u6935 00000E  
                                         u7495 000080                                           u6936 000010  
                                         u7840 000052                                           u7920 00017E  
                                         u7680 00001A                                           u6880 000030  
                                         u7818 00014E                                           u9610 00002C  
                                         u6795 00002E                                           u9620 00004E  
                                         u7758 0000BE                                           u7960 0000B6  
                                         u7880 00006E                                           u7768 000012  
                                         u7769 000026                                           u7970 0000C2  
                                         _SPI1 000072                                           _SPI2 00007D  
                                         u9558 000014                                           u9559 00002A  
                                         u9648 0000B2                                           u9649 0000C6  
                                         _TMR0 000FD6                 irobot_query_and_update@RXArray 000000  
                            rx_assign@packetID 000005                                           _gISR 000004  
                           Event_DIPSwitch@Bar 00001A                 irobot_query_and_update@TXArray 000000  
                                ??_Byte_GetBit 000003                                  _iRVirtualWall 000005  
                           SPI_MaxSpeed@pInput 00000F                                  ?_Byte_SetByte 000000  
                                ?_Byte_SetPair 00000B                                __end_of_SPI_DCS 000030  
                                         _main 000000                     irobot_leds@powerLuminosity 000012  
                                         _init 000000                                           _mode 000015  
                              ??i2_Byte_SetBit 000004                                  ?_Byte_SetQuad 00000B  
                                         _itos 000000                                           fsr0h 000FEA  
                                         fsr1h 000FE2                                           indf0 000FEF  
                                         fsr2h 000FDA                                           fsr0l 000FE9  
                                         indf1 000FE7                                           indf2 000FDF  
                                         fsr1l 000FE1                                           fsr2l 000FD9  
                                ?_Byte_SetZone 000000                                           btemp 000000  
                                         _zero 000007                                  ??_Byte_SetBit 000004  
                           __size_of_LCD_Reset 000000                                           prodh 000FF4  
                                         prodl 000FF3                                           start 000000* 
                           __size_of_LCD_Write 000000                                  __CFG_IESO$OFF 000000  
                              ?_SPI_DisableISR 000000                            HMI_SetButton@pValue 000006  
                                Console_Init@x 000002                                  Console_Init@y 000003  
                               ?i2_Timer0_Stop 000000                              i2Byte_SetBit@pBit 000002  
                                 ___param_bank 000000                                __end_of_Font5x7 0002CD  
                         Set_Rotation@rotation 000006                         __size_of_HMI_SetButton 000000  
                       __size_of_HMI_SetNumber 000000                             _irobot_init_song_0 000000  
                 __size_of_Console_ClearCursor 000000                               __end_of_LCD_Fill 000058  
                             __end_of_LCD_Init 000172                                 ?_HMI_DIPSwitch 000000  
                                __CFG_PLLDIV$3 000000                               __end_of_LED_Init 000062  
                                 _BAUDCON1bits 000F7E                                  ??_Button_Init 00003B  
                      GetPortProperties@pInput 000002                                  ??_Button_Poll 00001E  
                                        l11003 0000A6                               __end_of_HMI_Init 0001FA  
                                        l11123 000002                                          l11131 000040  
                                        l11125 000014                                          l11227 000002  
                                        l12051 0000DE                                          l11229 000014  
                                        l11189 00006C                                          l12237 000090  
                                        l12093 000042                                          l10813 000012  
                                        l12335 0001CC                                          l12247 000134  
                                        l12087 000032                                          l12265 000022  
                                        l12513 0000E6                                          l12259 000012  
                                        l10819 000022                                          l12293 000052  
                                        l10951 0000AA                                          l11829 000004  
                                        l13633 00001C                                          l11973 000036  
                                        l11969 000028                                          l11993 000044  
                                        l11997 000052                               __end_of_HMI_Poll 000074  
                                        _I2C1T 000017                                          _I2C2T 0000C4  
                                        ?_main 000000                                          ?_init 000000  
                              __end_of___awdiv 0000BE                          irobot_rotate@isScript 00001D  
                                        ?_itos 00000C                                _Event_DIPSwitch 000000  
                              __end_of___lldiv 0000BC                        __size_of_HMI_LeftSwitch 000000  
                              ___awdiv@divisor 000002                                          _INDEX 000011  
                              __end_of___lwdiv 000078                                          _MASKS 0000DD  
                              __end_of___lwmod 000062                                          i2l430 000018  
                                        i2l432 00003E                                          i2l433 000068  
                                        i2l427 00008E                                          i2l732 00004C  
                                        i2l733 000046                                          i2l832 000002  
                                        i2l781 00001E                                ___awdiv@counter 000004  
                          ?_irobot_init_song_0 000000                                          _PORTA 000F80  
                                        _PORTB 000F81                                          _PORTC 000F82  
                                        _PORTD 000F83                                          _PORTE 000F84  
                                        _PORTF 000F85                                          _PORTG 000F86  
                      __size_of_HMI_DownSwitch 000000                                          _TRISA 000F92  
                                        _TRISB 000F93                                          _TRISC 000F94  
                                        _TRISD 000F95                                          _TRISE 000F96  
                                        _TRISF 000F97                                          _TRISG 000F98  
                             ??i2_Byte_GetPair 00000C                               ??i2_Byte_GetZone 000005  
                           Port_TogglePin@pPin 000016                                 __CFG_FCMEN$OFF 000000  
                                        _PortA 0000B0                                          _PortB 0000A6  
                                        _PortC 000049                                          _PortD 00003F  
                                        _PortE 000035                                          _PortF 0000BA  
                                        _PortG 00009C                        __end_of_Port_SetPinType 0001C0  
                              _ADC_Initialised 000013                                 ??_Byte_GetPair 00000C  
                        ??_irobot_led_power_on 000014                                 ?i2_Port_SetPin 00000F  
                                  LED_Set@pLED 000015                                __end_of_dpowers 0000DD  
                               ??_Byte_GetZone 000005                      irobot_move@moveTurnRadius 000012  
                                        _mode1 000000*                                         _mode2 000000  
                                        _mode3 000000*                                         _mode4 000000* 
                               Button_Poll@Pin 000023                       __size_of_Set_Addr_Window 000000  
                          __end_of_Console_Tab 0000C2                               __end_of_MXK_Init 000180  
                     __size_of_sort_iRBumpDrop 000000                                   ?_eusart_init 000000  
                         i2Byte_GetPair@pInput 000009                                          _putch 000000  
                             __end_of_SPI_Init 00041E                               __end_of_SPI_Send 00006C  
                        __end_ofi2_MXK_Release 000006                                          pclath 000FFA  
                                        tablat 000FF5                                __end_of_reverse 00006C  
                           __size_of_MXK_Queue 000000                                 ??_Byte_SetByte 000003  
                               ??_Byte_SetPair 00000F                                 ??_Byte_SetQuad 00000F  
                                        plusw2 000FDB                                 ??_Byte_SetZone 000006  
                                        status 000FD8                                          wtemp6 000001  
                              _Configure_GPIOs 000000                           i2MXK_Queue@pCallback 000000  
                                  i2delay_us@u 000002                           ??_irobot_init_song_0 000001  
                               _LCD_Word_Write 000000                            __size_of_LED_Toggle 000000  
                          __size_of_HMI_GetBar 000000                                  ?_HMI_UpSwitch 000000  
                                   _Event_NULL 000000                    __size_of_Port_CheckPairType 000000  
                          __size_of_HMI_SetBar 000000                                   ?_irobot_leds 000010  
                                 ?_irobot_init 000000                                __initialization 000000  
                                 ?_irobot_move 000010                            __end_of_Byte_GetBit 000034  
                       irobot_leds@powerColour 000011                                   __end_of_main 00004C  
                                 __end_of_init 000078               irobot_query_and_update@packetIDs 000015  
                                 __end_of_itos 0000D8                           HMI_SetButton@reindex 000002  
                                 SPI_Send9@dat 000029                            __end_of_Byte_SetBit 000064  
                             __end_of_InitList 0000B3                    __size_of_Port_CheckQuadType 000000  
                             __end_of_Mode_Set 000012                        __end_of_update_distance 000012  
                  __size_of_Port_CheckPortType 000000                                         ??_main 000000  
                                       ??_init 00003E                                         ??_itos 000010  
                      _Console_MakeField$10974 00000E                                  __activetblptr 000003  
                            Port_SetPin@pInput 00000F                              __end_of_LCD_Reset 000050  
                            Port_SetPin@pValue 000012                                      ??_LED_Set 000015  
                            _MXK_InitDIPSwitch 000000                              GetPortPORT@pInput 000002  
                       Port_CheckPairType@Pin1 00002A                         Port_CheckPairType@Pin2 00002B  
                            __end_of_LCD_Write 000022                                    _GetPortPORT 000000  
                                 ?i2_MXK_Queue 000000                                    _GetPortTRIS 000000  
                              ??_LCD_DrawField 00001C                     __end_of_PortProperty_Valid 00007C  
                             __end_of_Port_Set 0003BA                                    ?i2_delay_us 000000  
             __size_of_Console_IncrementCursor 000000                            __end_of_Button_Init 0000D4  
                          __end_of_Button_Poll 000166                              Word_GetPair@pPair 00000E  
                      LCD_FillRectangle@pPoint 00000B                             ?_MXK_InitDIPSwitch 000000  
                                _HMI_SetButton 000000                                      ??_SPI_DCS 000002  
                                       ?_mode1 000000                                         ?_mode2 000000  
                                       ?_mode3 000000                                         ?_mode4 000000  
                                       _ADRESH 000FC4                                         _ADRESL 000FC3  
                                _HMI_SetNumber 000000                         Port_SetQuadType@Output 00003A  
                                       _ANCON0 000FC1                               ___awdiv@dividend 000000  
                                       ?_putch 000000                               ??_Console_Render 000023  
                                ToSegment@pCHR 000000                               _Console_FormFeed 000000  
                       Port_SetQuadType@pInput 000036                                         i2l1630 000066  
                                       i2l1631 0000B2                                         i2l1632 00009E  
                                       i2l1730 000012                                         i2l1627 0000EE  
                                       i2l1732 000032                                         i2l1628 0000E4  
                                       i2l1629 00007C                                         i2l1590 000056  
                               __CFG_WDTEN$OFF 000000                                         i2l8315 000002  
                                       i2l8317 000012                                         _RCREG1 000FAF  
                                       _RCSTA1 000FAC                         __end_of_LCD_Word_Write 00001E  
                               _Timer0_Restart 000000                                         _SPBRG1 000FB0  
                          ??_MXK_InitDIPSwitch 00003B                                         _TXREG1 000FAE  
                               i2_MXK_SwitchTo 000000                                         _TXSTA1 000FAD  
                              Byte_GetBit@pBit 000002                                     _Reset_High 000000  
                           Console_Render@temp 000025                                 ??_HMI_UpSwitch 000006  
                              ??i2_Timer0_Stop 000000                            Port_TogglePin@Value 000017  
                             __end_of_delay_ms 00006A                                   LED_Init@pLED 00002D  
                             __end_of_delay_us 000052                                  ??_Timer2_Init 000011  
                                ??_Timer0_Stop 000000                                     _Timer0_ISR 000000  
                     __size_of_Console_NewLine 000000                              Timer2_Init@DIVIDE 00001A  
                               __CFG_XINST$OFF 000000                       __size_of_HMI_InitButtons 000000  
                   __end_of_load_iRScriptStack 00006A                                         _iRWall 00000A  
                                   _Motor_Step 000000                            rx_assign@byteNumber 000002  
                      __end_of_Event_DIPSwitch 00002E                                         ___wmul 000000  
                              ??_HMI_DIPSwitch 000006                  load_iRScriptStack@bytesToLoad 00000E  
                                    ??___awdiv 000004                                 __CFG_STVREN$ON 000000  
                                       _change 000006                                         _lMotor 000023  
                                    ??___lldiv 000008                                         _lQueue 000007  
                                   _TestButton 000092                                      ??___lwdiv 000004  
                           __size_of_ToSegment 000000                                      ??___lwmod 00000B  
                     __end_of_Port_SetQuadType 000256                       i2Byte_GetZone@pChunkSize 000004  
                                 HMI_GRender@a 000002                           __end_of_Console_Init 00008A  
                            GetPortTRIS@pInput 000002                             __size_of_Reset_Low 000000  
                                       clear_0 000068                                         clear_1 00007A  
                                       clear_2 000086                                         clear_3 000092  
                                       clear_4 00009E                               ___awdiv@quotient 000006  
                   irobot_stop_motion@isScript 000019                                  ?_eusart_getch 000000  
                                   Port_Init@i 000007                                     _iRDistance 00001D  
                            __end_of_MXK_Queue 00000E                     __end_ofHMI_SetButton@F7213 0000EA  
                                   _iRBumpLeft 00002D                                         _printf 000000  
                                   _iRBumpDrop 00000B                      __end_of_MXK_InitDIPSwitch 00001E  
                                   _iRDropLeft 00002C                                 HMI_SetButton@v 000007  
                                ?_eusart_putch 000000                         HMI_SetSegments@pString 000001  
                                  _Console_Tab 000000                            LCD_Word_Write@value 000005  
                                 __pdataCOMRAM 000000                             __size_of_Port_Init 000000  
                                ??_Port_GetPin 000003                       Port_CheckPortType@Output 000039  
                           _twos_complement_of 000000                                ??i2_Port_SetPin 000013  
                                 __mediumconst 000000*                   __end_ofTimer2_Init@PRESCALE 0000ED  
                     Port_CheckPortType@pDrive 000038                                         tblptrh 000FF7  
                                       tblptrl 000FF6                                         tblptru 000FF8  
                                 ?_MXK_Dequeue 000000                                 ?_HMI_SetButton 000000  
                     Port_CheckPortType@pInput 000036                                  ??_Port_SetPin 000013  
                                    ??_reverse 000004                          Console_MakeField@Fill 000064  
                             ?_Port_SetPinType 000026                                         putch@c 000014  
                               ?_HMI_SetNumber 000016                                 i2_Word_GetPair 000000  
                      __end_of_Configure_GPIOs 000070                            irobot_leds@isScript 000013  
                             ??_MXK_TestButton 000006                         __end_of_Timer0_Restart 00000C  
                                Set_Rotation@m 000005                                   ?_MXK_Release 000000  
                          ?_twos_complement_of 000000                  __size_of_irobot_move_straight 000000  
                              __CFG_FOSC$HSPLL 000000                         __end_ofi2_MXK_SwitchTo 000036  
                                 i2delay_us@us 000000                          _update_bump_and_cliff 000000  
                              ?_LCD_Word_Write 000005                                     __accesstop 000000* 
                      __end_of__initialization 0000A4                                      ?_LCD_Fill 000009  
        irobot_query_and_update@packetVariable 000019                                      ?_LCD_Init 000000  
                                SPI_Init@pMode 000032                                    _Byte_GetBit 000000  
                                    ?_LED_Init 000000                       __end_ofi2_Timer0_Restart 00000C  
                                    ?_HMI_Init 000000                              ??_Set_Addr_Window 000008  
                                    ?_HMI_Poll 000000               __size_of_irobot_query_and_update 000000  
                                ___rparam_used 000001                              ??_sort_iRBumpDrop 000000  
                                  _Byte_SetBit 000000                                  __end_of_MASKS 0000E6  
                               _PortA_Property 0002D9                                    ?_Event_NULL 000000  
                                    LCD_Fill@i 00000B                                      LCD_Fill@j 00000C  
                          load_iRScriptStack@i 00000F                                      LCD_Init@i 000037  
                               __pcstackCOMRAM 000000                                 _PortB_Property 0002D7  
                          __size_ofi2_delay_us 000000                                   __pidataBANK0 000000  
                                 __pidataBANK3 000000              irobot_move_straight@straightSpeed 000019  
                          i2Byte_SetBit@pInput 000000                           __end_of_Byte_GetPair 00001E  
                              Console_Render@x 00002A                                Console_Render@y 00002B  
                          i2Byte_SetBit@pValue 000003                                  ?_Set_Rotation 000000  
                          Timer0_Init@PRESCALE 0000B3                           __end_of_Byte_GetZone 00009C  
                                __end_of_mode2 00015C                           ??_twos_complement_of 000002  
                            irobot_leds@LEDBit 000010                                 _PortC_Property 0002D5  
                                __end_of_putch 00000E                                 ??_eusart_getch 000000  
                                    ?_MXK_Init 000000                            __end_of_Timer2_Init 000160  
                          __end_of_Timer0_Stop 000006                                      ?_SPI_Init 00002D  
                             ?_update_distance 000000                                      ?_SPI_Send 000000  
                               ??_eusart_putch 000000                                    _Button_Init 000000  
                            Port_SetType@pType 00003C                                    _Button_Poll 000000  
                         __end_of_Byte_SetByte 00000E                           __end_of_Byte_SetPair 000022  
                               _HMI_LeftSwitch 000000                                 _PortD_Property 0002D3  
                         __end_of_Byte_SetQuad 000022                                   ??_LED_Toggle 000018  
                                 ??_HMI_GetBar 000000                     eusart_putch@eusartSendChar 000000  
                         __end_of_Byte_SetZone 0000B6                                 _HMI_DownSwitch 000000  
                                SPI_Send@pData 000002                          __end_of_MXK_DIPSwitch 000018  
                                 ??_HMI_SetBar 000000                       __size_of_get_packet_size 000000  
                               _PortE_Property 0002D1                       __size_of_HMI_SetSegments 000000  
                       __end_ofi2_Word_GetPair 000030                                 _PortF_Property 0002CF  
                      Port_CheckQuadType@Pair1 000033                        Port_CheckQuadType@Pair2 000034  
                     MXK_BlockSwitchTo@pModule 000007                                        ??_mode1 000000  
                                      ??_mode2 00002C                                        ??_mode3 000000  
                                      ??_mode4 000000                              _Console_Backspace 000000  
                              ?_Timer0_Restart 000000                                        ??_putch 000014  
                     __size_of_HMI_RightSwitch 000000                            _Console_ClearCursor 000000  
                            __end_of_ToSegment 000284                                 _PortG_Property 0002CD  
                                   __pbssBANK0 000000                                     __pbssBANK3 000000  
                                   __pbssBANK4 000000                            __end_of_Port_GetPin 000046  
                           _irobot_stop_motion 000000                        Port_CheckQuadType@pQuad 000031  
                              reverse@iterator 000005                               ??_SPI_DisableISR 000002  
                              ?i2_MXK_SwitchTo 000000                              ?_irobot_song_play 000000  
                           ?_Console_Backspace 000000                              __end_of_Reset_Low 00001E  
                    __size_of_Event_TestButton 000000                        __size_of_Port_TogglePin 000000  
                                   ??_LCD_Fill 00000B                                     ??_LCD_Init 000035  
                         __size_of_eusart_init 000000                            __end_of_Port_SetPin 0000C4  
                       __end_of_PortA_Property 0002DB               irobot_led_power_on@powerOnColour 000014  
                                    ?_Mode_Set 000000                             Byte_SetByte@pInput 000000  
                                   ??_LED_Init 00002D                             Byte_SetByte@pValue 000002  
                                ?_ISR_Function 000000                                    ?_Reset_High 000000  
                                   ??_HMI_Init 00003B                             ??_irobot_song_play 000001  
                                   ??_HMI_Poll 000024                                  ?_Timer2_Clear 000000  
                      Port_CheckPairType@Props 00002D                         __end_of_PortB_Property 0002D9  
                          ?_irobot_stop_motion 000000                              __end_of_Port_Init 000192  
                                  ?_Timer0_ISR 000000                        Port_CheckPairType@pPair 000028  
                           __end_of_LED_Toggle 000048                             __end_of_HMI_GetBar 000006  
                     LCD_FillRectangle@pColour 000009                                     _angleTotal 000017  
                          ??_Console_Backspace 000002                              Set_Addr_Window@xe 000006  
                            Set_Addr_Window@ye 000007                              Set_Addr_Window@xs 000008  
                            Set_Addr_Window@ys 000005                             Byte_SetPair@pInput 00000B  
                                  ?_Motor_Step 000000                             Byte_SetPair@pValue 00000E  
                           __end_of_HMI_SetBar 00000A                         __end_of_PortC_Property 0002D7  
                           Word_GetPair@pInput 00000C                                 ??_Set_Rotation 000005  
                                    ?_Port_Set 00000F                                        ?___wmul 000000  
                             ?_Event_DIPSwitch 000000                              Port_GetPin@Output 000005  
                 __size_of_Console_ResetCursor 000000                           __size_of_irobot_leds 000000  
                         __size_of_irobot_init 000000                           ?_Console_ClearCursor 000000  
                         __size_of_irobot_move 000000                         __end_of_HMI_LeftSwitch 000018  
                       __end_of_PortD_Property 0002D5                                        _ADC_AN0 0000DA  
                                      _ADC_AN1 0000D5                                        _ADC_AN2 0000D0  
                                      _ADC_AN3 0000CB                                     ??_MXK_Init 00003E  
                            Port_GetPin@pInput 000000                              _Console_MakeField 000000  
                            ??_Console_NewLine 000000                         __end_of_HMI_DownSwitch 000018  
                                   ??_SPI_Init 000033                         Event_TestButton@pState 000019  
                                   ??_SPI_Send 000003                                        ?_printf 000015  
                            ??_HMI_InitButtons 000000                     __size_of_MXK_InitDIPSwitch 000000  
                       __end_of_PortE_Property 0002D3                            Console_Render@F6956 000000  
                           ?_Console_MakeField 000005                                        _COUNTER 000000  
                              ??_HMI_SetButton 000000                           __end_of_HMI_UpSwitch 000018  
                         ??_irobot_stop_motion 000019                                        _LED_Set 000000  
                      _Console_IncrementCursor 000000                         __end_of_PortF_Property 0002D1  
                                  _gBackcolour 000027                                ??_HMI_SetNumber 000018  
                                    _I2C1_Done 000033                                ?i2_Word_GetPair 00000C  
                                    _I2C2_Done 000030                                      _I2C1_More 00002D  
                                    _I2C2_More 00002A                                      ?_delay_ms 000000  
                    __end_of_Console_Backspace 00005C                                      ?_delay_us 000000  
                          __size_of_Event_NULL 000000                     __end_of_MXK_InitTestButton 00001E  
                                      _SSP1ADD 000FC8                                        _SSP1BUF 000FC9  
                                      _SSP2BUF 000F6F                             __size_of_rx_assign 000000  
                       __end_of_PortG_Property 0002CF                            ??_Console_MakeField 000007  
                                      _SPI_DCS 000000                           __size_ofi2_MXK_Queue 000000  
                             ?_Configure_GPIOs 000000                         ?_update_bump_and_cliff 000000  
                       __size_of_irobot_rotate 000000                           i2Byte_GetZone@Offset 000007  
                               ??_ISR_Function 000016                           i2Byte_GetZone@Output 000008  
                            Event_TestButton@j 00002F                                     ??_Mode_Set 000000  
                               ??_Timer2_Clear 000000                                        _Font5x7 0000ED  
                         i2Byte_GetZone@pChunk 000003                           i2Byte_GetZone@pInput 000000  
                         SPI_DisableISR@pInput 000000                                  ?_Port_GetQuad 000000  
                              Byte_SetBit@pBit 000002                           Port_TogglePin@pInput 000014  
                        __end_ofi2_Byte_SetBit 00004C                                        __Hparam 000000  
                            Port_GetQuad@pQuad 000002                                    _Timer2_Init 000000  
                                      __Lparam 000000                                    _Timer0_Stop 000000  
                        __size_of_Console_Init 000000                                        OutSeg@a 000014  
              __end_ofPortProperty_Valid@F6830 0000D3                                        _iRAngle 00001B  
                                LCD_Write@mode 000003                                     ??_Port_Set 000012  
                    __end_of_Console_MakeField 0000D0                              _Console_PrintChar 000000  
                                ?_Port_SetType 00003A                                        _gCursor 000000  
                                      ___awdiv 000000                          ??_Console_ClearCursor 000000  
                                      _lBuffer 000000                                        ___lldiv 000000  
                              __size_of___wmul 000000                                        ___lwdiv 000000  
                                      ___lwmod 000000                                ?_HMI_LeftSwitch 000000  
                     __end_of_Console_FormFeed 00008E                             ?_Console_PrintChar 000000  
                                      __pcinit 000000                                ?_HMI_DownSwitch 000000  
                                      __ramtop 000000*                                       __ptext0 000000  
                                      __ptext1 000000                                        __ptext2 000000  
                                      __ptext3 000000                                        __ptext4 000000  
                                      __ptext5 000000                                        __ptext6 000000  
                                      __ptext7 000000                                        __ptext8 000000  
                                      __ptext9 000000                                __size_of_printf 000000  
                                    _T0CONbits 000FD5                    __end_of_irobot_led_power_on 00001C  
                            i2MXK_SwitchTo@CUR 000006                                        _dpowers 0000D3  
                                    _T2CONbits 000FCA                                  LED_Set@pValue 000014  
                          __size_of_Reset_High 000000                          Event_DIPSwitch@pState 000019  
                                 ?_GetPortPORT 000000                                   ?_GetPortTRIS 000000  
                          ??_Console_PrintChar 000010                                    _Port_GetPin 000000  
                            __CFG_MSSPMSK$MSK5 000000                            LCD_DrawRectangle@p2 000057  
                          LCD_DrawRectangle@p4 000053                                   ??i2_delay_us 000002  
                                   ??_delay_ms 000002                                     ??_delay_us 000002  
                                      _reverse 000000                                      _DIPSwitch 000088  
                          __size_of_Timer0_ISR 000000                                    _Port_SetPin 000000  
                                  _iRBumpRight 00002E                                 LCD_DrawField@i 000022  
                                    _LCD_Reset 000000                            __size_of_Motor_Step 000000  
                                    _LCD_Write 000000                                    _iRDropRight 000004  
                         __size_of_MXK_Dequeue 000000                                     delay_ms@ms 000000  
                         end_of_initialization 0000A4                              ??_get_packet_size 000000  
irobot_query_and_update@numberOfPacketRequests 000018                                     delay_us@us 000000  
                            ??_HMI_SetSegments 000003                        Console_PrintChar@pInput 000013  
                                 _Console_Init 000000                           __end_of_eusart_getch 000008  
                      _irobot_query_and_update 000000                           __size_of_MXK_Release 000000  
                   __end_of_Port_CheckPairType 00006A                           __end_of_eusart_putch 00000E  
                                      itos@Out 000014                                 ??_Port_GetQuad 000003  
                           _PortProperty_Valid 000000                             Byte_SetQuad@pInput 00000B  
                           SPI_MinSpeed@pInput 00000F                             Byte_SetQuad@pValue 00000E  
                        __size_of_Byte_GetPair 000000                    __size_of_irobot_init_song_0 000000  
                              ___lldiv@divisor 000004                          __size_of_Byte_GetZone 000000  
                            ??_HMI_RightSwitch 000006                                ___lldiv@counter 00000C  
                    __end_of_Console_PrintChar 00019E                                 ??_Port_SetType 000000  
                   __end_of_Port_CheckQuadType 00005A                                        printf@c 000024  
                                      printf@f 000015                                 Port_Init@pPort 000004  
                                      postdec1 000FE5                                        postdec2 000FDD  
                        __size_of_Byte_SetByte 000000                          __size_of_Byte_SetPair 000000  
                       Console_MakeField@Index 000009                              __end_of_rx_assign 0000F0  
                                      postinc0 000FEE                                        postinc2 000FDE  
                          ?_PortProperty_Valid 00000F                          __size_of_Byte_SetQuad 000000  
                   __end_of_Port_CheckPortType 000048                          __size_of_Byte_SetZone 000000  
                           __end_ofi2_delay_us 000040                             Button_Init@pInitIO 000004  
                                _irobot_rotate 000000                              ?_Port_SetQuadType 000036  
                                  _gForecolour 000004                      ??_Console_IncrementCursor 000004  
                       __size_ofi2_MXK_Release 000000                                      _PORTFbits 000F85  
                           ??_Port_SetQuadType 00003A                                   ?_Console_Tab 000000  
                             Byte_GetZone@MASK 000006                          Console_Render@lCursor 000026  
                           _load_iRScriptStack 000000                                      _MXK_Queue 000000  
                             __CFG_CPUDIV$OSC1 000000                               Byte_GetZone@pMax 000002  
                   __size_of_Console_Backspace 000000                                      _TRISCbits 000F94  
                   load_iRScriptStack@loadByte 00000C                                _Set_Addr_Window 000000  
                               SPI_Init@pClock 00002D                               ??_LCD_Word_Write 000007  
                              _sort_iRBumpDrop 000000                          __end_of_LCD_DrawField 0000A4  
                               Port_Set@pInput 00000F                                 SPI_Init@pInput 000033  
                         ??_PortProperty_Valid 000013                                 Port_Set@pValue 000011  
                                   ?_LCD_Reset 000000                           __end_of_Set_Rotation 000098  
                                   ?_LCD_Write 000003                                   _Byte_GetPair 000000  
                           HMI_SetButton@F7213 0000E6                            ?_load_iRScriptStack 000000  
                                 _Byte_GetZone 000000                                  ?_MXK_SwitchTo 000000  
                            LCD_DrawField@xmax 000020                              LCD_DrawField@ymax 000021  
                               _Port_TogglePin 000000                               _Event_TestButton 000000  
                         Port_SetPinType@Props 00002B                                   ?_Byte_GetBit 000000  
                      __size_ofi2_Byte_GetPair 000000                                   _Byte_SetByte 000000  
                                 _Byte_SetPair 000000                                   _Byte_SetQuad 000000  
                      __size_ofi2_Byte_GetZone 000000                                   _Byte_SetZone 000000  
                         Port_SetPinType@pType 000029                              ?i2_Timer0_Restart 000000  
                                 ?_Byte_SetBit 000000                                  ?_SPI_MaxSpeed 00000F  
                            __size_of_LCD_Fill 000000                                   ??_Event_NULL 000000  
                            __size_of_LCD_Init 000000                              __size_of_LED_Init 000000  
                                ?_SPI_MinSpeed 00000F                          __end_ofi2_Timer0_Stop 000006  
                           ??i2_Timer0_Restart 000000                              __size_of_HMI_Init 000000  
                            __size_of_HMI_Poll 000000                                  ?_update_angle 000000  
                                ?i2_Motor_Step 000000                     __size_of_Console_MakeField 000000  
                               ?_irobot_rotate 000019                           ??_load_iRScriptStack 00000A  
                 __end_of_irobot_move_straight 000018                          __size_of_HMI_UpSwitch 000000  
                               __end_of___wmul 000036                          __end_of_HMI_DIPSwitch 000018  
                                __pidataCOMRAM 000000                                   ?_Button_Init 000000  
                                 ?_Button_Poll 00001B                                      _Bus_State 000004  
                          i2Byte_GetPair@pPair 00000B                           __end_of_ISR_Function 0000A2  
                            __size_of_MXK_Init 000000                           __end_of_Timer2_Clear 000008  
                               __end_of_printf 0001C2                              __size_of_SPI_Init 000000  
                      get_packet_size@packetID 000000                              __size_of_SPI_Send 000000  
                                ?_Word_GetPair 00000C                               ??_Timer0_Restart 000000  
                           Port_SetType@Output 00003D                            start_initialization 000000  
                                   ?_MXK_Queue 000000                       PortProperty_Valid@Errors 000015  
                             ??i2_MXK_SwitchTo 000006                              _LCD_FillRectangle 000000  
                           Port_SetType@pInput 00003A                                     HMI_Init@in 00003B  
                          HMI_SetNumber@pInput 000016                          __end_ofi2_Port_SetPin 0000AA  
                           __end_of_Event_NULL 000002                         rx_assign@packetIDValue 000001  
                       __end_of_Port_TogglePin 000030                                  ?_Word_SetPair 00000F  
                            Byte_SetBit@pInput 000000                                 ??_MXK_SwitchTo 000006  
                            Byte_SetBit@pValue 000003                             ?_LCD_FillRectangle 000009  
                    ??_irobot_query_and_update 000010                            _Console_ResetCursor 000000  
                  PortProperty_Valid@pPinDrive 000011                           MXK_BlockSwitchTo@CUR 000006  
                     PortProperty_Valid@pInput 00000F                                  i2_MXK_Release 000000  
                       LCD_FillRectangle@pSize 00000F                                 SPI_Send@pInput 000000  
                                 ??_Reset_High 000014                       __size_of_Port_SetPinType 000000  
                               ??_SPI_MaxSpeed 000011                          Port_SetQuadType@pQuad 000038  
                                    _ToSegment 000000                            ??_LCD_FillRectangle 000013  
                        Port_SetQuadType@pType 000039                                _Console_NewLine 000000  
                               ??_SPI_MinSpeed 000011                                   _HMI_UpSwitch 000000  
                                    _Reset_Low 000000                                   ??_Timer0_ISR 000016  
                              _HMI_InitButtons 000000                              __size_of_Mode_Set 000000  
                   __size_of_Console_PrintChar 000000                                 ??_update_angle 00001D  
                                    _gCharSize 000000                               Timer2_Init@INDEX 000031  
                                    OutSeg@cur 000016                                 ??i2_Motor_Step 000014  
                      __size_of_Console_Render 000000                                   ??_Motor_Step 000014  
                                    _iRAngleSS 00001E                                      _iRCliffFL 000008  
                                    _iRCliffFR 000007                             Byte_SetZone@Offset 000009  
                                     ??___wmul 000004                           ?_Console_ResetCursor 000000  
                                    _Port_Init 000000                                    __pdataBANK0 000000  
                                  __pdataBANK3 000000                      __size_of_irobot_song_play 000000  
                  __size_of_twos_complement_of 000000                              __size_of_Port_Set 000000  
                           Byte_SetZone@pChunk 000003                               ??i2_Word_GetPair 00000F  
                           Byte_SetZone@pInput 000000                             Byte_SetZone@pValue 000005  
                                Mode_Set@pMode 000000                                       ??_printf 00001D  
                      __end_of_Set_Addr_Window 0000AA                       Port_CheckQuadType@Output 000035  
                      __end_of_sort_iRBumpDrop 00008E                                      _gLineSize 000004  
                     Port_CheckQuadType@pDrive 000032                                 ??_Word_GetPair 00000F  
                     Port_CheckQuadType@pInput 00002F                           __end_of_Port_GetQuad 00004A  
                                _selectedMode1 000013                                  _selectedMode2 000011  
                                _selectedMode3 00000F                                  _selectedMode4 00000D  
                    __end_of_LCD_FillRectangle 000074                                    __pbssBIGRAM 000000  
                                     ?_LED_Set 000014                                    __pbssCOMRAM 000000  
                           __end_of_Reset_High 00001E                                  __pcstackBANK0 000000  
                                __pcstackBANK1 000000                                  __pcstackBANK2 000000  
                                __pcstackBANK3 000000                        ??_update_bump_and_cliff 00001D  
                                   itos@Length 000012                          __size_of_eusart_getch 000000  
                               ??_Word_SetPair 000013                       __size_of_update_distance 000000  
                           __end_of_Timer0_ISR 00002E                           __size_of_GetPortPORT 000000  
                                  ??_LCD_Reset 000019                           __size_of_GetPortTRIS 000000  
                         __end_of_Port_SetType 00022A                                       ?_SPI_DCS 000000  
                        __size_of_eusart_putch 000000                                ?_Port_TogglePin 000014  
                                ??_eusart_init 000000                                    ??_LCD_Write 000004  
                            __size_of_delay_ms 000000                              __size_of_delay_us 000000  
                          __CFG_CCP2MX$DEFAULT 000000                             __end_of_Motor_Step 000126  
                        Timer2_Init@pFrequency 00000D                                 ?i2_MXK_Release 000000  
                     Port_CheckPairType@Output 00002C              twos_complement_of@complementValue 000000  
                                   ?_ToSegment 000000                       Port_CheckPairType@pDrive 000029  
                     Port_CheckPairType@pInput 000026                                 reverse@tempVar 000004  
                           _MXK_InitTestButton 000000                                     ?_Reset_Low 000000  
                       __size_of_MXK_DIPSwitch 000000                                   ?_Timer2_Init 00000D  
                             ??_HMI_LeftSwitch 000006                                   ?_Timer0_Stop 000000  
                             ___lwdiv@dividend 000000                                  ??_irobot_leds 000013  
                                ??_irobot_init 000001                                ??_irobot_rotate 00001D  
                                ??_irobot_move 000014                                  _lStepFunction 00000A  
                      __size_of_MXK_TestButton 000000                              Byte_SetPair@pPair 00000D  
                             ??_HMI_DownSwitch 000006                                      __pintcode 000000  
                                __pmediumconst 000000                          ??_Console_ResetCursor 000000  
                                     ?___awdiv 000000                                      __ptext100 000000  
                                    __ptext101 000000                                      __ptext110 000000  
                                    __ptext102 000000                                      __ptext111 000000  
                                    __ptext103 000000                                      __ptext120 000000  
                                    __ptext112 000000                                      __ptext104 000000  
                                    __ptext121 000000                                      __ptext113 000000  
                                    __ptext105 000000                                      __ptext130 000000  
                                    __ptext122 000000                                      __ptext114 000000  
                                    __ptext106 000000                                      __ptext131 000000  
                                    __ptext123 000000                                      __ptext115 000000  
                                    __ptext107 000000                                      __ptext140 000000  
                                    __ptext132 000000                                      __ptext124 000000  
                                    __ptext116 000000                                      __ptext108 000000  
                                    __ptext141 000000                                      __ptext133 000000  
                                    __ptext125 000000                                      __ptext117 000000  
                                    __ptext109 000000                                      __ptext142 000000  
                                    __ptext134 000000                                      __ptext126 000000  
                                    __ptext118 000000                                      __ptext135 000000  
                                    __ptext127 000000                                      __ptext119 000000  
                                    __ptext136 000000                                      __ptext137 000000  
                                    __ptext129 000000                                      __ptext138 000000  
                                    __ptext139 000000                __end_of_irobot_query_and_update 000186  
                                    _pShiftVal 00001F                                       ?___lldiv 000000  
                                   ?_Port_Init 000002                                       ?___lwdiv 000000  
                                     ?___lwmod 000007                            ?_MXK_InitTestButton 000000  
                            ?_Console_FormFeed 000000                              _GetPortProperties 000000  
                                 _eusart_getch 000000                    __end_ofTimer0_Init@PRESCALE 0000C3  
                              _get_packet_size 000000                                   _eusart_putch 000000  
                           ??_Console_FormFeed 000000                                _HMI_SetSegments 000000  
                           ?_GetPortProperties 000000                               Event_NULL@pState 000000  
                     __size_of_Event_DIPSwitch 000000                          __size_of_Set_Rotation 000000  
                                ??i2_MXK_Queue 000003                                    ??_MXK_Queue 000003  
                  __size_of_irobot_stop_motion 000000                                   ?_Port_GetPin 000000  
                        __end_of_HMI_SetButton 000090                           __size_of_Console_Tab 000000  
                                     ?_reverse 000000                           irobot_move@moveSpeed 000010  
                                 ?_Port_SetPin 00000F                          __end_of_HMI_SetNumber 00002A  
                             ___lwdiv@quotient 000005                                _HMI_RightSwitch 000000  
                               __size_of_mode2 000000                            ??_GetPortProperties 000002  
                      __end_of_Console_NewLine 0000A2                           ??_MXK_InitTestButton 00002D  
                           Byte_GetPair@pInput 000009                                 __size_of_putch 000000  
                      __end_of_HMI_InitButtons 000006                              i2Port_SetPin@Type 000013  
                         _irobot_move_straight 000000                              i2Port_SetPin@pPin 000011  
                               i2_Byte_GetPair 000000                                       _LCD_Fill 000000  
                                     _LCD_Init 000000                                 ___wmul@product 000004  
                                     _HMIBoard 000038                                 i2_Byte_GetZone 000000  
                                     _LED_Init 000000                                      delay_ms@u 000002  
                           Button_Poll@pButton 00001B                                      delay_us@u 000002  
                                     _HMI_Init 000000                                       _HMI_Poll 000000  
                           MXK_Queue@pCallback 000000                                       _IPR1bits 000F9F  
                                     _IPR3bits 000FA5                                       _PIE1bits 000F9D  
                          __end_of_eusart_init 00001E                                       _PIE3bits 000FA3  
                  __end_of_Console_ClearCursor 000040                       __size_of_Configure_GPIOs 000000  
                         __size_of_Byte_GetBit 000000                              Byte_SetQuad@pQuad 00000D  
                                     _PIR1bits 000F9E                                       i2u540_40 000090  
                                     i2u444_44 000014                                       i2u444_45 000010  
                                     _PIR3bits 000FA4                                       i2u445_44 00003A  
                                     i2u445_45 000036                                       i2u448_40 00002E  
                                     i2u538_40 000044                                       i2u387_40 000022  
                                     i2u539_40 000058                                       i2u387_47 000018  
                                     i2u389_40 00006A                                       i2u389_45 000066  
                         __size_of_Byte_SetBit 000000                                       i2u957_48 000018  
                                     _RCONbits 000FD0                           i2Word_GetPair@pInput 00000C  
                             __CFG_WDTPS$32768 000000                     irobot_song_play@songNumber 000001  
                             HMI_SetBar@pValue 000000                              Button_Init@pInput 000000  
                      __size_of_SPI_DisableISR 000000                                       _SSP1CON1 000FC6  
                            ??_Port_SetPinType 00002A                                       _SSP1CON2 000FC5  
                                     _SSP2CON1 000F6C                                       _SSP2CON2 000F6B  
                        __size_of_ISR_Function 000000                                       _SSP1STAT 000FC7  
                    __end_of_GetPortProperties 0000A6                                       _SSP2STAT 000F6D  
                                 _Set_Rotation 000000                          __size_of_Timer2_Clear 000000  
                         __end_of_MXK_SwitchTo 000042                             _Port_CheckPairType 000000  
                                     _MXK_Init 000000                                MXK_SwitchTo@CUR 000006  
                          __end_of_irobot_leds 000058                                       _SPI_Init 000000  
                          __end_of_irobot_init 00000E                       __end_of_Event_TestButton 00003C  
                                     _SPI_Send 000000                            __end_of_irobot_move 0000B0  
                                    _rx_assign 000000                                     _ADCON0bits 000FC2  
                                   _ADCON1bits 000FC1                               ?_Set_Addr_Window 000005  
                            ___wmul@multiplier 000000                               ?_sort_iRBumpDrop 000000  
                            Byte_GetBit@Output 000004                                     printf@flag 00001F  
                         Timer2_Init@pCPUClock 000016                     __size_of_LCD_FillRectangle 000000  
                         __size_of_Button_Init 000000                           __end_of_SPI_MaxSpeed 000074  
                                   printf@prec 00001E                              Byte_GetBit@pInput 000000  
                          Port_SetPinType@pPin 000028                           __size_of_Button_Poll 000000  
                           _Port_CheckQuadType 000000                                  _MXK_DIPSwitch 000000  
                          ?_Port_CheckPairType 000026                           __end_of_SPI_MinSpeed 000074  
                                ??_MXK_Dequeue 000016                               __size_of_LED_Set 000000  
                       __size_ofi2_Byte_SetBit 000000                             _Port_CheckPortType 000000  
                         __end_of_update_angle 000012                          Button_Poll@pIncrement 00001D  
                      PortProperty_Valid@F6830 0000C3                           __end_ofi2_Motor_Step 000100  
                              ??i2_MXK_Release 000000                   __size_of_irobot_led_power_on 000000  
                                    copy_data0 000014                                      copy_data1 000034  
                                    copy_data2 000054                                  ??_MXK_Release 000000  
                       __end_ofi2_Byte_GetPair 00001A                      __size_of_Port_SetQuadType 000000  
                             __size_of_SPI_DCS 000000                            ?_Port_CheckQuadType 00002F  
                        ?_irobot_move_straight 000019                         __end_ofi2_Byte_GetZone 000076  
                          __end_ofi2_MXK_Queue 00000E                                      mode2@dist 00002C  
                          ?_Port_CheckPortType 000036                                itos@destination 00000E  
                                     _InitList 000001                     __end_of_irobot_init_song_0 000020  
                         _Motor_Step$intlevel0 000006                                       _Mode_Set 000000  
                           Port_GetQuad@Output 000005                              ??_update_distance 00001D  
                                  ??_ToSegment 000000                                   _ISR_Function 000000  
                           Port_GetQuad@pInput 000000                                   _Timer2_Clear 000000  
                         __end_of_Word_GetPair 00003E                                       _lCBuffer 000000  
                         ??_Port_CheckPairType 00002A                                    ??_Reset_Low 000014  
                                     __Hrparam 000000*                                _Console_Render 000000  
                                     __Lrparam 000000*                               Timer2_Init@RDIV 000012  
                                     _iRCliffL 000009                                       _iRCliffR 000006  
                               LCD_Write@value 000004                                       _Port_Set 000000  
                                 OutSeg@segset 000015                                      rand@screw 000012  
                         __end_of_Word_SetPair 000046                        __end_of_get_packet_size 000066  
                                  ??_Port_Init 000005                        __end_of_HMI_SetSegments 0000BA  
                         ??_Port_CheckQuadType 000033                               _irobot_song_play 000000  
                        __size_of_Port_GetQuad 000000                               __size_of___awdiv 000000  
                             __size_of___lldiv 000000                              _MXK_BlockSwitchTo 000000  
                             __size_of___lwdiv 000000                           ??_Port_CheckPortType 000039  
                             __size_of___lwmod 000000                                       _lBufferX 000033  
                                     _lBufferY 000032                            Timer2_Init@PRESCALE 0000EA  
                                   ?_rx_assign 000001                                LCD_Fill@pColour 000009  
                           ?_MXK_BlockSwitchTo 000000                      __size_ofi2_Timer0_Restart 000000  
                                     _lCurrent 000025                        __end_of_HMI_RightSwitch 000018  
                       Byte_GetZone@pChunkSize 000004                                 ?_MXK_DIPSwitch 000000  
                       Byte_SetZone@pChunkSize 000004                          __size_of_Port_SetType 000000  
                                reverse@length 000002                                      itos@input 00000C  
                        i2MXK_SwitchTo@pModule 000007                            irobot_move@isScript 000018  
                                     _delay_ms 000000                                       _delay_us 000000  
                                     _clearall 000034                                ___lwdiv@divisor 000002  
                              ___lwdiv@counter 000004                                Port_GetPin@pPin 000002  
                                     __ptext10 000000                                       __ptext11 000000  
                                     __ptext20 000000                                       __ptext12 000000  
                                     __ptext21 000000                                       __ptext13 000000  
                                     __ptext30 000000                                       __ptext22 000000  
                                     __ptext14 000000                                       __ptext31 000000  
                                     __ptext23 000000                                       __ptext15 000000  
                                     __ptext40 000000                                       __ptext32 000000  
                                     __ptext24 000000                                       __ptext16 000000  
                                     __ptext41 000000                                       __ptext33 000000  
                                     __ptext25 000000                                       __ptext17 000000  
                                     __ptext50 000000                                       __ptext42 000000  
                                     __ptext34 000000                                       __ptext26 000000  
                                     __ptext18 000000                                       __ptext51 000000  
                                     __ptext43 000000                                       __ptext35 000000  
                                     __ptext27 000000                                       __ptext19 000000  
                                     __ptext60 000000                                       __ptext52 000000  
                                     __ptext44 000000                                       __ptext36 000000  
                                     __ptext28 000000                                       __ptext61 000000  
                                     __ptext53 000000                                       __ptext45 000000  
                                     __ptext37 000000                                       __ptext29 000000  
                                     __ptext70 000000                                       __ptext62 000000  
                                     __ptext54 000000                                       __ptext46 000000  
                                     __ptext38 000000                                       __ptext71 000000  
                                     __ptext63 000000                                       __ptext55 000000  
                                     __ptext47 000000                                       __ptext39 000000  
                          ??_MXK_BlockSwitchTo 000006                                       __ptext80 000000  
                                     __ptext72 000000                                       __ptext64 000000  
                                     __ptext56 000000                                       __ptext48 000000  
                                     __ptext81 000000                                       __ptext73 000000  
                                     __ptext65 000000                                       __ptext57 000000  
                                     __ptext49 000000                                       __ptext90 000000  
                                     __ptext82 000000                                       __ptext74 000000  
                                     __ptext66 000000                                       __ptext58 000000  
                                     __ptext91 000000                                       __ptext83 000000  
                                     __ptext75 000000                                       __ptext67 000000  
                                     __ptext59 000000                                       __ptext92 000000  
                                     __ptext84 000000                                       __ptext76 000000  
                                     __ptext68 000000                                       __ptext93 000000  
                                     __ptext85 000000                                       __ptext77 000000  
                                     __ptext69 000000                                       __ptext94 000000  
                                     __ptext86 000000                                       __ptext78 000000  
                                     __ptext95 000000                                       __ptext87 000000  
                                     __ptext79 000000                                       __ptext96 000000  
                                     __ptext88 000000                                       __ptext97 000000  
                                     __ptext89 000000                                       __ptext98 000000  
                                     __ptext99 000000                                   _SSP1CON1bits 000FC6  
                             __size_of_reverse 000000                                   _SSP1CON2bits 000FC5  
                  __size_of_PortProperty_Valid 000000                             i2Byte_GetZone@MASK 000006  
                                 _SSP2CON1bits 000F6C                                   _SSP2CON2bits 000F6B  
                                  _eusart_init 000000                                ?i2_Byte_GetPair 000009  
                             ?_Console_NewLine 000000                              ??_Event_DIPSwitch 000019  
                              ?i2_Byte_GetZone 000000                             i2Byte_GetZone@pMax 000002  
                             ?_HMI_InitButtons 000000                            __end_of_MXK_Dequeue 00003E  
                            HMI_SetSegments@in 000004                          Button_Init@pThreshold 000002  
                                __size_of_main 000000                                  __size_of_init 000000  
                                __size_of_itos 000000                              Byte_GetPair@pPair 00000B  
                       __end_of_Console_Render 000210                            i2Port_SetPin@pInput 00000F  
                          i2Port_SetPin@pValue 000012                                   _Port_GetQuad 000000  
                          __end_of_MXK_Release 00001C                                 _MXK_TestButton 000000  
                                i2_Byte_SetBit 000000                                   _iRDistanceSS 000000  
                                  _irobot_leds 000000                                    _irobot_init 000000  
                          i2Word_GetPair@pPair 00000E                                    _irobot_move 000000  
                    __end_of_MXK_BlockSwitchTo 00003E                       ?_Console_IncrementCursor 000000  
                         __size_of_Timer2_Init 000000                                       int$flags 000000  
                         __size_of_Timer0_Stop 000000                                   _Port_SetType 000000  
                                 Port_Set@Type 000026                     __size_of_GetPortProperties 000000  
                       __size_of_LCD_DrawField 000000                                   _iRDropCaster 00002B  
                  __size_of_load_iRScriptStack 000000                              ??_Configure_GPIOs 000035  
                                    printf@val 000022                                   _SSP1STATbits 000FC7  
                               Timer0_Init@DIV 000026                                 Timer0_Init@PRE 000010  
                                 _SSP2STATbits 000F6D                                     _LED_Toggle 000000  
                                   _HMI_GetBar 000000                           Button_Init@pGetState 000007  
                       PortProperty_Valid@Pair 000025                               ??_Port_TogglePin 000017  
                                  _OSCTUNEbits 000F9B                                     _INTCONbits 000FF2  
                       PortProperty_Valid@pPin 000012                                     _HMI_SetBar 000000  
                             Byte_SetZone@MASK 00000A                                    i2_MXK_Queue 000000  
                               Timer2_Init@DIV 000022                                 Timer2_Init@PRE 000030  
                             Byte_SetZone@pMax 000002                         __size_ofi2_Timer0_Stop 000000  
                         __size_of_Port_GetPin 000000                         ??_irobot_move_straight 00001B  
               __size_of_update_bump_and_cliff 000000                           Button_Init@pFunction 00000A  
                                     itos@Data 000010                  __end_of_update_bump_and_cliff 00003A  
                           LCD_FillRectangle@i 000015                             LCD_FillRectangle@j 000016  
                         __size_of_Port_SetPin 000000                                       intlevel2 000000* 
                                 reverse@input 000000                         __size_of_HMI_DIPSwitch 000000  
                             ___lwmod@dividend 000007                               ___lldiv@dividend 000000  
                       __end_of_MXK_TestButton 000018                                ?_Console_Render 000000  
                                _iRScriptIndex 00000C                        __size_of_LCD_Word_Write 000000  
                               ?i2_Byte_SetBit 000000                                  _iRScriptStack 000000  
                        __size_of_MXK_SwitchTo 000000                       irobot_query_and_update@i 00001C  
                     irobot_query_and_update@j 00001A                                 _SPI_DisableISR 000000  
                   __end_of_twos_complement_of 000044                       irobot_rotate@rotateAngle 000019  
                              Port_Init@pInput 000002                                       printf@ap 000020  
                             ?_get_packet_size 000000                         __size_ofi2_Port_SetPin 000000  
                     irobot_rotate@rotateSpeed 00001B                               ?_HMI_SetSegments 000001  
                      Console_MakeField@Column 00000C                          __size_of_SPI_MaxSpeed 000000  
                                SPI_DCS@pInput 000000                          __size_of_SPI_MinSpeed 000000  
                              ??_MXK_DIPSwitch 000006                                    ??_rx_assign 000003  
                        __size_of_update_angle 000000                          __size_ofi2_Motor_Step 000000  
                      Console_MakeField@pInput 00000B                               ?_HMI_RightSwitch 000000  
                             ___lldiv@quotient 000008                                  ??_GetPortPORT 000002  
                              ___lwmod@divisor 000009                                  ??_GetPortTRIS 000002  
                           Word_SetPair@pInput 00000F                                ___lwmod@counter 00000B  
                           Word_SetPair@pValue 000012                       ?_irobot_query_and_update 000006  
                                  _MXK_Dequeue 000000                                  _distanceTotal 000019  
                               LED_Toggle@pLED 000018                                  _LCD_DrawField 000000  
                             _Port_SetQuadType 000000                                    _MXK_Release 000000  
                    __size_of_Console_FormFeed 000000                                   _MXK_SwitchTo 000000  
                        __size_of_Word_GetPair 000000              irobot_query_and_update@startIndex 00001B  
                           Byte_GetZone@Offset 000007                                  ?_Console_Init 000000  
                            Word_SetPair@pPair 000011                                _Port_SetPinType 000000  
                      __size_of_Timer0_Restart 000000                             Byte_GetZone@Output 000008  
                           Byte_GetZone@pChunk 000003                                ?_MXK_TestButton 000000  
                  __end_of_Console_ResetCursor 00001E                             Byte_GetZone@pInput 000000  
                      __size_ofi2_MXK_SwitchTo 000000                __end_of_Console_IncrementCursor 000066  
                        __size_of_Word_SetPair 000000                         __end_of_SPI_DisableISR 000028  
                                 _SPI_MaxSpeed 000000              irobot_query_and_update@streamSize 000017  
                                 _SPI_MinSpeed 000000                             Port_Set@TypeActual 000024  
