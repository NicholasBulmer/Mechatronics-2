

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Tue Sep 12 21:31:10 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK3,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    19                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    22                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	text0,global,reloc=2,class=CODE,delta=1
    24                           	psect	text1,global,reloc=2,class=CODE,delta=1
    25                           	psect	text2,global,reloc=2,class=CODE,delta=1
    26                           	psect	text3,global,reloc=2,class=CODE,delta=1
    27                           	psect	text4,global,reloc=2,class=CODE,delta=1
    28                           	psect	text5,global,reloc=2,class=CODE,delta=1
    29                           	psect	text6,global,reloc=2,class=CODE,delta=1
    30                           	psect	text7,global,reloc=2,class=CODE,delta=1
    31                           	psect	text8,global,reloc=2,class=CODE,delta=1
    32                           	psect	text9,global,reloc=2,class=CODE,delta=1
    33                           	psect	text10,global,reloc=2,class=CODE,delta=1
    34                           	psect	text11,global,reloc=2,class=CODE,delta=1
    35                           	psect	text12,global,reloc=2,class=CODE,delta=1
    36                           	psect	text13,global,reloc=2,class=CODE,delta=1
    37                           	psect	text14,global,reloc=2,class=CODE,delta=1
    38                           	psect	text15,global,reloc=2,class=CODE,delta=1
    39                           	psect	text16,global,reloc=2,class=CODE,delta=1
    40                           	psect	text17,global,reloc=2,class=CODE,delta=1
    41                           	psect	text18,global,reloc=2,class=CODE,delta=1
    42                           	psect	text19,global,reloc=2,class=CODE,delta=1,inline
    43                           	psect	text20,global,reloc=2,class=CODE,delta=1
    44                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text22,global,reloc=2,class=CODE,delta=1
    46                           	psect	text23,global,reloc=2,class=CODE,delta=1
    47                           	psect	text24,global,reloc=2,class=CODE,delta=1
    48                           	psect	text25,global,reloc=2,class=CODE,delta=1
    49                           	psect	text26,global,reloc=2,class=CODE,delta=1
    50                           	psect	text27,global,reloc=2,class=CODE,delta=1
    51                           	psect	text28,global,reloc=2,class=CODE,delta=1
    52                           	psect	text29,global,reloc=2,class=CODE,delta=1
    53                           	psect	text30,global,reloc=2,class=CODE,delta=1
    54                           	psect	text31,global,reloc=2,class=CODE,delta=1
    55                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text33,global,reloc=2,class=CODE,delta=1
    57                           	psect	text34,global,reloc=2,class=CODE,delta=1
    58                           	psect	text35,global,reloc=2,class=CODE,delta=1
    59                           	psect	text36,global,reloc=2,class=CODE,delta=1
    60                           	psect	text37,global,reloc=2,class=CODE,delta=1
    61                           	psect	text38,global,reloc=2,class=CODE,delta=1
    62                           	psect	text39,global,reloc=2,class=CODE,delta=1
    63                           	psect	text40,global,reloc=2,class=CODE,delta=1
    64                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	text42,global,reloc=2,class=CODE,delta=1
    66                           	psect	text43,global,reloc=2,class=CODE,delta=1
    67                           	psect	text44,global,reloc=2,class=CODE,delta=1
    68                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text48,global,reloc=2,class=CODE,delta=1
    72                           	psect	text49,global,reloc=2,class=CODE,delta=1
    73                           	psect	text50,global,reloc=2,class=CODE,delta=1
    74                           	psect	text51,global,reloc=2,class=CODE,delta=1
    75                           	psect	text52,global,reloc=2,class=CODE,delta=1
    76                           	psect	text53,global,reloc=2,class=CODE,delta=1
    77                           	psect	text54,global,reloc=2,class=CODE,delta=1
    78                           	psect	text55,global,reloc=2,class=CODE,delta=1
    79                           	psect	text56,global,reloc=2,class=CODE,delta=1
    80                           	psect	text57,global,reloc=2,class=CODE,delta=1
    81                           	psect	text58,global,reloc=2,class=CODE,delta=1
    82                           	psect	text59,global,reloc=2,class=CODE,delta=1
    83                           	psect	text60,global,reloc=2,class=CODE,delta=1
    84                           	psect	text61,global,reloc=2,class=CODE,delta=1
    85                           	psect	text62,global,reloc=2,class=CODE,delta=1
    86                           	psect	text63,global,reloc=2,class=CODE,delta=1
    87                           	psect	text64,global,reloc=2,class=CODE,delta=1
    88                           	psect	text65,global,reloc=2,class=CODE,delta=1
    89                           	psect	text66,global,reloc=2,class=CODE,delta=1
    90                           	psect	text67,global,reloc=2,class=CODE,delta=1
    91                           	psect	text68,global,reloc=2,class=CODE,delta=1
    92                           	psect	text69,global,reloc=2,class=CODE,delta=1
    93                           	psect	text70,global,reloc=2,class=CODE,delta=1
    94                           	psect	text71,global,reloc=2,class=CODE,delta=1
    95                           	psect	text72,global,reloc=2,class=CODE,delta=1
    96                           	psect	text73,global,reloc=2,class=CODE,delta=1
    97                           	psect	text74,global,reloc=2,class=CODE,delta=1
    98                           	psect	text75,global,reloc=2,class=CODE,delta=1
    99                           	psect	text76,global,reloc=2,class=CODE,delta=1
   100                           	psect	text77,global,reloc=2,class=CODE,delta=1
   101                           	psect	text78,global,reloc=2,class=CODE,delta=1
   102                           	psect	text79,global,reloc=2,class=CODE,delta=1
   103                           	psect	text80,global,reloc=2,class=CODE,delta=1
   104                           	psect	text81,global,reloc=2,class=CODE,delta=1
   105                           	psect	text82,global,reloc=2,class=CODE,delta=1
   106                           	psect	text83,global,reloc=2,class=CODE,delta=1
   107                           	psect	text84,global,reloc=2,class=CODE,delta=1
   108                           	psect	text85,global,reloc=2,class=CODE,delta=1
   109                           	psect	text86,global,reloc=2,class=CODE,delta=1,inline
   110                           	psect	text87,global,reloc=2,class=CODE,delta=1
   111                           	psect	text88,global,reloc=2,class=CODE,delta=1
   112                           	psect	text89,global,reloc=2,class=CODE,delta=1
   113                           	psect	text90,global,reloc=2,class=CODE,delta=1
   114                           	psect	text91,global,reloc=2,class=CODE,delta=1,inline
   115                           	psect	text92,global,reloc=2,class=CODE,delta=1,inline
   116                           	psect	text93,global,reloc=2,class=CODE,delta=1
   117                           	psect	text94,global,reloc=2,class=CODE,delta=1
   118                           	psect	text95,global,reloc=2,class=CODE,delta=1
   119                           	psect	text96,global,reloc=2,class=CODE,delta=1
   120                           	psect	text97,global,reloc=2,class=CODE,delta=1
   121                           	psect	text98,global,reloc=2,class=CODE,delta=1,group=1
   122                           	psect	text99,global,reloc=2,class=CODE,delta=1
   123                           	psect	text100,global,reloc=2,class=CODE,delta=1
   124                           	psect	text101,global,reloc=2,class=CODE,delta=1
   125                           	psect	text102,global,reloc=2,class=CODE,delta=1
   126                           	psect	text103,global,reloc=2,class=CODE,delta=1
   127                           	psect	text104,global,reloc=2,class=CODE,delta=1
   128                           	psect	text105,global,reloc=2,class=CODE,delta=1
   129                           	psect	text106,global,reloc=2,class=CODE,delta=1
   130                           	psect	text107,global,reloc=2,class=CODE,delta=1
   131                           	psect	text108,global,reloc=2,class=CODE,delta=1
   132                           	psect	text109,global,reloc=2,class=CODE,delta=1
   133                           	psect	text110,global,reloc=2,class=CODE,delta=1
   134                           	psect	text111,global,reloc=2,class=CODE,delta=1
   135                           	psect	text112,global,reloc=2,class=CODE,delta=1
   136                           	psect	text113,global,reloc=2,class=CODE,delta=1
   137                           	psect	text114,global,reloc=2,class=CODE,delta=1,inline
   138                           	psect	text115,global,reloc=2,class=CODE,delta=1
   139                           	psect	text116,global,reloc=2,class=CODE,delta=1
   140                           	psect	text117,global,reloc=2,class=CODE,delta=1
   141                           	psect	text118,global,reloc=2,class=CODE,delta=1
   142                           	psect	text119,global,reloc=2,class=CODE,delta=1
   143                           	psect	text120,global,reloc=2,class=CODE,delta=1
   144                           	psect	text121,global,reloc=2,class=CODE,delta=1
   145                           	psect	text122,global,reloc=2,class=CODE,delta=1
   146                           	psect	text123,global,reloc=2,class=CODE,delta=1
   147                           	psect	text124,global,reloc=2,class=CODE,delta=1
   148                           	psect	text125,global,reloc=2,class=CODE,delta=1
   149                           	psect	text126,global,reloc=2,class=CODE,delta=1
   150                           	psect	text127,global,reloc=2,class=CODE,delta=1
   151                           	psect	text128,global,reloc=2,class=CODE,delta=1
   152                           	psect	text129,global,reloc=2,class=CODE,delta=1
   153                           	psect	text130,global,reloc=2,class=CODE,delta=1
   154                           	psect	text131,global,reloc=2,class=CODE,delta=1
   155                           	psect	text132,global,reloc=2,class=CODE,delta=1
   156                           	psect	text133,global,reloc=2,class=CODE,delta=1
   157                           	psect	text134,global,reloc=2,class=CODE,delta=1
   158                           	psect	text135,global,reloc=2,class=CODE,delta=1
   159                           	psect	text136,global,reloc=2,class=CODE,delta=1
   160                           	psect	text137,global,reloc=2,class=CODE,delta=1
   161                           	psect	text138,global,reloc=2,class=CODE,delta=1
   162                           	psect	text139,global,reloc=2,class=CODE,delta=1
   163                           	psect	text140,global,reloc=2,class=CODE,delta=1
   164                           	psect	text141,global,reloc=2,class=CODE,delta=1
   165                           	psect	text142,global,reloc=2,class=CODE,delta=1,group=1
   166                           	psect	text143,global,reloc=2,class=CODE,delta=1,group=1
   167                           	psect	text144,global,reloc=2,class=CODE,delta=1
   168                           	psect	text145,global,reloc=2,class=CODE,delta=1
   169                           	psect	text146,global,reloc=2,class=CODE,delta=1
   170                           	psect	text147,global,reloc=2,class=CODE,delta=1
   171                           	psect	text148,global,reloc=2,class=CODE,delta=1
   172                           	psect	text149,global,reloc=2,class=CODE,delta=1
   173                           	psect	text150,global,reloc=2,class=CODE,delta=1
   174                           	psect	text151,global,reloc=2,class=CODE,delta=1
   175                           	psect	text152,global,reloc=2,class=CODE,delta=1,inline
   176                           	psect	text153,global,reloc=2,class=CODE,delta=1
   177                           	psect	text154,global,reloc=2,class=CODE,delta=1
   178                           	psect	text155,global,reloc=2,class=CODE,delta=1
   179                           	psect	text156,global,reloc=2,class=CODE,delta=1
   180                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   181                           	psect	text158,global,reloc=2,class=CODE,delta=1
   182                           	psect	text159,global,reloc=2,class=CODE,delta=1
   183                           	psect	text160,global,reloc=2,class=CODE,delta=1
   184                           	psect	text161,global,reloc=2,class=CODE,delta=1
   185                           	psect	text162,global,reloc=2,class=CODE,delta=1
   186                           	psect	text163,global,reloc=2,class=CODE,delta=1
   187                           	psect	text164,global,reloc=2,class=CODE,delta=1
   188                           	psect	text165,global,reloc=2,class=CODE,delta=1,inline
   189                           	psect	text166,global,reloc=2,class=CODE,delta=1
   190                           	psect	text167,global,reloc=2,class=CODE,delta=1
   191                           	psect	text168,global,reloc=2,class=CODE,delta=1
   192                           	psect	text169,global,reloc=2,class=CODE,delta=1
   193                           	psect	text170,global,reloc=2,class=CODE,delta=1
   194                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   195                           	psect	text171,global,reloc=2,class=CODE,delta=1
   196                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   197                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   198  0000                     
   199                           ; Version 1.43
   200                           ; Generated 25/07/2017 GMT
   201                           ; 
   202                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   203                           ; All rights reserved.
   204                           ; 
   205                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   206                           ; 
   207                           ; Redistribution and use in source and binary forms, with or without modification, are
   208                           ; permitted provided that the following conditions are met:
   209                           ; 
   210                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   211                           ;        conditions and the following disclaimer.
   212                           ; 
   213                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   214                           ;        of conditions and the following disclaimer in the documentation and/or other
   215                           ;        materials provided with the distribution.
   216                           ; 
   217                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   218                           ;        software without specific prior written permission.
   219                           ; 
   220                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   221                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   222                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   223                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   224                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   225                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   226                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   227                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   228                           ; 
   229                           ; 
   230                           ; Code-generator required, PIC18F67J50 Definitions
   231                           ; 
   232                           ; SFR Addresses
   233  0000                     
   234                           	psect	idataCOMRAM
   235  0165F8                     __pidataCOMRAM:
   236                           	opt stack 0
   237                           
   238                           ;initializer for _gCursor
   239  0165F8  0006               	dw	6
   240  0165FA  0006               	dw	6
   241                           
   242                           ;initializer for _Bus_State
   243  0165FC  01                 	db	1
   244                           
   245                           ;initializer for _A
   246  0165FD  41                 	db	65
   247                           
   248                           ;initializer for _a
   249  0165FE  61                 	db	97
   250                           
   251                           ;initializer for _zero
   252  0165FF  30                 	db	48
   253                           
   254                           ;initializer for _l
   255  016600  80                 	db	128
   256                           
   257                           ;initializer for _w
   258  016601  80                 	db	128
   259                           
   260                           	psect	idataBANK0
   261  01662E                     __pidataBANK0:
   262                           	opt stack 0
   263                           
   264                           ;initializer for _TimerX
   265  01662E  0008               	dw	8
   266                           
   267                           ;initializer for _MinDist
   268  016630  03E8               	dw	1000
   269                           
   270                           ;initializer for _gForecolour
   271  016632  FFFF               	dw	65535
   272                           
   273                           ;initializer for _change
   274  016634  01                 	db	1
   275                           
   276                           	psect	idataBANK3
   277  0165C8                     __pidataBANK3:
   278                           	opt stack 0
   279                           
   280                           ;initializer for Console_Render@F6956
   281  0165C8  0006               	dw	6
   282  0165CA  0006               	dw	6
   283                           
   284                           ;initializer for _gLineSize
   285  0165CC  0080               	dw	128
   286  0165CE  0007               	dw	7
   287                           
   288                           ;initializer for _gCharSize
   289  0165D0  0005               	dw	5
   290  0165D2  0007               	dw	7
   291                           
   292                           	psect	mediumconst
   293  00FC98                     __pmediumconst:
   294                           	opt stack 0
   295  00FC98  00                 	db	0
   296  00FC99                     _InitList:
   297                           	opt stack 0
   298  00FC99  1100               	dw	4352
   299  00FC9B  0080               	dw	128
   300  00FC9D  012C               	dw	300
   301  00FC9F  B100               	dw	45312
   302  00FCA1  0002               	dw	2
   303  00FCA3  0035               	dw	53
   304  00FCA5  0036               	dw	54
   305  00FCA7  B200               	dw	45568
   306  00FCA9  0002               	dw	2
   307  00FCAB  0035               	dw	53
   308  00FCAD  0036               	dw	54
   309  00FCAF  B300               	dw	45824
   310  00FCB1  0002               	dw	2
   311  00FCB3  0035               	dw	53
   312  00FCB5  0036               	dw	54
   313  00FCB7  0002               	dw	2
   314  00FCB9  0035               	dw	53
   315  00FCBB  0036               	dw	54
   316  00FCBD  B400               	dw	46080
   317  00FCBF  0000               	dw	0
   318  00FCC1  C000               	dw	49152
   319  00FCC3  00A2               	dw	162
   320  00FCC5  0002               	dw	2
   321  00FCC7  0084               	dw	132
   322  00FCC9  C100               	dw	49408
   323  00FCCB  00C5               	dw	197
   324  00FCCD  C200               	dw	49664
   325  00FCCF  000D               	dw	13
   326  00FCD1  0000               	dw	0
   327  00FCD3  C300               	dw	49920
   328  00FCD5  008D               	dw	141
   329  00FCD7  002A               	dw	42
   330  00FCD9  C400               	dw	50176
   331  00FCDB  008D               	dw	141
   332  00FCDD  00EE               	dw	238
   333  00FCDF  C500               	dw	50432
   334  00FCE1  000A               	dw	10
   335  00FCE3  3600               	dw	13824
   336  00FCE5  00C8               	dw	200
   337  00FCE7  E000               	dw	57344
   338  00FCE9  0012               	dw	18
   339  00FCEB  001C               	dw	28
   340  00FCED  0010               	dw	16
   341  00FCEF  0018               	dw	24
   342  00FCF1  0033               	dw	51
   343  00FCF3  002C               	dw	44
   344  00FCF5  0025               	dw	37
   345  00FCF7  0028               	dw	40
   346  00FCF9  0028               	dw	40
   347  00FCFB  0027               	dw	39
   348  00FCFD  002F               	dw	47
   349  00FCFF  003C               	dw	60
   350  00FD01  0000               	dw	0
   351  00FD03  0003               	dw	3
   352  00FD05  0003               	dw	3
   353  00FD07  0010               	dw	16
   354  00FD09  0080               	dw	128
   355  00FD0B  0078               	dw	120
   356  00FD0D  E100               	dw	57600
   357  00FD0F  0012               	dw	18
   358  00FD11  001C               	dw	28
   359  00FD13  0010               	dw	16
   360  00FD15  0018               	dw	24
   361  00FD17  002D               	dw	45
   362  00FD19  0028               	dw	40
   363  00FD1B  0023               	dw	35
   364  00FD1D  0028               	dw	40
   365  00FD1F  0028               	dw	40
   366  00FD21  0026               	dw	38
   367  00FD23  002F               	dw	47
   368  00FD25  003B               	dw	59
   369  00FD27  0000               	dw	0
   370  00FD29  0003               	dw	3
   371  00FD2B  0003               	dw	3
   372  00FD2D  0010               	dw	16
   373  00FD2F  3A00               	dw	14848
   374  00FD31  0005               	dw	5
   375  00FD33  2A00               	dw	10752
   376  00FD35  0000               	dw	0
   377  00FD37  0002               	dw	2
   378  00FD39  0000               	dw	0
   379  00FD3B  0081               	dw	129
   380  00FD3D  2B00               	dw	11008
   381  00FD3F  0000               	dw	0
   382  00FD41  0003               	dw	3
   383  00FD43  0000               	dw	0
   384  00FD45  00A2               	dw	162
   385  00FD47  2900               	dw	10496
   386  00FD49  2C00               	dw	11264
   387  00FD4B                     __end_of_InitList:
   388                           	opt stack 0
   389  00FD4B                     Timer0_Init@PRESCALE:
   390                           	opt stack 0
   391  00FD4B  0002               	dw	2
   392  00FD4D  0004               	dw	4
   393  00FD4F  0008               	dw	8
   394  00FD51  0010               	dw	16
   395  00FD53  0020               	dw	32
   396  00FD55  0040               	dw	64
   397  00FD57  0080               	dw	128
   398  00FD59  0100               	dw	256
   399  00FD5B                     __end_ofTimer0_Init@PRESCALE:
   400                           	opt stack 0
   401  00FD5B                     PortProperty_Valid@F6830:
   402                           	opt stack 0
   403  00FD5B  00                 	db	0
   404  00FD5C  01                 	db	1
   405  00FD5D  02                 	db	2
   406  00FD5E  00                 	db	0
   407  00FD5F  01                 	db	1
   408  00FD60  00                 	db	0
   409  00FD61  01                 	db	1
   410  00FD62  00                 	db	0
   411  00FD63  02                 	db	2
   412  00FD64  02                 	db	2
   413  00FD65  00                 	db	0
   414  00FD66  00                 	db	0
   415  00FD67  03                 	db	3
   416  00FD68  03                 	db	3
   417  00FD69  03                 	db	3
   418  00FD6A  00                 	db	0
   419  00FD6B                     __end_ofPortProperty_Valid@F6830:
   420                           	opt stack 0
   421  00FD6B                     _dpowers:
   422                           	opt stack 0
   423  00FD6B  0001               	dw	1
   424  00FD6D  000A               	dw	10
   425  00FD6F  0064               	dw	100
   426  00FD71  03E8               	dw	1000
   427  00FD73  2710               	dw	10000
   428  00FD75                     __end_of_dpowers:
   429                           	opt stack 0
   430  00FD75                     _MASKS:
   431                           	opt stack 0
   432  00FD75  00                 	db	0
   433  00FD76  01                 	db	1
   434  00FD77  03                 	db	3
   435  00FD78  07                 	db	7
   436  00FD79  0F                 	db	15
   437  00FD7A  1F                 	db	31
   438  00FD7B  3F                 	db	63
   439  00FD7C  7F                 	db	127
   440  00FD7D  FF                 	db	255
   441  00FD7E                     __end_of_MASKS:
   442                           	opt stack 0
   443  00FD7E                     HMI_SetButton@F7213:
   444                           	opt stack 0
   445  00FD7E  00                 	db	0
   446  00FD7F  02                 	db	2
   447  00FD80  01                 	db	1
   448  00FD81  03                 	db	3
   449  00FD82                     __end_ofHMI_SetButton@F7213:
   450                           	opt stack 0
   451  00FD82                     Timer2_Init@PRESCALE:
   452                           	opt stack 0
   453  00FD82  01                 	db	1
   454  00FD83  04                 	db	4
   455  00FD84  10                 	db	16
   456  00FD85                     __end_ofTimer2_Init@PRESCALE:
   457                           	opt stack 0
   458  00FD85                     _Font5x7:
   459                           	opt stack 0
   460  00FD85  00                 	db	0
   461  00FD86  00                 	db	0
   462  00FD87  00                 	db	0
   463  00FD88  00                 	db	0
   464  00FD89  00                 	db	0
   465  00FD8A  00                 	db	0
   466  00FD8B  00                 	db	0
   467  00FD8C  5F                 	db	95
   468  00FD8D  00                 	db	0
   469  00FD8E  00                 	db	0
   470  00FD8F  00                 	db	0
   471  00FD90  07                 	db	7
   472  00FD91  00                 	db	0
   473  00FD92  07                 	db	7
   474  00FD93  00                 	db	0
   475  00FD94  14                 	db	20
   476  00FD95  7F                 	db	127
   477  00FD96  14                 	db	20
   478  00FD97  7F                 	db	127
   479  00FD98  14                 	db	20
   480  00FD99  24                 	db	36
   481  00FD9A  2A                 	db	42
   482  00FD9B  7F                 	db	127
   483  00FD9C  2A                 	db	42
   484  00FD9D  12                 	db	18
   485  00FD9E  23                 	db	35
   486  00FD9F  13                 	db	19
   487  00FDA0  08                 	db	8
   488  00FDA1  64                 	db	100
   489  00FDA2  62                 	db	98
   490  00FDA3  36                 	db	54
   491  00FDA4  49                 	db	73
   492  00FDA5  55                 	db	85
   493  00FDA6  22                 	db	34
   494  00FDA7  50                 	db	80
   495  00FDA8  00                 	db	0
   496  00FDA9  05                 	db	5
   497  00FDAA  03                 	db	3
   498  00FDAB  00                 	db	0
   499  00FDAC  00                 	db	0
   500  00FDAD  00                 	db	0
   501  00FDAE  1C                 	db	28
   502  00FDAF  22                 	db	34
   503  00FDB0  41                 	db	65
   504  00FDB1  00                 	db	0
   505  00FDB2  00                 	db	0
   506  00FDB3  41                 	db	65
   507  00FDB4  22                 	db	34
   508  00FDB5  1C                 	db	28
   509  00FDB6  00                 	db	0
   510  00FDB7  08                 	db	8
   511  00FDB8  2A                 	db	42
   512  00FDB9  1C                 	db	28
   513  00FDBA  2A                 	db	42
   514  00FDBB  08                 	db	8
   515  00FDBC  08                 	db	8
   516  00FDBD  08                 	db	8
   517  00FDBE  3E                 	db	62
   518  00FDBF  08                 	db	8
   519  00FDC0  08                 	db	8
   520  00FDC1  00                 	db	0
   521  00FDC2  50                 	db	80
   522  00FDC3  30                 	db	48
   523  00FDC4  00                 	db	0
   524  00FDC5  00                 	db	0
   525  00FDC6  08                 	db	8
   526  00FDC7  08                 	db	8
   527  00FDC8  08                 	db	8
   528  00FDC9  08                 	db	8
   529  00FDCA  08                 	db	8
   530  00FDCB  00                 	db	0
   531  00FDCC  60                 	db	96
   532  00FDCD  60                 	db	96
   533  00FDCE  00                 	db	0
   534  00FDCF  00                 	db	0
   535  00FDD0  20                 	db	32
   536  00FDD1  10                 	db	16
   537  00FDD2  08                 	db	8
   538  00FDD3  04                 	db	4
   539  00FDD4  02                 	db	2
   540  00FDD5  3E                 	db	62
   541  00FDD6  51                 	db	81
   542  00FDD7  49                 	db	73
   543  00FDD8  45                 	db	69
   544  00FDD9  3E                 	db	62
   545  00FDDA  00                 	db	0
   546  00FDDB  42                 	db	66
   547  00FDDC  7F                 	db	127
   548  00FDDD  40                 	db	64
   549  00FDDE  00                 	db	0
   550  00FDDF  42                 	db	66
   551  00FDE0  61                 	db	97
   552  00FDE1  51                 	db	81
   553  00FDE2  49                 	db	73
   554  00FDE3  46                 	db	70
   555  00FDE4  21                 	db	33
   556  00FDE5  41                 	db	65
   557  00FDE6  45                 	db	69
   558  00FDE7  4B                 	db	75
   559  00FDE8  31                 	db	49
   560  00FDE9  18                 	db	24
   561  00FDEA  14                 	db	20
   562  00FDEB  12                 	db	18
   563  00FDEC  7F                 	db	127
   564  00FDED  10                 	db	16
   565  00FDEE  27                 	db	39
   566  00FDEF  45                 	db	69
   567  00FDF0  45                 	db	69
   568  00FDF1  45                 	db	69
   569  00FDF2  39                 	db	57
   570  00FDF3  3C                 	db	60
   571  00FDF4  4A                 	db	74
   572  00FDF5  49                 	db	73
   573  00FDF6  49                 	db	73
   574  00FDF7  30                 	db	48
   575  00FDF8  01                 	db	1
   576  00FDF9  71                 	db	113
   577  00FDFA  09                 	db	9
   578  00FDFB  05                 	db	5
   579  00FDFC  03                 	db	3
   580  00FDFD  36                 	db	54
   581  00FDFE  49                 	db	73
   582  00FDFF  49                 	db	73
   583  00FE00  49                 	db	73
   584  00FE01  36                 	db	54
   585  00FE02  06                 	db	6
   586  00FE03  49                 	db	73
   587  00FE04  49                 	db	73
   588  00FE05  29                 	db	41
   589  00FE06  1E                 	db	30
   590  00FE07  00                 	db	0
   591  00FE08  36                 	db	54
   592  00FE09  36                 	db	54
   593  00FE0A  00                 	db	0
   594  00FE0B  00                 	db	0
   595  00FE0C  00                 	db	0
   596  00FE0D  56                 	db	86
   597  00FE0E  36                 	db	54
   598  00FE0F  00                 	db	0
   599  00FE10  00                 	db	0
   600  00FE11  00                 	db	0
   601  00FE12  08                 	db	8
   602  00FE13  14                 	db	20
   603  00FE14  22                 	db	34
   604  00FE15  41                 	db	65
   605  00FE16  14                 	db	20
   606  00FE17  14                 	db	20
   607  00FE18  14                 	db	20
   608  00FE19  14                 	db	20
   609  00FE1A  14                 	db	20
   610  00FE1B  41                 	db	65
   611  00FE1C  22                 	db	34
   612  00FE1D  14                 	db	20
   613  00FE1E  08                 	db	8
   614  00FE1F  00                 	db	0
   615  00FE20  02                 	db	2
   616  00FE21  01                 	db	1
   617  00FE22  51                 	db	81
   618  00FE23  09                 	db	9
   619  00FE24  06                 	db	6
   620  00FE25  32                 	db	50
   621  00FE26  49                 	db	73
   622  00FE27  79                 	db	121
   623  00FE28  41                 	db	65
   624  00FE29  3E                 	db	62
   625  00FE2A  7E                 	db	126
   626  00FE2B  11                 	db	17
   627  00FE2C  11                 	db	17
   628  00FE2D  11                 	db	17
   629  00FE2E  7E                 	db	126
   630  00FE2F  7F                 	db	127
   631  00FE30  49                 	db	73
   632  00FE31  49                 	db	73
   633  00FE32  49                 	db	73
   634  00FE33  36                 	db	54
   635  00FE34  3E                 	db	62
   636  00FE35  41                 	db	65
   637  00FE36  41                 	db	65
   638  00FE37  41                 	db	65
   639  00FE38  22                 	db	34
   640  00FE39  7F                 	db	127
   641  00FE3A  41                 	db	65
   642  00FE3B  41                 	db	65
   643  00FE3C  22                 	db	34
   644  00FE3D  1C                 	db	28
   645  00FE3E  7F                 	db	127
   646  00FE3F  49                 	db	73
   647  00FE40  49                 	db	73
   648  00FE41  49                 	db	73
   649  00FE42  41                 	db	65
   650  00FE43  7F                 	db	127
   651  00FE44  09                 	db	9
   652  00FE45  09                 	db	9
   653  00FE46  01                 	db	1
   654  00FE47  01                 	db	1
   655  00FE48  3E                 	db	62
   656  00FE49  41                 	db	65
   657  00FE4A  41                 	db	65
   658  00FE4B  51                 	db	81
   659  00FE4C  32                 	db	50
   660  00FE4D  7F                 	db	127
   661  00FE4E  08                 	db	8
   662  00FE4F  08                 	db	8
   663  00FE50  08                 	db	8
   664  00FE51  7F                 	db	127
   665  00FE52  00                 	db	0
   666  00FE53  41                 	db	65
   667  00FE54  7F                 	db	127
   668  00FE55  41                 	db	65
   669  00FE56  00                 	db	0
   670  00FE57  20                 	db	32
   671  00FE58  40                 	db	64
   672  00FE59  41                 	db	65
   673  00FE5A  3F                 	db	63
   674  00FE5B  01                 	db	1
   675  00FE5C  7F                 	db	127
   676  00FE5D  08                 	db	8
   677  00FE5E  14                 	db	20
   678  00FE5F  22                 	db	34
   679  00FE60  41                 	db	65
   680  00FE61  7F                 	db	127
   681  00FE62  40                 	db	64
   682  00FE63  40                 	db	64
   683  00FE64  40                 	db	64
   684  00FE65  40                 	db	64
   685  00FE66  7F                 	db	127
   686  00FE67  02                 	db	2
   687  00FE68  04                 	db	4
   688  00FE69  02                 	db	2
   689  00FE6A  7F                 	db	127
   690  00FE6B  7F                 	db	127
   691  00FE6C  04                 	db	4
   692  00FE6D  08                 	db	8
   693  00FE6E  10                 	db	16
   694  00FE6F  7F                 	db	127
   695  00FE70  3E                 	db	62
   696  00FE71  41                 	db	65
   697  00FE72  41                 	db	65
   698  00FE73  41                 	db	65
   699  00FE74  3E                 	db	62
   700  00FE75  7F                 	db	127
   701  00FE76  09                 	db	9
   702  00FE77  09                 	db	9
   703  00FE78  09                 	db	9
   704  00FE79  06                 	db	6
   705  00FE7A  3E                 	db	62
   706  00FE7B  41                 	db	65
   707  00FE7C  51                 	db	81
   708  00FE7D  21                 	db	33
   709  00FE7E  5E                 	db	94
   710  00FE7F  7F                 	db	127
   711  00FE80  09                 	db	9
   712  00FE81  19                 	db	25
   713  00FE82  29                 	db	41
   714  00FE83  46                 	db	70
   715  00FE84  46                 	db	70
   716  00FE85  49                 	db	73
   717  00FE86  49                 	db	73
   718  00FE87  49                 	db	73
   719  00FE88  31                 	db	49
   720  00FE89  01                 	db	1
   721  00FE8A  01                 	db	1
   722  00FE8B  7F                 	db	127
   723  00FE8C  01                 	db	1
   724  00FE8D  01                 	db	1
   725  00FE8E  3F                 	db	63
   726  00FE8F  40                 	db	64
   727  00FE90  40                 	db	64
   728  00FE91  40                 	db	64
   729  00FE92  3F                 	db	63
   730  00FE93  1F                 	db	31
   731  00FE94  20                 	db	32
   732  00FE95  40                 	db	64
   733  00FE96  20                 	db	32
   734  00FE97  1F                 	db	31
   735  00FE98  7F                 	db	127
   736  00FE99  20                 	db	32
   737  00FE9A  18                 	db	24
   738  00FE9B  20                 	db	32
   739  00FE9C  7F                 	db	127
   740  00FE9D  63                 	db	99
   741  00FE9E  14                 	db	20
   742  00FE9F  08                 	db	8
   743  00FEA0  14                 	db	20
   744  00FEA1  63                 	db	99
   745  00FEA2  03                 	db	3
   746  00FEA3  04                 	db	4
   747  00FEA4  78                 	db	120
   748  00FEA5  04                 	db	4
   749  00FEA6  03                 	db	3
   750  00FEA7  61                 	db	97
   751  00FEA8  51                 	db	81
   752  00FEA9  49                 	db	73
   753  00FEAA  45                 	db	69
   754  00FEAB  43                 	db	67
   755  00FEAC  00                 	db	0
   756  00FEAD  00                 	db	0
   757  00FEAE  7F                 	db	127
   758  00FEAF  41                 	db	65
   759  00FEB0  41                 	db	65
   760  00FEB1  02                 	db	2
   761  00FEB2  04                 	db	4
   762  00FEB3  08                 	db	8
   763  00FEB4  10                 	db	16
   764  00FEB5  20                 	db	32
   765  00FEB6  41                 	db	65
   766  00FEB7  41                 	db	65
   767  00FEB8  7F                 	db	127
   768  00FEB9  00                 	db	0
   769  00FEBA  00                 	db	0
   770  00FEBB  04                 	db	4
   771  00FEBC  02                 	db	2
   772  00FEBD  01                 	db	1
   773  00FEBE  02                 	db	2
   774  00FEBF  04                 	db	4
   775  00FEC0  40                 	db	64
   776  00FEC1  40                 	db	64
   777  00FEC2  40                 	db	64
   778  00FEC3  40                 	db	64
   779  00FEC4  40                 	db	64
   780  00FEC5  00                 	db	0
   781  00FEC6  01                 	db	1
   782  00FEC7  02                 	db	2
   783  00FEC8  04                 	db	4
   784  00FEC9  00                 	db	0
   785  00FECA  20                 	db	32
   786  00FECB  54                 	db	84
   787  00FECC  54                 	db	84
   788  00FECD  54                 	db	84
   789  00FECE  78                 	db	120
   790  00FECF  7F                 	db	127
   791  00FED0  48                 	db	72
   792  00FED1  44                 	db	68
   793  00FED2  44                 	db	68
   794  00FED3  38                 	db	56
   795  00FED4  38                 	db	56
   796  00FED5  44                 	db	68
   797  00FED6  44                 	db	68
   798  00FED7  44                 	db	68
   799  00FED8  20                 	db	32
   800  00FED9  38                 	db	56
   801  00FEDA  44                 	db	68
   802  00FEDB  44                 	db	68
   803  00FEDC  48                 	db	72
   804  00FEDD  7F                 	db	127
   805  00FEDE  38                 	db	56
   806  00FEDF  54                 	db	84
   807  00FEE0  54                 	db	84
   808  00FEE1  54                 	db	84
   809  00FEE2  18                 	db	24
   810  00FEE3  08                 	db	8
   811  00FEE4  7E                 	db	126
   812  00FEE5  09                 	db	9
   813  00FEE6  01                 	db	1
   814  00FEE7  02                 	db	2
   815  00FEE8  08                 	db	8
   816  00FEE9  14                 	db	20
   817  00FEEA  54                 	db	84
   818  00FEEB  54                 	db	84
   819  00FEEC  3C                 	db	60
   820  00FEED  7F                 	db	127
   821  00FEEE  08                 	db	8
   822  00FEEF  04                 	db	4
   823  00FEF0  04                 	db	4
   824  00FEF1  78                 	db	120
   825  00FEF2  00                 	db	0
   826  00FEF3  44                 	db	68
   827  00FEF4  7D                 	db	125
   828  00FEF5  40                 	db	64
   829  00FEF6  00                 	db	0
   830  00FEF7  20                 	db	32
   831  00FEF8  40                 	db	64
   832  00FEF9  44                 	db	68
   833  00FEFA  3D                 	db	61
   834  00FEFB  00                 	db	0
   835  00FEFC  00                 	db	0
   836  00FEFD  7F                 	db	127
   837  00FEFE  10                 	db	16
   838  00FEFF  28                 	db	40
   839  00FF00  44                 	db	68
   840  00FF01  00                 	db	0
   841  00FF02  41                 	db	65
   842  00FF03  7F                 	db	127
   843  00FF04  40                 	db	64
   844  00FF05  00                 	db	0
   845  00FF06  7C                 	db	124
   846  00FF07  04                 	db	4
   847  00FF08  18                 	db	24
   848  00FF09  04                 	db	4
   849  00FF0A  78                 	db	120
   850  00FF0B  7C                 	db	124
   851  00FF0C  08                 	db	8
   852  00FF0D  04                 	db	4
   853  00FF0E  04                 	db	4
   854  00FF0F  78                 	db	120
   855  00FF10  38                 	db	56
   856  00FF11  44                 	db	68
   857  00FF12  44                 	db	68
   858  00FF13  44                 	db	68
   859  00FF14  38                 	db	56
   860  00FF15  7C                 	db	124
   861  00FF16  14                 	db	20
   862  00FF17  14                 	db	20
   863  00FF18  14                 	db	20
   864  00FF19  08                 	db	8
   865  00FF1A  08                 	db	8
   866  00FF1B  14                 	db	20
   867  00FF1C  14                 	db	20
   868  00FF1D  18                 	db	24
   869  00FF1E  7C                 	db	124
   870  00FF1F  7C                 	db	124
   871  00FF20  08                 	db	8
   872  00FF21  04                 	db	4
   873  00FF22  04                 	db	4
   874  00FF23  08                 	db	8
   875  00FF24  48                 	db	72
   876  00FF25  54                 	db	84
   877  00FF26  54                 	db	84
   878  00FF27  54                 	db	84
   879  00FF28  20                 	db	32
   880  00FF29  04                 	db	4
   881  00FF2A  3F                 	db	63
   882  00FF2B  44                 	db	68
   883  00FF2C  40                 	db	64
   884  00FF2D  20                 	db	32
   885  00FF2E  3C                 	db	60
   886  00FF2F  40                 	db	64
   887  00FF30  40                 	db	64
   888  00FF31  20                 	db	32
   889  00FF32  7C                 	db	124
   890  00FF33  1C                 	db	28
   891  00FF34  20                 	db	32
   892  00FF35  40                 	db	64
   893  00FF36  20                 	db	32
   894  00FF37  1C                 	db	28
   895  00FF38  3C                 	db	60
   896  00FF39  40                 	db	64
   897  00FF3A  30                 	db	48
   898  00FF3B  40                 	db	64
   899  00FF3C  3C                 	db	60
   900  00FF3D  44                 	db	68
   901  00FF3E  28                 	db	40
   902  00FF3F  10                 	db	16
   903  00FF40  28                 	db	40
   904  00FF41  44                 	db	68
   905  00FF42  0C                 	db	12
   906  00FF43  50                 	db	80
   907  00FF44  50                 	db	80
   908  00FF45  50                 	db	80
   909  00FF46  3C                 	db	60
   910  00FF47  44                 	db	68
   911  00FF48  64                 	db	100
   912  00FF49  54                 	db	84
   913  00FF4A  4C                 	db	76
   914  00FF4B  44                 	db	68
   915  00FF4C  00                 	db	0
   916  00FF4D  08                 	db	8
   917  00FF4E  36                 	db	54
   918  00FF4F  41                 	db	65
   919  00FF50  00                 	db	0
   920  00FF51  00                 	db	0
   921  00FF52  00                 	db	0
   922  00FF53  7F                 	db	127
   923  00FF54  00                 	db	0
   924  00FF55  00                 	db	0
   925  00FF56  00                 	db	0
   926  00FF57  41                 	db	65
   927  00FF58  36                 	db	54
   928  00FF59  08                 	db	8
   929  00FF5A  00                 	db	0
   930  00FF5B  08                 	db	8
   931  00FF5C  08                 	db	8
   932  00FF5D  2A                 	db	42
   933  00FF5E  1C                 	db	28
   934  00FF5F  08                 	db	8
   935  00FF60  08                 	db	8
   936  00FF61  1C                 	db	28
   937  00FF62  2A                 	db	42
   938  00FF63  08                 	db	8
   939  00FF64  08                 	db	8
   940  00FF65                     __end_of_Font5x7:
   941                           	opt stack 0
   942  00FF65                     _PortG_Property:
   943                           	opt stack 0
   944  00FF65  FC00               	dw	64512
   945  00FF67                     __end_of_PortG_Property:
   946                           	opt stack 0
   947  00FF67                     _PortF_Property:
   948                           	opt stack 0
   949  00FF67  0FFF               	dw	4095
   950  00FF69                     __end_of_PortF_Property:
   951                           	opt stack 0
   952  00FF69                     _PortE_Property:
   953                           	opt stack 0
   954  00FF69  0000               	dw	0
   955  00FF6B                     __end_of_PortE_Property:
   956                           	opt stack 0
   957  00FF6B                     _PortD_Property:
   958                           	opt stack 0
   959  00FF6B  FFFF               	dw	65535
   960  00FF6D                     __end_of_PortD_Property:
   961                           	opt stack 0
   962  00FF6D                     _PortC_Property:
   963                           	opt stack 0
   964  00FF6D  FFF0               	dw	65520
   965  00FF6F                     __end_of_PortC_Property:
   966                           	opt stack 0
   967  00FF6F                     _PortB_Property:
   968                           	opt stack 0
   969  00FF6F  FF00               	dw	65280
   970  00FF71                     __end_of_PortB_Property:
   971                           	opt stack 0
   972  00FF71                     _PortA_Property:
   973                           	opt stack 0
   974  00FF71  00FF               	dw	255
   975  00FF73                     __end_of_PortA_Property:
   976                           	opt stack 0
   977  0000                     _TMR0	set	4054
   978  0000                     _RCREG1	set	4015
   979  0000                     _TXREG1	set	4014
   980  0000                     _SPBRG1	set	4016
   981  0000                     _TXSTA1bits	set	4013
   982  0000                     _BAUDCON1bits	set	3966
   983  0000                     _RCSTA1	set	4012
   984  0000                     _TXSTA1	set	4013
   985  0000                     _TRISCbits	set	3988
   986  0000                     _PR2	set	4043
   987  0000                     _T2CONbits	set	4042
   988  0000                     _T0CONbits	set	4053
   989  0000                     _RCONbits	set	4048
   990  0000                     _OSCTUNEbits	set	3995
   991  0000                     _PIR3	set	4004
   992  0000                     _PIR2	set	4001
   993  0000                     _PIR1	set	3998
   994  0000                     _INTCONbits	set	4082
   995  0000                     _SSP2CON2bits	set	3947
   996  0000                     _SSP1CON2bits	set	4037
   997  0000                     _SSP1ADD	set	4040
   998  0000                     _ANCON0	set	4033
   999  0000                     _ADRESL	set	4035
  1000  0000                     _ADRESH	set	4036
  1001  0000                     _ADCON1bits	set	4033
  1002  0000                     _ADCON0bits	set	4034
  1003  0000                     _SSP2CON1bits	set	3948
  1004  0000                     _SSP1CON1bits	set	4038
  1005  0000                     _SSP2STATbits	set	3949
  1006  0000                     _SSP1STATbits	set	4039
  1007  0000                     _PIE3bits	set	4003
  1008  0000                     _PIE1bits	set	3997
  1009  0000                     _PIR3bits	set	4004
  1010  0000                     _PIR1bits	set	3998
  1011  0000                     _IPR3bits	set	4005
  1012  0000                     _IPR1bits	set	3999
  1013  0000                     _PORTFbits	set	3973
  1014  0000                     _SSP2CON2	set	3947
  1015  0000                     _SSP1CON2	set	4037
  1016  0000                     _SSP2BUF	set	3951
  1017  0000                     _SSP2CON1	set	3948
  1018  0000                     _SSP2STAT	set	3949
  1019  0000                     _SSP1BUF	set	4041
  1020  0000                     _SSP1CON1	set	4038
  1021  0000                     _SSP1STAT	set	4039
  1022  0000                     _LATG	set	3983
  1023  0000                     _LATF	set	3982
  1024  0000                     _LATE	set	3981
  1025  0000                     _LATD	set	3980
  1026  0000                     _LATC	set	3979
  1027  0000                     _LATB	set	3978
  1028  0000                     _LATA	set	3977
  1029  0000                     _TRISG	set	3992
  1030  0000                     _TRISF	set	3991
  1031  0000                     _TRISE	set	3990
  1032  0000                     _TRISD	set	3989
  1033  0000                     _TRISC	set	3988
  1034  0000                     _TRISB	set	3987
  1035  0000                     _TRISA	set	3986
  1036  0000                     _PORTG	set	3974
  1037  0000                     _PORTF	set	3973
  1038  0000                     _PORTE	set	3972
  1039  0000                     _PORTD	set	3971
  1040  0000                     _PORTC	set	3970
  1041  0000                     _PORTB	set	3969
  1042  0000                     _PORTA	set	3968
  1043  00FF73                     STR_2:
  1044  00FF73  54                 	db	84	;'T'
  1045  00FF74  6F                 	db	111	;'o'
  1046  00FF75  74                 	db	116	;'t'
  1047  00FF76  61                 	db	97	;'a'
  1048  00FF77  6C                 	db	108	;'l'
  1049  00FF78  20                 	db	32
  1050  00FF79  44                 	db	68	;'D'
  1051  00FF7A  69                 	db	105	;'i'
  1052  00FF7B  73                 	db	115	;'s'
  1053  00FF7C  74                 	db	116	;'t'
  1054  00FF7D  61                 	db	97	;'a'
  1055  00FF7E  6E                 	db	110	;'n'
  1056  00FF7F  63                 	db	99	;'c'
  1057  00FF80  65                 	db	101	;'e'
  1058  00FF81  3A                 	db	58	;':'
  1059  00FF82  25                 	db	37
  1060  00FF83  75                 	db	117	;'u'
  1061  00FF84  0A                 	db	10
  1062  00FF85  4C                 	db	76	;'L'
  1063  00FF86  65                 	db	101	;'e'
  1064  00FF87  66                 	db	102	;'f'
  1065  00FF88  74                 	db	116	;'t'
  1066  00FF89  20                 	db	32
  1067  00FF8A  42                 	db	66	;'B'
  1068  00FF8B  75                 	db	117	;'u'
  1069  00FF8C  6D                 	db	109	;'m'
  1070  00FF8D  70                 	db	112	;'p'
  1071  00FF8E  3A                 	db	58	;':'
  1072  00FF8F  25                 	db	37
  1073  00FF90  75                 	db	117	;'u'
  1074  00FF91  0A                 	db	10
  1075  00FF92  52                 	db	82	;'R'
  1076  00FF93  69                 	db	105	;'i'
  1077  00FF94  67                 	db	103	;'g'
  1078  00FF95  68                 	db	104	;'h'
  1079  00FF96  74                 	db	116	;'t'
  1080  00FF97  20                 	db	32
  1081  00FF98  42                 	db	66	;'B'
  1082  00FF99  75                 	db	117	;'u'
  1083  00FF9A  6D                 	db	109	;'m'
  1084  00FF9B  70                 	db	112	;'p'
  1085  00FF9C  3A                 	db	58	;':'
  1086  00FF9D  25                 	db	37
  1087  00FF9E  75                 	db	117	;'u'
  1088  00FF9F  0A                 	db	10
  1089  00FFA0  00                 	db	0
  1090  00FFA1                     STR_8:
  1091  00FFA1  43                 	db	67	;'C'
  1092  00FFA2  6C                 	db	108	;'l'
  1093  00FFA3  6F                 	db	111	;'o'
  1094  00FFA4  73                 	db	115	;'s'
  1095  00FFA5  65                 	db	101	;'e'
  1096  00FFA6  73                 	db	115	;'s'
  1097  00FFA7  74                 	db	116	;'t'
  1098  00FFA8  20                 	db	32
  1099  00FFA9  57                 	db	87	;'W'
  1100  00FFAA  61                 	db	97	;'a'
  1101  00FFAB  6C                 	db	108	;'l'
  1102  00FFAC  6C                 	db	108	;'l'
  1103  00FFAD  3A                 	db	58	;':'
  1104  00FFAE  25                 	db	37
  1105  00FFAF  75                 	db	117	;'u'
  1106  00FFB0  0A                 	db	10
  1107  00FFB1  43                 	db	67	;'C'
  1108  00FFB2  6C                 	db	108	;'l'
  1109  00FFB3  6F                 	db	111	;'o'
  1110  00FFB4  73                 	db	115	;'s'
  1111  00FFB5  65                 	db	101	;'e'
  1112  00FFB6  73                 	db	115	;'s'
  1113  00FFB7  74                 	db	116	;'t'
  1114  00FFB8  20                 	db	32
  1115  00FFB9  41                 	db	65	;'A'
  1116  00FFBA  6E                 	db	110	;'n'
  1117  00FFBB  67                 	db	103	;'g'
  1118  00FFBC  6C                 	db	108	;'l'
  1119  00FFBD  65                 	db	101	;'e'
  1120  00FFBE  3A                 	db	58	;':'
  1121  00FFBF  25                 	db	37
  1122  00FFC0  75                 	db	117	;'u'
  1123  00FFC1  0A                 	db	10
  1124  00FFC2  00                 	db	0
  1125  00FFC3                     STR_11:
  1126  00FFC3  20                 	db	32
  1127  00FFC4  20                 	db	32
  1128  00FFC5  20                 	db	32
  1129  00FFC6  20                 	db	32
  1130  00FFC7  20                 	db	32
  1131  00FFC8  20                 	db	32
  1132  00FFC9  20                 	db	32
  1133  00FFCA  20                 	db	32
  1134  00FFCB  20                 	db	32
  1135  00FFCC  20                 	db	32
  1136  00FFCD  20                 	db	32
  1137  00FFCE  20                 	db	32
  1138  00FFCF  20                 	db	32
  1139  00FFD0  20                 	db	32
  1140  00FFD1  20                 	db	32
  1141  00FFD2  20                 	db	32
  1142  00FFD3  20                 	db	32
  1143  00FFD4  20                 	db	32
  1144  00FFD5  20                 	db	32
  1145  00FFD6  0A                 	db	10
  1146  00FFD7  00                 	db	0
  1147  00FFD8                     STR_10:
  1148  00FFD8  50                 	db	80	;'P'
  1149  00FFD9  6C                 	db	108	;'l'
  1150  00FFDA  65                 	db	101	;'e'
  1151  00FFDB  61                 	db	97	;'a'
  1152  00FFDC  73                 	db	115	;'s'
  1153  00FFDD  65                 	db	101	;'e'
  1154  00FFDE  20                 	db	32
  1155  00FFDF  73                 	db	115	;'s'
  1156  00FFE0  65                 	db	101	;'e'
  1157  00FFE1  6C                 	db	108	;'l'
  1158  00FFE2  65                 	db	101	;'e'
  1159  00FFE3  63                 	db	99	;'c'
  1160  00FFE4  74                 	db	116	;'t'
  1161  00FFE5  20                 	db	32
  1162  00FFE6  6D                 	db	109	;'m'
  1163  00FFE7  6F                 	db	111	;'o'
  1164  00FFE8  64                 	db	100	;'d'
  1165  00FFE9  65                 	db	101	;'e'
  1166  00FFEA  2E                 	db	46
  1167  00FFEB  0A                 	db	10
  1168  00FFEC  00                 	db	0
  1169  00FFED                     STR_6:
  1170  00FFED  44                 	db	68	;'D'
  1171  00FFEE  69                 	db	105	;'i'
  1172  00FFEF  73                 	db	115	;'s'
  1173  00FFF0  74                 	db	116	;'t'
  1174  00FFF1  61                 	db	97	;'a'
  1175  00FFF2  6E                 	db	110	;'n'
  1176  00FFF3  63                 	db	99	;'c'
  1177  00FFF4  65                 	db	101	;'e'
  1178  00FFF5  3A                 	db	58	;':'
  1179  00FFF6  20                 	db	32
  1180  00FFF7  25                 	db	37
  1181  00FFF8  64                 	db	100	;'d'
  1182  00FFF9  0A                 	db	10
  1183  00FFFA  00                 	db	0
  1184  00FFFB                     STR_1:
  1185  00FFFB  25                 	db	37
  1186  00FFFC  63                 	db	99	;'c'
  1187  00FFFD  00                 	db	0
  1188  0000                     
  1189                           ; #config settings
  1190  00FFFE  00                 	db	0	; dummy byte at the end
  1191  0000                     
  1192                           	psect	cinit
  1193  014492                     __pcinit:
  1194                           	opt stack 0
  1195  014492                     start_initialization:
  1196                           	opt stack 0
  1197  014492                     __initialization:
  1198                           	opt stack 0
  1199                           
  1200                           ; Initialize objects allocated to BANK3 (12 bytes)
  1201                           ; load TBLPTR registers with __pidataBANK3
  1202  014492  0EC8               	movlw	low __pidataBANK3
  1203  014494  6EF6               	movwf	tblptrl,c
  1204  014496  0E65               	movlw	high __pidataBANK3
  1205  014498  6EF7               	movwf	tblptrh,c
  1206  01449A  0E01               	movlw	low (__pidataBANK3 shr (0+16))
  1207  01449C  6EF8               	movwf	tblptru,c
  1208  01449E  EE03  F0E4         	lfsr	0,__pdataBANK3
  1209  0144A2  EE10 F00C          	lfsr	1,12
  1210  0144A6                     copy_data0:
  1211  0144A6  0009               	tblrd		*+
  1212  0144A8  CFF5 FFEE          	movff	tablat,postinc0
  1213  0144AC  50E5               	movf	postdec1,w,c
  1214  0144AE  50E1               	movf	fsr1l,w,c
  1215  0144B0  E1FA               	bnz	copy_data0
  1216                           
  1217                           ; Initialize objects allocated to BANK0 (7 bytes)
  1218                           ; load TBLPTR registers with __pidataBANK0
  1219  0144B2  0E2E               	movlw	low __pidataBANK0
  1220  0144B4  6EF6               	movwf	tblptrl,c
  1221  0144B6  0E66               	movlw	high __pidataBANK0
  1222  0144B8  6EF7               	movwf	tblptrh,c
  1223  0144BA  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  1224  0144BC  6EF8               	movwf	tblptru,c
  1225  0144BE  EE00  F0F9         	lfsr	0,__pdataBANK0
  1226  0144C2  EE10 F007          	lfsr	1,7
  1227  0144C6                     copy_data1:
  1228  0144C6  0009               	tblrd		*+
  1229  0144C8  CFF5 FFEE          	movff	tablat,postinc0
  1230  0144CC  50E5               	movf	postdec1,w,c
  1231  0144CE  50E1               	movf	fsr1l,w,c
  1232  0144D0  E1FA               	bnz	copy_data1
  1233                           
  1234                           ; Initialize objects allocated to COMRAM (10 bytes)
  1235                           ; load TBLPTR registers with __pidataCOMRAM
  1236  0144D2  0EF8               	movlw	low __pidataCOMRAM
  1237  0144D4  6EF6               	movwf	tblptrl,c
  1238  0144D6  0E65               	movlw	high __pidataCOMRAM
  1239  0144D8  6EF7               	movwf	tblptrh,c
  1240  0144DA  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1241  0144DC  6EF8               	movwf	tblptru,c
  1242  0144DE  EE00  F047         	lfsr	0,__pdataCOMRAM
  1243  0144E2  EE10 F00A          	lfsr	1,10
  1244  0144E6                     copy_data2:
  1245  0144E6  0009               	tblrd		*+
  1246  0144E8  CFF5 FFEE          	movff	tablat,postinc0
  1247  0144EC  50E5               	movf	postdec1,w,c
  1248  0144EE  50E1               	movf	fsr1l,w,c
  1249  0144F0  E1FA               	bnz	copy_data2
  1250                           
  1251                           ; Clear objects allocated to BIGRAM (300 bytes)
  1252  0144F2  EE04  F0C8         	lfsr	0,__pbssBIGRAM
  1253  0144F6  EE11 F02C          	lfsr	1,300
  1254  0144FA                     clear_0:
  1255  0144FA  6AEE               	clrf	postinc0,c
  1256  0144FC  50E5               	movf	postdec1,w,c
  1257  0144FE  50E1               	movf	fsr1l,w,c
  1258  014500  E1FC               	bnz	clear_0
  1259  014502  50E2               	movf	fsr1h,w,c
  1260  014504  E1FA               	bnz	clear_0
  1261                           
  1262                           ; Clear objects allocated to BANK4 (200 bytes)
  1263  014506  EE04  F000         	lfsr	0,__pbssBANK4
  1264  01450A  0EC8               	movlw	200
  1265  01450C                     clear_1:
  1266  01450C  6AEE               	clrf	postinc0,c
  1267  01450E  06E8               	decf	wreg,f,c
  1268  014510  E1FD               	bnz	clear_1
  1269                           
  1270                           ; Clear objects allocated to BANK3 (228 bytes)
  1271  014512  EE03  F000         	lfsr	0,__pbssBANK3
  1272  014516  0EE4               	movlw	228
  1273  014518                     clear_2:
  1274  014518  6AEE               	clrf	postinc0,c
  1275  01451A  06E8               	decf	wreg,f,c
  1276  01451C  E1FD               	bnz	clear_2
  1277                           
  1278                           ; Clear objects allocated to BANK0 (64 bytes)
  1279  01451E  EE00  F0B9         	lfsr	0,__pbssBANK0
  1280  014522  0E40               	movlw	64
  1281  014524                     clear_3:
  1282  014524  6AEE               	clrf	postinc0,c
  1283  014526  06E8               	decf	wreg,f,c
  1284  014528  E1FD               	bnz	clear_3
  1285                           
  1286                           ; Clear objects allocated to COMRAM (30 bytes)
  1287  01452A  EE00  F029         	lfsr	0,__pbssCOMRAM
  1288  01452E  0E1E               	movlw	30
  1289  014530                     clear_4:
  1290  014530  6AEE               	clrf	postinc0,c
  1291  014532  06E8               	decf	wreg,f,c
  1292  014534  E1FD               	bnz	clear_4
  1293  014536                     end_of_initialization:
  1294                           	opt stack 0
  1295  014536                     __end_of__initialization:
  1296                           	opt stack 0
  1297  014536  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1298  014538  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1299  01453A  0100               	movlb	0
  1300  01453C  EFD4  F09C         	goto	_main	;jump to C main() function
  1301                           tblptru	equ	0xFF8
  1302                           tblptrh	equ	0xFF7
  1303                           tblptrl	equ	0xFF6
  1304                           tablat	equ	0xFF5
  1305                           postinc0	equ	0xFEE
  1306                           wreg	equ	0xFE8
  1307                           postdec1	equ	0xFE5
  1308                           fsr1h	equ	0xFE2
  1309                           fsr1l	equ	0xFE1
  1310                           
  1311                           	psect	bssCOMRAM
  1312  000029                     __pbssCOMRAM:
  1313                           	opt stack 0
  1314  000029                     _COUNTER:
  1315                           	opt stack 0
  1316  000029                     	ds	2
  1317  00002B                     HMI_GRender@a:
  1318                           	opt stack 0
  1319  00002B                     	ds	2
  1320  00002D                     SPI_Send9@dat:
  1321                           	opt stack 0
  1322  00002D                     	ds	2
  1323  00002F                     _iRDropCaster:
  1324                           	opt stack 0
  1325  00002F                     	ds	1
  1326  000030                     _iRVirtualWall:
  1327                           	opt stack 0
  1328  000030                     	ds	1
  1329  000031                     _iRCliffR:
  1330                           	opt stack 0
  1331  000031                     	ds	1
  1332  000032                     _iRCliffFR:
  1333                           	opt stack 0
  1334  000032                     	ds	1
  1335  000033                     _iRCliffFL:
  1336                           	opt stack 0
  1337  000033                     	ds	1
  1338  000034                     _iRCliffL:
  1339                           	opt stack 0
  1340  000034                     	ds	1
  1341  000035                     _iRWall:
  1342                           	opt stack 0
  1343  000035                     	ds	1
  1344  000036                     _iRBumpDrop:
  1345                           	opt stack 0
  1346  000036                     	ds	1
  1347  000037                     _iRScriptIndex:
  1348                           	opt stack 0
  1349  000037                     	ds	1
  1350  000038                     _u:
  1351                           	opt stack 0
  1352  000038                     	ds	1
  1353  000039                     _j:
  1354                           	opt stack 0
  1355  000039                     	ds	1
  1356  00003A                     _i:
  1357                           	opt stack 0
  1358  00003A                     	ds	1
  1359  00003B                     rand@screw:
  1360                           	opt stack 0
  1361  00003B                     	ds	1
  1362  00003C                     _ADC_Initialised:
  1363                           	opt stack 0
  1364  00003C                     	ds	1
  1365  00003D                     OutSeg@a:
  1366                           	opt stack 0
  1367  00003D                     	ds	1
  1368  00003E                     OutSeg@segset:
  1369                           	opt stack 0
  1370  00003E                     	ds	1
  1371  00003F                     OutSeg@cur:
  1372                           	opt stack 0
  1373  00003F                     	ds	1
  1374  000040                     _I2C1T:
  1375                           	opt stack 0
  1376  000040                     	ds	7
  1377                           tblptru	equ	0xFF8
  1378                           tblptrh	equ	0xFF7
  1379                           tblptrl	equ	0xFF6
  1380                           tablat	equ	0xFF5
  1381                           postinc0	equ	0xFEE
  1382                           wreg	equ	0xFE8
  1383                           postdec1	equ	0xFE5
  1384                           fsr1h	equ	0xFE2
  1385                           fsr1l	equ	0xFE1
  1386                           
  1387                           	psect	dataCOMRAM
  1388  000047                     __pdataCOMRAM:
  1389                           	opt stack 0
  1390  000047                     _gCursor:
  1391                           	opt stack 0
  1392  000047                     	ds	4
  1393  00004B                     _Bus_State:
  1394                           	opt stack 0
  1395  00004B                     	ds	1
  1396  00004C                     	ds	1
  1397  00004D                     	ds	1
  1398  00004E                     	ds	1
  1399  00004F                     _l:
  1400                           	opt stack 0
  1401  00004F                     	ds	1
  1402  000050                     _w:
  1403                           	opt stack 0
  1404  000050                     	ds	1
  1405                           tblptru	equ	0xFF8
  1406                           tblptrh	equ	0xFF7
  1407                           tblptrl	equ	0xFF6
  1408                           tablat	equ	0xFF5
  1409                           postinc0	equ	0xFEE
  1410                           wreg	equ	0xFE8
  1411                           postdec1	equ	0xFE5
  1412                           fsr1h	equ	0xFE2
  1413                           fsr1l	equ	0xFE1
  1414                           
  1415                           	psect	bssBANK0
  1416  0000B9                     __pbssBANK0:
  1417                           	opt stack 0
  1418  0000B9                     _gISR:
  1419                           	opt stack 0
  1420  0000B9                     	ds	3
  1421  0000BC                     _lQueue:
  1422                           	opt stack 0
  1423  0000BC                     	ds	3
  1424  0000BF                     _lStepFunction:
  1425                           	opt stack 0
  1426  0000BF                     	ds	3
  1427  0000C2                     _IRValue:
  1428                           	opt stack 0
  1429  0000C2                     	ds	2
  1430  0000C4                     _Stepstomin:
  1431                           	opt stack 0
  1432  0000C4                     	ds	2
  1433  0000C6                     _StepRotate:
  1434                           	opt stack 0
  1435  0000C6                     	ds	2
  1436  0000C8                     _mode:
  1437                           	opt stack 0
  1438  0000C8                     	ds	2
  1439  0000CA                     _dip:
  1440                           	opt stack 0
  1441  0000CA                     	ds	2
  1442  0000CC                     _angleTotal:
  1443                           	opt stack 0
  1444  0000CC                     	ds	2
  1445  0000CE                     _distanceTotal:
  1446                           	opt stack 0
  1447  0000CE                     	ds	2
  1448  0000D0                     _iRAngle:
  1449                           	opt stack 0
  1450  0000D0                     	ds	2
  1451  0000D2                     _iRDistance:
  1452                           	opt stack 0
  1453  0000D2                     	ds	2
  1454  0000D4                     _pShiftVal:
  1455                           	opt stack 0
  1456  0000D4                     	ds	2
  1457  0000D6                     _val:
  1458                           	opt stack 0
  1459  0000D6                     	ds	2
  1460  0000D8                     _lMotor:
  1461                           	opt stack 0
  1462  0000D8                     	ds	2
  1463  0000DA                     _lCurrent:
  1464                           	opt stack 0
  1465  0000DA                     	ds	2
  1466  0000DC                     _gBackcolour:
  1467                           	opt stack 0
  1468  0000DC                     	ds	2
  1469  0000DE                     _iRDropLeft:
  1470                           	opt stack 0
  1471  0000DE                     	ds	1
  1472  0000DF                     _iRDropRight:
  1473                           	opt stack 0
  1474  0000DF                     	ds	1
  1475  0000E0                     _iRBumpLeft:
  1476                           	opt stack 0
  1477  0000E0                     	ds	1
  1478  0000E1                     _iRBumpRight:
  1479                           	opt stack 0
  1480  0000E1                     	ds	1
  1481  0000E2                     Event_TestButton@j:
  1482                           	opt stack 0
  1483  0000E2                     	ds	1
  1484  0000E3                     Timer2_Init@PRE:
  1485                           	opt stack 0
  1486  0000E3                     	ds	1
  1487  0000E4                     Timer2_Init@INDEX:
  1488                           	opt stack 0
  1489  0000E4                     	ds	1
  1490  0000E5                     Timer0_Init@PRE:
  1491                           	opt stack 0
  1492  0000E5                     	ds	1
  1493  0000E6                     _INDEX:
  1494                           	opt stack 0
  1495  0000E6                     	ds	1
  1496  0000E7                     _lBufferY:
  1497                           	opt stack 0
  1498  0000E7                     	ds	1
  1499  0000E8                     _lBufferX:
  1500                           	opt stack 0
  1501  0000E8                     	ds	1
  1502  0000E9                     _clearall:
  1503                           	opt stack 0
  1504  0000E9                     	ds	1
  1505  0000EA                     _PortC:
  1506                           	opt stack 0
  1507  0000EA                     	ds	10
  1508  0000F4                     _ADC_AN0:
  1509                           	opt stack 0
  1510  0000F4                     	ds	5
  1511                           tblptru	equ	0xFF8
  1512                           tblptrh	equ	0xFF7
  1513                           tblptrl	equ	0xFF6
  1514                           tablat	equ	0xFF5
  1515                           postinc0	equ	0xFEE
  1516                           wreg	equ	0xFE8
  1517                           postdec1	equ	0xFE5
  1518                           fsr1h	equ	0xFE2
  1519                           fsr1l	equ	0xFE1
  1520                           
  1521                           	psect	dataBANK0
  1522  0000F9                     __pdataBANK0:
  1523                           	opt stack 0
  1524  0000F9                     _TimerX:
  1525                           	opt stack 0
  1526  0000F9                     	ds	2
  1527  0000FB                     _MinDist:
  1528                           	opt stack 0
  1529  0000FB                     	ds	2
  1530  0000FD                     _gForecolour:
  1531                           	opt stack 0
  1532  0000FD                     	ds	2
  1533  0000FF                     _change:
  1534                           	opt stack 0
  1535  0000FF                     	ds	1
  1536                           tblptru	equ	0xFF8
  1537                           tblptrh	equ	0xFF7
  1538                           tblptrl	equ	0xFF6
  1539                           tablat	equ	0xFF5
  1540                           postinc0	equ	0xFEE
  1541                           wreg	equ	0xFE8
  1542                           postdec1	equ	0xFE5
  1543                           fsr1h	equ	0xFE2
  1544                           fsr1l	equ	0xFE1
  1545                           
  1546                           	psect	bssBANK3
  1547  000300                     __pbssBANK3:
  1548                           	opt stack 0
  1549  000300                     _stepsToMinDegrees:
  1550                           	opt stack 0
  1551  000300                     	ds	4
  1552  000304                     _iRAngleSS:
  1553                           	opt stack 0
  1554  000304                     	ds	4
  1555  000308                     _iRDistanceSS:
  1556                           	opt stack 0
  1557  000308                     	ds	4
  1558  00030C                     Timer2_Init@DIV:
  1559                           	opt stack 0
  1560  00030C                     	ds	4
  1561  000310                     Timer0_Init@DIV:
  1562                           	opt stack 0
  1563  000310                     	ds	4
  1564  000314                     _I2C2_More:
  1565                           	opt stack 0
  1566  000314                     	ds	3
  1567  000317                     _I2C1_More:
  1568                           	opt stack 0
  1569  000317                     	ds	3
  1570  00031A                     _I2C2_Done:
  1571                           	opt stack 0
  1572  00031A                     	ds	3
  1573  00031D                     _I2C1_Done:
  1574                           	opt stack 0
  1575  00031D                     	ds	3
  1576  000320                     _HMIBoard:
  1577                           	opt stack 0
  1578  000320                     	ds	58
  1579  00035A                     _SPI1:
  1580                           	opt stack 0
  1581  00035A                     	ds	11
  1582  000365                     _SPI2:
  1583                           	opt stack 0
  1584  000365                     	ds	11
  1585  000370                     _DIPSwitch:
  1586                           	opt stack 0
  1587  000370                     	ds	10
  1588  00037A                     _TestButton:
  1589                           	opt stack 0
  1590  00037A                     	ds	10
  1591  000384                     _PortG:
  1592                           	opt stack 0
  1593  000384                     	ds	10
  1594  00038E                     _PortE:
  1595                           	opt stack 0
  1596  00038E                     	ds	10
  1597  000398                     _PortD:
  1598                           	opt stack 0
  1599  000398                     	ds	10
  1600  0003A2                     _PortB:
  1601                           	opt stack 0
  1602  0003A2                     	ds	10
  1603  0003AC                     _PortA:
  1604                           	opt stack 0
  1605  0003AC                     	ds	10
  1606  0003B6                     _PortF:
  1607                           	opt stack 0
  1608  0003B6                     	ds	10
  1609  0003C0                     _I2C2T:
  1610                           	opt stack 0
  1611  0003C0                     	ds	7
  1612  0003C7                     _Stepper:
  1613                           	opt stack 0
  1614  0003C7                     	ds	6
  1615  0003CD                     _ADC_AN3:
  1616                           	opt stack 0
  1617  0003CD                     	ds	5
  1618  0003D2                     _ADC_AN2:
  1619                           	opt stack 0
  1620  0003D2                     	ds	5
  1621  0003D7                     _ADC_AN1:
  1622                           	opt stack 0
  1623  0003D7                     	ds	5
  1624  0003DC                     LCD_DrawRectangle@p4:
  1625                           	opt stack 0
  1626  0003DC                     	ds	4
  1627  0003E0                     LCD_DrawRectangle@p2:
  1628                           	opt stack 0
  1629  0003E0                     	ds	4
  1630                           tblptru	equ	0xFF8
  1631                           tblptrh	equ	0xFF7
  1632                           tblptrl	equ	0xFF6
  1633                           tablat	equ	0xFF5
  1634                           postinc0	equ	0xFEE
  1635                           wreg	equ	0xFE8
  1636                           postdec1	equ	0xFE5
  1637                           fsr1h	equ	0xFE2
  1638                           fsr1l	equ	0xFE1
  1639                           
  1640                           	psect	dataBANK3
  1641  0003E4                     __pdataBANK3:
  1642                           	opt stack 0
  1643  0003E4                     Console_Render@F6956:
  1644                           	opt stack 0
  1645  0003E4                     	ds	4
  1646  0003E8                     _gLineSize:
  1647                           	opt stack 0
  1648  0003E8                     	ds	4
  1649  0003EC                     _gCharSize:
  1650                           	opt stack 0
  1651  0003EC                     	ds	4
  1652                           tblptru	equ	0xFF8
  1653                           tblptrh	equ	0xFF7
  1654                           tblptrl	equ	0xFF6
  1655                           tablat	equ	0xFF5
  1656                           postinc0	equ	0xFEE
  1657                           wreg	equ	0xFE8
  1658                           postdec1	equ	0xFE5
  1659                           fsr1h	equ	0xFE2
  1660                           fsr1l	equ	0xFE1
  1661                           
  1662                           	psect	bssBANK4
  1663  000400                     __pbssBANK4:
  1664                           	opt stack 0
  1665  000400                     _lCBuffer:
  1666                           	opt stack 0
  1667  000400                     	ds	30
  1668  00041E                     _iRScriptStack:
  1669                           	opt stack 0
  1670  00041E                     	ds	100
  1671  000482                     Console_MakeField@Fill:
  1672                           	opt stack 0
  1673  000482                     	ds	70
  1674                           tblptru	equ	0xFF8
  1675                           tblptrh	equ	0xFF7
  1676                           tblptrl	equ	0xFF6
  1677                           tablat	equ	0xFF5
  1678                           postinc0	equ	0xFEE
  1679                           wreg	equ	0xFE8
  1680                           postdec1	equ	0xFE5
  1681                           fsr1h	equ	0xFE2
  1682                           fsr1l	equ	0xFE1
  1683                           
  1684                           	psect	bssBIGRAM
  1685  0004C8                     __pbssBIGRAM:
  1686                           	opt stack 0
  1687  0004C8                     _lBuffer:
  1688                           	opt stack 0
  1689  0004C8                     	ds	300
  1690                           tblptru	equ	0xFF8
  1691                           tblptrh	equ	0xFF7
  1692                           tblptrl	equ	0xFF6
  1693                           tablat	equ	0xFF5
  1694                           postinc0	equ	0xFEE
  1695                           wreg	equ	0xFE8
  1696                           postdec1	equ	0xFE5
  1697                           fsr1h	equ	0xFE2
  1698                           fsr1l	equ	0xFE1
  1699                           
  1700                           	psect	cstackBANK3
  1701  0003F0                     __pcstackBANK3:
  1702                           	opt stack 0
  1703  0003F0                     ??_mode1:
  1704  0003F0                     irobot_rotate_to@rotateToAngle:
  1705                           	opt stack 0
  1706                           
  1707                           ; 2 bytes @ 0x0
  1708  0003F0                     	ds	2
  1709  0003F2                     irobot_rotate_to@rotateSpeed:
  1710                           	opt stack 0
  1711  0003F2                     mode1@moveto:
  1712                           	opt stack 0
  1713                           
  1714                           ; 2 bytes @ 0x2
  1715  0003F2                     	ds	2
  1716  0003F4                     _mode1$15583:
  1717                           	opt stack 0
  1718  0003F4                     _mode4$15584:
  1719                           	opt stack 0
  1720                           
  1721                           ; 4 bytes @ 0x4
  1722  0003F4                     	ds	4
  1723  0003F8                     ??_main:
  1724                           
  1725                           ; 1 bytes @ 0x8
  1726  0003F8                     	ds	2
  1727                           tblptru	equ	0xFF8
  1728                           tblptrh	equ	0xFF7
  1729                           tblptrl	equ	0xFF6
  1730                           tablat	equ	0xFF5
  1731                           postinc0	equ	0xFEE
  1732                           wreg	equ	0xFE8
  1733                           postdec1	equ	0xFE5
  1734                           fsr1h	equ	0xFE2
  1735                           fsr1l	equ	0xFE1
  1736                           
  1737                           	psect	cstackBANK2
  1738  000200                     __pcstackBANK2:
  1739                           	opt stack 0
  1740  000200                     irobot_query_and_update@TXArray:
  1741                           	opt stack 0
  1742                           
  1743                           ; 256 bytes @ 0x0
  1744  000200                     	ds	256
  1745                           tblptru	equ	0xFF8
  1746                           tblptrh	equ	0xFF7
  1747                           tblptrl	equ	0xFF6
  1748                           tablat	equ	0xFF5
  1749                           postinc0	equ	0xFEE
  1750                           wreg	equ	0xFE8
  1751                           postdec1	equ	0xFE5
  1752                           fsr1h	equ	0xFE2
  1753                           fsr1l	equ	0xFE1
  1754                           
  1755                           	psect	cstackBANK1
  1756  000100                     __pcstackBANK1:
  1757                           	opt stack 0
  1758  000100                     ??___fltol:
  1759  000100                     irobot_query_and_update@RXArray:
  1760                           	opt stack 0
  1761                           
  1762                           ; 256 bytes @ 0x0
  1763  000100                     	ds	256
  1764                           tblptru	equ	0xFF8
  1765                           tblptrh	equ	0xFF7
  1766                           tblptrl	equ	0xFF6
  1767                           tablat	equ	0xFF5
  1768                           postinc0	equ	0xFEE
  1769                           wreg	equ	0xFE8
  1770                           postdec1	equ	0xFE5
  1771                           fsr1h	equ	0xFE2
  1772                           fsr1l	equ	0xFE1
  1773                           
  1774                           	psect	cstackBANK0
  1775  000060                     __pcstackBANK0:
  1776                           	opt stack 0
  1777  000060                     ??_Console_ClearCursor:
  1778  000060                     ??_ADC_SetChannel:
  1779  000060                     ??_ADC_ConversionTime:
  1780  000060                     ??_ADC_SetupIO:
  1781  000060                     ??_sort_iRBumpDrop:
  1782  000060                     ?_load_iRScriptStack:
  1783                           	opt stack 0
  1784  000060                     ??_Console_Init:
  1785  000060                     ??_Console_NewLine:
  1786  000060                     ??_Console_FormFeed:
  1787  000060                     ??_HMI_SetButton:
  1788  000060                     ?_GetPortProperties:
  1789                           	opt stack 0
  1790  000060                     ?_GetPortPORT:
  1791                           	opt stack 0
  1792  000060                     ?_GetPortTRIS:
  1793                           	opt stack 0
  1794  000060                     ?_twos_complement_of:
  1795                           	opt stack 0
  1796  000060                     ?___wmul:
  1797                           	opt stack 0
  1798  000060                     ?___awdiv:
  1799                           	opt stack 0
  1800  000060                     ?___lwdiv:
  1801                           	opt stack 0
  1802  000060                     ?___lldiv:
  1803                           	opt stack 0
  1804  000060                     ?___xxtofl:
  1805                           	opt stack 0
  1806  000060                     Mode_Set@pMode:
  1807                           	opt stack 0
  1808  000060                     ToSegment@pCHR:
  1809                           	opt stack 0
  1810  000060                     HMI_SetBar@pValue:
  1811                           	opt stack 0
  1812  000060                     ADC_ClockDivision@pDivide:
  1813                           	opt stack 0
  1814  000060                     get_packet_size@packetID:
  1815                           	opt stack 0
  1816  000060                     eusart_putch@eusartSendChar:
  1817                           	opt stack 0
  1818  000060                     Port_GetPin@pInput:
  1819                           	opt stack 0
  1820  000060                     Port_GetQuad@pInput:
  1821                           	opt stack 0
  1822  000060                     SPI_DisableISR@pInput:
  1823                           	opt stack 0
  1824  000060                     SPI_DCS@pInput:
  1825                           	opt stack 0
  1826  000060                     SPI_Send@pInput:
  1827                           	opt stack 0
  1828  000060                     Byte_SetBit@pInput:
  1829                           	opt stack 0
  1830  000060                     Byte_GetBit@pInput:
  1831                           	opt stack 0
  1832  000060                     Byte_SetZone@pInput:
  1833                           	opt stack 0
  1834  000060                     Byte_GetZone@pInput:
  1835                           	opt stack 0
  1836  000060                     Byte_SetByte@pInput:
  1837                           	opt stack 0
  1838  000060                     delay_ms@ms:
  1839                           	opt stack 0
  1840  000060                     delay_us@us:
  1841                           	opt stack 0
  1842  000060                     reverse@input:
  1843                           	opt stack 0
  1844  000060                     twos_complement_of@complementValue:
  1845                           	opt stack 0
  1846  000060                     ___wmul@multiplier:
  1847                           	opt stack 0
  1848  000060                     ___awdiv@dividend:
  1849                           	opt stack 0
  1850  000060                     ___lwdiv@dividend:
  1851                           	opt stack 0
  1852  000060                     MXK_Queue@pCallback:
  1853                           	opt stack 0
  1854  000060                     Timer0_Start@pFunction:
  1855                           	opt stack 0
  1856  000060                     ___lldiv@dividend:
  1857                           	opt stack 0
  1858  000060                     ___xxtofl@val:
  1859                           	opt stack 0
  1860                           
  1861                           ; 4 bytes @ 0x0
  1862  000060                     	ds	1
  1863  000061                     ADC_SetChannel@pChannel:
  1864                           	opt stack 0
  1865  000061                     ADC_ClockDivision@reg:
  1866                           	opt stack 0
  1867  000061                     ADC_ConversionTime@pCount:
  1868                           	opt stack 0
  1869  000061                     rx_assign@packetIDValue:
  1870                           	opt stack 0
  1871  000061                     irobot_song_play@songNumber:
  1872                           	opt stack 0
  1873  000061                     HMI_SetSegments@pString:
  1874                           	opt stack 0
  1875                           
  1876                           ; 2 bytes @ 0x1
  1877  000061                     	ds	1
  1878  000062                     GetPortProperties@pInput:
  1879                           	opt stack 0
  1880  000062                     GetPortPORT@pInput:
  1881                           	opt stack 0
  1882  000062                     GetPortTRIS@pInput:
  1883                           	opt stack 0
  1884  000062                     Port_GetPin@pPin:
  1885                           	opt stack 0
  1886  000062                     Port_GetQuad@pQuad:
  1887                           	opt stack 0
  1888  000062                     SPI_Send@pData:
  1889                           	opt stack 0
  1890  000062                     Byte_SetBit@pBit:
  1891                           	opt stack 0
  1892  000062                     Byte_GetBit@pBit:
  1893                           	opt stack 0
  1894  000062                     Byte_SetZone@pMax:
  1895                           	opt stack 0
  1896  000062                     Byte_GetZone@pMax:
  1897                           	opt stack 0
  1898  000062                     Byte_SetByte@pValue:
  1899                           	opt stack 0
  1900  000062                     Console_Init@x:
  1901                           	opt stack 0
  1902  000062                     Console_FormFeed@x:
  1903                           	opt stack 0
  1904  000062                     ADC_SetupIO@pChannel:
  1905                           	opt stack 0
  1906  000062                     ADC_ClockDivision@unfound:
  1907                           	opt stack 0
  1908  000062                     rx_assign@byteNumber:
  1909                           	opt stack 0
  1910  000062                     reverse@length:
  1911                           	opt stack 0
  1912  000062                     ADC_Start@pInput:
  1913                           	opt stack 0
  1914  000062                     ___wmul@multiplicand:
  1915                           	opt stack 0
  1916  000062                     ___awdiv@divisor:
  1917                           	opt stack 0
  1918  000062                     ___lwdiv@divisor:
  1919                           	opt stack 0
  1920  000062                     delay_ms@u:
  1921                           	opt stack 0
  1922  000062                     delay_us@u:
  1923                           	opt stack 0
  1924  000062                     HMI_SetButton@reindex:
  1925                           	opt stack 0
  1926                           
  1927                           ; 4 bytes @ 0x2
  1928  000062                     	ds	1
  1929  000063                     ??_Port_GetPin:
  1930  000063                     ??_Port_GetQuad:
  1931  000063                     ??_Byte_GetBit:
  1932  000063                     ??_rx_assign:
  1933  000063                     LCD_Write@mode:
  1934                           	opt stack 0
  1935  000063                     Byte_SetBit@pValue:
  1936                           	opt stack 0
  1937  000063                     Byte_SetZone@pChunk:
  1938                           	opt stack 0
  1939  000063                     Byte_GetZone@pChunk:
  1940                           	opt stack 0
  1941  000063                     Console_Init@y:
  1942                           	opt stack 0
  1943  000063                     Console_FormFeed@y:
  1944                           	opt stack 0
  1945  000063                     OutSeg@pSegment:
  1946                           	opt stack 0
  1947  000063                     ADC_SetupIO@MASK:
  1948                           	opt stack 0
  1949  000063                     Motor_Move@pMotor:
  1950                           	opt stack 0
  1951                           
  1952                           ; 2 bytes @ 0x3
  1953  000063                     	ds	1
  1954  000064                     ??_Byte_SetBit:
  1955  000064                     ??_Console_IncrementCursor:
  1956  000064                     ??_OutSeg:
  1957  000064                     ??_ADC_Start:
  1958  000064                     ??___xxtofl:
  1959  000064                     LCD_Write@value:
  1960                           	opt stack 0
  1961  000064                     Byte_GetBit@Output:
  1962                           	opt stack 0
  1963  000064                     Byte_SetZone@pChunkSize:
  1964                           	opt stack 0
  1965  000064                     Byte_GetZone@pChunkSize:
  1966                           	opt stack 0
  1967  000064                     reverse@tempVar:
  1968                           	opt stack 0
  1969  000064                     ___awdiv@counter:
  1970                           	opt stack 0
  1971  000064                     ___lwdiv@counter:
  1972                           	opt stack 0
  1973  000064                     HMI_SetSegments@in:
  1974                           	opt stack 0
  1975  000064                     ADC_Init@pInput:
  1976                           	opt stack 0
  1977  000064                     ___wmul@product:
  1978                           	opt stack 0
  1979  000064                     ___lldiv@divisor:
  1980                           	opt stack 0
  1981                           
  1982                           ; 4 bytes @ 0x4
  1983  000064                     	ds	1
  1984  000065                     ??_Byte_GetZone:
  1985  000065                     ?_Console_MakeField:
  1986                           	opt stack 0
  1987  000065                     Set_Addr_Window@ys:
  1988                           	opt stack 0
  1989  000065                     Set_Rotation@m:
  1990                           	opt stack 0
  1991  000065                     Port_GetPin@Output:
  1992                           	opt stack 0
  1993  000065                     Port_GetQuad@Output:
  1994                           	opt stack 0
  1995  000065                     Byte_SetZone@pValue:
  1996                           	opt stack 0
  1997  000065                     rx_assign@packetID:
  1998                           	opt stack 0
  1999  000065                     ___awdiv@sign:
  2000                           	opt stack 0
  2001  000065                     LCD_Word_Write@value:
  2002                           	opt stack 0
  2003  000065                     reverse@iterator:
  2004                           	opt stack 0
  2005  000065                     Motor_Move@pDelta:
  2006                           	opt stack 0
  2007  000065                     ___lwdiv@quotient:
  2008                           	opt stack 0
  2009                           
  2010                           ; 2 bytes @ 0x5
  2011  000065                     	ds	1
  2012  000066                     ?_irobot_query_and_update:
  2013                           	opt stack 0
  2014  000066                     ??_Byte_SetZone:
  2015  000066                     Set_Addr_Window@xe:
  2016                           	opt stack 0
  2017  000066                     Set_Rotation@rotation:
  2018                           	opt stack 0
  2019  000066                     Byte_GetZone@MASK:
  2020                           	opt stack 0
  2021  000066                     OutSeg@pInput:
  2022                           	opt stack 0
  2023  000066                     HMI_SetButton@pValue:
  2024                           	opt stack 0
  2025  000066                     ADC_Init@pChannel:
  2026                           	opt stack 0
  2027  000066                     MXK_BlockSwitchTo@CUR:
  2028                           	opt stack 0
  2029  000066                     MXK_SwitchTo@CUR:
  2030                           	opt stack 0
  2031  000066                     ___awdiv@quotient:
  2032                           	opt stack 0
  2033                           
  2034                           ; 2 bytes @ 0x6
  2035  000066                     	ds	1
  2036  000067                     ??_Console_MakeField:
  2037  000067                     ?___lwmod:
  2038                           	opt stack 0
  2039  000067                     Set_Addr_Window@ye:
  2040                           	opt stack 0
  2041  000067                     Byte_GetZone@Offset:
  2042                           	opt stack 0
  2043  000067                     OutSeg@out:
  2044                           	opt stack 0
  2045  000067                     HMI_SetButton@v:
  2046                           	opt stack 0
  2047  000067                     MXK_BlockSwitchTo@pModule:
  2048                           	opt stack 0
  2049  000067                     MXK_SwitchTo@pModule:
  2050                           	opt stack 0
  2051  000067                     ___lwmod@dividend:
  2052                           	opt stack 0
  2053                           
  2054                           ; 2 bytes @ 0x7
  2055  000067                     	ds	1
  2056  000068                     ??_Console_Tab:
  2057  000068                     Set_Addr_Window@xs:
  2058                           	opt stack 0
  2059  000068                     Byte_GetZone@Output:
  2060                           	opt stack 0
  2061  000068                     ___xxtofl@sign:
  2062                           	opt stack 0
  2063  000068                     HMI_Render@a:
  2064                           	opt stack 0
  2065  000068                     ___lldiv@quotient:
  2066                           	opt stack 0
  2067                           
  2068                           ; 4 bytes @ 0x8
  2069  000068                     	ds	1
  2070  000069                     Byte_SetZone@Offset:
  2071                           	opt stack 0
  2072  000069                     ___xxtofl@exp:
  2073                           	opt stack 0
  2074  000069                     LCD_Fill@pColour:
  2075                           	opt stack 0
  2076  000069                     LCD_FillRectangle@pColour:
  2077                           	opt stack 0
  2078  000069                     Byte_GetPair@pInput:
  2079                           	opt stack 0
  2080  000069                     Console_MakeField@Index:
  2081                           	opt stack 0
  2082  000069                     ___lwmod@divisor:
  2083                           	opt stack 0
  2084                           
  2085                           ; 2 bytes @ 0x9
  2086  000069                     	ds	1
  2087  00006A                     ??_load_iRScriptStack:
  2088  00006A                     Byte_SetZone@MASK:
  2089                           	opt stack 0
  2090  00006A                     ___xxtofl@arg:
  2091                           	opt stack 0
  2092                           
  2093                           ; 4 bytes @ 0xA
  2094  00006A                     	ds	1
  2095  00006B                     LCD_Fill@i:
  2096                           	opt stack 0
  2097  00006B                     Byte_GetPair@pPair:
  2098                           	opt stack 0
  2099  00006B                     Console_MakeField@pInput:
  2100                           	opt stack 0
  2101  00006B                     ___lwmod@counter:
  2102                           	opt stack 0
  2103  00006B                     Byte_SetPair@pInput:
  2104                           	opt stack 0
  2105  00006B                     Byte_SetQuad@pInput:
  2106                           	opt stack 0
  2107  00006B                     LCD_FillRectangle@pPoint:
  2108                           	opt stack 0
  2109                           
  2110                           ; 4 bytes @ 0xB
  2111  00006B                     	ds	1
  2112  00006C                     LCD_Fill@j:
  2113                           	opt stack 0
  2114  00006C                     ___lldiv@counter:
  2115                           	opt stack 0
  2116  00006C                     Word_GetPair@pInput:
  2117                           	opt stack 0
  2118  00006C                     itos@input:
  2119                           	opt stack 0
  2120  00006C                     Console_MakeField@Column:
  2121                           	opt stack 0
  2122  00006C                     load_iRScriptStack@loadByte:
  2123                           	opt stack 0
  2124                           
  2125                           ; 2 bytes @ 0xC
  2126  00006C                     	ds	1
  2127  00006D                     Byte_SetPair@pPair:
  2128                           	opt stack 0
  2129  00006D                     Byte_SetQuad@pQuad:
  2130                           	opt stack 0
  2131  00006D                     Console_Tab@t:
  2132                           	opt stack 0
  2133  00006D                     Timer0_Init@pFrequency:
  2134                           	opt stack 0
  2135  00006D                     Timer2_Init@pFrequency:
  2136                           	opt stack 0
  2137                           
  2138                           ; 4 bytes @ 0xD
  2139  00006D                     	ds	1
  2140  00006E                     ?___fldiv:
  2141                           	opt stack 0
  2142  00006E                     Byte_SetPair@pValue:
  2143                           	opt stack 0
  2144  00006E                     Byte_SetQuad@pValue:
  2145                           	opt stack 0
  2146  00006E                     Word_GetPair@pPair:
  2147                           	opt stack 0
  2148  00006E                     Console_Tab@i:
  2149                           	opt stack 0
  2150  00006E                     load_iRScriptStack@bytesToLoad:
  2151                           	opt stack 0
  2152  00006E                     itos@destination:
  2153                           	opt stack 0
  2154  00006E                     _Console_MakeField$10974:
  2155                           	opt stack 0
  2156  00006E                     ___fldiv@b:
  2157                           	opt stack 0
  2158                           
  2159                           ; 4 bytes @ 0xE
  2160  00006E                     	ds	1
  2161  00006F                     Console_Tab@c:
  2162                           	opt stack 0
  2163  00006F                     load_iRScriptStack@i:
  2164                           	opt stack 0
  2165  00006F                     Port_SetPin@pInput:
  2166                           	opt stack 0
  2167  00006F                     Port_Set@pInput:
  2168                           	opt stack 0
  2169  00006F                     SPI_MinSpeed@pInput:
  2170                           	opt stack 0
  2171  00006F                     SPI_MaxSpeed@pInput:
  2172                           	opt stack 0
  2173  00006F                     Word_SetPair@pInput:
  2174                           	opt stack 0
  2175  00006F                     PortProperty_Valid@pInput:
  2176                           	opt stack 0
  2177  00006F                     LCD_FillRectangle@pSize:
  2178                           	opt stack 0
  2179                           
  2180                           ; 4 bytes @ 0xF
  2181  00006F                     	ds	1
  2182  000070                     ??_irobot_query_and_update:
  2183  000070                     ??_Console_PrintChar:
  2184  000070                     Console_MakeField@x:
  2185                           	opt stack 0
  2186  000070                     irobot_leds@LEDBit:
  2187                           	opt stack 0
  2188  000070                     itos@Data:
  2189                           	opt stack 0
  2190  000070                     irobot_angle_wait@angleWait:
  2191                           	opt stack 0
  2192  000070                     irobot_move@moveSpeed:
  2193                           	opt stack 0
  2194                           
  2195                           ; 2 bytes @ 0x10
  2196  000070                     	ds	1
  2197  000071                     ??_Timer2_Init:
  2198  000071                     ??_Timer0_Init:
  2199  000071                     Port_SetPin@pPin:
  2200                           	opt stack 0
  2201  000071                     Port_Set@pValue:
  2202                           	opt stack 0
  2203  000071                     Word_SetPair@pPair:
  2204                           	opt stack 0
  2205  000071                     PortProperty_Valid@pPinDrive:
  2206                           	opt stack 0
  2207  000071                     Console_MakeField@y:
  2208                           	opt stack 0
  2209  000071                     irobot_leds@powerColour:
  2210                           	opt stack 0
  2211                           
  2212                           ; 1 bytes @ 0x11
  2213  000071                     	ds	1
  2214  000072                     ??_Port_Set:
  2215  000072                     ??_irobot_angle_wait:
  2216  000072                     Port_SetPin@pValue:
  2217                           	opt stack 0
  2218  000072                     Word_SetPair@pValue:
  2219                           	opt stack 0
  2220  000072                     PortProperty_Valid@pPin:
  2221                           	opt stack 0
  2222  000072                     irobot_leds@powerLuminosity:
  2223                           	opt stack 0
  2224  000072                     LCD_DrawField@pField:
  2225                           	opt stack 0
  2226  000072                     itos@Length:
  2227                           	opt stack 0
  2228  000072                     irobot_move@moveTurnRadius:
  2229                           	opt stack 0
  2230  000072                     Timer2_Init@RDIV:
  2231                           	opt stack 0
  2232  000072                     ___fldiv@a:
  2233                           	opt stack 0
  2234                           
  2235                           ; 4 bytes @ 0x12
  2236  000072                     	ds	1
  2237  000073                     ??_PortProperty_Valid:
  2238  000073                     ??_LCD_FillRectangle:
  2239  000073                     Port_SetPin@Type:
  2240                           	opt stack 0
  2241  000073                     Console_PrintChar@pInput:
  2242                           	opt stack 0
  2243  000073                     irobot_leds@isScript:
  2244                           	opt stack 0
  2245  000073                     Timer0_Init@pCPUClock:
  2246                           	opt stack 0
  2247                           
  2248                           ; 4 bytes @ 0x13
  2249  000073                     	ds	1
  2250  000074                     ??_irobot_move:
  2251  000074                     LED_Set@pValue:
  2252                           	opt stack 0
  2253  000074                     putch@c:
  2254                           	opt stack 0
  2255  000074                     irobot_led_power_on@powerOnColour:
  2256                           	opt stack 0
  2257  000074                     Port_TogglePin@pInput:
  2258                           	opt stack 0
  2259  000074                     itos@Out:
  2260                           	opt stack 0
  2261  000074                     LCD_DrawField@pPoint:
  2262                           	opt stack 0
  2263                           
  2264                           ; 4 bytes @ 0x14
  2265  000074                     	ds	1
  2266  000075                     ?_printf:
  2267                           	opt stack 0
  2268  000075                     LCD_FillRectangle@i:
  2269                           	opt stack 0
  2270  000075                     LED_Set@pLED:
  2271                           	opt stack 0
  2272  000075                     irobot_query_and_update@packetIDs:
  2273                           	opt stack 0
  2274  000075                     printf@f:
  2275                           	opt stack 0
  2276  000075                     PortProperty_Valid@Errors:
  2277                           	opt stack 0
  2278                           
  2279                           ; 16 bytes @ 0x15
  2280  000075                     	ds	1
  2281  000076                     ??___fldiv:
  2282  000076                     LCD_FillRectangle@j:
  2283                           	opt stack 0
  2284  000076                     Port_TogglePin@pPin:
  2285                           	opt stack 0
  2286  000076                     HMI_SetNumber@pInput:
  2287                           	opt stack 0
  2288  000076                     Timer2_Init@pCPUClock:
  2289                           	opt stack 0
  2290                           
  2291                           ; 4 bytes @ 0x16
  2292  000076                     	ds	1
  2293  000077                     Port_TogglePin@Value:
  2294                           	opt stack 0
  2295  000077                     irobot_query_and_update@streamSize:
  2296                           	opt stack 0
  2297  000077                     Timer0_Init@DIVIDE:
  2298                           	opt stack 0
  2299                           
  2300                           ; 4 bytes @ 0x17
  2301  000077                     	ds	1
  2302  000078                     LED_Toggle@pLED:
  2303                           	opt stack 0
  2304  000078                     irobot_query_and_update@numberOfPacketRequests:
  2305                           	opt stack 0
  2306  000078                     irobot_move@isScript:
  2307                           	opt stack 0
  2308  000078                     LCD_DrawField@pSize:
  2309                           	opt stack 0
  2310                           
  2311                           ; 4 bytes @ 0x18
  2312  000078                     	ds	1
  2313  000079                     Event_DIPSwitch@pState:
  2314                           	opt stack 0
  2315  000079                     Event_TestButton@pState:
  2316                           	opt stack 0
  2317  000079                     irobot_query_and_update@packetVariable:
  2318                           	opt stack 0
  2319  000079                     irobot_stop_motion@isScript:
  2320                           	opt stack 0
  2321  000079                     irobot_move_straight@straightSpeed:
  2322                           	opt stack 0
  2323                           
  2324                           ; 2 bytes @ 0x19
  2325  000079                     	ds	1
  2326  00007A                     Event_DIPSwitch@Bar:
  2327                           	opt stack 0
  2328  00007A                     irobot_query_and_update@j:
  2329                           	opt stack 0
  2330  00007A                     ___fldiv@sign:
  2331                           	opt stack 0
  2332  00007A                     Timer2_Init@DIVIDE:
  2333                           	opt stack 0
  2334                           
  2335                           ; 4 bytes @ 0x1A
  2336  00007A                     	ds	1
  2337  00007B                     irobot_query_and_update@startIndex:
  2338                           	opt stack 0
  2339  00007B                     Button_Poll@pButton:
  2340                           	opt stack 0
  2341  00007B                     Motor_Speed@pMotor:
  2342                           	opt stack 0
  2343  00007B                     ___fldiv@rem:
  2344                           	opt stack 0
  2345                           
  2346                           ; 4 bytes @ 0x1B
  2347  00007B                     	ds	1
  2348  00007C                     ??_LCD_DrawField:
  2349  00007C                     irobot_query_and_update@i:
  2350                           	opt stack 0
  2351                           
  2352                           ; 1 bytes @ 0x1C
  2353  00007C                     	ds	1
  2354  00007D                     ??_printf:
  2355  00007D                     Button_Poll@pIncrement:
  2356                           	opt stack 0
  2357  00007D                     Motor_Speed@pFrequency:
  2358                           	opt stack 0
  2359  00007D                     irobot_rotate@rotateAngle:
  2360                           	opt stack 0
  2361                           
  2362                           ; 2 bytes @ 0x1D
  2363  00007D                     	ds	1
  2364  00007E                     ??_Button_Poll:
  2365  00007E                     printf@prec:
  2366                           	opt stack 0
  2367  00007E                     LCD_DrawField@count:
  2368                           	opt stack 0
  2369                           
  2370                           ; 2 bytes @ 0x1E
  2371  00007E                     	ds	1
  2372  00007F                     printf@flag:
  2373                           	opt stack 0
  2374  00007F                     irobot_rotate@rotateSpeed:
  2375                           	opt stack 0
  2376  00007F                     ___fldiv@new_exp:
  2377                           	opt stack 0
  2378                           
  2379                           ; 2 bytes @ 0x1F
  2380  00007F                     	ds	1
  2381  000080                     LCD_DrawField@xmax:
  2382                           	opt stack 0
  2383  000080                     printf@ap:
  2384                           	opt stack 0
  2385                           
  2386                           ; 2 bytes @ 0x20
  2387  000080                     	ds	1
  2388  000081                     ??_irobot_rotate:
  2389  000081                     LCD_DrawField@ymax:
  2390                           	opt stack 0
  2391  000081                     ___fldiv@grs:
  2392                           	opt stack 0
  2393                           
  2394                           ; 4 bytes @ 0x21
  2395  000081                     	ds	1
  2396  000082                     LCD_DrawField@i:
  2397                           	opt stack 0
  2398  000082                     irobot_rotate@isScript:
  2399                           	opt stack 0
  2400  000082                     Port_Set@TypeRequired:
  2401                           	opt stack 0
  2402  000082                     printf@val:
  2403                           	opt stack 0
  2404                           
  2405                           ; 2 bytes @ 0x22
  2406  000082                     	ds	1
  2407  000083                     ??_Console_Render:
  2408  000083                     Button_Poll@Pin:
  2409                           	opt stack 0
  2410  000083                     irobot_rotate@angleTotal:
  2411                           	opt stack 0
  2412                           
  2413                           ; 2 bytes @ 0x23
  2414  000083                     	ds	1
  2415  000084                     printf@c:
  2416                           	opt stack 0
  2417  000084                     Port_Set@TypeActual:
  2418                           	opt stack 0
  2419                           
  2420                           ; 2 bytes @ 0x24
  2421  000084                     	ds	1
  2422  000085                     PortProperty_Valid@Pair:
  2423                           	opt stack 0
  2424  000085                     Console_Render@temp:
  2425                           	opt stack 0
  2426  000085                     ___fldiv@bexp:
  2427                           	opt stack 0
  2428                           
  2429                           ; 1 bytes @ 0x25
  2430  000085                     	ds	1
  2431  000086                     Port_Set@Type:
  2432                           	opt stack 0
  2433  000086                     ___fldiv@aexp:
  2434                           	opt stack 0
  2435  000086                     Port_CheckPairType@pInput:
  2436                           	opt stack 0
  2437  000086                     Port_SetPinType@pInput:
  2438                           	opt stack 0
  2439  000086                     Console_Render@lCursor:
  2440                           	opt stack 0
  2441                           
  2442                           ; 4 bytes @ 0x26
  2443  000086                     	ds	1
  2444  000087                     ?___flmul:
  2445                           	opt stack 0
  2446  000087                     ___flmul@b:
  2447                           	opt stack 0
  2448                           
  2449                           ; 4 bytes @ 0x27
  2450  000087                     	ds	1
  2451  000088                     Port_CheckPairType@pPair:
  2452                           	opt stack 0
  2453  000088                     Port_SetPinType@pPin:
  2454                           	opt stack 0
  2455                           
  2456                           ; 1 bytes @ 0x28
  2457  000088                     	ds	1
  2458  000089                     Port_CheckPairType@pDrive:
  2459                           	opt stack 0
  2460  000089                     Port_SetPinType@pType:
  2461                           	opt stack 0
  2462                           
  2463                           ; 1 bytes @ 0x29
  2464  000089                     	ds	1
  2465  00008A                     Port_CheckPairType@Pin1:
  2466                           	opt stack 0
  2467  00008A                     Port_SetPinType@Output:
  2468                           	opt stack 0
  2469  00008A                     Console_Render@x:
  2470                           	opt stack 0
  2471                           
  2472                           ; 1 bytes @ 0x2A
  2473  00008A                     	ds	1
  2474  00008B                     Port_CheckPairType@Pin2:
  2475                           	opt stack 0
  2476  00008B                     Console_Render@y:
  2477                           	opt stack 0
  2478  00008B                     Port_SetPinType@Props:
  2479                           	opt stack 0
  2480  00008B                     ___flmul@a:
  2481                           	opt stack 0
  2482                           
  2483                           ; 4 bytes @ 0x2B
  2484  00008B                     	ds	1
  2485  00008C                     Port_CheckPairType@Output:
  2486                           	opt stack 0
  2487  00008C                     mode2@dist:
  2488                           	opt stack 0
  2489                           
  2490                           ; 2 bytes @ 0x2C
  2491  00008C                     	ds	1
  2492  00008D                     LED_Init@pLED:
  2493                           	opt stack 0
  2494  00008D                     Port_CheckPairType@Props:
  2495                           	opt stack 0
  2496  00008D                     Motor_Init@pMotor:
  2497                           	opt stack 0
  2498  00008D                     SPI_Init@pClock:
  2499                           	opt stack 0
  2500                           
  2501                           ; 4 bytes @ 0x2D
  2502  00008D                     	ds	2
  2503  00008F                     ??___flmul:
  2504  00008F                     Port_CheckQuadType@pInput:
  2505                           	opt stack 0
  2506  00008F                     Motor_Init@pAddress:
  2507                           	opt stack 0
  2508                           
  2509                           ; 2 bytes @ 0x2F
  2510  00008F                     	ds	2
  2511  000091                     Port_CheckQuadType@pQuad:
  2512                           	opt stack 0
  2513  000091                     SPI_Init@pChannel:
  2514                           	opt stack 0
  2515                           
  2516                           ; 1 bytes @ 0x31
  2517  000091                     	ds	1
  2518  000092                     Port_CheckQuadType@pDrive:
  2519                           	opt stack 0
  2520  000092                     SPI_Init@pMode:
  2521                           	opt stack 0
  2522                           
  2523                           ; 1 bytes @ 0x32
  2524  000092                     	ds	1
  2525  000093                     Port_CheckQuadType@Pair1:
  2526                           	opt stack 0
  2527  000093                     ___flmul@sign:
  2528                           	opt stack 0
  2529  000093                     SPI_Init@pInput:
  2530                           	opt stack 0
  2531                           
  2532                           ; 2 bytes @ 0x33
  2533  000093                     	ds	1
  2534  000094                     Port_CheckQuadType@Pair2:
  2535                           	opt stack 0
  2536  000094                     ___flmul@aexp:
  2537                           	opt stack 0
  2538                           
  2539                           ; 1 bytes @ 0x34
  2540  000094                     	ds	1
  2541  000095                     ??_LCD_Init:
  2542  000095                     Port_CheckQuadType@Output:
  2543                           	opt stack 0
  2544  000095                     ___flmul@grs:
  2545                           	opt stack 0
  2546                           
  2547                           ; 4 bytes @ 0x35
  2548  000095                     	ds	1
  2549  000096                     Port_CheckPortType@pInput:
  2550                           	opt stack 0
  2551  000096                     Port_SetQuadType@pInput:
  2552                           	opt stack 0
  2553                           
  2554                           ; 2 bytes @ 0x36
  2555  000096                     	ds	1
  2556  000097                     LCD_Init@i:
  2557                           	opt stack 0
  2558                           
  2559                           ; 2 bytes @ 0x37
  2560  000097                     	ds	1
  2561  000098                     Port_CheckPortType@pDrive:
  2562                           	opt stack 0
  2563  000098                     Port_SetQuadType@pQuad:
  2564                           	opt stack 0
  2565                           
  2566                           ; 1 bytes @ 0x38
  2567  000098                     	ds	1
  2568  000099                     Port_CheckPortType@Output:
  2569                           	opt stack 0
  2570  000099                     Port_SetQuadType@pType:
  2571                           	opt stack 0
  2572  000099                     ___flmul@bexp:
  2573                           	opt stack 0
  2574                           
  2575                           ; 1 bytes @ 0x39
  2576  000099                     	ds	1
  2577  00009A                     Port_SetQuadType@Output:
  2578                           	opt stack 0
  2579  00009A                     Port_SetType@pInput:
  2580                           	opt stack 0
  2581  00009A                     ___flmul@prod:
  2582                           	opt stack 0
  2583                           
  2584                           ; 4 bytes @ 0x3A
  2585  00009A                     	ds	1
  2586  00009B                     Button_Init@pInput:
  2587                           	opt stack 0
  2588                           
  2589                           ; 2 bytes @ 0x3B
  2590  00009B                     	ds	1
  2591  00009C                     Port_SetType@pType:
  2592                           	opt stack 0
  2593                           
  2594                           ; 1 bytes @ 0x3C
  2595  00009C                     	ds	1
  2596  00009D                     ??_Port_SetType:
  2597  00009D                     Button_Init@pThreshold:
  2598                           	opt stack 0
  2599                           
  2600                           ; 2 bytes @ 0x3D
  2601  00009D                     	ds	1
  2602  00009E                     ___flmul@temp:
  2603                           	opt stack 0
  2604                           
  2605                           ; 2 bytes @ 0x3E
  2606  00009E                     	ds	1
  2607  00009F                     Port_SetType@Output:
  2608                           	opt stack 0
  2609  00009F                     Button_Init@pInitIO:
  2610                           	opt stack 0
  2611                           
  2612                           ; 3 bytes @ 0x3F
  2613  00009F                     	ds	1
  2614  0000A0                     ?_ADC_Voltage:
  2615                           	opt stack 0
  2616  0000A0                     Port_Init@pInput:
  2617                           	opt stack 0
  2618  0000A0                     ADC_Voltage@pInput:
  2619                           	opt stack 0
  2620                           
  2621                           ; 2 bytes @ 0x40
  2622  0000A0                     	ds	2
  2623  0000A2                     Port_Init@pPort:
  2624                           	opt stack 0
  2625  0000A2                     Button_Init@pGetState:
  2626                           	opt stack 0
  2627                           
  2628                           ; 3 bytes @ 0x42
  2629  0000A2                     	ds	1
  2630  0000A3                     ??_Port_Init:
  2631                           
  2632                           ; 1 bytes @ 0x43
  2633  0000A3                     	ds	1
  2634  0000A4                     ??_ADC_Voltage:
  2635                           
  2636                           ; 1 bytes @ 0x44
  2637  0000A4                     	ds	1
  2638  0000A5                     Port_Init@i:
  2639                           	opt stack 0
  2640  0000A5                     Button_Init@pFunction:
  2641                           	opt stack 0
  2642                           
  2643                           ; 3 bytes @ 0x45
  2644  0000A5                     	ds	1
  2645  0000A6                     ADC_Voltage@max:
  2646                           	opt stack 0
  2647                           
  2648                           ; 4 bytes @ 0x46
  2649  0000A6                     	ds	2
  2650  0000A8                     HMI_Init@in:
  2651                           	opt stack 0
  2652                           
  2653                           ; 2 bytes @ 0x48
  2654  0000A8                     	ds	2
  2655  0000AA                     ADC_Voltage@ref:
  2656                           	opt stack 0
  2657                           
  2658                           ; 4 bytes @ 0x4A
  2659  0000AA                     	ds	4
  2660  0000AE                     ADC_Voltage@output:
  2661                           	opt stack 0
  2662                           
  2663                           ; 4 bytes @ 0x4E
  2664  0000AE                     	ds	4
  2665  0000B2                     ?___fltol:
  2666                           	opt stack 0
  2667  0000B2                     ___fltol@f1:
  2668                           	opt stack 0
  2669                           
  2670                           ; 4 bytes @ 0x52
  2671  0000B2                     	ds	4
  2672  0000B6                     ___fltol@sign1:
  2673                           	opt stack 0
  2674                           
  2675                           ; 1 bytes @ 0x56
  2676  0000B6                     	ds	1
  2677  0000B7                     ___fltol@exp1:
  2678                           	opt stack 0
  2679                           
  2680                           ; 1 bytes @ 0x57
  2681  0000B7                     	ds	1
  2682  0000B8                     ??_mode4:
  2683                           
  2684                           ; 1 bytes @ 0x58
  2685  0000B8                     	ds	1
  2686                           tblptru	equ	0xFF8
  2687                           tblptrh	equ	0xFF7
  2688                           tblptrl	equ	0xFF6
  2689                           tablat	equ	0xFF5
  2690                           postinc0	equ	0xFEE
  2691                           wreg	equ	0xFE8
  2692                           postdec1	equ	0xFE5
  2693                           fsr1h	equ	0xFE2
  2694                           fsr1l	equ	0xFE1
  2695                           
  2696                           	psect	cstackCOMRAM
  2697  000001                     __pcstackCOMRAM:
  2698                           	opt stack 0
  2699  000001                     i2Byte_SetBit@pInput:
  2700                           	opt stack 0
  2701  000001                     i2Byte_GetZone@pInput:
  2702                           	opt stack 0
  2703  000001                     i2delay_us@us:
  2704                           	opt stack 0
  2705  000001                     i2MXK_Queue@pCallback:
  2706                           	opt stack 0
  2707                           
  2708                           ; 3 bytes @ 0x0
  2709  000001                     	ds	2
  2710  000003                     i2Byte_SetBit@pBit:
  2711                           	opt stack 0
  2712  000003                     i2Byte_GetZone@pMax:
  2713                           	opt stack 0
  2714  000003                     i2delay_us@u:
  2715                           	opt stack 0
  2716                           
  2717                           ; 4 bytes @ 0x2
  2718  000003                     	ds	1
  2719  000004                     i2Byte_SetBit@pValue:
  2720                           	opt stack 0
  2721  000004                     i2Byte_GetZone@pChunk:
  2722                           	opt stack 0
  2723                           
  2724                           ; 1 bytes @ 0x3
  2725  000004                     	ds	1
  2726  000005                     ??i2_Byte_SetBit:
  2727  000005                     i2Byte_GetZone@pChunkSize:
  2728                           	opt stack 0
  2729                           
  2730                           ; 1 bytes @ 0x4
  2731  000005                     	ds	1
  2732  000006                     ??i2_Byte_GetZone:
  2733                           
  2734                           ; 1 bytes @ 0x5
  2735  000006                     	ds	1
  2736  000007                     i2Byte_GetZone@MASK:
  2737                           	opt stack 0
  2738  000007                     i2MXK_SwitchTo@CUR:
  2739                           	opt stack 0
  2740                           
  2741                           ; 1 bytes @ 0x6
  2742  000007                     	ds	1
  2743  000008                     i2Byte_GetZone@Offset:
  2744                           	opt stack 0
  2745  000008                     i2MXK_SwitchTo@pModule:
  2746                           	opt stack 0
  2747                           
  2748                           ; 1 bytes @ 0x7
  2749  000008                     	ds	1
  2750  000009                     i2Byte_GetZone@Output:
  2751                           	opt stack 0
  2752                           
  2753                           ; 1 bytes @ 0x8
  2754  000009                     	ds	1
  2755  00000A                     i2Byte_GetPair@pInput:
  2756                           	opt stack 0
  2757                           
  2758                           ; 2 bytes @ 0x9
  2759  00000A                     	ds	2
  2760  00000C                     i2Byte_GetPair@pPair:
  2761                           	opt stack 0
  2762                           
  2763                           ; 1 bytes @ 0xB
  2764  00000C                     	ds	1
  2765  00000D                     i2Word_GetPair@pInput:
  2766                           	opt stack 0
  2767                           
  2768                           ; 2 bytes @ 0xC
  2769  00000D                     	ds	2
  2770  00000F                     i2Word_GetPair@pPair:
  2771                           	opt stack 0
  2772                           
  2773                           ; 1 bytes @ 0xE
  2774  00000F                     	ds	1
  2775  000010                     i2Port_SetPin@pInput:
  2776                           	opt stack 0
  2777                           
  2778                           ; 2 bytes @ 0xF
  2779  000010                     	ds	2
  2780  000012                     i2Port_SetPin@pPin:
  2781                           	opt stack 0
  2782                           
  2783                           ; 1 bytes @ 0x11
  2784  000012                     	ds	1
  2785  000013                     i2Port_SetPin@pValue:
  2786                           	opt stack 0
  2787                           
  2788                           ; 1 bytes @ 0x12
  2789  000013                     	ds	1
  2790  000014                     i2Port_SetPin@Type:
  2791                           	opt stack 0
  2792                           
  2793                           ; 1 bytes @ 0x13
  2794  000014                     	ds	1
  2795  000015                     
  2796                           ; 1 bytes @ 0x14
  2797  000015                     	ds	2
  2798  000017                     ??_ISR_Function:
  2799                           
  2800                           ; 1 bytes @ 0x16
  2801  000017                     	ds	18
  2802                           tblptru	equ	0xFF8
  2803                           tblptrh	equ	0xFF7
  2804                           tblptrl	equ	0xFF6
  2805                           tablat	equ	0xFF5
  2806                           postinc0	equ	0xFEE
  2807                           wreg	equ	0xFE8
  2808                           postdec1	equ	0xFE5
  2809                           fsr1h	equ	0xFE2
  2810                           fsr1l	equ	0xFE1
  2811                           
  2812 ;;
  2813 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2814 ;;
  2815 ;; *************** function _main *****************
  2816 ;; Defined at:
  2817 ;;		line 324 in file "main.c"
  2818 ;; Parameters:    Size  Location     Type
  2819 ;;		None
  2820 ;; Auto vars:     Size  Location     Type
  2821 ;;		None
  2822 ;; Return value:  Size  Location     Type
  2823 ;;                  1    wreg      void 
  2824 ;; Registers used:
  2825 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2826 ;; Tracked objects:
  2827 ;;		On entry : 0/0
  2828 ;;		On exit  : 0/0
  2829 ;;		Unchanged: 0/0
  2830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2833 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2834 ;;      Totals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2835 ;;Total ram usage:        2 bytes
  2836 ;; Hardware stack levels required when called:   18
  2837 ;; This function calls:
  2838 ;;		_Console_Render
  2839 ;;		_HMI_Poll
  2840 ;;		_MXK_Dequeue
  2841 ;;		_MXK_Release
  2842 ;;		_MXK_SwitchTo
  2843 ;;		_getMode
  2844 ;;		_init
  2845 ;;		_mode1
  2846 ;;		_mode2
  2847 ;;		_mode3
  2848 ;;		_mode4
  2849 ;;		_printf
  2850 ;; This function is called by:
  2851 ;;		Startup code after reset
  2852 ;; This function uses a non-reentrant model
  2853 ;;
  2854                           
  2855                           	psect	text0
  2856  0139A8                     __ptext0:
  2857                           	opt stack 0
  2858  0139A8                     _main:
  2859                           	opt stack 13
  2860                           
  2861                           ;main.c: 325: init();
  2862                           
  2863                           ;incstack = 0
  2864  0139A8  EC9F  F0A3         	call	_init	;wreg free
  2865  0139AC                     l2391:
  2866                           
  2867                           ;main.c: 328: getMode();
  2868  0139AC  EC1C  F0A0         	call	_getMode	;wreg free
  2869                           
  2870                           ;main.c: 329: switch (mode) {
  2871  0139B0  D053               	goto	l2392
  2872  0139B2                     
  2873                           ;main.c: 331: mode1();
  2874  0139B2  EC62  F084         	call	_mode1	;wreg free
  2875                           
  2876                           ;main.c: 332: break;
  2877  0139B6  D7FA               	goto	l2391
  2878  0139B8                     
  2879                           ;main.c: 334: mode2();
  2880  0139B8  EC26  F09A         	call	_mode2	;wreg free
  2881                           
  2882                           ;main.c: 335: break;
  2883  0139BC  D7F7               	goto	l2391
  2884  0139BE                     
  2885                           ;main.c: 337: mode3();
  2886  0139BE  EC11  F0B2         	call	_mode3	;wreg free
  2887                           
  2888                           ;main.c: 338: break;
  2889  0139C2  D7F4               	goto	l2391
  2890  0139C4                     
  2891                           ;main.c: 340: mode4();
  2892  0139C4  EC6E  F086         	call	_mode4	;wreg free
  2893                           
  2894                           ;main.c: 341: break;
  2895  0139C8  D7F1               	goto	l2391
  2896  0139CA                     
  2897                           ;main.c: 343: if (MXK_SwitchTo(eMXK_HMI)) {
  2898  0139CA  0E01               	movlw	1
  2899  0139CC  ECB2  F0AE         	call	_MXK_SwitchTo
  2900  0139D0  0900               	iorlw	0
  2901  0139D2  B4D8               	btfsc	status,2,c
  2902  0139D4  D7EB               	goto	l2391
  2903                           
  2904                           ;main.c: 344: printf("%c", (char)35);
  2905  0139D6  0EFB               	movlw	low STR_1
  2906  0139D8  0100               	movlb	0	; () banked
  2907  0139DA  6F75               	movwf	printf@f& (0+255),b
  2908  0139DC  0EFF               	movlw	high STR_1
  2909  0139DE  0100               	movlb	0	; () banked
  2910  0139E0  6F76               	movwf	(printf@f+1)& (0+255),b
  2911  0139E2  0E00               	movlw	0
  2912  0139E4  0100               	movlb	0	; () banked
  2913  0139E6  6F78               	movwf	(?_printf+3)& (0+255),b
  2914  0139E8  0E23               	movlw	35
  2915  0139EA  6F77               	movwf	(?_printf+2)& (0+255),b
  2916  0139EC  EC7E  F092         	call	_printf	;wreg free
  2917                           
  2918                           ;main.c: 345: printf("Please select mode.\n");
  2919  0139F0  0ED8               	movlw	low STR_10
  2920  0139F2  0100               	movlb	0	; () banked
  2921  0139F4  6F75               	movwf	printf@f& (0+255),b
  2922  0139F6  0EFF               	movlw	high STR_10
  2923  0139F8  0100               	movlb	0	; () banked
  2924  0139FA  6F76               	movwf	(printf@f+1)& (0+255),b
  2925  0139FC  EC7E  F092         	call	_printf	;wreg free
  2926                           
  2927                           ;main.c: 346: printf("                   \n");
  2928  013A00  0EC3               	movlw	low STR_11
  2929  013A02  0100               	movlb	0	; () banked
  2930  013A04  6F75               	movwf	printf@f& (0+255),b
  2931  013A06  0EFF               	movlw	high STR_11
  2932  013A08  0100               	movlb	0	; () banked
  2933  013A0A  6F76               	movwf	(printf@f+1)& (0+255),b
  2934  013A0C  EC7E  F092         	call	_printf	;wreg free
  2935                           
  2936                           ;main.c: 347: printf("                   \n");
  2937  013A10  0EC3               	movlw	low STR_11
  2938  013A12  0100               	movlb	0	; () banked
  2939  013A14  6F75               	movwf	printf@f& (0+255),b
  2940  013A16  0EFF               	movlw	high STR_11
  2941  013A18  0100               	movlb	0	; () banked
  2942  013A1A  6F76               	movwf	(printf@f+1)& (0+255),b
  2943  013A1C  EC7E  F092         	call	_printf	;wreg free
  2944                           
  2945                           ;main.c: 348: printf("                   \n");
  2946  013A20  0EC3               	movlw	low STR_11
  2947  013A22  0100               	movlb	0	; () banked
  2948  013A24  6F75               	movwf	printf@f& (0+255),b
  2949  013A26  0EFF               	movlw	high STR_11
  2950  013A28  0100               	movlb	0	; () banked
  2951  013A2A  6F76               	movwf	(printf@f+1)& (0+255),b
  2952  013A2C  EC7E  F092         	call	_printf	;wreg free
  2953                           
  2954                           ;main.c: 349: printf("                   \n");
  2955  013A30  0EC3               	movlw	low STR_11
  2956  013A32  0100               	movlb	0	; () banked
  2957  013A34  6F75               	movwf	printf@f& (0+255),b
  2958  013A36  0EFF               	movlw	high STR_11
  2959  013A38  0100               	movlb	0	; () banked
  2960  013A3A  6F76               	movwf	(printf@f+1)& (0+255),b
  2961  013A3C  EC7E  F092         	call	_printf	;wreg free
  2962                           
  2963                           ;main.c: 350: Console_Render();
  2964  013A40  EC92  F08F         	call	_Console_Render	;wreg free
  2965                           
  2966                           ;main.c: 351: HMI_Poll();
  2967  013A44  ECAA  F0A9         	call	_HMI_Poll	;wreg free
  2968                           
  2969                           ;main.c: 352: if (MXK_Release())
  2970  013A48  ECF5  F0B1         	call	_MXK_Release	;wreg free
  2971  013A4C  0900               	iorlw	0
  2972  013A4E  B4D8               	btfsc	status,2,c
  2973  013A50  D7AD               	goto	l2391
  2974                           
  2975                           ;main.c: 353: MXK_Dequeue();
  2976  013A52  EC32  F0AF         	call	_MXK_Dequeue	;wreg free
  2977                           
  2978                           ;main.c: 354: }
  2979                           ;main.c: 355: }
  2980  013A56  D7AA               	goto	l2391
  2981  013A58                     l2392:
  2982  013A58  C0C8  F3F8         	movff	_mode,??_main
  2983  013A5C  C0C9  F3F9         	movff	_mode+1,??_main+1
  2984                           
  2985                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2986                           ; Switch size 1, requested type "space"
  2987                           ; Number of cases is 1, Range of values is 0 to 0
  2988                           ; switch strategies available:
  2989                           ; Name         Instructions Cycles
  2990                           ; simple_byte            4     3 (average)
  2991                           ;	Chosen strategy is simple_byte
  2992  013A60  0103               	movlb	3	; () banked
  2993  013A62  51F9               	movf	(??_main+1)& (0+255),w,b
  2994  013A64  0A00               	xorlw	0	; case 0
  2995  013A66  A4D8               	btfss	status,2,c
  2996  013A68  D7B0               	goto	l2398
  2997                           
  2998                           ; BSR set to: 3
  2999                           ; Switch size 1, requested type "space"
  3000                           ; Number of cases is 4, Range of values is 1 to 4
  3001                           ; switch strategies available:
  3002                           ; Name         Instructions Cycles
  3003                           ; simple_byte           13     7 (average)
  3004                           ;	Chosen strategy is simple_byte
  3005  013A6A  0103               	movlb	3	; () banked
  3006  013A6C  51F8               	movf	??_main& (0+255),w,b
  3007  013A6E  0A01               	xorlw	1	; case 1
  3008  013A70  B4D8               	btfsc	status,2,c
  3009  013A72  D79F               	goto	l2393
  3010  013A74  0A03               	xorlw	3	; case 2
  3011  013A76  B4D8               	btfsc	status,2,c
  3012  013A78  D79F               	goto	l2395
  3013  013A7A  0A01               	xorlw	1	; case 3
  3014  013A7C  B4D8               	btfsc	status,2,c
  3015  013A7E  D79F               	goto	l2396
  3016  013A80  0A07               	xorlw	7	; case 4
  3017  013A82  B4D8               	btfsc	status,2,c
  3018  013A84  D79F               	goto	l2397
  3019  013A86  D7A1               	goto	l2398
  3020  013A88                     __end_of_main:
  3021                           	opt stack 0
  3022                           tblptru	equ	0xFF8
  3023                           tblptrh	equ	0xFF7
  3024                           tblptrl	equ	0xFF6
  3025                           tablat	equ	0xFF5
  3026                           postinc0	equ	0xFEE
  3027                           wreg	equ	0xFE8
  3028                           postdec1	equ	0xFE5
  3029                           fsr1h	equ	0xFE2
  3030                           fsr1l	equ	0xFE1
  3031                           status	equ	0xFD8
  3032                           
  3033 ;; *************** function _mode4 *****************
  3034 ;; Defined at:
  3035 ;;		line 250 in file "main.c"
  3036 ;; Parameters:    Size  Location     Type
  3037 ;;		None
  3038 ;; Auto vars:     Size  Location     Type
  3039 ;;		None
  3040 ;; Return value:  Size  Location     Type
  3041 ;;                  1    wreg      void 
  3042 ;; Registers used:
  3043 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3044 ;; Tracked objects:
  3045 ;;		On entry : 0/0
  3046 ;;		On exit  : 0/0
  3047 ;;		Unchanged: 0/0
  3048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3050 ;;      Locals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3051 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3052 ;;      Totals:         0       1       0       0       4       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3053 ;;Total ram usage:        5 bytes
  3054 ;; Hardware stack levels used:    1
  3055 ;; Hardware stack levels required when called:   16
  3056 ;; This function calls:
  3057 ;;		_ADC_Start
  3058 ;;		_ADC_Voltage
  3059 ;;		_Console_Render
  3060 ;;		_HMI_Poll
  3061 ;;		_HMI_Render
  3062 ;;		_HMI_SetNumber
  3063 ;;		_MXK_Dequeue
  3064 ;;		_MXK_Release
  3065 ;;		_MXK_SwitchTo
  3066 ;;		_Motor_Move
  3067 ;;		_Motor_Speed
  3068 ;;		___fldiv
  3069 ;;		___flmul
  3070 ;;		___fltol
  3071 ;;		___xxtofl
  3072 ;;		_irobot_move_straight
  3073 ;;		_irobot_rotate_to
  3074 ;;		_irobot_song_play
  3075 ;;		_irobot_stop_motion
  3076 ;;		_printf
  3077 ;;		_update_angle
  3078 ;;		_update_bump_and_cliff
  3079 ;;		_update_distance
  3080 ;; This function is called by:
  3081 ;;		_main
  3082 ;; This function uses a non-reentrant model
  3083 ;;
  3084                           
  3085                           	psect	text1
  3086  010CDC                     __ptext1:
  3087                           	opt stack 0
  3088  010CDC                     _mode4:
  3089                           	opt stack 14
  3090                           
  3091                           ;main.c: 251: update_bump_and_cliff();
  3092                           
  3093                           ; BSR set to: 3
  3094                           ;incstack = 0
  3095  010CDC  ECAD  F0AF         	call	_update_bump_and_cliff	;wreg free
  3096                           
  3097                           ;main.c: 252: update_distance();
  3098  010CE0  EC9F  F0B2         	call	_update_distance	;wreg free
  3099                           
  3100                           ;main.c: 253: update_angle();
  3101  010CE4  ECA8  F0B2         	call	_update_angle	;wreg free
  3102                           
  3103                           ;main.c: 257: if (iRBumpLeft || iRBumpRight) {
  3104  010CE8  0100               	movlb	0	; () banked
  3105  010CEA  51E0               	movf	_iRBumpLeft& (0+255),w,b
  3106  010CEC  A4D8               	btfss	status,2,c
  3107  010CEE  D004               	goto	u13860
  3108                           
  3109                           ; BSR set to: 0
  3110  010CF0  0100               	movlb	0	; () banked
  3111  010CF2  51E1               	movf	_iRBumpRight& (0+255),w,b
  3112  010CF4  B4D8               	btfsc	status,2,c
  3113  010CF6  D006               	goto	l2361
  3114  010CF8                     u13860:
  3115                           
  3116                           ; BSR set to: 0
  3117                           ;main.c: 258: irobot_song_play(0);
  3118                           
  3119                           ; BSR set to: 0
  3120  010CF8  0E00               	movlw	0
  3121  010CFA  EC8B  F0B2         	call	_irobot_song_play
  3122                           
  3123                           ;main.c: 259: irobot_stop_motion(0);
  3124  010CFE  0E00               	movlw	0
  3125  010D00  EC27  F0AE         	call	_irobot_stop_motion
  3126  010D04                     l2361:
  3127                           
  3128                           ;main.c: 260: }
  3129                           ;main.c: 261: if (angleTotal > 83) {
  3130  010D04  0100               	movlb	0	; () banked
  3131  010D06  BFCD               	btfsc	(_angleTotal+1)& (0+255),7,b
  3132  010D08  D00B               	goto	l2364
  3133  010D0A  0100               	movlb	0	; () banked
  3134  010D0C  51CD               	movf	(_angleTotal+1)& (0+255),w,b
  3135  010D0E  E105               	bnz	u13870
  3136  010D10  0E54               	movlw	84
  3137  010D12  0100               	movlb	0	; () banked
  3138  010D14  5DCC               	subwf	_angleTotal& (0+255),w,b
  3139  010D16  A0D8               	btfss	status,0,c
  3140  010D18  D003               	goto	l2364
  3141  010D1A                     u13870:
  3142                           
  3143                           ; BSR set to: 0
  3144                           ;main.c: 262: irobot_stop_motion(0);
  3145  010D1A  0E00               	movlw	0
  3146  010D1C  EC27  F0AE         	call	_irobot_stop_motion
  3147  010D20                     l2364:
  3148                           
  3149                           ;main.c: 263: }
  3150                           ;main.c: 265: if (MXK_SwitchTo(eMXK_HMI)) {
  3151  010D20  0E01               	movlw	1
  3152  010D22  ECB2  F0AE         	call	_MXK_SwitchTo
  3153  010D26  0900               	iorlw	0
  3154  010D28  B4D8               	btfsc	status,2,c
  3155  010D2A  D029               	goto	l2366
  3156                           
  3157                           ;main.c: 266: printf("%c", (char)35);
  3158  010D2C  0EFB               	movlw	low STR_1
  3159  010D2E  0100               	movlb	0	; () banked
  3160  010D30  6F75               	movwf	printf@f& (0+255),b
  3161  010D32  0EFF               	movlw	high STR_1
  3162  010D34  0100               	movlb	0	; () banked
  3163  010D36  6F76               	movwf	(printf@f+1)& (0+255),b
  3164  010D38  0E00               	movlw	0
  3165  010D3A  0100               	movlb	0	; () banked
  3166  010D3C  6F78               	movwf	(?_printf+3)& (0+255),b
  3167  010D3E  0E23               	movlw	35
  3168  010D40  6F77               	movwf	(?_printf+2)& (0+255),b
  3169  010D42  EC7E  F092         	call	_printf	;wreg free
  3170                           
  3171                           ;main.c: 267: printf("Closest Wall:%u\nClosest Angle:%u\n", MinDist, stepsToMinDegrees);
  3172  010D46  0EA1               	movlw	low STR_8
  3173  010D48  0100               	movlb	0	; () banked
  3174  010D4A  6F75               	movwf	printf@f& (0+255),b
  3175  010D4C  0EFF               	movlw	high STR_8
  3176  010D4E  0100               	movlb	0	; () banked
  3177  010D50  6F76               	movwf	(printf@f+1)& (0+255),b
  3178  010D52  C0FB  F077         	movff	_MinDist,?_printf+2
  3179  010D56  C0FC  F078         	movff	_MinDist+1,?_printf+3
  3180  010D5A  C300  F079         	movff	_stepsToMinDegrees,?_printf+4
  3181  010D5E  C301  F07A         	movff	_stepsToMinDegrees+1,?_printf+5
  3182  010D62  C302  F07B         	movff	_stepsToMinDegrees+2,?_printf+6
  3183  010D66  C303  F07C         	movff	_stepsToMinDegrees+3,?_printf+7
  3184  010D6A  EC7E  F092         	call	_printf	;wreg free
  3185                           
  3186                           ;main.c: 268: Console_Render();
  3187  010D6E  EC92  F08F         	call	_Console_Render	;wreg free
  3188                           
  3189                           ;main.c: 269: if (MXK_Release())
  3190  010D72  ECF5  F0B1         	call	_MXK_Release	;wreg free
  3191  010D76  0900               	iorlw	0
  3192  010D78  A4D8               	btfss	status,2,c
  3193                           
  3194                           ;main.c: 270: MXK_Dequeue();
  3195  010D7A  EC32  F0AF         	call	_MXK_Dequeue	;wreg free
  3196  010D7E                     l2366:
  3197                           
  3198                           ;main.c: 271: }
  3199                           ;main.c: 272: HMI_Poll();
  3200  010D7E  ECAA  F0A9         	call	_HMI_Poll	;wreg free
  3201                           
  3202                           ;main.c: 273: StepRotate = 0;
  3203  010D82  0E00               	movlw	0
  3204  010D84  0100               	movlb	0	; () banked
  3205  010D86  6FC7               	movwf	(_StepRotate+1)& (0+255),b
  3206  010D88  0E00               	movlw	0
  3207  010D8A  6FC6               	movwf	_StepRotate& (0+255),b
  3208                           
  3209                           ; BSR set to: 0
  3210                           ;main.c: 274: MinDist = 1000;
  3211  010D8C  0E03               	movlw	3
  3212  010D8E  0100               	movlb	0	; () banked
  3213  010D90  6FFC               	movwf	(_MinDist+1)& (0+255),b
  3214  010D92  0EE8               	movlw	232
  3215  010D94  6FFB               	movwf	_MinDist& (0+255),b
  3216                           
  3217                           ; BSR set to: 0
  3218                           ;main.c: 275: Stepstomin = 0;
  3219  010D96  0E00               	movlw	0
  3220  010D98  0100               	movlb	0	; () banked
  3221  010D9A  6FC5               	movwf	(_Stepstomin+1)& (0+255),b
  3222  010D9C  0E00               	movlw	0
  3223  010D9E  6FC4               	movwf	_Stepstomin& (0+255),b
  3224                           
  3225                           ; BSR set to: 0
  3226                           ;main.c: 276: stepsToMinDegrees = ((float) Stepstomin / 400) * 360;
  3227  010DA0  0E00               	movlw	0
  3228  010DA2  0100               	movlb	0	; () banked
  3229  010DA4  6F72               	movwf	___fldiv@a& (0+255),b
  3230  010DA6  0E00               	movlw	0
  3231  010DA8  6F73               	movwf	(___fldiv@a+1)& (0+255),b
  3232  010DAA  0EC8               	movlw	200
  3233  010DAC  6F74               	movwf	(___fldiv@a+2)& (0+255),b
  3234  010DAE  0E43               	movlw	67
  3235  010DB0  6F75               	movwf	(___fldiv@a+3)& (0+255),b
  3236  010DB2  C0C4  F060         	movff	_Stepstomin,___xxtofl@val
  3237  010DB6  C0C5  F061         	movff	_Stepstomin+1,___xxtofl@val+1
  3238  010DBA  0100               	movlb	0	; () banked
  3239  010DBC  0E00               	movlw	0
  3240  010DBE  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
  3241  010DC0  0EFF               	movlw	-1
  3242  010DC2  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
  3243  010DC4  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
  3244  010DC6  0E01               	movlw	1
  3245  010DC8  EC97  F091         	call	___xxtofl
  3246  010DCC  C060  F06E         	movff	?___xxtofl,___fldiv@b
  3247  010DD0  C061  F06F         	movff	?___xxtofl+1,___fldiv@b+1
  3248  010DD4  C062  F070         	movff	?___xxtofl+2,___fldiv@b+2
  3249  010DD8  C063  F071         	movff	?___xxtofl+3,___fldiv@b+3
  3250  010DDC  EC53  F088         	call	___fldiv	;wreg free
  3251  010DE0  C06E  F087         	movff	?___fldiv,___flmul@b
  3252  010DE4  C06F  F088         	movff	?___fldiv+1,___flmul@b+1
  3253  010DE8  C070  F089         	movff	?___fldiv+2,___flmul@b+2
  3254  010DEC  C071  F08A         	movff	?___fldiv+3,___flmul@b+3
  3255  010DF0  0E00               	movlw	0
  3256  010DF2  0100               	movlb	0	; () banked
  3257  010DF4  6F8B               	movwf	___flmul@a& (0+255),b
  3258  010DF6  0E00               	movlw	0
  3259  010DF8  6F8C               	movwf	(___flmul@a+1)& (0+255),b
  3260  010DFA  0EB4               	movlw	180
  3261  010DFC  6F8D               	movwf	(___flmul@a+2)& (0+255),b
  3262  010DFE  0E43               	movlw	67
  3263  010E00  6F8E               	movwf	(___flmul@a+3)& (0+255),b
  3264  010E02  EC00  F080         	call	___flmul	;wreg free
  3265  010E06  C087  F300         	movff	?___flmul,_stepsToMinDegrees
  3266  010E0A  C088  F301         	movff	?___flmul+1,_stepsToMinDegrees+1
  3267  010E0E  C089  F302         	movff	?___flmul+2,_stepsToMinDegrees+2
  3268  010E12  C08A  F303         	movff	?___flmul+3,_stepsToMinDegrees+3
  3269                           
  3270                           ;main.c: 277: IRValue = 0;
  3271  010E16  0E00               	movlw	0
  3272  010E18  0100               	movlb	0	; () banked
  3273  010E1A  6FC3               	movwf	(_IRValue+1)& (0+255),b
  3274  010E1C  0E00               	movlw	0
  3275  010E1E  6FC2               	movwf	_IRValue& (0+255),b
  3276                           
  3277                           ; BSR set to: 0
  3278                           ;main.c: 278: TimerX = 8;
  3279  010E20  0E00               	movlw	0
  3280  010E22  0100               	movlb	0	; () banked
  3281  010E24  6FFA               	movwf	(_TimerX+1)& (0+255),b
  3282  010E26  0E08               	movlw	8
  3283  010E28  6FF9               	movwf	_TimerX& (0+255),b
  3284                           
  3285                           ;main.c: 279: while (StepRotate < 400) {
  3286  010E2A  D0F8               	goto	u13980
  3287  010E2C                     
  3288                           ; BSR set to: 0
  3289                           ;main.c: 280: StepRotate++;
  3290                           
  3291                           ; BSR set to: 0
  3292  010E2C  0100               	movlb	0	; () banked
  3293  010E2E  4BC6               	infsnz	_StepRotate& (0+255),f,b
  3294  010E30  2BC7               	incf	(_StepRotate+1)& (0+255),f,b
  3295                           
  3296                           ; BSR set to: 0
  3297                           ;main.c: 281: ADC_Start(&ADC_AN0);
  3298  010E32  0EF4               	movlw	low _ADC_AN0
  3299  010E34  0100               	movlb	0	; () banked
  3300  010E36  6F62               	movwf	ADC_Start@pInput& (0+255),b
  3301  010E38  0E00               	movlw	high _ADC_AN0
  3302  010E3A  0100               	movlb	0	; () banked
  3303  010E3C  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
  3304  010E3E  EC87  F0A7         	call	_ADC_Start	;wreg free
  3305                           
  3306                           ;main.c: 282: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3307  010E42  0EF4               	movlw	low _ADC_AN0
  3308  010E44  0100               	movlb	0	; () banked
  3309  010E46  6FA0               	movwf	ADC_Voltage@pInput& (0+255),b
  3310  010E48  0E00               	movlw	high _ADC_AN0
  3311  010E4A  0100               	movlb	0	; () banked
  3312  010E4C  6FA1               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  3313  010E4E  EC44  F09D         	call	_ADC_Voltage	;wreg free
  3314  010E52  C0A0  F3F4         	movff	?_ADC_Voltage,_mode4$15584
  3315  010E56  C0A1  F3F5         	movff	?_ADC_Voltage+1,_mode4$15584+1
  3316  010E5A  C0A2  F3F6         	movff	?_ADC_Voltage+2,_mode4$15584+2
  3317  010E5E  C0A3  F3F7         	movff	?_ADC_Voltage+3,_mode4$15584+3
  3318                           
  3319                           ;main.c: 282: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3320  010E62  C3F4  F072         	movff	_mode4$15584,___fldiv@a
  3321  010E66  C3F5  F073         	movff	_mode4$15584+1,___fldiv@a+1
  3322  010E6A  C3F6  F074         	movff	_mode4$15584+2,___fldiv@a+2
  3323  010E6E  C3F7  F075         	movff	_mode4$15584+3,___fldiv@a+3
  3324  010E72  0E00               	movlw	0
  3325  010E74  0100               	movlb	0	; () banked
  3326  010E76  6F6E               	movwf	___fldiv@b& (0+255),b
  3327  010E78  0E00               	movlw	0
  3328  010E7A  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
  3329  010E7C  0E6C               	movlw	108
  3330  010E7E  6F70               	movwf	(___fldiv@b+2)& (0+255),b
  3331  010E80  0E42               	movlw	66
  3332  010E82  6F71               	movwf	(___fldiv@b+3)& (0+255),b
  3333  010E84  EC53  F088         	call	___fldiv	;wreg free
  3334  010E88  C06E  F0B2         	movff	?___fldiv,___fltol@f1
  3335  010E8C  C06F  F0B3         	movff	?___fldiv+1,___fltol@f1+1
  3336  010E90  C070  F0B4         	movff	?___fldiv+2,___fltol@f1+2
  3337  010E94  C071  F0B5         	movff	?___fldiv+3,___fltol@f1+3
  3338  010E98  EC56  F09B         	call	___fltol	;wreg free
  3339  010E9C  C0B2  F0C2         	movff	?___fltol,_IRValue
  3340  010EA0  C0B3  F0C3         	movff	?___fltol+1,_IRValue+1
  3341                           
  3342                           ;main.c: 283: if (MXK_SwitchTo(eMXK_HMI)) {
  3343  010EA4  0E01               	movlw	1
  3344  010EA6  ECB2  F0AE         	call	_MXK_SwitchTo
  3345  010EAA  0900               	iorlw	0
  3346  010EAC  B4D8               	btfsc	status,2,c
  3347  010EAE  D00E               	goto	l2370
  3348                           
  3349                           ;main.c: 284: HMI_SetNumber(IRValue);
  3350  010EB0  C0C2  F076         	movff	_IRValue,HMI_SetNumber@pInput
  3351  010EB4  C0C3  F077         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  3352  010EB8  ECF0  F0B0         	call	_HMI_SetNumber	;wreg free
  3353                           
  3354                           ;main.c: 285: HMI_Render();
  3355  010EBC  EC13  F0AF         	call	_HMI_Render	;wreg free
  3356                           
  3357                           ;main.c: 286: if (MXK_Release())
  3358  010EC0  ECF5  F0B1         	call	_MXK_Release	;wreg free
  3359  010EC4  0900               	iorlw	0
  3360  010EC6  A4D8               	btfss	status,2,c
  3361                           
  3362                           ;main.c: 287: MXK_Dequeue();
  3363  010EC8  EC32  F0AF         	call	_MXK_Dequeue	;wreg free
  3364  010ECC                     l2370:
  3365                           
  3366                           ;main.c: 288: }
  3367                           ;main.c: 289: if (IRValue < MinDist) {
  3368  010ECC  0100               	movlb	0	; () banked
  3369  010ECE  51FB               	movf	_MinDist& (0+255),w,b
  3370  010ED0  0100               	movlb	0	; () banked
  3371  010ED2  5DC2               	subwf	_IRValue& (0+255),w,b
  3372  010ED4  0100               	movlb	0	; () banked
  3373  010ED6  51C3               	movf	(_IRValue+1)& (0+255),w,b
  3374  010ED8  0A80               	xorlw	128
  3375  010EDA  0100               	movlb	0	; () banked
  3376  010EDC  6FB8               	movwf	??_mode4& (0+255),b
  3377  010EDE  0100               	movlb	0	; () banked
  3378  010EE0  51FC               	movf	(_MinDist+1)& (0+255),w,b
  3379  010EE2  0A80               	xorlw	128
  3380  010EE4  0100               	movlb	0	; () banked
  3381  010EE6  59B8               	subwfb	??_mode4& (0+255),w,b
  3382  010EE8  B0D8               	btfsc	status,0,c
  3383  010EEA  D008               	goto	l2371
  3384                           
  3385                           ; BSR set to: 0
  3386                           ;main.c: 290: MinDist = IRValue;
  3387  010EEC  C0C2  F0FB         	movff	_IRValue,_MinDist
  3388  010EF0  C0C3  F0FC         	movff	_IRValue+1,_MinDist+1
  3389                           
  3390                           ;main.c: 291: Stepstomin = StepRotate;
  3391  010EF4  C0C6  F0C4         	movff	_StepRotate,_Stepstomin
  3392  010EF8  C0C7  F0C5         	movff	_StepRotate+1,_Stepstomin+1
  3393  010EFC                     l2371:
  3394                           
  3395                           ; BSR set to: 0
  3396                           ;main.c: 292: }
  3397                           ;main.c: 293: if (MXK_SwitchTo(eMXK_Motor)) {
  3398                           
  3399                           ; BSR set to: 0
  3400  010EFC  0E08               	movlw	8
  3401  010EFE  ECB2  F0AE         	call	_MXK_SwitchTo
  3402  010F02  0900               	iorlw	0
  3403  010F04  B4D8               	btfsc	status,2,c
  3404  010F06  D01F               	goto	l2373
  3405                           
  3406                           ;main.c: 294: Motor_Speed(&Stepper, (50));
  3407  010F08  0EC7               	movlw	low _Stepper
  3408  010F0A  0100               	movlb	0	; () banked
  3409  010F0C  6F7B               	movwf	Motor_Speed@pMotor& (0+255),b
  3410  010F0E  0E03               	movlw	high _Stepper
  3411  010F10  0100               	movlb	0	; () banked
  3412  010F12  6F7C               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  3413  010F14  0E00               	movlw	0
  3414  010F16  0100               	movlb	0	; () banked
  3415  010F18  6F7E               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  3416  010F1A  0E32               	movlw	50
  3417  010F1C  6F7D               	movwf	Motor_Speed@pFrequency& (0+255),b
  3418  010F1E  ECDB  F0B0         	call	_Motor_Speed	;wreg free
  3419                           
  3420                           ;main.c: 295: Motor_Move(&Stepper, -1);
  3421  010F22  0EC7               	movlw	low _Stepper
  3422  010F24  0100               	movlb	0	; () banked
  3423  010F26  6F63               	movwf	Motor_Move@pMotor& (0+255),b
  3424  010F28  0E03               	movlw	high _Stepper
  3425  010F2A  0100               	movlb	0	; () banked
  3426  010F2C  6F64               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  3427  010F2E  0EFF               	movlw	255
  3428  010F30  0100               	movlb	0	; () banked
  3429  010F32  6F66               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  3430  010F34  6965               	setf	Motor_Move@pDelta& (0+255),b
  3431  010F36  ECCA  F0AF         	call	_Motor_Move	;wreg free
  3432                           
  3433                           ;main.c: 296: if (MXK_Release())
  3434  010F3A  ECF5  F0B1         	call	_MXK_Release	;wreg free
  3435  010F3E  0900               	iorlw	0
  3436  010F40  A4D8               	btfss	status,2,c
  3437                           
  3438                           ;main.c: 297: MXK_Dequeue();
  3439  010F42  EC32  F0AF         	call	_MXK_Dequeue	;wreg free
  3440  010F46                     l2373:
  3441                           
  3442                           ;main.c: 298: }
  3443                           ;main.c: 299: TimerX = 10;
  3444  010F46  0E00               	movlw	0
  3445  010F48  0100               	movlb	0	; () banked
  3446  010F4A  6FFA               	movwf	(_TimerX+1)& (0+255),b
  3447  010F4C  0E0A               	movlw	10
  3448  010F4E  6FF9               	movwf	_TimerX& (0+255),b
  3449                           
  3450                           ; BSR set to: 0
  3451                           ;main.c: 300: if (TimerX > 0) {
  3452  010F50  0100               	movlb	0	; () banked
  3453  010F52  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  3454  010F54  D063               	goto	u13980
  3455  010F56  0100               	movlb	0	; () banked
  3456  010F58  51FA               	movf	(_TimerX+1)& (0+255),w,b
  3457  010F5A  E156               	bnz	l16508
  3458  010F5C  0100               	movlb	0	; () banked
  3459  010F5E  05F9               	decf	_TimerX& (0+255),w,b
  3460  010F60  B0D8               	btfsc	status,0,c
  3461  010F62  D052               	goto	l2375
  3462  010F64  D05B               	goto	u13980
  3463  010F66                     l16490:
  3464                           
  3465                           ; BSR set to: 0
  3466                           ;main.c: 302: ADC_Start(&ADC_AN0);
  3467  010F66  0EF4               	movlw	low _ADC_AN0
  3468  010F68  0100               	movlb	0	; () banked
  3469  010F6A  6F62               	movwf	ADC_Start@pInput& (0+255),b
  3470  010F6C  0E00               	movlw	high _ADC_AN0
  3471  010F6E  0100               	movlb	0	; () banked
  3472  010F70  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
  3473  010F72  EC87  F0A7         	call	_ADC_Start	;wreg free
  3474                           
  3475                           ;main.c: 303: if (MXK_SwitchTo(eMXK_HMI)) {
  3476  010F76  0E01               	movlw	1
  3477  010F78  ECB2  F0AE         	call	_MXK_SwitchTo
  3478  010F7C  0900               	iorlw	0
  3479  010F7E  B4D8               	btfsc	status,2,c
  3480  010F80  D00E               	goto	l2378
  3481                           
  3482                           ;main.c: 304: HMI_SetNumber(IRValue);
  3483  010F82  C0C2  F076         	movff	_IRValue,HMI_SetNumber@pInput
  3484  010F86  C0C3  F077         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  3485  010F8A  ECF0  F0B0         	call	_HMI_SetNumber	;wreg free
  3486                           
  3487                           ;main.c: 305: HMI_Render();
  3488  010F8E  EC13  F0AF         	call	_HMI_Render	;wreg free
  3489                           
  3490                           ;main.c: 306: if (MXK_Release())
  3491  010F92  ECF5  F0B1         	call	_MXK_Release	;wreg free
  3492  010F96  0900               	iorlw	0
  3493  010F98  A4D8               	btfss	status,2,c
  3494                           
  3495                           ;main.c: 307: MXK_Dequeue();
  3496  010F9A  EC32  F0AF         	call	_MXK_Dequeue	;wreg free
  3497  010F9E                     l2378:
  3498                           
  3499                           ;main.c: 308: }
  3500                           ;main.c: 309: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3501  010F9E  0EF4               	movlw	low _ADC_AN0
  3502  010FA0  0100               	movlb	0	; () banked
  3503  010FA2  6FA0               	movwf	ADC_Voltage@pInput& (0+255),b
  3504  010FA4  0E00               	movlw	high _ADC_AN0
  3505  010FA6  0100               	movlb	0	; () banked
  3506  010FA8  6FA1               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  3507  010FAA  EC44  F09D         	call	_ADC_Voltage	;wreg free
  3508  010FAE  C0A0  F3F4         	movff	?_ADC_Voltage,_mode4$15584
  3509  010FB2  C0A1  F3F5         	movff	?_ADC_Voltage+1,_mode4$15584+1
  3510  010FB6  C0A2  F3F6         	movff	?_ADC_Voltage+2,_mode4$15584+2
  3511  010FBA  C0A3  F3F7         	movff	?_ADC_Voltage+3,_mode4$15584+3
  3512                           
  3513                           ;main.c: 308: }
  3514                           ;main.c: 309: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3515  010FBE  C3F4  F072         	movff	_mode4$15584,___fldiv@a
  3516  010FC2  C3F5  F073         	movff	_mode4$15584+1,___fldiv@a+1
  3517  010FC6  C3F6  F074         	movff	_mode4$15584+2,___fldiv@a+2
  3518  010FCA  C3F7  F075         	movff	_mode4$15584+3,___fldiv@a+3
  3519  010FCE  0E00               	movlw	0
  3520  010FD0  0100               	movlb	0	; () banked
  3521  010FD2  6F6E               	movwf	___fldiv@b& (0+255),b
  3522  010FD4  0E00               	movlw	0
  3523  010FD6  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
  3524  010FD8  0E6C               	movlw	108
  3525  010FDA  6F70               	movwf	(___fldiv@b+2)& (0+255),b
  3526  010FDC  0E42               	movlw	66
  3527  010FDE  6F71               	movwf	(___fldiv@b+3)& (0+255),b
  3528  010FE0  EC53  F088         	call	___fldiv	;wreg free
  3529  010FE4  C06E  F0B2         	movff	?___fldiv,___fltol@f1
  3530  010FE8  C06F  F0B3         	movff	?___fldiv+1,___fltol@f1+1
  3531  010FEC  C070  F0B4         	movff	?___fldiv+2,___fltol@f1+2
  3532  010FF0  C071  F0B5         	movff	?___fldiv+3,___fltol@f1+3
  3533  010FF4  EC56  F09B         	call	___fltol	;wreg free
  3534  010FF8  C0B2  F0C2         	movff	?___fltol,_IRValue
  3535  010FFC  C0B3  F0C3         	movff	?___fltol+1,_IRValue+1
  3536                           
  3537                           ;main.c: 310: TimerX--;
  3538  011000  0100               	movlb	0	; () banked
  3539  011002  07F9               	decf	_TimerX& (0+255),f,b
  3540  011004  A0D8               	btfss	status,0,c
  3541  011006  07FA               	decf	(_TimerX+1)& (0+255),f,b
  3542  011008                     l2375:
  3543  011008                     l16508:
  3544                           
  3545                           ; BSR set to: 0
  3546  011008  0100               	movlb	0	; () banked
  3547  01100A  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  3548  01100C  D007               	goto	u13980
  3549  01100E  0100               	movlb	0	; () banked
  3550  011010  51FA               	movf	(_TimerX+1)& (0+255),w,b
  3551  011012  E1A9               	bnz	l16490
  3552  011014  0100               	movlb	0	; () banked
  3553  011016  05F9               	decf	_TimerX& (0+255),w,b
  3554  011018  B0D8               	btfsc	status,0,c
  3555  01101A  D7A5               	goto	l2376
  3556  01101C                     u13980:
  3557                           
  3558                           ; BSR set to: 0
  3559                           
  3560                           ; BSR set to: 0
  3561                           
  3562                           ; BSR set to: 0
  3563                           
  3564                           ; BSR set to: 0
  3565  01101C  0100               	movlb	0	; () banked
  3566  01101E  BFC7               	btfsc	(_StepRotate+1)& (0+255),7,b
  3567  011020  D705               	goto	l2368
  3568  011022  0E90               	movlw	144
  3569  011024  0100               	movlb	0	; () banked
  3570  011026  5DC6               	subwf	_StepRotate& (0+255),w,b
  3571  011028  0E01               	movlw	1
  3572  01102A  0100               	movlb	0	; () banked
  3573  01102C  59C7               	subwfb	(_StepRotate+1)& (0+255),w,b
  3574  01102E  A0D8               	btfss	status,0,c
  3575  011030  D6FD               	goto	l2368
  3576                           
  3577                           ; BSR set to: 0
  3578                           ;main.c: 311: }
  3579                           ;main.c: 312: }
  3580                           ;main.c: 313: }
  3581                           ;main.c: 314: irobot_rotate_to((INT16) stepsToMinDegrees - 90, 200);
  3582                           
  3583                           ; BSR set to: 0
  3584  011032  C300  F0B2         	movff	_stepsToMinDegrees,___fltol@f1
  3585  011036  C301  F0B3         	movff	_stepsToMinDegrees+1,___fltol@f1+1
  3586  01103A  C302  F0B4         	movff	_stepsToMinDegrees+2,___fltol@f1+2
  3587  01103E  C303  F0B5         	movff	_stepsToMinDegrees+3,___fltol@f1+3
  3588  011042  EC56  F09B         	call	___fltol	;wreg free
  3589  011046  0EA6               	movlw	166
  3590  011048  0100               	movlb	0	; () banked
  3591  01104A  25B2               	addwf	?___fltol& (0+255),w,b
  3592  01104C  0103               	movlb	3	; () banked
  3593  01104E  6FF0               	movwf	irobot_rotate_to@rotateToAngle& (0+255),b
  3594  011050  0EFF               	movlw	255
  3595  011052  0100               	movlb	0	; () banked
  3596  011054  21B3               	addwfc	(?___fltol+1)& (0+255),w,b
  3597  011056  0103               	movlb	3	; () banked
  3598  011058  6FF1               	movwf	(irobot_rotate_to@rotateToAngle+1)& (0+255),b
  3599  01105A  0E00               	movlw	0
  3600  01105C  0103               	movlb	3	; () banked
  3601  01105E  6FF3               	movwf	(irobot_rotate_to@rotateSpeed+1)& (0+255),b
  3602  011060  0EC8               	movlw	200
  3603  011062  6FF2               	movwf	irobot_rotate_to@rotateSpeed& (0+255),b
  3604  011064  ECC6  F0B0         	call	_irobot_rotate_to	;wreg free
  3605                           
  3606                           ;main.c: 315: while (!iRBumpLeft && !iRBumpRight && !iRDropRight && !iRDropLeft) {
  3607  011068  D007               	goto	l2381
  3608  01106A                     
  3609                           ;main.c: 316: irobot_move_straight(5);
  3610  01106A  0E00               	movlw	0
  3611  01106C  0100               	movlb	0	; () banked
  3612  01106E  6F7A               	movwf	(irobot_move_straight@straightSpeed+1)& (0+255),b
  3613  011070  0E05               	movlw	5
  3614  011072  6F79               	movwf	irobot_move_straight@straightSpeed& (0+255),b
  3615  011074  EC2B  F0B2         	call	_irobot_move_straight	;wreg free
  3616  011078                     l2381:
  3617  011078  0100               	movlb	0	; () banked
  3618  01107A  51E0               	movf	_iRBumpLeft& (0+255),w,b
  3619  01107C  A4D8               	btfss	status,2,c
  3620  01107E  D00C               	goto	u14030
  3621                           
  3622                           ; BSR set to: 0
  3623  011080  0100               	movlb	0	; () banked
  3624  011082  51E1               	movf	_iRBumpRight& (0+255),w,b
  3625  011084  A4D8               	btfss	status,2,c
  3626  011086  D008               	goto	u14030
  3627                           
  3628                           ; BSR set to: 0
  3629  011088  0100               	movlb	0	; () banked
  3630  01108A  51DF               	movf	_iRDropRight& (0+255),w,b
  3631  01108C  A4D8               	btfss	status,2,c
  3632  01108E  D004               	goto	u14030
  3633                           
  3634                           ; BSR set to: 0
  3635  011090  0100               	movlb	0	; () banked
  3636  011092  51DE               	movf	_iRDropLeft& (0+255),w,b
  3637  011094  B4D8               	btfsc	status,2,c
  3638  011096  D7E9               	goto	l2382
  3639  011098                     u14030:
  3640                           
  3641                           ; BSR set to: 0
  3642                           ;main.c: 317: }
  3643                           ;main.c: 318: irobot_song_play(0);
  3644                           
  3645                           ; BSR set to: 0
  3646                           
  3647                           ; BSR set to: 0
  3648  011098  0E00               	movlw	0
  3649  01109A  EC8B  F0B2         	call	_irobot_song_play
  3650                           
  3651                           ;main.c: 319: irobot_stop_motion(0);
  3652  01109E  0E00               	movlw	0
  3653  0110A0  EC27  F0AE         	call	_irobot_stop_motion
  3654  0110A4  0012               	return		;funcret
  3655  0110A6                     __end_of_mode4:
  3656                           	opt stack 0
  3657                           tblptru	equ	0xFF8
  3658                           tblptrh	equ	0xFF7
  3659                           tblptrl	equ	0xFF6
  3660                           tablat	equ	0xFF5
  3661                           postinc0	equ	0xFEE
  3662                           wreg	equ	0xFE8
  3663                           postdec1	equ	0xFE5
  3664                           fsr1h	equ	0xFE2
  3665                           fsr1l	equ	0xFE1
  3666                           status	equ	0xFD8
  3667                           
  3668 ;; *************** function _mode3 *****************
  3669 ;; Defined at:
  3670 ;;		line 244 in file "main.c"
  3671 ;; Parameters:    Size  Location     Type
  3672 ;;		None
  3673 ;; Auto vars:     Size  Location     Type
  3674 ;;		None
  3675 ;; Return value:  Size  Location     Type
  3676 ;;                  1    wreg      void 
  3677 ;; Registers used:
  3678 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3679 ;; Tracked objects:
  3680 ;;		On entry : 0/0
  3681 ;;		On exit  : 0/0
  3682 ;;		Unchanged: 0/0
  3683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3685 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3687 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3688 ;;Total ram usage:        0 bytes
  3689 ;; Hardware stack levels used:    1
  3690 ;; Hardware stack levels required when called:   13
  3691 ;; This function calls:
  3692 ;;		_irobot_rotate_to
  3693 ;; This function is called by:
  3694 ;;		_main
  3695 ;; This function uses a non-reentrant model
  3696 ;;
  3697                           
  3698                           	psect	text2
  3699  016422                     __ptext2:
  3700                           	opt stack 0
  3701  016422                     _mode3:
  3702                           	opt stack 17
  3703                           
  3704                           ;main.c: 245: irobot_rotate_to(30, 200);
  3705                           
  3706                           ;incstack = 0
  3707  016422  0E00               	movlw	0
  3708  016424  0103               	movlb	3	; () banked
  3709  016426  6FF1               	movwf	(irobot_rotate_to@rotateToAngle+1)& (0+255),b
  3710  016428  0E1E               	movlw	30
  3711  01642A  6FF0               	movwf	irobot_rotate_to@rotateToAngle& (0+255),b
  3712  01642C  0E00               	movlw	0
  3713  01642E  0103               	movlb	3	; () banked
  3714  016430  6FF3               	movwf	(irobot_rotate_to@rotateSpeed+1)& (0+255),b
  3715  016432  0EC8               	movlw	200
  3716  016434  6FF2               	movwf	irobot_rotate_to@rotateSpeed& (0+255),b
  3717  016436  ECC6  F0B0         	call	_irobot_rotate_to	;wreg free
  3718  01643A  0012               	return		;funcret
  3719  01643C                     __end_of_mode3:
  3720                           	opt stack 0
  3721                           tblptru	equ	0xFF8
  3722                           tblptrh	equ	0xFF7
  3723                           tblptrl	equ	0xFF6
  3724                           tablat	equ	0xFF5
  3725                           postinc0	equ	0xFEE
  3726                           wreg	equ	0xFE8
  3727                           postdec1	equ	0xFE5
  3728                           fsr1h	equ	0xFE2
  3729                           fsr1l	equ	0xFE1
  3730                           status	equ	0xFD8
  3731                           
  3732 ;; *************** function _irobot_rotate_to *****************
  3733 ;; Defined at:
  3734 ;;		line 345 in file "Library/iRobotSerial.c"
  3735 ;; Parameters:    Size  Location     Type
  3736 ;;  rotateToAngl    2    0[BANK3 ] short 
  3737 ;;  rotateSpeed     2    2[BANK3 ] short 
  3738 ;; Auto vars:     Size  Location     Type
  3739 ;;		None
  3740 ;; Return value:  Size  Location     Type
  3741 ;;                  1    wreg      void 
  3742 ;; Registers used:
  3743 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3744 ;; Tracked objects:
  3745 ;;		On entry : 0/0
  3746 ;;		On exit  : 0/0
  3747 ;;		Unchanged: 0/0
  3748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3749 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3752 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3753 ;;Total ram usage:        4 bytes
  3754 ;; Hardware stack levels used:    1
  3755 ;; Hardware stack levels required when called:   12
  3756 ;; This function calls:
  3757 ;;		_irobot_angle_wait
  3758 ;;		_irobot_rotate
  3759 ;;		_irobot_stop_motion
  3760 ;; This function is called by:
  3761 ;;		_mode3
  3762 ;;		_mode4
  3763 ;; This function uses a non-reentrant model
  3764 ;;
  3765                           
  3766                           	psect	text3
  3767  01618C                     __ptext3:
  3768                           	opt stack 0
  3769  01618C                     _irobot_rotate_to:
  3770                           	opt stack 17
  3771                           
  3772                           ;iRobotSerial.c: 346: irobot_rotate(1, rotateToAngle, rotateSpeed);
  3773                           
  3774                           ;incstack = 0
  3775  01618C  C3F0  F07D         	movff	irobot_rotate_to@rotateToAngle,irobot_rotate@rotateAngle
  3776  016190  C3F1  F07E         	movff	irobot_rotate_to@rotateToAngle+1,irobot_rotate@rotateAngle+1
  3777  016194  C3F2  F07F         	movff	irobot_rotate_to@rotateSpeed,irobot_rotate@rotateSpeed
  3778  016198  C3F3  F080         	movff	irobot_rotate_to@rotateSpeed+1,irobot_rotate@rotateSpeed+1
  3779  01619C  0E01               	movlw	1
  3780  01619E  ECA0  F0A2         	call	_irobot_rotate
  3781                           
  3782                           ;iRobotSerial.c: 347: irobot_angle_wait(rotateToAngle);
  3783  0161A2  C3F0  F070         	movff	irobot_rotate_to@rotateToAngle,irobot_angle_wait@angleWait
  3784  0161A6  C3F1  F071         	movff	irobot_rotate_to@rotateToAngle+1,irobot_angle_wait@angleWait+1
  3785  0161AA  EC04  F0AE         	call	_irobot_angle_wait	;wreg free
  3786                           
  3787                           ;iRobotSerial.c: 348: irobot_stop_motion(1);
  3788  0161AE  0E01               	movlw	1
  3789  0161B0  EC27  F0AE         	call	_irobot_stop_motion
  3790  0161B4  0012               	return		;funcret
  3791  0161B6                     __end_of_irobot_rotate_to:
  3792                           	opt stack 0
  3793                           tblptru	equ	0xFF8
  3794                           tblptrh	equ	0xFF7
  3795                           tblptrl	equ	0xFF6
  3796                           tablat	equ	0xFF5
  3797                           postinc0	equ	0xFEE
  3798                           wreg	equ	0xFE8
  3799                           postdec1	equ	0xFE5
  3800                           fsr1h	equ	0xFE2
  3801                           fsr1l	equ	0xFE1
  3802                           status	equ	0xFD8
  3803                           
  3804 ;; *************** function _irobot_rotate *****************
  3805 ;; Defined at:
  3806 ;;		line 280 in file "Library/iRobotSerial.c"
  3807 ;; Parameters:    Size  Location     Type
  3808 ;;  isScript        1    wreg     unsigned char 
  3809 ;;  rotateAngle     2   29[BANK0 ] short 
  3810 ;;  rotateSpeed     2   31[BANK0 ] short 
  3811 ;; Auto vars:     Size  Location     Type
  3812 ;;  isScript        1   34[BANK0 ] unsigned char 
  3813 ;;  angleTotal      2   35[BANK0 ] short 
  3814 ;; Return value:  Size  Location     Type
  3815 ;;                  1    wreg      void 
  3816 ;; Registers used:
  3817 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3818 ;; Tracked objects:
  3819 ;;		On entry : 0/0
  3820 ;;		On exit  : 0/0
  3821 ;;		Unchanged: 0/0
  3822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3823 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3824 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3825 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3826 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3827 ;;Total ram usage:        8 bytes
  3828 ;; Hardware stack levels used:    1
  3829 ;; Hardware stack levels required when called:   11
  3830 ;; This function calls:
  3831 ;;		_irobot_move
  3832 ;;		_irobot_stop_motion
  3833 ;;		_update_angle
  3834 ;; This function is called by:
  3835 ;;		_irobot_rotate_to
  3836 ;; This function uses a non-reentrant model
  3837 ;;
  3838                           
  3839                           	psect	text4
  3840  014540                     __ptext4:
  3841                           	opt stack 0
  3842  014540                     _irobot_rotate:
  3843                           	opt stack 17
  3844                           
  3845                           ;incstack = 0
  3846                           ;irobot_rotate@isScript stored from wreg
  3847  014540  0100               	movlb	0	; () banked
  3848  014542  6F82               	movwf	irobot_rotate@isScript& (0+255),b
  3849                           
  3850                           ;iRobotSerial.c: 281: INT16 angleTotal = 0;
  3851  014544  0E00               	movlw	0
  3852  014546  0100               	movlb	0	; () banked
  3853  014548  6F84               	movwf	(irobot_rotate@angleTotal+1)& (0+255),b
  3854  01454A  0E00               	movlw	0
  3855  01454C  6F83               	movwf	irobot_rotate@angleTotal& (0+255),b
  3856                           
  3857                           ; BSR set to: 0
  3858                           ;iRobotSerial.c: 283: (rotateAngle > 0) ? (rotateAngle = iR_CONST_CCW) : (rotateAngle = 
      +                          iR_CONST_CW);
  3859  01454E  0100               	movlb	0	; () banked
  3860  014550  BF7E               	btfsc	(irobot_rotate@rotateAngle+1)& (0+255),7,b
  3861  014552  D00D               	goto	l2156
  3862  014554  0100               	movlb	0	; () banked
  3863  014556  517E               	movf	(irobot_rotate@rotateAngle+1)& (0+255),w,b
  3864  014558  E104               	bnz	u10250
  3865  01455A  0100               	movlb	0	; () banked
  3866  01455C  057D               	decf	irobot_rotate@rotateAngle& (0+255),w,b
  3867  01455E  A0D8               	btfss	status,0,c
  3868  014560  D006               	goto	l2156
  3869  014562                     u10250:
  3870                           
  3871                           ; BSR set to: 0
  3872  014562  0E00               	movlw	0
  3873  014564  0100               	movlb	0	; () banked
  3874  014566  6F7E               	movwf	(irobot_rotate@rotateAngle+1)& (0+255),b
  3875  014568  0E01               	movlw	1
  3876  01456A  6F7D               	movwf	irobot_rotate@rotateAngle& (0+255),b
  3877  01456C  D003               	goto	l2158
  3878  01456E                     l2156:
  3879                           
  3880                           ; BSR set to: 0
  3881  01456E  0100               	movlb	0	; () banked
  3882  014570  697D               	setf	irobot_rotate@rotateAngle& (0+255),b
  3883  014572  697E               	setf	(irobot_rotate@rotateAngle+1)& (0+255),b
  3884  014574                     l2158:
  3885                           
  3886                           ; BSR set to: 0
  3887                           ;iRobotSerial.c: 284: if (isScript) {
  3888                           
  3889                           ; BSR set to: 0
  3890  014574  0100               	movlb	0	; () banked
  3891  014576  5182               	movf	irobot_rotate@isScript& (0+255),w,b
  3892  014578  0100               	movlb	0	; () banked
  3893  01457A  B4D8               	btfsc	status,2,c
  3894  01457C  D00C               	goto	l2159
  3895                           
  3896                           ; BSR set to: 0
  3897                           ;iRobotSerial.c: 285: irobot_move(1, rotateSpeed, rotateAngle);
  3898  01457E  C07F  F070         	movff	irobot_rotate@rotateSpeed,irobot_move@moveSpeed
  3899  014582  C080  F071         	movff	irobot_rotate@rotateSpeed+1,irobot_move@moveSpeed+1
  3900  014586  C07D  F072         	movff	irobot_rotate@rotateAngle,irobot_move@moveTurnRadius
  3901  01458A  C07E  F073         	movff	irobot_rotate@rotateAngle+1,irobot_move@moveTurnRadius+1
  3902  01458E  0E01               	movlw	1
  3903  014590  ECF1  F0A1         	call	_irobot_move
  3904                           
  3905                           ;iRobotSerial.c: 286: }
  3906  014594  0012               	return	
  3907  014596                     l2159:
  3908                           
  3909                           ;iRobotSerial.c: 287: else {
  3910                           ;iRobotSerial.c: 288: irobot_move(0, rotateSpeed, rotateAngle);
  3911  014596  C07F  F070         	movff	irobot_rotate@rotateSpeed,irobot_move@moveSpeed
  3912  01459A  C080  F071         	movff	irobot_rotate@rotateSpeed+1,irobot_move@moveSpeed+1
  3913  01459E  C07D  F072         	movff	irobot_rotate@rotateAngle,irobot_move@moveTurnRadius
  3914  0145A2  C07E  F073         	movff	irobot_rotate@rotateAngle+1,irobot_move@moveTurnRadius+1
  3915  0145A6  0E00               	movlw	0
  3916  0145A8  ECF1  F0A1         	call	_irobot_move
  3917                           
  3918                           ;iRobotSerial.c: 289: while (angleTotal < rotateAngle) {
  3919  0145AC  D00A               	goto	l2161
  3920  0145AE                     
  3921                           ;iRobotSerial.c: 290: update_angle();
  3922  0145AE  ECA8  F0B2         	call	_update_angle	;wreg free
  3923                           
  3924                           ;iRobotSerial.c: 291: angleTotal += iRAngle;
  3925  0145B2  0100               	movlb	0	; () banked
  3926  0145B4  51D0               	movf	_iRAngle& (0+255),w,b
  3927  0145B6  0100               	movlb	0	; () banked
  3928  0145B8  2783               	addwf	irobot_rotate@angleTotal& (0+255),f,b
  3929  0145BA  0100               	movlb	0	; () banked
  3930  0145BC  51D1               	movf	(_iRAngle+1)& (0+255),w,b
  3931  0145BE  0100               	movlb	0	; () banked
  3932  0145C0  2384               	addwfc	(irobot_rotate@angleTotal+1)& (0+255),f,b
  3933  0145C2                     l2161:
  3934                           
  3935                           ; BSR set to: 0
  3936  0145C2  0100               	movlb	0	; () banked
  3937  0145C4  517D               	movf	irobot_rotate@rotateAngle& (0+255),w,b
  3938  0145C6  0100               	movlb	0	; () banked
  3939  0145C8  5D83               	subwf	irobot_rotate@angleTotal& (0+255),w,b
  3940  0145CA  0100               	movlb	0	; () banked
  3941  0145CC  5184               	movf	(irobot_rotate@angleTotal+1)& (0+255),w,b
  3942  0145CE  0A80               	xorlw	128
  3943  0145D0  0100               	movlb	0	; () banked
  3944  0145D2  6F81               	movwf	??_irobot_rotate& (0+255),b
  3945  0145D4  0100               	movlb	0	; () banked
  3946  0145D6  517E               	movf	(irobot_rotate@rotateAngle+1)& (0+255),w,b
  3947  0145D8  0A80               	xorlw	128
  3948  0145DA  0100               	movlb	0	; () banked
  3949  0145DC  5981               	subwfb	??_irobot_rotate& (0+255),w,b
  3950  0145DE  A0D8               	btfss	status,0,c
  3951  0145E0  D7E6               	goto	l2162
  3952                           
  3953                           ; BSR set to: 0
  3954                           ;iRobotSerial.c: 292: }
  3955                           ;iRobotSerial.c: 293: irobot_stop_motion(0);
  3956                           
  3957                           ; BSR set to: 0
  3958  0145E2  0E00               	movlw	0
  3959  0145E4  EC27  F0AE         	call	_irobot_stop_motion
  3960  0145E8  0012               	return	
  3961  0145EA                     __end_of_irobot_rotate:
  3962                           	opt stack 0
  3963                           tblptru	equ	0xFF8
  3964                           tblptrh	equ	0xFF7
  3965                           tblptrl	equ	0xFF6
  3966                           tablat	equ	0xFF5
  3967                           postinc0	equ	0xFEE
  3968                           wreg	equ	0xFE8
  3969                           postdec1	equ	0xFE5
  3970                           fsr1h	equ	0xFE2
  3971                           fsr1l	equ	0xFE1
  3972                           status	equ	0xFD8
  3973                           
  3974 ;; *************** function _irobot_angle_wait *****************
  3975 ;; Defined at:
  3976 ;;		line 204 in file "Library/iRobotSerial.c"
  3977 ;; Parameters:    Size  Location     Type
  3978 ;;  angleWait       2   16[BANK0 ] short 
  3979 ;; Auto vars:     Size  Location     Type
  3980 ;;		None
  3981 ;; Return value:  Size  Location     Type
  3982 ;;                  1    wreg      void 
  3983 ;; Registers used:
  3984 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3985 ;; Tracked objects:
  3986 ;;		On entry : 0/0
  3987 ;;		On exit  : 0/0
  3988 ;;		Unchanged: 0/0
  3989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3990 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3992 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3993 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3994 ;;Total ram usage:        4 bytes
  3995 ;; Hardware stack levels used:    1
  3996 ;; Hardware stack levels required when called:    8
  3997 ;; This function calls:
  3998 ;;		_load_iRScriptStack
  3999 ;;		_twos_complement_of
  4000 ;; This function is called by:
  4001 ;;		_irobot_rotate_to
  4002 ;; This function uses a non-reentrant model
  4003 ;;
  4004                           
  4005                           	psect	text5
  4006  015C08                     __ptext5:
  4007                           	opt stack 0
  4008  015C08                     _irobot_angle_wait:
  4009                           	opt stack 20
  4010                           
  4011                           ;iRobotSerial.c: 205: angleWait = twos_complement_of(angleWait);
  4012                           
  4013                           ;incstack = 0
  4014  015C08  C070  F060         	movff	irobot_angle_wait@angleWait,twos_complement_of@complementValue
  4015  015C0C  C071  F061         	movff	irobot_angle_wait@angleWait+1,twos_complement_of@complementValue+1
  4016  015C10  EC90  F0AE         	call	_twos_complement_of	;wreg free
  4017  015C14  C060  F070         	movff	?_twos_complement_of,irobot_angle_wait@angleWait
  4018  015C18  C061  F071         	movff	?_twos_complement_of+1,irobot_angle_wait@angleWait+1
  4019                           
  4020                           ;iRobotSerial.c: 207: load_iRScriptStack(3, iR_WAIT_ANGLE,
  4021                           ;iRobotSerial.c: 208: (((angleWait)>>8) & 0xFF), ((angleWait) & 0xFF));
  4022  015C1C  0E00               	movlw	0
  4023  015C1E  0100               	movlb	0	; () banked
  4024  015C20  6F61               	movwf	(?_load_iRScriptStack+1)& (0+255),b
  4025  015C22  0E9D               	movlw	157
  4026  015C24  6F60               	movwf	?_load_iRScriptStack& (0+255),b
  4027  015C26  C071  F072         	movff	irobot_angle_wait@angleWait+1,??_irobot_angle_wait
  4028  015C2A  0100               	movlb	0	; () banked
  4029  015C2C  6B73               	clrf	(??_irobot_angle_wait+1)& (0+255),b
  4030  015C2E  BF72               	btfsc	??_irobot_angle_wait& (0+255),7,b
  4031  015C30  6973               	setf	(??_irobot_angle_wait+1)& (0+255),b
  4032  015C32  0100               	movlb	0	; () banked
  4033  015C34  5172               	movf	??_irobot_angle_wait& (0+255),w,b
  4034  015C36  0100               	movlb	0	; () banked
  4035  015C38  6F62               	movwf	(?_load_iRScriptStack+2)& (0+255),b
  4036  015C3A  6B63               	clrf	(?_load_iRScriptStack+3)& (0+255),b
  4037  015C3C  0100               	movlb	0	; () banked
  4038  015C3E  5170               	movf	irobot_angle_wait@angleWait& (0+255),w,b
  4039  015C40  0100               	movlb	0	; () banked
  4040  015C42  6F64               	movwf	(?_load_iRScriptStack+4)& (0+255),b
  4041  015C44  6B65               	clrf	(?_load_iRScriptStack+5)& (0+255),b
  4042  015C46  0E03               	movlw	3
  4043  015C48  EC88  F0AA         	call	_load_iRScriptStack
  4044  015C4C  0012               	return		;funcret
  4045  015C4E                     __end_of_irobot_angle_wait:
  4046                           	opt stack 0
  4047                           tblptru	equ	0xFF8
  4048                           tblptrh	equ	0xFF7
  4049                           tblptrl	equ	0xFF6
  4050                           tablat	equ	0xFF5
  4051                           postinc0	equ	0xFEE
  4052                           wreg	equ	0xFE8
  4053                           postdec1	equ	0xFE5
  4054                           fsr1h	equ	0xFE2
  4055                           fsr1l	equ	0xFE1
  4056                           status	equ	0xFD8
  4057                           
  4058 ;; *************** function _mode2 *****************
  4059 ;; Defined at:
  4060 ;;		line 206 in file "main.c"
  4061 ;; Parameters:    Size  Location     Type
  4062 ;;		None
  4063 ;; Auto vars:     Size  Location     Type
  4064 ;;  dist            2   44[BANK0 ] int 
  4065 ;; Return value:  Size  Location     Type
  4066 ;;                  1    wreg      void 
  4067 ;; Registers used:
  4068 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  4069 ;; Tracked objects:
  4070 ;;		On entry : 0/0
  4071 ;;		On exit  : 0/0
  4072 ;;		Unchanged: 0/0
  4073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4075 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4077 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4078 ;;Total ram usage:        2 bytes
  4079 ;; Hardware stack levels used:    1
  4080 ;; Hardware stack levels required when called:   16
  4081 ;; This function calls:
  4082 ;;		_Console_Render
  4083 ;;		_HMI_Poll
  4084 ;;		_MXK_Dequeue
  4085 ;;		_MXK_Release
  4086 ;;		_MXK_SwitchTo
  4087 ;;		_irobot_move_straight
  4088 ;;		_irobot_song_play
  4089 ;;		_irobot_stop_motion
  4090 ;;		_printf
  4091 ;;		_update_angle
  4092 ;;		_update_bump_and_cliff
  4093 ;;		_update_distance
  4094 ;; This function is called by:
  4095 ;;		_main
  4096 ;; This function uses a non-reentrant model
  4097 ;;
  4098                           
  4099                           	psect	text6
  4100  01344C                     __ptext6:
  4101                           	opt stack 0
  4102  01344C                     _mode2:
  4103                           	opt stack 14
  4104                           
  4105                           ;main.c: 207: update_bump_and_cliff();
  4106                           
  4107                           ;incstack = 0
  4108  01344C  ECAD  F0AF         	call	_update_bump_and_cliff	;wreg free
  4109                           
  4110                           ;main.c: 208: update_distance();
  4111  013450  EC9F  F0B2         	call	_update_distance	;wreg free
  4112                           
  4113                           ;main.c: 209: update_angle();
  4114  013454  ECA8  F0B2         	call	_update_angle	;wreg free
  4115                           
  4116                           ;main.c: 211: angleTotal += iRAngle;
  4117  013458  0100               	movlb	0	; () banked
  4118  01345A  51D0               	movf	_iRAngle& (0+255),w,b
  4119  01345C  0100               	movlb	0	; () banked
  4120  01345E  27CC               	addwf	_angleTotal& (0+255),f,b
  4121  013460  0100               	movlb	0	; () banked
  4122  013462  51D1               	movf	(_iRAngle+1)& (0+255),w,b
  4123  013464  0100               	movlb	0	; () banked
  4124  013466  23CD               	addwfc	(_angleTotal+1)& (0+255),f,b
  4125                           
  4126                           ; BSR set to: 0
  4127                           ;main.c: 213: if (iRBumpLeft || iRBumpRight) {
  4128  013468  0100               	movlb	0	; () banked
  4129  01346A  51E0               	movf	_iRBumpLeft& (0+255),w,b
  4130  01346C  A4D8               	btfss	status,2,c
  4131  01346E  D004               	goto	u13800
  4132                           
  4133                           ; BSR set to: 0
  4134  013470  0100               	movlb	0	; () banked
  4135  013472  51E1               	movf	_iRBumpRight& (0+255),w,b
  4136  013474  B4D8               	btfsc	status,2,c
  4137  013476  D006               	goto	l2346
  4138  013478                     u13800:
  4139                           
  4140                           ; BSR set to: 0
  4141                           ;main.c: 214: irobot_song_play(0);
  4142                           
  4143                           ; BSR set to: 0
  4144  013478  0E00               	movlw	0
  4145  01347A  EC8B  F0B2         	call	_irobot_song_play
  4146                           
  4147                           ;main.c: 215: irobot_stop_motion(0);
  4148  01347E  0E00               	movlw	0
  4149  013480  EC27  F0AE         	call	_irobot_stop_motion
  4150  013484                     l2346:
  4151                           
  4152                           ;main.c: 216: }
  4153                           ;main.c: 217: if (angleTotal > 90) {
  4154  013484  0100               	movlb	0	; () banked
  4155  013486  BFCD               	btfsc	(_angleTotal+1)& (0+255),7,b
  4156  013488  D00B               	goto	l2349
  4157  01348A  0100               	movlb	0	; () banked
  4158  01348C  51CD               	movf	(_angleTotal+1)& (0+255),w,b
  4159  01348E  E105               	bnz	u13810
  4160  013490  0E5B               	movlw	91
  4161  013492  0100               	movlb	0	; () banked
  4162  013494  5DCC               	subwf	_angleTotal& (0+255),w,b
  4163  013496  A0D8               	btfss	status,0,c
  4164  013498  D003               	goto	l2349
  4165  01349A                     u13810:
  4166                           
  4167                           ; BSR set to: 0
  4168                           ;main.c: 218: irobot_stop_motion(0);
  4169  01349A  0E00               	movlw	0
  4170  01349C  EC27  F0AE         	call	_irobot_stop_motion
  4171  0134A0                     l2349:
  4172                           
  4173                           ;main.c: 219: }
  4174                           ;main.c: 220: HMI_Poll();
  4175  0134A0  ECAA  F0A9         	call	_HMI_Poll	;wreg free
  4176                           
  4177                           ;main.c: 221: if (MXK_SwitchTo(eMXK_HMI)) {
  4178  0134A4  0E01               	movlw	1
  4179  0134A6  ECB2  F0AE         	call	_MXK_SwitchTo
  4180  0134AA  0900               	iorlw	0
  4181  0134AC  B4D8               	btfsc	status,2,c
  4182  0134AE  0012               	return	
  4183                           
  4184                           ;main.c: 222: printf("%c", (char)35);
  4185  0134B0  0EFB               	movlw	low STR_1
  4186  0134B2  0100               	movlb	0	; () banked
  4187  0134B4  6F75               	movwf	printf@f& (0+255),b
  4188  0134B6  0EFF               	movlw	high STR_1
  4189  0134B8  0100               	movlb	0	; () banked
  4190  0134BA  6F76               	movwf	(printf@f+1)& (0+255),b
  4191  0134BC  0E00               	movlw	0
  4192  0134BE  0100               	movlb	0	; () banked
  4193  0134C0  6F78               	movwf	(?_printf+3)& (0+255),b
  4194  0134C2  0E23               	movlw	35
  4195  0134C4  6F77               	movwf	(?_printf+2)& (0+255),b
  4196  0134C6  EC7E  F092         	call	_printf	;wreg free
  4197                           
  4198                           ;main.c: 223: printf("Total Distance:%u\nLeft Bump:%u\nRight Bump:%u\n", distanceTotal, 
      +                          iRBumpLeft, iRBumpRight);
  4199  0134CA  0E73               	movlw	low STR_2
  4200  0134CC  0100               	movlb	0	; () banked
  4201  0134CE  6F75               	movwf	printf@f& (0+255),b
  4202  0134D0  0EFF               	movlw	high STR_2
  4203  0134D2  0100               	movlb	0	; () banked
  4204  0134D4  6F76               	movwf	(printf@f+1)& (0+255),b
  4205  0134D6  C0CE  F077         	movff	_distanceTotal,?_printf+2
  4206  0134DA  C0CF  F078         	movff	_distanceTotal+1,?_printf+3
  4207  0134DE  C0E0  F079         	movff	_iRBumpLeft,?_printf+4
  4208  0134E2  0100               	movlb	0	; () banked
  4209  0134E4  6B7A               	clrf	(?_printf+5)& (0+255),b
  4210  0134E6  C0E1  F07B         	movff	_iRBumpRight,?_printf+6
  4211  0134EA  0100               	movlb	0	; () banked
  4212  0134EC  6B7C               	clrf	(?_printf+7)& (0+255),b
  4213  0134EE  EC7E  F092         	call	_printf	;wreg free
  4214                           
  4215                           ;main.c: 224: Console_Render();
  4216  0134F2  EC92  F08F         	call	_Console_Render	;wreg free
  4217                           
  4218                           ;main.c: 226: int dist = 0;
  4219  0134F6  0E00               	movlw	0
  4220  0134F8  0100               	movlb	0	; () banked
  4221  0134FA  6F8D               	movwf	(mode2@dist+1)& (0+255),b
  4222  0134FC  0E00               	movlw	0
  4223  0134FE  6F8C               	movwf	mode2@dist& (0+255),b
  4224                           
  4225                           ; BSR set to: 0
  4226                           ;main.c: 227: irobot_move_straight(200);
  4227  013500  0E00               	movlw	0
  4228  013502  0100               	movlb	0	; () banked
  4229  013504  6F7A               	movwf	(irobot_move_straight@straightSpeed+1)& (0+255),b
  4230  013506  0EC8               	movlw	200
  4231  013508  6F79               	movwf	irobot_move_straight@straightSpeed& (0+255),b
  4232  01350A  EC2B  F0B2         	call	_irobot_move_straight	;wreg free
  4233                           
  4234                           ;main.c: 228: while (dist < 5000) {
  4235  01350E  D025               	goto	l2351
  4236  013510                     
  4237                           ;main.c: 229: update_distance();
  4238  013510  EC9F  F0B2         	call	_update_distance	;wreg free
  4239                           
  4240                           ;main.c: 230: dist += iRDistance;
  4241  013514  0100               	movlb	0	; () banked
  4242  013516  51D2               	movf	_iRDistance& (0+255),w,b
  4243  013518  0100               	movlb	0	; () banked
  4244  01351A  278C               	addwf	mode2@dist& (0+255),f,b
  4245  01351C  0100               	movlb	0	; () banked
  4246  01351E  51D3               	movf	(_iRDistance+1)& (0+255),w,b
  4247  013520  0100               	movlb	0	; () banked
  4248  013522  238D               	addwfc	(mode2@dist+1)& (0+255),f,b
  4249                           
  4250                           ; BSR set to: 0
  4251                           ;main.c: 231: printf("%c", (char)35);
  4252  013524  0EFB               	movlw	low STR_1
  4253  013526  0100               	movlb	0	; () banked
  4254  013528  6F75               	movwf	printf@f& (0+255),b
  4255  01352A  0EFF               	movlw	high STR_1
  4256  01352C  0100               	movlb	0	; () banked
  4257  01352E  6F76               	movwf	(printf@f+1)& (0+255),b
  4258  013530  0E00               	movlw	0
  4259  013532  0100               	movlb	0	; () banked
  4260  013534  6F78               	movwf	(?_printf+3)& (0+255),b
  4261  013536  0E23               	movlw	35
  4262  013538  6F77               	movwf	(?_printf+2)& (0+255),b
  4263  01353A  EC7E  F092         	call	_printf	;wreg free
  4264                           
  4265                           ;main.c: 232: printf("Distance: %d\n", dist);
  4266  01353E  0EED               	movlw	low STR_6
  4267  013540  0100               	movlb	0	; () banked
  4268  013542  6F75               	movwf	printf@f& (0+255),b
  4269  013544  0EFF               	movlw	high STR_6
  4270  013546  0100               	movlb	0	; () banked
  4271  013548  6F76               	movwf	(printf@f+1)& (0+255),b
  4272  01354A  C08C  F077         	movff	mode2@dist,?_printf+2
  4273  01354E  C08D  F078         	movff	mode2@dist+1,?_printf+3
  4274  013552  EC7E  F092         	call	_printf	;wreg free
  4275                           
  4276                           ;main.c: 233: Console_Render();
  4277  013556  EC92  F08F         	call	_Console_Render	;wreg free
  4278  01355A                     l2351:
  4279  01355A  0100               	movlb	0	; () banked
  4280  01355C  BF8D               	btfsc	(mode2@dist+1)& (0+255),7,b
  4281  01355E  D7D8               	goto	l2352
  4282  013560  0E88               	movlw	136
  4283  013562  0100               	movlb	0	; () banked
  4284  013564  5D8C               	subwf	mode2@dist& (0+255),w,b
  4285  013566  0E13               	movlw	19
  4286  013568  0100               	movlb	0	; () banked
  4287  01356A  598D               	subwfb	(mode2@dist+1)& (0+255),w,b
  4288  01356C  A0D8               	btfss	status,0,c
  4289  01356E  D7D0               	goto	l2352
  4290                           
  4291                           ; BSR set to: 0
  4292                           ;main.c: 234: }
  4293                           ;main.c: 235: irobot_stop_motion(0);
  4294                           
  4295                           ; BSR set to: 0
  4296  013570  0E00               	movlw	0
  4297  013572  EC27  F0AE         	call	_irobot_stop_motion
  4298                           
  4299                           ;main.c: 237: if (MXK_Release())
  4300  013576  ECF5  F0B1         	call	_MXK_Release	;wreg free
  4301  01357A  0900               	iorlw	0
  4302  01357C  B4D8               	btfsc	status,2,c
  4303  01357E  0012               	return	
  4304                           
  4305                           ;main.c: 238: MXK_Dequeue();
  4306  013580  EC32  F0AF         	call	_MXK_Dequeue	;wreg free
  4307  013584  0012               	return	
  4308  013586                     __end_of_mode2:
  4309                           	opt stack 0
  4310                           tblptru	equ	0xFF8
  4311                           tblptrh	equ	0xFF7
  4312                           tblptrl	equ	0xFF6
  4313                           tablat	equ	0xFF5
  4314                           postinc0	equ	0xFEE
  4315                           wreg	equ	0xFE8
  4316                           postdec1	equ	0xFE5
  4317                           fsr1h	equ	0xFE2
  4318                           fsr1l	equ	0xFE1
  4319                           status	equ	0xFD8
  4320                           
  4321 ;; *************** function _irobot_move_straight *****************
  4322 ;; Defined at:
  4323 ;;		line 313 in file "Library/iRobotSerial.c"
  4324 ;; Parameters:    Size  Location     Type
  4325 ;;  straightSpee    2   25[BANK0 ] short 
  4326 ;; Auto vars:     Size  Location     Type
  4327 ;;		None
  4328 ;; Return value:  Size  Location     Type
  4329 ;;                  1    wreg      void 
  4330 ;; Registers used:
  4331 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4332 ;; Tracked objects:
  4333 ;;		On entry : 0/0
  4334 ;;		On exit  : 0/0
  4335 ;;		Unchanged: 0/0
  4336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4337 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4340 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4341 ;;Total ram usage:        2 bytes
  4342 ;; Hardware stack levels used:    1
  4343 ;; Hardware stack levels required when called:    9
  4344 ;; This function calls:
  4345 ;;		_irobot_move
  4346 ;; This function is called by:
  4347 ;;		_mode2
  4348 ;;		_mode4
  4349 ;; This function uses a non-reentrant model
  4350 ;;
  4351                           
  4352                           	psect	text7
  4353  016456                     __ptext7:
  4354                           	opt stack 0
  4355  016456                     _irobot_move_straight:
  4356                           	opt stack 20
  4357                           
  4358                           ;iRobotSerial.c: 314: irobot_move(0, straightSpeed, iR_CONST_STRAIGHT_2);
  4359                           
  4360                           ;incstack = 0
  4361  016456  C079  F070         	movff	irobot_move_straight@straightSpeed,irobot_move@moveSpeed
  4362  01645A  C07A  F071         	movff	irobot_move_straight@straightSpeed+1,irobot_move@moveSpeed+1
  4363  01645E  0E7F               	movlw	127
  4364  016460  0100               	movlb	0	; () banked
  4365  016462  6F73               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  4366  016464  6972               	setf	irobot_move@moveTurnRadius& (0+255),b
  4367  016466  0E00               	movlw	0
  4368  016468  ECF1  F0A1         	call	_irobot_move
  4369  01646C  0012               	return		;funcret
  4370  01646E                     __end_of_irobot_move_straight:
  4371                           	opt stack 0
  4372                           tblptru	equ	0xFF8
  4373                           tblptrh	equ	0xFF7
  4374                           tblptrl	equ	0xFF6
  4375                           tablat	equ	0xFF5
  4376                           postinc0	equ	0xFEE
  4377                           wreg	equ	0xFE8
  4378                           postdec1	equ	0xFE5
  4379                           fsr1h	equ	0xFE2
  4380                           fsr1l	equ	0xFE1
  4381                           status	equ	0xFD8
  4382                           
  4383 ;; *************** function _mode1 *****************
  4384 ;; Defined at:
  4385 ;;		line 121 in file "main.c"
  4386 ;; Parameters:    Size  Location     Type
  4387 ;;		None
  4388 ;; Auto vars:     Size  Location     Type
  4389 ;;  moveto          2    2[BANK3 ] int 
  4390 ;; Return value:  Size  Location     Type
  4391 ;;                  1    wreg      void 
  4392 ;; Registers used:
  4393 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  4394 ;; Tracked objects:
  4395 ;;		On entry : 0/0
  4396 ;;		On exit  : 0/0
  4397 ;;		Unchanged: 0/0
  4398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4400 ;;      Locals:         0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4401 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4402 ;;      Totals:         0       0       0       0       8       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4403 ;;Total ram usage:        8 bytes
  4404 ;; Hardware stack levels used:    1
  4405 ;; Hardware stack levels required when called:   16
  4406 ;; This function calls:
  4407 ;;		_ADC_Start
  4408 ;;		_ADC_Voltage
  4409 ;;		_Console_Render
  4410 ;;		_HMI_Poll
  4411 ;;		_HMI_Render
  4412 ;;		_HMI_SetNumber
  4413 ;;		_MXK_Dequeue
  4414 ;;		_MXK_Release
  4415 ;;		_MXK_SwitchTo
  4416 ;;		_Motor_Move
  4417 ;;		_Motor_Speed
  4418 ;;		___fldiv
  4419 ;;		___fltol
  4420 ;;		_irobot_song_play
  4421 ;;		_irobot_stop_motion
  4422 ;;		_printf
  4423 ;;		_update_angle
  4424 ;;		_update_bump_and_cliff
  4425 ;;		_update_distance
  4426 ;; This function is called by:
  4427 ;;		_main
  4428 ;; This function uses a non-reentrant model
  4429 ;;
  4430                           
  4431                           	psect	text8
  4432  0108C4                     __ptext8:
  4433                           	opt stack 0
  4434  0108C4                     _mode1:
  4435                           	opt stack 14
  4436                           
  4437                           ;main.c: 122: update_bump_and_cliff();
  4438                           
  4439                           ;incstack = 0
  4440  0108C4  ECAD  F0AF         	call	_update_bump_and_cliff	;wreg free
  4441                           
  4442                           ;main.c: 123: update_distance();
  4443  0108C8  EC9F  F0B2         	call	_update_distance	;wreg free
  4444                           
  4445                           ;main.c: 124: update_angle();
  4446  0108CC  ECA8  F0B2         	call	_update_angle	;wreg free
  4447                           
  4448                           ;main.c: 128: if (iRBumpLeft || iRBumpRight) {
  4449  0108D0  0100               	movlb	0	; () banked
  4450  0108D2  51E0               	movf	_iRBumpLeft& (0+255),w,b
  4451  0108D4  A4D8               	btfss	status,2,c
  4452  0108D6  D004               	goto	u13600
  4453                           
  4454                           ; BSR set to: 0
  4455  0108D8  0100               	movlb	0	; () banked
  4456  0108DA  51E1               	movf	_iRBumpRight& (0+255),w,b
  4457  0108DC  B4D8               	btfsc	status,2,c
  4458  0108DE  D006               	goto	l2316
  4459  0108E0                     u13600:
  4460                           
  4461                           ; BSR set to: 0
  4462                           ;main.c: 129: irobot_song_play(0);
  4463                           
  4464                           ; BSR set to: 0
  4465  0108E0  0E00               	movlw	0
  4466  0108E2  EC8B  F0B2         	call	_irobot_song_play
  4467                           
  4468                           ;main.c: 130: irobot_stop_motion(0);
  4469  0108E6  0E00               	movlw	0
  4470  0108E8  EC27  F0AE         	call	_irobot_stop_motion
  4471  0108EC                     l2316:
  4472                           
  4473                           ;main.c: 131: }
  4474                           ;main.c: 132: if (angleTotal > 83) {
  4475  0108EC  0100               	movlb	0	; () banked
  4476  0108EE  BFCD               	btfsc	(_angleTotal+1)& (0+255),7,b
  4477  0108F0  D00B               	goto	l2319
  4478  0108F2  0100               	movlb	0	; () banked
  4479  0108F4  51CD               	movf	(_angleTotal+1)& (0+255),w,b
  4480  0108F6  E105               	bnz	u13610
  4481  0108F8  0E54               	movlw	84
  4482  0108FA  0100               	movlb	0	; () banked
  4483  0108FC  5DCC               	subwf	_angleTotal& (0+255),w,b
  4484  0108FE  A0D8               	btfss	status,0,c
  4485  010900  D003               	goto	l2319
  4486  010902                     u13610:
  4487                           
  4488                           ; BSR set to: 0
  4489                           ;main.c: 133: irobot_stop_motion(0);
  4490  010902  0E00               	movlw	0
  4491  010904  EC27  F0AE         	call	_irobot_stop_motion
  4492  010908                     l2319:
  4493                           
  4494                           ;main.c: 134: }
  4495                           ;main.c: 136: if (MXK_SwitchTo(eMXK_HMI)) {
  4496  010908  0E01               	movlw	1
  4497  01090A  ECB2  F0AE         	call	_MXK_SwitchTo
  4498  01090E  0900               	iorlw	0
  4499  010910  B4D8               	btfsc	status,2,c
  4500  010912  D029               	goto	l2321
  4501                           
  4502                           ;main.c: 137: printf("%c", (char)35);
  4503  010914  0EFB               	movlw	low STR_1
  4504  010916  0100               	movlb	0	; () banked
  4505  010918  6F75               	movwf	printf@f& (0+255),b
  4506  01091A  0EFF               	movlw	high STR_1
  4507  01091C  0100               	movlb	0	; () banked
  4508  01091E  6F76               	movwf	(printf@f+1)& (0+255),b
  4509  010920  0E00               	movlw	0
  4510  010922  0100               	movlb	0	; () banked
  4511  010924  6F78               	movwf	(?_printf+3)& (0+255),b
  4512  010926  0E23               	movlw	35
  4513  010928  6F77               	movwf	(?_printf+2)& (0+255),b
  4514  01092A  EC7E  F092         	call	_printf	;wreg free
  4515                           
  4516                           ;main.c: 138: printf("Total Distance:%u\nLeft Bump:%u\nRight Bump:%u\n", distanceTotal, 
      +                          iRBumpLeft, iRBumpRight);
  4517  01092E  0E73               	movlw	low STR_2
  4518  010930  0100               	movlb	0	; () banked
  4519  010932  6F75               	movwf	printf@f& (0+255),b
  4520  010934  0EFF               	movlw	high STR_2
  4521  010936  0100               	movlb	0	; () banked
  4522  010938  6F76               	movwf	(printf@f+1)& (0+255),b
  4523  01093A  C0CE  F077         	movff	_distanceTotal,?_printf+2
  4524  01093E  C0CF  F078         	movff	_distanceTotal+1,?_printf+3
  4525  010942  C0E0  F079         	movff	_iRBumpLeft,?_printf+4
  4526  010946  0100               	movlb	0	; () banked
  4527  010948  6B7A               	clrf	(?_printf+5)& (0+255),b
  4528  01094A  C0E1  F07B         	movff	_iRBumpRight,?_printf+6
  4529  01094E  0100               	movlb	0	; () banked
  4530  010950  6B7C               	clrf	(?_printf+7)& (0+255),b
  4531  010952  EC7E  F092         	call	_printf	;wreg free
  4532                           
  4533                           ;main.c: 139: Console_Render();
  4534  010956  EC92  F08F         	call	_Console_Render	;wreg free
  4535                           
  4536                           ;main.c: 140: if (MXK_Release())
  4537  01095A  ECF5  F0B1         	call	_MXK_Release	;wreg free
  4538  01095E  0900               	iorlw	0
  4539  010960  A4D8               	btfss	status,2,c
  4540                           
  4541                           ;main.c: 141: MXK_Dequeue();
  4542  010962  EC32  F0AF         	call	_MXK_Dequeue	;wreg free
  4543  010966                     l2321:
  4544                           
  4545                           ;main.c: 142: }
  4546                           ;main.c: 143: HMI_Poll();
  4547  010966  ECAA  F0A9         	call	_HMI_Poll	;wreg free
  4548                           
  4549                           ;main.c: 144: StepRotate = 0;
  4550  01096A  0E00               	movlw	0
  4551  01096C  0100               	movlb	0	; () banked
  4552  01096E  6FC7               	movwf	(_StepRotate+1)& (0+255),b
  4553  010970  0E00               	movlw	0
  4554  010972  6FC6               	movwf	_StepRotate& (0+255),b
  4555                           
  4556                           ; BSR set to: 0
  4557                           ;main.c: 145: MinDist = 1000;
  4558  010974  0E03               	movlw	3
  4559  010976  0100               	movlb	0	; () banked
  4560  010978  6FFC               	movwf	(_MinDist+1)& (0+255),b
  4561  01097A  0EE8               	movlw	232
  4562  01097C  6FFB               	movwf	_MinDist& (0+255),b
  4563                           
  4564                           ; BSR set to: 0
  4565                           ;main.c: 146: Stepstomin = 0;
  4566  01097E  0E00               	movlw	0
  4567  010980  0100               	movlb	0	; () banked
  4568  010982  6FC5               	movwf	(_Stepstomin+1)& (0+255),b
  4569  010984  0E00               	movlw	0
  4570  010986  6FC4               	movwf	_Stepstomin& (0+255),b
  4571                           
  4572                           ; BSR set to: 0
  4573                           ;main.c: 147: IRValue = 0;
  4574  010988  0E00               	movlw	0
  4575  01098A  0100               	movlb	0	; () banked
  4576  01098C  6FC3               	movwf	(_IRValue+1)& (0+255),b
  4577  01098E  0E00               	movlw	0
  4578  010990  6FC2               	movwf	_IRValue& (0+255),b
  4579                           
  4580                           ; BSR set to: 0
  4581                           ;main.c: 148: TimerX = 8;
  4582  010992  0E00               	movlw	0
  4583  010994  0100               	movlb	0	; () banked
  4584  010996  6FFA               	movwf	(_TimerX+1)& (0+255),b
  4585  010998  0E08               	movlw	8
  4586  01099A  6FF9               	movwf	_TimerX& (0+255),b
  4587                           
  4588                           ;main.c: 149: while (StepRotate < 400) {
  4589  01099C  D0F9               	goto	u13720
  4590  01099E                     
  4591                           ; BSR set to: 0
  4592                           ;main.c: 150: StepRotate++;
  4593                           
  4594                           ; BSR set to: 0
  4595  01099E  0100               	movlb	0	; () banked
  4596  0109A0  4BC6               	infsnz	_StepRotate& (0+255),f,b
  4597  0109A2  2BC7               	incf	(_StepRotate+1)& (0+255),f,b
  4598                           
  4599                           ; BSR set to: 0
  4600                           ;main.c: 151: ADC_Start(&ADC_AN0);
  4601  0109A4  0EF4               	movlw	low _ADC_AN0
  4602  0109A6  0100               	movlb	0	; () banked
  4603  0109A8  6F62               	movwf	ADC_Start@pInput& (0+255),b
  4604  0109AA  0E00               	movlw	high _ADC_AN0
  4605  0109AC  0100               	movlb	0	; () banked
  4606  0109AE  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
  4607  0109B0  EC87  F0A7         	call	_ADC_Start	;wreg free
  4608                           
  4609                           ;main.c: 152: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4610  0109B4  0EF4               	movlw	low _ADC_AN0
  4611  0109B6  0100               	movlb	0	; () banked
  4612  0109B8  6FA0               	movwf	ADC_Voltage@pInput& (0+255),b
  4613  0109BA  0E00               	movlw	high _ADC_AN0
  4614  0109BC  0100               	movlb	0	; () banked
  4615  0109BE  6FA1               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  4616  0109C0  EC44  F09D         	call	_ADC_Voltage	;wreg free
  4617  0109C4  C0A0  F3F4         	movff	?_ADC_Voltage,_mode1$15583
  4618  0109C8  C0A1  F3F5         	movff	?_ADC_Voltage+1,_mode1$15583+1
  4619  0109CC  C0A2  F3F6         	movff	?_ADC_Voltage+2,_mode1$15583+2
  4620  0109D0  C0A3  F3F7         	movff	?_ADC_Voltage+3,_mode1$15583+3
  4621                           
  4622                           ;main.c: 152: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4623  0109D4  C3F4  F072         	movff	_mode1$15583,___fldiv@a
  4624  0109D8  C3F5  F073         	movff	_mode1$15583+1,___fldiv@a+1
  4625  0109DC  C3F6  F074         	movff	_mode1$15583+2,___fldiv@a+2
  4626  0109E0  C3F7  F075         	movff	_mode1$15583+3,___fldiv@a+3
  4627  0109E4  0E00               	movlw	0
  4628  0109E6  0100               	movlb	0	; () banked
  4629  0109E8  6F6E               	movwf	___fldiv@b& (0+255),b
  4630  0109EA  0E00               	movlw	0
  4631  0109EC  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
  4632  0109EE  0E6C               	movlw	108
  4633  0109F0  6F70               	movwf	(___fldiv@b+2)& (0+255),b
  4634  0109F2  0E42               	movlw	66
  4635  0109F4  6F71               	movwf	(___fldiv@b+3)& (0+255),b
  4636  0109F6  EC53  F088         	call	___fldiv	;wreg free
  4637  0109FA  C06E  F0B2         	movff	?___fldiv,___fltol@f1
  4638  0109FE  C06F  F0B3         	movff	?___fldiv+1,___fltol@f1+1
  4639  010A02  C070  F0B4         	movff	?___fldiv+2,___fltol@f1+2
  4640  010A06  C071  F0B5         	movff	?___fldiv+3,___fltol@f1+3
  4641  010A0A  EC56  F09B         	call	___fltol	;wreg free
  4642  010A0E  C0B2  F0C2         	movff	?___fltol,_IRValue
  4643  010A12  C0B3  F0C3         	movff	?___fltol+1,_IRValue+1
  4644                           
  4645                           ;main.c: 153: if (MXK_SwitchTo(eMXK_HMI)) {
  4646  010A16  0E01               	movlw	1
  4647  010A18  ECB2  F0AE         	call	_MXK_SwitchTo
  4648  010A1C  0900               	iorlw	0
  4649  010A1E  B4D8               	btfsc	status,2,c
  4650  010A20  D00E               	goto	l2325
  4651                           
  4652                           ;main.c: 154: HMI_SetNumber(IRValue);
  4653  010A22  C0C2  F076         	movff	_IRValue,HMI_SetNumber@pInput
  4654  010A26  C0C3  F077         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  4655  010A2A  ECF0  F0B0         	call	_HMI_SetNumber	;wreg free
  4656                           
  4657                           ;main.c: 155: HMI_Render();
  4658  010A2E  EC13  F0AF         	call	_HMI_Render	;wreg free
  4659                           
  4660                           ;main.c: 156: if (MXK_Release())
  4661  010A32  ECF5  F0B1         	call	_MXK_Release	;wreg free
  4662  010A36  0900               	iorlw	0
  4663  010A38  A4D8               	btfss	status,2,c
  4664                           
  4665                           ;main.c: 157: MXK_Dequeue();
  4666  010A3A  EC32  F0AF         	call	_MXK_Dequeue	;wreg free
  4667  010A3E                     l2325:
  4668                           
  4669                           ;main.c: 158: }
  4670                           ;main.c: 159: if (IRValue < MinDist) {
  4671  010A3E  0100               	movlb	0	; () banked
  4672  010A40  51FB               	movf	_MinDist& (0+255),w,b
  4673  010A42  0100               	movlb	0	; () banked
  4674  010A44  5DC2               	subwf	_IRValue& (0+255),w,b
  4675  010A46  0100               	movlb	0	; () banked
  4676  010A48  51C3               	movf	(_IRValue+1)& (0+255),w,b
  4677  010A4A  0A80               	xorlw	128
  4678  010A4C  0103               	movlb	3	; () banked
  4679  010A4E  6FF0               	movwf	??_mode1& (0+255),b
  4680  010A50  0100               	movlb	0	; () banked
  4681  010A52  51FC               	movf	(_MinDist+1)& (0+255),w,b
  4682  010A54  0A80               	xorlw	128
  4683  010A56  0103               	movlb	3	; () banked
  4684  010A58  59F0               	subwfb	??_mode1& (0+255),w,b
  4685  010A5A  B0D8               	btfsc	status,0,c
  4686  010A5C  D008               	goto	l2326
  4687                           
  4688                           ; BSR set to: 3
  4689                           ;main.c: 160: MinDist = IRValue;
  4690  010A5E  C0C2  F0FB         	movff	_IRValue,_MinDist
  4691  010A62  C0C3  F0FC         	movff	_IRValue+1,_MinDist+1
  4692                           
  4693                           ;main.c: 161: Stepstomin = StepRotate;
  4694  010A66  C0C6  F0C4         	movff	_StepRotate,_Stepstomin
  4695  010A6A  C0C7  F0C5         	movff	_StepRotate+1,_Stepstomin+1
  4696  010A6E                     l2326:
  4697                           
  4698                           ; BSR set to: 3
  4699                           ;main.c: 162: }
  4700                           ;main.c: 163: if (MXK_SwitchTo(eMXK_Motor)) {
  4701                           
  4702                           ; BSR set to: 3
  4703  010A6E  0E08               	movlw	8
  4704  010A70  ECB2  F0AE         	call	_MXK_SwitchTo
  4705  010A74  0900               	iorlw	0
  4706  010A76  B4D8               	btfsc	status,2,c
  4707  010A78  D020               	goto	l2328
  4708                           
  4709                           ;main.c: 164: Motor_Speed(&Stepper, (50));
  4710  010A7A  0EC7               	movlw	low _Stepper
  4711  010A7C  0100               	movlb	0	; () banked
  4712  010A7E  6F7B               	movwf	Motor_Speed@pMotor& (0+255),b
  4713  010A80  0E03               	movlw	high _Stepper
  4714  010A82  0100               	movlb	0	; () banked
  4715  010A84  6F7C               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  4716  010A86  0E00               	movlw	0
  4717  010A88  0100               	movlb	0	; () banked
  4718  010A8A  6F7E               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  4719  010A8C  0E32               	movlw	50
  4720  010A8E  6F7D               	movwf	Motor_Speed@pFrequency& (0+255),b
  4721  010A90  ECDB  F0B0         	call	_Motor_Speed	;wreg free
  4722                           
  4723                           ;main.c: 165: Motor_Move(&Stepper, 1);
  4724  010A94  0EC7               	movlw	low _Stepper
  4725  010A96  0100               	movlb	0	; () banked
  4726  010A98  6F63               	movwf	Motor_Move@pMotor& (0+255),b
  4727  010A9A  0E03               	movlw	high _Stepper
  4728  010A9C  0100               	movlb	0	; () banked
  4729  010A9E  6F64               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  4730  010AA0  0E00               	movlw	0
  4731  010AA2  0100               	movlb	0	; () banked
  4732  010AA4  6F66               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  4733  010AA6  0E01               	movlw	1
  4734  010AA8  6F65               	movwf	Motor_Move@pDelta& (0+255),b
  4735  010AAA  ECCA  F0AF         	call	_Motor_Move	;wreg free
  4736                           
  4737                           ;main.c: 166: if (MXK_Release())
  4738  010AAE  ECF5  F0B1         	call	_MXK_Release	;wreg free
  4739  010AB2  0900               	iorlw	0
  4740  010AB4  A4D8               	btfss	status,2,c
  4741                           
  4742                           ;main.c: 167: MXK_Dequeue();
  4743  010AB6  EC32  F0AF         	call	_MXK_Dequeue	;wreg free
  4744  010ABA                     l2328:
  4745                           
  4746                           ;main.c: 168: }
  4747                           ;main.c: 169: TimerX = 10;
  4748  010ABA  0E00               	movlw	0
  4749  010ABC  0100               	movlb	0	; () banked
  4750  010ABE  6FFA               	movwf	(_TimerX+1)& (0+255),b
  4751  010AC0  0E0A               	movlw	10
  4752  010AC2  6FF9               	movwf	_TimerX& (0+255),b
  4753                           
  4754                           ; BSR set to: 0
  4755                           ;main.c: 170: if (TimerX > 0) {
  4756  010AC4  0100               	movlb	0	; () banked
  4757  010AC6  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  4758  010AC8  D063               	goto	u13720
  4759  010ACA  0100               	movlb	0	; () banked
  4760  010ACC  51FA               	movf	(_TimerX+1)& (0+255),w,b
  4761  010ACE  E156               	bnz	l16338
  4762  010AD0  0100               	movlb	0	; () banked
  4763  010AD2  05F9               	decf	_TimerX& (0+255),w,b
  4764  010AD4  B0D8               	btfsc	status,0,c
  4765  010AD6  D052               	goto	l2330
  4766  010AD8  D05B               	goto	u13720
  4767  010ADA                     l16320:
  4768                           
  4769                           ; BSR set to: 0
  4770                           ;main.c: 172: ADC_Start(&ADC_AN0);
  4771  010ADA  0EF4               	movlw	low _ADC_AN0
  4772  010ADC  0100               	movlb	0	; () banked
  4773  010ADE  6F62               	movwf	ADC_Start@pInput& (0+255),b
  4774  010AE0  0E00               	movlw	high _ADC_AN0
  4775  010AE2  0100               	movlb	0	; () banked
  4776  010AE4  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
  4777  010AE6  EC87  F0A7         	call	_ADC_Start	;wreg free
  4778                           
  4779                           ;main.c: 173: if (MXK_SwitchTo(eMXK_HMI)) {
  4780  010AEA  0E01               	movlw	1
  4781  010AEC  ECB2  F0AE         	call	_MXK_SwitchTo
  4782  010AF0  0900               	iorlw	0
  4783  010AF2  B4D8               	btfsc	status,2,c
  4784  010AF4  D00E               	goto	l2333
  4785                           
  4786                           ;main.c: 174: HMI_SetNumber(IRValue);
  4787  010AF6  C0C2  F076         	movff	_IRValue,HMI_SetNumber@pInput
  4788  010AFA  C0C3  F077         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  4789  010AFE  ECF0  F0B0         	call	_HMI_SetNumber	;wreg free
  4790                           
  4791                           ;main.c: 175: HMI_Render();
  4792  010B02  EC13  F0AF         	call	_HMI_Render	;wreg free
  4793                           
  4794                           ;main.c: 176: if (MXK_Release())
  4795  010B06  ECF5  F0B1         	call	_MXK_Release	;wreg free
  4796  010B0A  0900               	iorlw	0
  4797  010B0C  A4D8               	btfss	status,2,c
  4798                           
  4799                           ;main.c: 177: MXK_Dequeue();
  4800  010B0E  EC32  F0AF         	call	_MXK_Dequeue	;wreg free
  4801  010B12                     l2333:
  4802                           
  4803                           ;main.c: 178: }
  4804                           ;main.c: 179: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4805  010B12  0EF4               	movlw	low _ADC_AN0
  4806  010B14  0100               	movlb	0	; () banked
  4807  010B16  6FA0               	movwf	ADC_Voltage@pInput& (0+255),b
  4808  010B18  0E00               	movlw	high _ADC_AN0
  4809  010B1A  0100               	movlb	0	; () banked
  4810  010B1C  6FA1               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  4811  010B1E  EC44  F09D         	call	_ADC_Voltage	;wreg free
  4812  010B22  C0A0  F3F4         	movff	?_ADC_Voltage,_mode1$15583
  4813  010B26  C0A1  F3F5         	movff	?_ADC_Voltage+1,_mode1$15583+1
  4814  010B2A  C0A2  F3F6         	movff	?_ADC_Voltage+2,_mode1$15583+2
  4815  010B2E  C0A3  F3F7         	movff	?_ADC_Voltage+3,_mode1$15583+3
  4816                           
  4817                           ;main.c: 178: }
  4818                           ;main.c: 179: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4819  010B32  C3F4  F072         	movff	_mode1$15583,___fldiv@a
  4820  010B36  C3F5  F073         	movff	_mode1$15583+1,___fldiv@a+1
  4821  010B3A  C3F6  F074         	movff	_mode1$15583+2,___fldiv@a+2
  4822  010B3E  C3F7  F075         	movff	_mode1$15583+3,___fldiv@a+3
  4823  010B42  0E00               	movlw	0
  4824  010B44  0100               	movlb	0	; () banked
  4825  010B46  6F6E               	movwf	___fldiv@b& (0+255),b
  4826  010B48  0E00               	movlw	0
  4827  010B4A  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
  4828  010B4C  0E6C               	movlw	108
  4829  010B4E  6F70               	movwf	(___fldiv@b+2)& (0+255),b
  4830  010B50  0E42               	movlw	66
  4831  010B52  6F71               	movwf	(___fldiv@b+3)& (0+255),b
  4832  010B54  EC53  F088         	call	___fldiv	;wreg free
  4833  010B58  C06E  F0B2         	movff	?___fldiv,___fltol@f1
  4834  010B5C  C06F  F0B3         	movff	?___fldiv+1,___fltol@f1+1
  4835  010B60  C070  F0B4         	movff	?___fldiv+2,___fltol@f1+2
  4836  010B64  C071  F0B5         	movff	?___fldiv+3,___fltol@f1+3
  4837  010B68  EC56  F09B         	call	___fltol	;wreg free
  4838  010B6C  C0B2  F0C2         	movff	?___fltol,_IRValue
  4839  010B70  C0B3  F0C3         	movff	?___fltol+1,_IRValue+1
  4840                           
  4841                           ;main.c: 180: TimerX--;
  4842  010B74  0100               	movlb	0	; () banked
  4843  010B76  07F9               	decf	_TimerX& (0+255),f,b
  4844  010B78  A0D8               	btfss	status,0,c
  4845  010B7A  07FA               	decf	(_TimerX+1)& (0+255),f,b
  4846  010B7C                     l2330:
  4847  010B7C                     l16338:
  4848                           
  4849                           ; BSR set to: 0
  4850  010B7C  0100               	movlb	0	; () banked
  4851  010B7E  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  4852  010B80  D007               	goto	u13720
  4853  010B82  0100               	movlb	0	; () banked
  4854  010B84  51FA               	movf	(_TimerX+1)& (0+255),w,b
  4855  010B86  E1A9               	bnz	l16320
  4856  010B88  0100               	movlb	0	; () banked
  4857  010B8A  05F9               	decf	_TimerX& (0+255),w,b
  4858  010B8C  B0D8               	btfsc	status,0,c
  4859  010B8E  D7A5               	goto	l2331
  4860  010B90                     u13720:
  4861                           
  4862                           ; BSR set to: 0
  4863                           
  4864                           ; BSR set to: 0
  4865                           
  4866                           ; BSR set to: 0
  4867                           
  4868                           ; BSR set to: 0
  4869  010B90  0100               	movlb	0	; () banked
  4870  010B92  BFC7               	btfsc	(_StepRotate+1)& (0+255),7,b
  4871  010B94  D704               	goto	l2323
  4872  010B96  0E90               	movlw	144
  4873  010B98  0100               	movlb	0	; () banked
  4874  010B9A  5DC6               	subwf	_StepRotate& (0+255),w,b
  4875  010B9C  0E01               	movlw	1
  4876  010B9E  0100               	movlb	0	; () banked
  4877  010BA0  59C7               	subwfb	(_StepRotate+1)& (0+255),w,b
  4878  010BA2  A0D8               	btfss	status,0,c
  4879  010BA4  D6FC               	goto	l2323
  4880                           
  4881                           ; BSR set to: 0
  4882                           ;main.c: 181: }
  4883                           ;main.c: 182: }
  4884                           ;main.c: 183: }
  4885                           ;main.c: 184: if (MXK_SwitchTo(eMXK_Motor)) {
  4886                           
  4887                           ; BSR set to: 0
  4888  010BA6  0E08               	movlw	8
  4889  010BA8  ECB2  F0AE         	call	_MXK_SwitchTo
  4890  010BAC  0900               	iorlw	0
  4891  010BAE  B4D8               	btfsc	status,2,c
  4892  010BB0  D08A               	goto	l2338
  4893                           
  4894                           ;main.c: 185: Motor_Speed(&Stepper, (50));
  4895  010BB2  0EC7               	movlw	low _Stepper
  4896  010BB4  0100               	movlb	0	; () banked
  4897  010BB6  6F7B               	movwf	Motor_Speed@pMotor& (0+255),b
  4898  010BB8  0E03               	movlw	high _Stepper
  4899  010BBA  0100               	movlb	0	; () banked
  4900  010BBC  6F7C               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  4901  010BBE  0E00               	movlw	0
  4902  010BC0  0100               	movlb	0	; () banked
  4903  010BC2  6F7E               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  4904  010BC4  0E32               	movlw	50
  4905  010BC6  6F7D               	movwf	Motor_Speed@pFrequency& (0+255),b
  4906  010BC8  ECDB  F0B0         	call	_Motor_Speed	;wreg free
  4907                           
  4908                           ;main.c: 186: int moveto = 400 - Stepstomin;
  4909  010BCC  C0C4  F3F0         	movff	_Stepstomin,??_mode1
  4910  010BD0  C0C5  F3F1         	movff	_Stepstomin+1,??_mode1+1
  4911  010BD4  0103               	movlb	3	; () banked
  4912  010BD6  1FF0               	comf	??_mode1& (0+255),f,b
  4913  010BD8  1FF1               	comf	(??_mode1+1)& (0+255),f,b
  4914  010BDA  4BF0               	infsnz	??_mode1& (0+255),f,b
  4915  010BDC  2BF1               	incf	(??_mode1+1)& (0+255),f,b
  4916  010BDE  0E90               	movlw	144
  4917  010BE0  0103               	movlb	3	; () banked
  4918  010BE2  25F0               	addwf	??_mode1& (0+255),w,b
  4919  010BE4  0103               	movlb	3	; () banked
  4920  010BE6  6FF2               	movwf	mode1@moveto& (0+255),b
  4921  010BE8  0E01               	movlw	1
  4922  010BEA  0103               	movlb	3	; () banked
  4923  010BEC  21F1               	addwfc	(??_mode1+1)& (0+255),w,b
  4924  010BEE  0103               	movlb	3	; () banked
  4925  010BF0  6FF3               	movwf	(mode1@moveto+1)& (0+255),b
  4926                           
  4927                           ; BSR set to: 3
  4928                           ;main.c: 188: Motor_Move(&Stepper, (-moveto));
  4929  010BF2  0EC7               	movlw	low _Stepper
  4930  010BF4  0100               	movlb	0	; () banked
  4931  010BF6  6F63               	movwf	Motor_Move@pMotor& (0+255),b
  4932  010BF8  0E03               	movlw	high _Stepper
  4933  010BFA  0100               	movlb	0	; () banked
  4934  010BFC  6F64               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  4935  010BFE  C3F2  F3F0         	movff	mode1@moveto,??_mode1
  4936  010C02  C3F3  F3F1         	movff	mode1@moveto+1,??_mode1+1
  4937  010C06  0103               	movlb	3	; () banked
  4938  010C08  1FF0               	comf	??_mode1& (0+255),f,b
  4939  010C0A  1FF1               	comf	(??_mode1+1)& (0+255),f,b
  4940  010C0C  4BF0               	infsnz	??_mode1& (0+255),f,b
  4941  010C0E  2BF1               	incf	(??_mode1+1)& (0+255),f,b
  4942  010C10  C3F0  F065         	movff	??_mode1,Motor_Move@pDelta
  4943  010C14  C3F1  F066         	movff	??_mode1+1,Motor_Move@pDelta+1
  4944  010C18  ECCA  F0AF         	call	_Motor_Move	;wreg free
  4945                           
  4946                           ;main.c: 189: if (MXK_Release())
  4947  010C1C  ECF5  F0B1         	call	_MXK_Release	;wreg free
  4948  010C20  0900               	iorlw	0
  4949  010C22  B4D8               	btfsc	status,2,c
  4950  010C24  D050               	goto	l2338
  4951                           
  4952                           ;main.c: 190: MXK_Dequeue();
  4953  010C26  EC32  F0AF         	call	_MXK_Dequeue	;wreg free
  4954                           
  4955                           ;main.c: 191: }
  4956                           ;main.c: 192: while (Stepper.mDelta > 0) {
  4957  010C2A  D04D               	goto	l2338
  4958  010C2C                     l16354:
  4959                           
  4960                           ;main.c: 193: ADC_Start(&ADC_AN0);
  4961  010C2C  0EF4               	movlw	low _ADC_AN0
  4962  010C2E  0100               	movlb	0	; () banked
  4963  010C30  6F62               	movwf	ADC_Start@pInput& (0+255),b
  4964  010C32  0E00               	movlw	high _ADC_AN0
  4965  010C34  0100               	movlb	0	; () banked
  4966  010C36  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
  4967  010C38  EC87  F0A7         	call	_ADC_Start	;wreg free
  4968                           
  4969                           ;main.c: 194: if (MXK_SwitchTo(eMXK_HMI)) {
  4970  010C3C  0E01               	movlw	1
  4971  010C3E  ECB2  F0AE         	call	_MXK_SwitchTo
  4972  010C42  0900               	iorlw	0
  4973  010C44  B4D8               	btfsc	status,2,c
  4974  010C46  D00E               	goto	l2341
  4975                           
  4976                           ;main.c: 195: HMI_SetNumber(IRValue);
  4977  010C48  C0C2  F076         	movff	_IRValue,HMI_SetNumber@pInput
  4978  010C4C  C0C3  F077         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  4979  010C50  ECF0  F0B0         	call	_HMI_SetNumber	;wreg free
  4980                           
  4981                           ;main.c: 196: HMI_Render();
  4982  010C54  EC13  F0AF         	call	_HMI_Render	;wreg free
  4983                           
  4984                           ;main.c: 197: if (MXK_Release())
  4985  010C58  ECF5  F0B1         	call	_MXK_Release	;wreg free
  4986  010C5C  0900               	iorlw	0
  4987  010C5E  A4D8               	btfss	status,2,c
  4988                           
  4989                           ;main.c: 198: MXK_Dequeue();
  4990  010C60  EC32  F0AF         	call	_MXK_Dequeue	;wreg free
  4991  010C64                     l2341:
  4992                           
  4993                           ;main.c: 199: }
  4994                           ;main.c: 200: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4995  010C64  0EF4               	movlw	low _ADC_AN0
  4996  010C66  0100               	movlb	0	; () banked
  4997  010C68  6FA0               	movwf	ADC_Voltage@pInput& (0+255),b
  4998  010C6A  0E00               	movlw	high _ADC_AN0
  4999  010C6C  0100               	movlb	0	; () banked
  5000  010C6E  6FA1               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  5001  010C70  EC44  F09D         	call	_ADC_Voltage	;wreg free
  5002  010C74  C0A0  F3F4         	movff	?_ADC_Voltage,_mode1$15583
  5003  010C78  C0A1  F3F5         	movff	?_ADC_Voltage+1,_mode1$15583+1
  5004  010C7C  C0A2  F3F6         	movff	?_ADC_Voltage+2,_mode1$15583+2
  5005  010C80  C0A3  F3F7         	movff	?_ADC_Voltage+3,_mode1$15583+3
  5006                           
  5007                           ;main.c: 199: }
  5008                           ;main.c: 200: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  5009  010C84  C3F4  F072         	movff	_mode1$15583,___fldiv@a
  5010  010C88  C3F5  F073         	movff	_mode1$15583+1,___fldiv@a+1
  5011  010C8C  C3F6  F074         	movff	_mode1$15583+2,___fldiv@a+2
  5012  010C90  C3F7  F075         	movff	_mode1$15583+3,___fldiv@a+3
  5013  010C94  0E00               	movlw	0
  5014  010C96  0100               	movlb	0	; () banked
  5015  010C98  6F6E               	movwf	___fldiv@b& (0+255),b
  5016  010C9A  0E00               	movlw	0
  5017  010C9C  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
  5018  010C9E  0E6C               	movlw	108
  5019  010CA0  6F70               	movwf	(___fldiv@b+2)& (0+255),b
  5020  010CA2  0E42               	movlw	66
  5021  010CA4  6F71               	movwf	(___fldiv@b+3)& (0+255),b
  5022  010CA6  EC53  F088         	call	___fldiv	;wreg free
  5023  010CAA  C06E  F0B2         	movff	?___fldiv,___fltol@f1
  5024  010CAE  C06F  F0B3         	movff	?___fldiv+1,___fltol@f1+1
  5025  010CB2  C070  F0B4         	movff	?___fldiv+2,___fltol@f1+2
  5026  010CB6  C071  F0B5         	movff	?___fldiv+3,___fltol@f1+3
  5027  010CBA  EC56  F09B         	call	___fltol	;wreg free
  5028  010CBE  C0B2  F0C2         	movff	?___fltol,_IRValue
  5029  010CC2  C0B3  F0C3         	movff	?___fltol+1,_IRValue+1
  5030  010CC6                     l2338:
  5031  010CC6  0103               	movlb	3	; () banked
  5032  010CC8  BFC8               	btfsc	(_Stepper+1)& (0+255),7,b
  5033  010CCA  0012               	return	
  5034  010CCC  0103               	movlb	3	; () banked
  5035  010CCE  51C8               	movf	(_Stepper+1)& (0+255),w,b
  5036  010CD0  E1AD               	bnz	l16354
  5037  010CD2  0103               	movlb	3	; () banked
  5038  010CD4  05C7               	decf	_Stepper& (0+255),w,b
  5039  010CD6  A0D8               	btfss	status,0,c
  5040  010CD8  0012               	return	
  5041  010CDA  D7A8               	goto	l2339
  5042  010CDC                     __end_of_mode1:
  5043                           	opt stack 0
  5044                           tblptru	equ	0xFF8
  5045                           tblptrh	equ	0xFF7
  5046                           tblptrl	equ	0xFF6
  5047                           tablat	equ	0xFF5
  5048                           postinc0	equ	0xFEE
  5049                           wreg	equ	0xFE8
  5050                           postdec1	equ	0xFE5
  5051                           fsr1h	equ	0xFE2
  5052                           fsr1l	equ	0xFE1
  5053                           status	equ	0xFD8
  5054                           
  5055 ;; *************** function _update_distance *****************
  5056 ;; Defined at:
  5057 ;;		line 325 in file "Library/iRobotSerial.c"
  5058 ;; Parameters:    Size  Location     Type
  5059 ;;		None
  5060 ;; Auto vars:     Size  Location     Type
  5061 ;;		None
  5062 ;; Return value:  Size  Location     Type
  5063 ;;                  1    wreg      void 
  5064 ;; Registers used:
  5065 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5066 ;; Tracked objects:
  5067 ;;		On entry : 0/0
  5068 ;;		On exit  : 0/0
  5069 ;;		Unchanged: 0/0
  5070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5072 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5074 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5075 ;;Total ram usage:        0 bytes
  5076 ;; Hardware stack levels used:    1
  5077 ;; Hardware stack levels required when called:   10
  5078 ;; This function calls:
  5079 ;;		_irobot_query_and_update
  5080 ;; This function is called by:
  5081 ;;		_mode1
  5082 ;;		_mode2
  5083 ;;		_mode4
  5084 ;; This function uses a non-reentrant model
  5085 ;;
  5086                           
  5087                           	psect	text9
  5088  01653E                     __ptext9:
  5089                           	opt stack 0
  5090  01653E                     _update_distance:
  5091                           	opt stack 19
  5092                           
  5093                           ;iRobotSerial.c: 326: irobot_query_and_update(1, iR_PKT_DISTANCE);
  5094                           
  5095                           ; BSR set to: 3
  5096                           ;incstack = 0
  5097  01653E  0E00               	movlw	0
  5098  016540  0100               	movlb	0	; () banked
  5099  016542  6F67               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  5100  016544  0E13               	movlw	19
  5101  016546  6F66               	movwf	?_irobot_query_and_update& (0+255),b
  5102  016548  0E01               	movlw	1
  5103  01654A  ECD7  F095         	call	_irobot_query_and_update
  5104  01654E  0012               	return		;funcret
  5105  016550                     __end_of_update_distance:
  5106                           	opt stack 0
  5107                           tblptru	equ	0xFF8
  5108                           tblptrh	equ	0xFF7
  5109                           tblptrl	equ	0xFF6
  5110                           tablat	equ	0xFF5
  5111                           postinc0	equ	0xFEE
  5112                           wreg	equ	0xFE8
  5113                           postdec1	equ	0xFE5
  5114                           fsr1h	equ	0xFE2
  5115                           fsr1l	equ	0xFE1
  5116                           status	equ	0xFD8
  5117                           
  5118 ;; *************** function _update_bump_and_cliff *****************
  5119 ;; Defined at:
  5120 ;;		line 318 in file "Library/iRobotSerial.c"
  5121 ;; Parameters:    Size  Location     Type
  5122 ;;		None
  5123 ;; Auto vars:     Size  Location     Type
  5124 ;;		None
  5125 ;; Return value:  Size  Location     Type
  5126 ;;                  1    wreg      void 
  5127 ;; Registers used:
  5128 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5129 ;; Tracked objects:
  5130 ;;		On entry : 0/0
  5131 ;;		On exit  : 0/0
  5132 ;;		Unchanged: 0/0
  5133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5137 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5138 ;;Total ram usage:        0 bytes
  5139 ;; Hardware stack levels used:    1
  5140 ;; Hardware stack levels required when called:   10
  5141 ;; This function calls:
  5142 ;;		_irobot_query_and_update
  5143 ;; This function is called by:
  5144 ;;		_mode1
  5145 ;;		_mode2
  5146 ;;		_mode4
  5147 ;; This function uses a non-reentrant model
  5148 ;;
  5149                           
  5150                           	psect	text10
  5151  015F5A                     __ptext10:
  5152                           	opt stack 0
  5153  015F5A                     _update_bump_and_cliff:
  5154                           	opt stack 19
  5155                           
  5156                           ;iRobotSerial.c: 319: irobot_query_and_update(5, iR_PKT_BUMP_DROP,
  5157                           ;iRobotSerial.c: 320: iR_PKT_CLIFF_L, iR_PKT_CLIFF_FL,
  5158                           ;iRobotSerial.c: 321: iR_PKT_CLIFF_FR, iR_PKT_CLIFF_R);
  5159                           
  5160                           ;incstack = 0
  5161  015F5A  0E00               	movlw	0
  5162  015F5C  0100               	movlb	0	; () banked
  5163  015F5E  6F67               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  5164  015F60  0E07               	movlw	7
  5165  015F62  6F66               	movwf	?_irobot_query_and_update& (0+255),b
  5166  015F64  0E00               	movlw	0
  5167  015F66  0100               	movlb	0	; () banked
  5168  015F68  6F69               	movwf	(?_irobot_query_and_update+3)& (0+255),b
  5169  015F6A  0E09               	movlw	9
  5170  015F6C  6F68               	movwf	(?_irobot_query_and_update+2)& (0+255),b
  5171  015F6E  0E00               	movlw	0
  5172  015F70  0100               	movlb	0	; () banked
  5173  015F72  6F6B               	movwf	(?_irobot_query_and_update+5)& (0+255),b
  5174  015F74  0E0A               	movlw	10
  5175  015F76  6F6A               	movwf	(?_irobot_query_and_update+4)& (0+255),b
  5176  015F78  0E00               	movlw	0
  5177  015F7A  0100               	movlb	0	; () banked
  5178  015F7C  6F6D               	movwf	(?_irobot_query_and_update+7)& (0+255),b
  5179  015F7E  0E0B               	movlw	11
  5180  015F80  6F6C               	movwf	(?_irobot_query_and_update+6)& (0+255),b
  5181  015F82  0E00               	movlw	0
  5182  015F84  0100               	movlb	0	; () banked
  5183  015F86  6F6F               	movwf	(?_irobot_query_and_update+9)& (0+255),b
  5184  015F88  0E0C               	movlw	12
  5185  015F8A  6F6E               	movwf	(?_irobot_query_and_update+8)& (0+255),b
  5186  015F8C  0E05               	movlw	5
  5187  015F8E  ECD7  F095         	call	_irobot_query_and_update
  5188  015F92  0012               	return		;funcret
  5189  015F94                     __end_of_update_bump_and_cliff:
  5190                           	opt stack 0
  5191                           tblptru	equ	0xFF8
  5192                           tblptrh	equ	0xFF7
  5193                           tblptrl	equ	0xFF6
  5194                           tablat	equ	0xFF5
  5195                           postinc0	equ	0xFEE
  5196                           wreg	equ	0xFE8
  5197                           postdec1	equ	0xFE5
  5198                           fsr1h	equ	0xFE2
  5199                           fsr1l	equ	0xFE1
  5200                           status	equ	0xFD8
  5201                           
  5202 ;; *************** function _update_angle *****************
  5203 ;; Defined at:
  5204 ;;		line 330 in file "Library/iRobotSerial.c"
  5205 ;; Parameters:    Size  Location     Type
  5206 ;;		None
  5207 ;; Auto vars:     Size  Location     Type
  5208 ;;		None
  5209 ;; Return value:  Size  Location     Type
  5210 ;;                  1    wreg      void 
  5211 ;; Registers used:
  5212 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5213 ;; Tracked objects:
  5214 ;;		On entry : 0/0
  5215 ;;		On exit  : 0/0
  5216 ;;		Unchanged: 0/0
  5217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5221 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5222 ;;Total ram usage:        0 bytes
  5223 ;; Hardware stack levels used:    1
  5224 ;; Hardware stack levels required when called:   10
  5225 ;; This function calls:
  5226 ;;		_irobot_query_and_update
  5227 ;; This function is called by:
  5228 ;;		_irobot_rotate
  5229 ;;		_mode1
  5230 ;;		_mode2
  5231 ;;		_mode4
  5232 ;; This function uses a non-reentrant model
  5233 ;;
  5234                           
  5235                           	psect	text11
  5236  016550                     __ptext11:
  5237                           	opt stack 0
  5238  016550                     _update_angle:
  5239                           	opt stack 19
  5240                           
  5241                           ;iRobotSerial.c: 331: irobot_query_and_update(1, iR_PKT_ANGLE);
  5242                           
  5243                           ;incstack = 0
  5244  016550  0E00               	movlw	0
  5245  016552  0100               	movlb	0	; () banked
  5246  016554  6F67               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  5247  016556  0E14               	movlw	20
  5248  016558  6F66               	movwf	?_irobot_query_and_update& (0+255),b
  5249  01655A  0E01               	movlw	1
  5250  01655C  ECD7  F095         	call	_irobot_query_and_update
  5251  016560  0012               	return		;funcret
  5252  016562                     __end_of_update_angle:
  5253                           	opt stack 0
  5254                           tblptru	equ	0xFF8
  5255                           tblptrh	equ	0xFF7
  5256                           tblptrl	equ	0xFF6
  5257                           tablat	equ	0xFF5
  5258                           postinc0	equ	0xFEE
  5259                           wreg	equ	0xFE8
  5260                           postdec1	equ	0xFE5
  5261                           fsr1h	equ	0xFE2
  5262                           fsr1l	equ	0xFE1
  5263                           status	equ	0xFD8
  5264                           
  5265 ;; *************** function _irobot_query_and_update *****************
  5266 ;; Defined at:
  5267 ;;		line 130 in file "Library/iRobotSerial.c"
  5268 ;; Parameters:    Size  Location     Type
  5269 ;;  numberOfPack    1    wreg     unsigned char 
  5270 ;; Auto vars:     Size  Location     Type
  5271 ;;  numberOfPack    1   24[BANK0 ] unsigned char 
  5272 ;;  TXArray       256    0[BANK2 ] unsigned char [256]
  5273 ;;  RXArray       256    0[BANK1 ] unsigned char [256]
  5274 ;;  packetIDs       2   21[BANK0 ] PTR void [1]
  5275 ;;		 -> ?_irobot_query_and_update(1), 
  5276 ;;  i               1   28[BANK0 ] unsigned char 
  5277 ;;  startIndex      1   27[BANK0 ] unsigned char 
  5278 ;;  j               1   26[BANK0 ] unsigned char 
  5279 ;;  packetVariab    1   25[BANK0 ] unsigned char 
  5280 ;;  streamSize      1   23[BANK0 ] unsigned char 
  5281 ;; Return value:  Size  Location     Type
  5282 ;;                  1    wreg      void 
  5283 ;; Registers used:
  5284 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5285 ;; Tracked objects:
  5286 ;;		On entry : 0/0
  5287 ;;		On exit  : 0/0
  5288 ;;		Unchanged: 0/0
  5289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5290 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5291 ;;      Locals:         0       8     256     256       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5292 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5293 ;;      Totals:         0      23     256     256       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5294 ;;Total ram usage:      535 bytes
  5295 ;; Hardware stack levels used:    1
  5296 ;; Hardware stack levels required when called:    9
  5297 ;; This function calls:
  5298 ;;		_eusart_getch
  5299 ;;		_eusart_putch
  5300 ;;		_get_packet_size
  5301 ;;		_rx_assign
  5302 ;; This function is called by:
  5303 ;;		_update_bump_and_cliff
  5304 ;;		_update_distance
  5305 ;;		_update_angle
  5306 ;; This function uses a non-reentrant model
  5307 ;;
  5308                           
  5309                           	psect	text12
  5310  012BAE                     __ptext12:
  5311                           	opt stack 0
  5312  012BAE                     _irobot_query_and_update:
  5313                           	opt stack 19
  5314                           
  5315                           ;incstack = 0
  5316                           ;irobot_query_and_update@numberOfPacketRequests stored from wreg
  5317  012BAE  0100               	movlb	0	; () banked
  5318  012BB0  6F78               	movwf	irobot_query_and_update@numberOfPacketRequests& (0+255),b
  5319                           
  5320                           ;iRobotSerial.c: 131: UINT8 i, j, packetVariable, streamSize = 0, startIndex = 0, RXArra
      +                          y[256], TXArray[256];
  5321  012BB2  0E00               	movlw	0
  5322  012BB4  0100               	movlb	0	; () banked
  5323  012BB6  6F77               	movwf	irobot_query_and_update@streamSize& (0+255),b
  5324  012BB8  0E00               	movlw	0
  5325  012BBA  0100               	movlb	0	; () banked
  5326  012BBC  6F7B               	movwf	irobot_query_and_update@startIndex& (0+255),b
  5327                           
  5328                           ;iRobotSerial.c: 133: va_list packetIDs;
  5329                           ;iRobotSerial.c: 134: *packetIDs = __va_start();
  5330  012BBE  0E66               	movlw	low ?_irobot_query_and_update
  5331  012BC0  0100               	movlb	0	; () banked
  5332  012BC2  6F75               	movwf	irobot_query_and_update@packetIDs& (0+255),b
  5333  012BC4  0E00               	movlw	high ?_irobot_query_and_update
  5334  012BC6  0100               	movlb	0	; () banked
  5335  012BC8  6F76               	movwf	(irobot_query_and_update@packetIDs+1)& (0+255),b
  5336                           
  5337                           ; BSR set to: 0
  5338                           ;iRobotSerial.c: 135: eusart_putch(iR_QUERY_LIST);
  5339  012BCA  0E95               	movlw	149
  5340  012BCC  ECC8  F0B2         	call	_eusart_putch
  5341                           
  5342                           ;iRobotSerial.c: 136: eusart_putch(numberOfPacketRequests);
  5343  012BD0  0100               	movlb	0	; () banked
  5344  012BD2  5178               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  5345  012BD4  ECC8  F0B2         	call	_eusart_putch
  5346                           
  5347                           ;iRobotSerial.c: 137: for (i = 0; i < numberOfPacketRequests; i++) {
  5348  012BD8  0E00               	movlw	0
  5349  012BDA  0100               	movlb	0	; () banked
  5350  012BDC  6F7C               	movwf	irobot_query_and_update@i& (0+255),b
  5351  012BDE  D023               	goto	l2095
  5352  012BE0                     
  5353                           ; BSR set to: 0
  5354                           ;iRobotSerial.c: 138: packetVariable = (*(int *)__va_arg((*(int **)packetIDs), (int)0));
  5355                           
  5356                           ; BSR set to: 0
  5357  012BE0  C075  FFD9         	movff	irobot_query_and_update@packetIDs,fsr2l
  5358  012BE4  C076  FFDA         	movff	irobot_query_and_update@packetIDs+1,fsr2h
  5359  012BE8  50DF               	movf	indf2,w,c
  5360  012BEA  0100               	movlb	0	; () banked
  5361  012BEC  6F79               	movwf	irobot_query_and_update@packetVariable& (0+255),b
  5362                           
  5363                           ; BSR set to: 0
  5364  012BEE  0E02               	movlw	2
  5365  012BF0  0100               	movlb	0	; () banked
  5366  012BF2  2775               	addwf	irobot_query_and_update@packetIDs& (0+255),f,b
  5367  012BF4  0E00               	movlw	0
  5368  012BF6  2376               	addwfc	(irobot_query_and_update@packetIDs+1)& (0+255),f,b
  5369                           
  5370                           ; BSR set to: 0
  5371                           ;iRobotSerial.c: 139: streamSize += get_packet_size(packetVariable);
  5372  012BF8  0100               	movlb	0	; () banked
  5373  012BFA  5179               	movf	irobot_query_and_update@packetVariable& (0+255),w,b
  5374  012BFC  EC27  F0AB         	call	_get_packet_size
  5375  012C00  0100               	movlb	0	; () banked
  5376  012C02  2777               	addwf	irobot_query_and_update@streamSize& (0+255),f,b
  5377                           
  5378                           ; BSR set to: 0
  5379                           ;iRobotSerial.c: 140: TXArray[i] = packetVariable;
  5380  012C04  0100               	movlb	0	; () banked
  5381  012C06  517C               	movf	irobot_query_and_update@i& (0+255),w,b
  5382  012C08  0D01               	mullw	1
  5383  012C0A  0E00               	movlw	low irobot_query_and_update@TXArray
  5384  012C0C  24F3               	addwf	prodl,w,c
  5385  012C0E  6ED9               	movwf	fsr2l,c
  5386  012C10  0E02               	movlw	high irobot_query_and_update@TXArray
  5387  012C12  20F4               	addwfc	prodh,w,c
  5388  012C14  6EDA               	movwf	fsr2h,c
  5389  012C16  C079  FFDF         	movff	irobot_query_and_update@packetVariable,indf2
  5390                           
  5391                           ; BSR set to: 0
  5392                           ;iRobotSerial.c: 141: eusart_putch(packetVariable);
  5393  012C1A  0100               	movlb	0	; () banked
  5394  012C1C  5179               	movf	irobot_query_and_update@packetVariable& (0+255),w,b
  5395  012C1E  ECC8  F0B2         	call	_eusart_putch
  5396  012C22  0100               	movlb	0	; () banked
  5397  012C24  2B7C               	incf	irobot_query_and_update@i& (0+255),f,b
  5398  012C26                     l2095:
  5399                           
  5400                           ; BSR set to: 0
  5401                           
  5402                           ; BSR set to: 0
  5403  012C26  0100               	movlb	0	; () banked
  5404  012C28  5178               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  5405  012C2A  0100               	movlb	0	; () banked
  5406  012C2C  5D7C               	subwf	irobot_query_and_update@i& (0+255),w,b
  5407  012C2E  A0D8               	btfss	status,0,c
  5408  012C30  D7D7               	goto	l2096
  5409                           
  5410                           ; BSR set to: 0
  5411                           ;iRobotSerial.c: 142: }
  5412                           ;iRobotSerial.c: 143: ;
  5413                           ;iRobotSerial.c: 145: for (i = 0; i < streamSize; i++) {RXArray[i] = eusart_getch();}
  5414                           
  5415                           ; BSR set to: 0
  5416  012C32  0E00               	movlw	0
  5417  012C34  0100               	movlb	0	; () banked
  5418  012C36  6F7C               	movwf	irobot_query_and_update@i& (0+255),b
  5419  012C38  D00E               	goto	l2098
  5420  012C3A                     
  5421                           ; BSR set to: 0
  5422                           
  5423                           ; BSR set to: 0
  5424  012C3A  0100               	movlb	0	; () banked
  5425  012C3C  517C               	movf	irobot_query_and_update@i& (0+255),w,b
  5426  012C3E  0D01               	mullw	1
  5427  012C40  0E00               	movlw	low irobot_query_and_update@RXArray
  5428  012C42  24F3               	addwf	prodl,w,c
  5429  012C44  6ED9               	movwf	fsr2l,c
  5430  012C46  0E01               	movlw	high irobot_query_and_update@RXArray
  5431  012C48  20F4               	addwfc	prodh,w,c
  5432  012C4A  6EDA               	movwf	fsr2h,c
  5433  012C4C  EC0B  F0B3         	call	_eusart_getch	;wreg free
  5434  012C50  6EDF               	movwf	indf2,c
  5435  012C52  0100               	movlb	0	; () banked
  5436  012C54  2B7C               	incf	irobot_query_and_update@i& (0+255),f,b
  5437  012C56                     l2098:
  5438                           
  5439                           ; BSR set to: 0
  5440                           
  5441                           ; BSR set to: 0
  5442  012C56  0100               	movlb	0	; () banked
  5443  012C58  5177               	movf	irobot_query_and_update@streamSize& (0+255),w,b
  5444  012C5A  0100               	movlb	0	; () banked
  5445  012C5C  5D7C               	subwf	irobot_query_and_update@i& (0+255),w,b
  5446  012C5E  A0D8               	btfss	status,0,c
  5447  012C60  D7EC               	goto	l2099
  5448                           
  5449                           ; BSR set to: 0
  5450                           ;iRobotSerial.c: 147: for (i = 0; i < numberOfPacketRequests; i++) {
  5451                           
  5452                           ; BSR set to: 0
  5453  012C62  0E00               	movlw	0
  5454  012C64  0100               	movlb	0	; () banked
  5455  012C66  6F7C               	movwf	irobot_query_and_update@i& (0+255),b
  5456  012C68  D05E               	goto	l2101
  5457  012C6A                     l2102:
  5458                           
  5459                           ; BSR set to: 0
  5460                           ;iRobotSerial.c: 148: for (j = startIndex; j < get_packet_size(TXArray[i]) + startIndex;
      +                           j++) {
  5461  012C6A  C07B  F07A         	movff	irobot_query_and_update@startIndex,irobot_query_and_update@j
  5462  012C6E  D021               	goto	l2103
  5463  012C70                     
  5464                           ; BSR set to: 0
  5465                           ;iRobotSerial.c: 149: rx_assign(TXArray[i], RXArray[j], j - startIndex);
  5466                           
  5467                           ; BSR set to: 0
  5468  012C70  0100               	movlb	0	; () banked
  5469  012C72  517A               	movf	irobot_query_and_update@j& (0+255),w,b
  5470  012C74  0D01               	mullw	1
  5471  012C76  0E00               	movlw	low irobot_query_and_update@RXArray
  5472  012C78  24F3               	addwf	prodl,w,c
  5473  012C7A  6ED9               	movwf	fsr2l,c
  5474  012C7C  0E01               	movlw	high irobot_query_and_update@RXArray
  5475  012C7E  20F4               	addwfc	prodh,w,c
  5476  012C80  6EDA               	movwf	fsr2h,c
  5477  012C82  50DF               	movf	indf2,w,c
  5478  012C84  0100               	movlb	0	; () banked
  5479  012C86  6F61               	movwf	rx_assign@packetIDValue& (0+255),b
  5480  012C88  0100               	movlb	0	; () banked
  5481  012C8A  517B               	movf	irobot_query_and_update@startIndex& (0+255),w,b
  5482  012C8C  0800               	sublw	0
  5483  012C8E  0100               	movlb	0	; () banked
  5484  012C90  257A               	addwf	irobot_query_and_update@j& (0+255),w,b
  5485  012C92  0100               	movlb	0	; () banked
  5486  012C94  6F62               	movwf	rx_assign@byteNumber& (0+255),b
  5487  012C96  0100               	movlb	0	; () banked
  5488  012C98  517C               	movf	irobot_query_and_update@i& (0+255),w,b
  5489  012C9A  0D01               	mullw	1
  5490  012C9C  0E00               	movlw	low irobot_query_and_update@TXArray
  5491  012C9E  24F3               	addwf	prodl,w,c
  5492  012CA0  6ED9               	movwf	fsr2l,c
  5493  012CA2  0E02               	movlw	high irobot_query_and_update@TXArray
  5494  012CA4  20F4               	addwfc	prodh,w,c
  5495  012CA6  6EDA               	movwf	fsr2h,c
  5496  012CA8  50DF               	movf	indf2,w,c
  5497  012CAA  EC5C  F09C         	call	_rx_assign
  5498  012CAE  0100               	movlb	0	; () banked
  5499  012CB0  2B7A               	incf	irobot_query_and_update@j& (0+255),f,b
  5500  012CB2                     l2103:
  5501                           
  5502                           ; BSR set to: 0
  5503                           
  5504                           ; BSR set to: 0
  5505  012CB2  0100               	movlb	0	; () banked
  5506  012CB4  517C               	movf	irobot_query_and_update@i& (0+255),w,b
  5507  012CB6  0D01               	mullw	1
  5508  012CB8  0E00               	movlw	low irobot_query_and_update@TXArray
  5509  012CBA  24F3               	addwf	prodl,w,c
  5510  012CBC  6ED9               	movwf	fsr2l,c
  5511  012CBE  0E02               	movlw	high irobot_query_and_update@TXArray
  5512  012CC0  20F4               	addwfc	prodh,w,c
  5513  012CC2  6EDA               	movwf	fsr2h,c
  5514  012CC4  50DF               	movf	indf2,w,c
  5515  012CC6  EC27  F0AB         	call	_get_packet_size
  5516  012CCA  0100               	movlb	0	; () banked
  5517  012CCC  6F70               	movwf	??_irobot_query_and_update& (0+255),b
  5518  012CCE  6B71               	clrf	(??_irobot_query_and_update+1)& (0+255),b
  5519  012CD0  0100               	movlb	0	; () banked
  5520  012CD2  517B               	movf	irobot_query_and_update@startIndex& (0+255),w,b
  5521  012CD4  0100               	movlb	0	; () banked
  5522  012CD6  2770               	addwf	??_irobot_query_and_update& (0+255),f,b
  5523  012CD8  0E00               	movlw	0
  5524  012CDA  2371               	addwfc	(??_irobot_query_and_update+1)& (0+255),f,b
  5525  012CDC  0100               	movlb	0	; () banked
  5526  012CDE  517A               	movf	irobot_query_and_update@j& (0+255),w,b
  5527  012CE0  0100               	movlb	0	; () banked
  5528  012CE2  6F72               	movwf	(??_irobot_query_and_update+2)& (0+255),b
  5529  012CE4  6B73               	clrf	(??_irobot_query_and_update+3)& (0+255),b
  5530  012CE6  0100               	movlb	0	; () banked
  5531  012CE8  5170               	movf	??_irobot_query_and_update& (0+255),w,b
  5532  012CEA  0100               	movlb	0	; () banked
  5533  012CEC  5D72               	subwf	(??_irobot_query_and_update+2)& (0+255),w,b
  5534  012CEE  0100               	movlb	0	; () banked
  5535  012CF0  5173               	movf	(??_irobot_query_and_update+3)& (0+255),w,b
  5536  012CF2  0A80               	xorlw	128
  5537  012CF4  0100               	movlb	0	; () banked
  5538  012CF6  6F74               	movwf	(??_irobot_query_and_update+4)& (0+255),b
  5539  012CF8  0100               	movlb	0	; () banked
  5540  012CFA  5171               	movf	(??_irobot_query_and_update+1)& (0+255),w,b
  5541  012CFC  0A80               	xorlw	128
  5542  012CFE  0100               	movlb	0	; () banked
  5543  012D00  5974               	subwfb	(??_irobot_query_and_update+4)& (0+255),w,b
  5544  012D02  A0D8               	btfss	status,0,c
  5545  012D04  D7B5               	goto	l2104
  5546                           
  5547                           ; BSR set to: 0
  5548                           ;iRobotSerial.c: 150: }
  5549                           ;iRobotSerial.c: 151: startIndex += get_packet_size(TXArray[i]);
  5550                           
  5551                           ; BSR set to: 0
  5552  012D06  0100               	movlb	0	; () banked
  5553  012D08  517C               	movf	irobot_query_and_update@i& (0+255),w,b
  5554  012D0A  0D01               	mullw	1
  5555  012D0C  0E00               	movlw	low irobot_query_and_update@TXArray
  5556  012D0E  24F3               	addwf	prodl,w,c
  5557  012D10  6ED9               	movwf	fsr2l,c
  5558  012D12  0E02               	movlw	high irobot_query_and_update@TXArray
  5559  012D14  20F4               	addwfc	prodh,w,c
  5560  012D16  6EDA               	movwf	fsr2h,c
  5561  012D18  50DF               	movf	indf2,w,c
  5562  012D1A  EC27  F0AB         	call	_get_packet_size
  5563  012D1E  0100               	movlb	0	; () banked
  5564  012D20  277B               	addwf	irobot_query_and_update@startIndex& (0+255),f,b
  5565                           
  5566                           ; BSR set to: 0
  5567  012D22  0100               	movlb	0	; () banked
  5568  012D24  2B7C               	incf	irobot_query_and_update@i& (0+255),f,b
  5569  012D26                     l2101:
  5570                           
  5571                           ; BSR set to: 0
  5572                           
  5573                           ; BSR set to: 0
  5574  012D26  0100               	movlb	0	; () banked
  5575  012D28  5178               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  5576  012D2A  0100               	movlb	0	; () banked
  5577  012D2C  5D7C               	subwf	irobot_query_and_update@i& (0+255),w,b
  5578  012D2E  B0D8               	btfsc	status,0,c
  5579  012D30  0012               	return	
  5580  012D32  D79B               	goto	l2102
  5581  012D34                     __end_of_irobot_query_and_update:
  5582                           	opt stack 0
  5583                           tblptru	equ	0xFF8
  5584                           tblptrh	equ	0xFF7
  5585                           tblptrl	equ	0xFF6
  5586                           tablat	equ	0xFF5
  5587                           prodh	equ	0xFF4
  5588                           prodl	equ	0xFF3
  5589                           postinc0	equ	0xFEE
  5590                           wreg	equ	0xFE8
  5591                           postdec1	equ	0xFE5
  5592                           fsr1h	equ	0xFE2
  5593                           fsr1l	equ	0xFE1
  5594                           indf2	equ	0xFDF
  5595                           fsr2h	equ	0xFDA
  5596                           fsr2l	equ	0xFD9
  5597                           status	equ	0xFD8
  5598                           
  5599 ;; *************** function _rx_assign *****************
  5600 ;; Defined at:
  5601 ;;		line 74 in file "Library/iRobotSerial.c"
  5602 ;; Parameters:    Size  Location     Type
  5603 ;;  packetID        1    wreg     unsigned char 
  5604 ;;  packetIDValu    1    1[BANK0 ] unsigned char 
  5605 ;;  byteNumber      1    2[BANK0 ] unsigned char 
  5606 ;; Auto vars:     Size  Location     Type
  5607 ;;  packetID        1    5[BANK0 ] unsigned char 
  5608 ;; Return value:  Size  Location     Type
  5609 ;;                  1    wreg      void 
  5610 ;; Registers used:
  5611 ;;		wreg, status,2, status,0, cstack
  5612 ;; Tracked objects:
  5613 ;;		On entry : 0/0
  5614 ;;		On exit  : 0/0
  5615 ;;		Unchanged: 0/0
  5616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5617 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5618 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5619 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5620 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5621 ;;Total ram usage:        5 bytes
  5622 ;; Hardware stack levels used:    1
  5623 ;; Hardware stack levels required when called:    8
  5624 ;; This function calls:
  5625 ;;		_sort_iRBumpDrop
  5626 ;; This function is called by:
  5627 ;;		_irobot_query_and_update
  5628 ;; This function uses a non-reentrant model
  5629 ;;
  5630                           
  5631                           	psect	text13
  5632  0138B8                     __ptext13:
  5633                           	opt stack 0
  5634  0138B8                     _rx_assign:
  5635                           	opt stack 19
  5636                           
  5637                           ; BSR set to: 0
  5638                           ;incstack = 0
  5639                           ;rx_assign@packetID stored from wreg
  5640  0138B8  0100               	movlb	0	; () banked
  5641  0138BA  6F65               	movwf	rx_assign@packetID& (0+255),b
  5642                           
  5643                           ;iRobotSerial.c: 75: switch (packetID) {
  5644  0138BC  D057               	goto	l2035
  5645  0138BE                     l2036:
  5646                           
  5647                           ; BSR set to: 0
  5648  0138BE  C061  F036         	movff	rx_assign@packetIDValue,_iRBumpDrop
  5649                           
  5650                           ; BSR set to: 0
  5651  0138C2  ECB7  F0A6         	call	_sort_iRBumpDrop	;wreg free
  5652  0138C6  0012               	return	
  5653  0138C8                     l2038:
  5654                           
  5655                           ; BSR set to: 0
  5656  0138C8  C061  F035         	movff	rx_assign@packetIDValue,_iRWall
  5657  0138CC  0012               	return	
  5658  0138CE                     l2039:
  5659                           
  5660                           ; BSR set to: 0
  5661  0138CE  C061  F034         	movff	rx_assign@packetIDValue,_iRCliffL
  5662  0138D2  0012               	return	
  5663  0138D4                     l2040:
  5664                           
  5665                           ; BSR set to: 0
  5666  0138D4  C061  F033         	movff	rx_assign@packetIDValue,_iRCliffFL
  5667  0138D8  0012               	return	
  5668  0138DA                     l2041:
  5669                           
  5670                           ; BSR set to: 0
  5671  0138DA  C061  F032         	movff	rx_assign@packetIDValue,_iRCliffFR
  5672  0138DE  0012               	return	
  5673  0138E0                     l2042:
  5674                           
  5675                           ; BSR set to: 0
  5676  0138E0  C061  F031         	movff	rx_assign@packetIDValue,_iRCliffR
  5677  0138E4  0012               	return	
  5678  0138E6                     l2043:
  5679                           
  5680                           ; BSR set to: 0
  5681  0138E6  C061  F030         	movff	rx_assign@packetIDValue,_iRVirtualWall
  5682  0138EA  0012               	return	
  5683  0138EC                     
  5684                           ; BSR set to: 0
  5685                           ;iRobotSerial.c: 84: (byteNumber == 0) ? (iRDistanceSS.HB = packetIDValue) : (iRDistance
      +                          SS.LB = packetIDValue,
  5686                           ;iRobotSerial.c: 85: iRDistance = ((iRDistanceSS.HB)<<8) + iRDistanceSS.LB); break;
  5687                           
  5688                           ; BSR set to: 0
  5689  0138EC  0100               	movlb	0	; () banked
  5690  0138EE  5162               	movf	rx_assign@byteNumber& (0+255),w,b
  5691  0138F0  0100               	movlb	0	; () banked
  5692  0138F2  A4D8               	btfss	status,2,c
  5693  0138F4  D005               	goto	l2046
  5694                           
  5695                           ; BSR set to: 0
  5696  0138F6  C061  F308         	movff	rx_assign@packetIDValue,_iRDistanceSS
  5697  0138FA  0103               	movlb	3	; () banked
  5698  0138FC  6B09               	clrf	(_iRDistanceSS+1)& (0+255),b
  5699  0138FE  0012               	return	
  5700  013900                     l2046:
  5701                           
  5702                           ; BSR set to: 0
  5703  013900  C061  F30A         	movff	rx_assign@packetIDValue,_iRDistanceSS+2
  5704  013904  0103               	movlb	3	; () banked
  5705  013906  6B0B               	clrf	(_iRDistanceSS+3)& (0+255),b
  5706                           
  5707                           ; BSR set to: 3
  5708  013908  0103               	movlb	3	; () banked
  5709  01390A  5108               	movf	_iRDistanceSS& (0+255),w,b
  5710  01390C  0100               	movlb	0	; () banked
  5711  01390E  6F64               	movwf	(??_rx_assign+1)& (0+255),b
  5712  013910  6B63               	clrf	??_rx_assign& (0+255),b
  5713  013912  0103               	movlb	3	; () banked
  5714  013914  510A               	movf	(_iRDistanceSS+2)& (0+255),w,b
  5715  013916  0100               	movlb	0	; () banked
  5716  013918  2563               	addwf	??_rx_assign& (0+255),w,b
  5717  01391A  0100               	movlb	0	; () banked
  5718  01391C  6FD2               	movwf	_iRDistance& (0+255),b
  5719  01391E  0103               	movlb	3	; () banked
  5720  013920  510B               	movf	(_iRDistanceSS+3)& (0+255),w,b
  5721  013922  0100               	movlb	0	; () banked
  5722  013924  2164               	addwfc	(??_rx_assign+1)& (0+255),w,b
  5723  013926  0100               	movlb	0	; () banked
  5724  013928  6FD3               	movwf	(_iRDistance+1)& (0+255),b
  5725                           
  5726                           ; BSR set to: 0
  5727  01392A  0012               	return	
  5728  01392C                     
  5729                           ; BSR set to: 0
  5730                           ;iRobotSerial.c: 87: (byteNumber == 0) ? (iRAngleSS.HB = packetIDValue) : (iRAngleSS.LB 
      +                          = packetIDValue,
  5731                           ;iRobotSerial.c: 88: iRAngle = ((iRAngleSS.HB)<<8) + iRAngleSS.LB); break;
  5732                           
  5733                           ; BSR set to: 0
  5734  01392C  0100               	movlb	0	; () banked
  5735  01392E  5162               	movf	rx_assign@byteNumber& (0+255),w,b
  5736  013930  0100               	movlb	0	; () banked
  5737  013932  A4D8               	btfss	status,2,c
  5738  013934  D005               	goto	l2051
  5739                           
  5740                           ; BSR set to: 0
  5741  013936  C061  F304         	movff	rx_assign@packetIDValue,_iRAngleSS
  5742  01393A  0103               	movlb	3	; () banked
  5743  01393C  6B05               	clrf	(_iRAngleSS+1)& (0+255),b
  5744  01393E  0012               	return	
  5745  013940                     l2051:
  5746                           
  5747                           ; BSR set to: 0
  5748  013940  C061  F306         	movff	rx_assign@packetIDValue,_iRAngleSS+2
  5749  013944  0103               	movlb	3	; () banked
  5750  013946  6B07               	clrf	(_iRAngleSS+3)& (0+255),b
  5751                           
  5752                           ; BSR set to: 3
  5753  013948  0103               	movlb	3	; () banked
  5754  01394A  5104               	movf	_iRAngleSS& (0+255),w,b
  5755  01394C  0100               	movlb	0	; () banked
  5756  01394E  6F64               	movwf	(??_rx_assign+1)& (0+255),b
  5757  013950  6B63               	clrf	??_rx_assign& (0+255),b
  5758  013952  0103               	movlb	3	; () banked
  5759  013954  5106               	movf	(_iRAngleSS+2)& (0+255),w,b
  5760  013956  0100               	movlb	0	; () banked
  5761  013958  2563               	addwf	??_rx_assign& (0+255),w,b
  5762  01395A  0100               	movlb	0	; () banked
  5763  01395C  6FD0               	movwf	_iRAngle& (0+255),b
  5764  01395E  0103               	movlb	3	; () banked
  5765  013960  5107               	movf	(_iRAngleSS+3)& (0+255),w,b
  5766  013962  0100               	movlb	0	; () banked
  5767  013964  2164               	addwfc	(??_rx_assign+1)& (0+255),w,b
  5768  013966  0100               	movlb	0	; () banked
  5769  013968  6FD1               	movwf	(_iRAngle+1)& (0+255),b
  5770                           
  5771                           ; BSR set to: 0
  5772                           ;iRobotSerial.c: 89: }
  5773                           
  5774                           ; BSR set to: 0
  5775  01396A  0012               	return	
  5776  01396C                     l2035:
  5777                           
  5778                           ; BSR set to: 0
  5779  01396C  0100               	movlb	0	; () banked
  5780  01396E  5165               	movf	rx_assign@packetID& (0+255),w,b
  5781                           
  5782                           ; Switch size 1, requested type "space"
  5783                           ; Number of cases is 9, Range of values is 7 to 20
  5784                           ; switch strategies available:
  5785                           ; Name         Instructions Cycles
  5786                           ; simple_byte           28    15 (average)
  5787                           ;	Chosen strategy is simple_byte
  5788  013970  0A07               	xorlw	7	; case 7
  5789  013972  B4D8               	btfsc	status,2,c
  5790  013974  D7A4               	goto	l2036
  5791  013976  0A0F               	xorlw	15	; case 8
  5792  013978  B4D8               	btfsc	status,2,c
  5793  01397A  D7A6               	goto	l2038
  5794  01397C  0A01               	xorlw	1	; case 9
  5795  01397E  B4D8               	btfsc	status,2,c
  5796  013980  D7A6               	goto	l2039
  5797  013982  0A03               	xorlw	3	; case 10
  5798  013984  B4D8               	btfsc	status,2,c
  5799  013986  D7A6               	goto	l2040
  5800  013988  0A01               	xorlw	1	; case 11
  5801  01398A  B4D8               	btfsc	status,2,c
  5802  01398C  D7A6               	goto	l2041
  5803  01398E  0A07               	xorlw	7	; case 12
  5804  013990  B4D8               	btfsc	status,2,c
  5805  013992  D7A6               	goto	l2042
  5806  013994  0A01               	xorlw	1	; case 13
  5807  013996  B4D8               	btfsc	status,2,c
  5808  013998  D7A6               	goto	l2043
  5809  01399A  0A1E               	xorlw	30	; case 19
  5810  01399C  B4D8               	btfsc	status,2,c
  5811  01399E  D7A6               	goto	l2044
  5812  0139A0  0A07               	xorlw	7	; case 20
  5813  0139A2  A4D8               	btfss	status,2,c
  5814  0139A4  0012               	return	
  5815  0139A6  D7C2               	goto	l2049
  5816  0139A8                     __end_of_rx_assign:
  5817                           	opt stack 0
  5818                           tblptru	equ	0xFF8
  5819                           tblptrh	equ	0xFF7
  5820                           tblptrl	equ	0xFF6
  5821                           tablat	equ	0xFF5
  5822                           prodh	equ	0xFF4
  5823                           prodl	equ	0xFF3
  5824                           postinc0	equ	0xFEE
  5825                           wreg	equ	0xFE8
  5826                           postdec1	equ	0xFE5
  5827                           fsr1h	equ	0xFE2
  5828                           fsr1l	equ	0xFE1
  5829                           indf2	equ	0xFDF
  5830                           fsr2h	equ	0xFDA
  5831                           fsr2l	equ	0xFD9
  5832                           status	equ	0xFD8
  5833                           
  5834 ;; *************** function _sort_iRBumpDrop *****************
  5835 ;; Defined at:
  5836 ;;		line 92 in file "Library/iRobotSerial.c"
  5837 ;; Parameters:    Size  Location     Type
  5838 ;;		None
  5839 ;; Auto vars:     Size  Location     Type
  5840 ;;		None
  5841 ;; Return value:  Size  Location     Type
  5842 ;;                  1    wreg      void 
  5843 ;; Registers used:
  5844 ;;		wreg, status,2, status,0
  5845 ;; Tracked objects:
  5846 ;;		On entry : 0/0
  5847 ;;		On exit  : 0/0
  5848 ;;		Unchanged: 0/0
  5849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5852 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5853 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5854 ;;Total ram usage:        1 bytes
  5855 ;; Hardware stack levels used:    1
  5856 ;; Hardware stack levels required when called:    7
  5857 ;; This function calls:
  5858 ;;		Nothing
  5859 ;; This function is called by:
  5860 ;;		_rx_assign
  5861 ;; This function uses a non-reentrant model
  5862 ;;
  5863                           
  5864                           	psect	text14
  5865  014D6E                     __ptext14:
  5866                           	opt stack 0
  5867  014D6E                     _sort_iRBumpDrop:
  5868                           	opt stack 19
  5869                           
  5870                           ;iRobotSerial.c: 93: (iRBumpDrop & 0x1) ? (iRBumpRight = 1) : (iRBumpRight = 0);
  5871                           
  5872                           ;incstack = 0
  5873  014D6E  A036               	btfss	_iRBumpDrop,0,c
  5874  014D70  D002               	goto	l2058
  5875  014D72  0E01               	movlw	1
  5876  014D74  D001               	goto	L1
  5877  014D76                     l2058:
  5878                           
  5879                           ; BSR set to: 0
  5880  014D76  0E00               	movlw	0
  5881  014D78                     L1:
  5882  014D78  0100               	movlb	0	; () banked
  5883  014D7A  6FE1               	movwf	_iRBumpRight& (0+255),b
  5884                           
  5885                           ; BSR set to: 0
  5886                           ;iRobotSerial.c: 94: ((iRBumpDrop >> 0x1) & (0x1)) ? (iRBumpLeft = 1) : (iRBumpLeft = 0)
      +                          ;
  5887                           
  5888                           ; BSR set to: 0
  5889  014D7C  C036  F060         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  5890  014D80  0100               	movlb	0	; () banked
  5891  014D82  90D8               	bcf	status,0,c
  5892  014D84  3360               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  5893  014D86  0100               	movlb	0	; () banked
  5894  014D88  A160               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  5895  014D8A  D002               	goto	l2062
  5896                           
  5897                           ; BSR set to: 0
  5898  014D8C  0E01               	movlw	1
  5899  014D8E  D001               	goto	L2
  5900  014D90                     l2062:
  5901                           
  5902                           ; BSR set to: 0
  5903                           
  5904                           ; BSR set to: 0
  5905  014D90  0E00               	movlw	0
  5906  014D92                     L2:
  5907  014D92  0100               	movlb	0	; () banked
  5908  014D94  6FE0               	movwf	_iRBumpLeft& (0+255),b
  5909                           
  5910                           ; BSR set to: 0
  5911                           ;iRobotSerial.c: 95: ((iRBumpDrop >> 0x2) & (0x1)) ? (iRDropRight = 1) : (iRDropRight = 
      +                          0);
  5912                           
  5913                           ; BSR set to: 0
  5914  014D96  C036  F060         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  5915  014D9A  0100               	movlb	0	; () banked
  5916  014D9C  90D8               	bcf	status,0,c
  5917  014D9E  3360               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  5918  014DA0  0100               	movlb	0	; () banked
  5919  014DA2  90D8               	bcf	status,0,c
  5920  014DA4  3360               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  5921  014DA6  0100               	movlb	0	; () banked
  5922  014DA8  A160               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  5923  014DAA  D002               	goto	l2066
  5924                           
  5925                           ; BSR set to: 0
  5926  014DAC  0E01               	movlw	1
  5927  014DAE  D001               	goto	L3
  5928  014DB0                     l2066:
  5929                           
  5930                           ; BSR set to: 0
  5931                           
  5932                           ; BSR set to: 0
  5933  014DB0  0E00               	movlw	0
  5934  014DB2                     L3:
  5935  014DB2  0100               	movlb	0	; () banked
  5936  014DB4  6FDF               	movwf	_iRDropRight& (0+255),b
  5937                           
  5938                           ; BSR set to: 0
  5939                           ;iRobotSerial.c: 96: ((iRBumpDrop >> 0x3) & (0x1)) ? (iRDropLeft = 1) : (iRDropLeft = 0)
      +                          ;
  5940                           
  5941                           ; BSR set to: 0
  5942  014DB6  C036  F060         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  5943  014DBA  0100               	movlb	0	; () banked
  5944  014DBC  90D8               	bcf	status,0,c
  5945  014DBE  3360               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  5946  014DC0  0100               	movlb	0	; () banked
  5947  014DC2  90D8               	bcf	status,0,c
  5948  014DC4  3360               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  5949  014DC6  0100               	movlb	0	; () banked
  5950  014DC8  90D8               	bcf	status,0,c
  5951  014DCA  3360               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  5952  014DCC  0100               	movlb	0	; () banked
  5953  014DCE  A160               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  5954  014DD0  D002               	goto	l2070
  5955                           
  5956                           ; BSR set to: 0
  5957  014DD2  0E01               	movlw	1
  5958  014DD4  D001               	goto	L4
  5959  014DD6                     l2070:
  5960                           
  5961                           ; BSR set to: 0
  5962                           
  5963                           ; BSR set to: 0
  5964  014DD6  0E00               	movlw	0
  5965  014DD8                     L4:
  5966  014DD8  0100               	movlb	0	; () banked
  5967  014DDA  6FDE               	movwf	_iRDropLeft& (0+255),b
  5968                           
  5969                           ; BSR set to: 0
  5970                           ;iRobotSerial.c: 97: ((iRBumpDrop >> 0x4) & (0x1)) ? (iRDropCaster = 1) : (iRDropCaster 
      +                          = 0);
  5971                           
  5972                           ; BSR set to: 0
  5973  014DDC  C036  F060         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  5974  014DE0  0100               	movlb	0	; () banked
  5975  014DE2  3B60               	swapf	??_sort_iRBumpDrop& (0+255),f,b
  5976  014DE4  0E0F               	movlw	15
  5977  014DE6  1760               	andwf	??_sort_iRBumpDrop& (0+255),f,b
  5978  014DE8  0100               	movlb	0	; () banked
  5979  014DEA  A160               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  5980  014DEC  D003               	goto	l2074
  5981                           
  5982                           ; BSR set to: 0
  5983  014DEE  0E01               	movlw	1
  5984  014DF0  6E2F               	movwf	_iRDropCaster,c
  5985  014DF2  0012               	return	
  5986  014DF4                     l2074:
  5987                           
  5988                           ; BSR set to: 0
  5989                           
  5990                           ; BSR set to: 0
  5991  014DF4  0E00               	movlw	0
  5992  014DF6  6E2F               	movwf	_iRDropCaster,c
  5993  014DF8  0012               	return	
  5994  014DFA                     __end_of_sort_iRBumpDrop:
  5995                           	opt stack 0
  5996                           tblptru	equ	0xFF8
  5997                           tblptrh	equ	0xFF7
  5998                           tblptrl	equ	0xFF6
  5999                           tablat	equ	0xFF5
  6000                           prodh	equ	0xFF4
  6001                           prodl	equ	0xFF3
  6002                           postinc0	equ	0xFEE
  6003                           wreg	equ	0xFE8
  6004                           postdec1	equ	0xFE5
  6005                           fsr1h	equ	0xFE2
  6006                           fsr1l	equ	0xFE1
  6007                           indf2	equ	0xFDF
  6008                           fsr2h	equ	0xFDA
  6009                           fsr2l	equ	0xFD9
  6010                           status	equ	0xFD8
  6011                           
  6012 ;; *************** function _get_packet_size *****************
  6013 ;; Defined at:
  6014 ;;		line 60 in file "Library/iRobotSerial.c"
  6015 ;; Parameters:    Size  Location     Type
  6016 ;;  packetID        1    wreg     unsigned char 
  6017 ;; Auto vars:     Size  Location     Type
  6018 ;;  packetID        1    0[BANK0 ] unsigned char 
  6019 ;; Return value:  Size  Location     Type
  6020 ;;                  1    wreg      unsigned char 
  6021 ;; Registers used:
  6022 ;;		wreg, status,2, status,0
  6023 ;; Tracked objects:
  6024 ;;		On entry : 0/0
  6025 ;;		On exit  : 0/0
  6026 ;;		Unchanged: 0/0
  6027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6029 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6031 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6032 ;;Total ram usage:        1 bytes
  6033 ;; Hardware stack levels used:    1
  6034 ;; Hardware stack levels required when called:    7
  6035 ;; This function calls:
  6036 ;;		Nothing
  6037 ;; This function is called by:
  6038 ;;		_irobot_query_and_update
  6039 ;; This function uses a non-reentrant model
  6040 ;;
  6041                           
  6042                           	psect	text15
  6043  01564E                     __ptext15:
  6044                           	opt stack 0
  6045  01564E                     _get_packet_size:
  6046                           	opt stack 20
  6047                           
  6048                           ; BSR set to: 0
  6049                           ;incstack = 0
  6050                           ;get_packet_size@packetID stored from wreg
  6051  01564E  0100               	movlb	0	; () banked
  6052  015650  6F60               	movwf	get_packet_size@packetID& (0+255),b
  6053                           
  6054                           ;iRobotSerial.c: 61: switch (packetID) {
  6055  015652  D012               	goto	l2021
  6056  015654  0E01               	movlw	1
  6057  015656  0012               	return	
  6058  015658  0E01               	movlw	1
  6059  01565A  0012               	return	
  6060  01565C  0E01               	movlw	1
  6061  01565E  0012               	return	
  6062  015660  0E01               	movlw	1
  6063  015662  0012               	return	
  6064  015664  0E01               	movlw	1
  6065  015666  0012               	return	
  6066  015668  0E01               	movlw	1
  6067  01566A  0012               	return	
  6068  01566C  0E01               	movlw	1
  6069  01566E  0012               	return	
  6070  015670  0E02               	movlw	2
  6071  015672  0012               	return	
  6072  015674  0E02               	movlw	2
  6073                           
  6074                           ;iRobotSerial.c: 71: }
  6075  015676  0012               	return	
  6076  015678                     l2021:
  6077  015678  0100               	movlb	0	; () banked
  6078  01567A  5160               	movf	get_packet_size@packetID& (0+255),w,b
  6079                           
  6080                           ; Switch size 1, requested type "space"
  6081                           ; Number of cases is 9, Range of values is 7 to 20
  6082                           ; switch strategies available:
  6083                           ; Name         Instructions Cycles
  6084                           ; simple_byte           28    15 (average)
  6085                           ;	Chosen strategy is simple_byte
  6086  01567C  0A07               	xorlw	7	; case 7
  6087  01567E  B4D8               	btfsc	status,2,c
  6088  015680  D7E9               	goto	l2022
  6089  015682  0A0F               	xorlw	15	; case 8
  6090  015684  B4D8               	btfsc	status,2,c
  6091  015686  D7E8               	goto	l2024
  6092  015688  0A01               	xorlw	1	; case 9
  6093  01568A  B4D8               	btfsc	status,2,c
  6094  01568C  D7E7               	goto	l2025
  6095  01568E  0A03               	xorlw	3	; case 10
  6096  015690  B4D8               	btfsc	status,2,c
  6097  015692  D7E6               	goto	l2026
  6098  015694  0A01               	xorlw	1	; case 11
  6099  015696  B4D8               	btfsc	status,2,c
  6100  015698  D7E5               	goto	l2027
  6101  01569A  0A07               	xorlw	7	; case 12
  6102  01569C  B4D8               	btfsc	status,2,c
  6103  01569E  D7E4               	goto	l2028
  6104  0156A0  0A01               	xorlw	1	; case 13
  6105  0156A2  B4D8               	btfsc	status,2,c
  6106  0156A4  D7E3               	goto	l2029
  6107  0156A6  0A1E               	xorlw	30	; case 19
  6108  0156A8  B4D8               	btfsc	status,2,c
  6109  0156AA  D7E2               	goto	l2030
  6110  0156AC  0A07               	xorlw	7	; case 20
  6111  0156AE  A4D8               	btfss	status,2,c
  6112  0156B0  0012               	return	
  6113  0156B2  D7E0               	goto	l2031
  6114  0156B4                     __end_of_get_packet_size:
  6115                           	opt stack 0
  6116                           tblptru	equ	0xFF8
  6117                           tblptrh	equ	0xFF7
  6118                           tblptrl	equ	0xFF6
  6119                           tablat	equ	0xFF5
  6120                           prodh	equ	0xFF4
  6121                           prodl	equ	0xFF3
  6122                           postinc0	equ	0xFEE
  6123                           wreg	equ	0xFE8
  6124                           postdec1	equ	0xFE5
  6125                           fsr1h	equ	0xFE2
  6126                           fsr1l	equ	0xFE1
  6127                           indf2	equ	0xFDF
  6128                           fsr2h	equ	0xFDA
  6129                           fsr2l	equ	0xFD9
  6130                           status	equ	0xFD8
  6131                           
  6132 ;; *************** function _eusart_getch *****************
  6133 ;; Defined at:
  6134 ;;		line 125 in file "Library/iRobotSerial.c"
  6135 ;; Parameters:    Size  Location     Type
  6136 ;;		None
  6137 ;; Auto vars:     Size  Location     Type
  6138 ;;		None
  6139 ;; Return value:  Size  Location     Type
  6140 ;;                  1    wreg      unsigned char 
  6141 ;; Registers used:
  6142 ;;		wreg, status,2
  6143 ;; Tracked objects:
  6144 ;;		On entry : 0/0
  6145 ;;		On exit  : 0/0
  6146 ;;		Unchanged: 0/0
  6147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6151 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6152 ;;Total ram usage:        0 bytes
  6153 ;; Hardware stack levels used:    1
  6154 ;; Hardware stack levels required when called:    7
  6155 ;; This function calls:
  6156 ;;		Nothing
  6157 ;; This function is called by:
  6158 ;;		_irobot_query_and_update
  6159 ;; This function uses a non-reentrant model
  6160 ;;
  6161                           
  6162                           	psect	text16
  6163  016616                     __ptext16:
  6164                           	opt stack 0
  6165  016616                     _eusart_getch:
  6166                           	opt stack 20
  6167                           
  6168                           ;iRobotSerial.c: 126: while (!PIR1bits.RC1IF) {};
  6169                           
  6170                           ;incstack = 0
  6171  016616  AA9E               	btfss	3998,5,c	;volatile
  6172  016618  D7FE               	goto	_eusart_getch
  6173                           
  6174                           ;iRobotSerial.c: 127: return RCREG1;
  6175  01661A  50AF               	movf	4015,w,c	;volatile
  6176  01661C  0012               	return	
  6177  01661E                     __end_of_eusart_getch:
  6178                           	opt stack 0
  6179                           tblptru	equ	0xFF8
  6180                           tblptrh	equ	0xFF7
  6181                           tblptrl	equ	0xFF6
  6182                           tablat	equ	0xFF5
  6183                           prodh	equ	0xFF4
  6184                           prodl	equ	0xFF3
  6185                           postinc0	equ	0xFEE
  6186                           wreg	equ	0xFE8
  6187                           postdec1	equ	0xFE5
  6188                           fsr1h	equ	0xFE2
  6189                           fsr1l	equ	0xFE1
  6190                           indf2	equ	0xFDF
  6191                           fsr2h	equ	0xFDA
  6192                           fsr2l	equ	0xFD9
  6193                           status	equ	0xFD8
  6194                           
  6195 ;; *************** function _printf *****************
  6196 ;; Defined at:
  6197 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  6198 ;; Parameters:    Size  Location     Type
  6199 ;;  f               2   21[BANK0 ] PTR const unsigned char 
  6200 ;;		 -> STR_14(21), STR_13(21), STR_12(21), STR_11(21), 
  6201 ;;		 -> STR_10(21), STR_9(3), STR_8(34), STR_7(3), 
  6202 ;;		 -> STR_6(14), STR_5(3), STR_4(46), STR_3(3), 
  6203 ;;		 -> STR_2(46), STR_1(3), 
  6204 ;; Auto vars:     Size  Location     Type
  6205 ;;  tmpval          4    0        struct .
  6206 ;;  cp              3    0        PTR const unsigned char 
  6207 ;;  val             2   34[BANK0 ] unsigned int 
  6208 ;;  ap              2   32[BANK0 ] PTR void [1]
  6209 ;;		 -> ?_printf(2), 
  6210 ;;  len             2    0        unsigned int 
  6211 ;;  c               1   36[BANK0 ] char 
  6212 ;;  flag            1   31[BANK0 ] unsigned char 
  6213 ;;  prec            1   30[BANK0 ] char 
  6214 ;; Return value:  Size  Location     Type
  6215 ;;                  2   21[BANK0 ] int 
  6216 ;; Registers used:
  6217 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6218 ;; Tracked objects:
  6219 ;;		On entry : 0/0
  6220 ;;		On exit  : 0/0
  6221 ;;		Unchanged: 0/0
  6222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6223 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6224 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6225 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6226 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6227 ;;Total ram usage:       16 bytes
  6228 ;; Hardware stack levels used:    1
  6229 ;; Hardware stack levels required when called:   12
  6230 ;; This function calls:
  6231 ;;		___lwdiv
  6232 ;;		___lwmod
  6233 ;;		_putch
  6234 ;; This function is called by:
  6235 ;;		_mode1
  6236 ;;		_mode2
  6237 ;;		_mode4
  6238 ;;		_main
  6239 ;; This function uses a non-reentrant model
  6240 ;;
  6241                           
  6242                           	psect	text17
  6243  0124FC                     __ptext17:
  6244                           	opt stack 0
  6245  0124FC                     _printf:
  6246                           	opt stack 18
  6247                           
  6248                           ;doprnt.c: 466: va_list ap;
  6249                           ;doprnt.c: 499: signed char c;
  6250                           ;doprnt.c: 506: signed char prec;
  6251                           ;doprnt.c: 508: unsigned char flag;
  6252                           ;doprnt.c: 523: union {
  6253                           ;doprnt.c: 524: unsigned long vd;
  6254                           ;doprnt.c: 525: double integ;
  6255                           ;doprnt.c: 526: } tmpval;
  6256                           ;doprnt.c: 528: unsigned int val;
  6257                           ;doprnt.c: 529: unsigned len;
  6258                           ;doprnt.c: 530: const char * cp;
  6259                           ;doprnt.c: 533: *ap = __va_start();
  6260                           
  6261                           ;incstack = 0
  6262  0124FC  0E77               	movlw	low (?_printf+2)
  6263  0124FE  0100               	movlb	0	; () banked
  6264  012500  6F80               	movwf	printf@ap& (0+255),b
  6265  012502  0E00               	movlw	high (?_printf+2)
  6266  012504  0100               	movlb	0	; () banked
  6267  012506  6F81               	movwf	(printf@ap+1)& (0+255),b
  6268                           
  6269                           ;doprnt.c: 536: while(c = *f++) {
  6270  012508  D0C9               	goto	u11180
  6271  01250A                     
  6272                           ; BSR set to: 0
  6273                           ;doprnt.c: 538: if(c != '%')
  6274                           
  6275                           ; BSR set to: 0
  6276  01250A  0E25               	movlw	37
  6277  01250C  0100               	movlb	0	; () banked
  6278  01250E  1984               	xorwf	printf@c& (0+255),w,b
  6279  012510  B4D8               	btfsc	status,2,c
  6280  012512  D005               	goto	l2415
  6281                           
  6282                           ; BSR set to: 0
  6283                           ;doprnt.c: 540: {
  6284                           ;doprnt.c: 541: (putch(c) );
  6285  012514  0100               	movlb	0	; () banked
  6286  012516  5184               	movf	printf@c& (0+255),w,b
  6287  012518  ECBA  F0B2         	call	_putch
  6288                           
  6289                           ;doprnt.c: 542: continue;
  6290  01251C  D0BF               	goto	u11180
  6291  01251E                     l2415:
  6292                           
  6293                           ;doprnt.c: 543: }
  6294                           ;doprnt.c: 548: flag = 0;
  6295  01251E  0E00               	movlw	0
  6296  012520  0100               	movlb	0	; () banked
  6297  012522  6F7F               	movwf	printf@flag& (0+255),b
  6298                           
  6299                           ;doprnt.c: 635: switch(c = *f++) {
  6300  012524  D014               	goto	l2416
  6301  012526                     
  6302                           ; BSR set to: 0
  6303                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  6304                           
  6305                           ; BSR set to: 0
  6306  012526  C080  FFD9         	movff	printf@ap,fsr2l
  6307  01252A  C081  FFDA         	movff	printf@ap+1,fsr2h
  6308  01252E  50DF               	movf	indf2,w,c
  6309  012530  0100               	movlb	0	; () banked
  6310  012532  6F84               	movwf	printf@c& (0+255),b
  6311                           
  6312                           ; BSR set to: 0
  6313  012534  0E02               	movlw	2
  6314  012536  0100               	movlb	0	; () banked
  6315  012538  2780               	addwf	printf@ap& (0+255),f,b
  6316  01253A  0E00               	movlw	0
  6317  01253C  2381               	addwfc	(printf@ap+1)& (0+255),f,b
  6318  01253E                     
  6319                           ; BSR set to: 0
  6320                           ;doprnt.c: 809: (putch(c) );
  6321                           
  6322                           ; BSR set to: 0
  6323  01253E  0100               	movlb	0	; () banked
  6324  012540  5184               	movf	printf@c& (0+255),w,b
  6325  012542  ECBA  F0B2         	call	_putch
  6326                           
  6327                           ;doprnt.c: 810: continue;
  6328  012546  D0AA               	goto	u11180
  6329  012548                     
  6330                           ;doprnt.c: 818: flag |= 0x40;
  6331  012548  0100               	movlb	0	; () banked
  6332  01254A  8D7F               	bsf	printf@flag& (0+255),6,b
  6333                           
  6334                           ; BSR set to: 0
  6335                           ;doprnt.c: 822: }
  6336                           
  6337                           ;doprnt.c: 819: break;
  6338  01254C  D01E               	goto	l2421
  6339  01254E                     l2416:
  6340                           
  6341                           ; BSR set to: 0
  6342                           
  6343                           ; BSR set to: 0
  6344  01254E  C075  FFF6         	movff	printf@f,tblptrl
  6345  012552  C076  FFF7         	movff	printf@f+1,tblptrh
  6346  012556  0100               	movlb	0	; () banked
  6347  012558  4B75               	infsnz	printf@f& (0+255),f,b
  6348  01255A  2B76               	incf	(printf@f+1)& (0+255),f,b
  6349  01255C                     	if	0	;tblptru may be non-zero
  6350  01255C                     	endif
  6351  01255C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  6352  01255C  0E00               	movlw	low (__mediumconst shr (0+16))
  6353  01255E  6EF8               	movwf	tblptru,c
  6354  012560                     	endif
  6355  012560  0008               	tblrd		*
  6356  012562  CFF5 F084          	movff	tablat,printf@c
  6357  012566  0100               	movlb	0	; () banked
  6358  012568  5184               	movf	printf@c& (0+255),w,b
  6359                           
  6360                           ; Switch size 1, requested type "space"
  6361                           ; Number of cases is 5, Range of values is 0 to 117
  6362                           ; switch strategies available:
  6363                           ; Name         Instructions Cycles
  6364                           ; simple_byte           16     9 (average)
  6365                           ;	Chosen strategy is simple_byte
  6366  01256A  0A00               	xorlw	0	; case 0
  6367  01256C  B4D8               	btfsc	status,2,c
  6368  01256E  0012               	return	
  6369  012570  0A63               	xorlw	99	; case 99
  6370  012572  B4D8               	btfsc	status,2,c
  6371  012574  D7D8               	goto	l2422
  6372  012576  0A07               	xorlw	7	; case 100
  6373  012578  B4D8               	btfsc	status,2,c
  6374  01257A  D007               	goto	l2421
  6375  01257C  0A0D               	xorlw	13	; case 105
  6376  01257E  B4D8               	btfsc	status,2,c
  6377  012580  D004               	goto	l2421
  6378  012582  0A1C               	xorlw	28	; case 117
  6379  012584  B4D8               	btfsc	status,2,c
  6380  012586  D7E0               	goto	l2424
  6381  012588  D7DA               	goto	l2423
  6382  01258A                     l2421:
  6383                           
  6384                           ; BSR set to: 0
  6385                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  6386  01258A  0100               	movlb	0	; () banked
  6387  01258C  BD7F               	btfsc	printf@flag& (0+255),6,b
  6388  01258E  D019               	goto	l2425
  6389                           
  6390                           ; BSR set to: 0
  6391                           ;doprnt.c: 1253: {
  6392                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6393  012590  C080  FFD9         	movff	printf@ap,fsr2l
  6394  012594  C081  FFDA         	movff	printf@ap+1,fsr2h
  6395  012598  CFDE F082          	movff	postinc2,printf@val
  6396  01259C  CFDD F083          	movff	postdec2,printf@val+1
  6397                           
  6398                           ; BSR set to: 0
  6399  0125A0  0E02               	movlw	2
  6400  0125A2  0100               	movlb	0	; () banked
  6401  0125A4  2780               	addwf	printf@ap& (0+255),f,b
  6402  0125A6  0E00               	movlw	0
  6403  0125A8  2381               	addwfc	(printf@ap+1)& (0+255),f,b
  6404                           
  6405                           ; BSR set to: 0
  6406                           ;doprnt.c: 1261: if((int)val < 0) {
  6407  0125AA  0100               	movlb	0	; () banked
  6408  0125AC  AF83               	btfss	(printf@val+1)& (0+255),7,b
  6409  0125AE  D016               	goto	l2427
  6410                           
  6411                           ; BSR set to: 0
  6412                           ;doprnt.c: 1262: flag |= 0x03;
  6413  0125B0  0E03               	movlw	3
  6414  0125B2  0100               	movlb	0	; () banked
  6415  0125B4  137F               	iorwf	printf@flag& (0+255),f,b
  6416                           
  6417                           ; BSR set to: 0
  6418                           ;doprnt.c: 1263: val = -val;
  6419  0125B6  0100               	movlb	0	; () banked
  6420  0125B8  6D82               	negf	printf@val& (0+255),b
  6421  0125BA  1F83               	comf	(printf@val+1)& (0+255),f,b
  6422  0125BC  B0D8               	btfsc	status,0,c
  6423  0125BE  2B83               	incf	(printf@val+1)& (0+255),f,b
  6424                           
  6425                           ; BSR set to: 0
  6426                           ;doprnt.c: 1264: }
  6427                           ;doprnt.c: 1266: }
  6428  0125C0  D00D               	goto	l2427
  6429  0125C2                     l2425:
  6430                           
  6431                           ; BSR set to: 0
  6432                           ;doprnt.c: 1268: else
  6433                           ;doprnt.c: 1273: {
  6434                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6435                           
  6436                           ; BSR set to: 0
  6437  0125C2  C080  FFD9         	movff	printf@ap,fsr2l
  6438  0125C6  C081  FFDA         	movff	printf@ap+1,fsr2h
  6439  0125CA  CFDE F082          	movff	postinc2,printf@val
  6440  0125CE  CFDD F083          	movff	postdec2,printf@val+1
  6441                           
  6442                           ; BSR set to: 0
  6443  0125D2  0E02               	movlw	2
  6444  0125D4  0100               	movlb	0	; () banked
  6445  0125D6  2780               	addwf	printf@ap& (0+255),f,b
  6446  0125D8  0E00               	movlw	0
  6447  0125DA  2381               	addwfc	(printf@ap+1)& (0+255),f,b
  6448  0125DC                     l2427:
  6449                           
  6450                           ; BSR set to: 0
  6451                           ;doprnt.c: 1287: }
  6452                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6453                           
  6454                           ; BSR set to: 0
  6455  0125DC  0E01               	movlw	1
  6456  0125DE  0100               	movlb	0	; () banked
  6457  0125E0  6F84               	movwf	printf@c& (0+255),b
  6458  0125E2                     l14444:
  6459                           
  6460                           ; BSR set to: 0
  6461  0125E2  0E05               	movlw	5
  6462  0125E4  0100               	movlb	0	; () banked
  6463  0125E6  1984               	xorwf	printf@c& (0+255),w,b
  6464  0125E8  B4D8               	btfsc	status,2,c
  6465  0125EA  D019               	goto	u11160
  6466                           
  6467                           ; BSR set to: 0
  6468                           ;doprnt.c: 1306: if(val < dpowers[c])
  6469                           
  6470                           ; BSR set to: 0
  6471                           
  6472                           ; BSR set to: 0
  6473  0125EC  0100               	movlb	0	; () banked
  6474  0125EE  5184               	movf	printf@c& (0+255),w,b
  6475  0125F0  0D02               	mullw	2
  6476  0125F2  0E6B               	movlw	low _dpowers
  6477  0125F4  24F3               	addwf	prodl,w,c
  6478  0125F6  6EF6               	movwf	tblptrl,c
  6479  0125F8  0EFD               	movlw	high _dpowers
  6480  0125FA  20F4               	addwfc	prodh,w,c
  6481  0125FC  6EF7               	movwf	tblptrh,c
  6482  0125FE                     	if	1	;There are 3 active tblptr bytes
  6483  0125FE  6AF8               	clrf	tblptru,c
  6484  012600  0E00               	movlw	low (__mediumconst shr (0+16))
  6485  012602  22F8               	addwfc	tblptru,f,c
  6486  012604                     	endif
  6487  012604  0009               	tblrd		*+
  6488  012606  50F5               	movf	tablat,w,c
  6489  012608  0100               	movlb	0	; () banked
  6490  01260A  5D82               	subwf	printf@val& (0+255),w,b
  6491  01260C  0009               	tblrd		*+
  6492  01260E  50F5               	movf	tablat,w,c
  6493  012610  0100               	movlb	0	; () banked
  6494  012612  5983               	subwfb	(printf@val+1)& (0+255),w,b
  6495  012614  A0D8               	btfss	status,0,c
  6496  012616  D003               	goto	u11160
  6497                           
  6498                           ; BSR set to: 0
  6499                           
  6500                           ; BSR set to: 0
  6501                           
  6502                           ; BSR set to: 0
  6503                           ;doprnt.c: 1307: break;
  6504  012618  0100               	movlb	0	; () banked
  6505  01261A  2B84               	incf	printf@c& (0+255),f,b
  6506  01261C  D7E2               	goto	l14444
  6507  01261E                     u11160:
  6508                           
  6509                           ; BSR set to: 0
  6510                           ;doprnt.c: 1422: {
  6511                           ;doprnt.c: 1438: if(flag & 0x03)
  6512                           
  6513                           ; BSR set to: 0
  6514  01261E  C07F  F07D         	movff	printf@flag,??_printf
  6515  012622  0E03               	movlw	3
  6516  012624  0100               	movlb	0	; () banked
  6517  012626  177D               	andwf	??_printf& (0+255),f,b
  6518  012628  B4D8               	btfsc	status,2,c
  6519  01262A  D003               	goto	l2431
  6520                           
  6521                           ; BSR set to: 0
  6522                           ;doprnt.c: 1439: (putch('-') );
  6523  01262C  0E2D               	movlw	45
  6524  01262E  ECBA  F0B2         	call	_putch
  6525  012632                     l2431:
  6526                           
  6527                           ;doprnt.c: 1469: }
  6528                           ;doprnt.c: 1472: prec = c;
  6529  012632  C084  F07E         	movff	printf@c,printf@prec
  6530                           
  6531                           ;doprnt.c: 1474: while(prec--) {
  6532  012636  D02C               	goto	l2432
  6533  012638                     
  6534                           ;doprnt.c: 1478: {
  6535                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6536  012638  0100               	movlb	0	; () banked
  6537  01263A  517E               	movf	printf@prec& (0+255),w,b
  6538  01263C  0D02               	mullw	2
  6539  01263E  0E6B               	movlw	low _dpowers
  6540  012640  24F3               	addwf	prodl,w,c
  6541  012642  6EF6               	movwf	tblptrl,c
  6542  012644  0EFD               	movlw	high _dpowers
  6543  012646  20F4               	addwfc	prodh,w,c
  6544  012648  6EF7               	movwf	tblptrh,c
  6545  01264A                     	if	1	;There are 3 active tblptr bytes
  6546  01264A  6AF8               	clrf	tblptru,c
  6547  01264C  0E00               	movlw	low (__mediumconst shr (0+16))
  6548  01264E  22F8               	addwfc	tblptru,f,c
  6549  012650                     	endif
  6550  012650  0009               	tblrd		*+
  6551  012652  CFF5 F062          	movff	tablat,___lwdiv@divisor
  6552  012656  000A               	tblrd		*-
  6553  012658  CFF5 F063          	movff	tablat,___lwdiv@divisor+1
  6554  01265C  C082  F060         	movff	printf@val,___lwdiv@dividend
  6555  012660  C083  F061         	movff	printf@val+1,___lwdiv@dividend+1
  6556  012664  EC85  F0A8         	call	___lwdiv	;wreg free
  6557  012668  C060  F067         	movff	?___lwdiv,___lwmod@dividend
  6558  01266C  C061  F068         	movff	?___lwdiv+1,___lwmod@dividend+1
  6559  012670  0E00               	movlw	0
  6560  012672  0100               	movlb	0	; () banked
  6561  012674  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
  6562  012676  0E0A               	movlw	10
  6563  012678  6F69               	movwf	___lwmod@divisor& (0+255),b
  6564  01267A  ECF0  F0AB         	call	___lwmod	;wreg free
  6565  01267E  0100               	movlb	0	; () banked
  6566  012680  5167               	movf	?___lwmod& (0+255),w,b
  6567  012682  0F30               	addlw	48
  6568  012684  0100               	movlb	0	; () banked
  6569  012686  6F84               	movwf	printf@c& (0+255),b
  6570                           
  6571                           ; BSR set to: 0
  6572                           ;doprnt.c: 1523: }
  6573                           ;doprnt.c: 1524: (putch(c) );
  6574  012688  0100               	movlb	0	; () banked
  6575  01268A  5184               	movf	printf@c& (0+255),w,b
  6576  01268C  ECBA  F0B2         	call	_putch
  6577  012690                     l2432:
  6578  012690  0100               	movlb	0	; () banked
  6579  012692  077E               	decf	printf@prec& (0+255),f,b
  6580  012694  0100               	movlb	0	; () banked
  6581  012696  297E               	incf	printf@prec& (0+255),w,b
  6582  012698  A4D8               	btfss	status,2,c
  6583  01269A  D7CE               	goto	l2433
  6584  01269C                     u11180:
  6585                           
  6586                           ; BSR set to: 0
  6587                           
  6588                           ; BSR set to: 0
  6589  01269C  C075  FFF6         	movff	printf@f,tblptrl
  6590  0126A0  C076  FFF7         	movff	printf@f+1,tblptrh
  6591  0126A4  0100               	movlb	0	; () banked
  6592  0126A6  4B75               	infsnz	printf@f& (0+255),f,b
  6593  0126A8  2B76               	incf	(printf@f+1)& (0+255),f,b
  6594  0126AA                     	if	0	;tblptru may be non-zero
  6595  0126AA                     	endif
  6596  0126AA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  6597  0126AA  0E00               	movlw	low (__mediumconst shr (0+16))
  6598  0126AC  6EF8               	movwf	tblptru,c
  6599  0126AE                     	endif
  6600  0126AE  0008               	tblrd		*
  6601  0126B0  CFF5 F084          	movff	tablat,printf@c
  6602  0126B4  0100               	movlb	0	; () banked
  6603  0126B6  5184               	movf	printf@c& (0+255),w,b
  6604  0126B8  B4D8               	btfsc	status,2,c
  6605  0126BA  0012               	return	
  6606  0126BC  D726               	goto	l2414
  6607  0126BE                     __end_of_printf:
  6608                           	opt stack 0
  6609                           tblptru	equ	0xFF8
  6610                           tblptrh	equ	0xFF7
  6611                           tblptrl	equ	0xFF6
  6612                           tablat	equ	0xFF5
  6613                           prodh	equ	0xFF4
  6614                           prodl	equ	0xFF3
  6615                           postinc0	equ	0xFEE
  6616                           wreg	equ	0xFE8
  6617                           postdec1	equ	0xFE5
  6618                           fsr1h	equ	0xFE2
  6619                           fsr1l	equ	0xFE1
  6620                           indf2	equ	0xFDF
  6621                           postinc2	equ	0xFDE
  6622                           postdec2	equ	0xFDD
  6623                           fsr2h	equ	0xFDA
  6624                           fsr2l	equ	0xFD9
  6625                           status	equ	0xFD8
  6626                           
  6627 ;; *************** function _putch *****************
  6628 ;; Defined at:
  6629 ;;		line 454 in file "Library/Console.c"
  6630 ;; Parameters:    Size  Location     Type
  6631 ;;  c               1    wreg     unsigned char 
  6632 ;; Auto vars:     Size  Location     Type
  6633 ;;  c               1   20[BANK0 ] unsigned char 
  6634 ;; Return value:  Size  Location     Type
  6635 ;;                  1    wreg      void 
  6636 ;; Registers used:
  6637 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6638 ;; Tracked objects:
  6639 ;;		On entry : 0/0
  6640 ;;		On exit  : 0/0
  6641 ;;		Unchanged: 0/0
  6642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6644 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6646 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6647 ;;Total ram usage:        1 bytes
  6648 ;; Hardware stack levels used:    1
  6649 ;; Hardware stack levels required when called:   11
  6650 ;; This function calls:
  6651 ;;		_Console_PrintChar
  6652 ;; This function is called by:
  6653 ;;		_printf
  6654 ;; This function uses a non-reentrant model
  6655 ;;
  6656                           
  6657                           	psect	text18
  6658  016574                     __ptext18:
  6659                           	opt stack 0
  6660  016574                     _putch:
  6661                           	opt stack 18
  6662                           
  6663                           ; BSR set to: 0
  6664                           ;incstack = 0
  6665                           ;putch@c stored from wreg
  6666  016574  0100               	movlb	0	; () banked
  6667  016576  6F74               	movwf	putch@c& (0+255),b
  6668                           
  6669                           ;Console.c: 456: Console_PrintChar(c);
  6670  016578  0100               	movlb	0	; () banked
  6671  01657A  5174               	movf	putch@c& (0+255),w,b
  6672  01657C  EC3F  F094         	call	_Console_PrintChar
  6673  016580  0012               	return		;funcret
  6674  016582                     __end_of_putch:
  6675                           	opt stack 0
  6676                           tblptru	equ	0xFF8
  6677                           tblptrh	equ	0xFF7
  6678                           tblptrl	equ	0xFF6
  6679                           tablat	equ	0xFF5
  6680                           prodh	equ	0xFF4
  6681                           prodl	equ	0xFF3
  6682                           postinc0	equ	0xFEE
  6683                           wreg	equ	0xFE8
  6684                           postdec1	equ	0xFE5
  6685                           fsr1h	equ	0xFE2
  6686                           fsr1l	equ	0xFE1
  6687                           indf2	equ	0xFDF
  6688                           postinc2	equ	0xFDE
  6689                           postdec2	equ	0xFDD
  6690                           fsr2h	equ	0xFDA
  6691                           fsr2l	equ	0xFD9
  6692                           status	equ	0xFD8
  6693                           
  6694 ;; *************** function _Console_PrintChar *****************
  6695 ;; Defined at:
  6696 ;;		line 322 in file "Library/Console.c"
  6697 ;; Parameters:    Size  Location     Type
  6698 ;;  pInput          1    wreg     unsigned char 
  6699 ;; Auto vars:     Size  Location     Type
  6700 ;;  pInput          1   19[BANK0 ] unsigned char 
  6701 ;; Return value:  Size  Location     Type
  6702 ;;                  1    wreg      void 
  6703 ;; Registers used:
  6704 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6705 ;; Tracked objects:
  6706 ;;		On entry : 0/0
  6707 ;;		On exit  : 0/0
  6708 ;;		Unchanged: 0/0
  6709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6711 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6712 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6713 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6714 ;;Total ram usage:        4 bytes
  6715 ;; Hardware stack levels used:    1
  6716 ;; Hardware stack levels required when called:   10
  6717 ;; This function calls:
  6718 ;;		_Console_Backspace
  6719 ;;		_Console_FormFeed
  6720 ;;		_Console_IncrementCursor
  6721 ;;		_Console_NewLine
  6722 ;;		_Console_ResetCursor
  6723 ;;		_Console_Tab
  6724 ;; This function is called by:
  6725 ;;		_putch
  6726 ;;		_Console_PrintString
  6727 ;; This function uses a non-reentrant model
  6728 ;;
  6729                           
  6730                           	psect	text19
  6731  01287E                     __ptext19:
  6732                           	opt stack 0
  6733  01287E                     _Console_PrintChar:
  6734                           	opt stack 18
  6735                           
  6736                           ;incstack = 0
  6737                           ;Console_PrintChar@pInput stored from wreg
  6738  01287E  0100               	movlb	0	; () banked
  6739  012880  6F73               	movwf	Console_PrintChar@pInput& (0+255),b
  6740                           
  6741                           ;Console.c: 324: switch(pInput)
  6742  012882  D0B1               	goto	l1036
  6743  012884                     
  6744                           ;Console.c: 327: case '\n':
  6745                           ;Console.c: 328: Console_NewLine();
  6746  012884  EC3D  F0A5         	call	_Console_NewLine	;wreg free
  6747                           
  6748                           ;Console.c: 329: return;
  6749  012888  0012               	return	
  6750  01288A                     
  6751                           ;Console.c: 331: Console_Backspace();
  6752  01288A  EC21  F0AC         	call	_Console_Backspace	;wreg free
  6753                           
  6754                           ;Console.c: 332: return;
  6755  01288E  0012               	return	
  6756  012890                     
  6757                           ;Console.c: 334: Console_FormFeed();
  6758  012890  EC70  F0A6         	call	_Console_FormFeed	;wreg free
  6759                           
  6760                           ;Console.c: 335: return;
  6761  012894  0012               	return	
  6762  012896                     
  6763                           ;Console.c: 337: Console_Tab();
  6764  012896  ECBB  F09F         	call	_Console_Tab	;wreg free
  6765                           
  6766                           ;Console.c: 338: return;
  6767  01289A  0012               	return	
  6768  01289C                     
  6769                           ;Console.c: 340: Console_IncrementCursor();
  6770  01289C  EC5A  F0AB         	call	_Console_IncrementCursor	;wreg free
  6771                           
  6772                           ;Console.c: 341: return;
  6773  0128A0  0012               	return	
  6774  0128A2                     
  6775                           ;Console.c: 343: Console_ResetCursor();
  6776  0128A2  EC6F  F0B1         	call	_Console_ResetCursor	;wreg free
  6777                           
  6778                           ;Console.c: 344: return;
  6779  0128A6  0012               	return	
  6780  0128A8                     
  6781                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  6782                           
  6783                           ;Console.c: 349: default:
  6784  0128A8  C073  F070         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  6785  0128AC  0E7F               	movlw	127
  6786  0128AE  0100               	movlb	0	; () banked
  6787  0128B0  1770               	andwf	??_Console_PrintChar& (0+255),f,b
  6788  0128B2  0100               	movlb	0	; () banked
  6789  0128B4  51E7               	movf	_lBufferY& (0+255),w,b
  6790  0128B6  0D14               	mullw	20
  6791  0128B8  0EC8               	movlw	low _lBuffer
  6792  0128BA  0100               	movlb	0	; () banked
  6793  0128BC  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  6794  0128BE  0E04               	movlw	high _lBuffer
  6795  0128C0  0100               	movlb	0	; () banked
  6796  0128C2  6F72               	movwf	(??_Console_PrintChar+2)& (0+255),b
  6797  0128C4  50F3               	movf	prodl,w,c
  6798  0128C6  0100               	movlb	0	; () banked
  6799  0128C8  2771               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  6800  0128CA  50F4               	movf	prodh,w,c
  6801  0128CC  0100               	movlb	0	; () banked
  6802  0128CE  2372               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  6803  0128D0  0100               	movlb	0	; () banked
  6804  0128D2  51E8               	movf	_lBufferX& (0+255),w,b
  6805  0128D4  0D01               	mullw	1
  6806  0128D6  50F3               	movf	prodl,w,c
  6807  0128D8  0100               	movlb	0	; () banked
  6808  0128DA  2571               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  6809  0128DC  6ED9               	movwf	fsr2l,c
  6810  0128DE  50F4               	movf	prodh,w,c
  6811  0128E0  0100               	movlb	0	; () banked
  6812  0128E2  2172               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  6813  0128E4  6EDA               	movwf	fsr2h,c
  6814  0128E6  50DF               	movf	indf2,w,c
  6815  0128E8  0B7F               	andlw	127
  6816  0128EA  0100               	movlb	0	; () banked
  6817  0128EC  1970               	xorwf	??_Console_PrintChar& (0+255),w,b
  6818  0128EE  B4D8               	btfsc	status,2,c
  6819  0128F0  D02E               	goto	l1047
  6820                           
  6821                           ; BSR set to: 0
  6822                           ;Console.c: 351: {
  6823                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  6824  0128F2  0E01               	movlw	1
  6825  0128F4  0100               	movlb	0	; () banked
  6826  0128F6  6FFF               	movwf	_change& (0+255),b
  6827                           
  6828                           ; BSR set to: 0
  6829  0128F8  0100               	movlb	0	; () banked
  6830  0128FA  51E7               	movf	_lBufferY& (0+255),w,b
  6831  0128FC  0D14               	mullw	20
  6832  0128FE  0EC8               	movlw	low _lBuffer
  6833  012900  0100               	movlb	0	; () banked
  6834  012902  6F70               	movwf	??_Console_PrintChar& (0+255),b
  6835  012904  0E04               	movlw	high _lBuffer
  6836  012906  0100               	movlb	0	; () banked
  6837  012908  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  6838  01290A  50F3               	movf	prodl,w,c
  6839  01290C  0100               	movlb	0	; () banked
  6840  01290E  2770               	addwf	??_Console_PrintChar& (0+255),f,b
  6841  012910  50F4               	movf	prodh,w,c
  6842  012912  0100               	movlb	0	; () banked
  6843  012914  2371               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  6844  012916  0100               	movlb	0	; () banked
  6845  012918  51E8               	movf	_lBufferX& (0+255),w,b
  6846  01291A  0D01               	mullw	1
  6847  01291C  50F3               	movf	prodl,w,c
  6848  01291E  0100               	movlb	0	; () banked
  6849  012920  2570               	addwf	??_Console_PrintChar& (0+255),w,b
  6850  012922  6ED9               	movwf	fsr2l,c
  6851  012924  50F4               	movf	prodh,w,c
  6852  012926  0100               	movlb	0	; () banked
  6853  012928  2171               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  6854  01292A  6EDA               	movwf	fsr2h,c
  6855  01292C  0100               	movlb	0	; () banked
  6856  01292E  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
  6857  012930  0980               	iorlw	128
  6858  012932  6EDF               	movwf	indf2,c
  6859                           
  6860                           ; BSR set to: 0
  6861                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
  6862  012934  0100               	movlb	0	; () banked
  6863  012936  51E7               	movf	_lBufferY& (0+255),w,b
  6864  012938  0D02               	mullw	2
  6865  01293A  0E00               	movlw	low _lCBuffer
  6866  01293C  24F3               	addwf	prodl,w,c
  6867  01293E  6ED9               	movwf	fsr2l,c
  6868  012940  0E04               	movlw	high _lCBuffer
  6869  012942  20F4               	addwfc	prodh,w,c
  6870  012944  6EDA               	movwf	fsr2h,c
  6871  012946  C0FD  FFDE         	movff	_gForecolour,postinc2
  6872  01294A  C0FE  FFDD         	movff	_gForecolour+1,postdec2
  6873  01294E                     l1047:
  6874                           
  6875                           ; BSR set to: 0
  6876                           ;Console.c: 354: }
  6877                           ;Console.c: 368: if(Console_IncrementCursor())
  6878                           
  6879                           ; BSR set to: 0
  6880  01294E  EC5A  F0AB         	call	_Console_IncrementCursor	;wreg free
  6881  012952  0900               	iorlw	0
  6882  012954  B4D8               	btfsc	status,2,c
  6883  012956  0012               	return	
  6884                           
  6885                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  6886  012958  C073  F070         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  6887  01295C  0E7F               	movlw	127
  6888  01295E  0100               	movlb	0	; () banked
  6889  012960  1770               	andwf	??_Console_PrintChar& (0+255),f,b
  6890  012962  0100               	movlb	0	; () banked
  6891  012964  51E7               	movf	_lBufferY& (0+255),w,b
  6892  012966  0D14               	mullw	20
  6893  012968  0EC8               	movlw	low _lBuffer
  6894  01296A  0100               	movlb	0	; () banked
  6895  01296C  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  6896  01296E  0E04               	movlw	high _lBuffer
  6897  012970  0100               	movlb	0	; () banked
  6898  012972  6F72               	movwf	(??_Console_PrintChar+2)& (0+255),b
  6899  012974  50F3               	movf	prodl,w,c
  6900  012976  0100               	movlb	0	; () banked
  6901  012978  2771               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  6902  01297A  50F4               	movf	prodh,w,c
  6903  01297C  0100               	movlb	0	; () banked
  6904  01297E  2372               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  6905  012980  0100               	movlb	0	; () banked
  6906  012982  51E8               	movf	_lBufferX& (0+255),w,b
  6907  012984  0D01               	mullw	1
  6908  012986  50F3               	movf	prodl,w,c
  6909  012988  0100               	movlb	0	; () banked
  6910  01298A  2571               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  6911  01298C  6ED9               	movwf	fsr2l,c
  6912  01298E  50F4               	movf	prodh,w,c
  6913  012990  0100               	movlb	0	; () banked
  6914  012992  2172               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  6915  012994  6EDA               	movwf	fsr2h,c
  6916  012996  50DF               	movf	indf2,w,c
  6917  012998  0B7F               	andlw	127
  6918  01299A  0100               	movlb	0	; () banked
  6919  01299C  1970               	xorwf	??_Console_PrintChar& (0+255),w,b
  6920  01299E  B4D8               	btfsc	status,2,c
  6921  0129A0  0012               	return	
  6922                           
  6923                           ; BSR set to: 0
  6924                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  6925  0129A2  0E01               	movlw	1
  6926  0129A4  0100               	movlb	0	; () banked
  6927  0129A6  6FFF               	movwf	_change& (0+255),b
  6928                           
  6929                           ; BSR set to: 0
  6930  0129A8  0100               	movlb	0	; () banked
  6931  0129AA  51E7               	movf	_lBufferY& (0+255),w,b
  6932  0129AC  0D14               	mullw	20
  6933  0129AE  0EC8               	movlw	low _lBuffer
  6934  0129B0  0100               	movlb	0	; () banked
  6935  0129B2  6F70               	movwf	??_Console_PrintChar& (0+255),b
  6936  0129B4  0E04               	movlw	high _lBuffer
  6937  0129B6  0100               	movlb	0	; () banked
  6938  0129B8  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  6939  0129BA  50F3               	movf	prodl,w,c
  6940  0129BC  0100               	movlb	0	; () banked
  6941  0129BE  2770               	addwf	??_Console_PrintChar& (0+255),f,b
  6942  0129C0  50F4               	movf	prodh,w,c
  6943  0129C2  0100               	movlb	0	; () banked
  6944  0129C4  2371               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  6945  0129C6  0100               	movlb	0	; () banked
  6946  0129C8  51E8               	movf	_lBufferX& (0+255),w,b
  6947  0129CA  0D01               	mullw	1
  6948  0129CC  50F3               	movf	prodl,w,c
  6949  0129CE  0100               	movlb	0	; () banked
  6950  0129D0  2570               	addwf	??_Console_PrintChar& (0+255),w,b
  6951  0129D2  6ED9               	movwf	fsr2l,c
  6952  0129D4  50F4               	movf	prodh,w,c
  6953  0129D6  0100               	movlb	0	; () banked
  6954  0129D8  2171               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  6955  0129DA  6EDA               	movwf	fsr2h,c
  6956  0129DC  0100               	movlb	0	; () banked
  6957  0129DE  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
  6958  0129E0  0980               	iorlw	128
  6959  0129E2  6EDF               	movwf	indf2,c
  6960                           
  6961                           ; BSR set to: 0
  6962                           ;Console.c: 372: };
  6963                           
  6964                           ; BSR set to: 0
  6965                           ;Console.c: 371: return;
  6966                           
  6967                           ; BSR set to: 0
  6968                           
  6969                           ; BSR set to: 0
  6970  0129E4  0012               	return	
  6971  0129E6                     l1036:
  6972                           
  6973                           ; BSR set to: 0
  6974  0129E6  0100               	movlb	0	; () banked
  6975  0129E8  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
  6976                           
  6977                           ; Switch size 1, requested type "space"
  6978                           ; Number of cases is 8, Range of values is 7 to 35
  6979                           ; switch strategies available:
  6980                           ; Name         Instructions Cycles
  6981                           ; simple_byte           25    13 (average)
  6982                           ;	Chosen strategy is simple_byte
  6983  0129EA  0A07               	xorlw	7	; case 7
  6984  0129EC  B4D8               	btfsc	status,2,c
  6985  0129EE  D756               	goto	l1043
  6986  0129F0  0A0F               	xorlw	15	; case 8
  6987  0129F2  B4D8               	btfsc	status,2,c
  6988  0129F4  D74A               	goto	l1040
  6989  0129F6  0A01               	xorlw	1	; case 9
  6990  0129F8  B4D8               	btfsc	status,2,c
  6991  0129FA  D74D               	goto	l1042
  6992  0129FC  0A03               	xorlw	3	; case 10
  6993  0129FE  B4D8               	btfsc	status,2,c
  6994  012A00  D741               	goto	l1037
  6995  012A02  0A06               	xorlw	6	; case 12
  6996  012A04  B4D8               	btfsc	status,2,c
  6997  012A06  D744               	goto	l1041
  6998  012A08  0A01               	xorlw	1	; case 13
  6999  012A0A  B4D8               	btfsc	status,2,c
  7000  012A0C  D73B               	goto	l1037
  7001  012A0E  0A2D               	xorlw	45	; case 32
  7002  012A10  B4D8               	btfsc	status,2,c
  7003  012A12  D74A               	goto	l1045
  7004  012A14  0A03               	xorlw	3	; case 35
  7005  012A16  B4D8               	btfsc	status,2,c
  7006  012A18  D744               	goto	l1044
  7007  012A1A  D746               	goto	l1045
  7008  012A1C                     __end_of_Console_PrintChar:
  7009                           	opt stack 0
  7010                           tblptru	equ	0xFF8
  7011                           tblptrh	equ	0xFF7
  7012                           tblptrl	equ	0xFF6
  7013                           tablat	equ	0xFF5
  7014                           prodh	equ	0xFF4
  7015                           prodl	equ	0xFF3
  7016                           postinc0	equ	0xFEE
  7017                           wreg	equ	0xFE8
  7018                           postdec1	equ	0xFE5
  7019                           fsr1h	equ	0xFE2
  7020                           fsr1l	equ	0xFE1
  7021                           indf2	equ	0xFDF
  7022                           postinc2	equ	0xFDE
  7023                           postdec2	equ	0xFDD
  7024                           fsr2h	equ	0xFDA
  7025                           fsr2l	equ	0xFD9
  7026                           status	equ	0xFD8
  7027                           
  7028 ;; *************** function _Console_Tab *****************
  7029 ;; Defined at:
  7030 ;;		line 260 in file "Library/Console.c"
  7031 ;; Parameters:    Size  Location     Type
  7032 ;;		None
  7033 ;; Auto vars:     Size  Location     Type
  7034 ;;  c               1   15[BANK0 ] unsigned char 
  7035 ;;  i               1   14[BANK0 ] unsigned char 
  7036 ;;  t               1   13[BANK0 ] unsigned char 
  7037 ;; Return value:  Size  Location     Type
  7038 ;;                  1    wreg      void 
  7039 ;; Registers used:
  7040 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7041 ;; Tracked objects:
  7042 ;;		On entry : 0/0
  7043 ;;		On exit  : 0/0
  7044 ;;		Unchanged: 0/0
  7045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7047 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7048 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7049 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7050 ;;Total ram usage:        8 bytes
  7051 ;; Hardware stack levels used:    1
  7052 ;; Hardware stack levels required when called:    9
  7053 ;; This function calls:
  7054 ;;		_Console_ClearCursor
  7055 ;;		_Console_IncrementCursor
  7056 ;;		___awdiv
  7057 ;; This function is called by:
  7058 ;;		_Console_PrintChar
  7059 ;; This function uses a non-reentrant model
  7060 ;;
  7061                           
  7062                           	psect	text20
  7063  013F76                     __ptext20:
  7064                           	opt stack 0
  7065  013F76                     _Console_Tab:
  7066                           	opt stack 18
  7067                           
  7068                           ;Console.c: 262: UINT8 i = 0;
  7069                           
  7070                           ;incstack = 0
  7071  013F76  0E00               	movlw	0
  7072  013F78  0100               	movlb	0	; () banked
  7073  013F7A  6F6E               	movwf	Console_Tab@i& (0+255),b
  7074                           
  7075                           ; BSR set to: 0
  7076                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
  7077  013F7C  0EFA               	movlw	250
  7078  013F7E  2447               	addwf	_gCursor,w,c
  7079  013F80  0100               	movlb	0	; () banked
  7080  013F82  6F60               	movwf	___awdiv@dividend& (0+255),b
  7081  013F84  0EFF               	movlw	255
  7082  013F86  2048               	addwfc	_gCursor+1,w,c
  7083  013F88  0100               	movlb	0	; () banked
  7084  013F8A  6F61               	movwf	(___awdiv@dividend+1)& (0+255),b
  7085  013F8C  0E00               	movlw	0
  7086  013F8E  0100               	movlb	0	; () banked
  7087  013F90  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  7088  013F92  0E06               	movlw	6
  7089  013F94  6F62               	movwf	___awdiv@divisor& (0+255),b
  7090  013F96  EC7C  F0A0         	call	___awdiv	;wreg free
  7091  013F9A  0100               	movlb	0	; () banked
  7092  013F9C  5160               	movf	?___awdiv& (0+255),w,b
  7093  013F9E  0100               	movlb	0	; () banked
  7094  013FA0  6F6F               	movwf	Console_Tab@c& (0+255),b
  7095                           
  7096                           ; BSR set to: 0
  7097                           ;Console.c: 264: UINT8 t = c/4;
  7098  013FA2  C06F  F060         	movff	Console_Tab@c,___awdiv@dividend
  7099  013FA6  0100               	movlb	0	; () banked
  7100  013FA8  6B61               	clrf	(___awdiv@dividend+1)& (0+255),b
  7101  013FAA  0E00               	movlw	0
  7102  013FAC  0100               	movlb	0	; () banked
  7103  013FAE  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  7104  013FB0  0E04               	movlw	4
  7105  013FB2  6F62               	movwf	___awdiv@divisor& (0+255),b
  7106  013FB4  EC7C  F0A0         	call	___awdiv	;wreg free
  7107  013FB8  0100               	movlb	0	; () banked
  7108  013FBA  5160               	movf	?___awdiv& (0+255),w,b
  7109  013FBC  0100               	movlb	0	; () banked
  7110  013FBE  6F6D               	movwf	Console_Tab@t& (0+255),b
  7111                           
  7112                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
  7113  013FC0  0E00               	movlw	0
  7114  013FC2  0100               	movlb	0	; () banked
  7115  013FC4  6F6E               	movwf	Console_Tab@i& (0+255),b
  7116  013FC6  D006               	goto	l1009
  7117  013FC8                     
  7118                           ; BSR set to: 0
  7119                           ;Console.c: 266: {
  7120                           ;Console.c: 267: Console_ClearCursor();
  7121                           
  7122                           ; BSR set to: 0
  7123  013FC8  ECD3  F0AE         	call	_Console_ClearCursor	;wreg free
  7124                           
  7125                           ;Console.c: 268: Console_IncrementCursor();
  7126  013FCC  EC5A  F0AB         	call	_Console_IncrementCursor	;wreg free
  7127  013FD0  0100               	movlb	0	; () banked
  7128  013FD2  2B6E               	incf	Console_Tab@i& (0+255),f,b
  7129  013FD4                     l1009:
  7130                           
  7131                           ; BSR set to: 0
  7132                           
  7133                           ; BSR set to: 0
  7134  013FD4  0100               	movlb	0	; () banked
  7135  013FD6  516D               	movf	Console_Tab@t& (0+255),w,b
  7136  013FD8  0D04               	mullw	4
  7137  013FDA  1EF3               	comf	prodl,f,c
  7138  013FDC  1EF4               	comf	prodh,f,c
  7139  013FDE  4AF3               	infsnz	prodl,f,c
  7140  013FE0  2AF4               	incf	prodh,f,c
  7141  013FE2  0100               	movlb	0	; () banked
  7142  013FE4  516F               	movf	Console_Tab@c& (0+255),w,b
  7143  013FE6  0100               	movlb	0	; () banked
  7144  013FE8  6F68               	movwf	??_Console_Tab& (0+255),b
  7145  013FEA  6B69               	clrf	(??_Console_Tab+1)& (0+255),b
  7146  013FEC  50F3               	movf	prodl,w,c
  7147  013FEE  0100               	movlb	0	; () banked
  7148  013FF0  2768               	addwf	??_Console_Tab& (0+255),f,b
  7149  013FF2  50F4               	movf	prodh,w,c
  7150  013FF4  0100               	movlb	0	; () banked
  7151  013FF6  2369               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  7152  013FF8  0100               	movlb	0	; () banked
  7153  013FFA  1F68               	comf	??_Console_Tab& (0+255),f,b
  7154  013FFC  1F69               	comf	(??_Console_Tab+1)& (0+255),f,b
  7155  013FFE  4B68               	infsnz	??_Console_Tab& (0+255),f,b
  7156  014000  2B69               	incf	(??_Console_Tab+1)& (0+255),f,b
  7157  014002  0E04               	movlw	4
  7158  014004  0100               	movlb	0	; () banked
  7159  014006  2768               	addwf	??_Console_Tab& (0+255),f,b
  7160  014008  0E00               	movlw	0
  7161  01400A  2369               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  7162  01400C  0100               	movlb	0	; () banked
  7163  01400E  516E               	movf	Console_Tab@i& (0+255),w,b
  7164  014010  0100               	movlb	0	; () banked
  7165  014012  6F6A               	movwf	(??_Console_Tab+2)& (0+255),b
  7166  014014  6B6B               	clrf	(??_Console_Tab+3)& (0+255),b
  7167  014016  0100               	movlb	0	; () banked
  7168  014018  5168               	movf	??_Console_Tab& (0+255),w,b
  7169  01401A  0100               	movlb	0	; () banked
  7170  01401C  5D6A               	subwf	(??_Console_Tab+2)& (0+255),w,b
  7171  01401E  0100               	movlb	0	; () banked
  7172  014020  516B               	movf	(??_Console_Tab+3)& (0+255),w,b
  7173  014022  0A80               	xorlw	128
  7174  014024  0100               	movlb	0	; () banked
  7175  014026  6F6C               	movwf	(??_Console_Tab+4)& (0+255),b
  7176  014028  0100               	movlb	0	; () banked
  7177  01402A  5169               	movf	(??_Console_Tab+1)& (0+255),w,b
  7178  01402C  0A80               	xorlw	128
  7179  01402E  0100               	movlb	0	; () banked
  7180  014030  596C               	subwfb	(??_Console_Tab+4)& (0+255),w,b
  7181  014032  B0D8               	btfsc	status,0,c
  7182  014034  0012               	return	
  7183  014036  D7C8               	goto	l1010
  7184  014038                     __end_of_Console_Tab:
  7185                           	opt stack 0
  7186                           tblptru	equ	0xFF8
  7187                           tblptrh	equ	0xFF7
  7188                           tblptrl	equ	0xFF6
  7189                           tablat	equ	0xFF5
  7190                           prodh	equ	0xFF4
  7191                           prodl	equ	0xFF3
  7192                           postinc0	equ	0xFEE
  7193                           wreg	equ	0xFE8
  7194                           postdec1	equ	0xFE5
  7195                           fsr1h	equ	0xFE2
  7196                           fsr1l	equ	0xFE1
  7197                           indf2	equ	0xFDF
  7198                           postinc2	equ	0xFDE
  7199                           postdec2	equ	0xFDD
  7200                           fsr2h	equ	0xFDA
  7201                           fsr2l	equ	0xFD9
  7202                           status	equ	0xFD8
  7203                           
  7204 ;; *************** function ___awdiv *****************
  7205 ;; Defined at:
  7206 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
  7207 ;; Parameters:    Size  Location     Type
  7208 ;;  dividend        2    0[BANK0 ] int 
  7209 ;;  divisor         2    2[BANK0 ] int 
  7210 ;; Auto vars:     Size  Location     Type
  7211 ;;  quotient        2    6[BANK0 ] int 
  7212 ;;  sign            1    5[BANK0 ] unsigned char 
  7213 ;;  counter         1    4[BANK0 ] unsigned char 
  7214 ;; Return value:  Size  Location     Type
  7215 ;;                  2    0[BANK0 ] int 
  7216 ;; Registers used:
  7217 ;;		wreg, status,2, status,0
  7218 ;; Tracked objects:
  7219 ;;		On entry : 0/0
  7220 ;;		On exit  : 0/0
  7221 ;;		Unchanged: 0/0
  7222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7223 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7224 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7226 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7227 ;;Total ram usage:        8 bytes
  7228 ;; Hardware stack levels used:    1
  7229 ;; Hardware stack levels required when called:    7
  7230 ;; This function calls:
  7231 ;;		Nothing
  7232 ;; This function is called by:
  7233 ;;		_Console_Tab
  7234 ;; This function uses a non-reentrant model
  7235 ;;
  7236                           
  7237                           	psect	text21
  7238  0140F8                     __ptext21:
  7239                           	opt stack 0
  7240  0140F8                     ___awdiv:
  7241                           	opt stack 19
  7242                           
  7243                           ; BSR set to: 0
  7244                           ;incstack = 0
  7245  0140F8  0E00               	movlw	0
  7246  0140FA  0100               	movlb	0	; () banked
  7247  0140FC  6F65               	movwf	___awdiv@sign& (0+255),b
  7248                           
  7249                           ; BSR set to: 0
  7250  0140FE  0100               	movlb	0	; () banked
  7251  014100  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  7252  014102  D008               	goto	l2604
  7253                           
  7254                           ; BSR set to: 0
  7255  014104  0100               	movlb	0	; () banked
  7256  014106  6D62               	negf	___awdiv@divisor& (0+255),b
  7257  014108  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
  7258  01410A  B0D8               	btfsc	status,0,c
  7259  01410C  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
  7260                           
  7261                           ; BSR set to: 0
  7262  01410E  0E01               	movlw	1
  7263  014110  0100               	movlb	0	; () banked
  7264  014112  6F65               	movwf	___awdiv@sign& (0+255),b
  7265  014114                     l2604:
  7266                           
  7267                           ; BSR set to: 0
  7268                           
  7269                           ; BSR set to: 0
  7270  014114  0100               	movlb	0	; () banked
  7271  014116  AF61               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  7272  014118  D008               	goto	l2605
  7273                           
  7274                           ; BSR set to: 0
  7275  01411A  0100               	movlb	0	; () banked
  7276  01411C  6D60               	negf	___awdiv@dividend& (0+255),b
  7277  01411E  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
  7278  014120  B0D8               	btfsc	status,0,c
  7279  014122  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
  7280                           
  7281                           ; BSR set to: 0
  7282  014124  0E01               	movlw	1
  7283  014126  0100               	movlb	0	; () banked
  7284  014128  1B65               	xorwf	___awdiv@sign& (0+255),f,b
  7285  01412A                     l2605:
  7286                           
  7287                           ; BSR set to: 0
  7288                           
  7289                           ; BSR set to: 0
  7290  01412A  0E00               	movlw	0
  7291  01412C  0100               	movlb	0	; () banked
  7292  01412E  6F67               	movwf	(___awdiv@quotient+1)& (0+255),b
  7293  014130  0E00               	movlw	0
  7294  014132  6F66               	movwf	___awdiv@quotient& (0+255),b
  7295                           
  7296                           ; BSR set to: 0
  7297  014134  0100               	movlb	0	; () banked
  7298  014136  5162               	movf	___awdiv@divisor& (0+255),w,b
  7299  014138  0100               	movlb	0	; () banked
  7300  01413A  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  7301  01413C  B4D8               	btfsc	status,2,c
  7302  01413E  D02C               	goto	l2612
  7303                           
  7304                           ; BSR set to: 0
  7305  014140  0E01               	movlw	1
  7306  014142  0100               	movlb	0	; () banked
  7307  014144  6F64               	movwf	___awdiv@counter& (0+255),b
  7308  014146  D006               	goto	l2607
  7309  014148                     
  7310                           ; BSR set to: 0
  7311                           
  7312                           ; BSR set to: 0
  7313  014148  0100               	movlb	0	; () banked
  7314  01414A  90D8               	bcf	status,0,c
  7315  01414C  3762               	rlcf	___awdiv@divisor& (0+255),f,b
  7316  01414E  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  7317  014150  0100               	movlb	0	; () banked
  7318  014152  2B64               	incf	___awdiv@counter& (0+255),f,b
  7319  014154                     l2607:
  7320                           
  7321                           ; BSR set to: 0
  7322                           
  7323                           ; BSR set to: 0
  7324  014154  0100               	movlb	0	; () banked
  7325  014156  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  7326  014158  D7F7               	goto	l2608
  7327  01415A                     u9220:
  7328                           
  7329                           ; BSR set to: 0
  7330                           
  7331                           ; BSR set to: 0
  7332                           
  7333                           ; BSR set to: 0
  7334  01415A  0100               	movlb	0	; () banked
  7335  01415C  90D8               	bcf	status,0,c
  7336  01415E  3766               	rlcf	___awdiv@quotient& (0+255),f,b
  7337  014160  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  7338                           
  7339                           ; BSR set to: 0
  7340  014162  0100               	movlb	0	; () banked
  7341  014164  5162               	movf	___awdiv@divisor& (0+255),w,b
  7342  014166  0100               	movlb	0	; () banked
  7343  014168  5D60               	subwf	___awdiv@dividend& (0+255),w,b
  7344  01416A  0100               	movlb	0	; () banked
  7345  01416C  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  7346  01416E  0100               	movlb	0	; () banked
  7347  014170  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  7348  014172  A0D8               	btfss	status,0,c
  7349  014174  D00A               	goto	l2611
  7350                           
  7351                           ; BSR set to: 0
  7352  014176  0100               	movlb	0	; () banked
  7353  014178  5162               	movf	___awdiv@divisor& (0+255),w,b
  7354  01417A  0100               	movlb	0	; () banked
  7355  01417C  5F60               	subwf	___awdiv@dividend& (0+255),f,b
  7356  01417E  0100               	movlb	0	; () banked
  7357  014180  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  7358  014182  0100               	movlb	0	; () banked
  7359  014184  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  7360                           
  7361                           ; BSR set to: 0
  7362  014186  0100               	movlb	0	; () banked
  7363  014188  8166               	bsf	___awdiv@quotient& (0+255),0,b
  7364  01418A                     l2611:
  7365                           
  7366                           ; BSR set to: 0
  7367                           
  7368                           ; BSR set to: 0
  7369  01418A  0100               	movlb	0	; () banked
  7370  01418C  90D8               	bcf	status,0,c
  7371  01418E  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  7372  014190  3362               	rrcf	___awdiv@divisor& (0+255),f,b
  7373                           
  7374                           ; BSR set to: 0
  7375  014192  0100               	movlb	0	; () banked
  7376  014194  2F64               	decfsz	___awdiv@counter& (0+255),f,b
  7377  014196  D7E1               	goto	u9220
  7378  014198                     l2612:
  7379                           
  7380                           ; BSR set to: 0
  7381                           
  7382                           ; BSR set to: 0
  7383                           
  7384                           ; BSR set to: 0
  7385  014198  0100               	movlb	0	; () banked
  7386  01419A  5165               	movf	___awdiv@sign& (0+255),w,b
  7387  01419C  0100               	movlb	0	; () banked
  7388  01419E  B4D8               	btfsc	status,2,c
  7389  0141A0  D005               	goto	l2613
  7390                           
  7391                           ; BSR set to: 0
  7392  0141A2  0100               	movlb	0	; () banked
  7393  0141A4  6D66               	negf	___awdiv@quotient& (0+255),b
  7394  0141A6  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
  7395  0141A8  B0D8               	btfsc	status,0,c
  7396  0141AA  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
  7397  0141AC                     l2613:
  7398                           
  7399                           ; BSR set to: 0
  7400                           
  7401                           ; BSR set to: 0
  7402  0141AC  C066  F060         	movff	___awdiv@quotient,?___awdiv
  7403  0141B0  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
  7404  0141B4  0012               	return	
  7405  0141B6                     __end_of___awdiv:
  7406                           	opt stack 0
  7407                           tblptru	equ	0xFF8
  7408                           tblptrh	equ	0xFF7
  7409                           tblptrl	equ	0xFF6
  7410                           tablat	equ	0xFF5
  7411                           prodh	equ	0xFF4
  7412                           prodl	equ	0xFF3
  7413                           postinc0	equ	0xFEE
  7414                           wreg	equ	0xFE8
  7415                           postdec1	equ	0xFE5
  7416                           fsr1h	equ	0xFE2
  7417                           fsr1l	equ	0xFE1
  7418                           indf2	equ	0xFDF
  7419                           postinc2	equ	0xFDE
  7420                           postdec2	equ	0xFDD
  7421                           fsr2h	equ	0xFDA
  7422                           fsr2l	equ	0xFD9
  7423                           status	equ	0xFD8
  7424                           
  7425 ;; *************** function _Console_IncrementCursor *****************
  7426 ;; Defined at:
  7427 ;;		line 243 in file "Library/Console.c"
  7428 ;; Parameters:    Size  Location     Type
  7429 ;;		None
  7430 ;; Auto vars:     Size  Location     Type
  7431 ;;		None
  7432 ;; Return value:  Size  Location     Type
  7433 ;;                  1    wreg      unsigned char 
  7434 ;; Registers used:
  7435 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7436 ;; Tracked objects:
  7437 ;;		On entry : 0/0
  7438 ;;		On exit  : 0/0
  7439 ;;		Unchanged: 0/0
  7440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7443 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7444 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7445 ;;Total ram usage:        2 bytes
  7446 ;; Hardware stack levels used:    1
  7447 ;; Hardware stack levels required when called:    8
  7448 ;; This function calls:
  7449 ;;		_Console_FormFeed
  7450 ;;		_Console_NewLine
  7451 ;; This function is called by:
  7452 ;;		_Console_Tab
  7453 ;;		_Console_PrintChar
  7454 ;; This function uses a non-reentrant model
  7455 ;;
  7456                           
  7457                           	psect	text22
  7458  0156B4                     __ptext22:
  7459                           	opt stack 0
  7460  0156B4                     _Console_IncrementCursor:
  7461                           	opt stack 18
  7462                           
  7463                           ;Console.c: 246: lBufferX += 1;
  7464                           
  7465                           ; BSR set to: 0
  7466                           ;incstack = 0
  7467  0156B4  0100               	movlb	0	; () banked
  7468  0156B6  2BE8               	incf	_lBufferX& (0+255),f,b
  7469                           
  7470                           ; BSR set to: 0
  7471                           ;Console.c: 248: gCursor.x += 6;
  7472  0156B8  0E06               	movlw	6
  7473  0156BA  2647               	addwf	_gCursor,f,c
  7474  0156BC  0E00               	movlw	0
  7475  0156BE  2248               	addwfc	_gCursor+1,f,c
  7476                           
  7477                           ; BSR set to: 0
  7478                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
  7479  0156C0  0E06               	movlw	6
  7480  0156C2  2447               	addwf	_gCursor,w,c
  7481  0156C4  0100               	movlb	0	; () banked
  7482  0156C6  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
  7483  0156C8  0E00               	movlw	0
  7484  0156CA  2048               	addwfc	_gCursor+1,w,c
  7485  0156CC  0100               	movlb	0	; () banked
  7486  0156CE  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  7487  0156D0  0100               	movlb	0	; () banked
  7488  0156D2  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  7489  0156D4  D009               	goto	l1004
  7490  0156D6  0100               	movlb	0	; () banked
  7491  0156D8  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  7492  0156DA  E104               	bnz	u9060
  7493  0156DC  0E80               	movlw	128
  7494  0156DE  0100               	movlb	0	; () banked
  7495  0156E0  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
  7496  0156E2  B0D8               	btfsc	status,0,c
  7497  0156E4                     u9060:
  7498                           
  7499                           ; BSR set to: 0
  7500                           ;Console.c: 250: Console_NewLine();
  7501  0156E4  EC3D  F0A5         	call	_Console_NewLine	;wreg free
  7502  0156E8                     l1004:
  7503                           
  7504                           ;Console.c: 251: if (gCursor.y + 8>= 128)
  7505  0156E8  0E08               	movlw	8
  7506  0156EA  2449               	addwf	_gCursor+2,w,c
  7507  0156EC  0100               	movlb	0	; () banked
  7508  0156EE  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
  7509  0156F0  0E00               	movlw	0
  7510  0156F2  204A               	addwfc	_gCursor+3,w,c
  7511  0156F4  0100               	movlb	0	; () banked
  7512  0156F6  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  7513  0156F8  0100               	movlb	0	; () banked
  7514  0156FA  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  7515  0156FC  D00C               	goto	l1005
  7516  0156FE  0100               	movlb	0	; () banked
  7517  015700  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  7518  015702  E105               	bnz	u9070
  7519  015704  0E80               	movlw	128
  7520  015706  0100               	movlb	0	; () banked
  7521  015708  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
  7522  01570A  A0D8               	btfss	status,0,c
  7523  01570C  D004               	goto	l1005
  7524  01570E                     u9070:
  7525                           
  7526                           ; BSR set to: 0
  7527                           ;Console.c: 252: {
  7528                           ;Console.c: 253: Console_FormFeed();
  7529  01570E  EC70  F0A6         	call	_Console_FormFeed	;wreg free
  7530                           
  7531                           ;Console.c: 254: return 1;
  7532  015712  0E01               	movlw	1
  7533  015714  0012               	return	
  7534  015716                     l1005:
  7535                           
  7536                           ;Console.c: 255: }
  7537                           ;Console.c: 257: return 0;
  7538  015716  0E00               	movlw	0
  7539  015718  0012               	return	
  7540  01571A                     __end_of_Console_IncrementCursor:
  7541                           	opt stack 0
  7542                           tblptru	equ	0xFF8
  7543                           tblptrh	equ	0xFF7
  7544                           tblptrl	equ	0xFF6
  7545                           tablat	equ	0xFF5
  7546                           prodh	equ	0xFF4
  7547                           prodl	equ	0xFF3
  7548                           postinc0	equ	0xFEE
  7549                           wreg	equ	0xFE8
  7550                           postdec1	equ	0xFE5
  7551                           fsr1h	equ	0xFE2
  7552                           fsr1l	equ	0xFE1
  7553                           indf2	equ	0xFDF
  7554                           postinc2	equ	0xFDE
  7555                           postdec2	equ	0xFDD
  7556                           fsr2h	equ	0xFDA
  7557                           fsr2l	equ	0xFD9
  7558                           status	equ	0xFD8
  7559                           
  7560 ;; *************** function _Console_NewLine *****************
  7561 ;; Defined at:
  7562 ;;		line 175 in file "Library/Console.c"
  7563 ;; Parameters:    Size  Location     Type
  7564 ;;		None
  7565 ;; Auto vars:     Size  Location     Type
  7566 ;;		None
  7567 ;; Return value:  Size  Location     Type
  7568 ;;                  1    wreg      void 
  7569 ;; Registers used:
  7570 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7571 ;; Tracked objects:
  7572 ;;		On entry : 0/0
  7573 ;;		On exit  : 0/0
  7574 ;;		Unchanged: 0/0
  7575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7578 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7579 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7580 ;;Total ram usage:        2 bytes
  7581 ;; Hardware stack levels used:    1
  7582 ;; Hardware stack levels required when called:    7
  7583 ;; This function calls:
  7584 ;;		Nothing
  7585 ;; This function is called by:
  7586 ;;		_Console_IncrementCursor
  7587 ;;		_Console_PrintChar
  7588 ;; This function uses a non-reentrant model
  7589 ;;
  7590                           
  7591                           	psect	text23
  7592  014A7A                     __ptext23:
  7593                           	opt stack 0
  7594  014A7A                     _Console_NewLine:
  7595                           	opt stack 18
  7596                           
  7597                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
  7598                           
  7599                           ;incstack = 0
  7600  014A7A  D03E               	goto	l983
  7601  014A7C                     
  7602                           ;Console.c: 179: {
  7603                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
  7604  014A7C  0100               	movlb	0	; () banked
  7605  014A7E  51E7               	movf	_lBufferY& (0+255),w,b
  7606  014A80  0D14               	mullw	20
  7607  014A82  0EC8               	movlw	low _lBuffer
  7608  014A84  0100               	movlb	0	; () banked
  7609  014A86  6F60               	movwf	??_Console_NewLine& (0+255),b
  7610  014A88  0E04               	movlw	high _lBuffer
  7611  014A8A  0100               	movlb	0	; () banked
  7612  014A8C  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
  7613  014A8E  50F3               	movf	prodl,w,c
  7614  014A90  0100               	movlb	0	; () banked
  7615  014A92  2760               	addwf	??_Console_NewLine& (0+255),f,b
  7616  014A94  50F4               	movf	prodh,w,c
  7617  014A96  0100               	movlb	0	; () banked
  7618  014A98  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  7619  014A9A  0100               	movlb	0	; () banked
  7620  014A9C  51E8               	movf	_lBufferX& (0+255),w,b
  7621  014A9E  0D01               	mullw	1
  7622  014AA0  50F3               	movf	prodl,w,c
  7623  014AA2  0100               	movlb	0	; () banked
  7624  014AA4  2560               	addwf	??_Console_NewLine& (0+255),w,b
  7625  014AA6  6ED9               	movwf	fsr2l,c
  7626  014AA8  50F4               	movf	prodh,w,c
  7627  014AAA  0100               	movlb	0	; () banked
  7628  014AAC  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  7629  014AAE  6EDA               	movwf	fsr2h,c
  7630  014AB0  50DF               	movf	indf2,w,c
  7631  014AB2  B4D8               	btfsc	status,2,c
  7632  014AB4  D01F               	goto	l985
  7633                           
  7634                           ; BSR set to: 0
  7635                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
  7636  014AB6  0E01               	movlw	1
  7637  014AB8  0100               	movlb	0	; () banked
  7638  014ABA  6FFF               	movwf	_change& (0+255),b
  7639                           
  7640                           ; BSR set to: 0
  7641  014ABC  0100               	movlb	0	; () banked
  7642  014ABE  51E7               	movf	_lBufferY& (0+255),w,b
  7643  014AC0  0D14               	mullw	20
  7644  014AC2  0EC8               	movlw	low _lBuffer
  7645  014AC4  0100               	movlb	0	; () banked
  7646  014AC6  6F60               	movwf	??_Console_NewLine& (0+255),b
  7647  014AC8  0E04               	movlw	high _lBuffer
  7648  014ACA  0100               	movlb	0	; () banked
  7649  014ACC  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
  7650  014ACE  50F3               	movf	prodl,w,c
  7651  014AD0  0100               	movlb	0	; () banked
  7652  014AD2  2760               	addwf	??_Console_NewLine& (0+255),f,b
  7653  014AD4  50F4               	movf	prodh,w,c
  7654  014AD6  0100               	movlb	0	; () banked
  7655  014AD8  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  7656  014ADA  0100               	movlb	0	; () banked
  7657  014ADC  51E8               	movf	_lBufferX& (0+255),w,b
  7658  014ADE  0D01               	mullw	1
  7659  014AE0  50F3               	movf	prodl,w,c
  7660  014AE2  0100               	movlb	0	; () banked
  7661  014AE4  2560               	addwf	??_Console_NewLine& (0+255),w,b
  7662  014AE6  6ED9               	movwf	fsr2l,c
  7663  014AE8  50F4               	movf	prodh,w,c
  7664  014AEA  0100               	movlb	0	; () banked
  7665  014AEC  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  7666  014AEE  6EDA               	movwf	fsr2h,c
  7667  014AF0  0E80               	movlw	128
  7668  014AF2  6EDF               	movwf	indf2,c
  7669  014AF4                     l985:
  7670                           
  7671                           ; BSR set to: 0
  7672                           ;Console.c: 182: lBufferX ++;
  7673                           
  7674                           ; BSR set to: 0
  7675  014AF4  0100               	movlb	0	; () banked
  7676  014AF6  2BE8               	incf	_lBufferX& (0+255),f,b
  7677  014AF8                     l983:
  7678                           
  7679                           ; BSR set to: 0
  7680  014AF8  0E13               	movlw	19
  7681  014AFA  0100               	movlb	0	; () banked
  7682  014AFC  65E8               	cpfsgt	_lBufferX& (0+255),b
  7683  014AFE  D7BE               	goto	l984
  7684                           
  7685                           ; BSR set to: 0
  7686                           ;Console.c: 183: }
  7687                           ;Console.c: 185: lBufferX = 0;
  7688                           
  7689                           ; BSR set to: 0
  7690  014B00  0E00               	movlw	0
  7691  014B02  0100               	movlb	0	; () banked
  7692  014B04  6FE8               	movwf	_lBufferX& (0+255),b
  7693                           
  7694                           ; BSR set to: 0
  7695                           ;Console.c: 186: lBufferY ++;
  7696  014B06  0100               	movlb	0	; () banked
  7697  014B08  2BE7               	incf	_lBufferY& (0+255),f,b
  7698                           
  7699                           ; BSR set to: 0
  7700                           ;Console.c: 188: gCursor.y += 8;
  7701  014B0A  0E08               	movlw	8
  7702  014B0C  2649               	addwf	_gCursor+2,f,c
  7703  014B0E  0E00               	movlw	0
  7704  014B10  224A               	addwfc	_gCursor+3,f,c
  7705                           
  7706                           ; BSR set to: 0
  7707                           ;Console.c: 189: gCursor.x = 6;
  7708  014B12  0E00               	movlw	0
  7709  014B14  6E48               	movwf	_gCursor+1,c
  7710  014B16  0E06               	movlw	6
  7711  014B18  6E47               	movwf	_gCursor,c
  7712                           
  7713                           ; BSR set to: 0
  7714  014B1A  0012               	return		;funcret
  7715  014B1C                     __end_of_Console_NewLine:
  7716                           	opt stack 0
  7717                           tblptru	equ	0xFF8
  7718                           tblptrh	equ	0xFF7
  7719                           tblptrl	equ	0xFF6
  7720                           tablat	equ	0xFF5
  7721                           prodh	equ	0xFF4
  7722                           prodl	equ	0xFF3
  7723                           postinc0	equ	0xFEE
  7724                           wreg	equ	0xFE8
  7725                           postdec1	equ	0xFE5
  7726                           fsr1h	equ	0xFE2
  7727                           fsr1l	equ	0xFE1
  7728                           indf2	equ	0xFDF
  7729                           postinc2	equ	0xFDE
  7730                           postdec2	equ	0xFDD
  7731                           fsr2h	equ	0xFDA
  7732                           fsr2l	equ	0xFD9
  7733                           status	equ	0xFD8
  7734                           
  7735 ;; *************** function _Console_FormFeed *****************
  7736 ;; Defined at:
  7737 ;;		line 192 in file "Library/Console.c"
  7738 ;; Parameters:    Size  Location     Type
  7739 ;;		None
  7740 ;; Auto vars:     Size  Location     Type
  7741 ;;  y               1    3[BANK0 ] unsigned char 
  7742 ;;  x               1    2[BANK0 ] unsigned char 
  7743 ;; Return value:  Size  Location     Type
  7744 ;;                  1    wreg      void 
  7745 ;; Registers used:
  7746 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7747 ;; Tracked objects:
  7748 ;;		On entry : 0/0
  7749 ;;		On exit  : 0/0
  7750 ;;		Unchanged: 0/0
  7751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7753 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7754 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7755 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7756 ;;Total ram usage:        4 bytes
  7757 ;; Hardware stack levels used:    1
  7758 ;; Hardware stack levels required when called:    7
  7759 ;; This function calls:
  7760 ;;		Nothing
  7761 ;; This function is called by:
  7762 ;;		_Console_IncrementCursor
  7763 ;;		_Console_PrintChar
  7764 ;; This function uses a non-reentrant model
  7765 ;;
  7766                           
  7767                           	psect	text24
  7768  014CE0                     __ptext24:
  7769                           	opt stack 0
  7770  014CE0                     _Console_FormFeed:
  7771                           	opt stack 18
  7772                           
  7773                           ;Console.c: 195: lBufferX = 0;
  7774                           
  7775                           ; BSR set to: 0
  7776                           ;incstack = 0
  7777  014CE0  0E00               	movlw	0
  7778  014CE2  0100               	movlb	0	; () banked
  7779  014CE4  6FE8               	movwf	_lBufferX& (0+255),b
  7780                           
  7781                           ;Console.c: 196: lBufferY = 0;
  7782  014CE6  0E00               	movlw	0
  7783  014CE8  0100               	movlb	0	; () banked
  7784  014CEA  6FE7               	movwf	_lBufferY& (0+255),b
  7785                           
  7786                           ;Console.c: 197: UINT8 x, y;
  7787                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
  7788  014CEC  0E00               	movlw	0
  7789  014CEE  0100               	movlb	0	; () banked
  7790  014CF0  6F63               	movwf	Console_FormFeed@y& (0+255),b
  7791  014CF2                     l12178:
  7792                           
  7793                           ; BSR set to: 0
  7794  014CF2  0E0E               	movlw	14
  7795  014CF4  0100               	movlb	0	; () banked
  7796  014CF6  6563               	cpfsgt	Console_FormFeed@y& (0+255),b
  7797  014CF8  D001               	goto	l990
  7798  014CFA  D02D               	goto	u8860
  7799  014CFC                     l990:
  7800                           
  7801                           ; BSR set to: 0
  7802                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
  7803                           
  7804                           ; BSR set to: 0
  7805  014CFC  0E00               	movlw	0
  7806  014CFE  0100               	movlb	0	; () banked
  7807  014D00  6F62               	movwf	Console_FormFeed@x& (0+255),b
  7808  014D02                     l12184:
  7809                           
  7810                           ; BSR set to: 0
  7811  014D02  0E13               	movlw	19
  7812  014D04  0100               	movlb	0	; () banked
  7813  014D06  6562               	cpfsgt	Console_FormFeed@x& (0+255),b
  7814  014D08  D001               	goto	l992
  7815  014D0A  D022               	goto	u8850
  7816  014D0C                     l992:
  7817                           
  7818                           ; BSR set to: 0
  7819                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
  7820                           
  7821                           ; BSR set to: 0
  7822  014D0C  0E01               	movlw	1
  7823  014D0E  0100               	movlb	0	; () banked
  7824  014D10  6FFF               	movwf	_change& (0+255),b
  7825                           
  7826                           ; BSR set to: 0
  7827  014D12  0100               	movlb	0	; () banked
  7828  014D14  5163               	movf	Console_FormFeed@y& (0+255),w,b
  7829  014D16  0D14               	mullw	20
  7830  014D18  0EC8               	movlw	low _lBuffer
  7831  014D1A  0100               	movlb	0	; () banked
  7832  014D1C  6F60               	movwf	??_Console_FormFeed& (0+255),b
  7833  014D1E  0E04               	movlw	high _lBuffer
  7834  014D20  0100               	movlb	0	; () banked
  7835  014D22  6F61               	movwf	(??_Console_FormFeed+1)& (0+255),b
  7836  014D24  50F3               	movf	prodl,w,c
  7837  014D26  0100               	movlb	0	; () banked
  7838  014D28  2760               	addwf	??_Console_FormFeed& (0+255),f,b
  7839  014D2A  50F4               	movf	prodh,w,c
  7840  014D2C  0100               	movlb	0	; () banked
  7841  014D2E  2361               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
  7842  014D30  0100               	movlb	0	; () banked
  7843  014D32  5162               	movf	Console_FormFeed@x& (0+255),w,b
  7844  014D34  0D01               	mullw	1
  7845  014D36  50F3               	movf	prodl,w,c
  7846  014D38  0100               	movlb	0	; () banked
  7847  014D3A  2560               	addwf	??_Console_FormFeed& (0+255),w,b
  7848  014D3C  6ED9               	movwf	fsr2l,c
  7849  014D3E  50F4               	movf	prodh,w,c
  7850  014D40  0100               	movlb	0	; () banked
  7851  014D42  2161               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
  7852  014D44  6EDA               	movwf	fsr2h,c
  7853  014D46  0E80               	movlw	128
  7854  014D48  6EDF               	movwf	indf2,c
  7855                           
  7856                           ; BSR set to: 0
  7857  014D4A  0100               	movlb	0	; () banked
  7858  014D4C  2B62               	incf	Console_FormFeed@x& (0+255),f,b
  7859  014D4E  D7D9               	goto	l12184
  7860  014D50                     u8850:
  7861                           
  7862                           ; BSR set to: 0
  7863                           
  7864                           ; BSR set to: 0
  7865  014D50  0100               	movlb	0	; () banked
  7866  014D52  2B63               	incf	Console_FormFeed@y& (0+255),f,b
  7867  014D54  D7CE               	goto	l12178
  7868  014D56                     u8860:
  7869                           
  7870                           ; BSR set to: 0
  7871                           ;Console.c: 204: clearall = 1;
  7872                           
  7873                           ; BSR set to: 0
  7874  014D56  0E01               	movlw	1
  7875  014D58  0100               	movlb	0	; () banked
  7876  014D5A  6FE9               	movwf	_clearall& (0+255),b
  7877                           
  7878                           ;Console.c: 205: gCursor.x = 6;
  7879  014D5C  0E00               	movlw	0
  7880  014D5E  6E48               	movwf	_gCursor+1,c
  7881  014D60  0E06               	movlw	6
  7882  014D62  6E47               	movwf	_gCursor,c
  7883                           
  7884                           ;Console.c: 206: gCursor.y = 6;
  7885  014D64  0E00               	movlw	0
  7886  014D66  6E4A               	movwf	_gCursor+3,c
  7887  014D68  0E06               	movlw	6
  7888  014D6A  6E49               	movwf	_gCursor+2,c
  7889                           
  7890                           ; BSR set to: 0
  7891  014D6C  0012               	return		;funcret
  7892  014D6E                     __end_of_Console_FormFeed:
  7893                           	opt stack 0
  7894                           tblptru	equ	0xFF8
  7895                           tblptrh	equ	0xFF7
  7896                           tblptrl	equ	0xFF6
  7897                           tablat	equ	0xFF5
  7898                           prodh	equ	0xFF4
  7899                           prodl	equ	0xFF3
  7900                           postinc0	equ	0xFEE
  7901                           wreg	equ	0xFE8
  7902                           postdec1	equ	0xFE5
  7903                           fsr1h	equ	0xFE2
  7904                           fsr1l	equ	0xFE1
  7905                           indf2	equ	0xFDF
  7906                           postinc2	equ	0xFDE
  7907                           postdec2	equ	0xFDD
  7908                           fsr2h	equ	0xFDA
  7909                           fsr2l	equ	0xFD9
  7910                           status	equ	0xFD8
  7911                           
  7912 ;; *************** function _Console_ResetCursor *****************
  7913 ;; Defined at:
  7914 ;;		line 297 in file "Library/Console.c"
  7915 ;; Parameters:    Size  Location     Type
  7916 ;;		None
  7917 ;; Auto vars:     Size  Location     Type
  7918 ;;		None
  7919 ;; Return value:  Size  Location     Type
  7920 ;;                  1    wreg      void 
  7921 ;; Registers used:
  7922 ;;		wreg, status,2
  7923 ;; Tracked objects:
  7924 ;;		On entry : 0/0
  7925 ;;		On exit  : 0/0
  7926 ;;		Unchanged: 0/0
  7927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7931 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7932 ;;Total ram usage:        0 bytes
  7933 ;; Hardware stack levels used:    1
  7934 ;; Hardware stack levels required when called:    7
  7935 ;; This function calls:
  7936 ;;		Nothing
  7937 ;; This function is called by:
  7938 ;;		_Console_PrintChar
  7939 ;; This function uses a non-reentrant model
  7940 ;;
  7941                           
  7942                           	psect	text25
  7943  0162DE                     __ptext25:
  7944                           	opt stack 0
  7945  0162DE                     _Console_ResetCursor:
  7946                           	opt stack 20
  7947                           
  7948                           ;Console.c: 299: gCursor.x = 6;
  7949                           
  7950                           ; BSR set to: 0
  7951                           ;incstack = 0
  7952  0162DE  0E00               	movlw	0
  7953  0162E0  6E48               	movwf	_gCursor+1,c
  7954  0162E2  0E06               	movlw	6
  7955  0162E4  6E47               	movwf	_gCursor,c
  7956                           
  7957                           ;Console.c: 300: gCursor.y = 6;
  7958  0162E6  0E00               	movlw	0
  7959  0162E8  6E4A               	movwf	_gCursor+3,c
  7960  0162EA  0E06               	movlw	6
  7961  0162EC  6E49               	movwf	_gCursor+2,c
  7962                           
  7963                           ;Console.c: 303: lBufferX = 0;
  7964  0162EE  0E00               	movlw	0
  7965  0162F0  0100               	movlb	0	; () banked
  7966  0162F2  6FE8               	movwf	_lBufferX& (0+255),b
  7967                           
  7968                           ;Console.c: 304: lBufferY = 0;
  7969  0162F4  0E00               	movlw	0
  7970  0162F6  0100               	movlb	0	; () banked
  7971  0162F8  6FE7               	movwf	_lBufferY& (0+255),b
  7972                           
  7973                           ; BSR set to: 0
  7974  0162FA  0012               	return		;funcret
  7975  0162FC                     __end_of_Console_ResetCursor:
  7976                           	opt stack 0
  7977                           tblptru	equ	0xFF8
  7978                           tblptrh	equ	0xFF7
  7979                           tblptrl	equ	0xFF6
  7980                           tablat	equ	0xFF5
  7981                           prodh	equ	0xFF4
  7982                           prodl	equ	0xFF3
  7983                           postinc0	equ	0xFEE
  7984                           wreg	equ	0xFE8
  7985                           postdec1	equ	0xFE5
  7986                           fsr1h	equ	0xFE2
  7987                           fsr1l	equ	0xFE1
  7988                           indf2	equ	0xFDF
  7989                           postinc2	equ	0xFDE
  7990                           postdec2	equ	0xFDD
  7991                           fsr2h	equ	0xFDA
  7992                           fsr2l	equ	0xFD9
  7993                           status	equ	0xFD8
  7994                           
  7995 ;; *************** function _Console_Backspace *****************
  7996 ;; Defined at:
  7997 ;;		line 209 in file "Library/Console.c"
  7998 ;; Parameters:    Size  Location     Type
  7999 ;;		None
  8000 ;; Auto vars:     Size  Location     Type
  8001 ;;		None
  8002 ;; Return value:  Size  Location     Type
  8003 ;;                  1    wreg      void 
  8004 ;; Registers used:
  8005 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8006 ;; Tracked objects:
  8007 ;;		On entry : 0/0
  8008 ;;		On exit  : 0/0
  8009 ;;		Unchanged: 0/0
  8010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8014 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8015 ;;Total ram usage:        0 bytes
  8016 ;; Hardware stack levels used:    1
  8017 ;; Hardware stack levels required when called:    8
  8018 ;; This function calls:
  8019 ;;		_Console_ClearCursor
  8020 ;; This function is called by:
  8021 ;;		_Console_PrintChar
  8022 ;; This function uses a non-reentrant model
  8023 ;;
  8024                           
  8025                           	psect	text26
  8026  015842                     __ptext26:
  8027                           	opt stack 0
  8028  015842                     _Console_Backspace:
  8029                           	opt stack 19
  8030                           
  8031                           ;Console.c: 211: if (lBufferX > 0)
  8032                           
  8033                           ; BSR set to: 0
  8034                           ;incstack = 0
  8035  015842  0100               	movlb	0	; () banked
  8036  015844  51E8               	movf	_lBufferX& (0+255),w,b
  8037  015846  B4D8               	btfsc	status,2,c
  8038  015848  D007               	goto	l997
  8039                           
  8040                           ; BSR set to: 0
  8041                           ;Console.c: 212: {
  8042                           ;Console.c: 213: gCursor.x -= 6;
  8043  01584A  0EFA               	movlw	250
  8044  01584C  2647               	addwf	_gCursor,f,c
  8045  01584E  0EFF               	movlw	255
  8046  015850  2248               	addwfc	_gCursor+1,f,c
  8047                           
  8048                           ; BSR set to: 0
  8049                           ;Console.c: 216: lBufferX --;
  8050  015852  0100               	movlb	0	; () banked
  8051  015854  07E8               	decf	_lBufferX& (0+255),f,b
  8052                           
  8053                           ;Console.c: 218: }
  8054  015856  D020               	goto	l1000
  8055  015858                     l997:
  8056                           
  8057                           ; BSR set to: 0
  8058                           ;Console.c: 219: else if (lBufferY > 0)
  8059                           
  8060                           ; BSR set to: 0
  8061  015858  0100               	movlb	0	; () banked
  8062  01585A  51E7               	movf	_lBufferY& (0+255),w,b
  8063  01585C  B4D8               	btfsc	status,2,c
  8064  01585E  D00E               	goto	l999
  8065                           
  8066                           ; BSR set to: 0
  8067                           ;Console.c: 220: {
  8068                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
  8069  015860  0E00               	movlw	0
  8070  015862  6E48               	movwf	_gCursor+1,c
  8071  015864  0E72               	movlw	114
  8072  015866  6E47               	movwf	_gCursor,c
  8073                           
  8074                           ; BSR set to: 0
  8075                           ;Console.c: 222: gCursor.y -= 8;
  8076  015868  0EF8               	movlw	248
  8077  01586A  2649               	addwf	_gCursor+2,f,c
  8078  01586C  0EFF               	movlw	255
  8079  01586E  224A               	addwfc	_gCursor+3,f,c
  8080                           
  8081                           ; BSR set to: 0
  8082                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
  8083  015870  0E13               	movlw	19
  8084  015872  0100               	movlb	0	; () banked
  8085  015874  6FE8               	movwf	_lBufferX& (0+255),b
  8086                           
  8087                           ; BSR set to: 0
  8088                           ;Console.c: 226: lBufferY --;
  8089  015876  0100               	movlb	0	; () banked
  8090  015878  07E7               	decf	_lBufferY& (0+255),f,b
  8091                           
  8092                           ;Console.c: 228: }
  8093  01587A  D00E               	goto	l1000
  8094  01587C                     l999:
  8095                           
  8096                           ; BSR set to: 0
  8097                           ;Console.c: 229: else
  8098                           ;Console.c: 230: {
  8099                           ;Console.c: 231: gCursor.x = 6;
  8100                           
  8101                           ; BSR set to: 0
  8102  01587C  0E00               	movlw	0
  8103  01587E  6E48               	movwf	_gCursor+1,c
  8104  015880  0E06               	movlw	6
  8105  015882  6E47               	movwf	_gCursor,c
  8106                           
  8107                           ;Console.c: 232: gCursor.y = 6;
  8108  015884  0E00               	movlw	0
  8109  015886  6E4A               	movwf	_gCursor+3,c
  8110  015888  0E06               	movlw	6
  8111  01588A  6E49               	movwf	_gCursor+2,c
  8112                           
  8113                           ;Console.c: 235: lBufferX = 0;
  8114  01588C  0E00               	movlw	0
  8115  01588E  0100               	movlb	0	; () banked
  8116  015890  6FE8               	movwf	_lBufferX& (0+255),b
  8117                           
  8118                           ;Console.c: 236: lBufferY = 0;
  8119  015892  0E00               	movlw	0
  8120  015894  0100               	movlb	0	; () banked
  8121  015896  6FE7               	movwf	_lBufferY& (0+255),b
  8122  015898                     l1000:
  8123                           
  8124                           ; BSR set to: 0
  8125                           ;Console.c: 238: }
  8126                           ;Console.c: 240: Console_ClearCursor();
  8127                           
  8128                           ; BSR set to: 0
  8129                           
  8130                           ; BSR set to: 0
  8131  015898  ECD3  F0AE         	call	_Console_ClearCursor	;wreg free
  8132  01589C  0012               	return		;funcret
  8133  01589E                     __end_of_Console_Backspace:
  8134                           	opt stack 0
  8135                           tblptru	equ	0xFF8
  8136                           tblptrh	equ	0xFF7
  8137                           tblptrl	equ	0xFF6
  8138                           tablat	equ	0xFF5
  8139                           prodh	equ	0xFF4
  8140                           prodl	equ	0xFF3
  8141                           postinc0	equ	0xFEE
  8142                           wreg	equ	0xFE8
  8143                           postdec1	equ	0xFE5
  8144                           fsr1h	equ	0xFE2
  8145                           fsr1l	equ	0xFE1
  8146                           indf2	equ	0xFDF
  8147                           postinc2	equ	0xFDE
  8148                           postdec2	equ	0xFDD
  8149                           fsr2h	equ	0xFDA
  8150                           fsr2l	equ	0xFD9
  8151                           status	equ	0xFD8
  8152                           
  8153 ;; *************** function _Console_ClearCursor *****************
  8154 ;; Defined at:
  8155 ;;		line 308 in file "Library/Console.c"
  8156 ;; Parameters:    Size  Location     Type
  8157 ;;		None
  8158 ;; Auto vars:     Size  Location     Type
  8159 ;;		None
  8160 ;; Return value:  Size  Location     Type
  8161 ;;                  1    wreg      void 
  8162 ;; Registers used:
  8163 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8164 ;; Tracked objects:
  8165 ;;		On entry : 0/0
  8166 ;;		On exit  : 0/0
  8167 ;;		Unchanged: 0/0
  8168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8171 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8172 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8173 ;;Total ram usage:        2 bytes
  8174 ;; Hardware stack levels used:    1
  8175 ;; Hardware stack levels required when called:    7
  8176 ;; This function calls:
  8177 ;;		Nothing
  8178 ;; This function is called by:
  8179 ;;		_Console_Backspace
  8180 ;;		_Console_Tab
  8181 ;; This function uses a non-reentrant model
  8182 ;;
  8183                           
  8184                           	psect	text27
  8185  015DA6                     __ptext27:
  8186                           	opt stack 0
  8187  015DA6                     _Console_ClearCursor:
  8188                           	opt stack 19
  8189                           
  8190                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
  8191                           
  8192                           ;incstack = 0
  8193  015DA6  0E01               	movlw	1
  8194  015DA8  0100               	movlb	0	; () banked
  8195  015DAA  6FFF               	movwf	_change& (0+255),b
  8196                           
  8197                           ; BSR set to: 0
  8198  015DAC  0100               	movlb	0	; () banked
  8199  015DAE  51E7               	movf	_lBufferY& (0+255),w,b
  8200  015DB0  0D14               	mullw	20
  8201  015DB2  0EC8               	movlw	low _lBuffer
  8202  015DB4  0100               	movlb	0	; () banked
  8203  015DB6  6F60               	movwf	??_Console_ClearCursor& (0+255),b
  8204  015DB8  0E04               	movlw	high _lBuffer
  8205  015DBA  0100               	movlb	0	; () banked
  8206  015DBC  6F61               	movwf	(??_Console_ClearCursor+1)& (0+255),b
  8207  015DBE  50F3               	movf	prodl,w,c
  8208  015DC0  0100               	movlb	0	; () banked
  8209  015DC2  2760               	addwf	??_Console_ClearCursor& (0+255),f,b
  8210  015DC4  50F4               	movf	prodh,w,c
  8211  015DC6  0100               	movlb	0	; () banked
  8212  015DC8  2361               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
  8213  015DCA  0100               	movlb	0	; () banked
  8214  015DCC  51E8               	movf	_lBufferX& (0+255),w,b
  8215  015DCE  0D01               	mullw	1
  8216  015DD0  50F3               	movf	prodl,w,c
  8217  015DD2  0100               	movlb	0	; () banked
  8218  015DD4  2560               	addwf	??_Console_ClearCursor& (0+255),w,b
  8219  015DD6  6ED9               	movwf	fsr2l,c
  8220  015DD8  50F4               	movf	prodh,w,c
  8221  015DDA  0100               	movlb	0	; () banked
  8222  015DDC  2161               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
  8223  015DDE  6EDA               	movwf	fsr2h,c
  8224  015DE0  0E80               	movlw	128
  8225  015DE2  6EDF               	movwf	indf2,c
  8226                           
  8227                           ; BSR set to: 0
  8228  015DE4  0012               	return		;funcret
  8229  015DE6                     __end_of_Console_ClearCursor:
  8230                           	opt stack 0
  8231                           tblptru	equ	0xFF8
  8232                           tblptrh	equ	0xFF7
  8233                           tblptrl	equ	0xFF6
  8234                           tablat	equ	0xFF5
  8235                           prodh	equ	0xFF4
  8236                           prodl	equ	0xFF3
  8237                           postinc0	equ	0xFEE
  8238                           wreg	equ	0xFE8
  8239                           postdec1	equ	0xFE5
  8240                           fsr1h	equ	0xFE2
  8241                           fsr1l	equ	0xFE1
  8242                           indf2	equ	0xFDF
  8243                           postinc2	equ	0xFDE
  8244                           postdec2	equ	0xFDD
  8245                           fsr2h	equ	0xFDA
  8246                           fsr2l	equ	0xFD9
  8247                           status	equ	0xFD8
  8248                           
  8249 ;; *************** function _irobot_stop_motion *****************
  8250 ;; Defined at:
  8251 ;;		line 298 in file "Library/iRobotSerial.c"
  8252 ;; Parameters:    Size  Location     Type
  8253 ;;  isScript        1    wreg     unsigned char 
  8254 ;; Auto vars:     Size  Location     Type
  8255 ;;  isScript        1   25[BANK0 ] unsigned char 
  8256 ;; Return value:  Size  Location     Type
  8257 ;;                  1    wreg      void 
  8258 ;; Registers used:
  8259 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8260 ;; Tracked objects:
  8261 ;;		On entry : 0/0
  8262 ;;		On exit  : 0/0
  8263 ;;		Unchanged: 0/0
  8264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8266 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8268 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8269 ;;Total ram usage:        1 bytes
  8270 ;; Hardware stack levels used:    1
  8271 ;; Hardware stack levels required when called:    9
  8272 ;; This function calls:
  8273 ;;		_irobot_move
  8274 ;; This function is called by:
  8275 ;;		_irobot_rotate
  8276 ;;		_irobot_rotate_to
  8277 ;;		_mode1
  8278 ;;		_mode2
  8279 ;;		_mode4
  8280 ;;		_irobot_move_to_simple
  8281 ;; This function uses a non-reentrant model
  8282 ;;
  8283                           
  8284                           	psect	text28
  8285  015C4E                     __ptext28:
  8286                           	opt stack 0
  8287  015C4E                     _irobot_stop_motion:
  8288                           	opt stack 20
  8289                           
  8290                           ; BSR set to: 0
  8291                           ;incstack = 0
  8292                           ;irobot_stop_motion@isScript stored from wreg
  8293  015C4E  0100               	movlb	0	; () banked
  8294  015C50  6F79               	movwf	irobot_stop_motion@isScript& (0+255),b
  8295                           
  8296                           ;iRobotSerial.c: 299: (isScript) ? irobot_move(1,0,0) : irobot_move(0,0,0);
  8297  015C52  0100               	movlb	0	; () banked
  8298  015C54  5179               	movf	irobot_stop_motion@isScript& (0+255),w,b
  8299  015C56  0100               	movlb	0	; () banked
  8300  015C58  B4D8               	btfsc	status,2,c
  8301  015C5A  D00E               	goto	l2168
  8302                           
  8303                           ; BSR set to: 0
  8304  015C5C  0E00               	movlw	0
  8305  015C5E  0100               	movlb	0	; () banked
  8306  015C60  6F71               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  8307  015C62  0E00               	movlw	0
  8308  015C64  6F70               	movwf	irobot_move@moveSpeed& (0+255),b
  8309  015C66  0E00               	movlw	0
  8310  015C68  0100               	movlb	0	; () banked
  8311  015C6A  6F73               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  8312  015C6C  0E00               	movlw	0
  8313  015C6E  6F72               	movwf	irobot_move@moveTurnRadius& (0+255),b
  8314  015C70  0E01               	movlw	1
  8315  015C72  ECF1  F0A1         	call	_irobot_move
  8316  015C76  0012               	return	
  8317  015C78                     l2168:
  8318  015C78  0E00               	movlw	0
  8319  015C7A  0100               	movlb	0	; () banked
  8320  015C7C  6F71               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  8321  015C7E  0E00               	movlw	0
  8322  015C80  6F70               	movwf	irobot_move@moveSpeed& (0+255),b
  8323  015C82  0E00               	movlw	0
  8324  015C84  0100               	movlb	0	; () banked
  8325  015C86  6F73               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  8326  015C88  0E00               	movlw	0
  8327  015C8A  6F72               	movwf	irobot_move@moveTurnRadius& (0+255),b
  8328  015C8C  0E00               	movlw	0
  8329  015C8E  ECF1  F0A1         	call	_irobot_move
  8330  015C92  0012               	return	
  8331  015C94                     __end_of_irobot_stop_motion:
  8332                           	opt stack 0
  8333                           tblptru	equ	0xFF8
  8334                           tblptrh	equ	0xFF7
  8335                           tblptrl	equ	0xFF6
  8336                           tablat	equ	0xFF5
  8337                           prodh	equ	0xFF4
  8338                           prodl	equ	0xFF3
  8339                           postinc0	equ	0xFEE
  8340                           wreg	equ	0xFE8
  8341                           postdec1	equ	0xFE5
  8342                           fsr1h	equ	0xFE2
  8343                           fsr1l	equ	0xFE1
  8344                           indf2	equ	0xFDF
  8345                           postinc2	equ	0xFDE
  8346                           postdec2	equ	0xFDD
  8347                           fsr2h	equ	0xFDA
  8348                           fsr2l	equ	0xFD9
  8349                           status	equ	0xFD8
  8350                           
  8351 ;; *************** function _irobot_move *****************
  8352 ;; Defined at:
  8353 ;;		line 220 in file "Library/iRobotSerial.c"
  8354 ;; Parameters:    Size  Location     Type
  8355 ;;  isScript        1    wreg     unsigned char 
  8356 ;;  moveSpeed       2   16[BANK0 ] short 
  8357 ;;  moveTurnRadi    2   18[BANK0 ] short 
  8358 ;; Auto vars:     Size  Location     Type
  8359 ;;  isScript        1   24[BANK0 ] unsigned char 
  8360 ;; Return value:  Size  Location     Type
  8361 ;;                  1    wreg      void 
  8362 ;; Registers used:
  8363 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8364 ;; Tracked objects:
  8365 ;;		On entry : 0/0
  8366 ;;		On exit  : 0/0
  8367 ;;		Unchanged: 0/0
  8368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8369 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8370 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8371 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8372 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8373 ;;Total ram usage:        9 bytes
  8374 ;; Hardware stack levels used:    1
  8375 ;; Hardware stack levels required when called:    8
  8376 ;; This function calls:
  8377 ;;		_eusart_putch
  8378 ;;		_load_iRScriptStack
  8379 ;;		_twos_complement_of
  8380 ;; This function is called by:
  8381 ;;		_irobot_rotate
  8382 ;;		_irobot_stop_motion
  8383 ;;		_irobot_move_straight
  8384 ;;		_irobot_move_to_simple
  8385 ;; This function uses a non-reentrant model
  8386 ;;
  8387                           
  8388                           	psect	text29
  8389  0143E2                     __ptext29:
  8390                           	opt stack 0
  8391  0143E2                     _irobot_move:
  8392                           	opt stack 20
  8393                           
  8394                           ;incstack = 0
  8395                           ;irobot_move@isScript stored from wreg
  8396  0143E2  0100               	movlb	0	; () banked
  8397  0143E4  6F78               	movwf	irobot_move@isScript& (0+255),b
  8398                           
  8399                           ;iRobotSerial.c: 221: moveSpeed = twos_complement_of(moveSpeed);
  8400  0143E6  C070  F060         	movff	irobot_move@moveSpeed,twos_complement_of@complementValue
  8401  0143EA  C071  F061         	movff	irobot_move@moveSpeed+1,twos_complement_of@complementValue+1
  8402  0143EE  EC90  F0AE         	call	_twos_complement_of	;wreg free
  8403  0143F2  C060  F070         	movff	?_twos_complement_of,irobot_move@moveSpeed
  8404  0143F6  C061  F071         	movff	?_twos_complement_of+1,irobot_move@moveSpeed+1
  8405                           
  8406                           ;iRobotSerial.c: 222: moveTurnRadius = twos_complement_of(moveTurnRadius);
  8407  0143FA  C072  F060         	movff	irobot_move@moveTurnRadius,twos_complement_of@complementValue
  8408  0143FE  C073  F061         	movff	irobot_move@moveTurnRadius+1,twos_complement_of@complementValue+1
  8409  014402  EC90  F0AE         	call	_twos_complement_of	;wreg free
  8410  014406  C060  F072         	movff	?_twos_complement_of,irobot_move@moveTurnRadius
  8411  01440A  C061  F073         	movff	?_twos_complement_of+1,irobot_move@moveTurnRadius+1
  8412                           
  8413                           ;iRobotSerial.c: 224: if (isScript) {
  8414  01440E  0100               	movlb	0	; () banked
  8415  014410  5178               	movf	irobot_move@isScript& (0+255),w,b
  8416  014412  0100               	movlb	0	; () banked
  8417  014414  B4D8               	btfsc	status,2,c
  8418  014416  D029               	goto	l2139
  8419                           
  8420                           ; BSR set to: 0
  8421                           ;iRobotSerial.c: 225: load_iRScriptStack(5, iR_DRIVE,
  8422                           ;iRobotSerial.c: 226: (((moveSpeed)>>8) & 0xFF), ((moveSpeed) & 0xFF),
  8423                           ;iRobotSerial.c: 227: (((moveTurnRadius)>>8) & 0xFF), ((moveTurnRadius) & 0xFF));
  8424  014418  0E00               	movlw	0
  8425  01441A  0100               	movlb	0	; () banked
  8426  01441C  6F61               	movwf	(?_load_iRScriptStack+1)& (0+255),b
  8427  01441E  0E89               	movlw	137
  8428  014420  6F60               	movwf	?_load_iRScriptStack& (0+255),b
  8429  014422  C071  F074         	movff	irobot_move@moveSpeed+1,??_irobot_move
  8430  014426  0100               	movlb	0	; () banked
  8431  014428  6B75               	clrf	(??_irobot_move+1)& (0+255),b
  8432  01442A  BF74               	btfsc	??_irobot_move& (0+255),7,b
  8433  01442C  6975               	setf	(??_irobot_move+1)& (0+255),b
  8434  01442E  0100               	movlb	0	; () banked
  8435  014430  5174               	movf	??_irobot_move& (0+255),w,b
  8436  014432  0100               	movlb	0	; () banked
  8437  014434  6F62               	movwf	(?_load_iRScriptStack+2)& (0+255),b
  8438  014436  6B63               	clrf	(?_load_iRScriptStack+3)& (0+255),b
  8439  014438  0100               	movlb	0	; () banked
  8440  01443A  5170               	movf	irobot_move@moveSpeed& (0+255),w,b
  8441  01443C  0100               	movlb	0	; () banked
  8442  01443E  6F64               	movwf	(?_load_iRScriptStack+4)& (0+255),b
  8443  014440  6B65               	clrf	(?_load_iRScriptStack+5)& (0+255),b
  8444  014442  C073  F076         	movff	irobot_move@moveTurnRadius+1,??_irobot_move+2
  8445  014446  0100               	movlb	0	; () banked
  8446  014448  6B77               	clrf	(??_irobot_move+3)& (0+255),b
  8447  01444A  BF76               	btfsc	(??_irobot_move+2)& (0+255),7,b
  8448  01444C  6977               	setf	(??_irobot_move+3)& (0+255),b
  8449  01444E  0100               	movlb	0	; () banked
  8450  014450  5176               	movf	(??_irobot_move+2)& (0+255),w,b
  8451  014452  0100               	movlb	0	; () banked
  8452  014454  6F66               	movwf	(?_load_iRScriptStack+6)& (0+255),b
  8453  014456  6B67               	clrf	(?_load_iRScriptStack+7)& (0+255),b
  8454  014458  0100               	movlb	0	; () banked
  8455  01445A  5172               	movf	irobot_move@moveTurnRadius& (0+255),w,b
  8456  01445C  0100               	movlb	0	; () banked
  8457  01445E  6F68               	movwf	(?_load_iRScriptStack+8)& (0+255),b
  8458  014460  6B69               	clrf	(?_load_iRScriptStack+9)& (0+255),b
  8459  014462  0E05               	movlw	5
  8460  014464  EC88  F0AA         	call	_load_iRScriptStack
  8461                           
  8462                           ;iRobotSerial.c: 228: }
  8463  014468  0012               	return	
  8464  01446A                     l2139:
  8465                           
  8466                           ;iRobotSerial.c: 229: else{
  8467                           ;iRobotSerial.c: 230: eusart_putch(iR_DRIVE);
  8468  01446A  0E89               	movlw	137
  8469  01446C  ECC8  F0B2         	call	_eusart_putch
  8470                           
  8471                           ;iRobotSerial.c: 231: eusart_putch((((moveSpeed)>>8) & 0xFF));
  8472  014470  0100               	movlb	0	; () banked
  8473  014472  5171               	movf	(irobot_move@moveSpeed+1)& (0+255),w,b
  8474  014474  ECC8  F0B2         	call	_eusart_putch
  8475                           
  8476                           ;iRobotSerial.c: 232: eusart_putch(((moveSpeed) & 0xFF));
  8477  014478  0100               	movlb	0	; () banked
  8478  01447A  5170               	movf	irobot_move@moveSpeed& (0+255),w,b
  8479  01447C  ECC8  F0B2         	call	_eusart_putch
  8480                           
  8481                           ;iRobotSerial.c: 233: eusart_putch((((moveTurnRadius)>>8) & 0xFF));
  8482  014480  0100               	movlb	0	; () banked
  8483  014482  5173               	movf	(irobot_move@moveTurnRadius+1)& (0+255),w,b
  8484  014484  ECC8  F0B2         	call	_eusart_putch
  8485                           
  8486                           ;iRobotSerial.c: 234: eusart_putch(((moveTurnRadius) & 0xFF));
  8487  014488  0100               	movlb	0	; () banked
  8488  01448A  5172               	movf	irobot_move@moveTurnRadius& (0+255),w,b
  8489  01448C  ECC8  F0B2         	call	_eusart_putch
  8490  014490  0012               	return	
  8491  014492                     __end_of_irobot_move:
  8492                           	opt stack 0
  8493                           tblptru	equ	0xFF8
  8494                           tblptrh	equ	0xFF7
  8495                           tblptrl	equ	0xFF6
  8496                           tablat	equ	0xFF5
  8497                           prodh	equ	0xFF4
  8498                           prodl	equ	0xFF3
  8499                           postinc0	equ	0xFEE
  8500                           wreg	equ	0xFE8
  8501                           postdec1	equ	0xFE5
  8502                           fsr1h	equ	0xFE2
  8503                           fsr1l	equ	0xFE1
  8504                           indf2	equ	0xFDF
  8505                           postinc2	equ	0xFDE
  8506                           postdec2	equ	0xFDD
  8507                           fsr2h	equ	0xFDA
  8508                           fsr2l	equ	0xFD9
  8509                           status	equ	0xFD8
  8510                           
  8511 ;; *************** function _twos_complement_of *****************
  8512 ;; Defined at:
  8513 ;;		line 167 in file "Library/iRobotSerial.c"
  8514 ;; Parameters:    Size  Location     Type
  8515 ;;  complementVa    2    0[BANK0 ] short 
  8516 ;; Auto vars:     Size  Location     Type
  8517 ;;		None
  8518 ;; Return value:  Size  Location     Type
  8519 ;;                  2    0[BANK0 ] unsigned short 
  8520 ;; Registers used:
  8521 ;;		wreg, status,2, status,0
  8522 ;; Tracked objects:
  8523 ;;		On entry : 0/0
  8524 ;;		On exit  : 0/0
  8525 ;;		Unchanged: 0/0
  8526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8527 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8530 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8531 ;;Total ram usage:        2 bytes
  8532 ;; Hardware stack levels used:    1
  8533 ;; Hardware stack levels required when called:    7
  8534 ;; This function calls:
  8535 ;;		Nothing
  8536 ;; This function is called by:
  8537 ;;		_irobot_angle_wait
  8538 ;;		_irobot_move
  8539 ;;		_irobot_distance_wait
  8540 ;; This function uses a non-reentrant model
  8541 ;;
  8542                           
  8543                           	psect	text30
  8544  015D20                     __ptext30:
  8545                           	opt stack 0
  8546  015D20                     _twos_complement_of:
  8547                           	opt stack 20
  8548                           
  8549                           ;iRobotSerial.c: 168: if (complementValue < 0) {
  8550                           
  8551                           ;incstack = 0
  8552  015D20  0100               	movlb	0	; () banked
  8553  015D22  AF61               	btfss	(twos_complement_of@complementValue+1)& (0+255),7,b
  8554  015D24  D01A               	goto	l2110
  8555                           
  8556                           ; BSR set to: 0
  8557                           ;iRobotSerial.c: 169: complementValue = ((complementValue) > 0 ? (complementValue) : -(c
      +                          omplementValue));
  8558  015D26  0100               	movlb	0	; () banked
  8559  015D28  BF61               	btfsc	(twos_complement_of@complementValue+1)& (0+255),7,b
  8560  015D2A  D007               	goto	u9170
  8561  015D2C  0100               	movlb	0	; () banked
  8562  015D2E  5161               	movf	(twos_complement_of@complementValue+1)& (0+255),w,b
  8563  015D30  E10A               	bnz	l2112
  8564  015D32  0100               	movlb	0	; () banked
  8565  015D34  0560               	decf	twos_complement_of@complementValue& (0+255),w,b
  8566  015D36  B0D8               	btfsc	status,0,c
  8567  015D38  D006               	goto	l2112
  8568  015D3A                     u9170:
  8569                           
  8570                           ; BSR set to: 0
  8571  015D3A  0100               	movlb	0	; () banked
  8572  015D3C  6D60               	negf	twos_complement_of@complementValue& (0+255),b
  8573  015D3E  1F61               	comf	(twos_complement_of@complementValue+1)& (0+255),f,b
  8574  015D40  B0D8               	btfsc	status,0,c
  8575  015D42  2B61               	incf	(twos_complement_of@complementValue+1)& (0+255),f,b
  8576  015D44  D004               	goto	l2114
  8577  015D46                     l2112:
  8578                           
  8579                           ; BSR set to: 0
  8580  015D46  C060  F060         	movff	twos_complement_of@complementValue,twos_complement_of@complementValue
  8581  015D4A  C061  F061         	movff	twos_complement_of@complementValue+1,twos_complement_of@complementValue+1
  8582  015D4E                     l2114:
  8583                           
  8584                           ; BSR set to: 0
  8585                           ;iRobotSerial.c: 170: complementValue = ~complementValue;
  8586                           
  8587                           ; BSR set to: 0
  8588  015D4E  0100               	movlb	0	; () banked
  8589  015D50  1F60               	comf	twos_complement_of@complementValue& (0+255),f,b
  8590  015D52  1F61               	comf	(twos_complement_of@complementValue+1)& (0+255),f,b
  8591                           
  8592                           ;iRobotSerial.c: 171: complementValue += 1;
  8593  015D54  0100               	movlb	0	; () banked
  8594  015D56  4B60               	infsnz	twos_complement_of@complementValue& (0+255),f,b
  8595  015D58  2B61               	incf	(twos_complement_of@complementValue+1)& (0+255),f,b
  8596  015D5A                     l2110:
  8597                           
  8598                           ; BSR set to: 0
  8599                           ;iRobotSerial.c: 172: }
  8600                           ;iRobotSerial.c: 173: return complementValue;
  8601                           
  8602                           ; BSR set to: 0
  8603  015D5A  C060  F060         	movff	twos_complement_of@complementValue,?_twos_complement_of
  8604  015D5E  C061  F061         	movff	twos_complement_of@complementValue+1,?_twos_complement_of+1
  8605  015D62  0012               	return	
  8606  015D64                     __end_of_twos_complement_of:
  8607                           	opt stack 0
  8608                           tblptru	equ	0xFF8
  8609                           tblptrh	equ	0xFF7
  8610                           tblptrl	equ	0xFF6
  8611                           tablat	equ	0xFF5
  8612                           prodh	equ	0xFF4
  8613                           prodl	equ	0xFF3
  8614                           postinc0	equ	0xFEE
  8615                           wreg	equ	0xFE8
  8616                           postdec1	equ	0xFE5
  8617                           fsr1h	equ	0xFE2
  8618                           fsr1l	equ	0xFE1
  8619                           indf2	equ	0xFDF
  8620                           postinc2	equ	0xFDE
  8621                           postdec2	equ	0xFDD
  8622                           fsr2h	equ	0xFDA
  8623                           fsr2l	equ	0xFD9
  8624                           status	equ	0xFD8
  8625                           
  8626 ;; *************** function _irobot_song_play *****************
  8627 ;; Defined at:
  8628 ;;		line 274 in file "Library/iRobotSerial.c"
  8629 ;; Parameters:    Size  Location     Type
  8630 ;;  songNumber      1    wreg     unsigned char 
  8631 ;; Auto vars:     Size  Location     Type
  8632 ;;  songNumber      1    1[BANK0 ] unsigned char 
  8633 ;; Return value:  Size  Location     Type
  8634 ;;                  1    wreg      void 
  8635 ;; Registers used:
  8636 ;;		wreg, status,2, cstack
  8637 ;; Tracked objects:
  8638 ;;		On entry : 0/0
  8639 ;;		On exit  : 0/0
  8640 ;;		Unchanged: 0/0
  8641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8643 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8645 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8646 ;;Total ram usage:        1 bytes
  8647 ;; Hardware stack levels used:    1
  8648 ;; Hardware stack levels required when called:    8
  8649 ;; This function calls:
  8650 ;;		_eusart_putch
  8651 ;; This function is called by:
  8652 ;;		_mode1
  8653 ;;		_mode2
  8654 ;;		_mode4
  8655 ;; This function uses a non-reentrant model
  8656 ;;
  8657                           
  8658                           	psect	text31
  8659  016516                     __ptext31:
  8660                           	opt stack 0
  8661  016516                     _irobot_song_play:
  8662                           	opt stack 21
  8663                           
  8664                           ; BSR set to: 0
  8665                           ;incstack = 0
  8666                           ;irobot_song_play@songNumber stored from wreg
  8667  016516  0100               	movlb	0	; () banked
  8668  016518  6F61               	movwf	irobot_song_play@songNumber& (0+255),b
  8669                           
  8670                           ;iRobotSerial.c: 275: eusart_putch(iR_SONG_PLAY);
  8671  01651A  0E8D               	movlw	141
  8672  01651C  ECC8  F0B2         	call	_eusart_putch
  8673                           
  8674                           ;iRobotSerial.c: 276: eusart_putch(songNumber);
  8675  016520  0100               	movlb	0	; () banked
  8676  016522  5161               	movf	irobot_song_play@songNumber& (0+255),w,b
  8677  016524  ECC8  F0B2         	call	_eusart_putch
  8678  016528  0012               	return		;funcret
  8679  01652A                     __end_of_irobot_song_play:
  8680                           	opt stack 0
  8681                           tblptru	equ	0xFF8
  8682                           tblptrh	equ	0xFF7
  8683                           tblptrl	equ	0xFF6
  8684                           tablat	equ	0xFF5
  8685                           prodh	equ	0xFF4
  8686                           prodl	equ	0xFF3
  8687                           postinc0	equ	0xFEE
  8688                           wreg	equ	0xFE8
  8689                           postdec1	equ	0xFE5
  8690                           fsr1h	equ	0xFE2
  8691                           fsr1l	equ	0xFE1
  8692                           indf2	equ	0xFDF
  8693                           postinc2	equ	0xFDE
  8694                           postdec2	equ	0xFDD
  8695                           fsr2h	equ	0xFDA
  8696                           fsr2l	equ	0xFD9
  8697                           status	equ	0xFD8
  8698                           
  8699 ;; *************** function ___fltol *****************
  8700 ;; Defined at:
  8701 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fltol.c"
  8702 ;; Parameters:    Size  Location     Type
  8703 ;;  f1              4   82[BANK0 ] void 
  8704 ;; Auto vars:     Size  Location     Type
  8705 ;;  exp1            1   87[BANK0 ] unsigned char 
  8706 ;;  sign1           1   86[BANK0 ] unsigned char 
  8707 ;; Return value:  Size  Location     Type
  8708 ;;                  4   82[BANK0 ] long 
  8709 ;; Registers used:
  8710 ;;		wreg, status,2, status,0
  8711 ;; Tracked objects:
  8712 ;;		On entry : 0/0
  8713 ;;		On exit  : 0/0
  8714 ;;		Unchanged: 0/0
  8715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8716 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8717 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8718 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8719 ;;      Totals:         0       6       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8720 ;;Total ram usage:       10 bytes
  8721 ;; Hardware stack levels used:    1
  8722 ;; Hardware stack levels required when called:    7
  8723 ;; This function calls:
  8724 ;;		Nothing
  8725 ;; This function is called by:
  8726 ;;		_mode1
  8727 ;;		_mode4
  8728 ;; This function uses a non-reentrant model
  8729 ;;
  8730                           
  8731                           	psect	text32
  8732  0136AC                     __ptext32:
  8733                           	opt stack 0
  8734  0136AC                     ___fltol:
  8735                           	opt stack 22
  8736                           
  8737                           ;incstack = 0
  8738  0136AC  0100               	movlb	0	; () banked
  8739  0136AE  35B4               	rlcf	(___fltol@f1+2)& (0+255),w,b
  8740  0136B0  35B5               	rlcf	(___fltol@f1+3)& (0+255),w,b
  8741  0136B2  0100               	movlb	0	; () banked
  8742  0136B4  6FB7               	movwf	___fltol@exp1& (0+255),b
  8743  0136B6  0100               	movlb	0	; () banked
  8744  0136B8  51B7               	movf	___fltol@exp1& (0+255),w,b
  8745  0136BA  A4D8               	btfss	status,2,c
  8746  0136BC  D00A               	goto	l2666
  8747                           
  8748                           ; BSR set to: 0
  8749  0136BE  0E00               	movlw	0
  8750  0136C0  0100               	movlb	0	; () banked
  8751  0136C2  6FB2               	movwf	?___fltol& (0+255),b
  8752  0136C4  0E00               	movlw	0
  8753  0136C6  6FB3               	movwf	(?___fltol+1)& (0+255),b
  8754  0136C8  0E00               	movlw	0
  8755  0136CA  6FB4               	movwf	(?___fltol+2)& (0+255),b
  8756  0136CC  0E00               	movlw	0
  8757  0136CE  6FB5               	movwf	(?___fltol+3)& (0+255),b
  8758                           
  8759                           ; BSR set to: 0
  8760  0136D0  0012               	return	
  8761  0136D2                     l2666:
  8762                           
  8763                           ; BSR set to: 0
  8764                           
  8765                           ; BSR set to: 0
  8766  0136D2  C0B2  F100         	movff	___fltol@f1,??___fltol
  8767  0136D6  C0B3  F101         	movff	___fltol@f1+1,??___fltol+1
  8768  0136DA  C0B4  F102         	movff	___fltol@f1+2,??___fltol+2
  8769  0136DE  C0B5  F103         	movff	___fltol@f1+3,??___fltol+3
  8770  0136E2  0E20               	movlw	32
  8771  0136E4  D006               	goto	u11210
  8772  0136E6                     u11215:
  8773  0136E6  0101               	movlb	1	; () banked
  8774  0136E8  90D8               	bcf	status,0,c
  8775  0136EA  3303               	rrcf	(??___fltol+3)& (0+255),f,b
  8776  0136EC  3302               	rrcf	(??___fltol+2)& (0+255),f,b
  8777  0136EE  3301               	rrcf	(??___fltol+1)& (0+255),f,b
  8778  0136F0  3300               	rrcf	??___fltol& (0+255),f,b
  8779  0136F2                     u11210:
  8780  0136F2  2EE8               	decfsz	wreg,f,c
  8781  0136F4  D7F8               	goto	u11215
  8782  0136F6  0101               	movlb	1	; () banked
  8783  0136F8  5100               	movf	??___fltol& (0+255),w,b
  8784  0136FA  0100               	movlb	0	; () banked
  8785  0136FC  6FB6               	movwf	___fltol@sign1& (0+255),b
  8786                           
  8787                           ; BSR set to: 0
  8788  0136FE  0100               	movlb	0	; () banked
  8789  013700  8FB4               	bsf	(___fltol@f1+2)& (0+255),7,b
  8790                           
  8791                           ; BSR set to: 0
  8792  013702  0EFF               	movlw	255
  8793  013704  0100               	movlb	0	; () banked
  8794  013706  17B2               	andwf	___fltol@f1& (0+255),f,b
  8795  013708  0EFF               	movlw	255
  8796  01370A  17B3               	andwf	(___fltol@f1+1)& (0+255),f,b
  8797  01370C  0EFF               	movlw	255
  8798  01370E  17B4               	andwf	(___fltol@f1+2)& (0+255),f,b
  8799  013710  0E00               	movlw	0
  8800  013712  17B5               	andwf	(___fltol@f1+3)& (0+255),f,b
  8801                           
  8802                           ; BSR set to: 0
  8803  013714  0E96               	movlw	150
  8804  013716  0100               	movlb	0	; () banked
  8805  013718  5FB7               	subwf	___fltol@exp1& (0+255),f,b
  8806                           
  8807                           ; BSR set to: 0
  8808  01371A  0100               	movlb	0	; () banked
  8809  01371C  AFB7               	btfss	___fltol@exp1& (0+255),7,b
  8810  01371E  D01A               	goto	l2668
  8811                           
  8812                           ; BSR set to: 0
  8813  013720  0100               	movlb	0	; () banked
  8814  013722  51B7               	movf	___fltol@exp1& (0+255),w,b
  8815  013724  0A80               	xorlw	128
  8816  013726  0F97               	addlw	151
  8817  013728  B0D8               	btfsc	status,0,c
  8818  01372A  D00A               	goto	l2669
  8819                           
  8820                           ; BSR set to: 0
  8821  01372C  0E00               	movlw	0
  8822  01372E  0100               	movlb	0	; () banked
  8823  013730  6FB2               	movwf	?___fltol& (0+255),b
  8824  013732  0E00               	movlw	0
  8825  013734  6FB3               	movwf	(?___fltol+1)& (0+255),b
  8826  013736  0E00               	movlw	0
  8827  013738  6FB4               	movwf	(?___fltol+2)& (0+255),b
  8828  01373A  0E00               	movlw	0
  8829  01373C  6FB5               	movwf	(?___fltol+3)& (0+255),b
  8830                           
  8831                           ; BSR set to: 0
  8832  01373E  0012               	return	
  8833  013740                     l2669:
  8834                           
  8835                           ; BSR set to: 0
  8836                           
  8837                           ; BSR set to: 0
  8838                           
  8839                           ; BSR set to: 0
  8840  013740  0100               	movlb	0	; () banked
  8841  013742  90D8               	bcf	status,0,c
  8842  013744  33B5               	rrcf	(___fltol@f1+3)& (0+255),f,b
  8843  013746  33B4               	rrcf	(___fltol@f1+2)& (0+255),f,b
  8844  013748  33B3               	rrcf	(___fltol@f1+1)& (0+255),f,b
  8845  01374A  33B2               	rrcf	___fltol@f1& (0+255),f,b
  8846                           
  8847                           ; BSR set to: 0
  8848  01374C  0100               	movlb	0	; () banked
  8849  01374E  3FB7               	incfsz	___fltol@exp1& (0+255),f,b
  8850  013750  D7F7               	goto	l2669
  8851                           
  8852                           ; BSR set to: 0
  8853  013752  D01B               	goto	u11250
  8854  013754                     l2668:
  8855                           
  8856                           ; BSR set to: 0
  8857                           
  8858                           ; BSR set to: 0
  8859  013754  0E1F               	movlw	31
  8860  013756  0100               	movlb	0	; () banked
  8861  013758  65B7               	cpfsgt	___fltol@exp1& (0+255),b
  8862  01375A  D012               	goto	l2674
  8863                           
  8864                           ; BSR set to: 0
  8865  01375C  0E00               	movlw	0
  8866  01375E  0100               	movlb	0	; () banked
  8867  013760  6FB2               	movwf	?___fltol& (0+255),b
  8868  013762  0E00               	movlw	0
  8869  013764  6FB3               	movwf	(?___fltol+1)& (0+255),b
  8870  013766  0E00               	movlw	0
  8871  013768  6FB4               	movwf	(?___fltol+2)& (0+255),b
  8872  01376A  0E00               	movlw	0
  8873  01376C  6FB5               	movwf	(?___fltol+3)& (0+255),b
  8874                           
  8875                           ; BSR set to: 0
  8876  01376E  0012               	return	
  8877  013770                     
  8878                           ; BSR set to: 0
  8879                           
  8880                           ; BSR set to: 0
  8881  013770  0100               	movlb	0	; () banked
  8882  013772  90D8               	bcf	status,0,c
  8883  013774  37B2               	rlcf	___fltol@f1& (0+255),f,b
  8884  013776  37B3               	rlcf	(___fltol@f1+1)& (0+255),f,b
  8885  013778  37B4               	rlcf	(___fltol@f1+2)& (0+255),f,b
  8886  01377A  37B5               	rlcf	(___fltol@f1+3)& (0+255),f,b
  8887  01377C  0100               	movlb	0	; () banked
  8888  01377E  07B7               	decf	___fltol@exp1& (0+255),f,b
  8889  013780                     l2674:
  8890                           
  8891                           ; BSR set to: 0
  8892                           
  8893                           ; BSR set to: 0
  8894  013780  0100               	movlb	0	; () banked
  8895  013782  51B7               	movf	___fltol@exp1& (0+255),w,b
  8896  013784  0100               	movlb	0	; () banked
  8897  013786  A4D8               	btfss	status,2,c
  8898  013788  D7F3               	goto	l2675
  8899  01378A                     u11250:
  8900                           
  8901                           ; BSR set to: 0
  8902                           
  8903                           ; BSR set to: 0
  8904                           
  8905                           ; BSR set to: 0
  8906  01378A  0100               	movlb	0	; () banked
  8907  01378C  51B6               	movf	___fltol@sign1& (0+255),w,b
  8908  01378E  0100               	movlb	0	; () banked
  8909  013790  B4D8               	btfsc	status,2,c
  8910  013792  D009               	goto	l2677
  8911                           
  8912                           ; BSR set to: 0
  8913  013794  0100               	movlb	0	; () banked
  8914  013796  1FB5               	comf	(___fltol@f1+3)& (0+255),f,b
  8915  013798  1FB4               	comf	(___fltol@f1+2)& (0+255),f,b
  8916  01379A  1FB3               	comf	(___fltol@f1+1)& (0+255),f,b
  8917  01379C  6DB2               	negf	___fltol@f1& (0+255),b
  8918  01379E  0E00               	movlw	0
  8919  0137A0  23B3               	addwfc	(___fltol@f1+1)& (0+255),f,b
  8920  0137A2  23B4               	addwfc	(___fltol@f1+2)& (0+255),f,b
  8921  0137A4  23B5               	addwfc	(___fltol@f1+3)& (0+255),f,b
  8922  0137A6                     l2677:
  8923                           
  8924                           ; BSR set to: 0
  8925                           
  8926                           ; BSR set to: 0
  8927  0137A6  C0B2  F0B2         	movff	___fltol@f1,?___fltol
  8928  0137AA  C0B3  F0B3         	movff	___fltol@f1+1,?___fltol+1
  8929  0137AE  C0B4  F0B4         	movff	___fltol@f1+2,?___fltol+2
  8930  0137B2  C0B5  F0B5         	movff	___fltol@f1+3,?___fltol+3
  8931  0137B6  0012               	return	
  8932  0137B8                     __end_of___fltol:
  8933                           	opt stack 0
  8934                           tblptru	equ	0xFF8
  8935                           tblptrh	equ	0xFF7
  8936                           tblptrl	equ	0xFF6
  8937                           tablat	equ	0xFF5
  8938                           prodh	equ	0xFF4
  8939                           prodl	equ	0xFF3
  8940                           postinc0	equ	0xFEE
  8941                           wreg	equ	0xFE8
  8942                           postdec1	equ	0xFE5
  8943                           fsr1h	equ	0xFE2
  8944                           fsr1l	equ	0xFE1
  8945                           indf2	equ	0xFDF
  8946                           postinc2	equ	0xFDE
  8947                           postdec2	equ	0xFDD
  8948                           fsr2h	equ	0xFDA
  8949                           fsr2l	equ	0xFD9
  8950                           status	equ	0xFD8
  8951                           
  8952 ;; *************** function _Motor_Speed *****************
  8953 ;; Defined at:
  8954 ;;		line 117 in file "Library/Motor.c"
  8955 ;; Parameters:    Size  Location     Type
  8956 ;;  pMotor          2   27[BANK0 ] PTR struct Motor
  8957 ;;		 -> Stepper(6), 
  8958 ;;  pFrequency      2   29[BANK0 ] unsigned short 
  8959 ;; Auto vars:     Size  Location     Type
  8960 ;;		None
  8961 ;; Return value:  Size  Location     Type
  8962 ;;                  1    wreg      unsigned char 
  8963 ;; Registers used:
  8964 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8965 ;; Tracked objects:
  8966 ;;		On entry : 0/0
  8967 ;;		On exit  : 0/0
  8968 ;;		Unchanged: 0/0
  8969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8970 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8971 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8973 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8974 ;;Total ram usage:        4 bytes
  8975 ;; Hardware stack levels used:    1
  8976 ;; Hardware stack levels required when called:    9
  8977 ;; This function calls:
  8978 ;;		_Timer0_Init
  8979 ;; This function is called by:
  8980 ;;		_mode1
  8981 ;;		_mode4
  8982 ;; This function uses a non-reentrant model
  8983 ;;
  8984                           
  8985                           	psect	text33
  8986  0161B6                     __ptext33:
  8987                           	opt stack 0
  8988  0161B6                     _Motor_Speed:
  8989                           	opt stack 20
  8990                           
  8991                           ;Motor.c: 119: pMotor->mFrequency = pFrequency;
  8992                           
  8993                           ; BSR set to: 0
  8994                           ;incstack = 0
  8995  0161B6  0100               	movlb	0	; () banked
  8996  0161B8  EE20 F002          	lfsr	2,2
  8997  0161BC  517B               	movf	Motor_Speed@pMotor& (0+255),w,b
  8998  0161BE  26D9               	addwf	fsr2l,f,c
  8999  0161C0  517C               	movf	(Motor_Speed@pMotor+1)& (0+255),w,b
  9000  0161C2  22DA               	addwfc	fsr2h,f,c
  9001  0161C4  C07D  FFDE         	movff	Motor_Speed@pFrequency,postinc2
  9002  0161C8  C07E  FFDD         	movff	Motor_Speed@pFrequency+1,postdec2
  9003                           
  9004                           ; BSR set to: 0
  9005                           ;Motor.c: 120: Timer0_Init(pFrequency);
  9006  0161CC  C07D  F06D         	movff	Motor_Speed@pFrequency,Timer0_Init@pFrequency
  9007  0161D0  C07E  F06E         	movff	Motor_Speed@pFrequency+1,Timer0_Init@pFrequency+1
  9008  0161D4  0100               	movlb	0	; () banked
  9009  0161D6  6B6F               	clrf	(Timer0_Init@pFrequency+2)& (0+255),b
  9010  0161D8  6B70               	clrf	(Timer0_Init@pFrequency+3)& (0+255),b
  9011  0161DA  ECC6  F098         	call	_Timer0_Init	;wreg free
  9012  0161DE  0012               	return	
  9013  0161E0                     __end_of_Motor_Speed:
  9014                           	opt stack 0
  9015                           tblptru	equ	0xFF8
  9016                           tblptrh	equ	0xFF7
  9017                           tblptrl	equ	0xFF6
  9018                           tablat	equ	0xFF5
  9019                           prodh	equ	0xFF4
  9020                           prodl	equ	0xFF3
  9021                           postinc0	equ	0xFEE
  9022                           wreg	equ	0xFE8
  9023                           postdec1	equ	0xFE5
  9024                           fsr1h	equ	0xFE2
  9025                           fsr1l	equ	0xFE1
  9026                           indf2	equ	0xFDF
  9027                           postinc2	equ	0xFDE
  9028                           postdec2	equ	0xFDD
  9029                           fsr2h	equ	0xFDA
  9030                           fsr2l	equ	0xFD9
  9031                           status	equ	0xFD8
  9032                           
  9033 ;; *************** function _Motor_Move *****************
  9034 ;; Defined at:
  9035 ;;		line 51 in file "Library/Motor.c"
  9036 ;; Parameters:    Size  Location     Type
  9037 ;;  pMotor          2    3[BANK0 ] PTR struct Motor
  9038 ;;		 -> Stepper(6), 
  9039 ;;  pDelta          2    5[BANK0 ] short 
  9040 ;; Auto vars:     Size  Location     Type
  9041 ;;		None
  9042 ;; Return value:  Size  Location     Type
  9043 ;;                  1    wreg      unsigned char 
  9044 ;; Registers used:
  9045 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9046 ;; Tracked objects:
  9047 ;;		On entry : 0/0
  9048 ;;		On exit  : 0/0
  9049 ;;		Unchanged: 0/0
  9050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9051 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9052 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9053 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9054 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9055 ;;Total ram usage:        6 bytes
  9056 ;; Hardware stack levels used:    1
  9057 ;; Hardware stack levels required when called:    8
  9058 ;; This function calls:
  9059 ;;		_Timer0_Start
  9060 ;; This function is called by:
  9061 ;;		_mode1
  9062 ;;		_mode4
  9063 ;; This function uses a non-reentrant model
  9064 ;;
  9065                           
  9066                           	psect	text34
  9067  015F94                     __ptext34:
  9068                           	opt stack 0
  9069  015F94                     _Motor_Move:
  9070                           	opt stack 21
  9071                           
  9072                           ;Motor.c: 54: lMotor = pMotor;
  9073                           
  9074                           ;incstack = 0
  9075  015F94  C063  F0D8         	movff	Motor_Move@pMotor,_lMotor
  9076  015F98  C064  F0D9         	movff	Motor_Move@pMotor+1,_lMotor+1
  9077                           
  9078                           ;Motor.c: 58: if (pMotor->mDelta != 0)
  9079  015F9C  C063  FFD9         	movff	Motor_Move@pMotor,fsr2l
  9080  015FA0  C064  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
  9081  015FA4  50DE               	movf	postinc2,w,c
  9082  015FA6  10DE               	iorwf	postinc2,w,c
  9083  015FA8  A4D8               	btfss	status,2,c
  9084  015FAA  0012               	return	
  9085                           
  9086                           ;Motor.c: 63: pMotor->mDelta = pDelta;
  9087                           
  9088                           ;Motor.c: 59: return 0;
  9089                           ;	Return value of _Motor_Move is never used
  9090  015FAC  C063  FFD9         	movff	Motor_Move@pMotor,fsr2l
  9091  015FB0  C064  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
  9092  015FB4  C065  FFDE         	movff	Motor_Move@pDelta,postinc2
  9093  015FB8  C066  FFDD         	movff	Motor_Move@pDelta+1,postdec2
  9094                           
  9095                           ;Motor.c: 67: Timer0_Start(lStepFunction);
  9096  015FBC  C0BF  F060         	movff	_lStepFunction,Timer0_Start@pFunction
  9097  015FC0  C0C0  F061         	movff	_lStepFunction+1,Timer0_Start@pFunction+1
  9098  015FC4  C0C1  F062         	movff	_lStepFunction+2,Timer0_Start@pFunction+2
  9099  015FC8  EC19  F0B1         	call	_Timer0_Start	;wreg free
  9100  015FCC  0012               	return	
  9101  015FCE                     __end_of_Motor_Move:
  9102                           	opt stack 0
  9103                           tblptru	equ	0xFF8
  9104                           tblptrh	equ	0xFF7
  9105                           tblptrl	equ	0xFF6
  9106                           tablat	equ	0xFF5
  9107                           prodh	equ	0xFF4
  9108                           prodl	equ	0xFF3
  9109                           postinc0	equ	0xFEE
  9110                           wreg	equ	0xFE8
  9111                           postdec1	equ	0xFE5
  9112                           fsr1h	equ	0xFE2
  9113                           fsr1l	equ	0xFE1
  9114                           indf2	equ	0xFDF
  9115                           postinc2	equ	0xFDE
  9116                           postdec2	equ	0xFDD
  9117                           fsr2h	equ	0xFDA
  9118                           fsr2l	equ	0xFD9
  9119                           status	equ	0xFD8
  9120                           
  9121 ;; *************** function _Timer0_Start *****************
  9122 ;; Defined at:
  9123 ;;		line 75 in file "Library/Timer0.c"
  9124 ;; Parameters:    Size  Location     Type
  9125 ;;  pFunction       3    0[BANK0 ] PTR FTN()void 
  9126 ;;		 -> Absolute function(1), Motor_Step(1), 
  9127 ;; Auto vars:     Size  Location     Type
  9128 ;;		None
  9129 ;; Return value:  Size  Location     Type
  9130 ;;                  1    wreg      void 
  9131 ;; Registers used:
  9132 ;;		wreg, status,2, status,0
  9133 ;; Tracked objects:
  9134 ;;		On entry : 0/0
  9135 ;;		On exit  : 0/0
  9136 ;;		Unchanged: 0/0
  9137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9138 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9141 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9142 ;;Total ram usage:        3 bytes
  9143 ;; Hardware stack levels used:    1
  9144 ;; Hardware stack levels required when called:    7
  9145 ;; This function calls:
  9146 ;;		Nothing
  9147 ;; This function is called by:
  9148 ;;		_Motor_Move
  9149 ;; This function uses a non-reentrant model
  9150 ;;
  9151                           
  9152                           	psect	text35
  9153  016232                     __ptext35:
  9154                           	opt stack 0
  9155  016232                     _Timer0_Start:
  9156                           	opt stack 21
  9157                           
  9158                           ;Timer0.c: 77: gISR = pFunction;
  9159                           
  9160                           ;incstack = 0
  9161  016232  C060  F0B9         	movff	Timer0_Start@pFunction,_gISR
  9162  016236  C061  F0BA         	movff	Timer0_Start@pFunction+1,_gISR+1
  9163  01623A  C062  F0BB         	movff	Timer0_Start@pFunction+2,_gISR+2
  9164                           
  9165                           ;Timer0.c: 78: TMR0 = COUNTER;
  9166  01623E  C029  FFD6         	movff	_COUNTER,4054	;volatile
  9167  016242  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
  9168                           
  9169                           ;Timer0.c: 79: T0CONbits.T0PS = INDEX;
  9170  016246  50D5               	movf	4053,w,c	;volatile
  9171  016248  0100               	movlb	0	; () banked
  9172  01624A  19E6               	xorwf	_INDEX& (0+255),w,b
  9173  01624C  0BF8               	andlw	-8
  9174  01624E  19E6               	xorwf	_INDEX& (0+255),w,b
  9175  016250  6ED5               	movwf	4053,c	;volatile
  9176                           
  9177                           ; BSR set to: 0
  9178                           ;Timer0.c: 80: INTCONbits.TMR0IF = 0;
  9179  016252  94F2               	bcf	intcon,2,c	;volatile
  9180                           
  9181                           ; BSR set to: 0
  9182                           ;Timer0.c: 81: INTCONbits.TMR0IE = 1;
  9183  016254  8AF2               	bsf	intcon,5,c	;volatile
  9184                           
  9185                           ; BSR set to: 0
  9186  016256  0012               	return		;funcret
  9187  016258                     __end_of_Timer0_Start:
  9188                           	opt stack 0
  9189                           tblptru	equ	0xFF8
  9190                           tblptrh	equ	0xFF7
  9191                           tblptrl	equ	0xFF6
  9192                           tablat	equ	0xFF5
  9193                           prodh	equ	0xFF4
  9194                           prodl	equ	0xFF3
  9195                           intcon	equ	0xFF2
  9196                           postinc0	equ	0xFEE
  9197                           wreg	equ	0xFE8
  9198                           postdec1	equ	0xFE5
  9199                           fsr1h	equ	0xFE2
  9200                           fsr1l	equ	0xFE1
  9201                           indf2	equ	0xFDF
  9202                           postinc2	equ	0xFDE
  9203                           postdec2	equ	0xFDD
  9204                           fsr2h	equ	0xFDA
  9205                           fsr2l	equ	0xFD9
  9206                           status	equ	0xFD8
  9207                           
  9208 ;; *************** function _HMI_Render *****************
  9209 ;; Defined at:
  9210 ;;		line 138 in file "HMI.c"
  9211 ;; Parameters:    Size  Location     Type
  9212 ;;		None
  9213 ;; Auto vars:     Size  Location     Type
  9214 ;;  a               2    8[BANK0 ] unsigned short 
  9215 ;; Return value:  Size  Location     Type
  9216 ;;                  1    wreg      void 
  9217 ;; Registers used:
  9218 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9219 ;; Tracked objects:
  9220 ;;		On entry : 0/0
  9221 ;;		On exit  : 0/0
  9222 ;;		Unchanged: 0/0
  9223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9225 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9227 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9228 ;;Total ram usage:        2 bytes
  9229 ;; Hardware stack levels used:    1
  9230 ;; Hardware stack levels required when called:    9
  9231 ;; This function calls:
  9232 ;;		_OutSeg
  9233 ;; This function is called by:
  9234 ;;		_mode1
  9235 ;;		_mode4
  9236 ;; This function uses a non-reentrant model
  9237 ;;
  9238                           
  9239                           	psect	text36
  9240  015E26                     __ptext36:
  9241                           	opt stack 0
  9242  015E26                     _HMI_Render:
  9243                           	opt stack 20
  9244                           
  9245                           ;HMI.c: 141: for (UINT16 a = 0; a < sizeof(HMIBoard.Bytes); a++)
  9246                           
  9247                           ; BSR set to: 0
  9248                           ;incstack = 0
  9249  015E26  0E00               	movlw	0
  9250  015E28  0100               	movlb	0	; () banked
  9251  015E2A  6F69               	movwf	(HMI_Render@a+1)& (0+255),b
  9252  015E2C  0E00               	movlw	0
  9253  015E2E  6F68               	movwf	HMI_Render@a& (0+255),b
  9254  015E30                     l14168:
  9255                           
  9256                           ; BSR set to: 0
  9257  015E30  0100               	movlb	0	; () banked
  9258  015E32  5169               	movf	(HMI_Render@a+1)& (0+255),w,b
  9259  015E34  E116               	bnz	l1158
  9260  015E36  0E08               	movlw	8
  9261  015E38  0100               	movlb	0	; () banked
  9262  015E3A  5D68               	subwf	HMI_Render@a& (0+255),w,b
  9263  015E3C  B0D8               	btfsc	status,0,c
  9264  015E3E  0012               	return	
  9265                           
  9266                           ; BSR set to: 0
  9267                           ;HMI.c: 142: OutSeg(HMIBoard.Bytes[a], a);
  9268                           
  9269                           ; BSR set to: 0
  9270                           
  9271                           ; BSR set to: 0
  9272  015E40  C068  F063         	movff	HMI_Render@a,OutSeg@pSegment
  9273  015E44  0E20               	movlw	low _HMIBoard
  9274  015E46  0100               	movlb	0	; () banked
  9275  015E48  2568               	addwf	HMI_Render@a& (0+255),w,b
  9276  015E4A  6ED9               	movwf	fsr2l,c
  9277  015E4C  0E03               	movlw	high _HMIBoard
  9278  015E4E  0100               	movlb	0	; () banked
  9279  015E50  2169               	addwfc	(HMI_Render@a+1)& (0+255),w,b
  9280  015E52  6EDA               	movwf	fsr2h,c
  9281  015E54  50DF               	movf	indf2,w,c
  9282  015E56  ECC9  F0A7         	call	_OutSeg
  9283  015E5A  0100               	movlb	0	; () banked
  9284  015E5C  4B68               	infsnz	HMI_Render@a& (0+255),f,b
  9285  015E5E  2B69               	incf	(HMI_Render@a+1)& (0+255),f,b
  9286  015E60  D7E7               	goto	l14168
  9287  015E62                     l1158:
  9288                           
  9289                           ; BSR set to: 0
  9290  015E62  0012               	return		;funcret
  9291  015E64                     __end_of_HMI_Render:
  9292                           	opt stack 0
  9293                           tblptru	equ	0xFF8
  9294                           tblptrh	equ	0xFF7
  9295                           tblptrl	equ	0xFF6
  9296                           tablat	equ	0xFF5
  9297                           prodh	equ	0xFF4
  9298                           prodl	equ	0xFF3
  9299                           intcon	equ	0xFF2
  9300                           postinc0	equ	0xFEE
  9301                           wreg	equ	0xFE8
  9302                           postdec1	equ	0xFE5
  9303                           fsr1h	equ	0xFE2
  9304                           fsr1l	equ	0xFE1
  9305                           indf2	equ	0xFDF
  9306                           postinc2	equ	0xFDE
  9307                           postdec2	equ	0xFDD
  9308                           fsr2h	equ	0xFDA
  9309                           fsr2l	equ	0xFD9
  9310                           status	equ	0xFD8
  9311                           
  9312 ;; *************** function _OutSeg *****************
  9313 ;; Defined at:
  9314 ;;		line 54 in file "HMI.c"
  9315 ;; Parameters:    Size  Location     Type
  9316 ;;  pInput          1    wreg     unsigned char 
  9317 ;;  pSegment        1    3[BANK0 ] unsigned char 
  9318 ;; Auto vars:     Size  Location     Type
  9319 ;;  pInput          1    6[BANK0 ] unsigned char 
  9320 ;;  out             1    7[BANK0 ] volatile unsigned char 
  9321 ;; Return value:  Size  Location     Type
  9322 ;;                  1    wreg      void 
  9323 ;; Registers used:
  9324 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9325 ;; Tracked objects:
  9326 ;;		On entry : 0/0
  9327 ;;		On exit  : 0/0
  9328 ;;		Unchanged: 0/0
  9329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9330 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9331 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9332 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9333 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9334 ;;Total ram usage:        5 bytes
  9335 ;; Hardware stack levels used:    1
  9336 ;; Hardware stack levels required when called:    8
  9337 ;; This function calls:
  9338 ;;		_SPI_Send
  9339 ;; This function is called by:
  9340 ;;		_HMI_Render
  9341 ;;		_HMI_GRender
  9342 ;; This function uses a non-reentrant model
  9343 ;;
  9344                           
  9345                           	psect	text37
  9346  014F92                     __ptext37:
  9347                           	opt stack 0
  9348  014F92                     _OutSeg:
  9349                           	opt stack 20
  9350                           
  9351                           ; BSR set to: 0
  9352                           ;incstack = 0
  9353                           ;OutSeg@pInput stored from wreg
  9354  014F92  0100               	movlb	0	; () banked
  9355  014F94  6F66               	movwf	OutSeg@pInput& (0+255),b
  9356                           
  9357                           ;HMI.c: 58: static UINT8 cur;
  9358                           ;HMI.c: 59: volatile UINT8 out;
  9359                           ;HMI.c: 60: static UINT8 segset;
  9360                           ;HMI.c: 61: static UINT8 a;
  9361                           ;HMI.c: 83: if (pSegment <= 8)
  9362  014F96  0E09               	movlw	9
  9363  014F98  0100               	movlb	0	; () banked
  9364  014F9A  6163               	cpfslt	OutSeg@pSegment& (0+255),b
  9365  014F9C  0012               	return	
  9366                           
  9367                           ; BSR set to: 0
  9368                           ;HMI.c: 84: {
  9369                           ;HMI.c: 85: cur = pInput;
  9370  014F9E  C066  F03F         	movff	OutSeg@pInput,OutSeg@cur
  9371                           
  9372                           ; BSR set to: 0
  9373                           ;HMI.c: 86: for (a = 0u; a<8u; a++)
  9374  014FA2  0E00               	movlw	0
  9375  014FA4  6E3D               	movwf	OutSeg@a,c
  9376  014FA6                     l13560:
  9377                           
  9378                           ; BSR set to: 0
  9379  014FA6  0E07               	movlw	7
  9380  014FA8  643D               	cpfsgt	OutSeg@a,c
  9381  014FAA  D001               	goto	l1146
  9382  014FAC  D027               	goto	u10070
  9383  014FAE                     l1146:
  9384                           
  9385                           ;HMI.c: 87: {
  9386                           ;HMI.c: 88: segset = (cur & 1u)<<6u;
  9387                           
  9388                           ; BSR set to: 0
  9389  014FAE  C03F  F064         	movff	OutSeg@cur,??_OutSeg
  9390  014FB2  0E01               	movlw	1
  9391  014FB4  0100               	movlb	0	; () banked
  9392  014FB6  1764               	andwf	??_OutSeg& (0+255),f,b
  9393  014FB8  0E06               	movlw	6
  9394  014FBA  0100               	movlb	0	; () banked
  9395  014FBC  6F65               	movwf	(??_OutSeg+1)& (0+255),b
  9396  014FBE                     u10065:
  9397  014FBE  0100               	movlb	0	; () banked
  9398  014FC0  90D8               	bcf	status,0,c
  9399  014FC2  3764               	rlcf	??_OutSeg& (0+255),f,b
  9400  014FC4  0100               	movlb	0	; () banked
  9401  014FC6  2F65               	decfsz	(??_OutSeg+1)& (0+255),f,b
  9402  014FC8  D7FA               	goto	u10065
  9403  014FCA  0100               	movlb	0	; () banked
  9404  014FCC  5164               	movf	??_OutSeg& (0+255),w,b
  9405  014FCE  6E3E               	movwf	OutSeg@segset,c
  9406                           
  9407                           ;HMI.c: 89: out = (pSegment<<3u) | a | segset;
  9408  014FD0  0100               	movlb	0	; () banked
  9409  014FD2  3963               	swapf	OutSeg@pSegment& (0+255),w,b
  9410  014FD4  42E8               	rrncf	wreg,f,c
  9411  014FD6  0BF8               	andlw	248
  9412  014FD8  103D               	iorwf	OutSeg@a,w,c
  9413  014FDA  103E               	iorwf	OutSeg@segset,w,c
  9414  014FDC  0100               	movlb	0	; () banked
  9415  014FDE  6F67               	movwf	OutSeg@out& (0+255),b	;volatile
  9416                           
  9417                           ;HMI.c: 90: cur >>= 1;
  9418  014FE0  90D8               	bcf	status,0,c
  9419  014FE2  323F               	rrcf	OutSeg@cur,f,c
  9420                           
  9421                           ; BSR set to: 0
  9422                           ;HMI.c: 91: SPI_Send(&SPI1, out);
  9423  014FE4  0E5A               	movlw	low _SPI1
  9424  014FE6  0100               	movlb	0	; () banked
  9425  014FE8  6F60               	movwf	SPI_Send@pInput& (0+255),b
  9426  014FEA  0E03               	movlw	high _SPI1
  9427  014FEC  0100               	movlb	0	; () banked
  9428  014FEE  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
  9429  014FF0  C067  F062         	movff	OutSeg@out,SPI_Send@pData	;volatile
  9430  014FF4  EC1C  F0AA         	call	_SPI_Send	;wreg free
  9431  014FF8  2A3D               	incf	OutSeg@a,f,c
  9432  014FFA  D7D5               	goto	l13560
  9433  014FFC                     u10070:
  9434                           
  9435                           ;HMI.c: 96: }
  9436                           ;HMI.c: 97: SPI_Send(&SPI1, 0);
  9437  014FFC  0E5A               	movlw	low _SPI1
  9438  014FFE  0100               	movlb	0	; () banked
  9439  015000  6F60               	movwf	SPI_Send@pInput& (0+255),b
  9440  015002  0E03               	movlw	high _SPI1
  9441  015004  0100               	movlb	0	; () banked
  9442  015006  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
  9443  015008  0E00               	movlw	0
  9444  01500A  0100               	movlb	0	; () banked
  9445  01500C  6F62               	movwf	SPI_Send@pData& (0+255),b
  9446  01500E  EC1C  F0AA         	call	_SPI_Send	;wreg free
  9447  015012  0012               	return	
  9448  015014                     __end_of_OutSeg:
  9449                           	opt stack 0
  9450                           tblptru	equ	0xFF8
  9451                           tblptrh	equ	0xFF7
  9452                           tblptrl	equ	0xFF6
  9453                           tablat	equ	0xFF5
  9454                           prodh	equ	0xFF4
  9455                           prodl	equ	0xFF3
  9456                           intcon	equ	0xFF2
  9457                           postinc0	equ	0xFEE
  9458                           wreg	equ	0xFE8
  9459                           postdec1	equ	0xFE5
  9460                           fsr1h	equ	0xFE2
  9461                           fsr1l	equ	0xFE1
  9462                           indf2	equ	0xFDF
  9463                           postinc2	equ	0xFDE
  9464                           postdec2	equ	0xFDD
  9465                           fsr2h	equ	0xFDA
  9466                           fsr2l	equ	0xFD9
  9467                           status	equ	0xFD8
  9468                           
  9469 ;; *************** function _Console_Render *****************
  9470 ;; Defined at:
  9471 ;;		line 377 in file "Library/Console.c"
  9472 ;; Parameters:    Size  Location     Type
  9473 ;;		None
  9474 ;; Auto vars:     Size  Location     Type
  9475 ;;  lCursor         4   38[BANK0 ] struct Point
  9476 ;;  y               1   43[BANK0 ] unsigned char 
  9477 ;;  x               1   42[BANK0 ] unsigned char 
  9478 ;;  temp            1   37[BANK0 ] unsigned char 
  9479 ;;  Temp            2    0        unsigned short 
  9480 ;; Return value:  Size  Location     Type
  9481 ;;                  1    wreg      void 
  9482 ;; Registers used:
  9483 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9484 ;; Tracked objects:
  9485 ;;		On entry : 0/0
  9486 ;;		On exit  : 0/0
  9487 ;;		Unchanged: 0/0
  9488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9490 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9491 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9492 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9493 ;;Total ram usage:        9 bytes
  9494 ;; Hardware stack levels used:    1
  9495 ;; Hardware stack levels required when called:   11
  9496 ;; This function calls:
  9497 ;;		_Console_MakeField
  9498 ;;		_LCD_DrawField
  9499 ;;		_LCD_FillRectangle
  9500 ;; This function is called by:
  9501 ;;		_mode1
  9502 ;;		_mode2
  9503 ;;		_mode4
  9504 ;;		_main
  9505 ;; This function uses a non-reentrant model
  9506 ;;
  9507                           
  9508                           	psect	text38
  9509  011F24                     __ptext38:
  9510                           	opt stack 0
  9511  011F24                     _Console_Render:
  9512                           	opt stack 18
  9513                           
  9514                           ;Console.c: 379: Colour Temp;
  9515                           ;Console.c: 380: if (change)
  9516                           
  9517                           ;incstack = 0
  9518  011F24  0100               	movlb	0	; () banked
  9519  011F26  51FF               	movf	_change& (0+255),w,b
  9520  011F28  B4D8               	btfsc	status,2,c
  9521  011F2A  0012               	return	
  9522                           
  9523                           ; BSR set to: 0
  9524                           ;Console.c: 381: {
  9525                           ;Console.c: 382: UINT8 x, y, temp;
  9526                           ;Console.c: 383: Point lCursor = {6,6};
  9527  011F2C  C3E4  F086         	movff	Console_Render@F6956,Console_Render@lCursor
  9528  011F30  C3E5  F087         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
  9529  011F34  C3E6  F088         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
  9530  011F38  C3E7  F089         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
  9531                           
  9532                           ; BSR set to: 0
  9533                           ;Console.c: 385: if (clearall)
  9534  011F3C  0100               	movlb	0	; () banked
  9535  011F3E  51E9               	movf	_clearall& (0+255),w,b
  9536  011F40  B4D8               	btfsc	status,2,c
  9537  011F42  D005               	goto	l1056
  9538                           
  9539                           ; BSR set to: 0
  9540                           ;Console.c: 386: {
  9541                           ;Console.c: 389: temp = lBufferY;
  9542  011F44  C0E7  F085         	movff	_lBufferY,Console_Render@temp
  9543                           
  9544                           ; BSR set to: 0
  9545                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
  9546  011F48  0E0F               	movlw	15
  9547  011F4A  0100               	movlb	0	; () banked
  9548  011F4C  6FE7               	movwf	_lBufferY& (0+255),b
  9549  011F4E                     l1056:
  9550                           
  9551                           ; BSR set to: 0
  9552                           ;Console.c: 391: }
  9553                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
  9554  011F4E  0E00               	movlw	0
  9555  011F50  0100               	movlb	0	; () banked
  9556  011F52  6F8B               	movwf	Console_Render@y& (0+255),b
  9557  011F54  D0DF               	goto	l1057
  9558  011F56                     
  9559                           ; BSR set to: 0
  9560                           ;Console.c: 394: {
  9561                           ;Console.c: 395: gForecolour = lCBuffer[y];
  9562                           
  9563                           ; BSR set to: 0
  9564  011F56  0100               	movlb	0	; () banked
  9565  011F58  518B               	movf	Console_Render@y& (0+255),w,b
  9566  011F5A  0D02               	mullw	2
  9567  011F5C  0E00               	movlw	low _lCBuffer
  9568  011F5E  24F3               	addwf	prodl,w,c
  9569  011F60  6ED9               	movwf	fsr2l,c
  9570  011F62  0E04               	movlw	high _lCBuffer
  9571  011F64  20F4               	addwfc	prodh,w,c
  9572  011F66  6EDA               	movwf	fsr2h,c
  9573  011F68  CFDE F0FD          	movff	postinc2,_gForecolour
  9574  011F6C  CFDD F0FE          	movff	postdec2,_gForecolour+1
  9575                           
  9576                           ; BSR set to: 0
  9577                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
  9578  011F70  0E00               	movlw	0
  9579  011F72  0100               	movlb	0	; () banked
  9580  011F74  6F8A               	movwf	Console_Render@x& (0+255),b
  9581  011F76                     l14114:
  9582                           
  9583                           ; BSR set to: 0
  9584  011F76  0E13               	movlw	19
  9585  011F78  0100               	movlb	0	; () banked
  9586  011F7A  658A               	cpfsgt	Console_Render@x& (0+255),b
  9587  011F7C  D001               	goto	l1059
  9588  011F7E  D0BE               	goto	u10940
  9589  011F80                     l1059:
  9590                           
  9591                           ; BSR set to: 0
  9592                           ;Console.c: 397: {
  9593                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
  9594                           
  9595                           ; BSR set to: 0
  9596  011F80  0100               	movlb	0	; () banked
  9597  011F82  518B               	movf	Console_Render@y& (0+255),w,b
  9598  011F84  0D14               	mullw	20
  9599  011F86  0EC8               	movlw	low _lBuffer
  9600  011F88  0100               	movlb	0	; () banked
  9601  011F8A  6F83               	movwf	??_Console_Render& (0+255),b
  9602  011F8C  0E04               	movlw	high _lBuffer
  9603  011F8E  0100               	movlb	0	; () banked
  9604  011F90  6F84               	movwf	(??_Console_Render+1)& (0+255),b
  9605  011F92  50F3               	movf	prodl,w,c
  9606  011F94  0100               	movlb	0	; () banked
  9607  011F96  2783               	addwf	??_Console_Render& (0+255),f,b
  9608  011F98  50F4               	movf	prodh,w,c
  9609  011F9A  0100               	movlb	0	; () banked
  9610  011F9C  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
  9611  011F9E  0100               	movlb	0	; () banked
  9612  011FA0  518A               	movf	Console_Render@x& (0+255),w,b
  9613  011FA2  0D01               	mullw	1
  9614  011FA4  50F3               	movf	prodl,w,c
  9615  011FA6  0100               	movlb	0	; () banked
  9616  011FA8  2583               	addwf	??_Console_Render& (0+255),w,b
  9617  011FAA  6ED9               	movwf	fsr2l,c
  9618  011FAC  50F4               	movf	prodh,w,c
  9619  011FAE  0100               	movlb	0	; () banked
  9620  011FB0  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
  9621  011FB2  6EDA               	movwf	fsr2h,c
  9622  011FB4  AEDF               	btfss	indf2,7,c
  9623  011FB6  D09A               	goto	l1063
  9624                           
  9625                           ; BSR set to: 0
  9626                           ;Console.c: 399: {
  9627                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
  9628  011FB8  0100               	movlb	0	; () banked
  9629  011FBA  518B               	movf	Console_Render@y& (0+255),w,b
  9630  011FBC  0D14               	mullw	20
  9631  011FBE  0EC8               	movlw	low _lBuffer
  9632  011FC0  0100               	movlb	0	; () banked
  9633  011FC2  6F83               	movwf	??_Console_Render& (0+255),b
  9634  011FC4  0E04               	movlw	high _lBuffer
  9635  011FC6  0100               	movlb	0	; () banked
  9636  011FC8  6F84               	movwf	(??_Console_Render+1)& (0+255),b
  9637  011FCA  50F3               	movf	prodl,w,c
  9638  011FCC  0100               	movlb	0	; () banked
  9639  011FCE  2783               	addwf	??_Console_Render& (0+255),f,b
  9640  011FD0  50F4               	movf	prodh,w,c
  9641  011FD2  0100               	movlb	0	; () banked
  9642  011FD4  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
  9643  011FD6  0100               	movlb	0	; () banked
  9644  011FD8  518A               	movf	Console_Render@x& (0+255),w,b
  9645  011FDA  0D01               	mullw	1
  9646  011FDC  50F3               	movf	prodl,w,c
  9647  011FDE  0100               	movlb	0	; () banked
  9648  011FE0  2583               	addwf	??_Console_Render& (0+255),w,b
  9649  011FE2  6ED9               	movwf	fsr2l,c
  9650  011FE4  50F4               	movf	prodh,w,c
  9651  011FE6  0100               	movlb	0	; () banked
  9652  011FE8  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
  9653  011FEA  6EDA               	movwf	fsr2h,c
  9654  011FEC  0E7F               	movlw	127
  9655  011FEE  16DF               	andwf	indf2,f,c
  9656                           
  9657                           ;Console.c: 401: if (lBuffer[y][x])
  9658  011FF0  0100               	movlb	0	; () banked
  9659  011FF2  518B               	movf	Console_Render@y& (0+255),w,b
  9660  011FF4  0D14               	mullw	20
  9661  011FF6  0EC8               	movlw	low _lBuffer
  9662  011FF8  0100               	movlb	0	; () banked
  9663  011FFA  6F83               	movwf	??_Console_Render& (0+255),b
  9664  011FFC  0E04               	movlw	high _lBuffer
  9665  011FFE  0100               	movlb	0	; () banked
  9666  012000  6F84               	movwf	(??_Console_Render+1)& (0+255),b
  9667  012002  50F3               	movf	prodl,w,c
  9668  012004  0100               	movlb	0	; () banked
  9669  012006  2783               	addwf	??_Console_Render& (0+255),f,b
  9670  012008  50F4               	movf	prodh,w,c
  9671  01200A  0100               	movlb	0	; () banked
  9672  01200C  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
  9673  01200E  0100               	movlb	0	; () banked
  9674  012010  518A               	movf	Console_Render@x& (0+255),w,b
  9675  012012  0D01               	mullw	1
  9676  012014  50F3               	movf	prodl,w,c
  9677  012016  0100               	movlb	0	; () banked
  9678  012018  2583               	addwf	??_Console_Render& (0+255),w,b
  9679  01201A  6ED9               	movwf	fsr2l,c
  9680  01201C  50F4               	movf	prodh,w,c
  9681  01201E  0100               	movlb	0	; () banked
  9682  012020  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
  9683  012022  6EDA               	movwf	fsr2h,c
  9684  012024  50DF               	movf	indf2,w,c
  9685  012026  B4D8               	btfsc	status,2,c
  9686  012028  D04A               	goto	l1062
  9687                           
  9688                           ; BSR set to: 0
  9689                           ;Console.c: 402: {
  9690                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
  9691  01202A  C0DC  F069         	movff	_gBackcolour,LCD_FillRectangle@pColour
  9692  01202E  C0DD  F06A         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
  9693  012032  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
  9694  012036  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
  9695  01203A  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
  9696  01203E  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
  9697  012042  C3EC  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
  9698  012046  C3ED  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
  9699  01204A  C3EE  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
  9700  01204E  C3EF  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
  9701  012052  ECFC  F0A8         	call	_LCD_FillRectangle	;wreg free
  9702                           
  9703                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
  9704  012056  0100               	movlb	0	; () banked
  9705  012058  518B               	movf	Console_Render@y& (0+255),w,b
  9706  01205A  0D14               	mullw	20
  9707  01205C  0EC8               	movlw	low _lBuffer
  9708  01205E  0100               	movlb	0	; () banked
  9709  012060  6F83               	movwf	??_Console_Render& (0+255),b
  9710  012062  0E04               	movlw	high _lBuffer
  9711  012064  0100               	movlb	0	; () banked
  9712  012066  6F84               	movwf	(??_Console_Render+1)& (0+255),b
  9713  012068  50F3               	movf	prodl,w,c
  9714  01206A  0100               	movlb	0	; () banked
  9715  01206C  2783               	addwf	??_Console_Render& (0+255),f,b
  9716  01206E  50F4               	movf	prodh,w,c
  9717  012070  0100               	movlb	0	; () banked
  9718  012072  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
  9719  012074  0100               	movlb	0	; () banked
  9720  012076  518A               	movf	Console_Render@x& (0+255),w,b
  9721  012078  0D01               	mullw	1
  9722  01207A  50F3               	movf	prodl,w,c
  9723  01207C  0100               	movlb	0	; () banked
  9724  01207E  2583               	addwf	??_Console_Render& (0+255),w,b
  9725  012080  6ED9               	movwf	fsr2l,c
  9726  012082  50F4               	movf	prodh,w,c
  9727  012084  0100               	movlb	0	; () banked
  9728  012086  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
  9729  012088  6EDA               	movwf	fsr2h,c
  9730  01208A  50DF               	movf	indf2,w,c
  9731  01208C  ECF1  F09E         	call	_Console_MakeField
  9732  012090  C065  F072         	movff	?_Console_MakeField,LCD_DrawField@pField
  9733  012094  C066  F073         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
  9734  012098  C086  F074         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
  9735  01209C  C087  F075         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
  9736  0120A0  C088  F076         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
  9737  0120A4  C089  F077         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
  9738  0120A8  C3EC  F078         	movff	_gCharSize,LCD_DrawField@pSize
  9739  0120AC  C3ED  F079         	movff	_gCharSize+1,LCD_DrawField@pSize+1
  9740  0120B0  C3EE  F07A         	movff	_gCharSize+2,LCD_DrawField@pSize+2
  9741  0120B4  C3EF  F07B         	movff	_gCharSize+3,LCD_DrawField@pSize+3
  9742  0120B8  ECEB  F0A4         	call	_LCD_DrawField	;wreg free
  9743                           
  9744                           ;Console.c: 405: }
  9745  0120BC  D017               	goto	l1063
  9746  0120BE                     l1062:
  9747                           
  9748                           ;Console.c: 406: else
  9749                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
  9750  0120BE  0E00               	movlw	0
  9751  0120C0  0100               	movlb	0	; () banked
  9752  0120C2  6F6A               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
  9753  0120C4  0E00               	movlw	0
  9754  0120C6  6F69               	movwf	LCD_FillRectangle@pColour& (0+255),b
  9755  0120C8  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
  9756  0120CC  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
  9757  0120D0  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
  9758  0120D4  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
  9759  0120D8  C3EC  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
  9760  0120DC  C3ED  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
  9761  0120E0  C3EE  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
  9762  0120E4  C3EF  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
  9763  0120E8  ECFC  F0A8         	call	_LCD_FillRectangle	;wreg free
  9764  0120EC                     l1063:
  9765                           
  9766                           ;Console.c: 408: }
  9767                           ;Console.c: 409: lCursor.x += (5 + 1);
  9768  0120EC  0E06               	movlw	6
  9769  0120EE  0100               	movlb	0	; () banked
  9770  0120F0  2786               	addwf	Console_Render@lCursor& (0+255),f,b
  9771  0120F2  0E00               	movlw	0
  9772  0120F4  2387               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
  9773                           
  9774                           ; BSR set to: 0
  9775  0120F6  0100               	movlb	0	; () banked
  9776  0120F8  2B8A               	incf	Console_Render@x& (0+255),f,b
  9777  0120FA  D73D               	goto	l14114
  9778  0120FC                     u10940:
  9779                           
  9780                           ; BSR set to: 0
  9781                           ;Console.c: 410: }
  9782                           ;Console.c: 411: lCursor.y += (7 + 1);
  9783                           
  9784                           ; BSR set to: 0
  9785  0120FC  0E08               	movlw	8
  9786  0120FE  0100               	movlb	0	; () banked
  9787  012100  2788               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
  9788  012102  0E00               	movlw	0
  9789  012104  2389               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
  9790                           
  9791                           ; BSR set to: 0
  9792                           ;Console.c: 412: lCursor.x = 6;
  9793  012106  0E00               	movlw	0
  9794  012108  0100               	movlb	0	; () banked
  9795  01210A  6F87               	movwf	(Console_Render@lCursor+1)& (0+255),b
  9796  01210C  0E06               	movlw	6
  9797  01210E  6F86               	movwf	Console_Render@lCursor& (0+255),b
  9798                           
  9799                           ; BSR set to: 0
  9800  012110  0100               	movlb	0	; () banked
  9801  012112  2B8B               	incf	Console_Render@y& (0+255),f,b
  9802  012114                     l1057:
  9803                           
  9804                           ; BSR set to: 0
  9805                           
  9806                           ; BSR set to: 0
  9807  012114  0100               	movlb	0	; () banked
  9808  012116  518B               	movf	Console_Render@y& (0+255),w,b
  9809  012118  0100               	movlb	0	; () banked
  9810  01211A  5DE7               	subwf	_lBufferY& (0+255),w,b
  9811  01211C  B0D8               	btfsc	status,0,c
  9812  01211E  D71B               	goto	l1058
  9813                           
  9814                           ; BSR set to: 0
  9815                           ;Console.c: 413: }
  9816                           ;Console.c: 415: if (clearall)
  9817                           
  9818                           ; BSR set to: 0
  9819  012120  0100               	movlb	0	; () banked
  9820  012122  51E9               	movf	_clearall& (0+255),w,b
  9821  012124  B4D8               	btfsc	status,2,c
  9822  012126  0012               	return	
  9823                           
  9824                           ; BSR set to: 0
  9825                           ;Console.c: 416: {
  9826                           ;Console.c: 417: clearall = 0;
  9827  012128  0E00               	movlw	0
  9828  01212A  0100               	movlb	0	; () banked
  9829  01212C  6FE9               	movwf	_clearall& (0+255),b
  9830                           
  9831                           ; BSR set to: 0
  9832                           ;Console.c: 418: lBufferY = temp;
  9833  01212E  C085  F0E7         	movff	Console_Render@temp,_lBufferY
  9834                           
  9835                           ; BSR set to: 0
  9836  012132  0012               	return	
  9837  012134                     __end_of_Console_Render:
  9838                           	opt stack 0
  9839                           tblptru	equ	0xFF8
  9840                           tblptrh	equ	0xFF7
  9841                           tblptrl	equ	0xFF6
  9842                           tablat	equ	0xFF5
  9843                           prodh	equ	0xFF4
  9844                           prodl	equ	0xFF3
  9845                           intcon	equ	0xFF2
  9846                           postinc0	equ	0xFEE
  9847                           wreg	equ	0xFE8
  9848                           postdec1	equ	0xFE5
  9849                           fsr1h	equ	0xFE2
  9850                           fsr1l	equ	0xFE1
  9851                           indf2	equ	0xFDF
  9852                           postinc2	equ	0xFDE
  9853                           postdec2	equ	0xFDD
  9854                           fsr2h	equ	0xFDA
  9855                           fsr2l	equ	0xFD9
  9856                           status	equ	0xFD8
  9857                           
  9858 ;; *************** function _LCD_FillRectangle *****************
  9859 ;; Defined at:
  9860 ;;		line 318 in file "Library/LCD.c"
  9861 ;; Parameters:    Size  Location     Type
  9862 ;;  pColour         2    9[BANK0 ] unsigned short 
  9863 ;;  pPoint          4   11[BANK0 ] struct Point
  9864 ;;  pSize           4   15[BANK0 ] struct Point
  9865 ;; Auto vars:     Size  Location     Type
  9866 ;;  j               1   22[BANK0 ] unsigned char 
  9867 ;;  i               1   21[BANK0 ] unsigned char 
  9868 ;; Return value:  Size  Location     Type
  9869 ;;                  1    wreg      void 
  9870 ;; Registers used:
  9871 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9872 ;; Tracked objects:
  9873 ;;		On entry : 0/0
  9874 ;;		On exit  : 0/0
  9875 ;;		Unchanged: 0/0
  9876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9877 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9878 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9879 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9880 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9881 ;;Total ram usage:       14 bytes
  9882 ;; Hardware stack levels used:    1
  9883 ;; Hardware stack levels required when called:   10
  9884 ;; This function calls:
  9885 ;;		_LCD_Word_Write
  9886 ;;		_Set_Addr_Window
  9887 ;; This function is called by:
  9888 ;;		_Console_Render
  9889 ;;		_Console_ClearLine
  9890 ;; This function uses a non-reentrant model
  9891 ;;
  9892                           
  9893                           	psect	text39
  9894  0151F8                     __ptext39:
  9895                           	opt stack 0
  9896  0151F8                     _LCD_FillRectangle:
  9897                           	opt stack 18
  9898                           
  9899                           ;LCD.c: 320: UINT8 i = 0x00;
  9900                           
  9901                           ; BSR set to: 0
  9902                           ;incstack = 0
  9903  0151F8  0E00               	movlw	0
  9904  0151FA  0100               	movlb	0	; () banked
  9905  0151FC  6F75               	movwf	LCD_FillRectangle@i& (0+255),b
  9906                           
  9907                           ;LCD.c: 321: UINT8 j = 0x00;
  9908  0151FE  0E00               	movlw	0
  9909  015200  0100               	movlb	0	; () banked
  9910  015202  6F76               	movwf	LCD_FillRectangle@j& (0+255),b
  9911                           
  9912                           ; BSR set to: 0
  9913                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
  9914  015204  C06D  F065         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
  9915  015208  0100               	movlb	0	; () banked
  9916  01520A  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
  9917  01520C  0100               	movlb	0	; () banked
  9918  01520E  256F               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
  9919  015210  0100               	movlb	0	; () banked
  9920  015212  6F73               	movwf	??_LCD_FillRectangle& (0+255),b
  9921  015214  0100               	movlb	0	; () banked
  9922  015216  0573               	decf	??_LCD_FillRectangle& (0+255),w,b
  9923  015218  0100               	movlb	0	; () banked
  9924  01521A  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
  9925  01521C  0100               	movlb	0	; () banked
  9926  01521E  516D               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
  9927  015220  0100               	movlb	0	; () banked
  9928  015222  2571               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
  9929  015224  0100               	movlb	0	; () banked
  9930  015226  6F74               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
  9931  015228  0100               	movlb	0	; () banked
  9932  01522A  0574               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
  9933  01522C  0100               	movlb	0	; () banked
  9934  01522E  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
  9935  015230  0100               	movlb	0	; () banked
  9936  015232  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
  9937  015234  ECF5  F0A2         	call	_Set_Addr_Window
  9938                           
  9939                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
  9940  015238  C071  F076         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
  9941  01523C                     l13430:
  9942  01523C  0100               	movlb	0	; () banked
  9943  01523E  5176               	movf	LCD_FillRectangle@j& (0+255),w,b
  9944  015240  0100               	movlb	0	; () banked
  9945  015242  B4D8               	btfsc	status,2,c
  9946  015244  0012               	return	
  9947                           
  9948                           ; BSR set to: 0
  9949                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
  9950                           
  9951                           ; BSR set to: 0
  9952  015246  C06F  F075         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
  9953  01524A                     l13434:
  9954                           
  9955                           ; BSR set to: 0
  9956  01524A  0100               	movlb	0	; () banked
  9957  01524C  5175               	movf	LCD_FillRectangle@i& (0+255),w,b
  9958  01524E  0100               	movlb	0	; () banked
  9959  015250  B4D8               	btfsc	status,2,c
  9960  015252  D009               	goto	u9940
  9961                           
  9962                           ; BSR set to: 0
  9963                           ;LCD.c: 333: LCD_Word_Write(pColour);
  9964                           
  9965                           ; BSR set to: 0
  9966                           
  9967                           ; BSR set to: 0
  9968  015254  C069  F065         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
  9969  015258  C06A  F066         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
  9970  01525C  EC8D  F0B1         	call	_LCD_Word_Write	;wreg free
  9971  015260  0100               	movlb	0	; () banked
  9972  015262  0775               	decf	LCD_FillRectangle@i& (0+255),f,b
  9973  015264  D7F2               	goto	l13434
  9974  015266                     u9940:
  9975                           
  9976                           ; BSR set to: 0
  9977                           
  9978                           ; BSR set to: 0
  9979  015266  0100               	movlb	0	; () banked
  9980  015268  0776               	decf	LCD_FillRectangle@j& (0+255),f,b
  9981  01526A  D7E8               	goto	l13430
  9982  01526C                     __end_of_LCD_FillRectangle:
  9983                           	opt stack 0
  9984                           tblptru	equ	0xFF8
  9985                           tblptrh	equ	0xFF7
  9986                           tblptrl	equ	0xFF6
  9987                           tablat	equ	0xFF5
  9988                           prodh	equ	0xFF4
  9989                           prodl	equ	0xFF3
  9990                           intcon	equ	0xFF2
  9991                           postinc0	equ	0xFEE
  9992                           wreg	equ	0xFE8
  9993                           postdec1	equ	0xFE5
  9994                           fsr1h	equ	0xFE2
  9995                           fsr1l	equ	0xFE1
  9996                           indf2	equ	0xFDF
  9997                           postinc2	equ	0xFDE
  9998                           postdec2	equ	0xFDD
  9999                           fsr2h	equ	0xFDA
 10000                           fsr2l	equ	0xFD9
 10001                           status	equ	0xFD8
 10002                           
 10003 ;; *************** function _LCD_DrawField *****************
 10004 ;; Defined at:
 10005 ;;		line 393 in file "Library/LCD.c"
 10006 ;; Parameters:    Size  Location     Type
 10007 ;;  pField          2   18[BANK0 ] PTR unsigned short 
 10008 ;;		 -> Console_MakeField@Fill(70), 
 10009 ;;  pPoint          4   20[BANK0 ] struct Point
 10010 ;;  pSize           4   24[BANK0 ] struct Point
 10011 ;; Auto vars:     Size  Location     Type
 10012 ;;  count           2   30[BANK0 ] unsigned short 
 10013 ;;  i               1   34[BANK0 ] unsigned char 
 10014 ;;  ymax            1   33[BANK0 ] unsigned char 
 10015 ;;  xmax            1   32[BANK0 ] unsigned char 
 10016 ;; Return value:  Size  Location     Type
 10017 ;;                  1    wreg      void 
 10018 ;; Registers used:
 10019 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10020 ;; Tracked objects:
 10021 ;;		On entry : 0/0
 10022 ;;		On exit  : 0/0
 10023 ;;		Unchanged: 0/0
 10024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10025 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10026 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10027 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10028 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10029 ;;Total ram usage:       17 bytes
 10030 ;; Hardware stack levels used:    1
 10031 ;; Hardware stack levels required when called:   10
 10032 ;; This function calls:
 10033 ;;		_LCD_Word_Write
 10034 ;;		_Set_Addr_Window
 10035 ;;		___wmul
 10036 ;; This function is called by:
 10037 ;;		_Console_Render
 10038 ;; This function uses a non-reentrant model
 10039 ;;
 10040                           
 10041                           	psect	text40
 10042  0149D6                     __ptext40:
 10043                           	opt stack 0
 10044  0149D6                     _LCD_DrawField:
 10045                           	opt stack 18
 10046                           
 10047                           ;LCD.c: 396: UINT8 i = 0x00;
 10048                           
 10049                           ; BSR set to: 0
 10050                           ;incstack = 0
 10051  0149D6  0E00               	movlw	0
 10052  0149D8  0100               	movlb	0	; () banked
 10053  0149DA  6F82               	movwf	LCD_DrawField@i& (0+255),b
 10054                           
 10055                           ; BSR set to: 0
 10056                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
 10057  0149DC  0100               	movlb	0	; () banked
 10058  0149DE  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
 10059  0149E0  0100               	movlb	0	; () banked
 10060  0149E2  2578               	addwf	LCD_DrawField@pSize& (0+255),w,b
 10061  0149E4  0100               	movlb	0	; () banked
 10062  0149E6  6F80               	movwf	LCD_DrawField@xmax& (0+255),b
 10063                           
 10064                           ; BSR set to: 0
 10065                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
 10066  0149E8  0100               	movlb	0	; () banked
 10067  0149EA  5176               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
 10068  0149EC  0100               	movlb	0	; () banked
 10069  0149EE  257A               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
 10070  0149F0  0100               	movlb	0	; () banked
 10071  0149F2  6F81               	movwf	LCD_DrawField@ymax& (0+255),b
 10072                           
 10073                           ; BSR set to: 0
 10074                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
 10075  0149F4  C07A  F060         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
 10076  0149F8  C07B  F061         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
 10077  0149FC  C078  F062         	movff	LCD_DrawField@pSize,___wmul@multiplicand
 10078  014A00  C079  F063         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
 10079  014A04  ECE7  F0AF         	call	___wmul	;wreg free
 10080  014A08  C060  F07E         	movff	?___wmul,LCD_DrawField@count
 10081  014A0C  C061  F07F         	movff	?___wmul+1,LCD_DrawField@count+1
 10082                           
 10083                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
 10084  014A10  C076  F065         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
 10085  014A14  0100               	movlb	0	; () banked
 10086  014A16  0580               	decf	LCD_DrawField@xmax& (0+255),w,b
 10087  014A18  0100               	movlb	0	; () banked
 10088  014A1A  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 10089  014A1C  0100               	movlb	0	; () banked
 10090  014A1E  0581               	decf	LCD_DrawField@ymax& (0+255),w,b
 10091  014A20  0100               	movlb	0	; () banked
 10092  014A22  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 10093  014A24  0100               	movlb	0	; () banked
 10094  014A26  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
 10095  014A28  ECF5  F0A2         	call	_Set_Addr_Window
 10096                           
 10097                           ;LCD.c: 403: for(i = 0; i < count; i++)
 10098  014A2C  0E00               	movlw	0
 10099  014A2E  0100               	movlb	0	; () banked
 10100  014A30  6F82               	movwf	LCD_DrawField@i& (0+255),b
 10101  014A32  D013               	goto	l183
 10102  014A34                     
 10103                           ; BSR set to: 0
 10104                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
 10105                           
 10106                           ; BSR set to: 0
 10107  014A34  0100               	movlb	0	; () banked
 10108  014A36  5182               	movf	LCD_DrawField@i& (0+255),w,b
 10109  014A38  0D02               	mullw	2
 10110  014A3A  50F3               	movf	prodl,w,c
 10111  014A3C  0100               	movlb	0	; () banked
 10112  014A3E  2572               	addwf	LCD_DrawField@pField& (0+255),w,b
 10113  014A40  6ED9               	movwf	fsr2l,c
 10114  014A42  50F4               	movf	prodh,w,c
 10115  014A44  0100               	movlb	0	; () banked
 10116  014A46  2173               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
 10117  014A48  6EDA               	movwf	fsr2h,c
 10118  014A4A  CFDE F065          	movff	postinc2,LCD_Word_Write@value
 10119  014A4E  CFDD F066          	movff	postdec2,LCD_Word_Write@value+1
 10120  014A52  EC8D  F0B1         	call	_LCD_Word_Write	;wreg free
 10121  014A56  0100               	movlb	0	; () banked
 10122  014A58  2B82               	incf	LCD_DrawField@i& (0+255),f,b
 10123  014A5A                     l183:
 10124                           
 10125                           ; BSR set to: 0
 10126                           
 10127                           ; BSR set to: 0
 10128  014A5A  0100               	movlb	0	; () banked
 10129  014A5C  5182               	movf	LCD_DrawField@i& (0+255),w,b
 10130  014A5E  0100               	movlb	0	; () banked
 10131  014A60  6F7C               	movwf	??_LCD_DrawField& (0+255),b
 10132  014A62  6B7D               	clrf	(??_LCD_DrawField+1)& (0+255),b
 10133  014A64  0100               	movlb	0	; () banked
 10134  014A66  517E               	movf	LCD_DrawField@count& (0+255),w,b
 10135  014A68  0100               	movlb	0	; () banked
 10136  014A6A  5D7C               	subwf	??_LCD_DrawField& (0+255),w,b
 10137  014A6C  0100               	movlb	0	; () banked
 10138  014A6E  517F               	movf	(LCD_DrawField@count+1)& (0+255),w,b
 10139  014A70  0100               	movlb	0	; () banked
 10140  014A72  597D               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
 10141  014A74  B0D8               	btfsc	status,0,c
 10142  014A76  0012               	return	
 10143  014A78  D7DD               	goto	l184
 10144  014A7A                     __end_of_LCD_DrawField:
 10145                           	opt stack 0
 10146                           tblptru	equ	0xFF8
 10147                           tblptrh	equ	0xFF7
 10148                           tblptrl	equ	0xFF6
 10149                           tablat	equ	0xFF5
 10150                           prodh	equ	0xFF4
 10151                           prodl	equ	0xFF3
 10152                           intcon	equ	0xFF2
 10153                           postinc0	equ	0xFEE
 10154                           wreg	equ	0xFE8
 10155                           postdec1	equ	0xFE5
 10156                           fsr1h	equ	0xFE2
 10157                           fsr1l	equ	0xFE1
 10158                           indf2	equ	0xFDF
 10159                           postinc2	equ	0xFDE
 10160                           postdec2	equ	0xFDD
 10161                           fsr2h	equ	0xFDA
 10162                           fsr2l	equ	0xFD9
 10163                           status	equ	0xFD8
 10164                           
 10165 ;; *************** function ___wmul *****************
 10166 ;; Defined at:
 10167 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
 10168 ;; Parameters:    Size  Location     Type
 10169 ;;  multiplier      2    0[BANK0 ] unsigned int 
 10170 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 10171 ;; Auto vars:     Size  Location     Type
 10172 ;;  product         2    4[BANK0 ] unsigned int 
 10173 ;; Return value:  Size  Location     Type
 10174 ;;                  2    0[BANK0 ] unsigned int 
 10175 ;; Registers used:
 10176 ;;		wreg, status,2, status,0, prodl, prodh
 10177 ;; Tracked objects:
 10178 ;;		On entry : 0/0
 10179 ;;		On exit  : 0/0
 10180 ;;		Unchanged: 0/0
 10181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10182 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10183 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10185 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10186 ;;Total ram usage:        6 bytes
 10187 ;; Hardware stack levels used:    1
 10188 ;; Hardware stack levels required when called:    7
 10189 ;; This function calls:
 10190 ;;		Nothing
 10191 ;; This function is called by:
 10192 ;;		_LCD_DrawField
 10193 ;; This function uses a non-reentrant model
 10194 ;;
 10195                           
 10196                           	psect	text41
 10197  015FCE                     __ptext41:
 10198                           	opt stack 0
 10199  015FCE                     ___wmul:
 10200                           	opt stack 20
 10201                           
 10202                           ; BSR set to: 0
 10203                           ;incstack = 0
 10204  015FCE  0100               	movlb	0	; () banked
 10205  015FD0  5160               	movf	___wmul@multiplier& (0+255),w,b
 10206  015FD2  0100               	movlb	0	; () banked
 10207  015FD4  0362               	mulwf	___wmul@multiplicand& (0+255),b
 10208  015FD6  CFF3 F064          	movff	prodl,___wmul@product
 10209  015FDA  CFF4 F065          	movff	prodh,___wmul@product+1
 10210  015FDE  0100               	movlb	0	; () banked
 10211  015FE0  5160               	movf	___wmul@multiplier& (0+255),w,b
 10212  015FE2  0100               	movlb	0	; () banked
 10213  015FE4  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 10214  015FE6  50F3               	movf	prodl,w,c
 10215  015FE8  0100               	movlb	0	; () banked
 10216  015FEA  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 10217  015FEC  0100               	movlb	0	; () banked
 10218  015FEE  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 10219  015FF0  0100               	movlb	0	; () banked
 10220  015FF2  0362               	mulwf	___wmul@multiplicand& (0+255),b
 10221  015FF4  50F3               	movf	prodl,w,c
 10222  015FF6  0100               	movlb	0	; () banked
 10223  015FF8  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 10224                           
 10225                           ; BSR set to: 0
 10226  015FFA  C064  F060         	movff	___wmul@product,?___wmul
 10227  015FFE  C065  F061         	movff	___wmul@product+1,?___wmul+1
 10228  016002  0012               	return	
 10229  016004                     __end_of___wmul:
 10230                           	opt stack 0
 10231                           tblptru	equ	0xFF8
 10232                           tblptrh	equ	0xFF7
 10233                           tblptrl	equ	0xFF6
 10234                           tablat	equ	0xFF5
 10235                           prodh	equ	0xFF4
 10236                           prodl	equ	0xFF3
 10237                           intcon	equ	0xFF2
 10238                           postinc0	equ	0xFEE
 10239                           wreg	equ	0xFE8
 10240                           postdec1	equ	0xFE5
 10241                           fsr1h	equ	0xFE2
 10242                           fsr1l	equ	0xFE1
 10243                           indf2	equ	0xFDF
 10244                           postinc2	equ	0xFDE
 10245                           postdec2	equ	0xFDD
 10246                           fsr2h	equ	0xFDA
 10247                           fsr2l	equ	0xFD9
 10248                           status	equ	0xFD8
 10249                           
 10250 ;; *************** function _Console_MakeField *****************
 10251 ;; Defined at:
 10252 ;;		line 435 in file "Library/Console.c"
 10253 ;; Parameters:    Size  Location     Type
 10254 ;;  pInput          1    wreg     unsigned char 
 10255 ;; Auto vars:     Size  Location     Type
 10256 ;;  pInput          1   11[BANK0 ] unsigned char 
 10257 ;;  y               1   17[BANK0 ] unsigned char 
 10258 ;;  x               1   16[BANK0 ] unsigned char 
 10259 ;;  Column          2   12[BANK0 ] PTR struct Byte
 10260 ;;		 -> Font5x7(480), 
 10261 ;;  Index           2    9[BANK0 ] unsigned short 
 10262 ;; Return value:  Size  Location     Type
 10263 ;;                  2    5[BANK0 ] PTR unsigned short 
 10264 ;; Registers used:
 10265 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10266 ;; Tracked objects:
 10267 ;;		On entry : 0/0
 10268 ;;		On exit  : 0/0
 10269 ;;		Unchanged: 0/0
 10270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10271 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10272 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10273 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10274 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10275 ;;Total ram usage:       13 bytes
 10276 ;; Hardware stack levels used:    1
 10277 ;; Hardware stack levels required when called:    8
 10278 ;; This function calls:
 10279 ;;		_Byte_GetBit
 10280 ;; This function is called by:
 10281 ;;		_Console_Render
 10282 ;; This function uses a non-reentrant model
 10283 ;;
 10284                           
 10285                           	psect	text42
 10286  013DE2                     __ptext42:
 10287                           	opt stack 0
 10288  013DE2                     _Console_MakeField:
 10289                           	opt stack 20
 10290                           
 10291                           ; BSR set to: 0
 10292                           ;incstack = 0
 10293                           ;Console_MakeField@pInput stored from wreg
 10294  013DE2  0100               	movlb	0	; () banked
 10295  013DE4  6F6B               	movwf	Console_MakeField@pInput& (0+255),b
 10296                           
 10297                           ;Console.c: 437: static Colour Fill[7][5];
 10298                           ;Console.c: 438: pInput -= 32;
 10299  013DE6  0E20               	movlw	32
 10300  013DE8  0100               	movlb	0	; () banked
 10301  013DEA  5F6B               	subwf	Console_MakeField@pInput& (0+255),f,b
 10302                           
 10303                           ; BSR set to: 0
 10304                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
 10305  013DEC  0100               	movlb	0	; () banked
 10306  013DEE  516B               	movf	Console_MakeField@pInput& (0+255),w,b
 10307  013DF0  0D05               	mullw	5
 10308  013DF2  CFF3 F069          	movff	prodl,Console_MakeField@Index
 10309  013DF6  CFF4 F06A          	movff	prodh,Console_MakeField@Index+1
 10310                           
 10311                           ; BSR set to: 0
 10312                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 10313  013DFA  0E85               	movlw	low _Font5x7
 10314  013DFC  0100               	movlb	0	; () banked
 10315  013DFE  2569               	addwf	Console_MakeField@Index& (0+255),w,b
 10316  013E00  0100               	movlb	0	; () banked
 10317  013E02  6F6C               	movwf	Console_MakeField@Column& (0+255),b
 10318  013E04  0EFD               	movlw	high _Font5x7
 10319  013E06  0100               	movlb	0	; () banked
 10320  013E08  216A               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 10321  013E0A  0100               	movlb	0	; () banked
 10322  013E0C  6F6D               	movwf	(Console_MakeField@Column+1)& (0+255),b
 10323                           
 10324                           ; BSR set to: 0
 10325                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
 10326  013E0E  0E00               	movlw	0
 10327  013E10  0100               	movlb	0	; () banked
 10328  013E12  6F70               	movwf	Console_MakeField@x& (0+255),b
 10329  013E14                     l13524:
 10330                           
 10331                           ; BSR set to: 0
 10332  013E14  0E04               	movlw	4
 10333  013E16  0100               	movlb	0	; () banked
 10334  013E18  6570               	cpfsgt	Console_MakeField@x& (0+255),b
 10335  013E1A  D001               	goto	l1077
 10336  013E1C  D043               	goto	u10030
 10337  013E1E                     l1077:
 10338                           
 10339                           ; BSR set to: 0
 10340                           ;Console.c: 444: {
 10341                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
 10342                           
 10343                           ; BSR set to: 0
 10344  013E1E  0E00               	movlw	0
 10345  013E20  0100               	movlb	0	; () banked
 10346  013E22  6F71               	movwf	Console_MakeField@y& (0+255),b
 10347  013E24                     l13530:
 10348                           
 10349                           ; BSR set to: 0
 10350  013E24  0E06               	movlw	6
 10351  013E26  0100               	movlb	0	; () banked
 10352  013E28  6571               	cpfsgt	Console_MakeField@y& (0+255),b
 10353  013E2A  D001               	goto	l1079
 10354  013E2C  D035               	goto	u10020
 10355  013E2E                     l1079:
 10356                           
 10357                           ; BSR set to: 0
 10358                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 10359                           
 10360                           ; BSR set to: 0
 10361  013E2E  C06C  F060         	movff	Console_MakeField@Column,Byte_GetBit@pInput
 10362  013E32  C06D  F061         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 10363  013E36  C071  F062         	movff	Console_MakeField@y,Byte_GetBit@pBit
 10364  013E3A  EC1D  F0B0         	call	_Byte_GetBit	;wreg free
 10365  013E3E  0900               	iorlw	0
 10366  013E40  A4D8               	btfss	status,2,c
 10367  013E42  D005               	goto	l1082
 10368  013E44  C0DC  F06E         	movff	_gBackcolour,_Console_MakeField$10974
 10369  013E48  C0DD  F06F         	movff	_gBackcolour+1,_Console_MakeField$10974+1
 10370  013E4C  D004               	goto	l1084
 10371  013E4E                     l1082:
 10372  013E4E  C0FD  F06E         	movff	_gForecolour,_Console_MakeField$10974
 10373  013E52  C0FE  F06F         	movff	_gForecolour+1,_Console_MakeField$10974+1
 10374  013E56                     l1084:
 10375  013E56  0100               	movlb	0	; () banked
 10376  013E58  5171               	movf	Console_MakeField@y& (0+255),w,b
 10377  013E5A  0D0A               	mullw	10
 10378  013E5C  0E82               	movlw	low Console_MakeField@Fill
 10379  013E5E  0100               	movlb	0	; () banked
 10380  013E60  6F67               	movwf	??_Console_MakeField& (0+255),b
 10381  013E62  0E04               	movlw	high Console_MakeField@Fill
 10382  013E64  0100               	movlb	0	; () banked
 10383  013E66  6F68               	movwf	(??_Console_MakeField+1)& (0+255),b
 10384  013E68  50F3               	movf	prodl,w,c
 10385  013E6A  0100               	movlb	0	; () banked
 10386  013E6C  2767               	addwf	??_Console_MakeField& (0+255),f,b
 10387  013E6E  50F4               	movf	prodh,w,c
 10388  013E70  0100               	movlb	0	; () banked
 10389  013E72  2368               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 10390  013E74  0100               	movlb	0	; () banked
 10391  013E76  5170               	movf	Console_MakeField@x& (0+255),w,b
 10392  013E78  0D02               	mullw	2
 10393  013E7A  50F3               	movf	prodl,w,c
 10394  013E7C  0100               	movlb	0	; () banked
 10395  013E7E  2567               	addwf	??_Console_MakeField& (0+255),w,b
 10396  013E80  6ED9               	movwf	fsr2l,c
 10397  013E82  50F4               	movf	prodh,w,c
 10398  013E84  0100               	movlb	0	; () banked
 10399  013E86  2168               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 10400  013E88  6EDA               	movwf	fsr2h,c
 10401  013E8A  C06E  FFDE         	movff	_Console_MakeField$10974,postinc2
 10402  013E8E  C06F  FFDD         	movff	_Console_MakeField$10974+1,postdec2
 10403                           
 10404                           ; BSR set to: 0
 10405  013E92  0100               	movlb	0	; () banked
 10406  013E94  2B71               	incf	Console_MakeField@y& (0+255),f,b
 10407  013E96  D7C6               	goto	l13530
 10408  013E98                     u10020:
 10409                           
 10410                           ; BSR set to: 0
 10411                           ;Console.c: 447: Column += 1;
 10412                           
 10413                           ; BSR set to: 0
 10414  013E98  0100               	movlb	0	; () banked
 10415  013E9A  4B6C               	infsnz	Console_MakeField@Column& (0+255),f,b
 10416  013E9C  2B6D               	incf	(Console_MakeField@Column+1)& (0+255),f,b
 10417  013E9E  0100               	movlb	0	; () banked
 10418  013EA0  2B70               	incf	Console_MakeField@x& (0+255),f,b
 10419  013EA2  D7B8               	goto	l13524
 10420  013EA4                     u10030:
 10421                           
 10422                           ; BSR set to: 0
 10423                           ;Console.c: 448: }
 10424                           ;Console.c: 449: return (ColourPtr)Fill;
 10425                           
 10426                           ; BSR set to: 0
 10427  013EA4  0E82               	movlw	low Console_MakeField@Fill
 10428  013EA6  0100               	movlb	0	; () banked
 10429  013EA8  6F65               	movwf	?_Console_MakeField& (0+255),b
 10430  013EAA  0E04               	movlw	high Console_MakeField@Fill
 10431  013EAC  0100               	movlb	0	; () banked
 10432  013EAE  6F66               	movwf	(?_Console_MakeField+1)& (0+255),b
 10433  013EB0  0012               	return	
 10434  013EB2                     __end_of_Console_MakeField:
 10435                           	opt stack 0
 10436                           tblptru	equ	0xFF8
 10437                           tblptrh	equ	0xFF7
 10438                           tblptrl	equ	0xFF6
 10439                           tablat	equ	0xFF5
 10440                           prodh	equ	0xFF4
 10441                           prodl	equ	0xFF3
 10442                           intcon	equ	0xFF2
 10443                           postinc0	equ	0xFEE
 10444                           wreg	equ	0xFE8
 10445                           postdec1	equ	0xFE5
 10446                           fsr1h	equ	0xFE2
 10447                           fsr1l	equ	0xFE1
 10448                           indf2	equ	0xFDF
 10449                           postinc2	equ	0xFDE
 10450                           postdec2	equ	0xFDD
 10451                           fsr2h	equ	0xFDA
 10452                           fsr2l	equ	0xFD9
 10453                           status	equ	0xFD8
 10454                           
 10455 ;; *************** function _Byte_GetBit *****************
 10456 ;; Defined at:
 10457 ;;		line 38 in file "Library/Types.c"
 10458 ;; Parameters:    Size  Location     Type
 10459 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 10460 ;;		 -> Font5x7(480), 
 10461 ;;  pBit            1    2[BANK0 ] unsigned char 
 10462 ;; Auto vars:     Size  Location     Type
 10463 ;;  Output          1    4[BANK0 ] unsigned char 
 10464 ;; Return value:  Size  Location     Type
 10465 ;;                  1    wreg      unsigned char 
 10466 ;; Registers used:
 10467 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 10468 ;; Tracked objects:
 10469 ;;		On entry : 0/0
 10470 ;;		On exit  : 0/0
 10471 ;;		Unchanged: 0/0
 10472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10473 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10474 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10475 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10476 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10477 ;;Total ram usage:        5 bytes
 10478 ;; Hardware stack levels used:    1
 10479 ;; Hardware stack levels required when called:    7
 10480 ;; This function calls:
 10481 ;;		Nothing
 10482 ;; This function is called by:
 10483 ;;		_Console_MakeField
 10484 ;;		_Word_GetBit
 10485 ;; This function uses a non-reentrant model
 10486 ;;
 10487                           
 10488                           	psect	text43
 10489  01603A                     __ptext43:
 10490                           	opt stack 0
 10491  01603A                     _Byte_GetBit:
 10492                           	opt stack 20
 10493                           
 10494                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 10495                           
 10496                           ; BSR set to: 0
 10497                           ;incstack = 0
 10498  01603A  C060  FFF6         	movff	Byte_GetBit@pInput,tblptrl
 10499  01603E  C061  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 10500  016042                     	if	0	;tblptru may be non-zero
 10501  016042                     	endif
 10502  016042                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10503  016042  0E00               	movlw	low (__mediumconst shr (0+16))
 10504  016044  6EF8               	movwf	tblptru,c
 10505  016046                     	endif
 10506  016046  0008               	tblrd		*
 10507  016048  CFF5 F064          	movff	tablat,Byte_GetBit@Output
 10508                           
 10509                           ;Types.c: 42: Output >>= pBit;
 10510  01604C  0100               	movlb	0	; () banked
 10511  01604E  2962               	incf	Byte_GetBit@pBit& (0+255),w,b
 10512  016050  0100               	movlb	0	; () banked
 10513  016052  6F63               	movwf	??_Byte_GetBit& (0+255),b
 10514  016054  D003               	goto	u9670
 10515  016056                     u9675:
 10516  016056  0100               	movlb	0	; () banked
 10517  016058  90D8               	bcf	status,0,c
 10518  01605A  3364               	rrcf	Byte_GetBit@Output& (0+255),f,b
 10519  01605C                     u9670:
 10520  01605C  0100               	movlb	0	; () banked
 10521  01605E  2F63               	decfsz	??_Byte_GetBit& (0+255),f,b
 10522  016060  D7FA               	goto	u9675
 10523                           
 10524                           ;Types.c: 43: Output &= 1;
 10525  016062  0E01               	movlw	1
 10526  016064  0100               	movlb	0	; () banked
 10527  016066  1764               	andwf	Byte_GetBit@Output& (0+255),f,b
 10528                           
 10529                           ; BSR set to: 0
 10530                           ;Types.c: 44: return Output;
 10531  016068  0100               	movlb	0	; () banked
 10532  01606A  5164               	movf	Byte_GetBit@Output& (0+255),w,b
 10533  01606C  0012               	return	
 10534  01606E                     __end_of_Byte_GetBit:
 10535                           	opt stack 0
 10536                           tblptru	equ	0xFF8
 10537                           tblptrh	equ	0xFF7
 10538                           tblptrl	equ	0xFF6
 10539                           tablat	equ	0xFF5
 10540                           prodh	equ	0xFF4
 10541                           prodl	equ	0xFF3
 10542                           intcon	equ	0xFF2
 10543                           postinc0	equ	0xFEE
 10544                           wreg	equ	0xFE8
 10545                           postdec1	equ	0xFE5
 10546                           fsr1h	equ	0xFE2
 10547                           fsr1l	equ	0xFE1
 10548                           indf2	equ	0xFDF
 10549                           postinc2	equ	0xFDE
 10550                           postdec2	equ	0xFDD
 10551                           fsr2h	equ	0xFDA
 10552                           fsr2l	equ	0xFD9
 10553                           status	equ	0xFD8
 10554                           
 10555 ;; *************** function _ADC_Voltage *****************
 10556 ;; Defined at:
 10557 ;;		line 259 in file "Library/ADC.c"
 10558 ;; Parameters:    Size  Location     Type
 10559 ;;  pInput          2   64[BANK0 ] PTR struct ADC
 10560 ;;		 -> ADC_AN0(5), 
 10561 ;; Auto vars:     Size  Location     Type
 10562 ;;  output          4   78[BANK0 ] float 
 10563 ;;  ref             4   74[BANK0 ] const float 
 10564 ;;  max             4   70[BANK0 ] const float 
 10565 ;; Return value:  Size  Location     Type
 10566 ;;                  4   64[BANK0 ] float 
 10567 ;; Registers used:
 10568 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10569 ;; Tracked objects:
 10570 ;;		On entry : 0/0
 10571 ;;		On exit  : 0/0
 10572 ;;		Unchanged: 0/0
 10573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10574 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10575 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10576 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10577 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10578 ;;Total ram usage:       18 bytes
 10579 ;; Hardware stack levels used:    1
 10580 ;; Hardware stack levels required when called:    8
 10581 ;; This function calls:
 10582 ;;		___fldiv
 10583 ;;		___flmul
 10584 ;;		___xxtofl
 10585 ;; This function is called by:
 10586 ;;		_mode1
 10587 ;;		_mode4
 10588 ;; This function uses a non-reentrant model
 10589 ;;
 10590                           
 10591                           	psect	text44
 10592  013A88                     __ptext44:
 10593                           	opt stack 0
 10594  013A88                     _ADC_Voltage:
 10595                           	opt stack 21
 10596                           
 10597                           ;ADC.c: 261: const float max = 1024;
 10598                           
 10599                           ; BSR set to: 0
 10600                           ;incstack = 0
 10601  013A88  0E00               	movlw	0
 10602  013A8A  0100               	movlb	0	; () banked
 10603  013A8C  6FA6               	movwf	ADC_Voltage@max& (0+255),b
 10604  013A8E  0E00               	movlw	0
 10605  013A90  6FA7               	movwf	(ADC_Voltage@max+1)& (0+255),b
 10606  013A92  0E80               	movlw	128
 10607  013A94  6FA8               	movwf	(ADC_Voltage@max+2)& (0+255),b
 10608  013A96  0E44               	movlw	68
 10609  013A98  6FA9               	movwf	(ADC_Voltage@max+3)& (0+255),b
 10610                           
 10611                           ;ADC.c: 262: const float ref = ((float)3.3-(float)0.000);
 10612  013A9A  0E33               	movlw	51
 10613  013A9C  0100               	movlb	0	; () banked
 10614  013A9E  6FAA               	movwf	ADC_Voltage@ref& (0+255),b
 10615  013AA0  0E33               	movlw	51
 10616  013AA2  6FAB               	movwf	(ADC_Voltage@ref+1)& (0+255),b
 10617  013AA4  0E53               	movlw	83
 10618  013AA6  6FAC               	movwf	(ADC_Voltage@ref+2)& (0+255),b
 10619  013AA8  0E40               	movlw	64
 10620  013AAA  6FAD               	movwf	(ADC_Voltage@ref+3)& (0+255),b
 10621                           
 10622                           ; BSR set to: 0
 10623                           ;ADC.c: 263: float output = pInput->mValue;
 10624  013AAC  0100               	movlb	0	; () banked
 10625  013AAE  EE20 F001          	lfsr	2,1
 10626  013AB2  51A0               	movf	ADC_Voltage@pInput& (0+255),w,b
 10627  013AB4  26D9               	addwf	fsr2l,f,c
 10628  013AB6  51A1               	movf	(ADC_Voltage@pInput+1)& (0+255),w,b
 10629  013AB8  22DA               	addwfc	fsr2h,f,c
 10630  013ABA  CFDE F0A4          	movff	postinc2,??_ADC_Voltage
 10631  013ABE  CFDD F0A5          	movff	postdec2,??_ADC_Voltage+1
 10632  013AC2  C0A4  F060         	movff	??_ADC_Voltage,___xxtofl@val
 10633  013AC6  C0A5  F061         	movff	??_ADC_Voltage+1,___xxtofl@val+1
 10634  013ACA  0100               	movlb	0	; () banked
 10635  013ACC  6B62               	clrf	(___xxtofl@val+2)& (0+255),b
 10636  013ACE  6B63               	clrf	(___xxtofl@val+3)& (0+255),b
 10637  013AD0  0E00               	movlw	0
 10638  013AD2  EC97  F091         	call	___xxtofl
 10639  013AD6  C060  F0AE         	movff	?___xxtofl,ADC_Voltage@output
 10640  013ADA  C061  F0AF         	movff	?___xxtofl+1,ADC_Voltage@output+1
 10641  013ADE  C062  F0B0         	movff	?___xxtofl+2,ADC_Voltage@output+2
 10642  013AE2  C063  F0B1         	movff	?___xxtofl+3,ADC_Voltage@output+3
 10643                           
 10644                           ;ADC.c: 265: output /= max;
 10645  013AE6  C0AE  F06E         	movff	ADC_Voltage@output,___fldiv@b
 10646  013AEA  C0AF  F06F         	movff	ADC_Voltage@output+1,___fldiv@b+1
 10647  013AEE  C0B0  F070         	movff	ADC_Voltage@output+2,___fldiv@b+2
 10648  013AF2  C0B1  F071         	movff	ADC_Voltage@output+3,___fldiv@b+3
 10649  013AF6  C0A6  F072         	movff	ADC_Voltage@max,___fldiv@a
 10650  013AFA  C0A7  F073         	movff	ADC_Voltage@max+1,___fldiv@a+1
 10651  013AFE  C0A8  F074         	movff	ADC_Voltage@max+2,___fldiv@a+2
 10652  013B02  C0A9  F075         	movff	ADC_Voltage@max+3,___fldiv@a+3
 10653  013B06  EC53  F088         	call	___fldiv	;wreg free
 10654  013B0A  C06E  F0AE         	movff	?___fldiv,ADC_Voltage@output
 10655  013B0E  C06F  F0AF         	movff	?___fldiv+1,ADC_Voltage@output+1
 10656  013B12  C070  F0B0         	movff	?___fldiv+2,ADC_Voltage@output+2
 10657  013B16  C071  F0B1         	movff	?___fldiv+3,ADC_Voltage@output+3
 10658                           
 10659                           ;ADC.c: 266: output *= ref;
 10660  013B1A  C0AE  F087         	movff	ADC_Voltage@output,___flmul@b
 10661  013B1E  C0AF  F088         	movff	ADC_Voltage@output+1,___flmul@b+1
 10662  013B22  C0B0  F089         	movff	ADC_Voltage@output+2,___flmul@b+2
 10663  013B26  C0B1  F08A         	movff	ADC_Voltage@output+3,___flmul@b+3
 10664  013B2A  C0AA  F08B         	movff	ADC_Voltage@ref,___flmul@a
 10665  013B2E  C0AB  F08C         	movff	ADC_Voltage@ref+1,___flmul@a+1
 10666  013B32  C0AC  F08D         	movff	ADC_Voltage@ref+2,___flmul@a+2
 10667  013B36  C0AD  F08E         	movff	ADC_Voltage@ref+3,___flmul@a+3
 10668  013B3A  EC00  F080         	call	___flmul	;wreg free
 10669  013B3E  C087  F0AE         	movff	?___flmul,ADC_Voltage@output
 10670  013B42  C088  F0AF         	movff	?___flmul+1,ADC_Voltage@output+1
 10671  013B46  C089  F0B0         	movff	?___flmul+2,ADC_Voltage@output+2
 10672  013B4A  C08A  F0B1         	movff	?___flmul+3,ADC_Voltage@output+3
 10673                           
 10674                           ;ADC.c: 268: return output + (float)0.000;
 10675  013B4E  C0AE  F0A0         	movff	ADC_Voltage@output,?_ADC_Voltage
 10676  013B52  C0AF  F0A1         	movff	ADC_Voltage@output+1,?_ADC_Voltage+1
 10677  013B56  C0B0  F0A2         	movff	ADC_Voltage@output+2,?_ADC_Voltage+2
 10678  013B5A  C0B1  F0A3         	movff	ADC_Voltage@output+3,?_ADC_Voltage+3
 10679  013B5E  0012               	return	
 10680  013B60                     __end_of_ADC_Voltage:
 10681                           	opt stack 0
 10682                           tblptru	equ	0xFF8
 10683                           tblptrh	equ	0xFF7
 10684                           tblptrl	equ	0xFF6
 10685                           tablat	equ	0xFF5
 10686                           prodh	equ	0xFF4
 10687                           prodl	equ	0xFF3
 10688                           intcon	equ	0xFF2
 10689                           postinc0	equ	0xFEE
 10690                           wreg	equ	0xFE8
 10691                           postdec1	equ	0xFE5
 10692                           fsr1h	equ	0xFE2
 10693                           fsr1l	equ	0xFE1
 10694                           indf2	equ	0xFDF
 10695                           postinc2	equ	0xFDE
 10696                           postdec2	equ	0xFDD
 10697                           fsr2h	equ	0xFDA
 10698                           fsr2l	equ	0xFD9
 10699                           status	equ	0xFD8
 10700                           
 10701 ;; *************** function ___xxtofl *****************
 10702 ;; Defined at:
 10703 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\xxtofl.c"
 10704 ;; Parameters:    Size  Location     Type
 10705 ;;  sign            1    wreg     unsigned char 
 10706 ;;  val             4    0[BANK0 ] long 
 10707 ;; Auto vars:     Size  Location     Type
 10708 ;;  sign            1    8[BANK0 ] unsigned char 
 10709 ;;  arg             4   10[BANK0 ] unsigned long 
 10710 ;;  exp             1    9[BANK0 ] unsigned char 
 10711 ;; Return value:  Size  Location     Type
 10712 ;;                  4    0[BANK0 ] unsigned char 
 10713 ;; Registers used:
 10714 ;;		wreg, status,2, status,0
 10715 ;; Tracked objects:
 10716 ;;		On entry : 0/0
 10717 ;;		On exit  : 0/0
 10718 ;;		Unchanged: 0/0
 10719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10720 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10721 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10722 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10723 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10724 ;;Total ram usage:       14 bytes
 10725 ;; Hardware stack levels used:    1
 10726 ;; Hardware stack levels required when called:    7
 10727 ;; This function calls:
 10728 ;;		Nothing
 10729 ;; This function is called by:
 10730 ;;		_ADC_Voltage
 10731 ;;		_mode4
 10732 ;; This function uses a non-reentrant model
 10733 ;;
 10734                           
 10735                           	psect	text45
 10736  01232E                     __ptext45:
 10737                           	opt stack 0
 10738  01232E                     ___xxtofl:
 10739                           	opt stack 22
 10740                           
 10741                           ;incstack = 0
 10742                           ;___xxtofl@sign stored from wreg
 10743  01232E  0100               	movlb	0	; () banked
 10744  012330  6F68               	movwf	___xxtofl@sign& (0+255),b
 10745  012332  0100               	movlb	0	; () banked
 10746  012334  5168               	movf	___xxtofl@sign& (0+255),w,b
 10747  012336  0100               	movlb	0	; () banked
 10748  012338  B4D8               	btfsc	status,2,c
 10749  01233A  D01E               	goto	l2990
 10750                           
 10751                           ; BSR set to: 0
 10752  01233C  0100               	movlb	0	; () banked
 10753  01233E  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 10754  012340  D01B               	goto	l2990
 10755                           
 10756                           ; BSR set to: 0
 10757  012342  C060  F064         	movff	___xxtofl@val,??___xxtofl
 10758  012346  C061  F065         	movff	___xxtofl@val+1,??___xxtofl+1
 10759  01234A  C062  F066         	movff	___xxtofl@val+2,??___xxtofl+2
 10760  01234E  C063  F067         	movff	___xxtofl@val+3,??___xxtofl+3
 10761  012352  0100               	movlb	0	; () banked
 10762  012354  1F64               	comf	??___xxtofl& (0+255),f,b
 10763  012356  1F65               	comf	(??___xxtofl+1)& (0+255),f,b
 10764  012358  1F66               	comf	(??___xxtofl+2)& (0+255),f,b
 10765  01235A  1F67               	comf	(??___xxtofl+3)& (0+255),f,b
 10766  01235C  2B64               	incf	??___xxtofl& (0+255),f,b
 10767  01235E  0E00               	movlw	0
 10768  012360  2365               	addwfc	(??___xxtofl+1)& (0+255),f,b
 10769  012362  2366               	addwfc	(??___xxtofl+2)& (0+255),f,b
 10770  012364  2367               	addwfc	(??___xxtofl+3)& (0+255),f,b
 10771  012366  C064  F06A         	movff	??___xxtofl,___xxtofl@arg
 10772  01236A  C065  F06B         	movff	??___xxtofl+1,___xxtofl@arg+1
 10773  01236E  C066  F06C         	movff	??___xxtofl+2,___xxtofl@arg+2
 10774  012372  C067  F06D         	movff	??___xxtofl+3,___xxtofl@arg+3
 10775  012376  D008               	goto	l2991
 10776  012378                     l2990:
 10777                           
 10778                           ; BSR set to: 0
 10779  012378  C060  F06A         	movff	___xxtofl@val,___xxtofl@arg
 10780  01237C  C061  F06B         	movff	___xxtofl@val+1,___xxtofl@arg+1
 10781  012380  C062  F06C         	movff	___xxtofl@val+2,___xxtofl@arg+2
 10782  012384  C063  F06D         	movff	___xxtofl@val+3,___xxtofl@arg+3
 10783  012388                     l2991:
 10784                           
 10785                           ; BSR set to: 0
 10786                           
 10787                           ; BSR set to: 0
 10788  012388  0100               	movlb	0	; () banked
 10789  01238A  5160               	movf	___xxtofl@val& (0+255),w,b
 10790  01238C  0100               	movlb	0	; () banked
 10791  01238E  1161               	iorwf	(___xxtofl@val+1)& (0+255),w,b
 10792  012390  0100               	movlb	0	; () banked
 10793  012392  1162               	iorwf	(___xxtofl@val+2)& (0+255),w,b
 10794  012394  0100               	movlb	0	; () banked
 10795  012396  1163               	iorwf	(___xxtofl@val+3)& (0+255),w,b
 10796  012398  A4D8               	btfss	status,2,c
 10797  01239A  D00A               	goto	l2992
 10798                           
 10799                           ; BSR set to: 0
 10800  01239C  0E00               	movlw	0
 10801  01239E  0100               	movlb	0	; () banked
 10802  0123A0  6F60               	movwf	?___xxtofl& (0+255),b
 10803  0123A2  0E00               	movlw	0
 10804  0123A4  6F61               	movwf	(?___xxtofl+1)& (0+255),b
 10805  0123A6  0E00               	movlw	0
 10806  0123A8  6F62               	movwf	(?___xxtofl+2)& (0+255),b
 10807  0123AA  0E00               	movlw	0
 10808  0123AC  6F63               	movwf	(?___xxtofl+3)& (0+255),b
 10809                           
 10810                           ; BSR set to: 0
 10811  0123AE  0012               	return	
 10812  0123B0                     l2992:
 10813                           
 10814                           ; BSR set to: 0
 10815                           
 10816                           ; BSR set to: 0
 10817  0123B0  0E96               	movlw	150
 10818  0123B2  0100               	movlb	0	; () banked
 10819  0123B4  6F69               	movwf	___xxtofl@exp& (0+255),b
 10820  0123B6  D008               	goto	l2994
 10821  0123B8                     
 10822                           ; BSR set to: 0
 10823                           
 10824                           ; BSR set to: 0
 10825  0123B8  0100               	movlb	0	; () banked
 10826  0123BA  2B69               	incf	___xxtofl@exp& (0+255),f,b
 10827  0123BC  0100               	movlb	0	; () banked
 10828  0123BE  90D8               	bcf	status,0,c
 10829  0123C0  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 10830  0123C2  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 10831  0123C4  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 10832  0123C6  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 10833  0123C8                     l2994:
 10834                           
 10835                           ; BSR set to: 0
 10836                           
 10837                           ; BSR set to: 0
 10838  0123C8  0E00               	movlw	0
 10839  0123CA  0100               	movlb	0	; () banked
 10840  0123CC  156A               	andwf	___xxtofl@arg& (0+255),w,b
 10841  0123CE  0100               	movlb	0	; () banked
 10842  0123D0  6F64               	movwf	??___xxtofl& (0+255),b
 10843  0123D2  0E00               	movlw	0
 10844  0123D4  0100               	movlb	0	; () banked
 10845  0123D6  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 10846  0123D8  0100               	movlb	0	; () banked
 10847  0123DA  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 10848  0123DC  0E00               	movlw	0
 10849  0123DE  0100               	movlb	0	; () banked
 10850  0123E0  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 10851  0123E2  0100               	movlb	0	; () banked
 10852  0123E4  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 10853  0123E6  0EFE               	movlw	254
 10854  0123E8  0100               	movlb	0	; () banked
 10855  0123EA  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 10856  0123EC  0100               	movlb	0	; () banked
 10857  0123EE  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 10858  0123F0  0100               	movlb	0	; () banked
 10859  0123F2  5164               	movf	??___xxtofl& (0+255),w,b
 10860  0123F4  0100               	movlb	0	; () banked
 10861  0123F6  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 10862  0123F8  0100               	movlb	0	; () banked
 10863  0123FA  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 10864  0123FC  0100               	movlb	0	; () banked
 10865  0123FE  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 10866  012400  B4D8               	btfsc	status,2,c
 10867  012402  D010               	goto	l2997
 10868  012404  D7D9               	goto	l2995
 10869  012406                     
 10870                           ; BSR set to: 0
 10871                           
 10872                           ; BSR set to: 0
 10873  012406  0100               	movlb	0	; () banked
 10874  012408  2B69               	incf	___xxtofl@exp& (0+255),f,b
 10875                           
 10876                           ; BSR set to: 0
 10877  01240A  0E01               	movlw	1
 10878  01240C  0100               	movlb	0	; () banked
 10879  01240E  276A               	addwf	___xxtofl@arg& (0+255),f,b
 10880  012410  0E00               	movlw	0
 10881  012412  236B               	addwfc	(___xxtofl@arg+1)& (0+255),f,b
 10882  012414  236C               	addwfc	(___xxtofl@arg+2)& (0+255),f,b
 10883  012416  236D               	addwfc	(___xxtofl@arg+3)& (0+255),f,b
 10884                           
 10885                           ; BSR set to: 0
 10886  012418  0100               	movlb	0	; () banked
 10887  01241A  90D8               	bcf	status,0,c
 10888  01241C  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 10889  01241E  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 10890  012420  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 10891  012422  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 10892  012424                     l2997:
 10893                           
 10894                           ; BSR set to: 0
 10895  012424  0E00               	movlw	0
 10896  012426  0100               	movlb	0	; () banked
 10897  012428  156A               	andwf	___xxtofl@arg& (0+255),w,b
 10898  01242A  0100               	movlb	0	; () banked
 10899  01242C  6F64               	movwf	??___xxtofl& (0+255),b
 10900  01242E  0E00               	movlw	0
 10901  012430  0100               	movlb	0	; () banked
 10902  012432  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 10903  012434  0100               	movlb	0	; () banked
 10904  012436  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 10905  012438  0E00               	movlw	0
 10906  01243A  0100               	movlb	0	; () banked
 10907  01243C  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 10908  01243E  0100               	movlb	0	; () banked
 10909  012440  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 10910  012442  0EFF               	movlw	255
 10911  012444  0100               	movlb	0	; () banked
 10912  012446  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 10913  012448  0100               	movlb	0	; () banked
 10914  01244A  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 10915  01244C  0100               	movlb	0	; () banked
 10916  01244E  5164               	movf	??___xxtofl& (0+255),w,b
 10917  012450  0100               	movlb	0	; () banked
 10918  012452  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 10919  012454  0100               	movlb	0	; () banked
 10920  012456  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 10921  012458  0100               	movlb	0	; () banked
 10922  01245A  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 10923  01245C  B4D8               	btfsc	status,2,c
 10924  01245E  D009               	goto	l3000
 10925  012460  D7D2               	goto	l2998
 10926  012462                     
 10927                           ; BSR set to: 0
 10928                           
 10929                           ; BSR set to: 0
 10930  012462  0100               	movlb	0	; () banked
 10931  012464  0769               	decf	___xxtofl@exp& (0+255),f,b
 10932  012466  0100               	movlb	0	; () banked
 10933  012468  90D8               	bcf	status,0,c
 10934  01246A  376A               	rlcf	___xxtofl@arg& (0+255),f,b
 10935  01246C  376B               	rlcf	(___xxtofl@arg+1)& (0+255),f,b
 10936  01246E  376C               	rlcf	(___xxtofl@arg+2)& (0+255),f,b
 10937  012470  376D               	rlcf	(___xxtofl@arg+3)& (0+255),f,b
 10938  012472                     l3000:
 10939                           
 10940                           ; BSR set to: 0
 10941                           
 10942                           ; BSR set to: 0
 10943  012472  0100               	movlb	0	; () banked
 10944  012474  BF6C               	btfsc	(___xxtofl@arg+2)& (0+255),7,b
 10945  012476  D004               	goto	u10760
 10946                           
 10947                           ; BSR set to: 0
 10948  012478  0E02               	movlw	2
 10949  01247A  0100               	movlb	0	; () banked
 10950  01247C  6169               	cpfslt	___xxtofl@exp& (0+255),b
 10951  01247E  D7F1               	goto	l3001
 10952  012480                     u10760:
 10953                           
 10954                           ; BSR set to: 0
 10955                           
 10956                           ; BSR set to: 0
 10957  012480  0100               	movlb	0	; () banked
 10958  012482  B169               	btfsc	___xxtofl@exp& (0+255),0,b
 10959  012484  D009               	goto	l3005
 10960                           
 10961                           ; BSR set to: 0
 10962  012486  0EFF               	movlw	255
 10963  012488  0100               	movlb	0	; () banked
 10964  01248A  176A               	andwf	___xxtofl@arg& (0+255),f,b
 10965  01248C  0EFF               	movlw	255
 10966  01248E  176B               	andwf	(___xxtofl@arg+1)& (0+255),f,b
 10967  012490  0E7F               	movlw	127
 10968  012492  176C               	andwf	(___xxtofl@arg+2)& (0+255),f,b
 10969  012494  0EFF               	movlw	255
 10970  012496  176D               	andwf	(___xxtofl@arg+3)& (0+255),f,b
 10971  012498                     l3005:
 10972                           
 10973                           ; BSR set to: 0
 10974  012498  0100               	movlb	0	; () banked
 10975  01249A  90D8               	bcf	status,0,c
 10976  01249C  3369               	rrcf	___xxtofl@exp& (0+255),f,b
 10977  01249E  C069  F064         	movff	___xxtofl@exp,??___xxtofl
 10978  0124A2  0100               	movlb	0	; () banked
 10979  0124A4  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 10980  0124A6  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 10981  0124A8  6B67               	clrf	(??___xxtofl+3)& (0+255),b
 10982  0124AA  C064  F067         	movff	??___xxtofl,??___xxtofl+3
 10983  0124AE  0100               	movlb	0	; () banked
 10984  0124B0  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 10985  0124B2  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 10986  0124B4  6B64               	clrf	??___xxtofl& (0+255),b
 10987  0124B6  0100               	movlb	0	; () banked
 10988  0124B8  5164               	movf	??___xxtofl& (0+255),w,b
 10989  0124BA  0100               	movlb	0	; () banked
 10990  0124BC  136A               	iorwf	___xxtofl@arg& (0+255),f,b
 10991  0124BE  0100               	movlb	0	; () banked
 10992  0124C0  5165               	movf	(??___xxtofl+1)& (0+255),w,b
 10993  0124C2  0100               	movlb	0	; () banked
 10994  0124C4  136B               	iorwf	(___xxtofl@arg+1)& (0+255),f,b
 10995  0124C6  0100               	movlb	0	; () banked
 10996  0124C8  5166               	movf	(??___xxtofl+2)& (0+255),w,b
 10997  0124CA  0100               	movlb	0	; () banked
 10998  0124CC  136C               	iorwf	(___xxtofl@arg+2)& (0+255),f,b
 10999  0124CE  0100               	movlb	0	; () banked
 11000  0124D0  5167               	movf	(??___xxtofl+3)& (0+255),w,b
 11001  0124D2  0100               	movlb	0	; () banked
 11002  0124D4  136D               	iorwf	(___xxtofl@arg+3)& (0+255),f,b
 11003                           
 11004                           ; BSR set to: 0
 11005  0124D6  0100               	movlb	0	; () banked
 11006  0124D8  5168               	movf	___xxtofl@sign& (0+255),w,b
 11007  0124DA  0100               	movlb	0	; () banked
 11008  0124DC  B4D8               	btfsc	status,2,c
 11009  0124DE  D005               	goto	l3006
 11010                           
 11011                           ; BSR set to: 0
 11012  0124E0  0100               	movlb	0	; () banked
 11013  0124E2  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 11014  0124E4  D002               	goto	l3006
 11015                           
 11016                           ; BSR set to: 0
 11017  0124E6  0100               	movlb	0	; () banked
 11018  0124E8  8F6D               	bsf	(___xxtofl@arg+3)& (0+255),7,b
 11019  0124EA                     l3006:
 11020                           
 11021                           ; BSR set to: 0
 11022                           
 11023                           ; BSR set to: 0
 11024  0124EA  C06A  F060         	movff	___xxtofl@arg,?___xxtofl
 11025  0124EE  C06B  F061         	movff	___xxtofl@arg+1,?___xxtofl+1
 11026  0124F2  C06C  F062         	movff	___xxtofl@arg+2,?___xxtofl+2
 11027  0124F6  C06D  F063         	movff	___xxtofl@arg+3,?___xxtofl+3
 11028  0124FA  0012               	return	
 11029  0124FC                     __end_of___xxtofl:
 11030                           	opt stack 0
 11031                           tblptru	equ	0xFF8
 11032                           tblptrh	equ	0xFF7
 11033                           tblptrl	equ	0xFF6
 11034                           tablat	equ	0xFF5
 11035                           prodh	equ	0xFF4
 11036                           prodl	equ	0xFF3
 11037                           intcon	equ	0xFF2
 11038                           postinc0	equ	0xFEE
 11039                           wreg	equ	0xFE8
 11040                           postdec1	equ	0xFE5
 11041                           fsr1h	equ	0xFE2
 11042                           fsr1l	equ	0xFE1
 11043                           indf2	equ	0xFDF
 11044                           postinc2	equ	0xFDE
 11045                           postdec2	equ	0xFDD
 11046                           fsr2h	equ	0xFDA
 11047                           fsr2l	equ	0xFD9
 11048                           status	equ	0xFD8
 11049                           
 11050 ;; *************** function ___flmul *****************
 11051 ;; Defined at:
 11052 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcmul.c"
 11053 ;; Parameters:    Size  Location     Type
 11054 ;;  b               4   39[BANK0 ] unsigned char 
 11055 ;;  a               4   43[BANK0 ] unsigned char 
 11056 ;; Auto vars:     Size  Location     Type
 11057 ;;  prod            4   58[BANK0 ] struct .
 11058 ;;  grs             4   53[BANK0 ] unsigned long 
 11059 ;;  temp            2   62[BANK0 ] struct .
 11060 ;;  bexp            1   57[BANK0 ] unsigned char 
 11061 ;;  aexp            1   52[BANK0 ] unsigned char 
 11062 ;;  sign            1   51[BANK0 ] unsigned char 
 11063 ;; Return value:  Size  Location     Type
 11064 ;;                  4   39[BANK0 ] unsigned char 
 11065 ;; Registers used:
 11066 ;;		wreg, status,2, status,0, prodl, prodh
 11067 ;; Tracked objects:
 11068 ;;		On entry : 0/0
 11069 ;;		On exit  : 0/0
 11070 ;;		Unchanged: 0/0
 11071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11072 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11073 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11074 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11075 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11076 ;;Total ram usage:       25 bytes
 11077 ;; Hardware stack levels used:    1
 11078 ;; Hardware stack levels required when called:    7
 11079 ;; This function calls:
 11080 ;;		Nothing
 11081 ;; This function is called by:
 11082 ;;		_ADC_Voltage
 11083 ;;		_mode4
 11084 ;; This function uses a non-reentrant model
 11085 ;;
 11086                           
 11087                           	psect	text46
 11088  010000                     __ptext46:
 11089                           	opt stack 0
 11090  010000                     ___flmul:
 11091                           	opt stack 22
 11092                           
 11093                           ; BSR set to: 0
 11094                           ;incstack = 0
 11095  010000  0100               	movlb	0	; () banked
 11096  010002  518A               	movf	(___flmul@b+3)& (0+255),w,b
 11097  010004  0B80               	andlw	128
 11098  010006  0100               	movlb	0	; () banked
 11099  010008  6F93               	movwf	___flmul@sign& (0+255),b
 11100  01000A  0100               	movlb	0	; () banked
 11101  01000C  518A               	movf	(___flmul@b+3)& (0+255),w,b
 11102  01000E  258A               	addwf	(___flmul@b+3)& (0+255),w,b
 11103  010010  0100               	movlb	0	; () banked
 11104  010012  6F99               	movwf	___flmul@bexp& (0+255),b
 11105                           
 11106                           ; BSR set to: 0
 11107  010014  0100               	movlb	0	; () banked
 11108  010016  AF89               	btfss	(___flmul@b+2)& (0+255),7,b
 11109  010018  D002               	goto	l2961
 11110                           
 11111                           ; BSR set to: 0
 11112  01001A  0100               	movlb	0	; () banked
 11113  01001C  8199               	bsf	___flmul@bexp& (0+255),0,b
 11114  01001E                     l2961:
 11115                           
 11116                           ; BSR set to: 0
 11117                           
 11118                           ; BSR set to: 0
 11119  01001E  0100               	movlb	0	; () banked
 11120  010020  5199               	movf	___flmul@bexp& (0+255),w,b
 11121  010022  0100               	movlb	0	; () banked
 11122  010024  B4D8               	btfsc	status,2,c
 11123  010026  D010               	goto	l2962
 11124                           
 11125                           ; BSR set to: 0
 11126  010028  0100               	movlb	0	; () banked
 11127  01002A  2999               	incf	___flmul@bexp& (0+255),w,b
 11128  01002C  A4D8               	btfss	status,2,c
 11129  01002E  D009               	goto	l2963
 11130                           
 11131                           ; BSR set to: 0
 11132  010030  0E00               	movlw	0
 11133  010032  0100               	movlb	0	; () banked
 11134  010034  6F87               	movwf	___flmul@b& (0+255),b
 11135  010036  0E00               	movlw	0
 11136  010038  6F88               	movwf	(___flmul@b+1)& (0+255),b
 11137  01003A  0E00               	movlw	0
 11138  01003C  6F89               	movwf	(___flmul@b+2)& (0+255),b
 11139  01003E  0E00               	movlw	0
 11140  010040  6F8A               	movwf	(___flmul@b+3)& (0+255),b
 11141  010042                     l2963:
 11142                           
 11143                           ; BSR set to: 0
 11144                           
 11145                           ; BSR set to: 0
 11146  010042  0100               	movlb	0	; () banked
 11147  010044  8F89               	bsf	(___flmul@b+2)& (0+255),7,b
 11148  010046  D009               	goto	l2964
 11149  010048                     l2962:
 11150                           
 11151                           ; BSR set to: 0
 11152                           
 11153                           ; BSR set to: 0
 11154  010048  0E00               	movlw	0
 11155  01004A  0100               	movlb	0	; () banked
 11156  01004C  6F87               	movwf	___flmul@b& (0+255),b
 11157  01004E  0E00               	movlw	0
 11158  010050  6F88               	movwf	(___flmul@b+1)& (0+255),b
 11159  010052  0E00               	movlw	0
 11160  010054  6F89               	movwf	(___flmul@b+2)& (0+255),b
 11161  010056  0E00               	movlw	0
 11162  010058  6F8A               	movwf	(___flmul@b+3)& (0+255),b
 11163  01005A                     l2964:
 11164                           
 11165                           ; BSR set to: 0
 11166                           
 11167                           ; BSR set to: 0
 11168  01005A  0100               	movlb	0	; () banked
 11169  01005C  518E               	movf	(___flmul@a+3)& (0+255),w,b
 11170  01005E  0B80               	andlw	128
 11171  010060  0100               	movlb	0	; () banked
 11172  010062  1B93               	xorwf	___flmul@sign& (0+255),f,b
 11173                           
 11174                           ; BSR set to: 0
 11175  010064  0100               	movlb	0	; () banked
 11176  010066  518E               	movf	(___flmul@a+3)& (0+255),w,b
 11177  010068  258E               	addwf	(___flmul@a+3)& (0+255),w,b
 11178  01006A  0100               	movlb	0	; () banked
 11179  01006C  6F94               	movwf	___flmul@aexp& (0+255),b
 11180                           
 11181                           ; BSR set to: 0
 11182  01006E  0100               	movlb	0	; () banked
 11183  010070  AF8D               	btfss	(___flmul@a+2)& (0+255),7,b
 11184  010072  D002               	goto	l2965
 11185                           
 11186                           ; BSR set to: 0
 11187  010074  0100               	movlb	0	; () banked
 11188  010076  8194               	bsf	___flmul@aexp& (0+255),0,b
 11189  010078                     l2965:
 11190                           
 11191                           ; BSR set to: 0
 11192                           
 11193                           ; BSR set to: 0
 11194  010078  0100               	movlb	0	; () banked
 11195  01007A  5194               	movf	___flmul@aexp& (0+255),w,b
 11196  01007C  0100               	movlb	0	; () banked
 11197  01007E  B4D8               	btfsc	status,2,c
 11198  010080  D010               	goto	l2966
 11199                           
 11200                           ; BSR set to: 0
 11201  010082  0100               	movlb	0	; () banked
 11202  010084  2994               	incf	___flmul@aexp& (0+255),w,b
 11203  010086  A4D8               	btfss	status,2,c
 11204  010088  D009               	goto	l2967
 11205                           
 11206                           ; BSR set to: 0
 11207  01008A  0E00               	movlw	0
 11208  01008C  0100               	movlb	0	; () banked
 11209  01008E  6F8B               	movwf	___flmul@a& (0+255),b
 11210  010090  0E00               	movlw	0
 11211  010092  6F8C               	movwf	(___flmul@a+1)& (0+255),b
 11212  010094  0E00               	movlw	0
 11213  010096  6F8D               	movwf	(___flmul@a+2)& (0+255),b
 11214  010098  0E00               	movlw	0
 11215  01009A  6F8E               	movwf	(___flmul@a+3)& (0+255),b
 11216  01009C                     l2967:
 11217                           
 11218                           ; BSR set to: 0
 11219                           
 11220                           ; BSR set to: 0
 11221  01009C  0100               	movlb	0	; () banked
 11222  01009E  8F8D               	bsf	(___flmul@a+2)& (0+255),7,b
 11223  0100A0  D009               	goto	l2968
 11224  0100A2                     l2966:
 11225                           
 11226                           ; BSR set to: 0
 11227                           
 11228                           ; BSR set to: 0
 11229  0100A2  0E00               	movlw	0
 11230  0100A4  0100               	movlb	0	; () banked
 11231  0100A6  6F8B               	movwf	___flmul@a& (0+255),b
 11232  0100A8  0E00               	movlw	0
 11233  0100AA  6F8C               	movwf	(___flmul@a+1)& (0+255),b
 11234  0100AC  0E00               	movlw	0
 11235  0100AE  6F8D               	movwf	(___flmul@a+2)& (0+255),b
 11236  0100B0  0E00               	movlw	0
 11237  0100B2  6F8E               	movwf	(___flmul@a+3)& (0+255),b
 11238  0100B4                     l2968:
 11239                           
 11240                           ; BSR set to: 0
 11241  0100B4  0100               	movlb	0	; () banked
 11242  0100B6  5194               	movf	___flmul@aexp& (0+255),w,b
 11243  0100B8  0100               	movlb	0	; () banked
 11244  0100BA  B4D8               	btfsc	status,2,c
 11245  0100BC  D005               	goto	u10580
 11246                           
 11247                           ; BSR set to: 0
 11248  0100BE  0100               	movlb	0	; () banked
 11249  0100C0  5199               	movf	___flmul@bexp& (0+255),w,b
 11250  0100C2  0100               	movlb	0	; () banked
 11251  0100C4  A4D8               	btfss	status,2,c
 11252  0100C6  D00A               	goto	l2969
 11253  0100C8                     u10580:
 11254                           
 11255                           ; BSR set to: 0
 11256                           
 11257                           ; BSR set to: 0
 11258  0100C8  0E00               	movlw	0
 11259  0100CA  0100               	movlb	0	; () banked
 11260  0100CC  6F87               	movwf	?___flmul& (0+255),b
 11261  0100CE  0E00               	movlw	0
 11262  0100D0  6F88               	movwf	(?___flmul+1)& (0+255),b
 11263  0100D2  0E00               	movlw	0
 11264  0100D4  6F89               	movwf	(?___flmul+2)& (0+255),b
 11265  0100D6  0E00               	movlw	0
 11266  0100D8  6F8A               	movwf	(?___flmul+3)& (0+255),b
 11267                           
 11268                           ; BSR set to: 0
 11269  0100DA  0012               	return	
 11270  0100DC                     l2969:
 11271                           
 11272                           ; BSR set to: 0
 11273                           
 11274                           ; BSR set to: 0
 11275  0100DC  0100               	movlb	0	; () banked
 11276  0100DE  518D               	movf	(___flmul@a+2)& (0+255),w,b
 11277  0100E0  0100               	movlb	0	; () banked
 11278  0100E2  0387               	mulwf	___flmul@b& (0+255),b
 11279  0100E4  CFF3 F09E          	movff	prodl,___flmul@temp
 11280  0100E8  CFF4 F09F          	movff	prodh,___flmul@temp+1
 11281                           
 11282                           ; BSR set to: 0
 11283  0100EC  0100               	movlb	0	; () banked
 11284  0100EE  519E               	movf	___flmul@temp& (0+255),w,b
 11285  0100F0  0100               	movlb	0	; () banked
 11286  0100F2  6F95               	movwf	___flmul@grs& (0+255),b
 11287  0100F4  6B96               	clrf	(___flmul@grs+1)& (0+255),b
 11288  0100F6  6B97               	clrf	(___flmul@grs+2)& (0+255),b
 11289  0100F8  6B98               	clrf	(___flmul@grs+3)& (0+255),b
 11290                           
 11291                           ; BSR set to: 0
 11292  0100FA  0100               	movlb	0	; () banked
 11293  0100FC  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 11294  0100FE  0100               	movlb	0	; () banked
 11295  010100  6F9A               	movwf	___flmul@prod& (0+255),b
 11296  010102  6B9B               	clrf	(___flmul@prod+1)& (0+255),b
 11297  010104  6B9C               	clrf	(___flmul@prod+2)& (0+255),b
 11298  010106  6B9D               	clrf	(___flmul@prod+3)& (0+255),b
 11299  010108  0100               	movlb	0	; () banked
 11300  01010A  518C               	movf	(___flmul@a+1)& (0+255),w,b
 11301  01010C  0100               	movlb	0	; () banked
 11302  01010E  0388               	mulwf	(___flmul@b+1)& (0+255),b
 11303  010110  CFF3 F09E          	movff	prodl,___flmul@temp
 11304  010114  CFF4 F09F          	movff	prodh,___flmul@temp+1
 11305                           
 11306                           ; BSR set to: 0
 11307  010118  0100               	movlb	0	; () banked
 11308  01011A  519E               	movf	___flmul@temp& (0+255),w,b
 11309  01011C  0100               	movlb	0	; () banked
 11310  01011E  2795               	addwf	___flmul@grs& (0+255),f,b
 11311  010120  0E00               	movlw	0
 11312  010122  2396               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11313  010124  2397               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11314  010126  2398               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11315                           
 11316                           ; BSR set to: 0
 11317  010128  0100               	movlb	0	; () banked
 11318  01012A  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 11319  01012C  0100               	movlb	0	; () banked
 11320  01012E  279A               	addwf	___flmul@prod& (0+255),f,b
 11321  010130  0E00               	movlw	0
 11322  010132  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11323  010134  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11324  010136  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11325  010138  0100               	movlb	0	; () banked
 11326  01013A  518B               	movf	___flmul@a& (0+255),w,b
 11327  01013C  0100               	movlb	0	; () banked
 11328  01013E  0389               	mulwf	(___flmul@b+2)& (0+255),b
 11329  010140  CFF3 F09E          	movff	prodl,___flmul@temp
 11330  010144  CFF4 F09F          	movff	prodh,___flmul@temp+1
 11331                           
 11332                           ; BSR set to: 0
 11333  010148  0100               	movlb	0	; () banked
 11334  01014A  519E               	movf	___flmul@temp& (0+255),w,b
 11335  01014C  0100               	movlb	0	; () banked
 11336  01014E  2795               	addwf	___flmul@grs& (0+255),f,b
 11337  010150  0E00               	movlw	0
 11338  010152  2396               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11339  010154  2397               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11340  010156  2398               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11341                           
 11342                           ; BSR set to: 0
 11343  010158  0100               	movlb	0	; () banked
 11344  01015A  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 11345  01015C  0100               	movlb	0	; () banked
 11346  01015E  279A               	addwf	___flmul@prod& (0+255),f,b
 11347  010160  0E00               	movlw	0
 11348  010162  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11349  010164  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11350  010166  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11351                           
 11352                           ; BSR set to: 0
 11353  010168  C097  F098         	movff	___flmul@grs+2,___flmul@grs+3
 11354  01016C  C096  F097         	movff	___flmul@grs+1,___flmul@grs+2
 11355  010170  C095  F096         	movff	___flmul@grs,___flmul@grs+1
 11356  010174  0100               	movlb	0	; () banked
 11357  010176  6B95               	clrf	___flmul@grs& (0+255),b
 11358                           
 11359                           ; BSR set to: 0
 11360  010178  0100               	movlb	0	; () banked
 11361  01017A  518B               	movf	___flmul@a& (0+255),w,b
 11362  01017C  0100               	movlb	0	; () banked
 11363  01017E  0388               	mulwf	(___flmul@b+1)& (0+255),b
 11364  010180  CFF3 F09E          	movff	prodl,___flmul@temp
 11365  010184  CFF4 F09F          	movff	prodh,___flmul@temp+1
 11366                           
 11367                           ; BSR set to: 0
 11368  010188  0100               	movlb	0	; () banked
 11369  01018A  519E               	movf	___flmul@temp& (0+255),w,b
 11370  01018C  0100               	movlb	0	; () banked
 11371  01018E  2795               	addwf	___flmul@grs& (0+255),f,b
 11372  010190  0100               	movlb	0	; () banked
 11373  010192  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 11374  010194  0100               	movlb	0	; () banked
 11375  010196  2396               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11376  010198  0E00               	movlw	0
 11377  01019A  0100               	movlb	0	; () banked
 11378  01019C  2397               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11379  01019E  0E00               	movlw	0
 11380  0101A0  0100               	movlb	0	; () banked
 11381  0101A2  2398               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11382                           
 11383                           ; BSR set to: 0
 11384  0101A4  0100               	movlb	0	; () banked
 11385  0101A6  518C               	movf	(___flmul@a+1)& (0+255),w,b
 11386  0101A8  0100               	movlb	0	; () banked
 11387  0101AA  0387               	mulwf	___flmul@b& (0+255),b
 11388  0101AC  CFF3 F09E          	movff	prodl,___flmul@temp
 11389  0101B0  CFF4 F09F          	movff	prodh,___flmul@temp+1
 11390                           
 11391                           ; BSR set to: 0
 11392  0101B4  0100               	movlb	0	; () banked
 11393  0101B6  519E               	movf	___flmul@temp& (0+255),w,b
 11394  0101B8  0100               	movlb	0	; () banked
 11395  0101BA  2795               	addwf	___flmul@grs& (0+255),f,b
 11396  0101BC  0100               	movlb	0	; () banked
 11397  0101BE  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 11398  0101C0  0100               	movlb	0	; () banked
 11399  0101C2  2396               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11400  0101C4  0E00               	movlw	0
 11401  0101C6  0100               	movlb	0	; () banked
 11402  0101C8  2397               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11403  0101CA  0E00               	movlw	0
 11404  0101CC  0100               	movlb	0	; () banked
 11405  0101CE  2398               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11406                           
 11407                           ; BSR set to: 0
 11408  0101D0  C097  F098         	movff	___flmul@grs+2,___flmul@grs+3
 11409  0101D4  C096  F097         	movff	___flmul@grs+1,___flmul@grs+2
 11410  0101D8  C095  F096         	movff	___flmul@grs,___flmul@grs+1
 11411  0101DC  0100               	movlb	0	; () banked
 11412  0101DE  6B95               	clrf	___flmul@grs& (0+255),b
 11413  0101E0  0100               	movlb	0	; () banked
 11414  0101E2  518B               	movf	___flmul@a& (0+255),w,b
 11415  0101E4  0100               	movlb	0	; () banked
 11416  0101E6  0387               	mulwf	___flmul@b& (0+255),b
 11417  0101E8  CFF3 F09E          	movff	prodl,___flmul@temp
 11418  0101EC  CFF4 F09F          	movff	prodh,___flmul@temp+1
 11419                           
 11420                           ; BSR set to: 0
 11421  0101F0  0100               	movlb	0	; () banked
 11422  0101F2  519E               	movf	___flmul@temp& (0+255),w,b
 11423  0101F4  0100               	movlb	0	; () banked
 11424  0101F6  2795               	addwf	___flmul@grs& (0+255),f,b
 11425  0101F8  0100               	movlb	0	; () banked
 11426  0101FA  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 11427  0101FC  0100               	movlb	0	; () banked
 11428  0101FE  2396               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11429  010200  0E00               	movlw	0
 11430  010202  0100               	movlb	0	; () banked
 11431  010204  2397               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11432  010206  0E00               	movlw	0
 11433  010208  0100               	movlb	0	; () banked
 11434  01020A  2398               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11435                           
 11436                           ; BSR set to: 0
 11437  01020C  0100               	movlb	0	; () banked
 11438  01020E  518D               	movf	(___flmul@a+2)& (0+255),w,b
 11439  010210  0100               	movlb	0	; () banked
 11440  010212  0388               	mulwf	(___flmul@b+1)& (0+255),b
 11441  010214  CFF3 F09E          	movff	prodl,___flmul@temp
 11442  010218  CFF4 F09F          	movff	prodh,___flmul@temp+1
 11443  01021C  0100               	movlb	0	; () banked
 11444  01021E  519E               	movf	___flmul@temp& (0+255),w,b
 11445  010220  0100               	movlb	0	; () banked
 11446  010222  279A               	addwf	___flmul@prod& (0+255),f,b
 11447  010224  0100               	movlb	0	; () banked
 11448  010226  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 11449  010228  0100               	movlb	0	; () banked
 11450  01022A  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11451  01022C  0E00               	movlw	0
 11452  01022E  0100               	movlb	0	; () banked
 11453  010230  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11454  010232  0E00               	movlw	0
 11455  010234  0100               	movlb	0	; () banked
 11456  010236  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11457                           
 11458                           ; BSR set to: 0
 11459  010238  0100               	movlb	0	; () banked
 11460  01023A  518C               	movf	(___flmul@a+1)& (0+255),w,b
 11461  01023C  0100               	movlb	0	; () banked
 11462  01023E  0389               	mulwf	(___flmul@b+2)& (0+255),b
 11463  010240  CFF3 F09E          	movff	prodl,___flmul@temp
 11464  010244  CFF4 F09F          	movff	prodh,___flmul@temp+1
 11465                           
 11466                           ; BSR set to: 0
 11467  010248  0100               	movlb	0	; () banked
 11468  01024A  519E               	movf	___flmul@temp& (0+255),w,b
 11469  01024C  0100               	movlb	0	; () banked
 11470  01024E  279A               	addwf	___flmul@prod& (0+255),f,b
 11471  010250  0100               	movlb	0	; () banked
 11472  010252  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 11473  010254  0100               	movlb	0	; () banked
 11474  010256  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11475  010258  0E00               	movlw	0
 11476  01025A  0100               	movlb	0	; () banked
 11477  01025C  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11478  01025E  0E00               	movlw	0
 11479  010260  0100               	movlb	0	; () banked
 11480  010262  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11481  010264  0100               	movlb	0	; () banked
 11482  010266  518D               	movf	(___flmul@a+2)& (0+255),w,b
 11483  010268  0100               	movlb	0	; () banked
 11484  01026A  0389               	mulwf	(___flmul@b+2)& (0+255),b
 11485  01026C  CFF3 F09E          	movff	prodl,___flmul@temp
 11486  010270  CFF4 F09F          	movff	prodh,___flmul@temp+1
 11487                           
 11488                           ; BSR set to: 0
 11489  010274  0100               	movlb	0	; () banked
 11490  010276  519E               	movf	___flmul@temp& (0+255),w,b
 11491  010278  0100               	movlb	0	; () banked
 11492  01027A  6F8F               	movwf	??___flmul& (0+255),b
 11493  01027C  0100               	movlb	0	; () banked
 11494  01027E  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 11495  010280  0100               	movlb	0	; () banked
 11496  010282  6F90               	movwf	(??___flmul+1)& (0+255),b
 11497  010284  0100               	movlb	0	; () banked
 11498  010286  6B91               	clrf	(??___flmul+2)& (0+255),b
 11499  010288  0100               	movlb	0	; () banked
 11500  01028A  6B92               	clrf	(??___flmul+3)& (0+255),b
 11501  01028C  C091  F092         	movff	??___flmul+2,??___flmul+3
 11502  010290  C090  F091         	movff	??___flmul+1,??___flmul+2
 11503  010294  C08F  F090         	movff	??___flmul,??___flmul+1
 11504  010298  0100               	movlb	0	; () banked
 11505  01029A  6B8F               	clrf	??___flmul& (0+255),b
 11506  01029C  0100               	movlb	0	; () banked
 11507  01029E  518F               	movf	??___flmul& (0+255),w,b
 11508  0102A0  0100               	movlb	0	; () banked
 11509  0102A2  279A               	addwf	___flmul@prod& (0+255),f,b
 11510  0102A4  0100               	movlb	0	; () banked
 11511  0102A6  5190               	movf	(??___flmul+1)& (0+255),w,b
 11512  0102A8  0100               	movlb	0	; () banked
 11513  0102AA  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11514  0102AC  0100               	movlb	0	; () banked
 11515  0102AE  5191               	movf	(??___flmul+2)& (0+255),w,b
 11516  0102B0  0100               	movlb	0	; () banked
 11517  0102B2  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11518  0102B4  0100               	movlb	0	; () banked
 11519  0102B6  5192               	movf	(??___flmul+3)& (0+255),w,b
 11520  0102B8  0100               	movlb	0	; () banked
 11521  0102BA  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11522                           
 11523                           ; BSR set to: 0
 11524  0102BC  C095  F08F         	movff	___flmul@grs,??___flmul
 11525  0102C0  C096  F090         	movff	___flmul@grs+1,??___flmul+1
 11526  0102C4  C097  F091         	movff	___flmul@grs+2,??___flmul+2
 11527  0102C8  C098  F092         	movff	___flmul@grs+3,??___flmul+3
 11528  0102CC  0E19               	movlw	25
 11529  0102CE  D006               	goto	u10590
 11530  0102D0                     u10595:
 11531  0102D0  0100               	movlb	0	; () banked
 11532  0102D2  90D8               	bcf	status,0,c
 11533  0102D4  3392               	rrcf	(??___flmul+3)& (0+255),f,b
 11534  0102D6  3391               	rrcf	(??___flmul+2)& (0+255),f,b
 11535  0102D8  3390               	rrcf	(??___flmul+1)& (0+255),f,b
 11536  0102DA  338F               	rrcf	??___flmul& (0+255),f,b
 11537  0102DC                     u10590:
 11538  0102DC  2EE8               	decfsz	wreg,f,c
 11539  0102DE  D7F8               	goto	u10595
 11540  0102E0  0100               	movlb	0	; () banked
 11541  0102E2  518F               	movf	??___flmul& (0+255),w,b
 11542  0102E4  0100               	movlb	0	; () banked
 11543  0102E6  279A               	addwf	___flmul@prod& (0+255),f,b
 11544  0102E8  0100               	movlb	0	; () banked
 11545  0102EA  5190               	movf	(??___flmul+1)& (0+255),w,b
 11546  0102EC  0100               	movlb	0	; () banked
 11547  0102EE  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11548  0102F0  0100               	movlb	0	; () banked
 11549  0102F2  5191               	movf	(??___flmul+2)& (0+255),w,b
 11550  0102F4  0100               	movlb	0	; () banked
 11551  0102F6  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11552  0102F8  0100               	movlb	0	; () banked
 11553  0102FA  5192               	movf	(??___flmul+3)& (0+255),w,b
 11554  0102FC  0100               	movlb	0	; () banked
 11555  0102FE  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11556                           
 11557                           ; BSR set to: 0
 11558  010300  C097  F098         	movff	___flmul@grs+2,___flmul@grs+3
 11559  010304  C096  F097         	movff	___flmul@grs+1,___flmul@grs+2
 11560  010308  C095  F096         	movff	___flmul@grs,___flmul@grs+1
 11561  01030C  0100               	movlb	0	; () banked
 11562  01030E  6B95               	clrf	___flmul@grs& (0+255),b
 11563                           
 11564                           ; BSR set to: 0
 11565  010310  0100               	movlb	0	; () banked
 11566  010312  5194               	movf	___flmul@aexp& (0+255),w,b
 11567  010314  C099  F08F         	movff	___flmul@bexp,??___flmul
 11568  010318  0100               	movlb	0	; () banked
 11569  01031A  6B90               	clrf	(??___flmul+1)& (0+255),b
 11570  01031C  0100               	movlb	0	; () banked
 11571  01031E  278F               	addwf	??___flmul& (0+255),f,b
 11572  010320  0E00               	movlw	0
 11573  010322  2390               	addwfc	(??___flmul+1)& (0+255),f,b
 11574  010324  0E82               	movlw	130
 11575  010326  0100               	movlb	0	; () banked
 11576  010328  258F               	addwf	??___flmul& (0+255),w,b
 11577  01032A  0100               	movlb	0	; () banked
 11578  01032C  6F9E               	movwf	___flmul@temp& (0+255),b
 11579  01032E  0EFF               	movlw	255
 11580  010330  0100               	movlb	0	; () banked
 11581  010332  2190               	addwfc	(??___flmul+1)& (0+255),w,b
 11582  010334  0100               	movlb	0	; () banked
 11583  010336  6F9F               	movwf	(___flmul@temp+1)& (0+255),b
 11584  010338  D015               	goto	l2973
 11585  01033A                     
 11586                           ; BSR set to: 0
 11587                           
 11588                           ; BSR set to: 0
 11589  01033A  0100               	movlb	0	; () banked
 11590  01033C  90D8               	bcf	status,0,c
 11591  01033E  379A               	rlcf	___flmul@prod& (0+255),f,b
 11592  010340  379B               	rlcf	(___flmul@prod+1)& (0+255),f,b
 11593  010342  379C               	rlcf	(___flmul@prod+2)& (0+255),f,b
 11594  010344  379D               	rlcf	(___flmul@prod+3)& (0+255),f,b
 11595                           
 11596                           ; BSR set to: 0
 11597  010346  0100               	movlb	0	; () banked
 11598  010348  AF98               	btfss	(___flmul@grs+3)& (0+255),7,b
 11599  01034A  D002               	goto	l2975
 11600                           
 11601                           ; BSR set to: 0
 11602  01034C  0100               	movlb	0	; () banked
 11603  01034E  819A               	bsf	___flmul@prod& (0+255),0,b
 11604  010350                     l2975:
 11605                           
 11606                           ; BSR set to: 0
 11607  010350  0100               	movlb	0	; () banked
 11608  010352  90D8               	bcf	status,0,c
 11609  010354  3795               	rlcf	___flmul@grs& (0+255),f,b
 11610  010356  3796               	rlcf	(___flmul@grs+1)& (0+255),f,b
 11611  010358  3797               	rlcf	(___flmul@grs+2)& (0+255),f,b
 11612  01035A  3798               	rlcf	(___flmul@grs+3)& (0+255),f,b
 11613  01035C  0100               	movlb	0	; () banked
 11614  01035E  079E               	decf	___flmul@temp& (0+255),f,b
 11615  010360  A0D8               	btfss	status,0,c
 11616  010362  079F               	decf	(___flmul@temp+1)& (0+255),f,b
 11617  010364                     l2973:
 11618                           
 11619                           ; BSR set to: 0
 11620                           
 11621                           ; BSR set to: 0
 11622  010364  0100               	movlb	0	; () banked
 11623  010366  AF9C               	btfss	(___flmul@prod+2)& (0+255),7,b
 11624  010368  D7E8               	goto	l2974
 11625                           
 11626                           ; BSR set to: 0
 11627                           
 11628                           ; BSR set to: 0
 11629  01036A  0E00               	movlw	0
 11630  01036C  0100               	movlb	0	; () banked
 11631  01036E  6F94               	movwf	___flmul@aexp& (0+255),b
 11632                           
 11633                           ; BSR set to: 0
 11634  010370  0100               	movlb	0	; () banked
 11635  010372  AF98               	btfss	(___flmul@grs+3)& (0+255),7,b
 11636  010374  D024               	goto	l2980
 11637                           
 11638                           ; BSR set to: 0
 11639  010376  0EFF               	movlw	255
 11640  010378  0100               	movlb	0	; () banked
 11641  01037A  1595               	andwf	___flmul@grs& (0+255),w,b
 11642  01037C  0100               	movlb	0	; () banked
 11643  01037E  6F8F               	movwf	??___flmul& (0+255),b
 11644  010380  0EFF               	movlw	255
 11645  010382  0100               	movlb	0	; () banked
 11646  010384  1596               	andwf	(___flmul@grs+1)& (0+255),w,b
 11647  010386  0100               	movlb	0	; () banked
 11648  010388  6F90               	movwf	(??___flmul+1)& (0+255),b
 11649  01038A  0EFF               	movlw	255
 11650  01038C  0100               	movlb	0	; () banked
 11651  01038E  1597               	andwf	(___flmul@grs+2)& (0+255),w,b
 11652  010390  0100               	movlb	0	; () banked
 11653  010392  6F91               	movwf	(??___flmul+2)& (0+255),b
 11654  010394  0E7F               	movlw	127
 11655  010396  0100               	movlb	0	; () banked
 11656  010398  1598               	andwf	(___flmul@grs+3)& (0+255),w,b
 11657  01039A  0100               	movlb	0	; () banked
 11658  01039C  6F92               	movwf	(??___flmul+3)& (0+255),b
 11659  01039E  0100               	movlb	0	; () banked
 11660  0103A0  518F               	movf	??___flmul& (0+255),w,b
 11661  0103A2  0100               	movlb	0	; () banked
 11662  0103A4  1190               	iorwf	(??___flmul+1)& (0+255),w,b
 11663  0103A6  0100               	movlb	0	; () banked
 11664  0103A8  1191               	iorwf	(??___flmul+2)& (0+255),w,b
 11665  0103AA  0100               	movlb	0	; () banked
 11666  0103AC  1192               	iorwf	(??___flmul+3)& (0+255),w,b
 11667  0103AE  A4D8               	btfss	status,2,c
 11668  0103B0  D003               	goto	u10640
 11669                           
 11670                           ; BSR set to: 0
 11671                           
 11672                           ; BSR set to: 0
 11673  0103B2  0100               	movlb	0	; () banked
 11674  0103B4  A19A               	btfss	___flmul@prod& (0+255),0,b
 11675  0103B6  D003               	goto	l2980
 11676  0103B8                     u10640:
 11677                           
 11678                           ; BSR set to: 0
 11679  0103B8  0E01               	movlw	1
 11680  0103BA  0100               	movlb	0	; () banked
 11681  0103BC  6F94               	movwf	___flmul@aexp& (0+255),b
 11682  0103BE                     l2980:
 11683                           
 11684                           ; BSR set to: 0
 11685                           
 11686                           ; BSR set to: 0
 11687                           
 11688                           ; BSR set to: 0
 11689  0103BE  0100               	movlb	0	; () banked
 11690  0103C0  5194               	movf	___flmul@aexp& (0+255),w,b
 11691  0103C2  0100               	movlb	0	; () banked
 11692  0103C4  B4D8               	btfsc	status,2,c
 11693  0103C6  D023               	goto	l2982
 11694                           
 11695                           ; BSR set to: 0
 11696  0103C8  0E01               	movlw	1
 11697  0103CA  0100               	movlb	0	; () banked
 11698  0103CC  279A               	addwf	___flmul@prod& (0+255),f,b
 11699  0103CE  0E00               	movlw	0
 11700  0103D0  239B               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11701  0103D2  239C               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11702  0103D4  239D               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11703                           
 11704                           ; BSR set to: 0
 11705  0103D6  0100               	movlb	0	; () banked
 11706  0103D8  A19D               	btfss	(___flmul@prod+3)& (0+255),0,b
 11707  0103DA  D019               	goto	l2982
 11708                           
 11709                           ; BSR set to: 0
 11710  0103DC  C09A  F08F         	movff	___flmul@prod,??___flmul
 11711  0103E0  C09B  F090         	movff	___flmul@prod+1,??___flmul+1
 11712  0103E4  C09C  F091         	movff	___flmul@prod+2,??___flmul+2
 11713  0103E8  C09D  F092         	movff	___flmul@prod+3,??___flmul+3
 11714  0103EC  0100               	movlb	0	; () banked
 11715  0103EE  3592               	rlcf	(??___flmul+3)& (0+255),w,b
 11716  0103F0  3392               	rrcf	(??___flmul+3)& (0+255),f,b
 11717  0103F2  3391               	rrcf	(??___flmul+2)& (0+255),f,b
 11718  0103F4  3390               	rrcf	(??___flmul+1)& (0+255),f,b
 11719  0103F6  338F               	rrcf	??___flmul& (0+255),f,b
 11720  0103F8  C08F  F09A         	movff	??___flmul,___flmul@prod
 11721  0103FC  C090  F09B         	movff	??___flmul+1,___flmul@prod+1
 11722  010400  C091  F09C         	movff	??___flmul+2,___flmul@prod+2
 11723  010404  C092  F09D         	movff	??___flmul+3,___flmul@prod+3
 11724                           
 11725                           ; BSR set to: 0
 11726  010408  0100               	movlb	0	; () banked
 11727  01040A  4B9E               	infsnz	___flmul@temp& (0+255),f,b
 11728  01040C  2B9F               	incf	(___flmul@temp+1)& (0+255),f,b
 11729  01040E                     l2982:
 11730                           
 11731                           ; BSR set to: 0
 11732                           
 11733                           ; BSR set to: 0
 11734                           
 11735                           ; BSR set to: 0
 11736  01040E  0100               	movlb	0	; () banked
 11737  010410  BF9F               	btfsc	(___flmul@temp+1)& (0+255),7,b
 11738  010412  D010               	goto	l2983
 11739  010414  0100               	movlb	0	; () banked
 11740  010416  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 11741  010418  E104               	bnz	u10670
 11742  01041A  0100               	movlb	0	; () banked
 11743  01041C  299E               	incf	___flmul@temp& (0+255),w,b
 11744  01041E  A0D8               	btfss	status,0,c
 11745  010420  D009               	goto	l2983
 11746  010422                     u10670:
 11747                           
 11748                           ; BSR set to: 0
 11749  010422  0E00               	movlw	0
 11750  010424  0100               	movlb	0	; () banked
 11751  010426  6F9A               	movwf	___flmul@prod& (0+255),b
 11752  010428  0E00               	movlw	0
 11753  01042A  6F9B               	movwf	(___flmul@prod+1)& (0+255),b
 11754  01042C  0E80               	movlw	128
 11755  01042E  6F9C               	movwf	(___flmul@prod+2)& (0+255),b
 11756  010430  0E7F               	movlw	127
 11757  010432  D02B               	goto	L5
 11758  010434                     l2983:
 11759                           
 11760                           ; BSR set to: 0
 11761                           
 11762                           ; BSR set to: 0
 11763  010434  0100               	movlb	0	; () banked
 11764  010436  BF9F               	btfsc	(___flmul@temp+1)& (0+255),7,b
 11765  010438  D007               	goto	u10680
 11766  01043A  0100               	movlb	0	; () banked
 11767  01043C  519F               	movf	(___flmul@temp+1)& (0+255),w,b
 11768  01043E  E111               	bnz	l2985
 11769  010440  0100               	movlb	0	; () banked
 11770  010442  059E               	decf	___flmul@temp& (0+255),w,b
 11771  010444  B0D8               	btfsc	status,0,c
 11772  010446  D00D               	goto	l2985
 11773  010448                     u10680:
 11774                           
 11775                           ; BSR set to: 0
 11776  010448  0E00               	movlw	0
 11777  01044A  0100               	movlb	0	; () banked
 11778  01044C  6F9A               	movwf	___flmul@prod& (0+255),b
 11779  01044E  0E00               	movlw	0
 11780  010450  6F9B               	movwf	(___flmul@prod+1)& (0+255),b
 11781  010452  0E00               	movlw	0
 11782  010454  6F9C               	movwf	(___flmul@prod+2)& (0+255),b
 11783  010456  0E00               	movlw	0
 11784  010458  6F9D               	movwf	(___flmul@prod+3)& (0+255),b
 11785  01045A  0E00               	movlw	0
 11786  01045C  0100               	movlb	0	; () banked
 11787  01045E  6F93               	movwf	___flmul@sign& (0+255),b
 11788  010460  D015               	goto	l2986
 11789  010462                     l2985:
 11790                           
 11791                           ; BSR set to: 0
 11792  010462  C09E  F099         	movff	___flmul@temp,___flmul@bexp
 11793                           
 11794                           ; BSR set to: 0
 11795  010466  0EFF               	movlw	255
 11796  010468  0100               	movlb	0	; () banked
 11797  01046A  179A               	andwf	___flmul@prod& (0+255),f,b
 11798  01046C  0EFF               	movlw	255
 11799  01046E  179B               	andwf	(___flmul@prod+1)& (0+255),f,b
 11800  010470  0E7F               	movlw	127
 11801  010472  179C               	andwf	(___flmul@prod+2)& (0+255),f,b
 11802  010474  0E00               	movlw	0
 11803  010476  179D               	andwf	(___flmul@prod+3)& (0+255),f,b
 11804                           
 11805                           ; BSR set to: 0
 11806  010478  0100               	movlb	0	; () banked
 11807  01047A  A199               	btfss	___flmul@bexp& (0+255),0,b
 11808  01047C  D002               	goto	l2987
 11809                           
 11810                           ; BSR set to: 0
 11811  01047E  0100               	movlb	0	; () banked
 11812  010480  8F9C               	bsf	(___flmul@prod+2)& (0+255),7,b
 11813  010482                     l2987:
 11814                           
 11815                           ; BSR set to: 0
 11816                           
 11817                           ; BSR set to: 0
 11818  010482  0100               	movlb	0	; () banked
 11819  010484  90D8               	bcf	status,0,c
 11820  010486  3199               	rrcf	___flmul@bexp& (0+255),w,b
 11821  010488  0100               	movlb	0	; () banked
 11822  01048A                     L5:
 11823  01048A  6F9D               	movwf	(___flmul@prod+3)& (0+255),b
 11824  01048C                     l2986:
 11825                           
 11826                           ; BSR set to: 0
 11827                           
 11828                           ; BSR set to: 0
 11829                           
 11830                           ; BSR set to: 0
 11831  01048C  0100               	movlb	0	; () banked
 11832  01048E  5193               	movf	___flmul@sign& (0+255),w,b
 11833  010490  0100               	movlb	0	; () banked
 11834  010492  139D               	iorwf	(___flmul@prod+3)& (0+255),f,b
 11835                           
 11836                           ; BSR set to: 0
 11837  010494  C09A  F087         	movff	___flmul@prod,?___flmul
 11838  010498  C09B  F088         	movff	___flmul@prod+1,?___flmul+1
 11839  01049C  C09C  F089         	movff	___flmul@prod+2,?___flmul+2
 11840  0104A0  C09D  F08A         	movff	___flmul@prod+3,?___flmul+3
 11841  0104A4  0012               	return	
 11842  0104A6                     __end_of___flmul:
 11843                           	opt stack 0
 11844                           tblptru	equ	0xFF8
 11845                           tblptrh	equ	0xFF7
 11846                           tblptrl	equ	0xFF6
 11847                           tablat	equ	0xFF5
 11848                           prodh	equ	0xFF4
 11849                           prodl	equ	0xFF3
 11850                           intcon	equ	0xFF2
 11851                           postinc0	equ	0xFEE
 11852                           wreg	equ	0xFE8
 11853                           postdec1	equ	0xFE5
 11854                           fsr1h	equ	0xFE2
 11855                           fsr1l	equ	0xFE1
 11856                           indf2	equ	0xFDF
 11857                           postinc2	equ	0xFDE
 11858                           postdec2	equ	0xFDD
 11859                           fsr2h	equ	0xFDA
 11860                           fsr2l	equ	0xFD9
 11861                           status	equ	0xFD8
 11862                           
 11863 ;; *************** function ___fldiv *****************
 11864 ;; Defined at:
 11865 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcdiv.c"
 11866 ;; Parameters:    Size  Location     Type
 11867 ;;  b               4   14[BANK0 ] unsigned char 
 11868 ;;  a               4   18[BANK0 ] unsigned char 
 11869 ;; Auto vars:     Size  Location     Type
 11870 ;;  grs             4   33[BANK0 ] unsigned long 
 11871 ;;  rem             4   27[BANK0 ] unsigned long 
 11872 ;;  new_exp         2   31[BANK0 ] int 
 11873 ;;  aexp            1   38[BANK0 ] unsigned char 
 11874 ;;  bexp            1   37[BANK0 ] unsigned char 
 11875 ;;  sign            1   26[BANK0 ] unsigned char 
 11876 ;; Return value:  Size  Location     Type
 11877 ;;                  4   14[BANK0 ] unsigned char 
 11878 ;; Registers used:
 11879 ;;		wreg, status,2, status,0
 11880 ;; Tracked objects:
 11881 ;;		On entry : 0/0
 11882 ;;		On exit  : 0/0
 11883 ;;		Unchanged: 0/0
 11884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11885 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11886 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11887 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11888 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11889 ;;Total ram usage:       25 bytes
 11890 ;; Hardware stack levels used:    1
 11891 ;; Hardware stack levels required when called:    7
 11892 ;; This function calls:
 11893 ;;		Nothing
 11894 ;; This function is called by:
 11895 ;;		_ADC_Voltage
 11896 ;;		_mode1
 11897 ;;		_mode4
 11898 ;; This function uses a non-reentrant model
 11899 ;;
 11900                           
 11901                           	psect	text47
 11902  0110A6                     __ptext47:
 11903                           	opt stack 0
 11904  0110A6                     ___fldiv:
 11905                           	opt stack 22
 11906                           
 11907                           ; BSR set to: 0
 11908                           ;incstack = 0
 11909  0110A6  0100               	movlb	0	; () banked
 11910  0110A8  5171               	movf	(___fldiv@b+3)& (0+255),w,b
 11911  0110AA  0B80               	andlw	128
 11912  0110AC  0100               	movlb	0	; () banked
 11913  0110AE  6F7A               	movwf	___fldiv@sign& (0+255),b
 11914  0110B0  0100               	movlb	0	; () banked
 11915  0110B2  5171               	movf	(___fldiv@b+3)& (0+255),w,b
 11916  0110B4  2571               	addwf	(___fldiv@b+3)& (0+255),w,b
 11917  0110B6  0100               	movlb	0	; () banked
 11918  0110B8  6F85               	movwf	___fldiv@bexp& (0+255),b
 11919                           
 11920                           ; BSR set to: 0
 11921  0110BA  0100               	movlb	0	; () banked
 11922  0110BC  AF70               	btfss	(___fldiv@b+2)& (0+255),7,b
 11923  0110BE  D002               	goto	l2927
 11924                           
 11925                           ; BSR set to: 0
 11926  0110C0  0100               	movlb	0	; () banked
 11927  0110C2  8185               	bsf	___fldiv@bexp& (0+255),0,b
 11928  0110C4                     l2927:
 11929                           
 11930                           ; BSR set to: 0
 11931                           
 11932                           ; BSR set to: 0
 11933  0110C4  0100               	movlb	0	; () banked
 11934  0110C6  5185               	movf	___fldiv@bexp& (0+255),w,b
 11935  0110C8  0100               	movlb	0	; () banked
 11936  0110CA  B4D8               	btfsc	status,2,c
 11937  0110CC  D012               	goto	l2928
 11938                           
 11939                           ; BSR set to: 0
 11940  0110CE  0100               	movlb	0	; () banked
 11941  0110D0  2985               	incf	___fldiv@bexp& (0+255),w,b
 11942  0110D2  A4D8               	btfss	status,2,c
 11943  0110D4  D009               	goto	l2929
 11944                           
 11945                           ; BSR set to: 0
 11946  0110D6  0E00               	movlw	0
 11947  0110D8  0100               	movlb	0	; () banked
 11948  0110DA  6F6E               	movwf	___fldiv@b& (0+255),b
 11949  0110DC  0E00               	movlw	0
 11950  0110DE  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 11951  0110E0  0E00               	movlw	0
 11952  0110E2  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 11953  0110E4  0E00               	movlw	0
 11954  0110E6  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 11955  0110E8                     l2929:
 11956                           
 11957                           ; BSR set to: 0
 11958                           
 11959                           ; BSR set to: 0
 11960  0110E8  0100               	movlb	0	; () banked
 11961  0110EA  8F70               	bsf	(___fldiv@b+2)& (0+255),7,b
 11962                           
 11963                           ; BSR set to: 0
 11964  0110EC  0E00               	movlw	0
 11965  0110EE  0100               	movlb	0	; () banked
 11966  0110F0  D008               	goto	L6
 11967  0110F2                     l2928:
 11968                           
 11969                           ; BSR set to: 0
 11970                           
 11971                           ; BSR set to: 0
 11972  0110F2  0E00               	movlw	0
 11973  0110F4  0100               	movlb	0	; () banked
 11974  0110F6  6F6E               	movwf	___fldiv@b& (0+255),b
 11975  0110F8  0E00               	movlw	0
 11976  0110FA  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 11977  0110FC  0E00               	movlw	0
 11978  0110FE  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 11979  011100  0E00               	movlw	0
 11980  011102                     L6:
 11981  011102  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 11982                           
 11983                           ; BSR set to: 0
 11984                           
 11985                           ; BSR set to: 0
 11986  011104  0100               	movlb	0	; () banked
 11987  011106  5175               	movf	(___fldiv@a+3)& (0+255),w,b
 11988  011108  0B80               	andlw	128
 11989  01110A  0100               	movlb	0	; () banked
 11990  01110C  1B7A               	xorwf	___fldiv@sign& (0+255),f,b
 11991                           
 11992                           ; BSR set to: 0
 11993  01110E  0100               	movlb	0	; () banked
 11994  011110  5175               	movf	(___fldiv@a+3)& (0+255),w,b
 11995  011112  2575               	addwf	(___fldiv@a+3)& (0+255),w,b
 11996  011114  0100               	movlb	0	; () banked
 11997  011116  6F86               	movwf	___fldiv@aexp& (0+255),b
 11998                           
 11999                           ; BSR set to: 0
 12000  011118  0100               	movlb	0	; () banked
 12001  01111A  AF74               	btfss	(___fldiv@a+2)& (0+255),7,b
 12002  01111C  D002               	goto	l2931
 12003                           
 12004                           ; BSR set to: 0
 12005  01111E  0100               	movlb	0	; () banked
 12006  011120  8186               	bsf	___fldiv@aexp& (0+255),0,b
 12007  011122                     l2931:
 12008                           
 12009                           ; BSR set to: 0
 12010                           
 12011                           ; BSR set to: 0
 12012  011122  0100               	movlb	0	; () banked
 12013  011124  5186               	movf	___fldiv@aexp& (0+255),w,b
 12014  011126  0100               	movlb	0	; () banked
 12015  011128  B4D8               	btfsc	status,2,c
 12016  01112A  D012               	goto	l2932
 12017                           
 12018                           ; BSR set to: 0
 12019  01112C  0100               	movlb	0	; () banked
 12020  01112E  2986               	incf	___fldiv@aexp& (0+255),w,b
 12021  011130  A4D8               	btfss	status,2,c
 12022  011132  D009               	goto	l2933
 12023                           
 12024                           ; BSR set to: 0
 12025  011134  0E00               	movlw	0
 12026  011136  0100               	movlb	0	; () banked
 12027  011138  6F72               	movwf	___fldiv@a& (0+255),b
 12028  01113A  0E00               	movlw	0
 12029  01113C  6F73               	movwf	(___fldiv@a+1)& (0+255),b
 12030  01113E  0E00               	movlw	0
 12031  011140  6F74               	movwf	(___fldiv@a+2)& (0+255),b
 12032  011142  0E00               	movlw	0
 12033  011144  6F75               	movwf	(___fldiv@a+3)& (0+255),b
 12034  011146                     l2933:
 12035                           
 12036                           ; BSR set to: 0
 12037                           
 12038                           ; BSR set to: 0
 12039  011146  0100               	movlb	0	; () banked
 12040  011148  8F74               	bsf	(___fldiv@a+2)& (0+255),7,b
 12041                           
 12042                           ; BSR set to: 0
 12043  01114A  0E00               	movlw	0
 12044  01114C  0100               	movlb	0	; () banked
 12045  01114E  D008               	goto	L7
 12046  011150                     l2932:
 12047                           
 12048                           ; BSR set to: 0
 12049                           
 12050                           ; BSR set to: 0
 12051  011150  0E00               	movlw	0
 12052  011152  0100               	movlb	0	; () banked
 12053  011154  6F72               	movwf	___fldiv@a& (0+255),b
 12054  011156  0E00               	movlw	0
 12055  011158  6F73               	movwf	(___fldiv@a+1)& (0+255),b
 12056  01115A  0E00               	movlw	0
 12057  01115C  6F74               	movwf	(___fldiv@a+2)& (0+255),b
 12058  01115E  0E00               	movlw	0
 12059  011160                     L7:
 12060  011160  6F75               	movwf	(___fldiv@a+3)& (0+255),b
 12061                           
 12062                           ; BSR set to: 0
 12063                           
 12064                           ; BSR set to: 0
 12065  011162  0100               	movlb	0	; () banked
 12066  011164  5172               	movf	___fldiv@a& (0+255),w,b
 12067  011166  0100               	movlb	0	; () banked
 12068  011168  1173               	iorwf	(___fldiv@a+1)& (0+255),w,b
 12069  01116A  0100               	movlb	0	; () banked
 12070  01116C  1174               	iorwf	(___fldiv@a+2)& (0+255),w,b
 12071  01116E  0100               	movlb	0	; () banked
 12072  011170  1175               	iorwf	(___fldiv@a+3)& (0+255),w,b
 12073  011172  A4D8               	btfss	status,2,c
 12074  011174  D017               	goto	l2935
 12075                           
 12076                           ; BSR set to: 0
 12077  011176  0E00               	movlw	0
 12078  011178  0100               	movlb	0	; () banked
 12079  01117A  6F6E               	movwf	___fldiv@b& (0+255),b
 12080  01117C  0E00               	movlw	0
 12081  01117E  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 12082  011180  0E00               	movlw	0
 12083  011182  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 12084  011184  0E00               	movlw	0
 12085  011186  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 12086                           
 12087                           ; BSR set to: 0
 12088  011188  0100               	movlb	0	; () banked
 12089  01118A  0E80               	movlw	128
 12090  01118C  1370               	iorwf	(___fldiv@b+2)& (0+255),f,b
 12091  01118E  0E7F               	movlw	127
 12092  011190  1371               	iorwf	(___fldiv@b+3)& (0+255),f,b
 12093                           
 12094                           ; BSR set to: 0
 12095  011192  C06E  F06E         	movff	___fldiv@b,?___fldiv
 12096  011196  C06F  F06F         	movff	___fldiv@b+1,?___fldiv+1
 12097  01119A  C070  F070         	movff	___fldiv@b+2,?___fldiv+2
 12098  01119E  C071  F071         	movff	___fldiv@b+3,?___fldiv+3
 12099                           
 12100                           ; BSR set to: 0
 12101  0111A2  0012               	return	
 12102  0111A4                     l2935:
 12103                           
 12104                           ; BSR set to: 0
 12105                           
 12106                           ; BSR set to: 0
 12107  0111A4  0100               	movlb	0	; () banked
 12108  0111A6  5185               	movf	___fldiv@bexp& (0+255),w,b
 12109  0111A8  0100               	movlb	0	; () banked
 12110  0111AA  A4D8               	btfss	status,2,c
 12111  0111AC  D012               	goto	l2937
 12112                           
 12113                           ; BSR set to: 0
 12114  0111AE  0E00               	movlw	0
 12115  0111B0  0100               	movlb	0	; () banked
 12116  0111B2  6F6E               	movwf	___fldiv@b& (0+255),b
 12117  0111B4  0E00               	movlw	0
 12118  0111B6  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 12119  0111B8  0E00               	movlw	0
 12120  0111BA  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 12121  0111BC  0E00               	movlw	0
 12122  0111BE  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 12123                           
 12124                           ; BSR set to: 0
 12125  0111C0  C06E  F06E         	movff	___fldiv@b,?___fldiv
 12126  0111C4  C06F  F06F         	movff	___fldiv@b+1,?___fldiv+1
 12127  0111C8  C070  F070         	movff	___fldiv@b+2,?___fldiv+2
 12128  0111CC  C071  F071         	movff	___fldiv@b+3,?___fldiv+3
 12129                           
 12130                           ; BSR set to: 0
 12131  0111D0  0012               	return	
 12132  0111D2                     l2937:
 12133                           
 12134                           ; BSR set to: 0
 12135                           
 12136                           ; BSR set to: 0
 12137  0111D2  0100               	movlb	0	; () banked
 12138  0111D4  5186               	movf	___fldiv@aexp& (0+255),w,b
 12139  0111D6  0100               	movlb	0	; () banked
 12140  0111D8  6F76               	movwf	??___fldiv& (0+255),b
 12141  0111DA  6B77               	clrf	(??___fldiv+1)& (0+255),b
 12142  0111DC  0100               	movlb	0	; () banked
 12143  0111DE  1F76               	comf	??___fldiv& (0+255),f,b
 12144  0111E0  1F77               	comf	(??___fldiv+1)& (0+255),f,b
 12145  0111E2  4B76               	infsnz	??___fldiv& (0+255),f,b
 12146  0111E4  2B77               	incf	(??___fldiv+1)& (0+255),f,b
 12147  0111E6  0100               	movlb	0	; () banked
 12148  0111E8  5185               	movf	___fldiv@bexp& (0+255),w,b
 12149  0111EA  0100               	movlb	0	; () banked
 12150  0111EC  6F78               	movwf	(??___fldiv+2)& (0+255),b
 12151  0111EE  6B79               	clrf	(??___fldiv+3)& (0+255),b
 12152  0111F0  0100               	movlb	0	; () banked
 12153  0111F2  5176               	movf	??___fldiv& (0+255),w,b
 12154  0111F4  0100               	movlb	0	; () banked
 12155  0111F6  2778               	addwf	(??___fldiv+2)& (0+255),f,b
 12156  0111F8  0100               	movlb	0	; () banked
 12157  0111FA  5177               	movf	(??___fldiv+1)& (0+255),w,b
 12158  0111FC  0100               	movlb	0	; () banked
 12159  0111FE  2379               	addwfc	(??___fldiv+3)& (0+255),f,b
 12160  011200  0E7F               	movlw	127
 12161  011202  0100               	movlb	0	; () banked
 12162  011204  2578               	addwf	(??___fldiv+2)& (0+255),w,b
 12163  011206  0100               	movlb	0	; () banked
 12164  011208  6F7F               	movwf	___fldiv@new_exp& (0+255),b
 12165  01120A  0E00               	movlw	0
 12166  01120C  0100               	movlb	0	; () banked
 12167  01120E  2179               	addwfc	(??___fldiv+3)& (0+255),w,b
 12168  011210  0100               	movlb	0	; () banked
 12169  011212  6F80               	movwf	(___fldiv@new_exp+1)& (0+255),b
 12170                           
 12171                           ; BSR set to: 0
 12172  011214  C06E  F07B         	movff	___fldiv@b,___fldiv@rem
 12173  011218  C06F  F07C         	movff	___fldiv@b+1,___fldiv@rem+1
 12174  01121C  C070  F07D         	movff	___fldiv@b+2,___fldiv@rem+2
 12175  011220  C071  F07E         	movff	___fldiv@b+3,___fldiv@rem+3
 12176                           
 12177                           ; BSR set to: 0
 12178  011224  0E00               	movlw	0
 12179  011226  0100               	movlb	0	; () banked
 12180  011228  6F6E               	movwf	___fldiv@b& (0+255),b
 12181  01122A  0E00               	movlw	0
 12182  01122C  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 12183  01122E  0E00               	movlw	0
 12184  011230  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 12185  011232  0E00               	movlw	0
 12186  011234  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 12187                           
 12188                           ; BSR set to: 0
 12189  011236  0E00               	movlw	0
 12190  011238  0100               	movlb	0	; () banked
 12191  01123A  6F81               	movwf	___fldiv@grs& (0+255),b
 12192  01123C  0E00               	movlw	0
 12193  01123E  6F82               	movwf	(___fldiv@grs+1)& (0+255),b
 12194  011240  0E00               	movlw	0
 12195  011242  6F83               	movwf	(___fldiv@grs+2)& (0+255),b
 12196  011244  0E00               	movlw	0
 12197  011246  6F84               	movwf	(___fldiv@grs+3)& (0+255),b
 12198                           
 12199                           ; BSR set to: 0
 12200  011248  0E00               	movlw	0
 12201  01124A  0100               	movlb	0	; () banked
 12202  01124C  6F86               	movwf	___fldiv@aexp& (0+255),b
 12203  01124E  D042               	goto	l2938
 12204  011250                     
 12205                           ; BSR set to: 0
 12206                           
 12207                           ; BSR set to: 0
 12208  011250  0100               	movlb	0	; () banked
 12209  011252  5186               	movf	___fldiv@aexp& (0+255),w,b
 12210  011254  0100               	movlb	0	; () banked
 12211  011256  B4D8               	btfsc	status,2,c
 12212  011258  D017               	goto	l2940
 12213                           
 12214                           ; BSR set to: 0
 12215  01125A  0100               	movlb	0	; () banked
 12216  01125C  90D8               	bcf	status,0,c
 12217  01125E  377B               	rlcf	___fldiv@rem& (0+255),f,b
 12218  011260  377C               	rlcf	(___fldiv@rem+1)& (0+255),f,b
 12219  011262  377D               	rlcf	(___fldiv@rem+2)& (0+255),f,b
 12220  011264  377E               	rlcf	(___fldiv@rem+3)& (0+255),f,b
 12221  011266  0100               	movlb	0	; () banked
 12222  011268  90D8               	bcf	status,0,c
 12223  01126A  376E               	rlcf	___fldiv@b& (0+255),f,b
 12224  01126C  376F               	rlcf	(___fldiv@b+1)& (0+255),f,b
 12225  01126E  3770               	rlcf	(___fldiv@b+2)& (0+255),f,b
 12226  011270  3771               	rlcf	(___fldiv@b+3)& (0+255),f,b
 12227                           
 12228                           ; BSR set to: 0
 12229  011272  0100               	movlb	0	; () banked
 12230  011274  AF84               	btfss	(___fldiv@grs+3)& (0+255),7,b
 12231  011276  D002               	goto	l2941
 12232                           
 12233                           ; BSR set to: 0
 12234  011278  0100               	movlb	0	; () banked
 12235  01127A  816E               	bsf	___fldiv@b& (0+255),0,b
 12236  01127C                     l2941:
 12237                           
 12238                           ; BSR set to: 0
 12239  01127C  0100               	movlb	0	; () banked
 12240  01127E  90D8               	bcf	status,0,c
 12241  011280  3781               	rlcf	___fldiv@grs& (0+255),f,b
 12242  011282  3782               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 12243  011284  3783               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 12244  011286  3784               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 12245  011288                     l2940:
 12246                           
 12247                           ; BSR set to: 0
 12248                           
 12249                           ; BSR set to: 0
 12250  011288  0100               	movlb	0	; () banked
 12251  01128A  5172               	movf	___fldiv@a& (0+255),w,b
 12252  01128C  0100               	movlb	0	; () banked
 12253  01128E  5D7B               	subwf	___fldiv@rem& (0+255),w,b
 12254  011290  0100               	movlb	0	; () banked
 12255  011292  5173               	movf	(___fldiv@a+1)& (0+255),w,b
 12256  011294  0100               	movlb	0	; () banked
 12257  011296  597C               	subwfb	(___fldiv@rem+1)& (0+255),w,b
 12258  011298  0100               	movlb	0	; () banked
 12259  01129A  5174               	movf	(___fldiv@a+2)& (0+255),w,b
 12260  01129C  0100               	movlb	0	; () banked
 12261  01129E  597D               	subwfb	(___fldiv@rem+2)& (0+255),w,b
 12262  0112A0  0100               	movlb	0	; () banked
 12263  0112A2  5175               	movf	(___fldiv@a+3)& (0+255),w,b
 12264  0112A4  0100               	movlb	0	; () banked
 12265  0112A6  597E               	subwfb	(___fldiv@rem+3)& (0+255),w,b
 12266  0112A8  A0D8               	btfss	status,0,c
 12267  0112AA  D012               	goto	l2942
 12268                           
 12269                           ; BSR set to: 0
 12270  0112AC  0100               	movlb	0	; () banked
 12271  0112AE  8D84               	bsf	(___fldiv@grs+3)& (0+255),6,b
 12272                           
 12273                           ; BSR set to: 0
 12274  0112B0  0100               	movlb	0	; () banked
 12275  0112B2  5172               	movf	___fldiv@a& (0+255),w,b
 12276  0112B4  0100               	movlb	0	; () banked
 12277  0112B6  5F7B               	subwf	___fldiv@rem& (0+255),f,b
 12278  0112B8  0100               	movlb	0	; () banked
 12279  0112BA  5173               	movf	(___fldiv@a+1)& (0+255),w,b
 12280  0112BC  0100               	movlb	0	; () banked
 12281  0112BE  5B7C               	subwfb	(___fldiv@rem+1)& (0+255),f,b
 12282  0112C0  0100               	movlb	0	; () banked
 12283  0112C2  5174               	movf	(___fldiv@a+2)& (0+255),w,b
 12284  0112C4  0100               	movlb	0	; () banked
 12285  0112C6  5B7D               	subwfb	(___fldiv@rem+2)& (0+255),f,b
 12286  0112C8  0100               	movlb	0	; () banked
 12287  0112CA  5175               	movf	(___fldiv@a+3)& (0+255),w,b
 12288  0112CC  0100               	movlb	0	; () banked
 12289  0112CE  5B7E               	subwfb	(___fldiv@rem+3)& (0+255),f,b
 12290  0112D0                     l2942:
 12291                           
 12292                           ; BSR set to: 0
 12293                           
 12294                           ; BSR set to: 0
 12295  0112D0  0100               	movlb	0	; () banked
 12296  0112D2  2B86               	incf	___fldiv@aexp& (0+255),f,b
 12297  0112D4                     l2938:
 12298                           
 12299                           ; BSR set to: 0
 12300  0112D4  0E19               	movlw	25
 12301  0112D6  0100               	movlb	0	; () banked
 12302  0112D8  6586               	cpfsgt	___fldiv@aexp& (0+255),b
 12303  0112DA  D7BA               	goto	l2939
 12304                           
 12305                           ; BSR set to: 0
 12306                           
 12307                           ; BSR set to: 0
 12308  0112DC  0100               	movlb	0	; () banked
 12309  0112DE  517B               	movf	___fldiv@rem& (0+255),w,b
 12310  0112E0  0100               	movlb	0	; () banked
 12311  0112E2  117C               	iorwf	(___fldiv@rem+1)& (0+255),w,b
 12312  0112E4  0100               	movlb	0	; () banked
 12313  0112E6  117D               	iorwf	(___fldiv@rem+2)& (0+255),w,b
 12314  0112E8  0100               	movlb	0	; () banked
 12315  0112EA  117E               	iorwf	(___fldiv@rem+3)& (0+255),w,b
 12316  0112EC  B4D8               	btfsc	status,2,c
 12317  0112EE  D018               	goto	l2945
 12318                           
 12319                           ; BSR set to: 0
 12320  0112F0  0100               	movlb	0	; () banked
 12321  0112F2  8181               	bsf	___fldiv@grs& (0+255),0,b
 12322                           
 12323                           ; BSR set to: 0
 12324  0112F4  D015               	goto	l2945
 12325  0112F6                     
 12326                           ; BSR set to: 0
 12327                           
 12328                           ; BSR set to: 0
 12329  0112F6  0100               	movlb	0	; () banked
 12330  0112F8  90D8               	bcf	status,0,c
 12331  0112FA  376E               	rlcf	___fldiv@b& (0+255),f,b
 12332  0112FC  376F               	rlcf	(___fldiv@b+1)& (0+255),f,b
 12333  0112FE  3770               	rlcf	(___fldiv@b+2)& (0+255),f,b
 12334  011300  3771               	rlcf	(___fldiv@b+3)& (0+255),f,b
 12335                           
 12336                           ; BSR set to: 0
 12337  011302  0100               	movlb	0	; () banked
 12338  011304  AF84               	btfss	(___fldiv@grs+3)& (0+255),7,b
 12339  011306  D002               	goto	l2947
 12340                           
 12341                           ; BSR set to: 0
 12342  011308  0100               	movlb	0	; () banked
 12343  01130A  816E               	bsf	___fldiv@b& (0+255),0,b
 12344  01130C                     l2947:
 12345                           
 12346                           ; BSR set to: 0
 12347  01130C  0100               	movlb	0	; () banked
 12348  01130E  90D8               	bcf	status,0,c
 12349  011310  3781               	rlcf	___fldiv@grs& (0+255),f,b
 12350  011312  3782               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 12351  011314  3783               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 12352  011316  3784               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 12353  011318  0100               	movlb	0	; () banked
 12354  01131A  077F               	decf	___fldiv@new_exp& (0+255),f,b
 12355  01131C  A0D8               	btfss	status,0,c
 12356  01131E  0780               	decf	(___fldiv@new_exp+1)& (0+255),f,b
 12357  011320                     l2945:
 12358                           
 12359                           ; BSR set to: 0
 12360                           
 12361                           ; BSR set to: 0
 12362  011320  0100               	movlb	0	; () banked
 12363  011322  AF70               	btfss	(___fldiv@b+2)& (0+255),7,b
 12364  011324  D7E8               	goto	l2946
 12365                           
 12366                           ; BSR set to: 0
 12367                           
 12368                           ; BSR set to: 0
 12369  011326  0E00               	movlw	0
 12370  011328  0100               	movlb	0	; () banked
 12371  01132A  6F86               	movwf	___fldiv@aexp& (0+255),b
 12372                           
 12373                           ; BSR set to: 0
 12374  01132C  0100               	movlb	0	; () banked
 12375  01132E  AF84               	btfss	(___fldiv@grs+3)& (0+255),7,b
 12376  011330  D024               	goto	l2952
 12377                           
 12378                           ; BSR set to: 0
 12379  011332  0EFF               	movlw	255
 12380  011334  0100               	movlb	0	; () banked
 12381  011336  1581               	andwf	___fldiv@grs& (0+255),w,b
 12382  011338  0100               	movlb	0	; () banked
 12383  01133A  6F76               	movwf	??___fldiv& (0+255),b
 12384  01133C  0EFF               	movlw	255
 12385  01133E  0100               	movlb	0	; () banked
 12386  011340  1582               	andwf	(___fldiv@grs+1)& (0+255),w,b
 12387  011342  0100               	movlb	0	; () banked
 12388  011344  6F77               	movwf	(??___fldiv+1)& (0+255),b
 12389  011346  0EFF               	movlw	255
 12390  011348  0100               	movlb	0	; () banked
 12391  01134A  1583               	andwf	(___fldiv@grs+2)& (0+255),w,b
 12392  01134C  0100               	movlb	0	; () banked
 12393  01134E  6F78               	movwf	(??___fldiv+2)& (0+255),b
 12394  011350  0E7F               	movlw	127
 12395  011352  0100               	movlb	0	; () banked
 12396  011354  1584               	andwf	(___fldiv@grs+3)& (0+255),w,b
 12397  011356  0100               	movlb	0	; () banked
 12398  011358  6F79               	movwf	(??___fldiv+3)& (0+255),b
 12399  01135A  0100               	movlb	0	; () banked
 12400  01135C  5176               	movf	??___fldiv& (0+255),w,b
 12401  01135E  0100               	movlb	0	; () banked
 12402  011360  1177               	iorwf	(??___fldiv+1)& (0+255),w,b
 12403  011362  0100               	movlb	0	; () banked
 12404  011364  1178               	iorwf	(??___fldiv+2)& (0+255),w,b
 12405  011366  0100               	movlb	0	; () banked
 12406  011368  1179               	iorwf	(??___fldiv+3)& (0+255),w,b
 12407  01136A  A4D8               	btfss	status,2,c
 12408  01136C  D003               	goto	u10450
 12409                           
 12410                           ; BSR set to: 0
 12411                           
 12412                           ; BSR set to: 0
 12413  01136E  0100               	movlb	0	; () banked
 12414  011370  A16E               	btfss	___fldiv@b& (0+255),0,b
 12415  011372  D003               	goto	l2952
 12416  011374                     u10450:
 12417                           
 12418                           ; BSR set to: 0
 12419  011374  0E01               	movlw	1
 12420  011376  0100               	movlb	0	; () banked
 12421  011378  6F86               	movwf	___fldiv@aexp& (0+255),b
 12422  01137A                     l2952:
 12423                           
 12424                           ; BSR set to: 0
 12425                           
 12426                           ; BSR set to: 0
 12427                           
 12428                           ; BSR set to: 0
 12429  01137A  0100               	movlb	0	; () banked
 12430  01137C  5186               	movf	___fldiv@aexp& (0+255),w,b
 12431  01137E  0100               	movlb	0	; () banked
 12432  011380  B4D8               	btfsc	status,2,c
 12433  011382  D023               	goto	l2954
 12434                           
 12435                           ; BSR set to: 0
 12436  011384  0E01               	movlw	1
 12437  011386  0100               	movlb	0	; () banked
 12438  011388  276E               	addwf	___fldiv@b& (0+255),f,b
 12439  01138A  0E00               	movlw	0
 12440  01138C  236F               	addwfc	(___fldiv@b+1)& (0+255),f,b
 12441  01138E  2370               	addwfc	(___fldiv@b+2)& (0+255),f,b
 12442  011390  2371               	addwfc	(___fldiv@b+3)& (0+255),f,b
 12443                           
 12444                           ; BSR set to: 0
 12445  011392  0100               	movlb	0	; () banked
 12446  011394  A171               	btfss	(___fldiv@b+3)& (0+255),0,b
 12447  011396  D019               	goto	l2954
 12448                           
 12449                           ; BSR set to: 0
 12450  011398  C06E  F076         	movff	___fldiv@b,??___fldiv
 12451  01139C  C06F  F077         	movff	___fldiv@b+1,??___fldiv+1
 12452  0113A0  C070  F078         	movff	___fldiv@b+2,??___fldiv+2
 12453  0113A4  C071  F079         	movff	___fldiv@b+3,??___fldiv+3
 12454  0113A8  0100               	movlb	0	; () banked
 12455  0113AA  3579               	rlcf	(??___fldiv+3)& (0+255),w,b
 12456  0113AC  3379               	rrcf	(??___fldiv+3)& (0+255),f,b
 12457  0113AE  3378               	rrcf	(??___fldiv+2)& (0+255),f,b
 12458  0113B0  3377               	rrcf	(??___fldiv+1)& (0+255),f,b
 12459  0113B2  3376               	rrcf	??___fldiv& (0+255),f,b
 12460  0113B4  C076  F06E         	movff	??___fldiv,___fldiv@b
 12461  0113B8  C077  F06F         	movff	??___fldiv+1,___fldiv@b+1
 12462  0113BC  C078  F070         	movff	??___fldiv+2,___fldiv@b+2
 12463  0113C0  C079  F071         	movff	??___fldiv+3,___fldiv@b+3
 12464                           
 12465                           ; BSR set to: 0
 12466  0113C4  0100               	movlb	0	; () banked
 12467  0113C6  4B7F               	infsnz	___fldiv@new_exp& (0+255),f,b
 12468  0113C8  2B80               	incf	(___fldiv@new_exp+1)& (0+255),f,b
 12469  0113CA                     l2954:
 12470                           
 12471                           ; BSR set to: 0
 12472                           
 12473                           ; BSR set to: 0
 12474                           
 12475                           ; BSR set to: 0
 12476  0113CA  0100               	movlb	0	; () banked
 12477  0113CC  BF80               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 12478  0113CE  D014               	goto	l2955
 12479  0113D0  0100               	movlb	0	; () banked
 12480  0113D2  5180               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 12481  0113D4  E104               	bnz	u10480
 12482  0113D6  0100               	movlb	0	; () banked
 12483  0113D8  297F               	incf	___fldiv@new_exp& (0+255),w,b
 12484  0113DA  A0D8               	btfss	status,0,c
 12485  0113DC  D00D               	goto	l2955
 12486  0113DE                     u10480:
 12487                           
 12488                           ; BSR set to: 0
 12489  0113DE  0E00               	movlw	0
 12490  0113E0  0100               	movlb	0	; () banked
 12491  0113E2  6F80               	movwf	(___fldiv@new_exp+1)& (0+255),b
 12492  0113E4  697F               	setf	___fldiv@new_exp& (0+255),b
 12493  0113E6  0E00               	movlw	0
 12494  0113E8  0100               	movlb	0	; () banked
 12495  0113EA  6F6E               	movwf	___fldiv@b& (0+255),b
 12496  0113EC  0E00               	movlw	0
 12497  0113EE  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 12498  0113F0  0E00               	movlw	0
 12499  0113F2  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 12500  0113F4  0E00               	movlw	0
 12501  0113F6  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 12502  0113F8                     l2955:
 12503                           
 12504                           ; BSR set to: 0
 12505                           
 12506                           ; BSR set to: 0
 12507  0113F8  0100               	movlb	0	; () banked
 12508  0113FA  BF80               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 12509  0113FC  D007               	goto	u10490
 12510  0113FE  0100               	movlb	0	; () banked
 12511  011400  5180               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 12512  011402  E115               	bnz	l13856
 12513  011404  0100               	movlb	0	; () banked
 12514  011406  057F               	decf	___fldiv@new_exp& (0+255),w,b
 12515  011408  B0D8               	btfsc	status,0,c
 12516  01140A  D011               	goto	l2956
 12517  01140C                     u10490:
 12518                           
 12519                           ; BSR set to: 0
 12520  01140C  0E00               	movlw	0
 12521  01140E  0100               	movlb	0	; () banked
 12522  011410  6F80               	movwf	(___fldiv@new_exp+1)& (0+255),b
 12523  011412  0E00               	movlw	0
 12524  011414  6F7F               	movwf	___fldiv@new_exp& (0+255),b
 12525  011416  0E00               	movlw	0
 12526  011418  0100               	movlb	0	; () banked
 12527  01141A  6F6E               	movwf	___fldiv@b& (0+255),b
 12528  01141C  0E00               	movlw	0
 12529  01141E  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 12530  011420  0E00               	movlw	0
 12531  011422  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 12532  011424  0E00               	movlw	0
 12533  011426  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 12534  011428  0E00               	movlw	0
 12535  01142A  0100               	movlb	0	; () banked
 12536  01142C  6F7A               	movwf	___fldiv@sign& (0+255),b
 12537  01142E                     l2956:
 12538  01142E                     l13856:
 12539                           
 12540                           ; BSR set to: 0
 12541  01142E  C07F  F085         	movff	___fldiv@new_exp,___fldiv@bexp
 12542                           
 12543                           ; BSR set to: 0
 12544  011432  0100               	movlb	0	; () banked
 12545  011434  A185               	btfss	___fldiv@bexp& (0+255),0,b
 12546  011436  D003               	goto	l2957
 12547                           
 12548                           ; BSR set to: 0
 12549  011438  0100               	movlb	0	; () banked
 12550  01143A  8F70               	bsf	(___fldiv@b+2)& (0+255),7,b
 12551  01143C  D002               	goto	l2958
 12552  01143E                     l2957:
 12553                           
 12554                           ; BSR set to: 0
 12555                           
 12556                           ; BSR set to: 0
 12557  01143E  0100               	movlb	0	; () banked
 12558  011440  9F70               	bcf	(___fldiv@b+2)& (0+255),7,b
 12559  011442                     l2958:
 12560                           
 12561                           ; BSR set to: 0
 12562                           
 12563                           ; BSR set to: 0
 12564  011442  0100               	movlb	0	; () banked
 12565  011444  90D8               	bcf	status,0,c
 12566  011446  3185               	rrcf	___fldiv@bexp& (0+255),w,b
 12567  011448  0100               	movlb	0	; () banked
 12568  01144A  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 12569                           
 12570                           ; BSR set to: 0
 12571  01144C  0100               	movlb	0	; () banked
 12572  01144E  517A               	movf	___fldiv@sign& (0+255),w,b
 12573  011450  0100               	movlb	0	; () banked
 12574  011452  1371               	iorwf	(___fldiv@b+3)& (0+255),f,b
 12575                           
 12576                           ; BSR set to: 0
 12577  011454  C06E  F06E         	movff	___fldiv@b,?___fldiv
 12578  011458  C06F  F06F         	movff	___fldiv@b+1,?___fldiv+1
 12579  01145C  C070  F070         	movff	___fldiv@b+2,?___fldiv+2
 12580  011460  C071  F071         	movff	___fldiv@b+3,?___fldiv+3
 12581  011464  0012               	return	
 12582  011466                     __end_of___fldiv:
 12583                           	opt stack 0
 12584                           tblptru	equ	0xFF8
 12585                           tblptrh	equ	0xFF7
 12586                           tblptrl	equ	0xFF6
 12587                           tablat	equ	0xFF5
 12588                           prodh	equ	0xFF4
 12589                           prodl	equ	0xFF3
 12590                           intcon	equ	0xFF2
 12591                           postinc0	equ	0xFEE
 12592                           wreg	equ	0xFE8
 12593                           postdec1	equ	0xFE5
 12594                           fsr1h	equ	0xFE2
 12595                           fsr1l	equ	0xFE1
 12596                           indf2	equ	0xFDF
 12597                           postinc2	equ	0xFDE
 12598                           postdec2	equ	0xFDD
 12599                           fsr2h	equ	0xFDA
 12600                           fsr2l	equ	0xFD9
 12601                           status	equ	0xFD8
 12602                           
 12603 ;; *************** function _init *****************
 12604 ;; Defined at:
 12605 ;;		line 61 in file "main.c"
 12606 ;; Parameters:    Size  Location     Type
 12607 ;;		None
 12608 ;; Auto vars:     Size  Location     Type
 12609 ;;		None
 12610 ;; Return value:  Size  Location     Type
 12611 ;;                  1    wreg      void 
 12612 ;; Registers used:
 12613 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 12614 ;; Tracked objects:
 12615 ;;		On entry : 0/0
 12616 ;;		On exit  : 0/0
 12617 ;;		Unchanged: 0/0
 12618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12622 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12623 ;;Total ram usage:        0 bytes
 12624 ;; Hardware stack levels used:    1
 12625 ;; Hardware stack levels required when called:   17
 12626 ;; This function calls:
 12627 ;;		_ADC_Init
 12628 ;;		_ADC_Start
 12629 ;;		_Console_Init
 12630 ;;		_HMI_Init
 12631 ;;		_ISR_Enable
 12632 ;;		_LCD_Init
 12633 ;;		_MXK_BlockSwitchTo
 12634 ;;		_MXK_Dequeue
 12635 ;;		_MXK_Init
 12636 ;;		_MXK_Release
 12637 ;;		_Motor_Init
 12638 ;;		_delay_ms
 12639 ;;		_eusart_init
 12640 ;;		_irobot_init
 12641 ;;		_irobot_init_song_0
 12642 ;;		_irobot_led_power_on
 12643 ;; This function is called by:
 12644 ;;		_main
 12645 ;; This function uses a non-reentrant model
 12646 ;;
 12647                           
 12648                           	psect	text48
 12649  01473E                     __ptext48:
 12650                           	opt stack 0
 12651  01473E                     _init:
 12652                           	opt stack 13
 12653                           
 12654                           ;main.c: 63: MXK_Init();
 12655                           
 12656                           ; BSR set to: 0
 12657                           ;incstack = 0
 12658  01473E  EC9A  F096         	call	_MXK_Init	;wreg free
 12659                           
 12660                           ;main.c: 66: ISR_Enable();
 12661  014742  EC01  F0B3         	call	_ISR_Enable	;wreg free
 12662                           
 12663                           ;main.c: 69: if (MXK_BlockSwitchTo(eMXK_HMI)) {
 12664  014746  0E01               	movlw	1
 12665  014748  EC51  F0AF         	call	_MXK_BlockSwitchTo
 12666  01474C  0900               	iorlw	0
 12667  01474E  B4D8               	btfsc	status,2,c
 12668  014750  D00C               	goto	l2301
 12669                           
 12670                           ;main.c: 70: Console_Init();
 12671  014752  ECFD  F0A6         	call	_Console_Init	;wreg free
 12672                           
 12673                           ;main.c: 71: HMI_Init();
 12674  014756  EC9A  F090         	call	_HMI_Init	;wreg free
 12675                           
 12676                           ;main.c: 72: LCD_Init();
 12677  01475A  EC5A  F097         	call	_LCD_Init	;wreg free
 12678                           
 12679                           ;main.c: 73: if (MXK_Release())
 12680  01475E  ECF5  F0B1         	call	_MXK_Release	;wreg free
 12681  014762  0900               	iorlw	0
 12682  014764  A4D8               	btfss	status,2,c
 12683                           
 12684                           ;main.c: 74: MXK_Dequeue();
 12685  014766  EC32  F0AF         	call	_MXK_Dequeue	;wreg free
 12686  01476A                     l2301:
 12687                           
 12688                           ;main.c: 75: }
 12689                           ;main.c: 78: if (MXK_BlockSwitchTo(eMXK_Motor)) {
 12690  01476A  0E08               	movlw	8
 12691  01476C  EC51  F0AF         	call	_MXK_BlockSwitchTo
 12692  014770  0900               	iorlw	0
 12693  014772  B4D8               	btfsc	status,2,c
 12694  014774  D013               	goto	l2303
 12695                           
 12696                           ;main.c: 79: Motor_Init(&Stepper, 0b1000);
 12697  014776  0EC7               	movlw	low _Stepper
 12698  014778  0100               	movlb	0	; () banked
 12699  01477A  6F8D               	movwf	Motor_Init@pMotor& (0+255),b
 12700  01477C  0E03               	movlw	high _Stepper
 12701  01477E  0100               	movlb	0	; () banked
 12702  014780  6F8E               	movwf	(Motor_Init@pMotor+1)& (0+255),b
 12703  014782  0E00               	movlw	0
 12704  014784  0100               	movlb	0	; () banked
 12705  014786  6F90               	movwf	(Motor_Init@pAddress+1)& (0+255),b
 12706  014788  0E08               	movlw	8
 12707  01478A  6F8F               	movwf	Motor_Init@pAddress& (0+255),b
 12708  01478C  EC1C  F09E         	call	_Motor_Init	;wreg free
 12709                           
 12710                           ;main.c: 80: if (MXK_Release())
 12711  014790  ECF5  F0B1         	call	_MXK_Release	;wreg free
 12712  014794  0900               	iorlw	0
 12713  014796  A4D8               	btfss	status,2,c
 12714                           
 12715                           ;main.c: 81: MXK_Dequeue();
 12716  014798  EC32  F0AF         	call	_MXK_Dequeue	;wreg free
 12717  01479C                     l2303:
 12718                           
 12719                           ;main.c: 82: }
 12720                           ;main.c: 85: ADC_Init(&ADC_AN0, eADC_Ch0);
 12721  01479C  0EF4               	movlw	low _ADC_AN0
 12722  01479E  0100               	movlb	0	; () banked
 12723  0147A0  6F64               	movwf	ADC_Init@pInput& (0+255),b
 12724  0147A2  0E00               	movlw	high _ADC_AN0
 12725  0147A4  0100               	movlb	0	; () banked
 12726  0147A6  6F65               	movwf	(ADC_Init@pInput+1)& (0+255),b
 12727  0147A8  0E00               	movlw	0
 12728  0147AA  0100               	movlb	0	; () banked
 12729  0147AC  6F66               	movwf	ADC_Init@pChannel& (0+255),b
 12730  0147AE  EC48  F0A8         	call	_ADC_Init	;wreg free
 12731                           
 12732                           ;main.c: 86: float ADC_Voltage(ADCPtr plnput);
 12733                           ;main.c: 87: ADC_Start(&ADC_AN0);
 12734  0147B2  0EF4               	movlw	low _ADC_AN0
 12735  0147B4  0100               	movlb	0	; () banked
 12736  0147B6  6F62               	movwf	ADC_Start@pInput& (0+255),b
 12737  0147B8  0E00               	movlw	high _ADC_AN0
 12738  0147BA  0100               	movlb	0	; () banked
 12739  0147BC  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
 12740  0147BE  EC87  F0A7         	call	_ADC_Start	;wreg free
 12741                           
 12742                           ;main.c: 89: eusart_init();
 12743  0147C2  EC7E  F0B1         	call	_eusart_init	;wreg free
 12744                           
 12745                           ;main.c: 90: irobot_init();
 12746  0147C6  ECC1  F0B2         	call	_irobot_init	;wreg free
 12747                           
 12748                           ;main.c: 92: irobot_led_power_on(0xA);
 12749  0147CA  0E0A               	movlw	10
 12750  0147CC  ECE7  F0B1         	call	_irobot_led_power_on
 12751                           
 12752                           ;main.c: 93: irobot_init_song_0();
 12753  0147D0  EC5F  F0B1         	call	_irobot_init_song_0	;wreg free
 12754                           
 12755                           ;main.c: 94: delay_ms(20);
 12756  0147D4  0E00               	movlw	0
 12757  0147D6  0100               	movlb	0	; () banked
 12758  0147D8  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 12759  0147DA  0E14               	movlw	20
 12760  0147DC  6F60               	movwf	delay_ms@ms& (0+255),b
 12761  0147DE  ECBD  F0AA         	call	_delay_ms	;wreg free
 12762  0147E2  0012               	return		;funcret
 12763  0147E4                     __end_of_init:
 12764                           	opt stack 0
 12765                           tblptru	equ	0xFF8
 12766                           tblptrh	equ	0xFF7
 12767                           tblptrl	equ	0xFF6
 12768                           tablat	equ	0xFF5
 12769                           prodh	equ	0xFF4
 12770                           prodl	equ	0xFF3
 12771                           intcon	equ	0xFF2
 12772                           postinc0	equ	0xFEE
 12773                           wreg	equ	0xFE8
 12774                           postdec1	equ	0xFE5
 12775                           fsr1h	equ	0xFE2
 12776                           fsr1l	equ	0xFE1
 12777                           indf2	equ	0xFDF
 12778                           postinc2	equ	0xFDE
 12779                           postdec2	equ	0xFDD
 12780                           fsr2h	equ	0xFDA
 12781                           fsr2l	equ	0xFD9
 12782                           status	equ	0xFD8
 12783                           
 12784 ;; *************** function _irobot_led_power_on *****************
 12785 ;; Defined at:
 12786 ;;		line 303 in file "Library/iRobotSerial.c"
 12787 ;; Parameters:    Size  Location     Type
 12788 ;;  powerOnColou    1    wreg     unsigned char 
 12789 ;; Auto vars:     Size  Location     Type
 12790 ;;  powerOnColou    1   20[BANK0 ] unsigned char 
 12791 ;; Return value:  Size  Location     Type
 12792 ;;                  1    wreg      void 
 12793 ;; Registers used:
 12794 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 12795 ;; Tracked objects:
 12796 ;;		On entry : 0/0
 12797 ;;		On exit  : 0/0
 12798 ;;		Unchanged: 0/0
 12799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12801 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12803 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12804 ;;Total ram usage:        1 bytes
 12805 ;; Hardware stack levels used:    1
 12806 ;; Hardware stack levels required when called:    9
 12807 ;; This function calls:
 12808 ;;		_irobot_leds
 12809 ;; This function is called by:
 12810 ;;		_init
 12811 ;; This function uses a non-reentrant model
 12812 ;;
 12813                           
 12814                           	psect	text49
 12815  0163CE                     __ptext49:
 12816                           	opt stack 0
 12817  0163CE                     _irobot_led_power_on:
 12818                           	opt stack 20
 12819                           
 12820                           ;incstack = 0
 12821                           ;irobot_led_power_on@powerOnColour stored from wreg
 12822  0163CE  0100               	movlb	0	; () banked
 12823  0163D0  6F74               	movwf	irobot_led_power_on@powerOnColour& (0+255),b
 12824                           
 12825                           ;iRobotSerial.c: 304: irobot_leds(0, 0, powerOnColour, iR_CONST_LED_ON);
 12826  0163D2  0E00               	movlw	0
 12827  0163D4  0100               	movlb	0	; () banked
 12828  0163D6  6F70               	movwf	irobot_leds@LEDBit& (0+255),b
 12829  0163D8  C074  F071         	movff	irobot_led_power_on@powerOnColour,irobot_leds@powerColour
 12830  0163DC  0EFF               	movlw	255
 12831  0163DE  0100               	movlb	0	; () banked
 12832  0163E0  6F72               	movwf	irobot_leds@powerLuminosity& (0+255),b
 12833  0163E2  0E00               	movlw	0
 12834  0163E4  EC7C  F0AC         	call	_irobot_leds
 12835  0163E8  0012               	return		;funcret
 12836  0163EA                     __end_of_irobot_led_power_on:
 12837                           	opt stack 0
 12838                           tblptru	equ	0xFF8
 12839                           tblptrh	equ	0xFF7
 12840                           tblptrl	equ	0xFF6
 12841                           tablat	equ	0xFF5
 12842                           prodh	equ	0xFF4
 12843                           prodl	equ	0xFF3
 12844                           intcon	equ	0xFF2
 12845                           postinc0	equ	0xFEE
 12846                           wreg	equ	0xFE8
 12847                           postdec1	equ	0xFE5
 12848                           fsr1h	equ	0xFE2
 12849                           fsr1l	equ	0xFE1
 12850                           indf2	equ	0xFDF
 12851                           postinc2	equ	0xFDE
 12852                           postdec2	equ	0xFDD
 12853                           fsr2h	equ	0xFDA
 12854                           fsr2l	equ	0xFD9
 12855                           status	equ	0xFD8
 12856                           
 12857 ;; *************** function _irobot_leds *****************
 12858 ;; Defined at:
 12859 ;;		line 239 in file "Library/iRobotSerial.c"
 12860 ;; Parameters:    Size  Location     Type
 12861 ;;  isScript        1    wreg     unsigned char 
 12862 ;;  LEDBit          1   16[BANK0 ] unsigned char 
 12863 ;;  powerColour     1   17[BANK0 ] unsigned char 
 12864 ;;  powerLuminos    1   18[BANK0 ] unsigned char 
 12865 ;; Auto vars:     Size  Location     Type
 12866 ;;  isScript        1   19[BANK0 ] unsigned char 
 12867 ;; Return value:  Size  Location     Type
 12868 ;;                  1    wreg      void 
 12869 ;; Registers used:
 12870 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 12871 ;; Tracked objects:
 12872 ;;		On entry : 0/0
 12873 ;;		On exit  : 0/0
 12874 ;;		Unchanged: 0/0
 12875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12876 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12877 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12879 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12880 ;;Total ram usage:        4 bytes
 12881 ;; Hardware stack levels used:    1
 12882 ;; Hardware stack levels required when called:    8
 12883 ;; This function calls:
 12884 ;;		_eusart_putch
 12885 ;;		_load_iRScriptStack
 12886 ;; This function is called by:
 12887 ;;		_irobot_led_power_on
 12888 ;;		_irobot_led_power_off
 12889 ;; This function uses a non-reentrant model
 12890 ;;
 12891                           
 12892                           	psect	text50
 12893  0158F8                     __ptext50:
 12894                           	opt stack 0
 12895  0158F8                     _irobot_leds:
 12896                           	opt stack 20
 12897                           
 12898                           ;incstack = 0
 12899                           ;irobot_leds@isScript stored from wreg
 12900  0158F8  0100               	movlb	0	; () banked
 12901  0158FA  6F73               	movwf	irobot_leds@isScript& (0+255),b
 12902                           
 12903                           ;iRobotSerial.c: 240: if (isScript) {
 12904  0158FC  0100               	movlb	0	; () banked
 12905  0158FE  5173               	movf	irobot_leds@isScript& (0+255),w,b
 12906  015900  0100               	movlb	0	; () banked
 12907  015902  B4D8               	btfsc	status,2,c
 12908  015904  D015               	goto	l2144
 12909                           
 12910                           ; BSR set to: 0
 12911                           ;iRobotSerial.c: 241: load_iRScriptStack(4, iR_LEDS,
 12912                           ;iRobotSerial.c: 242: LEDBit, powerColour, powerLuminosity);
 12913  015906  0E00               	movlw	0
 12914  015908  0100               	movlb	0	; () banked
 12915  01590A  6F61               	movwf	(?_load_iRScriptStack+1)& (0+255),b
 12916  01590C  0E8B               	movlw	139
 12917  01590E  6F60               	movwf	?_load_iRScriptStack& (0+255),b
 12918  015910  C070  F062         	movff	irobot_leds@LEDBit,?_load_iRScriptStack+2
 12919  015914  0100               	movlb	0	; () banked
 12920  015916  6B63               	clrf	(?_load_iRScriptStack+3)& (0+255),b
 12921  015918  C071  F064         	movff	irobot_leds@powerColour,?_load_iRScriptStack+4
 12922  01591C  0100               	movlb	0	; () banked
 12923  01591E  6B65               	clrf	(?_load_iRScriptStack+5)& (0+255),b
 12924  015920  C072  F066         	movff	irobot_leds@powerLuminosity,?_load_iRScriptStack+6
 12925  015924  0100               	movlb	0	; () banked
 12926  015926  6B67               	clrf	(?_load_iRScriptStack+7)& (0+255),b
 12927  015928  0E04               	movlw	4
 12928  01592A  EC88  F0AA         	call	_load_iRScriptStack
 12929                           
 12930                           ;iRobotSerial.c: 243: }
 12931  01592E  0012               	return	
 12932  015930                     l2144:
 12933                           
 12934                           ;iRobotSerial.c: 244: else{
 12935                           ;iRobotSerial.c: 245: eusart_putch(iR_LEDS);
 12936  015930  0E8B               	movlw	139
 12937  015932  ECC8  F0B2         	call	_eusart_putch
 12938                           
 12939                           ;iRobotSerial.c: 246: eusart_putch(LEDBit);
 12940  015936  0100               	movlb	0	; () banked
 12941  015938  5170               	movf	irobot_leds@LEDBit& (0+255),w,b
 12942  01593A  ECC8  F0B2         	call	_eusart_putch
 12943                           
 12944                           ;iRobotSerial.c: 247: eusart_putch(powerColour);
 12945  01593E  0100               	movlb	0	; () banked
 12946  015940  5171               	movf	irobot_leds@powerColour& (0+255),w,b
 12947  015942  ECC8  F0B2         	call	_eusart_putch
 12948                           
 12949                           ;iRobotSerial.c: 248: eusart_putch(powerLuminosity);
 12950  015946  0100               	movlb	0	; () banked
 12951  015948  5172               	movf	irobot_leds@powerLuminosity& (0+255),w,b
 12952  01594A  ECC8  F0B2         	call	_eusart_putch
 12953  01594E  0012               	return	
 12954  015950                     __end_of_irobot_leds:
 12955                           	opt stack 0
 12956                           tblptru	equ	0xFF8
 12957                           tblptrh	equ	0xFF7
 12958                           tblptrl	equ	0xFF6
 12959                           tablat	equ	0xFF5
 12960                           prodh	equ	0xFF4
 12961                           prodl	equ	0xFF3
 12962                           intcon	equ	0xFF2
 12963                           postinc0	equ	0xFEE
 12964                           wreg	equ	0xFE8
 12965                           postdec1	equ	0xFE5
 12966                           fsr1h	equ	0xFE2
 12967                           fsr1l	equ	0xFE1
 12968                           indf2	equ	0xFDF
 12969                           postinc2	equ	0xFDE
 12970                           postdec2	equ	0xFDD
 12971                           fsr2h	equ	0xFDA
 12972                           fsr2l	equ	0xFD9
 12973                           status	equ	0xFD8
 12974                           
 12975 ;; *************** function _load_iRScriptStack *****************
 12976 ;; Defined at:
 12977 ;;		line 176 in file "Library/iRobotSerial.c"
 12978 ;; Parameters:    Size  Location     Type
 12979 ;;  bytesToLoad     1    wreg     unsigned char 
 12980 ;; Auto vars:     Size  Location     Type
 12981 ;;  bytesToLoad     1   14[BANK0 ] unsigned char 
 12982 ;;  i               1   15[BANK0 ] unsigned char 
 12983 ;;  loadByte        2   12[BANK0 ] PTR void [1]
 12984 ;;		 -> ?_load_iRScriptStack(1), 
 12985 ;; Return value:  Size  Location     Type
 12986 ;;                  1    wreg      void 
 12987 ;; Registers used:
 12988 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 12989 ;; Tracked objects:
 12990 ;;		On entry : 0/0
 12991 ;;		On exit  : 0/0
 12992 ;;		Unchanged: 0/0
 12993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12994 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12995 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12996 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12997 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12998 ;;Total ram usage:       16 bytes
 12999 ;; Hardware stack levels used:    1
 13000 ;; Hardware stack levels required when called:    7
 13001 ;; This function calls:
 13002 ;;		Nothing
 13003 ;; This function is called by:
 13004 ;;		_irobot_angle_wait
 13005 ;;		_irobot_move
 13006 ;;		_irobot_leds
 13007 ;;		_irobot_distance_wait
 13008 ;; This function uses a non-reentrant model
 13009 ;;
 13010                           
 13011                           	psect	text51
 13012  015510                     __ptext51:
 13013                           	opt stack 0
 13014  015510                     _load_iRScriptStack:
 13015                           	opt stack 20
 13016                           
 13017                           ;incstack = 0
 13018                           ;load_iRScriptStack@bytesToLoad stored from wreg
 13019  015510  0100               	movlb	0	; () banked
 13020  015512  6F6E               	movwf	load_iRScriptStack@bytesToLoad& (0+255),b
 13021                           
 13022                           ;iRobotSerial.c: 177: va_list loadByte;
 13023                           ;iRobotSerial.c: 178: *loadByte = __va_start();
 13024  015514  0E60               	movlw	low ?_load_iRScriptStack
 13025  015516  0100               	movlb	0	; () banked
 13026  015518  6F6C               	movwf	load_iRScriptStack@loadByte& (0+255),b
 13027  01551A  0E00               	movlw	high ?_load_iRScriptStack
 13028  01551C  0100               	movlb	0	; () banked
 13029  01551E  6F6D               	movwf	(load_iRScriptStack@loadByte+1)& (0+255),b
 13030                           
 13031                           ;iRobotSerial.c: 179: for (UINT8 i = 0; i < bytesToLoad; i++) {
 13032  015520  0E00               	movlw	0
 13033  015522  0100               	movlb	0	; () banked
 13034  015524  6F6F               	movwf	load_iRScriptStack@i& (0+255),b
 13035  015526  D01F               	goto	l2118
 13036  015528                     
 13037                           ; BSR set to: 0
 13038                           ;iRobotSerial.c: 180: iRScriptStack[iRScriptIndex + i] = (*(int *)__va_arg((*(int **)loa
      +                          dByte), (int)0));
 13039                           
 13040                           ; BSR set to: 0
 13041  015528  C06C  FFD9         	movff	load_iRScriptStack@loadByte,fsr2l
 13042  01552C  C06D  FFDA         	movff	load_iRScriptStack@loadByte+1,fsr2h
 13043  015530  0100               	movlb	0	; () banked
 13044  015532  516F               	movf	load_iRScriptStack@i& (0+255),w,b
 13045  015534  C037  F06A         	movff	_iRScriptIndex,??_load_iRScriptStack
 13046  015538  0100               	movlb	0	; () banked
 13047  01553A  6B6B               	clrf	(??_load_iRScriptStack+1)& (0+255),b
 13048  01553C  0100               	movlb	0	; () banked
 13049  01553E  276A               	addwf	??_load_iRScriptStack& (0+255),f,b
 13050  015540  0E00               	movlw	0
 13051  015542  236B               	addwfc	(??_load_iRScriptStack+1)& (0+255),f,b
 13052  015544  0E1E               	movlw	low _iRScriptStack
 13053  015546  0100               	movlb	0	; () banked
 13054  015548  256A               	addwf	??_load_iRScriptStack& (0+255),w,b
 13055  01554A  6EE1               	movwf	fsr1l,c
 13056  01554C  0E04               	movlw	high _iRScriptStack
 13057  01554E  0100               	movlb	0	; () banked
 13058  015550  216B               	addwfc	(??_load_iRScriptStack+1)& (0+255),w,b
 13059  015552  6EE2               	movwf	fsr1h,c
 13060  015554  CFDF FFE7          	movff	indf2,indf1
 13061                           
 13062                           ; BSR set to: 0
 13063  015558  0E02               	movlw	2
 13064  01555A  0100               	movlb	0	; () banked
 13065  01555C  276C               	addwf	load_iRScriptStack@loadByte& (0+255),f,b
 13066  01555E  0E00               	movlw	0
 13067  015560  236D               	addwfc	(load_iRScriptStack@loadByte+1)& (0+255),f,b
 13068                           
 13069                           ; BSR set to: 0
 13070  015562  0100               	movlb	0	; () banked
 13071  015564  2B6F               	incf	load_iRScriptStack@i& (0+255),f,b
 13072  015566                     l2118:
 13073                           
 13074                           ; BSR set to: 0
 13075                           
 13076                           ; BSR set to: 0
 13077  015566  0100               	movlb	0	; () banked
 13078  015568  516E               	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
 13079  01556A  0100               	movlb	0	; () banked
 13080  01556C  5D6F               	subwf	load_iRScriptStack@i& (0+255),w,b
 13081  01556E  A0D8               	btfss	status,0,c
 13082  015570  D7DB               	goto	l2119
 13083                           
 13084                           ; BSR set to: 0
 13085                           ;iRobotSerial.c: 181: }
 13086                           ;iRobotSerial.c: 182: ;
 13087                           ;iRobotSerial.c: 183: iRScriptIndex += bytesToLoad;
 13088                           
 13089                           ; BSR set to: 0
 13090  015572  0100               	movlb	0	; () banked
 13091  015574  516E               	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
 13092  015576  2637               	addwf	_iRScriptIndex,f,c
 13093                           
 13094                           ; BSR set to: 0
 13095  015578  0012               	return		;funcret
 13096  01557A                     __end_of_load_iRScriptStack:
 13097                           	opt stack 0
 13098                           tblptru	equ	0xFF8
 13099                           tblptrh	equ	0xFF7
 13100                           tblptrl	equ	0xFF6
 13101                           tablat	equ	0xFF5
 13102                           prodh	equ	0xFF4
 13103                           prodl	equ	0xFF3
 13104                           intcon	equ	0xFF2
 13105                           postinc0	equ	0xFEE
 13106                           wreg	equ	0xFE8
 13107                           indf1	equ	0xFE7
 13108                           postdec1	equ	0xFE5
 13109                           fsr1h	equ	0xFE2
 13110                           fsr1l	equ	0xFE1
 13111                           indf2	equ	0xFDF
 13112                           postinc2	equ	0xFDE
 13113                           postdec2	equ	0xFDD
 13114                           fsr2h	equ	0xFDA
 13115                           fsr2l	equ	0xFD9
 13116                           status	equ	0xFD8
 13117                           
 13118 ;; *************** function _irobot_init_song_0 *****************
 13119 ;; Defined at:
 13120 ;;		line 252 in file "Library/iRobotSerial.c"
 13121 ;; Parameters:    Size  Location     Type
 13122 ;;		None
 13123 ;; Auto vars:     Size  Location     Type
 13124 ;;		None
 13125 ;; Return value:  Size  Location     Type
 13126 ;;                  1    wreg      void 
 13127 ;; Registers used:
 13128 ;;		wreg, cstack
 13129 ;; Tracked objects:
 13130 ;;		On entry : 0/0
 13131 ;;		On exit  : 0/0
 13132 ;;		Unchanged: 0/0
 13133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13137 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13138 ;;Total ram usage:        0 bytes
 13139 ;; Hardware stack levels used:    1
 13140 ;; Hardware stack levels required when called:    8
 13141 ;; This function calls:
 13142 ;;		_eusart_putch
 13143 ;; This function is called by:
 13144 ;;		_init
 13145 ;; This function uses a non-reentrant model
 13146 ;;
 13147                           
 13148                           	psect	text52
 13149  0162BE                     __ptext52:
 13150                           	opt stack 0
 13151  0162BE                     _irobot_init_song_0:
 13152                           	opt stack 21
 13153                           
 13154                           ;iRobotSerial.c: 253: eusart_putch(iR_SONG_INIT);
 13155                           
 13156                           ; BSR set to: 0
 13157                           ;incstack = 0
 13158  0162BE  0E8C               	movlw	140
 13159  0162C0  ECC8  F0B2         	call	_eusart_putch
 13160                           
 13161                           ;iRobotSerial.c: 254: eusart_putch(0);
 13162  0162C4  0E00               	movlw	0
 13163  0162C6  ECC8  F0B2         	call	_eusart_putch
 13164                           
 13165                           ;iRobotSerial.c: 255: eusart_putch(1);
 13166  0162CA  0E01               	movlw	1
 13167  0162CC  ECC8  F0B2         	call	_eusart_putch
 13168                           
 13169                           ;iRobotSerial.c: 256: eusart_putch(60);
 13170  0162D0  0E3C               	movlw	60
 13171  0162D2  ECC8  F0B2         	call	_eusart_putch
 13172                           
 13173                           ;iRobotSerial.c: 257: eusart_putch(4);
 13174  0162D6  0E04               	movlw	4
 13175  0162D8  ECC8  F0B2         	call	_eusart_putch
 13176  0162DC  0012               	return		;funcret
 13177  0162DE                     __end_of_irobot_init_song_0:
 13178                           	opt stack 0
 13179                           tblptru	equ	0xFF8
 13180                           tblptrh	equ	0xFF7
 13181                           tblptrl	equ	0xFF6
 13182                           tablat	equ	0xFF5
 13183                           prodh	equ	0xFF4
 13184                           prodl	equ	0xFF3
 13185                           intcon	equ	0xFF2
 13186                           postinc0	equ	0xFEE
 13187                           wreg	equ	0xFE8
 13188                           indf1	equ	0xFE7
 13189                           postdec1	equ	0xFE5
 13190                           fsr1h	equ	0xFE2
 13191                           fsr1l	equ	0xFE1
 13192                           indf2	equ	0xFDF
 13193                           postinc2	equ	0xFDE
 13194                           postdec2	equ	0xFDD
 13195                           fsr2h	equ	0xFDA
 13196                           fsr2l	equ	0xFD9
 13197                           status	equ	0xFD8
 13198                           
 13199 ;; *************** function _irobot_init *****************
 13200 ;; Defined at:
 13201 ;;		line 198 in file "Library/iRobotSerial.c"
 13202 ;; Parameters:    Size  Location     Type
 13203 ;;		None
 13204 ;; Auto vars:     Size  Location     Type
 13205 ;;		None
 13206 ;; Return value:  Size  Location     Type
 13207 ;;                  1    wreg      void 
 13208 ;; Registers used:
 13209 ;;		wreg, cstack
 13210 ;; Tracked objects:
 13211 ;;		On entry : 0/0
 13212 ;;		On exit  : 0/0
 13213 ;;		Unchanged: 0/0
 13214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13218 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13219 ;;Total ram usage:        0 bytes
 13220 ;; Hardware stack levels used:    1
 13221 ;; Hardware stack levels required when called:    8
 13222 ;; This function calls:
 13223 ;;		_eusart_putch
 13224 ;; This function is called by:
 13225 ;;		_init
 13226 ;; This function uses a non-reentrant model
 13227 ;;
 13228                           
 13229                           	psect	text53
 13230  016582                     __ptext53:
 13231                           	opt stack 0
 13232  016582                     _irobot_init:
 13233                           	opt stack 21
 13234                           
 13235                           ;iRobotSerial.c: 199: eusart_putch(iR_START);
 13236                           
 13237                           ;incstack = 0
 13238  016582  0E80               	movlw	128
 13239  016584  ECC8  F0B2         	call	_eusart_putch
 13240                           
 13241                           ;iRobotSerial.c: 200: eusart_putch(iR_FULL_MODE);
 13242  016588  0E84               	movlw	132
 13243  01658A  ECC8  F0B2         	call	_eusart_putch
 13244  01658E  0012               	return		;funcret
 13245  016590                     __end_of_irobot_init:
 13246                           	opt stack 0
 13247                           tblptru	equ	0xFF8
 13248                           tblptrh	equ	0xFF7
 13249                           tblptrl	equ	0xFF6
 13250                           tablat	equ	0xFF5
 13251                           prodh	equ	0xFF4
 13252                           prodl	equ	0xFF3
 13253                           intcon	equ	0xFF2
 13254                           postinc0	equ	0xFEE
 13255                           wreg	equ	0xFE8
 13256                           indf1	equ	0xFE7
 13257                           postdec1	equ	0xFE5
 13258                           fsr1h	equ	0xFE2
 13259                           fsr1l	equ	0xFE1
 13260                           indf2	equ	0xFDF
 13261                           postinc2	equ	0xFDE
 13262                           postdec2	equ	0xFDD
 13263                           fsr2h	equ	0xFDA
 13264                           fsr2l	equ	0xFD9
 13265                           status	equ	0xFD8
 13266                           
 13267 ;; *************** function _eusart_putch *****************
 13268 ;; Defined at:
 13269 ;;		line 120 in file "Library/iRobotSerial.c"
 13270 ;; Parameters:    Size  Location     Type
 13271 ;;  eusartSendCh    1    wreg     unsigned char 
 13272 ;; Auto vars:     Size  Location     Type
 13273 ;;  eusartSendCh    1    0[BANK0 ] unsigned char 
 13274 ;; Return value:  Size  Location     Type
 13275 ;;                  1    wreg      void 
 13276 ;; Registers used:
 13277 ;;		wreg
 13278 ;; Tracked objects:
 13279 ;;		On entry : 0/0
 13280 ;;		On exit  : 0/0
 13281 ;;		Unchanged: 0/0
 13282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13284 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13286 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13287 ;;Total ram usage:        1 bytes
 13288 ;; Hardware stack levels used:    1
 13289 ;; Hardware stack levels required when called:    7
 13290 ;; This function calls:
 13291 ;;		Nothing
 13292 ;; This function is called by:
 13293 ;;		_irobot_query_and_update
 13294 ;;		_irobot_init
 13295 ;;		_irobot_move
 13296 ;;		_irobot_leds
 13297 ;;		_irobot_init_song_0
 13298 ;;		_irobot_song_play
 13299 ;;		_irobot_script_play
 13300 ;; This function uses a non-reentrant model
 13301 ;;
 13302                           
 13303                           	psect	text54
 13304  016590                     __ptext54:
 13305                           	opt stack 0
 13306  016590                     _eusart_putch:
 13307                           	opt stack 20
 13308                           
 13309                           ;incstack = 0
 13310                           ;eusart_putch@eusartSendChar stored from wreg
 13311  016590  0100               	movlb	0	; () banked
 13312  016592  6F60               	movwf	eusart_putch@eusartSendChar& (0+255),b
 13313  016594                     
 13314                           ;iRobotSerial.c: 121: while (!TXSTA1bits.TRMT) {};
 13315  016594  A2AD               	btfss	4013,1,c	;volatile
 13316  016596  D7FE               	goto	l12464
 13317                           
 13318                           ;iRobotSerial.c: 122: TXREG1 = eusartSendChar;
 13319  016598  C060  FFAE         	movff	eusart_putch@eusartSendChar,4014	;volatile
 13320  01659C  0012               	return		;funcret
 13321  01659E                     __end_of_eusart_putch:
 13322                           	opt stack 0
 13323                           tblptru	equ	0xFF8
 13324                           tblptrh	equ	0xFF7
 13325                           tblptrl	equ	0xFF6
 13326                           tablat	equ	0xFF5
 13327                           prodh	equ	0xFF4
 13328                           prodl	equ	0xFF3
 13329                           intcon	equ	0xFF2
 13330                           postinc0	equ	0xFEE
 13331                           wreg	equ	0xFE8
 13332                           indf1	equ	0xFE7
 13333                           postdec1	equ	0xFE5
 13334                           fsr1h	equ	0xFE2
 13335                           fsr1l	equ	0xFE1
 13336                           indf2	equ	0xFDF
 13337                           postinc2	equ	0xFDE
 13338                           postdec2	equ	0xFDD
 13339                           fsr2h	equ	0xFDA
 13340                           fsr2l	equ	0xFD9
 13341                           status	equ	0xFD8
 13342                           
 13343 ;; *************** function _eusart_init *****************
 13344 ;; Defined at:
 13345 ;;		line 103 in file "Library/iRobotSerial.c"
 13346 ;; Parameters:    Size  Location     Type
 13347 ;;		None
 13348 ;; Auto vars:     Size  Location     Type
 13349 ;;		None
 13350 ;; Return value:  Size  Location     Type
 13351 ;;                  1    wreg      void 
 13352 ;; Registers used:
 13353 ;;		wreg, status,2
 13354 ;; Tracked objects:
 13355 ;;		On entry : 0/0
 13356 ;;		On exit  : 0/0
 13357 ;;		Unchanged: 0/0
 13358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13360 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13362 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13363 ;;Total ram usage:        0 bytes
 13364 ;; Hardware stack levels used:    1
 13365 ;; Hardware stack levels required when called:    7
 13366 ;; This function calls:
 13367 ;;		Nothing
 13368 ;; This function is called by:
 13369 ;;		_init
 13370 ;; This function uses a non-reentrant model
 13371 ;;
 13372                           
 13373                           	psect	text55
 13374  0162FC                     __ptext55:
 13375                           	opt stack 0
 13376  0162FC                     _eusart_init:
 13377                           	opt stack 22
 13378                           
 13379                           ;iRobotSerial.c: 104: TRISCbits.TRISC6 = 0;
 13380                           
 13381                           ;incstack = 0
 13382  0162FC  9C94               	bcf	3988,6,c	;volatile
 13383                           
 13384                           ;iRobotSerial.c: 105: TRISCbits.TRISC7 = 1;
 13385  0162FE  8E94               	bsf	3988,7,c	;volatile
 13386                           
 13387                           ;iRobotSerial.c: 107: TXSTA1 = 0b00100100;
 13388  016300  0E24               	movlw	36
 13389  016302  6EAD               	movwf	4013,c	;volatile
 13390                           
 13391                           ;iRobotSerial.c: 108: RCSTA1 = 0b10011000;
 13392  016304  0E98               	movlw	152
 13393  016306  6EAC               	movwf	4012,c	;volatile
 13394                           
 13395                           ;iRobotSerial.c: 110: BAUDCON1bits.DTRXP = 0;
 13396  016308  9A7E               	bcf	3966,5,c	;volatile
 13397                           
 13398                           ;iRobotSerial.c: 111: BAUDCON1bits.SCKP = 0;
 13399  01630A  987E               	bcf	3966,4,c	;volatile
 13400                           
 13401                           ;iRobotSerial.c: 112: BAUDCON1bits.WUE = 0;
 13402  01630C  927E               	bcf	3966,1,c	;volatile
 13403                           
 13404                           ;iRobotSerial.c: 113: BAUDCON1bits.ABDEN = 0;
 13405  01630E  907E               	bcf	3966,0,c	;volatile
 13406                           
 13407                           ;iRobotSerial.c: 115: TXSTA1bits.BRGH = 1;
 13408  016310  84AD               	bsf	4013,2,c	;volatile
 13409                           
 13410                           ;iRobotSerial.c: 116: BAUDCON1bits.BRG16 = 0;
 13411  016312  967E               	bcf	3966,3,c	;volatile
 13412                           
 13413                           ;iRobotSerial.c: 117: SPBRG1 = 51;
 13414  016314  0E33               	movlw	51
 13415  016316  6EB0               	movwf	4016,c	;volatile
 13416  016318  0012               	return		;funcret
 13417  01631A                     __end_of_eusart_init:
 13418                           	opt stack 0
 13419                           tblptru	equ	0xFF8
 13420                           tblptrh	equ	0xFF7
 13421                           tblptrl	equ	0xFF6
 13422                           tablat	equ	0xFF5
 13423                           prodh	equ	0xFF4
 13424                           prodl	equ	0xFF3
 13425                           intcon	equ	0xFF2
 13426                           postinc0	equ	0xFEE
 13427                           wreg	equ	0xFE8
 13428                           indf1	equ	0xFE7
 13429                           postdec1	equ	0xFE5
 13430                           fsr1h	equ	0xFE2
 13431                           fsr1l	equ	0xFE1
 13432                           indf2	equ	0xFDF
 13433                           postinc2	equ	0xFDE
 13434                           postdec2	equ	0xFDD
 13435                           fsr2h	equ	0xFDA
 13436                           fsr2l	equ	0xFD9
 13437                           status	equ	0xFD8
 13438                           
 13439 ;; *************** function _Motor_Init *****************
 13440 ;; Defined at:
 13441 ;;		line 26 in file "Library/Motor.c"
 13442 ;; Parameters:    Size  Location     Type
 13443 ;;  pMotor          2   45[BANK0 ] PTR struct Motor
 13444 ;;		 -> Stepper(6), 
 13445 ;;  pAddress        2   47[BANK0 ] unsigned short 
 13446 ;; Auto vars:     Size  Location     Type
 13447 ;;		None
 13448 ;; Return value:  Size  Location     Type
 13449 ;;                  1    wreg      void 
 13450 ;; Registers used:
 13451 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13452 ;; Tracked objects:
 13453 ;;		On entry : 0/0
 13454 ;;		On exit  : 0/0
 13455 ;;		Unchanged: 0/0
 13456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13457 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13460 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13461 ;;Total ram usage:        4 bytes
 13462 ;; Hardware stack levels used:    1
 13463 ;; Hardware stack levels required when called:   12
 13464 ;; This function calls:
 13465 ;;		_Port_SetPin
 13466 ;;		_Port_SetPinType
 13467 ;;		_Timer0_Init
 13468 ;; This function is called by:
 13469 ;;		_init
 13470 ;; This function uses a non-reentrant model
 13471 ;;
 13472                           
 13473                           	psect	text56
 13474  013C38                     __ptext56:
 13475                           	opt stack 0
 13476  013C38                     _Motor_Init:
 13477                           	opt stack 17
 13478                           
 13479                           ;Motor.c: 28: pMotor->mDelta = 0;
 13480                           
 13481                           ;incstack = 0
 13482  013C38  C08D  FFD9         	movff	Motor_Init@pMotor,fsr2l
 13483  013C3C  C08E  FFDA         	movff	Motor_Init@pMotor+1,fsr2h
 13484  013C40  0E00               	movlw	0
 13485  013C42  6EDE               	movwf	postinc2,c
 13486  013C44  0E00               	movlw	0
 13487  013C46  6EDD               	movwf	postdec2,c
 13488                           
 13489                           ;Motor.c: 29: pMotor->mFrequency = 0;
 13490  013C48  0100               	movlb	0	; () banked
 13491  013C4A  EE20 F002          	lfsr	2,2
 13492  013C4E  518D               	movf	Motor_Init@pMotor& (0+255),w,b
 13493  013C50  26D9               	addwf	fsr2l,f,c
 13494  013C52  518E               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 13495  013C54  22DA               	addwfc	fsr2h,f,c
 13496  013C56  0E00               	movlw	0
 13497  013C58  6EDE               	movwf	postinc2,c
 13498  013C5A  0E00               	movlw	0
 13499  013C5C  6EDD               	movwf	postdec2,c
 13500                           
 13501                           ; BSR set to: 0
 13502                           ;Motor.c: 30: pMotor->mAddress = pAddress;
 13503  013C5E  0100               	movlb	0	; () banked
 13504  013C60  EE20 F004          	lfsr	2,4
 13505  013C64  518D               	movf	Motor_Init@pMotor& (0+255),w,b
 13506  013C66  26D9               	addwf	fsr2l,f,c
 13507  013C68  518E               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 13508  013C6A  22DA               	addwfc	fsr2h,f,c
 13509  013C6C  C08F  FFDE         	movff	Motor_Init@pAddress,postinc2
 13510  013C70  C090  FFDD         	movff	Motor_Init@pAddress+1,postdec2
 13511                           
 13512                           ; BSR set to: 0
 13513                           ;Motor.c: 33: Port_SetPinType (&PortE, eP0, eTypeOutputPushPull);
 13514  013C74  0E8E               	movlw	low _PortE
 13515  013C76  0100               	movlb	0	; () banked
 13516  013C78  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13517  013C7A  0E03               	movlw	high _PortE
 13518  013C7C  0100               	movlb	0	; () banked
 13519  013C7E  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13520  013C80  0E00               	movlw	0
 13521  013C82  0100               	movlb	0	; () banked
 13522  013C84  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13523  013C86  0E03               	movlw	3
 13524  013C88  0100               	movlb	0	; () banked
 13525  013C8A  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13526  013C8C  EC5F  F093         	call	_Port_SetPinType	;wreg free
 13527                           
 13528                           ;Motor.c: 34: Port_SetPinType (&PortE, eP1, eTypeOutputPushPull);
 13529  013C90  0E8E               	movlw	low _PortE
 13530  013C92  0100               	movlb	0	; () banked
 13531  013C94  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13532  013C96  0E03               	movlw	high _PortE
 13533  013C98  0100               	movlb	0	; () banked
 13534  013C9A  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13535  013C9C  0E01               	movlw	1
 13536  013C9E  0100               	movlb	0	; () banked
 13537  013CA0  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13538  013CA2  0E03               	movlw	3
 13539  013CA4  0100               	movlb	0	; () banked
 13540  013CA6  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13541  013CA8  EC5F  F093         	call	_Port_SetPinType	;wreg free
 13542                           
 13543                           ;Motor.c: 35: Port_SetPin (&PortE, eP0, 0);
 13544  013CAC  0E8E               	movlw	low _PortE
 13545  013CAE  0100               	movlb	0	; () banked
 13546  013CB0  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 13547  013CB2  0E03               	movlw	high _PortE
 13548  013CB4  0100               	movlb	0	; () banked
 13549  013CB6  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 13550  013CB8  0E00               	movlw	0
 13551  013CBA  0100               	movlb	0	; () banked
 13552  013CBC  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 13553  013CBE  0E00               	movlw	0
 13554  013CC0  0100               	movlb	0	; () banked
 13555  013CC2  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 13556  013CC4  EC59  F09F         	call	_Port_SetPin	;wreg free
 13557                           
 13558                           ;Motor.c: 36: Port_SetPin (&PortE, eP1, 0);
 13559  013CC8  0E8E               	movlw	low _PortE
 13560  013CCA  0100               	movlb	0	; () banked
 13561  013CCC  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 13562  013CCE  0E03               	movlw	high _PortE
 13563  013CD0  0100               	movlb	0	; () banked
 13564  013CD2  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 13565  013CD4  0E01               	movlw	1
 13566  013CD6  0100               	movlb	0	; () banked
 13567  013CD8  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 13568  013CDA  0E00               	movlw	0
 13569  013CDC  0100               	movlb	0	; () banked
 13570  013CDE  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 13571  013CE0  EC59  F09F         	call	_Port_SetPin	;wreg free
 13572                           
 13573                           ;Motor.c: 38: lStepFunction = Motor_Step;
 13574  013CE4  0E86               	movlw	low _Motor_Step
 13575  013CE6  0100               	movlb	0	; () banked
 13576  013CE8  6FBF               	movwf	_lStepFunction& (0+255),b
 13577  013CEA  0E35               	movlw	high _Motor_Step
 13578  013CEC  0100               	movlb	0	; () banked
 13579  013CEE  6FC0               	movwf	(_lStepFunction+1)& (0+255),b
 13580  013CF0  0E01               	movlw	low (_Motor_Step shr (0+16))
 13581  013CF2  0100               	movlb	0	; () banked
 13582  013CF4  6FC1               	movwf	(_lStepFunction+2)& (0+255),b
 13583                           
 13584                           ; BSR set to: 0
 13585                           ;Motor.c: 39: Timer0_Init(1000);
 13586  013CF6  0EE8               	movlw	232
 13587  013CF8  0100               	movlb	0	; () banked
 13588  013CFA  6F6D               	movwf	Timer0_Init@pFrequency& (0+255),b
 13589  013CFC  0E03               	movlw	3
 13590  013CFE  6F6E               	movwf	(Timer0_Init@pFrequency+1)& (0+255),b
 13591  013D00  0E00               	movlw	0
 13592  013D02  6F6F               	movwf	(Timer0_Init@pFrequency+2)& (0+255),b
 13593  013D04  0E00               	movlw	0
 13594  013D06  6F70               	movwf	(Timer0_Init@pFrequency+3)& (0+255),b
 13595  013D08  ECC6  F098         	call	_Timer0_Init	;wreg free
 13596  013D0C  0012               	return		;funcret
 13597  013D0E                     __end_of_Motor_Init:
 13598                           	opt stack 0
 13599                           tblptru	equ	0xFF8
 13600                           tblptrh	equ	0xFF7
 13601                           tblptrl	equ	0xFF6
 13602                           tablat	equ	0xFF5
 13603                           prodh	equ	0xFF4
 13604                           prodl	equ	0xFF3
 13605                           intcon	equ	0xFF2
 13606                           postinc0	equ	0xFEE
 13607                           wreg	equ	0xFE8
 13608                           indf1	equ	0xFE7
 13609                           postdec1	equ	0xFE5
 13610                           fsr1h	equ	0xFE2
 13611                           fsr1l	equ	0xFE1
 13612                           indf2	equ	0xFDF
 13613                           postinc2	equ	0xFDE
 13614                           postdec2	equ	0xFDD
 13615                           fsr2h	equ	0xFDA
 13616                           fsr2l	equ	0xFD9
 13617                           status	equ	0xFD8
 13618                           
 13619 ;; *************** function _Timer0_Init *****************
 13620 ;; Defined at:
 13621 ;;		line 25 in file "Library/Timer0.c"
 13622 ;; Parameters:    Size  Location     Type
 13623 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 13624 ;; Auto vars:     Size  Location     Type
 13625 ;;  DIVIDE          4   23[BANK0 ] unsigned long 
 13626 ;;  pCPUClock       4   19[BANK0 ] unsigned long 
 13627 ;; Return value:  Size  Location     Type
 13628 ;;                  1    wreg      void 
 13629 ;; Registers used:
 13630 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13631 ;; Tracked objects:
 13632 ;;		On entry : 0/0
 13633 ;;		On exit  : 0/0
 13634 ;;		Unchanged: 0/0
 13635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13636 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13637 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13638 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13639 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13640 ;;Total ram usage:       14 bytes
 13641 ;; Hardware stack levels used:    1
 13642 ;; Hardware stack levels required when called:    8
 13643 ;; This function calls:
 13644 ;;		_Timer0_Clear
 13645 ;;		___lldiv
 13646 ;; This function is called by:
 13647 ;;		_Motor_Init
 13648 ;;		_Motor_Speed
 13649 ;; This function uses a non-reentrant model
 13650 ;;
 13651                           
 13652                           	psect	text57
 13653  01318C                     __ptext57:
 13654                           	opt stack 0
 13655  01318C                     _Timer0_Init:
 13656                           	opt stack 20
 13657                           
 13658                           ;Timer0.c: 27: UINT32 pCPUClock = (48*1000000L)/8;
 13659                           
 13660                           ;incstack = 0
 13661  01318C  0E80               	movlw	128
 13662  01318E  0100               	movlb	0	; () banked
 13663  013190  6F73               	movwf	Timer0_Init@pCPUClock& (0+255),b
 13664  013192  0E8D               	movlw	141
 13665  013194  6F74               	movwf	(Timer0_Init@pCPUClock+1)& (0+255),b
 13666  013196  0E5B               	movlw	91
 13667  013198  6F75               	movwf	(Timer0_Init@pCPUClock+2)& (0+255),b
 13668  01319A  0E00               	movlw	0
 13669  01319C  6F76               	movwf	(Timer0_Init@pCPUClock+3)& (0+255),b
 13670                           
 13671                           ; BSR set to: 0
 13672                           ;Timer0.c: 29: static const UINT16 PRESCALE[] = {2, 4, 8, 16, 32, 64 ,128, 256};
 13673                           ;Timer0.c: 31: static UINT8 PRE = 0;
 13674                           ;Timer0.c: 32: static UINT32 DIV = 0;
 13675                           ;Timer0.c: 34: UINT32 DIVIDE;
 13676                           ;Timer0.c: 37: T0CONbits.TMR0ON = 0;
 13677  01319E  9ED5               	bcf	4053,7,c	;volatile
 13678                           
 13679                           ; BSR set to: 0
 13680                           ;Timer0.c: 38: if (pFrequency == 0)
 13681  0131A0  0100               	movlb	0	; () banked
 13682  0131A2  516D               	movf	Timer0_Init@pFrequency& (0+255),w,b
 13683  0131A4  0100               	movlb	0	; () banked
 13684  0131A6  116E               	iorwf	(Timer0_Init@pFrequency+1)& (0+255),w,b
 13685  0131A8  0100               	movlb	0	; () banked
 13686  0131AA  116F               	iorwf	(Timer0_Init@pFrequency+2)& (0+255),w,b
 13687  0131AC  0100               	movlb	0	; () banked
 13688  0131AE  1170               	iorwf	(Timer0_Init@pFrequency+3)& (0+255),w,b
 13689  0131B0  B4D8               	btfsc	status,2,c
 13690  0131B2  0012               	return	
 13691                           
 13692                           ; BSR set to: 0
 13693                           ;Timer0.c: 41: T0CONbits.PSA = 0;
 13694                           
 13695                           ; BSR set to: 0
 13696                           ;Timer0.c: 39: return;
 13697  0131B4  96D5               	bcf	4053,3,c	;volatile
 13698                           
 13699                           ;Timer0.c: 42: T0CONbits.T08BIT = 0;
 13700  0131B6  9CD5               	bcf	4053,6,c	;volatile
 13701                           
 13702                           ;Timer0.c: 43: T0CONbits.T0CS = 0;
 13703  0131B8  9AD5               	bcf	4053,5,c	;volatile
 13704                           
 13705                           ;Timer0.c: 44: T0CONbits.T0SE = 0;
 13706  0131BA  98D5               	bcf	4053,4,c	;volatile
 13707                           
 13708                           ; BSR set to: 0
 13709                           ;Timer0.c: 46: DIVIDE = pCPUClock / pFrequency;
 13710  0131BC  C073  F060         	movff	Timer0_Init@pCPUClock,___lldiv@dividend
 13711  0131C0  C074  F061         	movff	Timer0_Init@pCPUClock+1,___lldiv@dividend+1
 13712  0131C4  C075  F062         	movff	Timer0_Init@pCPUClock+2,___lldiv@dividend+2
 13713  0131C8  C076  F063         	movff	Timer0_Init@pCPUClock+3,___lldiv@dividend+3
 13714  0131CC  C06D  F064         	movff	Timer0_Init@pFrequency,___lldiv@divisor
 13715  0131D0  C06E  F065         	movff	Timer0_Init@pFrequency+1,___lldiv@divisor+1
 13716  0131D4  C06F  F066         	movff	Timer0_Init@pFrequency+2,___lldiv@divisor+2
 13717  0131D8  C070  F067         	movff	Timer0_Init@pFrequency+3,___lldiv@divisor+3
 13718  0131DC  ECDB  F0A0         	call	___lldiv	;wreg free
 13719  0131E0  C060  F077         	movff	?___lldiv,Timer0_Init@DIVIDE
 13720  0131E4  C061  F078         	movff	?___lldiv+1,Timer0_Init@DIVIDE+1
 13721  0131E8  C062  F079         	movff	?___lldiv+2,Timer0_Init@DIVIDE+2
 13722  0131EC  C063  F07A         	movff	?___lldiv+3,Timer0_Init@DIVIDE+3
 13723                           
 13724                           ;Timer0.c: 49: while ((DIVIDE/PRESCALE[INDEX]) > 0xFFFF)
 13725  0131F0  D00C               	goto	l1787
 13726  0131F2                     l13634:
 13727                           
 13728                           ;Timer0.c: 50: {
 13729                           ;Timer0.c: 51: INDEX ++;
 13730  0131F2  0100               	movlb	0	; () banked
 13731  0131F4  2BE6               	incf	_INDEX& (0+255),f,b
 13732                           
 13733                           ; BSR set to: 0
 13734                           ;Timer0.c: 52: if (INDEX >= 3)
 13735  0131F6  0E02               	movlw	2
 13736  0131F8  0100               	movlb	0	; () banked
 13737  0131FA  65E6               	cpfsgt	_INDEX& (0+255),b
 13738  0131FC  D001               	goto	l1785
 13739  0131FE  D02F               	goto	u10180
 13740  013200                     l1785:
 13741                           
 13742                           ; BSR set to: 0
 13743                           ;Timer0.c: 56: if (INDEX >= 8)
 13744                           
 13745                           ; BSR set to: 0
 13746  013200  0E07               	movlw	7
 13747  013202  0100               	movlb	0	; () banked
 13748  013204  65E6               	cpfsgt	_INDEX& (0+255),b
 13749  013206  D001               	goto	l1787
 13750  013208  0012               	return	
 13751  01320A                     l1787:
 13752                           
 13753                           ; BSR set to: 0
 13754                           
 13755                           ; BSR set to: 0
 13756  01320A  C077  F060         	movff	Timer0_Init@DIVIDE,___lldiv@dividend
 13757  01320E  C078  F061         	movff	Timer0_Init@DIVIDE+1,___lldiv@dividend+1
 13758  013212  C079  F062         	movff	Timer0_Init@DIVIDE+2,___lldiv@dividend+2
 13759  013216  C07A  F063         	movff	Timer0_Init@DIVIDE+3,___lldiv@dividend+3
 13760  01321A  0100               	movlb	0	; () banked
 13761  01321C  51E6               	movf	_INDEX& (0+255),w,b
 13762  01321E  0D02               	mullw	2
 13763  013220  0E4B               	movlw	low Timer0_Init@PRESCALE
 13764  013222  24F3               	addwf	prodl,w,c
 13765  013224  6EF6               	movwf	tblptrl,c
 13766  013226  0EFD               	movlw	high Timer0_Init@PRESCALE
 13767  013228  20F4               	addwfc	prodh,w,c
 13768  01322A  6EF7               	movwf	tblptrh,c
 13769  01322C                     	if	1	;There are 3 active tblptr bytes
 13770  01322C  6AF8               	clrf	tblptru,c
 13771  01322E  0E00               	movlw	low (__mediumconst shr (0+16))
 13772  013230  22F8               	addwfc	tblptru,f,c
 13773  013232                     	endif
 13774  013232  0009               	tblrd		*+
 13775  013234  CFF5 F071          	movff	tablat,??_Timer0_Init
 13776  013238  0009               	tblrd		*+
 13777  01323A  CFF5 F072          	movff	tablat,??_Timer0_Init+1
 13778  01323E  C071  F064         	movff	??_Timer0_Init,___lldiv@divisor
 13779  013242  C072  F065         	movff	??_Timer0_Init+1,___lldiv@divisor+1
 13780  013246  0100               	movlb	0	; () banked
 13781  013248  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 13782  01324A  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 13783  01324C  ECDB  F0A0         	call	___lldiv	;wreg free
 13784  013250  0100               	movlb	0	; () banked
 13785  013252  5163               	movf	(?___lldiv+3)& (0+255),w,b
 13786  013254  E1CE               	bnz	l13634
 13787  013256  0100               	movlb	0	; () banked
 13788  013258  0562               	decf	(?___lldiv+2)& (0+255),w,b
 13789  01325A  B0D8               	btfsc	status,0,c
 13790  01325C  D7CA               	goto	l1784
 13791  01325E                     u10180:
 13792                           
 13793                           ; BSR set to: 0
 13794                           ;Timer0.c: 58: }
 13795                           ;Timer0.c: 62: PRE = PRESCALE[INDEX];
 13796                           
 13797                           ; BSR set to: 0
 13798  01325E  0100               	movlb	0	; () banked
 13799  013260  51E6               	movf	_INDEX& (0+255),w,b
 13800  013262  0D02               	mullw	2
 13801  013264  0E4B               	movlw	low Timer0_Init@PRESCALE
 13802  013266  24F3               	addwf	prodl,w,c
 13803  013268  6EF6               	movwf	tblptrl,c
 13804  01326A  0EFD               	movlw	high Timer0_Init@PRESCALE
 13805  01326C  20F4               	addwfc	prodh,w,c
 13806  01326E  6EF7               	movwf	tblptrh,c
 13807  013270                     	if	1	;There are 3 active tblptr bytes
 13808  013270  6AF8               	clrf	tblptru,c
 13809  013272  0E00               	movlw	low (__mediumconst shr (0+16))
 13810  013274  22F8               	addwfc	tblptru,f,c
 13811  013276                     	endif
 13812  013276  0008               	tblrd		*
 13813  013278  CFF5 F0E5          	movff	tablat,Timer0_Init@PRE
 13814                           
 13815                           ; BSR set to: 0
 13816                           ;Timer0.c: 63: DIV = (DIVIDE-1);
 13817  01327C  0EFF               	movlw	255
 13818  01327E  0100               	movlb	0	; () banked
 13819  013280  2577               	addwf	Timer0_Init@DIVIDE& (0+255),w,b
 13820  013282  0103               	movlb	3	; () banked
 13821  013284  6F10               	movwf	Timer0_Init@DIV& (0+255),b
 13822  013286  0EFF               	movlw	255
 13823  013288  0100               	movlb	0	; () banked
 13824  01328A  2178               	addwfc	(Timer0_Init@DIVIDE+1)& (0+255),w,b
 13825  01328C  0103               	movlb	3	; () banked
 13826  01328E  6F11               	movwf	(Timer0_Init@DIV+1)& (0+255),b
 13827  013290  0EFF               	movlw	255
 13828  013292  0100               	movlb	0	; () banked
 13829  013294  2179               	addwfc	(Timer0_Init@DIVIDE+2)& (0+255),w,b
 13830  013296  0103               	movlb	3	; () banked
 13831  013298  6F12               	movwf	(Timer0_Init@DIV+2)& (0+255),b
 13832  01329A  0EFF               	movlw	255
 13833  01329C  0100               	movlb	0	; () banked
 13834  01329E  217A               	addwfc	(Timer0_Init@DIVIDE+3)& (0+255),w,b
 13835  0132A0  0103               	movlb	3	; () banked
 13836  0132A2  6F13               	movwf	(Timer0_Init@DIV+3)& (0+255),b
 13837                           
 13838                           ; BSR set to: 3
 13839                           ;Timer0.c: 65: COUNTER = 0xFFFF-DIV/PRE;
 13840  0132A4  C310  F060         	movff	Timer0_Init@DIV,___lldiv@dividend
 13841  0132A8  C311  F061         	movff	Timer0_Init@DIV+1,___lldiv@dividend+1
 13842  0132AC  C312  F062         	movff	Timer0_Init@DIV+2,___lldiv@dividend+2
 13843  0132B0  C313  F063         	movff	Timer0_Init@DIV+3,___lldiv@dividend+3
 13844  0132B4  0100               	movlb	0	; () banked
 13845  0132B6  51E5               	movf	Timer0_Init@PRE& (0+255),w,b
 13846  0132B8  0100               	movlb	0	; () banked
 13847  0132BA  6F64               	movwf	___lldiv@divisor& (0+255),b
 13848  0132BC  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 13849  0132BE  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 13850  0132C0  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 13851  0132C2  ECDB  F0A0         	call	___lldiv	;wreg free
 13852  0132C6  0100               	movlb	0	; () banked
 13853  0132C8  1F60               	comf	?___lldiv& (0+255),f,b
 13854  0132CA  0100               	movlb	0	; () banked
 13855  0132CC  1F61               	comf	(?___lldiv+1)& (0+255),f,b
 13856  0132CE  0100               	movlb	0	; () banked
 13857  0132D0  4B60               	infsnz	?___lldiv& (0+255),f,b
 13858  0132D2  2B61               	incf	(?___lldiv+1)& (0+255),f,b
 13859  0132D4  0EFF               	movlw	255
 13860  0132D6  0100               	movlb	0	; () banked
 13861  0132D8  2560               	addwf	?___lldiv& (0+255),w,b
 13862  0132DA  6E29               	movwf	_COUNTER,c
 13863  0132DC  0EFF               	movlw	255
 13864  0132DE  0100               	movlb	0	; () banked
 13865  0132E0  2161               	addwfc	(?___lldiv+1)& (0+255),w,b
 13866  0132E2  6E2A               	movwf	_COUNTER+1,c
 13867                           
 13868                           ; BSR set to: 0
 13869                           ;Timer0.c: 68: Timer0_Clear();
 13870  0132E4  ECEA  F0B2         	call	_Timer0_Clear	;wreg free
 13871                           
 13872                           ;Timer0.c: 71: T0CONbits.TMR0ON = 1;
 13873  0132E8  8ED5               	bsf	4053,7,c	;volatile
 13874  0132EA  0012               	return		;funcret
 13875  0132EC                     __end_of_Timer0_Init:
 13876                           	opt stack 0
 13877                           tblptru	equ	0xFF8
 13878                           tblptrh	equ	0xFF7
 13879                           tblptrl	equ	0xFF6
 13880                           tablat	equ	0xFF5
 13881                           prodh	equ	0xFF4
 13882                           prodl	equ	0xFF3
 13883                           intcon	equ	0xFF2
 13884                           postinc0	equ	0xFEE
 13885                           wreg	equ	0xFE8
 13886                           indf1	equ	0xFE7
 13887                           postdec1	equ	0xFE5
 13888                           fsr1h	equ	0xFE2
 13889                           fsr1l	equ	0xFE1
 13890                           indf2	equ	0xFDF
 13891                           postinc2	equ	0xFDE
 13892                           postdec2	equ	0xFDD
 13893                           fsr2h	equ	0xFDA
 13894                           fsr2l	equ	0xFD9
 13895                           status	equ	0xFD8
 13896                           
 13897 ;; *************** function _Timer0_Clear *****************
 13898 ;; Defined at:
 13899 ;;		line 20 in file "Library/Timer0.c"
 13900 ;; Parameters:    Size  Location     Type
 13901 ;;		None
 13902 ;; Auto vars:     Size  Location     Type
 13903 ;;		None
 13904 ;; Return value:  Size  Location     Type
 13905 ;;                  1    wreg      void 
 13906 ;; Registers used:
 13907 ;;		None
 13908 ;; Tracked objects:
 13909 ;;		On entry : 0/0
 13910 ;;		On exit  : 0/0
 13911 ;;		Unchanged: 0/0
 13912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13914 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13916 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13917 ;;Total ram usage:        0 bytes
 13918 ;; Hardware stack levels used:    1
 13919 ;; Hardware stack levels required when called:    7
 13920 ;; This function calls:
 13921 ;;		Nothing
 13922 ;; This function is called by:
 13923 ;;		_Timer0_Init
 13924 ;; This function uses a non-reentrant model
 13925 ;;
 13926                           
 13927                           	psect	text58
 13928  0165D4                     __ptext58:
 13929                           	opt stack 0
 13930  0165D4                     _Timer0_Clear:
 13931                           	opt stack 20
 13932                           
 13933                           ;Timer0.c: 22: TMR0 = COUNTER;
 13934                           
 13935                           ;incstack = 0
 13936  0165D4  C029  FFD6         	movff	_COUNTER,4054	;volatile
 13937  0165D8  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 13938                           
 13939                           ;Timer0.c: 23: INTCONbits.TMR0IF = 0;
 13940  0165DC  94F2               	bcf	intcon,2,c	;volatile
 13941  0165DE  0012               	return		;funcret
 13942  0165E0                     __end_of_Timer0_Clear:
 13943                           	opt stack 0
 13944                           tblptru	equ	0xFF8
 13945                           tblptrh	equ	0xFF7
 13946                           tblptrl	equ	0xFF6
 13947                           tablat	equ	0xFF5
 13948                           prodh	equ	0xFF4
 13949                           prodl	equ	0xFF3
 13950                           intcon	equ	0xFF2
 13951                           postinc0	equ	0xFEE
 13952                           wreg	equ	0xFE8
 13953                           indf1	equ	0xFE7
 13954                           postdec1	equ	0xFE5
 13955                           fsr1h	equ	0xFE2
 13956                           fsr1l	equ	0xFE1
 13957                           indf2	equ	0xFDF
 13958                           postinc2	equ	0xFDE
 13959                           postdec2	equ	0xFDD
 13960                           fsr2h	equ	0xFDA
 13961                           fsr2l	equ	0xFD9
 13962                           status	equ	0xFD8
 13963                           
 13964 ;; *************** function _MXK_Init *****************
 13965 ;; Defined at:
 13966 ;;		line 33 in file "Library/MXK.c"
 13967 ;; Parameters:    Size  Location     Type
 13968 ;;		None
 13969 ;; Auto vars:     Size  Location     Type
 13970 ;;		None
 13971 ;; Return value:  Size  Location     Type
 13972 ;;                  1    wreg      void 
 13973 ;; Registers used:
 13974 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13975 ;; Tracked objects:
 13976 ;;		On entry : 0/0
 13977 ;;		On exit  : 0/0
 13978 ;;		Unchanged: 0/0
 13979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13983 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13984 ;;Total ram usage:        0 bytes
 13985 ;; Hardware stack levels used:    1
 13986 ;; Hardware stack levels required when called:   16
 13987 ;; This function calls:
 13988 ;;		_LED_Init
 13989 ;;		_Port_Init
 13990 ;;		_Port_SetPin
 13991 ;;		_Port_SetPinType
 13992 ;;		_Port_SetQuadType
 13993 ;;		_Port_SetType
 13994 ;;		_delay_ms
 13995 ;; This function is called by:
 13996 ;;		_init
 13997 ;; This function uses a non-reentrant model
 13998 ;;
 13999                           
 14000                           	psect	text59
 14001  012D34                     __ptext59:
 14002                           	opt stack 0
 14003  012D34                     _MXK_Init:
 14004                           	opt stack 13
 14005                           
 14006                           ;MXK.c: 35: Bus_State = eMXK_Idle;
 14007                           
 14008                           ;incstack = 0
 14009  012D34  0E01               	movlw	1
 14010  012D36  6E4B               	movwf	_Bus_State,c
 14011                           
 14012                           ;MXK.c: 36: lQueue = (Function)0;
 14013  012D38  0E00               	movlw	0
 14014  012D3A  0100               	movlb	0	; () banked
 14015  012D3C  6FBC               	movwf	_lQueue& (0+255),b	;volatile
 14016  012D3E  0E00               	movlw	0
 14017  012D40  0100               	movlb	0	; () banked
 14018  012D42  6FBD               	movwf	(_lQueue+1)& (0+255),b	;volatile
 14019  012D44  0E00               	movlw	0
 14020  012D46  0100               	movlb	0	; () banked
 14021  012D48  6FBE               	movwf	(_lQueue+2)& (0+255),b	;volatile
 14022                           
 14023                           ; BSR set to: 0
 14024                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
 14025  012D4A  0EAC               	movlw	low _PortA
 14026  012D4C  0100               	movlb	0	; () banked
 14027  012D4E  6FA0               	movwf	Port_Init@pInput& (0+255),b
 14028  012D50  0E03               	movlw	high _PortA
 14029  012D52  0100               	movlb	0	; () banked
 14030  012D54  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 14031  012D56  0E00               	movlw	0
 14032  012D58  0100               	movlb	0	; () banked
 14033  012D5A  6FA2               	movwf	Port_Init@pPort& (0+255),b
 14034  012D5C  EC0E  F095         	call	_Port_Init	;wreg free
 14035                           
 14036                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
 14037  012D60  0EA2               	movlw	low _PortB
 14038  012D62  0100               	movlb	0	; () banked
 14039  012D64  6FA0               	movwf	Port_Init@pInput& (0+255),b
 14040  012D66  0E03               	movlw	high _PortB
 14041  012D68  0100               	movlb	0	; () banked
 14042  012D6A  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 14043  012D6C  0E01               	movlw	1
 14044  012D6E  0100               	movlb	0	; () banked
 14045  012D70  6FA2               	movwf	Port_Init@pPort& (0+255),b
 14046  012D72  EC0E  F095         	call	_Port_Init	;wreg free
 14047                           
 14048                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
 14049  012D76  0EEA               	movlw	low _PortC
 14050  012D78  0100               	movlb	0	; () banked
 14051  012D7A  6FA0               	movwf	Port_Init@pInput& (0+255),b
 14052  012D7C  0E00               	movlw	high _PortC
 14053  012D7E  0100               	movlb	0	; () banked
 14054  012D80  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 14055  012D82  0E02               	movlw	2
 14056  012D84  0100               	movlb	0	; () banked
 14057  012D86  6FA2               	movwf	Port_Init@pPort& (0+255),b
 14058  012D88  EC0E  F095         	call	_Port_Init	;wreg free
 14059                           
 14060                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
 14061  012D8C  0E98               	movlw	low _PortD
 14062  012D8E  0100               	movlb	0	; () banked
 14063  012D90  6FA0               	movwf	Port_Init@pInput& (0+255),b
 14064  012D92  0E03               	movlw	high _PortD
 14065  012D94  0100               	movlb	0	; () banked
 14066  012D96  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 14067  012D98  0E03               	movlw	3
 14068  012D9A  0100               	movlb	0	; () banked
 14069  012D9C  6FA2               	movwf	Port_Init@pPort& (0+255),b
 14070  012D9E  EC0E  F095         	call	_Port_Init	;wreg free
 14071                           
 14072                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
 14073  012DA2  0E8E               	movlw	low _PortE
 14074  012DA4  0100               	movlb	0	; () banked
 14075  012DA6  6FA0               	movwf	Port_Init@pInput& (0+255),b
 14076  012DA8  0E03               	movlw	high _PortE
 14077  012DAA  0100               	movlb	0	; () banked
 14078  012DAC  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 14079  012DAE  0E04               	movlw	4
 14080  012DB0  0100               	movlb	0	; () banked
 14081  012DB2  6FA2               	movwf	Port_Init@pPort& (0+255),b
 14082  012DB4  EC0E  F095         	call	_Port_Init	;wreg free
 14083                           
 14084                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
 14085  012DB8  0EB6               	movlw	low _PortF
 14086  012DBA  0100               	movlb	0	; () banked
 14087  012DBC  6FA0               	movwf	Port_Init@pInput& (0+255),b
 14088  012DBE  0E03               	movlw	high _PortF
 14089  012DC0  0100               	movlb	0	; () banked
 14090  012DC2  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 14091  012DC4  0E05               	movlw	5
 14092  012DC6  0100               	movlb	0	; () banked
 14093  012DC8  6FA2               	movwf	Port_Init@pPort& (0+255),b
 14094  012DCA  EC0E  F095         	call	_Port_Init	;wreg free
 14095                           
 14096                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
 14097  012DCE  0E84               	movlw	low _PortG
 14098  012DD0  0100               	movlb	0	; () banked
 14099  012DD2  6FA0               	movwf	Port_Init@pInput& (0+255),b
 14100  012DD4  0E03               	movlw	high _PortG
 14101  012DD6  0100               	movlb	0	; () banked
 14102  012DD8  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 14103  012DDA  0E06               	movlw	6
 14104  012DDC  0100               	movlb	0	; () banked
 14105  012DDE  6FA2               	movwf	Port_Init@pPort& (0+255),b
 14106  012DE0  EC0E  F095         	call	_Port_Init	;wreg free
 14107                           
 14108                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
 14109  012DE4  0EB6               	movlw	low _PortF
 14110  012DE6  0100               	movlb	0	; () banked
 14111  012DE8  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 14112  012DEA  0E03               	movlw	high _PortF
 14113  012DEC  0100               	movlb	0	; () banked
 14114  012DEE  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14115  012DF0  0E05               	movlw	5
 14116  012DF2  0100               	movlb	0	; () banked
 14117  012DF4  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 14118  012DF6  0E00               	movlw	0
 14119  012DF8  0100               	movlb	0	; () banked
 14120  012DFA  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 14121  012DFC  EC5F  F093         	call	_Port_SetPinType	;wreg free
 14122                           
 14123                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
 14124  012E00  0EA2               	movlw	low _PortB
 14125  012E02  0100               	movlb	0	; () banked
 14126  012E04  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
 14127  012E06  0E03               	movlw	high _PortB
 14128  012E08  0100               	movlb	0	; () banked
 14129  012E0A  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 14130  012E0C  0E00               	movlw	0
 14131  012E0E  0100               	movlb	0	; () banked
 14132  012E10  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
 14133  012E12  0E00               	movlw	0
 14134  012E14  0100               	movlb	0	; () banked
 14135  012E16  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
 14136  012E18  EC52  F08D         	call	_Port_SetQuadType	;wreg free
 14137                           
 14138                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
 14139  012E1C  0EB6               	movlw	low _PortF
 14140  012E1E  0100               	movlb	0	; () banked
 14141  012E20  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 14142  012E22  0E03               	movlw	high _PortF
 14143  012E24  0100               	movlb	0	; () banked
 14144  012E26  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14145  012E28  0E06               	movlw	6
 14146  012E2A  0100               	movlb	0	; () banked
 14147  012E2C  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 14148  012E2E  0E03               	movlw	3
 14149  012E30  0100               	movlb	0	; () banked
 14150  012E32  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 14151  012E34  EC5F  F093         	call	_Port_SetPinType	;wreg free
 14152                           
 14153                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
 14154  012E38  0E84               	movlw	low _PortG
 14155  012E3A  0100               	movlb	0	; () banked
 14156  012E3C  6F9A               	movwf	Port_SetType@pInput& (0+255),b
 14157  012E3E  0E03               	movlw	high _PortG
 14158  012E40  0100               	movlb	0	; () banked
 14159  012E42  6F9B               	movwf	(Port_SetType@pInput+1)& (0+255),b
 14160  012E44  0E03               	movlw	3
 14161  012E46  0100               	movlb	0	; () banked
 14162  012E48  6F9C               	movwf	Port_SetType@pType& (0+255),b
 14163  012E4A  EC7D  F08E         	call	_Port_SetType	;wreg free
 14164                           
 14165                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
 14166  012E4E  0E84               	movlw	low _PortG
 14167  012E50  0100               	movlb	0	; () banked
 14168  012E52  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 14169  012E54  0E03               	movlw	high _PortG
 14170  012E56  0100               	movlb	0	; () banked
 14171  012E58  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14172  012E5A  0E04               	movlw	4
 14173  012E5C  0100               	movlb	0	; () banked
 14174  012E5E  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 14175  012E60  0E00               	movlw	0
 14176  012E62  0100               	movlb	0	; () banked
 14177  012E64  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 14178  012E66  EC59  F09F         	call	_Port_SetPin	;wreg free
 14179                           
 14180                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
 14181  012E6A  0EB6               	movlw	low _PortF
 14182  012E6C  0100               	movlb	0	; () banked
 14183  012E6E  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 14184  012E70  0E03               	movlw	high _PortF
 14185  012E72  0100               	movlb	0	; () banked
 14186  012E74  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14187  012E76  0E06               	movlw	6
 14188  012E78  0100               	movlb	0	; () banked
 14189  012E7A  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 14190  012E7C  0E01               	movlw	1
 14191  012E7E  0100               	movlb	0	; () banked
 14192  012E80  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 14193  012E82  EC59  F09F         	call	_Port_SetPin	;wreg free
 14194                           
 14195                           ;MXK.c: 55: LED_Init(eLED1);
 14196  012E86  0E00               	movlw	0
 14197  012E88  ECBF  F0AB         	call	_LED_Init
 14198                           
 14199                           ;MXK.c: 56: LED_Init(eLED2);
 14200  012E8C  0E01               	movlw	1
 14201  012E8E  ECBF  F0AB         	call	_LED_Init
 14202                           
 14203                           ;MXK.c: 58: PIR1 = 0;
 14204  012E92  0E00               	movlw	0
 14205  012E94  6E9E               	movwf	3998,c	;volatile
 14206                           
 14207                           ;MXK.c: 59: PIR2 = 0;
 14208  012E96  0E00               	movlw	0
 14209  012E98  6EA1               	movwf	4001,c	;volatile
 14210                           
 14211                           ;MXK.c: 60: PIR3 = 0;
 14212  012E9A  0E00               	movlw	0
 14213  012E9C  6EA4               	movwf	4004,c	;volatile
 14214                           
 14215                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
 14216  012E9E  8E9B               	bsf	3995,7,c	;volatile
 14217                           
 14218                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
 14219  012EA0  8C9B               	bsf	3995,6,c	;volatile
 14220                           
 14221                           ;MXK.c: 66: delay_ms(100);
 14222  012EA2  0E00               	movlw	0
 14223  012EA4  0100               	movlb	0	; () banked
 14224  012EA6  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 14225  012EA8  0E64               	movlw	100
 14226  012EAA  6F60               	movwf	delay_ms@ms& (0+255),b
 14227  012EAC  ECBD  F0AA         	call	_delay_ms	;wreg free
 14228                           
 14229                           ;MXK.c: 68: RCONbits.IPEN = 1;
 14230  012EB0  8ED0               	bsf	4048,7,c	;volatile
 14231  012EB2  0012               	return		;funcret
 14232  012EB4                     __end_of_MXK_Init:
 14233                           	opt stack 0
 14234                           tblptru	equ	0xFF8
 14235                           tblptrh	equ	0xFF7
 14236                           tblptrl	equ	0xFF6
 14237                           tablat	equ	0xFF5
 14238                           prodh	equ	0xFF4
 14239                           prodl	equ	0xFF3
 14240                           intcon	equ	0xFF2
 14241                           postinc0	equ	0xFEE
 14242                           wreg	equ	0xFE8
 14243                           indf1	equ	0xFE7
 14244                           postdec1	equ	0xFE5
 14245                           fsr1h	equ	0xFE2
 14246                           fsr1l	equ	0xFE1
 14247                           indf2	equ	0xFDF
 14248                           postinc2	equ	0xFDE
 14249                           postdec2	equ	0xFDD
 14250                           fsr2h	equ	0xFDA
 14251                           fsr2l	equ	0xFD9
 14252                           status	equ	0xFD8
 14253                           
 14254 ;; *************** function _Port_Init *****************
 14255 ;; Defined at:
 14256 ;;		line 150 in file "Library/Port.c"
 14257 ;; Parameters:    Size  Location     Type
 14258 ;;  pInput          2   64[BANK0 ] const PTR struct Port
 14259 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 14260 ;;		 -> PortD(10), PortC(10), PortF(10), 
 14261 ;;  pPort           1   66[BANK0 ] enum E6786
 14262 ;; Auto vars:     Size  Location     Type
 14263 ;;  i               1   69[BANK0 ] unsigned char 
 14264 ;; Return value:  Size  Location     Type
 14265 ;;                  1    wreg      void 
 14266 ;; Registers used:
 14267 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14268 ;; Tracked objects:
 14269 ;;		On entry : 0/0
 14270 ;;		On exit  : 0/0
 14271 ;;		Unchanged: 0/0
 14272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14273 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14274 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14275 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14276 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14277 ;;Total ram usage:        6 bytes
 14278 ;; Hardware stack levels used:    1
 14279 ;; Hardware stack levels required when called:   15
 14280 ;; This function calls:
 14281 ;;		_GetPortPORT
 14282 ;;		_GetPortProperties
 14283 ;;		_GetPortTRIS
 14284 ;;		_Port_Set
 14285 ;;		_Port_SetPinType
 14286 ;;		_Port_SetType
 14287 ;;		_Word_GetPair
 14288 ;; This function is called by:
 14289 ;;		_MXK_Init
 14290 ;; This function uses a non-reentrant model
 14291 ;;
 14292                           
 14293                           	psect	text60
 14294  012A1C                     __ptext60:
 14295                           	opt stack 0
 14296  012A1C                     _Port_Init:
 14297                           	opt stack 13
 14298                           
 14299                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
 14300                           
 14301                           ;incstack = 0
 14302  012A1C  0100               	movlb	0	; () banked
 14303  012A1E  51A2               	movf	Port_Init@pPort& (0+255),w,b
 14304  012A20  EC45  F0A4         	call	_GetPortProperties
 14305  012A24  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
 14306  012A28  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
 14307  012A2C  0100               	movlb	0	; () banked
 14308  012A2E  C060  FFDE         	movff	?_GetPortProperties,postinc2
 14309  012A32  0100               	movlb	0	; () banked
 14310  012A34  C061  FFDD         	movff	?_GetPortProperties+1,postdec2
 14311                           
 14312                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
 14313  012A38  0100               	movlb	0	; () banked
 14314  012A3A  51A2               	movf	Port_Init@pPort& (0+255),w,b
 14315  012A3C  EC98  F0A4         	call	_GetPortPORT
 14316  012A40  0100               	movlb	0	; () banked
 14317  012A42  EE20 F006          	lfsr	2,6
 14318  012A46  51A0               	movf	Port_Init@pInput& (0+255),w,b
 14319  012A48  26D9               	addwf	fsr2l,f,c
 14320  012A4A  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14321  012A4C  22DA               	addwfc	fsr2h,f,c
 14322  012A4E  0100               	movlb	0	; () banked
 14323  012A50  C060  FFDE         	movff	?_GetPortPORT,postinc2
 14324  012A54  0100               	movlb	0	; () banked
 14325  012A56  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
 14326                           
 14327                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
 14328  012A5A  0100               	movlb	0	; () banked
 14329  012A5C  51A2               	movf	Port_Init@pPort& (0+255),w,b
 14330  012A5E  EC98  F0A4         	call	_GetPortPORT
 14331  012A62  0100               	movlb	0	; () banked
 14332  012A64  EE20 F004          	lfsr	2,4
 14333  012A68  51A0               	movf	Port_Init@pInput& (0+255),w,b
 14334  012A6A  26D9               	addwf	fsr2l,f,c
 14335  012A6C  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14336  012A6E  22DA               	addwfc	fsr2h,f,c
 14337  012A70  0100               	movlb	0	; () banked
 14338  012A72  C060  FFDE         	movff	?_GetPortPORT,postinc2
 14339  012A76  0100               	movlb	0	; () banked
 14340  012A78  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
 14341                           
 14342                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
 14343  012A7C  0100               	movlb	0	; () banked
 14344  012A7E  51A2               	movf	Port_Init@pPort& (0+255),w,b
 14345  012A80  ECF2  F0A3         	call	_GetPortTRIS
 14346  012A84  0100               	movlb	0	; () banked
 14347  012A86  EE20 F002          	lfsr	2,2
 14348  012A8A  51A0               	movf	Port_Init@pInput& (0+255),w,b
 14349  012A8C  26D9               	addwf	fsr2l,f,c
 14350  012A8E  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14351  012A90  22DA               	addwfc	fsr2h,f,c
 14352  012A92  0100               	movlb	0	; () banked
 14353  012A94  C060  FFDE         	movff	?_GetPortTRIS,postinc2
 14354  012A98  0100               	movlb	0	; () banked
 14355  012A9A  C061  FFDD         	movff	?_GetPortTRIS+1,postdec2
 14356                           
 14357                           ; BSR set to: 0
 14358                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
 14359  012A9E  0100               	movlb	0	; () banked
 14360  012AA0  EE20 F004          	lfsr	2,4
 14361  012AA4  51A0               	movf	Port_Init@pInput& (0+255),w,b
 14362  012AA6  26D9               	addwf	fsr2l,f,c
 14363  012AA8  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14364  012AAA  22DA               	addwfc	fsr2h,f,c
 14365  012AAC  CFDE F0A3          	movff	postinc2,??_Port_Init
 14366  012AB0  CFDD F0A4          	movff	postdec2,??_Port_Init+1
 14367  012AB4  C0A3  FFD9         	movff	??_Port_Init,fsr2l
 14368  012AB8  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
 14369  012ABC  0E00               	movlw	0
 14370  012ABE  6EDF               	movwf	indf2,c
 14371                           
 14372                           ; BSR set to: 0
 14373                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
 14374  012AC0  0100               	movlb	0	; () banked
 14375  012AC2  EE20 F002          	lfsr	2,2
 14376  012AC6  51A0               	movf	Port_Init@pInput& (0+255),w,b
 14377  012AC8  26D9               	addwf	fsr2l,f,c
 14378  012ACA  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14379  012ACC  22DA               	addwfc	fsr2h,f,c
 14380  012ACE  CFDE F0A3          	movff	postinc2,??_Port_Init
 14381  012AD2  CFDD F0A4          	movff	postdec2,??_Port_Init+1
 14382  012AD6  C0A3  FFD9         	movff	??_Port_Init,fsr2l
 14383  012ADA  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
 14384  012ADE  0EFF               	movlw	255
 14385  012AE0  6EDF               	movwf	indf2,c
 14386                           
 14387                           ; BSR set to: 0
 14388                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
 14389  012AE2  C0A0  F09A         	movff	Port_Init@pInput,Port_SetType@pInput
 14390  012AE6  C0A1  F09B         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
 14391  012AEA  0E00               	movlw	0
 14392  012AEC  0100               	movlb	0	; () banked
 14393  012AEE  6F9C               	movwf	Port_SetType@pType& (0+255),b
 14394  012AF0  EC7D  F08E         	call	_Port_SetType	;wreg free
 14395                           
 14396                           ;Port.c: 166: UINT8 i;
 14397                           ;Port.c: 167: for (i=0; i<8; i++)
 14398  012AF4  0E00               	movlw	0
 14399  012AF6  0100               	movlb	0	; () banked
 14400  012AF8  6FA5               	movwf	Port_Init@i& (0+255),b
 14401  012AFA                     l13488:
 14402                           
 14403                           ; BSR set to: 0
 14404  012AFA  0E07               	movlw	7
 14405  012AFC  0100               	movlb	0	; () banked
 14406  012AFE  65A5               	cpfsgt	Port_Init@i& (0+255),b
 14407  012B00  D031               	goto	l403
 14408  012B02  D04B               	goto	u9980
 14409  012B04                     
 14410                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
 14411                           
 14412                           ; BSR set to: 0
 14413  012B04  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 14414  012B08  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 14415  012B0C  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 14416  012B10  0E03               	movlw	3
 14417  012B12  0100               	movlb	0	; () banked
 14418  012B14  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 14419  012B16  EC5F  F093         	call	_Port_SetPinType	;wreg free
 14420                           
 14421                           ;Port.c: 173: break;
 14422  012B1A  D03C               	goto	l405
 14423  012B1C                     
 14424                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
 14425  012B1C  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 14426  012B20  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 14427  012B24  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 14428  012B28  0E02               	movlw	2
 14429  012B2A  0100               	movlb	0	; () banked
 14430  012B2C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 14431  012B2E  EC5F  F093         	call	_Port_SetPinType	;wreg free
 14432                           
 14433                           ;Port.c: 176: break;
 14434  012B32  D030               	goto	l405
 14435  012B34                     
 14436                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
 14437  012B34  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 14438  012B38  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 14439  012B3C  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 14440  012B40  0E01               	movlw	1
 14441  012B42  0100               	movlb	0	; () banked
 14442  012B44  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 14443  012B46  EC5F  F093         	call	_Port_SetPinType	;wreg free
 14444                           
 14445                           ;Port.c: 179: break;
 14446  012B4A  D024               	goto	l405
 14447  012B4C                     
 14448                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
 14449  012B4C  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 14450  012B50  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 14451  012B54  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 14452  012B58  0E00               	movlw	0
 14453  012B5A  0100               	movlb	0	; () banked
 14454  012B5C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 14455  012B5E  EC5F  F093         	call	_Port_SetPinType	;wreg free
 14456                           
 14457                           ;Port.c: 183: }
 14458                           
 14459                           ;Port.c: 182: break;
 14460  012B62  D018               	goto	l405
 14461  012B64                     l403:
 14462  012B64  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
 14463  012B68  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
 14464  012B6C  CFDE F06C          	movff	postinc2,Word_GetPair@pInput
 14465  012B70  CFDD F06D          	movff	postdec2,Word_GetPair@pInput+1
 14466  012B74  C0A5  F06E         	movff	Port_Init@i,Word_GetPair@pPair
 14467  012B78  EC70  F0AF         	call	_Word_GetPair	;wreg free
 14468                           
 14469                           ; Switch size 1, requested type "space"
 14470                           ; Number of cases is 4, Range of values is 0 to 3
 14471                           ; switch strategies available:
 14472                           ; Name         Instructions Cycles
 14473                           ; simple_byte           13     7 (average)
 14474                           ;	Chosen strategy is simple_byte
 14475  012B7C  0A00               	xorlw	0	; case 0
 14476  012B7E  B4D8               	btfsc	status,2,c
 14477  012B80  D7C1               	goto	l404
 14478  012B82  0A01               	xorlw	1	; case 1
 14479  012B84  B4D8               	btfsc	status,2,c
 14480  012B86  D7D6               	goto	l407
 14481  012B88  0A03               	xorlw	3	; case 2
 14482  012B8A  B4D8               	btfsc	status,2,c
 14483  012B8C  D7C7               	goto	l406
 14484  012B8E  0A01               	xorlw	1	; case 3
 14485  012B90  B4D8               	btfsc	status,2,c
 14486  012B92  D7DC               	goto	l408
 14487  012B94                     l405:
 14488  012B94  0100               	movlb	0	; () banked
 14489  012B96  2BA5               	incf	Port_Init@i& (0+255),f,b
 14490  012B98  D7B0               	goto	l13488
 14491  012B9A                     u9980:
 14492                           
 14493                           ; BSR set to: 0
 14494                           ;Port.c: 184: }
 14495                           ;Port.c: 185: Port_Set(pInput, 0x00);
 14496                           
 14497                           ; BSR set to: 0
 14498  012B9A  C0A0  F06F         	movff	Port_Init@pInput,Port_Set@pInput
 14499  012B9E  C0A1  F070         	movff	Port_Init@pInput+1,Port_Set@pInput+1
 14500  012BA2  0E00               	movlw	0
 14501  012BA4  0100               	movlb	0	; () banked
 14502  012BA6  6F71               	movwf	Port_Set@pValue& (0+255),b
 14503  012BA8  EC33  F08A         	call	_Port_Set	;wreg free
 14504  012BAC  0012               	return		;funcret
 14505  012BAE                     __end_of_Port_Init:
 14506                           	opt stack 0
 14507                           tblptru	equ	0xFF8
 14508                           tblptrh	equ	0xFF7
 14509                           tblptrl	equ	0xFF6
 14510                           tablat	equ	0xFF5
 14511                           prodh	equ	0xFF4
 14512                           prodl	equ	0xFF3
 14513                           intcon	equ	0xFF2
 14514                           postinc0	equ	0xFEE
 14515                           wreg	equ	0xFE8
 14516                           indf1	equ	0xFE7
 14517                           postdec1	equ	0xFE5
 14518                           fsr1h	equ	0xFE2
 14519                           fsr1l	equ	0xFE1
 14520                           indf2	equ	0xFDF
 14521                           postinc2	equ	0xFDE
 14522                           postdec2	equ	0xFDD
 14523                           fsr2h	equ	0xFDA
 14524                           fsr2l	equ	0xFD9
 14525                           status	equ	0xFD8
 14526                           
 14527 ;; *************** function _Port_SetType *****************
 14528 ;; Defined at:
 14529 ;;		line 513 in file "Library/Port.c"
 14530 ;; Parameters:    Size  Location     Type
 14531 ;;  pInput          2   58[BANK0 ] const PTR struct Port
 14532 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 14533 ;;		 -> PortD(10), PortC(10), PortF(10), 
 14534 ;;  pType           1   60[BANK0 ] enum E6795
 14535 ;; Auto vars:     Size  Location     Type
 14536 ;;  Output          1   63[BANK0 ] enum E6475
 14537 ;; Return value:  Size  Location     Type
 14538 ;;                  1    wreg      enum E6475
 14539 ;; Registers used:
 14540 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14541 ;; Tracked objects:
 14542 ;;		On entry : 0/0
 14543 ;;		On exit  : 0/0
 14544 ;;		Unchanged: 0/0
 14545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14546 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14547 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14548 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14549 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14550 ;;Total ram usage:        6 bytes
 14551 ;; Hardware stack levels used:    1
 14552 ;; Hardware stack levels required when called:   14
 14553 ;; This function calls:
 14554 ;;		_Port_CheckPortType
 14555 ;;		_Word_SetPair
 14556 ;; This function is called by:
 14557 ;;		_Port_Init
 14558 ;;		_MXK_Init
 14559 ;; This function uses a non-reentrant model
 14560 ;;
 14561                           
 14562                           	psect	text61
 14563  011CFA                     __ptext61:
 14564                           	opt stack 0
 14565  011CFA                     _Port_SetType:
 14566                           	opt stack 14
 14567                           
 14568                           ;Port.c: 515: ePinError Output = ePinErrorState;
 14569                           
 14570                           ;incstack = 0
 14571  011CFA  0E05               	movlw	5
 14572  011CFC  0100               	movlb	0	; () banked
 14573  011CFE  6F9F               	movwf	Port_SetType@Output& (0+255),b
 14574                           
 14575                           ;Port.c: 517: switch (pType)
 14576  011D00  D07A               	goto	l509
 14577  011D02                     
 14578                           ; BSR set to: 0
 14579                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
 14580                           
 14581                           ; BSR set to: 0
 14582  011D02  0100               	movlb	0	; () banked
 14583  011D04  EE20 F002          	lfsr	2,2
 14584  011D08  519A               	movf	Port_SetType@pInput& (0+255),w,b
 14585  011D0A  26D9               	addwf	fsr2l,f,c
 14586  011D0C  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 14587  011D0E  22DA               	addwfc	fsr2h,f,c
 14588  011D10  CFDE F09D          	movff	postinc2,??_Port_SetType
 14589  011D14  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 14590  011D18  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 14591  011D1C  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 14592  011D20  0EFF               	movlw	255
 14593  011D22  D067               	goto	L10
 14594  011D24                     
 14595                           ; BSR set to: 0
 14596                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
 14597                           
 14598                           ; BSR set to: 0
 14599  011D24  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 14600  011D28  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 14601  011D2C  0E01               	movlw	1
 14602  011D2E  0100               	movlb	0	; () banked
 14603  011D30  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
 14604  011D32  EC98  F0AD         	call	_Port_CheckPortType	;wreg free
 14605  011D36  0100               	movlb	0	; () banked
 14606  011D38  6F9F               	movwf	Port_SetType@Output& (0+255),b
 14607  011D3A  0100               	movlb	0	; () banked
 14608  011D3C  519F               	movf	Port_SetType@Output& (0+255),w,b
 14609  011D3E  A4D8               	btfss	status,2,c
 14610  011D40  0012               	return	
 14611                           
 14612                           ; BSR set to: 0
 14613                           ;Port.c: 527: {
 14614                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
 14615  011D42  0100               	movlb	0	; () banked
 14616  011D44  EE20 F002          	lfsr	2,2
 14617  011D48  519A               	movf	Port_SetType@pInput& (0+255),w,b
 14618  011D4A  26D9               	addwf	fsr2l,f,c
 14619  011D4C  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 14620  011D4E  22DA               	addwfc	fsr2h,f,c
 14621  011D50  CFDE F09D          	movff	postinc2,??_Port_SetType
 14622  011D54  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 14623  011D58  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 14624  011D5C  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 14625  011D60  0E00               	movlw	0
 14626  011D62  6EDF               	movwf	indf2,c
 14627                           
 14628                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
 14629  011D64  0100               	movlb	0	; () banked
 14630  011D66  EE20 F004          	lfsr	2,4
 14631  011D6A  D036               	goto	L21
 14632  011D6C                     
 14633                           ; BSR set to: 0
 14634                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
 14635                           
 14636                           ; BSR set to: 0
 14637  011D6C  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 14638  011D70  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 14639  011D74  0E02               	movlw	2
 14640  011D76  0100               	movlb	0	; () banked
 14641  011D78  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
 14642  011D7A  EC98  F0AD         	call	_Port_CheckPortType	;wreg free
 14643  011D7E  0100               	movlb	0	; () banked
 14644  011D80  6F9F               	movwf	Port_SetType@Output& (0+255),b
 14645  011D82  0100               	movlb	0	; () banked
 14646  011D84  519F               	movf	Port_SetType@Output& (0+255),w,b
 14647  011D86  A4D8               	btfss	status,2,c
 14648  011D88  0012               	return	
 14649                           
 14650                           ; BSR set to: 0
 14651                           ;Port.c: 538: {
 14652                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
 14653  011D8A  0100               	movlb	0	; () banked
 14654  011D8C  EE20 F002          	lfsr	2,2
 14655  011D90  519A               	movf	Port_SetType@pInput& (0+255),w,b
 14656  011D92  26D9               	addwf	fsr2l,f,c
 14657  011D94  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 14658  011D96  22DA               	addwfc	fsr2h,f,c
 14659  011D98  CFDE F09D          	movff	postinc2,??_Port_SetType
 14660  011D9C  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 14661  011DA0  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 14662  011DA4  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 14663  011DA8  0EFF               	movlw	255
 14664  011DAA  6EDF               	movwf	indf2,c
 14665                           
 14666                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
 14667  011DAC  0100               	movlb	0	; () banked
 14668  011DAE  EE20 F004          	lfsr	2,4
 14669  011DB2  D7AA               	goto	L11
 14670  011DB4                     
 14671                           ; BSR set to: 0
 14672                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
 14673                           
 14674                           ; BSR set to: 0
 14675  011DB4  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 14676  011DB8  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 14677  011DBC  0E00               	movlw	0
 14678  011DBE  0100               	movlb	0	; () banked
 14679  011DC0  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
 14680  011DC2  EC98  F0AD         	call	_Port_CheckPortType	;wreg free
 14681  011DC6  0100               	movlb	0	; () banked
 14682  011DC8  6F9F               	movwf	Port_SetType@Output& (0+255),b
 14683  011DCA  0100               	movlb	0	; () banked
 14684  011DCC  519F               	movf	Port_SetType@Output& (0+255),w,b
 14685  011DCE  A4D8               	btfss	status,2,c
 14686  011DD0  0012               	return	
 14687                           
 14688                           ; BSR set to: 0
 14689                           ;Port.c: 549: {
 14690                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
 14691  011DD2  0100               	movlb	0	; () banked
 14692  011DD4  EE20 F002          	lfsr	2,2
 14693  011DD8                     L21:
 14694  011DD8  519A               	movf	Port_SetType@pInput& (0+255),w,b
 14695  011DDA  26D9               	addwf	fsr2l,f,c
 14696  011DDC  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 14697  011DDE  22DA               	addwfc	fsr2h,f,c
 14698  011DE0  CFDE F09D          	movff	postinc2,??_Port_SetType
 14699  011DE4  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 14700  011DE8  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 14701  011DEC  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 14702  011DF0  0E00               	movlw	0
 14703  011DF2                     L10:
 14704  011DF2  6EDF               	movwf	indf2,c
 14705                           
 14706                           ;Port.c: 552: }
 14707  011DF4  D00E               	goto	l511
 14708  011DF6                     l509:
 14709                           
 14710                           ; BSR set to: 0
 14711                           
 14712                           ; BSR set to: 0
 14713  011DF6  0100               	movlb	0	; () banked
 14714  011DF8  519C               	movf	Port_SetType@pType& (0+255),w,b
 14715                           
 14716                           ; Switch size 1, requested type "space"
 14717                           ; Number of cases is 4, Range of values is 0 to 3
 14718                           ; switch strategies available:
 14719                           ; Name         Instructions Cycles
 14720                           ; simple_byte           13     7 (average)
 14721                           ;	Chosen strategy is simple_byte
 14722  011DFA  0A00               	xorlw	0	; case 0
 14723  011DFC  B4D8               	btfsc	status,2,c
 14724  011DFE  D781               	goto	l510
 14725  011E00  0A01               	xorlw	1	; case 1
 14726  011E02  B4D8               	btfsc	status,2,c
 14727  011E04  D78F               	goto	l512
 14728  011E06  0A03               	xorlw	3	; case 2
 14729  011E08  B4D8               	btfsc	status,2,c
 14730  011E0A  D7B0               	goto	l516
 14731  011E0C  0A01               	xorlw	1	; case 3
 14732  011E0E  B4D8               	btfsc	status,2,c
 14733  011E10  D7D1               	goto	l519
 14734  011E12                     l511:
 14735                           
 14736                           ; BSR set to: 0
 14737                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
 14738                           
 14739                           ; BSR set to: 0
 14740  011E12  0E08               	movlw	8
 14741  011E14  0100               	movlb	0	; () banked
 14742  011E16  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 14743  011E18  0100               	movlb	0	; () banked
 14744  011E1A  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 14745  011E1C  0E00               	movlw	0
 14746  011E1E  0100               	movlb	0	; () banked
 14747  011E20  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14748  011E22  0100               	movlb	0	; () banked
 14749  011E24  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14750  011E26  0E00               	movlw	0
 14751  011E28  0100               	movlb	0	; () banked
 14752  011E2A  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 14753  011E2C  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 14754  011E30  EC4A  F0AE         	call	_Word_SetPair	;wreg free
 14755                           
 14756                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
 14757  011E34  0E08               	movlw	8
 14758  011E36  0100               	movlb	0	; () banked
 14759  011E38  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 14760  011E3A  0100               	movlb	0	; () banked
 14761  011E3C  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 14762  011E3E  0E00               	movlw	0
 14763  011E40  0100               	movlb	0	; () banked
 14764  011E42  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14765  011E44  0100               	movlb	0	; () banked
 14766  011E46  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14767  011E48  0E01               	movlw	1
 14768  011E4A  0100               	movlb	0	; () banked
 14769  011E4C  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 14770  011E4E  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 14771  011E52  EC4A  F0AE         	call	_Word_SetPair	;wreg free
 14772                           
 14773                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
 14774  011E56  0E08               	movlw	8
 14775  011E58  0100               	movlb	0	; () banked
 14776  011E5A  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 14777  011E5C  0100               	movlb	0	; () banked
 14778  011E5E  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 14779  011E60  0E00               	movlw	0
 14780  011E62  0100               	movlb	0	; () banked
 14781  011E64  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14782  011E66  0100               	movlb	0	; () banked
 14783  011E68  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14784  011E6A  0E02               	movlw	2
 14785  011E6C  0100               	movlb	0	; () banked
 14786  011E6E  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 14787  011E70  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 14788  011E74  EC4A  F0AE         	call	_Word_SetPair	;wreg free
 14789                           
 14790                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
 14791  011E78  0E08               	movlw	8
 14792  011E7A  0100               	movlb	0	; () banked
 14793  011E7C  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 14794  011E7E  0100               	movlb	0	; () banked
 14795  011E80  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 14796  011E82  0E00               	movlw	0
 14797  011E84  0100               	movlb	0	; () banked
 14798  011E86  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14799  011E88  0100               	movlb	0	; () banked
 14800  011E8A  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14801  011E8C  0E03               	movlw	3
 14802  011E8E  0100               	movlb	0	; () banked
 14803  011E90  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 14804  011E92  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 14805  011E96  EC4A  F0AE         	call	_Word_SetPair	;wreg free
 14806                           
 14807                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
 14808  011E9A  0E08               	movlw	8
 14809  011E9C  0100               	movlb	0	; () banked
 14810  011E9E  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 14811  011EA0  0100               	movlb	0	; () banked
 14812  011EA2  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 14813  011EA4  0E00               	movlw	0
 14814  011EA6  0100               	movlb	0	; () banked
 14815  011EA8  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14816  011EAA  0100               	movlb	0	; () banked
 14817  011EAC  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14818  011EAE  0E04               	movlw	4
 14819  011EB0  0100               	movlb	0	; () banked
 14820  011EB2  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 14821  011EB4  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 14822  011EB8  EC4A  F0AE         	call	_Word_SetPair	;wreg free
 14823                           
 14824                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
 14825  011EBC  0E08               	movlw	8
 14826  011EBE  0100               	movlb	0	; () banked
 14827  011EC0  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 14828  011EC2  0100               	movlb	0	; () banked
 14829  011EC4  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 14830  011EC6  0E00               	movlw	0
 14831  011EC8  0100               	movlb	0	; () banked
 14832  011ECA  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14833  011ECC  0100               	movlb	0	; () banked
 14834  011ECE  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14835  011ED0  0E05               	movlw	5
 14836  011ED2  0100               	movlb	0	; () banked
 14837  011ED4  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 14838  011ED6  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 14839  011EDA  EC4A  F0AE         	call	_Word_SetPair	;wreg free
 14840                           
 14841                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
 14842  011EDE  0E08               	movlw	8
 14843  011EE0  0100               	movlb	0	; () banked
 14844  011EE2  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 14845  011EE4  0100               	movlb	0	; () banked
 14846  011EE6  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 14847  011EE8  0E00               	movlw	0
 14848  011EEA  0100               	movlb	0	; () banked
 14849  011EEC  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14850  011EEE  0100               	movlb	0	; () banked
 14851  011EF0  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14852  011EF2  0E06               	movlw	6
 14853  011EF4  0100               	movlb	0	; () banked
 14854  011EF6  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 14855  011EF8  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 14856  011EFC  EC4A  F0AE         	call	_Word_SetPair	;wreg free
 14857                           
 14858                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
 14859  011F00  0E08               	movlw	8
 14860  011F02  0100               	movlb	0	; () banked
 14861  011F04  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 14862  011F06  0100               	movlb	0	; () banked
 14863  011F08  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 14864  011F0A  0E00               	movlw	0
 14865  011F0C  0100               	movlb	0	; () banked
 14866  011F0E  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14867  011F10  0100               	movlb	0	; () banked
 14868  011F12  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14869  011F14  0E07               	movlw	7
 14870  011F16  0100               	movlb	0	; () banked
 14871  011F18  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 14872  011F1A  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 14873  011F1E  EC4A  F0AE         	call	_Word_SetPair	;wreg free
 14874  011F22  0012               	return	
 14875  011F24                     __end_of_Port_SetType:
 14876                           	opt stack 0
 14877                           tblptru	equ	0xFF8
 14878                           tblptrh	equ	0xFF7
 14879                           tblptrl	equ	0xFF6
 14880                           tablat	equ	0xFF5
 14881                           prodh	equ	0xFF4
 14882                           prodl	equ	0xFF3
 14883                           intcon	equ	0xFF2
 14884                           postinc0	equ	0xFEE
 14885                           wreg	equ	0xFE8
 14886                           indf1	equ	0xFE7
 14887                           postdec1	equ	0xFE5
 14888                           fsr1h	equ	0xFE2
 14889                           fsr1l	equ	0xFE1
 14890                           indf2	equ	0xFDF
 14891                           postinc2	equ	0xFDE
 14892                           postdec2	equ	0xFDD
 14893                           fsr2h	equ	0xFDA
 14894                           fsr2l	equ	0xFD9
 14895                           status	equ	0xFD8
 14896                           
 14897 ;; *************** function _Port_CheckPortType *****************
 14898 ;; Defined at:
 14899 ;;		line 138 in file "Library/Port.c"
 14900 ;; Parameters:    Size  Location     Type
 14901 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 14902 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 14903 ;;		 -> PortD(10), PortC(10), PortF(10), 
 14904 ;;  pDrive          1   56[BANK0 ] enum E6469
 14905 ;; Auto vars:     Size  Location     Type
 14906 ;;  Output          1   57[BANK0 ] enum E6475
 14907 ;; Return value:  Size  Location     Type
 14908 ;;                  1    wreg      enum E6475
 14909 ;; Registers used:
 14910 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14911 ;; Tracked objects:
 14912 ;;		On entry : 0/0
 14913 ;;		On exit  : 0/0
 14914 ;;		Unchanged: 0/0
 14915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14916 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14917 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14919 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14920 ;;Total ram usage:        4 bytes
 14921 ;; Hardware stack levels used:    1
 14922 ;; Hardware stack levels required when called:   13
 14923 ;; This function calls:
 14924 ;;		_Port_CheckQuadType
 14925 ;; This function is called by:
 14926 ;;		_Port_SetType
 14927 ;; This function uses a non-reentrant model
 14928 ;;
 14929                           
 14930                           	psect	text62
 14931  015B30                     __ptext62:
 14932                           	opt stack 0
 14933  015B30                     _Port_CheckPortType:
 14934                           	opt stack 14
 14935                           
 14936                           ;Port.c: 140: ePinError Output = ePinErrorState;
 14937                           
 14938                           ;incstack = 0
 14939  015B30  0E05               	movlw	5
 14940  015B32  0100               	movlb	0	; () banked
 14941  015B34  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
 14942                           
 14943                           ; BSR set to: 0
 14944                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
 14945  015B36  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 14946  015B3A  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 14947  015B3E  0E00               	movlw	0
 14948  015B40  0100               	movlb	0	; () banked
 14949  015B42  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 14950  015B44  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 14951  015B48  EC4F  F0AC         	call	_Port_CheckQuadType	;wreg free
 14952  015B4C  0100               	movlb	0	; () banked
 14953  015B4E  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
 14954  015B50  0100               	movlb	0	; () banked
 14955  015B52  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
 14956  015B54  A4D8               	btfss	status,2,c
 14957  015B56  D00D               	goto	l397
 14958                           
 14959                           ; BSR set to: 0
 14960                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
 14961  015B58  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 14962  015B5C  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 14963  015B60  0E01               	movlw	1
 14964  015B62  0100               	movlb	0	; () banked
 14965  015B64  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 14966  015B66  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 14967  015B6A  EC4F  F0AC         	call	_Port_CheckQuadType	;wreg free
 14968  015B6E  0100               	movlb	0	; () banked
 14969  015B70  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
 14970  015B72                     l397:
 14971                           
 14972                           ; BSR set to: 0
 14973                           ;Port.c: 146: return Output;
 14974                           
 14975                           ; BSR set to: 0
 14976  015B72  0100               	movlb	0	; () banked
 14977  015B74  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
 14978  015B76  0012               	return	
 14979  015B78                     __end_of_Port_CheckPortType:
 14980                           	opt stack 0
 14981                           tblptru	equ	0xFF8
 14982                           tblptrh	equ	0xFF7
 14983                           tblptrl	equ	0xFF6
 14984                           tablat	equ	0xFF5
 14985                           prodh	equ	0xFF4
 14986                           prodl	equ	0xFF3
 14987                           intcon	equ	0xFF2
 14988                           postinc0	equ	0xFEE
 14989                           wreg	equ	0xFE8
 14990                           indf1	equ	0xFE7
 14991                           postdec1	equ	0xFE5
 14992                           fsr1h	equ	0xFE2
 14993                           fsr1l	equ	0xFE1
 14994                           indf2	equ	0xFDF
 14995                           postinc2	equ	0xFDE
 14996                           postdec2	equ	0xFDD
 14997                           fsr2h	equ	0xFDA
 14998                           fsr2l	equ	0xFD9
 14999                           status	equ	0xFD8
 15000                           
 15001 ;; *************** function _Port_Set *****************
 15002 ;; Defined at:
 15003 ;;		line 570 in file "Library/Port.c"
 15004 ;; Parameters:    Size  Location     Type
 15005 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 15006 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 15007 ;;		 -> PortD(10), PortC(10), PortF(10), 
 15008 ;;  pValue          1   17[BANK0 ] unsigned char 
 15009 ;; Auto vars:     Size  Location     Type
 15010 ;;  TypeActual      2   36[BANK0 ] unsigned short 
 15011 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
 15012 ;;  Type            1   38[BANK0 ] enum E6795
 15013 ;; Return value:  Size  Location     Type
 15014 ;;                  1    wreg      void 
 15015 ;; Registers used:
 15016 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15017 ;; Tracked objects:
 15018 ;;		On entry : 0/0
 15019 ;;		On exit  : 0/0
 15020 ;;		Unchanged: 0/0
 15021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15022 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15023 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15024 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15025 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15026 ;;Total ram usage:       24 bytes
 15027 ;; Hardware stack levels used:    1
 15028 ;; Hardware stack levels required when called:   10
 15029 ;; This function calls:
 15030 ;;		_Byte_SetByte
 15031 ;;		_Word_GetPair
 15032 ;; This function is called by:
 15033 ;;		_Port_Init
 15034 ;;		_Port_Toggle
 15035 ;; This function uses a non-reentrant model
 15036 ;;
 15037                           
 15038                           	psect	text63
 15039  011466                     __ptext63:
 15040                           	opt stack 0
 15041  011466                     _Port_Set:
 15042                           	opt stack 17
 15043                           
 15044                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
 15045                           
 15046                           ; BSR set to: 0
 15047                           ;incstack = 0
 15048  011466  0E08               	movlw	8
 15049  011468  0100               	movlb	0	; () banked
 15050  01146A  256F               	addwf	Port_Set@pInput& (0+255),w,b
 15051  01146C  0100               	movlb	0	; () banked
 15052  01146E  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 15053  011470  0E00               	movlw	0
 15054  011472  0100               	movlb	0	; () banked
 15055  011474  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15056  011476  0100               	movlb	0	; () banked
 15057  011478  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15058  01147A  0E00               	movlw	0
 15059  01147C  0100               	movlb	0	; () banked
 15060  01147E  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 15061  011480  EC70  F0AF         	call	_Word_GetPair	;wreg free
 15062  011484  0100               	movlb	0	; () banked
 15063  011486  6F86               	movwf	Port_Set@Type& (0+255),b
 15064                           
 15065                           ; BSR set to: 0
 15066                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
 15067  011488  0100               	movlb	0	; () banked
 15068  01148A  5186               	movf	Port_Set@Type& (0+255),w,b
 15069  01148C  0100               	movlb	0	; () banked
 15070  01148E  6F72               	movwf	??_Port_Set& (0+255),b
 15071  011490  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 15072  011492  0E0E               	movlw	14
 15073  011494                     u9585:
 15074  011494  90D8               	bcf	status,0,c
 15075  011496  0100               	movlb	0	; () banked
 15076  011498  3772               	rlcf	??_Port_Set& (0+255),f,b
 15077  01149A  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15078  01149C  2EE8               	decfsz	wreg,f,c
 15079  01149E  D7FA               	goto	u9585
 15080  0114A0  0100               	movlb	0	; () banked
 15081  0114A2  5186               	movf	Port_Set@Type& (0+255),w,b
 15082  0114A4  0100               	movlb	0	; () banked
 15083  0114A6  6F74               	movwf	(??_Port_Set+2)& (0+255),b
 15084  0114A8  6B75               	clrf	(??_Port_Set+3)& (0+255),b
 15085  0114AA  0E0C               	movlw	12
 15086  0114AC                     u9595:
 15087  0114AC  90D8               	bcf	status,0,c
 15088  0114AE  0100               	movlb	0	; () banked
 15089  0114B0  3774               	rlcf	(??_Port_Set+2)& (0+255),f,b
 15090  0114B2  3775               	rlcf	(??_Port_Set+3)& (0+255),f,b
 15091  0114B4  2EE8               	decfsz	wreg,f,c
 15092  0114B6  D7FA               	goto	u9595
 15093  0114B8  0100               	movlb	0	; () banked
 15094  0114BA  5186               	movf	Port_Set@Type& (0+255),w,b
 15095  0114BC  0100               	movlb	0	; () banked
 15096  0114BE  6F76               	movwf	(??_Port_Set+4)& (0+255),b
 15097  0114C0  6B77               	clrf	(??_Port_Set+5)& (0+255),b
 15098  0114C2  0E0A               	movlw	10
 15099  0114C4                     u9605:
 15100  0114C4  90D8               	bcf	status,0,c
 15101  0114C6  0100               	movlb	0	; () banked
 15102  0114C8  3776               	rlcf	(??_Port_Set+4)& (0+255),f,b
 15103  0114CA  3777               	rlcf	(??_Port_Set+5)& (0+255),f,b
 15104  0114CC  2EE8               	decfsz	wreg,f,c
 15105  0114CE  D7FA               	goto	u9605
 15106  0114D0  0100               	movlb	0	; () banked
 15107  0114D2  5186               	movf	Port_Set@Type& (0+255),w,b
 15108  0114D4  0100               	movlb	0	; () banked
 15109  0114D6  6F79               	movwf	(??_Port_Set+7)& (0+255),b
 15110  0114D8  6B78               	clrf	(??_Port_Set+6)& (0+255),b
 15111  0114DA  0100               	movlb	0	; () banked
 15112  0114DC  5186               	movf	Port_Set@Type& (0+255),w,b
 15113  0114DE  0100               	movlb	0	; () banked
 15114  0114E0  6F7A               	movwf	(??_Port_Set+8)& (0+255),b
 15115  0114E2  6B7B               	clrf	(??_Port_Set+9)& (0+255),b
 15116  0114E4  0E06               	movlw	6
 15117  0114E6                     u9615:
 15118  0114E6  90D8               	bcf	status,0,c
 15119  0114E8  0100               	movlb	0	; () banked
 15120  0114EA  377A               	rlcf	(??_Port_Set+8)& (0+255),f,b
 15121  0114EC  377B               	rlcf	(??_Port_Set+9)& (0+255),f,b
 15122  0114EE  2EE8               	decfsz	wreg,f,c
 15123  0114F0  D7FA               	goto	u9615
 15124  0114F2  0100               	movlb	0	; () banked
 15125  0114F4  5186               	movf	Port_Set@Type& (0+255),w,b
 15126  0114F6  0100               	movlb	0	; () banked
 15127  0114F8  6F7C               	movwf	(??_Port_Set+10)& (0+255),b
 15128  0114FA  6B7D               	clrf	(??_Port_Set+11)& (0+255),b
 15129  0114FC  0100               	movlb	0	; () banked
 15130  0114FE  3B7C               	swapf	(??_Port_Set+10)& (0+255),f,b
 15131  011500  3B7D               	swapf	(??_Port_Set+11)& (0+255),f,b
 15132  011502  0EF0               	movlw	240
 15133  011504  177D               	andwf	(??_Port_Set+11)& (0+255),f,b
 15134  011506  517C               	movf	(??_Port_Set+10)& (0+255),w,b
 15135  011508  0B0F               	andlw	15
 15136  01150A  137D               	iorwf	(??_Port_Set+11)& (0+255),f,b
 15137  01150C  0EF0               	movlw	240
 15138  01150E  177C               	andwf	(??_Port_Set+10)& (0+255),f,b
 15139  011510  0100               	movlb	0	; () banked
 15140  011512  5186               	movf	Port_Set@Type& (0+255),w,b
 15141  011514  0100               	movlb	0	; () banked
 15142  011516  6F7E               	movwf	(??_Port_Set+12)& (0+255),b
 15143  011518  6B7F               	clrf	(??_Port_Set+13)& (0+255),b
 15144  01151A  0100               	movlb	0	; () banked
 15145  01151C  90D8               	bcf	status,0,c
 15146  01151E  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
 15147  011520  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
 15148  011522  0100               	movlb	0	; () banked
 15149  011524  90D8               	bcf	status,0,c
 15150  011526  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
 15151  011528  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
 15152  01152A  0100               	movlb	0	; () banked
 15153  01152C  5186               	movf	Port_Set@Type& (0+255),w,b
 15154  01152E  0100               	movlb	0	; () banked
 15155  011530  6F80               	movwf	(??_Port_Set+14)& (0+255),b
 15156  011532  6B81               	clrf	(??_Port_Set+15)& (0+255),b
 15157  011534  0100               	movlb	0	; () banked
 15158  011536  517E               	movf	(??_Port_Set+12)& (0+255),w,b
 15159  011538  0100               	movlb	0	; () banked
 15160  01153A  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15161  01153C  0100               	movlb	0	; () banked
 15162  01153E  517F               	movf	(??_Port_Set+13)& (0+255),w,b
 15163  011540  0100               	movlb	0	; () banked
 15164  011542  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15165  011544  0100               	movlb	0	; () banked
 15166  011546  517C               	movf	(??_Port_Set+10)& (0+255),w,b
 15167  011548  0100               	movlb	0	; () banked
 15168  01154A  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15169  01154C  0100               	movlb	0	; () banked
 15170  01154E  517D               	movf	(??_Port_Set+11)& (0+255),w,b
 15171  011550  0100               	movlb	0	; () banked
 15172  011552  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15173  011554  0100               	movlb	0	; () banked
 15174  011556  517A               	movf	(??_Port_Set+8)& (0+255),w,b
 15175  011558  0100               	movlb	0	; () banked
 15176  01155A  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15177  01155C  0100               	movlb	0	; () banked
 15178  01155E  517B               	movf	(??_Port_Set+9)& (0+255),w,b
 15179  011560  0100               	movlb	0	; () banked
 15180  011562  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15181  011564  0100               	movlb	0	; () banked
 15182  011566  5178               	movf	(??_Port_Set+6)& (0+255),w,b
 15183  011568  0100               	movlb	0	; () banked
 15184  01156A  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15185  01156C  0100               	movlb	0	; () banked
 15186  01156E  5179               	movf	(??_Port_Set+7)& (0+255),w,b
 15187  011570  0100               	movlb	0	; () banked
 15188  011572  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15189  011574  0100               	movlb	0	; () banked
 15190  011576  5176               	movf	(??_Port_Set+4)& (0+255),w,b
 15191  011578  0100               	movlb	0	; () banked
 15192  01157A  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15193  01157C  0100               	movlb	0	; () banked
 15194  01157E  5177               	movf	(??_Port_Set+5)& (0+255),w,b
 15195  011580  0100               	movlb	0	; () banked
 15196  011582  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15197  011584  0100               	movlb	0	; () banked
 15198  011586  5174               	movf	(??_Port_Set+2)& (0+255),w,b
 15199  011588  0100               	movlb	0	; () banked
 15200  01158A  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15201  01158C  0100               	movlb	0	; () banked
 15202  01158E  5175               	movf	(??_Port_Set+3)& (0+255),w,b
 15203  011590  0100               	movlb	0	; () banked
 15204  011592  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15205  011594  0100               	movlb	0	; () banked
 15206  011596  5172               	movf	??_Port_Set& (0+255),w,b
 15207  011598  0100               	movlb	0	; () banked
 15208  01159A  1180               	iorwf	(??_Port_Set+14)& (0+255),w,b
 15209  01159C  0100               	movlb	0	; () banked
 15210  01159E  6F82               	movwf	Port_Set@TypeRequired& (0+255),b
 15211  0115A0  0100               	movlb	0	; () banked
 15212  0115A2  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 15213  0115A4  0100               	movlb	0	; () banked
 15214  0115A6  1181               	iorwf	(??_Port_Set+15)& (0+255),w,b
 15215  0115A8  0100               	movlb	0	; () banked
 15216  0115AA  6F83               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
 15217                           
 15218                           ; BSR set to: 0
 15219                           ;Port.c: 574: UINT16 TypeActual = Type;
 15220  0115AC  C086  F084         	movff	Port_Set@Type,Port_Set@TypeActual
 15221  0115B0  0100               	movlb	0	; () banked
 15222  0115B2  6B85               	clrf	(Port_Set@TypeActual+1)& (0+255),b
 15223                           
 15224                           ; BSR set to: 0
 15225                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
 15226  0115B4  0E08               	movlw	8
 15227  0115B6  0100               	movlb	0	; () banked
 15228  0115B8  256F               	addwf	Port_Set@pInput& (0+255),w,b
 15229  0115BA  0100               	movlb	0	; () banked
 15230  0115BC  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 15231  0115BE  0E00               	movlw	0
 15232  0115C0  0100               	movlb	0	; () banked
 15233  0115C2  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15234  0115C4  0100               	movlb	0	; () banked
 15235  0115C6  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15236  0115C8  0E01               	movlw	1
 15237  0115CA  0100               	movlb	0	; () banked
 15238  0115CC  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 15239  0115CE  EC70  F0AF         	call	_Word_GetPair	;wreg free
 15240  0115D2  0100               	movlb	0	; () banked
 15241  0115D4  6F72               	movwf	??_Port_Set& (0+255),b
 15242  0115D6  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 15243  0115D8  0100               	movlb	0	; () banked
 15244  0115DA  90D8               	bcf	status,0,c
 15245  0115DC  3772               	rlcf	??_Port_Set& (0+255),f,b
 15246  0115DE  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15247  0115E0  0100               	movlb	0	; () banked
 15248  0115E2  90D8               	bcf	status,0,c
 15249  0115E4  3772               	rlcf	??_Port_Set& (0+255),f,b
 15250  0115E6  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15251  0115E8  0100               	movlb	0	; () banked
 15252  0115EA  5172               	movf	??_Port_Set& (0+255),w,b
 15253  0115EC  0100               	movlb	0	; () banked
 15254  0115EE  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15255  0115F0  0100               	movlb	0	; () banked
 15256  0115F2  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 15257  0115F4  0100               	movlb	0	; () banked
 15258  0115F6  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15259                           
 15260                           ; BSR set to: 0
 15261                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
 15262  0115F8  0E08               	movlw	8
 15263  0115FA  0100               	movlb	0	; () banked
 15264  0115FC  256F               	addwf	Port_Set@pInput& (0+255),w,b
 15265  0115FE  0100               	movlb	0	; () banked
 15266  011600  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 15267  011602  0E00               	movlw	0
 15268  011604  0100               	movlb	0	; () banked
 15269  011606  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15270  011608  0100               	movlb	0	; () banked
 15271  01160A  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15272  01160C  0E02               	movlw	2
 15273  01160E  0100               	movlb	0	; () banked
 15274  011610  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 15275  011612  EC70  F0AF         	call	_Word_GetPair	;wreg free
 15276  011616  0100               	movlb	0	; () banked
 15277  011618  6F72               	movwf	??_Port_Set& (0+255),b
 15278  01161A  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 15279  01161C  0100               	movlb	0	; () banked
 15280  01161E  3B72               	swapf	??_Port_Set& (0+255),f,b
 15281  011620  3B73               	swapf	(??_Port_Set+1)& (0+255),f,b
 15282  011622  0EF0               	movlw	240
 15283  011624  1773               	andwf	(??_Port_Set+1)& (0+255),f,b
 15284  011626  5172               	movf	??_Port_Set& (0+255),w,b
 15285  011628  0B0F               	andlw	15
 15286  01162A  1373               	iorwf	(??_Port_Set+1)& (0+255),f,b
 15287  01162C  0EF0               	movlw	240
 15288  01162E  1772               	andwf	??_Port_Set& (0+255),f,b
 15289  011630  0100               	movlb	0	; () banked
 15290  011632  5172               	movf	??_Port_Set& (0+255),w,b
 15291  011634  0100               	movlb	0	; () banked
 15292  011636  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15293  011638  0100               	movlb	0	; () banked
 15294  01163A  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 15295  01163C  0100               	movlb	0	; () banked
 15296  01163E  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15297                           
 15298                           ; BSR set to: 0
 15299                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
 15300  011640  0E08               	movlw	8
 15301  011642  0100               	movlb	0	; () banked
 15302  011644  256F               	addwf	Port_Set@pInput& (0+255),w,b
 15303  011646  0100               	movlb	0	; () banked
 15304  011648  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 15305  01164A  0E00               	movlw	0
 15306  01164C  0100               	movlb	0	; () banked
 15307  01164E  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15308  011650  0100               	movlb	0	; () banked
 15309  011652  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15310  011654  0E03               	movlw	3
 15311  011656  0100               	movlb	0	; () banked
 15312  011658  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 15313  01165A  EC70  F0AF         	call	_Word_GetPair	;wreg free
 15314  01165E  0100               	movlb	0	; () banked
 15315  011660  6F72               	movwf	??_Port_Set& (0+255),b
 15316  011662  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 15317  011664  0E06               	movlw	6
 15318  011666                     u9625:
 15319  011666  90D8               	bcf	status,0,c
 15320  011668  0100               	movlb	0	; () banked
 15321  01166A  3772               	rlcf	??_Port_Set& (0+255),f,b
 15322  01166C  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15323  01166E  2EE8               	decfsz	wreg,f,c
 15324  011670  D7FA               	goto	u9625
 15325  011672  0100               	movlb	0	; () banked
 15326  011674  5172               	movf	??_Port_Set& (0+255),w,b
 15327  011676  0100               	movlb	0	; () banked
 15328  011678  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15329  01167A  0100               	movlb	0	; () banked
 15330  01167C  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 15331  01167E  0100               	movlb	0	; () banked
 15332  011680  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15333                           
 15334                           ; BSR set to: 0
 15335                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
 15336  011682  0E08               	movlw	8
 15337  011684  0100               	movlb	0	; () banked
 15338  011686  256F               	addwf	Port_Set@pInput& (0+255),w,b
 15339  011688  0100               	movlb	0	; () banked
 15340  01168A  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 15341  01168C  0E00               	movlw	0
 15342  01168E  0100               	movlb	0	; () banked
 15343  011690  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15344  011692  0100               	movlb	0	; () banked
 15345  011694  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15346  011696  0E04               	movlw	4
 15347  011698  0100               	movlb	0	; () banked
 15348  01169A  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 15349  01169C  EC70  F0AF         	call	_Word_GetPair	;wreg free
 15350  0116A0  0100               	movlb	0	; () banked
 15351  0116A2  6F72               	movwf	??_Port_Set& (0+255),b
 15352  0116A4  0100               	movlb	0	; () banked
 15353  0116A6  5172               	movf	??_Port_Set& (0+255),w,b
 15354  0116A8  0100               	movlb	0	; () banked
 15355  0116AA  6F74               	movwf	(??_Port_Set+2)& (0+255),b
 15356  0116AC  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 15357  0116AE  0100               	movlb	0	; () banked
 15358  0116B0  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 15359  0116B2  0100               	movlb	0	; () banked
 15360  0116B4  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15361  0116B6  0100               	movlb	0	; () banked
 15362  0116B8  5174               	movf	(??_Port_Set+2)& (0+255),w,b
 15363  0116BA  0100               	movlb	0	; () banked
 15364  0116BC  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15365                           
 15366                           ; BSR set to: 0
 15367                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
 15368  0116BE  0E08               	movlw	8
 15369  0116C0  0100               	movlb	0	; () banked
 15370  0116C2  256F               	addwf	Port_Set@pInput& (0+255),w,b
 15371  0116C4  0100               	movlb	0	; () banked
 15372  0116C6  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 15373  0116C8  0E00               	movlw	0
 15374  0116CA  0100               	movlb	0	; () banked
 15375  0116CC  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15376  0116CE  0100               	movlb	0	; () banked
 15377  0116D0  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15378  0116D2  0E05               	movlw	5
 15379  0116D4  0100               	movlb	0	; () banked
 15380  0116D6  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 15381  0116D8  EC70  F0AF         	call	_Word_GetPair	;wreg free
 15382  0116DC  0100               	movlb	0	; () banked
 15383  0116DE  6F72               	movwf	??_Port_Set& (0+255),b
 15384  0116E0  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 15385  0116E2  0E0A               	movlw	10
 15386  0116E4                     u9635:
 15387  0116E4  90D8               	bcf	status,0,c
 15388  0116E6  0100               	movlb	0	; () banked
 15389  0116E8  3772               	rlcf	??_Port_Set& (0+255),f,b
 15390  0116EA  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15391  0116EC  2EE8               	decfsz	wreg,f,c
 15392  0116EE  D7FA               	goto	u9635
 15393  0116F0  0100               	movlb	0	; () banked
 15394  0116F2  5172               	movf	??_Port_Set& (0+255),w,b
 15395  0116F4  0100               	movlb	0	; () banked
 15396  0116F6  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15397  0116F8  0100               	movlb	0	; () banked
 15398  0116FA  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 15399  0116FC  0100               	movlb	0	; () banked
 15400  0116FE  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15401                           
 15402                           ; BSR set to: 0
 15403                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
 15404  011700  0E08               	movlw	8
 15405  011702  0100               	movlb	0	; () banked
 15406  011704  256F               	addwf	Port_Set@pInput& (0+255),w,b
 15407  011706  0100               	movlb	0	; () banked
 15408  011708  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 15409  01170A  0E00               	movlw	0
 15410  01170C  0100               	movlb	0	; () banked
 15411  01170E  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15412  011710  0100               	movlb	0	; () banked
 15413  011712  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15414  011714  0E06               	movlw	6
 15415  011716  0100               	movlb	0	; () banked
 15416  011718  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 15417  01171A  EC70  F0AF         	call	_Word_GetPair	;wreg free
 15418  01171E  0100               	movlb	0	; () banked
 15419  011720  6F72               	movwf	??_Port_Set& (0+255),b
 15420  011722  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 15421  011724  0E0C               	movlw	12
 15422  011726                     u9645:
 15423  011726  90D8               	bcf	status,0,c
 15424  011728  0100               	movlb	0	; () banked
 15425  01172A  3772               	rlcf	??_Port_Set& (0+255),f,b
 15426  01172C  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15427  01172E  2EE8               	decfsz	wreg,f,c
 15428  011730  D7FA               	goto	u9645
 15429  011732  0100               	movlb	0	; () banked
 15430  011734  5172               	movf	??_Port_Set& (0+255),w,b
 15431  011736  0100               	movlb	0	; () banked
 15432  011738  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15433  01173A  0100               	movlb	0	; () banked
 15434  01173C  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 15435  01173E  0100               	movlb	0	; () banked
 15436  011740  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15437                           
 15438                           ; BSR set to: 0
 15439                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
 15440  011742  0E08               	movlw	8
 15441  011744  0100               	movlb	0	; () banked
 15442  011746  256F               	addwf	Port_Set@pInput& (0+255),w,b
 15443  011748  0100               	movlb	0	; () banked
 15444  01174A  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 15445  01174C  0E00               	movlw	0
 15446  01174E  0100               	movlb	0	; () banked
 15447  011750  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15448  011752  0100               	movlb	0	; () banked
 15449  011754  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15450  011756  0E07               	movlw	7
 15451  011758  0100               	movlb	0	; () banked
 15452  01175A  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 15453  01175C  EC70  F0AF         	call	_Word_GetPair	;wreg free
 15454  011760  0100               	movlb	0	; () banked
 15455  011762  6F72               	movwf	??_Port_Set& (0+255),b
 15456  011764  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 15457  011766  0E0E               	movlw	14
 15458  011768                     u9655:
 15459  011768  90D8               	bcf	status,0,c
 15460  01176A  0100               	movlb	0	; () banked
 15461  01176C  3772               	rlcf	??_Port_Set& (0+255),f,b
 15462  01176E  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15463  011770  2EE8               	decfsz	wreg,f,c
 15464  011772  D7FA               	goto	u9655
 15465  011774  0100               	movlb	0	; () banked
 15466  011776  5172               	movf	??_Port_Set& (0+255),w,b
 15467  011778  0100               	movlb	0	; () banked
 15468  01177A  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15469  01177C  0100               	movlb	0	; () banked
 15470  01177E  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 15471  011780  0100               	movlb	0	; () banked
 15472  011782  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15473                           
 15474                           ;Port.c: 584: if (TypeRequired == TypeActual)
 15475  011784  0100               	movlb	0	; () banked
 15476  011786  5184               	movf	Port_Set@TypeActual& (0+255),w,b
 15477  011788  0100               	movlb	0	; () banked
 15478  01178A  1982               	xorwf	Port_Set@TypeRequired& (0+255),w,b
 15479  01178C  E148               	bnz	l528
 15480  01178E  0100               	movlb	0	; () banked
 15481  011790  5185               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
 15482  011792  0100               	movlb	0	; () banked
 15483  011794  1983               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
 15484  011796  A4D8               	btfss	status,2,c
 15485  011798  0012               	return	
 15486  01179A  D032               	goto	l526
 15487  01179C                     
 15488                           ; BSR set to: 0
 15489                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
 15490                           
 15491                           ; BSR set to: 0
 15492  01179C  0100               	movlb	0	; () banked
 15493  01179E  EE20 F002          	lfsr	2,2
 15494  0117A2  516F               	movf	Port_Set@pInput& (0+255),w,b
 15495  0117A4  26D9               	addwf	fsr2l,f,c
 15496  0117A6  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
 15497  0117A8  22DA               	addwfc	fsr2h,f,c
 15498  0117AA  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
 15499  0117AE  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
 15500  0117B2  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
 15501  0117B6  ECCF  F0B2         	call	_Byte_SetByte	;wreg free
 15502                           
 15503                           ;Port.c: 594: break;
 15504  0117BA  0012               	return	
 15505  0117BC                     
 15506                           ;Port.c: 597: pValue = ~pValue;
 15507  0117BC  0100               	movlb	0	; () banked
 15508  0117BE  1F71               	comf	Port_Set@pValue& (0+255),f,b
 15509                           
 15510                           ; BSR set to: 0
 15511                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
 15512  0117C0  0100               	movlb	0	; () banked
 15513  0117C2  EE20 F002          	lfsr	2,2
 15514  0117C6  516F               	movf	Port_Set@pInput& (0+255),w,b
 15515  0117C8  26D9               	addwf	fsr2l,f,c
 15516  0117CA  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
 15517  0117CC  22DA               	addwfc	fsr2h,f,c
 15518  0117CE  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
 15519  0117D2  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
 15520  0117D6  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
 15521  0117DA  ECCF  F0B2         	call	_Byte_SetByte	;wreg free
 15522                           
 15523                           ;Port.c: 599: break;
 15524  0117DE  0012               	return	
 15525  0117E0                     
 15526                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
 15527  0117E0  0100               	movlb	0	; () banked
 15528  0117E2  EE20 F004          	lfsr	2,4
 15529  0117E6  516F               	movf	Port_Set@pInput& (0+255),w,b
 15530  0117E8  26D9               	addwf	fsr2l,f,c
 15531  0117EA  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
 15532  0117EC  22DA               	addwfc	fsr2h,f,c
 15533  0117EE  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
 15534  0117F2  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
 15535  0117F6  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
 15536  0117FA  ECCF  F0B2         	call	_Byte_SetByte	;wreg free
 15537                           
 15538                           ;Port.c: 606: }
 15539                           
 15540                           ;Port.c: 605: break;
 15541                           
 15542                           ;Port.c: 604: default:
 15543                           
 15544                           ;Port.c: 603: break;
 15545  0117FE  0012               	return	
 15546  011800                     l526:
 15547  011800  0100               	movlb	0	; () banked
 15548  011802  5186               	movf	Port_Set@Type& (0+255),w,b
 15549                           
 15550                           ; Switch size 1, requested type "space"
 15551                           ; Number of cases is 4, Range of values is 0 to 3
 15552                           ; switch strategies available:
 15553                           ; Name         Instructions Cycles
 15554                           ; simple_byte           13     7 (average)
 15555                           ;	Chosen strategy is simple_byte
 15556  011804  0A00               	xorlw	0	; case 0
 15557  011806  B4D8               	btfsc	status,2,c
 15558  011808  0012               	return	
 15559  01180A  0A01               	xorlw	1	; case 1
 15560  01180C  B4D8               	btfsc	status,2,c
 15561  01180E  D7C6               	goto	l529
 15562  011810  0A03               	xorlw	3	; case 2
 15563  011812  B4D8               	btfsc	status,2,c
 15564  011814  D7D3               	goto	l531
 15565  011816  0A01               	xorlw	1	; case 3
 15566  011818  A4D8               	btfss	status,2,c
 15567                           
 15568                           ; BSR set to: 0
 15569                           
 15570                           ; BSR set to: 0
 15571                           ;Port.c: 607: }
 15572  01181A  0012               	return	
 15573  01181C  D7E1               	goto	l532
 15574  01181E                     l528:
 15575  01181E  0012               	return		;funcret
 15576  011820                     __end_of_Port_Set:
 15577                           	opt stack 0
 15578                           tblptru	equ	0xFF8
 15579                           tblptrh	equ	0xFF7
 15580                           tblptrl	equ	0xFF6
 15581                           tablat	equ	0xFF5
 15582                           prodh	equ	0xFF4
 15583                           prodl	equ	0xFF3
 15584                           intcon	equ	0xFF2
 15585                           postinc0	equ	0xFEE
 15586                           wreg	equ	0xFE8
 15587                           indf1	equ	0xFE7
 15588                           postdec1	equ	0xFE5
 15589                           fsr1h	equ	0xFE2
 15590                           fsr1l	equ	0xFE1
 15591                           indf2	equ	0xFDF
 15592                           postinc2	equ	0xFDE
 15593                           postdec2	equ	0xFDD
 15594                           fsr2h	equ	0xFDA
 15595                           fsr2l	equ	0xFD9
 15596                           status	equ	0xFD8
 15597                           
 15598 ;; *************** function _Byte_SetByte *****************
 15599 ;; Defined at:
 15600 ;;		line 110 in file "Library/Types.c"
 15601 ;; Parameters:    Size  Location     Type
 15602 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 15603 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
 15604 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 15605 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 15606 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 15607 ;;		 -> NULL(0), 
 15608 ;;  pValue          1    2[BANK0 ] unsigned char 
 15609 ;; Auto vars:     Size  Location     Type
 15610 ;;		None
 15611 ;; Return value:  Size  Location     Type
 15612 ;;                  1    wreg      void 
 15613 ;; Registers used:
 15614 ;;		fsr2l, fsr2h
 15615 ;; Tracked objects:
 15616 ;;		On entry : 0/0
 15617 ;;		On exit  : 0/0
 15618 ;;		Unchanged: 0/0
 15619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15620 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15623 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15624 ;;Total ram usage:        3 bytes
 15625 ;; Hardware stack levels used:    1
 15626 ;; Hardware stack levels required when called:    7
 15627 ;; This function calls:
 15628 ;;		Nothing
 15629 ;; This function is called by:
 15630 ;;		_Port_Set
 15631 ;;		_I2C_Init
 15632 ;; This function uses a non-reentrant model
 15633 ;;
 15634                           
 15635                           	psect	text64
 15636  01659E                     __ptext64:
 15637                           	opt stack 0
 15638  01659E                     _Byte_SetByte:
 15639                           	opt stack 19
 15640                           
 15641                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
 15642                           
 15643                           ;incstack = 0
 15644  01659E  C060  FFD9         	movff	Byte_SetByte@pInput,fsr2l
 15645  0165A2  C061  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
 15646  0165A6  C062  FFDF         	movff	Byte_SetByte@pValue,indf2
 15647  0165AA  0012               	return		;funcret
 15648  0165AC                     __end_of_Byte_SetByte:
 15649                           	opt stack 0
 15650                           tblptru	equ	0xFF8
 15651                           tblptrh	equ	0xFF7
 15652                           tblptrl	equ	0xFF6
 15653                           tablat	equ	0xFF5
 15654                           prodh	equ	0xFF4
 15655                           prodl	equ	0xFF3
 15656                           intcon	equ	0xFF2
 15657                           postinc0	equ	0xFEE
 15658                           wreg	equ	0xFE8
 15659                           indf1	equ	0xFE7
 15660                           postdec1	equ	0xFE5
 15661                           fsr1h	equ	0xFE2
 15662                           fsr1l	equ	0xFE1
 15663                           indf2	equ	0xFDF
 15664                           postinc2	equ	0xFDE
 15665                           postdec2	equ	0xFDD
 15666                           fsr2h	equ	0xFDA
 15667                           fsr2l	equ	0xFD9
 15668                           status	equ	0xFD8
 15669                           
 15670 ;; *************** function _GetPortTRIS *****************
 15671 ;; Defined at:
 15672 ;;		line 67 in file "Library/Port.c"
 15673 ;; Parameters:    Size  Location     Type
 15674 ;;  pInput          1    wreg     enum E6786
 15675 ;; Auto vars:     Size  Location     Type
 15676 ;;  pInput          1    2[BANK0 ] enum E6786
 15677 ;; Return value:  Size  Location     Type
 15678 ;;                  2    0[BANK0 ] PTR struct Byte
 15679 ;; Registers used:
 15680 ;;		wreg, status,2, status,0
 15681 ;; Tracked objects:
 15682 ;;		On entry : 0/0
 15683 ;;		On exit  : 0/0
 15684 ;;		Unchanged: 0/0
 15685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15686 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15687 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15689 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15690 ;;Total ram usage:        3 bytes
 15691 ;; Hardware stack levels used:    1
 15692 ;; Hardware stack levels required when called:    7
 15693 ;; This function calls:
 15694 ;;		Nothing
 15695 ;; This function is called by:
 15696 ;;		_Port_Init
 15697 ;; This function uses a non-reentrant model
 15698 ;;
 15699                           
 15700                           	psect	text65
 15701  0147E4                     __ptext65:
 15702                           	opt stack 0
 15703  0147E4                     _GetPortTRIS:
 15704                           	opt stack 20
 15705                           
 15706                           ;incstack = 0
 15707                           ;GetPortTRIS@pInput stored from wreg
 15708  0147E4  0100               	movlb	0	; () banked
 15709  0147E6  6F62               	movwf	GetPortTRIS@pInput& (0+255),b
 15710                           
 15711                           ;Port.c: 69: switch (pInput)
 15712  0147E8  D038               	goto	l363
 15713  0147EA                     
 15714                           ;Port.c: 72: return (BytePtr)&TRISA;
 15715  0147EA  0E92               	movlw	146
 15716  0147EC  0100               	movlb	0	; () banked
 15717  0147EE  6F60               	movwf	?_GetPortTRIS& (0+255),b
 15718  0147F0  0E0F               	movlw	15
 15719  0147F2  0100               	movlb	0	; () banked
 15720  0147F4  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15721                           
 15722                           ; BSR set to: 0
 15723  0147F6  0012               	return	
 15724  0147F8                     
 15725                           ; BSR set to: 0
 15726                           ;Port.c: 74: return (BytePtr)&TRISB;
 15727                           
 15728                           ; BSR set to: 0
 15729  0147F8  0E93               	movlw	147
 15730  0147FA  0100               	movlb	0	; () banked
 15731  0147FC  6F60               	movwf	?_GetPortTRIS& (0+255),b
 15732  0147FE  0E0F               	movlw	15
 15733  014800  0100               	movlb	0	; () banked
 15734  014802  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15735                           
 15736                           ; BSR set to: 0
 15737  014804  0012               	return	
 15738  014806                     
 15739                           ; BSR set to: 0
 15740                           ;Port.c: 76: return (BytePtr)&TRISC;
 15741                           
 15742                           ; BSR set to: 0
 15743  014806  0E94               	movlw	148
 15744  014808  0100               	movlb	0	; () banked
 15745  01480A  6F60               	movwf	?_GetPortTRIS& (0+255),b
 15746  01480C  0E0F               	movlw	15
 15747  01480E  0100               	movlb	0	; () banked
 15748  014810  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15749                           
 15750                           ; BSR set to: 0
 15751  014812  0012               	return	
 15752  014814                     
 15753                           ; BSR set to: 0
 15754                           ;Port.c: 78: return (BytePtr)&TRISD;
 15755                           
 15756                           ; BSR set to: 0
 15757  014814  0E95               	movlw	149
 15758  014816  0100               	movlb	0	; () banked
 15759  014818  6F60               	movwf	?_GetPortTRIS& (0+255),b
 15760  01481A  0E0F               	movlw	15
 15761  01481C  0100               	movlb	0	; () banked
 15762  01481E  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15763                           
 15764                           ; BSR set to: 0
 15765  014820  0012               	return	
 15766  014822                     
 15767                           ; BSR set to: 0
 15768                           ;Port.c: 80: return (BytePtr)&TRISE;
 15769                           
 15770                           ; BSR set to: 0
 15771  014822  0E96               	movlw	150
 15772  014824  0100               	movlb	0	; () banked
 15773  014826  6F60               	movwf	?_GetPortTRIS& (0+255),b
 15774  014828  0E0F               	movlw	15
 15775  01482A  0100               	movlb	0	; () banked
 15776  01482C  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15777                           
 15778                           ; BSR set to: 0
 15779  01482E  0012               	return	
 15780  014830                     
 15781                           ; BSR set to: 0
 15782                           ;Port.c: 82: return (BytePtr)&TRISF;
 15783                           
 15784                           ; BSR set to: 0
 15785  014830  0E97               	movlw	151
 15786  014832  0100               	movlb	0	; () banked
 15787  014834  6F60               	movwf	?_GetPortTRIS& (0+255),b
 15788  014836  0E0F               	movlw	15
 15789  014838  0100               	movlb	0	; () banked
 15790  01483A  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15791                           
 15792                           ; BSR set to: 0
 15793  01483C  0012               	return	
 15794  01483E                     
 15795                           ; BSR set to: 0
 15796                           ;Port.c: 84: return (BytePtr)&TRISG;
 15797                           
 15798                           ; BSR set to: 0
 15799  01483E  0E98               	movlw	152
 15800  014840  0100               	movlb	0	; () banked
 15801  014842  6F60               	movwf	?_GetPortTRIS& (0+255),b
 15802  014844  0E0F               	movlw	15
 15803  014846  0100               	movlb	0	; () banked
 15804  014848  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15805                           
 15806                           ; BSR set to: 0
 15807  01484A  0012               	return	
 15808  01484C                     
 15809                           ; BSR set to: 0
 15810                           ;Port.c: 86: return (void*)0;
 15811                           
 15812                           ; BSR set to: 0
 15813  01484C  0E00               	movlw	0
 15814  01484E  0100               	movlb	0	; () banked
 15815  014850  6F60               	movwf	?_GetPortTRIS& (0+255),b
 15816  014852  0E00               	movlw	0
 15817  014854  0100               	movlb	0	; () banked
 15818  014856  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15819                           
 15820                           ; BSR set to: 0
 15821                           ;Port.c: 87: }
 15822                           
 15823                           ; BSR set to: 0
 15824  014858  0012               	return	
 15825  01485A                     l363:
 15826                           
 15827                           ; BSR set to: 0
 15828  01485A  0100               	movlb	0	; () banked
 15829  01485C  5162               	movf	GetPortTRIS@pInput& (0+255),w,b
 15830                           
 15831                           ; Switch size 1, requested type "space"
 15832                           ; Number of cases is 7, Range of values is 0 to 6
 15833                           ; switch strategies available:
 15834                           ; Name         Instructions Cycles
 15835                           ; simple_byte           22    12 (average)
 15836                           ;	Chosen strategy is simple_byte
 15837  01485E  0A00               	xorlw	0	; case 0
 15838  014860  B4D8               	btfsc	status,2,c
 15839  014862  D7C3               	goto	l364
 15840  014864  0A01               	xorlw	1	; case 1
 15841  014866  B4D8               	btfsc	status,2,c
 15842  014868  D7C7               	goto	l366
 15843  01486A  0A03               	xorlw	3	; case 2
 15844  01486C  B4D8               	btfsc	status,2,c
 15845  01486E  D7CB               	goto	l367
 15846  014870  0A01               	xorlw	1	; case 3
 15847  014872  B4D8               	btfsc	status,2,c
 15848  014874  D7CF               	goto	l368
 15849  014876  0A07               	xorlw	7	; case 4
 15850  014878  B4D8               	btfsc	status,2,c
 15851  01487A  D7D3               	goto	l369
 15852  01487C  0A01               	xorlw	1	; case 5
 15853  01487E  B4D8               	btfsc	status,2,c
 15854  014880  D7D7               	goto	l370
 15855  014882  0A03               	xorlw	3	; case 6
 15856  014884  B4D8               	btfsc	status,2,c
 15857  014886  D7DB               	goto	l371
 15858  014888  D7E1               	goto	l372
 15859  01488A                     __end_of_GetPortTRIS:
 15860                           	opt stack 0
 15861                           tblptru	equ	0xFF8
 15862                           tblptrh	equ	0xFF7
 15863                           tblptrl	equ	0xFF6
 15864                           tablat	equ	0xFF5
 15865                           prodh	equ	0xFF4
 15866                           prodl	equ	0xFF3
 15867                           intcon	equ	0xFF2
 15868                           postinc0	equ	0xFEE
 15869                           wreg	equ	0xFE8
 15870                           indf1	equ	0xFE7
 15871                           postdec1	equ	0xFE5
 15872                           fsr1h	equ	0xFE2
 15873                           fsr1l	equ	0xFE1
 15874                           indf2	equ	0xFDF
 15875                           postinc2	equ	0xFDE
 15876                           postdec2	equ	0xFDD
 15877                           fsr2h	equ	0xFDA
 15878                           fsr2l	equ	0xFD9
 15879                           status	equ	0xFD8
 15880                           
 15881 ;; *************** function _GetPortProperties *****************
 15882 ;; Defined at:
 15883 ;;		line 21 in file "Library/Port.c"
 15884 ;; Parameters:    Size  Location     Type
 15885 ;;  pInput          1    wreg     enum E6786
 15886 ;; Auto vars:     Size  Location     Type
 15887 ;;  pInput          1    2[BANK0 ] enum E6786
 15888 ;; Return value:  Size  Location     Type
 15889 ;;                  2    0[BANK0 ] PTR struct PortProperty
 15890 ;; Registers used:
 15891 ;;		wreg, status,2, status,0
 15892 ;; Tracked objects:
 15893 ;;		On entry : 0/0
 15894 ;;		On exit  : 0/0
 15895 ;;		Unchanged: 0/0
 15896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15897 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15898 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15900 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15901 ;;Total ram usage:        3 bytes
 15902 ;; Hardware stack levels used:    1
 15903 ;; Hardware stack levels required when called:    7
 15904 ;; This function calls:
 15905 ;;		Nothing
 15906 ;; This function is called by:
 15907 ;;		_Port_Init
 15908 ;; This function uses a non-reentrant model
 15909 ;;
 15910                           
 15911                           	psect	text66
 15912  01488A                     __ptext66:
 15913                           	opt stack 0
 15914  01488A                     _GetPortProperties:
 15915                           	opt stack 20
 15916                           
 15917                           ; BSR set to: 0
 15918                           ;incstack = 0
 15919                           ;GetPortProperties@pInput stored from wreg
 15920  01488A  0100               	movlb	0	; () banked
 15921  01488C  6F62               	movwf	GetPortProperties@pInput& (0+255),b
 15922                           
 15923                           ;Port.c: 23: switch (pInput)
 15924  01488E  D038               	goto	l337
 15925  014890                     
 15926                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
 15927  014890  0E71               	movlw	low _PortA_Property
 15928  014892  0100               	movlb	0	; () banked
 15929  014894  6F60               	movwf	?_GetPortProperties& (0+255),b
 15930  014896  0EFF               	movlw	high _PortA_Property
 15931  014898  0100               	movlb	0	; () banked
 15932  01489A  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 15933                           
 15934                           ; BSR set to: 0
 15935  01489C  0012               	return	
 15936  01489E                     
 15937                           ; BSR set to: 0
 15938                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
 15939                           
 15940                           ; BSR set to: 0
 15941  01489E  0E6F               	movlw	low _PortB_Property
 15942  0148A0  0100               	movlb	0	; () banked
 15943  0148A2  6F60               	movwf	?_GetPortProperties& (0+255),b
 15944  0148A4  0EFF               	movlw	high _PortB_Property
 15945  0148A6  0100               	movlb	0	; () banked
 15946  0148A8  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 15947                           
 15948                           ; BSR set to: 0
 15949  0148AA  0012               	return	
 15950  0148AC                     
 15951                           ; BSR set to: 0
 15952                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
 15953                           
 15954                           ; BSR set to: 0
 15955  0148AC  0E6D               	movlw	low _PortC_Property
 15956  0148AE  0100               	movlb	0	; () banked
 15957  0148B0  6F60               	movwf	?_GetPortProperties& (0+255),b
 15958  0148B2  0EFF               	movlw	high _PortC_Property
 15959  0148B4  0100               	movlb	0	; () banked
 15960  0148B6  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 15961                           
 15962                           ; BSR set to: 0
 15963  0148B8  0012               	return	
 15964  0148BA                     
 15965                           ; BSR set to: 0
 15966                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
 15967                           
 15968                           ; BSR set to: 0
 15969  0148BA  0E6B               	movlw	low _PortD_Property
 15970  0148BC  0100               	movlb	0	; () banked
 15971  0148BE  6F60               	movwf	?_GetPortProperties& (0+255),b
 15972  0148C0  0EFF               	movlw	high _PortD_Property
 15973  0148C2  0100               	movlb	0	; () banked
 15974  0148C4  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 15975                           
 15976                           ; BSR set to: 0
 15977  0148C6  0012               	return	
 15978  0148C8                     
 15979                           ; BSR set to: 0
 15980                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
 15981                           
 15982                           ; BSR set to: 0
 15983  0148C8  0E69               	movlw	low _PortE_Property
 15984  0148CA  0100               	movlb	0	; () banked
 15985  0148CC  6F60               	movwf	?_GetPortProperties& (0+255),b
 15986  0148CE  0EFF               	movlw	high _PortE_Property
 15987  0148D0  0100               	movlb	0	; () banked
 15988  0148D2  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 15989                           
 15990                           ; BSR set to: 0
 15991  0148D4  0012               	return	
 15992  0148D6                     
 15993                           ; BSR set to: 0
 15994                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
 15995                           
 15996                           ; BSR set to: 0
 15997  0148D6  0E67               	movlw	low _PortF_Property
 15998  0148D8  0100               	movlb	0	; () banked
 15999  0148DA  6F60               	movwf	?_GetPortProperties& (0+255),b
 16000  0148DC  0EFF               	movlw	high _PortF_Property
 16001  0148DE  0100               	movlb	0	; () banked
 16002  0148E0  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 16003                           
 16004                           ; BSR set to: 0
 16005  0148E2  0012               	return	
 16006  0148E4                     
 16007                           ; BSR set to: 0
 16008                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
 16009                           
 16010                           ; BSR set to: 0
 16011  0148E4  0E65               	movlw	low _PortG_Property
 16012  0148E6  0100               	movlb	0	; () banked
 16013  0148E8  6F60               	movwf	?_GetPortProperties& (0+255),b
 16014  0148EA  0EFF               	movlw	high _PortG_Property
 16015  0148EC  0100               	movlb	0	; () banked
 16016  0148EE  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 16017                           
 16018                           ; BSR set to: 0
 16019  0148F0  0012               	return	
 16020  0148F2                     
 16021                           ; BSR set to: 0
 16022                           ;Port.c: 40: return (void*)0;
 16023                           
 16024                           ; BSR set to: 0
 16025  0148F2  0E00               	movlw	0
 16026  0148F4  0100               	movlb	0	; () banked
 16027  0148F6  6F60               	movwf	?_GetPortProperties& (0+255),b
 16028  0148F8  0E00               	movlw	0
 16029  0148FA  0100               	movlb	0	; () banked
 16030  0148FC  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 16031                           
 16032                           ; BSR set to: 0
 16033                           ;Port.c: 41: }
 16034                           
 16035                           ; BSR set to: 0
 16036  0148FE  0012               	return	
 16037  014900                     l337:
 16038                           
 16039                           ; BSR set to: 0
 16040  014900  0100               	movlb	0	; () banked
 16041  014902  5162               	movf	GetPortProperties@pInput& (0+255),w,b
 16042                           
 16043                           ; Switch size 1, requested type "space"
 16044                           ; Number of cases is 7, Range of values is 0 to 6
 16045                           ; switch strategies available:
 16046                           ; Name         Instructions Cycles
 16047                           ; simple_byte           22    12 (average)
 16048                           ;	Chosen strategy is simple_byte
 16049  014904  0A00               	xorlw	0	; case 0
 16050  014906  B4D8               	btfsc	status,2,c
 16051  014908  D7C3               	goto	l338
 16052  01490A  0A01               	xorlw	1	; case 1
 16053  01490C  B4D8               	btfsc	status,2,c
 16054  01490E  D7C7               	goto	l340
 16055  014910  0A03               	xorlw	3	; case 2
 16056  014912  B4D8               	btfsc	status,2,c
 16057  014914  D7CB               	goto	l341
 16058  014916  0A01               	xorlw	1	; case 3
 16059  014918  B4D8               	btfsc	status,2,c
 16060  01491A  D7CF               	goto	l342
 16061  01491C  0A07               	xorlw	7	; case 4
 16062  01491E  B4D8               	btfsc	status,2,c
 16063  014920  D7D3               	goto	l343
 16064  014922  0A01               	xorlw	1	; case 5
 16065  014924  B4D8               	btfsc	status,2,c
 16066  014926  D7D7               	goto	l344
 16067  014928  0A03               	xorlw	3	; case 6
 16068  01492A  B4D8               	btfsc	status,2,c
 16069  01492C  D7DB               	goto	l345
 16070  01492E  D7E1               	goto	l346
 16071  014930                     __end_of_GetPortProperties:
 16072                           	opt stack 0
 16073                           tblptru	equ	0xFF8
 16074                           tblptrh	equ	0xFF7
 16075                           tblptrl	equ	0xFF6
 16076                           tablat	equ	0xFF5
 16077                           prodh	equ	0xFF4
 16078                           prodl	equ	0xFF3
 16079                           intcon	equ	0xFF2
 16080                           postinc0	equ	0xFEE
 16081                           wreg	equ	0xFE8
 16082                           indf1	equ	0xFE7
 16083                           postdec1	equ	0xFE5
 16084                           fsr1h	equ	0xFE2
 16085                           fsr1l	equ	0xFE1
 16086                           indf2	equ	0xFDF
 16087                           postinc2	equ	0xFDE
 16088                           postdec2	equ	0xFDD
 16089                           fsr2h	equ	0xFDA
 16090                           fsr2l	equ	0xFD9
 16091                           status	equ	0xFD8
 16092                           
 16093 ;; *************** function _GetPortPORT *****************
 16094 ;; Defined at:
 16095 ;;		line 44 in file "Library/Port.c"
 16096 ;; Parameters:    Size  Location     Type
 16097 ;;  pInput          1    wreg     enum E6786
 16098 ;; Auto vars:     Size  Location     Type
 16099 ;;  pInput          1    2[BANK0 ] enum E6786
 16100 ;; Return value:  Size  Location     Type
 16101 ;;                  2    0[BANK0 ] PTR struct Byte
 16102 ;; Registers used:
 16103 ;;		wreg, status,2, status,0
 16104 ;; Tracked objects:
 16105 ;;		On entry : 0/0
 16106 ;;		On exit  : 0/0
 16107 ;;		Unchanged: 0/0
 16108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16109 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16110 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16112 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16113 ;;Total ram usage:        3 bytes
 16114 ;; Hardware stack levels used:    1
 16115 ;; Hardware stack levels required when called:    7
 16116 ;; This function calls:
 16117 ;;		Nothing
 16118 ;; This function is called by:
 16119 ;;		_Port_Init
 16120 ;; This function uses a non-reentrant model
 16121 ;;
 16122                           
 16123                           	psect	text67
 16124  014930                     __ptext67:
 16125                           	opt stack 0
 16126  014930                     _GetPortPORT:
 16127                           	opt stack 20
 16128                           
 16129                           ; BSR set to: 0
 16130                           ;incstack = 0
 16131                           ;GetPortPORT@pInput stored from wreg
 16132  014930  0100               	movlb	0	; () banked
 16133  014932  6F62               	movwf	GetPortPORT@pInput& (0+255),b
 16134                           
 16135                           ;Port.c: 46: switch (pInput)
 16136  014934  D038               	goto	l350
 16137  014936                     
 16138                           ;Port.c: 49: return (BytePtr)&PORTA;
 16139  014936  0E80               	movlw	128
 16140  014938  0100               	movlb	0	; () banked
 16141  01493A  6F60               	movwf	?_GetPortPORT& (0+255),b
 16142  01493C  0E0F               	movlw	15
 16143  01493E  0100               	movlb	0	; () banked
 16144  014940  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 16145                           
 16146                           ; BSR set to: 0
 16147  014942  0012               	return	
 16148  014944                     
 16149                           ; BSR set to: 0
 16150                           ;Port.c: 51: return (BytePtr)&PORTB;
 16151                           
 16152                           ; BSR set to: 0
 16153  014944  0E81               	movlw	129
 16154  014946  0100               	movlb	0	; () banked
 16155  014948  6F60               	movwf	?_GetPortPORT& (0+255),b
 16156  01494A  0E0F               	movlw	15
 16157  01494C  0100               	movlb	0	; () banked
 16158  01494E  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 16159                           
 16160                           ; BSR set to: 0
 16161  014950  0012               	return	
 16162  014952                     
 16163                           ; BSR set to: 0
 16164                           ;Port.c: 53: return (BytePtr)&PORTC;
 16165                           
 16166                           ; BSR set to: 0
 16167  014952  0E82               	movlw	130
 16168  014954  0100               	movlb	0	; () banked
 16169  014956  6F60               	movwf	?_GetPortPORT& (0+255),b
 16170  014958  0E0F               	movlw	15
 16171  01495A  0100               	movlb	0	; () banked
 16172  01495C  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 16173                           
 16174                           ; BSR set to: 0
 16175  01495E  0012               	return	
 16176  014960                     
 16177                           ; BSR set to: 0
 16178                           ;Port.c: 55: return (BytePtr)&PORTD;
 16179                           
 16180                           ; BSR set to: 0
 16181  014960  0E83               	movlw	131
 16182  014962  0100               	movlb	0	; () banked
 16183  014964  6F60               	movwf	?_GetPortPORT& (0+255),b
 16184  014966  0E0F               	movlw	15
 16185  014968  0100               	movlb	0	; () banked
 16186  01496A  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 16187                           
 16188                           ; BSR set to: 0
 16189  01496C  0012               	return	
 16190  01496E                     
 16191                           ; BSR set to: 0
 16192                           ;Port.c: 57: return (BytePtr)&PORTE;
 16193                           
 16194                           ; BSR set to: 0
 16195  01496E  0E84               	movlw	132
 16196  014970  0100               	movlb	0	; () banked
 16197  014972  6F60               	movwf	?_GetPortPORT& (0+255),b
 16198  014974  0E0F               	movlw	15
 16199  014976  0100               	movlb	0	; () banked
 16200  014978  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 16201                           
 16202                           ; BSR set to: 0
 16203  01497A  0012               	return	
 16204  01497C                     
 16205                           ; BSR set to: 0
 16206                           ;Port.c: 59: return (BytePtr)&PORTF;
 16207                           
 16208                           ; BSR set to: 0
 16209  01497C  0E85               	movlw	133
 16210  01497E  0100               	movlb	0	; () banked
 16211  014980  6F60               	movwf	?_GetPortPORT& (0+255),b
 16212  014982  0E0F               	movlw	15
 16213  014984  0100               	movlb	0	; () banked
 16214  014986  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 16215                           
 16216                           ; BSR set to: 0
 16217  014988  0012               	return	
 16218  01498A                     
 16219                           ; BSR set to: 0
 16220                           ;Port.c: 61: return (BytePtr)&PORTG;
 16221                           
 16222                           ; BSR set to: 0
 16223  01498A  0E86               	movlw	134
 16224  01498C  0100               	movlb	0	; () banked
 16225  01498E  6F60               	movwf	?_GetPortPORT& (0+255),b
 16226  014990  0E0F               	movlw	15
 16227  014992  0100               	movlb	0	; () banked
 16228  014994  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 16229                           
 16230                           ; BSR set to: 0
 16231  014996  0012               	return	
 16232  014998                     
 16233                           ; BSR set to: 0
 16234                           ;Port.c: 63: return (void*)0;
 16235                           
 16236                           ; BSR set to: 0
 16237  014998  0E00               	movlw	0
 16238  01499A  0100               	movlb	0	; () banked
 16239  01499C  6F60               	movwf	?_GetPortPORT& (0+255),b
 16240  01499E  0E00               	movlw	0
 16241  0149A0  0100               	movlb	0	; () banked
 16242  0149A2  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 16243                           
 16244                           ; BSR set to: 0
 16245                           ;Port.c: 64: }
 16246                           
 16247                           ; BSR set to: 0
 16248  0149A4  0012               	return	
 16249  0149A6                     l350:
 16250                           
 16251                           ; BSR set to: 0
 16252  0149A6  0100               	movlb	0	; () banked
 16253  0149A8  5162               	movf	GetPortPORT@pInput& (0+255),w,b
 16254                           
 16255                           ; Switch size 1, requested type "space"
 16256                           ; Number of cases is 7, Range of values is 0 to 6
 16257                           ; switch strategies available:
 16258                           ; Name         Instructions Cycles
 16259                           ; simple_byte           22    12 (average)
 16260                           ;	Chosen strategy is simple_byte
 16261  0149AA  0A00               	xorlw	0	; case 0
 16262  0149AC  B4D8               	btfsc	status,2,c
 16263  0149AE  D7C3               	goto	l351
 16264  0149B0  0A01               	xorlw	1	; case 1
 16265  0149B2  B4D8               	btfsc	status,2,c
 16266  0149B4  D7C7               	goto	l353
 16267  0149B6  0A03               	xorlw	3	; case 2
 16268  0149B8  B4D8               	btfsc	status,2,c
 16269  0149BA  D7CB               	goto	l354
 16270  0149BC  0A01               	xorlw	1	; case 3
 16271  0149BE  B4D8               	btfsc	status,2,c
 16272  0149C0  D7CF               	goto	l355
 16273  0149C2  0A07               	xorlw	7	; case 4
 16274  0149C4  B4D8               	btfsc	status,2,c
 16275  0149C6  D7D3               	goto	l356
 16276  0149C8  0A01               	xorlw	1	; case 5
 16277  0149CA  B4D8               	btfsc	status,2,c
 16278  0149CC  D7D7               	goto	l357
 16279  0149CE  0A03               	xorlw	3	; case 6
 16280  0149D0  B4D8               	btfsc	status,2,c
 16281  0149D2  D7DB               	goto	l358
 16282  0149D4  D7E1               	goto	l359
 16283  0149D6                     __end_of_GetPortPORT:
 16284                           	opt stack 0
 16285                           tblptru	equ	0xFF8
 16286                           tblptrh	equ	0xFF7
 16287                           tblptrl	equ	0xFF6
 16288                           tablat	equ	0xFF5
 16289                           prodh	equ	0xFF4
 16290                           prodl	equ	0xFF3
 16291                           intcon	equ	0xFF2
 16292                           postinc0	equ	0xFEE
 16293                           wreg	equ	0xFE8
 16294                           indf1	equ	0xFE7
 16295                           postdec1	equ	0xFE5
 16296                           fsr1h	equ	0xFE2
 16297                           fsr1l	equ	0xFE1
 16298                           indf2	equ	0xFDF
 16299                           postinc2	equ	0xFDE
 16300                           postdec2	equ	0xFDD
 16301                           fsr2h	equ	0xFDA
 16302                           fsr2l	equ	0xFD9
 16303                           status	equ	0xFD8
 16304                           
 16305 ;; *************** function _LED_Init *****************
 16306 ;; Defined at:
 16307 ;;		line 15 in file "Library/LED.c"
 16308 ;; Parameters:    Size  Location     Type
 16309 ;;  pLED            1    wreg     enum E6739
 16310 ;; Auto vars:     Size  Location     Type
 16311 ;;  pLED            1   45[BANK0 ] enum E6739
 16312 ;; Return value:  Size  Location     Type
 16313 ;;                  1    wreg      void 
 16314 ;; Registers used:
 16315 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16316 ;; Tracked objects:
 16317 ;;		On entry : 0/0
 16318 ;;		On exit  : 0/0
 16319 ;;		Unchanged: 0/0
 16320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16322 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16324 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16325 ;;Total ram usage:        1 bytes
 16326 ;; Hardware stack levels used:    1
 16327 ;; Hardware stack levels required when called:   12
 16328 ;; This function calls:
 16329 ;;		_LED_Set
 16330 ;;		_Port_SetPinType
 16331 ;; This function is called by:
 16332 ;;		_MXK_Init
 16333 ;; This function uses a non-reentrant model
 16334 ;;
 16335                           
 16336                           	psect	text68
 16337  01577E                     __ptext68:
 16338                           	opt stack 0
 16339  01577E                     _LED_Init:
 16340                           	opt stack 16
 16341                           
 16342                           ; BSR set to: 0
 16343                           ;incstack = 0
 16344                           ;LED_Init@pLED stored from wreg
 16345  01577E  0100               	movlb	0	; () banked
 16346  015780  6F8D               	movwf	LED_Init@pLED& (0+255),b
 16347                           
 16348                           ;LED.c: 17: switch (pLED)
 16349  015782  D01E               	goto	l220
 16350  015784                     
 16351                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
 16352  015784  0EEA               	movlw	low _PortC
 16353  015786  0100               	movlb	0	; () banked
 16354  015788  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 16355  01578A  0E00               	movlw	high _PortC
 16356  01578C  0100               	movlb	0	; () banked
 16357  01578E  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16358  015790  0E00               	movlw	0
 16359  015792  0100               	movlb	0	; () banked
 16360  015794  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 16361  015796  0E03               	movlw	3
 16362  015798  0100               	movlb	0	; () banked
 16363  01579A  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 16364  01579C  EC5F  F093         	call	_Port_SetPinType	;wreg free
 16365                           
 16366                           ;LED.c: 21: break;
 16367  0157A0  D017               	goto	l222
 16368  0157A2                     
 16369                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
 16370  0157A2  0EEA               	movlw	low _PortC
 16371  0157A4  0100               	movlb	0	; () banked
 16372  0157A6  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 16373  0157A8  0E00               	movlw	high _PortC
 16374  0157AA  0100               	movlb	0	; () banked
 16375  0157AC  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16376  0157AE  0E01               	movlw	1
 16377  0157B0  0100               	movlb	0	; () banked
 16378  0157B2  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 16379  0157B4  0E03               	movlw	3
 16380  0157B6  0100               	movlb	0	; () banked
 16381  0157B8  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 16382  0157BA  EC5F  F093         	call	_Port_SetPinType	;wreg free
 16383                           
 16384                           ;LED.c: 25: }
 16385                           
 16386                           ;LED.c: 24: break;
 16387  0157BE  D008               	goto	l222
 16388  0157C0                     l220:
 16389  0157C0  0100               	movlb	0	; () banked
 16390  0157C2  518D               	movf	LED_Init@pLED& (0+255),w,b
 16391                           
 16392                           ; Switch size 1, requested type "space"
 16393                           ; Number of cases is 2, Range of values is 0 to 1
 16394                           ; switch strategies available:
 16395                           ; Name         Instructions Cycles
 16396                           ; simple_byte            7     4 (average)
 16397                           ;	Chosen strategy is simple_byte
 16398  0157C4  0A00               	xorlw	0	; case 0
 16399  0157C6  B4D8               	btfsc	status,2,c
 16400  0157C8  D7DD               	goto	l221
 16401  0157CA  0A01               	xorlw	1	; case 1
 16402  0157CC  B4D8               	btfsc	status,2,c
 16403  0157CE  D7E9               	goto	l223
 16404  0157D0                     l222:
 16405                           
 16406                           ;LED.c: 26: LED_Set(pLED, 0);
 16407                           
 16408                           ; BSR set to: 0
 16409  0157D0  0E00               	movlw	0
 16410  0157D2  0100               	movlb	0	; () banked
 16411  0157D4  6F74               	movwf	LED_Set@pValue& (0+255),b
 16412  0157D6  0100               	movlb	0	; () banked
 16413  0157D8  518D               	movf	LED_Init@pLED& (0+255),w,b
 16414  0157DA  ECFD  F0AC         	call	_LED_Set
 16415  0157DE  0012               	return		;funcret
 16416  0157E0                     __end_of_LED_Init:
 16417                           	opt stack 0
 16418                           tblptru	equ	0xFF8
 16419                           tblptrh	equ	0xFF7
 16420                           tblptrl	equ	0xFF6
 16421                           tablat	equ	0xFF5
 16422                           prodh	equ	0xFF4
 16423                           prodl	equ	0xFF3
 16424                           intcon	equ	0xFF2
 16425                           postinc0	equ	0xFEE
 16426                           wreg	equ	0xFE8
 16427                           indf1	equ	0xFE7
 16428                           postdec1	equ	0xFE5
 16429                           fsr1h	equ	0xFE2
 16430                           fsr1l	equ	0xFE1
 16431                           indf2	equ	0xFDF
 16432                           postinc2	equ	0xFDE
 16433                           postdec2	equ	0xFDD
 16434                           fsr2h	equ	0xFDA
 16435                           fsr2l	equ	0xFD9
 16436                           status	equ	0xFD8
 16437                           
 16438 ;; *************** function _LED_Set *****************
 16439 ;; Defined at:
 16440 ;;		line 33 in file "Library/LED.c"
 16441 ;; Parameters:    Size  Location     Type
 16442 ;;  pLED            1    wreg     enum E6739
 16443 ;;  pValue          1   20[BANK0 ] unsigned char 
 16444 ;; Auto vars:     Size  Location     Type
 16445 ;;  pLED            1   21[BANK0 ] enum E6739
 16446 ;; Return value:  Size  Location     Type
 16447 ;;                  1    wreg      void 
 16448 ;; Registers used:
 16449 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16450 ;; Tracked objects:
 16451 ;;		On entry : 0/0
 16452 ;;		On exit  : 0/0
 16453 ;;		Unchanged: 0/0
 16454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16455 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16456 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16458 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16459 ;;Total ram usage:        2 bytes
 16460 ;; Hardware stack levels used:    1
 16461 ;; Hardware stack levels required when called:   11
 16462 ;; This function calls:
 16463 ;;		_Port_SetPin
 16464 ;; This function is called by:
 16465 ;;		_LED_Init
 16466 ;;		_SYSTEM_Initialize
 16467 ;; This function uses a non-reentrant model
 16468 ;;
 16469                           
 16470                           	psect	text69
 16471  0159FA                     __ptext69:
 16472                           	opt stack 0
 16473  0159FA                     _LED_Set:
 16474                           	opt stack 16
 16475                           
 16476                           ;incstack = 0
 16477                           ;LED_Set@pLED stored from wreg
 16478  0159FA  0100               	movlb	0	; () banked
 16479  0159FC  6F75               	movwf	LED_Set@pLED& (0+255),b
 16480                           
 16481                           ;LED.c: 35: switch (pLED)
 16482  0159FE  D01C               	goto	l227
 16483  015A00                     
 16484                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
 16485  015A00  0EEA               	movlw	low _PortC
 16486  015A02  0100               	movlb	0	; () banked
 16487  015A04  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 16488  015A06  0E00               	movlw	high _PortC
 16489  015A08  0100               	movlb	0	; () banked
 16490  015A0A  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16491  015A0C  0E00               	movlw	0
 16492  015A0E  0100               	movlb	0	; () banked
 16493  015A10  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 16494  015A12  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
 16495  015A16  EC59  F09F         	call	_Port_SetPin	;wreg free
 16496                           
 16497                           ;LED.c: 39: break;
 16498  015A1A  0012               	return	
 16499  015A1C                     
 16500                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
 16501  015A1C  0EEA               	movlw	low _PortC
 16502  015A1E  0100               	movlb	0	; () banked
 16503  015A20  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 16504  015A22  0E00               	movlw	high _PortC
 16505  015A24  0100               	movlb	0	; () banked
 16506  015A26  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16507  015A28  0E01               	movlw	1
 16508  015A2A  0100               	movlb	0	; () banked
 16509  015A2C  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 16510  015A2E  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
 16511  015A32  EC59  F09F         	call	_Port_SetPin	;wreg free
 16512                           
 16513                           ;LED.c: 43: }
 16514                           
 16515                           ;LED.c: 42: break;
 16516  015A36  0012               	return	
 16517  015A38                     l227:
 16518  015A38  0100               	movlb	0	; () banked
 16519  015A3A  5175               	movf	LED_Set@pLED& (0+255),w,b
 16520                           
 16521                           ; Switch size 1, requested type "space"
 16522                           ; Number of cases is 2, Range of values is 0 to 1
 16523                           ; switch strategies available:
 16524                           ; Name         Instructions Cycles
 16525                           ; simple_byte            7     4 (average)
 16526                           ;	Chosen strategy is simple_byte
 16527  015A3C  0A00               	xorlw	0	; case 0
 16528  015A3E  B4D8               	btfsc	status,2,c
 16529  015A40  D7DF               	goto	l228
 16530  015A42  0A01               	xorlw	1	; case 1
 16531  015A44  A4D8               	btfss	status,2,c
 16532  015A46  0012               	return	
 16533  015A48  D7E9               	goto	l230
 16534  015A4A                     __end_of_LED_Set:
 16535                           	opt stack 0
 16536                           tblptru	equ	0xFF8
 16537                           tblptrh	equ	0xFF7
 16538                           tblptrl	equ	0xFF6
 16539                           tablat	equ	0xFF5
 16540                           prodh	equ	0xFF4
 16541                           prodl	equ	0xFF3
 16542                           intcon	equ	0xFF2
 16543                           postinc0	equ	0xFEE
 16544                           wreg	equ	0xFE8
 16545                           indf1	equ	0xFE7
 16546                           postdec1	equ	0xFE5
 16547                           fsr1h	equ	0xFE2
 16548                           fsr1l	equ	0xFE1
 16549                           indf2	equ	0xFDF
 16550                           postinc2	equ	0xFDE
 16551                           postdec2	equ	0xFDD
 16552                           fsr2h	equ	0xFDA
 16553                           fsr2l	equ	0xFD9
 16554                           status	equ	0xFD8
 16555                           
 16556 ;; *************** function _MXK_Dequeue *****************
 16557 ;; Defined at:
 16558 ;;		line 153 in file "Library/MXK.c"
 16559 ;; Parameters:    Size  Location     Type
 16560 ;;		None
 16561 ;; Auto vars:     Size  Location     Type
 16562 ;;		None
 16563 ;; Return value:  Size  Location     Type
 16564 ;;                  1    wreg      void 
 16565 ;; Registers used:
 16566 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16567 ;; Tracked objects:
 16568 ;;		On entry : 0/0
 16569 ;;		On exit  : 0/0
 16570 ;;		Unchanged: 0/0
 16571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16575 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16576 ;;Total ram usage:        0 bytes
 16577 ;; Hardware stack levels used:    1
 16578 ;; Hardware stack levels required when called:   12
 16579 ;; This function calls:
 16580 ;;		Absolute function
 16581 ;;		_Motor_Step
 16582 ;; This function is called by:
 16583 ;;		_init
 16584 ;;		_mode1
 16585 ;;		_mode2
 16586 ;;		_mode4
 16587 ;;		_main
 16588 ;; This function uses a non-reentrant model
 16589 ;;
 16590                           
 16591                           	psect	text70
 16592  015E64                     __ptext70:
 16593                           	opt stack 0
 16594  015E64                     _MXK_Dequeue:
 16595                           	opt stack 17
 16596                           
 16597                           ;MXK.c: 155: if (lQueue)
 16598                           
 16599                           ;incstack = 0
 16600  015E64  0100               	movlb	0	; () banked
 16601  015E66  51BC               	movf	_lQueue& (0+255),w,b	;volatile
 16602  015E68  0100               	movlb	0	; () banked
 16603  015E6A  11BD               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 16604  015E6C  0100               	movlb	0	; () banked
 16605  015E6E  11BE               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 16606  015E70  B4D8               	btfsc	status,2,c
 16607  015E72  D00D               	goto	u13529
 16608                           
 16609                           ; BSR set to: 0
 16610                           ;MXK.c: 156: lQueue();
 16611  015E74  D801               	call	u13528
 16612  015E76  D00B               	goto	u13529
 16613  015E78                     u13528:
 16614  015E78  0005               	push	
 16615  015E7A  6EFA               	movwf	pclath,c
 16616  015E7C  0100               	movlb	0	; () banked
 16617  015E7E  51BC               	movf	_lQueue& (0+255),w,b	;volatile
 16618  015E80  6EFD               	movwf	tosl,c
 16619  015E82  51BD               	movf	(_lQueue+1)& (0+255),w,b	;volatile
 16620  015E84  6EFE               	movwf	tosh,c
 16621  015E86  51BE               	movf	(_lQueue+2)& (0+255),w,b	;volatile
 16622  015E88  6EFF               	movwf	tosu,c
 16623  015E8A  50FA               	movf	pclath,w,c
 16624  015E8C  0012               	return		;indir
 16625  015E8E                     u13529:
 16626                           
 16627                           ;MXK.c: 157: lQueue = 0;
 16628  015E8E  0E00               	movlw	0
 16629  015E90  0100               	movlb	0	; () banked
 16630  015E92  6FBC               	movwf	_lQueue& (0+255),b	;volatile
 16631  015E94  0E00               	movlw	0
 16632  015E96  0100               	movlb	0	; () banked
 16633  015E98  6FBD               	movwf	(_lQueue+1)& (0+255),b	;volatile
 16634  015E9A  0E00               	movlw	0
 16635  015E9C  0100               	movlb	0	; () banked
 16636  015E9E  6FBE               	movwf	(_lQueue+2)& (0+255),b	;volatile
 16637                           
 16638                           ; BSR set to: 0
 16639  015EA0  0012               	return		;funcret
 16640  015EA2                     __end_of_MXK_Dequeue:
 16641                           	opt stack 0
 16642                           tosu	equ	0xFFF
 16643                           tosh	equ	0xFFE
 16644                           tosl	equ	0xFFD
 16645                           pclath	equ	0xFFA
 16646                           tblptru	equ	0xFF8
 16647                           tblptrh	equ	0xFF7
 16648                           tblptrl	equ	0xFF6
 16649                           tablat	equ	0xFF5
 16650                           prodh	equ	0xFF4
 16651                           prodl	equ	0xFF3
 16652                           intcon	equ	0xFF2
 16653                           postinc0	equ	0xFEE
 16654                           wreg	equ	0xFE8
 16655                           indf1	equ	0xFE7
 16656                           postdec1	equ	0xFE5
 16657                           fsr1h	equ	0xFE2
 16658                           fsr1l	equ	0xFE1
 16659                           indf2	equ	0xFDF
 16660                           postinc2	equ	0xFDE
 16661                           postdec2	equ	0xFDD
 16662                           fsr2h	equ	0xFDA
 16663                           fsr2l	equ	0xFD9
 16664                           status	equ	0xFD8
 16665                           
 16666 ;; *************** function _Motor_Step *****************
 16667 ;; Defined at:
 16668 ;;		line 75 in file "Library/Motor.c"
 16669 ;; Parameters:    Size  Location     Type
 16670 ;;		None
 16671 ;; Auto vars:     Size  Location     Type
 16672 ;;		None
 16673 ;; Return value:  Size  Location     Type
 16674 ;;                  1    wreg      void 
 16675 ;; Registers used:
 16676 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16677 ;; Tracked objects:
 16678 ;;		On entry : 0/0
 16679 ;;		On exit  : 0/0
 16680 ;;		Unchanged: 0/0
 16681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16684 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16685 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16686 ;;Total ram usage:        2 bytes
 16687 ;; Hardware stack levels used:    1
 16688 ;; Hardware stack levels required when called:   11
 16689 ;; This function calls:
 16690 ;;		_MXK_Queue
 16691 ;;		_MXK_Release
 16692 ;;		_MXK_SwitchTo
 16693 ;;		_Port_SetPin
 16694 ;;		_Timer0_Restart
 16695 ;;		_Timer0_Stop
 16696 ;; This function is called by:
 16697 ;;		_Motor_Init
 16698 ;;		_MXK_Dequeue
 16699 ;;		_Timer0_ISR
 16700 ;; This function uses a non-reentrant model
 16701 ;;
 16702                           
 16703                           	psect	text71
 16704  013586                     __ptext71:
 16705                           	opt stack 0
 16706  013586                     _Motor_Step:
 16707                           	opt stack 0
 16708                           
 16709                           ; BSR set to: 0
 16710                           ;Skip over the trampoline to the duplicate function for level 2
 16711  013586  B251               	btfsc	btemp,1,c
 16712  013588  EFDC  F09B         	goto	i2_Motor_Step
 16713  01358C                     _Motor_Step$intlevel0:
 16714                           	opt stack 17
 16715                           
 16716                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 16717                           
 16718                           ;incstack = 0
 16719  01358C  0100               	movlb	0	; () banked
 16720  01358E  EE20 F004          	lfsr	2,4
 16721  013592  51D8               	movf	_lMotor& (0+255),w,b
 16722  013594  26D9               	addwf	fsr2l,f,c
 16723  013596  51D9               	movf	(_lMotor+1)& (0+255),w,b
 16724  013598  22DA               	addwfc	fsr2h,f,c
 16725  01359A  50DF               	movf	indf2,w,c
 16726  01359C  ECB2  F0AE         	call	_MXK_SwitchTo
 16727  0135A0  0900               	iorlw	0
 16728  0135A2  B4D8               	btfsc	status,2,c
 16729  0135A4  D07A               	goto	l1627
 16730                           
 16731                           ;Motor.c: 78: {
 16732                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 16733  0135A6  C0D8  FFD9         	movff	_lMotor,fsr2l
 16734  0135AA  C0D9  FFDA         	movff	_lMotor+1,fsr2h
 16735  0135AE  50DE               	movf	postinc2,w,c
 16736  0135B0  10DE               	iorwf	postinc2,w,c
 16737  0135B2  B4D8               	btfsc	status,2,c
 16738  0135B4  D06D               	goto	l1628
 16739                           
 16740                           ;Motor.c: 80: {
 16741                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 16742  0135B6  C0D8  FFD9         	movff	_lMotor,fsr2l
 16743  0135BA  C0D9  FFDA         	movff	_lMotor+1,fsr2h
 16744  0135BE  0E01               	movlw	1
 16745  0135C0  BEDB               	btfsc	plusw2,7,c
 16746  0135C2  D026               	goto	l1629
 16747  0135C4  0E01               	movlw	1
 16748  0135C6  50DB               	movf	plusw2,w,c
 16749  0135C8  E103               	bnz	u10210
 16750  0135CA  04DE               	decf	postinc2,w,c
 16751  0135CC  A0D8               	btfss	status,0,c
 16752  0135CE  D020               	goto	l1629
 16753  0135D0                     u10210:
 16754                           
 16755                           ;Motor.c: 83: {
 16756                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 16757  0135D0  C0D8  FFD9         	movff	_lMotor,fsr2l
 16758  0135D4  C0D9  FFDA         	movff	_lMotor+1,fsr2h
 16759  0135D8  28DE               	incf	postinc2,w,c
 16760  0135DA  E104               	bnz	u10220
 16761  0135DC  0E7F               	movlw	127
 16762  0135DE  18DE               	xorwf	postinc2,w,c
 16763  0135E0  B4D8               	btfsc	status,2,c
 16764  0135E2  D007               	goto	l1630
 16765  0135E4                     u10220:
 16766                           
 16767                           ;Motor.c: 85: lMotor->mDelta --;
 16768  0135E4  C0D8  FFD9         	movff	_lMotor,fsr2l
 16769  0135E8  C0D9  FFDA         	movff	_lMotor+1,fsr2h
 16770  0135EC  06DE               	decf	postinc2,f,c
 16771  0135EE  0E00               	movlw	0
 16772  0135F0  5ADD               	subwfb	postdec2,f,c
 16773  0135F2                     l1630:
 16774                           
 16775                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 16776  0135F2  0E8E               	movlw	low _PortE
 16777  0135F4  0100               	movlb	0	; () banked
 16778  0135F6  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 16779  0135F8  0E03               	movlw	high _PortE
 16780  0135FA  0100               	movlb	0	; () banked
 16781  0135FC  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16782  0135FE  0E00               	movlw	0
 16783  013600  0100               	movlb	0	; () banked
 16784  013602  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 16785  013604  0E01               	movlw	1
 16786  013606  0100               	movlb	0	; () banked
 16787  013608  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 16788  01360A  EC59  F09F         	call	_Port_SetPin	;wreg free
 16789                           
 16790                           ;Motor.c: 88: }
 16791  01360E  D01F               	goto	l1631
 16792  013610                     l1629:
 16793                           
 16794                           ;Motor.c: 89: else
 16795                           ;Motor.c: 90: {
 16796                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 16797  013610  C0D8  FFD9         	movff	_lMotor,fsr2l
 16798  013614  C0D9  FFDA         	movff	_lMotor+1,fsr2h
 16799  013618  04DE               	decf	postinc2,w,c
 16800  01361A  E104               	bnz	u10230
 16801  01361C  0E80               	movlw	128
 16802  01361E  18DE               	xorwf	postinc2,w,c
 16803  013620  B4D8               	btfsc	status,2,c
 16804  013622  D007               	goto	l1632
 16805  013624                     u10230:
 16806                           
 16807                           ;Motor.c: 92: lMotor->mDelta ++;
 16808  013624  C0D8  FFD9         	movff	_lMotor,fsr2l
 16809  013628  C0D9  FFDA         	movff	_lMotor+1,fsr2h
 16810  01362C  2ADE               	incf	postinc2,f,c
 16811  01362E  0E00               	movlw	0
 16812  013630  22DD               	addwfc	postdec2,f,c
 16813  013632                     l1632:
 16814                           
 16815                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 16816  013632  0E8E               	movlw	low _PortE
 16817  013634  0100               	movlb	0	; () banked
 16818  013636  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 16819  013638  0E03               	movlw	high _PortE
 16820  01363A  0100               	movlb	0	; () banked
 16821  01363C  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16822  01363E  0E00               	movlw	0
 16823  013640  0100               	movlb	0	; () banked
 16824  013642  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 16825  013644  0E00               	movlw	0
 16826  013646  0100               	movlb	0	; () banked
 16827  013648  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 16828  01364A  EC59  F09F         	call	_Port_SetPin	;wreg free
 16829  01364E                     l1631:
 16830                           
 16831                           ;Motor.c: 95: }
 16832                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 16833  01364E  0E8E               	movlw	low _PortE
 16834  013650  0100               	movlb	0	; () banked
 16835  013652  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 16836  013654  0E03               	movlw	high _PortE
 16837  013656  0100               	movlb	0	; () banked
 16838  013658  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16839  01365A  0E01               	movlw	1
 16840  01365C  0100               	movlb	0	; () banked
 16841  01365E  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 16842  013660  0E01               	movlw	1
 16843  013662  0100               	movlb	0	; () banked
 16844  013664  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 16845  013666  EC59  F09F         	call	_Port_SetPin	;wreg free
 16846                           
 16847                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 16848  01366A  0E8E               	movlw	low _PortE
 16849  01366C  0100               	movlb	0	; () banked
 16850  01366E  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 16851  013670  0E03               	movlw	high _PortE
 16852  013672  0100               	movlb	0	; () banked
 16853  013674  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16854  013676  0E01               	movlw	1
 16855  013678  0100               	movlb	0	; () banked
 16856  01367A  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 16857  01367C  0E00               	movlw	0
 16858  01367E  0100               	movlb	0	; () banked
 16859  013680  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 16860  013682  EC59  F09F         	call	_Port_SetPin	;wreg free
 16861                           
 16862                           ;Motor.c: 101: MXK_Release();
 16863  013686  ECF5  F0B1         	call	_MXK_Release	;wreg free
 16864                           
 16865                           ;Motor.c: 102: Timer0_Restart();
 16866  01368A  ECF0  F0B2         	call	_Timer0_Restart	;wreg free
 16867                           
 16868                           ;Motor.c: 103: return;
 16869  01368E  0012               	return	
 16870  013690                     l1628:
 16871                           
 16872                           ;Motor.c: 104: }
 16873                           ;Motor.c: 105: MXK_Release();
 16874  013690  ECF5  F0B1         	call	_MXK_Release	;wreg free
 16875                           
 16876                           ;Motor.c: 106: Timer0_Stop();
 16877  013694  EC1B  F0B3         	call	_Timer0_Stop	;wreg free
 16878                           
 16879                           ;Motor.c: 107: return;
 16880  013698  0012               	return	
 16881  01369A                     l1627:
 16882                           
 16883                           ;Motor.c: 108: }
 16884                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 16885  01369A  C0BF  F060         	movff	_lStepFunction,MXK_Queue@pCallback
 16886  01369E  C0C0  F061         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
 16887  0136A2  C0C1  F062         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
 16888  0136A6  ECD6  F0B2         	call	_MXK_Queue	;wreg free
 16889  0136AA  0012               	return		;funcret
 16890  0136AC                     __end_of_Motor_Step:
 16891                           	opt stack 0
 16892                           tosu	equ	0xFFF
 16893                           tosh	equ	0xFFE
 16894                           tosl	equ	0xFFD
 16895                           pclath	equ	0xFFA
 16896                           tblptru	equ	0xFF8
 16897                           tblptrh	equ	0xFF7
 16898                           tblptrl	equ	0xFF6
 16899                           tablat	equ	0xFF5
 16900                           prodh	equ	0xFF4
 16901                           prodl	equ	0xFF3
 16902                           intcon	equ	0xFF2
 16903                           postinc0	equ	0xFEE
 16904                           wreg	equ	0xFE8
 16905                           indf1	equ	0xFE7
 16906                           postdec1	equ	0xFE5
 16907                           fsr1h	equ	0xFE2
 16908                           fsr1l	equ	0xFE1
 16909                           indf2	equ	0xFDF
 16910                           postinc2	equ	0xFDE
 16911                           postdec2	equ	0xFDD
 16912                           plusw2	equ	0xFDB
 16913                           fsr2h	equ	0xFDA
 16914                           fsr2l	equ	0xFD9
 16915                           status	equ	0xFD8
 16916                           
 16917 ;; *************** function _Timer0_Stop *****************
 16918 ;; Defined at:
 16919 ;;		line 89 in file "Library/Timer0.c"
 16920 ;; Parameters:    Size  Location     Type
 16921 ;;		None
 16922 ;; Auto vars:     Size  Location     Type
 16923 ;;		None
 16924 ;; Return value:  Size  Location     Type
 16925 ;;                  1    wreg      void 
 16926 ;; Registers used:
 16927 ;;		None
 16928 ;; Tracked objects:
 16929 ;;		On entry : 0/0
 16930 ;;		On exit  : 0/0
 16931 ;;		Unchanged: 0/0
 16932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16936 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16937 ;;Total ram usage:        0 bytes
 16938 ;; Hardware stack levels used:    1
 16939 ;; Hardware stack levels required when called:    7
 16940 ;; This function calls:
 16941 ;;		Nothing
 16942 ;; This function is called by:
 16943 ;;		_Motor_Step
 16944 ;; This function uses a non-reentrant model
 16945 ;;
 16946                           
 16947                           	psect	text72
 16948  016636                     __ptext72:
 16949                           	opt stack 0
 16950  016636                     _Timer0_Stop:
 16951                           	opt stack 20
 16952                           
 16953                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 16954                           
 16955                           ;incstack = 0
 16956  016636  9AF2               	bcf	intcon,5,c	;volatile
 16957                           
 16958                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 16959  016638  94F2               	bcf	intcon,2,c	;volatile
 16960  01663A  0012               	return		;funcret
 16961  01663C                     __end_of_Timer0_Stop:
 16962                           	opt stack 0
 16963                           tosu	equ	0xFFF
 16964                           tosh	equ	0xFFE
 16965                           tosl	equ	0xFFD
 16966                           pclath	equ	0xFFA
 16967                           tblptru	equ	0xFF8
 16968                           tblptrh	equ	0xFF7
 16969                           tblptrl	equ	0xFF6
 16970                           tablat	equ	0xFF5
 16971                           prodh	equ	0xFF4
 16972                           prodl	equ	0xFF3
 16973                           intcon	equ	0xFF2
 16974                           postinc0	equ	0xFEE
 16975                           wreg	equ	0xFE8
 16976                           indf1	equ	0xFE7
 16977                           postdec1	equ	0xFE5
 16978                           fsr1h	equ	0xFE2
 16979                           fsr1l	equ	0xFE1
 16980                           indf2	equ	0xFDF
 16981                           postinc2	equ	0xFDE
 16982                           postdec2	equ	0xFDD
 16983                           plusw2	equ	0xFDB
 16984                           fsr2h	equ	0xFDA
 16985                           fsr2l	equ	0xFD9
 16986                           status	equ	0xFD8
 16987                           
 16988 ;; *************** function _Timer0_Restart *****************
 16989 ;; Defined at:
 16990 ;;		line 83 in file "Library/Timer0.c"
 16991 ;; Parameters:    Size  Location     Type
 16992 ;;		None
 16993 ;; Auto vars:     Size  Location     Type
 16994 ;;		None
 16995 ;; Return value:  Size  Location     Type
 16996 ;;                  1    wreg      void 
 16997 ;; Registers used:
 16998 ;;		None
 16999 ;; Tracked objects:
 17000 ;;		On entry : 0/0
 17001 ;;		On exit  : 0/0
 17002 ;;		Unchanged: 0/0
 17003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17005 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17007 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17008 ;;Total ram usage:        0 bytes
 17009 ;; Hardware stack levels used:    1
 17010 ;; Hardware stack levels required when called:    7
 17011 ;; This function calls:
 17012 ;;		Nothing
 17013 ;; This function is called by:
 17014 ;;		_Motor_Step
 17015 ;; This function uses a non-reentrant model
 17016 ;;
 17017                           
 17018                           	psect	text73
 17019  0165E0                     __ptext73:
 17020                           	opt stack 0
 17021  0165E0                     _Timer0_Restart:
 17022                           	opt stack 20
 17023                           
 17024                           ;Timer0.c: 85: TMR0 = COUNTER;
 17025                           
 17026                           ;incstack = 0
 17027  0165E0  C029  FFD6         	movff	_COUNTER,4054	;volatile
 17028  0165E4  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 17029                           
 17030                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 17031  0165E8  8AF2               	bsf	intcon,5,c	;volatile
 17032  0165EA  0012               	return		;funcret
 17033  0165EC                     __end_of_Timer0_Restart:
 17034                           	opt stack 0
 17035                           tosu	equ	0xFFF
 17036                           tosh	equ	0xFFE
 17037                           tosl	equ	0xFFD
 17038                           pclath	equ	0xFFA
 17039                           tblptru	equ	0xFF8
 17040                           tblptrh	equ	0xFF7
 17041                           tblptrl	equ	0xFF6
 17042                           tablat	equ	0xFF5
 17043                           prodh	equ	0xFF4
 17044                           prodl	equ	0xFF3
 17045                           intcon	equ	0xFF2
 17046                           postinc0	equ	0xFEE
 17047                           wreg	equ	0xFE8
 17048                           indf1	equ	0xFE7
 17049                           postdec1	equ	0xFE5
 17050                           fsr1h	equ	0xFE2
 17051                           fsr1l	equ	0xFE1
 17052                           indf2	equ	0xFDF
 17053                           postinc2	equ	0xFDE
 17054                           postdec2	equ	0xFDD
 17055                           plusw2	equ	0xFDB
 17056                           fsr2h	equ	0xFDA
 17057                           fsr2l	equ	0xFD9
 17058                           status	equ	0xFD8
 17059                           
 17060 ;; *************** function _MXK_SwitchTo *****************
 17061 ;; Defined at:
 17062 ;;		line 105 in file "Library/MXK.c"
 17063 ;; Parameters:    Size  Location     Type
 17064 ;;  pModule         1    wreg     enum E6927
 17065 ;; Auto vars:     Size  Location     Type
 17066 ;;  pModule         1    7[BANK0 ] enum E6927
 17067 ;;  CUR             1    6[BANK0 ] unsigned char 
 17068 ;; Return value:  Size  Location     Type
 17069 ;;                  1    wreg      unsigned char 
 17070 ;; Registers used:
 17071 ;;		wreg, status,2, status,0, cstack
 17072 ;; Tracked objects:
 17073 ;;		On entry : 0/0
 17074 ;;		On exit  : 0/0
 17075 ;;		Unchanged: 0/0
 17076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17078 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17080 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17081 ;;Total ram usage:        2 bytes
 17082 ;; Hardware stack levels used:    1
 17083 ;; Hardware stack levels required when called:    8
 17084 ;; This function calls:
 17085 ;;		_delay_us
 17086 ;; This function is called by:
 17087 ;;		_Motor_Step
 17088 ;;		_mode1
 17089 ;;		_mode2
 17090 ;;		_mode4
 17091 ;;		_main
 17092 ;; This function uses a non-reentrant model
 17093 ;;
 17094                           
 17095                           	psect	text74
 17096  015D64                     __ptext74:
 17097                           	opt stack 0
 17098  015D64                     _MXK_SwitchTo:
 17099                           	opt stack 21
 17100                           
 17101                           ;incstack = 0
 17102                           ;MXK_SwitchTo@pModule stored from wreg
 17103  015D64  0100               	movlb	0	; () banked
 17104  015D66  6F67               	movwf	MXK_SwitchTo@pModule& (0+255),b
 17105                           
 17106                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 17107  015D68  5086               	movf	3974,w,c	;volatile
 17108  015D6A  0B0F               	andlw	15
 17109  015D6C  0100               	movlb	0	; () banked
 17110  015D6E  6F66               	movwf	MXK_SwitchTo@CUR& (0+255),b
 17111                           
 17112                           ; BSR set to: 0
 17113                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 17114  015D70  504B               	movf	_Bus_State,w,c
 17115  015D72  A4D8               	btfss	status,2,c
 17116  015D74  D002               	goto	l1730
 17117                           
 17118                           ; BSR set to: 0
 17119                           ;MXK.c: 110: return 0;
 17120  015D76  0E00               	movlw	0
 17121                           
 17122                           ; BSR set to: 0
 17123  015D78  0012               	return	
 17124  015D7A                     l1730:
 17125                           
 17126                           ; BSR set to: 0
 17127                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 17128                           
 17129                           ; BSR set to: 0
 17130  015D7A  0E00               	movlw	0
 17131  015D7C  6E4B               	movwf	_Bus_State,c
 17132                           
 17133                           ; BSR set to: 0
 17134                           ;MXK.c: 114: if (CUR != pModule)
 17135  015D7E  0100               	movlb	0	; () banked
 17136  015D80  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 17137  015D82  0100               	movlb	0	; () banked
 17138  015D84  1966               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
 17139  015D86  B4D8               	btfsc	status,2,c
 17140  015D88  D00C               	goto	l1732
 17141                           
 17142                           ; BSR set to: 0
 17143                           ;MXK.c: 115: {
 17144                           ;MXK.c: 116: PORTG &= ~(0xF);
 17145  015D8A  0EF0               	movlw	240
 17146  015D8C  1686               	andwf	3974,f,c	;volatile
 17147                           
 17148                           ;MXK.c: 117: PORTG |= pModule;
 17149  015D8E  0100               	movlb	0	; () banked
 17150  015D90  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 17151  015D92  1286               	iorwf	3974,f,c	;volatile
 17152                           
 17153                           ; BSR set to: 0
 17154                           ;MXK.c: 120: delay_us(10);
 17155  015D94  0E00               	movlw	0
 17156  015D96  0100               	movlb	0	; () banked
 17157  015D98  6F61               	movwf	(delay_us@us+1)& (0+255),b
 17158  015D9A  0E0A               	movlw	10
 17159  015D9C  6F60               	movwf	delay_us@us& (0+255),b
 17160  015D9E  ECD4  F0AC         	call	_delay_us	;wreg free
 17161  015DA2                     l1732:
 17162                           
 17163                           ;MXK.c: 121: }
 17164                           ;MXK.c: 122: return 1;
 17165  015DA2  0E01               	movlw	1
 17166  015DA4  0012               	return	
 17167  015DA6                     __end_of_MXK_SwitchTo:
 17168                           	opt stack 0
 17169                           tosu	equ	0xFFF
 17170                           tosh	equ	0xFFE
 17171                           tosl	equ	0xFFD
 17172                           pclath	equ	0xFFA
 17173                           tblptru	equ	0xFF8
 17174                           tblptrh	equ	0xFF7
 17175                           tblptrl	equ	0xFF6
 17176                           tablat	equ	0xFF5
 17177                           prodh	equ	0xFF4
 17178                           prodl	equ	0xFF3
 17179                           intcon	equ	0xFF2
 17180                           postinc0	equ	0xFEE
 17181                           wreg	equ	0xFE8
 17182                           indf1	equ	0xFE7
 17183                           postdec1	equ	0xFE5
 17184                           fsr1h	equ	0xFE2
 17185                           fsr1l	equ	0xFE1
 17186                           indf2	equ	0xFDF
 17187                           postinc2	equ	0xFDE
 17188                           postdec2	equ	0xFDD
 17189                           plusw2	equ	0xFDB
 17190                           fsr2h	equ	0xFDA
 17191                           fsr2l	equ	0xFD9
 17192                           status	equ	0xFD8
 17193                           
 17194 ;; *************** function _MXK_Release *****************
 17195 ;; Defined at:
 17196 ;;		line 130 in file "Library/MXK.c"
 17197 ;; Parameters:    Size  Location     Type
 17198 ;;		None
 17199 ;; Auto vars:     Size  Location     Type
 17200 ;;		None
 17201 ;; Return value:  Size  Location     Type
 17202 ;;                  1    wreg      unsigned char 
 17203 ;; Registers used:
 17204 ;;		wreg, status,2, status,0
 17205 ;; Tracked objects:
 17206 ;;		On entry : 0/0
 17207 ;;		On exit  : 0/0
 17208 ;;		Unchanged: 0/0
 17209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17213 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17214 ;;Total ram usage:        0 bytes
 17215 ;; Hardware stack levels used:    1
 17216 ;; Hardware stack levels required when called:    7
 17217 ;; This function calls:
 17218 ;;		Nothing
 17219 ;; This function is called by:
 17220 ;;		_Motor_Step
 17221 ;;		_init
 17222 ;;		_mode1
 17223 ;;		_mode2
 17224 ;;		_mode4
 17225 ;;		_main
 17226 ;; This function uses a non-reentrant model
 17227 ;;
 17228                           
 17229                           	psect	text75
 17230  0163EA                     __ptext75:
 17231                           	opt stack 0
 17232  0163EA                     _MXK_Release:
 17233                           	opt stack 22
 17234                           
 17235                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 17236                           
 17237                           ;incstack = 0
 17238  0163EA  0E01               	movlw	1
 17239  0163EC  6E4B               	movwf	_Bus_State,c
 17240                           
 17241                           ;MXK.c: 134: if (lQueue != 0)
 17242  0163EE  0100               	movlb	0	; () banked
 17243  0163F0  51BC               	movf	_lQueue& (0+255),w,b	;volatile
 17244  0163F2  0100               	movlb	0	; () banked
 17245  0163F4  11BD               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 17246  0163F6  0100               	movlb	0	; () banked
 17247  0163F8  11BE               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 17248  0163FA  B4D8               	btfsc	status,2,c
 17249  0163FC  D002               	goto	l1735
 17250                           
 17251                           ; BSR set to: 0
 17252                           ;MXK.c: 135: return 1;
 17253  0163FE  0E01               	movlw	1
 17254                           
 17255                           ; BSR set to: 0
 17256  016400  0012               	return	
 17257  016402                     l1735:
 17258                           
 17259                           ; BSR set to: 0
 17260                           ;MXK.c: 137: return 0;
 17261                           
 17262                           ; BSR set to: 0
 17263  016402  0E00               	movlw	0
 17264  016404  0012               	return	
 17265  016406                     __end_of_MXK_Release:
 17266                           	opt stack 0
 17267                           tosu	equ	0xFFF
 17268                           tosh	equ	0xFFE
 17269                           tosl	equ	0xFFD
 17270                           pclath	equ	0xFFA
 17271                           tblptru	equ	0xFF8
 17272                           tblptrh	equ	0xFF7
 17273                           tblptrl	equ	0xFF6
 17274                           tablat	equ	0xFF5
 17275                           prodh	equ	0xFF4
 17276                           prodl	equ	0xFF3
 17277                           intcon	equ	0xFF2
 17278                           postinc0	equ	0xFEE
 17279                           wreg	equ	0xFE8
 17280                           indf1	equ	0xFE7
 17281                           postdec1	equ	0xFE5
 17282                           fsr1h	equ	0xFE2
 17283                           fsr1l	equ	0xFE1
 17284                           indf2	equ	0xFDF
 17285                           postinc2	equ	0xFDE
 17286                           postdec2	equ	0xFDD
 17287                           plusw2	equ	0xFDB
 17288                           fsr2h	equ	0xFDA
 17289                           fsr2l	equ	0xFD9
 17290                           status	equ	0xFD8
 17291                           
 17292 ;; *************** function _MXK_Queue *****************
 17293 ;; Defined at:
 17294 ;;		line 144 in file "Library/MXK.c"
 17295 ;; Parameters:    Size  Location     Type
 17296 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
 17297 ;;		 -> Absolute function(1), Motor_Step(1), 
 17298 ;; Auto vars:     Size  Location     Type
 17299 ;;		None
 17300 ;; Return value:  Size  Location     Type
 17301 ;;                  1    wreg      void 
 17302 ;; Registers used:
 17303 ;;		wreg, status,2, status,0
 17304 ;; Tracked objects:
 17305 ;;		On entry : 0/0
 17306 ;;		On exit  : 0/0
 17307 ;;		Unchanged: 0/0
 17308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17309 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17312 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17313 ;;Total ram usage:        3 bytes
 17314 ;; Hardware stack levels used:    1
 17315 ;; Hardware stack levels required when called:    7
 17316 ;; This function calls:
 17317 ;;		Nothing
 17318 ;; This function is called by:
 17319 ;;		_Motor_Step
 17320 ;; This function uses a non-reentrant model
 17321 ;;
 17322                           
 17323                           	psect	text76
 17324  0165AC                     __ptext76:
 17325                           	opt stack 0
 17326  0165AC                     _MXK_Queue:
 17327                           	opt stack 20
 17328                           
 17329                           ;MXK.c: 146: lQueue = pCallback;
 17330                           
 17331                           ; BSR set to: 0
 17332                           ;incstack = 0
 17333  0165AC  C060  F0BC         	movff	MXK_Queue@pCallback,_lQueue	;volatile
 17334  0165B0  C061  F0BD         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
 17335  0165B4  C062  F0BE         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
 17336  0165B8  0012               	return		;funcret
 17337  0165BA                     __end_of_MXK_Queue:
 17338                           	opt stack 0
 17339                           tosu	equ	0xFFF
 17340                           tosh	equ	0xFFE
 17341                           tosl	equ	0xFFD
 17342                           pclath	equ	0xFFA
 17343                           tblptru	equ	0xFF8
 17344                           tblptrh	equ	0xFF7
 17345                           tblptrl	equ	0xFF6
 17346                           tablat	equ	0xFF5
 17347                           prodh	equ	0xFF4
 17348                           prodl	equ	0xFF3
 17349                           intcon	equ	0xFF2
 17350                           postinc0	equ	0xFEE
 17351                           wreg	equ	0xFE8
 17352                           indf1	equ	0xFE7
 17353                           postdec1	equ	0xFE5
 17354                           fsr1h	equ	0xFE2
 17355                           fsr1l	equ	0xFE1
 17356                           indf2	equ	0xFDF
 17357                           postinc2	equ	0xFDE
 17358                           postdec2	equ	0xFDD
 17359                           plusw2	equ	0xFDB
 17360                           fsr2h	equ	0xFDA
 17361                           fsr2l	equ	0xFD9
 17362                           status	equ	0xFD8
 17363                           
 17364 ;; *************** function _MXK_BlockSwitchTo *****************
 17365 ;; Defined at:
 17366 ;;		line 82 in file "Library/MXK.c"
 17367 ;; Parameters:    Size  Location     Type
 17368 ;;  pModule         1    wreg     enum E6927
 17369 ;; Auto vars:     Size  Location     Type
 17370 ;;  pModule         1    7[BANK0 ] enum E6927
 17371 ;;  CUR             1    6[BANK0 ] unsigned char 
 17372 ;; Return value:  Size  Location     Type
 17373 ;;                  1    wreg      unsigned char 
 17374 ;; Registers used:
 17375 ;;		wreg, status,2, status,0, cstack
 17376 ;; Tracked objects:
 17377 ;;		On entry : 0/0
 17378 ;;		On exit  : 0/0
 17379 ;;		Unchanged: 0/0
 17380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17382 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17384 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17385 ;;Total ram usage:        2 bytes
 17386 ;; Hardware stack levels used:    1
 17387 ;; Hardware stack levels required when called:    8
 17388 ;; This function calls:
 17389 ;;		_delay_us
 17390 ;; This function is called by:
 17391 ;;		_init
 17392 ;; This function uses a non-reentrant model
 17393 ;;
 17394                           
 17395                           	psect	text77
 17396  015EA2                     __ptext77:
 17397                           	opt stack 0
 17398  015EA2                     _MXK_BlockSwitchTo:
 17399                           	opt stack 21
 17400                           
 17401                           ;incstack = 0
 17402                           ;MXK_BlockSwitchTo@pModule stored from wreg
 17403  015EA2  0100               	movlb	0	; () banked
 17404  015EA4  6F67               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
 17405                           
 17406                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
 17407  015EA6  5086               	movf	3974,w,c	;volatile
 17408  015EA8  0B0F               	andlw	15
 17409  015EAA  0100               	movlb	0	; () banked
 17410  015EAC  6F66               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
 17411  015EAE                     
 17412                           ; BSR set to: 0
 17413                           
 17414                           ; BSR set to: 0
 17415  015EAE  504B               	movf	_Bus_State,w,c
 17416  015EB0  B4D8               	btfsc	status,2,c
 17417  015EB2  D7FD               	goto	l1724
 17418                           
 17419                           ;MXK.c: 88: Bus_State = eMXK_Busy;
 17420  015EB4  0E00               	movlw	0
 17421  015EB6  6E4B               	movwf	_Bus_State,c
 17422                           
 17423                           ;MXK.c: 90: if (CUR != pModule)
 17424  015EB8  0100               	movlb	0	; () banked
 17425  015EBA  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 17426  015EBC  0100               	movlb	0	; () banked
 17427  015EBE  1966               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
 17428  015EC0  B4D8               	btfsc	status,2,c
 17429  015EC2  D00C               	goto	l1726
 17430                           
 17431                           ; BSR set to: 0
 17432                           ;MXK.c: 91: {
 17433                           ;MXK.c: 92: PORTG &= ~(0xF);
 17434  015EC4  0EF0               	movlw	240
 17435  015EC6  1686               	andwf	3974,f,c	;volatile
 17436                           
 17437                           ;MXK.c: 93: PORTG |= pModule;
 17438  015EC8  0100               	movlb	0	; () banked
 17439  015ECA  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 17440  015ECC  1286               	iorwf	3974,f,c	;volatile
 17441                           
 17442                           ; BSR set to: 0
 17443                           ;MXK.c: 96: delay_us(10);
 17444  015ECE  0E00               	movlw	0
 17445  015ED0  0100               	movlb	0	; () banked
 17446  015ED2  6F61               	movwf	(delay_us@us+1)& (0+255),b
 17447  015ED4  0E0A               	movlw	10
 17448  015ED6  6F60               	movwf	delay_us@us& (0+255),b
 17449  015ED8  ECD4  F0AC         	call	_delay_us	;wreg free
 17450  015EDC                     l1726:
 17451                           
 17452                           ;MXK.c: 97: }
 17453                           ;MXK.c: 98: return 1;
 17454  015EDC  0E01               	movlw	1
 17455  015EDE  0012               	return	
 17456  015EE0                     __end_of_MXK_BlockSwitchTo:
 17457                           	opt stack 0
 17458                           tosu	equ	0xFFF
 17459                           tosh	equ	0xFFE
 17460                           tosl	equ	0xFFD
 17461                           pclath	equ	0xFFA
 17462                           tblptru	equ	0xFF8
 17463                           tblptrh	equ	0xFF7
 17464                           tblptrl	equ	0xFF6
 17465                           tablat	equ	0xFF5
 17466                           prodh	equ	0xFF4
 17467                           prodl	equ	0xFF3
 17468                           intcon	equ	0xFF2
 17469                           postinc0	equ	0xFEE
 17470                           wreg	equ	0xFE8
 17471                           indf1	equ	0xFE7
 17472                           postdec1	equ	0xFE5
 17473                           fsr1h	equ	0xFE2
 17474                           fsr1l	equ	0xFE1
 17475                           indf2	equ	0xFDF
 17476                           postinc2	equ	0xFDE
 17477                           postdec2	equ	0xFDD
 17478                           plusw2	equ	0xFDB
 17479                           fsr2h	equ	0xFDA
 17480                           fsr2l	equ	0xFD9
 17481                           status	equ	0xFD8
 17482                           
 17483 ;; *************** function _delay_us *****************
 17484 ;; Defined at:
 17485 ;;		line 255 in file "Library/Types.c"
 17486 ;; Parameters:    Size  Location     Type
 17487 ;;  us              2    0[BANK0 ] unsigned short 
 17488 ;; Auto vars:     Size  Location     Type
 17489 ;;  u               4    2[BANK0 ] unsigned long 
 17490 ;; Return value:  Size  Location     Type
 17491 ;;                  1    wreg      void 
 17492 ;; Registers used:
 17493 ;;		wreg, status,2, status,0
 17494 ;; Tracked objects:
 17495 ;;		On entry : 0/0
 17496 ;;		On exit  : 0/0
 17497 ;;		Unchanged: 0/0
 17498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17499 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17500 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17502 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17503 ;;Total ram usage:        6 bytes
 17504 ;; Hardware stack levels used:    1
 17505 ;; Hardware stack levels required when called:    7
 17506 ;; This function calls:
 17507 ;;		Nothing
 17508 ;; This function is called by:
 17509 ;;		_MXK_BlockSwitchTo
 17510 ;;		_MXK_SwitchTo
 17511 ;; This function uses a non-reentrant model
 17512 ;;
 17513                           
 17514                           	psect	text78
 17515  0159A8                     __ptext78:
 17516                           	opt stack 0
 17517  0159A8                     _delay_us:
 17518                           	opt stack 21
 17519                           
 17520                           ;Types.c: 256: unsigned long u;
 17521                           ;Types.c: 257: while (us--) {
 17522                           
 17523                           ;incstack = 0
 17524  0159A8  D01C               	goto	u9440
 17525  0159AA                     l12718:
 17526                           
 17527                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 17528  0159AA  0E00               	movlw	0
 17529  0159AC  0100               	movlb	0	; () banked
 17530  0159AE  6F62               	movwf	delay_us@u& (0+255),b
 17531  0159B0  0E00               	movlw	0
 17532  0159B2  6F63               	movwf	(delay_us@u+1)& (0+255),b
 17533  0159B4  0E00               	movlw	0
 17534  0159B6  6F64               	movwf	(delay_us@u+2)& (0+255),b
 17535  0159B8  0E00               	movlw	0
 17536  0159BA  6F65               	movwf	(delay_us@u+3)& (0+255),b
 17537  0159BC                     l12720:
 17538                           
 17539                           ; BSR set to: 0
 17540  0159BC  0100               	movlb	0	; () banked
 17541  0159BE  5162               	movf	delay_us@u& (0+255),w,b
 17542  0159C0  0100               	movlb	0	; () banked
 17543  0159C2  1163               	iorwf	(delay_us@u+1)& (0+255),w,b
 17544  0159C4  0100               	movlb	0	; () banked
 17545  0159C6  1164               	iorwf	(delay_us@u+2)& (0+255),w,b
 17546  0159C8  0100               	movlb	0	; () banked
 17547  0159CA  1165               	iorwf	(delay_us@u+3)& (0+255),w,b
 17548  0159CC  A4D8               	btfss	status,2,c
 17549  0159CE  D009               	goto	u9440
 17550                           
 17551                           ; BSR set to: 0
 17552                           
 17553                           ; BSR set to: 0
 17554  0159D0  F000               	nop		; ;# 
 17555  0159D2  0E01               	movlw	1
 17556  0159D4  0100               	movlb	0	; () banked
 17557  0159D6  2762               	addwf	delay_us@u& (0+255),f,b
 17558  0159D8  0E00               	movlw	0
 17559  0159DA  2363               	addwfc	(delay_us@u+1)& (0+255),f,b
 17560  0159DC  2364               	addwfc	(delay_us@u+2)& (0+255),f,b
 17561  0159DE  2365               	addwfc	(delay_us@u+3)& (0+255),f,b
 17562  0159E0  D7ED               	goto	l12720
 17563  0159E2                     u9440:
 17564                           
 17565                           ; BSR set to: 0
 17566                           
 17567                           ; BSR set to: 0
 17568  0159E2  0100               	movlb	0	; () banked
 17569  0159E4  0760               	decf	delay_us@us& (0+255),f,b
 17570  0159E6  A0D8               	btfss	status,0,c
 17571  0159E8  0761               	decf	(delay_us@us+1)& (0+255),f,b
 17572  0159EA  0100               	movlb	0	; () banked
 17573  0159EC  2960               	incf	delay_us@us& (0+255),w,b
 17574  0159EE  E1DD               	bnz	l12718
 17575  0159F0  0100               	movlb	0	; () banked
 17576  0159F2  2961               	incf	(delay_us@us+1)& (0+255),w,b
 17577  0159F4  B4D8               	btfsc	status,2,c
 17578  0159F6  0012               	return	
 17579  0159F8  D7D8               	goto	l832
 17580  0159FA                     __end_of_delay_us:
 17581                           	opt stack 0
 17582                           tosu	equ	0xFFF
 17583                           tosh	equ	0xFFE
 17584                           tosl	equ	0xFFD
 17585                           pclath	equ	0xFFA
 17586                           tblptru	equ	0xFF8
 17587                           tblptrh	equ	0xFF7
 17588                           tblptrl	equ	0xFF6
 17589                           tablat	equ	0xFF5
 17590                           prodh	equ	0xFF4
 17591                           prodl	equ	0xFF3
 17592                           intcon	equ	0xFF2
 17593                           postinc0	equ	0xFEE
 17594                           wreg	equ	0xFE8
 17595                           indf1	equ	0xFE7
 17596                           postdec1	equ	0xFE5
 17597                           fsr1h	equ	0xFE2
 17598                           fsr1l	equ	0xFE1
 17599                           indf2	equ	0xFDF
 17600                           postinc2	equ	0xFDE
 17601                           postdec2	equ	0xFDD
 17602                           plusw2	equ	0xFDB
 17603                           fsr2h	equ	0xFDA
 17604                           fsr2l	equ	0xFD9
 17605                           status	equ	0xFD8
 17606                           
 17607 ;; *************** function _LCD_Init *****************
 17608 ;; Defined at:
 17609 ;;		line 172 in file "Library/LCD.c"
 17610 ;; Parameters:    Size  Location     Type
 17611 ;;		None
 17612 ;; Auto vars:     Size  Location     Type
 17613 ;;  i               2   55[BANK0 ] unsigned short 
 17614 ;; Return value:  Size  Location     Type
 17615 ;;                  1    wreg      void 
 17616 ;; Registers used:
 17617 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17618 ;; Tracked objects:
 17619 ;;		On entry : 0/0
 17620 ;;		On exit  : 0/0
 17621 ;;		Unchanged: 0/0
 17622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17624 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17625 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17626 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17627 ;;Total ram usage:        4 bytes
 17628 ;; Hardware stack levels used:    1
 17629 ;; Hardware stack levels required when called:   15
 17630 ;; This function calls:
 17631 ;;		_Configure_GPIOs
 17632 ;;		_LCD_Fill
 17633 ;;		_LCD_Write
 17634 ;;		_Set_Rotation
 17635 ;;		_delay_ms
 17636 ;; This function is called by:
 17637 ;;		_init
 17638 ;; This function uses a non-reentrant model
 17639 ;;
 17640                           
 17641                           	psect	text79
 17642  012EB4                     __ptext79:
 17643                           	opt stack 0
 17644  012EB4                     _LCD_Init:
 17645                           	opt stack 14
 17646                           
 17647                           ;LCD.c: 174: UINT16 i;
 17648                           ;LCD.c: 175: Configure_GPIOs();
 17649                           
 17650                           ; BSR set to: 0
 17651                           ;incstack = 0
 17652  012EB4  ECE4  F0A9         	call	_Configure_GPIOs	;wreg free
 17653                           
 17654                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
 17655  012EB8  0E00               	movlw	0
 17656  012EBA  0100               	movlb	0	; () banked
 17657  012EBC  6F98               	movwf	(LCD_Init@i+1)& (0+255),b
 17658  012EBE  0E00               	movlw	0
 17659  012EC0  6F97               	movwf	LCD_Init@i& (0+255),b
 17660                           
 17661                           ; BSR set to: 0
 17662  012EC2  0100               	movlb	0	; () banked
 17663  012EC4  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 17664  012EC6  E106               	bnz	u10800
 17665  012EC8  0E59               	movlw	89
 17666  012ECA  0100               	movlb	0	; () banked
 17667  012ECC  5D97               	subwf	LCD_Init@i& (0+255),w,b
 17668  012ECE  B0D8               	btfsc	status,0,c
 17669  012ED0  D08B               	goto	u10840
 17670  012ED2  D001               	goto	l85
 17671  012ED4                     u10800:
 17672                           
 17673                           ; BSR set to: 0
 17674  012ED4  D089               	goto	u10840
 17675  012ED6                     l85:
 17676                           
 17677                           ; BSR set to: 0
 17678                           ;LCD.c: 178: {
 17679                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
 17680                           
 17681                           ; BSR set to: 0
 17682  012ED6  90D8               	bcf	status,0,c
 17683  012ED8  0100               	movlb	0	; () banked
 17684  012EDA  3597               	rlcf	LCD_Init@i& (0+255),w,b
 17685  012EDC  6EF6               	movwf	tblptrl,c
 17686  012EDE  0100               	movlb	0	; () banked
 17687  012EE0  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 17688  012EE2  6EF7               	movwf	tblptrh,c
 17689  012EE4  0E99               	movlw	low _InitList
 17690  012EE6  26F6               	addwf	tblptrl,f,c
 17691  012EE8  0EFC               	movlw	high _InitList
 17692  012EEA  22F7               	addwfc	tblptrh,f,c
 17693  012EEC                     	if	1	;There are 3 active tblptr bytes
 17694  012EEC  6AF8               	clrf	tblptru,c
 17695  012EEE  0E00               	movlw	low (__mediumconst shr (0+16))
 17696  012EF0  22F8               	addwfc	tblptru,f,c
 17697  012EF2                     	endif
 17698  012EF2  0009               	tblrd		*+
 17699  012EF4  0E80               	movlw	128
 17700  012EF6  18F5               	xorwf	tablat,w,c
 17701  012EF8  0009               	tblrd		*+
 17702  012EFA  10F5               	iorwf	tablat,w,c
 17703  012EFC  A4D8               	btfss	status,2,c
 17704  012EFE  D022               	goto	l87
 17705                           
 17706                           ; BSR set to: 0
 17707  012F00  0100               	movlb	0	; () banked
 17708  012F02  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 17709  012F04  E11F               	bnz	l14058
 17710  012F06  0E58               	movlw	88
 17711  012F08  0100               	movlb	0	; () banked
 17712  012F0A  5D97               	subwf	LCD_Init@i& (0+255),w,b
 17713  012F0C  B0D8               	btfsc	status,0,c
 17714  012F0E  D01A               	goto	l87
 17715                           
 17716                           ; BSR set to: 0
 17717                           ;LCD.c: 180: delay_ms(InitList[++i]);
 17718  012F10  0100               	movlb	0	; () banked
 17719  012F12  4B97               	infsnz	LCD_Init@i& (0+255),f,b
 17720  012F14  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
 17721  012F16  90D8               	bcf	status,0,c
 17722  012F18  0100               	movlb	0	; () banked
 17723  012F1A  3597               	rlcf	LCD_Init@i& (0+255),w,b
 17724  012F1C  6EF6               	movwf	tblptrl,c
 17725  012F1E  0100               	movlb	0	; () banked
 17726  012F20  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 17727  012F22  6EF7               	movwf	tblptrh,c
 17728  012F24  0E99               	movlw	low _InitList
 17729  012F26  26F6               	addwf	tblptrl,f,c
 17730  012F28  0EFC               	movlw	high _InitList
 17731  012F2A  22F7               	addwfc	tblptrh,f,c
 17732  012F2C                     	if	1	;There are 3 active tblptr bytes
 17733  012F2C  6AF8               	clrf	tblptru,c
 17734  012F2E  0E00               	movlw	low (__mediumconst shr (0+16))
 17735  012F30  22F8               	addwfc	tblptru,f,c
 17736  012F32                     	endif
 17737  012F32  0009               	tblrd		*+
 17738  012F34  CFF5 F060          	movff	tablat,delay_ms@ms
 17739  012F38  000A               	tblrd		*-
 17740  012F3A  CFF5 F061          	movff	tablat,delay_ms@ms+1
 17741  012F3E  ECBD  F0AA         	call	_delay_ms	;wreg free
 17742  012F42  D04B               	goto	l90
 17743  012F44                     l87:
 17744  012F44                     l14058:
 17745                           
 17746                           ;LCD.c: 181: else
 17747                           ;LCD.c: 182: {
 17748                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
 17749  012F44  90D8               	bcf	status,0,c
 17750  012F46  0100               	movlb	0	; () banked
 17751  012F48  3597               	rlcf	LCD_Init@i& (0+255),w,b
 17752  012F4A  6EF6               	movwf	tblptrl,c
 17753  012F4C  0100               	movlb	0	; () banked
 17754  012F4E  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 17755  012F50  6EF7               	movwf	tblptrh,c
 17756  012F52  0E99               	movlw	low _InitList
 17757  012F54  26F6               	addwf	tblptrl,f,c
 17758  012F56  0EFC               	movlw	high _InitList
 17759  012F58  22F7               	addwfc	tblptrh,f,c
 17760  012F5A                     	if	1	;There are 3 active tblptr bytes
 17761  012F5A  6AF8               	clrf	tblptru,c
 17762  012F5C  0E00               	movlw	low (__mediumconst shr (0+16))
 17763  012F5E  22F8               	addwfc	tblptru,f,c
 17764  012F60                     	endif
 17765  012F60  0009               	tblrd		*+
 17766  012F62  0E00               	movlw	0
 17767  012F64  5EF5               	subwf	tablat,f,c
 17768  012F66  0009               	tblrd		*+
 17769  012F68  0E01               	movlw	1
 17770  012F6A  5AF5               	subwfb	tablat,f,c
 17771  012F6C  A0D8               	btfss	status,0,c
 17772  012F6E  D020               	goto	l89
 17773                           
 17774                           ; BSR set to: 0
 17775  012F70  0E00               	movlw	0
 17776  012F72  0100               	movlb	0	; () banked
 17777  012F74  6F63               	movwf	LCD_Write@mode& (0+255),b
 17778  012F76  90D8               	bcf	status,0,c
 17779  012F78  0100               	movlb	0	; () banked
 17780  012F7A  3597               	rlcf	LCD_Init@i& (0+255),w,b
 17781  012F7C  6EF6               	movwf	tblptrl,c
 17782  012F7E  0100               	movlb	0	; () banked
 17783  012F80  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 17784  012F82  6EF7               	movwf	tblptrh,c
 17785  012F84  0E99               	movlw	low _InitList
 17786  012F86  26F6               	addwf	tblptrl,f,c
 17787  012F88  0EFC               	movlw	high _InitList
 17788  012F8A  22F7               	addwfc	tblptrh,f,c
 17789  012F8C                     	if	1	;There are 3 active tblptr bytes
 17790  012F8C  6AF8               	clrf	tblptru,c
 17791  012F8E  0E00               	movlw	low (__mediumconst shr (0+16))
 17792  012F90  22F8               	addwfc	tblptru,f,c
 17793  012F92                     	endif
 17794  012F92  0009               	tblrd		*+
 17795  012F94  CFF5 F095          	movff	tablat,??_LCD_Init
 17796  012F98  0009               	tblrd		*+
 17797  012F9A  CFF5 F096          	movff	tablat,??_LCD_Init+1
 17798  012F9E  C096  F095         	movff	??_LCD_Init+1,??_LCD_Init
 17799  012FA2  0100               	movlb	0	; () banked
 17800  012FA4  6B96               	clrf	(??_LCD_Init+1)& (0+255),b
 17801  012FA6  0100               	movlb	0	; () banked
 17802  012FA8  5195               	movf	??_LCD_Init& (0+255),w,b
 17803  012FAA  EC2C  F0B1         	call	_LCD_Write
 17804  012FAE  D015               	goto	l90
 17805  012FB0                     l89:
 17806                           
 17807                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
 17808  012FB0  0E01               	movlw	1
 17809  012FB2  0100               	movlb	0	; () banked
 17810  012FB4  6F63               	movwf	LCD_Write@mode& (0+255),b
 17811  012FB6  90D8               	bcf	status,0,c
 17812  012FB8  0100               	movlb	0	; () banked
 17813  012FBA  3597               	rlcf	LCD_Init@i& (0+255),w,b
 17814  012FBC  6EF6               	movwf	tblptrl,c
 17815  012FBE  0100               	movlb	0	; () banked
 17816  012FC0  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 17817  012FC2  6EF7               	movwf	tblptrh,c
 17818  012FC4  0E99               	movlw	low _InitList
 17819  012FC6  26F6               	addwf	tblptrl,f,c
 17820  012FC8  0EFC               	movlw	high _InitList
 17821  012FCA  22F7               	addwfc	tblptrh,f,c
 17822  012FCC                     	if	1	;There are 3 active tblptr bytes
 17823  012FCC  6AF8               	clrf	tblptru,c
 17824  012FCE  0E00               	movlw	low (__mediumconst shr (0+16))
 17825  012FD0  22F8               	addwfc	tblptru,f,c
 17826  012FD2                     	endif
 17827  012FD2  0008               	tblrd		*
 17828  012FD4  50F5               	movf	tablat,w,c
 17829  012FD6  EC2C  F0B1         	call	_LCD_Write
 17830  012FDA                     l90:
 17831  012FDA  0100               	movlb	0	; () banked
 17832  012FDC  4B97               	infsnz	LCD_Init@i& (0+255),f,b
 17833  012FDE  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
 17834                           
 17835                           ; BSR set to: 0
 17836  012FE0  0100               	movlb	0	; () banked
 17837  012FE2  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 17838  012FE4  E101               	bnz	l14068
 17839  012FE6  D770               	goto	L12
 17840  012FE8                     u10840:
 17841  012FE8                     l14068:
 17842                           
 17843                           ; BSR set to: 0
 17844                           ;LCD.c: 185: }
 17845                           ;LCD.c: 186: }
 17846                           ;LCD.c: 187: delay_ms(100);
 17847  012FE8  0E00               	movlw	0
 17848  012FEA  0100               	movlb	0	; () banked
 17849  012FEC  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 17850  012FEE  0E64               	movlw	100
 17851  012FF0  6F60               	movwf	delay_ms@ms& (0+255),b
 17852  012FF2  ECBD  F0AA         	call	_delay_ms	;wreg free
 17853                           
 17854                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
 17855  012FF6  0E00               	movlw	0
 17856  012FF8  0100               	movlb	0	; () banked
 17857  012FFA  6F63               	movwf	LCD_Write@mode& (0+255),b
 17858  012FFC  0E29               	movlw	41
 17859  012FFE  EC2C  F0B1         	call	_LCD_Write
 17860                           
 17861                           ;LCD.c: 189: Set_Rotation(1);
 17862  013002  0E01               	movlw	1
 17863  013004  ECDC  F0A5         	call	_Set_Rotation
 17864                           
 17865                           ;LCD.c: 191: delay_ms(100);
 17866  013008  0E00               	movlw	0
 17867  01300A  0100               	movlb	0	; () banked
 17868  01300C  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 17869  01300E  0E64               	movlw	100
 17870  013010  6F60               	movwf	delay_ms@ms& (0+255),b
 17871  013012  ECBD  F0AA         	call	_delay_ms	;wreg free
 17872                           
 17873                           ;LCD.c: 192: LCD_Fill(0x0000);
 17874  013016  0E00               	movlw	0
 17875  013018  0100               	movlb	0	; () banked
 17876  01301A  6F6A               	movwf	(LCD_Fill@pColour+1)& (0+255),b
 17877  01301C  0E00               	movlw	0
 17878  01301E  6F69               	movwf	LCD_Fill@pColour& (0+255),b
 17879  013020  ECA8  F0AC         	call	_LCD_Fill	;wreg free
 17880  013024  0012               	return		;funcret
 17881  013026                     __end_of_LCD_Init:
 17882                           	opt stack 0
 17883                           tosu	equ	0xFFF
 17884                           tosh	equ	0xFFE
 17885                           tosl	equ	0xFFD
 17886                           pclath	equ	0xFFA
 17887                           tblptru	equ	0xFF8
 17888                           tblptrh	equ	0xFF7
 17889                           tblptrl	equ	0xFF6
 17890                           tablat	equ	0xFF5
 17891                           prodh	equ	0xFF4
 17892                           prodl	equ	0xFF3
 17893                           intcon	equ	0xFF2
 17894                           postinc0	equ	0xFEE
 17895                           wreg	equ	0xFE8
 17896                           indf1	equ	0xFE7
 17897                           postdec1	equ	0xFE5
 17898                           fsr1h	equ	0xFE2
 17899                           fsr1l	equ	0xFE1
 17900                           indf2	equ	0xFDF
 17901                           postinc2	equ	0xFDE
 17902                           postdec2	equ	0xFDD
 17903                           plusw2	equ	0xFDB
 17904                           fsr2h	equ	0xFDA
 17905                           fsr2l	equ	0xFD9
 17906                           status	equ	0xFD8
 17907                           
 17908 ;; *************** function _Set_Rotation *****************
 17909 ;; Defined at:
 17910 ;;		line 248 in file "Library/LCD.c"
 17911 ;; Parameters:    Size  Location     Type
 17912 ;;  m               1    wreg     unsigned char 
 17913 ;; Auto vars:     Size  Location     Type
 17914 ;;  m               1    5[BANK0 ] unsigned char 
 17915 ;;  rotation        1    6[BANK0 ] unsigned char 
 17916 ;; Return value:  Size  Location     Type
 17917 ;;                  1    wreg      void 
 17918 ;; Registers used:
 17919 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17920 ;; Tracked objects:
 17921 ;;		On entry : 0/0
 17922 ;;		On exit  : 0/0
 17923 ;;		Unchanged: 0/0
 17924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17926 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17928 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17929 ;;Total ram usage:        2 bytes
 17930 ;; Hardware stack levels used:    1
 17931 ;; Hardware stack levels required when called:    9
 17932 ;; This function calls:
 17933 ;;		_LCD_Write
 17934 ;; This function is called by:
 17935 ;;		_LCD_Init
 17936 ;; This function uses a non-reentrant model
 17937 ;;
 17938                           
 17939                           	psect	text80
 17940  014BB8                     __ptext80:
 17941                           	opt stack 0
 17942  014BB8                     _Set_Rotation:
 17943                           	opt stack 19
 17944                           
 17945                           ;incstack = 0
 17946                           ;Set_Rotation@m stored from wreg
 17947  014BB8  0100               	movlb	0	; () banked
 17948  014BBA  6F65               	movwf	Set_Rotation@m& (0+255),b
 17949                           
 17950                           ;LCD.c: 250: UINT8 rotation = 0x00;
 17951  014BBC  0E00               	movlw	0
 17952  014BBE  0100               	movlb	0	; () banked
 17953  014BC0  6F66               	movwf	Set_Rotation@rotation& (0+255),b
 17954                           
 17955                           ; BSR set to: 0
 17956                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
 17957  014BC2  0E00               	movlw	0
 17958  014BC4  0100               	movlb	0	; () banked
 17959  014BC6  6F63               	movwf	LCD_Write@mode& (0+255),b
 17960  014BC8  0E36               	movlw	54
 17961  014BCA  EC2C  F0B1         	call	_LCD_Write
 17962                           
 17963                           ;LCD.c: 253: rotation = (m % 4);
 17964  014BCE  0100               	movlb	0	; () banked
 17965  014BD0  5165               	movf	Set_Rotation@m& (0+255),w,b
 17966  014BD2  0B03               	andlw	3
 17967  014BD4  0100               	movlb	0	; () banked
 17968  014BD6  6F66               	movwf	Set_Rotation@rotation& (0+255),b
 17969                           
 17970                           ;LCD.c: 255: switch(rotation)
 17971  014BD8  D02C               	goto	l117
 17972  014BDA                     
 17973                           ; BSR set to: 0
 17974                           ;LCD.c: 258: {
 17975                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
 17976                           
 17977                           ; BSR set to: 0
 17978  014BDA  0E01               	movlw	1
 17979  014BDC  0100               	movlb	0	; () banked
 17980  014BDE  6F63               	movwf	LCD_Write@mode& (0+255),b
 17981  014BE0  0EC8               	movlw	200
 17982  014BE2  EC2C  F0B1         	call	_LCD_Write
 17983                           
 17984                           ;LCD.c: 260: w = 128;
 17985  014BE6  0E80               	movlw	128
 17986  014BE8  6E50               	movwf	_w,c
 17987                           
 17988                           ;LCD.c: 261: l = 128;
 17989  014BEA  0E80               	movlw	128
 17990  014BEC  6E4F               	movwf	_l,c
 17991                           
 17992                           ;LCD.c: 262: break;
 17993  014BEE  0012               	return	
 17994  014BF0                     
 17995                           ;LCD.c: 265: {
 17996                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
 17997  014BF0  0E01               	movlw	1
 17998  014BF2  0100               	movlb	0	; () banked
 17999  014BF4  6F63               	movwf	LCD_Write@mode& (0+255),b
 18000  014BF6  0EA8               	movlw	168
 18001  014BF8  EC2C  F0B1         	call	_LCD_Write
 18002                           
 18003                           ;LCD.c: 267: w = 128;
 18004  014BFC  0E80               	movlw	128
 18005  014BFE  6E50               	movwf	_w,c
 18006                           
 18007                           ;LCD.c: 268: l = 128;
 18008  014C00  0E80               	movlw	128
 18009  014C02  6E4F               	movwf	_l,c
 18010                           
 18011                           ;LCD.c: 269: break;
 18012  014C04  0012               	return	
 18013  014C06                     
 18014                           ;LCD.c: 272: {
 18015                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
 18016  014C06  0E01               	movlw	1
 18017  014C08  0100               	movlb	0	; () banked
 18018  014C0A  6F63               	movwf	LCD_Write@mode& (0+255),b
 18019  014C0C  0E08               	movlw	8
 18020  014C0E  EC2C  F0B1         	call	_LCD_Write
 18021                           
 18022                           ;LCD.c: 274: w = 128;
 18023  014C12  0E80               	movlw	128
 18024  014C14  6E50               	movwf	_w,c
 18025                           
 18026                           ;LCD.c: 275: l = 128;
 18027  014C16  0E80               	movlw	128
 18028  014C18  6E4F               	movwf	_l,c
 18029                           
 18030                           ;LCD.c: 276: break;
 18031  014C1A  0012               	return	
 18032  014C1C                     
 18033                           ;LCD.c: 279: {
 18034                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
 18035  014C1C  0E01               	movlw	1
 18036  014C1E  0100               	movlb	0	; () banked
 18037  014C20  6F63               	movwf	LCD_Write@mode& (0+255),b
 18038  014C22  0E68               	movlw	104
 18039  014C24  EC2C  F0B1         	call	_LCD_Write
 18040                           
 18041                           ;LCD.c: 281: w = 128;
 18042  014C28  0E80               	movlw	128
 18043  014C2A  6E50               	movwf	_w,c
 18044                           
 18045                           ;LCD.c: 282: l = 128;
 18046  014C2C  0E80               	movlw	128
 18047  014C2E  6E4F               	movwf	_l,c
 18048                           
 18049                           ;LCD.c: 284: }
 18050                           ;LCD.c: 285: }
 18051                           
 18052                           ;LCD.c: 283: break;
 18053  014C30  0012               	return	
 18054  014C32                     l117:
 18055  014C32  0100               	movlb	0	; () banked
 18056  014C34  5166               	movf	Set_Rotation@rotation& (0+255),w,b
 18057                           
 18058                           ; Switch size 1, requested type "space"
 18059                           ; Number of cases is 4, Range of values is 0 to 3
 18060                           ; switch strategies available:
 18061                           ; Name         Instructions Cycles
 18062                           ; simple_byte           13     7 (average)
 18063                           ;	Chosen strategy is simple_byte
 18064  014C36  0A00               	xorlw	0	; case 0
 18065  014C38  B4D8               	btfsc	status,2,c
 18066  014C3A  D7CF               	goto	l118
 18067  014C3C  0A01               	xorlw	1	; case 1
 18068  014C3E  B4D8               	btfsc	status,2,c
 18069  014C40  D7D7               	goto	l120
 18070  014C42  0A03               	xorlw	3	; case 2
 18071  014C44  B4D8               	btfsc	status,2,c
 18072  014C46  D7DF               	goto	l121
 18073  014C48  0A01               	xorlw	1	; case 3
 18074  014C4A  A4D8               	btfss	status,2,c
 18075  014C4C  0012               	return	
 18076  014C4E  D7E6               	goto	l122
 18077  014C50                     __end_of_Set_Rotation:
 18078                           	opt stack 0
 18079                           tosu	equ	0xFFF
 18080                           tosh	equ	0xFFE
 18081                           tosl	equ	0xFFD
 18082                           pclath	equ	0xFFA
 18083                           tblptru	equ	0xFF8
 18084                           tblptrh	equ	0xFF7
 18085                           tblptrl	equ	0xFF6
 18086                           tablat	equ	0xFF5
 18087                           prodh	equ	0xFF4
 18088                           prodl	equ	0xFF3
 18089                           intcon	equ	0xFF2
 18090                           postinc0	equ	0xFEE
 18091                           wreg	equ	0xFE8
 18092                           indf1	equ	0xFE7
 18093                           postdec1	equ	0xFE5
 18094                           fsr1h	equ	0xFE2
 18095                           fsr1l	equ	0xFE1
 18096                           indf2	equ	0xFDF
 18097                           postinc2	equ	0xFDE
 18098                           postdec2	equ	0xFDD
 18099                           plusw2	equ	0xFDB
 18100                           fsr2h	equ	0xFDA
 18101                           fsr2l	equ	0xFD9
 18102                           status	equ	0xFD8
 18103                           
 18104 ;; *************** function _LCD_Fill *****************
 18105 ;; Defined at:
 18106 ;;		line 287 in file "Library/LCD.c"
 18107 ;; Parameters:    Size  Location     Type
 18108 ;;  pColour         2    9[BANK0 ] unsigned short 
 18109 ;; Auto vars:     Size  Location     Type
 18110 ;;  j               1   12[BANK0 ] unsigned char 
 18111 ;;  i               1   11[BANK0 ] unsigned char 
 18112 ;; Return value:  Size  Location     Type
 18113 ;;                  1    wreg      void 
 18114 ;; Registers used:
 18115 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18116 ;; Tracked objects:
 18117 ;;		On entry : 0/0
 18118 ;;		On exit  : 0/0
 18119 ;;		Unchanged: 0/0
 18120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18121 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18122 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18124 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18125 ;;Total ram usage:        4 bytes
 18126 ;; Hardware stack levels used:    1
 18127 ;; Hardware stack levels required when called:   10
 18128 ;; This function calls:
 18129 ;;		_LCD_Word_Write
 18130 ;;		_Set_Addr_Window
 18131 ;; This function is called by:
 18132 ;;		_LCD_Init
 18133 ;; This function uses a non-reentrant model
 18134 ;;
 18135                           
 18136                           	psect	text81
 18137  015950                     __ptext81:
 18138                           	opt stack 0
 18139  015950                     _LCD_Fill:
 18140                           	opt stack 18
 18141                           
 18142                           ;LCD.c: 296: UINT8 i = 0x00;
 18143                           
 18144                           ;incstack = 0
 18145  015950  0E00               	movlw	0
 18146  015952  0100               	movlb	0	; () banked
 18147  015954  6F6B               	movwf	LCD_Fill@i& (0+255),b
 18148                           
 18149                           ;LCD.c: 297: UINT8 j = 0x00;
 18150  015956  0E00               	movlw	0
 18151  015958  0100               	movlb	0	; () banked
 18152  01595A  6F6C               	movwf	LCD_Fill@j& (0+255),b
 18153                           
 18154                           ; BSR set to: 0
 18155                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
 18156  01595C  0E00               	movlw	0
 18157  01595E  0100               	movlb	0	; () banked
 18158  015960  6F65               	movwf	Set_Addr_Window@ys& (0+255),b
 18159  015962  0450               	decf	_w,w,c
 18160  015964  0100               	movlb	0	; () banked
 18161  015966  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 18162  015968  044F               	decf	_l,w,c
 18163  01596A  0100               	movlb	0	; () banked
 18164  01596C  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 18165  01596E  0E00               	movlw	0
 18166  015970  ECF5  F0A2         	call	_Set_Addr_Window
 18167                           
 18168                           ;LCD.c: 299: for (j = l; j > 0; j--)
 18169  015974  C04F  F06C         	movff	_l,LCD_Fill@j
 18170  015978                     l13406:
 18171  015978  0100               	movlb	0	; () banked
 18172  01597A  516C               	movf	LCD_Fill@j& (0+255),w,b
 18173  01597C  0100               	movlb	0	; () banked
 18174  01597E  B4D8               	btfsc	status,2,c
 18175  015980  0012               	return	
 18176                           
 18177                           ; BSR set to: 0
 18178                           ;LCD.c: 300: for (i = w; i > 0; i--)
 18179                           
 18180                           ; BSR set to: 0
 18181  015982  C050  F06B         	movff	_w,LCD_Fill@i
 18182  015986                     l13410:
 18183                           
 18184                           ; BSR set to: 0
 18185  015986  0100               	movlb	0	; () banked
 18186  015988  516B               	movf	LCD_Fill@i& (0+255),w,b
 18187  01598A  0100               	movlb	0	; () banked
 18188  01598C  B4D8               	btfsc	status,2,c
 18189  01598E  D009               	goto	u9900
 18190                           
 18191                           ; BSR set to: 0
 18192                           ;LCD.c: 301: LCD_Word_Write(pColour);
 18193                           
 18194                           ; BSR set to: 0
 18195                           
 18196                           ; BSR set to: 0
 18197  015990  C069  F065         	movff	LCD_Fill@pColour,LCD_Word_Write@value
 18198  015994  C06A  F066         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
 18199  015998  EC8D  F0B1         	call	_LCD_Word_Write	;wreg free
 18200  01599C  0100               	movlb	0	; () banked
 18201  01599E  076B               	decf	LCD_Fill@i& (0+255),f,b
 18202  0159A0  D7F2               	goto	l13410
 18203  0159A2                     u9900:
 18204                           
 18205                           ; BSR set to: 0
 18206                           
 18207                           ; BSR set to: 0
 18208  0159A2  0100               	movlb	0	; () banked
 18209  0159A4  076C               	decf	LCD_Fill@j& (0+255),f,b
 18210  0159A6  D7E8               	goto	l13406
 18211  0159A8                     __end_of_LCD_Fill:
 18212                           	opt stack 0
 18213                           tosu	equ	0xFFF
 18214                           tosh	equ	0xFFE
 18215                           tosl	equ	0xFFD
 18216                           pclath	equ	0xFFA
 18217                           tblptru	equ	0xFF8
 18218                           tblptrh	equ	0xFF7
 18219                           tblptrl	equ	0xFF6
 18220                           tablat	equ	0xFF5
 18221                           prodh	equ	0xFF4
 18222                           prodl	equ	0xFF3
 18223                           intcon	equ	0xFF2
 18224                           postinc0	equ	0xFEE
 18225                           wreg	equ	0xFE8
 18226                           indf1	equ	0xFE7
 18227                           postdec1	equ	0xFE5
 18228                           fsr1h	equ	0xFE2
 18229                           fsr1l	equ	0xFE1
 18230                           indf2	equ	0xFDF
 18231                           postinc2	equ	0xFDE
 18232                           postdec2	equ	0xFDD
 18233                           plusw2	equ	0xFDB
 18234                           fsr2h	equ	0xFDA
 18235                           fsr2l	equ	0xFD9
 18236                           status	equ	0xFD8
 18237                           
 18238 ;; *************** function _Set_Addr_Window *****************
 18239 ;; Defined at:
 18240 ;;		line 214 in file "Library/LCD.c"
 18241 ;; Parameters:    Size  Location     Type
 18242 ;;  xs              1    wreg     unsigned char 
 18243 ;;  ys              1    5[BANK0 ] unsigned char 
 18244 ;;  xe              1    6[BANK0 ] unsigned char 
 18245 ;;  ye              1    7[BANK0 ] unsigned char 
 18246 ;; Auto vars:     Size  Location     Type
 18247 ;;  xs              1    8[BANK0 ] unsigned char 
 18248 ;; Return value:  Size  Location     Type
 18249 ;;                  1    wreg      void 
 18250 ;; Registers used:
 18251 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18252 ;; Tracked objects:
 18253 ;;		On entry : 0/0
 18254 ;;		On exit  : 0/0
 18255 ;;		Unchanged: 0/0
 18256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18257 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18258 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18260 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18261 ;;Total ram usage:        4 bytes
 18262 ;; Hardware stack levels used:    1
 18263 ;; Hardware stack levels required when called:    9
 18264 ;; This function calls:
 18265 ;;		_LCD_Write
 18266 ;; This function is called by:
 18267 ;;		_LCD_Fill
 18268 ;;		_LCD_FillRectangle
 18269 ;;		_LCD_DrawField
 18270 ;;		_RAM_Address_Set
 18271 ;;		_LCD_DrawPixel
 18272 ;; This function uses a non-reentrant model
 18273 ;;
 18274                           
 18275                           	psect	text82
 18276  0145EA                     __ptext82:
 18277                           	opt stack 0
 18278  0145EA                     _Set_Addr_Window:
 18279                           	opt stack 18
 18280                           
 18281                           ; BSR set to: 0
 18282                           ;incstack = 0
 18283                           ;Set_Addr_Window@xs stored from wreg
 18284  0145EA  0100               	movlb	0	; () banked
 18285  0145EC  6F68               	movwf	Set_Addr_Window@xs& (0+255),b
 18286                           
 18287                           ;LCD.c: 216: ys+=2;
 18288  0145EE  0E02               	movlw	2
 18289  0145F0  0100               	movlb	0	; () banked
 18290  0145F2  2765               	addwf	Set_Addr_Window@ys& (0+255),f,b
 18291                           
 18292                           ;LCD.c: 217: ye+=2;
 18293  0145F4  0E02               	movlw	2
 18294  0145F6  0100               	movlb	0	; () banked
 18295  0145F8  2767               	addwf	Set_Addr_Window@ye& (0+255),f,b
 18296                           
 18297                           ;LCD.c: 218: xs+=3;
 18298  0145FA  0E03               	movlw	3
 18299  0145FC  0100               	movlb	0	; () banked
 18300  0145FE  2768               	addwf	Set_Addr_Window@xs& (0+255),f,b
 18301                           
 18302                           ;LCD.c: 219: xe+=3;
 18303  014600  0E03               	movlw	3
 18304  014602  0100               	movlb	0	; () banked
 18305  014604  2766               	addwf	Set_Addr_Window@xe& (0+255),f,b
 18306                           
 18307                           ; BSR set to: 0
 18308                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 18309  014606  0E00               	movlw	0
 18310  014608  0100               	movlb	0	; () banked
 18311  01460A  6F63               	movwf	LCD_Write@mode& (0+255),b
 18312  01460C  0E2A               	movlw	42
 18313  01460E  EC2C  F0B1         	call	_LCD_Write
 18314                           
 18315                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 18316  014612  0E01               	movlw	1
 18317  014614  0100               	movlb	0	; () banked
 18318  014616  6F63               	movwf	LCD_Write@mode& (0+255),b
 18319  014618  0E00               	movlw	0
 18320  01461A  EC2C  F0B1         	call	_LCD_Write
 18321                           
 18322                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 18323  01461E  0E01               	movlw	1
 18324  014620  0100               	movlb	0	; () banked
 18325  014622  6F63               	movwf	LCD_Write@mode& (0+255),b
 18326  014624  0100               	movlb	0	; () banked
 18327  014626  5168               	movf	Set_Addr_Window@xs& (0+255),w,b
 18328  014628  EC2C  F0B1         	call	_LCD_Write
 18329                           
 18330                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 18331  01462C  0E01               	movlw	1
 18332  01462E  0100               	movlb	0	; () banked
 18333  014630  6F63               	movwf	LCD_Write@mode& (0+255),b
 18334  014632  0E00               	movlw	0
 18335  014634  EC2C  F0B1         	call	_LCD_Write
 18336                           
 18337                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 18338  014638  0E01               	movlw	1
 18339  01463A  0100               	movlb	0	; () banked
 18340  01463C  6F63               	movwf	LCD_Write@mode& (0+255),b
 18341  01463E  0100               	movlb	0	; () banked
 18342  014640  5166               	movf	Set_Addr_Window@xe& (0+255),w,b
 18343  014642  EC2C  F0B1         	call	_LCD_Write
 18344                           
 18345                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 18346  014646  0E00               	movlw	0
 18347  014648  0100               	movlb	0	; () banked
 18348  01464A  6F63               	movwf	LCD_Write@mode& (0+255),b
 18349  01464C  0E2B               	movlw	43
 18350  01464E  EC2C  F0B1         	call	_LCD_Write
 18351                           
 18352                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 18353  014652  0E01               	movlw	1
 18354  014654  0100               	movlb	0	; () banked
 18355  014656  6F63               	movwf	LCD_Write@mode& (0+255),b
 18356  014658  0E00               	movlw	0
 18357  01465A  EC2C  F0B1         	call	_LCD_Write
 18358                           
 18359                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 18360  01465E  0E01               	movlw	1
 18361  014660  0100               	movlb	0	; () banked
 18362  014662  6F63               	movwf	LCD_Write@mode& (0+255),b
 18363  014664  0100               	movlb	0	; () banked
 18364  014666  5165               	movf	Set_Addr_Window@ys& (0+255),w,b
 18365  014668  EC2C  F0B1         	call	_LCD_Write
 18366                           
 18367                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 18368  01466C  0E01               	movlw	1
 18369  01466E  0100               	movlb	0	; () banked
 18370  014670  6F63               	movwf	LCD_Write@mode& (0+255),b
 18371  014672  0E00               	movlw	0
 18372  014674  EC2C  F0B1         	call	_LCD_Write
 18373                           
 18374                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 18375  014678  0E01               	movlw	1
 18376  01467A  0100               	movlb	0	; () banked
 18377  01467C  6F63               	movwf	LCD_Write@mode& (0+255),b
 18378  01467E  0100               	movlb	0	; () banked
 18379  014680  5167               	movf	Set_Addr_Window@ye& (0+255),w,b
 18380  014682  EC2C  F0B1         	call	_LCD_Write
 18381                           
 18382                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 18383  014686  0E00               	movlw	0
 18384  014688  0100               	movlb	0	; () banked
 18385  01468A  6F63               	movwf	LCD_Write@mode& (0+255),b
 18386  01468C  0E2C               	movlw	44
 18387  01468E  EC2C  F0B1         	call	_LCD_Write
 18388  014692  0012               	return		;funcret
 18389  014694                     __end_of_Set_Addr_Window:
 18390                           	opt stack 0
 18391                           tosu	equ	0xFFF
 18392                           tosh	equ	0xFFE
 18393                           tosl	equ	0xFFD
 18394                           pclath	equ	0xFFA
 18395                           tblptru	equ	0xFF8
 18396                           tblptrh	equ	0xFF7
 18397                           tblptrl	equ	0xFF6
 18398                           tablat	equ	0xFF5
 18399                           prodh	equ	0xFF4
 18400                           prodl	equ	0xFF3
 18401                           intcon	equ	0xFF2
 18402                           postinc0	equ	0xFEE
 18403                           wreg	equ	0xFE8
 18404                           indf1	equ	0xFE7
 18405                           postdec1	equ	0xFE5
 18406                           fsr1h	equ	0xFE2
 18407                           fsr1l	equ	0xFE1
 18408                           indf2	equ	0xFDF
 18409                           postinc2	equ	0xFDE
 18410                           postdec2	equ	0xFDD
 18411                           plusw2	equ	0xFDB
 18412                           fsr2h	equ	0xFDA
 18413                           fsr2l	equ	0xFD9
 18414                           status	equ	0xFD8
 18415                           
 18416 ;; *************** function _LCD_Word_Write *****************
 18417 ;; Defined at:
 18418 ;;		line 198 in file "Library/LCD.c"
 18419 ;; Parameters:    Size  Location     Type
 18420 ;;  value           2    5[BANK0 ] unsigned short 
 18421 ;; Auto vars:     Size  Location     Type
 18422 ;;		None
 18423 ;; Return value:  Size  Location     Type
 18424 ;;                  1    wreg      void 
 18425 ;; Registers used:
 18426 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18427 ;; Tracked objects:
 18428 ;;		On entry : 0/0
 18429 ;;		On exit  : 0/0
 18430 ;;		Unchanged: 0/0
 18431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18432 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18435 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18436 ;;Total ram usage:        2 bytes
 18437 ;; Hardware stack levels used:    1
 18438 ;; Hardware stack levels required when called:    9
 18439 ;; This function calls:
 18440 ;;		_LCD_Write
 18441 ;; This function is called by:
 18442 ;;		_LCD_Fill
 18443 ;;		_LCD_FillRectangle
 18444 ;;		_LCD_DrawField
 18445 ;;		_LCD_DrawPixel
 18446 ;; This function uses a non-reentrant model
 18447 ;;
 18448                           
 18449                           	psect	text83
 18450  01631A                     __ptext83:
 18451                           	opt stack 0
 18452  01631A                     _LCD_Word_Write:
 18453                           	opt stack 18
 18454                           
 18455                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 18456                           
 18457                           ;incstack = 0
 18458  01631A  0E01               	movlw	1
 18459  01631C  0100               	movlb	0	; () banked
 18460  01631E  6F63               	movwf	LCD_Write@mode& (0+255),b
 18461  016320  0100               	movlb	0	; () banked
 18462  016322  5166               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 18463  016324  EC2C  F0B1         	call	_LCD_Write
 18464                           
 18465                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 18466  016328  0E01               	movlw	1
 18467  01632A  0100               	movlb	0	; () banked
 18468  01632C  6F63               	movwf	LCD_Write@mode& (0+255),b
 18469  01632E  0100               	movlb	0	; () banked
 18470  016330  5165               	movf	LCD_Word_Write@value& (0+255),w,b
 18471  016332  EC2C  F0B1         	call	_LCD_Write
 18472  016336  0012               	return		;funcret
 18473  016338                     __end_of_LCD_Word_Write:
 18474                           	opt stack 0
 18475                           tosu	equ	0xFFF
 18476                           tosh	equ	0xFFE
 18477                           tosl	equ	0xFFD
 18478                           pclath	equ	0xFFA
 18479                           tblptru	equ	0xFF8
 18480                           tblptrh	equ	0xFF7
 18481                           tblptrl	equ	0xFF6
 18482                           tablat	equ	0xFF5
 18483                           prodh	equ	0xFF4
 18484                           prodl	equ	0xFF3
 18485                           intcon	equ	0xFF2
 18486                           postinc0	equ	0xFEE
 18487                           wreg	equ	0xFE8
 18488                           indf1	equ	0xFE7
 18489                           postdec1	equ	0xFE5
 18490                           fsr1h	equ	0xFE2
 18491                           fsr1l	equ	0xFE1
 18492                           indf2	equ	0xFDF
 18493                           postinc2	equ	0xFDE
 18494                           postdec2	equ	0xFDD
 18495                           plusw2	equ	0xFDB
 18496                           fsr2h	equ	0xFDA
 18497                           fsr2l	equ	0xFD9
 18498                           status	equ	0xFD8
 18499                           
 18500 ;; *************** function _LCD_Write *****************
 18501 ;; Defined at:
 18502 ;;		line 67 in file "Library/LCD.c"
 18503 ;; Parameters:    Size  Location     Type
 18504 ;;  value           1    wreg     unsigned char 
 18505 ;;  mode            1    3[BANK0 ] enum E6761
 18506 ;; Auto vars:     Size  Location     Type
 18507 ;;  value           1    4[BANK0 ] unsigned char 
 18508 ;; Return value:  Size  Location     Type
 18509 ;;                  1    wreg      void 
 18510 ;; Registers used:
 18511 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18512 ;; Tracked objects:
 18513 ;;		On entry : 0/0
 18514 ;;		On exit  : 0/0
 18515 ;;		Unchanged: 0/0
 18516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18517 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18518 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18520 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18521 ;;Total ram usage:        2 bytes
 18522 ;; Hardware stack levels used:    1
 18523 ;; Hardware stack levels required when called:    8
 18524 ;; This function calls:
 18525 ;;		_Mode_Set
 18526 ;;		_SPI_Send
 18527 ;; This function is called by:
 18528 ;;		_LCD_Init
 18529 ;;		_LCD_Word_Write
 18530 ;;		_Set_Addr_Window
 18531 ;;		_Set_Rotation
 18532 ;;		_LCD_WriteCMD
 18533 ;;		_LCD_WriteData
 18534 ;;		_LCD_Data_Write
 18535 ;;		_LCD_Data_Write_4k
 18536 ;;		_Invert_Display
 18537 ;; This function uses a non-reentrant model
 18538 ;;
 18539                           
 18540                           	psect	text84
 18541  016258                     __ptext84:
 18542                           	opt stack 0
 18543  016258                     _LCD_Write:
 18544                           	opt stack 18
 18545                           
 18546                           ;incstack = 0
 18547                           ;LCD_Write@value stored from wreg
 18548  016258  0100               	movlb	0	; () banked
 18549  01625A  6F64               	movwf	LCD_Write@value& (0+255),b
 18550                           
 18551                           ;LCD.c: 89: Mode_Set(mode);
 18552  01625C  0100               	movlb	0	; () banked
 18553  01625E  5163               	movf	LCD_Write@mode& (0+255),w,b
 18554  016260  ECB1  F0B2         	call	_Mode_Set
 18555                           
 18556                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 18557  016264  0E65               	movlw	low _SPI2
 18558  016266  0100               	movlb	0	; () banked
 18559  016268  6F60               	movwf	SPI_Send@pInput& (0+255),b
 18560  01626A  0E03               	movlw	high _SPI2
 18561  01626C  0100               	movlb	0	; () banked
 18562  01626E  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 18563  016270  C064  F062         	movff	LCD_Write@value,SPI_Send@pData
 18564  016274  EC1C  F0AA         	call	_SPI_Send	;wreg free
 18565  016278  0012               	return		;funcret
 18566  01627A                     __end_of_LCD_Write:
 18567                           	opt stack 0
 18568                           tosu	equ	0xFFF
 18569                           tosh	equ	0xFFE
 18570                           tosl	equ	0xFFD
 18571                           pclath	equ	0xFFA
 18572                           tblptru	equ	0xFF8
 18573                           tblptrh	equ	0xFF7
 18574                           tblptrl	equ	0xFF6
 18575                           tablat	equ	0xFF5
 18576                           prodh	equ	0xFF4
 18577                           prodl	equ	0xFF3
 18578                           intcon	equ	0xFF2
 18579                           postinc0	equ	0xFEE
 18580                           wreg	equ	0xFE8
 18581                           indf1	equ	0xFE7
 18582                           postdec1	equ	0xFE5
 18583                           fsr1h	equ	0xFE2
 18584                           fsr1l	equ	0xFE1
 18585                           indf2	equ	0xFDF
 18586                           postinc2	equ	0xFDE
 18587                           postdec2	equ	0xFDD
 18588                           plusw2	equ	0xFDB
 18589                           fsr2h	equ	0xFDA
 18590                           fsr2l	equ	0xFD9
 18591                           status	equ	0xFD8
 18592                           
 18593 ;; *************** function _SPI_Send *****************
 18594 ;; Defined at:
 18595 ;;		line 226 in file "Library/SPI.c"
 18596 ;; Parameters:    Size  Location     Type
 18597 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 18598 ;;		 -> SPI1(11), SPI2(11), 
 18599 ;;  pData           1    2[BANK0 ] unsigned char 
 18600 ;; Auto vars:     Size  Location     Type
 18601 ;;		None
 18602 ;; Return value:  Size  Location     Type
 18603 ;;                  1    wreg      unsigned char 
 18604 ;; Registers used:
 18605 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18606 ;; Tracked objects:
 18607 ;;		On entry : 0/0
 18608 ;;		On exit  : 0/0
 18609 ;;		Unchanged: 0/0
 18610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18611 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18614 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18615 ;;Total ram usage:        3 bytes
 18616 ;; Hardware stack levels used:    1
 18617 ;; Hardware stack levels required when called:    7
 18618 ;; This function calls:
 18619 ;;		Nothing
 18620 ;; This function is called by:
 18621 ;;		_LCD_Write
 18622 ;;		_OutSeg
 18623 ;; This function uses a non-reentrant model
 18624 ;;
 18625                           
 18626                           	psect	text85
 18627  015438                     __ptext85:
 18628                           	opt stack 0
 18629  015438                     _SPI_Send:
 18630                           	opt stack 20
 18631                           
 18632                           ;SPI.c: 253: switch (pInput->mChannel)
 18633                           
 18634                           ;incstack = 0
 18635  015438  D026               	goto	l678
 18636  01543A                     
 18637                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 18638  01543A  C0EE  FFD9         	movff	_PortC+4,fsr2l
 18639  01543E  C0EF  FFDA         	movff	_PortC+5,fsr2h
 18640  015442  0100               	movlb	0	; () banked
 18641  015444  94DF               	bcf	indf2,2,c
 18642                           
 18643                           ; BSR set to: 0
 18644                           ;SPI.c: 257: SSP1BUF = pData;
 18645  015446  C062  FFC9         	movff	SPI_Send@pData,4041	;volatile
 18646  01544A                     
 18647                           ; BSR set to: 0
 18648  01544A  A0C7               	btfss	4039,0,c	;volatile
 18649  01544C  D7FE               	goto	l681
 18650                           
 18651                           ;SPI.c: 259: pData = SSP1BUF;
 18652  01544E  CFC9 F062          	movff	4041,SPI_Send@pData	;volatile
 18653                           
 18654                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 18655  015452  C0EE  FFD9         	movff	_PortC+4,fsr2l
 18656  015456  C0EF  FFDA         	movff	_PortC+5,fsr2h
 18657  01545A  0100               	movlb	0	; () banked
 18658  01545C  84DF               	bsf	indf2,2,c
 18659                           
 18660                           ; BSR set to: 0
 18661                           ;SPI.c: 261: return pData;
 18662                           ;	Return value of _SPI_Send is never used
 18663  01545E  0012               	return	
 18664  015460                     
 18665                           ; BSR set to: 0
 18666                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 18667                           
 18668                           ; BSR set to: 0
 18669  015460  C39C  FFD9         	movff	_PortD+4,fsr2l
 18670  015464  C39D  FFDA         	movff	_PortD+5,fsr2h
 18671  015468  0103               	movlb	3	; () banked
 18672  01546A  9EDF               	bcf	indf2,7,c
 18673                           
 18674                           ; BSR set to: 3
 18675                           ;SPI.c: 264: SSP2BUF = pData;
 18676  01546C  C062  FF6F         	movff	SPI_Send@pData,3951	;volatile
 18677  015470                     
 18678                           ; BSR set to: 3
 18679  015470  A06D               	btfss	3949,0,c	;volatile
 18680  015472  D7FE               	goto	l686
 18681                           
 18682                           ;SPI.c: 266: pData = SSP2BUF;
 18683  015474  CF6F F062          	movff	3951,SPI_Send@pData	;volatile
 18684                           
 18685                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 18686  015478  C39C  FFD9         	movff	_PortD+4,fsr2l
 18687  01547C  C39D  FFDA         	movff	_PortD+5,fsr2h
 18688  015480  0103               	movlb	3	; () banked
 18689  015482  8EDF               	bsf	indf2,7,c
 18690                           
 18691                           ; BSR set to: 3
 18692                           ;SPI.c: 269: };
 18693                           
 18694                           ; BSR set to: 3
 18695                           ;SPI.c: 268: return pData;
 18696                           ;	Return value of _SPI_Send is never used
 18697  015484  0012               	return	
 18698  015486                     l678:
 18699                           
 18700                           ; BSR set to: 3
 18701  015486  0100               	movlb	0	; () banked
 18702  015488  EE20 F002          	lfsr	2,2
 18703  01548C  5160               	movf	SPI_Send@pInput& (0+255),w,b
 18704  01548E  26D9               	addwf	fsr2l,f,c
 18705  015490  5161               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 18706  015492  22DA               	addwfc	fsr2h,f,c
 18707  015494  50DF               	movf	indf2,w,c
 18708                           
 18709                           ; Switch size 1, requested type "space"
 18710                           ; Number of cases is 2, Range of values is 0 to 1
 18711                           ; switch strategies available:
 18712                           ; Name         Instructions Cycles
 18713                           ; simple_byte            7     4 (average)
 18714                           ;	Chosen strategy is simple_byte
 18715  015496  0A00               	xorlw	0	; case 0
 18716  015498  B4D8               	btfsc	status,2,c
 18717  01549A  D7CF               	goto	l679
 18718  01549C  0A01               	xorlw	1	; case 1
 18719  01549E  A4D8               	btfss	status,2,c
 18720  0154A0  0012               	return	
 18721  0154A2  D7DE               	goto	l684
 18722  0154A4                     __end_of_SPI_Send:
 18723                           	opt stack 0
 18724                           tosu	equ	0xFFF
 18725                           tosh	equ	0xFFE
 18726                           tosl	equ	0xFFD
 18727                           pclath	equ	0xFFA
 18728                           tblptru	equ	0xFF8
 18729                           tblptrh	equ	0xFF7
 18730                           tblptrl	equ	0xFF6
 18731                           tablat	equ	0xFF5
 18732                           prodh	equ	0xFF4
 18733                           prodl	equ	0xFF3
 18734                           intcon	equ	0xFF2
 18735                           postinc0	equ	0xFEE
 18736                           wreg	equ	0xFE8
 18737                           indf1	equ	0xFE7
 18738                           postdec1	equ	0xFE5
 18739                           fsr1h	equ	0xFE2
 18740                           fsr1l	equ	0xFE1
 18741                           indf2	equ	0xFDF
 18742                           postinc2	equ	0xFDE
 18743                           postdec2	equ	0xFDD
 18744                           plusw2	equ	0xFDB
 18745                           fsr2h	equ	0xFDA
 18746                           fsr2l	equ	0xFD9
 18747                           status	equ	0xFD8
 18748                           
 18749 ;; *************** function _Mode_Set *****************
 18750 ;; Defined at:
 18751 ;;		line 40 in file "Library/LCD.c"
 18752 ;; Parameters:    Size  Location     Type
 18753 ;;  pMode           1    wreg     enum E6761
 18754 ;; Auto vars:     Size  Location     Type
 18755 ;;  pMode           1    0[BANK0 ] enum E6761
 18756 ;; Return value:  Size  Location     Type
 18757 ;;                  1    wreg      void 
 18758 ;; Registers used:
 18759 ;;		wreg
 18760 ;; Tracked objects:
 18761 ;;		On entry : 0/0
 18762 ;;		On exit  : 0/0
 18763 ;;		Unchanged: 0/0
 18764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18766 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18768 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18769 ;;Total ram usage:        1 bytes
 18770 ;; Hardware stack levels used:    1
 18771 ;; Hardware stack levels required when called:    7
 18772 ;; This function calls:
 18773 ;;		Nothing
 18774 ;; This function is called by:
 18775 ;;		_LCD_Write
 18776 ;; This function uses a non-reentrant model
 18777 ;;
 18778                           
 18779                           	psect	text86
 18780  016562                     __ptext86:
 18781                           	opt stack 0
 18782  016562                     _Mode_Set:
 18783                           	opt stack 18
 18784                           
 18785                           ;incstack = 0
 18786                           ;Mode_Set@pMode stored from wreg
 18787  016562  0100               	movlb	0	; () banked
 18788  016564  6F60               	movwf	Mode_Set@pMode& (0+255),b
 18789                           
 18790                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 18791  016566  0100               	movlb	0	; () banked
 18792  016568  B160               	btfsc	Mode_Set@pMode& (0+255),0,b
 18793  01656A  D002               	bra	u8985
 18794  01656C  9E85               	bcf	3973,7,c	;volatile
 18795  01656E  D001               	bra	u8986
 18796  016570                     u8985:
 18797  016570  8E85               	bsf	3973,7,c	;volatile
 18798  016572                     u8986:
 18799  016572  0012               	return		;funcret
 18800  016574                     __end_of_Mode_Set:
 18801                           	opt stack 0
 18802                           tosu	equ	0xFFF
 18803                           tosh	equ	0xFFE
 18804                           tosl	equ	0xFFD
 18805                           pclath	equ	0xFFA
 18806                           tblptru	equ	0xFF8
 18807                           tblptrh	equ	0xFF7
 18808                           tblptrl	equ	0xFF6
 18809                           tablat	equ	0xFF5
 18810                           prodh	equ	0xFF4
 18811                           prodl	equ	0xFF3
 18812                           intcon	equ	0xFF2
 18813                           postinc0	equ	0xFEE
 18814                           wreg	equ	0xFE8
 18815                           indf1	equ	0xFE7
 18816                           postdec1	equ	0xFE5
 18817                           fsr1h	equ	0xFE2
 18818                           fsr1l	equ	0xFE1
 18819                           indf2	equ	0xFDF
 18820                           postinc2	equ	0xFDE
 18821                           postdec2	equ	0xFDD
 18822                           plusw2	equ	0xFDB
 18823                           fsr2h	equ	0xFDA
 18824                           fsr2l	equ	0xFD9
 18825                           status	equ	0xFD8
 18826                           
 18827 ;; *************** function _Configure_GPIOs *****************
 18828 ;; Defined at:
 18829 ;;		line 46 in file "Library/LCD.c"
 18830 ;; Parameters:    Size  Location     Type
 18831 ;;		None
 18832 ;; Auto vars:     Size  Location     Type
 18833 ;;		None
 18834 ;; Return value:  Size  Location     Type
 18835 ;;                  1    wreg      void 
 18836 ;; Registers used:
 18837 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18838 ;; Tracked objects:
 18839 ;;		On entry : 0/0
 18840 ;;		On exit  : 0/0
 18841 ;;		Unchanged: 0/0
 18842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18846 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18847 ;;Total ram usage:        0 bytes
 18848 ;; Hardware stack levels used:    1
 18849 ;; Hardware stack levels required when called:   14
 18850 ;; This function calls:
 18851 ;;		_LCD_Reset
 18852 ;;		_Port_SetPinType
 18853 ;;		_SPI_Init
 18854 ;;		_SPI_MaxSpeed
 18855 ;; This function is called by:
 18856 ;;		_LCD_Init
 18857 ;; This function uses a non-reentrant model
 18858 ;;
 18859                           
 18860                           	psect	text87
 18861  0153C8                     __ptext87:
 18862                           	opt stack 0
 18863  0153C8                     _Configure_GPIOs:
 18864                           	opt stack 14
 18865                           
 18866                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
 18867                           
 18868                           ;incstack = 0
 18869  0153C8  0EB6               	movlw	low _PortF
 18870  0153CA  0100               	movlb	0	; () banked
 18871  0153CC  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 18872  0153CE  0E03               	movlw	high _PortF
 18873  0153D0  0100               	movlb	0	; () banked
 18874  0153D2  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18875  0153D4  0E07               	movlw	7
 18876  0153D6  0100               	movlb	0	; () banked
 18877  0153D8  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 18878  0153DA  0E03               	movlw	3
 18879  0153DC  0100               	movlb	0	; () banked
 18880  0153DE  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 18881  0153E0  EC5F  F093         	call	_Port_SetPinType	;wreg free
 18882                           
 18883                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
 18884  0153E4  0EB6               	movlw	low _PortF
 18885  0153E6  0100               	movlb	0	; () banked
 18886  0153E8  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 18887  0153EA  0E03               	movlw	high _PortF
 18888  0153EC  0100               	movlb	0	; () banked
 18889  0153EE  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18890  0153F0  0E06               	movlw	6
 18891  0153F2  0100               	movlb	0	; () banked
 18892  0153F4  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 18893  0153F6  0E03               	movlw	3
 18894  0153F8  0100               	movlb	0	; () banked
 18895  0153FA  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 18896  0153FC  EC5F  F093         	call	_Port_SetPinType	;wreg free
 18897                           
 18898                           ;LCD.c: 55: LCD_Reset();
 18899  015400  EC25  F0AD         	call	_LCD_Reset	;wreg free
 18900                           
 18901                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
 18902  015404  0EC0               	movlw	192
 18903  015406  0100               	movlb	0	; () banked
 18904  015408  6F8D               	movwf	SPI_Init@pClock& (0+255),b
 18905  01540A  0EC6               	movlw	198
 18906  01540C  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
 18907  01540E  0E2D               	movlw	45
 18908  015410  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
 18909  015412  0E00               	movlw	0
 18910  015414  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
 18911  015416  0E01               	movlw	1
 18912  015418  0100               	movlb	0	; () banked
 18913  01541A  6F91               	movwf	SPI_Init@pChannel& (0+255),b
 18914  01541C  0E01               	movlw	1
 18915  01541E  0100               	movlb	0	; () banked
 18916  015420  6F92               	movwf	SPI_Init@pMode& (0+255),b
 18917  015422  EC53  F082         	call	_SPI_Init	;wreg free
 18918                           
 18919                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
 18920  015426  0E65               	movlw	low _SPI2
 18921  015428  0100               	movlb	0	; () banked
 18922  01542A  6F6F               	movwf	SPI_MaxSpeed@pInput& (0+255),b
 18923  01542C  0E03               	movlw	high _SPI2
 18924  01542E  0100               	movlb	0	; () banked
 18925  015430  6F70               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
 18926  015432  EC36  F0A9         	call	_SPI_MaxSpeed	;wreg free
 18927  015436  0012               	return		;funcret
 18928  015438                     __end_of_Configure_GPIOs:
 18929                           	opt stack 0
 18930                           tosu	equ	0xFFF
 18931                           tosh	equ	0xFFE
 18932                           tosl	equ	0xFFD
 18933                           pclath	equ	0xFFA
 18934                           tblptru	equ	0xFF8
 18935                           tblptrh	equ	0xFF7
 18936                           tblptrl	equ	0xFF6
 18937                           tablat	equ	0xFF5
 18938                           prodh	equ	0xFF4
 18939                           prodl	equ	0xFF3
 18940                           intcon	equ	0xFF2
 18941                           postinc0	equ	0xFEE
 18942                           wreg	equ	0xFE8
 18943                           indf1	equ	0xFE7
 18944                           postdec1	equ	0xFE5
 18945                           fsr1h	equ	0xFE2
 18946                           fsr1l	equ	0xFE1
 18947                           indf2	equ	0xFDF
 18948                           postinc2	equ	0xFDE
 18949                           postdec2	equ	0xFDD
 18950                           plusw2	equ	0xFDB
 18951                           fsr2h	equ	0xFDA
 18952                           fsr2l	equ	0xFD9
 18953                           status	equ	0xFD8
 18954                           
 18955 ;; *************** function _SPI_MaxSpeed *****************
 18956 ;; Defined at:
 18957 ;;		line 201 in file "Library/SPI.c"
 18958 ;; Parameters:    Size  Location     Type
 18959 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 18960 ;;		 -> SPI2(11), 
 18961 ;; Auto vars:     Size  Location     Type
 18962 ;;		None
 18963 ;; Return value:  Size  Location     Type
 18964 ;;                  1    wreg      void 
 18965 ;; Registers used:
 18966 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18967 ;; Tracked objects:
 18968 ;;		On entry : 0/0
 18969 ;;		On exit  : 0/0
 18970 ;;		Unchanged: 0/0
 18971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18972 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18975 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18976 ;;Total ram usage:        2 bytes
 18977 ;; Hardware stack levels used:    1
 18978 ;; Hardware stack levels required when called:    9
 18979 ;; This function calls:
 18980 ;;		_Byte_SetBit
 18981 ;;		_Byte_SetQuad
 18982 ;; This function is called by:
 18983 ;;		_Configure_GPIOs
 18984 ;; This function uses a non-reentrant model
 18985 ;;
 18986                           
 18987                           	psect	text88
 18988  01526C                     __ptext88:
 18989                           	opt stack 0
 18990  01526C                     _SPI_MaxSpeed:
 18991                           	opt stack 18
 18992                           
 18993                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 18994                           
 18995                           ;incstack = 0
 18996  01526C  0100               	movlb	0	; () banked
 18997  01526E  EE20 F006          	lfsr	2,6
 18998  015272  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 18999  015274  26D9               	addwf	fsr2l,f,c
 19000  015276  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 19001  015278  22DA               	addwfc	fsr2h,f,c
 19002  01527A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 19003  01527E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 19004  015282  0E05               	movlw	5
 19005  015284  0100               	movlb	0	; () banked
 19006  015286  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 19007  015288  0E00               	movlw	0
 19008  01528A  0100               	movlb	0	; () banked
 19009  01528C  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 19010  01528E  EC8D  F0AB         	call	_Byte_SetBit	;wreg free
 19011                           
 19012                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
 19013  015292  0100               	movlb	0	; () banked
 19014  015294  EE20 F006          	lfsr	2,6
 19015  015298  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 19016  01529A  26D9               	addwf	fsr2l,f,c
 19017  01529C  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 19018  01529E  22DA               	addwfc	fsr2h,f,c
 19019  0152A0  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 19020  0152A4  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 19021  0152A8  0E00               	movlw	0
 19022  0152AA  0100               	movlb	0	; () banked
 19023  0152AC  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 19024  0152AE  0E00               	movlw	0
 19025  0152B0  0100               	movlb	0	; () banked
 19026  0152B2  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 19027  0152B4  EC4E  F0B1         	call	_Byte_SetQuad	;wreg free
 19028                           
 19029                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 19030  0152B8  0100               	movlb	0	; () banked
 19031  0152BA  EE20 F006          	lfsr	2,6
 19032  0152BE  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 19033  0152C0  26D9               	addwf	fsr2l,f,c
 19034  0152C2  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 19035  0152C4  22DA               	addwfc	fsr2h,f,c
 19036  0152C6  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 19037  0152CA  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 19038  0152CE  0E05               	movlw	5
 19039  0152D0  0100               	movlb	0	; () banked
 19040  0152D2  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 19041  0152D4  0E01               	movlw	1
 19042  0152D6  0100               	movlb	0	; () banked
 19043  0152D8  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 19044  0152DA  EC8D  F0AB         	call	_Byte_SetBit	;wreg free
 19045  0152DE  0012               	return		;funcret
 19046  0152E0                     __end_of_SPI_MaxSpeed:
 19047                           	opt stack 0
 19048                           tosu	equ	0xFFF
 19049                           tosh	equ	0xFFE
 19050                           tosl	equ	0xFFD
 19051                           pclath	equ	0xFFA
 19052                           tblptru	equ	0xFF8
 19053                           tblptrh	equ	0xFF7
 19054                           tblptrl	equ	0xFF6
 19055                           tablat	equ	0xFF5
 19056                           prodh	equ	0xFF4
 19057                           prodl	equ	0xFF3
 19058                           intcon	equ	0xFF2
 19059                           postinc0	equ	0xFEE
 19060                           wreg	equ	0xFE8
 19061                           indf1	equ	0xFE7
 19062                           postdec1	equ	0xFE5
 19063                           fsr1h	equ	0xFE2
 19064                           fsr1l	equ	0xFE1
 19065                           indf2	equ	0xFDF
 19066                           postinc2	equ	0xFDE
 19067                           postdec2	equ	0xFDD
 19068                           plusw2	equ	0xFDB
 19069                           fsr2h	equ	0xFDA
 19070                           fsr2l	equ	0xFD9
 19071                           status	equ	0xFD8
 19072                           
 19073 ;; *************** function _LCD_Reset *****************
 19074 ;; Defined at:
 19075 ;;		line 95 in file "Library/LCD.c"
 19076 ;; Parameters:    Size  Location     Type
 19077 ;;		None
 19078 ;; Auto vars:     Size  Location     Type
 19079 ;;		None
 19080 ;; Return value:  Size  Location     Type
 19081 ;;                  1    wreg      void 
 19082 ;; Registers used:
 19083 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19084 ;; Tracked objects:
 19085 ;;		On entry : 0/0
 19086 ;;		On exit  : 0/0
 19087 ;;		Unchanged: 0/0
 19088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19092 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19093 ;;Total ram usage:        0 bytes
 19094 ;; Hardware stack levels used:    1
 19095 ;; Hardware stack levels required when called:   13
 19096 ;; This function calls:
 19097 ;;		_LED_Toggle
 19098 ;;		_Reset_High
 19099 ;;		_Reset_Low
 19100 ;;		_delay_ms
 19101 ;; This function is called by:
 19102 ;;		_Configure_GPIOs
 19103 ;; This function uses a non-reentrant model
 19104 ;;
 19105                           
 19106                           	psect	text89
 19107  015A4A                     __ptext89:
 19108                           	opt stack 0
 19109  015A4A                     _LCD_Reset:
 19110                           	opt stack 14
 19111                           
 19112                           ;LCD.c: 97: Reset_High();
 19113                           
 19114                           ;incstack = 0
 19115  015A4A  ECAB  F0B1         	call	_Reset_High	;wreg free
 19116                           
 19117                           ;LCD.c: 98: LED_Toggle(eLED2);
 19118  015A4E  0E01               	movlw	1
 19119  015A50  ECE0  F0AD         	call	_LED_Toggle
 19120                           
 19121                           ;LCD.c: 99: delay_ms(0x80);
 19122  015A54  0E00               	movlw	0
 19123  015A56  0100               	movlb	0	; () banked
 19124  015A58  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 19125  015A5A  0E80               	movlw	128
 19126  015A5C  6F60               	movwf	delay_ms@ms& (0+255),b
 19127  015A5E  ECBD  F0AA         	call	_delay_ms	;wreg free
 19128                           
 19129                           ;LCD.c: 100: LED_Toggle(eLED2);
 19130  015A62  0E01               	movlw	1
 19131  015A64  ECE0  F0AD         	call	_LED_Toggle
 19132                           
 19133                           ;LCD.c: 101: Reset_Low();
 19134  015A68  EC9C  F0B1         	call	_Reset_Low	;wreg free
 19135                           
 19136                           ;LCD.c: 102: delay_ms(0x80);
 19137  015A6C  0E00               	movlw	0
 19138  015A6E  0100               	movlb	0	; () banked
 19139  015A70  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 19140  015A72  0E80               	movlw	128
 19141  015A74  6F60               	movwf	delay_ms@ms& (0+255),b
 19142  015A76  ECBD  F0AA         	call	_delay_ms	;wreg free
 19143                           
 19144                           ;LCD.c: 103: LED_Toggle(eLED2);
 19145  015A7A  0E01               	movlw	1
 19146  015A7C  ECE0  F0AD         	call	_LED_Toggle
 19147                           
 19148                           ;LCD.c: 104: Reset_High();
 19149  015A80  ECAB  F0B1         	call	_Reset_High	;wreg free
 19150                           
 19151                           ;LCD.c: 105: delay_ms(0x80);
 19152  015A84  0E00               	movlw	0
 19153  015A86  0100               	movlb	0	; () banked
 19154  015A88  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 19155  015A8A  0E80               	movlw	128
 19156  015A8C  6F60               	movwf	delay_ms@ms& (0+255),b
 19157  015A8E  ECBD  F0AA         	call	_delay_ms	;wreg free
 19158                           
 19159                           ;LCD.c: 106: LED_Toggle(eLED2);
 19160  015A92  0E01               	movlw	1
 19161  015A94  ECE0  F0AD         	call	_LED_Toggle
 19162  015A98  0012               	return		;funcret
 19163  015A9A                     __end_of_LCD_Reset:
 19164                           	opt stack 0
 19165                           tosu	equ	0xFFF
 19166                           tosh	equ	0xFFE
 19167                           tosl	equ	0xFFD
 19168                           pclath	equ	0xFFA
 19169                           tblptru	equ	0xFF8
 19170                           tblptrh	equ	0xFF7
 19171                           tblptrl	equ	0xFF6
 19172                           tablat	equ	0xFF5
 19173                           prodh	equ	0xFF4
 19174                           prodl	equ	0xFF3
 19175                           intcon	equ	0xFF2
 19176                           postinc0	equ	0xFEE
 19177                           wreg	equ	0xFE8
 19178                           indf1	equ	0xFE7
 19179                           postdec1	equ	0xFE5
 19180                           fsr1h	equ	0xFE2
 19181                           fsr1l	equ	0xFE1
 19182                           indf2	equ	0xFDF
 19183                           postinc2	equ	0xFDE
 19184                           postdec2	equ	0xFDD
 19185                           plusw2	equ	0xFDB
 19186                           fsr2h	equ	0xFDA
 19187                           fsr2l	equ	0xFD9
 19188                           status	equ	0xFD8
 19189                           
 19190 ;; *************** function _delay_ms *****************
 19191 ;; Defined at:
 19192 ;;		line 240 in file "Library/Types.c"
 19193 ;; Parameters:    Size  Location     Type
 19194 ;;  ms              2    0[BANK0 ] unsigned short 
 19195 ;; Auto vars:     Size  Location     Type
 19196 ;;  u               4    2[BANK0 ] volatile unsigned long 
 19197 ;; Return value:  Size  Location     Type
 19198 ;;                  1    wreg      void 
 19199 ;; Registers used:
 19200 ;;		wreg, status,2, status,0
 19201 ;; Tracked objects:
 19202 ;;		On entry : 0/0
 19203 ;;		On exit  : 0/0
 19204 ;;		Unchanged: 0/0
 19205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19206 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19207 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19209 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19210 ;;Total ram usage:        6 bytes
 19211 ;; Hardware stack levels used:    1
 19212 ;; Hardware stack levels required when called:    7
 19213 ;; This function calls:
 19214 ;;		Nothing
 19215 ;; This function is called by:
 19216 ;;		_LCD_Reset
 19217 ;;		_LCD_Init
 19218 ;;		_MXK_Init
 19219 ;;		_init
 19220 ;; This function uses a non-reentrant model
 19221 ;;
 19222                           
 19223                           	psect	text90
 19224  01557A                     __ptext90:
 19225                           	opt stack 0
 19226  01557A                     _delay_ms:
 19227                           	opt stack 22
 19228                           
 19229                           ;Types.c: 242: volatile unsigned long u;
 19230                           ;Types.c: 243: while (ms--)
 19231                           
 19232                           ;incstack = 0
 19233  01557A  D01F               	goto	u9320
 19234  01557C                     l12614:
 19235                           
 19236                           ;Types.c: 244: {
 19237                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 19238  01557C  0E00               	movlw	0
 19239  01557E  0100               	movlb	0	; () banked
 19240  015580  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
 19241  015582  0E00               	movlw	0
 19242  015584  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 19243  015586  0E00               	movlw	0
 19244  015588  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 19245  01558A  0E00               	movlw	0
 19246  01558C  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 19247  01558E                     l12616:
 19248                           
 19249                           ; BSR set to: 0
 19250  01558E  0100               	movlb	0	; () banked
 19251  015590  5165               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 19252  015592  0100               	movlb	0	; () banked
 19253  015594  1164               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 19254  015596  E111               	bnz	l12622
 19255  015598  0EB0               	movlw	176
 19256  01559A  0100               	movlb	0	; () banked
 19257  01559C  5D62               	subwf	delay_ms@u& (0+255),w,b	;volatile
 19258  01559E  0E04               	movlw	4
 19259  0155A0  0100               	movlb	0	; () banked
 19260  0155A2  5963               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 19261  0155A4  B0D8               	btfsc	status,0,c
 19262  0155A6  D009               	goto	u9320
 19263                           
 19264                           ; BSR set to: 0
 19265                           
 19266                           ; BSR set to: 0
 19267  0155A8  F000               	nop		; ;# 
 19268  0155AA  0E01               	movlw	1
 19269  0155AC  0100               	movlb	0	; () banked
 19270  0155AE  2762               	addwf	delay_ms@u& (0+255),f,b	;volatile
 19271  0155B0  0E00               	movlw	0
 19272  0155B2  2363               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 19273  0155B4  2364               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 19274  0155B6  2365               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 19275  0155B8  D7EA               	goto	l12616
 19276  0155BA                     u9320:
 19277  0155BA                     l12622:
 19278  0155BA  0100               	movlb	0	; () banked
 19279  0155BC  0760               	decf	delay_ms@ms& (0+255),f,b
 19280  0155BE  A0D8               	btfss	status,0,c
 19281  0155C0  0761               	decf	(delay_ms@ms+1)& (0+255),f,b
 19282  0155C2  0100               	movlb	0	; () banked
 19283  0155C4  2960               	incf	delay_ms@ms& (0+255),w,b
 19284  0155C6  E1DA               	bnz	l12614
 19285  0155C8  0100               	movlb	0	; () banked
 19286  0155CA  2961               	incf	(delay_ms@ms+1)& (0+255),w,b
 19287  0155CC  A4D8               	btfss	status,2,c
 19288  0155CE  D7D6               	goto	l824
 19289                           
 19290                           ; BSR set to: 0
 19291                           ;Types.c: 251: }
 19292                           ;Types.c: 252: }
 19293                           ;Types.c: 253: u = 0x8008;
 19294                           
 19295                           ; BSR set to: 0
 19296  0155D0  0E08               	movlw	8
 19297  0155D2  0100               	movlb	0	; () banked
 19298  0155D4  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
 19299  0155D6  0E80               	movlw	128
 19300  0155D8  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 19301  0155DA  0E00               	movlw	0
 19302  0155DC  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 19303  0155DE  0E00               	movlw	0
 19304  0155E0  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 19305                           
 19306                           ; BSR set to: 0
 19307  0155E2  0012               	return		;funcret
 19308  0155E4                     __end_of_delay_ms:
 19309                           	opt stack 0
 19310                           tosu	equ	0xFFF
 19311                           tosh	equ	0xFFE
 19312                           tosl	equ	0xFFD
 19313                           pclath	equ	0xFFA
 19314                           tblptru	equ	0xFF8
 19315                           tblptrh	equ	0xFF7
 19316                           tblptrl	equ	0xFF6
 19317                           tablat	equ	0xFF5
 19318                           prodh	equ	0xFF4
 19319                           prodl	equ	0xFF3
 19320                           intcon	equ	0xFF2
 19321                           postinc0	equ	0xFEE
 19322                           wreg	equ	0xFE8
 19323                           indf1	equ	0xFE7
 19324                           postdec1	equ	0xFE5
 19325                           fsr1h	equ	0xFE2
 19326                           fsr1l	equ	0xFE1
 19327                           indf2	equ	0xFDF
 19328                           postinc2	equ	0xFDE
 19329                           postdec2	equ	0xFDD
 19330                           plusw2	equ	0xFDB
 19331                           fsr2h	equ	0xFDA
 19332                           fsr2l	equ	0xFD9
 19333                           status	equ	0xFD8
 19334                           
 19335 ;; *************** function _Reset_Low *****************
 19336 ;; Defined at:
 19337 ;;		line 32 in file "Library/LCD.c"
 19338 ;; Parameters:    Size  Location     Type
 19339 ;;		None
 19340 ;; Auto vars:     Size  Location     Type
 19341 ;;		None
 19342 ;; Return value:  Size  Location     Type
 19343 ;;                  1    wreg      void 
 19344 ;; Registers used:
 19345 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19346 ;; Tracked objects:
 19347 ;;		On entry : 0/0
 19348 ;;		On exit  : 0/0
 19349 ;;		Unchanged: 0/0
 19350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19354 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19355 ;;Total ram usage:        0 bytes
 19356 ;; Hardware stack levels used:    1
 19357 ;; Hardware stack levels required when called:   11
 19358 ;; This function calls:
 19359 ;;		_Port_SetPin
 19360 ;; This function is called by:
 19361 ;;		_LCD_Reset
 19362 ;; This function uses a non-reentrant model
 19363 ;;
 19364                           
 19365                           	psect	text91
 19366  016338                     __ptext91:
 19367                           	opt stack 0
 19368  016338                     _Reset_Low:
 19369                           	opt stack 15
 19370                           
 19371                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
 19372                           
 19373                           ; BSR set to: 0
 19374                           ;incstack = 0
 19375  016338  0EB6               	movlw	low _PortF
 19376  01633A  0100               	movlb	0	; () banked
 19377  01633C  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 19378  01633E  0E03               	movlw	high _PortF
 19379  016340  0100               	movlb	0	; () banked
 19380  016342  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 19381  016344  0E06               	movlw	6
 19382  016346  0100               	movlb	0	; () banked
 19383  016348  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 19384  01634A  0E01               	movlw	1
 19385  01634C  0100               	movlb	0	; () banked
 19386  01634E  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 19387  016350  EC59  F09F         	call	_Port_SetPin	;wreg free
 19388  016354  0012               	return		;funcret
 19389  016356                     __end_of_Reset_Low:
 19390                           	opt stack 0
 19391                           tosu	equ	0xFFF
 19392                           tosh	equ	0xFFE
 19393                           tosl	equ	0xFFD
 19394                           pclath	equ	0xFFA
 19395                           tblptru	equ	0xFF8
 19396                           tblptrh	equ	0xFF7
 19397                           tblptrl	equ	0xFF6
 19398                           tablat	equ	0xFF5
 19399                           prodh	equ	0xFF4
 19400                           prodl	equ	0xFF3
 19401                           intcon	equ	0xFF2
 19402                           postinc0	equ	0xFEE
 19403                           wreg	equ	0xFE8
 19404                           indf1	equ	0xFE7
 19405                           postdec1	equ	0xFE5
 19406                           fsr1h	equ	0xFE2
 19407                           fsr1l	equ	0xFE1
 19408                           indf2	equ	0xFDF
 19409                           postinc2	equ	0xFDE
 19410                           postdec2	equ	0xFDD
 19411                           plusw2	equ	0xFDB
 19412                           fsr2h	equ	0xFDA
 19413                           fsr2l	equ	0xFD9
 19414                           status	equ	0xFD8
 19415                           
 19416 ;; *************** function _Reset_High *****************
 19417 ;; Defined at:
 19418 ;;		line 36 in file "Library/LCD.c"
 19419 ;; Parameters:    Size  Location     Type
 19420 ;;		None
 19421 ;; Auto vars:     Size  Location     Type
 19422 ;;		None
 19423 ;; Return value:  Size  Location     Type
 19424 ;;                  1    wreg      void 
 19425 ;; Registers used:
 19426 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19427 ;; Tracked objects:
 19428 ;;		On entry : 0/0
 19429 ;;		On exit  : 0/0
 19430 ;;		Unchanged: 0/0
 19431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19435 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19436 ;;Total ram usage:        0 bytes
 19437 ;; Hardware stack levels used:    1
 19438 ;; Hardware stack levels required when called:   11
 19439 ;; This function calls:
 19440 ;;		_Port_SetPin
 19441 ;; This function is called by:
 19442 ;;		_LCD_Reset
 19443 ;; This function uses a non-reentrant model
 19444 ;;
 19445                           
 19446                           	psect	text92
 19447  016356                     __ptext92:
 19448                           	opt stack 0
 19449  016356                     _Reset_High:
 19450                           	opt stack 15
 19451                           
 19452                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
 19453                           
 19454                           ;incstack = 0
 19455  016356  0EB6               	movlw	low _PortF
 19456  016358  0100               	movlb	0	; () banked
 19457  01635A  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 19458  01635C  0E03               	movlw	high _PortF
 19459  01635E  0100               	movlb	0	; () banked
 19460  016360  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 19461  016362  0E06               	movlw	6
 19462  016364  0100               	movlb	0	; () banked
 19463  016366  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 19464  016368  0E00               	movlw	0
 19465  01636A  0100               	movlb	0	; () banked
 19466  01636C  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 19467  01636E  EC59  F09F         	call	_Port_SetPin	;wreg free
 19468  016372  0012               	return		;funcret
 19469  016374                     __end_of_Reset_High:
 19470                           	opt stack 0
 19471                           tosu	equ	0xFFF
 19472                           tosh	equ	0xFFE
 19473                           tosl	equ	0xFFD
 19474                           pclath	equ	0xFFA
 19475                           tblptru	equ	0xFF8
 19476                           tblptrh	equ	0xFF7
 19477                           tblptrl	equ	0xFF6
 19478                           tablat	equ	0xFF5
 19479                           prodh	equ	0xFF4
 19480                           prodl	equ	0xFF3
 19481                           intcon	equ	0xFF2
 19482                           postinc0	equ	0xFEE
 19483                           wreg	equ	0xFE8
 19484                           indf1	equ	0xFE7
 19485                           postdec1	equ	0xFE5
 19486                           fsr1h	equ	0xFE2
 19487                           fsr1l	equ	0xFE1
 19488                           indf2	equ	0xFDF
 19489                           postinc2	equ	0xFDE
 19490                           postdec2	equ	0xFDD
 19491                           plusw2	equ	0xFDB
 19492                           fsr2h	equ	0xFDA
 19493                           fsr2l	equ	0xFD9
 19494                           status	equ	0xFD8
 19495                           
 19496 ;; *************** function _ISR_Enable *****************
 19497 ;; Defined at:
 19498 ;;		line 27 in file "Library/ISR.c"
 19499 ;; Parameters:    Size  Location     Type
 19500 ;;		None
 19501 ;; Auto vars:     Size  Location     Type
 19502 ;;		None
 19503 ;; Return value:  Size  Location     Type
 19504 ;;                  1    wreg      void 
 19505 ;; Registers used:
 19506 ;;		None
 19507 ;; Tracked objects:
 19508 ;;		On entry : 0/0
 19509 ;;		On exit  : 0/0
 19510 ;;		Unchanged: 0/0
 19511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19515 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19516 ;;Total ram usage:        0 bytes
 19517 ;; Hardware stack levels used:    1
 19518 ;; Hardware stack levels required when called:    7
 19519 ;; This function calls:
 19520 ;;		Nothing
 19521 ;; This function is called by:
 19522 ;;		_init
 19523 ;; This function uses a non-reentrant model
 19524 ;;
 19525                           
 19526                           	psect	text93
 19527  016602                     __ptext93:
 19528                           	opt stack 0
 19529  016602                     _ISR_Enable:
 19530                           	opt stack 22
 19531                           
 19532                           ;ISR.c: 29: INTCONbits.PEIE = 1;
 19533                           
 19534                           ;incstack = 0
 19535  016602  8CF2               	bsf	intcon,6,c	;volatile
 19536                           
 19537                           ;ISR.c: 30: INTCONbits.GIE = 1;
 19538  016604  8EF2               	bsf	intcon,7,c	;volatile
 19539                           
 19540                           ;ISR.c: 31: INTCONbits.INT0IE = 1;
 19541  016606  88F2               	bsf	intcon,4,c	;volatile
 19542                           
 19543                           ;ISR.c: 32: INTCONbits.INT0IF = 0;
 19544  016608  92F2               	bcf	intcon,1,c	;volatile
 19545  01660A  0012               	return		;funcret
 19546  01660C                     __end_of_ISR_Enable:
 19547                           	opt stack 0
 19548                           tosu	equ	0xFFF
 19549                           tosh	equ	0xFFE
 19550                           tosl	equ	0xFFD
 19551                           pclath	equ	0xFFA
 19552                           tblptru	equ	0xFF8
 19553                           tblptrh	equ	0xFF7
 19554                           tblptrl	equ	0xFF6
 19555                           tablat	equ	0xFF5
 19556                           prodh	equ	0xFF4
 19557                           prodl	equ	0xFF3
 19558                           intcon	equ	0xFF2
 19559                           postinc0	equ	0xFEE
 19560                           wreg	equ	0xFE8
 19561                           indf1	equ	0xFE7
 19562                           postdec1	equ	0xFE5
 19563                           fsr1h	equ	0xFE2
 19564                           fsr1l	equ	0xFE1
 19565                           indf2	equ	0xFDF
 19566                           postinc2	equ	0xFDE
 19567                           postdec2	equ	0xFDD
 19568                           plusw2	equ	0xFDB
 19569                           fsr2h	equ	0xFDA
 19570                           fsr2l	equ	0xFD9
 19571                           status	equ	0xFD8
 19572                           
 19573 ;; *************** function _HMI_Init *****************
 19574 ;; Defined at:
 19575 ;;		line 104 in file "HMI.c"
 19576 ;; Parameters:    Size  Location     Type
 19577 ;;		None
 19578 ;; Auto vars:     Size  Location     Type
 19579 ;;  in              2   72[BANK0 ] unsigned short 
 19580 ;; Return value:  Size  Location     Type
 19581 ;;                  1    wreg      void 
 19582 ;; Registers used:
 19583 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19584 ;; Tracked objects:
 19585 ;;		On entry : 0/0
 19586 ;;		On exit  : 0/0
 19587 ;;		Unchanged: 0/0
 19588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19590 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19592 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19593 ;;Total ram usage:        2 bytes
 19594 ;; Hardware stack levels used:    1
 19595 ;; Hardware stack levels required when called:   16
 19596 ;; This function calls:
 19597 ;;		_Button_Init
 19598 ;;		_SPI_Init
 19599 ;;		_SPI_MinSpeed
 19600 ;; This function is called by:
 19601 ;;		_init
 19602 ;; This function uses a non-reentrant model
 19603 ;;
 19604                           
 19605                           	psect	text94
 19606  012134                     __ptext94:
 19607                           	opt stack 0
 19608  012134                     _HMI_Init:
 19609                           	opt stack 13
 19610                           
 19611                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 19612                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_NULL);
 19613                           
 19614                           ;incstack = 0
 19615  012134  0E50               	movlw	low (_HMIBoard+48)
 19616  012136  0100               	movlb	0	; () banked
 19617  012138  6F9B               	movwf	Button_Init@pInput& (0+255),b
 19618  01213A  0E03               	movlw	high (_HMIBoard+48)
 19619  01213C  0100               	movlb	0	; () banked
 19620  01213E  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 19621  012140  0E00               	movlw	0
 19622  012142  0100               	movlb	0	; () banked
 19623  012144  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 19624  012146  0E02               	movlw	2
 19625  012148  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 19626  01214A  0E3C               	movlw	low _HMI_InitButtons
 19627  01214C  0100               	movlb	0	; () banked
 19628  01214E  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 19629  012150  0E66               	movlw	high _HMI_InitButtons
 19630  012152  0100               	movlb	0	; () banked
 19631  012154  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 19632  012156  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 19633  012158  0100               	movlb	0	; () banked
 19634  01215A  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 19635  01215C  0E86               	movlw	low _HMI_DIPSwitch
 19636  01215E  0100               	movlb	0	; () banked
 19637  012160  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 19638  012162  0E64               	movlw	high _HMI_DIPSwitch
 19639  012164  0100               	movlb	0	; () banked
 19640  012166  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 19641  012168  0E01               	movlw	low (_HMI_DIPSwitch shr (0+16))
 19642  01216A  0100               	movlb	0	; () banked
 19643  01216C  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 19644  01216E  0E04               	movlw	low _Event_NULL
 19645  012170  0100               	movlb	0	; () banked
 19646  012172  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 19647  012174  0E14               	movlw	high _Event_NULL
 19648  012176  0100               	movlb	0	; () banked
 19649  012178  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 19650  01217A  0E00               	movlw	low (_Event_NULL shr (0+16))
 19651  01217C  0100               	movlb	0	; () banked
 19652  01217E  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 19653  012180  EC87  F09E         	call	_Button_Init	;wreg free
 19654                           
 19655                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 19656                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_NULL);
 19657  012184  0E32               	movlw	low (_HMIBoard+18)
 19658  012186  0100               	movlb	0	; () banked
 19659  012188  6F9B               	movwf	Button_Init@pInput& (0+255),b
 19660  01218A  0E03               	movlw	high (_HMIBoard+18)
 19661  01218C  0100               	movlb	0	; () banked
 19662  01218E  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 19663  012190  0E00               	movlw	0
 19664  012192  0100               	movlb	0	; () banked
 19665  012194  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 19666  012196  0E02               	movlw	2
 19667  012198  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 19668  01219A  0E3C               	movlw	low _HMI_InitButtons
 19669  01219C  0100               	movlb	0	; () banked
 19670  01219E  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 19671  0121A0  0E66               	movlw	high _HMI_InitButtons
 19672  0121A2  0100               	movlb	0	; () banked
 19673  0121A4  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 19674  0121A6  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 19675  0121A8  0100               	movlb	0	; () banked
 19676  0121AA  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 19677  0121AC  0EE6               	movlw	low _HMI_LeftSwitch
 19678  0121AE  0100               	movlb	0	; () banked
 19679  0121B0  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 19680  0121B2  0E64               	movlw	high _HMI_LeftSwitch
 19681  0121B4  0100               	movlb	0	; () banked
 19682  0121B6  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 19683  0121B8  0E01               	movlw	low (_HMI_LeftSwitch shr (0+16))
 19684  0121BA  0100               	movlb	0	; () banked
 19685  0121BC  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 19686  0121BE  0E04               	movlw	low _Event_NULL
 19687  0121C0  0100               	movlb	0	; () banked
 19688  0121C2  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 19689  0121C4  0E14               	movlw	high _Event_NULL
 19690  0121C6  0100               	movlb	0	; () banked
 19691  0121C8  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 19692  0121CA  0E00               	movlw	low (_Event_NULL shr (0+16))
 19693  0121CC  0100               	movlb	0	; () banked
 19694  0121CE  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 19695  0121D0  EC87  F09E         	call	_Button_Init	;wreg free
 19696                           
 19697                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 19698                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_NULL);
 19699  0121D4  0E28               	movlw	low (_HMIBoard+8)
 19700  0121D6  0100               	movlb	0	; () banked
 19701  0121D8  6F9B               	movwf	Button_Init@pInput& (0+255),b
 19702  0121DA  0E03               	movlw	high (_HMIBoard+8)
 19703  0121DC  0100               	movlb	0	; () banked
 19704  0121DE  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 19705  0121E0  0E00               	movlw	0
 19706  0121E2  0100               	movlb	0	; () banked
 19707  0121E4  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 19708  0121E6  0E02               	movlw	2
 19709  0121E8  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 19710  0121EA  0E3C               	movlw	low _HMI_InitButtons
 19711  0121EC  0100               	movlb	0	; () banked
 19712  0121EE  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 19713  0121F0  0E66               	movlw	high _HMI_InitButtons
 19714  0121F2  0100               	movlb	0	; () banked
 19715  0121F4  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 19716  0121F6  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 19717  0121F8  0100               	movlb	0	; () banked
 19718  0121FA  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 19719  0121FC  0ECE               	movlw	low _HMI_RightSwitch
 19720  0121FE  0100               	movlb	0	; () banked
 19721  012200  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 19722  012202  0E64               	movlw	high _HMI_RightSwitch
 19723  012204  0100               	movlb	0	; () banked
 19724  012206  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 19725  012208  0E01               	movlw	low (_HMI_RightSwitch shr (0+16))
 19726  01220A  0100               	movlb	0	; () banked
 19727  01220C  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 19728  01220E  0E04               	movlw	low _Event_NULL
 19729  012210  0100               	movlb	0	; () banked
 19730  012212  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 19731  012214  0E14               	movlw	high _Event_NULL
 19732  012216  0100               	movlb	0	; () banked
 19733  012218  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 19734  01221A  0E00               	movlw	low (_Event_NULL shr (0+16))
 19735  01221C  0100               	movlb	0	; () banked
 19736  01221E  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 19737  012220  EC87  F09E         	call	_Button_Init	;wreg free
 19738                           
 19739                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 19740                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_NULL);
 19741  012224  0E3C               	movlw	low (_HMIBoard+28)
 19742  012226  0100               	movlb	0	; () banked
 19743  012228  6F9B               	movwf	Button_Init@pInput& (0+255),b
 19744  01222A  0E03               	movlw	high (_HMIBoard+28)
 19745  01222C  0100               	movlb	0	; () banked
 19746  01222E  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 19747  012230  0E00               	movlw	0
 19748  012232  0100               	movlb	0	; () banked
 19749  012234  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 19750  012236  0E02               	movlw	2
 19751  012238  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 19752  01223A  0E3C               	movlw	low _HMI_InitButtons
 19753  01223C  0100               	movlb	0	; () banked
 19754  01223E  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 19755  012240  0E66               	movlw	high _HMI_InitButtons
 19756  012242  0100               	movlb	0	; () banked
 19757  012244  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 19758  012246  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 19759  012248  0100               	movlb	0	; () banked
 19760  01224A  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 19761  01224C  0EB6               	movlw	low _HMI_UpSwitch
 19762  01224E  0100               	movlb	0	; () banked
 19763  012250  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 19764  012252  0E64               	movlw	high _HMI_UpSwitch
 19765  012254  0100               	movlb	0	; () banked
 19766  012256  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 19767  012258  0E01               	movlw	low (_HMI_UpSwitch shr (0+16))
 19768  01225A  0100               	movlb	0	; () banked
 19769  01225C  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 19770  01225E  0E04               	movlw	low _Event_NULL
 19771  012260  0100               	movlb	0	; () banked
 19772  012262  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 19773  012264  0E14               	movlw	high _Event_NULL
 19774  012266  0100               	movlb	0	; () banked
 19775  012268  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 19776  01226A  0E00               	movlw	low (_Event_NULL shr (0+16))
 19777  01226C  0100               	movlb	0	; () banked
 19778  01226E  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 19779  012270  EC87  F09E         	call	_Button_Init	;wreg free
 19780                           
 19781                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 19782                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_NULL);
 19783  012274  0E46               	movlw	low (_HMIBoard+38)
 19784  012276  0100               	movlb	0	; () banked
 19785  012278  6F9B               	movwf	Button_Init@pInput& (0+255),b
 19786  01227A  0E03               	movlw	high (_HMIBoard+38)
 19787  01227C  0100               	movlb	0	; () banked
 19788  01227E  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 19789  012280  0E00               	movlw	0
 19790  012282  0100               	movlb	0	; () banked
 19791  012284  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 19792  012286  0E02               	movlw	2
 19793  012288  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 19794  01228A  0E3C               	movlw	low _HMI_InitButtons
 19795  01228C  0100               	movlb	0	; () banked
 19796  01228E  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 19797  012290  0E66               	movlw	high _HMI_InitButtons
 19798  012292  0100               	movlb	0	; () banked
 19799  012294  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 19800  012296  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 19801  012298  0100               	movlb	0	; () banked
 19802  01229A  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 19803  01229C  0E9E               	movlw	low _HMI_DownSwitch
 19804  01229E  0100               	movlb	0	; () banked
 19805  0122A0  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 19806  0122A2  0E64               	movlw	high _HMI_DownSwitch
 19807  0122A4  0100               	movlb	0	; () banked
 19808  0122A6  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 19809  0122A8  0E01               	movlw	low (_HMI_DownSwitch shr (0+16))
 19810  0122AA  0100               	movlb	0	; () banked
 19811  0122AC  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 19812  0122AE  0E04               	movlw	low _Event_NULL
 19813  0122B0  0100               	movlb	0	; () banked
 19814  0122B2  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 19815  0122B4  0E14               	movlw	high _Event_NULL
 19816  0122B6  0100               	movlb	0	; () banked
 19817  0122B8  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 19818  0122BA  0E00               	movlw	low (_Event_NULL shr (0+16))
 19819  0122BC  0100               	movlb	0	; () banked
 19820  0122BE  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 19821  0122C0  EC87  F09E         	call	_Button_Init	;wreg free
 19822                           
 19823                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 19824  0122C4  0EA0               	movlw	160
 19825  0122C6  0100               	movlb	0	; () banked
 19826  0122C8  6F8D               	movwf	SPI_Init@pClock& (0+255),b
 19827  0122CA  0E86               	movlw	134
 19828  0122CC  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
 19829  0122CE  0E01               	movlw	1
 19830  0122D0  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
 19831  0122D2  0E00               	movlw	0
 19832  0122D4  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
 19833  0122D6  0E00               	movlw	0
 19834  0122D8  0100               	movlb	0	; () banked
 19835  0122DA  6F91               	movwf	SPI_Init@pChannel& (0+255),b
 19836  0122DC  0E02               	movlw	2
 19837  0122DE  0100               	movlb	0	; () banked
 19838  0122E0  6F92               	movwf	SPI_Init@pMode& (0+255),b
 19839  0122E2  EC53  F082         	call	_SPI_Init	;wreg free
 19840                           
 19841                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 19842  0122E6  0E5A               	movlw	low _SPI1
 19843  0122E8  0100               	movlb	0	; () banked
 19844  0122EA  6F6F               	movwf	SPI_MinSpeed@pInput& (0+255),b
 19845  0122EC  0E03               	movlw	high _SPI1
 19846  0122EE  0100               	movlb	0	; () banked
 19847  0122F0  6F70               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 19848  0122F2  EC70  F0A9         	call	_SPI_MinSpeed	;wreg free
 19849                           
 19850                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 19851  0122F6  0E00               	movlw	0
 19852  0122F8  0100               	movlb	0	; () banked
 19853  0122FA  6FA9               	movwf	(HMI_Init@in+1)& (0+255),b
 19854  0122FC  0E00               	movlw	0
 19855  0122FE  6FA8               	movwf	HMI_Init@in& (0+255),b
 19856  012300                     l14156:
 19857                           
 19858                           ; BSR set to: 0
 19859  012300  0100               	movlb	0	; () banked
 19860  012302  51A9               	movf	(HMI_Init@in+1)& (0+255),w,b
 19861  012304  E113               	bnz	l1153
 19862  012306  0E08               	movlw	8
 19863  012308  0100               	movlb	0	; () banked
 19864  01230A  5DA8               	subwf	HMI_Init@in& (0+255),w,b
 19865  01230C  B0D8               	btfsc	status,0,c
 19866  01230E  0012               	return	
 19867                           
 19868                           ; BSR set to: 0
 19869                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 19870                           
 19871                           ; BSR set to: 0
 19872                           
 19873                           ; BSR set to: 0
 19874  012310  0E20               	movlw	low _HMIBoard
 19875  012312  0100               	movlb	0	; () banked
 19876  012314  25A8               	addwf	HMI_Init@in& (0+255),w,b
 19877  012316  6ED9               	movwf	fsr2l,c
 19878  012318  0E03               	movlw	high _HMIBoard
 19879  01231A  0100               	movlb	0	; () banked
 19880  01231C  21A9               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 19881  01231E  6EDA               	movwf	fsr2h,c
 19882  012320  0E00               	movlw	0
 19883  012322  6EDF               	movwf	indf2,c
 19884                           
 19885                           ; BSR set to: 0
 19886  012324  0100               	movlb	0	; () banked
 19887  012326  4BA8               	infsnz	HMI_Init@in& (0+255),f,b
 19888  012328  2BA9               	incf	(HMI_Init@in+1)& (0+255),f,b
 19889  01232A  D7EA               	goto	l14156
 19890  01232C                     l1153:
 19891                           
 19892                           ; BSR set to: 0
 19893  01232C  0012               	return		;funcret
 19894  01232E                     __end_of_HMI_Init:
 19895                           	opt stack 0
 19896                           tosu	equ	0xFFF
 19897                           tosh	equ	0xFFE
 19898                           tosl	equ	0xFFD
 19899                           pclath	equ	0xFFA
 19900                           tblptru	equ	0xFF8
 19901                           tblptrh	equ	0xFF7
 19902                           tblptrl	equ	0xFF6
 19903                           tablat	equ	0xFF5
 19904                           prodh	equ	0xFF4
 19905                           prodl	equ	0xFF3
 19906                           intcon	equ	0xFF2
 19907                           postinc0	equ	0xFEE
 19908                           wreg	equ	0xFE8
 19909                           indf1	equ	0xFE7
 19910                           postdec1	equ	0xFE5
 19911                           fsr1h	equ	0xFE2
 19912                           fsr1l	equ	0xFE1
 19913                           indf2	equ	0xFDF
 19914                           postinc2	equ	0xFDE
 19915                           postdec2	equ	0xFDD
 19916                           plusw2	equ	0xFDB
 19917                           fsr2h	equ	0xFDA
 19918                           fsr2l	equ	0xFD9
 19919                           status	equ	0xFD8
 19920                           
 19921 ;; *************** function _SPI_MinSpeed *****************
 19922 ;; Defined at:
 19923 ;;		line 190 in file "Library/SPI.c"
 19924 ;; Parameters:    Size  Location     Type
 19925 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 19926 ;;		 -> SPI1(11), 
 19927 ;; Auto vars:     Size  Location     Type
 19928 ;;		None
 19929 ;; Return value:  Size  Location     Type
 19930 ;;                  1    wreg      void 
 19931 ;; Registers used:
 19932 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19933 ;; Tracked objects:
 19934 ;;		On entry : 0/0
 19935 ;;		On exit  : 0/0
 19936 ;;		Unchanged: 0/0
 19937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19938 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19941 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19942 ;;Total ram usage:        2 bytes
 19943 ;; Hardware stack levels used:    1
 19944 ;; Hardware stack levels required when called:    9
 19945 ;; This function calls:
 19946 ;;		_Byte_SetBit
 19947 ;;		_Byte_SetQuad
 19948 ;; This function is called by:
 19949 ;;		_HMI_Init
 19950 ;; This function uses a non-reentrant model
 19951 ;;
 19952                           
 19953                           	psect	text95
 19954  0152E0                     __ptext95:
 19955                           	opt stack 0
 19956  0152E0                     _SPI_MinSpeed:
 19957                           	opt stack 19
 19958                           
 19959                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 19960                           
 19961                           ; BSR set to: 0
 19962                           ;incstack = 0
 19963  0152E0  0100               	movlb	0	; () banked
 19964  0152E2  EE20 F006          	lfsr	2,6
 19965  0152E6  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 19966  0152E8  26D9               	addwf	fsr2l,f,c
 19967  0152EA  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 19968  0152EC  22DA               	addwfc	fsr2h,f,c
 19969  0152EE  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 19970  0152F2  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 19971  0152F6  0E05               	movlw	5
 19972  0152F8  0100               	movlb	0	; () banked
 19973  0152FA  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 19974  0152FC  0E00               	movlw	0
 19975  0152FE  0100               	movlb	0	; () banked
 19976  015300  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 19977  015302  EC8D  F0AB         	call	_Byte_SetBit	;wreg free
 19978                           
 19979                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 19980  015306  0100               	movlb	0	; () banked
 19981  015308  EE20 F006          	lfsr	2,6
 19982  01530C  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 19983  01530E  26D9               	addwf	fsr2l,f,c
 19984  015310  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 19985  015312  22DA               	addwfc	fsr2h,f,c
 19986  015314  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 19987  015318  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 19988  01531C  0E00               	movlw	0
 19989  01531E  0100               	movlb	0	; () banked
 19990  015320  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 19991  015322  0E02               	movlw	2
 19992  015324  0100               	movlb	0	; () banked
 19993  015326  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 19994  015328  EC4E  F0B1         	call	_Byte_SetQuad	;wreg free
 19995                           
 19996                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 19997  01532C  0100               	movlb	0	; () banked
 19998  01532E  EE20 F006          	lfsr	2,6
 19999  015332  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 20000  015334  26D9               	addwf	fsr2l,f,c
 20001  015336  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 20002  015338  22DA               	addwfc	fsr2h,f,c
 20003  01533A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 20004  01533E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 20005  015342  0E05               	movlw	5
 20006  015344  0100               	movlb	0	; () banked
 20007  015346  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 20008  015348  0E01               	movlw	1
 20009  01534A  0100               	movlb	0	; () banked
 20010  01534C  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 20011  01534E  EC8D  F0AB         	call	_Byte_SetBit	;wreg free
 20012  015352  0012               	return		;funcret
 20013  015354                     __end_of_SPI_MinSpeed:
 20014                           	opt stack 0
 20015                           tosu	equ	0xFFF
 20016                           tosh	equ	0xFFE
 20017                           tosl	equ	0xFFD
 20018                           pclath	equ	0xFFA
 20019                           tblptru	equ	0xFF8
 20020                           tblptrh	equ	0xFF7
 20021                           tblptrl	equ	0xFF6
 20022                           tablat	equ	0xFF5
 20023                           prodh	equ	0xFF4
 20024                           prodl	equ	0xFF3
 20025                           intcon	equ	0xFF2
 20026                           postinc0	equ	0xFEE
 20027                           wreg	equ	0xFE8
 20028                           indf1	equ	0xFE7
 20029                           postdec1	equ	0xFE5
 20030                           fsr1h	equ	0xFE2
 20031                           fsr1l	equ	0xFE1
 20032                           indf2	equ	0xFDF
 20033                           postinc2	equ	0xFDE
 20034                           postdec2	equ	0xFDD
 20035                           plusw2	equ	0xFDB
 20036                           fsr2h	equ	0xFDA
 20037                           fsr2l	equ	0xFD9
 20038                           status	equ	0xFD8
 20039                           
 20040 ;; *************** function _SPI_Init *****************
 20041 ;; Defined at:
 20042 ;;		line 12 in file "Library/SPI.c"
 20043 ;; Parameters:    Size  Location     Type
 20044 ;;  pClock          4   45[BANK0 ] unsigned long 
 20045 ;;  pChannel        1   49[BANK0 ] enum E6744
 20046 ;;  pMode           1   50[BANK0 ] enum E6748
 20047 ;; Auto vars:     Size  Location     Type
 20048 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 20049 ;;		 -> SPI1(11), SPI2(11), 
 20050 ;; Return value:  Size  Location     Type
 20051 ;;                  1    wreg      void 
 20052 ;; Registers used:
 20053 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20054 ;; Tracked objects:
 20055 ;;		On entry : 0/0
 20056 ;;		On exit  : 0/0
 20057 ;;		Unchanged: 0/0
 20058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20059 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20060 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20062 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20063 ;;Total ram usage:        8 bytes
 20064 ;; Hardware stack levels used:    1
 20065 ;; Hardware stack levels required when called:   12
 20066 ;; This function calls:
 20067 ;;		_Byte_SetBit
 20068 ;;		_Byte_SetQuad
 20069 ;;		_Port_SetPinType
 20070 ;;		_SPI_DCS
 20071 ;;		_SPI_DisableISR
 20072 ;;		_Timer2_Init
 20073 ;; This function is called by:
 20074 ;;		_Configure_GPIOs
 20075 ;;		_HMI_Init
 20076 ;; This function uses a non-reentrant model
 20077 ;;
 20078                           
 20079                           	psect	text96
 20080  0104A6                     __ptext96:
 20081                           	opt stack 0
 20082  0104A6                     _SPI_Init:
 20083                           	opt stack 15
 20084                           
 20085                           ;SPI.c: 14: SPIPtr pInput;
 20086                           ;SPI.c: 16: switch (pChannel)
 20087                           
 20088                           ;incstack = 0
 20089  0104A6  D00C               	goto	l597
 20090  0104A8                     
 20091                           ;SPI.c: 19: pInput = &SPI1;
 20092  0104A8  0E5A               	movlw	low _SPI1
 20093  0104AA  0100               	movlb	0	; () banked
 20094  0104AC  6F93               	movwf	SPI_Init@pInput& (0+255),b
 20095  0104AE  0E03               	movlw	high _SPI1
 20096  0104B0  D004               	goto	L13
 20097  0104B2                     
 20098                           ; BSR set to: 0
 20099                           ;SPI.c: 22: pInput = &SPI2;
 20100                           
 20101                           ; BSR set to: 0
 20102  0104B2  0E65               	movlw	low _SPI2
 20103  0104B4  0100               	movlb	0	; () banked
 20104  0104B6  6F93               	movwf	SPI_Init@pInput& (0+255),b
 20105  0104B8  0E03               	movlw	high _SPI2
 20106  0104BA                     L13:
 20107  0104BA  0100               	movlb	0	; () banked
 20108  0104BC  6F94               	movwf	(SPI_Init@pInput+1)& (0+255),b
 20109                           
 20110                           ; BSR set to: 0
 20111                           ;SPI.c: 24: };
 20112                           
 20113                           ;SPI.c: 23: break;
 20114  0104BE  D008               	goto	l599
 20115  0104C0                     l597:
 20116                           
 20117                           ; BSR set to: 0
 20118  0104C0  0100               	movlb	0	; () banked
 20119  0104C2  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 20120                           
 20121                           ; Switch size 1, requested type "space"
 20122                           ; Number of cases is 2, Range of values is 0 to 1
 20123                           ; switch strategies available:
 20124                           ; Name         Instructions Cycles
 20125                           ; simple_byte            7     4 (average)
 20126                           ;	Chosen strategy is simple_byte
 20127  0104C4  0A00               	xorlw	0	; case 0
 20128  0104C6  B4D8               	btfsc	status,2,c
 20129  0104C8  D7EF               	goto	l598
 20130  0104CA  0A01               	xorlw	1	; case 1
 20131  0104CC  B4D8               	btfsc	status,2,c
 20132  0104CE  D7F1               	goto	l600
 20133  0104D0                     l599:
 20134                           
 20135                           ; BSR set to: 0
 20136                           ;SPI.c: 26: pInput->mChannel = pChannel;
 20137                           
 20138                           ; BSR set to: 0
 20139  0104D0  0100               	movlb	0	; () banked
 20140  0104D2  EE20 F002          	lfsr	2,2
 20141  0104D6  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20142  0104D8  26D9               	addwf	fsr2l,f,c
 20143  0104DA  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20144  0104DC  22DA               	addwfc	fsr2h,f,c
 20145  0104DE  C091  FFDF         	movff	SPI_Init@pChannel,indf2
 20146                           
 20147                           ;SPI.c: 35: switch (pChannel)
 20148  0104E2  D0B1               	goto	l601
 20149  0104E4                     
 20150                           ; BSR set to: 0
 20151                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 20152                           
 20153                           ; BSR set to: 0
 20154  0104E4  0EEA               	movlw	low _PortC
 20155  0104E6  0100               	movlb	0	; () banked
 20156  0104E8  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 20157  0104EA  0E00               	movlw	high _PortC
 20158  0104EC  0100               	movlb	0	; () banked
 20159  0104EE  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20160  0104F0  0E02               	movlw	2
 20161  0104F2  0100               	movlb	0	; () banked
 20162  0104F4  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 20163  0104F6  0E03               	movlw	3
 20164  0104F8  0100               	movlb	0	; () banked
 20165  0104FA  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 20166  0104FC  EC5F  F093         	call	_Port_SetPinType	;wreg free
 20167                           
 20168                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 20169  010500  0EEA               	movlw	low _PortC
 20170  010502  0100               	movlb	0	; () banked
 20171  010504  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 20172  010506  0E00               	movlw	high _PortC
 20173  010508  0100               	movlb	0	; () banked
 20174  01050A  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20175  01050C  0E03               	movlw	3
 20176  01050E  0100               	movlb	0	; () banked
 20177  010510  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 20178  010512  0E03               	movlw	3
 20179  010514  0100               	movlb	0	; () banked
 20180  010516  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 20181  010518  EC5F  F093         	call	_Port_SetPinType	;wreg free
 20182                           
 20183                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 20184  01051C  0EEA               	movlw	low _PortC
 20185  01051E  0100               	movlb	0	; () banked
 20186  010520  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 20187  010522  0E00               	movlw	high _PortC
 20188  010524  0100               	movlb	0	; () banked
 20189  010526  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20190  010528  0E05               	movlw	5
 20191  01052A  0100               	movlb	0	; () banked
 20192  01052C  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 20193  01052E  0E03               	movlw	3
 20194  010530  0100               	movlb	0	; () banked
 20195  010532  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 20196  010534  EC5F  F093         	call	_Port_SetPinType	;wreg free
 20197                           
 20198                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 20199  010538  0EEA               	movlw	low _PortC
 20200  01053A  0100               	movlb	0	; () banked
 20201  01053C  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 20202  01053E  0E00               	movlw	high _PortC
 20203  010540  0100               	movlb	0	; () banked
 20204  010542  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20205  010544  0E04               	movlw	4
 20206  010546  0100               	movlb	0	; () banked
 20207  010548  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 20208  01054A  0E00               	movlw	0
 20209  01054C  0100               	movlb	0	; () banked
 20210  01054E  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 20211  010550  EC5F  F093         	call	_Port_SetPinType	;wreg free
 20212                           
 20213                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 20214  010554  0100               	movlb	0	; () banked
 20215  010556  EE20 F003          	lfsr	2,3
 20216  01055A  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20217  01055C  26D9               	addwf	fsr2l,f,c
 20218  01055E  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20219  010560  22DA               	addwfc	fsr2h,f,c
 20220  010562  0EC7               	movlw	199
 20221  010564  6EDE               	movwf	postinc2,c
 20222  010566  0E0F               	movlw	15
 20223  010568  6EDD               	movwf	postdec2,c
 20224                           
 20225                           ; BSR set to: 0
 20226                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 20227  01056A  0100               	movlb	0	; () banked
 20228  01056C  EE20 F006          	lfsr	2,6
 20229  010570  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20230  010572  26D9               	addwf	fsr2l,f,c
 20231  010574  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20232  010576  22DA               	addwfc	fsr2h,f,c
 20233  010578  0EC6               	movlw	198
 20234  01057A  6EDE               	movwf	postinc2,c
 20235  01057C  0E0F               	movlw	15
 20236  01057E  6EDD               	movwf	postdec2,c
 20237                           
 20238                           ; BSR set to: 0
 20239                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 20240  010580  0100               	movlb	0	; () banked
 20241  010582  EE20 F009          	lfsr	2,9
 20242  010586  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20243  010588  26D9               	addwf	fsr2l,f,c
 20244  01058A  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20245  01058C  22DA               	addwfc	fsr2h,f,c
 20246  01058E  0EC9               	movlw	201
 20247  010590  D056               	goto	L14
 20248  010592                     
 20249                           ; BSR set to: 0
 20250                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 20251                           
 20252                           ; BSR set to: 0
 20253  010592  0E98               	movlw	low _PortD
 20254  010594  0100               	movlb	0	; () banked
 20255  010596  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 20256  010598  0E03               	movlw	high _PortD
 20257  01059A  0100               	movlb	0	; () banked
 20258  01059C  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20259  01059E  0E07               	movlw	7
 20260  0105A0  0100               	movlb	0	; () banked
 20261  0105A2  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 20262  0105A4  0E03               	movlw	3
 20263  0105A6  0100               	movlb	0	; () banked
 20264  0105A8  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 20265  0105AA  EC5F  F093         	call	_Port_SetPinType	;wreg free
 20266                           
 20267                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 20268  0105AE  0E98               	movlw	low _PortD
 20269  0105B0  0100               	movlb	0	; () banked
 20270  0105B2  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 20271  0105B4  0E03               	movlw	high _PortD
 20272  0105B6  0100               	movlb	0	; () banked
 20273  0105B8  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20274  0105BA  0E06               	movlw	6
 20275  0105BC  0100               	movlb	0	; () banked
 20276  0105BE  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 20277  0105C0  0E03               	movlw	3
 20278  0105C2  0100               	movlb	0	; () banked
 20279  0105C4  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 20280  0105C6  EC5F  F093         	call	_Port_SetPinType	;wreg free
 20281                           
 20282                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 20283  0105CA  0E98               	movlw	low _PortD
 20284  0105CC  0100               	movlb	0	; () banked
 20285  0105CE  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 20286  0105D0  0E03               	movlw	high _PortD
 20287  0105D2  0100               	movlb	0	; () banked
 20288  0105D4  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20289  0105D6  0E04               	movlw	4
 20290  0105D8  0100               	movlb	0	; () banked
 20291  0105DA  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 20292  0105DC  0E03               	movlw	3
 20293  0105DE  0100               	movlb	0	; () banked
 20294  0105E0  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 20295  0105E2  EC5F  F093         	call	_Port_SetPinType	;wreg free
 20296                           
 20297                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 20298  0105E6  0E98               	movlw	low _PortD
 20299  0105E8  0100               	movlb	0	; () banked
 20300  0105EA  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 20301  0105EC  0E03               	movlw	high _PortD
 20302  0105EE  0100               	movlb	0	; () banked
 20303  0105F0  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20304  0105F2  0E05               	movlw	5
 20305  0105F4  0100               	movlb	0	; () banked
 20306  0105F6  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 20307  0105F8  0E00               	movlw	0
 20308  0105FA  0100               	movlb	0	; () banked
 20309  0105FC  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 20310  0105FE  EC5F  F093         	call	_Port_SetPinType	;wreg free
 20311                           
 20312                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 20313  010602  0100               	movlb	0	; () banked
 20314  010604  EE20 F003          	lfsr	2,3
 20315  010608  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20316  01060A  26D9               	addwf	fsr2l,f,c
 20317  01060C  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20318  01060E  22DA               	addwfc	fsr2h,f,c
 20319  010610  0E6D               	movlw	109
 20320  010612  6EDE               	movwf	postinc2,c
 20321  010614  0E0F               	movlw	15
 20322  010616  6EDD               	movwf	postdec2,c
 20323                           
 20324                           ; BSR set to: 0
 20325                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 20326  010618  0100               	movlb	0	; () banked
 20327  01061A  EE20 F006          	lfsr	2,6
 20328  01061E  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20329  010620  26D9               	addwf	fsr2l,f,c
 20330  010622  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20331  010624  22DA               	addwfc	fsr2h,f,c
 20332  010626  0E6C               	movlw	108
 20333  010628  6EDE               	movwf	postinc2,c
 20334  01062A  0E0F               	movlw	15
 20335  01062C  6EDD               	movwf	postdec2,c
 20336                           
 20337                           ; BSR set to: 0
 20338                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 20339  01062E  0100               	movlb	0	; () banked
 20340  010630  EE20 F009          	lfsr	2,9
 20341  010634  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20342  010636  26D9               	addwf	fsr2l,f,c
 20343  010638  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20344  01063A  22DA               	addwfc	fsr2h,f,c
 20345  01063C  0E6F               	movlw	111
 20346  01063E                     L14:
 20347  01063E  6EDE               	movwf	postinc2,c
 20348  010640  0E0F               	movlw	15
 20349  010642  6EDD               	movwf	postdec2,c
 20350                           
 20351                           ;SPI.c: 68: break;
 20352  010644  D009               	goto	l603
 20353  010646                     l601:
 20354                           
 20355                           ; BSR set to: 0
 20356                           
 20357                           ; BSR set to: 0
 20358  010646  0100               	movlb	0	; () banked
 20359  010648  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 20360                           
 20361                           ; Switch size 1, requested type "space"
 20362                           ; Number of cases is 2, Range of values is 0 to 1
 20363                           ; switch strategies available:
 20364                           ; Name         Instructions Cycles
 20365                           ; simple_byte            7     4 (average)
 20366                           ;	Chosen strategy is simple_byte
 20367  01064A  0A00               	xorlw	0	; case 0
 20368  01064C  B4D8               	btfsc	status,2,c
 20369  01064E  D74A               	goto	l602
 20370  010650  0A01               	xorlw	1	; case 1
 20371  010652  A4D8               	btfss	status,2,c
 20372  010654  0012               	return	
 20373  010656  D79D               	goto	l604
 20374  010658                     l603:
 20375                           
 20376                           ; BSR set to: 0
 20377                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 20378                           
 20379                           ; BSR set to: 0
 20380  010658  0100               	movlb	0	; () banked
 20381  01065A  EE20 F006          	lfsr	2,6
 20382  01065E  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20383  010660  26D9               	addwf	fsr2l,f,c
 20384  010662  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20385  010664  22DA               	addwfc	fsr2h,f,c
 20386  010666  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 20387  01066A  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 20388  01066E  0E05               	movlw	5
 20389  010670  0100               	movlb	0	; () banked
 20390  010672  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 20391  010674  0E00               	movlw	0
 20392  010676  0100               	movlb	0	; () banked
 20393  010678  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 20394  01067A  EC8D  F0AB         	call	_Byte_SetBit	;wreg free
 20395                           
 20396                           ;SPI.c: 77: switch(pMode)
 20397  01067E  D09C               	goto	l607
 20398  010680                     
 20399                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 20400  010680  0100               	movlb	0	; () banked
 20401  010682  EE20 F006          	lfsr	2,6
 20402  010686  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20403  010688  26D9               	addwf	fsr2l,f,c
 20404  01068A  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20405  01068C  22DA               	addwfc	fsr2h,f,c
 20406  01068E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 20407  010692  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 20408  010696  0E04               	movlw	4
 20409  010698  0100               	movlb	0	; () banked
 20410  01069A  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 20411  01069C  0E00               	movlw	0
 20412  01069E  0100               	movlb	0	; () banked
 20413  0106A0  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 20414  0106A2  EC8D  F0AB         	call	_Byte_SetBit	;wreg free
 20415                           
 20416                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 20417  0106A6  0100               	movlb	0	; () banked
 20418  0106A8  EE20 F003          	lfsr	2,3
 20419  0106AC  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20420  0106AE  26D9               	addwf	fsr2l,f,c
 20421  0106B0  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20422  0106B2  22DA               	addwfc	fsr2h,f,c
 20423  0106B4  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 20424  0106B8  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 20425  0106BC  0E06               	movlw	6
 20426  0106BE  0100               	movlb	0	; () banked
 20427  0106C0  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 20428  0106C2  0E00               	movlw	0
 20429  0106C4  0100               	movlb	0	; () banked
 20430  0106C6  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 20431  0106C8  EC8D  F0AB         	call	_Byte_SetBit	;wreg free
 20432                           
 20433                           ;SPI.c: 82: break;
 20434  0106CC  D084               	goto	l609
 20435  0106CE                     
 20436                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 20437  0106CE  0100               	movlb	0	; () banked
 20438  0106D0  EE20 F006          	lfsr	2,6
 20439  0106D4  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20440  0106D6  26D9               	addwf	fsr2l,f,c
 20441  0106D8  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20442  0106DA  22DA               	addwfc	fsr2h,f,c
 20443  0106DC  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 20444  0106E0  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 20445  0106E4  0E04               	movlw	4
 20446  0106E6  0100               	movlb	0	; () banked
 20447  0106E8  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 20448  0106EA  0E00               	movlw	0
 20449  0106EC  0100               	movlb	0	; () banked
 20450  0106EE  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 20451  0106F0  EC8D  F0AB         	call	_Byte_SetBit	;wreg free
 20452                           
 20453                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 20454  0106F4  0100               	movlb	0	; () banked
 20455  0106F6  EE20 F003          	lfsr	2,3
 20456  0106FA  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20457  0106FC  26D9               	addwf	fsr2l,f,c
 20458  0106FE  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20459  010700  22DA               	addwfc	fsr2h,f,c
 20460  010702  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 20461  010706  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 20462  01070A  0E06               	movlw	6
 20463  01070C  0100               	movlb	0	; () banked
 20464  01070E  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 20465  010710  0E01               	movlw	1
 20466  010712  0100               	movlb	0	; () banked
 20467  010714  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 20468  010716  EC8D  F0AB         	call	_Byte_SetBit	;wreg free
 20469                           
 20470                           ;SPI.c: 86: break;
 20471  01071A  D05D               	goto	l609
 20472  01071C                     
 20473                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 20474  01071C  0100               	movlb	0	; () banked
 20475  01071E  EE20 F006          	lfsr	2,6
 20476  010722  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20477  010724  26D9               	addwf	fsr2l,f,c
 20478  010726  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20479  010728  22DA               	addwfc	fsr2h,f,c
 20480  01072A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 20481  01072E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 20482  010732  0E04               	movlw	4
 20483  010734  0100               	movlb	0	; () banked
 20484  010736  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 20485  010738  0E01               	movlw	1
 20486  01073A  0100               	movlb	0	; () banked
 20487  01073C  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 20488  01073E  EC8D  F0AB         	call	_Byte_SetBit	;wreg free
 20489                           
 20490                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 20491  010742  0100               	movlb	0	; () banked
 20492  010744  EE20 F003          	lfsr	2,3
 20493  010748  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20494  01074A  26D9               	addwf	fsr2l,f,c
 20495  01074C  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20496  01074E  22DA               	addwfc	fsr2h,f,c
 20497  010750  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 20498  010754  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 20499  010758  0E06               	movlw	6
 20500  01075A  0100               	movlb	0	; () banked
 20501  01075C  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 20502  01075E  0E00               	movlw	0
 20503  010760  0100               	movlb	0	; () banked
 20504  010762  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 20505  010764  EC8D  F0AB         	call	_Byte_SetBit	;wreg free
 20506                           
 20507                           ;SPI.c: 90: break;
 20508  010768  D036               	goto	l609
 20509  01076A                     
 20510                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 20511  01076A  0100               	movlb	0	; () banked
 20512  01076C  EE20 F006          	lfsr	2,6
 20513  010770  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20514  010772  26D9               	addwf	fsr2l,f,c
 20515  010774  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20516  010776  22DA               	addwfc	fsr2h,f,c
 20517  010778  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 20518  01077C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 20519  010780  0E04               	movlw	4
 20520  010782  0100               	movlb	0	; () banked
 20521  010784  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 20522  010786  0E01               	movlw	1
 20523  010788  0100               	movlb	0	; () banked
 20524  01078A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 20525  01078C  EC8D  F0AB         	call	_Byte_SetBit	;wreg free
 20526                           
 20527                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 20528  010790  0100               	movlb	0	; () banked
 20529  010792  EE20 F003          	lfsr	2,3
 20530  010796  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20531  010798  26D9               	addwf	fsr2l,f,c
 20532  01079A  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20533  01079C  22DA               	addwfc	fsr2h,f,c
 20534  01079E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 20535  0107A2  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 20536  0107A6  0E06               	movlw	6
 20537  0107A8  0100               	movlb	0	; () banked
 20538  0107AA  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 20539  0107AC  0E01               	movlw	1
 20540  0107AE  0100               	movlb	0	; () banked
 20541  0107B0  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 20542  0107B2  EC8D  F0AB         	call	_Byte_SetBit	;wreg free
 20543                           
 20544                           ;SPI.c: 94: break;
 20545  0107B6  D00F               	goto	l609
 20546  0107B8                     l607:
 20547  0107B8  0100               	movlb	0	; () banked
 20548  0107BA  5192               	movf	SPI_Init@pMode& (0+255),w,b
 20549                           
 20550                           ; Switch size 1, requested type "space"
 20551                           ; Number of cases is 4, Range of values is 0 to 3
 20552                           ; switch strategies available:
 20553                           ; Name         Instructions Cycles
 20554                           ; simple_byte           13     7 (average)
 20555                           ;	Chosen strategy is simple_byte
 20556  0107BC  0A00               	xorlw	0	; case 0
 20557  0107BE  B4D8               	btfsc	status,2,c
 20558  0107C0  D75F               	goto	l608
 20559  0107C2  0A01               	xorlw	1	; case 1
 20560  0107C4  B4D8               	btfsc	status,2,c
 20561  0107C6  D783               	goto	l610
 20562  0107C8  0A03               	xorlw	3	; case 2
 20563  0107CA  B4D8               	btfsc	status,2,c
 20564  0107CC  D7A7               	goto	l611
 20565  0107CE  0A01               	xorlw	1	; case 3
 20566  0107D0  A4D8               	btfss	status,2,c
 20567  0107D2  0012               	return	
 20568  0107D4  D7CA               	goto	l612
 20569  0107D6                     l609:
 20570                           
 20571                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 20572                           
 20573                           ; BSR set to: 0
 20574  0107D6  0100               	movlb	0	; () banked
 20575  0107D8  EE20 F006          	lfsr	2,6
 20576  0107DC  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20577  0107DE  26D9               	addwf	fsr2l,f,c
 20578  0107E0  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20579  0107E2  22DA               	addwfc	fsr2h,f,c
 20580  0107E4  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 20581  0107E8  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 20582  0107EC  0E07               	movlw	7
 20583  0107EE  0100               	movlb	0	; () banked
 20584  0107F0  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 20585  0107F2  0E00               	movlw	0
 20586  0107F4  0100               	movlb	0	; () banked
 20587  0107F6  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 20588  0107F8  EC8D  F0AB         	call	_Byte_SetBit	;wreg free
 20589                           
 20590                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 20591  0107FC  0100               	movlb	0	; () banked
 20592  0107FE  EE20 F006          	lfsr	2,6
 20593  010802  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20594  010804  26D9               	addwf	fsr2l,f,c
 20595  010806  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20596  010808  22DA               	addwfc	fsr2h,f,c
 20597  01080A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 20598  01080E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 20599  010812  0E06               	movlw	6
 20600  010814  0100               	movlb	0	; () banked
 20601  010816  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 20602  010818  0E00               	movlw	0
 20603  01081A  0100               	movlb	0	; () banked
 20604  01081C  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 20605  01081E  EC8D  F0AB         	call	_Byte_SetBit	;wreg free
 20606                           
 20607                           ;SPI.c: 106: Timer2_Init(pClock);
 20608  010822  C08D  F06D         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 20609  010826  C08E  F06E         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 20610  01082A  C08F  F06F         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 20611  01082E  C090  F070         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 20612  010832  EC76  F099         	call	_Timer2_Init	;wreg free
 20613                           
 20614                           ;SPI.c: 112: SPI_DisableISR(pInput);
 20615  010836  C093  F060         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 20616  01083A  C094  F061         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 20617  01083E  EC05  F0B1         	call	_SPI_DisableISR	;wreg free
 20618                           
 20619                           ;SPI.c: 116: switch (pChannel)
 20620  010842  D004               	goto	l614
 20621  010844                     l615:
 20622                           
 20623                           ; BSR set to: 0
 20624  010844  869F               	bsf	3999,3,c	;volatile
 20625  010846  D00B               	goto	l616
 20626  010848                     l617:
 20627                           
 20628                           ; BSR set to: 0
 20629  010848  8EA5               	bsf	4005,7,c	;volatile
 20630  01084A  D009               	goto	l616
 20631  01084C                     l614:
 20632                           
 20633                           ; BSR set to: 0
 20634  01084C  0100               	movlb	0	; () banked
 20635  01084E  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 20636                           
 20637                           ; Switch size 1, requested type "space"
 20638                           ; Number of cases is 2, Range of values is 0 to 1
 20639                           ; switch strategies available:
 20640                           ; Name         Instructions Cycles
 20641                           ; simple_byte            7     4 (average)
 20642                           ;	Chosen strategy is simple_byte
 20643  010850  0A00               	xorlw	0	; case 0
 20644  010852  B4D8               	btfsc	status,2,c
 20645  010854  D7F7               	goto	l615
 20646  010856  0A01               	xorlw	1	; case 1
 20647  010858  A4D8               	btfss	status,2,c
 20648  01085A  0012               	return	
 20649  01085C  D7F5               	goto	l617
 20650  01085E                     l616:
 20651                           
 20652                           ; BSR set to: 0
 20653                           ;SPI.c: 124: SPI_DCS(pInput);
 20654                           
 20655                           ; BSR set to: 0
 20656  01085E  C093  F060         	movff	SPI_Init@pInput,SPI_DCS@pInput
 20657  010862  C094  F061         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 20658  010866  EC50  F0B0         	call	_SPI_DCS	;wreg free
 20659                           
 20660                           ;SPI.c: 126: pInput->mBusy = 0;
 20661  01086A  C093  FFD9         	movff	SPI_Init@pInput,fsr2l
 20662  01086E  C094  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 20663  010872  0E00               	movlw	0
 20664  010874  6EDF               	movwf	indf2,c
 20665                           
 20666                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 20667  010876  0100               	movlb	0	; () banked
 20668  010878  EE20 F006          	lfsr	2,6
 20669  01087C  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20670  01087E  26D9               	addwf	fsr2l,f,c
 20671  010880  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20672  010882  22DA               	addwfc	fsr2h,f,c
 20673  010884  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 20674  010888  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 20675  01088C  0E00               	movlw	0
 20676  01088E  0100               	movlb	0	; () banked
 20677  010890  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 20678  010892  0E03               	movlw	3
 20679  010894  0100               	movlb	0	; () banked
 20680  010896  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 20681  010898  EC4E  F0B1         	call	_Byte_SetQuad	;wreg free
 20682                           
 20683                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 20684  01089C  0100               	movlb	0	; () banked
 20685  01089E  EE20 F006          	lfsr	2,6
 20686  0108A2  5193               	movf	SPI_Init@pInput& (0+255),w,b
 20687  0108A4  26D9               	addwf	fsr2l,f,c
 20688  0108A6  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20689  0108A8  22DA               	addwfc	fsr2h,f,c
 20690  0108AA  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 20691  0108AE  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 20692  0108B2  0E05               	movlw	5
 20693  0108B4  0100               	movlb	0	; () banked
 20694  0108B6  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 20695  0108B8  0E01               	movlw	1
 20696  0108BA  0100               	movlb	0	; () banked
 20697  0108BC  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 20698  0108BE  EC8D  F0AB         	call	_Byte_SetBit	;wreg free
 20699  0108C2  0012               	return		;funcret
 20700  0108C4                     __end_of_SPI_Init:
 20701                           	opt stack 0
 20702                           tosu	equ	0xFFF
 20703                           tosh	equ	0xFFE
 20704                           tosl	equ	0xFFD
 20705                           pclath	equ	0xFFA
 20706                           tblptru	equ	0xFF8
 20707                           tblptrh	equ	0xFF7
 20708                           tblptrl	equ	0xFF6
 20709                           tablat	equ	0xFF5
 20710                           prodh	equ	0xFF4
 20711                           prodl	equ	0xFF3
 20712                           intcon	equ	0xFF2
 20713                           postinc0	equ	0xFEE
 20714                           wreg	equ	0xFE8
 20715                           indf1	equ	0xFE7
 20716                           postdec1	equ	0xFE5
 20717                           fsr1h	equ	0xFE2
 20718                           fsr1l	equ	0xFE1
 20719                           indf2	equ	0xFDF
 20720                           postinc2	equ	0xFDE
 20721                           postdec2	equ	0xFDD
 20722                           plusw2	equ	0xFDB
 20723                           fsr2h	equ	0xFDA
 20724                           fsr2l	equ	0xFD9
 20725                           status	equ	0xFD8
 20726                           
 20727 ;; *************** function _Timer2_Init *****************
 20728 ;; Defined at:
 20729 ;;		line 10 in file "Library/Timer2.c"
 20730 ;; Parameters:    Size  Location     Type
 20731 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 20732 ;; Auto vars:     Size  Location     Type
 20733 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 20734 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 20735 ;;  RDIV            4   18[BANK0 ] unsigned long 
 20736 ;; Return value:  Size  Location     Type
 20737 ;;                  1    wreg      void 
 20738 ;; Registers used:
 20739 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20740 ;; Tracked objects:
 20741 ;;		On entry : 0/0
 20742 ;;		On exit  : 0/0
 20743 ;;		Unchanged: 0/0
 20744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20745 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20746 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20747 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20748 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20749 ;;Total ram usage:       17 bytes
 20750 ;; Hardware stack levels used:    1
 20751 ;; Hardware stack levels required when called:    8
 20752 ;; This function calls:
 20753 ;;		_Timer2_Clear
 20754 ;;		___lldiv
 20755 ;; This function is called by:
 20756 ;;		_SPI_Init
 20757 ;; This function uses a non-reentrant model
 20758 ;;
 20759                           
 20760                           	psect	text97
 20761  0132EC                     __ptext97:
 20762                           	opt stack 0
 20763  0132EC                     _Timer2_Init:
 20764                           	opt stack 18
 20765                           
 20766                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 20767                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 20768                           ;Timer2.c: 14: static UINT8 PRE = 0;
 20769                           ;Timer2.c: 15: static UINT32 DIV = 0;
 20770                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 20771                           
 20772                           ;incstack = 0
 20773  0132EC  0E00               	movlw	0
 20774  0132EE  0100               	movlb	0	; () banked
 20775  0132F0  6F76               	movwf	Timer2_Init@pCPUClock& (0+255),b
 20776  0132F2  0E6C               	movlw	108
 20777  0132F4  6F77               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 20778  0132F6  0EDC               	movlw	220
 20779  0132F8  6F78               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 20780  0132FA  0E02               	movlw	2
 20781  0132FC  6F79               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 20782                           
 20783                           ; BSR set to: 0
 20784                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 20785                           ;Timer2.c: 20: pFrequency *= 2;
 20786  0132FE  0100               	movlb	0	; () banked
 20787  013300  90D8               	bcf	status,0,c
 20788  013302  376D               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 20789  013304  376E               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 20790  013306  376F               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 20791  013308  3770               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 20792                           
 20793                           ; BSR set to: 0
 20794                           ;Timer2.c: 23: pCPUClock /= 4;
 20795  01330A  0E02               	movlw	2
 20796  01330C  0100               	movlb	0	; () banked
 20797  01330E  6F71               	movwf	??_Timer2_Init& (0+255),b
 20798  013310                     u9395:
 20799  013310  90D8               	bcf	status,0,c
 20800  013312  0100               	movlb	0	; () banked
 20801  013314  3379               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 20802  013316  3378               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 20803  013318  3377               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 20804  01331A  3376               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 20805  01331C  0100               	movlb	0	; () banked
 20806  01331E  2F71               	decfsz	??_Timer2_Init& (0+255),f,b
 20807  013320  D7F7               	goto	u9395
 20808                           
 20809                           ; BSR set to: 0
 20810                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 20811  013322  C076  F060         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 20812  013326  C077  F061         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 20813  01332A  C078  F062         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 20814  01332E  C079  F063         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 20815  013332  C06D  F064         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 20816  013336  C06E  F065         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 20817  01333A  C06F  F066         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 20818  01333E  C070  F067         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 20819  013342  ECDB  F0A0         	call	___lldiv	;wreg free
 20820  013346  C060  F07A         	movff	?___lldiv,Timer2_Init@DIVIDE
 20821  01334A  C061  F07B         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 20822  01334E  C062  F07C         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 20823  013352  C063  F07D         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 20824                           
 20825                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 20826  013356  D010               	goto	l1828
 20827  013358                     l12680:
 20828                           
 20829                           ;Timer2.c: 28: {
 20830                           ;Timer2.c: 29: RDIV = 0;
 20831  013358  0E00               	movlw	0
 20832  01335A  0100               	movlb	0	; () banked
 20833  01335C  6F72               	movwf	Timer2_Init@RDIV& (0+255),b
 20834  01335E  0E00               	movlw	0
 20835  013360  6F73               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 20836  013362  0E00               	movlw	0
 20837  013364  6F74               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 20838  013366  0E00               	movlw	0
 20839  013368  6F75               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 20840                           
 20841                           ; BSR set to: 0
 20842                           ;Timer2.c: 30: INDEX ++;
 20843  01336A  0100               	movlb	0	; () banked
 20844  01336C  2BE4               	incf	Timer2_Init@INDEX& (0+255),f,b
 20845                           
 20846                           ; BSR set to: 0
 20847                           ;Timer2.c: 31: if (INDEX >= 3)
 20848  01336E  0E02               	movlw	2
 20849  013370  0100               	movlb	0	; () banked
 20850  013372  65E4               	cpfsgt	Timer2_Init@INDEX& (0+255),b
 20851  013374  D001               	goto	l1828
 20852  013376  D026               	goto	u9410
 20853  013378                     l1828:
 20854                           
 20855                           ; BSR set to: 0
 20856                           
 20857                           ; BSR set to: 0
 20858  013378  C07A  F060         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 20859  01337C  C07B  F061         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 20860  013380  C07C  F062         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 20861  013384  C07D  F063         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 20862  013388  0100               	movlb	0	; () banked
 20863  01338A  51E4               	movf	Timer2_Init@INDEX& (0+255),w,b
 20864  01338C  0D01               	mullw	1
 20865  01338E  0E82               	movlw	low Timer2_Init@PRESCALE
 20866  013390  24F3               	addwf	prodl,w,c
 20867  013392  6EF6               	movwf	tblptrl,c
 20868  013394  0EFD               	movlw	high Timer2_Init@PRESCALE
 20869  013396  20F4               	addwfc	prodh,w,c
 20870  013398  6EF7               	movwf	tblptrh,c
 20871  01339A                     	if	1	;There are 3 active tblptr bytes
 20872  01339A  6AF8               	clrf	tblptru,c
 20873  01339C  0E00               	movlw	low (__mediumconst shr (0+16))
 20874  01339E  22F8               	addwfc	tblptru,f,c
 20875  0133A0                     	endif
 20876  0133A0  0008               	tblrd		*
 20877  0133A2  50F5               	movf	tablat,w,c
 20878  0133A4  0100               	movlb	0	; () banked
 20879  0133A6  6F64               	movwf	___lldiv@divisor& (0+255),b
 20880  0133A8  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 20881  0133AA  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 20882  0133AC  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 20883  0133AE  ECDB  F0A0         	call	___lldiv	;wreg free
 20884  0133B2  0100               	movlb	0	; () banked
 20885  0133B4  5163               	movf	(?___lldiv+3)& (0+255),w,b
 20886  0133B6  0100               	movlb	0	; () banked
 20887  0133B8  1162               	iorwf	(?___lldiv+2)& (0+255),w,b
 20888  0133BA  E1CE               	bnz	l12680
 20889  0133BC  0100               	movlb	0	; () banked
 20890  0133BE  0561               	decf	(?___lldiv+1)& (0+255),w,b
 20891  0133C0  B0D8               	btfsc	status,0,c
 20892  0133C2  D7CA               	goto	l1827
 20893  0133C4                     u9410:
 20894                           
 20895                           ; BSR set to: 0
 20896                           ;Timer2.c: 33: }
 20897                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 20898                           
 20899                           ; BSR set to: 0
 20900  0133C4  50CA               	movf	4042,w,c	;volatile
 20901  0133C6  0100               	movlb	0	; () banked
 20902  0133C8  19E4               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 20903  0133CA  0BFC               	andlw	-4
 20904  0133CC  19E4               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 20905  0133CE  6ECA               	movwf	4042,c	;volatile
 20906                           
 20907                           ; BSR set to: 0
 20908                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 20909  0133D0  84CA               	bsf	4042,2,c	;volatile
 20910                           
 20911                           ; BSR set to: 0
 20912                           ;Timer2.c: 44: Timer2_Clear();
 20913  0133D2  EC0F  F0B3         	call	_Timer2_Clear	;wreg free
 20914                           
 20915                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 20916  0133D6  0100               	movlb	0	; () banked
 20917  0133D8  51E4               	movf	Timer2_Init@INDEX& (0+255),w,b
 20918  0133DA  0D01               	mullw	1
 20919  0133DC  0E82               	movlw	low Timer2_Init@PRESCALE
 20920  0133DE  24F3               	addwf	prodl,w,c
 20921  0133E0  6EF6               	movwf	tblptrl,c
 20922  0133E2  0EFD               	movlw	high Timer2_Init@PRESCALE
 20923  0133E4  20F4               	addwfc	prodh,w,c
 20924  0133E6  6EF7               	movwf	tblptrh,c
 20925  0133E8                     	if	1	;There are 3 active tblptr bytes
 20926  0133E8  6AF8               	clrf	tblptru,c
 20927  0133EA  0E00               	movlw	low (__mediumconst shr (0+16))
 20928  0133EC  22F8               	addwfc	tblptru,f,c
 20929  0133EE                     	endif
 20930  0133EE  0008               	tblrd		*
 20931  0133F0  CFF5 F0E3          	movff	tablat,Timer2_Init@PRE
 20932                           
 20933                           ; BSR set to: 0
 20934                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 20935  0133F4  0EFF               	movlw	255
 20936  0133F6  0100               	movlb	0	; () banked
 20937  0133F8  257A               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 20938  0133FA  0103               	movlb	3	; () banked
 20939  0133FC  6F0C               	movwf	Timer2_Init@DIV& (0+255),b
 20940  0133FE  0EFF               	movlw	255
 20941  013400  0100               	movlb	0	; () banked
 20942  013402  217B               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 20943  013404  0103               	movlb	3	; () banked
 20944  013406  6F0D               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 20945  013408  0EFF               	movlw	255
 20946  01340A  0100               	movlb	0	; () banked
 20947  01340C  217C               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 20948  01340E  0103               	movlb	3	; () banked
 20949  013410  6F0E               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 20950  013412  0EFF               	movlw	255
 20951  013414  0100               	movlb	0	; () banked
 20952  013416  217D               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 20953  013418  0103               	movlb	3	; () banked
 20954  01341A  6F0F               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 20955                           
 20956                           ; BSR set to: 3
 20957                           ;Timer2.c: 48: INDEX = DIV/PRE;
 20958  01341C  C30C  F060         	movff	Timer2_Init@DIV,___lldiv@dividend
 20959  013420  C30D  F061         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 20960  013424  C30E  F062         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 20961  013428  C30F  F063         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 20962  01342C  0100               	movlb	0	; () banked
 20963  01342E  51E3               	movf	Timer2_Init@PRE& (0+255),w,b
 20964  013430  0100               	movlb	0	; () banked
 20965  013432  6F64               	movwf	___lldiv@divisor& (0+255),b
 20966  013434  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 20967  013436  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 20968  013438  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 20969  01343A  ECDB  F0A0         	call	___lldiv	;wreg free
 20970  01343E  0100               	movlb	0	; () banked
 20971  013440  5160               	movf	?___lldiv& (0+255),w,b
 20972  013442  0100               	movlb	0	; () banked
 20973  013444  6FE4               	movwf	Timer2_Init@INDEX& (0+255),b
 20974                           
 20975                           ; BSR set to: 0
 20976                           ;Timer2.c: 49: PR2 = INDEX;
 20977  013446  C0E4  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 20978                           
 20979                           ; BSR set to: 0
 20980  01344A  0012               	return		;funcret
 20981  01344C                     __end_of_Timer2_Init:
 20982                           	opt stack 0
 20983                           tosu	equ	0xFFF
 20984                           tosh	equ	0xFFE
 20985                           tosl	equ	0xFFD
 20986                           pclath	equ	0xFFA
 20987                           tblptru	equ	0xFF8
 20988                           tblptrh	equ	0xFF7
 20989                           tblptrl	equ	0xFF6
 20990                           tablat	equ	0xFF5
 20991                           prodh	equ	0xFF4
 20992                           prodl	equ	0xFF3
 20993                           intcon	equ	0xFF2
 20994                           postinc0	equ	0xFEE
 20995                           wreg	equ	0xFE8
 20996                           indf1	equ	0xFE7
 20997                           postdec1	equ	0xFE5
 20998                           fsr1h	equ	0xFE2
 20999                           fsr1l	equ	0xFE1
 21000                           indf2	equ	0xFDF
 21001                           postinc2	equ	0xFDE
 21002                           postdec2	equ	0xFDD
 21003                           plusw2	equ	0xFDB
 21004                           fsr2h	equ	0xFDA
 21005                           fsr2l	equ	0xFD9
 21006                           status	equ	0xFD8
 21007                           
 21008 ;; *************** function ___lldiv *****************
 21009 ;; Defined at:
 21010 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
 21011 ;; Parameters:    Size  Location     Type
 21012 ;;  dividend        4    0[BANK0 ] unsigned long 
 21013 ;;  divisor         4    4[BANK0 ] unsigned long 
 21014 ;; Auto vars:     Size  Location     Type
 21015 ;;  quotient        4    8[BANK0 ] unsigned long 
 21016 ;;  counter         1   12[BANK0 ] unsigned char 
 21017 ;; Return value:  Size  Location     Type
 21018 ;;                  4    0[BANK0 ] unsigned long 
 21019 ;; Registers used:
 21020 ;;		wreg, status,2, status,0
 21021 ;; Tracked objects:
 21022 ;;		On entry : 0/0
 21023 ;;		On exit  : 0/0
 21024 ;;		Unchanged: 0/0
 21025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21026 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21027 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21029 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21030 ;;Total ram usage:       13 bytes
 21031 ;; Hardware stack levels used:    1
 21032 ;; Hardware stack levels required when called:    7
 21033 ;; This function calls:
 21034 ;;		Nothing
 21035 ;; This function is called by:
 21036 ;;		_Timer0_Init
 21037 ;;		_Timer2_Init
 21038 ;;		_rand_between
 21039 ;;		_I2C_Init
 21040 ;; This function uses a non-reentrant model
 21041 ;;
 21042                           
 21043                           	psect	text98
 21044  0141B6                     __ptext98:
 21045                           	opt stack 0
 21046  0141B6                     ___lldiv:
 21047                           	opt stack 20
 21048                           
 21049                           ; BSR set to: 0
 21050                           ;incstack = 0
 21051  0141B6  0E00               	movlw	0
 21052  0141B8  0100               	movlb	0	; () banked
 21053  0141BA  6F68               	movwf	___lldiv@quotient& (0+255),b
 21054  0141BC  0E00               	movlw	0
 21055  0141BE  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
 21056  0141C0  0E00               	movlw	0
 21057  0141C2  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
 21058  0141C4  0E00               	movlw	0
 21059  0141C6  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
 21060                           
 21061                           ; BSR set to: 0
 21062  0141C8  0100               	movlb	0	; () banked
 21063  0141CA  5164               	movf	___lldiv@divisor& (0+255),w,b
 21064  0141CC  0100               	movlb	0	; () banked
 21065  0141CE  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 21066  0141D0  0100               	movlb	0	; () banked
 21067  0141D2  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 21068  0141D4  0100               	movlb	0	; () banked
 21069  0141D6  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 21070  0141D8  B4D8               	btfsc	status,2,c
 21071  0141DA  D042               	goto	l2792
 21072                           
 21073                           ; BSR set to: 0
 21074  0141DC  0E01               	movlw	1
 21075  0141DE  0100               	movlb	0	; () banked
 21076  0141E0  6F6C               	movwf	___lldiv@counter& (0+255),b
 21077  0141E2  D008               	goto	l2787
 21078  0141E4                     
 21079                           ; BSR set to: 0
 21080                           
 21081                           ; BSR set to: 0
 21082  0141E4  0100               	movlb	0	; () banked
 21083  0141E6  90D8               	bcf	status,0,c
 21084  0141E8  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 21085  0141EA  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 21086  0141EC  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 21087  0141EE  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 21088  0141F0  0100               	movlb	0	; () banked
 21089  0141F2  2B6C               	incf	___lldiv@counter& (0+255),f,b
 21090  0141F4                     l2787:
 21091                           
 21092                           ; BSR set to: 0
 21093                           
 21094                           ; BSR set to: 0
 21095  0141F4  0100               	movlb	0	; () banked
 21096  0141F6  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 21097  0141F8  D7F5               	goto	l2788
 21098  0141FA                     u9260:
 21099                           
 21100                           ; BSR set to: 0
 21101                           
 21102                           ; BSR set to: 0
 21103                           
 21104                           ; BSR set to: 0
 21105  0141FA  0100               	movlb	0	; () banked
 21106  0141FC  90D8               	bcf	status,0,c
 21107  0141FE  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 21108  014200  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 21109  014202  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 21110  014204  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 21111                           
 21112                           ; BSR set to: 0
 21113  014206  0100               	movlb	0	; () banked
 21114  014208  5164               	movf	___lldiv@divisor& (0+255),w,b
 21115  01420A  0100               	movlb	0	; () banked
 21116  01420C  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 21117  01420E  0100               	movlb	0	; () banked
 21118  014210  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 21119  014212  0100               	movlb	0	; () banked
 21120  014214  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 21121  014216  0100               	movlb	0	; () banked
 21122  014218  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 21123  01421A  0100               	movlb	0	; () banked
 21124  01421C  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 21125  01421E  0100               	movlb	0	; () banked
 21126  014220  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 21127  014222  0100               	movlb	0	; () banked
 21128  014224  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 21129  014226  A0D8               	btfss	status,0,c
 21130  014228  D012               	goto	l2791
 21131                           
 21132                           ; BSR set to: 0
 21133  01422A  0100               	movlb	0	; () banked
 21134  01422C  5164               	movf	___lldiv@divisor& (0+255),w,b
 21135  01422E  0100               	movlb	0	; () banked
 21136  014230  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 21137  014232  0100               	movlb	0	; () banked
 21138  014234  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 21139  014236  0100               	movlb	0	; () banked
 21140  014238  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 21141  01423A  0100               	movlb	0	; () banked
 21142  01423C  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 21143  01423E  0100               	movlb	0	; () banked
 21144  014240  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 21145  014242  0100               	movlb	0	; () banked
 21146  014244  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 21147  014246  0100               	movlb	0	; () banked
 21148  014248  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 21149                           
 21150                           ; BSR set to: 0
 21151  01424A  0100               	movlb	0	; () banked
 21152  01424C  8168               	bsf	___lldiv@quotient& (0+255),0,b
 21153  01424E                     l2791:
 21154                           
 21155                           ; BSR set to: 0
 21156                           
 21157                           ; BSR set to: 0
 21158  01424E  0100               	movlb	0	; () banked
 21159  014250  90D8               	bcf	status,0,c
 21160  014252  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 21161  014254  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 21162  014256  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 21163  014258  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 21164                           
 21165                           ; BSR set to: 0
 21166  01425A  0100               	movlb	0	; () banked
 21167  01425C  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 21168  01425E  D7CD               	goto	u9260
 21169  014260                     l2792:
 21170                           
 21171                           ; BSR set to: 0
 21172                           
 21173                           ; BSR set to: 0
 21174  014260  C068  F060         	movff	___lldiv@quotient,?___lldiv
 21175  014264  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 21176  014268  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 21177  01426C  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 21178                           
 21179                           ; BSR set to: 0
 21180  014270  0012               	return		;funcret
 21181  014272                     __end_of___lldiv:
 21182                           	opt stack 0
 21183                           tosu	equ	0xFFF
 21184                           tosh	equ	0xFFE
 21185                           tosl	equ	0xFFD
 21186                           pclath	equ	0xFFA
 21187                           tblptru	equ	0xFF8
 21188                           tblptrh	equ	0xFF7
 21189                           tblptrl	equ	0xFF6
 21190                           tablat	equ	0xFF5
 21191                           prodh	equ	0xFF4
 21192                           prodl	equ	0xFF3
 21193                           intcon	equ	0xFF2
 21194                           postinc0	equ	0xFEE
 21195                           wreg	equ	0xFE8
 21196                           indf1	equ	0xFE7
 21197                           postdec1	equ	0xFE5
 21198                           fsr1h	equ	0xFE2
 21199                           fsr1l	equ	0xFE1
 21200                           indf2	equ	0xFDF
 21201                           postinc2	equ	0xFDE
 21202                           postdec2	equ	0xFDD
 21203                           plusw2	equ	0xFDB
 21204                           fsr2h	equ	0xFDA
 21205                           fsr2l	equ	0xFD9
 21206                           status	equ	0xFD8
 21207                           
 21208 ;; *************** function _Timer2_Clear *****************
 21209 ;; Defined at:
 21210 ;;		line 3 in file "Library/Timer2.c"
 21211 ;; Parameters:    Size  Location     Type
 21212 ;;		None
 21213 ;; Auto vars:     Size  Location     Type
 21214 ;;		None
 21215 ;; Return value:  Size  Location     Type
 21216 ;;                  1    wreg      void 
 21217 ;; Registers used:
 21218 ;;		None
 21219 ;; Tracked objects:
 21220 ;;		On entry : 0/0
 21221 ;;		On exit  : 0/0
 21222 ;;		Unchanged: 0/0
 21223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21225 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21227 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21228 ;;Total ram usage:        0 bytes
 21229 ;; Hardware stack levels used:    1
 21230 ;; Hardware stack levels required when called:    7
 21231 ;; This function calls:
 21232 ;;		Nothing
 21233 ;; This function is called by:
 21234 ;;		_Timer2_Init
 21235 ;; This function uses a non-reentrant model
 21236 ;;
 21237                           
 21238                           	psect	text99
 21239  01661E                     __ptext99:
 21240                           	opt stack 0
 21241  01661E                     _Timer2_Clear:
 21242                           	opt stack 18
 21243                           
 21244                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 21245                           
 21246                           ; BSR set to: 0
 21247                           ;incstack = 0
 21248  01661E  929E               	bcf	3998,1,c	;volatile
 21249                           
 21250                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 21251  016620  929D               	bcf	3997,1,c	;volatile
 21252                           
 21253                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 21254  016622  929F               	bcf	3999,1,c	;volatile
 21255  016624  0012               	return		;funcret
 21256  016626                     __end_of_Timer2_Clear:
 21257                           	opt stack 0
 21258                           tosu	equ	0xFFF
 21259                           tosh	equ	0xFFE
 21260                           tosl	equ	0xFFD
 21261                           pclath	equ	0xFFA
 21262                           tblptru	equ	0xFF8
 21263                           tblptrh	equ	0xFF7
 21264                           tblptrl	equ	0xFF6
 21265                           tablat	equ	0xFF5
 21266                           prodh	equ	0xFF4
 21267                           prodl	equ	0xFF3
 21268                           intcon	equ	0xFF2
 21269                           postinc0	equ	0xFEE
 21270                           wreg	equ	0xFE8
 21271                           indf1	equ	0xFE7
 21272                           postdec1	equ	0xFE5
 21273                           fsr1h	equ	0xFE2
 21274                           fsr1l	equ	0xFE1
 21275                           indf2	equ	0xFDF
 21276                           postinc2	equ	0xFDE
 21277                           postdec2	equ	0xFDD
 21278                           plusw2	equ	0xFDB
 21279                           fsr2h	equ	0xFDA
 21280                           fsr2l	equ	0xFD9
 21281                           status	equ	0xFD8
 21282                           
 21283 ;; *************** function _SPI_DisableISR *****************
 21284 ;; Defined at:
 21285 ;;		line 181 in file "Library/SPI.c"
 21286 ;; Parameters:    Size  Location     Type
 21287 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 21288 ;;		 -> SPI1(11), SPI2(11), 
 21289 ;; Auto vars:     Size  Location     Type
 21290 ;;		None
 21291 ;; Return value:  Size  Location     Type
 21292 ;;                  1    wreg      void 
 21293 ;; Registers used:
 21294 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 21295 ;; Tracked objects:
 21296 ;;		On entry : 0/0
 21297 ;;		On exit  : 0/0
 21298 ;;		Unchanged: 0/0
 21299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21300 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21303 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21304 ;;Total ram usage:        2 bytes
 21305 ;; Hardware stack levels used:    1
 21306 ;; Hardware stack levels required when called:    7
 21307 ;; This function calls:
 21308 ;;		Nothing
 21309 ;; This function is called by:
 21310 ;;		_SPI_Init
 21311 ;; This function uses a non-reentrant model
 21312 ;;
 21313                           
 21314                           	psect	text100
 21315  01620A                     __ptext100:
 21316                           	opt stack 0
 21317  01620A                     _SPI_DisableISR:
 21318                           	opt stack 19
 21319                           
 21320                           ;SPI.c: 183: switch (pInput->mChannel)
 21321                           
 21322                           ;incstack = 0
 21323  01620A  D004               	goto	l654
 21324  01620C                     l655:
 21325                           
 21326                           ; BSR set to: 0
 21327  01620C  969D               	bcf	3997,3,c	;volatile
 21328  01620E  0012               	return	
 21329  016210                     l657:
 21330                           
 21331                           ; BSR set to: 0
 21332  016210  9EA3               	bcf	4003,7,c	;volatile
 21333                           
 21334                           ; BSR set to: 0
 21335                           ;SPI.c: 188: };
 21336                           
 21337                           ; BSR set to: 0
 21338                           
 21339                           ;SPI.c: 187: default: return;
 21340  016212  0012               	return	
 21341  016214                     l654:
 21342                           
 21343                           ; BSR set to: 0
 21344  016214  0100               	movlb	0	; () banked
 21345  016216  EE20 F002          	lfsr	2,2
 21346  01621A  5160               	movf	SPI_DisableISR@pInput& (0+255),w,b
 21347  01621C  26D9               	addwf	fsr2l,f,c
 21348  01621E  5161               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 21349  016220  22DA               	addwfc	fsr2h,f,c
 21350  016222  50DF               	movf	indf2,w,c
 21351                           
 21352                           ; Switch size 1, requested type "space"
 21353                           ; Number of cases is 2, Range of values is 0 to 1
 21354                           ; switch strategies available:
 21355                           ; Name         Instructions Cycles
 21356                           ; simple_byte            7     4 (average)
 21357                           ;	Chosen strategy is simple_byte
 21358  016224  0A00               	xorlw	0	; case 0
 21359  016226  B4D8               	btfsc	status,2,c
 21360  016228  D7F1               	goto	l655
 21361  01622A  0A01               	xorlw	1	; case 1
 21362  01622C  A4D8               	btfss	status,2,c
 21363  01622E  0012               	return	
 21364  016230  D7EF               	goto	l657
 21365  016232                     __end_of_SPI_DisableISR:
 21366                           	opt stack 0
 21367                           tosu	equ	0xFFF
 21368                           tosh	equ	0xFFE
 21369                           tosl	equ	0xFFD
 21370                           pclath	equ	0xFFA
 21371                           tblptru	equ	0xFF8
 21372                           tblptrh	equ	0xFF7
 21373                           tblptrl	equ	0xFF6
 21374                           tablat	equ	0xFF5
 21375                           prodh	equ	0xFF4
 21376                           prodl	equ	0xFF3
 21377                           intcon	equ	0xFF2
 21378                           postinc0	equ	0xFEE
 21379                           wreg	equ	0xFE8
 21380                           indf1	equ	0xFE7
 21381                           postdec1	equ	0xFE5
 21382                           fsr1h	equ	0xFE2
 21383                           fsr1l	equ	0xFE1
 21384                           indf2	equ	0xFDF
 21385                           postinc2	equ	0xFDE
 21386                           postdec2	equ	0xFDD
 21387                           plusw2	equ	0xFDB
 21388                           fsr2h	equ	0xFDA
 21389                           fsr2l	equ	0xFD9
 21390                           status	equ	0xFD8
 21391                           
 21392 ;; *************** function _SPI_DCS *****************
 21393 ;; Defined at:
 21394 ;;		line 219 in file "Library/SPI.c"
 21395 ;; Parameters:    Size  Location     Type
 21396 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 21397 ;;		 -> SPI1(11), SPI2(11), 
 21398 ;; Auto vars:     Size  Location     Type
 21399 ;;		None
 21400 ;; Return value:  Size  Location     Type
 21401 ;;                  1    wreg      void 
 21402 ;; Registers used:
 21403 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 21404 ;; Tracked objects:
 21405 ;;		On entry : 0/0
 21406 ;;		On exit  : 0/0
 21407 ;;		Unchanged: 0/0
 21408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21409 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21412 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21413 ;;Total ram usage:        2 bytes
 21414 ;; Hardware stack levels used:    1
 21415 ;; Hardware stack levels required when called:    7
 21416 ;; This function calls:
 21417 ;;		Nothing
 21418 ;; This function is called by:
 21419 ;;		_SPI_Init
 21420 ;; This function uses a non-reentrant model
 21421 ;;
 21422                           
 21423                           	psect	text101
 21424  0160A0                     __ptext101:
 21425                           	opt stack 0
 21426  0160A0                     _SPI_DCS:
 21427                           	opt stack 19
 21428                           
 21429                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 21430                           
 21431                           ; BSR set to: 0
 21432                           ;incstack = 0
 21433  0160A0  0100               	movlb	0	; () banked
 21434  0160A2  EE20 F002          	lfsr	2,2
 21435  0160A6  5160               	movf	SPI_DCS@pInput& (0+255),w,b
 21436  0160A8  26D9               	addwf	fsr2l,f,c
 21437  0160AA  5161               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 21438  0160AC  22DA               	addwfc	fsr2h,f,c
 21439  0160AE  50DF               	movf	indf2,w,c
 21440  0160B0  A4D8               	btfss	status,2,c
 21441  0160B2  D007               	goto	l673
 21442                           
 21443                           ; BSR set to: 0
 21444                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 21445  0160B4  C0EE  FFD9         	movff	_PortC+4,fsr2l
 21446  0160B8  C0EF  FFDA         	movff	_PortC+5,fsr2h
 21447  0160BC  0100               	movlb	0	; () banked
 21448  0160BE  84DF               	bsf	indf2,2,c
 21449  0160C0  0012               	return	
 21450  0160C2                     l673:
 21451                           
 21452                           ; BSR set to: 0
 21453                           ;SPI.c: 223: else
 21454                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 21455                           
 21456                           ; BSR set to: 0
 21457  0160C2  C39C  FFD9         	movff	_PortD+4,fsr2l
 21458  0160C6  C39D  FFDA         	movff	_PortD+5,fsr2h
 21459  0160CA  0103               	movlb	3	; () banked
 21460  0160CC  8EDF               	bsf	indf2,7,c
 21461  0160CE  0012               	return	
 21462  0160D0                     __end_of_SPI_DCS:
 21463                           	opt stack 0
 21464                           tosu	equ	0xFFF
 21465                           tosh	equ	0xFFE
 21466                           tosl	equ	0xFFD
 21467                           pclath	equ	0xFFA
 21468                           tblptru	equ	0xFF8
 21469                           tblptrh	equ	0xFF7
 21470                           tblptrl	equ	0xFF6
 21471                           tablat	equ	0xFF5
 21472                           prodh	equ	0xFF4
 21473                           prodl	equ	0xFF3
 21474                           intcon	equ	0xFF2
 21475                           postinc0	equ	0xFEE
 21476                           wreg	equ	0xFE8
 21477                           indf1	equ	0xFE7
 21478                           postdec1	equ	0xFE5
 21479                           fsr1h	equ	0xFE2
 21480                           fsr1l	equ	0xFE1
 21481                           indf2	equ	0xFDF
 21482                           postinc2	equ	0xFDE
 21483                           postdec2	equ	0xFDD
 21484                           plusw2	equ	0xFDB
 21485                           fsr2h	equ	0xFDA
 21486                           fsr2l	equ	0xFD9
 21487                           status	equ	0xFD8
 21488                           
 21489 ;; *************** function _Button_Init *****************
 21490 ;; Defined at:
 21491 ;;		line 18 in file "Library/Button.c"
 21492 ;; Parameters:    Size  Location     Type
 21493 ;;  pInput          2   59[BANK0 ] const PTR struct Button
 21494 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 21495 ;;  pThreshold      2   61[BANK0 ] unsigned short 
 21496 ;;  pInitIO         3   63[BANK0 ] PTR FTN()void 
 21497 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 21498 ;;  pGetState       3   66[BANK0 ] PTR FTN()unsigned char 
 21499 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 21500 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 21501 ;;  pFunction       3   69[BANK0 ] PTR FTN(unsigned char ,)
 21502 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_NULL(1), 
 21503 ;; Auto vars:     Size  Location     Type
 21504 ;;		None
 21505 ;; Return value:  Size  Location     Type
 21506 ;;                  1    wreg      void 
 21507 ;; Registers used:
 21508 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21509 ;; Tracked objects:
 21510 ;;		On entry : 0/0
 21511 ;;		On exit  : 0/0
 21512 ;;		Unchanged: 0/0
 21513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21514 ;;      Params:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21517 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21518 ;;Total ram usage:       13 bytes
 21519 ;; Hardware stack levels used:    1
 21520 ;; Hardware stack levels required when called:   15
 21521 ;; This function calls:
 21522 ;;		_HMI_InitButtons
 21523 ;;		_MXK_InitDIPSwitch
 21524 ;;		_MXK_InitTestButton
 21525 ;; This function is called by:
 21526 ;;		_HMI_Init
 21527 ;;		_FunctInitButton
 21528 ;; This function uses a non-reentrant model
 21529 ;;
 21530                           
 21531                           	psect	text102
 21532  013D0E                     __ptext102:
 21533                           	opt stack 0
 21534  013D0E                     _Button_Init:
 21535                           	opt stack 13
 21536                           
 21537                           ;Button.c: 21: if(pInput==(void*)0)
 21538                           
 21539                           ;incstack = 0
 21540  013D0E  0100               	movlb	0	; () banked
 21541  013D10  519B               	movf	Button_Init@pInput& (0+255),w,b
 21542  013D12  0100               	movlb	0	; () banked
 21543  013D14  119C               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 21544  013D16  B4D8               	btfsc	status,2,c
 21545  013D18  0012               	return	
 21546                           
 21547                           ; BSR set to: 0
 21548                           ;Button.c: 23: if(pInitIO==(void*)0)
 21549                           
 21550                           ; BSR set to: 0
 21551                           
 21552                           ; BSR set to: 0
 21553                           ;Button.c: 22: return;
 21554  013D1A  0100               	movlb	0	; () banked
 21555  013D1C  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 21556  013D1E  0100               	movlb	0	; () banked
 21557  013D20  11A0               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 21558  013D22  0100               	movlb	0	; () banked
 21559  013D24  11A1               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 21560  013D26  B4D8               	btfsc	status,2,c
 21561  013D28  0012               	return	
 21562                           
 21563                           ; BSR set to: 0
 21564                           ;Button.c: 25: if(pGetState==(void*)0)
 21565                           
 21566                           ; BSR set to: 0
 21567                           
 21568                           ; BSR set to: 0
 21569                           ;Button.c: 24: return;
 21570  013D2A  0100               	movlb	0	; () banked
 21571  013D2C  51A2               	movf	Button_Init@pGetState& (0+255),w,b
 21572  013D2E  0100               	movlb	0	; () banked
 21573  013D30  11A3               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 21574  013D32  0100               	movlb	0	; () banked
 21575  013D34  11A4               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 21576  013D36  B4D8               	btfsc	status,2,c
 21577  013D38  0012               	return	
 21578                           
 21579                           ; BSR set to: 0
 21580                           ;Button.c: 27: if(pFunction==(void*)0)
 21581                           
 21582                           ; BSR set to: 0
 21583                           
 21584                           ; BSR set to: 0
 21585                           ;Button.c: 26: return;
 21586  013D3A  0100               	movlb	0	; () banked
 21587  013D3C  51A5               	movf	Button_Init@pFunction& (0+255),w,b
 21588  013D3E  0100               	movlb	0	; () banked
 21589  013D40  11A6               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 21590  013D42  0100               	movlb	0	; () banked
 21591  013D44  11A7               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 21592  013D46  B4D8               	btfsc	status,2,c
 21593  013D48  0012               	return	
 21594                           
 21595                           ; BSR set to: 0
 21596                           ;Button.c: 30: if(pThreshold == 0)
 21597                           
 21598                           ; BSR set to: 0
 21599                           
 21600                           ; BSR set to: 0
 21601                           ;Button.c: 28: return;
 21602  013D4A  0100               	movlb	0	; () banked
 21603  013D4C  519D               	movf	Button_Init@pThreshold& (0+255),w,b
 21604  013D4E  0100               	movlb	0	; () banked
 21605  013D50  119E               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 21606  013D52  A4D8               	btfss	status,2,c
 21607  013D54  D005               	goto	l8
 21608                           
 21609                           ; BSR set to: 0
 21610                           ;Button.c: 31: pThreshold = 1;
 21611  013D56  0E00               	movlw	0
 21612  013D58  0100               	movlb	0	; () banked
 21613  013D5A  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 21614  013D5C  0E01               	movlw	1
 21615  013D5E  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 21616  013D60                     l8:
 21617                           
 21618                           ; BSR set to: 0
 21619                           ;Button.c: 34: pInput->mState = 0;
 21620                           
 21621                           ; BSR set to: 0
 21622  013D60  C09B  FFD9         	movff	Button_Init@pInput,fsr2l
 21623  013D64  C09C  FFDA         	movff	Button_Init@pInput+1,fsr2h
 21624  013D68  0E00               	movlw	0
 21625  013D6A  6EDF               	movwf	indf2,c
 21626                           
 21627                           ; BSR set to: 0
 21628                           ;Button.c: 35: pInput->mCount = 0;
 21629  013D6C  0100               	movlb	0	; () banked
 21630  013D6E  EE20 F001          	lfsr	2,1
 21631  013D72  519B               	movf	Button_Init@pInput& (0+255),w,b
 21632  013D74  26D9               	addwf	fsr2l,f,c
 21633  013D76  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 21634  013D78  22DA               	addwfc	fsr2h,f,c
 21635  013D7A  0E00               	movlw	0
 21636  013D7C  6EDF               	movwf	indf2,c
 21637                           
 21638                           ; BSR set to: 0
 21639                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 21640  013D7E  0100               	movlb	0	; () banked
 21641  013D80  EE20 F002          	lfsr	2,2
 21642  013D84  519B               	movf	Button_Init@pInput& (0+255),w,b
 21643  013D86  26D9               	addwf	fsr2l,f,c
 21644  013D88  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 21645  013D8A  22DA               	addwfc	fsr2h,f,c
 21646  013D8C  C09D  FFDE         	movff	Button_Init@pThreshold,postinc2
 21647  013D90  C09E  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 21648                           
 21649                           ; BSR set to: 0
 21650                           ;Button.c: 37: pInput->mFunction = pFunction;
 21651  013D94  0100               	movlb	0	; () banked
 21652  013D96  EE20 F004          	lfsr	2,4
 21653  013D9A  519B               	movf	Button_Init@pInput& (0+255),w,b
 21654  013D9C  26D9               	addwf	fsr2l,f,c
 21655  013D9E  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 21656  013DA0  22DA               	addwfc	fsr2h,f,c
 21657  013DA2  C0A5  FFDE         	movff	Button_Init@pFunction,postinc2
 21658  013DA6  C0A6  FFDE         	movff	Button_Init@pFunction+1,postinc2
 21659  013DAA  C0A7  FFDE         	movff	Button_Init@pFunction+2,postinc2
 21660                           
 21661                           ; BSR set to: 0
 21662                           ;Button.c: 38: pInput->mGetState = pGetState;
 21663  013DAE  0100               	movlb	0	; () banked
 21664  013DB0  EE20 F007          	lfsr	2,7
 21665  013DB4  519B               	movf	Button_Init@pInput& (0+255),w,b
 21666  013DB6  26D9               	addwf	fsr2l,f,c
 21667  013DB8  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 21668  013DBA  22DA               	addwfc	fsr2h,f,c
 21669  013DBC  C0A2  FFDE         	movff	Button_Init@pGetState,postinc2
 21670  013DC0  C0A3  FFDE         	movff	Button_Init@pGetState+1,postinc2
 21671  013DC4  C0A4  FFDE         	movff	Button_Init@pGetState+2,postinc2
 21672                           
 21673                           ; BSR set to: 0
 21674                           ;Button.c: 41: pInitIO();
 21675  013DC8  D801               	call	u9818
 21676  013DCA  0012               	return	
 21677  013DCC                     u9818:
 21678  013DCC  0005               	push	
 21679  013DCE  6EFA               	movwf	pclath,c
 21680  013DD0  0100               	movlb	0	; () banked
 21681  013DD2  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 21682  013DD4  6EFD               	movwf	tosl,c
 21683  013DD6  51A0               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 21684  013DD8  6EFE               	movwf	tosh,c
 21685  013DDA  51A1               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 21686  013DDC  6EFF               	movwf	tosu,c
 21687  013DDE  50FA               	movf	pclath,w,c
 21688  013DE0  0012               	return		;indir
 21689  013DE2                     __end_of_Button_Init:
 21690                           	opt stack 0
 21691                           tosu	equ	0xFFF
 21692                           tosh	equ	0xFFE
 21693                           tosl	equ	0xFFD
 21694                           pclath	equ	0xFFA
 21695                           tblptru	equ	0xFF8
 21696                           tblptrh	equ	0xFF7
 21697                           tblptrl	equ	0xFF6
 21698                           tablat	equ	0xFF5
 21699                           prodh	equ	0xFF4
 21700                           prodl	equ	0xFF3
 21701                           intcon	equ	0xFF2
 21702                           postinc0	equ	0xFEE
 21703                           wreg	equ	0xFE8
 21704                           indf1	equ	0xFE7
 21705                           postdec1	equ	0xFE5
 21706                           fsr1h	equ	0xFE2
 21707                           fsr1l	equ	0xFE1
 21708                           indf2	equ	0xFDF
 21709                           postinc2	equ	0xFDE
 21710                           postdec2	equ	0xFDD
 21711                           plusw2	equ	0xFDB
 21712                           fsr2h	equ	0xFDA
 21713                           fsr2l	equ	0xFD9
 21714                           status	equ	0xFD8
 21715                           
 21716 ;; *************** function _MXK_InitDIPSwitch *****************
 21717 ;; Defined at:
 21718 ;;		line 20 in file "Library/MXK.c"
 21719 ;; Parameters:    Size  Location     Type
 21720 ;;		None
 21721 ;; Auto vars:     Size  Location     Type
 21722 ;;		None
 21723 ;; Return value:  Size  Location     Type
 21724 ;;                  1    wreg      void 
 21725 ;; Registers used:
 21726 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21727 ;; Tracked objects:
 21728 ;;		On entry : 0/0
 21729 ;;		On exit  : 0/0
 21730 ;;		Unchanged: 0/0
 21731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21735 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21736 ;;Total ram usage:        0 bytes
 21737 ;; Hardware stack levels used:    1
 21738 ;; Hardware stack levels required when called:   14
 21739 ;; This function calls:
 21740 ;;		_Port_SetQuadType
 21741 ;; This function is called by:
 21742 ;;		_FunctInitButton
 21743 ;;		_Button_Init
 21744 ;; This function uses a non-reentrant model
 21745 ;;
 21746                           
 21747                           	psect	text103
 21748  016374                     __ptext103:
 21749                           	opt stack 0
 21750  016374                     _MXK_InitDIPSwitch:
 21751                           	opt stack 13
 21752                           
 21753                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 21754                           
 21755                           ;incstack = 0
 21756  016374  0E98               	movlw	low _PortD
 21757  016376  0100               	movlb	0	; () banked
 21758  016378  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
 21759  01637A  0E03               	movlw	high _PortD
 21760  01637C  0100               	movlb	0	; () banked
 21761  01637E  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 21762  016380  0E00               	movlw	0
 21763  016382  0100               	movlb	0	; () banked
 21764  016384  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
 21765  016386  0E00               	movlw	0
 21766  016388  0100               	movlb	0	; () banked
 21767  01638A  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
 21768  01638C  EC52  F08D         	call	_Port_SetQuadType	;wreg free
 21769  016390  0012               	return		;funcret
 21770  016392                     __end_of_MXK_InitDIPSwitch:
 21771                           	opt stack 0
 21772                           tosu	equ	0xFFF
 21773                           tosh	equ	0xFFE
 21774                           tosl	equ	0xFFD
 21775                           pclath	equ	0xFFA
 21776                           tblptru	equ	0xFF8
 21777                           tblptrh	equ	0xFF7
 21778                           tblptrl	equ	0xFF6
 21779                           tablat	equ	0xFF5
 21780                           prodh	equ	0xFF4
 21781                           prodl	equ	0xFF3
 21782                           intcon	equ	0xFF2
 21783                           postinc0	equ	0xFEE
 21784                           wreg	equ	0xFE8
 21785                           indf1	equ	0xFE7
 21786                           postdec1	equ	0xFE5
 21787                           fsr1h	equ	0xFE2
 21788                           fsr1l	equ	0xFE1
 21789                           indf2	equ	0xFDF
 21790                           postinc2	equ	0xFDE
 21791                           postdec2	equ	0xFDD
 21792                           plusw2	equ	0xFDB
 21793                           fsr2h	equ	0xFDA
 21794                           fsr2l	equ	0xFD9
 21795                           status	equ	0xFD8
 21796                           
 21797 ;; *************** function _HMI_InitButtons *****************
 21798 ;; Defined at:
 21799 ;;		line 21 in file "HMI.c"
 21800 ;; Parameters:    Size  Location     Type
 21801 ;;		None
 21802 ;; Auto vars:     Size  Location     Type
 21803 ;;		None
 21804 ;; Return value:  Size  Location     Type
 21805 ;;                  1    wreg      void 
 21806 ;; Registers used:
 21807 ;;		wreg, status,2
 21808 ;; Tracked objects:
 21809 ;;		On entry : 0/0
 21810 ;;		On exit  : 0/0
 21811 ;;		Unchanged: 0/0
 21812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21816 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21817 ;;Total ram usage:        0 bytes
 21818 ;; Hardware stack levels used:    1
 21819 ;; Hardware stack levels required when called:    7
 21820 ;; This function calls:
 21821 ;;		Nothing
 21822 ;; This function is called by:
 21823 ;;		_HMI_Init
 21824 ;;		_Button_Init
 21825 ;; This function uses a non-reentrant model
 21826 ;;
 21827                           
 21828                           	psect	text104
 21829  01663C                     __ptext104:
 21830                           	opt stack 0
 21831  01663C                     _HMI_InitButtons:
 21832                           	opt stack 20
 21833                           
 21834                           ;HMI.c: 23: TRISE = 0xFC;
 21835                           
 21836                           ;incstack = 0
 21837  01663C  0EFC               	movlw	252
 21838  01663E  6E96               	movwf	3990,c	;volatile
 21839  016640  0012               	return		;funcret
 21840  016642                     __end_of_HMI_InitButtons:
 21841                           	opt stack 0
 21842                           tosu	equ	0xFFF
 21843                           tosh	equ	0xFFE
 21844                           tosl	equ	0xFFD
 21845                           pclath	equ	0xFFA
 21846                           tblptru	equ	0xFF8
 21847                           tblptrh	equ	0xFF7
 21848                           tblptrl	equ	0xFF6
 21849                           tablat	equ	0xFF5
 21850                           prodh	equ	0xFF4
 21851                           prodl	equ	0xFF3
 21852                           intcon	equ	0xFF2
 21853                           postinc0	equ	0xFEE
 21854                           wreg	equ	0xFE8
 21855                           indf1	equ	0xFE7
 21856                           postdec1	equ	0xFE5
 21857                           fsr1h	equ	0xFE2
 21858                           fsr1l	equ	0xFE1
 21859                           indf2	equ	0xFDF
 21860                           postinc2	equ	0xFDE
 21861                           postdec2	equ	0xFDD
 21862                           plusw2	equ	0xFDB
 21863                           fsr2h	equ	0xFDA
 21864                           fsr2l	equ	0xFD9
 21865                           status	equ	0xFD8
 21866                           
 21867 ;; *************** function _MXK_InitTestButton *****************
 21868 ;; Defined at:
 21869 ;;		line 10 in file "Library/MXK.c"
 21870 ;; Parameters:    Size  Location     Type
 21871 ;;		None
 21872 ;; Auto vars:     Size  Location     Type
 21873 ;;		None
 21874 ;; Return value:  Size  Location     Type
 21875 ;;                  1    wreg      void 
 21876 ;; Registers used:
 21877 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21878 ;; Tracked objects:
 21879 ;;		On entry : 0/0
 21880 ;;		On exit  : 0/0
 21881 ;;		Unchanged: 0/0
 21882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21884 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21886 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21887 ;;Total ram usage:        0 bytes
 21888 ;; Hardware stack levels used:    1
 21889 ;; Hardware stack levels required when called:   12
 21890 ;; This function calls:
 21891 ;;		_Port_SetPinType
 21892 ;; This function is called by:
 21893 ;;		_FunctInitButton
 21894 ;;		_Button_Init
 21895 ;; This function uses a non-reentrant model
 21896 ;;
 21897                           
 21898                           	psect	text105
 21899  016392                     __ptext105:
 21900                           	opt stack 0
 21901  016392                     _MXK_InitTestButton:
 21902                           	opt stack 15
 21903                           
 21904                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 21905                           
 21906                           ;incstack = 0
 21907  016392  0EA2               	movlw	low _PortB
 21908  016394  0100               	movlb	0	; () banked
 21909  016396  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 21910  016398  0E03               	movlw	high _PortB
 21911  01639A  0100               	movlb	0	; () banked
 21912  01639C  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 21913  01639E  0E04               	movlw	4
 21914  0163A0  0100               	movlb	0	; () banked
 21915  0163A2  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 21916  0163A4  0E00               	movlw	0
 21917  0163A6  0100               	movlb	0	; () banked
 21918  0163A8  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 21919  0163AA  EC5F  F093         	call	_Port_SetPinType	;wreg free
 21920  0163AE  0012               	return		;funcret
 21921  0163B0                     __end_of_MXK_InitTestButton:
 21922                           	opt stack 0
 21923                           tosu	equ	0xFFF
 21924                           tosh	equ	0xFFE
 21925                           tosl	equ	0xFFD
 21926                           pclath	equ	0xFFA
 21927                           tblptru	equ	0xFF8
 21928                           tblptrh	equ	0xFF7
 21929                           tblptrl	equ	0xFF6
 21930                           tablat	equ	0xFF5
 21931                           prodh	equ	0xFF4
 21932                           prodl	equ	0xFF3
 21933                           intcon	equ	0xFF2
 21934                           postinc0	equ	0xFEE
 21935                           wreg	equ	0xFE8
 21936                           indf1	equ	0xFE7
 21937                           postdec1	equ	0xFE5
 21938                           fsr1h	equ	0xFE2
 21939                           fsr1l	equ	0xFE1
 21940                           indf2	equ	0xFDF
 21941                           postinc2	equ	0xFDE
 21942                           postdec2	equ	0xFDD
 21943                           plusw2	equ	0xFDB
 21944                           fsr2h	equ	0xFDA
 21945                           fsr2l	equ	0xFD9
 21946                           status	equ	0xFD8
 21947                           
 21948 ;; *************** function _Port_SetPinType *****************
 21949 ;; Defined at:
 21950 ;;		line 189 in file "Library/Port.c"
 21951 ;; Parameters:    Size  Location     Type
 21952 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 21953 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 21954 ;;		 -> PortD(10), PortC(10), PortF(10), 
 21955 ;;  pPin            1   40[BANK0 ] enum E6750
 21956 ;;  pType           1   41[BANK0 ] enum E6795
 21957 ;; Auto vars:     Size  Location     Type
 21958 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 21959 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 21960 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 21961 ;;  Output          1   42[BANK0 ] enum E6475
 21962 ;; Return value:  Size  Location     Type
 21963 ;;                  1    wreg      enum E6475
 21964 ;; Registers used:
 21965 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21966 ;; Tracked objects:
 21967 ;;		On entry : 0/0
 21968 ;;		On exit  : 0/0
 21969 ;;		Unchanged: 0/0
 21970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21971 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21972 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21974 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21975 ;;Total ram usage:        7 bytes
 21976 ;; Hardware stack levels used:    1
 21977 ;; Hardware stack levels required when called:   11
 21978 ;; This function calls:
 21979 ;;		_Byte_SetBit
 21980 ;;		_PortProperty_Valid
 21981 ;;		_Word_SetPair
 21982 ;; This function is called by:
 21983 ;;		_Configure_GPIOs
 21984 ;;		_LED_Init
 21985 ;;		_Port_Init
 21986 ;;		_SPI_Init
 21987 ;;		_Motor_Init
 21988 ;;		_MXK_InitTestButton
 21989 ;;		_MXK_Init
 21990 ;;		_I2C_Init
 21991 ;; This function uses a non-reentrant model
 21992 ;;
 21993                           
 21994                           	psect	text106
 21995  0126BE                     __ptext106:
 21996                           	opt stack 0
 21997  0126BE                     _Port_SetPinType:
 21998                           	opt stack 17
 21999                           
 22000                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 22001                           
 22002                           ;incstack = 0
 22003  0126BE  C086  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 22004  0126C2  C087  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 22005  0126C6  CFDE F08B          	movff	postinc2,Port_SetPinType@Props
 22006  0126CA  CFDD F08C          	movff	postdec2,Port_SetPinType@Props+1
 22007                           
 22008                           ;Port.c: 192: ePinError Output = ePinErrorState;
 22009  0126CE  0E05               	movlw	5
 22010  0126D0  0100               	movlb	0	; () banked
 22011  0126D2  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 22012                           
 22013                           ;Port.c: 193: switch (pType)
 22014  0126D4  D0B5               	goto	l412
 22015  0126D6                     
 22016                           ; BSR set to: 0
 22017                           ;Port.c: 197: {
 22018                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 22019                           
 22020                           ; BSR set to: 0
 22021  0126D6  0100               	movlb	0	; () banked
 22022  0126D8  EE20 F002          	lfsr	2,2
 22023  0126DC  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 22024  0126DE  26D9               	addwf	fsr2l,f,c
 22025  0126E0  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22026  0126E2  22DA               	addwfc	fsr2h,f,c
 22027  0126E4  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22028  0126E8  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22029  0126EC  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22030  0126F0  0E01               	movlw	1
 22031  0126F2  0100               	movlb	0	; () banked
 22032  0126F4  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 22033  0126F6  EC8D  F0AB         	call	_Byte_SetBit	;wreg free
 22034                           
 22035                           ;Port.c: 203: break;
 22036  0126FA  D0B0               	goto	l414
 22037  0126FC                     
 22038                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 22039  0126FC  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 22040  012700  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 22041  012704  0E01               	movlw	1
 22042  012706  0100               	movlb	0	; () banked
 22043  012708  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 22044  01270A  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 22045  01270E  EC0A  F0A8         	call	_PortProperty_Valid	;wreg free
 22046  012712  0100               	movlb	0	; () banked
 22047  012714  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 22048  012716  0100               	movlb	0	; () banked
 22049  012718  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 22050  01271A  A4D8               	btfss	status,2,c
 22051  01271C  0012               	return	
 22052                           
 22053                           ; BSR set to: 0
 22054                           ;Port.c: 208: {
 22055                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 22056  01271E  0100               	movlb	0	; () banked
 22057  012720  EE20 F002          	lfsr	2,2
 22058  012724  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 22059  012726  26D9               	addwf	fsr2l,f,c
 22060  012728  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22061  01272A  22DA               	addwfc	fsr2h,f,c
 22062  01272C  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22063  012730  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22064  012734  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22065  012738  0E00               	movlw	0
 22066  01273A  0100               	movlb	0	; () banked
 22067  01273C  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 22068  01273E  EC8D  F0AB         	call	_Byte_SetBit	;wreg free
 22069                           
 22070                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 22071  012742  0100               	movlb	0	; () banked
 22072  012744  EE20 F004          	lfsr	2,4
 22073  012748  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 22074  01274A  26D9               	addwf	fsr2l,f,c
 22075  01274C  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22076  01274E  22DA               	addwfc	fsr2h,f,c
 22077  012750  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22078  012754  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22079  012758  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22080  01275C  0E00               	movlw	0
 22081  01275E  0100               	movlb	0	; () banked
 22082  012760  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 22083  012762  EC8D  F0AB         	call	_Byte_SetBit	;wreg free
 22084                           
 22085                           ;Port.c: 214: break;
 22086  012766  D07A               	goto	l414
 22087  012768                     
 22088                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 22089                           
 22090                           ;Port.c: 218: case eTypeOutputOpenSource:
 22091  012768  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 22092  01276C  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 22093  012770  0E02               	movlw	2
 22094  012772  0100               	movlb	0	; () banked
 22095  012774  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 22096  012776  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 22097  01277A  EC0A  F0A8         	call	_PortProperty_Valid	;wreg free
 22098  01277E  0100               	movlb	0	; () banked
 22099  012780  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 22100  012782  0100               	movlb	0	; () banked
 22101  012784  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 22102  012786  A4D8               	btfss	status,2,c
 22103  012788  0012               	return	
 22104                           
 22105                           ; BSR set to: 0
 22106                           ;Port.c: 220: {
 22107                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 22108  01278A  0100               	movlb	0	; () banked
 22109  01278C  EE20 F002          	lfsr	2,2
 22110  012790  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 22111  012792  26D9               	addwf	fsr2l,f,c
 22112  012794  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22113  012796  22DA               	addwfc	fsr2h,f,c
 22114  012798  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22115  01279C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22116  0127A0  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22117  0127A4  0E01               	movlw	1
 22118  0127A6  0100               	movlb	0	; () banked
 22119  0127A8  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 22120  0127AA  EC8D  F0AB         	call	_Byte_SetBit	;wreg free
 22121                           
 22122                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 22123  0127AE  0100               	movlb	0	; () banked
 22124  0127B0  EE20 F004          	lfsr	2,4
 22125  0127B4  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 22126  0127B6  26D9               	addwf	fsr2l,f,c
 22127  0127B8  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22128  0127BA  22DA               	addwfc	fsr2h,f,c
 22129  0127BC  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22130  0127C0  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22131  0127C4  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22132  0127C8  0E01               	movlw	1
 22133  0127CA  0100               	movlb	0	; () banked
 22134  0127CC  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 22135  0127CE  EC8D  F0AB         	call	_Byte_SetBit	;wreg free
 22136                           
 22137                           ;Port.c: 226: break;
 22138  0127D2  D044               	goto	l414
 22139  0127D4                     
 22140                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 22141                           
 22142                           ;Port.c: 230: case eTypeOutputPushPull:
 22143  0127D4  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 22144  0127D8  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 22145  0127DC  0E00               	movlw	0
 22146  0127DE  0100               	movlb	0	; () banked
 22147  0127E0  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 22148  0127E2  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 22149  0127E6  EC0A  F0A8         	call	_PortProperty_Valid	;wreg free
 22150  0127EA  0100               	movlb	0	; () banked
 22151  0127EC  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 22152  0127EE  0100               	movlb	0	; () banked
 22153  0127F0  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 22154  0127F2  A4D8               	btfss	status,2,c
 22155  0127F4  0012               	return	
 22156                           
 22157                           ; BSR set to: 0
 22158                           ;Port.c: 232: {
 22159                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 22160  0127F6  0100               	movlb	0	; () banked
 22161  0127F8  EE20 F002          	lfsr	2,2
 22162  0127FC  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 22163  0127FE  26D9               	addwf	fsr2l,f,c
 22164  012800  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22165  012802  22DA               	addwfc	fsr2h,f,c
 22166  012804  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22167  012808  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22168  01280C  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22169  012810  0E00               	movlw	0
 22170  012812  0100               	movlb	0	; () banked
 22171  012814  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 22172  012816  EC8D  F0AB         	call	_Byte_SetBit	;wreg free
 22173                           
 22174                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 22175  01281A  0100               	movlb	0	; () banked
 22176  01281C  EE20 F004          	lfsr	2,4
 22177  012820  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 22178  012822  26D9               	addwf	fsr2l,f,c
 22179  012824  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22180  012826  22DA               	addwfc	fsr2h,f,c
 22181  012828  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 22182  01282C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 22183  012830  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22184  012834  0E00               	movlw	0
 22185  012836  0100               	movlb	0	; () banked
 22186  012838  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 22187  01283A  EC8D  F0AB         	call	_Byte_SetBit	;wreg free
 22188                           
 22189                           ;Port.c: 239: }
 22190                           
 22191                           ;Port.c: 238: break;
 22192  01283E  D00E               	goto	l414
 22193  012840                     l412:
 22194  012840  0100               	movlb	0	; () banked
 22195  012842  5189               	movf	Port_SetPinType@pType& (0+255),w,b
 22196                           
 22197                           ; Switch size 1, requested type "space"
 22198                           ; Number of cases is 4, Range of values is 0 to 3
 22199                           ; switch strategies available:
 22200                           ; Name         Instructions Cycles
 22201                           ; simple_byte           13     7 (average)
 22202                           ;	Chosen strategy is simple_byte
 22203  012844  0A00               	xorlw	0	; case 0
 22204  012846  B4D8               	btfsc	status,2,c
 22205  012848  D746               	goto	l413
 22206  01284A  0A01               	xorlw	1	; case 1
 22207  01284C  B4D8               	btfsc	status,2,c
 22208  01284E  D756               	goto	l415
 22209  012850  0A03               	xorlw	3	; case 2
 22210  012852  B4D8               	btfsc	status,2,c
 22211  012854  D789               	goto	l417
 22212  012856  0A01               	xorlw	1	; case 3
 22213  012858  B4D8               	btfsc	status,2,c
 22214  01285A  D7BC               	goto	l421
 22215  01285C                     l414:
 22216                           
 22217                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 22218                           
 22219                           ; BSR set to: 0
 22220  01285C  0E08               	movlw	8
 22221  01285E  0100               	movlb	0	; () banked
 22222  012860  2586               	addwf	Port_SetPinType@pInput& (0+255),w,b
 22223  012862  0100               	movlb	0	; () banked
 22224  012864  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 22225  012866  0E00               	movlw	0
 22226  012868  0100               	movlb	0	; () banked
 22227  01286A  2187               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 22228  01286C  0100               	movlb	0	; () banked
 22229  01286E  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22230  012870  C088  F071         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 22231  012874  C089  F072         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 22232  012878  EC4A  F0AE         	call	_Word_SetPair	;wreg free
 22233  01287C  0012               	return	
 22234  01287E                     __end_of_Port_SetPinType:
 22235                           	opt stack 0
 22236                           tosu	equ	0xFFF
 22237                           tosh	equ	0xFFE
 22238                           tosl	equ	0xFFD
 22239                           pclath	equ	0xFFA
 22240                           tblptru	equ	0xFF8
 22241                           tblptrh	equ	0xFF7
 22242                           tblptrl	equ	0xFF6
 22243                           tablat	equ	0xFF5
 22244                           prodh	equ	0xFF4
 22245                           prodl	equ	0xFF3
 22246                           intcon	equ	0xFF2
 22247                           postinc0	equ	0xFEE
 22248                           wreg	equ	0xFE8
 22249                           indf1	equ	0xFE7
 22250                           postdec1	equ	0xFE5
 22251                           fsr1h	equ	0xFE2
 22252                           fsr1l	equ	0xFE1
 22253                           indf2	equ	0xFDF
 22254                           postinc2	equ	0xFDE
 22255                           postdec2	equ	0xFDD
 22256                           plusw2	equ	0xFDB
 22257                           fsr2h	equ	0xFDA
 22258                           fsr2l	equ	0xFD9
 22259                           status	equ	0xFD8
 22260                           
 22261 ;; *************** function _Port_SetQuadType *****************
 22262 ;; Defined at:
 22263 ;;		line 399 in file "Library/Port.c"
 22264 ;; Parameters:    Size  Location     Type
 22265 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 22266 ;;		 -> PortB(10), PortD(10), 
 22267 ;;  pQuad           1   56[BANK0 ] enum E6776
 22268 ;;  pType           1   57[BANK0 ] enum E6795
 22269 ;; Auto vars:     Size  Location     Type
 22270 ;;  Output          1   58[BANK0 ] enum E6475
 22271 ;; Return value:  Size  Location     Type
 22272 ;;                  1    wreg      enum E6475
 22273 ;; Registers used:
 22274 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22275 ;; Tracked objects:
 22276 ;;		On entry : 0/0
 22277 ;;		On exit  : 0/0
 22278 ;;		Unchanged: 0/0
 22279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22280 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22281 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22283 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22284 ;;Total ram usage:        5 bytes
 22285 ;; Hardware stack levels used:    1
 22286 ;; Hardware stack levels required when called:   13
 22287 ;; This function calls:
 22288 ;;		_Byte_SetQuad
 22289 ;;		_Port_CheckQuadType
 22290 ;;		_Word_SetPair
 22291 ;; This function is called by:
 22292 ;;		_MXK_InitDIPSwitch
 22293 ;;		_MXK_Init
 22294 ;; This function uses a non-reentrant model
 22295 ;;
 22296                           
 22297                           	psect	text107
 22298  011AA4                     __ptext107:
 22299                           	opt stack 0
 22300  011AA4                     _Port_SetQuadType:
 22301                           	opt stack 15
 22302                           
 22303                           ;Port.c: 401: ePinError Output = ePinErrorState;
 22304                           
 22305                           ;incstack = 0
 22306  011AA4  0E05               	movlw	5
 22307  011AA6  0100               	movlb	0	; () banked
 22308  011AA8  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 22309                           
 22310                           ;Port.c: 403: switch (pType)
 22311  011AAA  D0C7               	goto	l476
 22312  011AAC                     
 22313                           ; BSR set to: 0
 22314                           ;Port.c: 407: {
 22315                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 22316                           
 22317                           ; BSR set to: 0
 22318  011AAC  0100               	movlb	0	; () banked
 22319  011AAE  EE20 F002          	lfsr	2,2
 22320  011AB2  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22321  011AB4  26D9               	addwf	fsr2l,f,c
 22322  011AB6  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22323  011AB8  22DA               	addwfc	fsr2h,f,c
 22324  011ABA  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 22325  011ABE  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 22326  011AC2  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22327  011AC6  0E0F               	movlw	15
 22328  011AC8  0100               	movlb	0	; () banked
 22329  011ACA  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 22330  011ACC  EC4E  F0B1         	call	_Byte_SetQuad	;wreg free
 22331                           
 22332                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 22333  011AD0  0100               	movlb	0	; () banked
 22334  011AD2  EE20 F004          	lfsr	2,4
 22335  011AD6  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22336  011AD8  26D9               	addwf	fsr2l,f,c
 22337  011ADA  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22338  011ADC  22DA               	addwfc	fsr2h,f,c
 22339  011ADE  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 22340  011AE2  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 22341  011AE6  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22342  011AEA  0E00               	movlw	0
 22343  011AEC  0100               	movlb	0	; () banked
 22344  011AEE  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 22345  011AF0  EC4E  F0B1         	call	_Byte_SetQuad	;wreg free
 22346                           
 22347                           ;Port.c: 413: }
 22348                           ;Port.c: 415: break;
 22349  011AF4  D0B0               	goto	l478
 22350  011AF6                     
 22351                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 22352  011AF6  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 22353  011AFA  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 22354  011AFE  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 22355  011B02  0E03               	movlw	3
 22356  011B04  0100               	movlb	0	; () banked
 22357  011B06  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 22358  011B08  EC4F  F0AC         	call	_Port_CheckQuadType	;wreg free
 22359  011B0C  0100               	movlb	0	; () banked
 22360  011B0E  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 22361  011B10  0100               	movlb	0	; () banked
 22362  011B12  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 22363  011B14  A4D8               	btfss	status,2,c
 22364  011B16  0012               	return	
 22365                           
 22366                           ; BSR set to: 0
 22367                           ;Port.c: 418: {
 22368                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 22369  011B18  0100               	movlb	0	; () banked
 22370  011B1A  EE20 F002          	lfsr	2,2
 22371  011B1E  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22372  011B20  26D9               	addwf	fsr2l,f,c
 22373  011B22  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22374  011B24  22DA               	addwfc	fsr2h,f,c
 22375  011B26  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 22376  011B2A  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 22377  011B2E  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22378  011B32  0E00               	movlw	0
 22379  011B34  0100               	movlb	0	; () banked
 22380  011B36  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 22381  011B38  EC4E  F0B1         	call	_Byte_SetQuad	;wreg free
 22382                           
 22383                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 22384  011B3C  0100               	movlb	0	; () banked
 22385  011B3E  EE20 F004          	lfsr	2,4
 22386  011B42  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22387  011B44  26D9               	addwf	fsr2l,f,c
 22388  011B46  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22389  011B48  22DA               	addwfc	fsr2h,f,c
 22390  011B4A  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 22391  011B4E  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 22392  011B52  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22393  011B56  0E00               	movlw	0
 22394  011B58  0100               	movlb	0	; () banked
 22395  011B5A  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 22396  011B5C  EC4E  F0B1         	call	_Byte_SetQuad	;wreg free
 22397                           
 22398                           ;Port.c: 424: }
 22399  011B60  D07A               	goto	l478
 22400  011B62                     
 22401                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 22402  011B62  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 22403  011B66  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 22404  011B6A  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 22405  011B6E  0E03               	movlw	3
 22406  011B70  0100               	movlb	0	; () banked
 22407  011B72  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 22408  011B74  EC4F  F0AC         	call	_Port_CheckQuadType	;wreg free
 22409  011B78  0100               	movlb	0	; () banked
 22410  011B7A  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 22411  011B7C  0100               	movlb	0	; () banked
 22412  011B7E  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 22413  011B80  A4D8               	btfss	status,2,c
 22414  011B82  0012               	return	
 22415                           
 22416                           ; BSR set to: 0
 22417                           ;Port.c: 429: {
 22418                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 22419  011B84  0100               	movlb	0	; () banked
 22420  011B86  EE20 F002          	lfsr	2,2
 22421  011B8A  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22422  011B8C  26D9               	addwf	fsr2l,f,c
 22423  011B8E  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22424  011B90  22DA               	addwfc	fsr2h,f,c
 22425  011B92  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 22426  011B96  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 22427  011B9A  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22428  011B9E  0E0F               	movlw	15
 22429  011BA0  0100               	movlb	0	; () banked
 22430  011BA2  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 22431  011BA4  EC4E  F0B1         	call	_Byte_SetQuad	;wreg free
 22432                           
 22433                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 22434  011BA8  0100               	movlb	0	; () banked
 22435  011BAA  EE20 F004          	lfsr	2,4
 22436  011BAE  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22437  011BB0  26D9               	addwf	fsr2l,f,c
 22438  011BB2  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22439  011BB4  22DA               	addwfc	fsr2h,f,c
 22440  011BB6  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 22441  011BBA  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 22442  011BBE  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22443  011BC2  0E0F               	movlw	15
 22444  011BC4  0100               	movlb	0	; () banked
 22445  011BC6  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 22446  011BC8  EC4E  F0B1         	call	_Byte_SetQuad	;wreg free
 22447                           
 22448                           ;Port.c: 435: }
 22449  011BCC  D044               	goto	l478
 22450  011BCE                     
 22451                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 22452  011BCE  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 22453  011BD2  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 22454  011BD6  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 22455  011BDA  0E03               	movlw	3
 22456  011BDC  0100               	movlb	0	; () banked
 22457  011BDE  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 22458  011BE0  EC4F  F0AC         	call	_Port_CheckQuadType	;wreg free
 22459  011BE4  0100               	movlb	0	; () banked
 22460  011BE6  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 22461  011BE8  0100               	movlb	0	; () banked
 22462  011BEA  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 22463  011BEC  A4D8               	btfss	status,2,c
 22464  011BEE  0012               	return	
 22465                           
 22466                           ; BSR set to: 0
 22467                           ;Port.c: 440: {
 22468                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 22469  011BF0  0100               	movlb	0	; () banked
 22470  011BF2  EE20 F002          	lfsr	2,2
 22471  011BF6  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22472  011BF8  26D9               	addwf	fsr2l,f,c
 22473  011BFA  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22474  011BFC  22DA               	addwfc	fsr2h,f,c
 22475  011BFE  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 22476  011C02  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 22477  011C06  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22478  011C0A  0E00               	movlw	0
 22479  011C0C  0100               	movlb	0	; () banked
 22480  011C0E  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 22481  011C10  EC4E  F0B1         	call	_Byte_SetQuad	;wreg free
 22482                           
 22483                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 22484  011C14  0100               	movlb	0	; () banked
 22485  011C16  EE20 F004          	lfsr	2,4
 22486  011C1A  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22487  011C1C  26D9               	addwf	fsr2l,f,c
 22488  011C1E  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22489  011C20  22DA               	addwfc	fsr2h,f,c
 22490  011C22  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 22491  011C26  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 22492  011C2A  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22493  011C2E  0E00               	movlw	0
 22494  011C30  0100               	movlb	0	; () banked
 22495  011C32  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 22496  011C34  EC4E  F0B1         	call	_Byte_SetQuad	;wreg free
 22497                           
 22498                           ;Port.c: 446: }
 22499  011C38  D00E               	goto	l478
 22500  011C3A                     l476:
 22501  011C3A  0100               	movlb	0	; () banked
 22502  011C3C  5199               	movf	Port_SetQuadType@pType& (0+255),w,b
 22503                           
 22504                           ; Switch size 1, requested type "space"
 22505                           ; Number of cases is 4, Range of values is 0 to 3
 22506                           ; switch strategies available:
 22507                           ; Name         Instructions Cycles
 22508                           ; simple_byte           13     7 (average)
 22509                           ;	Chosen strategy is simple_byte
 22510  011C3E  0A00               	xorlw	0	; case 0
 22511  011C40  B4D8               	btfsc	status,2,c
 22512  011C42  D734               	goto	l477
 22513  011C44  0A01               	xorlw	1	; case 1
 22514  011C46  B4D8               	btfsc	status,2,c
 22515  011C48  D756               	goto	l479
 22516  011C4A  0A03               	xorlw	3	; case 2
 22517  011C4C  B4D8               	btfsc	status,2,c
 22518  011C4E  D789               	goto	l483
 22519  011C50  0A01               	xorlw	1	; case 3
 22520  011C52  B4D8               	btfsc	status,2,c
 22521  011C54  D7BC               	goto	l486
 22522  011C56                     l478:
 22523                           
 22524                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 22525                           
 22526                           ; BSR set to: 0
 22527  011C56  0E08               	movlw	8
 22528  011C58  0100               	movlb	0	; () banked
 22529  011C5A  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 22530  011C5C  0100               	movlb	0	; () banked
 22531  011C5E  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 22532  011C60  0E00               	movlw	0
 22533  011C62  0100               	movlb	0	; () banked
 22534  011C64  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22535  011C66  0100               	movlb	0	; () banked
 22536  011C68  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22537  011C6A  0100               	movlb	0	; () banked
 22538  011C6C  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 22539  011C6E  0D04               	mullw	4
 22540  011C70  CFF3 F071          	movff	prodl,Word_SetPair@pPair
 22541  011C74  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 22542  011C78  EC4A  F0AE         	call	_Word_SetPair	;wreg free
 22543                           
 22544                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 22545  011C7C  0E08               	movlw	8
 22546  011C7E  0100               	movlb	0	; () banked
 22547  011C80  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 22548  011C82  0100               	movlb	0	; () banked
 22549  011C84  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 22550  011C86  0E00               	movlw	0
 22551  011C88  0100               	movlb	0	; () banked
 22552  011C8A  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22553  011C8C  0100               	movlb	0	; () banked
 22554  011C8E  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22555  011C90  0100               	movlb	0	; () banked
 22556  011C92  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 22557  011C94  0D04               	mullw	4
 22558  011C96  28F3               	incf	prodl,w,c
 22559  011C98  0100               	movlb	0	; () banked
 22560  011C9A  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 22561  011C9C  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 22562  011CA0  EC4A  F0AE         	call	_Word_SetPair	;wreg free
 22563                           
 22564                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 22565  011CA4  0E08               	movlw	8
 22566  011CA6  0100               	movlb	0	; () banked
 22567  011CA8  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 22568  011CAA  0100               	movlb	0	; () banked
 22569  011CAC  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 22570  011CAE  0E00               	movlw	0
 22571  011CB0  0100               	movlb	0	; () banked
 22572  011CB2  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22573  011CB4  0100               	movlb	0	; () banked
 22574  011CB6  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22575  011CB8  0100               	movlb	0	; () banked
 22576  011CBA  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 22577  011CBC  0D04               	mullw	4
 22578  011CBE  50F3               	movf	prodl,w,c
 22579  011CC0  0F02               	addlw	2
 22580  011CC2  0100               	movlb	0	; () banked
 22581  011CC4  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 22582  011CC6  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 22583  011CCA  EC4A  F0AE         	call	_Word_SetPair	;wreg free
 22584                           
 22585                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 22586  011CCE  0E08               	movlw	8
 22587  011CD0  0100               	movlb	0	; () banked
 22588  011CD2  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 22589  011CD4  0100               	movlb	0	; () banked
 22590  011CD6  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 22591  011CD8  0E00               	movlw	0
 22592  011CDA  0100               	movlb	0	; () banked
 22593  011CDC  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22594  011CDE  0100               	movlb	0	; () banked
 22595  011CE0  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22596  011CE2  0100               	movlb	0	; () banked
 22597  011CE4  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 22598  011CE6  0D04               	mullw	4
 22599  011CE8  50F3               	movf	prodl,w,c
 22600  011CEA  0F03               	addlw	3
 22601  011CEC  0100               	movlb	0	; () banked
 22602  011CEE  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 22603  011CF0  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 22604  011CF4  EC4A  F0AE         	call	_Word_SetPair	;wreg free
 22605  011CF8  0012               	return	
 22606  011CFA                     __end_of_Port_SetQuadType:
 22607                           	opt stack 0
 22608                           tosu	equ	0xFFF
 22609                           tosh	equ	0xFFE
 22610                           tosl	equ	0xFFD
 22611                           pclath	equ	0xFFA
 22612                           tblptru	equ	0xFF8
 22613                           tblptrh	equ	0xFF7
 22614                           tblptrl	equ	0xFF6
 22615                           tablat	equ	0xFF5
 22616                           prodh	equ	0xFF4
 22617                           prodl	equ	0xFF3
 22618                           intcon	equ	0xFF2
 22619                           postinc0	equ	0xFEE
 22620                           wreg	equ	0xFE8
 22621                           indf1	equ	0xFE7
 22622                           postdec1	equ	0xFE5
 22623                           fsr1h	equ	0xFE2
 22624                           fsr1l	equ	0xFE1
 22625                           indf2	equ	0xFDF
 22626                           postinc2	equ	0xFDE
 22627                           postdec2	equ	0xFDD
 22628                           plusw2	equ	0xFDB
 22629                           fsr2h	equ	0xFDA
 22630                           fsr2l	equ	0xFD9
 22631                           status	equ	0xFD8
 22632                           
 22633 ;; *************** function _Word_SetPair *****************
 22634 ;; Defined at:
 22635 ;;		line 149 in file "Library/Types.c"
 22636 ;; Parameters:    Size  Location     Type
 22637 ;;  pInput          2   15[BANK0 ] PTR struct Word
 22638 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 22639 ;;		 -> PortD(10), PortC(10), PortF(10), 
 22640 ;;  pPair           1   17[BANK0 ] unsigned char 
 22641 ;;  pValue          1   18[BANK0 ] unsigned char 
 22642 ;; Auto vars:     Size  Location     Type
 22643 ;;		None
 22644 ;; Return value:  Size  Location     Type
 22645 ;;                  1    wreg      void 
 22646 ;; Registers used:
 22647 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22648 ;; Tracked objects:
 22649 ;;		On entry : 0/0
 22650 ;;		On exit  : 0/0
 22651 ;;		Unchanged: 0/0
 22652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22653 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22656 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22657 ;;Total ram usage:        4 bytes
 22658 ;; Hardware stack levels used:    1
 22659 ;; Hardware stack levels required when called:    9
 22660 ;; This function calls:
 22661 ;;		_Byte_SetPair
 22662 ;; This function is called by:
 22663 ;;		_Port_SetPinType
 22664 ;;		_Port_SetQuadType
 22665 ;;		_Port_SetType
 22666 ;;		_Port_SetPairType
 22667 ;;		_PortProperty_Init
 22668 ;; This function uses a non-reentrant model
 22669 ;;
 22670                           
 22671                           	psect	text108
 22672  015C94                     __ptext108:
 22673                           	opt stack 0
 22674  015C94                     _Word_SetPair:
 22675                           	opt stack 18
 22676                           
 22677                           ;Types.c: 151: if (pPair >= 4)
 22678                           
 22679                           ;incstack = 0
 22680  015C94  0E03               	movlw	3
 22681  015C96  0100               	movlb	0	; () banked
 22682  015C98  6571               	cpfsgt	Word_SetPair@pPair& (0+255),b
 22683  015C9A  D014               	goto	l776
 22684                           
 22685                           ; BSR set to: 0
 22686                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 22687  015C9C  0E01               	movlw	1
 22688  015C9E  0100               	movlb	0	; () banked
 22689  015CA0  256F               	addwf	Word_SetPair@pInput& (0+255),w,b
 22690  015CA2  0100               	movlb	0	; () banked
 22691  015CA4  6F6B               	movwf	Byte_SetPair@pInput& (0+255),b
 22692  015CA6  0E00               	movlw	0
 22693  015CA8  0100               	movlb	0	; () banked
 22694  015CAA  2170               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 22695  015CAC  0100               	movlb	0	; () banked
 22696  015CAE  6F6C               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 22697  015CB0  0100               	movlb	0	; () banked
 22698  015CB2  5171               	movf	Word_SetPair@pPair& (0+255),w,b
 22699  015CB4  0FFC               	addlw	252
 22700  015CB6  0100               	movlb	0	; () banked
 22701  015CB8  6F6D               	movwf	Byte_SetPair@pPair& (0+255),b
 22702  015CBA  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 22703  015CBE  EC3D  F0B1         	call	_Byte_SetPair	;wreg free
 22704  015CC2  0012               	return	
 22705  015CC4                     l776:
 22706                           
 22707                           ;Types.c: 153: else
 22708                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 22709  015CC4  C06F  F06B         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 22710  015CC8  C070  F06C         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 22711  015CCC  C071  F06D         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 22712  015CD0  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 22713  015CD4  EC3D  F0B1         	call	_Byte_SetPair	;wreg free
 22714  015CD8  0012               	return	
 22715  015CDA                     __end_of_Word_SetPair:
 22716                           	opt stack 0
 22717                           tosu	equ	0xFFF
 22718                           tosh	equ	0xFFE
 22719                           tosl	equ	0xFFD
 22720                           pclath	equ	0xFFA
 22721                           tblptru	equ	0xFF8
 22722                           tblptrh	equ	0xFF7
 22723                           tblptrl	equ	0xFF6
 22724                           tablat	equ	0xFF5
 22725                           prodh	equ	0xFF4
 22726                           prodl	equ	0xFF3
 22727                           intcon	equ	0xFF2
 22728                           postinc0	equ	0xFEE
 22729                           wreg	equ	0xFE8
 22730                           indf1	equ	0xFE7
 22731                           postdec1	equ	0xFE5
 22732                           fsr1h	equ	0xFE2
 22733                           fsr1l	equ	0xFE1
 22734                           indf2	equ	0xFDF
 22735                           postinc2	equ	0xFDE
 22736                           postdec2	equ	0xFDD
 22737                           plusw2	equ	0xFDB
 22738                           fsr2h	equ	0xFDA
 22739                           fsr2l	equ	0xFD9
 22740                           status	equ	0xFD8
 22741                           
 22742 ;; *************** function _Byte_SetPair *****************
 22743 ;; Defined at:
 22744 ;;		line 83 in file "Library/Types.c"
 22745 ;; Parameters:    Size  Location     Type
 22746 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 22747 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 22748 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 22749 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 22750 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 22751 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 22752 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 22753 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 22754 ;;		 -> NULL(0), 
 22755 ;;  pPair           1   13[BANK0 ] unsigned char 
 22756 ;;  pValue          1   14[BANK0 ] unsigned char 
 22757 ;; Auto vars:     Size  Location     Type
 22758 ;;		None
 22759 ;; Return value:  Size  Location     Type
 22760 ;;                  1    wreg      void 
 22761 ;; Registers used:
 22762 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22763 ;; Tracked objects:
 22764 ;;		On entry : 0/0
 22765 ;;		On exit  : 0/0
 22766 ;;		Unchanged: 0/0
 22767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22768 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22771 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22772 ;;Total ram usage:        4 bytes
 22773 ;; Hardware stack levels used:    1
 22774 ;; Hardware stack levels required when called:    8
 22775 ;; This function calls:
 22776 ;;		_Byte_SetZone
 22777 ;; This function is called by:
 22778 ;;		_Word_SetPair
 22779 ;;		_Port_SetPairType
 22780 ;;		_Port_SetPair
 22781 ;; This function uses a non-reentrant model
 22782 ;;
 22783                           
 22784                           	psect	text109
 22785  01627A                     __ptext109:
 22786                           	opt stack 0
 22787  01627A                     _Byte_SetPair:
 22788                           	opt stack 18
 22789                           
 22790                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 22791                           
 22792                           ;incstack = 0
 22793  01627A  C06B  F060         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 22794  01627E  C06C  F061         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 22795  016282  0E04               	movlw	4
 22796  016284  0100               	movlb	0	; () banked
 22797  016286  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 22798  016288  C06D  F063         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 22799  01628C  0E02               	movlw	2
 22800  01628E  0100               	movlb	0	; () banked
 22801  016290  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 22802  016292  C06E  F065         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 22803  016296  EC96  F0A1         	call	_Byte_SetZone	;wreg free
 22804  01629A  0012               	return		;funcret
 22805  01629C                     __end_of_Byte_SetPair:
 22806                           	opt stack 0
 22807                           tosu	equ	0xFFF
 22808                           tosh	equ	0xFFE
 22809                           tosl	equ	0xFFD
 22810                           pclath	equ	0xFFA
 22811                           tblptru	equ	0xFF8
 22812                           tblptrh	equ	0xFF7
 22813                           tblptrl	equ	0xFF6
 22814                           tablat	equ	0xFF5
 22815                           prodh	equ	0xFF4
 22816                           prodl	equ	0xFF3
 22817                           intcon	equ	0xFF2
 22818                           postinc0	equ	0xFEE
 22819                           wreg	equ	0xFE8
 22820                           indf1	equ	0xFE7
 22821                           postdec1	equ	0xFE5
 22822                           fsr1h	equ	0xFE2
 22823                           fsr1l	equ	0xFE1
 22824                           indf2	equ	0xFDF
 22825                           postinc2	equ	0xFDE
 22826                           postdec2	equ	0xFDD
 22827                           plusw2	equ	0xFDB
 22828                           fsr2h	equ	0xFDA
 22829                           fsr2l	equ	0xFD9
 22830                           status	equ	0xFD8
 22831                           
 22832 ;; *************** function _Port_CheckQuadType *****************
 22833 ;; Defined at:
 22834 ;;		line 126 in file "Library/Port.c"
 22835 ;; Parameters:    Size  Location     Type
 22836 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 22837 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 22838 ;;		 -> PortD(10), PortC(10), PortF(10), 
 22839 ;;  pQuad           1   49[BANK0 ] enum E6776
 22840 ;;  pDrive          1   50[BANK0 ] enum E6469
 22841 ;; Auto vars:     Size  Location     Type
 22842 ;;  Output          1   53[BANK0 ] enum E6475
 22843 ;;  Pair2           1   52[BANK0 ] enum E6760
 22844 ;;  Pair1           1   51[BANK0 ] enum E6760
 22845 ;; Return value:  Size  Location     Type
 22846 ;;                  1    wreg      enum E6475
 22847 ;; Registers used:
 22848 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22849 ;; Tracked objects:
 22850 ;;		On entry : 0/0
 22851 ;;		On exit  : 0/0
 22852 ;;		Unchanged: 0/0
 22853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22854 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22855 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22857 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22858 ;;Total ram usage:        7 bytes
 22859 ;; Hardware stack levels used:    1
 22860 ;; Hardware stack levels required when called:   12
 22861 ;; This function calls:
 22862 ;;		_Port_CheckPairType
 22863 ;; This function is called by:
 22864 ;;		_Port_CheckPortType
 22865 ;;		_Port_SetQuadType
 22866 ;; This function uses a non-reentrant model
 22867 ;;
 22868                           
 22869                           	psect	text110
 22870  01589E                     __ptext110:
 22871                           	opt stack 0
 22872  01589E                     _Port_CheckQuadType:
 22873                           	opt stack 14
 22874                           
 22875                           ;Port.c: 128: ePinError Output = ePinErrorState;
 22876                           
 22877                           ;incstack = 0
 22878  01589E  0E05               	movlw	5
 22879  0158A0  0100               	movlb	0	; () banked
 22880  0158A2  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 22881                           
 22882                           ; BSR set to: 0
 22883                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 22884  0158A4  0100               	movlb	0	; () banked
 22885  0158A6  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 22886  0158A8  0D02               	mullw	2
 22887  0158AA  CFF3 F093          	movff	prodl,Port_CheckQuadType@Pair1
 22888                           
 22889                           ; BSR set to: 0
 22890                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 22891  0158AE  0100               	movlb	0	; () banked
 22892  0158B0  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 22893  0158B2  0D02               	mullw	2
 22894  0158B4  28F3               	incf	prodl,w,c
 22895  0158B6  0100               	movlb	0	; () banked
 22896  0158B8  6F94               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 22897                           
 22898                           ; BSR set to: 0
 22899                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 22900  0158BA  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 22901  0158BE  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 22902  0158C2  C093  F088         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 22903  0158C6  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 22904  0158CA  ECF2  F0AA         	call	_Port_CheckPairType	;wreg free
 22905  0158CE  0100               	movlb	0	; () banked
 22906  0158D0  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 22907  0158D2  0100               	movlb	0	; () banked
 22908  0158D4  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 22909  0158D6  A4D8               	btfss	status,2,c
 22910  0158D8  D00C               	goto	l393
 22911                           
 22912                           ; BSR set to: 0
 22913                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 22914  0158DA  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 22915  0158DE  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 22916  0158E2  C094  F088         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 22917  0158E6  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 22918  0158EA  ECF2  F0AA         	call	_Port_CheckPairType	;wreg free
 22919  0158EE  0100               	movlb	0	; () banked
 22920  0158F0  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 22921  0158F2                     l393:
 22922                           
 22923                           ; BSR set to: 0
 22924                           ;Port.c: 136: return Output;
 22925                           
 22926                           ; BSR set to: 0
 22927  0158F2  0100               	movlb	0	; () banked
 22928  0158F4  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 22929  0158F6  0012               	return	
 22930  0158F8                     __end_of_Port_CheckQuadType:
 22931                           	opt stack 0
 22932                           tosu	equ	0xFFF
 22933                           tosh	equ	0xFFE
 22934                           tosl	equ	0xFFD
 22935                           pclath	equ	0xFFA
 22936                           tblptru	equ	0xFF8
 22937                           tblptrh	equ	0xFF7
 22938                           tblptrl	equ	0xFF6
 22939                           tablat	equ	0xFF5
 22940                           prodh	equ	0xFF4
 22941                           prodl	equ	0xFF3
 22942                           intcon	equ	0xFF2
 22943                           postinc0	equ	0xFEE
 22944                           wreg	equ	0xFE8
 22945                           indf1	equ	0xFE7
 22946                           postdec1	equ	0xFE5
 22947                           fsr1h	equ	0xFE2
 22948                           fsr1l	equ	0xFE1
 22949                           indf2	equ	0xFDF
 22950                           postinc2	equ	0xFDE
 22951                           postdec2	equ	0xFDD
 22952                           plusw2	equ	0xFDB
 22953                           fsr2h	equ	0xFDA
 22954                           fsr2l	equ	0xFD9
 22955                           status	equ	0xFD8
 22956                           
 22957 ;; *************** function _Port_CheckPairType *****************
 22958 ;; Defined at:
 22959 ;;		line 112 in file "Library/Port.c"
 22960 ;; Parameters:    Size  Location     Type
 22961 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 22962 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 22963 ;;		 -> PortD(10), PortC(10), PortF(10), 
 22964 ;;  pPair           1   40[BANK0 ] enum E6760
 22965 ;;  pDrive          1   41[BANK0 ] enum E6469
 22966 ;; Auto vars:     Size  Location     Type
 22967 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 22968 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 22969 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 22970 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 22971 ;;		 -> PortC(10), PortF(10), NULL(0), 
 22972 ;;  Output          1   44[BANK0 ] enum E6475
 22973 ;;  Pin2            1   43[BANK0 ] enum E6750
 22974 ;;  Pin1            1   42[BANK0 ] enum E6750
 22975 ;; Return value:  Size  Location     Type
 22976 ;;                  1    wreg      enum E6475
 22977 ;; Registers used:
 22978 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22979 ;; Tracked objects:
 22980 ;;		On entry : 0/0
 22981 ;;		On exit  : 0/0
 22982 ;;		Unchanged: 0/0
 22983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22984 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22985 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22987 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22988 ;;Total ram usage:        9 bytes
 22989 ;; Hardware stack levels used:    1
 22990 ;; Hardware stack levels required when called:   11
 22991 ;; This function calls:
 22992 ;;		_PortProperty_Valid
 22993 ;; This function is called by:
 22994 ;;		_Port_CheckQuadType
 22995 ;;		_Port_SetPairType
 22996 ;; This function uses a non-reentrant model
 22997 ;;
 22998                           
 22999                           	psect	text111
 23000  0155E4                     __ptext111:
 23001                           	opt stack 0
 23002  0155E4                     _Port_CheckPairType:
 23003                           	opt stack 14
 23004                           
 23005                           ;Port.c: 114: ePinError Output = ePinErrorState;
 23006                           
 23007                           ; BSR set to: 0
 23008                           ;incstack = 0
 23009  0155E4  0E05               	movlw	5
 23010  0155E6  0100               	movlb	0	; () banked
 23011  0155E8  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 23012                           
 23013                           ; BSR set to: 0
 23014                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 23015  0155EA  C086  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 23016  0155EE  C087  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 23017  0155F2  CFDE F08D          	movff	postinc2,Port_CheckPairType@Props
 23018  0155F6  CFDD F08E          	movff	postdec2,Port_CheckPairType@Props+1
 23019                           
 23020                           ; BSR set to: 0
 23021                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 23022  0155FA  0100               	movlb	0	; () banked
 23023  0155FC  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 23024  0155FE  0D02               	mullw	2
 23025  015600  CFF3 F08A          	movff	prodl,Port_CheckPairType@Pin1
 23026                           
 23027                           ; BSR set to: 0
 23028                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 23029  015604  0100               	movlb	0	; () banked
 23030  015606  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 23031  015608  0D02               	mullw	2
 23032  01560A  28F3               	incf	prodl,w,c
 23033  01560C  0100               	movlb	0	; () banked
 23034  01560E  6F8B               	movwf	Port_CheckPairType@Pin2& (0+255),b
 23035                           
 23036                           ; BSR set to: 0
 23037                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 23038  015610  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 23039  015614  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 23040  015618  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 23041  01561C  C08A  F072         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 23042  015620  EC0A  F0A8         	call	_PortProperty_Valid	;wreg free
 23043  015624  0100               	movlb	0	; () banked
 23044  015626  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 23045  015628  0100               	movlb	0	; () banked
 23046  01562A  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 23047  01562C  A4D8               	btfss	status,2,c
 23048  01562E  D00C               	goto	l389
 23049                           
 23050                           ; BSR set to: 0
 23051                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 23052  015630  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 23053  015634  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 23054  015638  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 23055  01563C  C08B  F072         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 23056  015640  EC0A  F0A8         	call	_PortProperty_Valid	;wreg free
 23057  015644  0100               	movlb	0	; () banked
 23058  015646  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 23059  015648                     l389:
 23060                           
 23061                           ; BSR set to: 0
 23062                           ;Port.c: 124: return Output;
 23063                           
 23064                           ; BSR set to: 0
 23065  015648  0100               	movlb	0	; () banked
 23066  01564A  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 23067  01564C  0012               	return	
 23068  01564E                     __end_of_Port_CheckPairType:
 23069                           	opt stack 0
 23070                           tosu	equ	0xFFF
 23071                           tosh	equ	0xFFE
 23072                           tosl	equ	0xFFD
 23073                           pclath	equ	0xFFA
 23074                           tblptru	equ	0xFF8
 23075                           tblptrh	equ	0xFF7
 23076                           tblptrl	equ	0xFF6
 23077                           tablat	equ	0xFF5
 23078                           prodh	equ	0xFF4
 23079                           prodl	equ	0xFF3
 23080                           intcon	equ	0xFF2
 23081                           postinc0	equ	0xFEE
 23082                           wreg	equ	0xFE8
 23083                           indf1	equ	0xFE7
 23084                           postdec1	equ	0xFE5
 23085                           fsr1h	equ	0xFE2
 23086                           fsr1l	equ	0xFE1
 23087                           indf2	equ	0xFDF
 23088                           postinc2	equ	0xFDE
 23089                           postdec2	equ	0xFDD
 23090                           plusw2	equ	0xFDB
 23091                           fsr2h	equ	0xFDA
 23092                           fsr2l	equ	0xFD9
 23093                           status	equ	0xFD8
 23094                           
 23095 ;; *************** function _PortProperty_Valid *****************
 23096 ;; Defined at:
 23097 ;;		line 220 in file "Library/Types.c"
 23098 ;; Parameters:    Size  Location     Type
 23099 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 23100 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 23101 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 23102 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 23103 ;;		 -> PortC(10), PortF(10), NULL(0), 
 23104 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 23105 ;;  pPin            1   18[BANK0 ] unsigned char 
 23106 ;; Auto vars:     Size  Location     Type
 23107 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 23108 ;;  Pair            1   37[BANK0 ] enum E6469
 23109 ;; Return value:  Size  Location     Type
 23110 ;;                  1    wreg      enum E6475
 23111 ;; Registers used:
 23112 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23113 ;; Tracked objects:
 23114 ;;		On entry : 0/0
 23115 ;;		On exit  : 0/0
 23116 ;;		Unchanged: 0/0
 23117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23118 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23119 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23120 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23121 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23122 ;;Total ram usage:       23 bytes
 23123 ;; Hardware stack levels used:    1
 23124 ;; Hardware stack levels required when called:   10
 23125 ;; This function calls:
 23126 ;;		_Word_GetPair
 23127 ;; This function is called by:
 23128 ;;		_Port_CheckPairType
 23129 ;;		_Port_SetPinType
 23130 ;; This function uses a non-reentrant model
 23131 ;;
 23132                           
 23133                           	psect	text112
 23134  015014                     __ptext112:
 23135                           	opt stack 0
 23136  015014                     _PortProperty_Valid:
 23137                           	opt stack 17
 23138                           
 23139                           ;Types.c: 222: ePinDrive Pair;
 23140                           ;Types.c: 223: const ePinError Errors[4][4] =
 23141                           ;Types.c: 224: {
 23142                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 23143                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 23144                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 23145                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 23146                           ;Types.c: 230: };
 23147                           
 23148                           ; BSR set to: 0
 23149                           ;incstack = 0
 23150  015014  0E5B               	movlw	low PortProperty_Valid@F6830
 23151  015016  6EF6               	movwf	tblptrl,c
 23152  015018                     	if	1	;There is more than 1 active tblptr byte
 23153  015018  0EFD               	movlw	high PortProperty_Valid@F6830
 23154  01501A  6EF7               	movwf	tblptrh,c
 23155  01501C                     	endif
 23156  01501C                     	if	1	;There are 3 active tblptr bytes
 23157  01501C  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 23158  01501E  6EF8               	movwf	tblptru,c
 23159  015020                     	endif
 23160  015020  EE20  F075         	lfsr	2,PortProperty_Valid@Errors
 23161  015024  0E0F               	movlw	15
 23162  015026                     u8700:
 23163  015026  0009               	tblrd		*+
 23164  015028  CFF5 FFDE          	movff	tablat,postinc2
 23165  01502C  06E8               	decf	wreg,f,c
 23166  01502E  E2FB               	bc	u8700
 23167                           
 23168                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 23169  015030  C06F  F06C         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 23170  015034  C070  F06D         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 23171  015038  C072  F06E         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 23172  01503C  EC70  F0AF         	call	_Word_GetPair	;wreg free
 23173  015040  0100               	movlb	0	; () banked
 23174  015042  6F85               	movwf	PortProperty_Valid@Pair& (0+255),b
 23175                           
 23176                           ; BSR set to: 0
 23177                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 23178  015044  0E04               	movlw	4
 23179  015046  0100               	movlb	0	; () banked
 23180  015048  6171               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 23181  01504A  D020               	goto	l819
 23182                           
 23183                           ; BSR set to: 0
 23184  01504C  0E04               	movlw	4
 23185  01504E  0100               	movlb	0	; () banked
 23186  015050  6185               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 23187  015052  D01C               	goto	l819
 23188                           
 23189                           ; BSR set to: 0
 23190                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 23191  015054  0100               	movlb	0	; () banked
 23192  015056  5171               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 23193  015058  0D04               	mullw	4
 23194  01505A  0E75               	movlw	low PortProperty_Valid@Errors
 23195  01505C  0100               	movlb	0	; () banked
 23196  01505E  6F73               	movwf	??_PortProperty_Valid& (0+255),b
 23197  015060  0E00               	movlw	high PortProperty_Valid@Errors
 23198  015062  0100               	movlb	0	; () banked
 23199  015064  6F74               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 23200  015066  50F3               	movf	prodl,w,c
 23201  015068  0100               	movlb	0	; () banked
 23202  01506A  2773               	addwf	??_PortProperty_Valid& (0+255),f,b
 23203  01506C  50F4               	movf	prodh,w,c
 23204  01506E  0100               	movlb	0	; () banked
 23205  015070  2374               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 23206  015072  0100               	movlb	0	; () banked
 23207  015074  5185               	movf	PortProperty_Valid@Pair& (0+255),w,b
 23208  015076  0D01               	mullw	1
 23209  015078  50F3               	movf	prodl,w,c
 23210  01507A  0100               	movlb	0	; () banked
 23211  01507C  2573               	addwf	??_PortProperty_Valid& (0+255),w,b
 23212  01507E  6ED9               	movwf	fsr2l,c
 23213  015080  50F4               	movf	prodh,w,c
 23214  015082  0100               	movlb	0	; () banked
 23215  015084  2174               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 23216  015086  6EDA               	movwf	fsr2h,c
 23217  015088  50DF               	movf	indf2,w,c
 23218                           
 23219                           ; BSR set to: 0
 23220  01508A  0012               	return	
 23221  01508C                     l819:
 23222                           
 23223                           ; BSR set to: 0
 23224                           ;Types.c: 237: return ePinErrorState;
 23225                           
 23226                           ; BSR set to: 0
 23227  01508C  0E05               	movlw	5
 23228  01508E  0012               	return	
 23229  015090                     __end_of_PortProperty_Valid:
 23230                           	opt stack 0
 23231                           tosu	equ	0xFFF
 23232                           tosh	equ	0xFFE
 23233                           tosl	equ	0xFFD
 23234                           pclath	equ	0xFFA
 23235                           tblptru	equ	0xFF8
 23236                           tblptrh	equ	0xFF7
 23237                           tblptrl	equ	0xFF6
 23238                           tablat	equ	0xFF5
 23239                           prodh	equ	0xFF4
 23240                           prodl	equ	0xFF3
 23241                           intcon	equ	0xFF2
 23242                           postinc0	equ	0xFEE
 23243                           wreg	equ	0xFE8
 23244                           indf1	equ	0xFE7
 23245                           postdec1	equ	0xFE5
 23246                           fsr1h	equ	0xFE2
 23247                           fsr1l	equ	0xFE1
 23248                           indf2	equ	0xFDF
 23249                           postinc2	equ	0xFDE
 23250                           postdec2	equ	0xFDD
 23251                           plusw2	equ	0xFDB
 23252                           fsr2h	equ	0xFDA
 23253                           fsr2l	equ	0xFD9
 23254                           status	equ	0xFD8
 23255                           
 23256 ;; *************** function _Byte_SetQuad *****************
 23257 ;; Defined at:
 23258 ;;		line 101 in file "Library/Types.c"
 23259 ;; Parameters:    Size  Location     Type
 23260 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 23261 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 23262 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 23263 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 23264 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 23265 ;;		 -> NULL(0), 
 23266 ;;  pQuad           1   13[BANK0 ] unsigned char 
 23267 ;;  pValue          1   14[BANK0 ] unsigned char 
 23268 ;; Auto vars:     Size  Location     Type
 23269 ;;		None
 23270 ;; Return value:  Size  Location     Type
 23271 ;;                  1    wreg      void 
 23272 ;; Registers used:
 23273 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23274 ;; Tracked objects:
 23275 ;;		On entry : 0/0
 23276 ;;		On exit  : 0/0
 23277 ;;		Unchanged: 0/0
 23278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23279 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23280 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23282 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23283 ;;Total ram usage:        4 bytes
 23284 ;; Hardware stack levels used:    1
 23285 ;; Hardware stack levels required when called:    8
 23286 ;; This function calls:
 23287 ;;		_Byte_SetZone
 23288 ;; This function is called by:
 23289 ;;		_Port_SetQuadType
 23290 ;;		_SPI_Init
 23291 ;;		_SPI_MinSpeed
 23292 ;;		_SPI_MaxSpeed
 23293 ;;		_Port_SetQuad
 23294 ;;		_Word_SetQuad
 23295 ;;		_I2C_Init
 23296 ;; This function uses a non-reentrant model
 23297 ;;
 23298                           
 23299                           	psect	text113
 23300  01629C                     __ptext113:
 23301                           	opt stack 0
 23302  01629C                     _Byte_SetQuad:
 23303                           	opt stack 19
 23304                           
 23305                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 23306                           
 23307                           ; BSR set to: 0
 23308                           ;incstack = 0
 23309  01629C  C06B  F060         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 23310  0162A0  C06C  F061         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 23311  0162A4  0E02               	movlw	2
 23312  0162A6  0100               	movlb	0	; () banked
 23313  0162A8  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 23314  0162AA  C06D  F063         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 23315  0162AE  0E04               	movlw	4
 23316  0162B0  0100               	movlb	0	; () banked
 23317  0162B2  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 23318  0162B4  C06E  F065         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 23319  0162B8  EC96  F0A1         	call	_Byte_SetZone	;wreg free
 23320  0162BC  0012               	return		;funcret
 23321  0162BE                     __end_of_Byte_SetQuad:
 23322                           	opt stack 0
 23323                           tosu	equ	0xFFF
 23324                           tosh	equ	0xFFE
 23325                           tosl	equ	0xFFD
 23326                           pclath	equ	0xFFA
 23327                           tblptru	equ	0xFF8
 23328                           tblptrh	equ	0xFF7
 23329                           tblptrl	equ	0xFF6
 23330                           tablat	equ	0xFF5
 23331                           prodh	equ	0xFF4
 23332                           prodl	equ	0xFF3
 23333                           intcon	equ	0xFF2
 23334                           postinc0	equ	0xFEE
 23335                           wreg	equ	0xFE8
 23336                           indf1	equ	0xFE7
 23337                           postdec1	equ	0xFE5
 23338                           fsr1h	equ	0xFE2
 23339                           fsr1l	equ	0xFE1
 23340                           indf2	equ	0xFDF
 23341                           postinc2	equ	0xFDE
 23342                           postdec2	equ	0xFDD
 23343                           plusw2	equ	0xFDB
 23344                           fsr2h	equ	0xFDA
 23345                           fsr2l	equ	0xFD9
 23346                           status	equ	0xFD8
 23347                           
 23348 ;; *************** function _Byte_SetZone *****************
 23349 ;; Defined at:
 23350 ;;		line 47 in file "Library/Types.c"
 23351 ;; Parameters:    Size  Location     Type
 23352 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 23353 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 23354 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 23355 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 23356 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 23357 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 23358 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 23359 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 23360 ;;		 -> PortC(10), PortF(10), NULL(0), 
 23361 ;;  pMax            1    2[BANK0 ] unsigned char 
 23362 ;;  pChunk          1    3[BANK0 ] unsigned char 
 23363 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 23364 ;;  pValue          1    5[BANK0 ] unsigned char 
 23365 ;; Auto vars:     Size  Location     Type
 23366 ;;  MASK            1   10[BANK0 ] unsigned char 
 23367 ;;  Offset          1    9[BANK0 ] unsigned char 
 23368 ;; Return value:  Size  Location     Type
 23369 ;;                  1    wreg      void 
 23370 ;; Registers used:
 23371 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 23372 ;; Tracked objects:
 23373 ;;		On entry : 0/0
 23374 ;;		On exit  : 0/0
 23375 ;;		Unchanged: 0/0
 23376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23377 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23378 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23379 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23380 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23381 ;;Total ram usage:       11 bytes
 23382 ;; Hardware stack levels used:    1
 23383 ;; Hardware stack levels required when called:    7
 23384 ;; This function calls:
 23385 ;;		Nothing
 23386 ;; This function is called by:
 23387 ;;		_Byte_SetPair
 23388 ;;		_Byte_SetQuad
 23389 ;;		_Byte_SetTriple
 23390 ;; This function uses a non-reentrant model
 23391 ;;
 23392                           
 23393                           	psect	text114
 23394  01432C                     __ptext114:
 23395                           	opt stack 0
 23396  01432C                     _Byte_SetZone:
 23397                           	opt stack 18
 23398                           
 23399                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 23400                           
 23401                           ;incstack = 0
 23402  01432C  0100               	movlb	0	; () banked
 23403  01432E  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 23404  014330  0D01               	mullw	1
 23405  014332  0E75               	movlw	low _MASKS
 23406  014334  24F3               	addwf	prodl,w,c
 23407  014336  6EF6               	movwf	tblptrl,c
 23408  014338  0EFD               	movlw	high _MASKS
 23409  01433A  20F4               	addwfc	prodh,w,c
 23410  01433C  6EF7               	movwf	tblptrh,c
 23411  01433E                     	if	1	;There are 3 active tblptr bytes
 23412  01433E  6AF8               	clrf	tblptru,c
 23413  014340  0E00               	movlw	low (__mediumconst shr (0+16))
 23414  014342  22F8               	addwfc	tblptru,f,c
 23415  014344                     	endif
 23416  014344  0008               	tblrd		*
 23417  014346  CFF5 F06A          	movff	tablat,Byte_SetZone@MASK
 23418                           
 23419                           ; BSR set to: 0
 23420                           ;Types.c: 50: UINT8 Offset = 0;
 23421  01434A  0E00               	movlw	0
 23422  01434C  0100               	movlb	0	; () banked
 23423  01434E  6F69               	movwf	Byte_SetZone@Offset& (0+255),b
 23424                           
 23425                           ;Types.c: 52: while (pChunk >= pMax)
 23426  014350  D006               	goto	l726
 23427  014352                     
 23428                           ; BSR set to: 0
 23429                           ;Types.c: 53: {
 23430                           ;Types.c: 54: pChunk -= pMax;
 23431                           
 23432                           ; BSR set to: 0
 23433  014352  0100               	movlb	0	; () banked
 23434  014354  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 23435  014356  0100               	movlb	0	; () banked
 23436  014358  5F63               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 23437                           
 23438                           ; BSR set to: 0
 23439                           ;Types.c: 55: Offset += 1;
 23440  01435A  0100               	movlb	0	; () banked
 23441  01435C  2B69               	incf	Byte_SetZone@Offset& (0+255),f,b
 23442  01435E                     l726:
 23443                           
 23444                           ; BSR set to: 0
 23445                           
 23446                           ; BSR set to: 0
 23447  01435E  0100               	movlb	0	; () banked
 23448  014360  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 23449  014362  0100               	movlb	0	; () banked
 23450  014364  5D63               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 23451  014366  B0D8               	btfsc	status,0,c
 23452  014368  D7F4               	goto	l727
 23453                           
 23454                           ; BSR set to: 0
 23455                           ;Types.c: 56: }
 23456                           ;Types.c: 57: pChunk *= pChunkSize;
 23457                           
 23458                           ; BSR set to: 0
 23459  01436A  0100               	movlb	0	; () banked
 23460  01436C  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 23461  01436E  0100               	movlb	0	; () banked
 23462  014370  0363               	mulwf	Byte_SetZone@pChunk& (0+255),b
 23463  014372  50F3               	movf	prodl,w,c
 23464  014374  6F63               	movwf	Byte_SetZone@pChunk& (0+255),b
 23465                           
 23466                           ; BSR set to: 0
 23467                           ;Types.c: 58: pChunk += Offset;
 23468  014376  0100               	movlb	0	; () banked
 23469  014378  5169               	movf	Byte_SetZone@Offset& (0+255),w,b
 23470  01437A  0100               	movlb	0	; () banked
 23471  01437C  2763               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 23472                           
 23473                           ; BSR set to: 0
 23474                           ;Types.c: 60: pValue &= MASK;
 23475  01437E  0100               	movlb	0	; () banked
 23476  014380  516A               	movf	Byte_SetZone@MASK& (0+255),w,b
 23477  014382  0100               	movlb	0	; () banked
 23478  014384  1765               	andwf	Byte_SetZone@pValue& (0+255),f,b
 23479                           
 23480                           ; BSR set to: 0
 23481                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 23482  014386  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 23483  01438A  C06A  F067         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 23484  01438E  0100               	movlb	0	; () banked
 23485  014390  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 23486  014392  D003               	goto	u8764
 23487  014394                     u8765:
 23488  014394  0100               	movlb	0	; () banked
 23489  014396  90D8               	bcf	status,0,c
 23490  014398  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 23491  01439A                     u8764:
 23492  01439A  0100               	movlb	0	; () banked
 23493  01439C  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 23494  01439E  D7FA               	goto	u8765
 23495  0143A0  0100               	movlb	0	; () banked
 23496  0143A2  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 23497  0143A4  0AFF               	xorlw	255
 23498  0143A6  0100               	movlb	0	; () banked
 23499  0143A8  6F68               	movwf	(??_Byte_SetZone+2)& (0+255),b
 23500  0143AA  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 23501  0143AE  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 23502  0143B2  0100               	movlb	0	; () banked
 23503  0143B4  5168               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 23504  0143B6  16DF               	andwf	indf2,f,c
 23505                           
 23506                           ; BSR set to: 0
 23507                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 23508  0143B8  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 23509  0143BC  C065  F067         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 23510  0143C0  0100               	movlb	0	; () banked
 23511  0143C2  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 23512  0143C4  D003               	goto	u8774
 23513  0143C6                     u8775:
 23514  0143C6  0100               	movlb	0	; () banked
 23515  0143C8  90D8               	bcf	status,0,c
 23516  0143CA  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 23517  0143CC                     u8774:
 23518  0143CC  0100               	movlb	0	; () banked
 23519  0143CE  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 23520  0143D0  D7FA               	goto	u8775
 23521  0143D2  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 23522  0143D6  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 23523  0143DA  0100               	movlb	0	; () banked
 23524  0143DC  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 23525  0143DE  12DF               	iorwf	indf2,f,c
 23526                           
 23527                           ; BSR set to: 0
 23528  0143E0  0012               	return		;funcret
 23529  0143E2                     __end_of_Byte_SetZone:
 23530                           	opt stack 0
 23531                           tosu	equ	0xFFF
 23532                           tosh	equ	0xFFE
 23533                           tosl	equ	0xFFD
 23534                           pclath	equ	0xFFA
 23535                           tblptru	equ	0xFF8
 23536                           tblptrh	equ	0xFF7
 23537                           tblptrl	equ	0xFF6
 23538                           tablat	equ	0xFF5
 23539                           prodh	equ	0xFF4
 23540                           prodl	equ	0xFF3
 23541                           intcon	equ	0xFF2
 23542                           postinc0	equ	0xFEE
 23543                           wreg	equ	0xFE8
 23544                           indf1	equ	0xFE7
 23545                           postdec1	equ	0xFE5
 23546                           fsr1h	equ	0xFE2
 23547                           fsr1l	equ	0xFE1
 23548                           indf2	equ	0xFDF
 23549                           postinc2	equ	0xFDE
 23550                           postdec2	equ	0xFDD
 23551                           plusw2	equ	0xFDB
 23552                           fsr2h	equ	0xFDA
 23553                           fsr2l	equ	0xFD9
 23554                           status	equ	0xFD8
 23555                           
 23556 ;; *************** function _Console_Init *****************
 23557 ;; Defined at:
 23558 ;;		line 157 in file "Library/Console.c"
 23559 ;; Parameters:    Size  Location     Type
 23560 ;;		None
 23561 ;; Auto vars:     Size  Location     Type
 23562 ;;  y               1    3[BANK0 ] unsigned char 
 23563 ;;  x               1    2[BANK0 ] unsigned char 
 23564 ;; Return value:  Size  Location     Type
 23565 ;;                  1    wreg      void 
 23566 ;; Registers used:
 23567 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 23568 ;; Tracked objects:
 23569 ;;		On entry : 0/0
 23570 ;;		On exit  : 0/0
 23571 ;;		Unchanged: 0/0
 23572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23574 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23575 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23576 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23577 ;;Total ram usage:        4 bytes
 23578 ;; Hardware stack levels used:    1
 23579 ;; Hardware stack levels required when called:    7
 23580 ;; This function calls:
 23581 ;;		Nothing
 23582 ;; This function is called by:
 23583 ;;		_init
 23584 ;; This function uses a non-reentrant model
 23585 ;;
 23586                           
 23587                           	psect	text115
 23588  014DFA                     __ptext115:
 23589                           	opt stack 0
 23590  014DFA                     _Console_Init:
 23591                           	opt stack 22
 23592                           
 23593                           ;Console.c: 160: lBufferX = 0;
 23594                           
 23595                           ; BSR set to: 0
 23596                           ;incstack = 0
 23597  014DFA  0E00               	movlw	0
 23598  014DFC  0100               	movlb	0	; () banked
 23599  014DFE  6FE8               	movwf	_lBufferX& (0+255),b
 23600                           
 23601                           ;Console.c: 161: lBufferY = 0;
 23602  014E00  0E00               	movlw	0
 23603  014E02  0100               	movlb	0	; () banked
 23604  014E04  6FE7               	movwf	_lBufferY& (0+255),b
 23605                           
 23606                           ;Console.c: 163: UINT8 x, y;
 23607                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 23608  014E06  0E00               	movlw	0
 23609  014E08  0100               	movlb	0	; () banked
 23610  014E0A  6F62               	movwf	Console_Init@x& (0+255),b
 23611  014E0C                     l14080:
 23612                           
 23613                           ; BSR set to: 0
 23614  014E0C  0E13               	movlw	19
 23615  014E0E  0100               	movlb	0	; () banked
 23616  014E10  6562               	cpfsgt	Console_Init@x& (0+255),b
 23617  014E12  D001               	goto	l976
 23618  014E14  0012               	return	
 23619  014E16                     l976:
 23620                           
 23621                           ; BSR set to: 0
 23622                           ;Console.c: 165: {
 23623                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 23624                           
 23625                           ; BSR set to: 0
 23626  014E16  0E00               	movlw	0
 23627  014E18  0100               	movlb	0	; () banked
 23628  014E1A  6F63               	movwf	Console_Init@y& (0+255),b
 23629  014E1C                     l14086:
 23630                           
 23631                           ; BSR set to: 0
 23632  014E1C  0E0E               	movlw	14
 23633  014E1E  0100               	movlb	0	; () banked
 23634  014E20  6563               	cpfsgt	Console_Init@y& (0+255),b
 23635  014E22  D001               	goto	l978
 23636  014E24  D02C               	goto	u10870
 23637  014E26                     l978:
 23638                           
 23639                           ; BSR set to: 0
 23640                           ;Console.c: 167: {
 23641                           ;Console.c: 168: lBuffer[y][x] = '\0';
 23642                           
 23643                           ; BSR set to: 0
 23644  014E26  0100               	movlb	0	; () banked
 23645  014E28  5163               	movf	Console_Init@y& (0+255),w,b
 23646  014E2A  0D14               	mullw	20
 23647  014E2C  0EC8               	movlw	low _lBuffer
 23648  014E2E  0100               	movlb	0	; () banked
 23649  014E30  6F60               	movwf	??_Console_Init& (0+255),b
 23650  014E32  0E04               	movlw	high _lBuffer
 23651  014E34  0100               	movlb	0	; () banked
 23652  014E36  6F61               	movwf	(??_Console_Init+1)& (0+255),b
 23653  014E38  50F3               	movf	prodl,w,c
 23654  014E3A  0100               	movlb	0	; () banked
 23655  014E3C  2760               	addwf	??_Console_Init& (0+255),f,b
 23656  014E3E  50F4               	movf	prodh,w,c
 23657  014E40  0100               	movlb	0	; () banked
 23658  014E42  2361               	addwfc	(??_Console_Init+1)& (0+255),f,b
 23659  014E44  0100               	movlb	0	; () banked
 23660  014E46  5162               	movf	Console_Init@x& (0+255),w,b
 23661  014E48  0D01               	mullw	1
 23662  014E4A  50F3               	movf	prodl,w,c
 23663  014E4C  0100               	movlb	0	; () banked
 23664  014E4E  2560               	addwf	??_Console_Init& (0+255),w,b
 23665  014E50  6ED9               	movwf	fsr2l,c
 23666  014E52  50F4               	movf	prodh,w,c
 23667  014E54  0100               	movlb	0	; () banked
 23668  014E56  2161               	addwfc	(??_Console_Init+1)& (0+255),w,b
 23669  014E58  6EDA               	movwf	fsr2h,c
 23670  014E5A  0E00               	movlw	0
 23671  014E5C  6EDF               	movwf	indf2,c
 23672                           
 23673                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 23674  014E5E  0100               	movlb	0	; () banked
 23675  014E60  5163               	movf	Console_Init@y& (0+255),w,b
 23676  014E62  0D02               	mullw	2
 23677  014E64  0E00               	movlw	low _lCBuffer
 23678  014E66  24F3               	addwf	prodl,w,c
 23679  014E68  6ED9               	movwf	fsr2l,c
 23680  014E6A  0E04               	movlw	high _lCBuffer
 23681  014E6C  20F4               	addwfc	prodh,w,c
 23682  014E6E  6EDA               	movwf	fsr2h,c
 23683  014E70  0EFF               	movlw	255
 23684  014E72  6EDE               	movwf	postinc2,c
 23685  014E74  0EFF               	movlw	255
 23686  014E76  6EDD               	movwf	postdec2,c
 23687                           
 23688                           ; BSR set to: 0
 23689  014E78  0100               	movlb	0	; () banked
 23690  014E7A  2B63               	incf	Console_Init@y& (0+255),f,b
 23691  014E7C  D7CF               	goto	l14086
 23692  014E7E                     u10870:
 23693                           
 23694                           ; BSR set to: 0
 23695                           
 23696                           ; BSR set to: 0
 23697  014E7E  0100               	movlb	0	; () banked
 23698  014E80  2B62               	incf	Console_Init@x& (0+255),f,b
 23699  014E82  D7C4               	goto	l14080
 23700  014E84                     __end_of_Console_Init:
 23701                           	opt stack 0
 23702                           tosu	equ	0xFFF
 23703                           tosh	equ	0xFFE
 23704                           tosl	equ	0xFFD
 23705                           pclath	equ	0xFFA
 23706                           tblptru	equ	0xFF8
 23707                           tblptrh	equ	0xFF7
 23708                           tblptrl	equ	0xFF6
 23709                           tablat	equ	0xFF5
 23710                           prodh	equ	0xFF4
 23711                           prodl	equ	0xFF3
 23712                           intcon	equ	0xFF2
 23713                           postinc0	equ	0xFEE
 23714                           wreg	equ	0xFE8
 23715                           indf1	equ	0xFE7
 23716                           postdec1	equ	0xFE5
 23717                           fsr1h	equ	0xFE2
 23718                           fsr1l	equ	0xFE1
 23719                           indf2	equ	0xFDF
 23720                           postinc2	equ	0xFDE
 23721                           postdec2	equ	0xFDD
 23722                           plusw2	equ	0xFDB
 23723                           fsr2h	equ	0xFDA
 23724                           fsr2l	equ	0xFD9
 23725                           status	equ	0xFD8
 23726                           
 23727 ;; *************** function _ADC_Start *****************
 23728 ;; Defined at:
 23729 ;;		line 114 in file "Library/ADC.c"
 23730 ;; Parameters:    Size  Location     Type
 23731 ;;  pInput          2    2[BANK0 ] PTR struct ADC
 23732 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 23733 ;;		 -> NULL(0), 
 23734 ;; Auto vars:     Size  Location     Type
 23735 ;;		None
 23736 ;; Return value:  Size  Location     Type
 23737 ;;                  1    wreg      void 
 23738 ;; Registers used:
 23739 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23740 ;; Tracked objects:
 23741 ;;		On entry : 0/0
 23742 ;;		On exit  : 0/0
 23743 ;;		Unchanged: 0/0
 23744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23745 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23747 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23748 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23749 ;;Total ram usage:        4 bytes
 23750 ;; Hardware stack levels used:    1
 23751 ;; Hardware stack levels required when called:    8
 23752 ;; This function calls:
 23753 ;;		_ADC_Off
 23754 ;;		_ADC_On
 23755 ;;		_ADC_SetChannel
 23756 ;; This function is called by:
 23757 ;;		_init
 23758 ;;		_mode1
 23759 ;;		_mode4
 23760 ;;		_FunctADC
 23761 ;; This function uses a non-reentrant model
 23762 ;;
 23763                           
 23764                           	psect	text116
 23765  014F0E                     __ptext116:
 23766                           	opt stack 0
 23767  014F0E                     _ADC_Start:
 23768                           	opt stack 21
 23769                           
 23770                           ;ADC.c: 117: if ((ADCON0bits.GODONE))
 23771                           
 23772                           ; BSR set to: 0
 23773                           ;incstack = 0
 23774  014F0E  B2C2               	btfsc	4034,1,c	;volatile
 23775  014F10  0012               	return	
 23776  014F12                     
 23777                           ;ADC.c: 128: {
 23778                           ;ADC.c: 129: ADC_Off();
 23779                           
 23780                           ;ADC.c: 127: for(;;)
 23781  014F12  EC13  F0B3         	call	_ADC_Off	;wreg free
 23782                           
 23783                           ;ADC.c: 130: ADC_SetChannel(pInput->mChannel);
 23784  014F16  C062  FFD9         	movff	ADC_Start@pInput,fsr2l
 23785  014F1A  C063  FFDA         	movff	ADC_Start@pInput+1,fsr2h
 23786  014F1E  50DF               	movf	indf2,w,c
 23787  014F20  EC03  F0B2         	call	_ADC_SetChannel
 23788                           
 23789                           ;ADC.c: 131: ADC_On();
 23790  014F24  EC21  F0B3         	call	_ADC_On	;wreg free
 23791                           
 23792                           ;ADC.c: 134: (ADCON0bits.GO) = 1;
 23793  014F28  82C2               	bsf	4034,1,c	;volatile
 23794  014F2A  B2C2               	btfsc	4034,1,c	;volatile
 23795  014F2C  D7FE               	goto	l1280
 23796                           
 23797                           ;ADC.c: 138: pInput->mValue = (ADRESH << 8) | ADRESL;
 23798  014F2E  50C3               	movf	4035,w,c	;volatile
 23799  014F30  CFC4 F064          	movff	4036,??_ADC_Start	;volatile
 23800  014F34  0100               	movlb	0	; () banked
 23801  014F36  6B65               	clrf	(??_ADC_Start+1)& (0+255),b
 23802  014F38  C064  F065         	movff	??_ADC_Start,??_ADC_Start+1
 23803  014F3C  0100               	movlb	0	; () banked
 23804  014F3E  6B64               	clrf	??_ADC_Start& (0+255),b
 23805  014F40  0100               	movlb	0	; () banked
 23806  014F42  1364               	iorwf	??_ADC_Start& (0+255),f,b
 23807  014F44  0E00               	movlw	0
 23808  014F46  1365               	iorwf	(??_ADC_Start+1)& (0+255),f,b
 23809  014F48  0100               	movlb	0	; () banked
 23810  014F4A  EE20 F001          	lfsr	2,1
 23811  014F4E  5162               	movf	ADC_Start@pInput& (0+255),w,b
 23812  014F50  26D9               	addwf	fsr2l,f,c
 23813  014F52  5163               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 23814  014F54  22DA               	addwfc	fsr2h,f,c
 23815  014F56  C064  FFDE         	movff	??_ADC_Start,postinc2
 23816  014F5A  C065  FFDD         	movff	??_ADC_Start+1,postdec2
 23817                           
 23818                           ;ADC.c: 141: if (pInput->mNext == 0)
 23819  014F5E  0100               	movlb	0	; () banked
 23820  014F60  EE20 F003          	lfsr	2,3
 23821  014F64  5162               	movf	ADC_Start@pInput& (0+255),w,b
 23822  014F66  26D9               	addwf	fsr2l,f,c
 23823  014F68  5163               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 23824  014F6A  22DA               	addwfc	fsr2h,f,c
 23825  014F6C  50DE               	movf	postinc2,w,c
 23826  014F6E  10DE               	iorwf	postinc2,w,c
 23827  014F70  B4D8               	btfsc	status,2,c
 23828  014F72  D00C               	goto	l1283
 23829                           
 23830                           ; BSR set to: 0
 23831                           ;ADC.c: 145: pInput = pInput->mNext;
 23832                           
 23833                           ; BSR set to: 0
 23834                           
 23835                           ; BSR set to: 0
 23836                           ;ADC.c: 142: break;
 23837  014F74  0100               	movlb	0	; () banked
 23838  014F76  EE20 F003          	lfsr	2,3
 23839  014F7A  5162               	movf	ADC_Start@pInput& (0+255),w,b
 23840  014F7C  26D9               	addwf	fsr2l,f,c
 23841  014F7E  5163               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 23842  014F80  22DA               	addwfc	fsr2h,f,c
 23843  014F82  CFDE F062          	movff	postinc2,ADC_Start@pInput
 23844  014F86  CFDD F063          	movff	postdec2,ADC_Start@pInput+1
 23845                           
 23846                           ;ADC.c: 146: }
 23847  014F8A  D7C3               	goto	l1276
 23848  014F8C                     l1283:
 23849                           
 23850                           ; BSR set to: 0
 23851                           ;ADC.c: 147: ADC_Off();
 23852                           
 23853                           ; BSR set to: 0
 23854  014F8C  EC13  F0B3         	call	_ADC_Off	;wreg free
 23855  014F90  0012               	return		;funcret
 23856  014F92                     __end_of_ADC_Start:
 23857                           	opt stack 0
 23858                           tosu	equ	0xFFF
 23859                           tosh	equ	0xFFE
 23860                           tosl	equ	0xFFD
 23861                           pclath	equ	0xFFA
 23862                           tblptru	equ	0xFF8
 23863                           tblptrh	equ	0xFF7
 23864                           tblptrl	equ	0xFF6
 23865                           tablat	equ	0xFF5
 23866                           prodh	equ	0xFF4
 23867                           prodl	equ	0xFF3
 23868                           intcon	equ	0xFF2
 23869                           postinc0	equ	0xFEE
 23870                           wreg	equ	0xFE8
 23871                           indf1	equ	0xFE7
 23872                           postdec1	equ	0xFE5
 23873                           fsr1h	equ	0xFE2
 23874                           fsr1l	equ	0xFE1
 23875                           indf2	equ	0xFDF
 23876                           postinc2	equ	0xFDE
 23877                           postdec2	equ	0xFDD
 23878                           plusw2	equ	0xFDB
 23879                           fsr2h	equ	0xFDA
 23880                           fsr2l	equ	0xFD9
 23881                           status	equ	0xFD8
 23882                           
 23883 ;; *************** function _ADC_Init *****************
 23884 ;; Defined at:
 23885 ;;		line 19 in file "Library/ADC.c"
 23886 ;; Parameters:    Size  Location     Type
 23887 ;;  pInput          2    4[BANK0 ] PTR struct ADC
 23888 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 23889 ;;  pChannel        1    6[BANK0 ] enum E6742
 23890 ;; Auto vars:     Size  Location     Type
 23891 ;;		None
 23892 ;; Return value:  Size  Location     Type
 23893 ;;                  1    wreg      void 
 23894 ;; Registers used:
 23895 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23896 ;; Tracked objects:
 23897 ;;		On entry : 0/0
 23898 ;;		On exit  : 0/0
 23899 ;;		Unchanged: 0/0
 23900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23901 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23904 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23905 ;;Total ram usage:        3 bytes
 23906 ;; Hardware stack levels used:    1
 23907 ;; Hardware stack levels required when called:    9
 23908 ;; This function calls:
 23909 ;;		_ADC_Calibrate
 23910 ;;		_ADC_ClockDivision
 23911 ;;		_ADC_ConversionTime
 23912 ;;		_ADC_SetChannel
 23913 ;;		_ADC_SetupIO
 23914 ;; This function is called by:
 23915 ;;		_init
 23916 ;;		_FunctInitADC
 23917 ;; This function uses a non-reentrant model
 23918 ;;
 23919                           
 23920                           	psect	text117
 23921  015090                     __ptext117:
 23922                           	opt stack 0
 23923  015090                     _ADC_Init:
 23924                           	opt stack 20
 23925                           
 23926                           ;ADC.c: 21: if(pInput==(void*)0)
 23927                           
 23928                           ;incstack = 0
 23929  015090  0100               	movlb	0	; () banked
 23930  015092  5164               	movf	ADC_Init@pInput& (0+255),w,b
 23931  015094  0100               	movlb	0	; () banked
 23932  015096  1165               	iorwf	(ADC_Init@pInput+1)& (0+255),w,b
 23933  015098  B4D8               	btfsc	status,2,c
 23934  01509A  0012               	return	
 23935                           
 23936                           ; BSR set to: 0
 23937                           ;ADC.c: 25: lCurrent = pInput;
 23938                           
 23939                           ; BSR set to: 0
 23940                           
 23941                           ; BSR set to: 0
 23942                           ;ADC.c: 22: return;
 23943  01509C  C064  F0DA         	movff	ADC_Init@pInput,_lCurrent
 23944  0150A0  C065  F0DB         	movff	ADC_Init@pInput+1,_lCurrent+1
 23945                           
 23946                           ; BSR set to: 0
 23947                           ;ADC.c: 27: pInput->mChannel = pChannel;
 23948  0150A4  C064  FFD9         	movff	ADC_Init@pInput,fsr2l
 23949  0150A8  C065  FFDA         	movff	ADC_Init@pInput+1,fsr2h
 23950  0150AC  C066  FFDF         	movff	ADC_Init@pChannel,indf2
 23951                           
 23952                           ;ADC.c: 28: pInput->mNext = (ADCPtr)0;
 23953  0150B0  0100               	movlb	0	; () banked
 23954  0150B2  EE20 F003          	lfsr	2,3
 23955  0150B6  5164               	movf	ADC_Init@pInput& (0+255),w,b
 23956  0150B8  26D9               	addwf	fsr2l,f,c
 23957  0150BA  5165               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 23958  0150BC  22DA               	addwfc	fsr2h,f,c
 23959  0150BE  0E00               	movlw	0
 23960  0150C0  6EDE               	movwf	postinc2,c
 23961  0150C2  0E00               	movlw	0
 23962  0150C4  6EDD               	movwf	postdec2,c
 23963                           
 23964                           ;ADC.c: 29: pInput->mValue = 0;
 23965  0150C6  0100               	movlb	0	; () banked
 23966  0150C8  EE20 F001          	lfsr	2,1
 23967  0150CC  5164               	movf	ADC_Init@pInput& (0+255),w,b
 23968  0150CE  26D9               	addwf	fsr2l,f,c
 23969  0150D0  5165               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 23970  0150D2  22DA               	addwfc	fsr2h,f,c
 23971  0150D4  0E00               	movlw	0
 23972  0150D6  6EDE               	movwf	postinc2,c
 23973  0150D8  0E00               	movlw	0
 23974  0150DA  6EDD               	movwf	postdec2,c
 23975                           
 23976                           ; BSR set to: 0
 23977                           ;ADC.c: 32: ADC_SetChannel(pChannel);
 23978  0150DC  0100               	movlb	0	; () banked
 23979  0150DE  5166               	movf	ADC_Init@pChannel& (0+255),w,b
 23980  0150E0  EC03  F0B2         	call	_ADC_SetChannel
 23981                           
 23982                           ;ADC.c: 35: ADCON0bits.VCFG1 = 0;
 23983  0150E4  9EC2               	bcf	4034,7,c	;volatile
 23984                           
 23985                           ;ADC.c: 36: ADCON0bits.VCFG0 = 0;
 23986  0150E6  9CC2               	bcf	4034,6,c	;volatile
 23987                           
 23988                           ;ADC.c: 39: ADCON1bits.ADFM = 1;
 23989  0150E8  8EC1               	bsf	4033,7,c	;volatile
 23990                           
 23991                           ;ADC.c: 40: ADCON1bits.ADCAL = 1;
 23992  0150EA  8CC1               	bsf	4033,6,c	;volatile
 23993                           
 23994                           ;ADC.c: 43: ADC_ConversionTime(12);
 23995  0150EC  0E0C               	movlw	12
 23996  0150EE  ECBC  F0AD         	call	_ADC_ConversionTime
 23997                           
 23998                           ;ADC.c: 47: ADC_ClockDivision(16);
 23999  0150F2  0E10               	movlw	16
 24000  0150F4  EC42  F0A7         	call	_ADC_ClockDivision
 24001                           
 24002                           ;ADC.c: 50: ADC_SetupIO(pChannel);
 24003  0150F8  0100               	movlb	0	; () banked
 24004  0150FA  5166               	movf	ADC_Init@pChannel& (0+255),w,b
 24005  0150FC  EC37  F0B0         	call	_ADC_SetupIO
 24006                           
 24007                           ;ADC.c: 58: ADC_Initialised = 1;
 24008  015100  0E01               	movlw	1
 24009  015102  6E3C               	movwf	_ADC_Initialised,c
 24010                           
 24011                           ;ADC.c: 61: ADC_Calibrate();
 24012  015104  EC95  F0B2         	call	_ADC_Calibrate	;wreg free
 24013  015108  0012               	return		;funcret
 24014  01510A                     __end_of_ADC_Init:
 24015                           	opt stack 0
 24016                           tosu	equ	0xFFF
 24017                           tosh	equ	0xFFE
 24018                           tosl	equ	0xFFD
 24019                           pclath	equ	0xFFA
 24020                           tblptru	equ	0xFF8
 24021                           tblptrh	equ	0xFF7
 24022                           tblptrl	equ	0xFF6
 24023                           tablat	equ	0xFF5
 24024                           prodh	equ	0xFF4
 24025                           prodl	equ	0xFF3
 24026                           intcon	equ	0xFF2
 24027                           postinc0	equ	0xFEE
 24028                           wreg	equ	0xFE8
 24029                           indf1	equ	0xFE7
 24030                           postdec1	equ	0xFE5
 24031                           fsr1h	equ	0xFE2
 24032                           fsr1l	equ	0xFE1
 24033                           indf2	equ	0xFDF
 24034                           postinc2	equ	0xFDE
 24035                           postdec2	equ	0xFDD
 24036                           plusw2	equ	0xFDB
 24037                           fsr2h	equ	0xFDA
 24038                           fsr2l	equ	0xFD9
 24039                           status	equ	0xFD8
 24040                           
 24041 ;; *************** function _ADC_SetupIO *****************
 24042 ;; Defined at:
 24043 ;;		line 150 in file "Library/ADC.c"
 24044 ;; Parameters:    Size  Location     Type
 24045 ;;  pChannel        1    wreg     enum E6742
 24046 ;; Auto vars:     Size  Location     Type
 24047 ;;  pChannel        1    2[BANK0 ] enum E6742
 24048 ;;  MASK            1    3[BANK0 ] unsigned char 
 24049 ;; Return value:  Size  Location     Type
 24050 ;;                  1    wreg      void 
 24051 ;; Registers used:
 24052 ;;		wreg, status,2, status,0
 24053 ;; Tracked objects:
 24054 ;;		On entry : 0/0
 24055 ;;		On exit  : 0/0
 24056 ;;		Unchanged: 0/0
 24057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24059 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24060 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24061 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24062 ;;Total ram usage:        4 bytes
 24063 ;; Hardware stack levels used:    1
 24064 ;; Hardware stack levels required when called:    7
 24065 ;; This function calls:
 24066 ;;		Nothing
 24067 ;; This function is called by:
 24068 ;;		_ADC_Init
 24069 ;; This function uses a non-reentrant model
 24070 ;;
 24071                           
 24072                           	psect	text118
 24073  01606E                     __ptext118:
 24074                           	opt stack 0
 24075  01606E                     _ADC_SetupIO:
 24076                           	opt stack 21
 24077                           
 24078                           ;incstack = 0
 24079                           ;ADC_SetupIO@pChannel stored from wreg
 24080  01606E  0100               	movlb	0	; () banked
 24081  016070  6F62               	movwf	ADC_SetupIO@pChannel& (0+255),b
 24082                           
 24083                           ;ADC.c: 152: UINT8 MASK = ~(1 << pChannel);
 24084  016072  C062  F060         	movff	ADC_SetupIO@pChannel,??_ADC_SetupIO
 24085  016076  0E01               	movlw	1
 24086  016078  0100               	movlb	0	; () banked
 24087  01607A  6F61               	movwf	(??_ADC_SetupIO+1)& (0+255),b
 24088  01607C  0100               	movlb	0	; () banked
 24089  01607E  2B60               	incf	??_ADC_SetupIO& (0+255),f,b
 24090  016080  D003               	goto	u10134
 24091  016082                     u10135:
 24092  016082  0100               	movlb	0	; () banked
 24093  016084  90D8               	bcf	status,0,c
 24094  016086  3761               	rlcf	(??_ADC_SetupIO+1)& (0+255),f,b
 24095  016088                     u10134:
 24096  016088  0100               	movlb	0	; () banked
 24097  01608A  2F60               	decfsz	??_ADC_SetupIO& (0+255),f,b
 24098  01608C  D7FA               	goto	u10135
 24099  01608E  0100               	movlb	0	; () banked
 24100  016090  5161               	movf	(??_ADC_SetupIO+1)& (0+255),w,b
 24101  016092  0AFF               	xorlw	255
 24102  016094  0100               	movlb	0	; () banked
 24103  016096  6F63               	movwf	ADC_SetupIO@MASK& (0+255),b
 24104                           
 24105                           ;ADC.c: 153: ANCON0 &= MASK;
 24106  016098  0100               	movlb	0	; () banked
 24107  01609A  5163               	movf	ADC_SetupIO@MASK& (0+255),w,b
 24108  01609C  16C1               	andwf	4033,f,c	;volatile
 24109                           
 24110                           ; BSR set to: 0
 24111  01609E  0012               	return		;funcret
 24112  0160A0                     __end_of_ADC_SetupIO:
 24113                           	opt stack 0
 24114                           tosu	equ	0xFFF
 24115                           tosh	equ	0xFFE
 24116                           tosl	equ	0xFFD
 24117                           pclath	equ	0xFFA
 24118                           tblptru	equ	0xFF8
 24119                           tblptrh	equ	0xFF7
 24120                           tblptrl	equ	0xFF6
 24121                           tablat	equ	0xFF5
 24122                           prodh	equ	0xFF4
 24123                           prodl	equ	0xFF3
 24124                           intcon	equ	0xFF2
 24125                           postinc0	equ	0xFEE
 24126                           wreg	equ	0xFE8
 24127                           indf1	equ	0xFE7
 24128                           postdec1	equ	0xFE5
 24129                           fsr1h	equ	0xFE2
 24130                           fsr1l	equ	0xFE1
 24131                           indf2	equ	0xFDF
 24132                           postinc2	equ	0xFDE
 24133                           postdec2	equ	0xFDD
 24134                           plusw2	equ	0xFDB
 24135                           fsr2h	equ	0xFDA
 24136                           fsr2l	equ	0xFD9
 24137                           status	equ	0xFD8
 24138                           
 24139 ;; *************** function _ADC_SetChannel *****************
 24140 ;; Defined at:
 24141 ;;		line 155 in file "Library/ADC.c"
 24142 ;; Parameters:    Size  Location     Type
 24143 ;;  pChannel        1    wreg     enum E6742
 24144 ;; Auto vars:     Size  Location     Type
 24145 ;;  pChannel        1    1[BANK0 ] enum E6742
 24146 ;; Return value:  Size  Location     Type
 24147 ;;                  1    wreg      void 
 24148 ;; Registers used:
 24149 ;;		wreg, status,2, status,0
 24150 ;; Tracked objects:
 24151 ;;		On entry : 0/0
 24152 ;;		On exit  : 0/0
 24153 ;;		Unchanged: 0/0
 24154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24156 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24157 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24158 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24159 ;;Total ram usage:        2 bytes
 24160 ;; Hardware stack levels used:    1
 24161 ;; Hardware stack levels required when called:    7
 24162 ;; This function calls:
 24163 ;;		Nothing
 24164 ;; This function is called by:
 24165 ;;		_ADC_Init
 24166 ;;		_ADC_Start
 24167 ;;		_ADC_ISR
 24168 ;;		_ADC_Sample
 24169 ;; This function uses a non-reentrant model
 24170 ;;
 24171                           
 24172                           	psect	text119
 24173  016406                     __ptext119:
 24174                           	opt stack 0
 24175  016406                     _ADC_SetChannel:
 24176                           	opt stack 21
 24177                           
 24178                           ; BSR set to: 0
 24179                           ;incstack = 0
 24180                           ;ADC_SetChannel@pChannel stored from wreg
 24181  016406  0100               	movlb	0	; () banked
 24182  016408  6F61               	movwf	ADC_SetChannel@pChannel& (0+255),b
 24183                           
 24184                           ;ADC.c: 157: ADCON0bits.CHS = (UINT8)pChannel;
 24185  01640A  C061  F060         	movff	ADC_SetChannel@pChannel,??_ADC_SetChannel
 24186  01640E  0100               	movlb	0	; () banked
 24187  016410  4760               	rlncf	??_ADC_SetChannel& (0+255),f,b
 24188  016412  4760               	rlncf	??_ADC_SetChannel& (0+255),f,b
 24189  016414  50C2               	movf	4034,w,c	;volatile
 24190  016416  0100               	movlb	0	; () banked
 24191  016418  1960               	xorwf	??_ADC_SetChannel& (0+255),w,b
 24192  01641A  0BC3               	andlw	-61
 24193  01641C  1960               	xorwf	??_ADC_SetChannel& (0+255),w,b
 24194  01641E  6EC2               	movwf	4034,c	;volatile
 24195                           
 24196                           ; BSR set to: 0
 24197  016420  0012               	return		;funcret
 24198  016422                     __end_of_ADC_SetChannel:
 24199                           	opt stack 0
 24200                           tosu	equ	0xFFF
 24201                           tosh	equ	0xFFE
 24202                           tosl	equ	0xFFD
 24203                           pclath	equ	0xFFA
 24204                           tblptru	equ	0xFF8
 24205                           tblptrh	equ	0xFF7
 24206                           tblptrl	equ	0xFF6
 24207                           tablat	equ	0xFF5
 24208                           prodh	equ	0xFF4
 24209                           prodl	equ	0xFF3
 24210                           intcon	equ	0xFF2
 24211                           postinc0	equ	0xFEE
 24212                           wreg	equ	0xFE8
 24213                           indf1	equ	0xFE7
 24214                           postdec1	equ	0xFE5
 24215                           fsr1h	equ	0xFE2
 24216                           fsr1l	equ	0xFE1
 24217                           indf2	equ	0xFDF
 24218                           postinc2	equ	0xFDE
 24219                           postdec2	equ	0xFDD
 24220                           plusw2	equ	0xFDB
 24221                           fsr2h	equ	0xFDA
 24222                           fsr2l	equ	0xFD9
 24223                           status	equ	0xFD8
 24224                           
 24225 ;; *************** function _ADC_ConversionTime *****************
 24226 ;; Defined at:
 24227 ;;		line 199 in file "Library/ADC.c"
 24228 ;; Parameters:    Size  Location     Type
 24229 ;;  pCount          1    wreg     unsigned char 
 24230 ;; Auto vars:     Size  Location     Type
 24231 ;;  pCount          1    1[BANK0 ] unsigned char 
 24232 ;; Return value:  Size  Location     Type
 24233 ;;                  1    wreg      void 
 24234 ;; Registers used:
 24235 ;;		wreg, status,2, status,0
 24236 ;; Tracked objects:
 24237 ;;		On entry : 0/0
 24238 ;;		On exit  : 0/0
 24239 ;;		Unchanged: 0/0
 24240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24242 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24243 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24244 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24245 ;;Total ram usage:        2 bytes
 24246 ;; Hardware stack levels used:    1
 24247 ;; Hardware stack levels required when called:    7
 24248 ;; This function calls:
 24249 ;;		Nothing
 24250 ;; This function is called by:
 24251 ;;		_ADC_Init
 24252 ;; This function uses a non-reentrant model
 24253 ;;
 24254                           
 24255                           	psect	text120
 24256  015B78                     __ptext120:
 24257                           	opt stack 0
 24258  015B78                     _ADC_ConversionTime:
 24259                           	opt stack 21
 24260                           
 24261                           ; BSR set to: 0
 24262                           ;incstack = 0
 24263                           ;ADC_ConversionTime@pCount stored from wreg
 24264  015B78  0100               	movlb	0	; () banked
 24265  015B7A  6F61               	movwf	ADC_ConversionTime@pCount& (0+255),b
 24266                           
 24267                           ;ADC.c: 201: if (pCount == 10)
 24268  015B7C  0E0A               	movlw	10
 24269  015B7E  0100               	movlb	0	; () banked
 24270  015B80  1961               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 24271  015B82  B4D8               	btfsc	status,2,c
 24272  015B84  D00A               	goto	u10100
 24273                           
 24274                           ; BSR set to: 0
 24275                           ;ADC.c: 203: else if (pCount == 14)
 24276                           
 24277                           ; BSR set to: 0
 24278                           
 24279                           ; BSR set to: 0
 24280                           ;ADC.c: 202: pCount -= 2;
 24281  015B86  0E0E               	movlw	14
 24282  015B88  0100               	movlb	0	; () banked
 24283  015B8A  1961               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 24284  015B8C  B4D8               	btfsc	status,2,c
 24285  015B8E  D005               	goto	u10100
 24286                           
 24287                           ; BSR set to: 0
 24288                           ;ADC.c: 205: else if (pCount == 18)
 24289                           
 24290                           ; BSR set to: 0
 24291                           
 24292                           ; BSR set to: 0
 24293                           ;ADC.c: 204: pCount -= 2;
 24294  015B90  0E12               	movlw	18
 24295  015B92  0100               	movlb	0	; () banked
 24296  015B94  1961               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 24297  015B96  A4D8               	btfss	status,2,c
 24298  015B98  D003               	goto	l1313
 24299  015B9A                     u10100:
 24300                           
 24301                           ; BSR set to: 0
 24302                           ;ADC.c: 206: pCount -= 2;
 24303  015B9A  0E02               	movlw	2
 24304  015B9C  0100               	movlb	0	; () banked
 24305  015B9E  5F61               	subwf	ADC_ConversionTime@pCount& (0+255),f,b
 24306  015BA0                     l1313:
 24307                           
 24308                           ; BSR set to: 0
 24309                           ;ADC.c: 208: pCount <<= 1;
 24310                           
 24311                           ; BSR set to: 0
 24312                           
 24313                           ; BSR set to: 0
 24314  015BA0  0100               	movlb	0	; () banked
 24315  015BA2  90D8               	bcf	status,0,c
 24316  015BA4  3761               	rlcf	ADC_ConversionTime@pCount& (0+255),f,b
 24317                           
 24318                           ;ADC.c: 209: ADCON1bits.ACQT = pCount;
 24319  015BA6  C061  F060         	movff	ADC_ConversionTime@pCount,??_ADC_ConversionTime
 24320  015BAA  0100               	movlb	0	; () banked
 24321  015BAC  4760               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 24322  015BAE  4760               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 24323  015BB0  4760               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 24324  015BB2  50C1               	movf	4033,w,c	;volatile
 24325  015BB4  0100               	movlb	0	; () banked
 24326  015BB6  1960               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 24327  015BB8  0BC7               	andlw	-57
 24328  015BBA  1960               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 24329  015BBC  6EC1               	movwf	4033,c	;volatile
 24330                           
 24331                           ; BSR set to: 0
 24332  015BBE  0012               	return		;funcret
 24333  015BC0                     __end_of_ADC_ConversionTime:
 24334                           	opt stack 0
 24335                           tosu	equ	0xFFF
 24336                           tosh	equ	0xFFE
 24337                           tosl	equ	0xFFD
 24338                           pclath	equ	0xFFA
 24339                           tblptru	equ	0xFF8
 24340                           tblptrh	equ	0xFF7
 24341                           tblptrl	equ	0xFF6
 24342                           tablat	equ	0xFF5
 24343                           prodh	equ	0xFF4
 24344                           prodl	equ	0xFF3
 24345                           intcon	equ	0xFF2
 24346                           postinc0	equ	0xFEE
 24347                           wreg	equ	0xFE8
 24348                           indf1	equ	0xFE7
 24349                           postdec1	equ	0xFE5
 24350                           fsr1h	equ	0xFE2
 24351                           fsr1l	equ	0xFE1
 24352                           indf2	equ	0xFDF
 24353                           postinc2	equ	0xFDE
 24354                           postdec2	equ	0xFDD
 24355                           plusw2	equ	0xFDB
 24356                           fsr2h	equ	0xFDA
 24357                           fsr2l	equ	0xFD9
 24358                           status	equ	0xFD8
 24359                           
 24360 ;; *************** function _ADC_ClockDivision *****************
 24361 ;; Defined at:
 24362 ;;		line 159 in file "Library/ADC.c"
 24363 ;; Parameters:    Size  Location     Type
 24364 ;;  pDivide         1    wreg     unsigned char 
 24365 ;; Auto vars:     Size  Location     Type
 24366 ;;  pDivide         1    0[BANK0 ] unsigned char 
 24367 ;;  unfound         1    2[BANK0 ] unsigned char 
 24368 ;;  reg             1    1[BANK0 ] unsigned char 
 24369 ;; Return value:  Size  Location     Type
 24370 ;;                  1    wreg      void 
 24371 ;; Registers used:
 24372 ;;		wreg, status,2, status,0
 24373 ;; Tracked objects:
 24374 ;;		On entry : 0/0
 24375 ;;		On exit  : 0/0
 24376 ;;		Unchanged: 0/0
 24377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24379 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24381 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24382 ;;Total ram usage:        3 bytes
 24383 ;; Hardware stack levels used:    1
 24384 ;; Hardware stack levels required when called:    7
 24385 ;; This function calls:
 24386 ;;		Nothing
 24387 ;; This function is called by:
 24388 ;;		_ADC_Init
 24389 ;; This function uses a non-reentrant model
 24390 ;;
 24391                           
 24392                           	psect	text121
 24393  014E84                     __ptext121:
 24394                           	opt stack 0
 24395  014E84                     _ADC_ClockDivision:
 24396                           	opt stack 21
 24397                           
 24398                           ; BSR set to: 0
 24399                           ;incstack = 0
 24400                           ;ADC_ClockDivision@pDivide stored from wreg
 24401  014E84  0100               	movlb	0	; () banked
 24402  014E86  6F60               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 24403                           
 24404                           ;ADC.c: 161: UINT8 reg = 0;
 24405  014E88  0E00               	movlw	0
 24406  014E8A  0100               	movlb	0	; () banked
 24407  014E8C  6F61               	movwf	ADC_ClockDivision@reg& (0+255),b
 24408                           
 24409                           ;ADC.c: 162: bool unfound = 1;
 24410  014E8E  0E01               	movlw	1
 24411  014E90  D002               	goto	L15
 24412  014E92                     
 24413                           ; BSR set to: 0
 24414                           ;ADC.c: 167: reg = 0;
 24415                           
 24416                           ; BSR set to: 0
 24417  014E92  0E00               	movlw	0
 24418  014E94  D00C               	goto	L20
 24419  014E96                     L15:
 24420  014E96  0100               	movlb	0	; () banked
 24421  014E98  6F62               	movwf	ADC_ClockDivision@unfound& (0+255),b
 24422                           
 24423                           ;ADC.c: 169: break;
 24424  014E9A  D02D               	goto	l1296
 24425  014E9C                     
 24426                           ; BSR set to: 0
 24427                           ;ADC.c: 171: reg = 0b100;
 24428                           
 24429                           ; BSR set to: 0
 24430  014E9C  0E04               	movlw	4
 24431  014E9E  D007               	goto	L20
 24432  014EA0                     
 24433                           ; BSR set to: 0
 24434                           ;ADC.c: 175: reg = 0b001;
 24435                           
 24436                           ; BSR set to: 0
 24437  014EA0  0E01               	movlw	1
 24438  014EA2  D005               	goto	L20
 24439  014EA4                     
 24440                           ; BSR set to: 0
 24441                           ;ADC.c: 179: reg = 0b101;
 24442                           
 24443                           ; BSR set to: 0
 24444  014EA4  0E05               	movlw	5
 24445  014EA6  D003               	goto	L20
 24446  014EA8                     
 24447                           ; BSR set to: 0
 24448                           ;ADC.c: 183: reg = 0b010;
 24449                           
 24450                           ; BSR set to: 0
 24451  014EA8  0E02               	movlw	2
 24452  014EAA  D001               	goto	L20
 24453  014EAC                     
 24454                           ; BSR set to: 0
 24455                           ;ADC.c: 187: reg = 0b110;
 24456                           
 24457                           ; BSR set to: 0
 24458  014EAC  0E06               	movlw	6
 24459  014EAE                     L20:
 24460  014EAE  0100               	movlb	0	; () banked
 24461  014EB0  6F61               	movwf	ADC_ClockDivision@reg& (0+255),b
 24462                           
 24463                           ;ADC.c: 188: unfound = 0;
 24464  014EB2  0E00               	movlw	0
 24465  014EB4  D7F0               	goto	L15
 24466  014EB6                     
 24467                           ; BSR set to: 0
 24468                           ;ADC.c: 191: if (pDivide > 2)
 24469                           
 24470                           ; BSR set to: 0
 24471  014EB6  0E02               	movlw	2
 24472  014EB8  0100               	movlb	0	; () banked
 24473  014EBA  6560               	cpfsgt	ADC_ClockDivision@pDivide& (0+255),b
 24474  014EBC  D003               	goto	l1303
 24475                           
 24476                           ; BSR set to: 0
 24477                           ;ADC.c: 192: pDivide --;
 24478  014EBE  0100               	movlb	0	; () banked
 24479  014EC0  0760               	decf	ADC_ClockDivision@pDivide& (0+255),f,b
 24480  014EC2  D019               	goto	l1296
 24481  014EC4                     l1303:
 24482                           
 24483                           ; BSR set to: 0
 24484                           ;ADC.c: 193: else
 24485                           ;ADC.c: 194: pDivide = 2;
 24486                           
 24487                           ; BSR set to: 0
 24488  014EC4  0E02               	movlw	2
 24489  014EC6  0100               	movlb	0	; () banked
 24490  014EC8  6F60               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 24491                           
 24492                           ; BSR set to: 0
 24493                           ;ADC.c: 195: };
 24494  014ECA  D015               	goto	l1296
 24495  014ECC                     
 24496                           ; BSR set to: 0
 24497                           
 24498                           ; BSR set to: 0
 24499  014ECC  0100               	movlb	0	; () banked
 24500  014ECE  5160               	movf	ADC_ClockDivision@pDivide& (0+255),w,b
 24501                           
 24502                           ; Switch size 1, requested type "space"
 24503                           ; Number of cases is 6, Range of values is 2 to 64
 24504                           ; switch strategies available:
 24505                           ; Name         Instructions Cycles
 24506                           ; simple_byte           19    10 (average)
 24507                           ;	Chosen strategy is simple_byte
 24508  014ED0  0A02               	xorlw	2	; case 2
 24509  014ED2  B4D8               	btfsc	status,2,c
 24510  014ED4  D7DE               	goto	l1295
 24511  014ED6  0A06               	xorlw	6	; case 4
 24512  014ED8  B4D8               	btfsc	status,2,c
 24513  014EDA  D7E0               	goto	l1297
 24514  014EDC  0A0C               	xorlw	12	; case 8
 24515  014EDE  B4D8               	btfsc	status,2,c
 24516  014EE0  D7DF               	goto	l1298
 24517  014EE2  0A18               	xorlw	24	; case 16
 24518  014EE4  B4D8               	btfsc	status,2,c
 24519  014EE6  D7DE               	goto	l1299
 24520  014EE8  0A30               	xorlw	48	; case 32
 24521  014EEA  B4D8               	btfsc	status,2,c
 24522  014EEC  D7DD               	goto	l1300
 24523  014EEE  0A60               	xorlw	96	; case 64
 24524  014EF0  B4D8               	btfsc	status,2,c
 24525  014EF2  D7DC               	goto	l1301
 24526  014EF4  D7E0               	goto	l1302
 24527  014EF6                     l1296:
 24528                           
 24529                           ; BSR set to: 0
 24530                           
 24531                           ; BSR set to: 0
 24532                           
 24533                           ; BSR set to: 0
 24534  014EF6  0100               	movlb	0	; () banked
 24535  014EF8  5162               	movf	ADC_ClockDivision@unfound& (0+255),w,b
 24536  014EFA  0100               	movlb	0	; () banked
 24537  014EFC  A4D8               	btfss	status,2,c
 24538  014EFE  D7E6               	goto	l1294
 24539                           
 24540                           ; BSR set to: 0
 24541                           ;ADC.c: 197: ADCON1bits.ADCS = reg;
 24542                           
 24543                           ; BSR set to: 0
 24544  014F00  50C1               	movf	4033,w,c	;volatile
 24545  014F02  0100               	movlb	0	; () banked
 24546  014F04  1961               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 24547  014F06  0BF8               	andlw	-8
 24548  014F08  1961               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 24549  014F0A  6EC1               	movwf	4033,c	;volatile
 24550                           
 24551                           ; BSR set to: 0
 24552  014F0C  0012               	return		;funcret
 24553  014F0E                     __end_of_ADC_ClockDivision:
 24554                           	opt stack 0
 24555                           tosu	equ	0xFFF
 24556                           tosh	equ	0xFFE
 24557                           tosl	equ	0xFFD
 24558                           pclath	equ	0xFFA
 24559                           tblptru	equ	0xFF8
 24560                           tblptrh	equ	0xFF7
 24561                           tblptrl	equ	0xFF6
 24562                           tablat	equ	0xFF5
 24563                           prodh	equ	0xFF4
 24564                           prodl	equ	0xFF3
 24565                           intcon	equ	0xFF2
 24566                           postinc0	equ	0xFEE
 24567                           wreg	equ	0xFE8
 24568                           indf1	equ	0xFE7
 24569                           postdec1	equ	0xFE5
 24570                           fsr1h	equ	0xFE2
 24571                           fsr1l	equ	0xFE1
 24572                           indf2	equ	0xFDF
 24573                           postinc2	equ	0xFDE
 24574                           postdec2	equ	0xFDD
 24575                           plusw2	equ	0xFDB
 24576                           fsr2h	equ	0xFDA
 24577                           fsr2l	equ	0xFD9
 24578                           status	equ	0xFD8
 24579                           
 24580 ;; *************** function _ADC_Calibrate *****************
 24581 ;; Defined at:
 24582 ;;		line 63 in file "Library/ADC.c"
 24583 ;; Parameters:    Size  Location     Type
 24584 ;;		None
 24585 ;; Auto vars:     Size  Location     Type
 24586 ;;		None
 24587 ;; Return value:  Size  Location     Type
 24588 ;;                  1    wreg      void 
 24589 ;; Registers used:
 24590 ;;		cstack
 24591 ;; Tracked objects:
 24592 ;;		On entry : 0/0
 24593 ;;		On exit  : 0/0
 24594 ;;		Unchanged: 0/0
 24595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24599 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24600 ;;Total ram usage:        0 bytes
 24601 ;; Hardware stack levels used:    1
 24602 ;; Hardware stack levels required when called:    8
 24603 ;; This function calls:
 24604 ;;		_ADC_Off
 24605 ;;		_ADC_On
 24606 ;; This function is called by:
 24607 ;;		_ADC_Init
 24608 ;; This function uses a non-reentrant model
 24609 ;;
 24610                           
 24611                           	psect	text122
 24612  01652A                     __ptext122:
 24613                           	opt stack 0
 24614  01652A                     _ADC_Calibrate:
 24615                           	opt stack 20
 24616                           
 24617                           ;ADC.c: 65: ADC_On();
 24618                           
 24619                           ; BSR set to: 0
 24620                           ;incstack = 0
 24621  01652A  EC21  F0B3         	call	_ADC_On	;wreg free
 24622                           
 24623                           ;ADC.c: 67: ADCON1bits.ADCAL = 1;
 24624  01652E  8CC1               	bsf	4033,6,c	;volatile
 24625                           
 24626                           ;ADC.c: 69: (ADCON0bits.GO) = 1;
 24627  016530  82C2               	bsf	4034,1,c	;volatile
 24628  016532  B2C2               	btfsc	4034,1,c	;volatile
 24629  016534  D7FE               	goto	l1254
 24630                           
 24631                           ;ADC.c: 71: ADCON1bits.ADCAL = 0;
 24632  016536  9CC1               	bcf	4033,6,c	;volatile
 24633                           
 24634                           ;ADC.c: 73: ADC_Off();
 24635  016538  EC13  F0B3         	call	_ADC_Off	;wreg free
 24636  01653C  0012               	return		;funcret
 24637  01653E                     __end_of_ADC_Calibrate:
 24638                           	opt stack 0
 24639                           tosu	equ	0xFFF
 24640                           tosh	equ	0xFFE
 24641                           tosl	equ	0xFFD
 24642                           pclath	equ	0xFFA
 24643                           tblptru	equ	0xFF8
 24644                           tblptrh	equ	0xFF7
 24645                           tblptrl	equ	0xFF6
 24646                           tablat	equ	0xFF5
 24647                           prodh	equ	0xFF4
 24648                           prodl	equ	0xFF3
 24649                           intcon	equ	0xFF2
 24650                           postinc0	equ	0xFEE
 24651                           wreg	equ	0xFE8
 24652                           indf1	equ	0xFE7
 24653                           postdec1	equ	0xFE5
 24654                           fsr1h	equ	0xFE2
 24655                           fsr1l	equ	0xFE1
 24656                           indf2	equ	0xFDF
 24657                           postinc2	equ	0xFDE
 24658                           postdec2	equ	0xFDD
 24659                           plusw2	equ	0xFDB
 24660                           fsr2h	equ	0xFDA
 24661                           fsr2l	equ	0xFD9
 24662                           status	equ	0xFD8
 24663                           
 24664 ;; *************** function _ADC_On *****************
 24665 ;; Defined at:
 24666 ;;		line 85 in file "Library/ADC.c"
 24667 ;; Parameters:    Size  Location     Type
 24668 ;;		None
 24669 ;; Auto vars:     Size  Location     Type
 24670 ;;		None
 24671 ;; Return value:  Size  Location     Type
 24672 ;;                  1    wreg      void 
 24673 ;; Registers used:
 24674 ;;		None
 24675 ;; Tracked objects:
 24676 ;;		On entry : 0/0
 24677 ;;		On exit  : 0/0
 24678 ;;		Unchanged: 0/0
 24679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24681 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24682 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24683 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24684 ;;Total ram usage:        0 bytes
 24685 ;; Hardware stack levels used:    1
 24686 ;; Hardware stack levels required when called:    7
 24687 ;; This function calls:
 24688 ;;		Nothing
 24689 ;; This function is called by:
 24690 ;;		_ADC_Calibrate
 24691 ;;		_ADC_Start
 24692 ;;		_ADC_ISR
 24693 ;;		_ADC_Sample
 24694 ;; This function uses a non-reentrant model
 24695 ;;
 24696                           
 24697                           	psect	text123
 24698  016642                     __ptext123:
 24699                           	opt stack 0
 24700  016642                     _ADC_On:
 24701                           	opt stack 21
 24702                           
 24703                           ;ADC.c: 87: ADCON0bits.ADON = 1;
 24704                           
 24705                           ;incstack = 0
 24706  016642  80C2               	bsf	4034,0,c	;volatile
 24707                           
 24708                           ;ADC.c: 88: PIR1bits.ADIF = 0;
 24709  016644  9C9E               	bcf	3998,6,c	;volatile
 24710  016646  0012               	return		;funcret
 24711  016648                     __end_of_ADC_On:
 24712                           	opt stack 0
 24713                           tosu	equ	0xFFF
 24714                           tosh	equ	0xFFE
 24715                           tosl	equ	0xFFD
 24716                           pclath	equ	0xFFA
 24717                           tblptru	equ	0xFF8
 24718                           tblptrh	equ	0xFF7
 24719                           tblptrl	equ	0xFF6
 24720                           tablat	equ	0xFF5
 24721                           prodh	equ	0xFF4
 24722                           prodl	equ	0xFF3
 24723                           intcon	equ	0xFF2
 24724                           postinc0	equ	0xFEE
 24725                           wreg	equ	0xFE8
 24726                           indf1	equ	0xFE7
 24727                           postdec1	equ	0xFE5
 24728                           fsr1h	equ	0xFE2
 24729                           fsr1l	equ	0xFE1
 24730                           indf2	equ	0xFDF
 24731                           postinc2	equ	0xFDE
 24732                           postdec2	equ	0xFDD
 24733                           plusw2	equ	0xFDB
 24734                           fsr2h	equ	0xFDA
 24735                           fsr2l	equ	0xFD9
 24736                           status	equ	0xFD8
 24737                           
 24738 ;; *************** function _ADC_Off *****************
 24739 ;; Defined at:
 24740 ;;		line 94 in file "Library/ADC.c"
 24741 ;; Parameters:    Size  Location     Type
 24742 ;;		None
 24743 ;; Auto vars:     Size  Location     Type
 24744 ;;		None
 24745 ;; Return value:  Size  Location     Type
 24746 ;;                  1    wreg      void 
 24747 ;; Registers used:
 24748 ;;		None
 24749 ;; Tracked objects:
 24750 ;;		On entry : 0/0
 24751 ;;		On exit  : 0/0
 24752 ;;		Unchanged: 0/0
 24753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24757 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24758 ;;Total ram usage:        0 bytes
 24759 ;; Hardware stack levels used:    1
 24760 ;; Hardware stack levels required when called:    7
 24761 ;; This function calls:
 24762 ;;		Nothing
 24763 ;; This function is called by:
 24764 ;;		_ADC_Calibrate
 24765 ;;		_ADC_Start
 24766 ;;		_ADC_ISR
 24767 ;;		_ADC_Sample
 24768 ;; This function uses a non-reentrant model
 24769 ;;
 24770                           
 24771                           	psect	text124
 24772  016626                     __ptext124:
 24773                           	opt stack 0
 24774  016626                     _ADC_Off:
 24775                           	opt stack 21
 24776                           
 24777                           ;ADC.c: 96: ADCON0bits.ADON = 0;
 24778                           
 24779                           ;incstack = 0
 24780  016626  90C2               	bcf	4034,0,c	;volatile
 24781                           
 24782                           ;ADC.c: 97: PIR1bits.ADIF = 0;
 24783  016628  9C9E               	bcf	3998,6,c	;volatile
 24784                           
 24785                           ;ADC.c: 98: PIE1bits.ADIE = 0;
 24786  01662A  9C9D               	bcf	3997,6,c	;volatile
 24787  01662C  0012               	return		;funcret
 24788  01662E                     __end_of_ADC_Off:
 24789                           	opt stack 0
 24790                           tosu	equ	0xFFF
 24791                           tosh	equ	0xFFE
 24792                           tosl	equ	0xFFD
 24793                           pclath	equ	0xFFA
 24794                           tblptru	equ	0xFF8
 24795                           tblptrh	equ	0xFF7
 24796                           tblptrl	equ	0xFF6
 24797                           tablat	equ	0xFF5
 24798                           prodh	equ	0xFF4
 24799                           prodl	equ	0xFF3
 24800                           intcon	equ	0xFF2
 24801                           postinc0	equ	0xFEE
 24802                           wreg	equ	0xFE8
 24803                           indf1	equ	0xFE7
 24804                           postdec1	equ	0xFE5
 24805                           fsr1h	equ	0xFE2
 24806                           fsr1l	equ	0xFE1
 24807                           indf2	equ	0xFDF
 24808                           postinc2	equ	0xFDE
 24809                           postdec2	equ	0xFDD
 24810                           plusw2	equ	0xFDB
 24811                           fsr2h	equ	0xFDA
 24812                           fsr2l	equ	0xFD9
 24813                           status	equ	0xFD8
 24814                           
 24815 ;; *************** function _getMode *****************
 24816 ;; Defined at:
 24817 ;;		line 102 in file "main.c"
 24818 ;; Parameters:    Size  Location     Type
 24819 ;;		None
 24820 ;; Auto vars:     Size  Location     Type
 24821 ;;		None
 24822 ;; Return value:  Size  Location     Type
 24823 ;;                  1    wreg      void 
 24824 ;; Registers used:
 24825 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 24826 ;; Tracked objects:
 24827 ;;		On entry : 0/0
 24828 ;;		On exit  : 0/0
 24829 ;;		Unchanged: 0/0
 24830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24834 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24835 ;;Total ram usage:        0 bytes
 24836 ;; Hardware stack levels used:    1
 24837 ;; Hardware stack levels required when called:   16
 24838 ;; This function calls:
 24839 ;;		_HMI_DIPSwitch
 24840 ;;		_HMI_DownSwitch
 24841 ;;		_HMI_LeftSwitch
 24842 ;;		_HMI_Poll
 24843 ;;		_HMI_RightSwitch
 24844 ;;		_HMI_UpSwitch
 24845 ;;		_MXK_DIPSwitch
 24846 ;;		_MXK_TestButton
 24847 ;; This function is called by:
 24848 ;;		_main
 24849 ;; This function uses a non-reentrant model
 24850 ;;
 24851                           
 24852                           	psect	text125
 24853  014038                     __ptext125:
 24854                           	opt stack 0
 24855  014038                     _getMode:
 24856                           	opt stack 14
 24857                           
 24858                           ;main.c: 103: HMI_Poll();
 24859                           
 24860                           ;incstack = 0
 24861  014038  ECAA  F0A9         	call	_HMI_Poll	;wreg free
 24862                           
 24863                           ;main.c: 104: mode = 0;
 24864  01403C  0E00               	movlw	0
 24865  01403E  0100               	movlb	0	; () banked
 24866  014040  6FC9               	movwf	(_mode+1)& (0+255),b
 24867  014042  0E00               	movlw	0
 24868  014044  6FC8               	movwf	_mode& (0+255),b
 24869                           
 24870                           ; BSR set to: 0
 24871                           ;main.c: 105: if (HMIBoard.mUp.mGetState()) {
 24872  014046  EE23  F043         	lfsr	2,_HMIBoard+35
 24873  01404A  D801               	call	u11548
 24874  01404C  D00A               	goto	u11549
 24875  01404E                     u11548:
 24876  01404E  0005               	push	
 24877  014050  6EFA               	movwf	pclath,c
 24878  014052  50DE               	movf	postinc2,w,c
 24879  014054  6EFD               	movwf	tosl,c
 24880  014056  50DE               	movf	postinc2,w,c
 24881  014058  6EFE               	movwf	tosh,c
 24882  01405A  50DE               	movf	postinc2,w,c
 24883  01405C  6EFF               	movwf	tosu,c
 24884  01405E  50FA               	movf	pclath,w,c
 24885  014060  0012               	return		;indir
 24886  014062                     u11549:
 24887  014062  0900               	iorlw	0
 24888  014064  B4D8               	btfsc	status,2,c
 24889  014066  D005               	goto	l2309
 24890                           
 24891                           ;main.c: 106: mode = 1;
 24892  014068  0E00               	movlw	0
 24893  01406A  0100               	movlb	0	; () banked
 24894  01406C  6FC9               	movwf	(_mode+1)& (0+255),b
 24895  01406E  0E01               	movlw	1
 24896  014070  6FC8               	movwf	_mode& (0+255),b
 24897  014072                     l2309:
 24898                           
 24899                           ;main.c: 107: }
 24900                           ;main.c: 108: if (HMIBoard.mRight.mGetState()) {
 24901                           
 24902                           ; BSR set to: 0
 24903  014072  EE23  F02F         	lfsr	2,_HMIBoard+15
 24904  014076  D801               	call	u11568
 24905  014078  D00A               	goto	u11569
 24906  01407A                     u11568:
 24907  01407A  0005               	push	
 24908  01407C  6EFA               	movwf	pclath,c
 24909  01407E  50DE               	movf	postinc2,w,c
 24910  014080  6EFD               	movwf	tosl,c
 24911  014082  50DE               	movf	postinc2,w,c
 24912  014084  6EFE               	movwf	tosh,c
 24913  014086  50DE               	movf	postinc2,w,c
 24914  014088  6EFF               	movwf	tosu,c
 24915  01408A  50FA               	movf	pclath,w,c
 24916  01408C  0012               	return		;indir
 24917  01408E                     u11569:
 24918  01408E  0900               	iorlw	0
 24919  014090  B4D8               	btfsc	status,2,c
 24920  014092  D005               	goto	l2310
 24921                           
 24922                           ;main.c: 109: mode = 2;
 24923  014094  0E00               	movlw	0
 24924  014096  0100               	movlb	0	; () banked
 24925  014098  6FC9               	movwf	(_mode+1)& (0+255),b
 24926  01409A  0E02               	movlw	2
 24927  01409C  6FC8               	movwf	_mode& (0+255),b
 24928  01409E                     l2310:
 24929                           
 24930                           ;main.c: 110: }
 24931                           ;main.c: 111: if (HMIBoard.mDown.mGetState()) {
 24932                           
 24933                           ; BSR set to: 0
 24934  01409E  EE23  F04D         	lfsr	2,_HMIBoard+45
 24935  0140A2  D801               	call	u11588
 24936  0140A4  D00A               	goto	u11589
 24937  0140A6                     u11588:
 24938  0140A6  0005               	push	
 24939  0140A8  6EFA               	movwf	pclath,c
 24940  0140AA  50DE               	movf	postinc2,w,c
 24941  0140AC  6EFD               	movwf	tosl,c
 24942  0140AE  50DE               	movf	postinc2,w,c
 24943  0140B0  6EFE               	movwf	tosh,c
 24944  0140B2  50DE               	movf	postinc2,w,c
 24945  0140B4  6EFF               	movwf	tosu,c
 24946  0140B6  50FA               	movf	pclath,w,c
 24947  0140B8  0012               	return		;indir
 24948  0140BA                     u11589:
 24949  0140BA  0900               	iorlw	0
 24950  0140BC  B4D8               	btfsc	status,2,c
 24951  0140BE  D005               	goto	l2311
 24952                           
 24953                           ;main.c: 112: mode = 3;
 24954  0140C0  0E00               	movlw	0
 24955  0140C2  0100               	movlb	0	; () banked
 24956  0140C4  6FC9               	movwf	(_mode+1)& (0+255),b
 24957  0140C6  0E03               	movlw	3
 24958  0140C8  6FC8               	movwf	_mode& (0+255),b
 24959  0140CA                     l2311:
 24960                           
 24961                           ;main.c: 113: }
 24962                           ;main.c: 114: if (HMIBoard.mLeft.mGetState()) {
 24963                           
 24964                           ; BSR set to: 0
 24965  0140CA  EE23  F039         	lfsr	2,_HMIBoard+25
 24966  0140CE  D801               	call	u11608
 24967  0140D0  D00A               	goto	u11609
 24968  0140D2                     u11608:
 24969  0140D2  0005               	push	
 24970  0140D4  6EFA               	movwf	pclath,c
 24971  0140D6  50DE               	movf	postinc2,w,c
 24972  0140D8  6EFD               	movwf	tosl,c
 24973  0140DA  50DE               	movf	postinc2,w,c
 24974  0140DC  6EFE               	movwf	tosh,c
 24975  0140DE  50DE               	movf	postinc2,w,c
 24976  0140E0  6EFF               	movwf	tosu,c
 24977  0140E2  50FA               	movf	pclath,w,c
 24978  0140E4  0012               	return		;indir
 24979  0140E6                     u11609:
 24980  0140E6  0900               	iorlw	0
 24981  0140E8  B4D8               	btfsc	status,2,c
 24982  0140EA  0012               	return	
 24983                           
 24984                           ;main.c: 115: mode = 4;
 24985  0140EC  0E00               	movlw	0
 24986  0140EE  0100               	movlb	0	; () banked
 24987  0140F0  6FC9               	movwf	(_mode+1)& (0+255),b
 24988  0140F2  0E04               	movlw	4
 24989  0140F4  6FC8               	movwf	_mode& (0+255),b
 24990  0140F6  0012               	return	
 24991  0140F8                     __end_of_getMode:
 24992                           	opt stack 0
 24993                           tosu	equ	0xFFF
 24994                           tosh	equ	0xFFE
 24995                           tosl	equ	0xFFD
 24996                           pclath	equ	0xFFA
 24997                           tblptru	equ	0xFF8
 24998                           tblptrh	equ	0xFF7
 24999                           tblptrl	equ	0xFF6
 25000                           tablat	equ	0xFF5
 25001                           prodh	equ	0xFF4
 25002                           prodl	equ	0xFF3
 25003                           intcon	equ	0xFF2
 25004                           postinc0	equ	0xFEE
 25005                           wreg	equ	0xFE8
 25006                           indf1	equ	0xFE7
 25007                           postdec1	equ	0xFE5
 25008                           fsr1h	equ	0xFE2
 25009                           fsr1l	equ	0xFE1
 25010                           indf2	equ	0xFDF
 25011                           postinc2	equ	0xFDE
 25012                           postdec2	equ	0xFDD
 25013                           plusw2	equ	0xFDB
 25014                           fsr2h	equ	0xFDA
 25015                           fsr2l	equ	0xFD9
 25016                           status	equ	0xFD8
 25017                           
 25018 ;; *************** function _HMI_Poll *****************
 25019 ;; Defined at:
 25020 ;;		line 252 in file "HMI.c"
 25021 ;; Parameters:    Size  Location     Type
 25022 ;;		None
 25023 ;; Auto vars:     Size  Location     Type
 25024 ;;		None
 25025 ;; Return value:  Size  Location     Type
 25026 ;;                  1    wreg      void 
 25027 ;; Registers used:
 25028 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 25029 ;; Tracked objects:
 25030 ;;		On entry : 0/0
 25031 ;;		On exit  : 0/0
 25032 ;;		Unchanged: 0/0
 25033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25037 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25038 ;;Total ram usage:        0 bytes
 25039 ;; Hardware stack levels used:    1
 25040 ;; Hardware stack levels required when called:   15
 25041 ;; This function calls:
 25042 ;;		_Button_Poll
 25043 ;; This function is called by:
 25044 ;;		_getMode
 25045 ;;		_mode1
 25046 ;;		_mode2
 25047 ;;		_mode4
 25048 ;;		_main
 25049 ;; This function uses a non-reentrant model
 25050 ;;
 25051                           
 25052                           	psect	text126
 25053  015354                     __ptext126:
 25054                           	opt stack 0
 25055  015354                     _HMI_Poll:
 25056                           	opt stack 14
 25057                           
 25058                           ;HMI.c: 254: TRISE = 0xFC;
 25059                           
 25060                           ;incstack = 0
 25061  015354  0EFC               	movlw	252
 25062  015356  6E96               	movwf	3990,c	;volatile
 25063                           
 25064                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
 25065  015358  0E50               	movlw	low (_HMIBoard+48)
 25066  01535A  0100               	movlb	0	; () banked
 25067  01535C  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 25068  01535E  0E03               	movlw	high (_HMIBoard+48)
 25069  015360  0100               	movlb	0	; () banked
 25070  015362  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 25071  015364  0E01               	movlw	1
 25072  015366  0100               	movlb	0	; () banked
 25073  015368  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 25074  01536A  EC13  F098         	call	_Button_Poll	;wreg free
 25075                           
 25076                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
 25077  01536E  0E32               	movlw	low (_HMIBoard+18)
 25078  015370  0100               	movlb	0	; () banked
 25079  015372  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 25080  015374  0E03               	movlw	high (_HMIBoard+18)
 25081  015376  0100               	movlb	0	; () banked
 25082  015378  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 25083  01537A  0E01               	movlw	1
 25084  01537C  0100               	movlb	0	; () banked
 25085  01537E  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 25086  015380  EC13  F098         	call	_Button_Poll	;wreg free
 25087                           
 25088                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
 25089  015384  0E28               	movlw	low (_HMIBoard+8)
 25090  015386  0100               	movlb	0	; () banked
 25091  015388  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 25092  01538A  0E03               	movlw	high (_HMIBoard+8)
 25093  01538C  0100               	movlb	0	; () banked
 25094  01538E  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 25095  015390  0E01               	movlw	1
 25096  015392  0100               	movlb	0	; () banked
 25097  015394  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 25098  015396  EC13  F098         	call	_Button_Poll	;wreg free
 25099                           
 25100                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
 25101  01539A  0E3C               	movlw	low (_HMIBoard+28)
 25102  01539C  0100               	movlb	0	; () banked
 25103  01539E  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 25104  0153A0  0E03               	movlw	high (_HMIBoard+28)
 25105  0153A2  0100               	movlb	0	; () banked
 25106  0153A4  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 25107  0153A6  0E01               	movlw	1
 25108  0153A8  0100               	movlb	0	; () banked
 25109  0153AA  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 25110  0153AC  EC13  F098         	call	_Button_Poll	;wreg free
 25111                           
 25112                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
 25113  0153B0  0E46               	movlw	low (_HMIBoard+38)
 25114  0153B2  0100               	movlb	0	; () banked
 25115  0153B4  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 25116  0153B6  0E03               	movlw	high (_HMIBoard+38)
 25117  0153B8  0100               	movlb	0	; () banked
 25118  0153BA  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 25119  0153BC  0E01               	movlw	1
 25120  0153BE  0100               	movlb	0	; () banked
 25121  0153C0  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 25122  0153C2  EC13  F098         	call	_Button_Poll	;wreg free
 25123  0153C6  0012               	return		;funcret
 25124  0153C8                     __end_of_HMI_Poll:
 25125                           	opt stack 0
 25126                           tosu	equ	0xFFF
 25127                           tosh	equ	0xFFE
 25128                           tosl	equ	0xFFD
 25129                           pclath	equ	0xFFA
 25130                           tblptru	equ	0xFF8
 25131                           tblptrh	equ	0xFF7
 25132                           tblptrl	equ	0xFF6
 25133                           tablat	equ	0xFF5
 25134                           prodh	equ	0xFF4
 25135                           prodl	equ	0xFF3
 25136                           intcon	equ	0xFF2
 25137                           postinc0	equ	0xFEE
 25138                           wreg	equ	0xFE8
 25139                           indf1	equ	0xFE7
 25140                           postdec1	equ	0xFE5
 25141                           fsr1h	equ	0xFE2
 25142                           fsr1l	equ	0xFE1
 25143                           indf2	equ	0xFDF
 25144                           postinc2	equ	0xFDE
 25145                           postdec2	equ	0xFDD
 25146                           plusw2	equ	0xFDB
 25147                           fsr2h	equ	0xFDA
 25148                           fsr2l	equ	0xFD9
 25149                           status	equ	0xFD8
 25150                           
 25151 ;; *************** function _Button_Poll *****************
 25152 ;; Defined at:
 25153 ;;		line 57 in file "Library/Button.c"
 25154 ;; Parameters:    Size  Location     Type
 25155 ;;  pButton         2   27[BANK0 ] const PTR struct Button
 25156 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 25157 ;;  pIncrement      1   29[BANK0 ] unsigned char 
 25158 ;; Auto vars:     Size  Location     Type
 25159 ;;  Pin             1   35[BANK0 ] unsigned char 
 25160 ;; Return value:  Size  Location     Type
 25161 ;;                  1    wreg      unsigned char 
 25162 ;; Registers used:
 25163 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 25164 ;; Tracked objects:
 25165 ;;		On entry : 0/0
 25166 ;;		On exit  : 0/0
 25167 ;;		Unchanged: 0/0
 25168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25169 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25170 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25171 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25172 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25173 ;;Total ram usage:        9 bytes
 25174 ;; Hardware stack levels used:    1
 25175 ;; Hardware stack levels required when called:   14
 25176 ;; This function calls:
 25177 ;;		_Event_DIPSwitch
 25178 ;;		_Event_NULL
 25179 ;;		_Event_TestButton
 25180 ;;		_HMI_DIPSwitch
 25181 ;;		_HMI_DownSwitch
 25182 ;;		_HMI_LeftSwitch
 25183 ;;		_HMI_RightSwitch
 25184 ;;		_HMI_UpSwitch
 25185 ;;		_MXK_DIPSwitch
 25186 ;;		_MXK_TestButton
 25187 ;; This function is called by:
 25188 ;;		_HMI_Poll
 25189 ;;		_MXK_Poll
 25190 ;; This function uses a non-reentrant model
 25191 ;;
 25192                           
 25193                           	psect	text127
 25194  013026                     __ptext127:
 25195                           	opt stack 0
 25196  013026                     _Button_Poll:
 25197                           	opt stack 14
 25198                           
 25199                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
 25200                           
 25201                           ;incstack = 0
 25202  013026  0100               	movlb	0	; () banked
 25203  013028  EE20 F007          	lfsr	2,7
 25204  01302C  517B               	movf	Button_Poll@pButton& (0+255),w,b
 25205  01302E  26D9               	addwf	fsr2l,f,c
 25206  013030  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25207  013032  22DA               	addwfc	fsr2h,f,c
 25208  013034  D801               	call	u9828
 25209  013036  D00A               	goto	u9829
 25210  013038                     u9828:
 25211  013038  0005               	push	
 25212  01303A  6EFA               	movwf	pclath,c
 25213  01303C  50DE               	movf	postinc2,w,c
 25214  01303E  6EFD               	movwf	tosl,c
 25215  013040  50DE               	movf	postinc2,w,c
 25216  013042  6EFE               	movwf	tosh,c
 25217  013044  50DE               	movf	postinc2,w,c
 25218  013046  6EFF               	movwf	tosu,c
 25219  013048  50FA               	movf	pclath,w,c
 25220  01304A  0012               	return		;indir
 25221  01304C                     u9829:
 25222  01304C  0100               	movlb	0	; () banked
 25223  01304E  6F83               	movwf	Button_Poll@Pin& (0+255),b
 25224                           
 25225                           ; BSR set to: 0
 25226                           ;Button.c: 61: if (pButton->mState == Pin)
 25227  013050  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
 25228  013054  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 25229  013058  0100               	movlb	0	; () banked
 25230  01305A  5183               	movf	Button_Poll@Pin& (0+255),w,b
 25231  01305C  18DE               	xorwf	postinc2,w,c
 25232  01305E  A4D8               	btfss	status,2,c
 25233  013060  D021               	goto	l11
 25234                           
 25235                           ; BSR set to: 0
 25236                           ;Button.c: 62: {
 25237                           ;Button.c: 65: if(pIncrement > pButton->mCount)
 25238  013062  0100               	movlb	0	; () banked
 25239  013064  EE20 F001          	lfsr	2,1
 25240  013068  517B               	movf	Button_Poll@pButton& (0+255),w,b
 25241  01306A  26D9               	addwf	fsr2l,f,c
 25242  01306C  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25243  01306E  22DA               	addwfc	fsr2h,f,c
 25244  013070  0100               	movlb	0	; () banked
 25245  013072  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 25246  013074  5CDE               	subwf	postinc2,w,c
 25247  013076  B0D8               	btfsc	status,0,c
 25248  013078  D00A               	goto	l12
 25249                           
 25250                           ; BSR set to: 0
 25251                           ;Button.c: 66: pButton->mCount = 0;
 25252  01307A  0100               	movlb	0	; () banked
 25253  01307C  EE20 F001          	lfsr	2,1
 25254  013080  517B               	movf	Button_Poll@pButton& (0+255),w,b
 25255  013082  26D9               	addwf	fsr2l,f,c
 25256  013084  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25257  013086  22DA               	addwfc	fsr2h,f,c
 25258  013088  0E00               	movlw	0
 25259  01308A  6EDF               	movwf	indf2,c
 25260  01308C  0012               	return	
 25261  01308E                     l12:
 25262                           
 25263                           ; BSR set to: 0
 25264                           ;Button.c: 67: else
 25265                           ;Button.c: 68: pButton->mCount -= pIncrement;
 25266                           
 25267                           ; BSR set to: 0
 25268  01308E  0100               	movlb	0	; () banked
 25269  013090  EE20 F001          	lfsr	2,1
 25270  013094  517B               	movf	Button_Poll@pButton& (0+255),w,b
 25271  013096  26D9               	addwf	fsr2l,f,c
 25272  013098  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25273  01309A  22DA               	addwfc	fsr2h,f,c
 25274  01309C  0100               	movlb	0	; () banked
 25275  01309E  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 25276  0130A0  5EDF               	subwf	indf2,f,c
 25277                           
 25278                           ; BSR set to: 0
 25279                           ;Button.c: 69: }
 25280  0130A2  0012               	return	
 25281  0130A4                     l11:
 25282                           
 25283                           ; BSR set to: 0
 25284                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
 25285                           
 25286                           ; BSR set to: 0
 25287  0130A4  0100               	movlb	0	; () banked
 25288  0130A6  EE20 F001          	lfsr	2,1
 25289  0130AA  517B               	movf	Button_Poll@pButton& (0+255),w,b
 25290  0130AC  26D9               	addwf	fsr2l,f,c
 25291  0130AE  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25292  0130B0  22DA               	addwfc	fsr2h,f,c
 25293  0130B2  50DF               	movf	indf2,w,c
 25294  0130B4  0100               	movlb	0	; () banked
 25295  0130B6  6F7E               	movwf	??_Button_Poll& (0+255),b
 25296  0130B8  6B7F               	clrf	(??_Button_Poll+1)& (0+255),b
 25297  0130BA  0100               	movlb	0	; () banked
 25298  0130BC  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 25299  0130BE  0100               	movlb	0	; () banked
 25300  0130C0  277E               	addwf	??_Button_Poll& (0+255),f,b
 25301  0130C2  0E00               	movlw	0
 25302  0130C4  237F               	addwfc	(??_Button_Poll+1)& (0+255),f,b
 25303  0130C6  0100               	movlb	0	; () banked
 25304  0130C8  EE20 F001          	lfsr	2,1
 25305  0130CC  517B               	movf	Button_Poll@pButton& (0+255),w,b
 25306  0130CE  26D9               	addwf	fsr2l,f,c
 25307  0130D0  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25308  0130D2  22DA               	addwfc	fsr2h,f,c
 25309  0130D4  50DF               	movf	indf2,w,c
 25310  0130D6  0100               	movlb	0	; () banked
 25311  0130D8  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
 25312  0130DA  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
 25313  0130DC  0100               	movlb	0	; () banked
 25314  0130DE  517E               	movf	??_Button_Poll& (0+255),w,b
 25315  0130E0  0100               	movlb	0	; () banked
 25316  0130E2  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
 25317  0130E4  0100               	movlb	0	; () banked
 25318  0130E6  5181               	movf	(??_Button_Poll+3)& (0+255),w,b
 25319  0130E8  0A80               	xorlw	128
 25320  0130EA  0100               	movlb	0	; () banked
 25321  0130EC  6F82               	movwf	(??_Button_Poll+4)& (0+255),b
 25322  0130EE  0100               	movlb	0	; () banked
 25323  0130F0  517F               	movf	(??_Button_Poll+1)& (0+255),w,b
 25324  0130F2  0A80               	xorlw	128
 25325  0130F4  0100               	movlb	0	; () banked
 25326  0130F6  5982               	subwfb	(??_Button_Poll+4)& (0+255),w,b
 25327  0130F8  B0D8               	btfsc	status,0,c
 25328  0130FA  0012               	return	
 25329                           
 25330                           ; BSR set to: 0
 25331                           ;Button.c: 73: {
 25332                           ;Button.c: 75: pButton->mCount += pIncrement;
 25333  0130FC  0100               	movlb	0	; () banked
 25334  0130FE  EE20 F001          	lfsr	2,1
 25335  013102  517B               	movf	Button_Poll@pButton& (0+255),w,b
 25336  013104  26D9               	addwf	fsr2l,f,c
 25337  013106  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25338  013108  22DA               	addwfc	fsr2h,f,c
 25339  01310A  0100               	movlb	0	; () banked
 25340  01310C  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 25341  01310E  26DF               	addwf	indf2,f,c
 25342                           
 25343                           ; BSR set to: 0
 25344                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
 25345  013110  0100               	movlb	0	; () banked
 25346  013112  EE20 F002          	lfsr	2,2
 25347  013116  517B               	movf	Button_Poll@pButton& (0+255),w,b
 25348  013118  26D9               	addwf	fsr2l,f,c
 25349  01311A  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25350  01311C  22DA               	addwfc	fsr2h,f,c
 25351  01311E  0100               	movlb	0	; () banked
 25352  013120  EE10 F001          	lfsr	1,1
 25353  013124  517B               	movf	Button_Poll@pButton& (0+255),w,b
 25354  013126  26E1               	addwf	fsr1l,f,c
 25355  013128  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25356  01312A  22E2               	addwfc	fsr1h,f,c
 25357  01312C  50E7               	movf	indf1,w,c
 25358  01312E  0100               	movlb	0	; () banked
 25359  013130  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
 25360  013132  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
 25361  013134  50DE               	movf	postinc2,w,c
 25362  013136  0100               	movlb	0	; () banked
 25363  013138  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
 25364  01313A  50DE               	movf	postinc2,w,c
 25365  01313C  0100               	movlb	0	; () banked
 25366  01313E  5981               	subwfb	(??_Button_Poll+3)& (0+255),w,b
 25367  013140  A0D8               	btfss	status,0,c
 25368  013142  0012               	return	
 25369                           
 25370                           ; BSR set to: 0
 25371                           ;Button.c: 77: {
 25372                           ;Button.c: 79: pButton->mState = Pin;
 25373  013144  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
 25374  013148  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 25375  01314C  C083  FFDF         	movff	Button_Poll@Pin,indf2
 25376                           
 25377                           ; BSR set to: 0
 25378                           ;Button.c: 80: pButton->mCount = 0;
 25379  013150  0100               	movlb	0	; () banked
 25380  013152  EE20 F001          	lfsr	2,1
 25381  013156  517B               	movf	Button_Poll@pButton& (0+255),w,b
 25382  013158  26D9               	addwf	fsr2l,f,c
 25383  01315A  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25384  01315C  22DA               	addwfc	fsr2h,f,c
 25385  01315E  0E00               	movlw	0
 25386  013160  6EDF               	movwf	indf2,c
 25387                           
 25388                           ; BSR set to: 0
 25389                           ;Button.c: 83: pButton->mFunction(Pin);
 25390  013162  0100               	movlb	0	; () banked
 25391  013164  EE20 F004          	lfsr	2,4
 25392  013168  517B               	movf	Button_Poll@pButton& (0+255),w,b
 25393  01316A  26D9               	addwf	fsr2l,f,c
 25394  01316C  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25395  01316E  22DA               	addwfc	fsr2h,f,c
 25396  013170  D801               	call	u9878
 25397  013172  0012               	return	
 25398  013174                     u9878:
 25399  013174  0005               	push	
 25400  013176  6EFA               	movwf	pclath,c
 25401  013178  50DE               	movf	postinc2,w,c
 25402  01317A  6EFD               	movwf	tosl,c
 25403  01317C  50DE               	movf	postinc2,w,c
 25404  01317E  6EFE               	movwf	tosh,c
 25405  013180  50DE               	movf	postinc2,w,c
 25406  013182  6EFF               	movwf	tosu,c
 25407  013184  50FA               	movf	pclath,w,c
 25408  013186  0100               	movlb	0	; () banked
 25409  013188  5183               	movf	Button_Poll@Pin& (0+255),w,b
 25410  01318A  0012               	return		;indir
 25411  01318C                     __end_of_Button_Poll:
 25412                           	opt stack 0
 25413                           tosu	equ	0xFFF
 25414                           tosh	equ	0xFFE
 25415                           tosl	equ	0xFFD
 25416                           pclath	equ	0xFFA
 25417                           tblptru	equ	0xFF8
 25418                           tblptrh	equ	0xFF7
 25419                           tblptrl	equ	0xFF6
 25420                           tablat	equ	0xFF5
 25421                           prodh	equ	0xFF4
 25422                           prodl	equ	0xFF3
 25423                           intcon	equ	0xFF2
 25424                           postinc0	equ	0xFEE
 25425                           wreg	equ	0xFE8
 25426                           indf1	equ	0xFE7
 25427                           postdec1	equ	0xFE5
 25428                           fsr1h	equ	0xFE2
 25429                           fsr1l	equ	0xFE1
 25430                           indf2	equ	0xFDF
 25431                           postinc2	equ	0xFDE
 25432                           postdec2	equ	0xFDD
 25433                           plusw2	equ	0xFDB
 25434                           fsr2h	equ	0xFDA
 25435                           fsr2l	equ	0xFD9
 25436                           status	equ	0xFD8
 25437                           
 25438 ;; *************** function _MXK_DIPSwitch *****************
 25439 ;; Defined at:
 25440 ;;		line 24 in file "Library/MXK.c"
 25441 ;; Parameters:    Size  Location     Type
 25442 ;;		None
 25443 ;; Auto vars:     Size  Location     Type
 25444 ;;		None
 25445 ;; Return value:  Size  Location     Type
 25446 ;;                  1    wreg      unsigned char 
 25447 ;; Registers used:
 25448 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25449 ;; Tracked objects:
 25450 ;;		On entry : 0/0
 25451 ;;		On exit  : 0/0
 25452 ;;		Unchanged: 0/0
 25453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25457 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25458 ;;Total ram usage:        0 bytes
 25459 ;; Hardware stack levels used:    1
 25460 ;; Hardware stack levels required when called:    8
 25461 ;; This function calls:
 25462 ;;		_Port_GetQuad
 25463 ;; This function is called by:
 25464 ;;		_FunctInitButton
 25465 ;;		_Button_Poll
 25466 ;;		_getMode
 25467 ;; This function uses a non-reentrant model
 25468 ;;
 25469                           
 25470                           	psect	text128
 25471  01646E                     __ptext128:
 25472                           	opt stack 0
 25473  01646E                     _MXK_DIPSwitch:
 25474                           	opt stack 19
 25475                           
 25476                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
 25477                           
 25478                           ;incstack = 0
 25479  01646E  0E98               	movlw	low _PortD
 25480  016470  0100               	movlb	0	; () banked
 25481  016472  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
 25482  016474  0E03               	movlw	high _PortD
 25483  016476  0100               	movlb	0	; () banked
 25484  016478  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 25485  01647A  0E00               	movlw	0
 25486  01647C  0100               	movlb	0	; () banked
 25487  01647E  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
 25488  016480  EC73  F0AD         	call	_Port_GetQuad
 25489  016484  0012               	return	
 25490  016486                     __end_of_MXK_DIPSwitch:
 25491                           	opt stack 0
 25492                           tosu	equ	0xFFF
 25493                           tosh	equ	0xFFE
 25494                           tosl	equ	0xFFD
 25495                           pclath	equ	0xFFA
 25496                           tblptru	equ	0xFF8
 25497                           tblptrh	equ	0xFF7
 25498                           tblptrl	equ	0xFF6
 25499                           tablat	equ	0xFF5
 25500                           prodh	equ	0xFF4
 25501                           prodl	equ	0xFF3
 25502                           intcon	equ	0xFF2
 25503                           postinc0	equ	0xFEE
 25504                           wreg	equ	0xFE8
 25505                           indf1	equ	0xFE7
 25506                           postdec1	equ	0xFE5
 25507                           fsr1h	equ	0xFE2
 25508                           fsr1l	equ	0xFE1
 25509                           indf2	equ	0xFDF
 25510                           postinc2	equ	0xFDE
 25511                           postdec2	equ	0xFDD
 25512                           plusw2	equ	0xFDB
 25513                           fsr2h	equ	0xFDA
 25514                           fsr2l	equ	0xFD9
 25515                           status	equ	0xFD8
 25516                           
 25517 ;; *************** function _HMI_DIPSwitch *****************
 25518 ;; Defined at:
 25519 ;;		line 47 in file "HMI.c"
 25520 ;; Parameters:    Size  Location     Type
 25521 ;;		None
 25522 ;; Auto vars:     Size  Location     Type
 25523 ;;		None
 25524 ;; Return value:  Size  Location     Type
 25525 ;;                  1    wreg      unsigned char 
 25526 ;; Registers used:
 25527 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25528 ;; Tracked objects:
 25529 ;;		On entry : 0/0
 25530 ;;		On exit  : 0/0
 25531 ;;		Unchanged: 0/0
 25532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25534 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25536 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25537 ;;Total ram usage:        0 bytes
 25538 ;; Hardware stack levels used:    1
 25539 ;; Hardware stack levels required when called:    8
 25540 ;; This function calls:
 25541 ;;		_Port_GetQuad
 25542 ;; This function is called by:
 25543 ;;		_HMI_Init
 25544 ;;		_Button_Poll
 25545 ;;		_getMode
 25546 ;; This function uses a non-reentrant model
 25547 ;;
 25548                           
 25549                           	psect	text129
 25550  016486                     __ptext129:
 25551                           	opt stack 0
 25552  016486                     _HMI_DIPSwitch:
 25553                           	opt stack 19
 25554                           
 25555                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
 25556                           
 25557                           ;incstack = 0
 25558  016486  0E8E               	movlw	low _PortE
 25559  016488  0100               	movlb	0	; () banked
 25560  01648A  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
 25561  01648C  0E03               	movlw	high _PortE
 25562  01648E  0100               	movlb	0	; () banked
 25563  016490  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 25564  016492  0E00               	movlw	0
 25565  016494  0100               	movlb	0	; () banked
 25566  016496  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
 25567  016498  EC73  F0AD         	call	_Port_GetQuad	;wreg free
 25568  01649C  0012               	return	
 25569  01649E                     __end_of_HMI_DIPSwitch:
 25570                           	opt stack 0
 25571                           tosu	equ	0xFFF
 25572                           tosh	equ	0xFFE
 25573                           tosl	equ	0xFFD
 25574                           pclath	equ	0xFFA
 25575                           tblptru	equ	0xFF8
 25576                           tblptrh	equ	0xFF7
 25577                           tblptrl	equ	0xFF6
 25578                           tablat	equ	0xFF5
 25579                           prodh	equ	0xFF4
 25580                           prodl	equ	0xFF3
 25581                           intcon	equ	0xFF2
 25582                           postinc0	equ	0xFEE
 25583                           wreg	equ	0xFE8
 25584                           indf1	equ	0xFE7
 25585                           postdec1	equ	0xFE5
 25586                           fsr1h	equ	0xFE2
 25587                           fsr1l	equ	0xFE1
 25588                           indf2	equ	0xFDF
 25589                           postinc2	equ	0xFDE
 25590                           postdec2	equ	0xFDD
 25591                           plusw2	equ	0xFDB
 25592                           fsr2h	equ	0xFDA
 25593                           fsr2l	equ	0xFD9
 25594                           status	equ	0xFD8
 25595                           
 25596 ;; *************** function _HMI_DownSwitch *****************
 25597 ;; Defined at:
 25598 ;;		line 42 in file "HMI.c"
 25599 ;; Parameters:    Size  Location     Type
 25600 ;;		None
 25601 ;; Auto vars:     Size  Location     Type
 25602 ;;		None
 25603 ;; Return value:  Size  Location     Type
 25604 ;;                  1    wreg      unsigned char 
 25605 ;; Registers used:
 25606 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25607 ;; Tracked objects:
 25608 ;;		On entry : 0/0
 25609 ;;		On exit  : 0/0
 25610 ;;		Unchanged: 0/0
 25611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25615 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25616 ;;Total ram usage:        0 bytes
 25617 ;; Hardware stack levels used:    1
 25618 ;; Hardware stack levels required when called:    8
 25619 ;; This function calls:
 25620 ;;		_Port_GetPin
 25621 ;; This function is called by:
 25622 ;;		_HMI_Init
 25623 ;;		_Button_Poll
 25624 ;;		_getMode
 25625 ;; This function uses a non-reentrant model
 25626 ;;
 25627                           
 25628                           	psect	text130
 25629  01649E                     __ptext130:
 25630                           	opt stack 0
 25631  01649E                     _HMI_DownSwitch:
 25632                           	opt stack 19
 25633                           
 25634                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
 25635                           
 25636                           ;incstack = 0
 25637  01649E  0E8E               	movlw	low _PortE
 25638  0164A0  0100               	movlb	0	; () banked
 25639  0164A2  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 25640  0164A4  0E03               	movlw	high _PortE
 25641  0164A6  0100               	movlb	0	; () banked
 25642  0164A8  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 25643  0164AA  0E06               	movlw	6
 25644  0164AC  0100               	movlb	0	; () banked
 25645  0164AE  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 25646  0164B0  EC6D  F0AE         	call	_Port_GetPin	;wreg free
 25647  0164B4  0012               	return	
 25648  0164B6                     __end_of_HMI_DownSwitch:
 25649                           	opt stack 0
 25650                           tosu	equ	0xFFF
 25651                           tosh	equ	0xFFE
 25652                           tosl	equ	0xFFD
 25653                           pclath	equ	0xFFA
 25654                           tblptru	equ	0xFF8
 25655                           tblptrh	equ	0xFF7
 25656                           tblptrl	equ	0xFF6
 25657                           tablat	equ	0xFF5
 25658                           prodh	equ	0xFF4
 25659                           prodl	equ	0xFF3
 25660                           intcon	equ	0xFF2
 25661                           postinc0	equ	0xFEE
 25662                           wreg	equ	0xFE8
 25663                           indf1	equ	0xFE7
 25664                           postdec1	equ	0xFE5
 25665                           fsr1h	equ	0xFE2
 25666                           fsr1l	equ	0xFE1
 25667                           indf2	equ	0xFDF
 25668                           postinc2	equ	0xFDE
 25669                           postdec2	equ	0xFDD
 25670                           plusw2	equ	0xFDB
 25671                           fsr2h	equ	0xFDA
 25672                           fsr2l	equ	0xFD9
 25673                           status	equ	0xFD8
 25674                           
 25675 ;; *************** function _HMI_UpSwitch *****************
 25676 ;; Defined at:
 25677 ;;		line 37 in file "HMI.c"
 25678 ;; Parameters:    Size  Location     Type
 25679 ;;		None
 25680 ;; Auto vars:     Size  Location     Type
 25681 ;;		None
 25682 ;; Return value:  Size  Location     Type
 25683 ;;                  1    wreg      unsigned char 
 25684 ;; Registers used:
 25685 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25686 ;; Tracked objects:
 25687 ;;		On entry : 0/0
 25688 ;;		On exit  : 0/0
 25689 ;;		Unchanged: 0/0
 25690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25692 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25694 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25695 ;;Total ram usage:        0 bytes
 25696 ;; Hardware stack levels used:    1
 25697 ;; Hardware stack levels required when called:    8
 25698 ;; This function calls:
 25699 ;;		_Port_GetPin
 25700 ;; This function is called by:
 25701 ;;		_HMI_Init
 25702 ;;		_Button_Poll
 25703 ;;		_getMode
 25704 ;; This function uses a non-reentrant model
 25705 ;;
 25706                           
 25707                           	psect	text131
 25708  0164B6                     __ptext131:
 25709                           	opt stack 0
 25710  0164B6                     _HMI_UpSwitch:
 25711                           	opt stack 19
 25712                           
 25713                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
 25714                           
 25715                           ;incstack = 0
 25716  0164B6  0E8E               	movlw	low _PortE
 25717  0164B8  0100               	movlb	0	; () banked
 25718  0164BA  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 25719  0164BC  0E03               	movlw	high _PortE
 25720  0164BE  0100               	movlb	0	; () banked
 25721  0164C0  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 25722  0164C2  0E07               	movlw	7
 25723  0164C4  0100               	movlb	0	; () banked
 25724  0164C6  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 25725  0164C8  EC6D  F0AE         	call	_Port_GetPin	;wreg free
 25726  0164CC  0012               	return	
 25727  0164CE                     __end_of_HMI_UpSwitch:
 25728                           	opt stack 0
 25729                           tosu	equ	0xFFF
 25730                           tosh	equ	0xFFE
 25731                           tosl	equ	0xFFD
 25732                           pclath	equ	0xFFA
 25733                           tblptru	equ	0xFF8
 25734                           tblptrh	equ	0xFF7
 25735                           tblptrl	equ	0xFF6
 25736                           tablat	equ	0xFF5
 25737                           prodh	equ	0xFF4
 25738                           prodl	equ	0xFF3
 25739                           intcon	equ	0xFF2
 25740                           postinc0	equ	0xFEE
 25741                           wreg	equ	0xFE8
 25742                           indf1	equ	0xFE7
 25743                           postdec1	equ	0xFE5
 25744                           fsr1h	equ	0xFE2
 25745                           fsr1l	equ	0xFE1
 25746                           indf2	equ	0xFDF
 25747                           postinc2	equ	0xFDE
 25748                           postdec2	equ	0xFDD
 25749                           plusw2	equ	0xFDB
 25750                           fsr2h	equ	0xFDA
 25751                           fsr2l	equ	0xFD9
 25752                           status	equ	0xFD8
 25753                           
 25754 ;; *************** function _HMI_RightSwitch *****************
 25755 ;; Defined at:
 25756 ;;		line 32 in file "HMI.c"
 25757 ;; Parameters:    Size  Location     Type
 25758 ;;		None
 25759 ;; Auto vars:     Size  Location     Type
 25760 ;;		None
 25761 ;; Return value:  Size  Location     Type
 25762 ;;                  1    wreg      unsigned char 
 25763 ;; Registers used:
 25764 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25765 ;; Tracked objects:
 25766 ;;		On entry : 0/0
 25767 ;;		On exit  : 0/0
 25768 ;;		Unchanged: 0/0
 25769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25773 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25774 ;;Total ram usage:        0 bytes
 25775 ;; Hardware stack levels used:    1
 25776 ;; Hardware stack levels required when called:    8
 25777 ;; This function calls:
 25778 ;;		_Port_GetPin
 25779 ;; This function is called by:
 25780 ;;		_HMI_Init
 25781 ;;		_Button_Poll
 25782 ;;		_getMode
 25783 ;; This function uses a non-reentrant model
 25784 ;;
 25785                           
 25786                           	psect	text132
 25787  0164CE                     __ptext132:
 25788                           	opt stack 0
 25789  0164CE                     _HMI_RightSwitch:
 25790                           	opt stack 19
 25791                           
 25792                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
 25793                           
 25794                           ;incstack = 0
 25795  0164CE  0E8E               	movlw	low _PortE
 25796  0164D0  0100               	movlb	0	; () banked
 25797  0164D2  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 25798  0164D4  0E03               	movlw	high _PortE
 25799  0164D6  0100               	movlb	0	; () banked
 25800  0164D8  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 25801  0164DA  0E04               	movlw	4
 25802  0164DC  0100               	movlb	0	; () banked
 25803  0164DE  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 25804  0164E0  EC6D  F0AE         	call	_Port_GetPin	;wreg free
 25805  0164E4  0012               	return	
 25806  0164E6                     __end_of_HMI_RightSwitch:
 25807                           	opt stack 0
 25808                           tosu	equ	0xFFF
 25809                           tosh	equ	0xFFE
 25810                           tosl	equ	0xFFD
 25811                           pclath	equ	0xFFA
 25812                           tblptru	equ	0xFF8
 25813                           tblptrh	equ	0xFF7
 25814                           tblptrl	equ	0xFF6
 25815                           tablat	equ	0xFF5
 25816                           prodh	equ	0xFF4
 25817                           prodl	equ	0xFF3
 25818                           intcon	equ	0xFF2
 25819                           postinc0	equ	0xFEE
 25820                           wreg	equ	0xFE8
 25821                           indf1	equ	0xFE7
 25822                           postdec1	equ	0xFE5
 25823                           fsr1h	equ	0xFE2
 25824                           fsr1l	equ	0xFE1
 25825                           indf2	equ	0xFDF
 25826                           postinc2	equ	0xFDE
 25827                           postdec2	equ	0xFDD
 25828                           plusw2	equ	0xFDB
 25829                           fsr2h	equ	0xFDA
 25830                           fsr2l	equ	0xFD9
 25831                           status	equ	0xFD8
 25832                           
 25833 ;; *************** function _HMI_LeftSwitch *****************
 25834 ;; Defined at:
 25835 ;;		line 27 in file "HMI.c"
 25836 ;; Parameters:    Size  Location     Type
 25837 ;;		None
 25838 ;; Auto vars:     Size  Location     Type
 25839 ;;		None
 25840 ;; Return value:  Size  Location     Type
 25841 ;;                  1    wreg      unsigned char 
 25842 ;; Registers used:
 25843 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25844 ;; Tracked objects:
 25845 ;;		On entry : 0/0
 25846 ;;		On exit  : 0/0
 25847 ;;		Unchanged: 0/0
 25848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25852 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25853 ;;Total ram usage:        0 bytes
 25854 ;; Hardware stack levels used:    1
 25855 ;; Hardware stack levels required when called:    8
 25856 ;; This function calls:
 25857 ;;		_Port_GetPin
 25858 ;; This function is called by:
 25859 ;;		_HMI_Init
 25860 ;;		_Button_Poll
 25861 ;;		_getMode
 25862 ;; This function uses a non-reentrant model
 25863 ;;
 25864                           
 25865                           	psect	text133
 25866  0164E6                     __ptext133:
 25867                           	opt stack 0
 25868  0164E6                     _HMI_LeftSwitch:
 25869                           	opt stack 19
 25870                           
 25871                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
 25872                           
 25873                           ;incstack = 0
 25874  0164E6  0E8E               	movlw	low _PortE
 25875  0164E8  0100               	movlb	0	; () banked
 25876  0164EA  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 25877  0164EC  0E03               	movlw	high _PortE
 25878  0164EE  0100               	movlb	0	; () banked
 25879  0164F0  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 25880  0164F2  0E05               	movlw	5
 25881  0164F4  0100               	movlb	0	; () banked
 25882  0164F6  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 25883  0164F8  EC6D  F0AE         	call	_Port_GetPin	;wreg free
 25884  0164FC  0012               	return	
 25885  0164FE                     __end_of_HMI_LeftSwitch:
 25886                           	opt stack 0
 25887                           tosu	equ	0xFFF
 25888                           tosh	equ	0xFFE
 25889                           tosl	equ	0xFFD
 25890                           pclath	equ	0xFFA
 25891                           tblptru	equ	0xFF8
 25892                           tblptrh	equ	0xFF7
 25893                           tblptrl	equ	0xFF6
 25894                           tablat	equ	0xFF5
 25895                           prodh	equ	0xFF4
 25896                           prodl	equ	0xFF3
 25897                           intcon	equ	0xFF2
 25898                           postinc0	equ	0xFEE
 25899                           wreg	equ	0xFE8
 25900                           indf1	equ	0xFE7
 25901                           postdec1	equ	0xFE5
 25902                           fsr1h	equ	0xFE2
 25903                           fsr1l	equ	0xFE1
 25904                           indf2	equ	0xFDF
 25905                           postinc2	equ	0xFDE
 25906                           postdec2	equ	0xFDD
 25907                           plusw2	equ	0xFDB
 25908                           fsr2h	equ	0xFDA
 25909                           fsr2l	equ	0xFD9
 25910                           status	equ	0xFD8
 25911                           
 25912 ;; *************** function _MXK_TestButton *****************
 25913 ;; Defined at:
 25914 ;;		line 14 in file "Library/MXK.c"
 25915 ;; Parameters:    Size  Location     Type
 25916 ;;		None
 25917 ;; Auto vars:     Size  Location     Type
 25918 ;;		None
 25919 ;; Return value:  Size  Location     Type
 25920 ;;                  1    wreg      unsigned char 
 25921 ;; Registers used:
 25922 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25923 ;; Tracked objects:
 25924 ;;		On entry : 0/0
 25925 ;;		On exit  : 0/0
 25926 ;;		Unchanged: 0/0
 25927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25931 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25932 ;;Total ram usage:        0 bytes
 25933 ;; Hardware stack levels used:    1
 25934 ;; Hardware stack levels required when called:    8
 25935 ;; This function calls:
 25936 ;;		_Port_GetPin
 25937 ;; This function is called by:
 25938 ;;		_FunctInitButton
 25939 ;;		_Button_Poll
 25940 ;;		_getMode
 25941 ;; This function uses a non-reentrant model
 25942 ;;
 25943                           
 25944                           	psect	text134
 25945  0164FE                     __ptext134:
 25946                           	opt stack 0
 25947  0164FE                     _MXK_TestButton:
 25948                           	opt stack 19
 25949                           
 25950                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
 25951                           
 25952                           ;incstack = 0
 25953  0164FE  0EA2               	movlw	low _PortB
 25954  016500  0100               	movlb	0	; () banked
 25955  016502  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 25956  016504  0E03               	movlw	high _PortB
 25957  016506  0100               	movlb	0	; () banked
 25958  016508  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 25959  01650A  0E04               	movlw	4
 25960  01650C  0100               	movlb	0	; () banked
 25961  01650E  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 25962  016510  EC6D  F0AE         	call	_Port_GetPin	;wreg free
 25963  016514  0012               	return	
 25964  016516                     __end_of_MXK_TestButton:
 25965                           	opt stack 0
 25966                           tosu	equ	0xFFF
 25967                           tosh	equ	0xFFE
 25968                           tosl	equ	0xFFD
 25969                           pclath	equ	0xFFA
 25970                           tblptru	equ	0xFF8
 25971                           tblptrh	equ	0xFF7
 25972                           tblptrl	equ	0xFF6
 25973                           tablat	equ	0xFF5
 25974                           prodh	equ	0xFF4
 25975                           prodl	equ	0xFF3
 25976                           intcon	equ	0xFF2
 25977                           postinc0	equ	0xFEE
 25978                           wreg	equ	0xFE8
 25979                           indf1	equ	0xFE7
 25980                           postdec1	equ	0xFE5
 25981                           fsr1h	equ	0xFE2
 25982                           fsr1l	equ	0xFE1
 25983                           indf2	equ	0xFDF
 25984                           postinc2	equ	0xFDE
 25985                           postdec2	equ	0xFDD
 25986                           plusw2	equ	0xFDB
 25987                           fsr2h	equ	0xFDA
 25988                           fsr2l	equ	0xFD9
 25989                           status	equ	0xFD8
 25990                           
 25991 ;; *************** function _Port_GetQuad *****************
 25992 ;; Defined at:
 25993 ;;		line 498 in file "Library/Port.c"
 25994 ;; Parameters:    Size  Location     Type
 25995 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 25996 ;;		 -> PortE(10), PortD(10), 
 25997 ;;  pQuad           1    2[BANK0 ] enum E6776
 25998 ;; Auto vars:     Size  Location     Type
 25999 ;;  Output          1    5[BANK0 ] unsigned char 
 26000 ;; Return value:  Size  Location     Type
 26001 ;;                  1    wreg      unsigned char 
 26002 ;; Registers used:
 26003 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 26004 ;; Tracked objects:
 26005 ;;		On entry : 0/0
 26006 ;;		On exit  : 0/0
 26007 ;;		Unchanged: 0/0
 26008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26009 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26010 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26011 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26012 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26013 ;;Total ram usage:        6 bytes
 26014 ;; Hardware stack levels used:    1
 26015 ;; Hardware stack levels required when called:    7
 26016 ;; This function calls:
 26017 ;;		Nothing
 26018 ;; This function is called by:
 26019 ;;		_HMI_DIPSwitch
 26020 ;;		_MXK_DIPSwitch
 26021 ;;		_Port_ToggleQuad
 26022 ;; This function uses a non-reentrant model
 26023 ;;
 26024                           
 26025                           	psect	text135
 26026  015AE6                     __ptext135:
 26027                           	opt stack 0
 26028  015AE6                     _Port_GetQuad:
 26029                           	opt stack 19
 26030                           
 26031                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
 26032                           
 26033                           ;incstack = 0
 26034  015AE6  0100               	movlb	0	; () banked
 26035  015AE8  EE20 F006          	lfsr	2,6
 26036  015AEC  5160               	movf	Port_GetQuad@pInput& (0+255),w,b
 26037  015AEE  26D9               	addwf	fsr2l,f,c
 26038  015AF0  5161               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
 26039  015AF2  22DA               	addwfc	fsr2h,f,c
 26040  015AF4  CFDE F063          	movff	postinc2,??_Port_GetQuad
 26041  015AF8  CFDD F064          	movff	postdec2,??_Port_GetQuad+1
 26042  015AFC  C063  FFD9         	movff	??_Port_GetQuad,fsr2l
 26043  015B00  C064  FFDA         	movff	??_Port_GetQuad+1,fsr2h
 26044  015B04  50DF               	movf	indf2,w,c
 26045  015B06  0100               	movlb	0	; () banked
 26046  015B08  6F65               	movwf	Port_GetQuad@Output& (0+255),b
 26047                           
 26048                           ; BSR set to: 0
 26049                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
 26050  015B0A  0100               	movlb	0	; () banked
 26051  015B0C  5162               	movf	Port_GetQuad@pQuad& (0+255),w,b
 26052  015B0E  0D04               	mullw	4
 26053  015B10  28F3               	incf	prodl,w,c
 26054  015B12  0100               	movlb	0	; () banked
 26055  015B14  6F63               	movwf	??_Port_GetQuad& (0+255),b
 26056  015B16  D003               	goto	u9380
 26057  015B18                     u9385:
 26058  015B18  0100               	movlb	0	; () banked
 26059  015B1A  90D8               	bcf	status,0,c
 26060  015B1C  3365               	rrcf	Port_GetQuad@Output& (0+255),f,b
 26061  015B1E                     u9380:
 26062  015B1E  0100               	movlb	0	; () banked
 26063  015B20  2F63               	decfsz	??_Port_GetQuad& (0+255),f,b
 26064  015B22  D7FA               	goto	u9385
 26065                           
 26066                           ;Port.c: 502: Output &= 0xF;
 26067  015B24  0E0F               	movlw	15
 26068  015B26  0100               	movlb	0	; () banked
 26069  015B28  1765               	andwf	Port_GetQuad@Output& (0+255),f,b
 26070                           
 26071                           ; BSR set to: 0
 26072                           ;Port.c: 503: return Output;
 26073  015B2A  0100               	movlb	0	; () banked
 26074  015B2C  5165               	movf	Port_GetQuad@Output& (0+255),w,b
 26075  015B2E  0012               	return	
 26076  015B30                     __end_of_Port_GetQuad:
 26077                           	opt stack 0
 26078                           tosu	equ	0xFFF
 26079                           tosh	equ	0xFFE
 26080                           tosl	equ	0xFFD
 26081                           pclath	equ	0xFFA
 26082                           tblptru	equ	0xFF8
 26083                           tblptrh	equ	0xFF7
 26084                           tblptrl	equ	0xFF6
 26085                           tablat	equ	0xFF5
 26086                           prodh	equ	0xFF4
 26087                           prodl	equ	0xFF3
 26088                           intcon	equ	0xFF2
 26089                           postinc0	equ	0xFEE
 26090                           wreg	equ	0xFE8
 26091                           indf1	equ	0xFE7
 26092                           postdec1	equ	0xFE5
 26093                           fsr1h	equ	0xFE2
 26094                           fsr1l	equ	0xFE1
 26095                           indf2	equ	0xFDF
 26096                           postinc2	equ	0xFDE
 26097                           postdec2	equ	0xFDD
 26098                           plusw2	equ	0xFDB
 26099                           fsr2h	equ	0xFDA
 26100                           fsr2l	equ	0xFD9
 26101                           status	equ	0xFD8
 26102                           
 26103 ;; *************** function _Event_DIPSwitch *****************
 26104 ;; Defined at:
 26105 ;;		line 22 in file "Events.c"
 26106 ;; Parameters:    Size  Location     Type
 26107 ;;  pState          1    wreg     unsigned char 
 26108 ;; Auto vars:     Size  Location     Type
 26109 ;;  pState          1   25[BANK0 ] unsigned char 
 26110 ;;  Bar             1   26[BANK0 ] unsigned char 
 26111 ;; Return value:  Size  Location     Type
 26112 ;;                  1    wreg      void 
 26113 ;; Registers used:
 26114 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26115 ;; Tracked objects:
 26116 ;;		On entry : 0/0
 26117 ;;		On exit  : 0/0
 26118 ;;		Unchanged: 0/0
 26119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26121 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26123 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26124 ;;Total ram usage:        2 bytes
 26125 ;; Hardware stack levels used:    1
 26126 ;; Hardware stack levels required when called:   13
 26127 ;; This function calls:
 26128 ;;		_HMI_GetBar
 26129 ;;		_HMI_SetBar
 26130 ;;		_LED_Toggle
 26131 ;; This function is called by:
 26132 ;;		_FunctInitButton
 26133 ;;		_Button_Poll
 26134 ;; This function uses a non-reentrant model
 26135 ;;
 26136                           
 26137                           	psect	text136
 26138  016130                     __ptext136:
 26139                           	opt stack 0
 26140  016130                     _Event_DIPSwitch:
 26141                           	opt stack 14
 26142                           
 26143                           ; BSR set to: 0
 26144                           ;incstack = 0
 26145                           ;Event_DIPSwitch@pState stored from wreg
 26146  016130  0100               	movlb	0	; () banked
 26147  016132  6F79               	movwf	Event_DIPSwitch@pState& (0+255),b
 26148                           
 26149                           ;Events.c: 24: UINT8 Bar = HMI_GetBar();
 26150  016134  EC24  F0B3         	call	_HMI_GetBar	;wreg free
 26151  016138  0100               	movlb	0	; () banked
 26152  01613A  6F7A               	movwf	Event_DIPSwitch@Bar& (0+255),b
 26153                           
 26154                           ; BSR set to: 0
 26155                           ;Events.c: 25: Bar &= 0x0F;
 26156  01613C  0E0F               	movlw	15
 26157  01613E  0100               	movlb	0	; () banked
 26158  016140  177A               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
 26159                           
 26160                           ; BSR set to: 0
 26161                           ;Events.c: 26: pState <<= 4;
 26162  016142  0100               	movlb	0	; () banked
 26163  016144  3B79               	swapf	Event_DIPSwitch@pState& (0+255),f,b
 26164  016146  0EF0               	movlw	240
 26165  016148  1779               	andwf	Event_DIPSwitch@pState& (0+255),f,b
 26166                           
 26167                           ; BSR set to: 0
 26168                           ;Events.c: 29: HMI_SetBar(pState | Bar);
 26169  01614A  0100               	movlb	0	; () banked
 26170  01614C  5179               	movf	Event_DIPSwitch@pState& (0+255),w,b
 26171  01614E  0100               	movlb	0	; () banked
 26172  016150  117A               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
 26173  016152  EC06  F0B3         	call	_HMI_SetBar
 26174                           
 26175                           ;Events.c: 32: LED_Toggle(eLED1);
 26176  016156  0E00               	movlw	0
 26177  016158  ECE0  F0AD         	call	_LED_Toggle
 26178  01615C  0012               	return		;funcret
 26179  01615E                     __end_of_Event_DIPSwitch:
 26180                           	opt stack 0
 26181                           tosu	equ	0xFFF
 26182                           tosh	equ	0xFFE
 26183                           tosl	equ	0xFFD
 26184                           pclath	equ	0xFFA
 26185                           tblptru	equ	0xFF8
 26186                           tblptrh	equ	0xFF7
 26187                           tblptrl	equ	0xFF6
 26188                           tablat	equ	0xFF5
 26189                           prodh	equ	0xFF4
 26190                           prodl	equ	0xFF3
 26191                           intcon	equ	0xFF2
 26192                           postinc0	equ	0xFEE
 26193                           wreg	equ	0xFE8
 26194                           indf1	equ	0xFE7
 26195                           postdec1	equ	0xFE5
 26196                           fsr1h	equ	0xFE2
 26197                           fsr1l	equ	0xFE1
 26198                           indf2	equ	0xFDF
 26199                           postinc2	equ	0xFDE
 26200                           postdec2	equ	0xFDD
 26201                           plusw2	equ	0xFDB
 26202                           fsr2h	equ	0xFDA
 26203                           fsr2l	equ	0xFD9
 26204                           status	equ	0xFD8
 26205                           
 26206 ;; *************** function _Event_NULL *****************
 26207 ;; Defined at:
 26208 ;;		line 9 in file "Events.c"
 26209 ;; Parameters:    Size  Location     Type
 26210 ;;  pState          1    wreg     unsigned char 
 26211 ;; Auto vars:     Size  Location     Type
 26212 ;;  pState          1    0[COMRAM] unsigned char 
 26213 ;; Return value:  Size  Location     Type
 26214 ;;                  1    wreg      void 
 26215 ;; Registers used:
 26216 ;;		wreg
 26217 ;; Tracked objects:
 26218 ;;		On entry : 0/0
 26219 ;;		On exit  : 0/0
 26220 ;;		Unchanged: 0/0
 26221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26225 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26226 ;;Total ram usage:        0 bytes
 26227 ;; Hardware stack levels used:    1
 26228 ;; Hardware stack levels required when called:    7
 26229 ;; This function calls:
 26230 ;;		Nothing
 26231 ;; This function is called by:
 26232 ;;		_HMI_Init
 26233 ;;		_Button_Poll
 26234 ;; This function uses a non-reentrant model
 26235 ;;
 26236                           
 26237                           	psect	text137
 26238  001404                     __ptext137:
 26239                           	opt stack 0
 26240  001404                     _Event_NULL:
 26241                           	opt stack 20
 26242                           
 26243                           ;incstack = 0
 26244  001404  0012               	return		;funcret
 26245  001406                     __end_of_Event_NULL:
 26246                           	opt stack 0
 26247                           tosu	equ	0xFFF
 26248                           tosh	equ	0xFFE
 26249                           tosl	equ	0xFFD
 26250                           pclath	equ	0xFFA
 26251                           tblptru	equ	0xFF8
 26252                           tblptrh	equ	0xFF7
 26253                           tblptrl	equ	0xFF6
 26254                           tablat	equ	0xFF5
 26255                           prodh	equ	0xFF4
 26256                           prodl	equ	0xFF3
 26257                           intcon	equ	0xFF2
 26258                           postinc0	equ	0xFEE
 26259                           wreg	equ	0xFE8
 26260                           indf1	equ	0xFE7
 26261                           postdec1	equ	0xFE5
 26262                           fsr1h	equ	0xFE2
 26263                           fsr1l	equ	0xFE1
 26264                           indf2	equ	0xFDF
 26265                           postinc2	equ	0xFDE
 26266                           postdec2	equ	0xFDD
 26267                           plusw2	equ	0xFDB
 26268                           fsr2h	equ	0xFDA
 26269                           fsr2l	equ	0xFD9
 26270                           status	equ	0xFD8
 26271                           
 26272 ;; *************** function _Event_TestButton *****************
 26273 ;; Defined at:
 26274 ;;		line 52 in file "Events.c"
 26275 ;; Parameters:    Size  Location     Type
 26276 ;;  pState          1    wreg     unsigned char 
 26277 ;; Auto vars:     Size  Location     Type
 26278 ;;  pState          1   25[BANK0 ] unsigned char 
 26279 ;; Return value:  Size  Location     Type
 26280 ;;                  1    wreg      void 
 26281 ;; Registers used:
 26282 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26283 ;; Tracked objects:
 26284 ;;		On entry : 0/0
 26285 ;;		On exit  : 0/0
 26286 ;;		Unchanged: 0/0
 26287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26289 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26291 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26292 ;;Total ram usage:        1 bytes
 26293 ;; Hardware stack levels used:    1
 26294 ;; Hardware stack levels required when called:   13
 26295 ;; This function calls:
 26296 ;;		_HMI_SetButton
 26297 ;;		_HMI_SetNumber
 26298 ;;		_LED_Toggle
 26299 ;; This function is called by:
 26300 ;;		_FunctInitButton
 26301 ;;		_Button_Poll
 26302 ;; This function uses a non-reentrant model
 26303 ;;
 26304                           
 26305                           	psect	text138
 26306  015F1E                     __ptext138:
 26307                           	opt stack 0
 26308  015F1E                     _Event_TestButton:
 26309                           	opt stack 14
 26310                           
 26311                           ;incstack = 0
 26312                           ;Event_TestButton@pState stored from wreg
 26313  015F1E  0100               	movlb	0	; () banked
 26314  015F20  6F79               	movwf	Event_TestButton@pState& (0+255),b
 26315                           
 26316                           ;Events.c: 56: static UINT8 j = 0;
 26317                           ;Events.c: 60: if (pState == 0)
 26318  015F22  0100               	movlb	0	; () banked
 26319  015F24  5179               	movf	Event_TestButton@pState& (0+255),w,b
 26320  015F26  0100               	movlb	0	; () banked
 26321  015F28  A4D8               	btfss	status,2,c
 26322  015F2A  D013               	goto	l1873
 26323                           
 26324                           ; BSR set to: 0
 26325                           ;Events.c: 61: {
 26326                           ;Events.c: 62: j++;
 26327  015F2C  0100               	movlb	0	; () banked
 26328  015F2E  2BE2               	incf	Event_TestButton@j& (0+255),f,b
 26329                           
 26330                           ; BSR set to: 0
 26331                           ;Events.c: 63: val += j;
 26332  015F30  0100               	movlb	0	; () banked
 26333  015F32  51E2               	movf	Event_TestButton@j& (0+255),w,b
 26334  015F34  0100               	movlb	0	; () banked
 26335  015F36  27D6               	addwf	_val& (0+255),f,b
 26336  015F38  0E00               	movlw	0
 26337  015F3A  23D7               	addwfc	(_val+1)& (0+255),f,b
 26338                           
 26339                           ; BSR set to: 0
 26340                           ;Events.c: 64: HMI_SetNumber( val );
 26341  015F3C  C0D6  F076         	movff	_val,HMI_SetNumber@pInput
 26342  015F40  C0D7  F077         	movff	_val+1,HMI_SetNumber@pInput+1
 26343  015F44  ECF0  F0B0         	call	_HMI_SetNumber	;wreg free
 26344                           
 26345                           ;Events.c: 67: HMI_SetButton( j & 3 );
 26346  015F48  0100               	movlb	0	; () banked
 26347  015F4A  51E2               	movf	Event_TestButton@j& (0+255),w,b
 26348  015F4C  0B03               	andlw	3
 26349  015F4E  EC28  F0A6         	call	_HMI_SetButton
 26350  015F52                     l1873:
 26351                           
 26352                           ;Events.c: 68: }
 26353                           ;Events.c: 72: LED_Toggle(eLED1);
 26354  015F52  0E00               	movlw	0
 26355  015F54  ECE0  F0AD         	call	_LED_Toggle
 26356  015F58  0012               	return		;funcret
 26357  015F5A                     __end_of_Event_TestButton:
 26358                           	opt stack 0
 26359                           tosu	equ	0xFFF
 26360                           tosh	equ	0xFFE
 26361                           tosl	equ	0xFFD
 26362                           pclath	equ	0xFFA
 26363                           tblptru	equ	0xFF8
 26364                           tblptrh	equ	0xFF7
 26365                           tblptrl	equ	0xFF6
 26366                           tablat	equ	0xFF5
 26367                           prodh	equ	0xFF4
 26368                           prodl	equ	0xFF3
 26369                           intcon	equ	0xFF2
 26370                           postinc0	equ	0xFEE
 26371                           wreg	equ	0xFE8
 26372                           indf1	equ	0xFE7
 26373                           postdec1	equ	0xFE5
 26374                           fsr1h	equ	0xFE2
 26375                           fsr1l	equ	0xFE1
 26376                           indf2	equ	0xFDF
 26377                           postinc2	equ	0xFDE
 26378                           postdec2	equ	0xFDD
 26379                           plusw2	equ	0xFDB
 26380                           fsr2h	equ	0xFDA
 26381                           fsr2l	equ	0xFD9
 26382                           status	equ	0xFD8
 26383                           
 26384 ;; *************** function _HMI_SetNumber *****************
 26385 ;; Defined at:
 26386 ;;		line 221 in file "HMI.c"
 26387 ;; Parameters:    Size  Location     Type
 26388 ;;  pInput          2   22[BANK0 ] int 
 26389 ;; Auto vars:     Size  Location     Type
 26390 ;;		None
 26391 ;; Return value:  Size  Location     Type
 26392 ;;                  1    wreg      void 
 26393 ;; Registers used:
 26394 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 26395 ;; Tracked objects:
 26396 ;;		On entry : 0/0
 26397 ;;		On exit  : 0/0
 26398 ;;		Unchanged: 0/0
 26399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26400 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26403 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26404 ;;Total ram usage:        2 bytes
 26405 ;; Hardware stack levels used:    1
 26406 ;; Hardware stack levels required when called:    9
 26407 ;; This function calls:
 26408 ;;		_HMI_SetSegments
 26409 ;;		_itos
 26410 ;; This function is called by:
 26411 ;;		_Event_TestButton
 26412 ;;		_mode1
 26413 ;;		_mode4
 26414 ;;		_Event_HMI_UpButton
 26415 ;;		_Event_HMI_DownButton
 26416 ;; This function uses a non-reentrant model
 26417 ;;
 26418                           
 26419                           	psect	text139
 26420  0161E0                     __ptext139:
 26421                           	opt stack 0
 26422  0161E0                     _HMI_SetNumber:
 26423                           	opt stack 20
 26424                           
 26425                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
 26426                           
 26427                           ;incstack = 0
 26428  0161E0  C076  F06C         	movff	HMI_SetNumber@pInput,itos@input
 26429  0161E4  C077  F06D         	movff	HMI_SetNumber@pInput+1,itos@input+1
 26430  0161E8  0E20               	movlw	low _HMIBoard
 26431  0161EA  0100               	movlb	0	; () banked
 26432  0161EC  6F6E               	movwf	itos@destination& (0+255),b
 26433  0161EE  0E03               	movlw	high _HMIBoard
 26434  0161F0  0100               	movlb	0	; () banked
 26435  0161F2  6F6F               	movwf	(itos@destination+1)& (0+255),b
 26436  0161F4  ECB0  F09D         	call	_itos	;wreg free
 26437                           
 26438                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
 26439  0161F8  0E20               	movlw	low _HMIBoard
 26440  0161FA  0100               	movlb	0	; () banked
 26441  0161FC  6F61               	movwf	HMI_SetSegments@pString& (0+255),b
 26442  0161FE  0E03               	movlw	high _HMIBoard
 26443  016200  0100               	movlb	0	; () banked
 26444  016202  6F62               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
 26445  016204  EC39  F0A1         	call	_HMI_SetSegments	;wreg free
 26446  016208  0012               	return		;funcret
 26447  01620A                     __end_of_HMI_SetNumber:
 26448                           	opt stack 0
 26449                           tosu	equ	0xFFF
 26450                           tosh	equ	0xFFE
 26451                           tosl	equ	0xFFD
 26452                           pclath	equ	0xFFA
 26453                           tblptru	equ	0xFF8
 26454                           tblptrh	equ	0xFF7
 26455                           tblptrl	equ	0xFF6
 26456                           tablat	equ	0xFF5
 26457                           prodh	equ	0xFF4
 26458                           prodl	equ	0xFF3
 26459                           intcon	equ	0xFF2
 26460                           postinc0	equ	0xFEE
 26461                           wreg	equ	0xFE8
 26462                           indf1	equ	0xFE7
 26463                           postdec1	equ	0xFE5
 26464                           fsr1h	equ	0xFE2
 26465                           fsr1l	equ	0xFE1
 26466                           indf2	equ	0xFDF
 26467                           postinc2	equ	0xFDE
 26468                           postdec2	equ	0xFDD
 26469                           plusw2	equ	0xFDB
 26470                           fsr2h	equ	0xFDA
 26471                           fsr2l	equ	0xFD9
 26472                           status	equ	0xFD8
 26473                           
 26474 ;; *************** function _itos *****************
 26475 ;; Defined at:
 26476 ;;		line 369 in file "Library/Types.c"
 26477 ;; Parameters:    Size  Location     Type
 26478 ;;  input           2   12[BANK0 ] unsigned short 
 26479 ;;  destination     2   14[BANK0 ] PTR unsigned char 
 26480 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 26481 ;; Auto vars:     Size  Location     Type
 26482 ;;  Out             2   20[BANK0 ] unsigned short 
 26483 ;;  Length          2   18[BANK0 ] unsigned short 
 26484 ;;  Data            2   16[BANK0 ] PTR unsigned char 
 26485 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 26486 ;; Return value:  Size  Location     Type
 26487 ;;                  1    wreg      void 
 26488 ;; Registers used:
 26489 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 26490 ;; Tracked objects:
 26491 ;;		On entry : 0/0
 26492 ;;		On exit  : 0/0
 26493 ;;		Unchanged: 0/0
 26494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26495 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26496 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26498 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26499 ;;Total ram usage:       10 bytes
 26500 ;; Hardware stack levels used:    1
 26501 ;; Hardware stack levels required when called:    8
 26502 ;; This function calls:
 26503 ;;		___lwdiv
 26504 ;;		___lwmod
 26505 ;;		_reverse
 26506 ;; This function is called by:
 26507 ;;		_HMI_SetNumber
 26508 ;; This function uses a non-reentrant model
 26509 ;;
 26510                           
 26511                           	psect	text140
 26512  013B60                     __ptext140:
 26513                           	opt stack 0
 26514  013B60                     _itos:
 26515                           	opt stack 20
 26516                           
 26517                           ;Types.c: 371: UINT16 Out = input;
 26518                           
 26519                           ;incstack = 0
 26520  013B60  C06C  F074         	movff	itos@input,itos@Out
 26521  013B64  C06D  F075         	movff	itos@input+1,itos@Out+1
 26522                           
 26523                           ;Types.c: 372: UINT16 Length = 0;
 26524  013B68  0E00               	movlw	0
 26525  013B6A  0100               	movlb	0	; () banked
 26526  013B6C  6F73               	movwf	(itos@Length+1)& (0+255),b
 26527  013B6E  0E00               	movlw	0
 26528  013B70  6F72               	movwf	itos@Length& (0+255),b
 26529                           
 26530                           ; BSR set to: 0
 26531                           ;Types.c: 373: char *Data = destination;
 26532  013B72  C06E  F070         	movff	itos@destination,itos@Data
 26533  013B76  C06F  F071         	movff	itos@destination+1,itos@Data+1
 26534                           
 26535                           ; BSR set to: 0
 26536                           ;Types.c: 374: if(Out == 0)
 26537  013B7A  0100               	movlb	0	; () banked
 26538  013B7C  5174               	movf	itos@Out& (0+255),w,b
 26539  013B7E  0100               	movlb	0	; () banked
 26540  013B80  1175               	iorwf	(itos@Out+1)& (0+255),w,b
 26541  013B82  A4D8               	btfss	status,2,c
 26542  013B84  D034               	goto	l929
 26543                           
 26544                           ; BSR set to: 0
 26545                           ;Types.c: 375: {
 26546                           ;Types.c: 376: Data[0] = (UINT16)'0';
 26547  013B86  C070  FFD9         	movff	itos@Data,fsr2l
 26548  013B8A  C071  FFDA         	movff	itos@Data+1,fsr2h
 26549  013B8E  0E30               	movlw	48
 26550  013B90  6EDF               	movwf	indf2,c
 26551                           
 26552                           ; BSR set to: 0
 26553                           ;Types.c: 377: Length = 1;
 26554  013B92  0E00               	movlw	0
 26555  013B94  0100               	movlb	0	; () banked
 26556  013B96  6F73               	movwf	(itos@Length+1)& (0+255),b
 26557  013B98  0E01               	movlw	1
 26558  013B9A  6F72               	movwf	itos@Length& (0+255),b
 26559                           
 26560                           ;Types.c: 378: }
 26561  013B9C  D040               	goto	l928
 26562  013B9E                     
 26563                           ; BSR set to: 0
 26564                           ;Types.c: 382: {
 26565                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
 26566                           
 26567                           ; BSR set to: 0
 26568  013B9E  C074  F067         	movff	itos@Out,___lwmod@dividend
 26569  013BA2  C075  F068         	movff	itos@Out+1,___lwmod@dividend+1
 26570  013BA6  0E00               	movlw	0
 26571  013BA8  0100               	movlb	0	; () banked
 26572  013BAA  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
 26573  013BAC  0E0A               	movlw	10
 26574  013BAE  6F69               	movwf	___lwmod@divisor& (0+255),b
 26575  013BB0  ECF0  F0AB         	call	___lwmod	;wreg free
 26576  013BB4  0100               	movlb	0	; () banked
 26577  013BB6  5167               	movf	?___lwmod& (0+255),w,b
 26578  013BB8  0F30               	addlw	48
 26579  013BBA  C070  FFD9         	movff	itos@Data,fsr2l
 26580  013BBE  C071  FFDA         	movff	itos@Data+1,fsr2h
 26581  013BC2  6EDF               	movwf	indf2,c
 26582                           
 26583                           ; BSR set to: 0
 26584                           ;Types.c: 384: Out /= 10;
 26585  013BC4  C074  F060         	movff	itos@Out,___lwdiv@dividend
 26586  013BC8  C075  F061         	movff	itos@Out+1,___lwdiv@dividend+1
 26587  013BCC  0E00               	movlw	0
 26588  013BCE  0100               	movlb	0	; () banked
 26589  013BD0  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
 26590  013BD2  0E0A               	movlw	10
 26591  013BD4  6F62               	movwf	___lwdiv@divisor& (0+255),b
 26592  013BD6  EC85  F0A8         	call	___lwdiv	;wreg free
 26593  013BDA  C060  F074         	movff	?___lwdiv,itos@Out
 26594  013BDE  C061  F075         	movff	?___lwdiv+1,itos@Out+1
 26595                           
 26596                           ;Types.c: 385: Length ++;
 26597  013BE2  0100               	movlb	0	; () banked
 26598  013BE4  4B72               	infsnz	itos@Length& (0+255),f,b
 26599  013BE6  2B73               	incf	(itos@Length+1)& (0+255),f,b
 26600                           
 26601                           ; BSR set to: 0
 26602                           ;Types.c: 386: Data++;
 26603  013BE8  0100               	movlb	0	; () banked
 26604  013BEA  4B70               	infsnz	itos@Data& (0+255),f,b
 26605  013BEC  2B71               	incf	(itos@Data+1)& (0+255),f,b
 26606  013BEE                     l929:
 26607                           
 26608                           ; BSR set to: 0
 26609                           
 26610                           ; BSR set to: 0
 26611  013BEE  0100               	movlb	0	; () banked
 26612  013BF0  5174               	movf	itos@Out& (0+255),w,b
 26613  013BF2  0100               	movlb	0	; () banked
 26614  013BF4  1175               	iorwf	(itos@Out+1)& (0+255),w,b
 26615  013BF6  B4D8               	btfsc	status,2,c
 26616  013BF8  D008               	goto	u9050
 26617                           
 26618                           ; BSR set to: 0
 26619  013BFA  0100               	movlb	0	; () banked
 26620  013BFC  5173               	movf	(itos@Length+1)& (0+255),w,b
 26621  013BFE  E105               	bnz	l12346
 26622  013C00  0E06               	movlw	6
 26623  013C02  0100               	movlb	0	; () banked
 26624  013C04  5D72               	subwf	itos@Length& (0+255),w,b
 26625  013C06  A0D8               	btfss	status,0,c
 26626  013C08  D7CA               	goto	l930
 26627  013C0A                     u9050:
 26628  013C0A                     l12346:
 26629                           
 26630                           ; BSR set to: 0
 26631                           ;Types.c: 387: }
 26632                           ;Types.c: 388: reverse(destination, Length);
 26633  013C0A  C06E  F060         	movff	itos@destination,reverse@input
 26634  013C0E  C06F  F061         	movff	itos@destination+1,reverse@input+1
 26635  013C12  C072  F062         	movff	itos@Length,reverse@length
 26636  013C16  C073  F063         	movff	itos@Length+1,reverse@length+1
 26637  013C1A  EC52  F0AA         	call	_reverse	;wreg free
 26638  013C1E                     l928:
 26639                           
 26640                           ;Types.c: 389: }
 26641                           ;Types.c: 390: destination[Length] = '\0';
 26642  013C1E  0100               	movlb	0	; () banked
 26643  013C20  5172               	movf	itos@Length& (0+255),w,b
 26644  013C22  0100               	movlb	0	; () banked
 26645  013C24  256E               	addwf	itos@destination& (0+255),w,b
 26646  013C26  6ED9               	movwf	fsr2l,c
 26647  013C28  0100               	movlb	0	; () banked
 26648  013C2A  5173               	movf	(itos@Length+1)& (0+255),w,b
 26649  013C2C  0100               	movlb	0	; () banked
 26650  013C2E  216F               	addwfc	(itos@destination+1)& (0+255),w,b
 26651  013C30  6EDA               	movwf	fsr2h,c
 26652  013C32  0E00               	movlw	0
 26653  013C34  6EDF               	movwf	indf2,c
 26654                           
 26655                           ; BSR set to: 0
 26656  013C36  0012               	return		;funcret
 26657  013C38                     __end_of_itos:
 26658                           	opt stack 0
 26659                           tosu	equ	0xFFF
 26660                           tosh	equ	0xFFE
 26661                           tosl	equ	0xFFD
 26662                           pclath	equ	0xFFA
 26663                           tblptru	equ	0xFF8
 26664                           tblptrh	equ	0xFF7
 26665                           tblptrl	equ	0xFF6
 26666                           tablat	equ	0xFF5
 26667                           prodh	equ	0xFF4
 26668                           prodl	equ	0xFF3
 26669                           intcon	equ	0xFF2
 26670                           postinc0	equ	0xFEE
 26671                           wreg	equ	0xFE8
 26672                           indf1	equ	0xFE7
 26673                           postdec1	equ	0xFE5
 26674                           fsr1h	equ	0xFE2
 26675                           fsr1l	equ	0xFE1
 26676                           indf2	equ	0xFDF
 26677                           postinc2	equ	0xFDE
 26678                           postdec2	equ	0xFDD
 26679                           plusw2	equ	0xFDB
 26680                           fsr2h	equ	0xFDA
 26681                           fsr2l	equ	0xFD9
 26682                           status	equ	0xFD8
 26683                           
 26684 ;; *************** function _reverse *****************
 26685 ;; Defined at:
 26686 ;;		line 357 in file "Library/Types.c"
 26687 ;; Parameters:    Size  Location     Type
 26688 ;;  input           2    0[BANK0 ] PTR unsigned char 
 26689 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 26690 ;;  length          2    2[BANK0 ] unsigned short 
 26691 ;; Auto vars:     Size  Location     Type
 26692 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
 26693 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 26694 ;;  tempVar         1    4[BANK0 ] unsigned char 
 26695 ;; Return value:  Size  Location     Type
 26696 ;;                  1    wreg      void 
 26697 ;; Registers used:
 26698 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 26699 ;; Tracked objects:
 26700 ;;		On entry : 0/0
 26701 ;;		On exit  : 0/0
 26702 ;;		Unchanged: 0/0
 26703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26704 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26705 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26707 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26708 ;;Total ram usage:        7 bytes
 26709 ;; Hardware stack levels used:    1
 26710 ;; Hardware stack levels required when called:    7
 26711 ;; This function calls:
 26712 ;;		Nothing
 26713 ;; This function is called by:
 26714 ;;		_itos
 26715 ;; This function uses a non-reentrant model
 26716 ;;
 26717                           
 26718                           	psect	text141
 26719  0154A4                     __ptext141:
 26720                           	opt stack 0
 26721  0154A4                     _reverse:
 26722                           	opt stack 20
 26723                           
 26724                           ;Types.c: 359: char tempVar,
 26725                           ;Types.c: 360: *iterator = input + length;
 26726                           
 26727                           ; BSR set to: 0
 26728                           ;incstack = 0
 26729  0154A4  0100               	movlb	0	; () banked
 26730  0154A6  5162               	movf	reverse@length& (0+255),w,b
 26731  0154A8  0100               	movlb	0	; () banked
 26732  0154AA  2560               	addwf	reverse@input& (0+255),w,b
 26733  0154AC  0100               	movlb	0	; () banked
 26734  0154AE  6F65               	movwf	reverse@iterator& (0+255),b
 26735  0154B0  0100               	movlb	0	; () banked
 26736  0154B2  5163               	movf	(reverse@length+1)& (0+255),w,b
 26737  0154B4  0100               	movlb	0	; () banked
 26738  0154B6  2161               	addwfc	(reverse@input+1)& (0+255),w,b
 26739  0154B8  0100               	movlb	0	; () banked
 26740  0154BA  6F66               	movwf	(reverse@iterator+1)& (0+255),b
 26741                           
 26742                           ;Types.c: 362: while ( --iterator > input )
 26743  0154BC  D01A               	goto	l921
 26744  0154BE                     
 26745                           ; BSR set to: 0
 26746                           ;Types.c: 363: {
 26747                           ;Types.c: 364: tempVar = *input;
 26748                           
 26749                           ; BSR set to: 0
 26750  0154BE  C060  FFD9         	movff	reverse@input,fsr2l
 26751  0154C2  C061  FFDA         	movff	reverse@input+1,fsr2h
 26752  0154C6  50DF               	movf	indf2,w,c
 26753  0154C8  0100               	movlb	0	; () banked
 26754  0154CA  6F64               	movwf	reverse@tempVar& (0+255),b
 26755                           
 26756                           ; BSR set to: 0
 26757                           ;Types.c: 365: *input++=*iterator;
 26758  0154CC  C065  FFD9         	movff	reverse@iterator,fsr2l
 26759  0154D0  C066  FFDA         	movff	reverse@iterator+1,fsr2h
 26760  0154D4  C060  FFE1         	movff	reverse@input,fsr1l
 26761  0154D8  C061  FFE2         	movff	reverse@input+1,fsr1h
 26762  0154DC  CFDF FFE7          	movff	indf2,indf1
 26763                           
 26764                           ; BSR set to: 0
 26765  0154E0  0100               	movlb	0	; () banked
 26766  0154E2  4B60               	infsnz	reverse@input& (0+255),f,b
 26767  0154E4  2B61               	incf	(reverse@input+1)& (0+255),f,b
 26768                           
 26769                           ; BSR set to: 0
 26770                           ;Types.c: 366: *iterator=tempVar;
 26771  0154E6  C065  FFD9         	movff	reverse@iterator,fsr2l
 26772  0154EA  C066  FFDA         	movff	reverse@iterator+1,fsr2h
 26773  0154EE  C064  FFDF         	movff	reverse@tempVar,indf2
 26774  0154F2                     l921:
 26775                           
 26776                           ; BSR set to: 0
 26777                           
 26778                           ; BSR set to: 0
 26779  0154F2  0100               	movlb	0	; () banked
 26780  0154F4  0765               	decf	reverse@iterator& (0+255),f,b
 26781  0154F6  A0D8               	btfss	status,0,c
 26782  0154F8  0766               	decf	(reverse@iterator+1)& (0+255),f,b
 26783  0154FA  0100               	movlb	0	; () banked
 26784  0154FC  5165               	movf	reverse@iterator& (0+255),w,b
 26785  0154FE  0100               	movlb	0	; () banked
 26786  015500  5D60               	subwf	reverse@input& (0+255),w,b
 26787  015502  0100               	movlb	0	; () banked
 26788  015504  5166               	movf	(reverse@iterator+1)& (0+255),w,b
 26789  015506  0100               	movlb	0	; () banked
 26790  015508  5961               	subwfb	(reverse@input+1)& (0+255),w,b
 26791  01550A  B0D8               	btfsc	status,0,c
 26792  01550C  0012               	return	
 26793  01550E  D7D7               	goto	l922
 26794  015510                     __end_of_reverse:
 26795                           	opt stack 0
 26796                           tosu	equ	0xFFF
 26797                           tosh	equ	0xFFE
 26798                           tosl	equ	0xFFD
 26799                           pclath	equ	0xFFA
 26800                           tblptru	equ	0xFF8
 26801                           tblptrh	equ	0xFF7
 26802                           tblptrl	equ	0xFF6
 26803                           tablat	equ	0xFF5
 26804                           prodh	equ	0xFF4
 26805                           prodl	equ	0xFF3
 26806                           intcon	equ	0xFF2
 26807                           postinc0	equ	0xFEE
 26808                           wreg	equ	0xFE8
 26809                           indf1	equ	0xFE7
 26810                           postdec1	equ	0xFE5
 26811                           fsr1h	equ	0xFE2
 26812                           fsr1l	equ	0xFE1
 26813                           indf2	equ	0xFDF
 26814                           postinc2	equ	0xFDE
 26815                           postdec2	equ	0xFDD
 26816                           plusw2	equ	0xFDB
 26817                           fsr2h	equ	0xFDA
 26818                           fsr2l	equ	0xFD9
 26819                           status	equ	0xFD8
 26820                           
 26821 ;; *************** function ___lwmod *****************
 26822 ;; Defined at:
 26823 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
 26824 ;; Parameters:    Size  Location     Type
 26825 ;;  dividend        2    7[BANK0 ] unsigned int 
 26826 ;;  divisor         2    9[BANK0 ] unsigned int 
 26827 ;; Auto vars:     Size  Location     Type
 26828 ;;  counter         1   11[BANK0 ] unsigned char 
 26829 ;; Return value:  Size  Location     Type
 26830 ;;                  2    7[BANK0 ] unsigned int 
 26831 ;; Registers used:
 26832 ;;		wreg, status,2, status,0
 26833 ;; Tracked objects:
 26834 ;;		On entry : 0/0
 26835 ;;		On exit  : 0/0
 26836 ;;		Unchanged: 0/0
 26837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26838 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26839 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26841 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26842 ;;Total ram usage:        5 bytes
 26843 ;; Hardware stack levels used:    1
 26844 ;; Hardware stack levels required when called:    7
 26845 ;; This function calls:
 26846 ;;		Nothing
 26847 ;; This function is called by:
 26848 ;;		_itos
 26849 ;;		_printf
 26850 ;; This function uses a non-reentrant model
 26851 ;;
 26852                           
 26853                           	psect	text142
 26854  0157E0                     __ptext142:
 26855                           	opt stack 0
 26856  0157E0                     ___lwmod:
 26857                           	opt stack 22
 26858                           
 26859                           ; BSR set to: 0
 26860                           ;incstack = 0
 26861  0157E0  0100               	movlb	0	; () banked
 26862  0157E2  5169               	movf	___lwmod@divisor& (0+255),w,b
 26863  0157E4  0100               	movlb	0	; () banked
 26864  0157E6  116A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 26865  0157E8  B4D8               	btfsc	status,2,c
 26866  0157EA  D026               	goto	l2855
 26867                           
 26868                           ; BSR set to: 0
 26869  0157EC  0E01               	movlw	1
 26870  0157EE  0100               	movlb	0	; () banked
 26871  0157F0  6F6B               	movwf	___lwmod@counter& (0+255),b
 26872  0157F2  D006               	goto	l2850
 26873  0157F4                     
 26874                           ; BSR set to: 0
 26875                           
 26876                           ; BSR set to: 0
 26877  0157F4  0100               	movlb	0	; () banked
 26878  0157F6  90D8               	bcf	status,0,c
 26879  0157F8  3769               	rlcf	___lwmod@divisor& (0+255),f,b
 26880  0157FA  376A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 26881  0157FC  0100               	movlb	0	; () banked
 26882  0157FE  2B6B               	incf	___lwmod@counter& (0+255),f,b
 26883  015800                     l2850:
 26884                           
 26885                           ; BSR set to: 0
 26886                           
 26887                           ; BSR set to: 0
 26888  015800  0100               	movlb	0	; () banked
 26889  015802  AF6A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 26890  015804  D7F7               	goto	l2851
 26891  015806                     u8960:
 26892                           
 26893                           ; BSR set to: 0
 26894                           
 26895                           ; BSR set to: 0
 26896                           
 26897                           ; BSR set to: 0
 26898  015806  0100               	movlb	0	; () banked
 26899  015808  5169               	movf	___lwmod@divisor& (0+255),w,b
 26900  01580A  0100               	movlb	0	; () banked
 26901  01580C  5D67               	subwf	___lwmod@dividend& (0+255),w,b
 26902  01580E  0100               	movlb	0	; () banked
 26903  015810  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 26904  015812  0100               	movlb	0	; () banked
 26905  015814  5968               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 26906  015816  A0D8               	btfss	status,0,c
 26907  015818  D008               	goto	l2854
 26908                           
 26909                           ; BSR set to: 0
 26910  01581A  0100               	movlb	0	; () banked
 26911  01581C  5169               	movf	___lwmod@divisor& (0+255),w,b
 26912  01581E  0100               	movlb	0	; () banked
 26913  015820  5F67               	subwf	___lwmod@dividend& (0+255),f,b
 26914  015822  0100               	movlb	0	; () banked
 26915  015824  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 26916  015826  0100               	movlb	0	; () banked
 26917  015828  5B68               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 26918  01582A                     l2854:
 26919                           
 26920                           ; BSR set to: 0
 26921                           
 26922                           ; BSR set to: 0
 26923  01582A  0100               	movlb	0	; () banked
 26924  01582C  90D8               	bcf	status,0,c
 26925  01582E  336A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 26926  015830  3369               	rrcf	___lwmod@divisor& (0+255),f,b
 26927                           
 26928                           ; BSR set to: 0
 26929  015832  0100               	movlb	0	; () banked
 26930  015834  2F6B               	decfsz	___lwmod@counter& (0+255),f,b
 26931  015836  D7E7               	goto	u8960
 26932  015838                     l2855:
 26933                           
 26934                           ; BSR set to: 0
 26935                           
 26936                           ; BSR set to: 0
 26937  015838  C067  F067         	movff	___lwmod@dividend,?___lwmod
 26938  01583C  C068  F068         	movff	___lwmod@dividend+1,?___lwmod+1
 26939                           
 26940                           ; BSR set to: 0
 26941  015840  0012               	return		;funcret
 26942  015842                     __end_of___lwmod:
 26943                           	opt stack 0
 26944                           tosu	equ	0xFFF
 26945                           tosh	equ	0xFFE
 26946                           tosl	equ	0xFFD
 26947                           pclath	equ	0xFFA
 26948                           tblptru	equ	0xFF8
 26949                           tblptrh	equ	0xFF7
 26950                           tblptrl	equ	0xFF6
 26951                           tablat	equ	0xFF5
 26952                           prodh	equ	0xFF4
 26953                           prodl	equ	0xFF3
 26954                           intcon	equ	0xFF2
 26955                           postinc0	equ	0xFEE
 26956                           wreg	equ	0xFE8
 26957                           indf1	equ	0xFE7
 26958                           postdec1	equ	0xFE5
 26959                           fsr1h	equ	0xFE2
 26960                           fsr1l	equ	0xFE1
 26961                           indf2	equ	0xFDF
 26962                           postinc2	equ	0xFDE
 26963                           postdec2	equ	0xFDD
 26964                           plusw2	equ	0xFDB
 26965                           fsr2h	equ	0xFDA
 26966                           fsr2l	equ	0xFD9
 26967                           status	equ	0xFD8
 26968                           
 26969 ;; *************** function ___lwdiv *****************
 26970 ;; Defined at:
 26971 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
 26972 ;; Parameters:    Size  Location     Type
 26973 ;;  dividend        2    0[BANK0 ] unsigned int 
 26974 ;;  divisor         2    2[BANK0 ] unsigned int 
 26975 ;; Auto vars:     Size  Location     Type
 26976 ;;  quotient        2    5[BANK0 ] unsigned int 
 26977 ;;  counter         1    4[BANK0 ] unsigned char 
 26978 ;; Return value:  Size  Location     Type
 26979 ;;                  2    0[BANK0 ] unsigned int 
 26980 ;; Registers used:
 26981 ;;		wreg, status,2, status,0
 26982 ;; Tracked objects:
 26983 ;;		On entry : 0/0
 26984 ;;		On exit  : 0/0
 26985 ;;		Unchanged: 0/0
 26986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26987 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26988 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26990 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26991 ;;Total ram usage:        7 bytes
 26992 ;; Hardware stack levels used:    1
 26993 ;; Hardware stack levels required when called:    7
 26994 ;; This function calls:
 26995 ;;		Nothing
 26996 ;; This function is called by:
 26997 ;;		_itos
 26998 ;;		_printf
 26999 ;; This function uses a non-reentrant model
 27000 ;;
 27001                           
 27002                           	psect	text143
 27003  01510A                     __ptext143:
 27004                           	opt stack 0
 27005  01510A                     ___lwdiv:
 27006                           	opt stack 22
 27007                           
 27008                           ; BSR set to: 0
 27009                           ;incstack = 0
 27010  01510A  0E00               	movlw	0
 27011  01510C  0100               	movlb	0	; () banked
 27012  01510E  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 27013  015110  0E00               	movlw	0
 27014  015112  6F65               	movwf	___lwdiv@quotient& (0+255),b
 27015                           
 27016                           ; BSR set to: 0
 27017  015114  0100               	movlb	0	; () banked
 27018  015116  5162               	movf	___lwdiv@divisor& (0+255),w,b
 27019  015118  0100               	movlb	0	; () banked
 27020  01511A  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 27021  01511C  B4D8               	btfsc	status,2,c
 27022  01511E  D02C               	goto	l2845
 27023                           
 27024                           ; BSR set to: 0
 27025  015120  0E01               	movlw	1
 27026  015122  0100               	movlb	0	; () banked
 27027  015124  6F64               	movwf	___lwdiv@counter& (0+255),b
 27028  015126  D006               	goto	l2840
 27029  015128                     
 27030                           ; BSR set to: 0
 27031                           
 27032                           ; BSR set to: 0
 27033  015128  0100               	movlb	0	; () banked
 27034  01512A  90D8               	bcf	status,0,c
 27035  01512C  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 27036  01512E  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 27037  015130  0100               	movlb	0	; () banked
 27038  015132  2B64               	incf	___lwdiv@counter& (0+255),f,b
 27039  015134                     l2840:
 27040                           
 27041                           ; BSR set to: 0
 27042                           
 27043                           ; BSR set to: 0
 27044  015134  0100               	movlb	0	; () banked
 27045  015136  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 27046  015138  D7F7               	goto	l2841
 27047  01513A                     u8930:
 27048                           
 27049                           ; BSR set to: 0
 27050                           
 27051                           ; BSR set to: 0
 27052                           
 27053                           ; BSR set to: 0
 27054  01513A  0100               	movlb	0	; () banked
 27055  01513C  90D8               	bcf	status,0,c
 27056  01513E  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 27057  015140  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 27058                           
 27059                           ; BSR set to: 0
 27060  015142  0100               	movlb	0	; () banked
 27061  015144  5162               	movf	___lwdiv@divisor& (0+255),w,b
 27062  015146  0100               	movlb	0	; () banked
 27063  015148  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 27064  01514A  0100               	movlb	0	; () banked
 27065  01514C  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 27066  01514E  0100               	movlb	0	; () banked
 27067  015150  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 27068  015152  A0D8               	btfss	status,0,c
 27069  015154  D00A               	goto	l2844
 27070                           
 27071                           ; BSR set to: 0
 27072  015156  0100               	movlb	0	; () banked
 27073  015158  5162               	movf	___lwdiv@divisor& (0+255),w,b
 27074  01515A  0100               	movlb	0	; () banked
 27075  01515C  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 27076  01515E  0100               	movlb	0	; () banked
 27077  015160  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 27078  015162  0100               	movlb	0	; () banked
 27079  015164  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 27080                           
 27081                           ; BSR set to: 0
 27082  015166  0100               	movlb	0	; () banked
 27083  015168  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 27084  01516A                     l2844:
 27085                           
 27086                           ; BSR set to: 0
 27087                           
 27088                           ; BSR set to: 0
 27089  01516A  0100               	movlb	0	; () banked
 27090  01516C  90D8               	bcf	status,0,c
 27091  01516E  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 27092  015170  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 27093                           
 27094                           ; BSR set to: 0
 27095  015172  0100               	movlb	0	; () banked
 27096  015174  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 27097  015176  D7E1               	goto	u8930
 27098  015178                     l2845:
 27099                           
 27100                           ; BSR set to: 0
 27101                           
 27102                           ; BSR set to: 0
 27103  015178  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 27104  01517C  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 27105                           
 27106                           ; BSR set to: 0
 27107  015180  0012               	return		;funcret
 27108  015182                     __end_of___lwdiv:
 27109                           	opt stack 0
 27110                           tosu	equ	0xFFF
 27111                           tosh	equ	0xFFE
 27112                           tosl	equ	0xFFD
 27113                           pclath	equ	0xFFA
 27114                           tblptru	equ	0xFF8
 27115                           tblptrh	equ	0xFF7
 27116                           tblptrl	equ	0xFF6
 27117                           tablat	equ	0xFF5
 27118                           prodh	equ	0xFF4
 27119                           prodl	equ	0xFF3
 27120                           intcon	equ	0xFF2
 27121                           postinc0	equ	0xFEE
 27122                           wreg	equ	0xFE8
 27123                           indf1	equ	0xFE7
 27124                           postdec1	equ	0xFE5
 27125                           fsr1h	equ	0xFE2
 27126                           fsr1l	equ	0xFE1
 27127                           indf2	equ	0xFDF
 27128                           postinc2	equ	0xFDE
 27129                           postdec2	equ	0xFDD
 27130                           plusw2	equ	0xFDB
 27131                           fsr2h	equ	0xFDA
 27132                           fsr2l	equ	0xFD9
 27133                           status	equ	0xFD8
 27134                           
 27135 ;; *************** function _HMI_SetSegments *****************
 27136 ;; Defined at:
 27137 ;;		line 226 in file "HMI.c"
 27138 ;; Parameters:    Size  Location     Type
 27139 ;;  pString         2    1[BANK0 ] PTR unsigned char 
 27140 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 27141 ;; Auto vars:     Size  Location     Type
 27142 ;;  in              2    4[BANK0 ] unsigned short 
 27143 ;; Return value:  Size  Location     Type
 27144 ;;                  1    wreg      void 
 27145 ;; Registers used:
 27146 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 27147 ;; Tracked objects:
 27148 ;;		On entry : 0/0
 27149 ;;		On exit  : 0/0
 27150 ;;		Unchanged: 0/0
 27151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27152 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27153 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27154 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27155 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27156 ;;Total ram usage:        5 bytes
 27157 ;; Hardware stack levels used:    1
 27158 ;; Hardware stack levels required when called:    8
 27159 ;; This function calls:
 27160 ;;		_ToSegment
 27161 ;; This function is called by:
 27162 ;;		_HMI_SetNumber
 27163 ;; This function uses a non-reentrant model
 27164 ;;
 27165                           
 27166                           	psect	text144
 27167  014272                     __ptext144:
 27168                           	opt stack 0
 27169  014272                     _HMI_SetSegments:
 27170                           	opt stack 20
 27171                           
 27172                           ;HMI.c: 228: UINT16 in=0;
 27173                           
 27174                           ; BSR set to: 0
 27175                           ;incstack = 0
 27176  014272  0E00               	movlw	0
 27177  014274  0100               	movlb	0	; () banked
 27178  014276  6F65               	movwf	(HMI_SetSegments@in+1)& (0+255),b
 27179  014278  0E00               	movlw	0
 27180  01427A  6F64               	movwf	HMI_SetSegments@in& (0+255),b
 27181                           
 27182                           ;HMI.c: 229: while(*pString)
 27183  01427C  D038               	goto	l1202
 27184  01427E                     
 27185                           ; BSR set to: 0
 27186                           ;HMI.c: 230: {
 27187                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
 27188                           
 27189                           ; BSR set to: 0
 27190  01427E  0E20               	movlw	low _HMIBoard
 27191  014280  0100               	movlb	0	; () banked
 27192  014282  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 27193  014284  6ED9               	movwf	fsr2l,c
 27194  014286  0E03               	movlw	high _HMIBoard
 27195  014288  0100               	movlb	0	; () banked
 27196  01428A  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27197  01428C  6EDA               	movwf	fsr2h,c
 27198  01428E  C061  FFE1         	movff	HMI_SetSegments@pString,fsr1l
 27199  014292  C062  FFE2         	movff	HMI_SetSegments@pString+1,fsr1h
 27200  014296  50E7               	movf	indf1,w,c
 27201  014298  EC10  F08C         	call	_ToSegment
 27202  01429C  6EDF               	movwf	indf2,c
 27203                           
 27204                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
 27205  01429E  0E20               	movlw	low _HMIBoard
 27206  0142A0  0100               	movlb	0	; () banked
 27207  0142A2  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 27208  0142A4  6ED9               	movwf	fsr2l,c
 27209  0142A6  0E03               	movlw	high _HMIBoard
 27210  0142A8  0100               	movlb	0	; () banked
 27211  0142AA  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27212  0142AC  6EDA               	movwf	fsr2h,c
 27213  0142AE  0E80               	movlw	128
 27214  0142B0  18DE               	xorwf	postinc2,w,c
 27215  0142B2  A4D8               	btfss	status,2,c
 27216  0142B4  D00E               	goto	l1201
 27217                           
 27218                           ; BSR set to: 0
 27219                           ;HMI.c: 234: {
 27220                           ;HMI.c: 235: in--;
 27221  0142B6  0100               	movlb	0	; () banked
 27222  0142B8  0764               	decf	HMI_SetSegments@in& (0+255),f,b
 27223  0142BA  A0D8               	btfss	status,0,c
 27224  0142BC  0765               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
 27225                           
 27226                           ; BSR set to: 0
 27227                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
 27228  0142BE  0E20               	movlw	low _HMIBoard
 27229  0142C0  0100               	movlb	0	; () banked
 27230  0142C2  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 27231  0142C4  6ED9               	movwf	fsr2l,c
 27232  0142C6  0E03               	movlw	high _HMIBoard
 27233  0142C8  0100               	movlb	0	; () banked
 27234  0142CA  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27235  0142CC  6EDA               	movwf	fsr2h,c
 27236  0142CE  0E00               	movlw	0
 27237  0142D0  8EDB               	bsf	plusw2,7,c
 27238  0142D2                     l1201:
 27239                           
 27240                           ; BSR set to: 0
 27241                           ;HMI.c: 237: }
 27242                           ;HMI.c: 239: pString++;
 27243                           
 27244                           ; BSR set to: 0
 27245  0142D2  0100               	movlb	0	; () banked
 27246  0142D4  4B61               	infsnz	HMI_SetSegments@pString& (0+255),f,b
 27247  0142D6  2B62               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
 27248                           
 27249                           ; BSR set to: 0
 27250                           ;HMI.c: 240: in++;
 27251  0142D8  0100               	movlb	0	; () banked
 27252  0142DA  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
 27253  0142DC  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 27254                           
 27255                           ; BSR set to: 0
 27256                           ;HMI.c: 241: if (in>=6)
 27257  0142DE  0100               	movlb	0	; () banked
 27258  0142E0  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 27259  0142E2  E11A               	bnz	l12398
 27260  0142E4  0E06               	movlw	6
 27261  0142E6  0100               	movlb	0	; () banked
 27262  0142E8  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
 27263  0142EA  B0D8               	btfsc	status,0,c
 27264  0142EC  D015               	goto	l1204
 27265  0142EE                     l1202:
 27266                           
 27267                           ; BSR set to: 0
 27268                           
 27269                           ; BSR set to: 0
 27270                           
 27271                           ; BSR set to: 0
 27272  0142EE  C061  FFD9         	movff	HMI_SetSegments@pString,fsr2l
 27273  0142F2  C062  FFDA         	movff	HMI_SetSegments@pString+1,fsr2h
 27274  0142F6  50DF               	movf	indf2,w,c
 27275  0142F8  B4D8               	btfsc	status,2,c
 27276  0142FA  D00E               	goto	l1204
 27277  0142FC  D7C0               	goto	l1200
 27278  0142FE                     
 27279                           ; BSR set to: 0
 27280                           ;HMI.c: 245: {
 27281                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
 27282                           
 27283                           ; BSR set to: 0
 27284  0142FE  0E20               	movlw	low _HMIBoard
 27285  014300  0100               	movlb	0	; () banked
 27286  014302  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 27287  014304  6ED9               	movwf	fsr2l,c
 27288  014306  0E03               	movlw	high _HMIBoard
 27289  014308  0100               	movlb	0	; () banked
 27290  01430A  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27291  01430C  6EDA               	movwf	fsr2h,c
 27292  01430E  0E00               	movlw	0
 27293  014310  6EDF               	movwf	indf2,c
 27294                           
 27295                           ; BSR set to: 0
 27296                           ;HMI.c: 247: in++;
 27297  014312  0100               	movlb	0	; () banked
 27298  014314  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
 27299  014316  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 27300  014318                     l1204:
 27301  014318                     l12398:
 27302                           
 27303                           ; BSR set to: 0
 27304  014318  0100               	movlb	0	; () banked
 27305  01431A  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 27306  01431C  E106               	bnz	l1207
 27307  01431E  0E06               	movlw	6
 27308  014320  0100               	movlb	0	; () banked
 27309  014322  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
 27310  014324  B0D8               	btfsc	status,0,c
 27311  014326  0012               	return	
 27312  014328  D7EA               	goto	l1205
 27313  01432A                     l1207:
 27314                           
 27315                           ; BSR set to: 0
 27316  01432A  0012               	return		;funcret
 27317  01432C                     __end_of_HMI_SetSegments:
 27318                           	opt stack 0
 27319                           tosu	equ	0xFFF
 27320                           tosh	equ	0xFFE
 27321                           tosl	equ	0xFFD
 27322                           pclath	equ	0xFFA
 27323                           tblptru	equ	0xFF8
 27324                           tblptrh	equ	0xFF7
 27325                           tblptrl	equ	0xFF6
 27326                           tablat	equ	0xFF5
 27327                           prodh	equ	0xFF4
 27328                           prodl	equ	0xFF3
 27329                           intcon	equ	0xFF2
 27330                           postinc0	equ	0xFEE
 27331                           wreg	equ	0xFE8
 27332                           indf1	equ	0xFE7
 27333                           postdec1	equ	0xFE5
 27334                           fsr1h	equ	0xFE2
 27335                           fsr1l	equ	0xFE1
 27336                           indf2	equ	0xFDF
 27337                           postinc2	equ	0xFDE
 27338                           postdec2	equ	0xFDD
 27339                           plusw2	equ	0xFDB
 27340                           fsr2h	equ	0xFDA
 27341                           fsr2l	equ	0xFD9
 27342                           status	equ	0xFD8
 27343                           
 27344 ;; *************** function _ToSegment *****************
 27345 ;; Defined at:
 27346 ;;		line 284 in file "Library/Types.c"
 27347 ;; Parameters:    Size  Location     Type
 27348 ;;  pCHR            1    wreg     unsigned char 
 27349 ;; Auto vars:     Size  Location     Type
 27350 ;;  pCHR            1    0[BANK0 ] unsigned char 
 27351 ;; Return value:  Size  Location     Type
 27352 ;;                  1    wreg      unsigned char 
 27353 ;; Registers used:
 27354 ;;		wreg, status,2, status,0
 27355 ;; Tracked objects:
 27356 ;;		On entry : 0/0
 27357 ;;		On exit  : 0/0
 27358 ;;		Unchanged: 0/0
 27359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27361 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27363 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27364 ;;Total ram usage:        1 bytes
 27365 ;; Hardware stack levels used:    1
 27366 ;; Hardware stack levels required when called:    7
 27367 ;; This function calls:
 27368 ;;		Nothing
 27369 ;; This function is called by:
 27370 ;;		_HMI_SetSegments
 27371 ;; This function uses a non-reentrant model
 27372 ;;
 27373                           
 27374                           	psect	text145
 27375  011820                     __ptext145:
 27376                           	opt stack 0
 27377  011820                     _ToSegment:
 27378                           	opt stack 20
 27379                           
 27380                           ; BSR set to: 0
 27381                           ;incstack = 0
 27382                           ;ToSegment@pCHR stored from wreg
 27383  011820  0100               	movlb	0	; () banked
 27384  011822  6F60               	movwf	ToSegment@pCHR& (0+255),b
 27385                           
 27386                           ;Types.c: 286: switch(pCHR)
 27387  011824  D07E               	goto	l853
 27388  011826  0E3F               	movlw	63
 27389  011828  0012               	return	
 27390  01182A  0E06               	movlw	6
 27391  01182C  0012               	return	
 27392  01182E  0E5B               	movlw	91
 27393  011830  0012               	return	
 27394  011832  0E4F               	movlw	79
 27395  011834  0012               	return	
 27396  011836  0E66               	movlw	102
 27397  011838  0012               	return	
 27398  01183A  0E6D               	movlw	109
 27399  01183C  0012               	return	
 27400  01183E  0E7D               	movlw	125
 27401  011840  0012               	return	
 27402  011842  0E07               	movlw	7
 27403  011844  0012               	return	
 27404  011846  0E7F               	movlw	127
 27405  011848  0012               	return	
 27406  01184A  0E6F               	movlw	111
 27407  01184C  0012               	return	
 27408  01184E  0E5F               	movlw	95
 27409  011850  0012               	return	
 27410  011852  0E7C               	movlw	124
 27411  011854  0012               	return	
 27412  011856  0E58               	movlw	88
 27413  011858  0012               	return	
 27414  01185A  0E5E               	movlw	94
 27415  01185C  0012               	return	
 27416  01185E  0E7B               	movlw	123
 27417  011860  0012               	return	
 27418  011862  0E71               	movlw	113
 27419  011864  0012               	return	
 27420  011866  0E6F               	movlw	111
 27421  011868  0012               	return	
 27422  01186A  0E74               	movlw	116
 27423  01186C  0012               	return	
 27424  01186E  0E04               	movlw	4
 27425  011870  0012               	return	
 27426  011872  0E0E               	movlw	14
 27427  011874  0012               	return	
 27428  011876  0E7A               	movlw	122
 27429  011878  0012               	return	
 27430  01187A  0E06               	movlw	6
 27431  01187C  0012               	return	
 27432  01187E  0E14               	movlw	20
 27433  011880  0012               	return	
 27434  011882  0E54               	movlw	84
 27435  011884  0012               	return	
 27436  011886  0E5C               	movlw	92
 27437  011888  0012               	return	
 27438  01188A  0E73               	movlw	115
 27439  01188C  0012               	return	
 27440  01188E  0E67               	movlw	103
 27441  011890  0012               	return	
 27442  011892  0E50               	movlw	80
 27443  011894  0012               	return	
 27444  011896  0E6D               	movlw	109
 27445  011898  0012               	return	
 27446  01189A  0E78               	movlw	120
 27447  01189C  0012               	return	
 27448  01189E  0E1C               	movlw	28
 27449  0118A0  0012               	return	
 27450  0118A2  0E62               	movlw	98
 27451  0118A4  0012               	return	
 27452  0118A6  0E2A               	movlw	42
 27453  0118A8  0012               	return	
 27454  0118AA  0E64               	movlw	100
 27455  0118AC  0012               	return	
 27456  0118AE  0E6E               	movlw	110
 27457  0118B0  0012               	return	
 27458  0118B2  0E5B               	movlw	91
 27459  0118B4  0012               	return	
 27460  0118B6  0E77               	movlw	119
 27461  0118B8  0012               	return	
 27462  0118BA  0E7F               	movlw	127
 27463  0118BC  0012               	return	
 27464  0118BE  0E39               	movlw	57
 27465  0118C0  0012               	return	
 27466  0118C2  0E3F               	movlw	63
 27467  0118C4  0012               	return	
 27468  0118C6  0E79               	movlw	121
 27469  0118C8  0012               	return	
 27470  0118CA  0E71               	movlw	113
 27471  0118CC  0012               	return	
 27472  0118CE  0E3D               	movlw	61
 27473  0118D0  0012               	return	
 27474  0118D2  0E76               	movlw	118
 27475  0118D4  0012               	return	
 27476  0118D6  0E06               	movlw	6
 27477  0118D8  0012               	return	
 27478  0118DA  0E1E               	movlw	30
 27479  0118DC  0012               	return	
 27480  0118DE  0E57               	movlw	87
 27481  0118E0  0012               	return	
 27482  0118E2  0E38               	movlw	56
 27483  0118E4  0012               	return	
 27484  0118E6  0E76               	movlw	118
 27485  0118E8  0012               	return	
 27486  0118EA  0E76               	movlw	118
 27487  0118EC  0012               	return	
 27488  0118EE  0E3F               	movlw	63
 27489  0118F0  0012               	return	
 27490  0118F2  0E73               	movlw	115
 27491  0118F4  0012               	return	
 27492  0118F6  0E3F               	movlw	63
 27493  0118F8  0012               	return	
 27494  0118FA  0E77               	movlw	119
 27495  0118FC  0012               	return	
 27496  0118FE  0E6D               	movlw	109
 27497  011900  0012               	return	
 27498  011902  0E31               	movlw	49
 27499  011904  0012               	return	
 27500  011906  0E3E               	movlw	62
 27501  011908  0012               	return	
 27502  01190A  0E3E               	movlw	62
 27503  01190C  0012               	return	
 27504  01190E  0E7E               	movlw	126
 27505  011910  0012               	return	
 27506  011912  0E76               	movlw	118
 27507  011914  0012               	return	
 27508  011916  0E66               	movlw	102
 27509  011918  0012               	return	
 27510  01191A  0E5B               	movlw	91
 27511  01191C  0012               	return	
 27512  01191E  0E80               	movlw	128
 27513  011920  0012               	return	
 27514  011922                     l853:
 27515  011922  0100               	movlb	0	; () banked
 27516  011924  5160               	movf	ToSegment@pCHR& (0+255),w,b
 27517                           
 27518                           ; Switch size 1, requested type "space"
 27519                           ; Number of cases is 63, Range of values is 46 to 122
 27520                           ; switch strategies available:
 27521                           ; Name         Instructions Cycles
 27522                           ; simple_byte          190    96 (average)
 27523                           ;	Chosen strategy is simple_byte
 27524  011926  0A2E               	xorlw	46	; case 46
 27525  011928  B4D8               	btfsc	status,2,c
 27526  01192A  D7F9               	goto	l917
 27527  01192C  0A1E               	xorlw	30	; case 48
 27528  01192E  B4D8               	btfsc	status,2,c
 27529  011930  D77A               	goto	l854
 27530  011932  0A01               	xorlw	1	; case 49
 27531  011934  B4D8               	btfsc	status,2,c
 27532  011936  D779               	goto	l856
 27533  011938  0A03               	xorlw	3	; case 50
 27534  01193A  B4D8               	btfsc	status,2,c
 27535  01193C  D778               	goto	l857
 27536  01193E  0A01               	xorlw	1	; case 51
 27537  011940  B4D8               	btfsc	status,2,c
 27538  011942  D777               	goto	l858
 27539  011944  0A07               	xorlw	7	; case 52
 27540  011946  B4D8               	btfsc	status,2,c
 27541  011948  D776               	goto	l859
 27542  01194A  0A01               	xorlw	1	; case 53
 27543  01194C  B4D8               	btfsc	status,2,c
 27544  01194E  D775               	goto	l860
 27545  011950  0A03               	xorlw	3	; case 54
 27546  011952  B4D8               	btfsc	status,2,c
 27547  011954  D774               	goto	l861
 27548  011956  0A01               	xorlw	1	; case 55
 27549  011958  B4D8               	btfsc	status,2,c
 27550  01195A  D773               	goto	l862
 27551  01195C  0A0F               	xorlw	15	; case 56
 27552  01195E  B4D8               	btfsc	status,2,c
 27553  011960  D772               	goto	l863
 27554  011962  0A01               	xorlw	1	; case 57
 27555  011964  B4D8               	btfsc	status,2,c
 27556  011966  D771               	goto	l864
 27557  011968  0A78               	xorlw	120	; case 65
 27558  01196A  B4D8               	btfsc	status,2,c
 27559  01196C  D7A4               	goto	l891
 27560  01196E  0A03               	xorlw	3	; case 66
 27561  011970  B4D8               	btfsc	status,2,c
 27562  011972  D7A3               	goto	l892
 27563  011974  0A01               	xorlw	1	; case 67
 27564  011976  B4D8               	btfsc	status,2,c
 27565  011978  D7A2               	goto	l893
 27566  01197A  0A07               	xorlw	7	; case 68
 27567  01197C  B4D8               	btfsc	status,2,c
 27568  01197E  D7A1               	goto	l894
 27569  011980  0A01               	xorlw	1	; case 69
 27570  011982  B4D8               	btfsc	status,2,c
 27571  011984  D7A0               	goto	l895
 27572  011986  0A03               	xorlw	3	; case 70
 27573  011988  B4D8               	btfsc	status,2,c
 27574  01198A  D79F               	goto	l896
 27575  01198C  0A01               	xorlw	1	; case 71
 27576  01198E  B4D8               	btfsc	status,2,c
 27577  011990  D79E               	goto	l897
 27578  011992  0A0F               	xorlw	15	; case 72
 27579  011994  B4D8               	btfsc	status,2,c
 27580  011996  D79D               	goto	l898
 27581  011998  0A01               	xorlw	1	; case 73
 27582  01199A  B4D8               	btfsc	status,2,c
 27583  01199C  D79C               	goto	l899
 27584  01199E  0A03               	xorlw	3	; case 74
 27585  0119A0  B4D8               	btfsc	status,2,c
 27586  0119A2  D79B               	goto	l900
 27587  0119A4  0A01               	xorlw	1	; case 75
 27588  0119A6  B4D8               	btfsc	status,2,c
 27589  0119A8  D79A               	goto	l901
 27590  0119AA  0A07               	xorlw	7	; case 76
 27591  0119AC  B4D8               	btfsc	status,2,c
 27592  0119AE  D799               	goto	l902
 27593  0119B0  0A01               	xorlw	1	; case 77
 27594  0119B2  B4D8               	btfsc	status,2,c
 27595  0119B4  D798               	goto	l903
 27596  0119B6  0A03               	xorlw	3	; case 78
 27597  0119B8  B4D8               	btfsc	status,2,c
 27598  0119BA  D797               	goto	l904
 27599  0119BC  0A01               	xorlw	1	; case 79
 27600  0119BE  B4D8               	btfsc	status,2,c
 27601  0119C0  D796               	goto	l905
 27602  0119C2  0A1F               	xorlw	31	; case 80
 27603  0119C4  B4D8               	btfsc	status,2,c
 27604  0119C6  D795               	goto	l906
 27605  0119C8  0A01               	xorlw	1	; case 81
 27606  0119CA  B4D8               	btfsc	status,2,c
 27607  0119CC  D794               	goto	l907
 27608  0119CE  0A03               	xorlw	3	; case 82
 27609  0119D0  B4D8               	btfsc	status,2,c
 27610  0119D2  D793               	goto	l908
 27611  0119D4  0A01               	xorlw	1	; case 83
 27612  0119D6  B4D8               	btfsc	status,2,c
 27613  0119D8  D792               	goto	l909
 27614  0119DA  0A07               	xorlw	7	; case 84
 27615  0119DC  B4D8               	btfsc	status,2,c
 27616  0119DE  D791               	goto	l910
 27617  0119E0  0A01               	xorlw	1	; case 85
 27618  0119E2  B4D8               	btfsc	status,2,c
 27619  0119E4  D790               	goto	l911
 27620  0119E6  0A03               	xorlw	3	; case 86
 27621  0119E8  B4D8               	btfsc	status,2,c
 27622  0119EA  D78F               	goto	l912
 27623  0119EC  0A01               	xorlw	1	; case 87
 27624  0119EE  B4D8               	btfsc	status,2,c
 27625  0119F0  D78E               	goto	l913
 27626  0119F2  0A0F               	xorlw	15	; case 88
 27627  0119F4  B4D8               	btfsc	status,2,c
 27628  0119F6  D78D               	goto	l914
 27629  0119F8  0A01               	xorlw	1	; case 89
 27630  0119FA  B4D8               	btfsc	status,2,c
 27631  0119FC  D78C               	goto	l915
 27632  0119FE  0A03               	xorlw	3	; case 90
 27633  011A00  B4D8               	btfsc	status,2,c
 27634  011A02  D78B               	goto	l916
 27635  011A04  0A3B               	xorlw	59	; case 97
 27636  011A06  B4D8               	btfsc	status,2,c
 27637  011A08  D722               	goto	l865
 27638  011A0A  0A03               	xorlw	3	; case 98
 27639  011A0C  B4D8               	btfsc	status,2,c
 27640  011A0E  D721               	goto	l866
 27641  011A10  0A01               	xorlw	1	; case 99
 27642  011A12  B4D8               	btfsc	status,2,c
 27643  011A14  D720               	goto	l867
 27644  011A16  0A07               	xorlw	7	; case 100
 27645  011A18  B4D8               	btfsc	status,2,c
 27646  011A1A  D71F               	goto	l868
 27647  011A1C  0A01               	xorlw	1	; case 101
 27648  011A1E  B4D8               	btfsc	status,2,c
 27649  011A20  D71E               	goto	l869
 27650  011A22  0A03               	xorlw	3	; case 102
 27651  011A24  B4D8               	btfsc	status,2,c
 27652  011A26  D71D               	goto	l870
 27653  011A28  0A01               	xorlw	1	; case 103
 27654  011A2A  B4D8               	btfsc	status,2,c
 27655  011A2C  D71C               	goto	l871
 27656  011A2E  0A0F               	xorlw	15	; case 104
 27657  011A30  B4D8               	btfsc	status,2,c
 27658  011A32  D71B               	goto	l872
 27659  011A34  0A01               	xorlw	1	; case 105
 27660  011A36  B4D8               	btfsc	status,2,c
 27661  011A38  D71A               	goto	l873
 27662  011A3A  0A03               	xorlw	3	; case 106
 27663  011A3C  B4D8               	btfsc	status,2,c
 27664  011A3E  D719               	goto	l874
 27665  011A40  0A01               	xorlw	1	; case 107
 27666  011A42  B4D8               	btfsc	status,2,c
 27667  011A44  D718               	goto	l875
 27668  011A46  0A07               	xorlw	7	; case 108
 27669  011A48  B4D8               	btfsc	status,2,c
 27670  011A4A  D717               	goto	l876
 27671  011A4C  0A01               	xorlw	1	; case 109
 27672  011A4E  B4D8               	btfsc	status,2,c
 27673  011A50  D716               	goto	l877
 27674  011A52  0A03               	xorlw	3	; case 110
 27675  011A54  B4D8               	btfsc	status,2,c
 27676  011A56  D715               	goto	l878
 27677  011A58  0A01               	xorlw	1	; case 111
 27678  011A5A  B4D8               	btfsc	status,2,c
 27679  011A5C  D714               	goto	l879
 27680  011A5E  0A1F               	xorlw	31	; case 112
 27681  011A60  B4D8               	btfsc	status,2,c
 27682  011A62  D713               	goto	l880
 27683  011A64  0A01               	xorlw	1	; case 113
 27684  011A66  B4D8               	btfsc	status,2,c
 27685  011A68  D712               	goto	l881
 27686  011A6A  0A03               	xorlw	3	; case 114
 27687  011A6C  B4D8               	btfsc	status,2,c
 27688  011A6E  D711               	goto	l882
 27689  011A70  0A01               	xorlw	1	; case 115
 27690  011A72  B4D8               	btfsc	status,2,c
 27691  011A74  D710               	goto	l883
 27692  011A76  0A07               	xorlw	7	; case 116
 27693  011A78  B4D8               	btfsc	status,2,c
 27694  011A7A  D70F               	goto	l884
 27695  011A7C  0A01               	xorlw	1	; case 117
 27696  011A7E  B4D8               	btfsc	status,2,c
 27697  011A80  D70E               	goto	l885
 27698  011A82  0A03               	xorlw	3	; case 118
 27699  011A84  B4D8               	btfsc	status,2,c
 27700  011A86  D70D               	goto	l886
 27701  011A88  0A01               	xorlw	1	; case 119
 27702  011A8A  B4D8               	btfsc	status,2,c
 27703  011A8C  D70C               	goto	l887
 27704  011A8E  0A0F               	xorlw	15	; case 120
 27705  011A90  B4D8               	btfsc	status,2,c
 27706  011A92  D70B               	goto	l888
 27707  011A94  0A01               	xorlw	1	; case 121
 27708  011A96  B4D8               	btfsc	status,2,c
 27709  011A98  D70A               	goto	l889
 27710  011A9A  0A03               	xorlw	3	; case 122
 27711  011A9C  B4D8               	btfsc	status,2,c
 27712  011A9E  D709               	goto	l890
 27713                           
 27714                           ;Types.c: 354: return 0;
 27715                           
 27716                           ; BSR set to: 0
 27717  011AA0  0E00               	movlw	0
 27718  011AA2  0012               	return	
 27719  011AA4                     __end_of_ToSegment:
 27720                           	opt stack 0
 27721                           tosu	equ	0xFFF
 27722                           tosh	equ	0xFFE
 27723                           tosl	equ	0xFFD
 27724                           pclath	equ	0xFFA
 27725                           tblptru	equ	0xFF8
 27726                           tblptrh	equ	0xFF7
 27727                           tblptrl	equ	0xFF6
 27728                           tablat	equ	0xFF5
 27729                           prodh	equ	0xFF4
 27730                           prodl	equ	0xFF3
 27731                           intcon	equ	0xFF2
 27732                           postinc0	equ	0xFEE
 27733                           wreg	equ	0xFE8
 27734                           indf1	equ	0xFE7
 27735                           postdec1	equ	0xFE5
 27736                           fsr1h	equ	0xFE2
 27737                           fsr1l	equ	0xFE1
 27738                           indf2	equ	0xFDF
 27739                           postinc2	equ	0xFDE
 27740                           postdec2	equ	0xFDD
 27741                           plusw2	equ	0xFDB
 27742                           fsr2h	equ	0xFDA
 27743                           fsr2l	equ	0xFD9
 27744                           status	equ	0xFD8
 27745                           
 27746 ;; *************** function _HMI_SetButton *****************
 27747 ;; Defined at:
 27748 ;;		line 186 in file "HMI.c"
 27749 ;; Parameters:    Size  Location     Type
 27750 ;;  pValue          1    wreg     unsigned char 
 27751 ;; Auto vars:     Size  Location     Type
 27752 ;;  pValue          1    6[BANK0 ] unsigned char 
 27753 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
 27754 ;;  v               1    7[BANK0 ] unsigned char 
 27755 ;; Return value:  Size  Location     Type
 27756 ;;                  1    wreg      void 
 27757 ;; Registers used:
 27758 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 27759 ;; Tracked objects:
 27760 ;;		On entry : 0/0
 27761 ;;		On exit  : 0/0
 27762 ;;		Unchanged: 0/0
 27763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27765 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27766 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27767 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27768 ;;Total ram usage:        8 bytes
 27769 ;; Hardware stack levels used:    1
 27770 ;; Hardware stack levels required when called:    7
 27771 ;; This function calls:
 27772 ;;		Nothing
 27773 ;; This function is called by:
 27774 ;;		_Event_TestButton
 27775 ;; This function uses a non-reentrant model
 27776 ;;
 27777                           
 27778                           	psect	text146
 27779  014C50                     __ptext146:
 27780                           	opt stack 0
 27781  014C50                     _HMI_SetButton:
 27782                           	opt stack 19
 27783                           
 27784                           ;incstack = 0
 27785                           ;HMI_SetButton@pValue stored from wreg
 27786  014C50  0100               	movlb	0	; () banked
 27787  014C52  6F66               	movwf	HMI_SetButton@pValue& (0+255),b
 27788                           
 27789                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
 27790  014C54  0E7E               	movlw	low HMI_SetButton@F7213
 27791  014C56  6EF6               	movwf	tblptrl,c
 27792  014C58                     	if	1	;There is more than 1 active tblptr byte
 27793  014C58  0EFD               	movlw	high HMI_SetButton@F7213
 27794  014C5A  6EF7               	movwf	tblptrh,c
 27795  014C5C                     	endif
 27796  014C5C                     	if	1	;There are 3 active tblptr bytes
 27797  014C5C  0E00               	movlw	low (HMI_SetButton@F7213 shr (0+16))
 27798  014C5E  6EF8               	movwf	tblptru,c
 27799  014C60                     	endif
 27800  014C60  0009               	tblrd		*+
 27801  014C62  CFF5 F062          	movff	tablat,HMI_SetButton@reindex
 27802  014C66  0009               	tblrd		*+
 27803  014C68  CFF5 F063          	movff	tablat,HMI_SetButton@reindex+1
 27804  014C6C  0009               	tblrd		*+
 27805  014C6E  CFF5 F064          	movff	tablat,HMI_SetButton@reindex+2
 27806  014C72  000A               	tblrd		*-
 27807  014C74  CFF5 F065          	movff	tablat,HMI_SetButton@reindex+3
 27808                           
 27809                           ;HMI.c: 189: UINT8 v = 0b00010001;
 27810  014C78  0E11               	movlw	17
 27811  014C7A  0100               	movlb	0	; () banked
 27812  014C7C  6F67               	movwf	HMI_SetButton@v& (0+255),b
 27813                           
 27814                           ; BSR set to: 0
 27815                           ;HMI.c: 190: pValue &= 3;
 27816  014C7E  0E03               	movlw	3
 27817  014C80  0100               	movlb	0	; () banked
 27818  014C82  1766               	andwf	HMI_SetButton@pValue& (0+255),f,b
 27819                           
 27820                           ; BSR set to: 0
 27821                           ;HMI.c: 191: v = v << reindex[pValue];
 27822  014C84  0100               	movlb	0	; () banked
 27823  014C86  5166               	movf	HMI_SetButton@pValue& (0+255),w,b
 27824  014C88  0D01               	mullw	1
 27825  014C8A  0E62               	movlw	low HMI_SetButton@reindex
 27826  014C8C  24F3               	addwf	prodl,w,c
 27827  014C8E  6ED9               	movwf	fsr2l,c
 27828  014C90  0E00               	movlw	high HMI_SetButton@reindex
 27829  014C92  20F4               	addwfc	prodh,w,c
 27830  014C94  6EDA               	movwf	fsr2h,c
 27831  014C96  50DF               	movf	indf2,w,c
 27832  014C98  0100               	movlb	0	; () banked
 27833  014C9A  6F60               	movwf	??_HMI_SetButton& (0+255),b
 27834  014C9C  C067  F061         	movff	HMI_SetButton@v,??_HMI_SetButton+1
 27835  014CA0  0100               	movlb	0	; () banked
 27836  014CA2  2B60               	incf	??_HMI_SetButton& (0+255),f,b
 27837  014CA4  D003               	goto	u9494
 27838  014CA6                     u9495:
 27839  014CA6  0100               	movlb	0	; () banked
 27840  014CA8  90D8               	bcf	status,0,c
 27841  014CAA  3761               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
 27842  014CAC                     u9494:
 27843  014CAC  0100               	movlb	0	; () banked
 27844  014CAE  2F60               	decfsz	??_HMI_SetButton& (0+255),f,b
 27845  014CB0  D7FA               	goto	u9495
 27846  014CB2  0100               	movlb	0	; () banked
 27847  014CB4  5161               	movf	(??_HMI_SetButton+1)& (0+255),w,b
 27848  014CB6  0100               	movlb	0	; () banked
 27849  014CB8  6F67               	movwf	HMI_SetButton@v& (0+255),b
 27850                           
 27851                           ; BSR set to: 0
 27852                           ;HMI.c: 192: v = v >> 4;
 27853  014CBA  0100               	movlb	0	; () banked
 27854  014CBC  3967               	swapf	HMI_SetButton@v& (0+255),w,b
 27855  014CBE  0B0F               	andlw	15
 27856  014CC0  0100               	movlb	0	; () banked
 27857  014CC2  6F67               	movwf	HMI_SetButton@v& (0+255),b
 27858                           
 27859                           ; BSR set to: 0
 27860                           ;HMI.c: 193: v = v & 0x0F;
 27861  014CC4  0100               	movlb	0	; () banked
 27862  014CC6  5167               	movf	HMI_SetButton@v& (0+255),w,b
 27863  014CC8  0B0F               	andlw	15
 27864  014CCA  0100               	movlb	0	; () banked
 27865  014CCC  6F67               	movwf	HMI_SetButton@v& (0+255),b
 27866                           
 27867                           ; BSR set to: 0
 27868                           ;HMI.c: 194: HMIBoard.pButton = v;
 27869  014CCE  0103               	movlb	3	; () banked
 27870  014CD0  5126               	movf	(_HMIBoard+6)& (0+255),w,b
 27871  014CD2  0100               	movlb	0	; () banked
 27872  014CD4  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
 27873  014CD6  0BF0               	andlw	-16
 27874  014CD8  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
 27875  014CDA  0103               	movlb	3	; () banked
 27876  014CDC  6F26               	movwf	(_HMIBoard+6)& (0+255),b
 27877                           
 27878                           ; BSR set to: 3
 27879  014CDE  0012               	return		;funcret
 27880  014CE0                     __end_of_HMI_SetButton:
 27881                           	opt stack 0
 27882                           tosu	equ	0xFFF
 27883                           tosh	equ	0xFFE
 27884                           tosl	equ	0xFFD
 27885                           pclath	equ	0xFFA
 27886                           tblptru	equ	0xFF8
 27887                           tblptrh	equ	0xFF7
 27888                           tblptrl	equ	0xFF6
 27889                           tablat	equ	0xFF5
 27890                           prodh	equ	0xFF4
 27891                           prodl	equ	0xFF3
 27892                           intcon	equ	0xFF2
 27893                           postinc0	equ	0xFEE
 27894                           wreg	equ	0xFE8
 27895                           indf1	equ	0xFE7
 27896                           postdec1	equ	0xFE5
 27897                           fsr1h	equ	0xFE2
 27898                           fsr1l	equ	0xFE1
 27899                           indf2	equ	0xFDF
 27900                           postinc2	equ	0xFDE
 27901                           postdec2	equ	0xFDD
 27902                           plusw2	equ	0xFDB
 27903                           fsr2h	equ	0xFDA
 27904                           fsr2l	equ	0xFD9
 27905                           status	equ	0xFD8
 27906                           
 27907 ;; *************** function _LED_Toggle *****************
 27908 ;; Defined at:
 27909 ;;		line 50 in file "Library/LED.c"
 27910 ;; Parameters:    Size  Location     Type
 27911 ;;  pLED            1    wreg     enum E6739
 27912 ;; Auto vars:     Size  Location     Type
 27913 ;;  pLED            1   24[BANK0 ] enum E6739
 27914 ;; Return value:  Size  Location     Type
 27915 ;;                  1    wreg      void 
 27916 ;; Registers used:
 27917 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27918 ;; Tracked objects:
 27919 ;;		On entry : 0/0
 27920 ;;		On exit  : 0/0
 27921 ;;		Unchanged: 0/0
 27922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27924 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27926 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27927 ;;Total ram usage:        1 bytes
 27928 ;; Hardware stack levels used:    1
 27929 ;; Hardware stack levels required when called:   12
 27930 ;; This function calls:
 27931 ;;		_Port_TogglePin
 27932 ;; This function is called by:
 27933 ;;		_LCD_Reset
 27934 ;;		_Event_DIPSwitch
 27935 ;;		_Event_TestButton
 27936 ;;		_Event_ADCSequenceComplete
 27937 ;;		_Event_HMI_DIPSwitch
 27938 ;;		_Event_HMI_LeftButton
 27939 ;;		_Event_HMI_RightButton
 27940 ;;		_Event_HMI_UpButton
 27941 ;;		_Event_HMI_DownButton
 27942 ;; This function uses a non-reentrant model
 27943 ;;
 27944                           
 27945                           	psect	text147
 27946  015BC0                     __ptext147:
 27947                           	opt stack 0
 27948  015BC0                     _LED_Toggle:
 27949                           	opt stack 14
 27950                           
 27951                           ; BSR set to: 3
 27952                           ;incstack = 0
 27953                           ;LED_Toggle@pLED stored from wreg
 27954  015BC0  0100               	movlb	0	; () banked
 27955  015BC2  6F78               	movwf	LED_Toggle@pLED& (0+255),b
 27956                           
 27957                           ;LED.c: 52: switch (pLED)
 27958  015BC4  D018               	goto	l234
 27959  015BC6                     
 27960                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 27961  015BC6  0EEA               	movlw	low _PortC
 27962  015BC8  0100               	movlb	0	; () banked
 27963  015BCA  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 27964  015BCC  0E00               	movlw	high _PortC
 27965  015BCE  0100               	movlb	0	; () banked
 27966  015BD0  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 27967  015BD2  0E00               	movlw	0
 27968  015BD4  0100               	movlb	0	; () banked
 27969  015BD6  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 27970  015BD8  EC68  F0B0         	call	_Port_TogglePin	;wreg free
 27971                           
 27972                           ;LED.c: 56: break;
 27973  015BDC  0012               	return	
 27974  015BDE                     
 27975                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 27976  015BDE  0EEA               	movlw	low _PortC
 27977  015BE0  0100               	movlb	0	; () banked
 27978  015BE2  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 27979  015BE4  0E00               	movlw	high _PortC
 27980  015BE6  0100               	movlb	0	; () banked
 27981  015BE8  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 27982  015BEA  0E01               	movlw	1
 27983  015BEC  0100               	movlb	0	; () banked
 27984  015BEE  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 27985  015BF0  EC68  F0B0         	call	_Port_TogglePin	;wreg free
 27986                           
 27987                           ;LED.c: 60: }
 27988                           
 27989                           ;LED.c: 59: break;
 27990  015BF4  0012               	return	
 27991  015BF6                     l234:
 27992  015BF6  0100               	movlb	0	; () banked
 27993  015BF8  5178               	movf	LED_Toggle@pLED& (0+255),w,b
 27994                           
 27995                           ; Switch size 1, requested type "space"
 27996                           ; Number of cases is 2, Range of values is 0 to 1
 27997                           ; switch strategies available:
 27998                           ; Name         Instructions Cycles
 27999                           ; simple_byte            7     4 (average)
 28000                           ;	Chosen strategy is simple_byte
 28001  015BFA  0A00               	xorlw	0	; case 0
 28002  015BFC  B4D8               	btfsc	status,2,c
 28003  015BFE  D7E3               	goto	l235
 28004  015C00  0A01               	xorlw	1	; case 1
 28005  015C02  A4D8               	btfss	status,2,c
 28006  015C04  0012               	return	
 28007  015C06  D7EB               	goto	l237
 28008  015C08                     __end_of_LED_Toggle:
 28009                           	opt stack 0
 28010                           tosu	equ	0xFFF
 28011                           tosh	equ	0xFFE
 28012                           tosl	equ	0xFFD
 28013                           pclath	equ	0xFFA
 28014                           tblptru	equ	0xFF8
 28015                           tblptrh	equ	0xFF7
 28016                           tblptrl	equ	0xFF6
 28017                           tablat	equ	0xFF5
 28018                           prodh	equ	0xFF4
 28019                           prodl	equ	0xFF3
 28020                           intcon	equ	0xFF2
 28021                           postinc0	equ	0xFEE
 28022                           wreg	equ	0xFE8
 28023                           indf1	equ	0xFE7
 28024                           postdec1	equ	0xFE5
 28025                           fsr1h	equ	0xFE2
 28026                           fsr1l	equ	0xFE1
 28027                           indf2	equ	0xFDF
 28028                           postinc2	equ	0xFDE
 28029                           postdec2	equ	0xFDD
 28030                           plusw2	equ	0xFDB
 28031                           fsr2h	equ	0xFDA
 28032                           fsr2l	equ	0xFD9
 28033                           status	equ	0xFD8
 28034                           
 28035 ;; *************** function _Port_TogglePin *****************
 28036 ;; Defined at:
 28037 ;;		line 278 in file "Library/Port.c"
 28038 ;; Parameters:    Size  Location     Type
 28039 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 28040 ;;		 -> PortC(10), 
 28041 ;;  pPin            1   22[BANK0 ] enum E6750
 28042 ;; Auto vars:     Size  Location     Type
 28043 ;;  Value           1   23[BANK0 ] unsigned char 
 28044 ;; Return value:  Size  Location     Type
 28045 ;;                  1    wreg      void 
 28046 ;; Registers used:
 28047 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28048 ;; Tracked objects:
 28049 ;;		On entry : 0/0
 28050 ;;		On exit  : 0/0
 28051 ;;		Unchanged: 0/0
 28052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28053 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28054 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28056 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28057 ;;Total ram usage:        4 bytes
 28058 ;; Hardware stack levels used:    1
 28059 ;; Hardware stack levels required when called:   11
 28060 ;; This function calls:
 28061 ;;		_Port_GetPin
 28062 ;;		_Port_SetPin
 28063 ;; This function is called by:
 28064 ;;		_LED_Toggle
 28065 ;; This function uses a non-reentrant model
 28066 ;;
 28067                           
 28068                           	psect	text148
 28069  0160D0                     __ptext148:
 28070                           	opt stack 0
 28071  0160D0                     _Port_TogglePin:
 28072                           	opt stack 14
 28073                           
 28074                           ;Port.c: 280: UINT8 Value;
 28075                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 28076                           
 28077                           ;incstack = 0
 28078  0160D0  C074  F060         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 28079  0160D4  C075  F061         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 28080  0160D8  C076  F062         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 28081  0160DC  EC6D  F0AE         	call	_Port_GetPin	;wreg free
 28082  0160E0  0100               	movlb	0	; () banked
 28083  0160E2  6F77               	movwf	Port_TogglePin@Value& (0+255),b
 28084                           
 28085                           ; BSR set to: 0
 28086                           ;Port.c: 282: Value ^= 0x01;
 28087  0160E4  0E01               	movlw	1
 28088  0160E6  0100               	movlb	0	; () banked
 28089  0160E8  1B77               	xorwf	Port_TogglePin@Value& (0+255),f,b
 28090                           
 28091                           ; BSR set to: 0
 28092                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 28093  0160EA  C074  F06F         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 28094  0160EE  C075  F070         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 28095  0160F2  C076  F071         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 28096  0160F6  C077  F072         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 28097  0160FA  EC59  F09F         	call	_Port_SetPin	;wreg free
 28098  0160FE  0012               	return		;funcret
 28099  016100                     __end_of_Port_TogglePin:
 28100                           	opt stack 0
 28101                           tosu	equ	0xFFF
 28102                           tosh	equ	0xFFE
 28103                           tosl	equ	0xFFD
 28104                           pclath	equ	0xFFA
 28105                           tblptru	equ	0xFF8
 28106                           tblptrh	equ	0xFF7
 28107                           tblptrl	equ	0xFF6
 28108                           tablat	equ	0xFF5
 28109                           prodh	equ	0xFF4
 28110                           prodl	equ	0xFF3
 28111                           intcon	equ	0xFF2
 28112                           postinc0	equ	0xFEE
 28113                           wreg	equ	0xFE8
 28114                           indf1	equ	0xFE7
 28115                           postdec1	equ	0xFE5
 28116                           fsr1h	equ	0xFE2
 28117                           fsr1l	equ	0xFE1
 28118                           indf2	equ	0xFDF
 28119                           postinc2	equ	0xFDE
 28120                           postdec2	equ	0xFDD
 28121                           plusw2	equ	0xFDB
 28122                           fsr2h	equ	0xFDA
 28123                           fsr2l	equ	0xFD9
 28124                           status	equ	0xFD8
 28125                           
 28126 ;; *************** function _Port_SetPin *****************
 28127 ;; Defined at:
 28128 ;;		line 247 in file "Library/Port.c"
 28129 ;; Parameters:    Size  Location     Type
 28130 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 28131 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 28132 ;;  pPin            1   17[BANK0 ] enum E6750
 28133 ;;  pValue          1   18[BANK0 ] unsigned char 
 28134 ;; Auto vars:     Size  Location     Type
 28135 ;;  Type            1   19[BANK0 ] enum E6795
 28136 ;; Return value:  Size  Location     Type
 28137 ;;                  1    wreg      void 
 28138 ;; Registers used:
 28139 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28140 ;; Tracked objects:
 28141 ;;		On entry : 0/0
 28142 ;;		On exit  : 0/0
 28143 ;;		Unchanged: 0/0
 28144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28145 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28146 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28148 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28149 ;;Total ram usage:        5 bytes
 28150 ;; Hardware stack levels used:    1
 28151 ;; Hardware stack levels required when called:   10
 28152 ;; This function calls:
 28153 ;;		_Byte_SetBit
 28154 ;;		_Word_GetPair
 28155 ;; This function is called by:
 28156 ;;		_Reset_Low
 28157 ;;		_Reset_High
 28158 ;;		_LED_Set
 28159 ;;		_Port_TogglePin
 28160 ;;		_Motor_Init
 28161 ;;		_Motor_Step
 28162 ;;		_MXK_Init
 28163 ;; This function uses a non-reentrant model
 28164 ;;
 28165                           
 28166                           	psect	text149
 28167  013EB2                     __ptext149:
 28168                           	opt stack 0
 28169  013EB2                     _Port_SetPin:
 28170                           	opt stack 17
 28171                           
 28172                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 28173                           
 28174                           ;incstack = 0
 28175  013EB2  0E08               	movlw	8
 28176  013EB4  0100               	movlb	0	; () banked
 28177  013EB6  256F               	addwf	Port_SetPin@pInput& (0+255),w,b
 28178  013EB8  0100               	movlb	0	; () banked
 28179  013EBA  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 28180  013EBC  0E00               	movlw	0
 28181  013EBE  0100               	movlb	0	; () banked
 28182  013EC0  2170               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 28183  013EC2  0100               	movlb	0	; () banked
 28184  013EC4  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 28185  013EC6  C071  F06E         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 28186  013ECA  EC70  F0AF         	call	_Word_GetPair	;wreg free
 28187  013ECE  0100               	movlb	0	; () banked
 28188  013ED0  6F73               	movwf	Port_SetPin@Type& (0+255),b
 28189                           
 28190                           ;Port.c: 250: switch (Type)
 28191  013ED2  D042               	goto	l427
 28192  013ED4                     
 28193                           ; BSR set to: 0
 28194                           ;Port.c: 256: pValue &= 1;
 28195                           
 28196                           ; BSR set to: 0
 28197  013ED4  0E01               	movlw	1
 28198  013ED6  0100               	movlb	0	; () banked
 28199  013ED8  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 28200                           
 28201                           ; BSR set to: 0
 28202                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 28203  013EDA  0100               	movlb	0	; () banked
 28204  013EDC  EE20 F002          	lfsr	2,2
 28205  013EE0  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 28206  013EE2  26D9               	addwf	fsr2l,f,c
 28207  013EE4  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 28208  013EE6  22DA               	addwfc	fsr2h,f,c
 28209  013EE8  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 28210  013EEC  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 28211  013EF0  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 28212  013EF4  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 28213  013EF8  EC8D  F0AB         	call	_Byte_SetBit	;wreg free
 28214                           
 28215                           ;Port.c: 258: break;
 28216  013EFC  0012               	return	
 28217  013EFE                     
 28218                           ;Port.c: 261: pValue &= 1;
 28219  013EFE  0E01               	movlw	1
 28220  013F00  0100               	movlb	0	; () banked
 28221  013F02  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 28222                           
 28223                           ;Port.c: 262: pValue ^= 1;
 28224  013F04  0E01               	movlw	1
 28225  013F06  0100               	movlb	0	; () banked
 28226  013F08  1B72               	xorwf	Port_SetPin@pValue& (0+255),f,b
 28227                           
 28228                           ; BSR set to: 0
 28229                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 28230  013F0A  0100               	movlb	0	; () banked
 28231  013F0C  EE20 F002          	lfsr	2,2
 28232  013F10  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 28233  013F12  26D9               	addwf	fsr2l,f,c
 28234  013F14  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 28235  013F16  22DA               	addwfc	fsr2h,f,c
 28236  013F18  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 28237  013F1C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 28238  013F20  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 28239  013F24  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 28240  013F28  EC8D  F0AB         	call	_Byte_SetBit	;wreg free
 28241                           
 28242                           ;Port.c: 264: break;
 28243  013F2C  0012               	return	
 28244  013F2E                     
 28245                           ;Port.c: 266: pValue &= 1;
 28246  013F2E  0E01               	movlw	1
 28247  013F30  0100               	movlb	0	; () banked
 28248  013F32  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 28249                           
 28250                           ; BSR set to: 0
 28251                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 28252  013F34  0100               	movlb	0	; () banked
 28253  013F36  EE20 F004          	lfsr	2,4
 28254  013F3A  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 28255  013F3C  26D9               	addwf	fsr2l,f,c
 28256  013F3E  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 28257  013F40  22DA               	addwfc	fsr2h,f,c
 28258  013F42  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 28259  013F46  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 28260  013F4A  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 28261  013F4E  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 28262  013F52  EC8D  F0AB         	call	_Byte_SetBit	;wreg free
 28263                           
 28264                           ;Port.c: 269: }
 28265                           
 28266                           ;Port.c: 268: break;
 28267  013F56  0012               	return	
 28268  013F58                     l427:
 28269  013F58  0100               	movlb	0	; () banked
 28270  013F5A  5173               	movf	Port_SetPin@Type& (0+255),w,b
 28271                           
 28272                           ; Switch size 1, requested type "space"
 28273                           ; Number of cases is 4, Range of values is 0 to 3
 28274                           ; switch strategies available:
 28275                           ; Name         Instructions Cycles
 28276                           ; simple_byte           13     7 (average)
 28277                           ;	Chosen strategy is simple_byte
 28278  013F5C  0A00               	xorlw	0	; case 0
 28279  013F5E  B4D8               	btfsc	status,2,c
 28280  013F60  0012               	return	
 28281  013F62  0A01               	xorlw	1	; case 1
 28282  013F64  B4D8               	btfsc	status,2,c
 28283  013F66  D7B6               	goto	l430
 28284  013F68  0A03               	xorlw	3	; case 2
 28285  013F6A  B4D8               	btfsc	status,2,c
 28286  013F6C  D7C8               	goto	l432
 28287  013F6E  0A01               	xorlw	1	; case 3
 28288  013F70  A4D8               	btfss	status,2,c
 28289  013F72  0012               	return	
 28290  013F74  D7DC               	goto	l433
 28291  013F76                     __end_of_Port_SetPin:
 28292                           	opt stack 0
 28293                           tosu	equ	0xFFF
 28294                           tosh	equ	0xFFE
 28295                           tosl	equ	0xFFD
 28296                           pclath	equ	0xFFA
 28297                           tblptru	equ	0xFF8
 28298                           tblptrh	equ	0xFF7
 28299                           tblptrl	equ	0xFF6
 28300                           tablat	equ	0xFF5
 28301                           prodh	equ	0xFF4
 28302                           prodl	equ	0xFF3
 28303                           intcon	equ	0xFF2
 28304                           postinc0	equ	0xFEE
 28305                           wreg	equ	0xFE8
 28306                           indf1	equ	0xFE7
 28307                           postdec1	equ	0xFE5
 28308                           fsr1h	equ	0xFE2
 28309                           fsr1l	equ	0xFE1
 28310                           indf2	equ	0xFDF
 28311                           postinc2	equ	0xFDE
 28312                           postdec2	equ	0xFDD
 28313                           plusw2	equ	0xFDB
 28314                           fsr2h	equ	0xFDA
 28315                           fsr2l	equ	0xFD9
 28316                           status	equ	0xFD8
 28317                           
 28318 ;; *************** function _Word_GetPair *****************
 28319 ;; Defined at:
 28320 ;;		line 156 in file "Library/Types.c"
 28321 ;; Parameters:    Size  Location     Type
 28322 ;;  pInput          2   12[BANK0 ] PTR struct Word
 28323 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 28324 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 28325 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 28326 ;;		 -> PortC(10), PortF(10), NULL(0), 
 28327 ;;  pPair           1   14[BANK0 ] unsigned char 
 28328 ;; Auto vars:     Size  Location     Type
 28329 ;;		None
 28330 ;; Return value:  Size  Location     Type
 28331 ;;                  1    wreg      unsigned char 
 28332 ;; Registers used:
 28333 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28334 ;; Tracked objects:
 28335 ;;		On entry : 0/0
 28336 ;;		On exit  : 0/0
 28337 ;;		Unchanged: 0/0
 28338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28339 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28342 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28343 ;;Total ram usage:        3 bytes
 28344 ;; Hardware stack levels used:    1
 28345 ;; Hardware stack levels required when called:    9
 28346 ;; This function calls:
 28347 ;;		_Byte_GetPair
 28348 ;; This function is called by:
 28349 ;;		_Port_Init
 28350 ;;		_Port_SetPin
 28351 ;;		_Port_Set
 28352 ;;		_PortProperty_Valid
 28353 ;;		_Port_SetPair
 28354 ;;		_Port_SetQuad
 28355 ;; This function uses a non-reentrant model
 28356 ;;
 28357                           
 28358                           	psect	text150
 28359  015EE0                     __ptext150:
 28360                           	opt stack 0
 28361  015EE0                     _Word_GetPair:
 28362                           	opt stack 17
 28363                           
 28364                           ;Types.c: 158: if (pPair >= 4)
 28365                           
 28366                           ;incstack = 0
 28367  015EE0  0E03               	movlw	3
 28368  015EE2  0100               	movlb	0	; () banked
 28369  015EE4  656E               	cpfsgt	Word_GetPair@pPair& (0+255),b
 28370  015EE6  D012               	goto	l781
 28371                           
 28372                           ; BSR set to: 0
 28373                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 28374  015EE8  0E01               	movlw	1
 28375  015EEA  0100               	movlb	0	; () banked
 28376  015EEC  256C               	addwf	Word_GetPair@pInput& (0+255),w,b
 28377  015EEE  0100               	movlb	0	; () banked
 28378  015EF0  6F69               	movwf	Byte_GetPair@pInput& (0+255),b
 28379  015EF2  0E00               	movlw	0
 28380  015EF4  0100               	movlb	0	; () banked
 28381  015EF6  216D               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 28382  015EF8  0100               	movlb	0	; () banked
 28383  015EFA  6F6A               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 28384  015EFC  0100               	movlb	0	; () banked
 28385  015EFE  516E               	movf	Word_GetPair@pPair& (0+255),w,b
 28386  015F00  0FFC               	addlw	252
 28387  015F02  0100               	movlb	0	; () banked
 28388  015F04  6F6B               	movwf	Byte_GetPair@pPair& (0+255),b
 28389  015F06  ECD8  F0B1         	call	_Byte_GetPair	;wreg free
 28390  015F0A  0012               	return	
 28391  015F0C                     l781:
 28392                           
 28393                           ;Types.c: 160: else
 28394                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 28395  015F0C  C06C  F069         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 28396  015F10  C06D  F06A         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 28397  015F14  C06E  F06B         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 28398  015F18  ECD8  F0B1         	call	_Byte_GetPair	;wreg free
 28399  015F1C  0012               	return	
 28400  015F1E                     __end_of_Word_GetPair:
 28401                           	opt stack 0
 28402                           tosu	equ	0xFFF
 28403                           tosh	equ	0xFFE
 28404                           tosl	equ	0xFFD
 28405                           pclath	equ	0xFFA
 28406                           tblptru	equ	0xFF8
 28407                           tblptrh	equ	0xFF7
 28408                           tblptrl	equ	0xFF6
 28409                           tablat	equ	0xFF5
 28410                           prodh	equ	0xFF4
 28411                           prodl	equ	0xFF3
 28412                           intcon	equ	0xFF2
 28413                           postinc0	equ	0xFEE
 28414                           wreg	equ	0xFE8
 28415                           indf1	equ	0xFE7
 28416                           postdec1	equ	0xFE5
 28417                           fsr1h	equ	0xFE2
 28418                           fsr1l	equ	0xFE1
 28419                           indf2	equ	0xFDF
 28420                           postinc2	equ	0xFDE
 28421                           postdec2	equ	0xFDD
 28422                           plusw2	equ	0xFDB
 28423                           fsr2h	equ	0xFDA
 28424                           fsr2l	equ	0xFD9
 28425                           status	equ	0xFD8
 28426                           
 28427 ;; *************** function _Byte_GetPair *****************
 28428 ;; Defined at:
 28429 ;;		line 87 in file "Library/Types.c"
 28430 ;; Parameters:    Size  Location     Type
 28431 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 28432 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 28433 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 28434 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 28435 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 28436 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 28437 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 28438 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 28439 ;;		 -> NULL(0), 
 28440 ;;  pPair           1   11[BANK0 ] unsigned char 
 28441 ;; Auto vars:     Size  Location     Type
 28442 ;;		None
 28443 ;; Return value:  Size  Location     Type
 28444 ;;                  1    wreg      unsigned char 
 28445 ;; Registers used:
 28446 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28447 ;; Tracked objects:
 28448 ;;		On entry : 0/0
 28449 ;;		On exit  : 0/0
 28450 ;;		Unchanged: 0/0
 28451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28452 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28455 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28456 ;;Total ram usage:        3 bytes
 28457 ;; Hardware stack levels used:    1
 28458 ;; Hardware stack levels required when called:    8
 28459 ;; This function calls:
 28460 ;;		_Byte_GetZone
 28461 ;; This function is called by:
 28462 ;;		_Word_GetPair
 28463 ;; This function uses a non-reentrant model
 28464 ;;
 28465                           
 28466                           	psect	text151
 28467  0163B0                     __ptext151:
 28468                           	opt stack 0
 28469  0163B0                     _Byte_GetPair:
 28470                           	opt stack 17
 28471                           
 28472                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 28473                           
 28474                           ;incstack = 0
 28475  0163B0  C069  F060         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 28476  0163B4  C06A  F061         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 28477  0163B8  0E04               	movlw	4
 28478  0163BA  0100               	movlb	0	; () banked
 28479  0163BC  6F62               	movwf	Byte_GetZone@pMax& (0+255),b
 28480  0163BE  C06B  F063         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 28481  0163C2  0E02               	movlw	2
 28482  0163C4  0100               	movlb	0	; () banked
 28483  0163C6  6F64               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 28484  0163C8  EC8E  F0A5         	call	_Byte_GetZone	;wreg free
 28485  0163CC  0012               	return	
 28486  0163CE                     __end_of_Byte_GetPair:
 28487                           	opt stack 0
 28488                           tosu	equ	0xFFF
 28489                           tosh	equ	0xFFE
 28490                           tosl	equ	0xFFD
 28491                           pclath	equ	0xFFA
 28492                           tblptru	equ	0xFF8
 28493                           tblptrh	equ	0xFF7
 28494                           tblptrl	equ	0xFF6
 28495                           tablat	equ	0xFF5
 28496                           prodh	equ	0xFF4
 28497                           prodl	equ	0xFF3
 28498                           intcon	equ	0xFF2
 28499                           postinc0	equ	0xFEE
 28500                           wreg	equ	0xFE8
 28501                           indf1	equ	0xFE7
 28502                           postdec1	equ	0xFE5
 28503                           fsr1h	equ	0xFE2
 28504                           fsr1l	equ	0xFE1
 28505                           indf2	equ	0xFDF
 28506                           postinc2	equ	0xFDE
 28507                           postdec2	equ	0xFDD
 28508                           plusw2	equ	0xFDB
 28509                           fsr2h	equ	0xFDA
 28510                           fsr2l	equ	0xFD9
 28511                           status	equ	0xFD8
 28512                           
 28513 ;; *************** function _Byte_GetZone *****************
 28514 ;; Defined at:
 28515 ;;		line 64 in file "Library/Types.c"
 28516 ;; Parameters:    Size  Location     Type
 28517 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 28518 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 28519 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 28520 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 28521 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 28522 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 28523 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 28524 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 28525 ;;		 -> NULL(0), 
 28526 ;;  pMax            1    2[BANK0 ] unsigned char 
 28527 ;;  pChunk          1    3[BANK0 ] unsigned char 
 28528 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 28529 ;; Auto vars:     Size  Location     Type
 28530 ;;  Output          1    8[BANK0 ] unsigned char 
 28531 ;;  Offset          1    7[BANK0 ] unsigned char 
 28532 ;;  MASK            1    6[BANK0 ] unsigned char 
 28533 ;; Return value:  Size  Location     Type
 28534 ;;                  1    wreg      unsigned char 
 28535 ;; Registers used:
 28536 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 28537 ;; Tracked objects:
 28538 ;;		On entry : 0/0
 28539 ;;		On exit  : 0/0
 28540 ;;		Unchanged: 0/0
 28541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28542 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28543 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28544 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28545 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28546 ;;Total ram usage:        9 bytes
 28547 ;; Hardware stack levels used:    1
 28548 ;; Hardware stack levels required when called:    7
 28549 ;; This function calls:
 28550 ;;		Nothing
 28551 ;; This function is called by:
 28552 ;;		_Byte_GetPair
 28553 ;;		_Byte_GetTriple
 28554 ;;		_Byte_GetQuad
 28555 ;; This function uses a non-reentrant model
 28556 ;;
 28557                           
 28558                           	psect	text152
 28559  014B1C                     __ptext152:
 28560                           	opt stack 0
 28561  014B1C                     _Byte_GetZone:
 28562                           	opt stack 17
 28563                           
 28564                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 28565                           
 28566                           ;incstack = 0
 28567  014B1C  C060  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 28568  014B20  C061  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 28569  014B24  0E00               	movlw	low (__mediumconst shr (0+16))
 28570  014B26  6EF8               	movwf	tblptru,c
 28571  014B28  0E0F               	movlw	(high __ramtop+-1)
 28572  014B2A  64F7               	cpfsgt	tblptrh,c
 28573  014B2C  D003               	bra	u8667
 28574  014B2E  0008               	tblrd		*
 28575  014B30  50F5               	movf	tablat,w,c
 28576  014B32  D005               	bra	u8660
 28577  014B34                     u8667:
 28578  014B34  CFF6 FFE9          	movff	tblptrl,fsr0l
 28579  014B38  CFF7 FFEA          	movff	tblptrh,fsr0h
 28580  014B3C  50EF               	movf	indf0,w,c
 28581  014B3E                     u8660:
 28582  014B3E  0100               	movlb	0	; () banked
 28583  014B40  6F68               	movwf	Byte_GetZone@Output& (0+255),b
 28584                           
 28585                           ; BSR set to: 0
 28586                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 28587  014B42  0100               	movlb	0	; () banked
 28588  014B44  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 28589  014B46  0D01               	mullw	1
 28590  014B48  0E75               	movlw	low _MASKS
 28591  014B4A  24F3               	addwf	prodl,w,c
 28592  014B4C  6EF6               	movwf	tblptrl,c
 28593  014B4E  0EFD               	movlw	high _MASKS
 28594  014B50  20F4               	addwfc	prodh,w,c
 28595  014B52  6EF7               	movwf	tblptrh,c
 28596  014B54                     	if	1	;There are 3 active tblptr bytes
 28597  014B54  6AF8               	clrf	tblptru,c
 28598  014B56  0E00               	movlw	low (__mediumconst shr (0+16))
 28599  014B58  22F8               	addwfc	tblptru,f,c
 28600  014B5A                     	endif
 28601  014B5A  0008               	tblrd		*
 28602  014B5C  CFF5 F066          	movff	tablat,Byte_GetZone@MASK
 28603                           
 28604                           ; BSR set to: 0
 28605                           ;Types.c: 68: UINT8 Offset = 0;
 28606  014B60  0E00               	movlw	0
 28607  014B62  0100               	movlb	0	; () banked
 28608  014B64  6F67               	movwf	Byte_GetZone@Offset& (0+255),b
 28609                           
 28610                           ;Types.c: 70: while (pChunk >= pMax)
 28611  014B66  D006               	goto	l732
 28612  014B68                     
 28613                           ; BSR set to: 0
 28614                           ;Types.c: 71: {
 28615                           ;Types.c: 72: pChunk -= pMax;
 28616                           
 28617                           ; BSR set to: 0
 28618  014B68  0100               	movlb	0	; () banked
 28619  014B6A  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 28620  014B6C  0100               	movlb	0	; () banked
 28621  014B6E  5F63               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 28622                           
 28623                           ; BSR set to: 0
 28624                           ;Types.c: 73: Offset += 1;
 28625  014B70  0100               	movlb	0	; () banked
 28626  014B72  2B67               	incf	Byte_GetZone@Offset& (0+255),f,b
 28627  014B74                     l732:
 28628                           
 28629                           ; BSR set to: 0
 28630                           
 28631                           ; BSR set to: 0
 28632  014B74  0100               	movlb	0	; () banked
 28633  014B76  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 28634  014B78  0100               	movlb	0	; () banked
 28635  014B7A  5D63               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 28636  014B7C  B0D8               	btfsc	status,0,c
 28637  014B7E  D7F4               	goto	l733
 28638                           
 28639                           ; BSR set to: 0
 28640                           ;Types.c: 74: }
 28641                           ;Types.c: 75: pChunk *= pChunkSize;
 28642                           
 28643                           ; BSR set to: 0
 28644  014B80  0100               	movlb	0	; () banked
 28645  014B82  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 28646  014B84  0100               	movlb	0	; () banked
 28647  014B86  0363               	mulwf	Byte_GetZone@pChunk& (0+255),b
 28648  014B88  50F3               	movf	prodl,w,c
 28649  014B8A  6F63               	movwf	Byte_GetZone@pChunk& (0+255),b
 28650                           
 28651                           ; BSR set to: 0
 28652                           ;Types.c: 76: pChunk += Offset;
 28653  014B8C  0100               	movlb	0	; () banked
 28654  014B8E  5167               	movf	Byte_GetZone@Offset& (0+255),w,b
 28655  014B90  0100               	movlb	0	; () banked
 28656  014B92  2763               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 28657                           
 28658                           ; BSR set to: 0
 28659                           ;Types.c: 78: Output >>= pChunk;
 28660  014B94  0100               	movlb	0	; () banked
 28661  014B96  2963               	incf	Byte_GetZone@pChunk& (0+255),w,b
 28662  014B98  0100               	movlb	0	; () banked
 28663  014B9A  6F65               	movwf	??_Byte_GetZone& (0+255),b
 28664  014B9C  D003               	goto	u8680
 28665  014B9E                     u8685:
 28666  014B9E  0100               	movlb	0	; () banked
 28667  014BA0  90D8               	bcf	status,0,c
 28668  014BA2  3368               	rrcf	Byte_GetZone@Output& (0+255),f,b
 28669  014BA4                     u8680:
 28670  014BA4  0100               	movlb	0	; () banked
 28671  014BA6  2F65               	decfsz	??_Byte_GetZone& (0+255),f,b
 28672  014BA8  D7FA               	goto	u8685
 28673                           
 28674                           ;Types.c: 79: Output &= MASK;
 28675  014BAA  0100               	movlb	0	; () banked
 28676  014BAC  5166               	movf	Byte_GetZone@MASK& (0+255),w,b
 28677  014BAE  0100               	movlb	0	; () banked
 28678  014BB0  1768               	andwf	Byte_GetZone@Output& (0+255),f,b
 28679                           
 28680                           ; BSR set to: 0
 28681                           ;Types.c: 80: return Output;
 28682  014BB2  0100               	movlb	0	; () banked
 28683  014BB4  5168               	movf	Byte_GetZone@Output& (0+255),w,b
 28684  014BB6  0012               	return	
 28685  014BB8                     __end_of_Byte_GetZone:
 28686                           	opt stack 0
 28687                           tosu	equ	0xFFF
 28688                           tosh	equ	0xFFE
 28689                           tosl	equ	0xFFD
 28690                           pclath	equ	0xFFA
 28691                           tblptru	equ	0xFF8
 28692                           tblptrh	equ	0xFF7
 28693                           tblptrl	equ	0xFF6
 28694                           tablat	equ	0xFF5
 28695                           prodh	equ	0xFF4
 28696                           prodl	equ	0xFF3
 28697                           intcon	equ	0xFF2
 28698                           indf0	equ	0xFEF
 28699                           postinc0	equ	0xFEE
 28700                           fsr0h	equ	0xFEA
 28701                           fsr0l	equ	0xFE9
 28702                           wreg	equ	0xFE8
 28703                           indf1	equ	0xFE7
 28704                           postdec1	equ	0xFE5
 28705                           fsr1h	equ	0xFE2
 28706                           fsr1l	equ	0xFE1
 28707                           indf2	equ	0xFDF
 28708                           postinc2	equ	0xFDE
 28709                           postdec2	equ	0xFDD
 28710                           plusw2	equ	0xFDB
 28711                           fsr2h	equ	0xFDA
 28712                           fsr2l	equ	0xFD9
 28713                           status	equ	0xFD8
 28714                           
 28715 ;; *************** function _Byte_SetBit *****************
 28716 ;; Defined at:
 28717 ;;		line 32 in file "Library/Types.c"
 28718 ;; Parameters:    Size  Location     Type
 28719 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 28720 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 28721 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 28722 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 28723 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 28724 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 28725 ;;		 -> NULL(0), 
 28726 ;;  pBit            1    2[BANK0 ] unsigned char 
 28727 ;;  pValue          1    3[BANK0 ] unsigned char 
 28728 ;; Auto vars:     Size  Location     Type
 28729 ;;		None
 28730 ;; Return value:  Size  Location     Type
 28731 ;;                  1    wreg      void 
 28732 ;; Registers used:
 28733 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 28734 ;; Tracked objects:
 28735 ;;		On entry : 0/0
 28736 ;;		On exit  : 0/0
 28737 ;;		Unchanged: 0/0
 28738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28739 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28741 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28742 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28743 ;;Total ram usage:        7 bytes
 28744 ;; Hardware stack levels used:    1
 28745 ;; Hardware stack levels required when called:    7
 28746 ;; This function calls:
 28747 ;;		Nothing
 28748 ;; This function is called by:
 28749 ;;		_Port_SetPinType
 28750 ;;		_Port_SetPin
 28751 ;;		_SPI_Init
 28752 ;;		_SPI_MinSpeed
 28753 ;;		_SPI_MaxSpeed
 28754 ;;		_Word_SetBit
 28755 ;;		_I2C_Init
 28756 ;; This function uses a non-reentrant model
 28757 ;;
 28758                           
 28759                           	psect	text153
 28760  01571A                     __ptext153:
 28761                           	opt stack 0
 28762  01571A                     _Byte_SetBit:
 28763                           	opt stack 19
 28764                           
 28765                           ;Types.c: 34: pValue &= 1;
 28766                           
 28767                           ; BSR set to: 0
 28768                           ;incstack = 0
 28769  01571A  0E01               	movlw	1
 28770  01571C  0100               	movlb	0	; () banked
 28771  01571E  1763               	andwf	Byte_SetBit@pValue& (0+255),f,b
 28772                           
 28773                           ; BSR set to: 0
 28774                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 28775  015720  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 28776  015724  0E01               	movlw	1
 28777  015726  0100               	movlb	0	; () banked
 28778  015728  6F65               	movwf	(??_Byte_SetBit+1)& (0+255),b
 28779  01572A  0100               	movlb	0	; () banked
 28780  01572C  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 28781  01572E  D003               	goto	u8734
 28782  015730                     u8735:
 28783  015730  0100               	movlb	0	; () banked
 28784  015732  90D8               	bcf	status,0,c
 28785  015734  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 28786  015736                     u8734:
 28787  015736  0100               	movlb	0	; () banked
 28788  015738  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 28789  01573A  D7FA               	goto	u8735
 28790  01573C  0100               	movlb	0	; () banked
 28791  01573E  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 28792  015740  0AFF               	xorlw	255
 28793  015742  0100               	movlb	0	; () banked
 28794  015744  6F66               	movwf	(??_Byte_SetBit+2)& (0+255),b
 28795  015746  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 28796  01574A  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 28797  01574E  0100               	movlb	0	; () banked
 28798  015750  5166               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 28799  015752  16DF               	andwf	indf2,f,c
 28800                           
 28801                           ; BSR set to: 0
 28802                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 28803  015754  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 28804  015758  C063  F065         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 28805  01575C  0100               	movlb	0	; () banked
 28806  01575E  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 28807  015760  D003               	goto	u8744
 28808  015762                     u8745:
 28809  015762  0100               	movlb	0	; () banked
 28810  015764  90D8               	bcf	status,0,c
 28811  015766  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 28812  015768                     u8744:
 28813  015768  0100               	movlb	0	; () banked
 28814  01576A  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 28815  01576C  D7FA               	goto	u8745
 28816  01576E  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 28817  015772  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 28818  015776  0100               	movlb	0	; () banked
 28819  015778  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 28820  01577A  12DF               	iorwf	indf2,f,c
 28821                           
 28822                           ; BSR set to: 0
 28823  01577C  0012               	return		;funcret
 28824  01577E                     __end_of_Byte_SetBit:
 28825                           	opt stack 0
 28826                           tosu	equ	0xFFF
 28827                           tosh	equ	0xFFE
 28828                           tosl	equ	0xFFD
 28829                           pclath	equ	0xFFA
 28830                           tblptru	equ	0xFF8
 28831                           tblptrh	equ	0xFF7
 28832                           tblptrl	equ	0xFF6
 28833                           tablat	equ	0xFF5
 28834                           prodh	equ	0xFF4
 28835                           prodl	equ	0xFF3
 28836                           intcon	equ	0xFF2
 28837                           indf0	equ	0xFEF
 28838                           postinc0	equ	0xFEE
 28839                           fsr0h	equ	0xFEA
 28840                           fsr0l	equ	0xFE9
 28841                           wreg	equ	0xFE8
 28842                           indf1	equ	0xFE7
 28843                           postdec1	equ	0xFE5
 28844                           fsr1h	equ	0xFE2
 28845                           fsr1l	equ	0xFE1
 28846                           indf2	equ	0xFDF
 28847                           postinc2	equ	0xFDE
 28848                           postdec2	equ	0xFDD
 28849                           plusw2	equ	0xFDB
 28850                           fsr2h	equ	0xFDA
 28851                           fsr2l	equ	0xFD9
 28852                           status	equ	0xFD8
 28853                           
 28854 ;; *************** function _Port_GetPin *****************
 28855 ;; Defined at:
 28856 ;;		line 271 in file "Library/Port.c"
 28857 ;; Parameters:    Size  Location     Type
 28858 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 28859 ;;		 -> PortB(10), PortE(10), PortC(10), 
 28860 ;;  pPin            1    2[BANK0 ] enum E6750
 28861 ;; Auto vars:     Size  Location     Type
 28862 ;;  Output          1    5[BANK0 ] unsigned char 
 28863 ;; Return value:  Size  Location     Type
 28864 ;;                  1    wreg      unsigned char 
 28865 ;; Registers used:
 28866 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 28867 ;; Tracked objects:
 28868 ;;		On entry : 0/0
 28869 ;;		On exit  : 0/0
 28870 ;;		Unchanged: 0/0
 28871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28872 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28873 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28874 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28875 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28876 ;;Total ram usage:        6 bytes
 28877 ;; Hardware stack levels used:    1
 28878 ;; Hardware stack levels required when called:    7
 28879 ;; This function calls:
 28880 ;;		Nothing
 28881 ;; This function is called by:
 28882 ;;		_Port_TogglePin
 28883 ;;		_HMI_LeftSwitch
 28884 ;;		_HMI_RightSwitch
 28885 ;;		_HMI_UpSwitch
 28886 ;;		_HMI_DownSwitch
 28887 ;;		_MXK_TestButton
 28888 ;; This function uses a non-reentrant model
 28889 ;;
 28890                           
 28891                           	psect	text154
 28892  015CDA                     __ptext154:
 28893                           	opt stack 0
 28894  015CDA                     _Port_GetPin:
 28895                           	opt stack 19
 28896                           
 28897                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 28898                           
 28899                           ; BSR set to: 0
 28900                           ;incstack = 0
 28901  015CDA  0100               	movlb	0	; () banked
 28902  015CDC  EE20 F006          	lfsr	2,6
 28903  015CE0  5160               	movf	Port_GetPin@pInput& (0+255),w,b
 28904  015CE2  26D9               	addwf	fsr2l,f,c
 28905  015CE4  5161               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 28906  015CE6  22DA               	addwfc	fsr2h,f,c
 28907  015CE8  CFDE F063          	movff	postinc2,??_Port_GetPin
 28908  015CEC  CFDD F064          	movff	postdec2,??_Port_GetPin+1
 28909  015CF0  C063  FFD9         	movff	??_Port_GetPin,fsr2l
 28910  015CF4  C064  FFDA         	movff	??_Port_GetPin+1,fsr2h
 28911  015CF8  50DF               	movf	indf2,w,c
 28912  015CFA  0100               	movlb	0	; () banked
 28913  015CFC  6F65               	movwf	Port_GetPin@Output& (0+255),b
 28914                           
 28915                           ; BSR set to: 0
 28916                           ;Port.c: 274: Output >>= (UINT8)pPin;
 28917  015CFE  0100               	movlb	0	; () banked
 28918  015D00  2962               	incf	Port_GetPin@pPin& (0+255),w,b
 28919  015D02  0100               	movlb	0	; () banked
 28920  015D04  6F63               	movwf	??_Port_GetPin& (0+255),b
 28921  015D06  D003               	goto	u8790
 28922  015D08                     u8795:
 28923  015D08  0100               	movlb	0	; () banked
 28924  015D0A  90D8               	bcf	status,0,c
 28925  015D0C  3365               	rrcf	Port_GetPin@Output& (0+255),f,b
 28926  015D0E                     u8790:
 28927  015D0E  0100               	movlb	0	; () banked
 28928  015D10  2F63               	decfsz	??_Port_GetPin& (0+255),f,b
 28929  015D12  D7FA               	goto	u8795
 28930                           
 28931                           ;Port.c: 275: Output &= 1;
 28932  015D14  0E01               	movlw	1
 28933  015D16  0100               	movlb	0	; () banked
 28934  015D18  1765               	andwf	Port_GetPin@Output& (0+255),f,b
 28935                           
 28936                           ; BSR set to: 0
 28937                           ;Port.c: 276: return Output;
 28938  015D1A  0100               	movlb	0	; () banked
 28939  015D1C  5165               	movf	Port_GetPin@Output& (0+255),w,b
 28940  015D1E  0012               	return	
 28941  015D20                     __end_of_Port_GetPin:
 28942                           	opt stack 0
 28943                           tosu	equ	0xFFF
 28944                           tosh	equ	0xFFE
 28945                           tosl	equ	0xFFD
 28946                           pclath	equ	0xFFA
 28947                           tblptru	equ	0xFF8
 28948                           tblptrh	equ	0xFF7
 28949                           tblptrl	equ	0xFF6
 28950                           tablat	equ	0xFF5
 28951                           prodh	equ	0xFF4
 28952                           prodl	equ	0xFF3
 28953                           intcon	equ	0xFF2
 28954                           indf0	equ	0xFEF
 28955                           postinc0	equ	0xFEE
 28956                           fsr0h	equ	0xFEA
 28957                           fsr0l	equ	0xFE9
 28958                           wreg	equ	0xFE8
 28959                           indf1	equ	0xFE7
 28960                           postdec1	equ	0xFE5
 28961                           fsr1h	equ	0xFE2
 28962                           fsr1l	equ	0xFE1
 28963                           indf2	equ	0xFDF
 28964                           postinc2	equ	0xFDE
 28965                           postdec2	equ	0xFDD
 28966                           plusw2	equ	0xFDB
 28967                           fsr2h	equ	0xFDA
 28968                           fsr2l	equ	0xFD9
 28969                           status	equ	0xFD8
 28970                           
 28971 ;; *************** function _HMI_SetBar *****************
 28972 ;; Defined at:
 28973 ;;		line 205 in file "HMI.c"
 28974 ;; Parameters:    Size  Location     Type
 28975 ;;  pValue          1    wreg     unsigned char 
 28976 ;; Auto vars:     Size  Location     Type
 28977 ;;  pValue          1    0[BANK0 ] unsigned char 
 28978 ;; Return value:  Size  Location     Type
 28979 ;;                  1    wreg      void 
 28980 ;; Registers used:
 28981 ;;		wreg
 28982 ;; Tracked objects:
 28983 ;;		On entry : 0/0
 28984 ;;		On exit  : 0/0
 28985 ;;		Unchanged: 0/0
 28986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28988 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28990 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28991 ;;Total ram usage:        1 bytes
 28992 ;; Hardware stack levels used:    1
 28993 ;; Hardware stack levels required when called:    7
 28994 ;; This function calls:
 28995 ;;		Nothing
 28996 ;; This function is called by:
 28997 ;;		_Event_DIPSwitch
 28998 ;;		_Event_HMI_DIPSwitch
 28999 ;;		_Event_HMI_LeftButton
 29000 ;;		_Event_HMI_RightButton
 29001 ;; This function uses a non-reentrant model
 29002 ;;
 29003                           
 29004                           	psect	text155
 29005  01660C                     __ptext155:
 29006                           	opt stack 0
 29007  01660C                     _HMI_SetBar:
 29008                           	opt stack 19
 29009                           
 29010                           ; BSR set to: 0
 29011                           ;incstack = 0
 29012                           ;HMI_SetBar@pValue stored from wreg
 29013  01660C  0100               	movlb	0	; () banked
 29014  01660E  6F60               	movwf	HMI_SetBar@pValue& (0+255),b
 29015                           
 29016                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
 29017  016610  C060  F327         	movff	HMI_SetBar@pValue,_HMIBoard+7
 29018  016614  0012               	return		;funcret
 29019  016616                     __end_of_HMI_SetBar:
 29020                           	opt stack 0
 29021                           tosu	equ	0xFFF
 29022                           tosh	equ	0xFFE
 29023                           tosl	equ	0xFFD
 29024                           pclath	equ	0xFFA
 29025                           tblptru	equ	0xFF8
 29026                           tblptrh	equ	0xFF7
 29027                           tblptrl	equ	0xFF6
 29028                           tablat	equ	0xFF5
 29029                           prodh	equ	0xFF4
 29030                           prodl	equ	0xFF3
 29031                           intcon	equ	0xFF2
 29032                           indf0	equ	0xFEF
 29033                           postinc0	equ	0xFEE
 29034                           fsr0h	equ	0xFEA
 29035                           fsr0l	equ	0xFE9
 29036                           wreg	equ	0xFE8
 29037                           indf1	equ	0xFE7
 29038                           postdec1	equ	0xFE5
 29039                           fsr1h	equ	0xFE2
 29040                           fsr1l	equ	0xFE1
 29041                           indf2	equ	0xFDF
 29042                           postinc2	equ	0xFDE
 29043                           postdec2	equ	0xFDD
 29044                           plusw2	equ	0xFDB
 29045                           fsr2h	equ	0xFDA
 29046                           fsr2l	equ	0xFD9
 29047                           status	equ	0xFD8
 29048                           
 29049 ;; *************** function _HMI_GetBar *****************
 29050 ;; Defined at:
 29051 ;;		line 209 in file "HMI.c"
 29052 ;; Parameters:    Size  Location     Type
 29053 ;;		None
 29054 ;; Auto vars:     Size  Location     Type
 29055 ;;		None
 29056 ;; Return value:  Size  Location     Type
 29057 ;;                  1    wreg      unsigned char 
 29058 ;; Registers used:
 29059 ;;		wreg, status,2
 29060 ;; Tracked objects:
 29061 ;;		On entry : 0/0
 29062 ;;		On exit  : 0/0
 29063 ;;		Unchanged: 0/0
 29064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29068 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29069 ;;Total ram usage:        0 bytes
 29070 ;; Hardware stack levels used:    1
 29071 ;; Hardware stack levels required when called:    7
 29072 ;; This function calls:
 29073 ;;		Nothing
 29074 ;; This function is called by:
 29075 ;;		_Event_DIPSwitch
 29076 ;;		_Event_HMI_DIPSwitch
 29077 ;; This function uses a non-reentrant model
 29078 ;;
 29079                           
 29080                           	psect	text156
 29081  016648                     __ptext156:
 29082                           	opt stack 0
 29083  016648                     _HMI_GetBar:
 29084                           	opt stack 19
 29085                           
 29086                           ;HMI.c: 211: return HMIBoard.pBarGraph;
 29087                           
 29088                           ;incstack = 0
 29089  016648  0103               	movlb	3	; () banked
 29090  01664A  5127               	movf	(_HMIBoard+7)& (0+255),w,b
 29091  01664C  0012               	return	
 29092  01664E                     __end_of_HMI_GetBar:
 29093                           	opt stack 0
 29094                           tosu	equ	0xFFF
 29095                           tosh	equ	0xFFE
 29096                           tosl	equ	0xFFD
 29097                           pclath	equ	0xFFA
 29098                           tblptru	equ	0xFF8
 29099                           tblptrh	equ	0xFF7
 29100                           tblptrl	equ	0xFF6
 29101                           tablat	equ	0xFF5
 29102                           prodh	equ	0xFF4
 29103                           prodl	equ	0xFF3
 29104                           intcon	equ	0xFF2
 29105                           indf0	equ	0xFEF
 29106                           postinc0	equ	0xFEE
 29107                           fsr0h	equ	0xFEA
 29108                           fsr0l	equ	0xFE9
 29109                           wreg	equ	0xFE8
 29110                           indf1	equ	0xFE7
 29111                           postdec1	equ	0xFE5
 29112                           fsr1h	equ	0xFE2
 29113                           fsr1l	equ	0xFE1
 29114                           indf2	equ	0xFDF
 29115                           postinc2	equ	0xFDE
 29116                           postdec2	equ	0xFDD
 29117                           plusw2	equ	0xFDB
 29118                           fsr2h	equ	0xFDA
 29119                           fsr2l	equ	0xFD9
 29120                           status	equ	0xFD8
 29121                           
 29122 ;; *************** function _ISR_Function *****************
 29123 ;; Defined at:
 29124 ;;		line 38 in file "Library/ISR.c"
 29125 ;; Parameters:    Size  Location     Type
 29126 ;;		None
 29127 ;; Auto vars:     Size  Location     Type
 29128 ;;		None
 29129 ;; Return value:  Size  Location     Type
 29130 ;;                  1    wreg      void 
 29131 ;; Registers used:
 29132 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29133 ;; Tracked objects:
 29134 ;;		On entry : 0/0
 29135 ;;		On exit  : 0/0
 29136 ;;		Unchanged: 0/0
 29137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29140 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29141 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29142 ;;Total ram usage:       18 bytes
 29143 ;; Hardware stack levels used:    1
 29144 ;; Hardware stack levels required when called:    6
 29145 ;; This function calls:
 29146 ;;		_Timer0_ISR
 29147 ;; This function is called by:
 29148 ;;		Interrupt level 2
 29149 ;; This function uses a non-reentrant model
 29150 ;;
 29151                           
 29152                           	psect	intcode
 29153  001408                     __pintcode:
 29154                           	opt stack 0
 29155  001408                     _ISR_Function:
 29156                           	opt stack 13
 29157                           
 29158                           ; BSR set to: 3
 29159                           ;incstack = 0
 29160  001408  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 29161  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 29162  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 29163  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 29164  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 29165  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 29166  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 29167  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 29168  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 29169  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 29170  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 29171  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 29172  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 29173  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 29174  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 29175  001442  C051  F025         	movff	btemp,??_ISR_Function+14
 29176  001446  C052  F026         	movff	btemp+1,??_ISR_Function+15
 29177  00144A  C053  F027         	movff	btemp+2,??_ISR_Function+16
 29178  00144E  C054  F028         	movff	btemp+3,??_ISR_Function+17
 29179                           
 29180                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 29181  001452  92F2               	bcf	intcon,1,c	;volatile
 29182                           
 29183                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 29184  001454  B4F2               	btfsc	intcon,2,c	;volatile
 29185  001456  AAF2               	btfss	intcon,5,c	;volatile
 29186  001458  D002               	goto	i2l1590
 29187                           
 29188                           ;ISR.c: 68: Timer0_ISR();
 29189  00145A  ECAF  F0B0         	call	_Timer0_ISR	;wreg free
 29190  00145E                     i2l1590:
 29191  00145E  C028  F054         	movff	??_ISR_Function+17,btemp+3
 29192  001462  C027  F053         	movff	??_ISR_Function+16,btemp+2
 29193  001466  C026  F052         	movff	??_ISR_Function+15,btemp+1
 29194  00146A  C025  F051         	movff	??_ISR_Function+14,btemp
 29195  00146E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 29196  001472  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 29197  001476  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 29198  00147A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 29199  00147E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 29200  001482  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 29201  001486  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 29202  00148A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 29203  00148E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 29204  001492  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 29205  001496  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 29206  00149A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 29207  00149E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 29208  0014A2  C017  FFFA         	movff	??_ISR_Function,pclath
 29209  0014A6  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 29210  0014A8  0011               	retfie		f
 29211  0014AA                     __end_of_ISR_Function:
 29212                           	opt stack 0
 29213                           tosu	equ	0xFFF
 29214                           tosh	equ	0xFFE
 29215                           tosl	equ	0xFFD
 29216                           pclatu	equ	0xFFB
 29217                           pclath	equ	0xFFA
 29218                           tblptru	equ	0xFF8
 29219                           tblptrh	equ	0xFF7
 29220                           tblptrl	equ	0xFF6
 29221                           tablat	equ	0xFF5
 29222                           prodh	equ	0xFF4
 29223                           prodl	equ	0xFF3
 29224                           intcon	equ	0xFF2
 29225                           indf0	equ	0xFEF
 29226                           postinc0	equ	0xFEE
 29227                           fsr0h	equ	0xFEA
 29228                           fsr0l	equ	0xFE9
 29229                           wreg	equ	0xFE8
 29230                           indf1	equ	0xFE7
 29231                           postdec1	equ	0xFE5
 29232                           fsr1h	equ	0xFE2
 29233                           fsr1l	equ	0xFE1
 29234                           indf2	equ	0xFDF
 29235                           postinc2	equ	0xFDE
 29236                           postdec2	equ	0xFDD
 29237                           plusw2	equ	0xFDB
 29238                           fsr2h	equ	0xFDA
 29239                           fsr2l	equ	0xFD9
 29240                           status	equ	0xFD8
 29241                           
 29242 ;; *************** function _Timer0_ISR *****************
 29243 ;; Defined at:
 29244 ;;		line 94 in file "Library/Timer0.c"
 29245 ;; Parameters:    Size  Location     Type
 29246 ;;		None
 29247 ;; Auto vars:     Size  Location     Type
 29248 ;;		None
 29249 ;; Return value:  Size  Location     Type
 29250 ;;                  1    wreg      void 
 29251 ;; Registers used:
 29252 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29253 ;; Tracked objects:
 29254 ;;		On entry : 0/0
 29255 ;;		On exit  : 0/0
 29256 ;;		Unchanged: 0/0
 29257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29261 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29262 ;;Total ram usage:        0 bytes
 29263 ;; Hardware stack levels used:    1
 29264 ;; Hardware stack levels required when called:    5
 29265 ;; This function calls:
 29266 ;;		Absolute function
 29267 ;;		i2_Motor_Step
 29268 ;;		i2_Timer0_Stop
 29269 ;; This function is called by:
 29270 ;;		_ISR_Function
 29271 ;; This function uses a non-reentrant model
 29272 ;;
 29273                           
 29274                           	psect	text158
 29275  01615E                     __ptext158:
 29276                           	opt stack 0
 29277  01615E                     _Timer0_ISR:
 29278                           	opt stack 13
 29279                           
 29280                           ;Timer0.c: 96: Timer0_Stop();
 29281                           
 29282                           ;incstack = 0
 29283  01615E  EC27  F0B3         	call	i2_Timer0_Stop	;wreg free
 29284                           
 29285                           ;Timer0.c: 99: if (gISR != 0)
 29286  016162  0100               	movlb	0	; () banked
 29287  016164  51B9               	movf	_gISR& (0+255),w,b
 29288  016166  0100               	movlb	0	; () banked
 29289  016168  11BA               	iorwf	(_gISR+1)& (0+255),w,b
 29290  01616A  0100               	movlb	0	; () banked
 29291  01616C  11BB               	iorwf	(_gISR+2)& (0+255),w,b
 29292  01616E  B4D8               	btfsc	status,2,c
 29293  016170  0012               	return	
 29294                           
 29295                           ; BSR set to: 0
 29296                           ;Timer0.c: 100: gISR();
 29297  016172  D801               	call	i2u1354_48
 29298  016174  0012               	return	
 29299  016176                     i2u1354_48:
 29300  016176  0005               	push	
 29301  016178  6EFA               	movwf	pclath,c
 29302  01617A  0100               	movlb	0	; () banked
 29303  01617C  51B9               	movf	_gISR& (0+255),w,b
 29304  01617E  6EFD               	movwf	tosl,c
 29305  016180  51BA               	movf	(_gISR+1)& (0+255),w,b
 29306  016182  6EFE               	movwf	tosh,c
 29307  016184  51BB               	movf	(_gISR+2)& (0+255),w,b
 29308  016186  6EFF               	movwf	tosu,c
 29309  016188  50FA               	movf	pclath,w,c
 29310  01618A  0012               	return		;indir
 29311  01618C                     __end_of_Timer0_ISR:
 29312                           	opt stack 0
 29313                           tosu	equ	0xFFF
 29314                           tosh	equ	0xFFE
 29315                           tosl	equ	0xFFD
 29316                           pclatu	equ	0xFFB
 29317                           pclath	equ	0xFFA
 29318                           tblptru	equ	0xFF8
 29319                           tblptrh	equ	0xFF7
 29320                           tblptrl	equ	0xFF6
 29321                           tablat	equ	0xFF5
 29322                           prodh	equ	0xFF4
 29323                           prodl	equ	0xFF3
 29324                           intcon	equ	0xFF2
 29325                           indf0	equ	0xFEF
 29326                           postinc0	equ	0xFEE
 29327                           fsr0h	equ	0xFEA
 29328                           fsr0l	equ	0xFE9
 29329                           wreg	equ	0xFE8
 29330                           indf1	equ	0xFE7
 29331                           postdec1	equ	0xFE5
 29332                           fsr1h	equ	0xFE2
 29333                           fsr1l	equ	0xFE1
 29334                           indf2	equ	0xFDF
 29335                           postinc2	equ	0xFDE
 29336                           postdec2	equ	0xFDD
 29337                           plusw2	equ	0xFDB
 29338                           fsr2h	equ	0xFDA
 29339                           fsr2l	equ	0xFD9
 29340                           status	equ	0xFD8
 29341                           
 29342 ;; *************** function i2_Motor_Step *****************
 29343 ;; Defined at:
 29344 ;;		line 75 in file "Library/Motor.c"
 29345 ;; Parameters:    Size  Location     Type
 29346 ;;		None
 29347 ;; Auto vars:     Size  Location     Type
 29348 ;;		None
 29349 ;; Return value:  Size  Location     Type
 29350 ;;                  1    wreg      void 
 29351 ;; Registers used:
 29352 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29353 ;; Tracked objects:
 29354 ;;		On entry : 0/0
 29355 ;;		On exit  : 0/0
 29356 ;;		Unchanged: 0/0
 29357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29360 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29361 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29362 ;;Total ram usage:        2 bytes
 29363 ;; Hardware stack levels used:    1
 29364 ;; Hardware stack levels required when called:    4
 29365 ;; This function calls:
 29366 ;;		i2_MXK_Queue
 29367 ;;		i2_MXK_Release
 29368 ;;		i2_MXK_SwitchTo
 29369 ;;		i2_Port_SetPin
 29370 ;;		i2_Timer0_Restart
 29371 ;;		i2_Timer0_Stop
 29372 ;; This function is called by:
 29373 ;; This function uses a non-reentrant model
 29374 ;;
 29375                           
 29376                           	psect	text159
 29377  0137B8                     __ptext159:
 29378                           	opt stack 0
 29379  0137B8                     i2_Motor_Step:
 29380                           	opt stack 13
 29381                           
 29382                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 29383                           
 29384                           ;incstack = 0
 29385  0137B8  0100               	movlb	0	; () banked
 29386  0137BA  EE20 F004          	lfsr	2,4
 29387  0137BE  51D8               	movf	_lMotor& (0+255),w,b
 29388  0137C0  26D9               	addwf	fsr2l,f,c
 29389  0137C2  51D9               	movf	(_lMotor+1)& (0+255),w,b
 29390  0137C4  22DA               	addwfc	fsr2h,f,c
 29391  0137C6  50DF               	movf	indf2,w,c
 29392  0137C8  EC02  F0B0         	call	i2_MXK_SwitchTo
 29393  0137CC  0900               	iorlw	0
 29394  0137CE  B4D8               	btfsc	status,2,c
 29395  0137D0  D06A               	goto	i2l1627
 29396                           
 29397                           ;Motor.c: 78: {
 29398                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 29399  0137D2  C0D8  FFD9         	movff	_lMotor,fsr2l
 29400  0137D6  C0D9  FFDA         	movff	_lMotor+1,fsr2h
 29401  0137DA  50DE               	movf	postinc2,w,c
 29402  0137DC  10DE               	iorwf	postinc2,w,c
 29403  0137DE  B4D8               	btfsc	status,2,c
 29404  0137E0  D05D               	goto	i2l1628
 29405                           
 29406                           ;Motor.c: 80: {
 29407                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 29408  0137E2  C0D8  FFD9         	movff	_lMotor,fsr2l
 29409  0137E6  C0D9  FFDA         	movff	_lMotor+1,fsr2h
 29410  0137EA  0E01               	movlw	1
 29411  0137EC  BEDB               	btfsc	plusw2,7,c
 29412  0137EE  D022               	goto	i2l1629
 29413  0137F0  0E01               	movlw	1
 29414  0137F2  50DB               	movf	plusw2,w,c
 29415  0137F4  E103               	bnz	i2u713_40
 29416  0137F6  04DE               	decf	postinc2,w,c
 29417  0137F8  A0D8               	btfss	status,0,c
 29418  0137FA  D01C               	goto	i2l1629
 29419  0137FC                     i2u713_40:
 29420                           
 29421                           ;Motor.c: 83: {
 29422                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 29423  0137FC  C0D8  FFD9         	movff	_lMotor,fsr2l
 29424  013800  C0D9  FFDA         	movff	_lMotor+1,fsr2h
 29425  013804  28DE               	incf	postinc2,w,c
 29426  013806  E104               	bnz	i2u714_40
 29427  013808  0E7F               	movlw	127
 29428  01380A  18DE               	xorwf	postinc2,w,c
 29429  01380C  B4D8               	btfsc	status,2,c
 29430  01380E  D007               	goto	i2l1630
 29431  013810                     i2u714_40:
 29432                           
 29433                           ;Motor.c: 85: lMotor->mDelta --;
 29434  013810  C0D8  FFD9         	movff	_lMotor,fsr2l
 29435  013814  C0D9  FFDA         	movff	_lMotor+1,fsr2h
 29436  013818  06DE               	decf	postinc2,f,c
 29437  01381A  0E00               	movlw	0
 29438  01381C  5ADD               	subwfb	postdec2,f,c
 29439  01381E                     i2l1630:
 29440                           
 29441                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 29442  01381E  0E8E               	movlw	low _PortE
 29443  013820  6E10               	movwf	i2Port_SetPin@pInput,c
 29444  013822  0E03               	movlw	high _PortE
 29445  013824  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29446  013826  0E00               	movlw	0
 29447  013828  6E12               	movwf	i2Port_SetPin@pPin,c
 29448  01382A  0E01               	movlw	1
 29449  01382C  6E13               	movwf	i2Port_SetPin@pValue,c
 29450  01382E  EC4A  F0A3         	call	i2_Port_SetPin	;wreg free
 29451                           
 29452                           ;Motor.c: 88: }
 29453  013832  D01B               	goto	i2l1631
 29454  013834                     i2l1629:
 29455                           
 29456                           ;Motor.c: 89: else
 29457                           ;Motor.c: 90: {
 29458                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 29459  013834  C0D8  FFD9         	movff	_lMotor,fsr2l
 29460  013838  C0D9  FFDA         	movff	_lMotor+1,fsr2h
 29461  01383C  04DE               	decf	postinc2,w,c
 29462  01383E  E104               	bnz	i2u715_40
 29463  013840  0E80               	movlw	128
 29464  013842  18DE               	xorwf	postinc2,w,c
 29465  013844  B4D8               	btfsc	status,2,c
 29466  013846  D007               	goto	i2l1632
 29467  013848                     i2u715_40:
 29468                           
 29469                           ;Motor.c: 92: lMotor->mDelta ++;
 29470  013848  C0D8  FFD9         	movff	_lMotor,fsr2l
 29471  01384C  C0D9  FFDA         	movff	_lMotor+1,fsr2h
 29472  013850  2ADE               	incf	postinc2,f,c
 29473  013852  0E00               	movlw	0
 29474  013854  22DD               	addwfc	postdec2,f,c
 29475  013856                     i2l1632:
 29476                           
 29477                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 29478  013856  0E8E               	movlw	low _PortE
 29479  013858  6E10               	movwf	i2Port_SetPin@pInput,c
 29480  01385A  0E03               	movlw	high _PortE
 29481  01385C  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29482  01385E  0E00               	movlw	0
 29483  013860  6E12               	movwf	i2Port_SetPin@pPin,c
 29484  013862  0E00               	movlw	0
 29485  013864  6E13               	movwf	i2Port_SetPin@pValue,c
 29486  013866  EC4A  F0A3         	call	i2_Port_SetPin	;wreg free
 29487  01386A                     i2l1631:
 29488                           
 29489                           ;Motor.c: 95: }
 29490                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 29491  01386A  0E8E               	movlw	low _PortE
 29492  01386C  6E10               	movwf	i2Port_SetPin@pInput,c
 29493  01386E  0E03               	movlw	high _PortE
 29494  013870  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29495  013872  0E01               	movlw	1
 29496  013874  6E12               	movwf	i2Port_SetPin@pPin,c
 29497  013876  0E01               	movlw	1
 29498  013878  6E13               	movwf	i2Port_SetPin@pValue,c
 29499  01387A  EC4A  F0A3         	call	i2_Port_SetPin	;wreg free
 29500                           
 29501                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 29502  01387E  0E8E               	movlw	low _PortE
 29503  013880  6E10               	movwf	i2Port_SetPin@pInput,c
 29504  013882  0E03               	movlw	high _PortE
 29505  013884  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29506  013886  0E01               	movlw	1
 29507  013888  6E12               	movwf	i2Port_SetPin@pPin,c
 29508  01388A  0E00               	movlw	0
 29509  01388C  6E13               	movwf	i2Port_SetPin@pValue,c
 29510  01388E  EC4A  F0A3         	call	i2_Port_SetPin	;wreg free
 29511                           
 29512                           ;Motor.c: 101: MXK_Release();
 29513  013892  EC2A  F0B3         	call	i2_MXK_Release	;wreg free
 29514                           
 29515                           ;Motor.c: 102: Timer0_Restart();
 29516  013896  ECF6  F0B2         	call	i2_Timer0_Restart	;wreg free
 29517                           
 29518                           ;Motor.c: 103: return;
 29519  01389A  0012               	return	
 29520  01389C                     i2l1628:
 29521                           
 29522                           ;Motor.c: 104: }
 29523                           ;Motor.c: 105: MXK_Release();
 29524  01389C  EC2A  F0B3         	call	i2_MXK_Release	;wreg free
 29525                           
 29526                           ;Motor.c: 106: Timer0_Stop();
 29527  0138A0  EC27  F0B3         	call	i2_Timer0_Stop	;wreg free
 29528                           
 29529                           ;Motor.c: 107: return;
 29530  0138A4  0012               	return	
 29531  0138A6                     i2l1627:
 29532                           
 29533                           ;Motor.c: 108: }
 29534                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 29535  0138A6  C0BF  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 29536  0138AA  C0C0  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 29537  0138AE  C0C1  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 29538  0138B2  ECDD  F0B2         	call	i2_MXK_Queue	;wreg free
 29539  0138B6  0012               	return		;funcret
 29540  0138B8                     __end_ofi2_Motor_Step:
 29541                           	opt stack 0
 29542                           tosu	equ	0xFFF
 29543                           tosh	equ	0xFFE
 29544                           tosl	equ	0xFFD
 29545                           pclatu	equ	0xFFB
 29546                           pclath	equ	0xFFA
 29547                           tblptru	equ	0xFF8
 29548                           tblptrh	equ	0xFF7
 29549                           tblptrl	equ	0xFF6
 29550                           tablat	equ	0xFF5
 29551                           prodh	equ	0xFF4
 29552                           prodl	equ	0xFF3
 29553                           intcon	equ	0xFF2
 29554                           indf0	equ	0xFEF
 29555                           postinc0	equ	0xFEE
 29556                           fsr0h	equ	0xFEA
 29557                           fsr0l	equ	0xFE9
 29558                           wreg	equ	0xFE8
 29559                           indf1	equ	0xFE7
 29560                           postdec1	equ	0xFE5
 29561                           fsr1h	equ	0xFE2
 29562                           fsr1l	equ	0xFE1
 29563                           indf2	equ	0xFDF
 29564                           postinc2	equ	0xFDE
 29565                           postdec2	equ	0xFDD
 29566                           plusw2	equ	0xFDB
 29567                           fsr2h	equ	0xFDA
 29568                           fsr2l	equ	0xFD9
 29569                           status	equ	0xFD8
 29570                           
 29571 ;; *************** function i2_Timer0_Stop *****************
 29572 ;; Defined at:
 29573 ;;		line 89 in file "Library/Timer0.c"
 29574 ;; Parameters:    Size  Location     Type
 29575 ;;		None
 29576 ;; Auto vars:     Size  Location     Type
 29577 ;;		None
 29578 ;; Return value:  Size  Location     Type
 29579 ;;                  1    wreg      void 
 29580 ;; Registers used:
 29581 ;;		None
 29582 ;; Tracked objects:
 29583 ;;		On entry : 0/0
 29584 ;;		On exit  : 0/0
 29585 ;;		Unchanged: 0/0
 29586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29590 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29591 ;;Total ram usage:        0 bytes
 29592 ;; Hardware stack levels used:    1
 29593 ;; This function calls:
 29594 ;;		Nothing
 29595 ;; This function is called by:
 29596 ;;		_Timer0_ISR
 29597 ;;		i2_Motor_Step
 29598 ;; This function uses a non-reentrant model
 29599 ;;
 29600                           
 29601                           	psect	text160
 29602  01664E                     __ptext160:
 29603                           	opt stack 0
 29604  01664E                     i2_Timer0_Stop:
 29605                           	opt stack 17
 29606                           
 29607                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 29608                           
 29609                           ;incstack = 0
 29610  01664E  9AF2               	bcf	intcon,5,c	;volatile
 29611                           
 29612                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 29613  016650  94F2               	bcf	intcon,2,c	;volatile
 29614  016652  0012               	return		;funcret
 29615  016654                     __end_ofi2_Timer0_Stop:
 29616                           	opt stack 0
 29617                           tosu	equ	0xFFF
 29618                           tosh	equ	0xFFE
 29619                           tosl	equ	0xFFD
 29620                           pclatu	equ	0xFFB
 29621                           pclath	equ	0xFFA
 29622                           tblptru	equ	0xFF8
 29623                           tblptrh	equ	0xFF7
 29624                           tblptrl	equ	0xFF6
 29625                           tablat	equ	0xFF5
 29626                           prodh	equ	0xFF4
 29627                           prodl	equ	0xFF3
 29628                           intcon	equ	0xFF2
 29629                           indf0	equ	0xFEF
 29630                           postinc0	equ	0xFEE
 29631                           fsr0h	equ	0xFEA
 29632                           fsr0l	equ	0xFE9
 29633                           wreg	equ	0xFE8
 29634                           indf1	equ	0xFE7
 29635                           postdec1	equ	0xFE5
 29636                           fsr1h	equ	0xFE2
 29637                           fsr1l	equ	0xFE1
 29638                           indf2	equ	0xFDF
 29639                           postinc2	equ	0xFDE
 29640                           postdec2	equ	0xFDD
 29641                           plusw2	equ	0xFDB
 29642                           fsr2h	equ	0xFDA
 29643                           fsr2l	equ	0xFD9
 29644                           status	equ	0xFD8
 29645                           
 29646 ;; *************** function i2_Timer0_Restart *****************
 29647 ;; Defined at:
 29648 ;;		line 83 in file "Library/Timer0.c"
 29649 ;; Parameters:    Size  Location     Type
 29650 ;;		None
 29651 ;; Auto vars:     Size  Location     Type
 29652 ;;		None
 29653 ;; Return value:  Size  Location     Type
 29654 ;;                  1    wreg      void 
 29655 ;; Registers used:
 29656 ;;		None
 29657 ;; Tracked objects:
 29658 ;;		On entry : 0/0
 29659 ;;		On exit  : 0/0
 29660 ;;		Unchanged: 0/0
 29661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29665 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29666 ;;Total ram usage:        0 bytes
 29667 ;; Hardware stack levels used:    1
 29668 ;; This function calls:
 29669 ;;		Nothing
 29670 ;; This function is called by:
 29671 ;;		i2_Motor_Step
 29672 ;; This function uses a non-reentrant model
 29673 ;;
 29674                           
 29675                           	psect	text161
 29676  0165EC                     __ptext161:
 29677                           	opt stack 0
 29678  0165EC                     i2_Timer0_Restart:
 29679                           	opt stack 16
 29680                           
 29681                           ;Timer0.c: 85: TMR0 = COUNTER;
 29682                           
 29683                           ;incstack = 0
 29684  0165EC  C029  FFD6         	movff	_COUNTER,4054	;volatile
 29685  0165F0  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 29686                           
 29687                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 29688  0165F4  8AF2               	bsf	intcon,5,c	;volatile
 29689  0165F6  0012               	return		;funcret
 29690  0165F8                     __end_ofi2_Timer0_Restart:
 29691                           	opt stack 0
 29692                           tosu	equ	0xFFF
 29693                           tosh	equ	0xFFE
 29694                           tosl	equ	0xFFD
 29695                           pclatu	equ	0xFFB
 29696                           pclath	equ	0xFFA
 29697                           tblptru	equ	0xFF8
 29698                           tblptrh	equ	0xFF7
 29699                           tblptrl	equ	0xFF6
 29700                           tablat	equ	0xFF5
 29701                           prodh	equ	0xFF4
 29702                           prodl	equ	0xFF3
 29703                           intcon	equ	0xFF2
 29704                           indf0	equ	0xFEF
 29705                           postinc0	equ	0xFEE
 29706                           fsr0h	equ	0xFEA
 29707                           fsr0l	equ	0xFE9
 29708                           wreg	equ	0xFE8
 29709                           indf1	equ	0xFE7
 29710                           postdec1	equ	0xFE5
 29711                           fsr1h	equ	0xFE2
 29712                           fsr1l	equ	0xFE1
 29713                           indf2	equ	0xFDF
 29714                           postinc2	equ	0xFDE
 29715                           postdec2	equ	0xFDD
 29716                           plusw2	equ	0xFDB
 29717                           fsr2h	equ	0xFDA
 29718                           fsr2l	equ	0xFD9
 29719                           status	equ	0xFD8
 29720                           
 29721 ;; *************** function i2_Port_SetPin *****************
 29722 ;; Defined at:
 29723 ;;		line 247 in file "Library/Port.c"
 29724 ;; Parameters:    Size  Location     Type
 29725 ;;  pInput          2   15[COMRAM] const PTR struct Port
 29726 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 29727 ;;  pPin            1   17[COMRAM] enum E6750
 29728 ;;  pValue          1   18[COMRAM] unsigned char 
 29729 ;; Auto vars:     Size  Location     Type
 29730 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 29731 ;; Return value:  Size  Location     Type
 29732 ;;                  1    wreg      void 
 29733 ;; Registers used:
 29734 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29735 ;; Tracked objects:
 29736 ;;		On entry : 0/0
 29737 ;;		On exit  : 0/0
 29738 ;;		Unchanged: 0/0
 29739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29740 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29741 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29743 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29744 ;;Total ram usage:        5 bytes
 29745 ;; Hardware stack levels used:    1
 29746 ;; Hardware stack levels required when called:    3
 29747 ;; This function calls:
 29748 ;;		i2_Byte_SetBit
 29749 ;;		i2_Word_GetPair
 29750 ;; This function is called by:
 29751 ;;		i2_Motor_Step
 29752 ;; This function uses a non-reentrant model
 29753 ;;
 29754                           
 29755                           	psect	text162
 29756  014694                     __ptext162:
 29757                           	opt stack 0
 29758  014694                     i2_Port_SetPin:
 29759                           	opt stack 13
 29760                           
 29761                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 29762                           
 29763                           ;incstack = 0
 29764  014694  0E08               	movlw	8
 29765  014696  2410               	addwf	i2Port_SetPin@pInput,w,c
 29766  014698  6E0D               	movwf	i2Word_GetPair@pInput,c
 29767  01469A  0E00               	movlw	0
 29768  01469C  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 29769  01469E  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 29770  0146A0  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 29771  0146A4  EC80  F0B0         	call	i2_Word_GetPair	;wreg free
 29772  0146A8  6E14               	movwf	i2Port_SetPin@Type,c
 29773                           
 29774                           ;Port.c: 250: switch (Type)
 29775  0146AA  D03B               	goto	i2l427
 29776  0146AC                     
 29777                           ;Port.c: 256: pValue &= 1;
 29778  0146AC  0E01               	movlw	1
 29779  0146AE  1613               	andwf	i2Port_SetPin@pValue,f,c
 29780                           
 29781                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 29782  0146B0  EE20 F002          	lfsr	2,2
 29783  0146B4  5010               	movf	i2Port_SetPin@pInput,w,c
 29784  0146B6  26D9               	addwf	fsr2l,f,c
 29785  0146B8  5011               	movf	i2Port_SetPin@pInput+1,w,c
 29786  0146BA  22DA               	addwfc	fsr2h,f,c
 29787  0146BC  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 29788  0146C0  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 29789  0146C4  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 29790  0146C8  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 29791  0146CC  EC4D  F0AD         	call	i2_Byte_SetBit	;wreg free
 29792                           
 29793                           ;Port.c: 258: break;
 29794  0146D0  0012               	return	
 29795  0146D2                     
 29796                           ;Port.c: 261: pValue &= 1;
 29797  0146D2  0E01               	movlw	1
 29798  0146D4  1613               	andwf	i2Port_SetPin@pValue,f,c
 29799                           
 29800                           ;Port.c: 262: pValue ^= 1;
 29801  0146D6  0E01               	movlw	1
 29802  0146D8  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 29803                           
 29804                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 29805  0146DA  EE20 F002          	lfsr	2,2
 29806  0146DE  5010               	movf	i2Port_SetPin@pInput,w,c
 29807  0146E0  26D9               	addwf	fsr2l,f,c
 29808  0146E2  5011               	movf	i2Port_SetPin@pInput+1,w,c
 29809  0146E4  22DA               	addwfc	fsr2h,f,c
 29810  0146E6  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 29811  0146EA  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 29812  0146EE  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 29813  0146F2  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 29814  0146F6  EC4D  F0AD         	call	i2_Byte_SetBit	;wreg free
 29815                           
 29816                           ;Port.c: 264: break;
 29817  0146FA  0012               	return	
 29818  0146FC                     
 29819                           ;Port.c: 266: pValue &= 1;
 29820  0146FC  0E01               	movlw	1
 29821  0146FE  1613               	andwf	i2Port_SetPin@pValue,f,c
 29822                           
 29823                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 29824  014700  EE20 F004          	lfsr	2,4
 29825  014704  5010               	movf	i2Port_SetPin@pInput,w,c
 29826  014706  26D9               	addwf	fsr2l,f,c
 29827  014708  5011               	movf	i2Port_SetPin@pInput+1,w,c
 29828  01470A  22DA               	addwfc	fsr2h,f,c
 29829  01470C  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 29830  014710  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 29831  014714  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 29832  014718  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 29833  01471C  EC4D  F0AD         	call	i2_Byte_SetBit	;wreg free
 29834                           
 29835                           ;Port.c: 269: }
 29836                           
 29837                           ;Port.c: 268: break;
 29838  014720  0012               	return	
 29839  014722                     i2l427:
 29840  014722  5014               	movf	i2Port_SetPin@Type,w,c
 29841                           
 29842                           ; Switch size 1, requested type "space"
 29843                           ; Number of cases is 4, Range of values is 0 to 3
 29844                           ; switch strategies available:
 29845                           ; Name         Instructions Cycles
 29846                           ; simple_byte           13     7 (average)
 29847                           ;	Chosen strategy is simple_byte
 29848  014724  0A00               	xorlw	0	; case 0
 29849  014726  B4D8               	btfsc	status,2,c
 29850  014728  0012               	return	
 29851  01472A  0A01               	xorlw	1	; case 1
 29852  01472C  B4D8               	btfsc	status,2,c
 29853  01472E  D7BE               	goto	i2l430
 29854  014730  0A03               	xorlw	3	; case 2
 29855  014732  B4D8               	btfsc	status,2,c
 29856  014734  D7CE               	goto	i2l432
 29857  014736  0A01               	xorlw	1	; case 3
 29858  014738  A4D8               	btfss	status,2,c
 29859  01473A  0012               	return	
 29860  01473C  D7DF               	goto	i2l433
 29861  01473E                     __end_ofi2_Port_SetPin:
 29862                           	opt stack 0
 29863                           tosu	equ	0xFFF
 29864                           tosh	equ	0xFFE
 29865                           tosl	equ	0xFFD
 29866                           pclatu	equ	0xFFB
 29867                           pclath	equ	0xFFA
 29868                           tblptru	equ	0xFF8
 29869                           tblptrh	equ	0xFF7
 29870                           tblptrl	equ	0xFF6
 29871                           tablat	equ	0xFF5
 29872                           prodh	equ	0xFF4
 29873                           prodl	equ	0xFF3
 29874                           intcon	equ	0xFF2
 29875                           indf0	equ	0xFEF
 29876                           postinc0	equ	0xFEE
 29877                           fsr0h	equ	0xFEA
 29878                           fsr0l	equ	0xFE9
 29879                           wreg	equ	0xFE8
 29880                           indf1	equ	0xFE7
 29881                           postdec1	equ	0xFE5
 29882                           fsr1h	equ	0xFE2
 29883                           fsr1l	equ	0xFE1
 29884                           indf2	equ	0xFDF
 29885                           postinc2	equ	0xFDE
 29886                           postdec2	equ	0xFDD
 29887                           plusw2	equ	0xFDB
 29888                           fsr2h	equ	0xFDA
 29889                           fsr2l	equ	0xFD9
 29890                           status	equ	0xFD8
 29891                           
 29892 ;; *************** function i2_Word_GetPair *****************
 29893 ;; Defined at:
 29894 ;;		line 156 in file "Library/Types.c"
 29895 ;; Parameters:    Size  Location     Type
 29896 ;;  pInput          2   12[COMRAM] PTR struct Word
 29897 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 29898 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 29899 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 29900 ;;		 -> PortC(10), PortF(10), NULL(0), 
 29901 ;;  pPair           1   14[COMRAM] unsigned char 
 29902 ;; Auto vars:     Size  Location     Type
 29903 ;;		None
 29904 ;; Return value:  Size  Location     Type
 29905 ;;                  1    wreg      unsigned char 
 29906 ;; Registers used:
 29907 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29908 ;; Tracked objects:
 29909 ;;		On entry : 0/0
 29910 ;;		On exit  : 0/0
 29911 ;;		Unchanged: 0/0
 29912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29913 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29914 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29916 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29917 ;;Total ram usage:        3 bytes
 29918 ;; Hardware stack levels used:    1
 29919 ;; Hardware stack levels required when called:    2
 29920 ;; This function calls:
 29921 ;;		i2_Byte_GetPair
 29922 ;; This function is called by:
 29923 ;;		i2_Port_SetPin
 29924 ;; This function uses a non-reentrant model
 29925 ;;
 29926                           
 29927                           	psect	text163
 29928  016100                     __ptext163:
 29929                           	opt stack 0
 29930  016100                     i2_Word_GetPair:
 29931                           	opt stack 13
 29932                           
 29933                           ;Types.c: 158: if (pPair >= 4)
 29934                           
 29935                           ;incstack = 0
 29936  016100  0E03               	movlw	3
 29937  016102  640F               	cpfsgt	i2Word_GetPair@pPair,c
 29938  016104  D00C               	goto	i2l781
 29939                           
 29940                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 29941  016106  0E01               	movlw	1
 29942  016108  240D               	addwf	i2Word_GetPair@pInput,w,c
 29943  01610A  6E0A               	movwf	i2Byte_GetPair@pInput,c
 29944  01610C  0E00               	movlw	0
 29945  01610E  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 29946  016110  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 29947  016112  500F               	movf	i2Word_GetPair@pPair,w,c
 29948  016114  0FFC               	addlw	252
 29949  016116  6E0C               	movwf	i2Byte_GetPair@pPair,c
 29950  016118  EC1E  F0B2         	call	i2_Byte_GetPair	;wreg free
 29951  01611C  0012               	return	
 29952  01611E                     i2l781:
 29953                           
 29954                           ;Types.c: 160: else
 29955                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 29956  01611E  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 29957  016122  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 29958  016126  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 29959  01612A  EC1E  F0B2         	call	i2_Byte_GetPair	;wreg free
 29960  01612E  0012               	return	
 29961  016130                     __end_ofi2_Word_GetPair:
 29962                           	opt stack 0
 29963                           tosu	equ	0xFFF
 29964                           tosh	equ	0xFFE
 29965                           tosl	equ	0xFFD
 29966                           pclatu	equ	0xFFB
 29967                           pclath	equ	0xFFA
 29968                           tblptru	equ	0xFF8
 29969                           tblptrh	equ	0xFF7
 29970                           tblptrl	equ	0xFF6
 29971                           tablat	equ	0xFF5
 29972                           prodh	equ	0xFF4
 29973                           prodl	equ	0xFF3
 29974                           intcon	equ	0xFF2
 29975                           indf0	equ	0xFEF
 29976                           postinc0	equ	0xFEE
 29977                           fsr0h	equ	0xFEA
 29978                           fsr0l	equ	0xFE9
 29979                           wreg	equ	0xFE8
 29980                           indf1	equ	0xFE7
 29981                           postdec1	equ	0xFE5
 29982                           fsr1h	equ	0xFE2
 29983                           fsr1l	equ	0xFE1
 29984                           indf2	equ	0xFDF
 29985                           postinc2	equ	0xFDE
 29986                           postdec2	equ	0xFDD
 29987                           plusw2	equ	0xFDB
 29988                           fsr2h	equ	0xFDA
 29989                           fsr2l	equ	0xFD9
 29990                           status	equ	0xFD8
 29991                           
 29992 ;; *************** function i2_Byte_GetPair *****************
 29993 ;; Defined at:
 29994 ;;		line 87 in file "Library/Types.c"
 29995 ;; Parameters:    Size  Location     Type
 29996 ;;  pInput          2    9[COMRAM] PTR struct Byte
 29997 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 29998 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 29999 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 30000 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 30001 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 30002 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 30003 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 30004 ;;		 -> NULL(0), 
 30005 ;;  pPair           1   11[COMRAM] unsigned char 
 30006 ;; Auto vars:     Size  Location     Type
 30007 ;;		None
 30008 ;; Return value:  Size  Location     Type
 30009 ;;                  1    wreg      unsigned char 
 30010 ;; Registers used:
 30011 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30012 ;; Tracked objects:
 30013 ;;		On entry : 0/0
 30014 ;;		On exit  : 0/0
 30015 ;;		Unchanged: 0/0
 30016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30017 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30018 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30020 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30021 ;;Total ram usage:        3 bytes
 30022 ;; Hardware stack levels used:    1
 30023 ;; Hardware stack levels required when called:    1
 30024 ;; This function calls:
 30025 ;;		i2_Byte_GetZone
 30026 ;; This function is called by:
 30027 ;;		i2_Word_GetPair
 30028 ;; This function uses a non-reentrant model
 30029 ;;
 30030                           
 30031                           	psect	text164
 30032  01643C                     __ptext164:
 30033                           	opt stack 0
 30034  01643C                     i2_Byte_GetPair:
 30035                           	opt stack 13
 30036                           
 30037                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 30038                           
 30039                           ;incstack = 0
 30040  01643C  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 30041  016440  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 30042  016444  0E04               	movlw	4
 30043  016446  6E03               	movwf	i2Byte_GetZone@pMax,c
 30044  016448  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 30045  01644C  0E02               	movlw	2
 30046  01644E  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 30047  016450  ECC1  F0A8         	call	i2_Byte_GetZone	;wreg free
 30048  016454  0012               	return	
 30049  016456                     __end_ofi2_Byte_GetPair:
 30050                           	opt stack 0
 30051                           tosu	equ	0xFFF
 30052                           tosh	equ	0xFFE
 30053                           tosl	equ	0xFFD
 30054                           pclatu	equ	0xFFB
 30055                           pclath	equ	0xFFA
 30056                           tblptru	equ	0xFF8
 30057                           tblptrh	equ	0xFF7
 30058                           tblptrl	equ	0xFF6
 30059                           tablat	equ	0xFF5
 30060                           prodh	equ	0xFF4
 30061                           prodl	equ	0xFF3
 30062                           intcon	equ	0xFF2
 30063                           indf0	equ	0xFEF
 30064                           postinc0	equ	0xFEE
 30065                           fsr0h	equ	0xFEA
 30066                           fsr0l	equ	0xFE9
 30067                           wreg	equ	0xFE8
 30068                           indf1	equ	0xFE7
 30069                           postdec1	equ	0xFE5
 30070                           fsr1h	equ	0xFE2
 30071                           fsr1l	equ	0xFE1
 30072                           indf2	equ	0xFDF
 30073                           postinc2	equ	0xFDE
 30074                           postdec2	equ	0xFDD
 30075                           plusw2	equ	0xFDB
 30076                           fsr2h	equ	0xFDA
 30077                           fsr2l	equ	0xFD9
 30078                           status	equ	0xFD8
 30079                           
 30080 ;; *************** function i2_Byte_GetZone *****************
 30081 ;; Defined at:
 30082 ;;		line 64 in file "Library/Types.c"
 30083 ;; Parameters:    Size  Location     Type
 30084 ;;  pInput          2    0[COMRAM] PTR struct Byte
 30085 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 30086 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 30087 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 30088 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 30089 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 30090 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 30091 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 30092 ;;		 -> NULL(0), 
 30093 ;;  pMax            1    2[COMRAM] unsigned char 
 30094 ;;  pChunk          1    3[COMRAM] unsigned char 
 30095 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 30096 ;; Auto vars:     Size  Location     Type
 30097 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 30098 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 30099 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 30100 ;; Return value:  Size  Location     Type
 30101 ;;                  1    wreg      unsigned char 
 30102 ;; Registers used:
 30103 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 30104 ;; Tracked objects:
 30105 ;;		On entry : 0/0
 30106 ;;		On exit  : 0/0
 30107 ;;		Unchanged: 0/0
 30108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30109 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30110 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30111 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30112 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30113 ;;Total ram usage:        9 bytes
 30114 ;; Hardware stack levels used:    1
 30115 ;; This function calls:
 30116 ;;		Nothing
 30117 ;; This function is called by:
 30118 ;;		i2_Byte_GetPair
 30119 ;; This function uses a non-reentrant model
 30120 ;;
 30121                           
 30122                           	psect	text165
 30123  015182                     __ptext165:
 30124                           	opt stack 0
 30125  015182                     i2_Byte_GetZone:
 30126                           	opt stack 13
 30127                           
 30128                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 30129                           
 30130                           ;incstack = 0
 30131  015182  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 30132  015186  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 30133  01518A  0E00               	movlw	low (__mediumconst shr (0+16))
 30134  01518C  6EF8               	movwf	tblptru,c
 30135  01518E  0E0F               	movlw	(high __ramtop+-1)
 30136  015190  64F7               	cpfsgt	tblptrh,c
 30137  015192  D003               	bra	i2u499_47
 30138  015194  0008               	tblrd		*
 30139  015196  50F5               	movf	tablat,w,c
 30140  015198  D005               	bra	i2u499_40
 30141  01519A                     i2u499_47:
 30142  01519A  CFF6 FFE9          	movff	tblptrl,fsr0l
 30143  01519E  CFF7 FFEA          	movff	tblptrh,fsr0h
 30144  0151A2  50EF               	movf	indf0,w,c
 30145  0151A4                     i2u499_40:
 30146  0151A4  6E09               	movwf	i2Byte_GetZone@Output,c
 30147                           
 30148                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 30149  0151A6  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 30150  0151A8  0D01               	mullw	1
 30151  0151AA  0E75               	movlw	low _MASKS
 30152  0151AC  24F3               	addwf	prodl,w,c
 30153  0151AE  6EF6               	movwf	tblptrl,c
 30154  0151B0  0EFD               	movlw	high _MASKS
 30155  0151B2  20F4               	addwfc	prodh,w,c
 30156  0151B4  6EF7               	movwf	tblptrh,c
 30157  0151B6                     	if	1	;There are 3 active tblptr bytes
 30158  0151B6  6AF8               	clrf	tblptru,c
 30159  0151B8  0E00               	movlw	low (__mediumconst shr (0+16))
 30160  0151BA  22F8               	addwfc	tblptru,f,c
 30161  0151BC                     	endif
 30162  0151BC  0008               	tblrd		*
 30163  0151BE  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 30164                           
 30165                           ;Types.c: 68: UINT8 Offset = 0;
 30166  0151C2  0E00               	movlw	0
 30167  0151C4  6E08               	movwf	i2Byte_GetZone@Offset,c
 30168                           
 30169                           ;Types.c: 70: while (pChunk >= pMax)
 30170  0151C6  D003               	goto	i2l732
 30171  0151C8                     
 30172                           ;Types.c: 71: {
 30173                           ;Types.c: 72: pChunk -= pMax;
 30174  0151C8  5003               	movf	i2Byte_GetZone@pMax,w,c
 30175  0151CA  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 30176                           
 30177                           ;Types.c: 73: Offset += 1;
 30178  0151CC  2A08               	incf	i2Byte_GetZone@Offset,f,c
 30179  0151CE                     i2l732:
 30180  0151CE  5003               	movf	i2Byte_GetZone@pMax,w,c
 30181  0151D0  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 30182  0151D2  B0D8               	btfsc	status,0,c
 30183  0151D4  D7F9               	goto	i2l733
 30184                           
 30185                           ;Types.c: 74: }
 30186                           ;Types.c: 75: pChunk *= pChunkSize;
 30187  0151D6  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 30188  0151D8  0204               	mulwf	i2Byte_GetZone@pChunk,c
 30189  0151DA  50F3               	movf	prodl,w,c
 30190  0151DC  6E04               	movwf	i2Byte_GetZone@pChunk,c
 30191                           
 30192                           ;Types.c: 76: pChunk += Offset;
 30193  0151DE  5008               	movf	i2Byte_GetZone@Offset,w,c
 30194  0151E0  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 30195                           
 30196                           ;Types.c: 78: Output >>= pChunk;
 30197  0151E2  2804               	incf	i2Byte_GetZone@pChunk,w,c
 30198  0151E4  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 30199  0151E6  D002               	goto	i2u501_40
 30200  0151E8                     i2u501_45:
 30201  0151E8  90D8               	bcf	status,0,c
 30202  0151EA  3209               	rrcf	i2Byte_GetZone@Output,f,c
 30203  0151EC                     i2u501_40:
 30204  0151EC  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 30205  0151EE  D7FC               	goto	i2u501_45
 30206                           
 30207                           ;Types.c: 79: Output &= MASK;
 30208  0151F0  5007               	movf	i2Byte_GetZone@MASK,w,c
 30209  0151F2  1609               	andwf	i2Byte_GetZone@Output,f,c
 30210                           
 30211                           ;Types.c: 80: return Output;
 30212  0151F4  5009               	movf	i2Byte_GetZone@Output,w,c
 30213  0151F6  0012               	return	
 30214  0151F8                     __end_ofi2_Byte_GetZone:
 30215                           	opt stack 0
 30216                           tosu	equ	0xFFF
 30217                           tosh	equ	0xFFE
 30218                           tosl	equ	0xFFD
 30219                           pclatu	equ	0xFFB
 30220                           pclath	equ	0xFFA
 30221                           tblptru	equ	0xFF8
 30222                           tblptrh	equ	0xFF7
 30223                           tblptrl	equ	0xFF6
 30224                           tablat	equ	0xFF5
 30225                           prodh	equ	0xFF4
 30226                           prodl	equ	0xFF3
 30227                           intcon	equ	0xFF2
 30228                           indf0	equ	0xFEF
 30229                           postinc0	equ	0xFEE
 30230                           fsr0h	equ	0xFEA
 30231                           fsr0l	equ	0xFE9
 30232                           wreg	equ	0xFE8
 30233                           indf1	equ	0xFE7
 30234                           postdec1	equ	0xFE5
 30235                           fsr1h	equ	0xFE2
 30236                           fsr1l	equ	0xFE1
 30237                           indf2	equ	0xFDF
 30238                           postinc2	equ	0xFDE
 30239                           postdec2	equ	0xFDD
 30240                           plusw2	equ	0xFDB
 30241                           fsr2h	equ	0xFDA
 30242                           fsr2l	equ	0xFD9
 30243                           status	equ	0xFD8
 30244                           
 30245 ;; *************** function i2_Byte_SetBit *****************
 30246 ;; Defined at:
 30247 ;;		line 32 in file "Library/Types.c"
 30248 ;; Parameters:    Size  Location     Type
 30249 ;;  pInput          2    0[COMRAM] PTR struct Byte
 30250 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 30251 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 30252 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 30253 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 30254 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 30255 ;;		 -> NULL(0), 
 30256 ;;  pBit            1    2[COMRAM] unsigned char 
 30257 ;;  pValue          1    3[COMRAM] unsigned char 
 30258 ;; Auto vars:     Size  Location     Type
 30259 ;;		None
 30260 ;; Return value:  Size  Location     Type
 30261 ;;                  1    wreg      void 
 30262 ;; Registers used:
 30263 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 30264 ;; Tracked objects:
 30265 ;;		On entry : 0/0
 30266 ;;		On exit  : 0/0
 30267 ;;		Unchanged: 0/0
 30268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30269 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30271 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30272 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30273 ;;Total ram usage:        7 bytes
 30274 ;; Hardware stack levels used:    1
 30275 ;; This function calls:
 30276 ;;		Nothing
 30277 ;; This function is called by:
 30278 ;;		i2_Port_SetPin
 30279 ;; This function uses a non-reentrant model
 30280 ;;
 30281                           
 30282                           	psect	text166
 30283  015A9A                     __ptext166:
 30284                           	opt stack 0
 30285  015A9A                     i2_Byte_SetBit:
 30286                           	opt stack 15
 30287                           
 30288                           ;Types.c: 34: pValue &= 1;
 30289                           
 30290                           ;incstack = 0
 30291  015A9A  0E01               	movlw	1
 30292  015A9C  1604               	andwf	i2Byte_SetBit@pValue,f,c
 30293                           
 30294                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 30295  015A9E  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 30296  015AA2  0E01               	movlw	1
 30297  015AA4  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 30298  015AA6  2A05               	incf	??i2_Byte_SetBit,f,c
 30299  015AA8  D002               	goto	i2u550_44
 30300  015AAA                     i2u550_45:
 30301  015AAA  90D8               	bcf	status,0,c
 30302  015AAC  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 30303  015AAE                     i2u550_44:
 30304  015AAE  2E05               	decfsz	??i2_Byte_SetBit,f,c
 30305  015AB0  D7FC               	goto	i2u550_45
 30306  015AB2  5006               	movf	??i2_Byte_SetBit+1,w,c
 30307  015AB4  0AFF               	xorlw	255
 30308  015AB6  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 30309  015AB8  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 30310  015ABC  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 30311  015AC0  5007               	movf	??i2_Byte_SetBit+2,w,c
 30312  015AC2  16DF               	andwf	indf2,f,c
 30313                           
 30314                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 30315  015AC4  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 30316  015AC8  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 30317  015ACC  2A05               	incf	??i2_Byte_SetBit,f,c
 30318  015ACE  D002               	goto	i2u551_44
 30319  015AD0                     i2u551_45:
 30320  015AD0  90D8               	bcf	status,0,c
 30321  015AD2  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 30322  015AD4                     i2u551_44:
 30323  015AD4  2E05               	decfsz	??i2_Byte_SetBit,f,c
 30324  015AD6  D7FC               	goto	i2u551_45
 30325  015AD8  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 30326  015ADC  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 30327  015AE0  5006               	movf	??i2_Byte_SetBit+1,w,c
 30328  015AE2  12DF               	iorwf	indf2,f,c
 30329  015AE4  0012               	return		;funcret
 30330  015AE6                     __end_ofi2_Byte_SetBit:
 30331                           	opt stack 0
 30332                           tosu	equ	0xFFF
 30333                           tosh	equ	0xFFE
 30334                           tosl	equ	0xFFD
 30335                           pclatu	equ	0xFFB
 30336                           pclath	equ	0xFFA
 30337                           tblptru	equ	0xFF8
 30338                           tblptrh	equ	0xFF7
 30339                           tblptrl	equ	0xFF6
 30340                           tablat	equ	0xFF5
 30341                           prodh	equ	0xFF4
 30342                           prodl	equ	0xFF3
 30343                           intcon	equ	0xFF2
 30344                           indf0	equ	0xFEF
 30345                           postinc0	equ	0xFEE
 30346                           fsr0h	equ	0xFEA
 30347                           fsr0l	equ	0xFE9
 30348                           wreg	equ	0xFE8
 30349                           indf1	equ	0xFE7
 30350                           postdec1	equ	0xFE5
 30351                           fsr1h	equ	0xFE2
 30352                           fsr1l	equ	0xFE1
 30353                           indf2	equ	0xFDF
 30354                           postinc2	equ	0xFDE
 30355                           postdec2	equ	0xFDD
 30356                           plusw2	equ	0xFDB
 30357                           fsr2h	equ	0xFDA
 30358                           fsr2l	equ	0xFD9
 30359                           status	equ	0xFD8
 30360                           
 30361 ;; *************** function i2_MXK_SwitchTo *****************
 30362 ;; Defined at:
 30363 ;;		line 105 in file "Library/MXK.c"
 30364 ;; Parameters:    Size  Location     Type
 30365 ;;  pModule         1    wreg     enum E6927
 30366 ;; Auto vars:     Size  Location     Type
 30367 ;;  pModule         1    7[COMRAM] enum E6927
 30368 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 30369 ;; Return value:  Size  Location     Type
 30370 ;;                  1    wreg      unsigned char 
 30371 ;; Registers used:
 30372 ;;		wreg, status,2, status,0, cstack
 30373 ;; Tracked objects:
 30374 ;;		On entry : 0/0
 30375 ;;		On exit  : 0/0
 30376 ;;		Unchanged: 0/0
 30377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30379 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30381 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30382 ;;Total ram usage:        2 bytes
 30383 ;; Hardware stack levels used:    1
 30384 ;; Hardware stack levels required when called:    1
 30385 ;; This function calls:
 30386 ;;		i2_delay_us
 30387 ;; This function is called by:
 30388 ;;		i2_Motor_Step
 30389 ;; This function uses a non-reentrant model
 30390 ;;
 30391                           
 30392                           	psect	text167
 30393  016004                     __ptext167:
 30394                           	opt stack 0
 30395  016004                     i2_MXK_SwitchTo:
 30396                           	opt stack 15
 30397                           
 30398                           ;incstack = 0
 30399                           ;i2MXK_SwitchTo@pModule stored from wreg
 30400  016004  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 30401                           
 30402                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 30403  016006  5086               	movf	3974,w,c	;volatile
 30404  016008  0B0F               	andlw	15
 30405  01600A  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 30406                           
 30407                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 30408  01600C  504B               	movf	_Bus_State,w,c
 30409  01600E  A4D8               	btfss	status,2,c
 30410  016010  D002               	goto	i2l1730
 30411                           
 30412                           ;MXK.c: 110: return 0;
 30413  016012  0E00               	movlw	0
 30414  016014  0012               	return	
 30415  016016                     i2l1730:
 30416                           
 30417                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 30418  016016  0E00               	movlw	0
 30419  016018  6E4B               	movwf	_Bus_State,c
 30420                           
 30421                           ;MXK.c: 114: if (CUR != pModule)
 30422  01601A  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 30423  01601C  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 30424  01601E  B4D8               	btfsc	status,2,c
 30425  016020  D00A               	goto	i2l1732
 30426                           
 30427                           ;MXK.c: 115: {
 30428                           ;MXK.c: 116: PORTG &= ~(0xF);
 30429  016022  0EF0               	movlw	240
 30430  016024  1686               	andwf	3974,f,c	;volatile
 30431                           
 30432                           ;MXK.c: 117: PORTG |= pModule;
 30433  016026  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 30434  016028  1286               	iorwf	3974,f,c	;volatile
 30435                           
 30436                           ;MXK.c: 120: delay_us(10);
 30437  01602A  0E00               	movlw	0
 30438  01602C  6E02               	movwf	i2delay_us@us+1,c
 30439  01602E  0E0A               	movlw	10
 30440  016030  6E01               	movwf	i2delay_us@us,c
 30441  016032  ECF3  F0AE         	call	i2_delay_us	;wreg free
 30442  016036                     i2l1732:
 30443                           
 30444                           ;MXK.c: 121: }
 30445                           ;MXK.c: 122: return 1;
 30446  016036  0E01               	movlw	1
 30447  016038  0012               	return	
 30448  01603A                     __end_ofi2_MXK_SwitchTo:
 30449                           	opt stack 0
 30450                           tosu	equ	0xFFF
 30451                           tosh	equ	0xFFE
 30452                           tosl	equ	0xFFD
 30453                           pclatu	equ	0xFFB
 30454                           pclath	equ	0xFFA
 30455                           tblptru	equ	0xFF8
 30456                           tblptrh	equ	0xFF7
 30457                           tblptrl	equ	0xFF6
 30458                           tablat	equ	0xFF5
 30459                           prodh	equ	0xFF4
 30460                           prodl	equ	0xFF3
 30461                           intcon	equ	0xFF2
 30462                           indf0	equ	0xFEF
 30463                           postinc0	equ	0xFEE
 30464                           fsr0h	equ	0xFEA
 30465                           fsr0l	equ	0xFE9
 30466                           wreg	equ	0xFE8
 30467                           indf1	equ	0xFE7
 30468                           postdec1	equ	0xFE5
 30469                           fsr1h	equ	0xFE2
 30470                           fsr1l	equ	0xFE1
 30471                           indf2	equ	0xFDF
 30472                           postinc2	equ	0xFDE
 30473                           postdec2	equ	0xFDD
 30474                           plusw2	equ	0xFDB
 30475                           fsr2h	equ	0xFDA
 30476                           fsr2l	equ	0xFD9
 30477                           status	equ	0xFD8
 30478                           
 30479 ;; *************** function i2_delay_us *****************
 30480 ;; Defined at:
 30481 ;;		line 255 in file "Library/Types.c"
 30482 ;; Parameters:    Size  Location     Type
 30483 ;;  us              2    0[COMRAM] unsigned short 
 30484 ;; Auto vars:     Size  Location     Type
 30485 ;;  delay_us        4    2[COMRAM] unsigned long 
 30486 ;; Return value:  Size  Location     Type
 30487 ;;                  1    wreg      void 
 30488 ;; Registers used:
 30489 ;;		wreg, status,2, status,0
 30490 ;; Tracked objects:
 30491 ;;		On entry : 0/0
 30492 ;;		On exit  : 0/0
 30493 ;;		Unchanged: 0/0
 30494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30495 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30496 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30498 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30499 ;;Total ram usage:        6 bytes
 30500 ;; Hardware stack levels used:    1
 30501 ;; This function calls:
 30502 ;;		Nothing
 30503 ;; This function is called by:
 30504 ;;		i2_MXK_SwitchTo
 30505 ;; This function uses a non-reentrant model
 30506 ;;
 30507                           
 30508                           	psect	text168
 30509  015DE6                     __ptext168:
 30510                           	opt stack 0
 30511  015DE6                     i2_delay_us:
 30512                           	opt stack 15
 30513                           
 30514                           ;Types.c: 256: unsigned long u;
 30515                           ;Types.c: 257: while (us--) {
 30516                           
 30517                           ;incstack = 0
 30518  015DE6  D016               	goto	i2u554_40
 30519  015DE8                     i2l9106:
 30520                           
 30521                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 30522  015DE8  0E00               	movlw	0
 30523  015DEA  6E03               	movwf	i2delay_us@u,c
 30524  015DEC  0E00               	movlw	0
 30525  015DEE  6E04               	movwf	i2delay_us@u+1,c
 30526  015DF0  0E00               	movlw	0
 30527  015DF2  6E05               	movwf	i2delay_us@u+2,c
 30528  015DF4  0E00               	movlw	0
 30529  015DF6  6E06               	movwf	i2delay_us@u+3,c
 30530  015DF8                     i2l9108:
 30531  015DF8  5003               	movf	i2delay_us@u,w,c
 30532  015DFA  1004               	iorwf	i2delay_us@u+1,w,c
 30533  015DFC  1005               	iorwf	i2delay_us@u+2,w,c
 30534  015DFE  1006               	iorwf	i2delay_us@u+3,w,c
 30535  015E00  A4D8               	btfss	status,2,c
 30536  015E02  D008               	goto	i2u554_40
 30537  015E04  F000               	nop		; ;# 
 30538  015E06  0E01               	movlw	1
 30539  015E08  2603               	addwf	i2delay_us@u,f,c
 30540  015E0A  0E00               	movlw	0
 30541  015E0C  2204               	addwfc	i2delay_us@u+1,f,c
 30542  015E0E  2205               	addwfc	i2delay_us@u+2,f,c
 30543  015E10  2206               	addwfc	i2delay_us@u+3,f,c
 30544  015E12  D7F2               	goto	i2l9108
 30545  015E14                     i2u554_40:
 30546  015E14  0601               	decf	i2delay_us@us,f,c
 30547  015E16  A0D8               	btfss	status,0,c
 30548  015E18  0602               	decf	i2delay_us@us+1,f,c
 30549  015E1A  2801               	incf	i2delay_us@us,w,c
 30550  015E1C  E1E5               	bnz	i2l9106
 30551  015E1E  2802               	incf	i2delay_us@us+1,w,c
 30552  015E20  B4D8               	btfsc	status,2,c
 30553  015E22  0012               	return	
 30554  015E24  D7E1               	goto	i2l832
 30555  015E26                     __end_ofi2_delay_us:
 30556                           	opt stack 0
 30557                           tosu	equ	0xFFF
 30558                           tosh	equ	0xFFE
 30559                           tosl	equ	0xFFD
 30560                           pclatu	equ	0xFFB
 30561                           pclath	equ	0xFFA
 30562                           tblptru	equ	0xFF8
 30563                           tblptrh	equ	0xFF7
 30564                           tblptrl	equ	0xFF6
 30565                           tablat	equ	0xFF5
 30566                           prodh	equ	0xFF4
 30567                           prodl	equ	0xFF3
 30568                           intcon	equ	0xFF2
 30569                           indf0	equ	0xFEF
 30570                           postinc0	equ	0xFEE
 30571                           fsr0h	equ	0xFEA
 30572                           fsr0l	equ	0xFE9
 30573                           wreg	equ	0xFE8
 30574                           indf1	equ	0xFE7
 30575                           postdec1	equ	0xFE5
 30576                           fsr1h	equ	0xFE2
 30577                           fsr1l	equ	0xFE1
 30578                           indf2	equ	0xFDF
 30579                           postinc2	equ	0xFDE
 30580                           postdec2	equ	0xFDD
 30581                           plusw2	equ	0xFDB
 30582                           fsr2h	equ	0xFDA
 30583                           fsr2l	equ	0xFD9
 30584                           status	equ	0xFD8
 30585                           
 30586 ;; *************** function i2_MXK_Release *****************
 30587 ;; Defined at:
 30588 ;;		line 130 in file "Library/MXK.c"
 30589 ;; Parameters:    Size  Location     Type
 30590 ;;		None
 30591 ;; Auto vars:     Size  Location     Type
 30592 ;;		None
 30593 ;; Return value:  Size  Location     Type
 30594 ;;                  1    wreg      unsigned char 
 30595 ;; Registers used:
 30596 ;;		wreg, status,2, status,0
 30597 ;; Tracked objects:
 30598 ;;		On entry : 0/0
 30599 ;;		On exit  : 0/0
 30600 ;;		Unchanged: 0/0
 30601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30605 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30606 ;;Total ram usage:        0 bytes
 30607 ;; Hardware stack levels used:    1
 30608 ;; This function calls:
 30609 ;;		Nothing
 30610 ;; This function is called by:
 30611 ;;		i2_Motor_Step
 30612 ;; This function uses a non-reentrant model
 30613 ;;
 30614                           
 30615                           	psect	text169
 30616  016654                     __ptext169:
 30617                           	opt stack 0
 30618  016654                     i2_MXK_Release:
 30619                           	opt stack 16
 30620                           
 30621                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 30622                           
 30623                           ;incstack = 0
 30624  016654  0E01               	movlw	1
 30625  016656  6E4B               	movwf	_Bus_State,c
 30626                           
 30627                           ;MXK.c: 135: return 1;
 30628                           ;	Return value of i2_MXK_Release is never used
 30629  016658  0012               	return	
 30630  01665A                     __end_ofi2_MXK_Release:
 30631                           	opt stack 0
 30632                           tosu	equ	0xFFF
 30633                           tosh	equ	0xFFE
 30634                           tosl	equ	0xFFD
 30635                           pclatu	equ	0xFFB
 30636                           pclath	equ	0xFFA
 30637                           tblptru	equ	0xFF8
 30638                           tblptrh	equ	0xFF7
 30639                           tblptrl	equ	0xFF6
 30640                           tablat	equ	0xFF5
 30641                           prodh	equ	0xFF4
 30642                           prodl	equ	0xFF3
 30643                           intcon	equ	0xFF2
 30644                           indf0	equ	0xFEF
 30645                           postinc0	equ	0xFEE
 30646                           fsr0h	equ	0xFEA
 30647                           fsr0l	equ	0xFE9
 30648                           wreg	equ	0xFE8
 30649                           indf1	equ	0xFE7
 30650                           postdec1	equ	0xFE5
 30651                           fsr1h	equ	0xFE2
 30652                           fsr1l	equ	0xFE1
 30653                           indf2	equ	0xFDF
 30654                           postinc2	equ	0xFDE
 30655                           postdec2	equ	0xFDD
 30656                           plusw2	equ	0xFDB
 30657                           fsr2h	equ	0xFDA
 30658                           fsr2l	equ	0xFD9
 30659                           status	equ	0xFD8
 30660                           
 30661 ;; *************** function i2_MXK_Queue *****************
 30662 ;; Defined at:
 30663 ;;		line 144 in file "Library/MXK.c"
 30664 ;; Parameters:    Size  Location     Type
 30665 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 30666 ;;		 -> Absolute function(1), Motor_Step(1), 
 30667 ;; Auto vars:     Size  Location     Type
 30668 ;;		None
 30669 ;; Return value:  Size  Location     Type
 30670 ;;                  1    wreg      void 
 30671 ;; Registers used:
 30672 ;;		wreg, status,2, status,0
 30673 ;; Tracked objects:
 30674 ;;		On entry : 0/0
 30675 ;;		On exit  : 0/0
 30676 ;;		Unchanged: 0/0
 30677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30678 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30681 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30682 ;;Total ram usage:        3 bytes
 30683 ;; Hardware stack levels used:    1
 30684 ;; This function calls:
 30685 ;;		Nothing
 30686 ;; This function is called by:
 30687 ;;		i2_Motor_Step
 30688 ;; This function uses a non-reentrant model
 30689 ;;
 30690                           
 30691                           	psect	text170
 30692  0165BA                     __ptext170:
 30693                           	opt stack 0
 30694  0165BA                     i2_MXK_Queue:
 30695                           	opt stack 16
 30696                           
 30697                           ;MXK.c: 146: lQueue = pCallback;
 30698                           
 30699                           ;incstack = 0
 30700  0165BA  C001  F0BC         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 30701  0165BE  C002  F0BD         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 30702  0165C2  C003  F0BE         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 30703  0165C6  0012               	return		;funcret
 30704  0165C8                     __end_ofi2_MXK_Queue:
 30705                           	opt stack 0
 30706                           tosu	equ	0xFFF
 30707                           tosh	equ	0xFFE
 30708                           tosl	equ	0xFFD
 30709                           pclatu	equ	0xFFB
 30710                           pclath	equ	0xFFA
 30711                           tblptru	equ	0xFF8
 30712                           tblptrh	equ	0xFF7
 30713                           tblptrl	equ	0xFF6
 30714                           tablat	equ	0xFF5
 30715                           prodh	equ	0xFF4
 30716                           prodl	equ	0xFF3
 30717                           intcon	equ	0xFF2
 30718                           indf0	equ	0xFEF
 30719                           postinc0	equ	0xFEE
 30720                           fsr0h	equ	0xFEA
 30721                           fsr0l	equ	0xFE9
 30722                           wreg	equ	0xFE8
 30723                           indf1	equ	0xFE7
 30724                           postdec1	equ	0xFE5
 30725                           fsr1h	equ	0xFE2
 30726                           fsr1l	equ	0xFE1
 30727                           indf2	equ	0xFDF
 30728                           postinc2	equ	0xFDE
 30729                           postdec2	equ	0xFDD
 30730                           plusw2	equ	0xFDB
 30731                           fsr2h	equ	0xFDA
 30732                           fsr2l	equ	0xFD9
 30733                           status	equ	0xFD8
 30734                           tosu	equ	0xFFF
 30735                           tosh	equ	0xFFE
 30736                           tosl	equ	0xFFD
 30737                           pclatu	equ	0xFFB
 30738                           pclath	equ	0xFFA
 30739                           tblptru	equ	0xFF8
 30740                           tblptrh	equ	0xFF7
 30741                           tblptrl	equ	0xFF6
 30742                           tablat	equ	0xFF5
 30743                           prodh	equ	0xFF4
 30744                           prodl	equ	0xFF3
 30745                           intcon	equ	0xFF2
 30746                           indf0	equ	0xFEF
 30747                           postinc0	equ	0xFEE
 30748                           fsr0h	equ	0xFEA
 30749                           fsr0l	equ	0xFE9
 30750                           wreg	equ	0xFE8
 30751                           indf1	equ	0xFE7
 30752                           postdec1	equ	0xFE5
 30753                           fsr1h	equ	0xFE2
 30754                           fsr1l	equ	0xFE1
 30755                           indf2	equ	0xFDF
 30756                           postinc2	equ	0xFDE
 30757                           postdec2	equ	0xFDD
 30758                           plusw2	equ	0xFDB
 30759                           fsr2h	equ	0xFDA
 30760                           fsr2l	equ	0xFD9
 30761                           status	equ	0xFD8
 30762                           
 30763                           	psect	text171
 30764  000000                     __ptext171:
 30765                           	opt stack 0
 30766                           tosu	equ	0xFFF
 30767                           tosh	equ	0xFFE
 30768                           tosl	equ	0xFFD
 30769                           pclatu	equ	0xFFB
 30770                           pclath	equ	0xFFA
 30771                           tblptru	equ	0xFF8
 30772                           tblptrh	equ	0xFF7
 30773                           tblptrl	equ	0xFF6
 30774                           tablat	equ	0xFF5
 30775                           prodh	equ	0xFF4
 30776                           prodl	equ	0xFF3
 30777                           intcon	equ	0xFF2
 30778                           indf0	equ	0xFEF
 30779                           postinc0	equ	0xFEE
 30780                           fsr0h	equ	0xFEA
 30781                           fsr0l	equ	0xFE9
 30782                           wreg	equ	0xFE8
 30783                           indf1	equ	0xFE7
 30784                           postdec1	equ	0xFE5
 30785                           fsr1h	equ	0xFE2
 30786                           fsr1l	equ	0xFE1
 30787                           indf2	equ	0xFDF
 30788                           postinc2	equ	0xFDE
 30789                           postdec2	equ	0xFDD
 30790                           plusw2	equ	0xFDB
 30791                           fsr2h	equ	0xFDA
 30792                           fsr2l	equ	0xFD9
 30793                           status	equ	0xFD8
 30794                           
 30795                           	psect	rparam
 30796  0000                     tosu	equ	0xFFF
 30797                           tosh	equ	0xFFE
 30798                           tosl	equ	0xFFD
 30799                           pclatu	equ	0xFFB
 30800                           pclath	equ	0xFFA
 30801                           tblptru	equ	0xFF8
 30802                           tblptrh	equ	0xFF7
 30803                           tblptrl	equ	0xFF6
 30804                           tablat	equ	0xFF5
 30805                           prodh	equ	0xFF4
 30806                           prodl	equ	0xFF3
 30807                           intcon	equ	0xFF2
 30808                           indf0	equ	0xFEF
 30809                           postinc0	equ	0xFEE
 30810                           fsr0h	equ	0xFEA
 30811                           fsr0l	equ	0xFE9
 30812                           wreg	equ	0xFE8
 30813                           indf1	equ	0xFE7
 30814                           postdec1	equ	0xFE5
 30815                           fsr1h	equ	0xFE2
 30816                           fsr1l	equ	0xFE1
 30817                           indf2	equ	0xFDF
 30818                           postinc2	equ	0xFDE
 30819                           postdec2	equ	0xFDD
 30820                           plusw2	equ	0xFDB
 30821                           fsr2h	equ	0xFDA
 30822                           fsr2l	equ	0xFD9
 30823                           status	equ	0xFD8
 30824                           
 30825                           	psect	temp
 30826  000051                     btemp:
 30827                           	opt stack 0
 30828  000051                     	ds	1
 30829  0000                     int$flags	set	btemp
 30830  0000                     wtemp6	set	btemp+1
 30831                           tosu	equ	0xFFF
 30832                           tosh	equ	0xFFE
 30833                           tosl	equ	0xFFD
 30834                           pclatu	equ	0xFFB
 30835                           pclath	equ	0xFFA
 30836                           tblptru	equ	0xFF8
 30837                           tblptrh	equ	0xFF7
 30838                           tblptrl	equ	0xFF6
 30839                           tablat	equ	0xFF5
 30840                           prodh	equ	0xFF4
 30841                           prodl	equ	0xFF3
 30842                           intcon	equ	0xFF2
 30843                           indf0	equ	0xFEF
 30844                           postinc0	equ	0xFEE
 30845                           fsr0h	equ	0xFEA
 30846                           fsr0l	equ	0xFE9
 30847                           wreg	equ	0xFE8
 30848                           indf1	equ	0xFE7
 30849                           postdec1	equ	0xFE5
 30850                           fsr1h	equ	0xFE2
 30851                           fsr1l	equ	0xFE1
 30852                           indf2	equ	0xFDF
 30853                           postinc2	equ	0xFDE
 30854                           postdec2	equ	0xFDD
 30855                           plusw2	equ	0xFDB
 30856                           fsr2h	equ	0xFDA
 30857                           fsr2l	equ	0xFD9
 30858                           status	equ	0xFD8


Data Sizes:
    Strings     139
    Constant    730
    Data        29
    BSS         822
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      80
    BANK0           160     89     160
    BANK1           256    256     256
    BANK2           256    256     256
    BANK3           256     10     250
    BANK4           256      0     200
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[7]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 46
		 -> STR_14(CODE[21]), STR_13(CODE[21]), STR_12(CODE[21]), STR_11(CODE[21]), 
		 -> STR_10(CODE[21]), STR_9(CODE[3]), STR_8(CODE[34]), STR_7(CODE[3]), 
		 -> STR_6(CODE[14]), STR_5(CODE[3]), STR_4(CODE[46]), STR_3(CODE[3]), 
		 -> STR_2(CODE[46]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__memset	PTR void  size(2) Largest target is 100
		 -> iRScriptStack(BANK4[100]), 

    load_iRScriptStack@loadByte	PTR void [1] size(2) Largest target is 1
		 -> ?_load_iRScriptStack(BANK0[1]), 

    irobot_query_and_update@packetIDs	PTR void [1] size(2) Largest target is 1
		 -> ?_irobot_query_and_update(BANK0[1]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    Timer0_Start@pFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Motor_Speed@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK3[6]), 

    Motor_Move@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK3[6]), 

    lMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK3[6]), NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    Motor_Init@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK3[6]), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11800I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Voltage@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN0(BANK0[5]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Start@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 
		 -> NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    S11482ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 
		 -> NULL(NULL[0]), 

    ADC_Init@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK3[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK3[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK3[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK3[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK3[2]), PortE..(BANK3[2]), PortB..(BANK3[2]), 
		 -> PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), PortA(BANK3[10]), 
		 -> PortB(BANK3[10]), PortE(BANK3[10]), PortD(BANK3[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK3[2]), PortC..(BANK0[2]), PortD..(BANK3[2]), PortE..(BANK3[2]), 
		 -> PortB..(BANK3[2]), PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), 
		 -> PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), PortD(BANK3[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK3[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK3[2]), PortE..(BANK3[2]), PortB..(BANK3[2]), 
		 -> PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), PortA(BANK3[10]), 
		 -> PortB(BANK3[10]), PortE(BANK3[10]), PortD(BANK3[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK3[2]), PortC..(BANK0[2]), PortD..(BANK3[2]), PortE..(BANK3[2]), 
		 -> PortB..(BANK3[2]), PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), 
		 -> PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK3[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK3[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK3[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK3[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortE(BANK3[10]), PortD(BANK3[10]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK3[10]), PortD(BANK3[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK0[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK3[10]), PortE(BANK3[10]), PortC(BANK0[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortE(BANK3[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK3[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK3[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK3[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK3[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK3[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK3[10]), 
		 -> PortD(BANK3[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK3[10]), TestButton(BANK3[10]), HMIBoard(BANK3[58]), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK3[10]), TestButton(BANK3[10]), HMIBoard(BANK3[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _main->_mode4
    _mode4->___fltol
    _irobot_rotate_to->___fltol
    _irobot_angle_wait->_load_iRScriptStack
    _mode2->_Console_Render
    _irobot_move_straight->_irobot_move
    _mode1->___fltol
    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update
    _irobot_query_and_update->_rx_assign
    _rx_assign->_sort_iRBumpDrop
    _printf->_putch
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    _irobot_stop_motion->_irobot_move
    _irobot_move->_load_iRScriptStack
    _irobot_song_play->_eusart_putch
    ___fltol->_ADC_Voltage
    _Motor_Speed->_Timer0_Init
    _Motor_Move->_Timer0_Start
    _HMI_Render->_OutSeg
    _OutSeg->_SPI_Send
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Console_MakeField->_Byte_GetBit
    _ADC_Voltage->___flmul
    ___flmul->___fldiv
    ___fldiv->___xxtofl
    _init->_HMI_Init
    _irobot_led_power_on->_irobot_leds
    _irobot_leds->_load_iRScriptStack
    _irobot_init_song_0->_eusart_putch
    _irobot_init->_eusart_putch
    _Motor_Init->_Port_SetPinType
    _Timer0_Init->___lldiv
    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _HMI_Init->_Button_Init
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Byte_SetQuad->_Byte_SetZone
    _ADC_Start->_ADC_SetChannel
    _ADC_Init->_ADC_SetupIO
    _HMI_Poll->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _MXK_TestButton->_Port_GetPin
    _MXK_DIPSwitch->_Port_GetQuad
    _HMI_UpSwitch->_Port_GetPin
    _HMI_RightSwitch->_Port_GetPin
    _HMI_LeftSwitch->_Port_GetPin
    _HMI_DownSwitch->_Port_GetPin
    _HMI_DIPSwitch->_Port_GetQuad
    _Event_TestButton->_LED_Toggle
    _HMI_SetNumber->_itos
    _itos->___lwmod
    ___lwmod->___lwdiv
    _HMI_SetSegments->_ToSegment
    _Event_DIPSwitch->_LED_Toggle
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_mode1
    _main->_mode4
    _mode4->_irobot_rotate_to
    _mode3->_irobot_rotate_to

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0 1846113
                                              8 BANK3      2     2      0
                     _Console_Render
                           _HMI_Poll
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                            _getMode
                               _init
                              _mode1
                              _mode2
                              _mode3
                              _mode4
                             _printf
 ---------------------------------------------------------------------------------
 (1) _mode4                                                9     9      0  215059
                                             88 BANK0      1     1      0
                                              4 BANK3      4     4      0
                          _ADC_Start
                        _ADC_Voltage
                     _Console_Render
                           _HMI_Poll
                         _HMI_Render
                      _HMI_SetNumber
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                         _Motor_Move
                        _Motor_Speed
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl
               _irobot_move_straight
                   _irobot_rotate_to
                   _irobot_song_play
                 _irobot_stop_motion
                             _printf
                       _update_angle
              _update_bump_and_cliff
                    _update_distance
 ---------------------------------------------------------------------------------
 (1) _mode3                                                0     0      0   13810
                   _irobot_rotate_to
 ---------------------------------------------------------------------------------
 (2) _irobot_rotate_to                                     4     0      4   13810
                                              0 BANK3      4     0      4
                            ___fltol (ARG)
                  _irobot_angle_wait
                      _irobot_rotate
                 _irobot_stop_motion
 ---------------------------------------------------------------------------------
 (3) _irobot_rotate                                        8     4      4    8682
                                             29 BANK0      8     4      4
                        _irobot_move
                 _irobot_stop_motion
                       _update_angle
 ---------------------------------------------------------------------------------
 (3) _irobot_angle_wait                                    4     2      2    1221
                                             16 BANK0      4     2      2
                 _load_iRScriptStack
                 _twos_complement_of
 ---------------------------------------------------------------------------------
 (1) _mode2                                                2     2      0  170454
                                             44 BANK0      2     2      0
                     _Console_Render
                           _HMI_Poll
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
               _irobot_move_straight
                   _irobot_song_play
                 _irobot_stop_motion
                             _printf
                       _update_angle
              _update_bump_and_cliff
                    _update_distance
 ---------------------------------------------------------------------------------
 (2) _irobot_move_straight                                 2     0      2    3510
                                             25 BANK0      2     0      2
                        _irobot_move
 ---------------------------------------------------------------------------------
 (1) _mode1                                               16    16      0  194488
                                              0 BANK3      8     8      0
                          _ADC_Start
                        _ADC_Voltage
                     _Console_Render
                           _HMI_Poll
                         _HMI_Render
                      _HMI_SetNumber
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                         _Motor_Move
                        _Motor_Speed
                            ___fldiv
                            ___fltol
                   _irobot_song_play
                 _irobot_stop_motion
                             _printf
                       _update_angle
              _update_bump_and_cliff
                    _update_distance
 ---------------------------------------------------------------------------------
 (2) _update_distance                                      0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (2) _update_bump_and_cliff                                0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (2) _update_angle                                         0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (3) _irobot_query_and_update                            535   525     10    1737
                                              6 BANK0     23    13     10
                                              0 BANK1    256   256      0
                                              0 BANK2    256   256      0
                       _eusart_getch
                       _eusart_putch
                    _get_packet_size
                          _rx_assign
 ---------------------------------------------------------------------------------
 (4) _rx_assign                                            5     3      2     738
                                              1 BANK0      5     3      2
                    _sort_iRBumpDrop
 ---------------------------------------------------------------------------------
 (5) _sort_iRBumpDrop                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _get_packet_size                                      1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _eusart_getch                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printf                                              25    17      8    6491
                                             21 BANK0     16     8      8
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0    1972
                                             20 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (3) _Console_PrintChar                                    4     4      0    1941
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (4) _Console_Tab                                          8     8      0    1390
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1053
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (5) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (6) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (5) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _irobot_stop_motion                                   1     1      0    3206
                                             25 BANK0      1     1      0
                        _irobot_move
 ---------------------------------------------------------------------------------
 (3) _irobot_move                                          9     5      4    3175
                                             16 BANK0      9     5      4
                       _eusart_putch
                 _load_iRScriptStack
                 _twos_complement_of
 ---------------------------------------------------------------------------------
 (4) _twos_complement_of                                   2     0      2     806
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _irobot_song_play                                     1     1      0      62
                                              1 BANK0      1     1      0
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4    1249
                                             82 BANK0      6     2      4
                                              0 BANK1      4     4      0
                        _ADC_Voltage (ARG)
                            ___fldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _Motor_Speed                                          4     0      4    4143
                                             27 BANK0      4     0      4
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (2) _Motor_Move                                           6     2      4    1219
                                              3 BANK0      6     2      4
                       _Timer0_Start
 ---------------------------------------------------------------------------------
 (3) _Timer0_Start                                         3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _HMI_Render                                           2     2      0    1593
                                              8 BANK0      2     2      0
                             _OutSeg
 ---------------------------------------------------------------------------------
 (3) _OutSeg                                               5     4      1    1463
                                              3 BANK0      5     4      1
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (2) _Console_Render                                      11    11      0   35327
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (3) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (3) _LCD_DrawField                                       17     7     10   16520
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     536
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (4) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (2) _ADC_Voltage                                         18    14      4    8729
                                             64 BANK0     18    14      4
                            ___fldiv
                            ___flmul
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4     696
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             25    17      8    3065
                                             39 BANK0     25    17      8
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             25    17      8    4007
                                             14 BANK0     25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0  997184
                           _ADC_Init
                          _ADC_Start
                       _Console_Init
                           _HMI_Init
                         _ISR_Enable
                           _LCD_Init
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                         _Motor_Init
                           _delay_ms
                        _eusart_init
                        _irobot_init
                 _irobot_init_song_0
                _irobot_led_power_on
 ---------------------------------------------------------------------------------
 (2) _irobot_led_power_on                                  1     1      0    1358
                                             20 BANK0      1     1      0
                        _irobot_leds
 ---------------------------------------------------------------------------------
 (3) _irobot_leds                                          4     1      3    1327
                                             16 BANK0      4     1      3
                       _eusart_putch
                 _load_iRScriptStack
 ---------------------------------------------------------------------------------
 (4) _load_iRScriptStack                                  16     6     10     167
                                              0 BANK0     16     6     10
 ---------------------------------------------------------------------------------
 (2) _irobot_init_song_0                                   0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (2) _irobot_init                                          0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (4) _eusart_putch                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _eusart_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Motor_Init                                           4     0      4   88478
                                             45 BANK0      4     0      4
                        _Port_SetPin
                    _Port_SetPinType
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (3) _Timer0_Init                                         14    10      4    3138
                                             13 BANK0     14    10      4
                       _Timer0_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) _Timer0_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_Init                                             0     0      0  362312
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Port_Init                                            6     3      3  111429
                                             64 BANK0      6     3      3
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (3) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      6     3      3
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (4) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (4) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (3) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (4) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (2) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             4     4      0  290820
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (4) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (4) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (5) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (4) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (6) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Configure_GPIOs                                      0     0      0  261813
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (4) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _LCD_Reset                                            0     0      0   94437
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             6     4      2    1318
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (5) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (5) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _ISR_Enable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _HMI_Init                                             2     2      0  217901
                                             72 BANK0      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _SPI_Init                                             8     2      6   86139
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (5) _Timer2_Init                                         17    13      4    2964
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8    2673
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (6) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _Button_Init                                         13     0     13  105207
                                             59 BANK0     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (4) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (6) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (4) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (6) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (4) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Start                                            4     2      2    1222
                                              2 BANK0      4     2      2
                            _ADC_Off
                             _ADC_On
                     _ADC_SetChannel
 ---------------------------------------------------------------------------------
 (2) _ADC_Init                                             3     0      3    2172
                                              4 BANK0      3     0      3
                      _ADC_Calibrate
                  _ADC_ClockDivision
                 _ADC_ConversionTime
                     _ADC_SetChannel
                        _ADC_SetupIO
 ---------------------------------------------------------------------------------
 (3) _ADC_SetupIO                                          4     4      0      65
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _ADC_SetChannel                                       2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ConversionTime                                   2     2      0     136
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ClockDivision                                    3     3      0     172
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _ADC_Calibrate                                        0     0      0       0
                            _ADC_Off
                             _ADC_On
 ---------------------------------------------------------------------------------
 (3) _ADC_On                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getMode                                              0     0      0   96823
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                           _HMI_Poll
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (2) _HMI_Poll                                             0     0      0   85165
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (3) _Button_Poll                                          9     6      3   85165
                                             27 BANK0      9     6      3
                    _Event_DIPSwitch *
                         _Event_NULL *
                   _Event_TestButton *
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (4) _MXK_TestButton                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _MXK_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (4) _HMI_UpSwitch                                         0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_RightSwitch                                      0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_LeftSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_DownSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (5) _Port_GetQuad                                         6     3      3    1014
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (4) _Event_TestButton                                     1     1      0   37797
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (2) _HMI_SetNumber                                        2     0      2    4702
                                             22 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (3) _itos                                                10     6      4    3009
                                             12 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (4) _reverse                                              7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     840
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     849
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _HMI_SetSegments                                      5     3      2     446
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (4) _ToSegment                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _HMI_SetButton                                        8     8      0     207
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (4) _Event_NULL                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _Event_DIPSwitch                                      2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (5) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (6) _Port_TogglePin                                       4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (4) _Port_SetPin                                          5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (5) _Word_GetPair                                         3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (6) _Byte_GetPair                                         3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (7) _Byte_GetZone                                         9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (5) _Byte_SetBit                                          7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (5) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (5) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _ISR_Function                                       18    18      0    1778
                                             22 COMRAM    18    18      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (13) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (16) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (17) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (18) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (16) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (15) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (16) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Console_Render
     _Console_MakeField
       _Byte_GetBit
     _LCD_DrawField
       _Console_MakeField (ARG)
         _Byte_GetBit
       _LCD_Word_Write (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       ___wmul (ARG)
     _LCD_FillRectangle
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
   _HMI_Poll
     _Button_Poll
       _Event_DIPSwitch *
         _HMI_GetBar
         _HMI_SetBar
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Event_NULL *
       _Event_TestButton *
         _HMI_SetButton
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _reverse
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _HMI_DIPSwitch *
         _Port_GetQuad
       _HMI_DownSwitch *
         _Port_GetPin
       _HMI_LeftSwitch *
         _Port_GetPin
       _HMI_RightSwitch *
         _Port_GetPin
       _HMI_UpSwitch *
         _Port_GetPin
       _MXK_DIPSwitch *
         _Port_GetQuad
       _MXK_TestButton *
         _Port_GetPin
   _MXK_Dequeue
     Absolute function(Fake) *
     _Motor_Step *
       _MXK_Queue
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Timer0_Restart
       _Timer0_Stop
   _MXK_Release
   _MXK_SwitchTo
     _delay_us
   _getMode
     _HMI_DIPSwitch *
       _Port_GetQuad
     _HMI_DownSwitch *
       _Port_GetPin
     _HMI_LeftSwitch *
       _Port_GetPin
     _HMI_Poll *
       _Button_Poll
         _Event_DIPSwitch *
           _HMI_GetBar
           _HMI_SetBar
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Event_NULL *
         _Event_TestButton *
           _HMI_SetButton
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _reverse
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
     _HMI_RightSwitch *
       _Port_GetPin
     _HMI_UpSwitch *
       _Port_GetPin
     _MXK_DIPSwitch *
       _Port_GetQuad
     _MXK_TestButton *
       _Port_GetPin
   _init
     _ADC_Init
       _ADC_Calibrate
         _ADC_Off
         _ADC_On
       _ADC_ClockDivision
       _ADC_ConversionTime
       _ADC_SetChannel
       _ADC_SetupIO
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _Console_Init
     _HMI_Init
       _Button_Init
         _HMI_InitButtons *
         _MXK_InitDIPSwitch *
           _Port_SetQuadType
             _Byte_SetQuad
               _Byte_SetZone
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
         _MXK_InitTestButton *
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MinSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _ISR_Enable
     _LCD_Init
       _Configure_GPIOs
         _LCD_Reset
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Reset_High
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _Reset_Low
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _delay_ms
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_Init
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
           _SPI_DCS
           _SPI_DisableISR
           _Timer2_Init
             _Timer2_Clear
             ___lldiv
         _SPI_MaxSpeed
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
       _LCD_Fill
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
       _LCD_Write
         _Mode_Set
         _SPI_Send
       _Set_Rotation
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _delay_ms
     _MXK_BlockSwitchTo
       _delay_us
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Init
       _LED_Init
         _LED_Set
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _Port_Init
         _GetPortPORT
         _GetPortProperties
         _GetPortTRIS
         _Port_Set
           _Byte_SetByte
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Port_SetType
           _Port_CheckPortType
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetQuadType
         _Byte_SetQuad
           _Byte_SetZone
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _delay_ms
     _MXK_Release
     _Motor_Init
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     _delay_ms
     _eusart_init
     _irobot_init
       _eusart_putch
     _irobot_init_song_0
       _eusart_putch
     _irobot_led_power_on
       _irobot_leds
         _eusart_putch
         _load_iRScriptStack
   _mode1
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _ADC_Voltage
       ___fldiv
         ___xxtofl (ARG)
       ___flmul
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _HMI_Poll
       _Button_Poll
         _Event_DIPSwitch *
           _HMI_GetBar
           _HMI_SetBar
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Event_NULL *
         _Event_TestButton *
           _HMI_SetButton
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _reverse
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
     _HMI_Render
       _OutSeg
         _SPI_Send
     _HMI_SetNumber
       _HMI_SetSegments
         _ToSegment
       _itos
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _reverse
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _Motor_Move
       _Timer0_Start
     _Motor_Speed
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     ___fldiv
       ___xxtofl (ARG)
     ___fltol
       _ADC_Voltage (ARG)
         ___fldiv
           ___xxtofl (ARG)
         ___flmul
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl
       ___fldiv (ARG)
         ___xxtofl (ARG)
     _irobot_song_play
       _eusart_putch
     _irobot_stop_motion
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _update_angle
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_bump_and_cliff
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_distance
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
   _mode2
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _HMI_Poll
       _Button_Poll
         _Event_DIPSwitch *
           _HMI_GetBar
           _HMI_SetBar
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Event_NULL *
         _Event_TestButton *
           _HMI_SetButton
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _reverse
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _irobot_move_straight
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _irobot_song_play
       _eusart_putch
     _irobot_stop_motion
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _update_angle
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_bump_and_cliff
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_distance
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
   _mode3
     _irobot_rotate_to
       ___fltol (ARG)
         _ADC_Voltage (ARG)
           ___fldiv
             ___xxtofl (ARG)
           ___flmul
             ___fldiv (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl
         ___fldiv (ARG)
           ___xxtofl (ARG)
       _irobot_angle_wait (ARG)
         _load_iRScriptStack
         _twos_complement_of
       _irobot_rotate (ARG)
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
         _irobot_stop_motion
           _irobot_move
             _eusart_putch
             _load_iRScriptStack
             _twos_complement_of
         _update_angle
           _irobot_query_and_update
             _eusart_getch
             _eusart_putch
             _get_packet_size
             _rx_assign
               _sort_iRBumpDrop
       _irobot_stop_motion (ARG)
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
   _mode4
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _ADC_Voltage
       ___fldiv
         ___xxtofl (ARG)
       ___flmul
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _HMI_Poll
       _Button_Poll
         _Event_DIPSwitch *
           _HMI_GetBar
           _HMI_SetBar
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Event_NULL *
         _Event_TestButton *
           _HMI_SetButton
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _reverse
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
     _HMI_Render
       _OutSeg
         _SPI_Send
     _HMI_SetNumber
       _HMI_SetSegments
         _ToSegment
       _itos
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _reverse
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _Motor_Move
       _Timer0_Start
     _Motor_Speed
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     ___fldiv
       ___xxtofl (ARG)
     ___flmul
       ___fldiv (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___fltol
       _ADC_Voltage (ARG)
         ___fldiv
           ___xxtofl (ARG)
         ___flmul
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl
       ___fldiv (ARG)
         ___xxtofl (ARG)
     ___xxtofl
     _irobot_move_straight
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _irobot_rotate_to
       ___fltol (ARG)
         _ADC_Voltage (ARG)
           ___fldiv
             ___xxtofl (ARG)
           ___flmul
             ___fldiv (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl
         ___fldiv (ARG)
           ___xxtofl (ARG)
       _irobot_angle_wait (ARG)
         _load_iRScriptStack
         _twos_complement_of
       _irobot_rotate (ARG)
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
         _irobot_stop_motion
           _irobot_move
             _eusart_putch
             _load_iRScriptStack
             _twos_complement_of
         _update_angle
           _irobot_query_and_update
             _eusart_getch
             _eusart_putch
             _get_packet_size
             _rx_assign
               _sort_iRBumpDrop
       _irobot_stop_motion (ARG)
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
     _irobot_song_play
       _eusart_putch
     _irobot_stop_motion
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _update_angle
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_bump_and_cliff
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_distance
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _Console_PrintChar
         _Console_Backspace
           _Console_ClearCursor
         _Console_FormFeed
         _Console_IncrementCursor
           _Console_FormFeed
           _Console_NewLine
         _Console_NewLine
         _Console_ResetCursor
         _Console_Tab
           _Console_ClearCursor
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           ___awdiv

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0      C8      14       78.1%
BITBANK3           100      0       0      10        0.0%
BANK3              100      A      FA      11       97.7%
BITBANK2           100      0       0       8        0.0%
BANK2              100    100     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100    100     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     59      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      50       1       85.1%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     4B2      12        0.0%
DATA                 0      0     5DE       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Tue Sep 12 21:31:10 2017

                                 _update_angle 6550                                  i2_Timer0_Stop 664E  
                             SPI_Init@pChannel 0091                     __size_of_MXK_BlockSwitchTo 003E  
                                 i2_Motor_Step 37B8                                              _A 004C  
                        __end_of_irobot_rotate 45EA                                              l8 3D60  
                                 ___fldiv@aexp 0086                                   ___fldiv@bexp 0085  
                                            _a 004D                                              _i 003A  
                                            _j 0039                                              _l 004F  
                                            _u 0038                                              _w 0050  
                          _irobot_led_power_on 63CE                                   ___fldiv@sign 007A  
                                           l11 30A4                                             l12 308E  
                                           l90 2FDA                                             l85 2ED6  
                                           l87 2F44                                             l89 2FB0  
                                 ___awdiv@sign 0065                             __size_of_ADC_Start 0084  
                          ___wmul@multiplicand 0062                                  _HMI_DIPSwitch 6486  
                           LCD_DrawField@pSize 0078                             LCD_DrawField@count 007E  
                   __end_of_irobot_stop_motion 5C94                              ?_Event_TestButton 0001  
                             i2_Timer0_Restart 65EC                           ADC_ClockDivision@reg 0061  
                                          l120 4BF0                                            l121 4C06  
                                          l122 4C1C                                            l220 57C0  
                                          l117 4C32                                            l221 5784  
                                          l118 4BDA                                            l230 5A1C  
                                          l222 57D0                                            l223 57A2  
                                  ?_LED_Toggle 0001                                            l234 5BF6  
                                          l235 5BC6                                            l227 5A38  
                                          l403 2B64                                            l412 2840  
                                          l228 5A00                                            l340 489E  
                                          l404 2B04                                            l237 5BDE  
                                          l421 27D4                                            l413 26D6  
                                          l341 48AC                                            l405 2B94  
                                ??_Console_Tab 0068                                            l430 3ED4  
                                          l414 285C                                            l350 49A6  
                                          l342 48BA                                            l510 1D02  
                                          l406 2B1C                                            l415 26FC  
                                          l351 4936                                            l343 48C8  
                                          l511 1E12                                            l407 2B34  
                                          l183 4A5A                                            l432 3EFE  
                                          l600 04B2                                            l344 48D6  
                                          l512 1D24                                            l408 2B4C  
                                          l184 4A34                                            l433 3F2E  
                                          l417 2768                                            l601 0646  
                                          l353 4944                                            l337 4900  
                                          l345 48E4                                            l610 06CE  
                                          l602 04E4                                            l354 4952  
                                          l346 48F2                                            l338 4890  
                                          l370 4830                                            l427 3F58  
                                          l611 071C                                            l603 0658  
                                          l355 4960                                            l363 485A  
                                          l371 483E                                            l531 17BC  
                                  ?_HMI_GetBar 0001                                            l612 076A  
                                          l604 0592                                            l356 496E  
                                          l372 484C                                            l364 47EA  
                                          l532 17E0                                            l516 1D6C  
                                          l357 497C                                            l509 1DF6  
                                          l614 084C                                            l358 498A  
                                          l366 47F8                                            l526 1800  
                                          l615 0844                                            l607 07B8  
                                          l359 4998                                            l367 4806  
                                          l519 1DB4                                            l616 085E  
                                          l608 0680                                            l368 4814  
                                          l528 181E                                            l393 58F2  
                                          l617 0848                                            l609 07D6  
                                          l369 4822                                            l529 179C  
                                          l483 1B62                                            l732 4B74  
                                          l900 18DA                                            l476 1C3A  
                                          l733 4B68                                            l901 18DE  
                                          l389 5648                                            l477 1AAC  
                                          l397 5B72                                            l910 1902  
                                          l902 18E2                                            l726 435E  
                                          l478 1C56                                            l486 1BCE  
                                          l654 6214                                            l911 1906  
                                          l903 18E6                                            l727 4352  
                                          l479 1AF6                                            l655 620C  
                                          l912 190A                                            l904 18EA  
                                          l824 557C                                            l832 59AA  
                                          l913 190E                                            l905 18EE  
                                          l921 54F2                                            l673 60C2  
                                          l657 6210                                            l681 544A  
                                          l914 1912                                            l906 18F2  
                                          l922 54BE                                            l930 3B9E  
                                          l915 1916                                            l907 18F6  
                                          l819 508C                                            l916 191A  
                                          l908 18FA                                            l860 183A  
                                          l684 5460                                            l781 5F0C  
                                          l853 1922                                            l917 191E  
                                          l909 18FE                                            l861 183E  
                                          l597 04C0                                            l870 1862  
                                          l862 1842                                            l854 1826  
                                          l598 04A8                                            l678 5486  
                                          l686 5470                                            l871 1866  
                                          l863 1846                                            l599 04D0  
                                          l679 543A                                            l880 188A  
                                          l872 186A                                            l864 184A  
                                          l856 182A                                            l928 3C1E  
                                          l776 5CC4                                            l881 188E  
                                          l873 186E                                            l865 184E  
                                          l857 182E                                            l929 3BEE  
                                          l890 18B2                                            l882 1892  
                                          l874 1872                                            l866 1852  
                                          l858 1832                                            l891 18B6  
                                          l883 1896                                            l875 1876  
                                          l867 1856                                            l859 1836  
                                          l892 18BA                                            l884 189A  
                                          l876 187A                                            l868 185A  
                                          l893 18BE                                            l885 189E  
                                          l877 187E                                            l869 185E  
                                          l894 18C2                                            l886 18A2  
                                          l878 1882                                            l990 4CFC  
                                          l895 18C6                                            l887 18A6  
                                          l879 1886                                            l983 4AF8  
                                          l896 18CA                                            l888 18AA  
                                          l976 4E16                                            l992 4D0C  
                                          l984 4A7C                                            l897 18CE  
                                          l889 18AE                                            l985 4AF4  
                                          l898 18D2                                            l978 4E26  
                                          l899 18D6                                            l997 5858  
                                          l999 587C                                            _PR2 000FCB  
                                          _dip 00CA                                            _val 00D6  
                              __end_of_ADC_Off 662E                                    ?_HMI_SetBar 0001  
                           ??_Event_TestButton 0079                                   _Word_GetPair 5EE0  
                                          prod 000FF3                                    ?_HMI_Render 0001  
                          MXK_SwitchTo@pModule 0067                     __end_of_ADC_ConversionTime 5BC0  
                                          tosl 000FFD                                            wreg 000FE8  
                           Console_MakeField@x 0070                             Console_MakeField@y 0071  
                                   _TXSTA1bits 000FAD                                _update_distance 653E  
                                 Console_Tab@c 006F                                   Console_Tab@i 006E  
                          LCD_DrawField@pField 0072                                   Console_Tab@t 006D  
                   __size_of_ADC_ClockDivision 008A                                   ___flmul@aexp 0094  
                                 ___flmul@bexp 0099                                     i2_delay_us 5DE6  
                         Port_Set@TypeRequired 0082                                   ___flmul@sign 0093  
                                 ___flmul@temp 009E                                   ___flmul@prod 009A  
                            Console_FormFeed@x 0062                              Console_FormFeed@y 0063  
                          LCD_DrawField@pPoint 0074                                 ?_LCD_DrawField 0072  
                        Port_SetPinType@Output 008A                                Port_SetPin@Type 0073  
                              Port_SetPin@pPin 0071                           ?_irobot_led_power_on 0001  
                                ?_Byte_GetPair 0069                                __end_of_LED_Set 5A4A  
                      __size_ofi2_Word_GetPair 0030                                  i2_Port_SetPin 4694  
                                 ___fltol@exp1 00B7                                   _Word_SetPair 5C94  
                                         l1000 5898                                           l1010 3FC8  
                                         l1004 56E8                                  ?_Byte_GetZone 0060  
                                         l1005 5716                                           l1200 427E  
                                         l1040 288A                                           l1201 42D2  
                                         l1009 3FD4                                           l1041 2890  
                                         l1202 42EE                                           l1042 2896  
                                         l1043 289C                                           l1204 4318  
                                         l1300 4EA8                                           l1036 29E6  
                                         l1044 28A2                                           l1205 42FE  
                                         l1301 4EAC                                           l1045 28A8  
                                         l1037 2884                                           l2021 5678  
                                         l2101 2D26                                           l1302 4EB6  
                                         l1062 20BE                                           l2110 5D5A  
                                         l2030 5670                                           l2022 5654  
                                         l2102 2C6A                                           l1207 432A  
                                         l1303 4EC4                                           l1063 20EC  
                                         l1047 294E                                           l2031 5674  
                                         l2103 2CB2                                           l3000 2472  
                                         l1056 1F4E                                           l2112 5D46  
                                         l2024 5658                                           l2040 38D4  
                                         l2104 2C70                                           l1313 5BA0  
                                         l1153 232C                                           l3001 2462  
                                         l1057 2114                                           l2025 565C  
                                         l2041 38DA                                           l1082 3E4E  
                                         l1058 1F56                                           l1146 4FAE  
                                         l2114 5D4E                                           l2026 5660  
                                         l2042 38E0                                           l1059 1F80  
                                         l2027 5664                                           l2035 396C  
                                         l2051 3940                                           l2043 38E6  
                                         l1084 3E56                                           l2028 5668  
                                         l2044 38EC                                           l2036 38BE  
                                         l2301 476A                                           l3005 2498  
                                         l1077 3E1E                                           l2029 566C  
                                         l2310 409E                                           l1254 6532  
                                         l2118 5566                                           l3006 24EA  
                                         l1158 5E62                                           l2070 4DD6  
                                         l2062 4D90                                           l2046 3900  
                                         l2038 38C8                                           l2311 40CA  
                                         l2119 5528                                           l2303 479C  
                                         l1079 3E2E                                           l2039 38CE  
                                         l1280 4F2A                                           l2144 5930  
                                         l2049 392C                                           l2321 0966  
                                         l2161 45C2                                           l2074 4DF4  
                                         l2066 4DB0                                           l2058 4D76  
                                         l2330 0B7C                                           l2162 45AE  
                                         l1283 4F8C                                           l2139 446A  
                                         l2331 0ADA                                           l2323 099E  
                                         l1276 4F12                                           l2316 08EC  
                                         l2156 456E                                           l2309 4072  
                                         l2421 258A                                           l2341 0C64  
                                         l2333 0B12                                           l2325 0A3E  
                                         l1294 4ECC                                           l1630 35F2  
                                         l2422 2526                                           l2414 250A  
                                         l2326 0A6E                                           l2158 4574  
                                         l1295 4E92                                           l1631 364E  
                                         l2431 2632                                           l2423 253E  
                                         l2415 251E                                           l2095 2C26  
                                         l2319 0908                                           l2351 355A  
                                         l2159 4596                                           l1296 4EF6  
                                         l1632 3632                                           l2168 5C78  
                                         l2432 2690                                           l2416 254E  
                                         l2424 2548                                           l2096 2BE0  
                                         l2328 0ABA                                           l2352 3510  
                                         l1297 4E9C                                           l2433 2638  
                                         l2425 25C2                                           l2361 0D04  
                                         l1298 4EA0                                           l1730 5D7A  
                                         l2098 2C56                                           l2338 0CC6  
                                         l2346 3484                                           l2370 0ECC  
                                         l1299 4EA4                                           l1627 369A  
                                         l2611 418A                                           l2427 25DC  
                                         l2099 2C3A                                           l2339 0C2C  
                                         l2371 0EFC                                           l1724 5EAE  
                                         l1732 5DA2                                           l1628 3690  
                                         l2612 4198                                           l2604 4114  
                                         l2364 0D20                                           l1629 3610  
                                         l2613 41AC                                           l2605 412A  
                                         l2349 34A0                                           l2381 1078  
                                         l2373 0F46                                           l1726 5EDC  
                                         l2382 106A                                           l2366 0D7E  
                                         l1735 6402                                           l2607 4154  
                                         l2375 1008                                           l2391 39AC  
                                         l2608 4148                                           l2376 0F66  
                                         l2368 0E2C                                           l2392 3A58  
                                         l2393 39B2                                           l2378 0F9E  
                                         l1827 3358                                           l2395 39B8  
                                         l1828 3378                                           l2396 39BE  
                                         l2397 39C4                                           l2398 39CA  
                                         l2840 5134                                           l1784 31F2  
                                         l2841 5128                                           l1873 5F52  
                                         l1785 3200                                           l2850 5800  
                                         l2674 3780                                           l2666 36D2  
                                         l2851 57F4                                           l1787 320A  
                                         l2931 1122                                           l2675 3770  
                                         l2844 516A                                           l2940 1288  
                                         l2932 1150                                           l2668 3754  
                                         l2845 5178                                           l2941 127C  
                                         l2933 1146                                           l2677 37A6  
                                         l2669 3740                                           l2854 582A  
                                         l2942 12D0                                           l2855 5838  
                                         l2791 424E                                           l2935 11A4  
                                         l2927 10C4                                           l2792 4260  
                                         l2952 137A                                           l2928 10F2  
                                         l2945 1320                                           l2937 11D2  
                                         l2929 10E8                                           l2961 001E  
                                         l2954 13CA                                           l2946 12F6  
                                         l2938 12D4                                           l2962 0048  
                                         l2787 41F4                                           l2955 13F8  
                                         l2947 130C                                           l2939 1250  
                                         l2963 0042                                           l2788 41E4  
                                         l2956 142E                                           l2980 03BE  
                                         l2964 005A                                           l2957 143E  
                                         l2973 0364                                           l2965 0078  
                                         l2958 1442                                           l2982 040E  
                                         l2974 033A                                           l2966 00A2  
                                         l2990 2378                                           l2983 0434  
                                         l2975 0350                                           l2967 009C  
                                         l2991 2388                                           l2968 00B4  
                                         l2992 23B0                                           l2985 0462  
                                         l2969 00DC                                           l2986 048C  
                                         l2994 23C8                                           l2987 0482  
                                         l2995 23B8                                           l2997 2424  
                                         l2998 2406                                 ??_Console_Init 0060  
                        Port_SetPinType@pInput 0086                                           STR_1 FFFB  
                                         STR_2 FF73                                           STR_3 FFFB  
                                         STR_4 FF73                                           STR_5 FFFB  
                                         STR_6 FFED                                           STR_7 FFFB  
                                         STR_8 FFA1                                           STR_9 FFFB  
                                         _LATA 000F89                                           _LATB 000F8A  
                                         _LATC 000F8B                                           _LATD 000F8C  
                                         _LATE 000F8D                                           _LATF 000F8E  
                  __size_of_MXK_InitTestButton 001E                                           _LATG 000F8F  
                          __end_of_GetPortPORT 49D6                       __end_of_irobot_song_play 652A  
                                         _PIR1 000F9E                                           _PIR2 000FA1  
                                         _PIR3 000FA4                            __end_of_GetPortTRIS 488A  
                                         u9050 3C0A                                           u9060 56E4  
                                         u9220 415A                                           u9070 570E  
                                         u9320 55BA                                           u9410 33C4  
                                         u9170 5D3A                                           u8700 5026  
                                         u9260 41FA                                           u9440 59E2  
                                         u8660 4B3E                                           u9380 5B1E  
                                         u9605 14C4                                           u8734 5736  
                                         u8735 5730                                           u9615 14E6  
                                         u8744 5768                                           u8680 4BA4  
                                         u8745 5762                                           u9385 5B18  
                                         u9625 1666                                           u8930 513A  
                                         u8850 4D50                                           u8667 4B34  
                                         u9395 3310                                           u9635 16E4  
                                         _SPI1 035A                                           u8764 439A  
                                         u9900 59A2                                           u8860 4D56  
                                         _SPI2 0365                                           u8685 4B9E  
                                         u8765 4394                                           u9645 1726  
                                         u8790 5D0E                                           u9494 4CAC  
                                         u8774 43CC                                           u9670 605C  
                                         u9495 4CA6                                           u8775 43C6  
                                         u9655 1768                                           u8960 5806  
                                         u9585 1494                                           u9818 3DCC  
                                         u8795 5D08                                           u9595 14AC  
                                         u9675 6056                                           u9828 3038  
                                         u9940 5266                                           u9829 304C  
                                         _TMR0 000FD6                                           u8985 6570  
                                         u8986 6572                                           u9980 2B9A  
                                         u9878 3174                       __end_of_irobot_rotate_to 61B6  
               irobot_query_and_update@RXArray 0100                              rx_assign@packetID 0065  
                                         _gISR 00B9                             Event_DIPSwitch@Bar 007A  
               irobot_query_and_update@TXArray 0200                                  ??_Byte_GetBit 0063  
                                _iRVirtualWall 0030                           __size_of_ADC_SetupIO 0032  
                           SPI_MaxSpeed@pInput 006F                                  ?_Byte_SetByte 0060  
                                ?_Byte_SetPair 006B                                __end_of_SPI_DCS 60D0  
                                         _main 39A8                     irobot_leds@powerLuminosity 0072  
                                         _init 473E                                           _mode 00C8  
                              ??i2_Byte_SetBit 0005                                  ?_Byte_SetQuad 006B  
                                         _itos 3B60                                           fsr0h 000FEA  
                                         fsr1h 000FE2                                           indf0 000FEF  
                                         fsr2h 000FDA                                           fsr0l 000FE9  
                                         indf1 000FE7                                           indf2 000FDF  
                                         fsr1l 000FE1                                           fsr2l 000FD9  
                                ?_Byte_SetZone 0060                                           btemp 0051  
                                         _zero 004E                               __end_of_ADC_Init 510A  
                                ??_Byte_SetBit 0064                             __size_of_LCD_Reset 0050  
                         __size_of_ADC_Voltage 00D8                                           prodh 000FF4  
                                         prodl 000FF3                               Motor_Move@pDelta 0065  
                                         start 14AA                             __size_of_LCD_Write 0022  
                                __CFG_IESO$OFF 000000                                ___fldiv@new_exp 007F  
                            Timer0_Init@DIVIDE 0077                                ?_SPI_DisableISR 0060  
                             Motor_Move@pMotor 0063                            HMI_SetButton@pValue 0066  
                                Console_Init@x 0062                                  Console_Init@y 0063  
                               ?i2_Timer0_Stop 0001                              i2Byte_SetBit@pBit 0003  
                                 ___param_bank 000000                                __end_of_Font5x7 FF65  
                         Set_Rotation@rotation 0066                         __size_of_HMI_SetButton 0090  
                       __size_of_HMI_SetNumber 002A                                    ?_ISR_Enable 0001  
                           _irobot_init_song_0 62BE                   __size_of_Console_ClearCursor 0040  
                             __end_of_LCD_Fill 59A8                               __end_of_LCD_Init 3026  
                               ?_HMI_DIPSwitch 0001                                  __CFG_PLLDIV$3 000000  
                             __end_of_LED_Init 57E0                                   _BAUDCON1bits 000F7E  
                                ??_Button_Init 00A8                        GetPortProperties@pInput 0062  
                                ??_Button_Poll 007E                               __end_of_HMI_Init 232E  
                                        l12184 4D02                                          l12346 3C0A  
                                        l13410 5986                                          l14114 1F76  
                                        l12178 4CF2                                          l12614 557C  
                                        l12622 55BA                                          l13406 5978  
                                        l13430 523C                                          l14080 4E0C  
                                        l12616 558E                                          l12720 59BC  
                                        l12464 6594                                          l14058 2F44  
                                        l13530 3E24                                          l13434 524A  
                                        l14156 2300                                          l14068 2FE8  
                                        l13524 3E14                                          l12398 4318  
                                        l14086 4E1C                                          l12718 59AA  
                                        l12680 3358                                          l13560 4FA6  
                                        l14168 5E30                                          l13634 31F2  
                                        l14444 25E2                                          l13488 2AFA  
                                        l16320 0ADA                               __end_of_HMI_Poll 53C8  
                                        l13856 142E                                          l16354 0C2C  
                                        l16338 0B7C                                          l16508 1008  
                                        l16490 0F66                                          _I2C1T 0040  
                                        _I2C2T 03C0                                  ___fltol@sign1 00B6  
                                        ?_main 0001                                          ?_init 0001  
                              __end_of___fldiv 1466                                __end_of___awdiv 41B6  
                        irobot_rotate@isScript 0082                                          ?_itos 006C  
                                        STR_10 FFD8                                          STR_11 FFC3  
                                        STR_12 FFC3                                          STR_13 FFC3  
                                        STR_14 FFC3                                __end_of___flmul 04A6  
                              __end_of___fltol 37B8                                _Event_DIPSwitch 6130  
                              __end_of___lldiv 4272                                          u10100 5B9A  
                                        u10020 3E98                                          u10030 3EA4  
                                        u10210 35D0                                          u10220 35E4  
                                        u10134 6088                                          u10230 3624  
                                        u10070 4FFC                                          u10135 6082  
                                        u10065 4FBE                                          u11210 36F2  
                                        u10250 4562                                          u10180 325E  
                                        u11215 36E6                                          u11160 261E  
                                        u10450 1374                                          u11250 378A  
                      __size_of_HMI_LeftSwitch 0018                                          u11180 269C  
                              ___awdiv@divisor 0062                                          u10800 2ED4  
                                        u10480 13DE                                          u10640 03B8  
                                        u10490 140C                                          u10580 00C8  
                                        u10670 0422                                          u10590 02DC  
                                        u14030 1098                                          u11608 40D2  
                                        u10840 2FE8                                          u10680 0448  
                                        u10760 2480                                          u11609 40E6  
                                        u10595 02D0                                          u11548 404E  
                                        u10940 20FC                                          u11549 4062  
                                        u10870 4E7E                                          u11568 407A  
                                        u13600 08E0                                          u11569 408E  
                                        u13610 0902                                          u11588 40A6  
                                        u11589 40BA                                          u13528 5E78  
                                        u13720 0B90                                          u13800 3478  
                                        u13529 5E8E                                          u13810 349A  
                                        u13860 0CF8                                          u13870 0D1A  
                                        u13980 101C                                          _INDEX 00E6  
                              __end_of___lwdiv 5182                                          _MASKS FD75  
                              __end_of___lwmod 5842                                          i2l430 46AC  
                                        i2l432 46D2                                          i2l433 46FC  
                                        i2l427 4722                                          i2l732 51CE  
                                        i2l733 51C8                                          i2l832 5DE8  
                                        i2l781 611E                                ___awdiv@counter 0064  
                          ?_irobot_init_song_0 0001                                          _PORTA 000F80  
                                        _PORTB 000F81                                          _PORTC 000F82  
                                        _PORTD 000F83                                          _PORTE 000F84  
                                        _PORTF 000F85                                          _PORTG 000F86  
                      __size_of_HMI_DownSwitch 0018                                          _TRISA 000F92  
                                        _TRISB 000F93                                          _TRISC 000F94  
                                        _TRISD 000F95                                          _TRISE 000F96  
                                        _TRISF 000F97                                          _TRISG 000F98  
                             ??i2_Byte_GetPair 000D                               ??i2_Byte_GetZone 0006  
                           Port_TogglePin@pPin 0076                                __end_of_getMode 40F8  
                               __CFG_FCMEN$OFF 000000                                          _PortA 03AC  
                                        _PortB 03A2                                          _PortC 00EA  
                                        _PortD 0398                                          _PortE 038E  
                                        _PortF 03B6                                          _PortG 0384  
                      __end_of_Port_SetPinType 287E                                _ADC_Initialised 003C  
                               ??_Byte_GetPair 006C                          ??_irobot_led_power_on 0074  
                               ?i2_Port_SetPin 0010                                    LED_Set@pLED 0075  
                              __end_of_dpowers FD75                                 ??_Byte_GetZone 0065  
                    irobot_move@moveTurnRadius 0072                                          _mode1 08C4  
                                        _mode2 344C                                          _mode3 6422  
                                        _mode4 0CDC                                 Button_Poll@Pin 0083  
                     __size_of_Set_Addr_Window 00AA                            __end_of_Console_Tab 4038  
                             __end_of_MXK_Init 2EB4                       __size_of_sort_iRBumpDrop 008C  
                                 ?_eusart_init 0001                           i2Byte_GetPair@pInput 000A  
                                        _putch 6574                               __end_of_SPI_Init 08C4  
                             __end_of_SPI_Send 54A4                          __end_ofi2_MXK_Release 665A  
                                        pclath 000FFA                                          tablat 000FF5  
                              __end_of_reverse 5510                             __size_of_MXK_Queue 000E  
                               ??_Byte_SetByte 0063                              __end_of_ADC_Start 4F92  
                               ??_Byte_SetPair 006F                                 ??_Byte_SetQuad 006F  
                                        plusw2 000FDB                                 ??_Byte_SetZone 0066  
                                        status 000FD8                                          wtemp6 0052  
                       __size_of_ADC_Calibrate 0014                                _Configure_GPIOs 53C8  
                         i2MXK_Queue@pCallback 0001                                    i2delay_us@u 0003  
                         ??_irobot_init_song_0 0061                                 _LCD_Word_Write 631A  
                          __size_of_LED_Toggle 0048                            __size_of_HMI_GetBar 0006  
                                ?_HMI_UpSwitch 0001                                     _Event_NULL 1404  
                  __size_of_Port_CheckPairType 006A                                    mode1@moveto 03F2  
                          __size_of_HMI_SetBar 000A                                   ?_irobot_leds 0070  
                                 ?_irobot_init 0001                                __initialization 4492  
                          __size_of_HMI_Render 003E                                   ?_irobot_move 0070  
                          __end_of_Byte_GetBit 606E                         irobot_leds@powerColour 0071  
                                 __end_of_main 3A88                                   __end_of_init 47E4  
             irobot_query_and_update@packetIDs 0075                                   __end_of_itos 3C38  
                         HMI_SetButton@reindex 0062                                   SPI_Send9@dat 002D  
                          __end_of_Byte_SetBit 577E                               __end_of_InitList FD4B  
                  __size_of_Port_CheckQuadType 005A                               __end_of_Mode_Set 6574  
                                    ??_ADC_Off 0060                        __end_of_update_distance 6550  
                  __size_of_Port_CheckPortType 0048                                    HMI_Render@a 0068  
                                       ??_main 03F8                                         ??_init 00AA  
                                       ??_itos 0070                        _Console_MakeField$10974 006E  
                                __activetblptr 000003                              Port_SetPin@pInput 006F  
                            __end_of_LCD_Reset 5A9A                              Port_SetPin@pValue 0072  
                                    ??_LED_Set 0075                              _MXK_InitDIPSwitch 6374  
                            GetPortPORT@pInput 0062                         Port_CheckPairType@Pin1 008A  
                       Port_CheckPairType@Pin2 008B                              __end_of_LCD_Write 627A  
                                  _GetPortPORT 4930                                   ?i2_MXK_Queue 0001  
                                  _GetPortTRIS 47E4                                ??_LCD_DrawField 007C  
                   __end_of_PortProperty_Valid 5090                               __end_of_Port_Set 1820  
                                  ?i2_delay_us 0001               __size_of_Console_IncrementCursor 0066  
                          __end_of_Button_Init 3DE2                            __end_of_Button_Poll 318C  
                            Word_GetPair@pPair 006E                        LCD_FillRectangle@pPoint 006B  
                           ?_MXK_InitDIPSwitch 0001                                  _HMI_SetButton 4C50  
                                    ??_SPI_DCS 0062                                         ?_mode1 0001  
                                       ?_mode2 0001                                         ?_mode3 0001  
                                       ?_mode4 0001                                         _ADRESH 000FC4  
                                       _ADRESL 000FC3                                         _ADC_On 6642  
                                _HMI_SetNumber 61E0                         Port_SetQuadType@Output 009A  
                                       _ANCON0 000FC1                               ___awdiv@dividend 0060  
                                       ?_putch 0001                               ??_Console_Render 0083  
                                ToSegment@pCHR 0060                               _Console_FormFeed 4CE0  
                       Port_SetQuadType@pInput 0096                                         i2l1630 381E  
                                       i2l1631 386A                                         i2l1632 3856  
                                       i2l1730 6016                                         i2l1627 38A6  
                                       i2l1732 6036                                         i2l1628 389C  
                                       i2l1629 3834                                         i2l1590 145E  
                               __CFG_WDTEN$OFF 000000                            __size_of_ISR_Enable 000A  
                                       i2l9106 5DE8                                         i2l9108 5DF8  
                                       _RCREG1 000FAF                                         _RCSTA1 000FAC  
                       __end_of_LCD_Word_Write 6338                                 _Timer0_Restart 65E0  
                                       _SPBRG1 000FB0                            ??_MXK_InitDIPSwitch 009B  
                                       _TXREG1 000FAE                               __end_of___xxtofl 24FC  
                               i2_MXK_SwitchTo 6004                                         _TXSTA1 000FAD  
                              Byte_GetBit@pBit 0062                                     _Reset_High 6356  
                           Console_Render@temp 0085                                 ??_HMI_UpSwitch 0066  
                               OutSeg@pSegment 0063                                ??i2_Timer0_Stop 0001  
                          Port_TogglePin@Value 0077                         ADC_SetChannel@pChannel 0061  
                             __end_of_delay_ms 55E4                                   LED_Init@pLED 008D  
                             __end_of_delay_us 59FA                                  ??_Timer0_Init 0071  
                                ??_Timer2_Init 0071                                  ??_Timer0_Stop 0060  
                                   _Timer0_ISR 615E                       __size_of_Console_NewLine 00A2  
                            Timer2_Init@DIVIDE 007A                                 __CFG_XINST$OFF 000000  
                                       _TimerX 00F9                                         _OutSeg 4F92  
                     __size_of_HMI_InitButtons 0006                                     _Motor_Init 3C38  
                   __end_of_load_iRScriptStack 557A                                     _Motor_Move 5F94  
                                       _iRWall 0035                                  ??_Motor_Speed 007F  
                                   _Motor_Step 3586                            rx_assign@byteNumber 0062  
                      __end_of_Event_DIPSwitch 615E                                         ___wmul 5FCE  
                              ??_HMI_DIPSwitch 0066                  load_iRScriptStack@bytesToLoad 006E  
                                    ??___fldiv 0076                                      ??___awdiv 0064  
                               __CFG_STVREN$ON 000000                                         _change 00FF  
                                    ??___flmul 008F                                         _lMotor 00D8  
                                    ??___fltol 0100                                      ??___lldiv 0068  
                                       _lQueue 00BC                                     _TestButton 037A  
                                    ??___lwdiv 0064                             __size_of_ToSegment 0284  
                                    ??___lwmod 006B                       __end_of_Port_SetQuadType 1CFA  
                     i2Byte_GetZone@pChunkSize 0005                                   HMI_GRender@a 002B  
                         __end_of_Console_Init 4E84                              GetPortTRIS@pInput 0062  
                           __size_of_Reset_Low 001E                                         clear_0 44FA  
                                       clear_1 450C                                         clear_2 4518  
                                       clear_3 4524                                         clear_4 4530  
                             ___awdiv@quotient 0066                     irobot_stop_motion@isScript 0079  
                                ?_eusart_getch 0001                                     Port_Init@i 00A5  
                                   _iRDistance 00D2                              __end_of_MXK_Queue 65BA  
                   __end_ofHMI_SetButton@F7213 FD82                                      ??_getMode 0084  
                                   _iRBumpLeft 00E0                                         _printf 24FC  
                                   _iRBumpDrop 0036                      __end_of_MXK_InitDIPSwitch 6392  
                                _ADC_Calibrate 652A                                     _iRDropLeft 00DE  
                               HMI_SetButton@v 0067                                  ?_eusart_putch 0001  
                       HMI_SetSegments@pString 0061                                    _Console_Tab 3F76  
                          LCD_Word_Write@value 0065                                   __pdataCOMRAM 0047  
                           __size_of_Port_Init 0192                                  ??_Port_GetPin 0063  
                     Port_CheckPortType@Output 0099                                      ?_ADC_Init 0064  
                           _twos_complement_of 5D20                                ??i2_Port_SetPin 0014  
                                 __mediumconst FC98                    __end_ofTimer2_Init@PRESCALE FD85  
                     Port_CheckPortType@pDrive 0098                                         tblptrh 000FF7  
                                       tblptrl 000FF6                                         tblptru 000FF8  
                                 ?_MXK_Dequeue 0001                                 ?_HMI_SetButton 0001  
                     Port_CheckPortType@pInput 0096                                  ??_Port_SetPin 0073  
                                    ??_reverse 0064                                     _StepRotate 00C6  
                        Console_MakeField@Fill 0482                               ?_Port_SetPinType 0086  
                                       putch@c 0074                              Motor_Speed@pMotor 007B  
                               ?_HMI_SetNumber 0076                                 i2_Word_GetPair 6100  
                      __end_of_Configure_GPIOs 5438                            irobot_leds@isScript 0073  
                             ??_MXK_TestButton 0066                         __end_of_Timer0_Restart 65EC  
                                Set_Rotation@m 0065                                   ?_MXK_Release 0001  
                          ?_twos_complement_of 0060                  __size_of_irobot_move_straight 0018  
                              __CFG_FOSC$HSPLL 000000                         __end_ofi2_MXK_SwitchTo 603A  
                                 ___xxtofl@arg 006A                                   i2delay_us@us 0001  
                                 ___xxtofl@exp 0069                                   ___xxtofl@val 0060  
                        _update_bump_and_cliff 5F5A                                ?_LCD_Word_Write 0065  
                                   __accesstop 0060                        __end_of__initialization 4536  
                                    ?_LCD_Fill 0069          irobot_query_and_update@packetVariable 0079  
                                    ?_LCD_Init 0001                                  SPI_Init@pMode 0092  
                                  _Byte_GetBit 603A                                     _Stepstomin 00C4  
                                    ?_LED_Init 0001                       __end_ofi2_Timer0_Restart 65F8  
                                    ?_HMI_Init 0001                              ??_Set_Addr_Window 0068  
                                    ?_HMI_Poll 0001               __size_of_irobot_query_and_update 0186  
                                ___rparam_used 000001                              ??_sort_iRBumpDrop 0060  
                                   ___fltol@f1 00B2                                    _Byte_SetBit 571A  
                                __end_of_MASKS FD7E                                 _PortA_Property FF71  
                                  ?_Event_NULL 0001                                      LCD_Fill@i 006B  
                                    LCD_Fill@j 006C                            load_iRScriptStack@i 006F  
                                    LCD_Init@i 0097                                 __pcstackCOMRAM 0001  
                               _PortB_Property FF6F                            __size_ofi2_delay_us 0040  
                                 __pidataBANK0 662E                                   __pidataBANK3 65C8  
            irobot_move_straight@straightSpeed 0079                            i2Byte_SetBit@pInput 0001  
                         __end_of_Byte_GetPair 63CE                                Console_Render@x 008A  
                              Console_Render@y 008B                            i2Byte_SetBit@pValue 0004  
                                ?_Set_Rotation 0001                            Timer0_Init@PRESCALE FD4B  
                         __end_of_Byte_GetZone 4BB8                                  __end_of_mode1 0CDC  
                                __end_of_mode2 3586                                  __end_of_mode3 643C  
                                __end_of_mode4 10A6                           ??_twos_complement_of 0062  
                            irobot_leds@LEDBit 0070                                 _PortC_Property FF6D  
                          __end_of_Timer0_Init 32EC                                  __end_of_putch 6582  
                               ??_eusart_getch 0060                                      ?_MXK_Init 0001  
                          __end_of_Timer2_Init 344C                            __end_of_Timer0_Stop 663C  
                               ?_ADC_Calibrate 0001                                      ?_SPI_Init 008D  
                             ?_update_distance 0001                                      ?_SPI_Send 0060  
                               ??_eusart_putch 0060                                    _Button_Init 3D0E  
                            Port_SetType@pType 009C                                    _Button_Poll 3026  
                         __end_of_Byte_SetByte 65AC                           __end_of_Byte_SetPair 629C  
                               _HMI_LeftSwitch 64E6                                 _PortD_Property FF6B  
                         __end_of_Byte_SetQuad 62BE                                   ??_LED_Toggle 0078  
                                 ??_HMI_GetBar 0060                     eusart_putch@eusartSendChar 0060  
                         __end_of_Byte_SetZone 43E2                            __end_of_Motor_Speed 61E0  
                               _HMI_DownSwitch 649E                                  SPI_Send@pData 0062  
                        __end_of_MXK_DIPSwitch 6486                                   ??_HMI_SetBar 0060  
                     __size_of_get_packet_size 0066                                   ??_HMI_Render 0068  
                               _PortE_Property FF69                                     ??_ADC_Init 0067  
                     __size_of_HMI_SetSegments 00BA                         __end_ofi2_Word_GetPair 6130  
                      irobot_rotate@angleTotal 0083                                 _PortF_Property FF67  
                      Port_CheckQuadType@Pair1 0093                        Port_CheckQuadType@Pair2 0094  
                     MXK_BlockSwitchTo@pModule 0067                                        ??_mode1 03F0  
                                      ??_mode2 008C                                        ??_mode3 00B8  
                                      ??_mode4 00B8                                        ?_ADC_On 0001  
                            _Console_Backspace 5842                                ?_Timer0_Restart 0001  
                                      ??_putch 0074                       __size_of_HMI_RightSwitch 0018  
                          _Console_ClearCursor 5DA6                              __end_of_ToSegment 1AA4  
                               _PortG_Property FF65                                     __pbssBANK0 00B9  
                                   __pbssBANK3 0300                                     __pbssBANK4 0400  
                          __end_of_Port_GetPin 5D20                             _irobot_stop_motion 5C4E  
                      Port_CheckQuadType@pQuad 0091                                reverse@iterator 0065  
                             ??_SPI_DisableISR 0062                                ?i2_MXK_SwitchTo 0001  
                            ?_irobot_song_play 0001                             ?_Console_Backspace 0001  
                            __end_of_Reset_Low 6356                      __size_of_Event_TestButton 003C  
                      __size_of_Port_TogglePin 0030                                     ??_LCD_Fill 006B  
                            ?_irobot_rotate_to 03F0                                     ??_LCD_Init 0095  
                         __size_of_eusart_init 001E                            __end_of_Port_SetPin 3F76  
                       __end_of_PortA_Property FF73               irobot_led_power_on@powerOnColour 0074  
                                    ?_Mode_Set 0001                             Byte_SetByte@pInput 0060  
                                   ??_LED_Init 008D                       ADC_ClockDivision@pDivide 0060  
                           Byte_SetByte@pValue 0062                                  ?_ISR_Function 0001  
                                  ?_Reset_High 0001                             _ADC_ConversionTime 5B78  
                                ?_Timer0_Clear 0001                                     ??_HMI_Init 00A8  
                           ??_irobot_song_play 0061                                     ??_HMI_Poll 0084  
                                ?_Timer2_Clear 0001                             ??_irobot_rotate_to 00B8  
                      Port_CheckPairType@Props 008D                         __end_of_PortB_Property FF71  
                                ?_Timer0_Start 0060                            ?_irobot_stop_motion 0001  
                            __end_of_Port_Init 2BAE                                    ?_Timer0_ISR 0001  
                      Port_CheckPairType@pPair 0088                             __end_of_LED_Toggle 5C08  
                           __end_of_HMI_GetBar 664E                    irobot_rotate_to@rotateSpeed 03F2  
                     LCD_FillRectangle@pColour 0069                                     _angleTotal 00CC  
                          ??_Console_Backspace 0062                              Set_Addr_Window@xe 0066  
                            Set_Addr_Window@ye 0067                              Set_Addr_Window@xs 0068  
                            Set_Addr_Window@ys 0065                                        ?_OutSeg 0063  
                                  ?_Motor_Init 008D                             Byte_SetPair@pInput 006B  
                                  ?_Motor_Move 0063                                    ?_Motor_Step 0001  
                           Byte_SetPair@pValue 006E                             __end_of_HMI_SetBar 6616  
                       __end_of_PortC_Property FF6F                             Word_GetPair@pInput 006C  
                           __end_of_HMI_Render 5E64                                 ??_Set_Rotation 0065  
                                    ?_Port_Set 006F                            ?_ADC_ConversionTime 0001  
                                      ?___wmul 0060                               ?_Event_DIPSwitch 0001  
                            Port_GetPin@Output 0065                                   ??_ISR_Enable 0060  
                 __size_of_Console_ResetCursor 001E                           __size_of_irobot_leds 0058  
                         __size_of_irobot_init 000E                           ?_Console_ClearCursor 0001  
                         __size_of_irobot_move 00B0                         __end_of_HMI_LeftSwitch 64FE  
                       __end_of_PortD_Property FF6D                                        _ADC_AN0 00F4  
                                      _ADC_AN1 03D7                                        _ADC_AN2 03D2  
                                      _ADC_AN3 03CD                                     ??_MXK_Init 00A6  
                            Port_GetPin@pInput 0060                              _Console_MakeField 3DE2  
                                      _ADC_Off 6626                              ??_Console_NewLine 0060  
                     ADC_ClockDivision@unfound 0062                         __end_of_HMI_DownSwitch 64B6  
                                   ??_SPI_Init 0093                         Event_TestButton@pState 0079  
                                   ??_SPI_Send 0063                                        ?_printf 0075  
                            ??_HMI_InitButtons 0060                     __size_of_MXK_InitDIPSwitch 001E  
                       __end_of_PortE_Property FF6B                            Console_Render@F6956 03E4  
                           ?_Console_MakeField 0065                                        _COUNTER 0029  
                              ??_HMI_SetButton 0060                           __end_of_HMI_UpSwitch 64CE  
                         ??_irobot_stop_motion 0079                                        _LED_Set 59FA  
                      _Console_IncrementCursor 56B4                                      ?___xxtofl 0060  
                       __end_of_PortF_Property FF69                                    _gBackcolour 00DC  
                              ??_HMI_SetNumber 0078                                      _I2C1_Done 031D  
                              ?i2_Word_GetPair 000D                                      _I2C2_Done 031A  
                                    _I2C1_More 0317                                      _I2C2_More 0314  
                                    ?_delay_ms 0060                      __end_of_Console_Backspace 589E  
                                    ?_delay_us 0060                            __size_of_Event_NULL 0002  
                   __end_of_MXK_InitTestButton 63B0                                        _SSP1ADD 000FC8  
                                      _SSP1BUF 000FC9                                        _SSP2BUF 000F6F  
                           __size_of_rx_assign 00F0                           ??_ADC_ConversionTime 0060  
                       __end_of_PortG_Property FF67                            ??_Console_MakeField 0067  
                      __size_of_ADC_SetChannel 001C                                        _IRValue 00C2  
                                      _SPI_DCS 60A0                           __size_ofi2_MXK_Queue 000E  
                                ??_ADC_SetupIO 0060                               ?_Configure_GPIOs 0001  
                              __size_of_ADC_On 0006                         ?_update_bump_and_cliff 0001  
                       __size_of_irobot_rotate 00AA                               ADC_Init@pChannel 0066  
                         i2Byte_GetZone@Offset 0008                                  ??_ADC_Voltage 00A4  
                           __end_of_ISR_Enable 660C                                 ??_ISR_Function 0017  
                         i2Byte_GetZone@Output 0009                                 ??_Timer0_Clear 0060  
                            Event_TestButton@j 00E2                                     ??_Mode_Set 0060  
                               ??_Timer2_Clear 0060                                        _Font5x7 FD85  
                         i2Byte_GetZone@pChunk 0004                       ADC_ConversionTime@pCount 0061  
                                      _MinDist 00FB                           i2Byte_GetZone@pInput 0001  
                               ??_Timer0_Start 0063                           SPI_DisableISR@pInput 0060  
                                ?_Port_GetQuad 0060                                Byte_SetBit@pBit 0062  
                         Port_TogglePin@pInput 0074                          __end_ofi2_Byte_SetBit 5AE6  
                                    _ADC_Start 4F0E                                        __Hparam 0000  
                            Port_GetQuad@pQuad 0062                                    _Timer0_Init 318C  
                                  _Timer2_Init 32EC                                        __Lparam 0000  
                                  _Timer0_Stop 6636                          __size_of_Console_Init 008A  
                                      OutSeg@a 003D                __end_ofPortProperty_Valid@F6830 FD6B  
                                      _iRAngle 00D0                                  LCD_Write@mode 0063  
                              __size_of_OutSeg 0082                                     ??_Port_Set 0072  
                    __end_of_Console_MakeField 3EB2                              _Console_PrintChar 287E  
                                  _Motor_Speed 61B6                                        _Stepper 03C7  
                                ?_Port_SetType 009A                                        _gCursor 0047  
                                      ___fldiv 10A6                                        ___awdiv 40F8  
                        ??_Console_ClearCursor 0060                                        ___flmul 0000  
                                      ___fltol 36AC                                        _lBuffer 04C8  
                                      ___lldiv 41B6                                __size_of___wmul 0036  
                              ??_ADC_Calibrate 0060                                        ___lwdiv 510A  
                                      ___lwmod 57E0                                ?_HMI_LeftSwitch 0001  
                     __end_of_Console_FormFeed 4D6E                             ?_Console_PrintChar 0001  
                                      __pcinit 4492                                ?_HMI_DownSwitch 0001  
                                      __ramtop 1000                                        _getMode 4038  
                                      __ptext0 39A8                                        __ptext1 0CDC  
                                      __ptext2 6422                                        __ptext3 618C  
                                      __ptext4 4540                                        __ptext5 5C08  
                                      __ptext6 344C                                        __ptext7 6456  
                                      __ptext8 08C4                                        __ptext9 653E  
                              __size_of_printf 01C2                                      _T0CONbits 000FD5  
                  __end_of_irobot_led_power_on 63EA                              i2MXK_SwitchTo@CUR 0007  
                                      _dpowers FD6B                                      _T2CONbits 000FCA  
                                LED_Set@pValue 0074                            __size_of_Reset_High 001E  
                        Event_DIPSwitch@pState 0079                                     ??___xxtofl 0064  
                                 ?_GetPortPORT 0060                                   ?_GetPortTRIS 0060  
                          ??_Console_PrintChar 0070                                    _Port_GetPin 5CDA  
                            __CFG_MSSPMSK$MSK5 000000                            LCD_DrawRectangle@p2 03E0  
                          LCD_DrawRectangle@p4 03DC                                   ??i2_delay_us 0003  
                                   ??_delay_ms 0062                                     ??_delay_us 0062  
                                      _reverse 54A4                                      _DIPSwitch 0370  
                          __size_of_Timer0_ISR 002E                                    _Port_SetPin 3EB2  
                                  _iRBumpRight 00E1                                 LCD_DrawField@i 0082  
                                    _LCD_Reset 5A4A                            __size_of_Motor_Init 00D6  
                          __size_of_Motor_Move 003A                            __size_of_Motor_Step 0126  
                                    _LCD_Write 6258                                    _iRDropRight 00DF  
                         __size_of_MXK_Dequeue 003E                                     delay_ms@ms 0060  
                         end_of_initialization 4536                            ADC_SetupIO@pChannel 0062  
                            ??_get_packet_size 0060  irobot_query_and_update@numberOfPacketRequests 0078  
                                   delay_us@us 0060                              ??_HMI_SetSegments 0063  
                      Console_PrintChar@pInput 0073                                   _Console_Init 4DFA  
                         __end_of_eusart_getch 661E                        _irobot_query_and_update 2BAE  
                         __size_of_MXK_Release 001C                     __end_of_Port_CheckPairType 564E  
                         __end_of_eusart_putch 659E                                        itos@Out 0074  
                               ??_Port_GetQuad 0063                              _irobot_angle_wait 5C08  
                           _PortProperty_Valid 5014                             Byte_SetQuad@pInput 006B  
                                    i2u1354_48 6176                             SPI_MinSpeed@pInput 006F  
                           Byte_SetQuad@pValue 006E                            __end_of_ADC_SetupIO 60A0  
                        __size_of_Byte_GetPair 001E                    __size_of_irobot_init_song_0 0020  
                              ___lldiv@divisor 0064                          __size_of_Byte_GetZone 009C  
                                   ?_ADC_Start 0062                              ??_HMI_RightSwitch 0066  
                              ___lldiv@counter 006C                      __end_of_Console_PrintChar 2A1C  
                           ?_irobot_angle_wait 0070                            __end_of_ADC_Voltage 3B60  
                               ??_Port_SetType 009D                     __end_of_Port_CheckQuadType 58F8  
                                      printf@c 0084                                        printf@f 0075  
                               Port_Init@pPort 00A2                                        postdec1 000FE5  
                                      postdec2 000FDD                          __size_of_Byte_SetByte 000E  
                        __size_of_Byte_SetPair 0022                         Console_MakeField@Index 0069  
                            __end_of_rx_assign 39A8                                        postinc0 000FEE  
                                      postinc2 000FDE                            ?_PortProperty_Valid 006F  
                        __size_of_Byte_SetQuad 0022                     __end_of_Port_CheckPortType 5B78  
                        __size_of_Byte_SetZone 00B6                             __end_ofi2_delay_us 5E26  
                           Button_Init@pInitIO 009F                                  _irobot_rotate 4540  
                        Timer0_Init@pFrequency 006D                              ?_Port_SetQuadType 0096  
                          ??_irobot_angle_wait 0072                                    _gForecolour 00FD  
                    ??_Console_IncrementCursor 0064                         __size_ofi2_MXK_Release 0006  
                                    _PORTFbits 000F85                             ??_Port_SetQuadType 009A  
                                 ?_Console_Tab 0001                               Byte_GetZone@MASK 0066  
                        Console_Render@lCursor 0086                             _load_iRScriptStack 5510  
                irobot_rotate_to@rotateToAngle 03F0                                      _MXK_Queue 65AC  
                             __CFG_CPUDIV$OSC1 000000                                  ___xxtofl@sign 0068  
                             Byte_GetZone@pMax 0062                     __size_of_Console_Backspace 005C  
                                    _TRISCbits 000F94                     load_iRScriptStack@loadByte 006C  
                              _Set_Addr_Window 45EA                                 SPI_Init@pClock 008D  
                             ??_LCD_Word_Write 0067                                _sort_iRBumpDrop 4D6E  
                                  ___fldiv@grs 0081                                    ___fldiv@rem 007B  
                        __end_of_LCD_DrawField 4A7A                                 Port_Set@pInput 006F  
                               SPI_Init@pInput 0093                           ??_PortProperty_Valid 0073  
                            __size_of_ADC_Init 007A                                 Port_Set@pValue 0071  
                                   ?_LCD_Reset 0001                           __end_of_Set_Rotation 4C50  
                                   ?_LCD_Write 0063                                   _Byte_GetPair 63B0  
                           HMI_SetButton@F7213 FD7E                            ?_load_iRScriptStack 0060  
                                 _Byte_GetZone 4B1C                                  ?_MXK_SwitchTo 0001  
                            LCD_DrawField@xmax 0080                              LCD_DrawField@ymax 0081  
                               __end_of_ADC_On 6648                                 _Port_TogglePin 60D0  
                    __end_of_irobot_angle_wait 5C4E                               _Event_TestButton 5F1E  
                                  ___flmul@grs 0095                           Port_SetPinType@Props 008B  
                                 ?_Byte_GetBit 0060                        __size_ofi2_Byte_GetPair 001A  
                                 _Byte_SetByte 659E                                   _Byte_SetPair 627A  
                              ADC_SetupIO@MASK 0063                                   _Byte_SetQuad 629C  
                      __size_ofi2_Byte_GetZone 0076                                   _Byte_SetZone 432C  
                         Port_SetPinType@pType 0089                              ?i2_Timer0_Restart 0001  
                                 ?_Byte_SetBit 0060                                  ?_SPI_MaxSpeed 006F  
                            __size_of_LCD_Fill 0058                                   ??_Event_NULL 0060  
                            __size_of_LCD_Init 0172                              __size_of_LED_Init 0062  
                                ?_SPI_MinSpeed 006F                          __end_ofi2_Timer0_Stop 6654  
                           ??i2_Timer0_Restart 0001                              __size_of_HMI_Init 01FA  
                            __size_of_HMI_Poll 0074                                  ?_update_angle 0001  
                                ?i2_Motor_Step 0001                     __size_of_Console_MakeField 00D0  
                               ?_irobot_rotate 007D                                 __end_of_OutSeg 5014  
                         ??_load_iRScriptStack 006A                   __end_of_irobot_move_straight 646E  
                        __size_of_HMI_UpSwitch 0018                                 __end_of___wmul 6004  
                        __end_of_HMI_DIPSwitch 649E                                  __pidataCOMRAM 65F8  
                                 ?_Button_Init 009B                                   ?_Button_Poll 007B  
                                    _Bus_State 004B                            i2Byte_GetPair@pPair 000C  
                         __end_of_ISR_Function 14AA                           __end_of_Timer0_Clear 65E0  
                            __size_of_MXK_Init 0180                           __end_of_Timer2_Clear 6626  
                               __end_of_printf 26BE                              __size_of_SPI_Init 041E  
                      get_packet_size@packetID 0060                              __size_of_SPI_Send 006C  
                                ?_Word_GetPair 006C                               ??_Timer0_Restart 0060  
                         __end_of_Timer0_Start 6258                             Port_SetType@Output 009F  
                          start_initialization 4492                                     ?_MXK_Queue 0060  
                     PortProperty_Valid@Errors 0075                               ??i2_MXK_SwitchTo 0007  
                            _LCD_FillRectangle 51F8                             Port_SetType@pInput 009A  
                               _ADC_SetChannel 6406                                     HMI_Init@in 00A8  
                          HMI_SetNumber@pInput 0076                          __end_ofi2_Port_SetPin 473E  
                           __end_of_Event_NULL 1406                         rx_assign@packetIDValue 0061  
                       __end_of_Port_TogglePin 6100                                  ?_Word_SetPair 006F  
                            Byte_SetBit@pInput 0060                                       ??_ADC_On 0060  
                               ??_MXK_SwitchTo 0066                              Byte_SetBit@pValue 0063  
                           ?_LCD_FillRectangle 0069                      ??_irobot_query_and_update 0070  
                          _Console_ResetCursor 62DE                    PortProperty_Valid@pPinDrive 0071  
                                  _ADC_SetupIO 606E                           MXK_BlockSwitchTo@CUR 0066  
                     PortProperty_Valid@pInput 006F                                  i2_MXK_Release 6654  
                                  _ADC_Voltage 3A88                         LCD_FillRectangle@pSize 006F  
                               SPI_Send@pInput 0060                                   ??_Reset_High 0074  
                     __size_of_Port_SetPinType 01C0                                 ??_SPI_MaxSpeed 0071  
                        Port_SetQuadType@pQuad 0098                                      _ToSegment 1820  
                          ??_LCD_FillRectangle 0073                          Port_SetQuadType@pType 0099  
                              _Console_NewLine 4A7A                                 ??_SPI_MinSpeed 0071  
                                  ??_ADC_Start 0064                                   _HMI_UpSwitch 64B6  
                                    _Reset_Low 6338                                   ??_Timer0_ISR 0017  
                              _HMI_InitButtons 663C                              __size_of_Mode_Set 0012  
                   __size_of_Console_PrintChar 019E                                 ??_update_angle 007D  
                               ADC_Init@pInput 0064                                      _gCharSize 03EC  
                             Timer2_Init@INDEX 00E4                                      OutSeg@cur 003F  
                               ??i2_Motor_Step 0015                                   ??_Motor_Init 0091  
                                     ??_OutSeg 0064                                      OutSeg@out 0067  
                      __size_of_Console_Render 0210                                   ??_Motor_Move 0067  
                                 ??_Motor_Step 0074                                      _iRAngleSS 0304  
                                    _iRCliffFL 0033                                      _iRCliffFR 0032  
                           Byte_SetZone@Offset 0069                                       ??___wmul 0064  
                         ?_Console_ResetCursor 0001                                      _Port_Init 2A1C  
                                  __pdataBANK0 00F9                                    __pdataBANK3 03E4  
                    __size_of_irobot_song_play 0014                    __size_of_twos_complement_of 0044  
                            __size_of_Port_Set 03BA                             Byte_SetZone@pChunk 0063  
                                     ?_ADC_Off 0001                      __size_of_irobot_rotate_to 002A  
                             ??i2_Word_GetPair 0010                             Byte_SetZone@pInput 0060  
                           Byte_SetZone@pValue 0065                                  Mode_Set@pMode 0060  
                                     ??_printf 007D                        __end_of_Set_Addr_Window 4694  
                     Port_CheckQuadType@Output 0095                        __end_of_sort_iRBumpDrop 4DFA  
                                    _gLineSize 03E8                       Port_CheckQuadType@pDrive 0092  
                               ??_Word_GetPair 006F                       Port_CheckQuadType@pInput 008F  
                         __end_of_Port_GetQuad 5B30                                      ___fldiv@a 0072  
                                    ___fldiv@b 006E                      __end_of_LCD_FillRectangle 526C  
                                  __pbssBIGRAM 04C8                         __end_of_ADC_SetChannel 6422  
                                     ?_LED_Set 0074                                      ___flmul@a 008B  
                                    ___flmul@b 0087                                    __pbssCOMRAM 0029  
                              ADC_Start@pInput 0062                             __end_of_Reset_High 6374  
                                __pcstackBANK0 0060                                  __pcstackBANK1 0100  
                                __pcstackBANK2 0200                                  __pcstackBANK3 03F0  
                      ??_update_bump_and_cliff 007D                                     itos@Length 0072  
                        __size_of_eusart_getch 0008                                 ??_Word_SetPair 0073  
                     __size_of_update_distance 0012                              __size_of___xxtofl 01CE  
                           __end_of_Timer0_ISR 618C                           __size_of_GetPortPORT 00A6  
                                  ??_LCD_Reset 0079                           __size_of_GetPortTRIS 00A6  
                         __end_of_Port_SetType 1F24                                       ?_SPI_DCS 0060  
                        __size_of_eusart_putch 000E                                ?_Port_TogglePin 0074  
                                ??_eusart_init 0060                     irobot_angle_wait@angleWait 0070  
                                  ??_LCD_Write 0064                              __size_of_delay_ms 006A  
                            __size_of_delay_us 0052                             __end_of_Motor_Init 3D0E  
                          __CFG_CCP2MX$DEFAULT 000000                             __end_of_Motor_Move 5FCE  
                           __end_of_Motor_Step 36AC                          Timer2_Init@pFrequency 006D  
                               ?i2_MXK_Release 0001                     __size_of_irobot_angle_wait 0046  
                     Port_CheckPairType@Output 008C              twos_complement_of@complementValue 0060  
                                   ?_ToSegment 0001                       Port_CheckPairType@pDrive 0089  
                     Port_CheckPairType@pInput 0086                                 reverse@tempVar 0064  
                           _MXK_InitTestButton 6392                                     ?_Reset_Low 0001  
                                 ?_Timer0_Init 006D                         __size_of_MXK_DIPSwitch 0018  
                                 ?_Timer2_Init 006D                               ??_HMI_LeftSwitch 0066  
                                 ?_Timer0_Stop 0001                               ___lwdiv@dividend 0060  
                                ??_irobot_leds 0073                                  ??_irobot_init 0061  
                              ??_irobot_rotate 0081                                  ??_irobot_move 0074  
                                _lStepFunction 00BF                        __size_of_MXK_TestButton 0018  
                            Byte_SetPair@pPair 006D                               ??_HMI_DownSwitch 0066  
                                    __pintcode 1408                                  __pmediumconst FC98  
                                 ?_Motor_Speed 007B                          ??_Console_ResetCursor 0060  
                                     ?___fldiv 006E                                       ?___awdiv 0060  
                                    __ptext100 620A                                      __ptext101 60A0  
                                    __ptext110 589E                                      __ptext102 3D0E  
                                    __ptext111 55E4                                      __ptext103 6374  
                                    __ptext120 5B78                                      __ptext112 5014  
                                    __ptext104 663C                                      __ptext121 4E84  
                                    __ptext113 629C                                      __ptext105 6392  
                                    __ptext130 649E                                      __ptext122 652A  
                                    __ptext114 432C                                      __ptext106 26BE  
                                    __ptext131 64B6                                      __ptext123 6642  
                                    __ptext115 4DFA                                      __ptext107 1AA4  
                                    __ptext140 3B60                                      __ptext132 64CE  
                                    __ptext124 6626                                      __ptext116 4F0E  
                                    __ptext108 5C94                                      __ptext141 54A4  
                                    __ptext133 64E6                                      __ptext125 4038  
                                    __ptext117 5090                                      __ptext109 627A  
                                    __ptext150 5EE0                                      __ptext142 57E0  
                                    __ptext134 64FE                                      __ptext126 5354  
                                    __ptext118 606E                                      __ptext151 63B0  
                                    __ptext143 510A                                      __ptext135 5AE6  
                                    __ptext127 3026                                      __ptext119 6406  
                                    __ptext160 664E                                      __ptext152 4B1C  
                                    __ptext144 4272                                      __ptext136 6130  
                                    __ptext128 646E                                      __ptext161 65EC  
                                    __ptext153 571A                                      __ptext145 1820  
                                    __ptext137 1404                                      __ptext129 6486  
                                    __ptext170 65BA                                      __ptext162 4694  
                                    __ptext154 5CDA                                      __ptext146 4C50  
                                    __ptext138 5F1E                                      __ptext171 0000  
                                    __ptext163 6100                                      __ptext155 660C  
                                    __ptext147 5BC0                                      __ptext139 61E0  
              __end_of_irobot_query_and_update 2D34                                      __ptext164 643C  
                                    __ptext156 6648                                      __ptext148 60D0  
                                    __ptext165 5182                                      __ptext149 3EB2  
                                    __ptext166 5A9A                                      __ptext158 615E  
                                    _pShiftVal 00D4                                      __ptext167 6004  
                                    __ptext159 37B8                                      __ptext168 5DE6  
                                    __ptext169 6654                                       ?___flmul 0087  
                                     ?___fltol 00B2                                       ?___lldiv 0060  
                                   ?_Port_Init 00A0                           Timer0_Init@pCPUClock 0073  
                                     ?___lwdiv 0060                                       ?___lwmod 0067  
                          ?_MXK_InitTestButton 0001                              ?_Console_FormFeed 0001  
                            _GetPortProperties 488A                                       ?_getMode 0001  
                                 _eusart_getch 6616                    __end_ofTimer0_Init@PRESCALE FD5B  
                              _get_packet_size 564E                                   _eusart_putch 6590  
                           ??_Console_FormFeed 0060                                _HMI_SetSegments 4272  
                           ?_GetPortProperties 0060                               Event_NULL@pState 0001  
                     __size_of_Event_DIPSwitch 002E                          __size_of_Set_Rotation 0098  
                              ?_ADC_SetChannel 0001                                  ??i2_MXK_Queue 0004  
                                  ??_MXK_Queue 0063                    __size_of_irobot_stop_motion 0046  
                                 ?_Port_GetPin 0060                                       _ADC_Init 5090  
                        __end_of_HMI_SetButton 4CE0                           __size_of_Console_Tab 00C2  
                                     ?_reverse 0060                           irobot_move@moveSpeed 0070  
                                 ?_Port_SetPin 006F                          __end_of_HMI_SetNumber 620A  
                             ___lwdiv@quotient 0065                                _HMI_RightSwitch 64CE  
                  __size_of_ADC_ConversionTime 0048                                 __size_of_mode1 0418  
                               __size_of_mode2 013A                                 __size_of_mode3 001A  
                               __size_of_mode4 03CA                            ??_GetPortProperties 0062  
                      __end_of_Console_NewLine 4B1C                           ??_MXK_InitTestButton 008D  
                           Byte_GetPair@pInput 0069                                 __size_of_putch 000E  
                      __end_of_HMI_InitButtons 6642                              i2Port_SetPin@Type 0014  
                         _irobot_move_straight 6456                              i2Port_SetPin@pPin 0012  
                               i2_Byte_GetPair 643C                                       _LCD_Fill 5950  
                                     _LCD_Init 2EB4                                 ___wmul@product 0064  
                                     _HMIBoard 0320                                 i2_Byte_GetZone 5182  
                                     _LED_Init 577E                                      delay_ms@u 0062  
                           Button_Poll@pButton 007B                                      delay_us@u 0062  
                                     _HMI_Init 2134                                       _HMI_Poll 5354  
                           MXK_Queue@pCallback 0060                                       _IPR1bits 000F9F  
                                     _IPR3bits 000FA5                                       _PIE1bits 000F9D  
                          __end_of_eusart_init 631A                                       _PIE3bits 000FA3  
                  __end_of_Console_ClearCursor 5DE6                       __size_of_Configure_GPIOs 0070  
                         __size_of_Byte_GetBit 0034                              Byte_SetQuad@pQuad 006D  
                                     i2u501_40 51EC                                       i2u501_45 51E8  
                                     _PIR1bits 000F9E                                       _PIR3bits 000FA4  
                                     i2u550_44 5AAE                                       i2u550_45 5AAA  
                                     i2u551_44 5AD4                                       i2u551_45 5AD0  
                                     i2u713_40 37FC                                       i2u554_40 5E14  
                                     i2u714_40 3810                                       i2u715_40 3848  
                                     i2u499_40 51A4                                       i2u499_47 519A  
                         __size_of_Byte_SetBit 0064                                       _RCONbits 000FD0  
                         i2Word_GetPair@pInput 000D                                    _mode1$15583 03F4  
                             __CFG_WDTPS$32768 000000                     irobot_song_play@songNumber 0061  
                             HMI_SetBar@pValue 0060                              Button_Init@pInput 009B  
                      __size_of_SPI_DisableISR 0028                                    _mode4$15584 03F4  
                                     _SSP1CON1 000FC6                              ??_Port_SetPinType 008A  
                                     _SSP1CON2 000FC5                                       _SSP2CON1 000F6C  
                                     _SSP2CON2 000F6B                          __size_of_ISR_Function 00A2  
                        __size_of_Timer0_Clear 000C                                       _SSP1STAT 000FC7  
                    __end_of_GetPortProperties 4930                                       _SSP2STAT 000F6D  
                                 _Set_Rotation 4BB8                          __size_of_Timer2_Clear 0008  
                         __end_of_MXK_SwitchTo 5DA6                             _Port_CheckPairType 55E4  
                                     _MXK_Init 2D34                          __size_of_Timer0_Start 0026  
                              MXK_SwitchTo@CUR 0066                          __end_of_ADC_Calibrate 653E  
                          __end_of_irobot_leds 5950                                       _SPI_Init 04A6  
                          __end_of_irobot_init 6590                       __end_of_Event_TestButton 5F5A  
                                     _SPI_Send 5438                            __end_of_irobot_move 4492  
                                    _rx_assign 38B8                                     _ADCON0bits 000FC2  
                             __size_of_ADC_Off 0008                                     _ADCON1bits 000FC1  
                             ?_Set_Addr_Window 0065                              ___wmul@multiplier 0060  
                             ?_sort_iRBumpDrop 0001                              Byte_GetBit@Output 0064  
                                   printf@flag 007F                           Timer2_Init@pCPUClock 0076  
                   __size_of_LCD_FillRectangle 0074                           __size_of_Button_Init 00D4  
                         __end_of_SPI_MaxSpeed 52E0                                     printf@prec 007E  
                        Motor_Speed@pFrequency 007D                              Byte_GetBit@pInput 0060  
                          Port_SetPinType@pPin 0088                           __size_of_Button_Poll 0166  
                                _MXK_DIPSwitch 646E                             _Port_CheckQuadType 589E  
                          ?_Port_CheckPairType 0086                           __end_of_SPI_MinSpeed 5354  
                                ??_MXK_Dequeue 0076                               __size_of_LED_Set 0050  
                       __size_ofi2_Byte_SetBit 004C                             _Port_CheckPortType 5B30  
                         __end_of_update_angle 6562                          Button_Poll@pIncrement 007D  
                      PortProperty_Valid@F6830 FD5B                           __end_ofi2_Motor_Step 38B8  
                              ??i2_MXK_Release 0001                   __size_of_irobot_led_power_on 001C  
                                    copy_data0 44A6                                      copy_data1 44C6  
                                    copy_data2 44E6                                  ??_MXK_Release 0060  
                       __end_ofi2_Byte_GetPair 6456                      __size_of_Port_SetQuadType 0256  
                             __size_of_SPI_DCS 0030                            ?_Port_CheckQuadType 008F  
                        ?_irobot_move_straight 0079                         __end_ofi2_Byte_GetZone 51F8  
                          __end_ofi2_MXK_Queue 65C8                                      mode2@dist 008C  
                          ?_Port_CheckPortType 0096                                itos@destination 006E  
                                     _InitList FC99                     __end_of_irobot_init_song_0 62DE  
                         _Motor_Step$intlevel0 358C                                       _Mode_Set 6562  
                           Port_GetQuad@Output 0065                              ??_update_distance 007D  
                                  ??_ToSegment 0060                                   _ISR_Function 1408  
                                 _Timer0_Clear 65D4                             Port_GetQuad@pInput 0060  
                                 _Timer2_Clear 661E                           __end_of_Word_GetPair 5F1E  
                                     _lCBuffer 0400                           ??_Port_CheckPairType 008A  
                                  ??_Reset_Low 0074                                       __Hrparam 0000  
                                 _Timer0_Start 6232                                   OutSeg@pInput 0066  
                               _Console_Render 1F24                                       __Lrparam 0000  
                              Timer2_Init@RDIV 0072                                       _iRCliffL 0034  
                                     _iRCliffR 0031                              _stepsToMinDegrees 0300  
                               LCD_Write@value 0064                                       _Port_Set 1466  
                                 OutSeg@segset 003E                                      rand@screw 003B  
                         __end_of_Word_SetPair 5CDA                        __end_of_get_packet_size 56B4  
                                  ??_Port_Init 00A3                        __end_of_HMI_SetSegments 432C  
                         ??_Port_CheckQuadType 0093                               __size_of___fldiv 03C0  
                             _irobot_song_play 6516                          __size_of_Port_GetQuad 004A  
                             __size_of___awdiv 00BE                               __size_of___flmul 04A6  
                             __size_of___fltol 010C                               __size_of___lldiv 00BC  
                            _MXK_BlockSwitchTo 5EA2                               _irobot_rotate_to 618C  
                             __size_of___lwdiv 0078                           ??_Port_CheckPortType 0099  
                             __size_of___lwmod 0062                                       _lBufferX 00E8  
                                     _lBufferY 00E7                            Timer2_Init@PRESCALE FD82  
                                   ?_rx_assign 0061                                LCD_Fill@pColour 0069  
                           ?_MXK_BlockSwitchTo 0001                      __size_ofi2_Timer0_Restart 000C  
                                     _lCurrent 00DA                               __size_of_getMode 00C0  
                      __end_of_HMI_RightSwitch 64E6                         Byte_GetZone@pChunkSize 0064  
                               ?_MXK_DIPSwitch 0001                         Byte_SetZone@pChunkSize 0064  
                        __size_of_Port_SetType 022A                                  reverse@length 0062  
                                    itos@input 006C                          i2MXK_SwitchTo@pModule 0008  
                                     ___xxtofl 232E                            irobot_move@isScript 0078  
                           Motor_Init@pAddress 008F                                       _delay_ms 557A  
                                     _delay_us 59A8                                       _clearall 00E9  
                              ___lwdiv@divisor 0062                                ___lwdiv@counter 0064  
                              Port_GetPin@pPin 0062                                       __ptext10 5F5A  
                                     __ptext11 6550                                       __ptext20 3F76  
                                     __ptext12 2BAE                                       __ptext21 40F8  
                                     __ptext13 38B8                                       __ptext30 5D20  
                                     __ptext22 56B4                                       __ptext14 4D6E  
                                     __ptext31 6516                                       __ptext23 4A7A  
                                     __ptext15 564E                                       __ptext40 49D6  
                                     __ptext32 36AC                                       __ptext24 4CE0  
                                     __ptext16 6616                                       __ptext41 5FCE  
                                     __ptext33 61B6                                       __ptext25 62DE  
                                     __ptext17 24FC                                       __ptext50 58F8  
                                     __ptext42 3DE2                                       __ptext34 5F94  
                                     __ptext26 5842                                       __ptext18 6574  
                                     __ptext51 5510                                       __ptext43 603A  
                                     __ptext35 6232                                       __ptext27 5DA6  
                                     __ptext19 287E                                       __ptext60 2A1C  
                                     __ptext52 62BE                                       __ptext44 3A88  
                                     __ptext36 5E26                                       __ptext28 5C4E  
                                     __ptext61 1CFA                                       __ptext53 6582  
                                     __ptext45 232E                                       __ptext37 4F92  
                                     __ptext29 43E2                                       __ptext70 5E64  
                                     __ptext62 5B30                                       __ptext54 6590  
                                     __ptext46 0000                                       __ptext38 1F24  
                                     __ptext71 3586                                       __ptext63 1466  
                                     __ptext55 62FC                                       __ptext47 10A6  
                                     __ptext39 51F8                            ??_MXK_BlockSwitchTo 0066  
                                     __ptext80 4BB8                                       __ptext72 6636  
                                     __ptext64 659E                                       __ptext56 3C38  
                                     __ptext48 473E                                       __ptext81 5950  
                                     __ptext73 65E0                                       __ptext65 47E4  
                                     __ptext57 318C                                       __ptext49 63CE  
                                     __ptext90 557A                                       __ptext82 45EA  
                                     __ptext74 5D64                                       __ptext66 488A  
                                     __ptext58 65D4                                       __ptext91 6338  
                                     __ptext83 631A                                       __ptext75 63EA  
                                     __ptext67 4930                                       __ptext59 2D34  
                                     __ptext92 6356                                       __ptext84 6258  
                                     __ptext76 65AC                                       __ptext68 577E  
                                     __ptext93 6602                                       __ptext85 5438  
                                     __ptext77 5EA2                                       __ptext69 59FA  
                                     __ptext94 2134                                       __ptext86 6562  
                                     __ptext78 59A8                                       __ptext95 52E0  
                                     __ptext87 53C8                                       __ptext79 2EB4  
                                     __ptext96 04A6                                       __ptext88 526C  
                                     __ptext97 32EC                                       __ptext89 5A4A  
                                     __ptext98 41B6                                       __ptext99 661E  
                                 _SSP1CON1bits 000FC6                               __size_of_reverse 006C  
                                 _SSP1CON2bits 000FC5                    __size_of_PortProperty_Valid 007C  
                           i2Byte_GetZone@MASK 0007                              _ADC_ClockDivision 4E84  
                                 ?_ADC_SetupIO 0001                                   _SSP2CON1bits 000F6C  
                                 _SSP2CON2bits 000F6B                                    _eusart_init 62FC  
                              ?i2_Byte_GetPair 000A                               ?_Console_NewLine 0001  
                            ??_Event_DIPSwitch 0079                                ?i2_Byte_GetZone 0001  
                           i2Byte_GetZone@pMax 0003                               ?_HMI_InitButtons 0001  
                           ?_ADC_ClockDivision 0001                                   ?_ADC_Voltage 00A0  
                          __end_of_MXK_Dequeue 5EA2                              HMI_SetSegments@in 0064  
                        Button_Init@pThreshold 009D                                  __size_of_main 00E0  
                                __size_of_init 00A6                                  __size_of_itos 00D8  
                            Byte_GetPair@pPair 006B                         __end_of_Console_Render 2134  
                          i2Port_SetPin@pInput 0010                            i2Port_SetPin@pValue 0013  
                                 _Port_GetQuad 5AE6                            __end_of_MXK_Release 6406  
                               _MXK_TestButton 64FE                                  i2_Byte_SetBit 5A9A  
                          ??_ADC_ClockDivision 0060                                   _iRDistanceSS 0308  
                                  _irobot_leds 58F8                                    _irobot_init 6582  
                          i2Word_GetPair@pPair 000F                                    _irobot_move 43E2  
                               ADC_Voltage@max 00A6                                 ADC_Voltage@ref 00AA  
                    __end_of_MXK_BlockSwitchTo 5EE0                       ?_Console_IncrementCursor 0001  
                         __size_of_Timer0_Init 0160                           __size_of_Timer2_Init 0160  
                                     int$flags 0051                           __size_of_Timer0_Stop 0006  
                                 _Port_SetType 1CFA                                   Port_Set@Type 0086  
                   __size_of_GetPortProperties 00A6                         __size_of_LCD_DrawField 00A4  
                                 _iRDropCaster 002F                    __size_of_load_iRScriptStack 006A  
                            ??_Configure_GPIOs 0095                                      printf@val 0082  
                                 _SSP1STATbits 000FC7                           __size_of_Motor_Speed 002A  
                               Timer0_Init@DIV 0310                                 Timer0_Init@PRE 00E5  
                                 _SSP2STATbits 000F6D                                     _LED_Toggle 5BC0  
                                   _HMI_GetBar 6648                           Button_Init@pGetState 00A2  
                       PortProperty_Valid@Pair 0085                               ??_Port_TogglePin 0077  
                                  _OSCTUNEbits 000F9B                                     _INTCONbits 000FF2  
                       PortProperty_Valid@pPin 0072                                     _HMI_SetBar 660C  
                                   _HMI_Render 5E26                               Byte_SetZone@MASK 006A  
                                  i2_MXK_Queue 65BA                      __end_of_ADC_ClockDivision 4F0E  
                               Timer2_Init@DIV 030C                                 Timer2_Init@PRE 00E3  
                             Byte_SetZone@pMax 0062                         __size_ofi2_Timer0_Stop 0006  
                         __size_of_Port_GetPin 0046                         ??_irobot_move_straight 007B  
               __size_of_update_bump_and_cliff 003A                           Button_Init@pFunction 00A5  
                                     itos@Data 0070                  __end_of_update_bump_and_cliff 5F94  
                           LCD_FillRectangle@i 0075                             LCD_FillRectangle@j 0076  
                         __size_of_Port_SetPin 00C4                                       intlevel2 0000  
                                 reverse@input 0060                         __size_of_HMI_DIPSwitch 0018  
                             ___lwmod@dividend 0067                               ___lldiv@dividend 0060  
                       __end_of_MXK_TestButton 6516                                ?_Console_Render 0001  
                                _iRScriptIndex 0037                        __size_of_LCD_Word_Write 001E  
                               ?i2_Byte_SetBit 0001                                  _iRScriptStack 041E  
                        __size_of_MXK_SwitchTo 0042                       irobot_query_and_update@i 007C  
                     irobot_query_and_update@j 007A                                 _SPI_DisableISR 620A  
                   __end_of_twos_complement_of 5D64                       irobot_rotate@rotateAngle 007D  
                              Port_Init@pInput 00A0                                       printf@ap 0080  
                             ?_get_packet_size 0001                         __size_ofi2_Port_SetPin 00AA  
                     irobot_rotate@rotateSpeed 007F                                     _ISR_Enable 6602  
                             ?_HMI_SetSegments 0061                        Console_MakeField@Column 006C  
                        __size_of_SPI_MaxSpeed 0074                               ??_ADC_SetChannel 0060  
                                SPI_DCS@pInput 0060                          __size_of_SPI_MinSpeed 0074  
                              ??_MXK_DIPSwitch 0066                                    ??_rx_assign 0063  
                        __size_of_update_angle 0012                          __size_ofi2_Motor_Step 0100  
                            ADC_Voltage@pInput 00A0                        Console_MakeField@pInput 006B  
                             ?_HMI_RightSwitch 0001                               ___lldiv@quotient 0068  
                                ??_GetPortPORT 0062                                ___lwmod@divisor 0069  
                                ??_GetPortTRIS 0062                          Timer0_Start@pFunction 0060  
                           Word_SetPair@pInput 006F                                ___lwmod@counter 006B  
                           Word_SetPair@pValue 0072                       ?_irobot_query_and_update 0066  
                             Motor_Init@pMotor 008D                                    _MXK_Dequeue 5E64  
                            ADC_Voltage@output 00AE                                  _distanceTotal 00CE  
                               LED_Toggle@pLED 0078                                  _LCD_DrawField 49D6  
                             _Port_SetQuadType 1AA4                                    _MXK_Release 63EA  
                    __size_of_Console_FormFeed 008E                                   _MXK_SwitchTo 5D64  
                        __size_of_Word_GetPair 003E              irobot_query_and_update@startIndex 007B  
                           Byte_GetZone@Offset 0067                                  ?_Console_Init 0001  
                            Word_SetPair@pPair 0071                                _Port_SetPinType 26BE  
                      __size_of_Timer0_Restart 000C                             Byte_GetZone@Output 0068  
                           Byte_GetZone@pChunk 0063                                ?_MXK_TestButton 0001  
                  __end_of_Console_ResetCursor 62FC                             Byte_GetZone@pInput 0060  
                      __size_ofi2_MXK_SwitchTo 0036                __end_of_Console_IncrementCursor 571A  
                        __size_of_Word_SetPair 0046                         __end_of_SPI_DisableISR 6232  
                                 _SPI_MaxSpeed 526C              irobot_query_and_update@streamSize 0077  
                                 _SPI_MinSpeed 52E0                             Port_Set@TypeActual 0084  
